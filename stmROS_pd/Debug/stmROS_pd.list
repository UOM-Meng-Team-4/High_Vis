
stmROS_pd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012188  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bec  08012328  08012328  00022328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f14  08012f14  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  08012f14  08012f14  00022f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f1c  08012f1c  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012f1c  08012f1c  00022f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012f24  08012f24  00022f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08012f28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010bfc  20000110  08013038  00030110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20010d0c  08013038  00030d0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cd03  00000000  00000000  000301b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000405f  00000000  00000000  0004ceb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  00050f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011e6  00000000  00000000  00052640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d091  00000000  00000000  00053826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b5c1  00000000  00000000  000708b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae65c  00000000  00000000  0008be78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ec4  00000000  00000000  0013a4d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00141398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000110 	.word	0x20000110
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012310 	.word	0x08012310

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000114 	.word	0x20000114
 80001dc:	08012310 	.word	0x08012310

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ce:	f000 b9bb 	b.w	8000648 <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000364:	f000 b970 	b.w	8000648 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9e08      	ldr	r6, [sp, #32]
 8000386:	460d      	mov	r5, r1
 8000388:	4604      	mov	r4, r0
 800038a:	460f      	mov	r7, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4694      	mov	ip, r2
 8000394:	d965      	bls.n	8000462 <__udivmoddi4+0xe2>
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	b143      	cbz	r3, 80003ae <__udivmoddi4+0x2e>
 800039c:	fa02 fc03 	lsl.w	ip, r2, r3
 80003a0:	f1c3 0220 	rsb	r2, r3, #32
 80003a4:	409f      	lsls	r7, r3
 80003a6:	fa20 f202 	lsr.w	r2, r0, r2
 80003aa:	4317      	orrs	r7, r2
 80003ac:	409c      	lsls	r4, r3
 80003ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b2:	fa1f f58c 	uxth.w	r5, ip
 80003b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ba:	0c22      	lsrs	r2, r4, #16
 80003bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003c4:	fb01 f005 	mul.w	r0, r1, r5
 80003c8:	4290      	cmp	r0, r2
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003cc:	eb1c 0202 	adds.w	r2, ip, r2
 80003d0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80003d4:	f080 811c 	bcs.w	8000610 <__udivmoddi4+0x290>
 80003d8:	4290      	cmp	r0, r2
 80003da:	f240 8119 	bls.w	8000610 <__udivmoddi4+0x290>
 80003de:	3902      	subs	r1, #2
 80003e0:	4462      	add	r2, ip
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	b2a4      	uxth	r4, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f2:	fb00 f505 	mul.w	r5, r0, r5
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	d90a      	bls.n	8000410 <__udivmoddi4+0x90>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000402:	f080 8107 	bcs.w	8000614 <__udivmoddi4+0x294>
 8000406:	42a5      	cmp	r5, r4
 8000408:	f240 8104 	bls.w	8000614 <__udivmoddi4+0x294>
 800040c:	4464      	add	r4, ip
 800040e:	3802      	subs	r0, #2
 8000410:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	2100      	movs	r1, #0
 8000418:	b11e      	cbz	r6, 8000422 <__udivmoddi4+0xa2>
 800041a:	40dc      	lsrs	r4, r3
 800041c:	2300      	movs	r3, #0
 800041e:	e9c6 4300 	strd	r4, r3, [r6]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0xbc>
 800042a:	2e00      	cmp	r6, #0
 800042c:	f000 80ed 	beq.w	800060a <__udivmoddi4+0x28a>
 8000430:	2100      	movs	r1, #0
 8000432:	e9c6 0500 	strd	r0, r5, [r6]
 8000436:	4608      	mov	r0, r1
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	fab3 f183 	clz	r1, r3
 8000440:	2900      	cmp	r1, #0
 8000442:	d149      	bne.n	80004d8 <__udivmoddi4+0x158>
 8000444:	42ab      	cmp	r3, r5
 8000446:	d302      	bcc.n	800044e <__udivmoddi4+0xce>
 8000448:	4282      	cmp	r2, r0
 800044a:	f200 80f8 	bhi.w	800063e <__udivmoddi4+0x2be>
 800044e:	1a84      	subs	r4, r0, r2
 8000450:	eb65 0203 	sbc.w	r2, r5, r3
 8000454:	2001      	movs	r0, #1
 8000456:	4617      	mov	r7, r2
 8000458:	2e00      	cmp	r6, #0
 800045a:	d0e2      	beq.n	8000422 <__udivmoddi4+0xa2>
 800045c:	e9c6 4700 	strd	r4, r7, [r6]
 8000460:	e7df      	b.n	8000422 <__udivmoddi4+0xa2>
 8000462:	b902      	cbnz	r2, 8000466 <__udivmoddi4+0xe6>
 8000464:	deff      	udf	#255	; 0xff
 8000466:	fab2 f382 	clz	r3, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	f040 8090 	bne.w	8000590 <__udivmoddi4+0x210>
 8000470:	1a8a      	subs	r2, r1, r2
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	2101      	movs	r1, #1
 800047c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000480:	fb07 2015 	mls	r0, r7, r5, r2
 8000484:	0c22      	lsrs	r2, r4, #16
 8000486:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800048a:	fb0e f005 	mul.w	r0, lr, r5
 800048e:	4290      	cmp	r0, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x124>
 8000492:	eb1c 0202 	adds.w	r2, ip, r2
 8000496:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0x122>
 800049c:	4290      	cmp	r0, r2
 800049e:	f200 80cb 	bhi.w	8000638 <__udivmoddi4+0x2b8>
 80004a2:	4645      	mov	r5, r8
 80004a4:	1a12      	subs	r2, r2, r0
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ac:	fb07 2210 	mls	r2, r7, r0, r2
 80004b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004b4:	fb0e fe00 	mul.w	lr, lr, r0
 80004b8:	45a6      	cmp	lr, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x14e>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x14c>
 80004c6:	45a6      	cmp	lr, r4
 80004c8:	f200 80bb 	bhi.w	8000642 <__udivmoddi4+0x2c2>
 80004cc:	4610      	mov	r0, r2
 80004ce:	eba4 040e 	sub.w	r4, r4, lr
 80004d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004d6:	e79f      	b.n	8000418 <__udivmoddi4+0x98>
 80004d8:	f1c1 0720 	rsb	r7, r1, #32
 80004dc:	408b      	lsls	r3, r1
 80004de:	fa22 fc07 	lsr.w	ip, r2, r7
 80004e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004e6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ea:	fa20 f307 	lsr.w	r3, r0, r7
 80004ee:	40fd      	lsrs	r5, r7
 80004f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004f4:	4323      	orrs	r3, r4
 80004f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004fa:	fa1f fe8c 	uxth.w	lr, ip
 80004fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000502:	0c1c      	lsrs	r4, r3, #16
 8000504:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000508:	fb08 f50e 	mul.w	r5, r8, lr
 800050c:	42a5      	cmp	r5, r4
 800050e:	fa02 f201 	lsl.w	r2, r2, r1
 8000512:	fa00 f001 	lsl.w	r0, r0, r1
 8000516:	d90b      	bls.n	8000530 <__udivmoddi4+0x1b0>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000520:	f080 8088 	bcs.w	8000634 <__udivmoddi4+0x2b4>
 8000524:	42a5      	cmp	r5, r4
 8000526:	f240 8085 	bls.w	8000634 <__udivmoddi4+0x2b4>
 800052a:	f1a8 0802 	sub.w	r8, r8, #2
 800052e:	4464      	add	r4, ip
 8000530:	1b64      	subs	r4, r4, r5
 8000532:	b29d      	uxth	r5, r3
 8000534:	fbb4 f3f9 	udiv	r3, r4, r9
 8000538:	fb09 4413 	mls	r4, r9, r3, r4
 800053c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000540:	fb03 fe0e 	mul.w	lr, r3, lr
 8000544:	45a6      	cmp	lr, r4
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x1da>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000550:	d26c      	bcs.n	800062c <__udivmoddi4+0x2ac>
 8000552:	45a6      	cmp	lr, r4
 8000554:	d96a      	bls.n	800062c <__udivmoddi4+0x2ac>
 8000556:	3b02      	subs	r3, #2
 8000558:	4464      	add	r4, ip
 800055a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800055e:	fba3 9502 	umull	r9, r5, r3, r2
 8000562:	eba4 040e 	sub.w	r4, r4, lr
 8000566:	42ac      	cmp	r4, r5
 8000568:	46c8      	mov	r8, r9
 800056a:	46ae      	mov	lr, r5
 800056c:	d356      	bcc.n	800061c <__udivmoddi4+0x29c>
 800056e:	d053      	beq.n	8000618 <__udivmoddi4+0x298>
 8000570:	b156      	cbz	r6, 8000588 <__udivmoddi4+0x208>
 8000572:	ebb0 0208 	subs.w	r2, r0, r8
 8000576:	eb64 040e 	sbc.w	r4, r4, lr
 800057a:	fa04 f707 	lsl.w	r7, r4, r7
 800057e:	40ca      	lsrs	r2, r1
 8000580:	40cc      	lsrs	r4, r1
 8000582:	4317      	orrs	r7, r2
 8000584:	e9c6 7400 	strd	r7, r4, [r6]
 8000588:	4618      	mov	r0, r3
 800058a:	2100      	movs	r1, #0
 800058c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000590:	f1c3 0120 	rsb	r1, r3, #32
 8000594:	fa02 fc03 	lsl.w	ip, r2, r3
 8000598:	fa20 f201 	lsr.w	r2, r0, r1
 800059c:	fa25 f101 	lsr.w	r1, r5, r1
 80005a0:	409d      	lsls	r5, r3
 80005a2:	432a      	orrs	r2, r5
 80005a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005a8:	fa1f fe8c 	uxth.w	lr, ip
 80005ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80005b0:	fb07 1510 	mls	r5, r7, r0, r1
 80005b4:	0c11      	lsrs	r1, r2, #16
 80005b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ba:	fb00 f50e 	mul.w	r5, r0, lr
 80005be:	428d      	cmp	r5, r1
 80005c0:	fa04 f403 	lsl.w	r4, r4, r3
 80005c4:	d908      	bls.n	80005d8 <__udivmoddi4+0x258>
 80005c6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005ce:	d22f      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 80005d0:	428d      	cmp	r5, r1
 80005d2:	d92d      	bls.n	8000630 <__udivmoddi4+0x2b0>
 80005d4:	3802      	subs	r0, #2
 80005d6:	4461      	add	r1, ip
 80005d8:	1b49      	subs	r1, r1, r5
 80005da:	b292      	uxth	r2, r2
 80005dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005e0:	fb07 1115 	mls	r1, r7, r5, r1
 80005e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005e8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ec:	4291      	cmp	r1, r2
 80005ee:	d908      	bls.n	8000602 <__udivmoddi4+0x282>
 80005f0:	eb1c 0202 	adds.w	r2, ip, r2
 80005f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005f8:	d216      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 80005fa:	4291      	cmp	r1, r2
 80005fc:	d914      	bls.n	8000628 <__udivmoddi4+0x2a8>
 80005fe:	3d02      	subs	r5, #2
 8000600:	4462      	add	r2, ip
 8000602:	1a52      	subs	r2, r2, r1
 8000604:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000608:	e738      	b.n	800047c <__udivmoddi4+0xfc>
 800060a:	4631      	mov	r1, r6
 800060c:	4630      	mov	r0, r6
 800060e:	e708      	b.n	8000422 <__udivmoddi4+0xa2>
 8000610:	4639      	mov	r1, r7
 8000612:	e6e6      	b.n	80003e2 <__udivmoddi4+0x62>
 8000614:	4610      	mov	r0, r2
 8000616:	e6fb      	b.n	8000410 <__udivmoddi4+0x90>
 8000618:	4548      	cmp	r0, r9
 800061a:	d2a9      	bcs.n	8000570 <__udivmoddi4+0x1f0>
 800061c:	ebb9 0802 	subs.w	r8, r9, r2
 8000620:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000624:	3b01      	subs	r3, #1
 8000626:	e7a3      	b.n	8000570 <__udivmoddi4+0x1f0>
 8000628:	4645      	mov	r5, r8
 800062a:	e7ea      	b.n	8000602 <__udivmoddi4+0x282>
 800062c:	462b      	mov	r3, r5
 800062e:	e794      	b.n	800055a <__udivmoddi4+0x1da>
 8000630:	4640      	mov	r0, r8
 8000632:	e7d1      	b.n	80005d8 <__udivmoddi4+0x258>
 8000634:	46d0      	mov	r8, sl
 8000636:	e77b      	b.n	8000530 <__udivmoddi4+0x1b0>
 8000638:	3d02      	subs	r5, #2
 800063a:	4462      	add	r2, ip
 800063c:	e732      	b.n	80004a4 <__udivmoddi4+0x124>
 800063e:	4608      	mov	r0, r1
 8000640:	e70a      	b.n	8000458 <__udivmoddi4+0xd8>
 8000642:	4464      	add	r4, ip
 8000644:	3802      	subs	r0, #2
 8000646:	e742      	b.n	80004ce <__udivmoddi4+0x14e>

08000648 <__aeabi_idiv0>:
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000658:	f005 ffda 	bl	8006610 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800065c:	4b58      	ldr	r3, [pc, #352]	; (80007c0 <pvPortMallocMicroROS+0x174>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d101      	bne.n	8000668 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000664:	f000 f980 	bl	8000968 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000668:	4b56      	ldr	r3, [pc, #344]	; (80007c4 <pvPortMallocMicroROS+0x178>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4013      	ands	r3, r2
 8000670:	2b00      	cmp	r3, #0
 8000672:	f040 808e 	bne.w	8000792 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d01d      	beq.n	80006b8 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800067c:	2208      	movs	r2, #8
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	2b00      	cmp	r3, #0
 800068c:	d014      	beq.n	80006b8 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f023 0307 	bic.w	r3, r3, #7
 8000694:	3308      	adds	r3, #8
 8000696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d00a      	beq.n	80006b8 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a6:	f383 8811 	msr	BASEPRI, r3
 80006aa:	f3bf 8f6f 	isb	sy
 80006ae:	f3bf 8f4f 	dsb	sy
 80006b2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006b4:	bf00      	nop
 80006b6:	e7fe      	b.n	80006b6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d069      	beq.n	8000792 <pvPortMallocMicroROS+0x146>
 80006be:	4b42      	ldr	r3, [pc, #264]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d864      	bhi.n	8000792 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006c8:	4b40      	ldr	r3, [pc, #256]	; (80007cc <pvPortMallocMicroROS+0x180>)
 80006ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006cc:	4b3f      	ldr	r3, [pc, #252]	; (80007cc <pvPortMallocMicroROS+0x180>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006d2:	e004      	b.n	80006de <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80006d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d903      	bls.n	80006f0 <pvPortMallocMicroROS+0xa4>
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1f1      	bne.n	80006d4 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006f0:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <pvPortMallocMicroROS+0x174>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d04b      	beq.n	8000792 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006fa:	6a3b      	ldr	r3, [r7, #32]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2208      	movs	r2, #8
 8000700:	4413      	add	r3, r2
 8000702:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	685a      	ldr	r2, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	1ad2      	subs	r2, r2, r3
 8000714:	2308      	movs	r3, #8
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	429a      	cmp	r2, r3
 800071a:	d91f      	bls.n	800075c <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800071c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00a      	beq.n	8000744 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	613b      	str	r3, [r7, #16]
}
 8000740:	bf00      	nop
 8000742:	e7fe      	b.n	8000742 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	1ad2      	subs	r2, r2, r3
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000756:	69b8      	ldr	r0, [r7, #24]
 8000758:	f000 f968 	bl	8000a2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 8000768:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <pvPortMallocMicroROS+0x184>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	429a      	cmp	r2, r3
 8000774:	d203      	bcs.n	800077e <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <pvPortMallocMicroROS+0x184>)
 800077c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	685a      	ldr	r2, [r3, #4]
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <pvPortMallocMicroROS+0x178>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	431a      	orrs	r2, r3
 8000788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800078c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000792:	f005 ff4b 	bl	800662c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00a      	beq.n	80007b6 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80007a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007a4:	f383 8811 	msr	BASEPRI, r3
 80007a8:	f3bf 8f6f 	isb	sy
 80007ac:	f3bf 8f4f 	dsb	sy
 80007b0:	60fb      	str	r3, [r7, #12]
}
 80007b2:	bf00      	nop
 80007b4:	e7fe      	b.n	80007b4 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80007b6:	69fb      	ldr	r3, [r7, #28]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3728      	adds	r7, #40	; 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20003d34 	.word	0x20003d34
 80007c4:	20003d40 	.word	0x20003d40
 80007c8:	20003d38 	.word	0x20003d38
 80007cc:	20003d2c 	.word	0x20003d2c
 80007d0:	20003d3c 	.word	0x20003d3c

080007d4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d048      	beq.n	8000878 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007e6:	2308      	movs	r3, #8
 80007e8:	425b      	negs	r3, r3
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	4413      	add	r3, r2
 80007ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	685a      	ldr	r2, [r3, #4]
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <vPortFreeMicroROS+0xac>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4013      	ands	r3, r2
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10a      	bne.n	8000818 <vPortFreeMicroROS+0x44>
	__asm volatile
 8000802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000806:	f383 8811 	msr	BASEPRI, r3
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	f3bf 8f4f 	dsb	sy
 8000812:	60fb      	str	r3, [r7, #12]
}
 8000814:	bf00      	nop
 8000816:	e7fe      	b.n	8000816 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00a      	beq.n	8000836 <vPortFreeMicroROS+0x62>
	__asm volatile
 8000820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000824:	f383 8811 	msr	BASEPRI, r3
 8000828:	f3bf 8f6f 	isb	sy
 800082c:	f3bf 8f4f 	dsb	sy
 8000830:	60bb      	str	r3, [r7, #8]
}
 8000832:	bf00      	nop
 8000834:	e7fe      	b.n	8000834 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <vPortFreeMicroROS+0xac>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4013      	ands	r3, r2
 8000840:	2b00      	cmp	r3, #0
 8000842:	d019      	beq.n	8000878 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d115      	bne.n	8000878 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <vPortFreeMicroROS+0xac>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	43db      	mvns	r3, r3
 8000856:	401a      	ands	r2, r3
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800085c:	f005 fed8 	bl	8006610 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <vPortFreeMicroROS+0xb0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4413      	add	r3, r2
 800086a:	4a06      	ldr	r2, [pc, #24]	; (8000884 <vPortFreeMicroROS+0xb0>)
 800086c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800086e:	6938      	ldr	r0, [r7, #16]
 8000870:	f000 f8dc 	bl	8000a2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000874:	f005 feda 	bl	800662c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20003d40 	.word	0x20003d40
 8000884:	20003d38 	.word	0x20003d38

08000888 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000888:	b480      	push	{r7}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000894:	2308      	movs	r3, #8
 8000896:	425b      	negs	r3, r3
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	4413      	add	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <getBlockSize+0x38>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	43db      	mvns	r3, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]

	return count;
 80008b0:	68fb      	ldr	r3, [r7, #12]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	371c      	adds	r7, #28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20003d40 	.word	0x20003d40

080008c4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008ce:	f005 fe9f 	bl	8006610 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f7ff feba 	bl	800064c <pvPortMallocMicroROS>
 80008d8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d017      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d014      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffce 	bl	8000888 <getBlockSize>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2208      	movs	r2, #8
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d201      	bcs.n	8000900 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	68b8      	ldr	r0, [r7, #8]
 8000906:	f010 fe0a 	bl	801151e <memcpy>

		vPortFreeMicroROS(pv);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ff62 	bl	80007d4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000910:	f005 fe8c 	bl	800662c <xTaskResumeAll>

	return newmem;
 8000914:	68bb      	ldr	r3, [r7, #8]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000928:	f005 fe72 	bl	8006610 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	fb02 f303 	mul.w	r3, r2, r3
 8000934:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f7ff fe88 	bl	800064c <pvPortMallocMicroROS>
 800093c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000942:	e004      	b.n	800094e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	613a      	str	r2, [r7, #16]
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	1e5a      	subs	r2, r3, #1
 8000952:	617a      	str	r2, [r7, #20]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1f5      	bne.n	8000944 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000958:	f005 fe68 	bl	800662c <xTaskResumeAll>
  	return mem;
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800096e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000972:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <prvHeapInit+0xac>)
 8000976:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00c      	beq.n	800099c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3307      	adds	r3, #7
 8000986:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f023 0307 	bic.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	4a1f      	ldr	r2, [pc, #124]	; (8000a14 <prvHeapInit+0xac>)
 8000998:	4413      	add	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <prvHeapInit+0xb0>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <prvHeapInit+0xb0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009b4:	2208      	movs	r2, #8
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f023 0307 	bic.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <prvHeapInit+0xb4>)
 80009c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <prvHeapInit+0xb4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <prvHeapInit+0xb4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	1ad2      	subs	r2, r2, r3
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <prvHeapInit+0xb4>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <prvHeapInit+0xb8>)
 80009f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <prvHeapInit+0xbc>)
 80009fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <prvHeapInit+0xc0>)
 8000a02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	2000012c 	.word	0x2000012c
 8000a18:	20003d2c 	.word	0x20003d2c
 8000a1c:	20003d34 	.word	0x20003d34
 8000a20:	20003d3c 	.word	0x20003d3c
 8000a24:	20003d38 	.word	0x20003d38
 8000a28:	20003d40 	.word	0x20003d40

08000a2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <prvInsertBlockIntoFreeList+0xac>)
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e002      	b.n	8000a40 <prvInsertBlockIntoFreeList+0x14>
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d8f7      	bhi.n	8000a3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4413      	add	r3, r2
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d108      	bne.n	8000a6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	441a      	add	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	441a      	add	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d118      	bne.n	8000ab4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d00d      	beq.n	8000aaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	441a      	add	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	e008      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e003      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d002      	beq.n	8000aca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20003d2c 	.word	0x20003d2c
 8000adc:	20003d34 	.word	0x20003d34

08000ae0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000aee:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af4:	4904      	ldr	r1, [pc, #16]	; (8000b08 <cubemx_transport_open+0x28>)
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f003 fa7c 	bl	8003ff4 <HAL_UART_Receive_DMA>
    return true;
 8000afc:	2301      	movs	r3, #1
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20003d44 	.word	0x20003d44

08000b0c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b1a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f003 fa8e 	bl	800403e <HAL_UART_DMAStop>
    return true;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b40:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b20      	cmp	r3, #32
 8000b4c:	d11c      	bne.n	8000b88 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	461a      	mov	r2, r3
 8000b54:	68b9      	ldr	r1, [r7, #8]
 8000b56:	6978      	ldr	r0, [r7, #20]
 8000b58:	f003 f9dc 	bl	8003f14 <HAL_UART_Transmit_DMA>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000b60:	e002      	b.n	8000b68 <cubemx_transport_write+0x3c>
            osDelay(1);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f004 fd08 	bl	8005578 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000b68:	7cfb      	ldrb	r3, [r7, #19]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d105      	bne.n	8000b7a <cubemx_transport_write+0x4e>
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b20      	cmp	r3, #32
 8000b78:	d1f3      	bne.n	8000b62 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8000b7a:	7cfb      	ldrb	r3, [r7, #19]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <cubemx_transport_write+0x58>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	e002      	b.n	8000b8a <cubemx_transport_write+0x5e>
 8000b84:	2300      	movs	r3, #0
 8000b86:	e000      	b.n	8000b8a <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8000b88:	2300      	movs	r3, #0
    }
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
 8000ba0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000ba8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bae:	b672      	cpsid	i
}
 8000bb0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000bbe:	4a1c      	ldr	r2, [pc, #112]	; (8000c30 <cubemx_transport_read+0x9c>)
 8000bc0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000bc2:	b662      	cpsie	i
}
 8000bc4:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f004 fcd3 	bl	8005578 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <cubemx_transport_read+0xa0>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <cubemx_transport_read+0x9c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d103      	bne.n	8000be6 <cubemx_transport_read+0x52>
 8000bde:	69fa      	ldr	r2, [r7, #28]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	dbe3      	blt.n	8000bae <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000bea:	e011      	b.n	8000c10 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <cubemx_transport_read+0xa0>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	68b9      	ldr	r1, [r7, #8]
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	440b      	add	r3, r1
 8000bf6:	4910      	ldr	r1, [pc, #64]	; (8000c38 <cubemx_transport_read+0xa4>)
 8000bf8:	5c8a      	ldrb	r2, [r1, r2]
 8000bfa:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <cubemx_transport_read+0xa0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <cubemx_transport_read+0xa0>)
 8000c08:	6013      	str	r3, [r2, #0]
        wrote++;
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <cubemx_transport_read+0xa0>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <cubemx_transport_read+0x9c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d003      	beq.n	8000c24 <cubemx_transport_read+0x90>
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d3e3      	bcc.n	8000bec <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000c24:	69bb      	ldr	r3, [r7, #24]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3720      	adds	r7, #32
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20004548 	.word	0x20004548
 8000c34:	20004544 	.word	0x20004544
 8000c38:	20003d44 	.word	0x20003d44

08000c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c40:	f000 feee 	bl	8001a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c44:	f000 f81e 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c48:	f000 f978 	bl	8000f3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c4c:	f000 f94e 	bl	8000eec <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c50:	f000 f922 	bl	8000e98 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000c54:	f000 f880 	bl	8000d58 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000c58:	f000 f8d0 	bl	8000dfc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c5c:	f004 fbb0 	bl	80053c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c60:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <main+0x3c>)
 8000c62:	2100      	movs	r1, #0
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <main+0x40>)
 8000c66:	f004 fbf5 	bl	8005454 <osThreadNew>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <main+0x44>)
 8000c6e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c70:	f004 fbca 	bl	8005408 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <main+0x38>
 8000c76:	bf00      	nop
 8000c78:	080123c0 	.word	0x080123c0
 8000c7c:	0800101d 	.word	0x0800101d
 8000c80:	200046e4 	.word	0x200046e4

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b094      	sub	sp, #80	; 0x50
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0320 	add.w	r3, r7, #32
 8000c8e:	2230      	movs	r2, #48	; 0x30
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f010 fb24 	bl	80112e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <SystemClock_Config+0xcc>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	4a27      	ldr	r2, [pc, #156]	; (8000d50 <SystemClock_Config+0xcc>)
 8000cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb8:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <SystemClock_Config+0xcc>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <SystemClock_Config+0xd0>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cd0:	4a20      	ldr	r2, [pc, #128]	; (8000d54 <SystemClock_Config+0xd0>)
 8000cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <SystemClock_Config+0xd0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000cfc:	2354      	movs	r3, #84	; 0x54
 8000cfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d00:	2302      	movs	r3, #2
 8000d02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d04:	2307      	movs	r3, #7
 8000d06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d08:	f107 0320 	add.w	r3, r7, #32
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f001 ffad 	bl	8002c6c <HAL_RCC_OscConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d18:	f000 fa1c 	bl	8001154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d20:	2302      	movs	r3, #2
 8000d22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	2102      	movs	r1, #2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f002 fa0f 	bl	800315c <HAL_RCC_ClockConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d44:	f000 fa06 	bl	8001154 <Error_Handler>
  }
}
 8000d48:	bf00      	nop
 8000d4a:	3750      	adds	r7, #80	; 0x50
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40007000 	.word	0x40007000

08000d58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5e:	463b      	mov	r3, r7
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d6a:	4b22      	ldr	r3, [pc, #136]	; (8000df4 <MX_ADC1_Init+0x9c>)
 8000d6c:	4a22      	ldr	r2, [pc, #136]	; (8000df8 <MX_ADC1_Init+0xa0>)
 8000d6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d70:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <MX_ADC1_Init+0x9c>)
 8000d72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d78:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <MX_ADC1_Init+0x9c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <MX_ADC1_Init+0x9c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <MX_ADC1_Init+0x9c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <MX_ADC1_Init+0x9c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_ADC1_Init+0x9c>)
 8000d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d98:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <MX_ADC1_Init+0x9c>)
 8000d9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000da0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_ADC1_Init+0x9c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <MX_ADC1_Init+0x9c>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_ADC1_Init+0x9c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_ADC1_Init+0x9c>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <MX_ADC1_Init+0x9c>)
 8000dbe:	f000 fe71 	bl	8001aa4 <HAL_ADC_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000dc8:	f000 f9c4 	bl	8001154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_ADC1_Init+0x9c>)
 8000dde:	f000 fea5 	bl	8001b2c <HAL_ADC_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000de8:	f000 f9b4 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	2000454c 	.word	0x2000454c
 8000df8:	40012000 	.word	0x40012000

08000dfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e02:	f107 0308 	add.w	r3, r7, #8
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e10:	463b      	mov	r3, r7
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e18:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e1a:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <MX_TIM3_Init+0x98>)
 8000e1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2;
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e20:	2202      	movs	r2, #2
 8000e22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 345;
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e2c:	f240 1259 	movw	r2, #345	; 0x159
 8000e30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e3a:	2280      	movs	r2, #128	; 0x80
 8000e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e3e:	4814      	ldr	r0, [pc, #80]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e40:	f002 fbde 	bl	8003600 <HAL_TIM_Base_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e4a:	f000 f983 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480d      	ldr	r0, [pc, #52]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e5c:	f002 fd72 	bl	8003944 <HAL_TIM_ConfigClockSource>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e66:	f000 f975 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e6a:	2320      	movs	r3, #32
 8000e6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	4619      	mov	r1, r3
 8000e76:	4806      	ldr	r0, [pc, #24]	; (8000e90 <MX_TIM3_Init+0x94>)
 8000e78:	f002 ff7a 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e82:	f000 f967 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20004594 	.word	0x20004594
 8000e94:	40000400 	.word	0x40000400

08000e98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <MX_USART2_UART_Init+0x50>)
 8000ea0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ea4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ed0:	f002 ffd0 	bl	8003e74 <HAL_UART_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eda:	f000 f93b 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200045dc 	.word	0x200045dc
 8000ee8:	40004400 	.word	0x40004400

08000eec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_DMA_Init+0x4c>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <MX_DMA_Init+0x4c>)
 8000efc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <MX_DMA_Init+0x4c>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2105      	movs	r1, #5
 8000f12:	2010      	movs	r0, #16
 8000f14:	f001 f8e0 	bl	80020d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f18:	2010      	movs	r0, #16
 8000f1a:	f001 f8f9 	bl	8002110 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2105      	movs	r1, #5
 8000f22:	2011      	movs	r0, #17
 8000f24:	f001 f8d8 	bl	80020d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f28:	2011      	movs	r0, #17
 8000f2a:	f001 f8f1 	bl	8002110 <HAL_NVIC_EnableIRQ>

}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800

08000f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b2e      	ldr	r3, [pc, #184]	; (8001010 <MX_GPIO_Init+0xd4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a2d      	ldr	r2, [pc, #180]	; (8001010 <MX_GPIO_Init+0xd4>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <MX_GPIO_Init+0xd4>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b27      	ldr	r3, [pc, #156]	; (8001010 <MX_GPIO_Init+0xd4>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a26      	ldr	r2, [pc, #152]	; (8001010 <MX_GPIO_Init+0xd4>)
 8000f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b24      	ldr	r3, [pc, #144]	; (8001010 <MX_GPIO_Init+0xd4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <MX_GPIO_Init+0xd4>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a1f      	ldr	r2, [pc, #124]	; (8001010 <MX_GPIO_Init+0xd4>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <MX_GPIO_Init+0xd4>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MX_GPIO_Init+0xd4>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a18      	ldr	r2, [pc, #96]	; (8001010 <MX_GPIO_Init+0xd4>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <MX_GPIO_Init+0xd4>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000fc8:	4812      	ldr	r0, [pc, #72]	; (8001014 <MX_GPIO_Init+0xd8>)
 8000fca:	f001 fe35 	bl	8002c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480c      	ldr	r0, [pc, #48]	; (8001018 <MX_GPIO_Init+0xdc>)
 8000fe6:	f001 fca3 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8000fea:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4804      	ldr	r0, [pc, #16]	; (8001014 <MX_GPIO_Init+0xd8>)
 8001004:	f001 fc94 	bl	8002930 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	; 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000
 8001018:	40020800 	.word	0x40020800

0800101c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800101c:	b5b0      	push	{r4, r5, r7, lr}
 800101e:	b0a6      	sub	sp, #152	; 0x98
 8001020:	af02      	add	r7, sp, #8
 8001022:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	  // micro-ROS configuration

	  rmw_uros_set_custom_transport(
 8001024:	4b34      	ldr	r3, [pc, #208]	; (80010f8 <StartDefaultTask+0xdc>)
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	4b34      	ldr	r3, [pc, #208]	; (80010fc <StartDefaultTask+0xe0>)
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	4b34      	ldr	r3, [pc, #208]	; (8001100 <StartDefaultTask+0xe4>)
 800102e:	4a35      	ldr	r2, [pc, #212]	; (8001104 <StartDefaultTask+0xe8>)
 8001030:	4935      	ldr	r1, [pc, #212]	; (8001108 <StartDefaultTask+0xec>)
 8001032:	2001      	movs	r0, #1
 8001034:	f007 f990 	bl	8008358 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001038:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800103c:	4618      	mov	r0, r3
 800103e:	f007 f90d 	bl	800825c <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001042:	4b32      	ldr	r3, [pc, #200]	; (800110c <StartDefaultTask+0xf0>)
 8001044:	67bb      	str	r3, [r7, #120]	; 0x78
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001046:	4b32      	ldr	r3, [pc, #200]	; (8001110 <StartDefaultTask+0xf4>)
 8001048:	67fb      	str	r3, [r7, #124]	; 0x7c
	  freeRTOS_allocator.reallocate = microros_reallocate;
 800104a:	4b32      	ldr	r3, [pc, #200]	; (8001114 <StartDefaultTask+0xf8>)
 800104c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001050:	4b31      	ldr	r3, [pc, #196]	; (8001118 <StartDefaultTask+0xfc>)
 8001052:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001056:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800105a:	4618      	mov	r0, r3
 800105c:	f007 f90c 	bl	8008278 <rcutils_set_default_allocator>
 8001060:	4603      	mov	r3, r0
 8001062:	f083 0301 	eor.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d004      	beq.n	8001076 <StartDefaultTask+0x5a>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 800106c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001070:	482a      	ldr	r0, [pc, #168]	; (800111c <StartDefaultTask+0x100>)
 8001072:	f010 f873 	bl	801115c <iprintf>
	  std_msgs__msg__Int32 msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 8001076:	463b      	mov	r3, r7
 8001078:	4618      	mov	r0, r3
 800107a:	f007 f91b 	bl	80082b4 <rcutils_get_default_allocator>
 800107e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001082:	463d      	mov	r5, r7
 8001084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001088:	682b      	ldr	r3, [r5, #0]
 800108a:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 800108c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001090:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	f007 f81e 	bl	80080d8 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 800109c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010a0:	f107 0020 	add.w	r0, r7, #32
 80010a4:	4a1e      	ldr	r2, [pc, #120]	; (8001120 <StartDefaultTask+0x104>)
 80010a6:	491f      	ldr	r1, [pc, #124]	; (8001124 <StartDefaultTask+0x108>)
 80010a8:	f007 f860 	bl	800816c <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 80010ac:	f007 fdda 	bl	8008c64 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80010b0:	4602      	mov	r2, r0
 80010b2:	f107 0120 	add.w	r1, r7, #32
 80010b6:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <StartDefaultTask+0x10c>)
 80010bc:	f007 f892 	bl	80081e4 <rclc_publisher_init_default>
	    &publisher,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    "cubemx_publisher");

	  msg.data = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	673b      	str	r3, [r7, #112]	; 0x70

	  for(;;)
	  {
	    rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 80010c4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80010c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010cc:	2200      	movs	r2, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f006 ffde 	bl	8008090 <rcl_publish>
 80010d4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	    if (ret != RCL_RET_OK)
 80010d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <StartDefaultTask+0xce>
	    {
	      printf("Error publishing (line %d)\n", __LINE__);
 80010e0:	f240 11e1 	movw	r1, #481	; 0x1e1
 80010e4:	4811      	ldr	r0, [pc, #68]	; (800112c <StartDefaultTask+0x110>)
 80010e6:	f010 f839 	bl	801115c <iprintf>
	    }

	    msg.data++;
 80010ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010ec:	3301      	adds	r3, #1
 80010ee:	673b      	str	r3, [r7, #112]	; 0x70
	    osDelay(10);
 80010f0:	200a      	movs	r0, #10
 80010f2:	f004 fa41 	bl	8005578 <osDelay>
	  {
 80010f6:	e7e5      	b.n	80010c4 <StartDefaultTask+0xa8>
 80010f8:	08000b95 	.word	0x08000b95
 80010fc:	08000b2d 	.word	0x08000b2d
 8001100:	08000b0d 	.word	0x08000b0d
 8001104:	08000ae1 	.word	0x08000ae1
 8001108:	200045dc 	.word	0x200045dc
 800110c:	08001161 	.word	0x08001161
 8001110:	080011a5 	.word	0x080011a5
 8001114:	080011dd 	.word	0x080011dd
 8001118:	08001249 	.word	0x08001249
 800111c:	08012334 	.word	0x08012334
 8001120:	0801235c 	.word	0x0801235c
 8001124:	08012360 	.word	0x08012360
 8001128:	0801236c 	.word	0x0801236c
 800112c:	08012380 	.word	0x08012380

08001130 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a04      	ldr	r2, [pc, #16]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d101      	bne.n	8001146 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001142:	f000 fc8f 	bl	8001a64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40010000 	.word	0x40010000

08001154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800115c:	e7fe      	b.n	800115c <Error_Handler+0x8>
	...

08001160 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <microros_allocate+0x3c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4413      	add	r3, r2
 8001174:	461a      	mov	r2, r3
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <microros_allocate+0x3c>)
 8001178:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <microros_allocate+0x40>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	461a      	mov	r2, r3
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <microros_allocate+0x40>)
 8001188:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fa5e 	bl	800064c <pvPortMallocMicroROS>
 8001190:	4603      	mov	r3, r0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20007670 	.word	0x20007670
 80011a0:	20007674 	.word	0x20007674

080011a4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00c      	beq.n	80011ce <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff fb67 	bl	8000888 <getBlockSize>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <microros_deallocate+0x34>)
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <microros_deallocate+0x34>)
 80011c6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff fb03 	bl	80007d4 <vPortFreeMicroROS>
  }
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20007674 	.word	0x20007674

080011dc <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <microros_reallocate+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	4413      	add	r3, r2
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <microros_reallocate+0x64>)
 80011f6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <microros_reallocate+0x68>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	4413      	add	r3, r2
 8001202:	461a      	mov	r2, r3
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <microros_reallocate+0x68>)
 8001206:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d104      	bne.n	8001218 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800120e:	68b8      	ldr	r0, [r7, #8]
 8001210:	f7ff fa1c 	bl	800064c <pvPortMallocMicroROS>
 8001214:	4603      	mov	r3, r0
 8001216:	e00e      	b.n	8001236 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f7ff fb35 	bl	8000888 <getBlockSize>
 800121e:	4603      	mov	r3, r0
 8001220:	4a08      	ldr	r2, [pc, #32]	; (8001244 <microros_reallocate+0x68>)
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	461a      	mov	r2, r3
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <microros_reallocate+0x68>)
 800122a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff fb48 	bl	80008c4 <pvPortReallocMicroROS>
 8001234:	4603      	mov	r3, r0
  }
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20007670 	.word	0x20007670
 8001244:	20007674 	.word	0x20007674

08001248 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	fb02 f303 	mul.w	r3, r2, r3
 800125c:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <microros_zero_allocate+0x48>)
 800125e:	6812      	ldr	r2, [r2, #0]
 8001260:	4413      	add	r3, r2
 8001262:	461a      	mov	r2, r3
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <microros_zero_allocate+0x48>)
 8001266:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	4a08      	ldr	r2, [pc, #32]	; (8001294 <microros_zero_allocate+0x4c>)
 8001272:	6812      	ldr	r2, [r2, #0]
 8001274:	4413      	add	r3, r2
 8001276:	461a      	mov	r2, r3
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <microros_zero_allocate+0x4c>)
 800127a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f7ff fb4d 	bl	800091e <pvPortCallocMicroROS>
 8001284:	4603      	mov	r3, r0
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20007670 	.word	0x20007670
 8001294:	20007674 	.word	0x20007674

08001298 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001298:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80012aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012ae:	a320      	add	r3, pc, #128	; (adr r3, 8001330 <UTILS_NanosecondsToTimespec+0x98>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7fe fffc 	bl	80002b0 <__aeabi_ldivmod>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80012c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012c6:	a31a      	add	r3, pc, #104	; (adr r3, 8001330 <UTILS_NanosecondsToTimespec+0x98>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7fe fff0 	bl	80002b0 <__aeabi_ldivmod>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	da20      	bge.n	800131e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	4a11      	ldr	r2, [pc, #68]	; (8001328 <UTILS_NanosecondsToTimespec+0x90>)
 80012e2:	fb82 1203 	smull	r1, r2, r2, r3
 80012e6:	1712      	asrs	r2, r2, #28
 80012e8:	17db      	asrs	r3, r3, #31
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	3301      	adds	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	6979      	ldr	r1, [r7, #20]
 80012f8:	17c8      	asrs	r0, r1, #31
 80012fa:	460c      	mov	r4, r1
 80012fc:	4605      	mov	r5, r0
 80012fe:	ebb2 0804 	subs.w	r8, r2, r4
 8001302:	eb63 0905 	sbc.w	r9, r3, r5
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	4906      	ldr	r1, [pc, #24]	; (800132c <UTILS_NanosecondsToTimespec+0x94>)
 8001314:	fb01 f303 	mul.w	r3, r1, r3
 8001318:	441a      	add	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	609a      	str	r2, [r3, #8]
    }
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001328:	44b82fa1 	.word	0x44b82fa1
 800132c:	3b9aca00 	.word	0x3b9aca00
 8001330:	3b9aca00 	.word	0x3b9aca00
 8001334:	00000000 	.word	0x00000000

08001338 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800133c:	b08e      	sub	sp, #56	; 0x38
 800133e:	af00      	add	r7, sp, #0
 8001340:	6278      	str	r0, [r7, #36]	; 0x24
 8001342:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001344:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001348:	2300      	movs	r3, #0
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800135a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135e:	4618      	mov	r0, r3
 8001360:	f005 fbe4 	bl	8006b2c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001366:	17da      	asrs	r2, r3, #31
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	61fa      	str	r2, [r7, #28]
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	69b9      	ldr	r1, [r7, #24]
 8001376:	000b      	movs	r3, r1
 8001378:	2200      	movs	r2, #0
 800137a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001380:	2200      	movs	r2, #0
 8001382:	461c      	mov	r4, r3
 8001384:	4615      	mov	r5, r2
 8001386:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800138a:	1911      	adds	r1, r2, r4
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	416b      	adcs	r3, r5
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001396:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800139a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	f04f 0400 	mov.w	r4, #0
 80013a6:	f04f 0500 	mov.w	r5, #0
 80013aa:	015d      	lsls	r5, r3, #5
 80013ac:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80013b0:	0154      	lsls	r4, r2, #5
 80013b2:	4622      	mov	r2, r4
 80013b4:	462b      	mov	r3, r5
 80013b6:	ebb2 0800 	subs.w	r8, r2, r0
 80013ba:	eb63 0901 	sbc.w	r9, r3, r1
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80013ca:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80013ce:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80013d2:	4690      	mov	r8, r2
 80013d4:	4699      	mov	r9, r3
 80013d6:	eb18 0a00 	adds.w	sl, r8, r0
 80013da:	eb49 0b01 	adc.w	fp, r9, r1
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	f04f 0300 	mov.w	r3, #0
 80013e6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80013ea:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80013ee:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80013f2:	ebb2 040a 	subs.w	r4, r2, sl
 80013f6:	603c      	str	r4, [r7, #0]
 80013f8:	eb63 030b 	sbc.w	r3, r3, fp
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001402:	4623      	mov	r3, r4
 8001404:	181b      	adds	r3, r3, r0
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	462b      	mov	r3, r5
 800140a:	eb41 0303 	adc.w	r3, r1, r3
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	6a3a      	ldr	r2, [r7, #32]
 8001412:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001416:	f7ff ff3f 	bl	8001298 <UTILS_NanosecondsToTimespec>

    return 0;
 800141a:	2300      	movs	r3, #0
 800141c:	4618      	mov	r0, r3
 800141e:	3738      	adds	r7, #56	; 0x38
 8001420:	46bd      	mov	sp, r7
 8001422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_MspInit+0x54>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a11      	ldr	r2, [pc, #68]	; (800147c <HAL_MspInit+0x54>)
 8001438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_MspInit+0x54>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_MspInit+0x54>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a0a      	ldr	r2, [pc, #40]	; (800147c <HAL_MspInit+0x54>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_MspInit+0x54>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	210f      	movs	r1, #15
 800146a:	f06f 0001 	mvn.w	r0, #1
 800146e:	f000 fe33 	bl	80020d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800

08001480 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_ADC_MspInit+0x7c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d127      	bne.n	80014f2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <HAL_ADC_MspInit+0x80>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a15      	ldr	r2, [pc, #84]	; (8001500 <HAL_ADC_MspInit+0x80>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <HAL_ADC_MspInit+0x80>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <HAL_ADC_MspInit+0x80>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <HAL_ADC_MspInit+0x80>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <HAL_ADC_MspInit+0x80>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014de:	2303      	movs	r3, #3
 80014e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <HAL_ADC_MspInit+0x84>)
 80014ee:	f001 fa1f 	bl	8002930 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40012000 	.word	0x40012000
 8001500:	40023800 	.word	0x40023800
 8001504:	40020000 	.word	0x40020000

08001508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <HAL_TIM_Base_MspInit+0x3c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d10d      	bne.n	8001536 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_TIM_Base_MspInit+0x40>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <HAL_TIM_Base_MspInit+0x40>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <HAL_TIM_Base_MspInit+0x40>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40000400 	.word	0x40000400
 8001548:	40023800 	.word	0x40023800

0800154c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a4d      	ldr	r2, [pc, #308]	; (80016a0 <HAL_UART_MspInit+0x154>)
 800156a:	4293      	cmp	r3, r2
 800156c:	f040 8093 	bne.w	8001696 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	4b4b      	ldr	r3, [pc, #300]	; (80016a4 <HAL_UART_MspInit+0x158>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	4a4a      	ldr	r2, [pc, #296]	; (80016a4 <HAL_UART_MspInit+0x158>)
 800157a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157e:	6413      	str	r3, [r2, #64]	; 0x40
 8001580:	4b48      	ldr	r3, [pc, #288]	; (80016a4 <HAL_UART_MspInit+0x158>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	4b44      	ldr	r3, [pc, #272]	; (80016a4 <HAL_UART_MspInit+0x158>)
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	4a43      	ldr	r2, [pc, #268]	; (80016a4 <HAL_UART_MspInit+0x158>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6313      	str	r3, [r2, #48]	; 0x30
 800159c:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <HAL_UART_MspInit+0x158>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015a8:	230c      	movs	r3, #12
 80015aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b8:	2307      	movs	r3, #7
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	4839      	ldr	r0, [pc, #228]	; (80016a8 <HAL_UART_MspInit+0x15c>)
 80015c4:	f001 f9b4 	bl	8002930 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80015c8:	4b38      	ldr	r3, [pc, #224]	; (80016ac <HAL_UART_MspInit+0x160>)
 80015ca:	4a39      	ldr	r2, [pc, #228]	; (80016b0 <HAL_UART_MspInit+0x164>)
 80015cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80015ce:	4b37      	ldr	r3, [pc, #220]	; (80016ac <HAL_UART_MspInit+0x160>)
 80015d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015d6:	4b35      	ldr	r3, [pc, #212]	; (80016ac <HAL_UART_MspInit+0x160>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015dc:	4b33      	ldr	r3, [pc, #204]	; (80016ac <HAL_UART_MspInit+0x160>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015e2:	4b32      	ldr	r3, [pc, #200]	; (80016ac <HAL_UART_MspInit+0x160>)
 80015e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ea:	4b30      	ldr	r3, [pc, #192]	; (80016ac <HAL_UART_MspInit+0x160>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015f0:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <HAL_UART_MspInit+0x160>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_UART_MspInit+0x160>)
 80015f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015fc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80015fe:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <HAL_UART_MspInit+0x160>)
 8001600:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001604:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001606:	4b29      	ldr	r3, [pc, #164]	; (80016ac <HAL_UART_MspInit+0x160>)
 8001608:	2200      	movs	r2, #0
 800160a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800160c:	4827      	ldr	r0, [pc, #156]	; (80016ac <HAL_UART_MspInit+0x160>)
 800160e:	f000 fd8d 	bl	800212c <HAL_DMA_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001618:	f7ff fd9c 	bl	8001154 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a23      	ldr	r2, [pc, #140]	; (80016ac <HAL_UART_MspInit+0x160>)
 8001620:	63da      	str	r2, [r3, #60]	; 0x3c
 8001622:	4a22      	ldr	r2, [pc, #136]	; (80016ac <HAL_UART_MspInit+0x160>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001628:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_UART_MspInit+0x168>)
 800162a:	4a23      	ldr	r2, [pc, #140]	; (80016b8 <HAL_UART_MspInit+0x16c>)
 800162c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <HAL_UART_MspInit+0x168>)
 8001630:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001634:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001636:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <HAL_UART_MspInit+0x168>)
 8001638:	2240      	movs	r2, #64	; 0x40
 800163a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <HAL_UART_MspInit+0x168>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_UART_MspInit+0x168>)
 8001644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001648:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <HAL_UART_MspInit+0x168>)
 800164c:	2200      	movs	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <HAL_UART_MspInit+0x168>)
 8001652:	2200      	movs	r2, #0
 8001654:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <HAL_UART_MspInit+0x168>)
 8001658:	2200      	movs	r2, #0
 800165a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_UART_MspInit+0x168>)
 800165e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001662:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <HAL_UART_MspInit+0x168>)
 8001666:	2200      	movs	r2, #0
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800166a:	4812      	ldr	r0, [pc, #72]	; (80016b4 <HAL_UART_MspInit+0x168>)
 800166c:	f000 fd5e 	bl	800212c <HAL_DMA_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001676:	f7ff fd6d 	bl	8001154 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <HAL_UART_MspInit+0x168>)
 800167e:	639a      	str	r2, [r3, #56]	; 0x38
 8001680:	4a0c      	ldr	r2, [pc, #48]	; (80016b4 <HAL_UART_MspInit+0x168>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2105      	movs	r1, #5
 800168a:	2026      	movs	r0, #38	; 0x26
 800168c:	f000 fd24 	bl	80020d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001690:	2026      	movs	r0, #38	; 0x26
 8001692:	f000 fd3d 	bl	8002110 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	; 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40004400 	.word	0x40004400
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	20004624 	.word	0x20004624
 80016b0:	40026088 	.word	0x40026088
 80016b4:	20004684 	.word	0x20004684
 80016b8:	400260a0 	.word	0x400260a0

080016bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08c      	sub	sp, #48	; 0x30
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	4b2e      	ldr	r3, [pc, #184]	; (800178c <HAL_InitTick+0xd0>)
 80016d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d4:	4a2d      	ldr	r2, [pc, #180]	; (800178c <HAL_InitTick+0xd0>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6453      	str	r3, [r2, #68]	; 0x44
 80016dc:	4b2b      	ldr	r3, [pc, #172]	; (800178c <HAL_InitTick+0xd0>)
 80016de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016e8:	f107 020c 	add.w	r2, r7, #12
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f001 ff52 	bl	800359c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80016f8:	f001 ff3c 	bl	8003574 <HAL_RCC_GetPCLK2Freq>
 80016fc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001700:	4a23      	ldr	r2, [pc, #140]	; (8001790 <HAL_InitTick+0xd4>)
 8001702:	fba2 2303 	umull	r2, r3, r2, r3
 8001706:	0c9b      	lsrs	r3, r3, #18
 8001708:	3b01      	subs	r3, #1
 800170a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800170c:	4b21      	ldr	r3, [pc, #132]	; (8001794 <HAL_InitTick+0xd8>)
 800170e:	4a22      	ldr	r2, [pc, #136]	; (8001798 <HAL_InitTick+0xdc>)
 8001710:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001712:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_InitTick+0xd8>)
 8001714:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001718:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800171a:	4a1e      	ldr	r2, [pc, #120]	; (8001794 <HAL_InitTick+0xd8>)
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001720:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <HAL_InitTick+0xd8>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001726:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_InitTick+0xd8>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_InitTick+0xd8>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001732:	4818      	ldr	r0, [pc, #96]	; (8001794 <HAL_InitTick+0xd8>)
 8001734:	f001 ff64 	bl	8003600 <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800173e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001742:	2b00      	cmp	r3, #0
 8001744:	d11b      	bne.n	800177e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001746:	4813      	ldr	r0, [pc, #76]	; (8001794 <HAL_InitTick+0xd8>)
 8001748:	f001 ffaa 	bl	80036a0 <HAL_TIM_Base_Start_IT>
 800174c:	4603      	mov	r3, r0
 800174e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001756:	2b00      	cmp	r3, #0
 8001758:	d111      	bne.n	800177e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800175a:	2019      	movs	r0, #25
 800175c:	f000 fcd8 	bl	8002110 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b0f      	cmp	r3, #15
 8001764:	d808      	bhi.n	8001778 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001766:	2200      	movs	r2, #0
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	2019      	movs	r0, #25
 800176c:	f000 fcb4 	bl	80020d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001770:	4a0a      	ldr	r2, [pc, #40]	; (800179c <HAL_InitTick+0xe0>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e002      	b.n	800177e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800177e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001782:	4618      	mov	r0, r3
 8001784:	3730      	adds	r7, #48	; 0x30
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	431bde83 	.word	0x431bde83
 8001794:	20007678 	.word	0x20007678
 8001798:	40010000 	.word	0x40010000
 800179c:	20000008 	.word	0x20000008

080017a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a4:	e7fe      	b.n	80017a4 <NMI_Handler+0x4>

080017a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <HardFault_Handler+0x4>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <MemManage_Handler+0x4>

080017b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <BusFault_Handler+0x4>

080017b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <UsageFault_Handler+0x4>

080017be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <DMA1_Stream5_IRQHandler+0x10>)
 80017d2:	f000 fe43 	bl	800245c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20004624 	.word	0x20004624

080017e0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <DMA1_Stream6_IRQHandler+0x10>)
 80017e6:	f000 fe39 	bl	800245c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20004684 	.word	0x20004684

080017f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017fa:	f001 ffb3 	bl	8003764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20007678 	.word	0x20007678

08001808 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <USART2_IRQHandler+0x10>)
 800180e:	f002 fc95 	bl	800413c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200045dc 	.word	0x200045dc

0800181c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return 1;
 8001820:	2301      	movs	r3, #1
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <_kill>:

int _kill(int pid, int sig)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001836:	f00f fe3d 	bl	80114b4 <__errno>
 800183a:	4603      	mov	r3, r0
 800183c:	2216      	movs	r2, #22
 800183e:	601a      	str	r2, [r3, #0]
  return -1;
 8001840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_exit>:

void _exit (int status)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001854:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ffe7 	bl	800182c <_kill>
  while (1) {}    /* Make sure we hang here */
 800185e:	e7fe      	b.n	800185e <_exit+0x12>

08001860 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	e00a      	b.n	8001888 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001872:	f3af 8000 	nop.w
 8001876:	4601      	mov	r1, r0
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	60ba      	str	r2, [r7, #8]
 800187e:	b2ca      	uxtb	r2, r1
 8001880:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	429a      	cmp	r2, r3
 800188e:	dbf0      	blt.n	8001872 <_read+0x12>
  }

  return len;
 8001890:	687b      	ldr	r3, [r7, #4]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	e009      	b.n	80018c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	60ba      	str	r2, [r7, #8]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	3301      	adds	r3, #1
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	dbf1      	blt.n	80018ac <_write+0x12>
  }
  return len;
 80018c8:	687b      	ldr	r3, [r7, #4]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <_close>:

int _close(int file)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018fa:	605a      	str	r2, [r3, #4]
  return 0;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <_isatty>:

int _isatty(int file)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001944:	4a14      	ldr	r2, [pc, #80]	; (8001998 <_sbrk+0x5c>)
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <_sbrk+0x60>)
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <_sbrk+0x64>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <_sbrk+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d207      	bcs.n	800197c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800196c:	f00f fda2 	bl	80114b4 <__errno>
 8001970:	4603      	mov	r3, r0
 8001972:	220c      	movs	r2, #12
 8001974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800197a:	e009      	b.n	8001990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <_sbrk+0x64>)
 800198c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20018000 	.word	0x20018000
 800199c:	00000400 	.word	0x00000400
 80019a0:	200076c4 	.word	0x200076c4
 80019a4:	20010d10 	.word	0x20010d10

080019a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <SystemInit+0x20>)
 80019ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <SystemInit+0x20>)
 80019b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019d0:	f7ff ffea 	bl	80019a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d4:	480c      	ldr	r0, [pc, #48]	; (8001a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019d6:	490d      	ldr	r1, [pc, #52]	; (8001a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019ec:	4c0a      	ldr	r4, [pc, #40]	; (8001a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80019fa:	f00f fd61 	bl	80114c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fe:	f7ff f91d 	bl	8000c3c <main>
  bx  lr    
 8001a02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a0c:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001a10:	08012f28 	.word	0x08012f28
  ldr r2, =_sbss
 8001a14:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001a18:	20010d0c 	.word	0x20010d0c

08001a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <ADC_IRQHandler>
	...

08001a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a24:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0d      	ldr	r2, [pc, #52]	; (8001a60 <HAL_Init+0x40>)
 8001a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <HAL_Init+0x40>)
 8001a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a07      	ldr	r2, [pc, #28]	; (8001a60 <HAL_Init+0x40>)
 8001a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a48:	2003      	movs	r0, #3
 8001a4a:	f000 fb3a 	bl	80020c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4e:	200f      	movs	r0, #15
 8001a50:	f7ff fe34 	bl	80016bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a54:	f7ff fce8 	bl	8001428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023c00 	.word	0x40023c00

08001a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_IncTick+0x20>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_IncTick+0x24>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <HAL_IncTick+0x24>)
 8001a76:	6013      	str	r3, [r2, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	2000000c 	.word	0x2000000c
 8001a88:	200076c8 	.word	0x200076c8

08001a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <HAL_GetTick+0x14>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	200076c8 	.word	0x200076c8

08001aa4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e033      	b.n	8001b22 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d109      	bne.n	8001ad6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fcdc 	bl	8001480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d118      	bne.n	8001b14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aea:	f023 0302 	bic.w	r3, r3, #2
 8001aee:	f043 0202 	orr.w	r2, r3, #2
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f93a 	bl	8001d70 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f023 0303 	bic.w	r3, r3, #3
 8001b0a:	f043 0201 	orr.w	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
 8001b12:	e001      	b.n	8001b18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1c>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e105      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x228>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b09      	cmp	r3, #9
 8001b56:	d925      	bls.n	8001ba4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68d9      	ldr	r1, [r3, #12]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b1e      	subs	r3, #30
 8001b6e:	2207      	movs	r2, #7
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43da      	mvns	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68d9      	ldr	r1, [r3, #12]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	4603      	mov	r3, r0
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4403      	add	r3, r0
 8001b96:	3b1e      	subs	r3, #30
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	e022      	b.n	8001bea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6919      	ldr	r1, [r3, #16]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	2207      	movs	r2, #7
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6919      	ldr	r1, [r3, #16]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	4618      	mov	r0, r3
 8001bda:	4603      	mov	r3, r0
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4403      	add	r3, r0
 8001be0:	409a      	lsls	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d824      	bhi.n	8001c3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	3b05      	subs	r3, #5
 8001c04:	221f      	movs	r2, #31
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	400a      	ands	r2, r1
 8001c12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	4618      	mov	r0, r3
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3b05      	subs	r3, #5
 8001c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	635a      	str	r2, [r3, #52]	; 0x34
 8001c3a:	e04c      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b0c      	cmp	r3, #12
 8001c42:	d824      	bhi.n	8001c8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	3b23      	subs	r3, #35	; 0x23
 8001c56:	221f      	movs	r2, #31
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43da      	mvns	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	400a      	ands	r2, r1
 8001c64:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b23      	subs	r3, #35	; 0x23
 8001c80:	fa00 f203 	lsl.w	r2, r0, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c8c:	e023      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3b41      	subs	r3, #65	; 0x41
 8001ca0:	221f      	movs	r2, #31
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	400a      	ands	r2, r1
 8001cae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3b41      	subs	r3, #65	; 0x41
 8001cca:	fa00 f203 	lsl.w	r2, r0, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd6:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <HAL_ADC_ConfigChannel+0x234>)
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a21      	ldr	r2, [pc, #132]	; (8001d64 <HAL_ADC_ConfigChannel+0x238>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d109      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b12      	cmp	r3, #18
 8001cea:	d105      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a19      	ldr	r2, [pc, #100]	; (8001d64 <HAL_ADC_ConfigChannel+0x238>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d123      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x21e>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b10      	cmp	r3, #16
 8001d08:	d003      	beq.n	8001d12 <HAL_ADC_ConfigChannel+0x1e6>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b11      	cmp	r3, #17
 8001d10:	d11b      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	d111      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_ADC_ConfigChannel+0x23c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <HAL_ADC_ConfigChannel+0x240>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	0c9a      	lsrs	r2, r3, #18
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d3c:	e002      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f9      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	40012300 	.word	0x40012300
 8001d64:	40012000 	.word	0x40012000
 8001d68:	20000004 	.word	0x20000004
 8001d6c:	431bde83 	.word	0x431bde83

08001d70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d78:	4b79      	ldr	r3, [pc, #484]	; (8001f60 <ADC_Init+0x1f0>)
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	431a      	orrs	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001da4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6859      	ldr	r1, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	021a      	lsls	r2, r3, #8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6899      	ldr	r1, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	4a58      	ldr	r2, [pc, #352]	; (8001f64 <ADC_Init+0x1f4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d022      	beq.n	8001e4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6899      	ldr	r1, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6899      	ldr	r1, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	e00f      	b.n	8001e6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e6c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0202 	bic.w	r2, r2, #2
 8001e7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6899      	ldr	r1, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7e1b      	ldrb	r3, [r3, #24]
 8001e88:	005a      	lsls	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d01b      	beq.n	8001ed4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eaa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001eba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6859      	ldr	r1, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	035a      	lsls	r2, r3, #13
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	e007      	b.n	8001ee4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	051a      	lsls	r2, r3, #20
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6899      	ldr	r1, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f26:	025a      	lsls	r2, r3, #9
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6899      	ldr	r1, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	029a      	lsls	r2, r3, #10
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	609a      	str	r2, [r3, #8]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40012300 	.word	0x40012300
 8001f64:	0f000001 	.word	0x0f000001

08001f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f84:	4013      	ands	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9a:	4a04      	ldr	r2, [pc, #16]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	60d3      	str	r3, [r2, #12]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	f003 0307 	and.w	r3, r3, #7
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	db0b      	blt.n	8001ff6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	4907      	ldr	r1, [pc, #28]	; (8002004 <__NVIC_EnableIRQ+0x38>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	2001      	movs	r0, #1
 8001fee:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000e100 	.word	0xe000e100

08002008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	6039      	str	r1, [r7, #0]
 8002012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	2b00      	cmp	r3, #0
 800201a:	db0a      	blt.n	8002032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	490c      	ldr	r1, [pc, #48]	; (8002054 <__NVIC_SetPriority+0x4c>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	0112      	lsls	r2, r2, #4
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	440b      	add	r3, r1
 800202c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002030:	e00a      	b.n	8002048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4908      	ldr	r1, [pc, #32]	; (8002058 <__NVIC_SetPriority+0x50>)
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	3b04      	subs	r3, #4
 8002040:	0112      	lsls	r2, r2, #4
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	440b      	add	r3, r1
 8002046:	761a      	strb	r2, [r3, #24]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000e100 	.word	0xe000e100
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205c:	b480      	push	{r7}
 800205e:	b089      	sub	sp, #36	; 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f1c3 0307 	rsb	r3, r3, #7
 8002076:	2b04      	cmp	r3, #4
 8002078:	bf28      	it	cs
 800207a:	2304      	movcs	r3, #4
 800207c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3304      	adds	r3, #4
 8002082:	2b06      	cmp	r3, #6
 8002084:	d902      	bls.n	800208c <NVIC_EncodePriority+0x30>
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3b03      	subs	r3, #3
 800208a:	e000      	b.n	800208e <NVIC_EncodePriority+0x32>
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43da      	mvns	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	401a      	ands	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43d9      	mvns	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	4313      	orrs	r3, r2
         );
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3724      	adds	r7, #36	; 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ff4c 	bl	8001f68 <__NVIC_SetPriorityGrouping>
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ea:	f7ff ff61 	bl	8001fb0 <__NVIC_GetPriorityGrouping>
 80020ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	6978      	ldr	r0, [r7, #20]
 80020f6:	f7ff ffb1 	bl	800205c <NVIC_EncodePriority>
 80020fa:	4602      	mov	r2, r0
 80020fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ff80 	bl	8002008 <__NVIC_SetPriority>
}
 8002108:	bf00      	nop
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ff54 	bl	8001fcc <__NVIC_EnableIRQ>
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff fca8 	bl	8001a8c <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e099      	b.n	800227c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002168:	e00f      	b.n	800218a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800216a:	f7ff fc8f 	bl	8001a8c <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b05      	cmp	r3, #5
 8002176:	d908      	bls.n	800218a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2203      	movs	r2, #3
 8002182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e078      	b.n	800227c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1e8      	bne.n	800216a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	4b38      	ldr	r3, [pc, #224]	; (8002284 <HAL_DMA_Init+0x158>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d107      	bne.n	80021f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	4313      	orrs	r3, r2
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f023 0307 	bic.w	r3, r3, #7
 800220a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	4313      	orrs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	2b04      	cmp	r3, #4
 800221c:	d117      	bne.n	800224e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00e      	beq.n	800224e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 fb01 	bl	8002838 <DMA_CheckFifoParam>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2240      	movs	r2, #64	; 0x40
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800224a:	2301      	movs	r3, #1
 800224c:	e016      	b.n	800227c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fab8 	bl	80027cc <DMA_CalcBaseAndBitshift>
 800225c:	4603      	mov	r3, r0
 800225e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002264:	223f      	movs	r2, #63	; 0x3f
 8002266:	409a      	lsls	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	f010803f 	.word	0xf010803f

08002288 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_DMA_Start_IT+0x26>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e040      	b.n	8002330 <HAL_DMA_Start_IT+0xa8>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d12f      	bne.n	8002322 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2202      	movs	r2, #2
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 fa4a 	bl	8002770 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e0:	223f      	movs	r2, #63	; 0x3f
 80022e2:	409a      	lsls	r2, r3
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0216 	orr.w	r2, r2, #22
 80022f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0208 	orr.w	r2, r2, #8
 800230e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e005      	b.n	800232e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800232a:	2302      	movs	r3, #2
 800232c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800232e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002344:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002346:	f7ff fba1 	bl	8001a8c <HAL_GetTick>
 800234a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d008      	beq.n	800236a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2280      	movs	r2, #128	; 0x80
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e052      	b.n	8002410 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0216 	bic.w	r2, r2, #22
 8002378:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002388:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	d103      	bne.n	800239a <HAL_DMA_Abort+0x62>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002396:	2b00      	cmp	r3, #0
 8002398:	d007      	beq.n	80023aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0208 	bic.w	r2, r2, #8
 80023a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0201 	bic.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ba:	e013      	b.n	80023e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023bc:	f7ff fb66 	bl	8001a8c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b05      	cmp	r3, #5
 80023c8:	d90c      	bls.n	80023e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2220      	movs	r2, #32
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2203      	movs	r2, #3
 80023d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e015      	b.n	8002410 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1e4      	bne.n	80023bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f6:	223f      	movs	r2, #63	; 0x3f
 80023f8:	409a      	lsls	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d004      	beq.n	8002436 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2280      	movs	r2, #128	; 0x80
 8002430:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e00c      	b.n	8002450 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2205      	movs	r2, #5
 800243a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0201 	bic.w	r2, r2, #1
 800244c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002468:	4b8e      	ldr	r3, [pc, #568]	; (80026a4 <HAL_DMA_IRQHandler+0x248>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a8e      	ldr	r2, [pc, #568]	; (80026a8 <HAL_DMA_IRQHandler+0x24c>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	0a9b      	lsrs	r3, r3, #10
 8002474:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002486:	2208      	movs	r2, #8
 8002488:	409a      	lsls	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d01a      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0204 	bic.w	r2, r2, #4
 80024ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	2208      	movs	r2, #8
 80024b6:	409a      	lsls	r2, r3
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c0:	f043 0201 	orr.w	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024cc:	2201      	movs	r2, #1
 80024ce:	409a      	lsls	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d012      	beq.n	80024fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	2201      	movs	r2, #1
 80024ec:	409a      	lsls	r2, r3
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f6:	f043 0202 	orr.w	r2, r3, #2
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002502:	2204      	movs	r2, #4
 8002504:	409a      	lsls	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4013      	ands	r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d012      	beq.n	8002534 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00b      	beq.n	8002534 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002520:	2204      	movs	r2, #4
 8002522:	409a      	lsls	r2, r3
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252c:	f043 0204 	orr.w	r2, r3, #4
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002538:	2210      	movs	r2, #16
 800253a:	409a      	lsls	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4013      	ands	r3, r2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d043      	beq.n	80025cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d03c      	beq.n	80025cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002556:	2210      	movs	r2, #16
 8002558:	409a      	lsls	r2, r3
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d018      	beq.n	800259e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d108      	bne.n	800258c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d024      	beq.n	80025cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	4798      	blx	r3
 800258a:	e01f      	b.n	80025cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002590:	2b00      	cmp	r3, #0
 8002592:	d01b      	beq.n	80025cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
 800259c:	e016      	b.n	80025cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d107      	bne.n	80025bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0208 	bic.w	r2, r2, #8
 80025ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	2220      	movs	r2, #32
 80025d2:	409a      	lsls	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 808f 	beq.w	80026fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8087 	beq.w	80026fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f2:	2220      	movs	r2, #32
 80025f4:	409a      	lsls	r2, r3
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b05      	cmp	r3, #5
 8002604:	d136      	bne.n	8002674 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0216 	bic.w	r2, r2, #22
 8002614:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002624:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	2b00      	cmp	r3, #0
 800262c:	d103      	bne.n	8002636 <HAL_DMA_IRQHandler+0x1da>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0208 	bic.w	r2, r2, #8
 8002644:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264a:	223f      	movs	r2, #63	; 0x3f
 800264c:	409a      	lsls	r2, r3
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002666:	2b00      	cmp	r3, #0
 8002668:	d07e      	beq.n	8002768 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	4798      	blx	r3
        }
        return;
 8002672:	e079      	b.n	8002768 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d01d      	beq.n	80026be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10d      	bne.n	80026ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002694:	2b00      	cmp	r3, #0
 8002696:	d031      	beq.n	80026fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
 80026a0:	e02c      	b.n	80026fc <HAL_DMA_IRQHandler+0x2a0>
 80026a2:	bf00      	nop
 80026a4:	20000004 	.word	0x20000004
 80026a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d023      	beq.n	80026fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	4798      	blx	r3
 80026bc:	e01e      	b.n	80026fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10f      	bne.n	80026ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0210 	bic.w	r2, r2, #16
 80026da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002700:	2b00      	cmp	r3, #0
 8002702:	d032      	beq.n	800276a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d022      	beq.n	8002756 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2205      	movs	r2, #5
 8002714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	3301      	adds	r3, #1
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	429a      	cmp	r2, r3
 8002732:	d307      	bcc.n	8002744 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f2      	bne.n	8002728 <HAL_DMA_IRQHandler+0x2cc>
 8002742:	e000      	b.n	8002746 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002744:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	4798      	blx	r3
 8002766:	e000      	b.n	800276a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002768:	bf00      	nop
    }
  }
}
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800278c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b40      	cmp	r3, #64	; 0x40
 800279c:	d108      	bne.n	80027b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027ae:	e007      	b.n	80027c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	60da      	str	r2, [r3, #12]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	3b10      	subs	r3, #16
 80027dc:	4a14      	ldr	r2, [pc, #80]	; (8002830 <DMA_CalcBaseAndBitshift+0x64>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	091b      	lsrs	r3, r3, #4
 80027e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027e6:	4a13      	ldr	r2, [pc, #76]	; (8002834 <DMA_CalcBaseAndBitshift+0x68>)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4413      	add	r3, r2
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d909      	bls.n	800280e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002802:	f023 0303 	bic.w	r3, r3, #3
 8002806:	1d1a      	adds	r2, r3, #4
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	659a      	str	r2, [r3, #88]	; 0x58
 800280c:	e007      	b.n	800281e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	aaaaaaab 	.word	0xaaaaaaab
 8002834:	080123fc 	.word	0x080123fc

08002838 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d11f      	bne.n	8002892 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d856      	bhi.n	8002906 <DMA_CheckFifoParam+0xce>
 8002858:	a201      	add	r2, pc, #4	; (adr r2, 8002860 <DMA_CheckFifoParam+0x28>)
 800285a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285e:	bf00      	nop
 8002860:	08002871 	.word	0x08002871
 8002864:	08002883 	.word	0x08002883
 8002868:	08002871 	.word	0x08002871
 800286c:	08002907 	.word	0x08002907
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d046      	beq.n	800290a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002880:	e043      	b.n	800290a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800288a:	d140      	bne.n	800290e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002890:	e03d      	b.n	800290e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800289a:	d121      	bne.n	80028e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d837      	bhi.n	8002912 <DMA_CheckFifoParam+0xda>
 80028a2:	a201      	add	r2, pc, #4	; (adr r2, 80028a8 <DMA_CheckFifoParam+0x70>)
 80028a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a8:	080028b9 	.word	0x080028b9
 80028ac:	080028bf 	.word	0x080028bf
 80028b0:	080028b9 	.word	0x080028b9
 80028b4:	080028d1 	.word	0x080028d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      break;
 80028bc:	e030      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d025      	beq.n	8002916 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ce:	e022      	b.n	8002916 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028d8:	d11f      	bne.n	800291a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028de:	e01c      	b.n	800291a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d903      	bls.n	80028ee <DMA_CheckFifoParam+0xb6>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d003      	beq.n	80028f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028ec:	e018      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
      break;
 80028f2:	e015      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00e      	beq.n	800291e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
      break;
 8002904:	e00b      	b.n	800291e <DMA_CheckFifoParam+0xe6>
      break;
 8002906:	bf00      	nop
 8002908:	e00a      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 800290a:	bf00      	nop
 800290c:	e008      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 800290e:	bf00      	nop
 8002910:	e006      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 8002912:	bf00      	nop
 8002914:	e004      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 8002916:	bf00      	nop
 8002918:	e002      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;   
 800291a:	bf00      	nop
 800291c:	e000      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 800291e:	bf00      	nop
    }
  } 
  
  return status; 
 8002920:	7bfb      	ldrb	r3, [r7, #15]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop

08002930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	; 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	e159      	b.n	8002c00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800294c:	2201      	movs	r2, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	429a      	cmp	r2, r3
 8002966:	f040 8148 	bne.w	8002bfa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b01      	cmp	r3, #1
 8002974:	d005      	beq.n	8002982 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297e:	2b02      	cmp	r3, #2
 8002980:	d130      	bne.n	80029e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	2203      	movs	r2, #3
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029b8:	2201      	movs	r2, #1
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 0201 	and.w	r2, r3, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d017      	beq.n	8002a20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d123      	bne.n	8002a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	08da      	lsrs	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3208      	adds	r2, #8
 8002a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	220f      	movs	r2, #15
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	08da      	lsrs	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3208      	adds	r2, #8
 8002a6e:	69b9      	ldr	r1, [r7, #24]
 8002a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	2203      	movs	r2, #3
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0203 	and.w	r2, r3, #3
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80a2 	beq.w	8002bfa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	4b57      	ldr	r3, [pc, #348]	; (8002c18 <HAL_GPIO_Init+0x2e8>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	4a56      	ldr	r2, [pc, #344]	; (8002c18 <HAL_GPIO_Init+0x2e8>)
 8002ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac6:	4b54      	ldr	r3, [pc, #336]	; (8002c18 <HAL_GPIO_Init+0x2e8>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ad2:	4a52      	ldr	r2, [pc, #328]	; (8002c1c <HAL_GPIO_Init+0x2ec>)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	089b      	lsrs	r3, r3, #2
 8002ad8:	3302      	adds	r3, #2
 8002ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	220f      	movs	r2, #15
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a49      	ldr	r2, [pc, #292]	; (8002c20 <HAL_GPIO_Init+0x2f0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d019      	beq.n	8002b32 <HAL_GPIO_Init+0x202>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a48      	ldr	r2, [pc, #288]	; (8002c24 <HAL_GPIO_Init+0x2f4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <HAL_GPIO_Init+0x1fe>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a47      	ldr	r2, [pc, #284]	; (8002c28 <HAL_GPIO_Init+0x2f8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00d      	beq.n	8002b2a <HAL_GPIO_Init+0x1fa>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a46      	ldr	r2, [pc, #280]	; (8002c2c <HAL_GPIO_Init+0x2fc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d007      	beq.n	8002b26 <HAL_GPIO_Init+0x1f6>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a45      	ldr	r2, [pc, #276]	; (8002c30 <HAL_GPIO_Init+0x300>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d101      	bne.n	8002b22 <HAL_GPIO_Init+0x1f2>
 8002b1e:	2304      	movs	r3, #4
 8002b20:	e008      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b22:	2307      	movs	r3, #7
 8002b24:	e006      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b26:	2303      	movs	r3, #3
 8002b28:	e004      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e002      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b32:	2300      	movs	r3, #0
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	f002 0203 	and.w	r2, r2, #3
 8002b3a:	0092      	lsls	r2, r2, #2
 8002b3c:	4093      	lsls	r3, r2
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b44:	4935      	ldr	r1, [pc, #212]	; (8002c1c <HAL_GPIO_Init+0x2ec>)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	089b      	lsrs	r3, r3, #2
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b52:	4b38      	ldr	r3, [pc, #224]	; (8002c34 <HAL_GPIO_Init+0x304>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b76:	4a2f      	ldr	r2, [pc, #188]	; (8002c34 <HAL_GPIO_Init+0x304>)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b7c:	4b2d      	ldr	r3, [pc, #180]	; (8002c34 <HAL_GPIO_Init+0x304>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ba0:	4a24      	ldr	r2, [pc, #144]	; (8002c34 <HAL_GPIO_Init+0x304>)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ba6:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <HAL_GPIO_Init+0x304>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bca:	4a1a      	ldr	r2, [pc, #104]	; (8002c34 <HAL_GPIO_Init+0x304>)
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd0:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <HAL_GPIO_Init+0x304>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf4:	4a0f      	ldr	r2, [pc, #60]	; (8002c34 <HAL_GPIO_Init+0x304>)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	2b0f      	cmp	r3, #15
 8002c04:	f67f aea2 	bls.w	800294c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3724      	adds	r7, #36	; 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40013800 	.word	0x40013800
 8002c20:	40020000 	.word	0x40020000
 8002c24:	40020400 	.word	0x40020400
 8002c28:	40020800 	.word	0x40020800
 8002c2c:	40020c00 	.word	0x40020c00
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40013c00 	.word	0x40013c00

08002c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
 8002c44:	4613      	mov	r3, r2
 8002c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c48:	787b      	ldrb	r3, [r7, #1]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c4e:	887a      	ldrh	r2, [r7, #2]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c54:	e003      	b.n	8002c5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c56:	887b      	ldrh	r3, [r7, #2]
 8002c58:	041a      	lsls	r2, r3, #16
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	619a      	str	r2, [r3, #24]
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e267      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d075      	beq.n	8002d76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c8a:	4b88      	ldr	r3, [pc, #544]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d00c      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c96:	4b85      	ldr	r3, [pc, #532]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d112      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ca2:	4b82      	ldr	r3, [pc, #520]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002caa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cae:	d10b      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	4b7e      	ldr	r3, [pc, #504]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d05b      	beq.n	8002d74 <HAL_RCC_OscConfig+0x108>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d157      	bne.n	8002d74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e242      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd0:	d106      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x74>
 8002cd2:	4b76      	ldr	r3, [pc, #472]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a75      	ldr	r2, [pc, #468]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e01d      	b.n	8002d1c <HAL_RCC_OscConfig+0xb0>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x98>
 8002cea:	4b70      	ldr	r3, [pc, #448]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a6f      	ldr	r2, [pc, #444]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	4b6d      	ldr	r3, [pc, #436]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a6c      	ldr	r2, [pc, #432]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	e00b      	b.n	8002d1c <HAL_RCC_OscConfig+0xb0>
 8002d04:	4b69      	ldr	r3, [pc, #420]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a68      	ldr	r2, [pc, #416]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	4b66      	ldr	r3, [pc, #408]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a65      	ldr	r2, [pc, #404]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d013      	beq.n	8002d4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe feb2 	bl	8001a8c <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7fe feae 	bl	8001a8c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e207      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	4b5b      	ldr	r3, [pc, #364]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0xc0>
 8002d4a:	e014      	b.n	8002d76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7fe fe9e 	bl	8001a8c <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d54:	f7fe fe9a 	bl	8001a8c <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e1f3      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d66:	4b51      	ldr	r3, [pc, #324]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0xe8>
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d063      	beq.n	8002e4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d82:	4b4a      	ldr	r3, [pc, #296]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00b      	beq.n	8002da6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8e:	4b47      	ldr	r3, [pc, #284]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d11c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d9a:	4b44      	ldr	r3, [pc, #272]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d116      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da6:	4b41      	ldr	r3, [pc, #260]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <HAL_RCC_OscConfig+0x152>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d001      	beq.n	8002dbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e1c7      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbe:	4b3b      	ldr	r3, [pc, #236]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4937      	ldr	r1, [pc, #220]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd2:	e03a      	b.n	8002e4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d020      	beq.n	8002e1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ddc:	4b34      	ldr	r3, [pc, #208]	; (8002eb0 <HAL_RCC_OscConfig+0x244>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de2:	f7fe fe53 	bl	8001a8c <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dea:	f7fe fe4f 	bl	8001a8c <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e1a8      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfc:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e08:	4b28      	ldr	r3, [pc, #160]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4925      	ldr	r1, [pc, #148]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]
 8002e1c:	e015      	b.n	8002e4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e1e:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <HAL_RCC_OscConfig+0x244>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe fe32 	bl	8001a8c <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e2c:	f7fe fe2e 	bl	8001a8c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e187      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d036      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d016      	beq.n	8002e8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e5e:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <HAL_RCC_OscConfig+0x248>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e64:	f7fe fe12 	bl	8001a8c <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e6c:	f7fe fe0e 	bl	8001a8c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e167      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_OscConfig+0x240>)
 8002e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x200>
 8002e8a:	e01b      	b.n	8002ec4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e8c:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <HAL_RCC_OscConfig+0x248>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e92:	f7fe fdfb 	bl	8001a8c <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e98:	e00e      	b.n	8002eb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e9a:	f7fe fdf7 	bl	8001a8c <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d907      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e150      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	42470000 	.word	0x42470000
 8002eb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb8:	4b88      	ldr	r3, [pc, #544]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8002eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1ea      	bne.n	8002e9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 8097 	beq.w	8003000 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed6:	4b81      	ldr	r3, [pc, #516]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10f      	bne.n	8002f02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	4b7d      	ldr	r3, [pc, #500]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	4a7c      	ldr	r2, [pc, #496]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8002eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef2:	4b7a      	ldr	r3, [pc, #488]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efe:	2301      	movs	r3, #1
 8002f00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f02:	4b77      	ldr	r3, [pc, #476]	; (80030e0 <HAL_RCC_OscConfig+0x474>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d118      	bne.n	8002f40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f0e:	4b74      	ldr	r3, [pc, #464]	; (80030e0 <HAL_RCC_OscConfig+0x474>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a73      	ldr	r2, [pc, #460]	; (80030e0 <HAL_RCC_OscConfig+0x474>)
 8002f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1a:	f7fe fdb7 	bl	8001a8c <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f22:	f7fe fdb3 	bl	8001a8c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e10c      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	4b6a      	ldr	r3, [pc, #424]	; (80030e0 <HAL_RCC_OscConfig+0x474>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d106      	bne.n	8002f56 <HAL_RCC_OscConfig+0x2ea>
 8002f48:	4b64      	ldr	r3, [pc, #400]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	4a63      	ldr	r2, [pc, #396]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	6713      	str	r3, [r2, #112]	; 0x70
 8002f54:	e01c      	b.n	8002f90 <HAL_RCC_OscConfig+0x324>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b05      	cmp	r3, #5
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x30c>
 8002f5e:	4b5f      	ldr	r3, [pc, #380]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	4a5e      	ldr	r2, [pc, #376]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f64:	f043 0304 	orr.w	r3, r3, #4
 8002f68:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6a:	4b5c      	ldr	r3, [pc, #368]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	4a5b      	ldr	r2, [pc, #364]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	6713      	str	r3, [r2, #112]	; 0x70
 8002f76:	e00b      	b.n	8002f90 <HAL_RCC_OscConfig+0x324>
 8002f78:	4b58      	ldr	r3, [pc, #352]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	4a57      	ldr	r2, [pc, #348]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f7e:	f023 0301 	bic.w	r3, r3, #1
 8002f82:	6713      	str	r3, [r2, #112]	; 0x70
 8002f84:	4b55      	ldr	r3, [pc, #340]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	4a54      	ldr	r2, [pc, #336]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f8a:	f023 0304 	bic.w	r3, r3, #4
 8002f8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d015      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f98:	f7fe fd78 	bl	8001a8c <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa0:	f7fe fd74 	bl	8001a8c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e0cb      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb6:	4b49      	ldr	r3, [pc, #292]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0ee      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x334>
 8002fc2:	e014      	b.n	8002fee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc4:	f7fe fd62 	bl	8001a8c <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fcc:	f7fe fd5e 	bl	8001a8c <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e0b5      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe2:	4b3e      	ldr	r3, [pc, #248]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1ee      	bne.n	8002fcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fee:	7dfb      	ldrb	r3, [r7, #23]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d105      	bne.n	8003000 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff4:	4b39      	ldr	r3, [pc, #228]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	4a38      	ldr	r2, [pc, #224]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8002ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80a1 	beq.w	800314c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800300a:	4b34      	ldr	r3, [pc, #208]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b08      	cmp	r3, #8
 8003014:	d05c      	beq.n	80030d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d141      	bne.n	80030a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301e:	4b31      	ldr	r3, [pc, #196]	; (80030e4 <HAL_RCC_OscConfig+0x478>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fe fd32 	bl	8001a8c <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe fd2e 	bl	8001a8c <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e087      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	4b27      	ldr	r3, [pc, #156]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69da      	ldr	r2, [r3, #28]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	019b      	lsls	r3, r3, #6
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	085b      	lsrs	r3, r3, #1
 8003062:	3b01      	subs	r3, #1
 8003064:	041b      	lsls	r3, r3, #16
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	061b      	lsls	r3, r3, #24
 800306e:	491b      	ldr	r1, [pc, #108]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003074:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <HAL_RCC_OscConfig+0x478>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7fe fd07 	bl	8001a8c <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003082:	f7fe fd03 	bl	8001a8c <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e05c      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003094:	4b11      	ldr	r3, [pc, #68]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x416>
 80030a0:	e054      	b.n	800314c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_RCC_OscConfig+0x478>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fe fcf0 	bl	8001a8c <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fe fcec 	bl	8001a8c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e045      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_RCC_OscConfig+0x470>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x444>
 80030ce:	e03d      	b.n	800314c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d107      	bne.n	80030e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e038      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40007000 	.word	0x40007000
 80030e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030e8:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <HAL_RCC_OscConfig+0x4ec>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d028      	beq.n	8003148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003100:	429a      	cmp	r2, r3
 8003102:	d121      	bne.n	8003148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310e:	429a      	cmp	r2, r3
 8003110:	d11a      	bne.n	8003148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003118:	4013      	ands	r3, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800311e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003120:	4293      	cmp	r3, r2
 8003122:	d111      	bne.n	8003148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312e:	085b      	lsrs	r3, r3, #1
 8003130:	3b01      	subs	r3, #1
 8003132:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d107      	bne.n	8003148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40023800 	.word	0x40023800

0800315c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0cc      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003170:	4b68      	ldr	r3, [pc, #416]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d90c      	bls.n	8003198 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317e:	4b65      	ldr	r3, [pc, #404]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003186:	4b63      	ldr	r3, [pc, #396]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d001      	beq.n	8003198 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0b8      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d020      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b0:	4b59      	ldr	r3, [pc, #356]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	4a58      	ldr	r2, [pc, #352]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c8:	4b53      	ldr	r3, [pc, #332]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4a52      	ldr	r2, [pc, #328]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d4:	4b50      	ldr	r3, [pc, #320]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	494d      	ldr	r1, [pc, #308]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d044      	beq.n	800327c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d107      	bne.n	800320a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d119      	bne.n	800323a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e07f      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d003      	beq.n	800321a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003216:	2b03      	cmp	r3, #3
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321a:	4b3f      	ldr	r3, [pc, #252]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e06f      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322a:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e067      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800323a:	4b37      	ldr	r3, [pc, #220]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f023 0203 	bic.w	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4934      	ldr	r1, [pc, #208]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	4313      	orrs	r3, r2
 800324a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800324c:	f7fe fc1e 	bl	8001a8c <HAL_GetTick>
 8003250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003252:	e00a      	b.n	800326a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003254:	f7fe fc1a 	bl	8001a8c <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003262:	4293      	cmp	r3, r2
 8003264:	d901      	bls.n	800326a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e04f      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326a:	4b2b      	ldr	r3, [pc, #172]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 020c 	and.w	r2, r3, #12
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	429a      	cmp	r2, r3
 800327a:	d1eb      	bne.n	8003254 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800327c:	4b25      	ldr	r3, [pc, #148]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d20c      	bcs.n	80032a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b22      	ldr	r3, [pc, #136]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e032      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b0:	4b19      	ldr	r3, [pc, #100]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4916      	ldr	r1, [pc, #88]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ce:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	490e      	ldr	r1, [pc, #56]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032e2:	f000 f821 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 80032e6:	4602      	mov	r2, r0
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	490a      	ldr	r1, [pc, #40]	; (800331c <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	5ccb      	ldrb	r3, [r1, r3]
 80032f6:	fa22 f303 	lsr.w	r3, r2, r3
 80032fa:	4a09      	ldr	r2, [pc, #36]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCC_ClockConfig+0x1c8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe f9da 	bl	80016bc <HAL_InitTick>

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40023c00 	.word	0x40023c00
 8003318:	40023800 	.word	0x40023800
 800331c:	080123e4 	.word	0x080123e4
 8003320:	20000004 	.word	0x20000004
 8003324:	20000008 	.word	0x20000008

08003328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800332c:	b094      	sub	sp, #80	; 0x50
 800332e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	647b      	str	r3, [r7, #68]	; 0x44
 8003334:	2300      	movs	r3, #0
 8003336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003338:	2300      	movs	r3, #0
 800333a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003340:	4b79      	ldr	r3, [pc, #484]	; (8003528 <HAL_RCC_GetSysClockFreq+0x200>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 030c 	and.w	r3, r3, #12
 8003348:	2b08      	cmp	r3, #8
 800334a:	d00d      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x40>
 800334c:	2b08      	cmp	r3, #8
 800334e:	f200 80e1 	bhi.w	8003514 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0x34>
 8003356:	2b04      	cmp	r3, #4
 8003358:	d003      	beq.n	8003362 <HAL_RCC_GetSysClockFreq+0x3a>
 800335a:	e0db      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800335c:	4b73      	ldr	r3, [pc, #460]	; (800352c <HAL_RCC_GetSysClockFreq+0x204>)
 800335e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003360:	e0db      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003362:	4b73      	ldr	r3, [pc, #460]	; (8003530 <HAL_RCC_GetSysClockFreq+0x208>)
 8003364:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003366:	e0d8      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003368:	4b6f      	ldr	r3, [pc, #444]	; (8003528 <HAL_RCC_GetSysClockFreq+0x200>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003370:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003372:	4b6d      	ldr	r3, [pc, #436]	; (8003528 <HAL_RCC_GetSysClockFreq+0x200>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d063      	beq.n	8003446 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800337e:	4b6a      	ldr	r3, [pc, #424]	; (8003528 <HAL_RCC_GetSysClockFreq+0x200>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	099b      	lsrs	r3, r3, #6
 8003384:	2200      	movs	r2, #0
 8003386:	63bb      	str	r3, [r7, #56]	; 0x38
 8003388:	63fa      	str	r2, [r7, #60]	; 0x3c
 800338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003390:	633b      	str	r3, [r7, #48]	; 0x30
 8003392:	2300      	movs	r3, #0
 8003394:	637b      	str	r3, [r7, #52]	; 0x34
 8003396:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800339a:	4622      	mov	r2, r4
 800339c:	462b      	mov	r3, r5
 800339e:	f04f 0000 	mov.w	r0, #0
 80033a2:	f04f 0100 	mov.w	r1, #0
 80033a6:	0159      	lsls	r1, r3, #5
 80033a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ac:	0150      	lsls	r0, r2, #5
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4621      	mov	r1, r4
 80033b4:	1a51      	subs	r1, r2, r1
 80033b6:	6139      	str	r1, [r7, #16]
 80033b8:	4629      	mov	r1, r5
 80033ba:	eb63 0301 	sbc.w	r3, r3, r1
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033cc:	4659      	mov	r1, fp
 80033ce:	018b      	lsls	r3, r1, #6
 80033d0:	4651      	mov	r1, sl
 80033d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033d6:	4651      	mov	r1, sl
 80033d8:	018a      	lsls	r2, r1, #6
 80033da:	4651      	mov	r1, sl
 80033dc:	ebb2 0801 	subs.w	r8, r2, r1
 80033e0:	4659      	mov	r1, fp
 80033e2:	eb63 0901 	sbc.w	r9, r3, r1
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033fa:	4690      	mov	r8, r2
 80033fc:	4699      	mov	r9, r3
 80033fe:	4623      	mov	r3, r4
 8003400:	eb18 0303 	adds.w	r3, r8, r3
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	462b      	mov	r3, r5
 8003408:	eb49 0303 	adc.w	r3, r9, r3
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800341a:	4629      	mov	r1, r5
 800341c:	024b      	lsls	r3, r1, #9
 800341e:	4621      	mov	r1, r4
 8003420:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003424:	4621      	mov	r1, r4
 8003426:	024a      	lsls	r2, r1, #9
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800342e:	2200      	movs	r2, #0
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
 8003432:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003434:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003438:	f7fc ff8a 	bl	8000350 <__aeabi_uldivmod>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4613      	mov	r3, r2
 8003442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003444:	e058      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003446:	4b38      	ldr	r3, [pc, #224]	; (8003528 <HAL_RCC_GetSysClockFreq+0x200>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	099b      	lsrs	r3, r3, #6
 800344c:	2200      	movs	r2, #0
 800344e:	4618      	mov	r0, r3
 8003450:	4611      	mov	r1, r2
 8003452:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003456:	623b      	str	r3, [r7, #32]
 8003458:	2300      	movs	r3, #0
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
 800345c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003460:	4642      	mov	r2, r8
 8003462:	464b      	mov	r3, r9
 8003464:	f04f 0000 	mov.w	r0, #0
 8003468:	f04f 0100 	mov.w	r1, #0
 800346c:	0159      	lsls	r1, r3, #5
 800346e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003472:	0150      	lsls	r0, r2, #5
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4641      	mov	r1, r8
 800347a:	ebb2 0a01 	subs.w	sl, r2, r1
 800347e:	4649      	mov	r1, r9
 8003480:	eb63 0b01 	sbc.w	fp, r3, r1
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003490:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003494:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003498:	ebb2 040a 	subs.w	r4, r2, sl
 800349c:	eb63 050b 	sbc.w	r5, r3, fp
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	00eb      	lsls	r3, r5, #3
 80034aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ae:	00e2      	lsls	r2, r4, #3
 80034b0:	4614      	mov	r4, r2
 80034b2:	461d      	mov	r5, r3
 80034b4:	4643      	mov	r3, r8
 80034b6:	18e3      	adds	r3, r4, r3
 80034b8:	603b      	str	r3, [r7, #0]
 80034ba:	464b      	mov	r3, r9
 80034bc:	eb45 0303 	adc.w	r3, r5, r3
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ce:	4629      	mov	r1, r5
 80034d0:	028b      	lsls	r3, r1, #10
 80034d2:	4621      	mov	r1, r4
 80034d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034d8:	4621      	mov	r1, r4
 80034da:	028a      	lsls	r2, r1, #10
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e2:	2200      	movs	r2, #0
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	61fa      	str	r2, [r7, #28]
 80034e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034ec:	f7fc ff30 	bl	8000350 <__aeabi_uldivmod>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4613      	mov	r3, r2
 80034f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <HAL_RCC_GetSysClockFreq+0x200>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	0c1b      	lsrs	r3, r3, #16
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	3301      	adds	r3, #1
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003508:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800350a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003512:	e002      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_RCC_GetSysClockFreq+0x204>)
 8003516:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800351a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800351c:	4618      	mov	r0, r3
 800351e:	3750      	adds	r7, #80	; 0x50
 8003520:	46bd      	mov	sp, r7
 8003522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800
 800352c:	00f42400 	.word	0x00f42400
 8003530:	007a1200 	.word	0x007a1200

08003534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003538:	4b03      	ldr	r3, [pc, #12]	; (8003548 <HAL_RCC_GetHCLKFreq+0x14>)
 800353a:	681b      	ldr	r3, [r3, #0]
}
 800353c:	4618      	mov	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	20000004 	.word	0x20000004

0800354c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003550:	f7ff fff0 	bl	8003534 <HAL_RCC_GetHCLKFreq>
 8003554:	4602      	mov	r2, r0
 8003556:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	0a9b      	lsrs	r3, r3, #10
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	4903      	ldr	r1, [pc, #12]	; (8003570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003562:	5ccb      	ldrb	r3, [r1, r3]
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40023800 	.word	0x40023800
 8003570:	080123f4 	.word	0x080123f4

08003574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003578:	f7ff ffdc 	bl	8003534 <HAL_RCC_GetHCLKFreq>
 800357c:	4602      	mov	r2, r0
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	0b5b      	lsrs	r3, r3, #13
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	4903      	ldr	r1, [pc, #12]	; (8003598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800358a:	5ccb      	ldrb	r3, [r1, r3]
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003590:	4618      	mov	r0, r3
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40023800 	.word	0x40023800
 8003598:	080123f4 	.word	0x080123f4

0800359c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	220f      	movs	r2, #15
 80035aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035ac:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <HAL_RCC_GetClockConfig+0x5c>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 0203 	and.w	r2, r3, #3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035b8:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <HAL_RCC_GetClockConfig+0x5c>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035c4:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <HAL_RCC_GetClockConfig+0x5c>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80035d0:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <HAL_RCC_GetClockConfig+0x5c>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	08db      	lsrs	r3, r3, #3
 80035d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035de:	4b07      	ldr	r3, [pc, #28]	; (80035fc <HAL_RCC_GetClockConfig+0x60>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0207 	and.w	r2, r3, #7
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	601a      	str	r2, [r3, #0]
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40023c00 	.word	0x40023c00

08003600 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e041      	b.n	8003696 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fd ff6e 	bl	8001508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3304      	adds	r3, #4
 800363c:	4619      	mov	r1, r3
 800363e:	4610      	mov	r0, r2
 8003640:	f000 fa70 	bl	8003b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d001      	beq.n	80036b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e044      	b.n	8003742 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1e      	ldr	r2, [pc, #120]	; (8003750 <HAL_TIM_Base_Start_IT+0xb0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d018      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x6c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e2:	d013      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x6c>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1a      	ldr	r2, [pc, #104]	; (8003754 <HAL_TIM_Base_Start_IT+0xb4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00e      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x6c>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a19      	ldr	r2, [pc, #100]	; (8003758 <HAL_TIM_Base_Start_IT+0xb8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d009      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x6c>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a17      	ldr	r2, [pc, #92]	; (800375c <HAL_TIM_Base_Start_IT+0xbc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x6c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a16      	ldr	r2, [pc, #88]	; (8003760 <HAL_TIM_Base_Start_IT+0xc0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d111      	bne.n	8003730 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b06      	cmp	r3, #6
 800371c:	d010      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0201 	orr.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372e:	e007      	b.n	8003740 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40010000 	.word	0x40010000
 8003754:	40000400 	.word	0x40000400
 8003758:	40000800 	.word	0x40000800
 800375c:	40000c00 	.word	0x40000c00
 8003760:	40014000 	.word	0x40014000

08003764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d020      	beq.n	80037c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01b      	beq.n	80037c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0202 	mvn.w	r2, #2
 8003798:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f999 	bl	8003ae6 <HAL_TIM_IC_CaptureCallback>
 80037b4:	e005      	b.n	80037c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f98b 	bl	8003ad2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f99c 	bl	8003afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d020      	beq.n	8003814 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d01b      	beq.n	8003814 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0204 	mvn.w	r2, #4
 80037e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2202      	movs	r2, #2
 80037ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f973 	bl	8003ae6 <HAL_TIM_IC_CaptureCallback>
 8003800:	e005      	b.n	800380e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f965 	bl	8003ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f976 	bl	8003afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d020      	beq.n	8003860 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01b      	beq.n	8003860 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0208 	mvn.w	r2, #8
 8003830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2204      	movs	r2, #4
 8003836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f94d 	bl	8003ae6 <HAL_TIM_IC_CaptureCallback>
 800384c:	e005      	b.n	800385a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f93f 	bl	8003ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f950 	bl	8003afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b00      	cmp	r3, #0
 8003868:	d020      	beq.n	80038ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f003 0310 	and.w	r3, r3, #16
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01b      	beq.n	80038ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0210 	mvn.w	r2, #16
 800387c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2208      	movs	r2, #8
 8003882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f927 	bl	8003ae6 <HAL_TIM_IC_CaptureCallback>
 8003898:	e005      	b.n	80038a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f919 	bl	8003ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f92a 	bl	8003afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00c      	beq.n	80038d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d007      	beq.n	80038d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0201 	mvn.w	r2, #1
 80038c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fd fc30 	bl	8001130 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00c      	beq.n	80038f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d007      	beq.n	80038f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fab6 	bl	8003e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00c      	beq.n	8003918 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d007      	beq.n	8003918 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f8fb 	bl	8003b0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00c      	beq.n	800393c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d007      	beq.n	800393c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0220 	mvn.w	r2, #32
 8003934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fa88 	bl	8003e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_TIM_ConfigClockSource+0x1c>
 800395c:	2302      	movs	r3, #2
 800395e:	e0b4      	b.n	8003aca <HAL_TIM_ConfigClockSource+0x186>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800397e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003998:	d03e      	beq.n	8003a18 <HAL_TIM_ConfigClockSource+0xd4>
 800399a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399e:	f200 8087 	bhi.w	8003ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80039a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a6:	f000 8086 	beq.w	8003ab6 <HAL_TIM_ConfigClockSource+0x172>
 80039aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ae:	d87f      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80039b0:	2b70      	cmp	r3, #112	; 0x70
 80039b2:	d01a      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0xa6>
 80039b4:	2b70      	cmp	r3, #112	; 0x70
 80039b6:	d87b      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80039b8:	2b60      	cmp	r3, #96	; 0x60
 80039ba:	d050      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x11a>
 80039bc:	2b60      	cmp	r3, #96	; 0x60
 80039be:	d877      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80039c0:	2b50      	cmp	r3, #80	; 0x50
 80039c2:	d03c      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0xfa>
 80039c4:	2b50      	cmp	r3, #80	; 0x50
 80039c6:	d873      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80039c8:	2b40      	cmp	r3, #64	; 0x40
 80039ca:	d058      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0x13a>
 80039cc:	2b40      	cmp	r3, #64	; 0x40
 80039ce:	d86f      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80039d0:	2b30      	cmp	r3, #48	; 0x30
 80039d2:	d064      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x15a>
 80039d4:	2b30      	cmp	r3, #48	; 0x30
 80039d6:	d86b      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80039d8:	2b20      	cmp	r3, #32
 80039da:	d060      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x15a>
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d867      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d05c      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x15a>
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d05a      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x15a>
 80039e8:	e062      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039fa:	f000 f999 	bl	8003d30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	609a      	str	r2, [r3, #8]
      break;
 8003a16:	e04f      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a28:	f000 f982 	bl	8003d30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a3a:	609a      	str	r2, [r3, #8]
      break;
 8003a3c:	e03c      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f000 f8f6 	bl	8003c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2150      	movs	r1, #80	; 0x50
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 f94f 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 8003a5c:	e02c      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f000 f915 	bl	8003c9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2160      	movs	r1, #96	; 0x60
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 f93f 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 8003a7c:	e01c      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f000 f8d6 	bl	8003c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2140      	movs	r1, #64	; 0x40
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 f92f 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 8003a9c:	e00c      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	f000 f926 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 8003aae:	e003      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab4:	e000      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
	...

08003b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a3a      	ldr	r2, [pc, #232]	; (8003c20 <TIM_Base_SetConfig+0xfc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00f      	beq.n	8003b5c <TIM_Base_SetConfig+0x38>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b42:	d00b      	beq.n	8003b5c <TIM_Base_SetConfig+0x38>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a37      	ldr	r2, [pc, #220]	; (8003c24 <TIM_Base_SetConfig+0x100>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d007      	beq.n	8003b5c <TIM_Base_SetConfig+0x38>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a36      	ldr	r2, [pc, #216]	; (8003c28 <TIM_Base_SetConfig+0x104>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d003      	beq.n	8003b5c <TIM_Base_SetConfig+0x38>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a35      	ldr	r2, [pc, #212]	; (8003c2c <TIM_Base_SetConfig+0x108>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d108      	bne.n	8003b6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a2b      	ldr	r2, [pc, #172]	; (8003c20 <TIM_Base_SetConfig+0xfc>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d01b      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7c:	d017      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a28      	ldr	r2, [pc, #160]	; (8003c24 <TIM_Base_SetConfig+0x100>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d013      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a27      	ldr	r2, [pc, #156]	; (8003c28 <TIM_Base_SetConfig+0x104>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00f      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a26      	ldr	r2, [pc, #152]	; (8003c2c <TIM_Base_SetConfig+0x108>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00b      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a25      	ldr	r2, [pc, #148]	; (8003c30 <TIM_Base_SetConfig+0x10c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d007      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a24      	ldr	r2, [pc, #144]	; (8003c34 <TIM_Base_SetConfig+0x110>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d003      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a23      	ldr	r2, [pc, #140]	; (8003c38 <TIM_Base_SetConfig+0x114>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d108      	bne.n	8003bc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a0e      	ldr	r2, [pc, #56]	; (8003c20 <TIM_Base_SetConfig+0xfc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d103      	bne.n	8003bf4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d105      	bne.n	8003c12 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f023 0201 	bic.w	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	611a      	str	r2, [r3, #16]
  }
}
 8003c12:	bf00      	nop
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40010000 	.word	0x40010000
 8003c24:	40000400 	.word	0x40000400
 8003c28:	40000800 	.word	0x40000800
 8003c2c:	40000c00 	.word	0x40000c00
 8003c30:	40014000 	.word	0x40014000
 8003c34:	40014400 	.word	0x40014400
 8003c38:	40014800 	.word	0x40014800

08003c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f023 0201 	bic.w	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f023 030a 	bic.w	r3, r3, #10
 8003c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	621a      	str	r2, [r3, #32]
}
 8003c8e:	bf00      	nop
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b087      	sub	sp, #28
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	f023 0210 	bic.w	r2, r3, #16
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	031b      	lsls	r3, r3, #12
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	621a      	str	r2, [r3, #32]
}
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f043 0307 	orr.w	r3, r3, #7
 8003d1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	609a      	str	r2, [r3, #8]
}
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	021a      	lsls	r2, r3, #8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e050      	b.n	8003e2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1c      	ldr	r2, [pc, #112]	; (8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d018      	beq.n	8003dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d013      	beq.n	8003dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a18      	ldr	r2, [pc, #96]	; (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00e      	beq.n	8003dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a16      	ldr	r2, [pc, #88]	; (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d009      	beq.n	8003dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a15      	ldr	r2, [pc, #84]	; (8003e44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d004      	beq.n	8003dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a13      	ldr	r2, [pc, #76]	; (8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d10c      	bne.n	8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40010000 	.word	0x40010000
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40000800 	.word	0x40000800
 8003e44:	40000c00 	.word	0x40000c00
 8003e48:	40014000 	.word	0x40014000

08003e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e042      	b.n	8003f0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fd fb56 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2224      	movs	r2, #36	; 0x24
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 ffc9 	bl	8004e50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ecc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695a      	ldr	r2, [r3, #20]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003edc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08c      	sub	sp, #48	; 0x30
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d156      	bne.n	8003fdc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_UART_Transmit_DMA+0x26>
 8003f34:	88fb      	ldrh	r3, [r7, #6]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e04f      	b.n	8003fde <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	88fa      	ldrh	r2, [r7, #6]
 8003f48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	88fa      	ldrh	r2, [r7, #6]
 8003f4e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2221      	movs	r2, #33	; 0x21
 8003f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f62:	4a21      	ldr	r2, [pc, #132]	; (8003fe8 <HAL_UART_Transmit_DMA+0xd4>)
 8003f64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	4a20      	ldr	r2, [pc, #128]	; (8003fec <HAL_UART_Transmit_DMA+0xd8>)
 8003f6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	4a1f      	ldr	r2, [pc, #124]	; (8003ff0 <HAL_UART_Transmit_DMA+0xdc>)
 8003f74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003f7e:	f107 0308 	add.w	r3, r7, #8
 8003f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8a:	6819      	ldr	r1, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3304      	adds	r3, #4
 8003f92:	461a      	mov	r2, r3
 8003f94:	88fb      	ldrh	r3, [r7, #6]
 8003f96:	f7fe f977 	bl	8002288 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fa2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3314      	adds	r3, #20
 8003faa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	617b      	str	r3, [r7, #20]
   return(result);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3314      	adds	r3, #20
 8003fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fc4:	627a      	str	r2, [r7, #36]	; 0x24
 8003fc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6a39      	ldr	r1, [r7, #32]
 8003fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e5      	bne.n	8003fa4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e000      	b.n	8003fde <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003fdc:	2302      	movs	r3, #2
  }
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3730      	adds	r7, #48	; 0x30
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	080046dd 	.word	0x080046dd
 8003fec:	08004777 	.word	0x08004777
 8003ff0:	080048fb 	.word	0x080048fb

08003ff4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	4613      	mov	r3, r2
 8004000:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b20      	cmp	r3, #32
 800400c:	d112      	bne.n	8004034 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <HAL_UART_Receive_DMA+0x26>
 8004014:	88fb      	ldrh	r3, [r7, #6]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e00b      	b.n	8004036 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	461a      	mov	r2, r3
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 fcb0 	bl	8004990 <UART_Start_Receive_DMA>
 8004030:	4603      	mov	r3, r0
 8004032:	e000      	b.n	8004036 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004034:	2302      	movs	r3, #2
  }
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b090      	sub	sp, #64	; 0x40
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004046:	2300      	movs	r3, #0
 8004048:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004054:	2b80      	cmp	r3, #128	; 0x80
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b21      	cmp	r3, #33	; 0x21
 800406a:	d128      	bne.n	80040be <HAL_UART_DMAStop+0x80>
 800406c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d025      	beq.n	80040be <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3314      	adds	r3, #20
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	623b      	str	r3, [r7, #32]
   return(result);
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004088:	63bb      	str	r3, [r7, #56]	; 0x38
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3314      	adds	r3, #20
 8004090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004092:	633a      	str	r2, [r7, #48]	; 0x30
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e5      	bne.n	8004072 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d004      	beq.n	80040b8 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe f940 	bl	8002338 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fd03 	bl	8004ac4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c8:	2b40      	cmp	r3, #64	; 0x40
 80040ca:	bf0c      	ite	eq
 80040cc:	2301      	moveq	r3, #1
 80040ce:	2300      	movne	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b22      	cmp	r3, #34	; 0x22
 80040de:	d128      	bne.n	8004132 <HAL_UART_DMAStop+0xf4>
 80040e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d025      	beq.n	8004132 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3314      	adds	r3, #20
 80040ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	e853 3f00 	ldrex	r3, [r3]
 80040f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040fc:	637b      	str	r3, [r7, #52]	; 0x34
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3314      	adds	r3, #20
 8004104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004106:	61fa      	str	r2, [r7, #28]
 8004108:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410a:	69b9      	ldr	r1, [r7, #24]
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	e841 2300 	strex	r3, r2, [r1]
 8004112:	617b      	str	r3, [r7, #20]
   return(result);
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1e5      	bne.n	80040e6 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411e:	2b00      	cmp	r3, #0
 8004120:	d004      	beq.n	800412c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	4618      	mov	r0, r3
 8004128:	f7fe f906 	bl	8002338 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 fcf1 	bl	8004b14 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3740      	adds	r7, #64	; 0x40
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b0ba      	sub	sp, #232	; 0xe8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004162:	2300      	movs	r3, #0
 8004164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004168:	2300      	movs	r3, #0
 800416a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800416e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800417a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10f      	bne.n	80041a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	d009      	beq.n	80041a2 <HAL_UART_IRQHandler+0x66>
 800418e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fd99 	bl	8004cd2 <UART_Receive_IT>
      return;
 80041a0:	e25b      	b.n	800465a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 80de 	beq.w	8004368 <HAL_UART_IRQHandler+0x22c>
 80041ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d106      	bne.n	80041c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 80d1 	beq.w	8004368 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00b      	beq.n	80041ea <HAL_UART_IRQHandler+0xae>
 80041d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e2:	f043 0201 	orr.w	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00b      	beq.n	800420e <HAL_UART_IRQHandler+0xd2>
 80041f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d005      	beq.n	800420e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	f043 0202 	orr.w	r2, r3, #2
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800420e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00b      	beq.n	8004232 <HAL_UART_IRQHandler+0xf6>
 800421a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d005      	beq.n	8004232 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422a:	f043 0204 	orr.w	r2, r3, #4
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d011      	beq.n	8004262 <HAL_UART_IRQHandler+0x126>
 800423e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d105      	bne.n	8004256 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800424a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d005      	beq.n	8004262 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	f043 0208 	orr.w	r2, r3, #8
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 81f2 	beq.w	8004650 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800426c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	2b00      	cmp	r3, #0
 8004276:	d008      	beq.n	800428a <HAL_UART_IRQHandler+0x14e>
 8004278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fd24 	bl	8004cd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	bf0c      	ite	eq
 8004298:	2301      	moveq	r3, #1
 800429a:	2300      	movne	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d103      	bne.n	80042b6 <HAL_UART_IRQHandler+0x17a>
 80042ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d04f      	beq.n	8004356 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fc2c 	bl	8004b14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c6:	2b40      	cmp	r3, #64	; 0x40
 80042c8:	d141      	bne.n	800434e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3314      	adds	r3, #20
 80042d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3314      	adds	r3, #20
 80042f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004302:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800430e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1d9      	bne.n	80042ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d013      	beq.n	8004346 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004322:	4a7e      	ldr	r2, [pc, #504]	; (800451c <HAL_UART_IRQHandler+0x3e0>)
 8004324:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe f874 	bl	8002418 <HAL_DMA_Abort_IT>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d016      	beq.n	8004364 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004340:	4610      	mov	r0, r2
 8004342:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004344:	e00e      	b.n	8004364 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f9b2 	bl	80046b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434c:	e00a      	b.n	8004364 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f9ae 	bl	80046b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004354:	e006      	b.n	8004364 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f9aa 	bl	80046b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004362:	e175      	b.n	8004650 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004364:	bf00      	nop
    return;
 8004366:	e173      	b.n	8004650 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436c:	2b01      	cmp	r3, #1
 800436e:	f040 814f 	bne.w	8004610 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004376:	f003 0310 	and.w	r3, r3, #16
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 8148 	beq.w	8004610 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8141 	beq.w	8004610 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800438e:	2300      	movs	r3, #0
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ae:	2b40      	cmp	r3, #64	; 0x40
 80043b0:	f040 80b6 	bne.w	8004520 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8145 	beq.w	8004654 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043d2:	429a      	cmp	r2, r3
 80043d4:	f080 813e 	bcs.w	8004654 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ea:	f000 8088 	beq.w	80044fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	330c      	adds	r3, #12
 80043f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043fc:	e853 3f00 	ldrex	r3, [r3]
 8004400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004404:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800440c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	330c      	adds	r3, #12
 8004416:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800441a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800441e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004426:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1d9      	bne.n	80043ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3314      	adds	r3, #20
 8004440:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004444:	e853 3f00 	ldrex	r3, [r3]
 8004448:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800444a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800444c:	f023 0301 	bic.w	r3, r3, #1
 8004450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3314      	adds	r3, #20
 800445a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800445e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004462:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004466:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800446a:	e841 2300 	strex	r3, r2, [r1]
 800446e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1e1      	bne.n	800443a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3314      	adds	r3, #20
 800447c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800448c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3314      	adds	r3, #20
 8004496:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800449a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800449c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e3      	bne.n	8004476 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ce:	f023 0310 	bic.w	r3, r3, #16
 80044d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	330c      	adds	r3, #12
 80044dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80044e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80044e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044e8:	e841 2300 	strex	r3, r2, [r1]
 80044ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e3      	bne.n	80044bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fd ff1d 	bl	8002338 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2202      	movs	r2, #2
 8004502:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800450c:	b29b      	uxth	r3, r3
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	b29b      	uxth	r3, r3
 8004512:	4619      	mov	r1, r3
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f8d5 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800451a:	e09b      	b.n	8004654 <HAL_UART_IRQHandler+0x518>
 800451c:	08004bdb 	.word	0x08004bdb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004528:	b29b      	uxth	r3, r3
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 808e 	beq.w	8004658 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800453c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8089 	beq.w	8004658 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	330c      	adds	r3, #12
 800454c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004558:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800455c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800456a:	647a      	str	r2, [r7, #68]	; 0x44
 800456c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004570:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004572:	e841 2300 	strex	r3, r2, [r1]
 8004576:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1e3      	bne.n	8004546 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3314      	adds	r3, #20
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	e853 3f00 	ldrex	r3, [r3]
 800458c:	623b      	str	r3, [r7, #32]
   return(result);
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	f023 0301 	bic.w	r3, r3, #1
 8004594:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3314      	adds	r3, #20
 800459e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045a2:	633a      	str	r2, [r7, #48]	; 0x30
 80045a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1e3      	bne.n	800457e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0310 	bic.w	r3, r3, #16
 80045da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	330c      	adds	r3, #12
 80045e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80045e8:	61fa      	str	r2, [r7, #28]
 80045ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	69b9      	ldr	r1, [r7, #24]
 80045ee:	69fa      	ldr	r2, [r7, #28]
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	617b      	str	r3, [r7, #20]
   return(result);
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e3      	bne.n	80045c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004602:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004606:	4619      	mov	r1, r3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f85b 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800460e:	e023      	b.n	8004658 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004618:	2b00      	cmp	r3, #0
 800461a:	d009      	beq.n	8004630 <HAL_UART_IRQHandler+0x4f4>
 800461c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 faea 	bl	8004c02 <UART_Transmit_IT>
    return;
 800462e:	e014      	b.n	800465a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00e      	beq.n	800465a <HAL_UART_IRQHandler+0x51e>
 800463c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d008      	beq.n	800465a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fb2a 	bl	8004ca2 <UART_EndTransmit_IT>
    return;
 800464e:	e004      	b.n	800465a <HAL_UART_IRQHandler+0x51e>
    return;
 8004650:	bf00      	nop
 8004652:	e002      	b.n	800465a <HAL_UART_IRQHandler+0x51e>
      return;
 8004654:	bf00      	nop
 8004656:	e000      	b.n	800465a <HAL_UART_IRQHandler+0x51e>
      return;
 8004658:	bf00      	nop
  }
}
 800465a:	37e8      	adds	r7, #232	; 0xe8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b090      	sub	sp, #64	; 0x40
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d137      	bne.n	8004768 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80046f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fa:	2200      	movs	r2, #0
 80046fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3314      	adds	r3, #20
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	e853 3f00 	ldrex	r3, [r3]
 800470c:	623b      	str	r3, [r7, #32]
   return(result);
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004714:	63bb      	str	r3, [r7, #56]	; 0x38
 8004716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3314      	adds	r3, #20
 800471c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800471e:	633a      	str	r2, [r7, #48]	; 0x30
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e5      	bne.n	80046fe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	330c      	adds	r3, #12
 8004738:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	60fb      	str	r3, [r7, #12]
   return(result);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004748:	637b      	str	r3, [r7, #52]	; 0x34
 800474a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	330c      	adds	r3, #12
 8004750:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004752:	61fa      	str	r2, [r7, #28]
 8004754:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	69b9      	ldr	r1, [r7, #24]
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	617b      	str	r3, [r7, #20]
   return(result);
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e5      	bne.n	8004732 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004766:	e002      	b.n	800476e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004768:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800476a:	f7ff ff79 	bl	8004660 <HAL_UART_TxCpltCallback>
}
 800476e:	bf00      	nop
 8004770:	3740      	adds	r7, #64	; 0x40
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f7ff ff75 	bl	8004674 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800478a:	bf00      	nop
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b09c      	sub	sp, #112	; 0x70
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d172      	bne.n	8004894 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80047ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b0:	2200      	movs	r2, #0
 80047b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	330c      	adds	r3, #12
 80047ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80047cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	330c      	adds	r3, #12
 80047d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80047d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e5      	bne.n	80047b4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3314      	adds	r3, #20
 80047ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f2:	e853 3f00 	ldrex	r3, [r3]
 80047f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fa:	f023 0301 	bic.w	r3, r3, #1
 80047fe:	667b      	str	r3, [r7, #100]	; 0x64
 8004800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3314      	adds	r3, #20
 8004806:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004808:	647a      	str	r2, [r7, #68]	; 0x44
 800480a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800480e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004810:	e841 2300 	strex	r3, r2, [r1]
 8004814:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e5      	bne.n	80047e8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800481c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3314      	adds	r3, #20
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	e853 3f00 	ldrex	r3, [r3]
 800482a:	623b      	str	r3, [r7, #32]
   return(result);
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004832:	663b      	str	r3, [r7, #96]	; 0x60
 8004834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3314      	adds	r3, #20
 800483a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800483c:	633a      	str	r2, [r7, #48]	; 0x30
 800483e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004844:	e841 2300 	strex	r3, r2, [r1]
 8004848:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e5      	bne.n	800481c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004852:	2220      	movs	r2, #32
 8004854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	2b01      	cmp	r3, #1
 800485e:	d119      	bne.n	8004894 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0310 	bic.w	r3, r3, #16
 8004876:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	330c      	adds	r3, #12
 800487e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004880:	61fa      	str	r2, [r7, #28]
 8004882:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004884:	69b9      	ldr	r1, [r7, #24]
 8004886:	69fa      	ldr	r2, [r7, #28]
 8004888:	e841 2300 	strex	r3, r2, [r1]
 800488c:	617b      	str	r3, [r7, #20]
   return(result);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e5      	bne.n	8004860 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004896:	2200      	movs	r2, #0
 8004898:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800489a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d106      	bne.n	80048b0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048a6:	4619      	mov	r1, r3
 80048a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80048aa:	f7ff ff0b 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048ae:	e002      	b.n	80048b6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80048b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80048b2:	f7ff fee9 	bl	8004688 <HAL_UART_RxCpltCallback>
}
 80048b6:	bf00      	nop
 80048b8:	3770      	adds	r7, #112	; 0x70
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d108      	bne.n	80048ec <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048de:	085b      	lsrs	r3, r3, #1
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	4619      	mov	r1, r3
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7ff feed 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048ea:	e002      	b.n	80048f2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f7ff fed5 	bl	800469c <HAL_UART_RxHalfCpltCallback>
}
 80048f2:	bf00      	nop
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004916:	2b80      	cmp	r3, #128	; 0x80
 8004918:	bf0c      	ite	eq
 800491a:	2301      	moveq	r3, #1
 800491c:	2300      	movne	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b21      	cmp	r3, #33	; 0x21
 800492c:	d108      	bne.n	8004940 <UART_DMAError+0x46>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2200      	movs	r2, #0
 8004938:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800493a:	68b8      	ldr	r0, [r7, #8]
 800493c:	f000 f8c2 	bl	8004ac4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494a:	2b40      	cmp	r3, #64	; 0x40
 800494c:	bf0c      	ite	eq
 800494e:	2301      	moveq	r3, #1
 8004950:	2300      	movne	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b22      	cmp	r3, #34	; 0x22
 8004960:	d108      	bne.n	8004974 <UART_DMAError+0x7a>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2200      	movs	r2, #0
 800496c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800496e:	68b8      	ldr	r0, [r7, #8]
 8004970:	f000 f8d0 	bl	8004b14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004978:	f043 0210 	orr.w	r2, r3, #16
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004980:	68b8      	ldr	r0, [r7, #8]
 8004982:	f7ff fe95 	bl	80046b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004986:	bf00      	nop
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b098      	sub	sp, #96	; 0x60
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	4613      	mov	r3, r2
 800499c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	88fa      	ldrh	r2, [r7, #6]
 80049a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2222      	movs	r2, #34	; 0x22
 80049b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049bc:	4a3e      	ldr	r2, [pc, #248]	; (8004ab8 <UART_Start_Receive_DMA+0x128>)
 80049be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c4:	4a3d      	ldr	r2, [pc, #244]	; (8004abc <UART_Start_Receive_DMA+0x12c>)
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049cc:	4a3c      	ldr	r2, [pc, #240]	; (8004ac0 <UART_Start_Receive_DMA+0x130>)
 80049ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d4:	2200      	movs	r2, #0
 80049d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80049d8:	f107 0308 	add.w	r3, r7, #8
 80049dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3304      	adds	r3, #4
 80049e8:	4619      	mov	r1, r3
 80049ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	f7fd fc4a 	bl	8002288 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80049f4:	2300      	movs	r3, #0
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	613b      	str	r3, [r7, #16]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d019      	beq.n	8004a46 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	330c      	adds	r3, #12
 8004a18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a28:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	330c      	adds	r3, #12
 8004a30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a32:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004a34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004a38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e5      	bne.n	8004a12 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3314      	adds	r3, #20
 8004a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	657b      	str	r3, [r7, #84]	; 0x54
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3314      	adds	r3, #20
 8004a64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a66:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e5      	bne.n	8004a46 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3314      	adds	r3, #20
 8004a80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	617b      	str	r3, [r7, #20]
   return(result);
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a90:	653b      	str	r3, [r7, #80]	; 0x50
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3314      	adds	r3, #20
 8004a98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a9a:	627a      	str	r2, [r7, #36]	; 0x24
 8004a9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6a39      	ldr	r1, [r7, #32]
 8004aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e5      	bne.n	8004a7a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3760      	adds	r7, #96	; 0x60
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	08004793 	.word	0x08004793
 8004abc:	080048bf 	.word	0x080048bf
 8004ac0:	080048fb 	.word	0x080048fb

08004ac4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b089      	sub	sp, #36	; 0x24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	330c      	adds	r3, #12
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	61ba      	str	r2, [r7, #24]
 8004aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6979      	ldr	r1, [r7, #20]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	613b      	str	r3, [r7, #16]
   return(result);
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e5      	bne.n	8004acc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004b08:	bf00      	nop
 8004b0a:	3724      	adds	r7, #36	; 0x24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b095      	sub	sp, #84	; 0x54
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b3c:	643a      	str	r2, [r7, #64]	; 0x40
 8004b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e5      	bne.n	8004b1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3314      	adds	r3, #20
 8004b56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	f023 0301 	bic.w	r3, r3, #1
 8004b66:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3314      	adds	r3, #20
 8004b6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e5      	bne.n	8004b50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d119      	bne.n	8004bc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	330c      	adds	r3, #12
 8004b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f023 0310 	bic.w	r3, r3, #16
 8004ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bac:	61ba      	str	r2, [r7, #24]
 8004bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	6979      	ldr	r1, [r7, #20]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e5      	bne.n	8004b8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bce:	bf00      	nop
 8004bd0:	3754      	adds	r7, #84	; 0x54
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f7ff fd5b 	bl	80046b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b085      	sub	sp, #20
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b21      	cmp	r3, #33	; 0x21
 8004c14:	d13e      	bne.n	8004c94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1e:	d114      	bne.n	8004c4a <UART_Transmit_IT+0x48>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d110      	bne.n	8004c4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	1c9a      	adds	r2, r3, #2
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	621a      	str	r2, [r3, #32]
 8004c48:	e008      	b.n	8004c5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	1c59      	adds	r1, r3, #1
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6211      	str	r1, [r2, #32]
 8004c54:	781a      	ldrb	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10f      	bne.n	8004c90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	e000      	b.n	8004c96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c94:	2302      	movs	r3, #2
  }
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7ff fccc 	bl	8004660 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b08c      	sub	sp, #48	; 0x30
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b22      	cmp	r3, #34	; 0x22
 8004ce4:	f040 80ae 	bne.w	8004e44 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf0:	d117      	bne.n	8004d22 <UART_Receive_IT+0x50>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d113      	bne.n	8004d22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	1c9a      	adds	r2, r3, #2
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	629a      	str	r2, [r3, #40]	; 0x28
 8004d20:	e026      	b.n	8004d70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d34:	d007      	beq.n	8004d46 <UART_Receive_IT+0x74>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10a      	bne.n	8004d54 <UART_Receive_IT+0x82>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	e008      	b.n	8004d66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d15d      	bne.n	8004e40 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0220 	bic.w	r2, r2, #32
 8004d92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004da2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695a      	ldr	r2, [r3, #20]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0201 	bic.w	r2, r2, #1
 8004db2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d135      	bne.n	8004e36 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	330c      	adds	r3, #12
 8004dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	e853 3f00 	ldrex	r3, [r3]
 8004dde:	613b      	str	r3, [r7, #16]
   return(result);
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f023 0310 	bic.w	r3, r3, #16
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	330c      	adds	r3, #12
 8004dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df0:	623a      	str	r2, [r7, #32]
 8004df2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	69f9      	ldr	r1, [r7, #28]
 8004df6:	6a3a      	ldr	r2, [r7, #32]
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e5      	bne.n	8004dd0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0310 	and.w	r3, r3, #16
 8004e0e:	2b10      	cmp	r3, #16
 8004e10:	d10a      	bne.n	8004e28 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff fc48 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
 8004e34:	e002      	b.n	8004e3c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff fc26 	bl	8004688 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	e002      	b.n	8004e46 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	e000      	b.n	8004e46 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
  }
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3730      	adds	r7, #48	; 0x30
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e54:	b0c0      	sub	sp, #256	; 0x100
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	68d9      	ldr	r1, [r3, #12]
 8004e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	ea40 0301 	orr.w	r3, r0, r1
 8004e78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	431a      	orrs	r2, r3
 8004e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ea8:	f021 010c 	bic.w	r1, r1, #12
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004eb6:	430b      	orrs	r3, r1
 8004eb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eca:	6999      	ldr	r1, [r3, #24]
 8004ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	ea40 0301 	orr.w	r3, r0, r1
 8004ed6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4b8f      	ldr	r3, [pc, #572]	; (800511c <UART_SetConfig+0x2cc>)
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d005      	beq.n	8004ef0 <UART_SetConfig+0xa0>
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4b8d      	ldr	r3, [pc, #564]	; (8005120 <UART_SetConfig+0x2d0>)
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d104      	bne.n	8004efa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ef0:	f7fe fb40 	bl	8003574 <HAL_RCC_GetPCLK2Freq>
 8004ef4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ef8:	e003      	b.n	8004f02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004efa:	f7fe fb27 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 8004efe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f0c:	f040 810c 	bne.w	8005128 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f22:	4622      	mov	r2, r4
 8004f24:	462b      	mov	r3, r5
 8004f26:	1891      	adds	r1, r2, r2
 8004f28:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f2a:	415b      	adcs	r3, r3
 8004f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f32:	4621      	mov	r1, r4
 8004f34:	eb12 0801 	adds.w	r8, r2, r1
 8004f38:	4629      	mov	r1, r5
 8004f3a:	eb43 0901 	adc.w	r9, r3, r1
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f52:	4690      	mov	r8, r2
 8004f54:	4699      	mov	r9, r3
 8004f56:	4623      	mov	r3, r4
 8004f58:	eb18 0303 	adds.w	r3, r8, r3
 8004f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f60:	462b      	mov	r3, r5
 8004f62:	eb49 0303 	adc.w	r3, r9, r3
 8004f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f7e:	460b      	mov	r3, r1
 8004f80:	18db      	adds	r3, r3, r3
 8004f82:	653b      	str	r3, [r7, #80]	; 0x50
 8004f84:	4613      	mov	r3, r2
 8004f86:	eb42 0303 	adc.w	r3, r2, r3
 8004f8a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f94:	f7fb f9dc 	bl	8000350 <__aeabi_uldivmod>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4b61      	ldr	r3, [pc, #388]	; (8005124 <UART_SetConfig+0x2d4>)
 8004f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	011c      	lsls	r4, r3, #4
 8004fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fb0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004fb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004fb8:	4642      	mov	r2, r8
 8004fba:	464b      	mov	r3, r9
 8004fbc:	1891      	adds	r1, r2, r2
 8004fbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fc0:	415b      	adcs	r3, r3
 8004fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fc8:	4641      	mov	r1, r8
 8004fca:	eb12 0a01 	adds.w	sl, r2, r1
 8004fce:	4649      	mov	r1, r9
 8004fd0:	eb43 0b01 	adc.w	fp, r3, r1
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fe0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fe4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fe8:	4692      	mov	sl, r2
 8004fea:	469b      	mov	fp, r3
 8004fec:	4643      	mov	r3, r8
 8004fee:	eb1a 0303 	adds.w	r3, sl, r3
 8004ff2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	eb4b 0303 	adc.w	r3, fp, r3
 8004ffc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800500c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005010:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005014:	460b      	mov	r3, r1
 8005016:	18db      	adds	r3, r3, r3
 8005018:	643b      	str	r3, [r7, #64]	; 0x40
 800501a:	4613      	mov	r3, r2
 800501c:	eb42 0303 	adc.w	r3, r2, r3
 8005020:	647b      	str	r3, [r7, #68]	; 0x44
 8005022:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005026:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800502a:	f7fb f991 	bl	8000350 <__aeabi_uldivmod>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4611      	mov	r1, r2
 8005034:	4b3b      	ldr	r3, [pc, #236]	; (8005124 <UART_SetConfig+0x2d4>)
 8005036:	fba3 2301 	umull	r2, r3, r3, r1
 800503a:	095b      	lsrs	r3, r3, #5
 800503c:	2264      	movs	r2, #100	; 0x64
 800503e:	fb02 f303 	mul.w	r3, r2, r3
 8005042:	1acb      	subs	r3, r1, r3
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800504a:	4b36      	ldr	r3, [pc, #216]	; (8005124 <UART_SetConfig+0x2d4>)
 800504c:	fba3 2302 	umull	r2, r3, r3, r2
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005058:	441c      	add	r4, r3
 800505a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800505e:	2200      	movs	r2, #0
 8005060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005064:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005068:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800506c:	4642      	mov	r2, r8
 800506e:	464b      	mov	r3, r9
 8005070:	1891      	adds	r1, r2, r2
 8005072:	63b9      	str	r1, [r7, #56]	; 0x38
 8005074:	415b      	adcs	r3, r3
 8005076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005078:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800507c:	4641      	mov	r1, r8
 800507e:	1851      	adds	r1, r2, r1
 8005080:	6339      	str	r1, [r7, #48]	; 0x30
 8005082:	4649      	mov	r1, r9
 8005084:	414b      	adcs	r3, r1
 8005086:	637b      	str	r3, [r7, #52]	; 0x34
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005094:	4659      	mov	r1, fp
 8005096:	00cb      	lsls	r3, r1, #3
 8005098:	4651      	mov	r1, sl
 800509a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800509e:	4651      	mov	r1, sl
 80050a0:	00ca      	lsls	r2, r1, #3
 80050a2:	4610      	mov	r0, r2
 80050a4:	4619      	mov	r1, r3
 80050a6:	4603      	mov	r3, r0
 80050a8:	4642      	mov	r2, r8
 80050aa:	189b      	adds	r3, r3, r2
 80050ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050b0:	464b      	mov	r3, r9
 80050b2:	460a      	mov	r2, r1
 80050b4:	eb42 0303 	adc.w	r3, r2, r3
 80050b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050d0:	460b      	mov	r3, r1
 80050d2:	18db      	adds	r3, r3, r3
 80050d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050d6:	4613      	mov	r3, r2
 80050d8:	eb42 0303 	adc.w	r3, r2, r3
 80050dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050e6:	f7fb f933 	bl	8000350 <__aeabi_uldivmod>
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <UART_SetConfig+0x2d4>)
 80050f0:	fba3 1302 	umull	r1, r3, r3, r2
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	2164      	movs	r1, #100	; 0x64
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	3332      	adds	r3, #50	; 0x32
 8005102:	4a08      	ldr	r2, [pc, #32]	; (8005124 <UART_SetConfig+0x2d4>)
 8005104:	fba2 2303 	umull	r2, r3, r2, r3
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	f003 0207 	and.w	r2, r3, #7
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4422      	add	r2, r4
 8005116:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005118:	e106      	b.n	8005328 <UART_SetConfig+0x4d8>
 800511a:	bf00      	nop
 800511c:	40011000 	.word	0x40011000
 8005120:	40011400 	.word	0x40011400
 8005124:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800512c:	2200      	movs	r2, #0
 800512e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005132:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005136:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800513a:	4642      	mov	r2, r8
 800513c:	464b      	mov	r3, r9
 800513e:	1891      	adds	r1, r2, r2
 8005140:	6239      	str	r1, [r7, #32]
 8005142:	415b      	adcs	r3, r3
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
 8005146:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800514a:	4641      	mov	r1, r8
 800514c:	1854      	adds	r4, r2, r1
 800514e:	4649      	mov	r1, r9
 8005150:	eb43 0501 	adc.w	r5, r3, r1
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	00eb      	lsls	r3, r5, #3
 800515e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005162:	00e2      	lsls	r2, r4, #3
 8005164:	4614      	mov	r4, r2
 8005166:	461d      	mov	r5, r3
 8005168:	4643      	mov	r3, r8
 800516a:	18e3      	adds	r3, r4, r3
 800516c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005170:	464b      	mov	r3, r9
 8005172:	eb45 0303 	adc.w	r3, r5, r3
 8005176:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800517a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005186:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005196:	4629      	mov	r1, r5
 8005198:	008b      	lsls	r3, r1, #2
 800519a:	4621      	mov	r1, r4
 800519c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051a0:	4621      	mov	r1, r4
 80051a2:	008a      	lsls	r2, r1, #2
 80051a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051a8:	f7fb f8d2 	bl	8000350 <__aeabi_uldivmod>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	4b60      	ldr	r3, [pc, #384]	; (8005334 <UART_SetConfig+0x4e4>)
 80051b2:	fba3 2302 	umull	r2, r3, r3, r2
 80051b6:	095b      	lsrs	r3, r3, #5
 80051b8:	011c      	lsls	r4, r3, #4
 80051ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051be:	2200      	movs	r2, #0
 80051c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051cc:	4642      	mov	r2, r8
 80051ce:	464b      	mov	r3, r9
 80051d0:	1891      	adds	r1, r2, r2
 80051d2:	61b9      	str	r1, [r7, #24]
 80051d4:	415b      	adcs	r3, r3
 80051d6:	61fb      	str	r3, [r7, #28]
 80051d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051dc:	4641      	mov	r1, r8
 80051de:	1851      	adds	r1, r2, r1
 80051e0:	6139      	str	r1, [r7, #16]
 80051e2:	4649      	mov	r1, r9
 80051e4:	414b      	adcs	r3, r1
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051f4:	4659      	mov	r1, fp
 80051f6:	00cb      	lsls	r3, r1, #3
 80051f8:	4651      	mov	r1, sl
 80051fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051fe:	4651      	mov	r1, sl
 8005200:	00ca      	lsls	r2, r1, #3
 8005202:	4610      	mov	r0, r2
 8005204:	4619      	mov	r1, r3
 8005206:	4603      	mov	r3, r0
 8005208:	4642      	mov	r2, r8
 800520a:	189b      	adds	r3, r3, r2
 800520c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005210:	464b      	mov	r3, r9
 8005212:	460a      	mov	r2, r1
 8005214:	eb42 0303 	adc.w	r3, r2, r3
 8005218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	67bb      	str	r3, [r7, #120]	; 0x78
 8005226:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005234:	4649      	mov	r1, r9
 8005236:	008b      	lsls	r3, r1, #2
 8005238:	4641      	mov	r1, r8
 800523a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800523e:	4641      	mov	r1, r8
 8005240:	008a      	lsls	r2, r1, #2
 8005242:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005246:	f7fb f883 	bl	8000350 <__aeabi_uldivmod>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4611      	mov	r1, r2
 8005250:	4b38      	ldr	r3, [pc, #224]	; (8005334 <UART_SetConfig+0x4e4>)
 8005252:	fba3 2301 	umull	r2, r3, r3, r1
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	2264      	movs	r2, #100	; 0x64
 800525a:	fb02 f303 	mul.w	r3, r2, r3
 800525e:	1acb      	subs	r3, r1, r3
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	3332      	adds	r3, #50	; 0x32
 8005264:	4a33      	ldr	r2, [pc, #204]	; (8005334 <UART_SetConfig+0x4e4>)
 8005266:	fba2 2303 	umull	r2, r3, r2, r3
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005270:	441c      	add	r4, r3
 8005272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005276:	2200      	movs	r2, #0
 8005278:	673b      	str	r3, [r7, #112]	; 0x70
 800527a:	677a      	str	r2, [r7, #116]	; 0x74
 800527c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005280:	4642      	mov	r2, r8
 8005282:	464b      	mov	r3, r9
 8005284:	1891      	adds	r1, r2, r2
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	415b      	adcs	r3, r3
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005290:	4641      	mov	r1, r8
 8005292:	1851      	adds	r1, r2, r1
 8005294:	6039      	str	r1, [r7, #0]
 8005296:	4649      	mov	r1, r9
 8005298:	414b      	adcs	r3, r1
 800529a:	607b      	str	r3, [r7, #4]
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052a8:	4659      	mov	r1, fp
 80052aa:	00cb      	lsls	r3, r1, #3
 80052ac:	4651      	mov	r1, sl
 80052ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052b2:	4651      	mov	r1, sl
 80052b4:	00ca      	lsls	r2, r1, #3
 80052b6:	4610      	mov	r0, r2
 80052b8:	4619      	mov	r1, r3
 80052ba:	4603      	mov	r3, r0
 80052bc:	4642      	mov	r2, r8
 80052be:	189b      	adds	r3, r3, r2
 80052c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80052c2:	464b      	mov	r3, r9
 80052c4:	460a      	mov	r2, r1
 80052c6:	eb42 0303 	adc.w	r3, r2, r3
 80052ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	663b      	str	r3, [r7, #96]	; 0x60
 80052d6:	667a      	str	r2, [r7, #100]	; 0x64
 80052d8:	f04f 0200 	mov.w	r2, #0
 80052dc:	f04f 0300 	mov.w	r3, #0
 80052e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80052e4:	4649      	mov	r1, r9
 80052e6:	008b      	lsls	r3, r1, #2
 80052e8:	4641      	mov	r1, r8
 80052ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052ee:	4641      	mov	r1, r8
 80052f0:	008a      	lsls	r2, r1, #2
 80052f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80052f6:	f7fb f82b 	bl	8000350 <__aeabi_uldivmod>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <UART_SetConfig+0x4e4>)
 8005300:	fba3 1302 	umull	r1, r3, r3, r2
 8005304:	095b      	lsrs	r3, r3, #5
 8005306:	2164      	movs	r1, #100	; 0x64
 8005308:	fb01 f303 	mul.w	r3, r1, r3
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	3332      	adds	r3, #50	; 0x32
 8005312:	4a08      	ldr	r2, [pc, #32]	; (8005334 <UART_SetConfig+0x4e4>)
 8005314:	fba2 2303 	umull	r2, r3, r2, r3
 8005318:	095b      	lsrs	r3, r3, #5
 800531a:	f003 020f 	and.w	r2, r3, #15
 800531e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4422      	add	r2, r4
 8005326:	609a      	str	r2, [r3, #8]
}
 8005328:	bf00      	nop
 800532a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800532e:	46bd      	mov	sp, r7
 8005330:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005334:	51eb851f 	.word	0x51eb851f

08005338 <__NVIC_SetPriority>:
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	4603      	mov	r3, r0
 8005340:	6039      	str	r1, [r7, #0]
 8005342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005348:	2b00      	cmp	r3, #0
 800534a:	db0a      	blt.n	8005362 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	b2da      	uxtb	r2, r3
 8005350:	490c      	ldr	r1, [pc, #48]	; (8005384 <__NVIC_SetPriority+0x4c>)
 8005352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005356:	0112      	lsls	r2, r2, #4
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	440b      	add	r3, r1
 800535c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005360:	e00a      	b.n	8005378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	b2da      	uxtb	r2, r3
 8005366:	4908      	ldr	r1, [pc, #32]	; (8005388 <__NVIC_SetPriority+0x50>)
 8005368:	79fb      	ldrb	r3, [r7, #7]
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	3b04      	subs	r3, #4
 8005370:	0112      	lsls	r2, r2, #4
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	440b      	add	r3, r1
 8005376:	761a      	strb	r2, [r3, #24]
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	e000e100 	.word	0xe000e100
 8005388:	e000ed00 	.word	0xe000ed00

0800538c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005390:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <SysTick_Handler+0x1c>)
 8005392:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005394:	f001 fd4e 	bl	8006e34 <xTaskGetSchedulerState>
 8005398:	4603      	mov	r3, r0
 800539a:	2b01      	cmp	r3, #1
 800539c:	d001      	beq.n	80053a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800539e:	f002 fb33 	bl	8007a08 <xPortSysTickHandler>
  }
}
 80053a2:	bf00      	nop
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	e000e010 	.word	0xe000e010

080053ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80053b0:	2100      	movs	r1, #0
 80053b2:	f06f 0004 	mvn.w	r0, #4
 80053b6:	f7ff ffbf 	bl	8005338 <__NVIC_SetPriority>
#endif
}
 80053ba:	bf00      	nop
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c6:	f3ef 8305 	mrs	r3, IPSR
 80053ca:	603b      	str	r3, [r7, #0]
  return(result);
 80053cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80053d2:	f06f 0305 	mvn.w	r3, #5
 80053d6:	607b      	str	r3, [r7, #4]
 80053d8:	e00c      	b.n	80053f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80053da:	4b0a      	ldr	r3, [pc, #40]	; (8005404 <osKernelInitialize+0x44>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d105      	bne.n	80053ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80053e2:	4b08      	ldr	r3, [pc, #32]	; (8005404 <osKernelInitialize+0x44>)
 80053e4:	2201      	movs	r2, #1
 80053e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	607b      	str	r3, [r7, #4]
 80053ec:	e002      	b.n	80053f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80053ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053f4:	687b      	ldr	r3, [r7, #4]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	200076cc 	.word	0x200076cc

08005408 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800540e:	f3ef 8305 	mrs	r3, IPSR
 8005412:	603b      	str	r3, [r7, #0]
  return(result);
 8005414:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <osKernelStart+0x1a>
    stat = osErrorISR;
 800541a:	f06f 0305 	mvn.w	r3, #5
 800541e:	607b      	str	r3, [r7, #4]
 8005420:	e010      	b.n	8005444 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005422:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <osKernelStart+0x48>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d109      	bne.n	800543e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800542a:	f7ff ffbf 	bl	80053ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800542e:	4b08      	ldr	r3, [pc, #32]	; (8005450 <osKernelStart+0x48>)
 8005430:	2202      	movs	r2, #2
 8005432:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005434:	f001 f87c 	bl	8006530 <vTaskStartScheduler>
      stat = osOK;
 8005438:	2300      	movs	r3, #0
 800543a:	607b      	str	r3, [r7, #4]
 800543c:	e002      	b.n	8005444 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800543e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005442:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005444:	687b      	ldr	r3, [r7, #4]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	200076cc 	.word	0x200076cc

08005454 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005454:	b580      	push	{r7, lr}
 8005456:	b08e      	sub	sp, #56	; 0x38
 8005458:	af04      	add	r7, sp, #16
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005460:	2300      	movs	r3, #0
 8005462:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005464:	f3ef 8305 	mrs	r3, IPSR
 8005468:	617b      	str	r3, [r7, #20]
  return(result);
 800546a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800546c:	2b00      	cmp	r3, #0
 800546e:	d17e      	bne.n	800556e <osThreadNew+0x11a>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d07b      	beq.n	800556e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005476:	2380      	movs	r3, #128	; 0x80
 8005478:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800547a:	2318      	movs	r3, #24
 800547c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800547e:	2300      	movs	r3, #0
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005486:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d045      	beq.n	800551a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <osThreadNew+0x48>
        name = attr->name;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d008      	beq.n	80054c2 <osThreadNew+0x6e>
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	2b38      	cmp	r3, #56	; 0x38
 80054b4:	d805      	bhi.n	80054c2 <osThreadNew+0x6e>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <osThreadNew+0x72>
        return (NULL);
 80054c2:	2300      	movs	r3, #0
 80054c4:	e054      	b.n	8005570 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	089b      	lsrs	r3, r3, #2
 80054d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00e      	beq.n	80054fc <osThreadNew+0xa8>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	2ba7      	cmp	r3, #167	; 0xa7
 80054e4:	d90a      	bls.n	80054fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d006      	beq.n	80054fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <osThreadNew+0xa8>
        mem = 1;
 80054f6:	2301      	movs	r3, #1
 80054f8:	61bb      	str	r3, [r7, #24]
 80054fa:	e010      	b.n	800551e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10c      	bne.n	800551e <osThreadNew+0xca>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d108      	bne.n	800551e <osThreadNew+0xca>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d104      	bne.n	800551e <osThreadNew+0xca>
          mem = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	e001      	b.n	800551e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800551a:	2300      	movs	r3, #0
 800551c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d110      	bne.n	8005546 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800552c:	9202      	str	r2, [sp, #8]
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	6a3a      	ldr	r2, [r7, #32]
 8005538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fe0c 	bl	8006158 <xTaskCreateStatic>
 8005540:	4603      	mov	r3, r0
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	e013      	b.n	800556e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d110      	bne.n	800556e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	b29a      	uxth	r2, r3
 8005550:	f107 0310 	add.w	r3, r7, #16
 8005554:	9301      	str	r3, [sp, #4]
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 fe57 	bl	8006212 <xTaskCreate>
 8005564:	4603      	mov	r3, r0
 8005566:	2b01      	cmp	r3, #1
 8005568:	d001      	beq.n	800556e <osThreadNew+0x11a>
            hTask = NULL;
 800556a:	2300      	movs	r3, #0
 800556c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800556e:	693b      	ldr	r3, [r7, #16]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3728      	adds	r7, #40	; 0x28
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005580:	f3ef 8305 	mrs	r3, IPSR
 8005584:	60bb      	str	r3, [r7, #8]
  return(result);
 8005586:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <osDelay+0x1c>
    stat = osErrorISR;
 800558c:	f06f 0305 	mvn.w	r3, #5
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	e007      	b.n	80055a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 ff92 	bl	80064c8 <vTaskDelay>
    }
  }

  return (stat);
 80055a4:	68fb      	ldr	r3, [r7, #12]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4a07      	ldr	r2, [pc, #28]	; (80055dc <vApplicationGetIdleTaskMemory+0x2c>)
 80055c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	4a06      	ldr	r2, [pc, #24]	; (80055e0 <vApplicationGetIdleTaskMemory+0x30>)
 80055c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2280      	movs	r2, #128	; 0x80
 80055cc:	601a      	str	r2, [r3, #0]
}
 80055ce:	bf00      	nop
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	200076d0 	.word	0x200076d0
 80055e0:	20007778 	.word	0x20007778

080055e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4a07      	ldr	r2, [pc, #28]	; (8005610 <vApplicationGetTimerTaskMemory+0x2c>)
 80055f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	4a06      	ldr	r2, [pc, #24]	; (8005614 <vApplicationGetTimerTaskMemory+0x30>)
 80055fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005602:	601a      	str	r2, [r3, #0]
}
 8005604:	bf00      	nop
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	20007978 	.word	0x20007978
 8005614:	20007a20 	.word	0x20007a20

08005618 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f103 0208 	add.w	r2, r3, #8
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005630:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f103 0208 	add.w	r2, r3, #8
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f103 0208 	add.w	r2, r3, #8
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	601a      	str	r2, [r3, #0]
}
 80056ae:	bf00      	nop
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056d0:	d103      	bne.n	80056da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	e00c      	b.n	80056f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3308      	adds	r3, #8
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	e002      	b.n	80056e8 <vListInsert+0x2e>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d2f6      	bcs.n	80056e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	601a      	str	r2, [r3, #0]
}
 8005720:	bf00      	nop
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6892      	ldr	r2, [r2, #8]
 8005742:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6852      	ldr	r2, [r2, #4]
 800574c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	429a      	cmp	r2, r3
 8005756:	d103      	bne.n	8005760 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	1e5a      	subs	r2, r3, #1
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10a      	bne.n	80057aa <xQueueGenericReset+0x2a>
	__asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	60bb      	str	r3, [r7, #8]
}
 80057a6:	bf00      	nop
 80057a8:	e7fe      	b.n	80057a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80057aa:	f002 f89b 	bl	80078e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b6:	68f9      	ldr	r1, [r7, #12]
 80057b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057ba:	fb01 f303 	mul.w	r3, r1, r3
 80057be:	441a      	add	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057da:	3b01      	subs	r3, #1
 80057dc:	68f9      	ldr	r1, [r7, #12]
 80057de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057e0:	fb01 f303 	mul.w	r3, r1, r3
 80057e4:	441a      	add	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	22ff      	movs	r2, #255	; 0xff
 80057ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	22ff      	movs	r2, #255	; 0xff
 80057f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d114      	bne.n	800582a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01a      	beq.n	800583e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3310      	adds	r3, #16
 800580c:	4618      	mov	r0, r3
 800580e:	f001 f929 	bl	8006a64 <xTaskRemoveFromEventList>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d012      	beq.n	800583e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005818:	4b0c      	ldr	r3, [pc, #48]	; (800584c <xQueueGenericReset+0xcc>)
 800581a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	e009      	b.n	800583e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	3310      	adds	r3, #16
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff fef2 	bl	8005618 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3324      	adds	r3, #36	; 0x24
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff feed 	bl	8005618 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800583e:	f002 f881 	bl	8007944 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005842:	2301      	movs	r3, #1
}
 8005844:	4618      	mov	r0, r3
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	e000ed04 	.word	0xe000ed04

08005850 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08e      	sub	sp, #56	; 0x38
 8005854:	af02      	add	r7, sp, #8
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005876:	bf00      	nop
 8005878:	e7fe      	b.n	8005878 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005892:	bf00      	nop
 8005894:	e7fe      	b.n	8005894 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d002      	beq.n	80058a2 <xQueueGenericCreateStatic+0x52>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <xQueueGenericCreateStatic+0x56>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <xQueueGenericCreateStatic+0x58>
 80058a6:	2300      	movs	r3, #0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10a      	bne.n	80058c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	623b      	str	r3, [r7, #32]
}
 80058be:	bf00      	nop
 80058c0:	e7fe      	b.n	80058c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d102      	bne.n	80058ce <xQueueGenericCreateStatic+0x7e>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <xQueueGenericCreateStatic+0x82>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <xQueueGenericCreateStatic+0x84>
 80058d2:	2300      	movs	r3, #0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	61fb      	str	r3, [r7, #28]
}
 80058ea:	bf00      	nop
 80058ec:	e7fe      	b.n	80058ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058ee:	2350      	movs	r3, #80	; 0x50
 80058f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b50      	cmp	r3, #80	; 0x50
 80058f6:	d00a      	beq.n	800590e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	61bb      	str	r3, [r7, #24]
}
 800590a:	bf00      	nop
 800590c:	e7fe      	b.n	800590c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800590e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00d      	beq.n	8005936 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005922:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	4613      	mov	r3, r2
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	68b9      	ldr	r1, [r7, #8]
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 f805 	bl	8005940 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005938:	4618      	mov	r0, r3
 800593a:	3730      	adds	r7, #48	; 0x30
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d103      	bne.n	800595c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	e002      	b.n	8005962 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800596e:	2101      	movs	r1, #1
 8005970:	69b8      	ldr	r0, [r7, #24]
 8005972:	f7ff ff05 	bl	8005780 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	78fa      	ldrb	r2, [r7, #3]
 800597a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800597e:	bf00      	nop
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08e      	sub	sp, #56	; 0x38
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005996:	2300      	movs	r3, #0
 8005998:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <xQueueGenericSend+0x32>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d103      	bne.n	80059c8 <xQueueGenericSend+0x40>
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <xQueueGenericSend+0x44>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <xQueueGenericSend+0x46>
 80059cc:	2300      	movs	r3, #0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10a      	bne.n	80059e8 <xQueueGenericSend+0x60>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059e4:	bf00      	nop
 80059e6:	e7fe      	b.n	80059e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d103      	bne.n	80059f6 <xQueueGenericSend+0x6e>
 80059ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d101      	bne.n	80059fa <xQueueGenericSend+0x72>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e000      	b.n	80059fc <xQueueGenericSend+0x74>
 80059fa:	2300      	movs	r3, #0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <xQueueGenericSend+0x8e>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	623b      	str	r3, [r7, #32]
}
 8005a12:	bf00      	nop
 8005a14:	e7fe      	b.n	8005a14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a16:	f001 fa0d 	bl	8006e34 <xTaskGetSchedulerState>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d102      	bne.n	8005a26 <xQueueGenericSend+0x9e>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <xQueueGenericSend+0xa2>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <xQueueGenericSend+0xa4>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10a      	bne.n	8005a46 <xQueueGenericSend+0xbe>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	61fb      	str	r3, [r7, #28]
}
 8005a42:	bf00      	nop
 8005a44:	e7fe      	b.n	8005a44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a46:	f001 ff4d 	bl	80078e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d302      	bcc.n	8005a5c <xQueueGenericSend+0xd4>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d129      	bne.n	8005ab0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	68b9      	ldr	r1, [r7, #8]
 8005a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a62:	f000 fa0b 	bl	8005e7c <prvCopyDataToQueue>
 8005a66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d010      	beq.n	8005a92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	3324      	adds	r3, #36	; 0x24
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fff5 	bl	8006a64 <xTaskRemoveFromEventList>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d013      	beq.n	8005aa8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a80:	4b3f      	ldr	r3, [pc, #252]	; (8005b80 <xQueueGenericSend+0x1f8>)
 8005a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	e00a      	b.n	8005aa8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d007      	beq.n	8005aa8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a98:	4b39      	ldr	r3, [pc, #228]	; (8005b80 <xQueueGenericSend+0x1f8>)
 8005a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005aa8:	f001 ff4c 	bl	8007944 <vPortExitCritical>
				return pdPASS;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e063      	b.n	8005b78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d103      	bne.n	8005abe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ab6:	f001 ff45 	bl	8007944 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005aba:	2300      	movs	r3, #0
 8005abc:	e05c      	b.n	8005b78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d106      	bne.n	8005ad2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ac4:	f107 0314 	add.w	r3, r7, #20
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f001 f855 	bl	8006b78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ad2:	f001 ff37 	bl	8007944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ad6:	f000 fd9b 	bl	8006610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ada:	f001 ff03 	bl	80078e4 <vPortEnterCritical>
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ae4:	b25b      	sxtb	r3, r3
 8005ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aea:	d103      	bne.n	8005af4 <xQueueGenericSend+0x16c>
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005afa:	b25b      	sxtb	r3, r3
 8005afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b00:	d103      	bne.n	8005b0a <xQueueGenericSend+0x182>
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b0a:	f001 ff1b 	bl	8007944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b0e:	1d3a      	adds	r2, r7, #4
 8005b10:	f107 0314 	add.w	r3, r7, #20
 8005b14:	4611      	mov	r1, r2
 8005b16:	4618      	mov	r0, r3
 8005b18:	f001 f844 	bl	8006ba4 <xTaskCheckForTimeOut>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d124      	bne.n	8005b6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b24:	f000 faa2 	bl	800606c <prvIsQueueFull>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d018      	beq.n	8005b60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	3310      	adds	r3, #16
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	4611      	mov	r1, r2
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 ff44 	bl	80069c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b3e:	f000 fa2d 	bl	8005f9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b42:	f000 fd73 	bl	800662c <xTaskResumeAll>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f47f af7c 	bne.w	8005a46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005b4e:	4b0c      	ldr	r3, [pc, #48]	; (8005b80 <xQueueGenericSend+0x1f8>)
 8005b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	e772      	b.n	8005a46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b62:	f000 fa1b 	bl	8005f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b66:	f000 fd61 	bl	800662c <xTaskResumeAll>
 8005b6a:	e76c      	b.n	8005a46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b6e:	f000 fa15 	bl	8005f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b72:	f000 fd5b 	bl	800662c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3738      	adds	r7, #56	; 0x38
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	e000ed04 	.word	0xe000ed04

08005b84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b090      	sub	sp, #64	; 0x40
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10a      	bne.n	8005bb2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bae:	bf00      	nop
 8005bb0:	e7fe      	b.n	8005bb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d103      	bne.n	8005bc0 <xQueueGenericSendFromISR+0x3c>
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <xQueueGenericSendFromISR+0x40>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e000      	b.n	8005bc6 <xQueueGenericSendFromISR+0x42>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10a      	bne.n	8005be0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bdc:	bf00      	nop
 8005bde:	e7fe      	b.n	8005bde <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d103      	bne.n	8005bee <xQueueGenericSendFromISR+0x6a>
 8005be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <xQueueGenericSendFromISR+0x6e>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <xQueueGenericSendFromISR+0x70>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10a      	bne.n	8005c0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	623b      	str	r3, [r7, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	e7fe      	b.n	8005c0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c0e:	f001 ff4b 	bl	8007aa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c12:	f3ef 8211 	mrs	r2, BASEPRI
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	61fa      	str	r2, [r7, #28]
 8005c28:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c2a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c2c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d302      	bcc.n	8005c40 <xQueueGenericSendFromISR+0xbc>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d12f      	bne.n	8005ca0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	68b9      	ldr	r1, [r7, #8]
 8005c54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c56:	f000 f911 	bl	8005e7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c62:	d112      	bne.n	8005c8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d016      	beq.n	8005c9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6e:	3324      	adds	r3, #36	; 0x24
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 fef7 	bl	8006a64 <xTaskRemoveFromEventList>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00e      	beq.n	8005c9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00b      	beq.n	8005c9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	e007      	b.n	8005c9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c8e:	3301      	adds	r3, #1
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	b25a      	sxtb	r2, r3
 8005c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005c9e:	e001      	b.n	8005ca4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005cae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3740      	adds	r7, #64	; 0x40
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
	...

08005cbc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b08c      	sub	sp, #48	; 0x30
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <xQueueReceive+0x30>
	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	623b      	str	r3, [r7, #32]
}
 8005ce8:	bf00      	nop
 8005cea:	e7fe      	b.n	8005cea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d103      	bne.n	8005cfa <xQueueReceive+0x3e>
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <xQueueReceive+0x42>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e000      	b.n	8005d00 <xQueueReceive+0x44>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10a      	bne.n	8005d1a <xQueueReceive+0x5e>
	__asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	61fb      	str	r3, [r7, #28]
}
 8005d16:	bf00      	nop
 8005d18:	e7fe      	b.n	8005d18 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d1a:	f001 f88b 	bl	8006e34 <xTaskGetSchedulerState>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d102      	bne.n	8005d2a <xQueueReceive+0x6e>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <xQueueReceive+0x72>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <xQueueReceive+0x74>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10a      	bne.n	8005d4a <xQueueReceive+0x8e>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	61bb      	str	r3, [r7, #24]
}
 8005d46:	bf00      	nop
 8005d48:	e7fe      	b.n	8005d48 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d4a:	f001 fdcb 	bl	80078e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d01f      	beq.n	8005d9a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d5a:	68b9      	ldr	r1, [r7, #8]
 8005d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d5e:	f000 f8f7 	bl	8005f50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	1e5a      	subs	r2, r3, #1
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00f      	beq.n	8005d92 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d74:	3310      	adds	r3, #16
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fe74 	bl	8006a64 <xTaskRemoveFromEventList>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d007      	beq.n	8005d92 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d82:	4b3d      	ldr	r3, [pc, #244]	; (8005e78 <xQueueReceive+0x1bc>)
 8005d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d92:	f001 fdd7 	bl	8007944 <vPortExitCritical>
				return pdPASS;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e069      	b.n	8005e6e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d103      	bne.n	8005da8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005da0:	f001 fdd0 	bl	8007944 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005da4:	2300      	movs	r3, #0
 8005da6:	e062      	b.n	8005e6e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dae:	f107 0310 	add.w	r3, r7, #16
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fee0 	bl	8006b78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005db8:	2301      	movs	r3, #1
 8005dba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dbc:	f001 fdc2 	bl	8007944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dc0:	f000 fc26 	bl	8006610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dc4:	f001 fd8e 	bl	80078e4 <vPortEnterCritical>
 8005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dce:	b25b      	sxtb	r3, r3
 8005dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dd4:	d103      	bne.n	8005dde <xQueueReceive+0x122>
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005de4:	b25b      	sxtb	r3, r3
 8005de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dea:	d103      	bne.n	8005df4 <xQueueReceive+0x138>
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005df4:	f001 fda6 	bl	8007944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005df8:	1d3a      	adds	r2, r7, #4
 8005dfa:	f107 0310 	add.w	r3, r7, #16
 8005dfe:	4611      	mov	r1, r2
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 fecf 	bl	8006ba4 <xTaskCheckForTimeOut>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d123      	bne.n	8005e54 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e0e:	f000 f917 	bl	8006040 <prvIsQueueEmpty>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d017      	beq.n	8005e48 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	3324      	adds	r3, #36	; 0x24
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	4611      	mov	r1, r2
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fdcf 	bl	80069c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e28:	f000 f8b8 	bl	8005f9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e2c:	f000 fbfe 	bl	800662c <xTaskResumeAll>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d189      	bne.n	8005d4a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005e36:	4b10      	ldr	r3, [pc, #64]	; (8005e78 <xQueueReceive+0x1bc>)
 8005e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	e780      	b.n	8005d4a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e4a:	f000 f8a7 	bl	8005f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e4e:	f000 fbed 	bl	800662c <xTaskResumeAll>
 8005e52:	e77a      	b.n	8005d4a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e56:	f000 f8a1 	bl	8005f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e5a:	f000 fbe7 	bl	800662c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e60:	f000 f8ee 	bl	8006040 <prvIsQueueEmpty>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f43f af6f 	beq.w	8005d4a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3730      	adds	r7, #48	; 0x30
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	e000ed04 	.word	0xe000ed04

08005e7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10d      	bne.n	8005eb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d14d      	bne.n	8005f3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 ffe2 	bl	8006e70 <xTaskPriorityDisinherit>
 8005eac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	609a      	str	r2, [r3, #8]
 8005eb4:	e043      	b.n	8005f3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d119      	bne.n	8005ef0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6858      	ldr	r0, [r3, #4]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	68b9      	ldr	r1, [r7, #8]
 8005ec8:	f00b fb29 	bl	801151e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	441a      	add	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d32b      	bcc.n	8005f3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	605a      	str	r2, [r3, #4]
 8005eee:	e026      	b.n	8005f3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	68d8      	ldr	r0, [r3, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef8:	461a      	mov	r2, r3
 8005efa:	68b9      	ldr	r1, [r7, #8]
 8005efc:	f00b fb0f 	bl	801151e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f08:	425b      	negs	r3, r3
 8005f0a:	441a      	add	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	68da      	ldr	r2, [r3, #12]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d207      	bcs.n	8005f2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	425b      	negs	r3, r3
 8005f26:	441a      	add	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d105      	bne.n	8005f3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f46:	697b      	ldr	r3, [r7, #20]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3718      	adds	r7, #24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d018      	beq.n	8005f94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	441a      	add	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d303      	bcc.n	8005f84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68d9      	ldr	r1, [r3, #12]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	6838      	ldr	r0, [r7, #0]
 8005f90:	f00b fac5 	bl	801151e <memcpy>
	}
}
 8005f94:	bf00      	nop
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fa4:	f001 fc9e 	bl	80078e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fb0:	e011      	b.n	8005fd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d012      	beq.n	8005fe0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3324      	adds	r3, #36	; 0x24
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fd50 	bl	8006a64 <xTaskRemoveFromEventList>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fca:	f000 fe4d 	bl	8006c68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	dce9      	bgt.n	8005fb2 <prvUnlockQueue+0x16>
 8005fde:	e000      	b.n	8005fe2 <prvUnlockQueue+0x46>
					break;
 8005fe0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	22ff      	movs	r2, #255	; 0xff
 8005fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fea:	f001 fcab 	bl	8007944 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fee:	f001 fc79 	bl	80078e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ff8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ffa:	e011      	b.n	8006020 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d012      	beq.n	800602a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3310      	adds	r3, #16
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fd2b 	bl	8006a64 <xTaskRemoveFromEventList>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006014:	f000 fe28 	bl	8006c68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006018:	7bbb      	ldrb	r3, [r7, #14]
 800601a:	3b01      	subs	r3, #1
 800601c:	b2db      	uxtb	r3, r3
 800601e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006024:	2b00      	cmp	r3, #0
 8006026:	dce9      	bgt.n	8005ffc <prvUnlockQueue+0x60>
 8006028:	e000      	b.n	800602c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800602a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	22ff      	movs	r2, #255	; 0xff
 8006030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006034:	f001 fc86 	bl	8007944 <vPortExitCritical>
}
 8006038:	bf00      	nop
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006048:	f001 fc4c 	bl	80078e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	2b00      	cmp	r3, #0
 8006052:	d102      	bne.n	800605a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006054:	2301      	movs	r3, #1
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e001      	b.n	800605e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800605a:	2300      	movs	r3, #0
 800605c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800605e:	f001 fc71 	bl	8007944 <vPortExitCritical>

	return xReturn;
 8006062:	68fb      	ldr	r3, [r7, #12]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006074:	f001 fc36 	bl	80078e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006080:	429a      	cmp	r2, r3
 8006082:	d102      	bne.n	800608a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006084:	2301      	movs	r3, #1
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	e001      	b.n	800608e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800608e:	f001 fc59 	bl	8007944 <vPortExitCritical>

	return xReturn;
 8006092:	68fb      	ldr	r3, [r7, #12]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060a6:	2300      	movs	r3, #0
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	e014      	b.n	80060d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060ac:	4a0f      	ldr	r2, [pc, #60]	; (80060ec <vQueueAddToRegistry+0x50>)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10b      	bne.n	80060d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80060b8:	490c      	ldr	r1, [pc, #48]	; (80060ec <vQueueAddToRegistry+0x50>)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060c2:	4a0a      	ldr	r2, [pc, #40]	; (80060ec <vQueueAddToRegistry+0x50>)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	4413      	add	r3, r2
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060ce:	e006      	b.n	80060de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3301      	adds	r3, #1
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2b07      	cmp	r3, #7
 80060da:	d9e7      	bls.n	80060ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060dc:	bf00      	nop
 80060de:	bf00      	nop
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	20007e20 	.word	0x20007e20

080060f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006100:	f001 fbf0 	bl	80078e4 <vPortEnterCritical>
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800610a:	b25b      	sxtb	r3, r3
 800610c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006110:	d103      	bne.n	800611a <vQueueWaitForMessageRestricted+0x2a>
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006120:	b25b      	sxtb	r3, r3
 8006122:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006126:	d103      	bne.n	8006130 <vQueueWaitForMessageRestricted+0x40>
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006130:	f001 fc08 	bl	8007944 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	2b00      	cmp	r3, #0
 800613a:	d106      	bne.n	800614a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	3324      	adds	r3, #36	; 0x24
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fc61 	bl	8006a0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800614a:	6978      	ldr	r0, [r7, #20]
 800614c:	f7ff ff26 	bl	8005f9c <prvUnlockQueue>
	}
 8006150:	bf00      	nop
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08e      	sub	sp, #56	; 0x38
 800615c:	af04      	add	r7, sp, #16
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <xTaskCreateStatic+0x2a>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	623b      	str	r3, [r7, #32]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10a      	bne.n	800619e <xTaskCreateStatic+0x46>
	__asm volatile
 8006188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618c:	f383 8811 	msr	BASEPRI, r3
 8006190:	f3bf 8f6f 	isb	sy
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	61fb      	str	r3, [r7, #28]
}
 800619a:	bf00      	nop
 800619c:	e7fe      	b.n	800619c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800619e:	23a8      	movs	r3, #168	; 0xa8
 80061a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	2ba8      	cmp	r3, #168	; 0xa8
 80061a6:	d00a      	beq.n	80061be <xTaskCreateStatic+0x66>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	61bb      	str	r3, [r7, #24]
}
 80061ba:	bf00      	nop
 80061bc:	e7fe      	b.n	80061bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d01e      	beq.n	8006204 <xTaskCreateStatic+0xac>
 80061c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01b      	beq.n	8006204 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	2202      	movs	r2, #2
 80061da:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061de:	2300      	movs	r3, #0
 80061e0:	9303      	str	r3, [sp, #12]
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	9302      	str	r3, [sp, #8]
 80061e6:	f107 0314 	add.w	r3, r7, #20
 80061ea:	9301      	str	r3, [sp, #4]
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	68b9      	ldr	r1, [r7, #8]
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 f850 	bl	800629c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061fe:	f000 f8f3 	bl	80063e8 <prvAddNewTaskToReadyList>
 8006202:	e001      	b.n	8006208 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006204:	2300      	movs	r3, #0
 8006206:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006208:	697b      	ldr	r3, [r7, #20]
	}
 800620a:	4618      	mov	r0, r3
 800620c:	3728      	adds	r7, #40	; 0x28
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006212:	b580      	push	{r7, lr}
 8006214:	b08c      	sub	sp, #48	; 0x30
 8006216:	af04      	add	r7, sp, #16
 8006218:	60f8      	str	r0, [r7, #12]
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	603b      	str	r3, [r7, #0]
 800621e:	4613      	mov	r3, r2
 8006220:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006222:	88fb      	ldrh	r3, [r7, #6]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4618      	mov	r0, r3
 8006228:	f001 fc7e 	bl	8007b28 <pvPortMalloc>
 800622c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00e      	beq.n	8006252 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006234:	20a8      	movs	r0, #168	; 0xa8
 8006236:	f001 fc77 	bl	8007b28 <pvPortMalloc>
 800623a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	631a      	str	r2, [r3, #48]	; 0x30
 8006248:	e005      	b.n	8006256 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800624a:	6978      	ldr	r0, [r7, #20]
 800624c:	f001 fd38 	bl	8007cc0 <vPortFree>
 8006250:	e001      	b.n	8006256 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006252:	2300      	movs	r3, #0
 8006254:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d017      	beq.n	800628c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006264:	88fa      	ldrh	r2, [r7, #6]
 8006266:	2300      	movs	r3, #0
 8006268:	9303      	str	r3, [sp, #12]
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	9302      	str	r3, [sp, #8]
 800626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006270:	9301      	str	r3, [sp, #4]
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 f80e 	bl	800629c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006280:	69f8      	ldr	r0, [r7, #28]
 8006282:	f000 f8b1 	bl	80063e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006286:	2301      	movs	r3, #1
 8006288:	61bb      	str	r3, [r7, #24]
 800628a:	e002      	b.n	8006292 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800628c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006290:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006292:	69bb      	ldr	r3, [r7, #24]
	}
 8006294:	4618      	mov	r0, r3
 8006296:	3720      	adds	r7, #32
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
 80062a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	461a      	mov	r2, r3
 80062b4:	21a5      	movs	r1, #165	; 0xa5
 80062b6:	f00b f813 	bl	80112e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062c4:	3b01      	subs	r3, #1
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	f023 0307 	bic.w	r3, r3, #7
 80062d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	617b      	str	r3, [r7, #20]
}
 80062f0:	bf00      	nop
 80062f2:	e7fe      	b.n	80062f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d01f      	beq.n	800633a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062fa:	2300      	movs	r3, #0
 80062fc:	61fb      	str	r3, [r7, #28]
 80062fe:	e012      	b.n	8006326 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	4413      	add	r3, r2
 8006306:	7819      	ldrb	r1, [r3, #0]
 8006308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	4413      	add	r3, r2
 800630e:	3334      	adds	r3, #52	; 0x34
 8006310:	460a      	mov	r2, r1
 8006312:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d006      	beq.n	800632e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	3301      	adds	r3, #1
 8006324:	61fb      	str	r3, [r7, #28]
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	2b0f      	cmp	r3, #15
 800632a:	d9e9      	bls.n	8006300 <prvInitialiseNewTask+0x64>
 800632c:	e000      	b.n	8006330 <prvInitialiseNewTask+0x94>
			{
				break;
 800632e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006338:	e003      	b.n	8006342 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006344:	2b37      	cmp	r3, #55	; 0x37
 8006346:	d901      	bls.n	800634c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006348:	2337      	movs	r3, #55	; 0x37
 800634a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006350:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006356:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	2200      	movs	r2, #0
 800635c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	3304      	adds	r3, #4
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff f978 	bl	8005658 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	3318      	adds	r3, #24
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff f973 	bl	8005658 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006376:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006386:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	2200      	movs	r2, #0
 800638c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	2200      	movs	r2, #0
 8006394:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639a:	3354      	adds	r3, #84	; 0x54
 800639c:	224c      	movs	r2, #76	; 0x4c
 800639e:	2100      	movs	r1, #0
 80063a0:	4618      	mov	r0, r3
 80063a2:	f00a ff9d 	bl	80112e0 <memset>
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	4a0c      	ldr	r2, [pc, #48]	; (80063dc <prvInitialiseNewTask+0x140>)
 80063aa:	659a      	str	r2, [r3, #88]	; 0x58
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ae:	4a0c      	ldr	r2, [pc, #48]	; (80063e0 <prvInitialiseNewTask+0x144>)
 80063b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	4a0b      	ldr	r2, [pc, #44]	; (80063e4 <prvInitialiseNewTask+0x148>)
 80063b6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	68f9      	ldr	r1, [r7, #12]
 80063bc:	69b8      	ldr	r0, [r7, #24]
 80063be:	f001 f967 	bl	8007690 <pxPortInitialiseStack>
 80063c2:	4602      	mov	r2, r0
 80063c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063d4:	bf00      	nop
 80063d6:	3720      	adds	r7, #32
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	20010bc8 	.word	0x20010bc8
 80063e0:	20010c30 	.word	0x20010c30
 80063e4:	20010c98 	.word	0x20010c98

080063e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063f0:	f001 fa78 	bl	80078e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063f4:	4b2d      	ldr	r3, [pc, #180]	; (80064ac <prvAddNewTaskToReadyList+0xc4>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3301      	adds	r3, #1
 80063fa:	4a2c      	ldr	r2, [pc, #176]	; (80064ac <prvAddNewTaskToReadyList+0xc4>)
 80063fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063fe:	4b2c      	ldr	r3, [pc, #176]	; (80064b0 <prvAddNewTaskToReadyList+0xc8>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006406:	4a2a      	ldr	r2, [pc, #168]	; (80064b0 <prvAddNewTaskToReadyList+0xc8>)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800640c:	4b27      	ldr	r3, [pc, #156]	; (80064ac <prvAddNewTaskToReadyList+0xc4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d110      	bne.n	8006436 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006414:	f000 fc4c 	bl	8006cb0 <prvInitialiseTaskLists>
 8006418:	e00d      	b.n	8006436 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800641a:	4b26      	ldr	r3, [pc, #152]	; (80064b4 <prvAddNewTaskToReadyList+0xcc>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d109      	bne.n	8006436 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006422:	4b23      	ldr	r3, [pc, #140]	; (80064b0 <prvAddNewTaskToReadyList+0xc8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	429a      	cmp	r2, r3
 800642e:	d802      	bhi.n	8006436 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006430:	4a1f      	ldr	r2, [pc, #124]	; (80064b0 <prvAddNewTaskToReadyList+0xc8>)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006436:	4b20      	ldr	r3, [pc, #128]	; (80064b8 <prvAddNewTaskToReadyList+0xd0>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3301      	adds	r3, #1
 800643c:	4a1e      	ldr	r2, [pc, #120]	; (80064b8 <prvAddNewTaskToReadyList+0xd0>)
 800643e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006440:	4b1d      	ldr	r3, [pc, #116]	; (80064b8 <prvAddNewTaskToReadyList+0xd0>)
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644c:	4b1b      	ldr	r3, [pc, #108]	; (80064bc <prvAddNewTaskToReadyList+0xd4>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	429a      	cmp	r2, r3
 8006452:	d903      	bls.n	800645c <prvAddNewTaskToReadyList+0x74>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	4a18      	ldr	r2, [pc, #96]	; (80064bc <prvAddNewTaskToReadyList+0xd4>)
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4a15      	ldr	r2, [pc, #84]	; (80064c0 <prvAddNewTaskToReadyList+0xd8>)
 800646a:	441a      	add	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3304      	adds	r3, #4
 8006470:	4619      	mov	r1, r3
 8006472:	4610      	mov	r0, r2
 8006474:	f7ff f8fd 	bl	8005672 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006478:	f001 fa64 	bl	8007944 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800647c:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <prvAddNewTaskToReadyList+0xcc>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00e      	beq.n	80064a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006484:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <prvAddNewTaskToReadyList+0xc8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648e:	429a      	cmp	r2, r3
 8006490:	d207      	bcs.n	80064a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006492:	4b0c      	ldr	r3, [pc, #48]	; (80064c4 <prvAddNewTaskToReadyList+0xdc>)
 8006494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064a2:	bf00      	nop
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20008334 	.word	0x20008334
 80064b0:	20007e60 	.word	0x20007e60
 80064b4:	20008340 	.word	0x20008340
 80064b8:	20008350 	.word	0x20008350
 80064bc:	2000833c 	.word	0x2000833c
 80064c0:	20007e64 	.word	0x20007e64
 80064c4:	e000ed04 	.word	0xe000ed04

080064c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d017      	beq.n	800650a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064da:	4b13      	ldr	r3, [pc, #76]	; (8006528 <vTaskDelay+0x60>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <vTaskDelay+0x30>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	60bb      	str	r3, [r7, #8]
}
 80064f4:	bf00      	nop
 80064f6:	e7fe      	b.n	80064f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064f8:	f000 f88a 	bl	8006610 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064fc:	2100      	movs	r1, #0
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fd24 	bl	8006f4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006504:	f000 f892 	bl	800662c <xTaskResumeAll>
 8006508:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d107      	bne.n	8006520 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006510:	4b06      	ldr	r3, [pc, #24]	; (800652c <vTaskDelay+0x64>)
 8006512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006520:	bf00      	nop
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	2000835c 	.word	0x2000835c
 800652c:	e000ed04 	.word	0xe000ed04

08006530 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08a      	sub	sp, #40	; 0x28
 8006534:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006536:	2300      	movs	r3, #0
 8006538:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800653a:	2300      	movs	r3, #0
 800653c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800653e:	463a      	mov	r2, r7
 8006540:	1d39      	adds	r1, r7, #4
 8006542:	f107 0308 	add.w	r3, r7, #8
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff f832 	bl	80055b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	9202      	str	r2, [sp, #8]
 8006554:	9301      	str	r3, [sp, #4]
 8006556:	2300      	movs	r3, #0
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	2300      	movs	r3, #0
 800655c:	460a      	mov	r2, r1
 800655e:	4924      	ldr	r1, [pc, #144]	; (80065f0 <vTaskStartScheduler+0xc0>)
 8006560:	4824      	ldr	r0, [pc, #144]	; (80065f4 <vTaskStartScheduler+0xc4>)
 8006562:	f7ff fdf9 	bl	8006158 <xTaskCreateStatic>
 8006566:	4603      	mov	r3, r0
 8006568:	4a23      	ldr	r2, [pc, #140]	; (80065f8 <vTaskStartScheduler+0xc8>)
 800656a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800656c:	4b22      	ldr	r3, [pc, #136]	; (80065f8 <vTaskStartScheduler+0xc8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006574:	2301      	movs	r3, #1
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	e001      	b.n	800657e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800657a:	2300      	movs	r3, #0
 800657c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d102      	bne.n	800658a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006584:	f000 fd36 	bl	8006ff4 <xTimerCreateTimerTask>
 8006588:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d11b      	bne.n	80065c8 <vTaskStartScheduler+0x98>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	613b      	str	r3, [r7, #16]
}
 80065a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065a4:	4b15      	ldr	r3, [pc, #84]	; (80065fc <vTaskStartScheduler+0xcc>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3354      	adds	r3, #84	; 0x54
 80065aa:	4a15      	ldr	r2, [pc, #84]	; (8006600 <vTaskStartScheduler+0xd0>)
 80065ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065ae:	4b15      	ldr	r3, [pc, #84]	; (8006604 <vTaskStartScheduler+0xd4>)
 80065b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065b6:	4b14      	ldr	r3, [pc, #80]	; (8006608 <vTaskStartScheduler+0xd8>)
 80065b8:	2201      	movs	r2, #1
 80065ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065bc:	4b13      	ldr	r3, [pc, #76]	; (800660c <vTaskStartScheduler+0xdc>)
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065c2:	f001 f8ed 	bl	80077a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065c6:	e00e      	b.n	80065e6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065ce:	d10a      	bne.n	80065e6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	60fb      	str	r3, [r7, #12]
}
 80065e2:	bf00      	nop
 80065e4:	e7fe      	b.n	80065e4 <vTaskStartScheduler+0xb4>
}
 80065e6:	bf00      	nop
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	0801239c 	.word	0x0801239c
 80065f4:	08006c81 	.word	0x08006c81
 80065f8:	20008358 	.word	0x20008358
 80065fc:	20007e60 	.word	0x20007e60
 8006600:	2000010c 	.word	0x2000010c
 8006604:	20008354 	.word	0x20008354
 8006608:	20008340 	.word	0x20008340
 800660c:	20008338 	.word	0x20008338

08006610 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006614:	4b04      	ldr	r3, [pc, #16]	; (8006628 <vTaskSuspendAll+0x18>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3301      	adds	r3, #1
 800661a:	4a03      	ldr	r2, [pc, #12]	; (8006628 <vTaskSuspendAll+0x18>)
 800661c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800661e:	bf00      	nop
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	2000835c 	.word	0x2000835c

0800662c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006636:	2300      	movs	r3, #0
 8006638:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800663a:	4b42      	ldr	r3, [pc, #264]	; (8006744 <xTaskResumeAll+0x118>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10a      	bne.n	8006658 <xTaskResumeAll+0x2c>
	__asm volatile
 8006642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	603b      	str	r3, [r7, #0]
}
 8006654:	bf00      	nop
 8006656:	e7fe      	b.n	8006656 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006658:	f001 f944 	bl	80078e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800665c:	4b39      	ldr	r3, [pc, #228]	; (8006744 <xTaskResumeAll+0x118>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3b01      	subs	r3, #1
 8006662:	4a38      	ldr	r2, [pc, #224]	; (8006744 <xTaskResumeAll+0x118>)
 8006664:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006666:	4b37      	ldr	r3, [pc, #220]	; (8006744 <xTaskResumeAll+0x118>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d162      	bne.n	8006734 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800666e:	4b36      	ldr	r3, [pc, #216]	; (8006748 <xTaskResumeAll+0x11c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d05e      	beq.n	8006734 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006676:	e02f      	b.n	80066d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006678:	4b34      	ldr	r3, [pc, #208]	; (800674c <xTaskResumeAll+0x120>)
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	3318      	adds	r3, #24
 8006684:	4618      	mov	r0, r3
 8006686:	f7ff f851 	bl	800572c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3304      	adds	r3, #4
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff f84c 	bl	800572c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006698:	4b2d      	ldr	r3, [pc, #180]	; (8006750 <xTaskResumeAll+0x124>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	429a      	cmp	r2, r3
 800669e:	d903      	bls.n	80066a8 <xTaskResumeAll+0x7c>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	4a2a      	ldr	r2, [pc, #168]	; (8006750 <xTaskResumeAll+0x124>)
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ac:	4613      	mov	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4a27      	ldr	r2, [pc, #156]	; (8006754 <xTaskResumeAll+0x128>)
 80066b6:	441a      	add	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	3304      	adds	r3, #4
 80066bc:	4619      	mov	r1, r3
 80066be:	4610      	mov	r0, r2
 80066c0:	f7fe ffd7 	bl	8005672 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c8:	4b23      	ldr	r3, [pc, #140]	; (8006758 <xTaskResumeAll+0x12c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d302      	bcc.n	80066d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80066d2:	4b22      	ldr	r3, [pc, #136]	; (800675c <xTaskResumeAll+0x130>)
 80066d4:	2201      	movs	r2, #1
 80066d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066d8:	4b1c      	ldr	r3, [pc, #112]	; (800674c <xTaskResumeAll+0x120>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1cb      	bne.n	8006678 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066e6:	f000 fb85 	bl	8006df4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066ea:	4b1d      	ldr	r3, [pc, #116]	; (8006760 <xTaskResumeAll+0x134>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d010      	beq.n	8006718 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066f6:	f000 f847 	bl	8006788 <xTaskIncrementTick>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006700:	4b16      	ldr	r3, [pc, #88]	; (800675c <xTaskResumeAll+0x130>)
 8006702:	2201      	movs	r2, #1
 8006704:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	3b01      	subs	r3, #1
 800670a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1f1      	bne.n	80066f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006712:	4b13      	ldr	r3, [pc, #76]	; (8006760 <xTaskResumeAll+0x134>)
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006718:	4b10      	ldr	r3, [pc, #64]	; (800675c <xTaskResumeAll+0x130>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d009      	beq.n	8006734 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006720:	2301      	movs	r3, #1
 8006722:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006724:	4b0f      	ldr	r3, [pc, #60]	; (8006764 <xTaskResumeAll+0x138>)
 8006726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006734:	f001 f906 	bl	8007944 <vPortExitCritical>

	return xAlreadyYielded;
 8006738:	68bb      	ldr	r3, [r7, #8]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	2000835c 	.word	0x2000835c
 8006748:	20008334 	.word	0x20008334
 800674c:	200082f4 	.word	0x200082f4
 8006750:	2000833c 	.word	0x2000833c
 8006754:	20007e64 	.word	0x20007e64
 8006758:	20007e60 	.word	0x20007e60
 800675c:	20008348 	.word	0x20008348
 8006760:	20008344 	.word	0x20008344
 8006764:	e000ed04 	.word	0xe000ed04

08006768 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800676e:	4b05      	ldr	r3, [pc, #20]	; (8006784 <xTaskGetTickCount+0x1c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006774:	687b      	ldr	r3, [r7, #4]
}
 8006776:	4618      	mov	r0, r3
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	20008338 	.word	0x20008338

08006788 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800678e:	2300      	movs	r3, #0
 8006790:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006792:	4b4f      	ldr	r3, [pc, #316]	; (80068d0 <xTaskIncrementTick+0x148>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	f040 808f 	bne.w	80068ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800679c:	4b4d      	ldr	r3, [pc, #308]	; (80068d4 <xTaskIncrementTick+0x14c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3301      	adds	r3, #1
 80067a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067a4:	4a4b      	ldr	r2, [pc, #300]	; (80068d4 <xTaskIncrementTick+0x14c>)
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d120      	bne.n	80067f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80067b0:	4b49      	ldr	r3, [pc, #292]	; (80068d8 <xTaskIncrementTick+0x150>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	603b      	str	r3, [r7, #0]
}
 80067cc:	bf00      	nop
 80067ce:	e7fe      	b.n	80067ce <xTaskIncrementTick+0x46>
 80067d0:	4b41      	ldr	r3, [pc, #260]	; (80068d8 <xTaskIncrementTick+0x150>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	60fb      	str	r3, [r7, #12]
 80067d6:	4b41      	ldr	r3, [pc, #260]	; (80068dc <xTaskIncrementTick+0x154>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a3f      	ldr	r2, [pc, #252]	; (80068d8 <xTaskIncrementTick+0x150>)
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	4a3f      	ldr	r2, [pc, #252]	; (80068dc <xTaskIncrementTick+0x154>)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	4b3e      	ldr	r3, [pc, #248]	; (80068e0 <xTaskIncrementTick+0x158>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3301      	adds	r3, #1
 80067ea:	4a3d      	ldr	r2, [pc, #244]	; (80068e0 <xTaskIncrementTick+0x158>)
 80067ec:	6013      	str	r3, [r2, #0]
 80067ee:	f000 fb01 	bl	8006df4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067f2:	4b3c      	ldr	r3, [pc, #240]	; (80068e4 <xTaskIncrementTick+0x15c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d349      	bcc.n	8006890 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067fc:	4b36      	ldr	r3, [pc, #216]	; (80068d8 <xTaskIncrementTick+0x150>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d104      	bne.n	8006810 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006806:	4b37      	ldr	r3, [pc, #220]	; (80068e4 <xTaskIncrementTick+0x15c>)
 8006808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800680c:	601a      	str	r2, [r3, #0]
					break;
 800680e:	e03f      	b.n	8006890 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006810:	4b31      	ldr	r3, [pc, #196]	; (80068d8 <xTaskIncrementTick+0x150>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	429a      	cmp	r2, r3
 8006826:	d203      	bcs.n	8006830 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006828:	4a2e      	ldr	r2, [pc, #184]	; (80068e4 <xTaskIncrementTick+0x15c>)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800682e:	e02f      	b.n	8006890 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	3304      	adds	r3, #4
 8006834:	4618      	mov	r0, r3
 8006836:	f7fe ff79 	bl	800572c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683e:	2b00      	cmp	r3, #0
 8006840:	d004      	beq.n	800684c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	3318      	adds	r3, #24
 8006846:	4618      	mov	r0, r3
 8006848:	f7fe ff70 	bl	800572c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006850:	4b25      	ldr	r3, [pc, #148]	; (80068e8 <xTaskIncrementTick+0x160>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	429a      	cmp	r2, r3
 8006856:	d903      	bls.n	8006860 <xTaskIncrementTick+0xd8>
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	4a22      	ldr	r2, [pc, #136]	; (80068e8 <xTaskIncrementTick+0x160>)
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006864:	4613      	mov	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4a1f      	ldr	r2, [pc, #124]	; (80068ec <xTaskIncrementTick+0x164>)
 800686e:	441a      	add	r2, r3
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	3304      	adds	r3, #4
 8006874:	4619      	mov	r1, r3
 8006876:	4610      	mov	r0, r2
 8006878:	f7fe fefb 	bl	8005672 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006880:	4b1b      	ldr	r3, [pc, #108]	; (80068f0 <xTaskIncrementTick+0x168>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006886:	429a      	cmp	r2, r3
 8006888:	d3b8      	bcc.n	80067fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800688a:	2301      	movs	r3, #1
 800688c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800688e:	e7b5      	b.n	80067fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006890:	4b17      	ldr	r3, [pc, #92]	; (80068f0 <xTaskIncrementTick+0x168>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006896:	4915      	ldr	r1, [pc, #84]	; (80068ec <xTaskIncrementTick+0x164>)
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d901      	bls.n	80068ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80068a8:	2301      	movs	r3, #1
 80068aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80068ac:	4b11      	ldr	r3, [pc, #68]	; (80068f4 <xTaskIncrementTick+0x16c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d007      	beq.n	80068c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80068b4:	2301      	movs	r3, #1
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	e004      	b.n	80068c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068ba:	4b0f      	ldr	r3, [pc, #60]	; (80068f8 <xTaskIncrementTick+0x170>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3301      	adds	r3, #1
 80068c0:	4a0d      	ldr	r2, [pc, #52]	; (80068f8 <xTaskIncrementTick+0x170>)
 80068c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068c4:	697b      	ldr	r3, [r7, #20]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	2000835c 	.word	0x2000835c
 80068d4:	20008338 	.word	0x20008338
 80068d8:	200082ec 	.word	0x200082ec
 80068dc:	200082f0 	.word	0x200082f0
 80068e0:	2000834c 	.word	0x2000834c
 80068e4:	20008354 	.word	0x20008354
 80068e8:	2000833c 	.word	0x2000833c
 80068ec:	20007e64 	.word	0x20007e64
 80068f0:	20007e60 	.word	0x20007e60
 80068f4:	20008348 	.word	0x20008348
 80068f8:	20008344 	.word	0x20008344

080068fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006902:	4b2a      	ldr	r3, [pc, #168]	; (80069ac <vTaskSwitchContext+0xb0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800690a:	4b29      	ldr	r3, [pc, #164]	; (80069b0 <vTaskSwitchContext+0xb4>)
 800690c:	2201      	movs	r2, #1
 800690e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006910:	e046      	b.n	80069a0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006912:	4b27      	ldr	r3, [pc, #156]	; (80069b0 <vTaskSwitchContext+0xb4>)
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006918:	4b26      	ldr	r3, [pc, #152]	; (80069b4 <vTaskSwitchContext+0xb8>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	60fb      	str	r3, [r7, #12]
 800691e:	e010      	b.n	8006942 <vTaskSwitchContext+0x46>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10a      	bne.n	800693c <vTaskSwitchContext+0x40>
	__asm volatile
 8006926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	607b      	str	r3, [r7, #4]
}
 8006938:	bf00      	nop
 800693a:	e7fe      	b.n	800693a <vTaskSwitchContext+0x3e>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	3b01      	subs	r3, #1
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	491d      	ldr	r1, [pc, #116]	; (80069b8 <vTaskSwitchContext+0xbc>)
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4613      	mov	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	440b      	add	r3, r1
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d0e4      	beq.n	8006920 <vTaskSwitchContext+0x24>
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4613      	mov	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4a15      	ldr	r2, [pc, #84]	; (80069b8 <vTaskSwitchContext+0xbc>)
 8006962:	4413      	add	r3, r2
 8006964:	60bb      	str	r3, [r7, #8]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	605a      	str	r2, [r3, #4]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	3308      	adds	r3, #8
 8006978:	429a      	cmp	r2, r3
 800697a:	d104      	bne.n	8006986 <vTaskSwitchContext+0x8a>
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	605a      	str	r2, [r3, #4]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	4a0b      	ldr	r2, [pc, #44]	; (80069bc <vTaskSwitchContext+0xc0>)
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	4a08      	ldr	r2, [pc, #32]	; (80069b4 <vTaskSwitchContext+0xb8>)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006996:	4b09      	ldr	r3, [pc, #36]	; (80069bc <vTaskSwitchContext+0xc0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3354      	adds	r3, #84	; 0x54
 800699c:	4a08      	ldr	r2, [pc, #32]	; (80069c0 <vTaskSwitchContext+0xc4>)
 800699e:	6013      	str	r3, [r2, #0]
}
 80069a0:	bf00      	nop
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	2000835c 	.word	0x2000835c
 80069b0:	20008348 	.word	0x20008348
 80069b4:	2000833c 	.word	0x2000833c
 80069b8:	20007e64 	.word	0x20007e64
 80069bc:	20007e60 	.word	0x20007e60
 80069c0:	2000010c 	.word	0x2000010c

080069c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10a      	bne.n	80069ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	60fb      	str	r3, [r7, #12]
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069ea:	4b07      	ldr	r3, [pc, #28]	; (8006a08 <vTaskPlaceOnEventList+0x44>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3318      	adds	r3, #24
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fe fe61 	bl	80056ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069f8:	2101      	movs	r1, #1
 80069fa:	6838      	ldr	r0, [r7, #0]
 80069fc:	f000 faa6 	bl	8006f4c <prvAddCurrentTaskToDelayedList>
}
 8006a00:	bf00      	nop
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	20007e60 	.word	0x20007e60

08006a0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10a      	bne.n	8006a34 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	617b      	str	r3, [r7, #20]
}
 8006a30:	bf00      	nop
 8006a32:	e7fe      	b.n	8006a32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a34:	4b0a      	ldr	r3, [pc, #40]	; (8006a60 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3318      	adds	r3, #24
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f7fe fe18 	bl	8005672 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a4c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	68b8      	ldr	r0, [r7, #8]
 8006a52:	f000 fa7b 	bl	8006f4c <prvAddCurrentTaskToDelayedList>
	}
 8006a56:	bf00      	nop
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20007e60 	.word	0x20007e60

08006a64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10a      	bne.n	8006a90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	60fb      	str	r3, [r7, #12]
}
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	3318      	adds	r3, #24
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fe fe49 	bl	800572c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a9a:	4b1e      	ldr	r3, [pc, #120]	; (8006b14 <xTaskRemoveFromEventList+0xb0>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d11d      	bne.n	8006ade <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe fe40 	bl	800572c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab0:	4b19      	ldr	r3, [pc, #100]	; (8006b18 <xTaskRemoveFromEventList+0xb4>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d903      	bls.n	8006ac0 <xTaskRemoveFromEventList+0x5c>
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abc:	4a16      	ldr	r2, [pc, #88]	; (8006b18 <xTaskRemoveFromEventList+0xb4>)
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4a13      	ldr	r2, [pc, #76]	; (8006b1c <xTaskRemoveFromEventList+0xb8>)
 8006ace:	441a      	add	r2, r3
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f7fe fdcb 	bl	8005672 <vListInsertEnd>
 8006adc:	e005      	b.n	8006aea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	3318      	adds	r3, #24
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	480e      	ldr	r0, [pc, #56]	; (8006b20 <xTaskRemoveFromEventList+0xbc>)
 8006ae6:	f7fe fdc4 	bl	8005672 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aee:	4b0d      	ldr	r3, [pc, #52]	; (8006b24 <xTaskRemoveFromEventList+0xc0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d905      	bls.n	8006b04 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006af8:	2301      	movs	r3, #1
 8006afa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006afc:	4b0a      	ldr	r3, [pc, #40]	; (8006b28 <xTaskRemoveFromEventList+0xc4>)
 8006afe:	2201      	movs	r2, #1
 8006b00:	601a      	str	r2, [r3, #0]
 8006b02:	e001      	b.n	8006b08 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006b04:	2300      	movs	r3, #0
 8006b06:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b08:	697b      	ldr	r3, [r7, #20]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	2000835c 	.word	0x2000835c
 8006b18:	2000833c 	.word	0x2000833c
 8006b1c:	20007e64 	.word	0x20007e64
 8006b20:	200082f4 	.word	0x200082f4
 8006b24:	20007e60 	.word	0x20007e60
 8006b28:	20008348 	.word	0x20008348

08006b2c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10a      	bne.n	8006b50 <vTaskSetTimeOutState+0x24>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	60fb      	str	r3, [r7, #12]
}
 8006b4c:	bf00      	nop
 8006b4e:	e7fe      	b.n	8006b4e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8006b50:	f000 fec8 	bl	80078e4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b54:	4b06      	ldr	r3, [pc, #24]	; (8006b70 <vTaskSetTimeOutState+0x44>)
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8006b5c:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <vTaskSetTimeOutState+0x48>)
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8006b64:	f000 feee 	bl	8007944 <vPortExitCritical>
}
 8006b68:	bf00      	nop
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	2000834c 	.word	0x2000834c
 8006b74:	20008338 	.word	0x20008338

08006b78 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b80:	4b06      	ldr	r3, [pc, #24]	; (8006b9c <vTaskInternalSetTimeOutState+0x24>)
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b88:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <vTaskInternalSetTimeOutState+0x28>)
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	605a      	str	r2, [r3, #4]
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	2000834c 	.word	0x2000834c
 8006ba0:	20008338 	.word	0x20008338

08006ba4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b088      	sub	sp, #32
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10a      	bne.n	8006bca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	613b      	str	r3, [r7, #16]
}
 8006bc6:	bf00      	nop
 8006bc8:	e7fe      	b.n	8006bc8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10a      	bne.n	8006be6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	60fb      	str	r3, [r7, #12]
}
 8006be2:	bf00      	nop
 8006be4:	e7fe      	b.n	8006be4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006be6:	f000 fe7d 	bl	80078e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bea:	4b1d      	ldr	r3, [pc, #116]	; (8006c60 <xTaskCheckForTimeOut+0xbc>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c02:	d102      	bne.n	8006c0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c04:	2300      	movs	r3, #0
 8006c06:	61fb      	str	r3, [r7, #28]
 8006c08:	e023      	b.n	8006c52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	4b15      	ldr	r3, [pc, #84]	; (8006c64 <xTaskCheckForTimeOut+0xc0>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d007      	beq.n	8006c26 <xTaskCheckForTimeOut+0x82>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d302      	bcc.n	8006c26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c20:	2301      	movs	r3, #1
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	e015      	b.n	8006c52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d20b      	bcs.n	8006c48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	1ad2      	subs	r2, r2, r3
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7ff ff9b 	bl	8006b78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c42:	2300      	movs	r3, #0
 8006c44:	61fb      	str	r3, [r7, #28]
 8006c46:	e004      	b.n	8006c52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c52:	f000 fe77 	bl	8007944 <vPortExitCritical>

	return xReturn;
 8006c56:	69fb      	ldr	r3, [r7, #28]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3720      	adds	r7, #32
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	20008338 	.word	0x20008338
 8006c64:	2000834c 	.word	0x2000834c

08006c68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c68:	b480      	push	{r7}
 8006c6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c6c:	4b03      	ldr	r3, [pc, #12]	; (8006c7c <vTaskMissedYield+0x14>)
 8006c6e:	2201      	movs	r2, #1
 8006c70:	601a      	str	r2, [r3, #0]
}
 8006c72:	bf00      	nop
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	20008348 	.word	0x20008348

08006c80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c88:	f000 f852 	bl	8006d30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c8c:	4b06      	ldr	r3, [pc, #24]	; (8006ca8 <prvIdleTask+0x28>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d9f9      	bls.n	8006c88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c94:	4b05      	ldr	r3, [pc, #20]	; (8006cac <prvIdleTask+0x2c>)
 8006c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ca4:	e7f0      	b.n	8006c88 <prvIdleTask+0x8>
 8006ca6:	bf00      	nop
 8006ca8:	20007e64 	.word	0x20007e64
 8006cac:	e000ed04 	.word	0xe000ed04

08006cb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	607b      	str	r3, [r7, #4]
 8006cba:	e00c      	b.n	8006cd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4a12      	ldr	r2, [pc, #72]	; (8006d10 <prvInitialiseTaskLists+0x60>)
 8006cc8:	4413      	add	r3, r2
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fe fca4 	bl	8005618 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	607b      	str	r3, [r7, #4]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b37      	cmp	r3, #55	; 0x37
 8006cda:	d9ef      	bls.n	8006cbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cdc:	480d      	ldr	r0, [pc, #52]	; (8006d14 <prvInitialiseTaskLists+0x64>)
 8006cde:	f7fe fc9b 	bl	8005618 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ce2:	480d      	ldr	r0, [pc, #52]	; (8006d18 <prvInitialiseTaskLists+0x68>)
 8006ce4:	f7fe fc98 	bl	8005618 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ce8:	480c      	ldr	r0, [pc, #48]	; (8006d1c <prvInitialiseTaskLists+0x6c>)
 8006cea:	f7fe fc95 	bl	8005618 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cee:	480c      	ldr	r0, [pc, #48]	; (8006d20 <prvInitialiseTaskLists+0x70>)
 8006cf0:	f7fe fc92 	bl	8005618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cf4:	480b      	ldr	r0, [pc, #44]	; (8006d24 <prvInitialiseTaskLists+0x74>)
 8006cf6:	f7fe fc8f 	bl	8005618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cfa:	4b0b      	ldr	r3, [pc, #44]	; (8006d28 <prvInitialiseTaskLists+0x78>)
 8006cfc:	4a05      	ldr	r2, [pc, #20]	; (8006d14 <prvInitialiseTaskLists+0x64>)
 8006cfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d00:	4b0a      	ldr	r3, [pc, #40]	; (8006d2c <prvInitialiseTaskLists+0x7c>)
 8006d02:	4a05      	ldr	r2, [pc, #20]	; (8006d18 <prvInitialiseTaskLists+0x68>)
 8006d04:	601a      	str	r2, [r3, #0]
}
 8006d06:	bf00      	nop
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20007e64 	.word	0x20007e64
 8006d14:	200082c4 	.word	0x200082c4
 8006d18:	200082d8 	.word	0x200082d8
 8006d1c:	200082f4 	.word	0x200082f4
 8006d20:	20008308 	.word	0x20008308
 8006d24:	20008320 	.word	0x20008320
 8006d28:	200082ec 	.word	0x200082ec
 8006d2c:	200082f0 	.word	0x200082f0

08006d30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d36:	e019      	b.n	8006d6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d38:	f000 fdd4 	bl	80078e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d3c:	4b10      	ldr	r3, [pc, #64]	; (8006d80 <prvCheckTasksWaitingTermination+0x50>)
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3304      	adds	r3, #4
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fe fcef 	bl	800572c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d4e:	4b0d      	ldr	r3, [pc, #52]	; (8006d84 <prvCheckTasksWaitingTermination+0x54>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	4a0b      	ldr	r2, [pc, #44]	; (8006d84 <prvCheckTasksWaitingTermination+0x54>)
 8006d56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d58:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <prvCheckTasksWaitingTermination+0x58>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	4a0a      	ldr	r2, [pc, #40]	; (8006d88 <prvCheckTasksWaitingTermination+0x58>)
 8006d60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d62:	f000 fdef 	bl	8007944 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f810 	bl	8006d8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d6c:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <prvCheckTasksWaitingTermination+0x58>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e1      	bne.n	8006d38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	20008308 	.word	0x20008308
 8006d84:	20008334 	.word	0x20008334
 8006d88:	2000831c 	.word	0x2000831c

08006d8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	3354      	adds	r3, #84	; 0x54
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f00a faef 	bl	801137c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d108      	bne.n	8006dba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 ff87 	bl	8007cc0 <vPortFree>
				vPortFree( pxTCB );
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 ff84 	bl	8007cc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006db8:	e018      	b.n	8006dec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d103      	bne.n	8006dcc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 ff7b 	bl	8007cc0 <vPortFree>
	}
 8006dca:	e00f      	b.n	8006dec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d00a      	beq.n	8006dec <prvDeleteTCB+0x60>
	__asm volatile
 8006dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	60fb      	str	r3, [r7, #12]
}
 8006de8:	bf00      	nop
 8006dea:	e7fe      	b.n	8006dea <prvDeleteTCB+0x5e>
	}
 8006dec:	bf00      	nop
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dfa:	4b0c      	ldr	r3, [pc, #48]	; (8006e2c <prvResetNextTaskUnblockTime+0x38>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d104      	bne.n	8006e0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e04:	4b0a      	ldr	r3, [pc, #40]	; (8006e30 <prvResetNextTaskUnblockTime+0x3c>)
 8006e06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e0c:	e008      	b.n	8006e20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e0e:	4b07      	ldr	r3, [pc, #28]	; (8006e2c <prvResetNextTaskUnblockTime+0x38>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	4a04      	ldr	r2, [pc, #16]	; (8006e30 <prvResetNextTaskUnblockTime+0x3c>)
 8006e1e:	6013      	str	r3, [r2, #0]
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	200082ec 	.word	0x200082ec
 8006e30:	20008354 	.word	0x20008354

08006e34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e3a:	4b0b      	ldr	r3, [pc, #44]	; (8006e68 <xTaskGetSchedulerState+0x34>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d102      	bne.n	8006e48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e42:	2301      	movs	r3, #1
 8006e44:	607b      	str	r3, [r7, #4]
 8006e46:	e008      	b.n	8006e5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e48:	4b08      	ldr	r3, [pc, #32]	; (8006e6c <xTaskGetSchedulerState+0x38>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d102      	bne.n	8006e56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e50:	2302      	movs	r3, #2
 8006e52:	607b      	str	r3, [r7, #4]
 8006e54:	e001      	b.n	8006e5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e56:	2300      	movs	r3, #0
 8006e58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e5a:	687b      	ldr	r3, [r7, #4]
	}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	20008340 	.word	0x20008340
 8006e6c:	2000835c 	.word	0x2000835c

08006e70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d056      	beq.n	8006f34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e86:	4b2e      	ldr	r3, [pc, #184]	; (8006f40 <xTaskPriorityDisinherit+0xd0>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d00a      	beq.n	8006ea6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	60fb      	str	r3, [r7, #12]
}
 8006ea2:	bf00      	nop
 8006ea4:	e7fe      	b.n	8006ea4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10a      	bne.n	8006ec4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	60bb      	str	r3, [r7, #8]
}
 8006ec0:	bf00      	nop
 8006ec2:	e7fe      	b.n	8006ec2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec8:	1e5a      	subs	r2, r3, #1
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d02c      	beq.n	8006f34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d128      	bne.n	8006f34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fe fc20 	bl	800572c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f04:	4b0f      	ldr	r3, [pc, #60]	; (8006f44 <xTaskPriorityDisinherit+0xd4>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d903      	bls.n	8006f14 <xTaskPriorityDisinherit+0xa4>
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	4a0c      	ldr	r2, [pc, #48]	; (8006f44 <xTaskPriorityDisinherit+0xd4>)
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f18:	4613      	mov	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4a09      	ldr	r2, [pc, #36]	; (8006f48 <xTaskPriorityDisinherit+0xd8>)
 8006f22:	441a      	add	r2, r3
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	3304      	adds	r3, #4
 8006f28:	4619      	mov	r1, r3
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	f7fe fba1 	bl	8005672 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f30:	2301      	movs	r3, #1
 8006f32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f34:	697b      	ldr	r3, [r7, #20]
	}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3718      	adds	r7, #24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20007e60 	.word	0x20007e60
 8006f44:	2000833c 	.word	0x2000833c
 8006f48:	20007e64 	.word	0x20007e64

08006f4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f56:	4b21      	ldr	r3, [pc, #132]	; (8006fdc <prvAddCurrentTaskToDelayedList+0x90>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f5c:	4b20      	ldr	r3, [pc, #128]	; (8006fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3304      	adds	r3, #4
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fe fbe2 	bl	800572c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f6e:	d10a      	bne.n	8006f86 <prvAddCurrentTaskToDelayedList+0x3a>
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d007      	beq.n	8006f86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f76:	4b1a      	ldr	r3, [pc, #104]	; (8006fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4819      	ldr	r0, [pc, #100]	; (8006fe4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f80:	f7fe fb77 	bl	8005672 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f84:	e026      	b.n	8006fd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f8e:	4b14      	ldr	r3, [pc, #80]	; (8006fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d209      	bcs.n	8006fb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f9e:	4b12      	ldr	r3, [pc, #72]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	4b0f      	ldr	r3, [pc, #60]	; (8006fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	4619      	mov	r1, r3
 8006faa:	4610      	mov	r0, r2
 8006fac:	f7fe fb85 	bl	80056ba <vListInsert>
}
 8006fb0:	e010      	b.n	8006fd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fb2:	4b0e      	ldr	r3, [pc, #56]	; (8006fec <prvAddCurrentTaskToDelayedList+0xa0>)
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	4b0a      	ldr	r3, [pc, #40]	; (8006fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3304      	adds	r3, #4
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	f7fe fb7b 	bl	80056ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fc4:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d202      	bcs.n	8006fd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006fce:	4a08      	ldr	r2, [pc, #32]	; (8006ff0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	6013      	str	r3, [r2, #0]
}
 8006fd4:	bf00      	nop
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	20008338 	.word	0x20008338
 8006fe0:	20007e60 	.word	0x20007e60
 8006fe4:	20008320 	.word	0x20008320
 8006fe8:	200082f0 	.word	0x200082f0
 8006fec:	200082ec 	.word	0x200082ec
 8006ff0:	20008354 	.word	0x20008354

08006ff4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08a      	sub	sp, #40	; 0x28
 8006ff8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006ffe:	f000 fb07 	bl	8007610 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007002:	4b1c      	ldr	r3, [pc, #112]	; (8007074 <xTimerCreateTimerTask+0x80>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d021      	beq.n	800704e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800700a:	2300      	movs	r3, #0
 800700c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800700e:	2300      	movs	r3, #0
 8007010:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007012:	1d3a      	adds	r2, r7, #4
 8007014:	f107 0108 	add.w	r1, r7, #8
 8007018:	f107 030c 	add.w	r3, r7, #12
 800701c:	4618      	mov	r0, r3
 800701e:	f7fe fae1 	bl	80055e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	9202      	str	r2, [sp, #8]
 800702a:	9301      	str	r3, [sp, #4]
 800702c:	2302      	movs	r3, #2
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	2300      	movs	r3, #0
 8007032:	460a      	mov	r2, r1
 8007034:	4910      	ldr	r1, [pc, #64]	; (8007078 <xTimerCreateTimerTask+0x84>)
 8007036:	4811      	ldr	r0, [pc, #68]	; (800707c <xTimerCreateTimerTask+0x88>)
 8007038:	f7ff f88e 	bl	8006158 <xTaskCreateStatic>
 800703c:	4603      	mov	r3, r0
 800703e:	4a10      	ldr	r2, [pc, #64]	; (8007080 <xTimerCreateTimerTask+0x8c>)
 8007040:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007042:	4b0f      	ldr	r3, [pc, #60]	; (8007080 <xTimerCreateTimerTask+0x8c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800704a:	2301      	movs	r3, #1
 800704c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10a      	bne.n	800706a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	613b      	str	r3, [r7, #16]
}
 8007066:	bf00      	nop
 8007068:	e7fe      	b.n	8007068 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800706a:	697b      	ldr	r3, [r7, #20]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	20008390 	.word	0x20008390
 8007078:	080123a4 	.word	0x080123a4
 800707c:	080071b9 	.word	0x080071b9
 8007080:	20008394 	.word	0x20008394

08007084 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08a      	sub	sp, #40	; 0x28
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007092:	2300      	movs	r3, #0
 8007094:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10a      	bne.n	80070b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800709c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	623b      	str	r3, [r7, #32]
}
 80070ae:	bf00      	nop
 80070b0:	e7fe      	b.n	80070b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80070b2:	4b1a      	ldr	r3, [pc, #104]	; (800711c <xTimerGenericCommand+0x98>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d02a      	beq.n	8007110 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2b05      	cmp	r3, #5
 80070ca:	dc18      	bgt.n	80070fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070cc:	f7ff feb2 	bl	8006e34 <xTaskGetSchedulerState>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d109      	bne.n	80070ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070d6:	4b11      	ldr	r3, [pc, #68]	; (800711c <xTimerGenericCommand+0x98>)
 80070d8:	6818      	ldr	r0, [r3, #0]
 80070da:	f107 0110 	add.w	r1, r7, #16
 80070de:	2300      	movs	r3, #0
 80070e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070e2:	f7fe fc51 	bl	8005988 <xQueueGenericSend>
 80070e6:	6278      	str	r0, [r7, #36]	; 0x24
 80070e8:	e012      	b.n	8007110 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070ea:	4b0c      	ldr	r3, [pc, #48]	; (800711c <xTimerGenericCommand+0x98>)
 80070ec:	6818      	ldr	r0, [r3, #0]
 80070ee:	f107 0110 	add.w	r1, r7, #16
 80070f2:	2300      	movs	r3, #0
 80070f4:	2200      	movs	r2, #0
 80070f6:	f7fe fc47 	bl	8005988 <xQueueGenericSend>
 80070fa:	6278      	str	r0, [r7, #36]	; 0x24
 80070fc:	e008      	b.n	8007110 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070fe:	4b07      	ldr	r3, [pc, #28]	; (800711c <xTimerGenericCommand+0x98>)
 8007100:	6818      	ldr	r0, [r3, #0]
 8007102:	f107 0110 	add.w	r1, r7, #16
 8007106:	2300      	movs	r3, #0
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	f7fe fd3b 	bl	8005b84 <xQueueGenericSendFromISR>
 800710e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007112:	4618      	mov	r0, r3
 8007114:	3728      	adds	r7, #40	; 0x28
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	20008390 	.word	0x20008390

08007120 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b088      	sub	sp, #32
 8007124:	af02      	add	r7, sp, #8
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800712a:	4b22      	ldr	r3, [pc, #136]	; (80071b4 <prvProcessExpiredTimer+0x94>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	3304      	adds	r3, #4
 8007138:	4618      	mov	r0, r3
 800713a:	f7fe faf7 	bl	800572c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007144:	f003 0304 	and.w	r3, r3, #4
 8007148:	2b00      	cmp	r3, #0
 800714a:	d022      	beq.n	8007192 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	699a      	ldr	r2, [r3, #24]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	18d1      	adds	r1, r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	6978      	ldr	r0, [r7, #20]
 800715a:	f000 f8d1 	bl	8007300 <prvInsertTimerInActiveList>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d01f      	beq.n	80071a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007164:	2300      	movs	r3, #0
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	2300      	movs	r3, #0
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	2100      	movs	r1, #0
 800716e:	6978      	ldr	r0, [r7, #20]
 8007170:	f7ff ff88 	bl	8007084 <xTimerGenericCommand>
 8007174:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d113      	bne.n	80071a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800717c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	60fb      	str	r3, [r7, #12]
}
 800718e:	bf00      	nop
 8007190:	e7fe      	b.n	8007190 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007198:	f023 0301 	bic.w	r3, r3, #1
 800719c:	b2da      	uxtb	r2, r3
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	6978      	ldr	r0, [r7, #20]
 80071aa:	4798      	blx	r3
}
 80071ac:	bf00      	nop
 80071ae:	3718      	adds	r7, #24
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	20008388 	.word	0x20008388

080071b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071c0:	f107 0308 	add.w	r3, r7, #8
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 f857 	bl	8007278 <prvGetNextExpireTime>
 80071ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4619      	mov	r1, r3
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f803 	bl	80071dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071d6:	f000 f8d5 	bl	8007384 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071da:	e7f1      	b.n	80071c0 <prvTimerTask+0x8>

080071dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80071e6:	f7ff fa13 	bl	8006610 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071ea:	f107 0308 	add.w	r3, r7, #8
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 f866 	bl	80072c0 <prvSampleTimeNow>
 80071f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d130      	bne.n	800725e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10a      	bne.n	8007218 <prvProcessTimerOrBlockTask+0x3c>
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	429a      	cmp	r2, r3
 8007208:	d806      	bhi.n	8007218 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800720a:	f7ff fa0f 	bl	800662c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800720e:	68f9      	ldr	r1, [r7, #12]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff ff85 	bl	8007120 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007216:	e024      	b.n	8007262 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d008      	beq.n	8007230 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800721e:	4b13      	ldr	r3, [pc, #76]	; (800726c <prvProcessTimerOrBlockTask+0x90>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <prvProcessTimerOrBlockTask+0x50>
 8007228:	2301      	movs	r3, #1
 800722a:	e000      	b.n	800722e <prvProcessTimerOrBlockTask+0x52>
 800722c:	2300      	movs	r3, #0
 800722e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007230:	4b0f      	ldr	r3, [pc, #60]	; (8007270 <prvProcessTimerOrBlockTask+0x94>)
 8007232:	6818      	ldr	r0, [r3, #0]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	4619      	mov	r1, r3
 800723e:	f7fe ff57 	bl	80060f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007242:	f7ff f9f3 	bl	800662c <xTaskResumeAll>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10a      	bne.n	8007262 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800724c:	4b09      	ldr	r3, [pc, #36]	; (8007274 <prvProcessTimerOrBlockTask+0x98>)
 800724e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	f3bf 8f6f 	isb	sy
}
 800725c:	e001      	b.n	8007262 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800725e:	f7ff f9e5 	bl	800662c <xTaskResumeAll>
}
 8007262:	bf00      	nop
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	2000838c 	.word	0x2000838c
 8007270:	20008390 	.word	0x20008390
 8007274:	e000ed04 	.word	0xe000ed04

08007278 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007280:	4b0e      	ldr	r3, [pc, #56]	; (80072bc <prvGetNextExpireTime+0x44>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <prvGetNextExpireTime+0x16>
 800728a:	2201      	movs	r2, #1
 800728c:	e000      	b.n	8007290 <prvGetNextExpireTime+0x18>
 800728e:	2200      	movs	r2, #0
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d105      	bne.n	80072a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800729c:	4b07      	ldr	r3, [pc, #28]	; (80072bc <prvGetNextExpireTime+0x44>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	60fb      	str	r3, [r7, #12]
 80072a6:	e001      	b.n	80072ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80072ac:	68fb      	ldr	r3, [r7, #12]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	20008388 	.word	0x20008388

080072c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072c8:	f7ff fa4e 	bl	8006768 <xTaskGetTickCount>
 80072cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072ce:	4b0b      	ldr	r3, [pc, #44]	; (80072fc <prvSampleTimeNow+0x3c>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d205      	bcs.n	80072e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072d8:	f000 f936 	bl	8007548 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	601a      	str	r2, [r3, #0]
 80072e2:	e002      	b.n	80072ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80072ea:	4a04      	ldr	r2, [pc, #16]	; (80072fc <prvSampleTimeNow+0x3c>)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80072f0:	68fb      	ldr	r3, [r7, #12]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20008398 	.word	0x20008398

08007300 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
 800730c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800730e:	2300      	movs	r3, #0
 8007310:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	429a      	cmp	r2, r3
 8007324:	d812      	bhi.n	800734c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	1ad2      	subs	r2, r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	429a      	cmp	r2, r3
 8007332:	d302      	bcc.n	800733a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007334:	2301      	movs	r3, #1
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	e01b      	b.n	8007372 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800733a:	4b10      	ldr	r3, [pc, #64]	; (800737c <prvInsertTimerInActiveList+0x7c>)
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3304      	adds	r3, #4
 8007342:	4619      	mov	r1, r3
 8007344:	4610      	mov	r0, r2
 8007346:	f7fe f9b8 	bl	80056ba <vListInsert>
 800734a:	e012      	b.n	8007372 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d206      	bcs.n	8007362 <prvInsertTimerInActiveList+0x62>
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	429a      	cmp	r2, r3
 800735a:	d302      	bcc.n	8007362 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800735c:	2301      	movs	r3, #1
 800735e:	617b      	str	r3, [r7, #20]
 8007360:	e007      	b.n	8007372 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007362:	4b07      	ldr	r3, [pc, #28]	; (8007380 <prvInsertTimerInActiveList+0x80>)
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	3304      	adds	r3, #4
 800736a:	4619      	mov	r1, r3
 800736c:	4610      	mov	r0, r2
 800736e:	f7fe f9a4 	bl	80056ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007372:	697b      	ldr	r3, [r7, #20]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	2000838c 	.word	0x2000838c
 8007380:	20008388 	.word	0x20008388

08007384 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08e      	sub	sp, #56	; 0x38
 8007388:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800738a:	e0ca      	b.n	8007522 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	da18      	bge.n	80073c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007392:	1d3b      	adds	r3, r7, #4
 8007394:	3304      	adds	r3, #4
 8007396:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10a      	bne.n	80073b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	61fb      	str	r3, [r7, #28]
}
 80073b0:	bf00      	nop
 80073b2:	e7fe      	b.n	80073b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073ba:	6850      	ldr	r0, [r2, #4]
 80073bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073be:	6892      	ldr	r2, [r2, #8]
 80073c0:	4611      	mov	r1, r2
 80073c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f2c0 80ab 	blt.w	8007522 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d004      	beq.n	80073e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	3304      	adds	r3, #4
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fe f9a5 	bl	800572c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073e2:	463b      	mov	r3, r7
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff ff6b 	bl	80072c0 <prvSampleTimeNow>
 80073ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b09      	cmp	r3, #9
 80073f0:	f200 8096 	bhi.w	8007520 <prvProcessReceivedCommands+0x19c>
 80073f4:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <prvProcessReceivedCommands+0x78>)
 80073f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fa:	bf00      	nop
 80073fc:	08007425 	.word	0x08007425
 8007400:	08007425 	.word	0x08007425
 8007404:	08007425 	.word	0x08007425
 8007408:	08007499 	.word	0x08007499
 800740c:	080074ad 	.word	0x080074ad
 8007410:	080074f7 	.word	0x080074f7
 8007414:	08007425 	.word	0x08007425
 8007418:	08007425 	.word	0x08007425
 800741c:	08007499 	.word	0x08007499
 8007420:	080074ad 	.word	0x080074ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800742a:	f043 0301 	orr.w	r3, r3, #1
 800742e:	b2da      	uxtb	r2, r3
 8007430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	18d1      	adds	r1, r2, r3
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007444:	f7ff ff5c 	bl	8007300 <prvInsertTimerInActiveList>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d069      	beq.n	8007522 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007454:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	d05e      	beq.n	8007522 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	441a      	add	r2, r3
 800746c:	2300      	movs	r3, #0
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	2300      	movs	r3, #0
 8007472:	2100      	movs	r1, #0
 8007474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007476:	f7ff fe05 	bl	8007084 <xTimerGenericCommand>
 800747a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d14f      	bne.n	8007522 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	61bb      	str	r3, [r7, #24]
}
 8007494:	bf00      	nop
 8007496:	e7fe      	b.n	8007496 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800749e:	f023 0301 	bic.w	r3, r3, #1
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80074aa:	e03a      	b.n	8007522 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074b2:	f043 0301 	orr.w	r3, r3, #1
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10a      	bne.n	80074e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80074cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d0:	f383 8811 	msr	BASEPRI, r3
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	617b      	str	r3, [r7, #20]
}
 80074de:	bf00      	nop
 80074e0:	e7fe      	b.n	80074e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	699a      	ldr	r2, [r3, #24]
 80074e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e8:	18d1      	adds	r1, r2, r3
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074f0:	f7ff ff06 	bl	8007300 <prvInsertTimerInActiveList>
					break;
 80074f4:	e015      	b.n	8007522 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80074f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d103      	bne.n	800750c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007506:	f000 fbdb 	bl	8007cc0 <vPortFree>
 800750a:	e00a      	b.n	8007522 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007512:	f023 0301 	bic.w	r3, r3, #1
 8007516:	b2da      	uxtb	r2, r3
 8007518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800751e:	e000      	b.n	8007522 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007520:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007522:	4b08      	ldr	r3, [pc, #32]	; (8007544 <prvProcessReceivedCommands+0x1c0>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	1d39      	adds	r1, r7, #4
 8007528:	2200      	movs	r2, #0
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe fbc6 	bl	8005cbc <xQueueReceive>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	f47f af2a 	bne.w	800738c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007538:	bf00      	nop
 800753a:	bf00      	nop
 800753c:	3730      	adds	r7, #48	; 0x30
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20008390 	.word	0x20008390

08007548 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b088      	sub	sp, #32
 800754c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800754e:	e048      	b.n	80075e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007550:	4b2d      	ldr	r3, [pc, #180]	; (8007608 <prvSwitchTimerLists+0xc0>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800755a:	4b2b      	ldr	r3, [pc, #172]	; (8007608 <prvSwitchTimerLists+0xc0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3304      	adds	r3, #4
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe f8df 	bl	800572c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800757c:	f003 0304 	and.w	r3, r3, #4
 8007580:	2b00      	cmp	r3, #0
 8007582:	d02e      	beq.n	80075e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4413      	add	r3, r2
 800758c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	429a      	cmp	r2, r3
 8007594:	d90e      	bls.n	80075b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075a2:	4b19      	ldr	r3, [pc, #100]	; (8007608 <prvSwitchTimerLists+0xc0>)
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	3304      	adds	r3, #4
 80075aa:	4619      	mov	r1, r3
 80075ac:	4610      	mov	r0, r2
 80075ae:	f7fe f884 	bl	80056ba <vListInsert>
 80075b2:	e016      	b.n	80075e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075b4:	2300      	movs	r3, #0
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	2300      	movs	r3, #0
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	2100      	movs	r1, #0
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f7ff fd60 	bl	8007084 <xTimerGenericCommand>
 80075c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10a      	bne.n	80075e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80075cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	603b      	str	r3, [r7, #0]
}
 80075de:	bf00      	nop
 80075e0:	e7fe      	b.n	80075e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075e2:	4b09      	ldr	r3, [pc, #36]	; (8007608 <prvSwitchTimerLists+0xc0>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1b1      	bne.n	8007550 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80075ec:	4b06      	ldr	r3, [pc, #24]	; (8007608 <prvSwitchTimerLists+0xc0>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80075f2:	4b06      	ldr	r3, [pc, #24]	; (800760c <prvSwitchTimerLists+0xc4>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a04      	ldr	r2, [pc, #16]	; (8007608 <prvSwitchTimerLists+0xc0>)
 80075f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80075fa:	4a04      	ldr	r2, [pc, #16]	; (800760c <prvSwitchTimerLists+0xc4>)
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	6013      	str	r3, [r2, #0]
}
 8007600:	bf00      	nop
 8007602:	3718      	adds	r7, #24
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	20008388 	.word	0x20008388
 800760c:	2000838c 	.word	0x2000838c

08007610 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007616:	f000 f965 	bl	80078e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800761a:	4b15      	ldr	r3, [pc, #84]	; (8007670 <prvCheckForValidListAndQueue+0x60>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d120      	bne.n	8007664 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007622:	4814      	ldr	r0, [pc, #80]	; (8007674 <prvCheckForValidListAndQueue+0x64>)
 8007624:	f7fd fff8 	bl	8005618 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007628:	4813      	ldr	r0, [pc, #76]	; (8007678 <prvCheckForValidListAndQueue+0x68>)
 800762a:	f7fd fff5 	bl	8005618 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800762e:	4b13      	ldr	r3, [pc, #76]	; (800767c <prvCheckForValidListAndQueue+0x6c>)
 8007630:	4a10      	ldr	r2, [pc, #64]	; (8007674 <prvCheckForValidListAndQueue+0x64>)
 8007632:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007634:	4b12      	ldr	r3, [pc, #72]	; (8007680 <prvCheckForValidListAndQueue+0x70>)
 8007636:	4a10      	ldr	r2, [pc, #64]	; (8007678 <prvCheckForValidListAndQueue+0x68>)
 8007638:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800763a:	2300      	movs	r3, #0
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	4b11      	ldr	r3, [pc, #68]	; (8007684 <prvCheckForValidListAndQueue+0x74>)
 8007640:	4a11      	ldr	r2, [pc, #68]	; (8007688 <prvCheckForValidListAndQueue+0x78>)
 8007642:	2110      	movs	r1, #16
 8007644:	200a      	movs	r0, #10
 8007646:	f7fe f903 	bl	8005850 <xQueueGenericCreateStatic>
 800764a:	4603      	mov	r3, r0
 800764c:	4a08      	ldr	r2, [pc, #32]	; (8007670 <prvCheckForValidListAndQueue+0x60>)
 800764e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007650:	4b07      	ldr	r3, [pc, #28]	; (8007670 <prvCheckForValidListAndQueue+0x60>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d005      	beq.n	8007664 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007658:	4b05      	ldr	r3, [pc, #20]	; (8007670 <prvCheckForValidListAndQueue+0x60>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	490b      	ldr	r1, [pc, #44]	; (800768c <prvCheckForValidListAndQueue+0x7c>)
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe fd1c 	bl	800609c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007664:	f000 f96e 	bl	8007944 <vPortExitCritical>
}
 8007668:	bf00      	nop
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20008390 	.word	0x20008390
 8007674:	20008360 	.word	0x20008360
 8007678:	20008374 	.word	0x20008374
 800767c:	20008388 	.word	0x20008388
 8007680:	2000838c 	.word	0x2000838c
 8007684:	2000843c 	.word	0x2000843c
 8007688:	2000839c 	.word	0x2000839c
 800768c:	080123ac 	.word	0x080123ac

08007690 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	3b04      	subs	r3, #4
 80076a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3b04      	subs	r3, #4
 80076ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f023 0201 	bic.w	r2, r3, #1
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	3b04      	subs	r3, #4
 80076be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076c0:	4a0c      	ldr	r2, [pc, #48]	; (80076f4 <pxPortInitialiseStack+0x64>)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3b14      	subs	r3, #20
 80076ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3b04      	subs	r3, #4
 80076d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f06f 0202 	mvn.w	r2, #2
 80076de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3b20      	subs	r3, #32
 80076e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076e6:	68fb      	ldr	r3, [r7, #12]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	080076f9 	.word	0x080076f9

080076f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007702:	4b12      	ldr	r3, [pc, #72]	; (800774c <prvTaskExitError+0x54>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800770a:	d00a      	beq.n	8007722 <prvTaskExitError+0x2a>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	60fb      	str	r3, [r7, #12]
}
 800771e:	bf00      	nop
 8007720:	e7fe      	b.n	8007720 <prvTaskExitError+0x28>
	__asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	60bb      	str	r3, [r7, #8]
}
 8007734:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007736:	bf00      	nop
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0fc      	beq.n	8007738 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800773e:	bf00      	nop
 8007740:	bf00      	nop
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	20000010 	.word	0x20000010

08007750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007750:	4b07      	ldr	r3, [pc, #28]	; (8007770 <pxCurrentTCBConst2>)
 8007752:	6819      	ldr	r1, [r3, #0]
 8007754:	6808      	ldr	r0, [r1, #0]
 8007756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775a:	f380 8809 	msr	PSP, r0
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f04f 0000 	mov.w	r0, #0
 8007766:	f380 8811 	msr	BASEPRI, r0
 800776a:	4770      	bx	lr
 800776c:	f3af 8000 	nop.w

08007770 <pxCurrentTCBConst2>:
 8007770:	20007e60 	.word	0x20007e60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007774:	bf00      	nop
 8007776:	bf00      	nop

08007778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007778:	4808      	ldr	r0, [pc, #32]	; (800779c <prvPortStartFirstTask+0x24>)
 800777a:	6800      	ldr	r0, [r0, #0]
 800777c:	6800      	ldr	r0, [r0, #0]
 800777e:	f380 8808 	msr	MSP, r0
 8007782:	f04f 0000 	mov.w	r0, #0
 8007786:	f380 8814 	msr	CONTROL, r0
 800778a:	b662      	cpsie	i
 800778c:	b661      	cpsie	f
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	df00      	svc	0
 8007798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800779a:	bf00      	nop
 800779c:	e000ed08 	.word	0xe000ed08

080077a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077a6:	4b46      	ldr	r3, [pc, #280]	; (80078c0 <xPortStartScheduler+0x120>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a46      	ldr	r2, [pc, #280]	; (80078c4 <xPortStartScheduler+0x124>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d10a      	bne.n	80077c6 <xPortStartScheduler+0x26>
	__asm volatile
 80077b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	613b      	str	r3, [r7, #16]
}
 80077c2:	bf00      	nop
 80077c4:	e7fe      	b.n	80077c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077c6:	4b3e      	ldr	r3, [pc, #248]	; (80078c0 <xPortStartScheduler+0x120>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a3f      	ldr	r2, [pc, #252]	; (80078c8 <xPortStartScheduler+0x128>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d10a      	bne.n	80077e6 <xPortStartScheduler+0x46>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	60fb      	str	r3, [r7, #12]
}
 80077e2:	bf00      	nop
 80077e4:	e7fe      	b.n	80077e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077e6:	4b39      	ldr	r3, [pc, #228]	; (80078cc <xPortStartScheduler+0x12c>)
 80077e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	22ff      	movs	r2, #255	; 0xff
 80077f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	b2db      	uxtb	r3, r3
 8007804:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007808:	b2da      	uxtb	r2, r3
 800780a:	4b31      	ldr	r3, [pc, #196]	; (80078d0 <xPortStartScheduler+0x130>)
 800780c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800780e:	4b31      	ldr	r3, [pc, #196]	; (80078d4 <xPortStartScheduler+0x134>)
 8007810:	2207      	movs	r2, #7
 8007812:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007814:	e009      	b.n	800782a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007816:	4b2f      	ldr	r3, [pc, #188]	; (80078d4 <xPortStartScheduler+0x134>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3b01      	subs	r3, #1
 800781c:	4a2d      	ldr	r2, [pc, #180]	; (80078d4 <xPortStartScheduler+0x134>)
 800781e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	005b      	lsls	r3, r3, #1
 8007826:	b2db      	uxtb	r3, r3
 8007828:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800782a:	78fb      	ldrb	r3, [r7, #3]
 800782c:	b2db      	uxtb	r3, r3
 800782e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007832:	2b80      	cmp	r3, #128	; 0x80
 8007834:	d0ef      	beq.n	8007816 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007836:	4b27      	ldr	r3, [pc, #156]	; (80078d4 <xPortStartScheduler+0x134>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f1c3 0307 	rsb	r3, r3, #7
 800783e:	2b04      	cmp	r3, #4
 8007840:	d00a      	beq.n	8007858 <xPortStartScheduler+0xb8>
	__asm volatile
 8007842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	60bb      	str	r3, [r7, #8]
}
 8007854:	bf00      	nop
 8007856:	e7fe      	b.n	8007856 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007858:	4b1e      	ldr	r3, [pc, #120]	; (80078d4 <xPortStartScheduler+0x134>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	021b      	lsls	r3, r3, #8
 800785e:	4a1d      	ldr	r2, [pc, #116]	; (80078d4 <xPortStartScheduler+0x134>)
 8007860:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007862:	4b1c      	ldr	r3, [pc, #112]	; (80078d4 <xPortStartScheduler+0x134>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800786a:	4a1a      	ldr	r2, [pc, #104]	; (80078d4 <xPortStartScheduler+0x134>)
 800786c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	b2da      	uxtb	r2, r3
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007876:	4b18      	ldr	r3, [pc, #96]	; (80078d8 <xPortStartScheduler+0x138>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a17      	ldr	r2, [pc, #92]	; (80078d8 <xPortStartScheduler+0x138>)
 800787c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007880:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007882:	4b15      	ldr	r3, [pc, #84]	; (80078d8 <xPortStartScheduler+0x138>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a14      	ldr	r2, [pc, #80]	; (80078d8 <xPortStartScheduler+0x138>)
 8007888:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800788c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800788e:	f000 f8dd 	bl	8007a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007892:	4b12      	ldr	r3, [pc, #72]	; (80078dc <xPortStartScheduler+0x13c>)
 8007894:	2200      	movs	r2, #0
 8007896:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007898:	f000 f8fc 	bl	8007a94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800789c:	4b10      	ldr	r3, [pc, #64]	; (80078e0 <xPortStartScheduler+0x140>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a0f      	ldr	r2, [pc, #60]	; (80078e0 <xPortStartScheduler+0x140>)
 80078a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80078a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078a8:	f7ff ff66 	bl	8007778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078ac:	f7ff f826 	bl	80068fc <vTaskSwitchContext>
	prvTaskExitError();
 80078b0:	f7ff ff22 	bl	80076f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	e000ed00 	.word	0xe000ed00
 80078c4:	410fc271 	.word	0x410fc271
 80078c8:	410fc270 	.word	0x410fc270
 80078cc:	e000e400 	.word	0xe000e400
 80078d0:	2000848c 	.word	0x2000848c
 80078d4:	20008490 	.word	0x20008490
 80078d8:	e000ed20 	.word	0xe000ed20
 80078dc:	20000010 	.word	0x20000010
 80078e0:	e000ef34 	.word	0xe000ef34

080078e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
	__asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	607b      	str	r3, [r7, #4]
}
 80078fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078fe:	4b0f      	ldr	r3, [pc, #60]	; (800793c <vPortEnterCritical+0x58>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3301      	adds	r3, #1
 8007904:	4a0d      	ldr	r2, [pc, #52]	; (800793c <vPortEnterCritical+0x58>)
 8007906:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007908:	4b0c      	ldr	r3, [pc, #48]	; (800793c <vPortEnterCritical+0x58>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d10f      	bne.n	8007930 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007910:	4b0b      	ldr	r3, [pc, #44]	; (8007940 <vPortEnterCritical+0x5c>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00a      	beq.n	8007930 <vPortEnterCritical+0x4c>
	__asm volatile
 800791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791e:	f383 8811 	msr	BASEPRI, r3
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	603b      	str	r3, [r7, #0]
}
 800792c:	bf00      	nop
 800792e:	e7fe      	b.n	800792e <vPortEnterCritical+0x4a>
	}
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	20000010 	.word	0x20000010
 8007940:	e000ed04 	.word	0xe000ed04

08007944 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800794a:	4b12      	ldr	r3, [pc, #72]	; (8007994 <vPortExitCritical+0x50>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10a      	bne.n	8007968 <vPortExitCritical+0x24>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	607b      	str	r3, [r7, #4]
}
 8007964:	bf00      	nop
 8007966:	e7fe      	b.n	8007966 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007968:	4b0a      	ldr	r3, [pc, #40]	; (8007994 <vPortExitCritical+0x50>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3b01      	subs	r3, #1
 800796e:	4a09      	ldr	r2, [pc, #36]	; (8007994 <vPortExitCritical+0x50>)
 8007970:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007972:	4b08      	ldr	r3, [pc, #32]	; (8007994 <vPortExitCritical+0x50>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d105      	bne.n	8007986 <vPortExitCritical+0x42>
 800797a:	2300      	movs	r3, #0
 800797c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	f383 8811 	msr	BASEPRI, r3
}
 8007984:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	20000010 	.word	0x20000010
	...

080079a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079a0:	f3ef 8009 	mrs	r0, PSP
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	4b15      	ldr	r3, [pc, #84]	; (8007a00 <pxCurrentTCBConst>)
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	f01e 0f10 	tst.w	lr, #16
 80079b0:	bf08      	it	eq
 80079b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ba:	6010      	str	r0, [r2, #0]
 80079bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079c4:	f380 8811 	msr	BASEPRI, r0
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f7fe ff94 	bl	80068fc <vTaskSwitchContext>
 80079d4:	f04f 0000 	mov.w	r0, #0
 80079d8:	f380 8811 	msr	BASEPRI, r0
 80079dc:	bc09      	pop	{r0, r3}
 80079de:	6819      	ldr	r1, [r3, #0]
 80079e0:	6808      	ldr	r0, [r1, #0]
 80079e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e6:	f01e 0f10 	tst.w	lr, #16
 80079ea:	bf08      	it	eq
 80079ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079f0:	f380 8809 	msr	PSP, r0
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	f3af 8000 	nop.w

08007a00 <pxCurrentTCBConst>:
 8007a00:	20007e60 	.word	0x20007e60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a04:	bf00      	nop
 8007a06:	bf00      	nop

08007a08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	607b      	str	r3, [r7, #4]
}
 8007a20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a22:	f7fe feb1 	bl	8006788 <xTaskIncrementTick>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a2c:	4b06      	ldr	r3, [pc, #24]	; (8007a48 <xPortSysTickHandler+0x40>)
 8007a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	2300      	movs	r3, #0
 8007a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	f383 8811 	msr	BASEPRI, r3
}
 8007a3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a40:	bf00      	nop
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	e000ed04 	.word	0xe000ed04

08007a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a50:	4b0b      	ldr	r3, [pc, #44]	; (8007a80 <vPortSetupTimerInterrupt+0x34>)
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a56:	4b0b      	ldr	r3, [pc, #44]	; (8007a84 <vPortSetupTimerInterrupt+0x38>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <vPortSetupTimerInterrupt+0x3c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a0a      	ldr	r2, [pc, #40]	; (8007a8c <vPortSetupTimerInterrupt+0x40>)
 8007a62:	fba2 2303 	umull	r2, r3, r2, r3
 8007a66:	099b      	lsrs	r3, r3, #6
 8007a68:	4a09      	ldr	r2, [pc, #36]	; (8007a90 <vPortSetupTimerInterrupt+0x44>)
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a6e:	4b04      	ldr	r3, [pc, #16]	; (8007a80 <vPortSetupTimerInterrupt+0x34>)
 8007a70:	2207      	movs	r2, #7
 8007a72:	601a      	str	r2, [r3, #0]
}
 8007a74:	bf00      	nop
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	e000e010 	.word	0xe000e010
 8007a84:	e000e018 	.word	0xe000e018
 8007a88:	20000004 	.word	0x20000004
 8007a8c:	10624dd3 	.word	0x10624dd3
 8007a90:	e000e014 	.word	0xe000e014

08007a94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007aa4 <vPortEnableVFP+0x10>
 8007a98:	6801      	ldr	r1, [r0, #0]
 8007a9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a9e:	6001      	str	r1, [r0, #0]
 8007aa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007aa2:	bf00      	nop
 8007aa4:	e000ed88 	.word	0xe000ed88

08007aa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007aae:	f3ef 8305 	mrs	r3, IPSR
 8007ab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b0f      	cmp	r3, #15
 8007ab8:	d914      	bls.n	8007ae4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007aba:	4a17      	ldr	r2, [pc, #92]	; (8007b18 <vPortValidateInterruptPriority+0x70>)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	4413      	add	r3, r2
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ac4:	4b15      	ldr	r3, [pc, #84]	; (8007b1c <vPortValidateInterruptPriority+0x74>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	7afa      	ldrb	r2, [r7, #11]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d20a      	bcs.n	8007ae4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	607b      	str	r3, [r7, #4]
}
 8007ae0:	bf00      	nop
 8007ae2:	e7fe      	b.n	8007ae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ae4:	4b0e      	ldr	r3, [pc, #56]	; (8007b20 <vPortValidateInterruptPriority+0x78>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007aec:	4b0d      	ldr	r3, [pc, #52]	; (8007b24 <vPortValidateInterruptPriority+0x7c>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d90a      	bls.n	8007b0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	603b      	str	r3, [r7, #0]
}
 8007b06:	bf00      	nop
 8007b08:	e7fe      	b.n	8007b08 <vPortValidateInterruptPriority+0x60>
	}
 8007b0a:	bf00      	nop
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	e000e3f0 	.word	0xe000e3f0
 8007b1c:	2000848c 	.word	0x2000848c
 8007b20:	e000ed0c 	.word	0xe000ed0c
 8007b24:	20008490 	.word	0x20008490

08007b28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b08a      	sub	sp, #40	; 0x28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b30:	2300      	movs	r3, #0
 8007b32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b34:	f7fe fd6c 	bl	8006610 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b38:	4b5b      	ldr	r3, [pc, #364]	; (8007ca8 <pvPortMalloc+0x180>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d101      	bne.n	8007b44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b40:	f000 f920 	bl	8007d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b44:	4b59      	ldr	r3, [pc, #356]	; (8007cac <pvPortMalloc+0x184>)
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f040 8093 	bne.w	8007c78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d01d      	beq.n	8007b94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007b58:	2208      	movs	r2, #8
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f003 0307 	and.w	r3, r3, #7
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d014      	beq.n	8007b94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f023 0307 	bic.w	r3, r3, #7
 8007b70:	3308      	adds	r3, #8
 8007b72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f003 0307 	and.w	r3, r3, #7
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <pvPortMalloc+0x6c>
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	617b      	str	r3, [r7, #20]
}
 8007b90:	bf00      	nop
 8007b92:	e7fe      	b.n	8007b92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d06e      	beq.n	8007c78 <pvPortMalloc+0x150>
 8007b9a:	4b45      	ldr	r3, [pc, #276]	; (8007cb0 <pvPortMalloc+0x188>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d869      	bhi.n	8007c78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ba4:	4b43      	ldr	r3, [pc, #268]	; (8007cb4 <pvPortMalloc+0x18c>)
 8007ba6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ba8:	4b42      	ldr	r3, [pc, #264]	; (8007cb4 <pvPortMalloc+0x18c>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bae:	e004      	b.n	8007bba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d903      	bls.n	8007bcc <pvPortMalloc+0xa4>
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1f1      	bne.n	8007bb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bcc:	4b36      	ldr	r3, [pc, #216]	; (8007ca8 <pvPortMalloc+0x180>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d050      	beq.n	8007c78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2208      	movs	r2, #8
 8007bdc:	4413      	add	r3, r2
 8007bde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	1ad2      	subs	r2, r2, r3
 8007bf0:	2308      	movs	r3, #8
 8007bf2:	005b      	lsls	r3, r3, #1
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d91f      	bls.n	8007c38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	f003 0307 	and.w	r3, r3, #7
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <pvPortMalloc+0xf8>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	613b      	str	r3, [r7, #16]
}
 8007c1c:	bf00      	nop
 8007c1e:	e7fe      	b.n	8007c1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	1ad2      	subs	r2, r2, r3
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c32:	69b8      	ldr	r0, [r7, #24]
 8007c34:	f000 f908 	bl	8007e48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c38:	4b1d      	ldr	r3, [pc, #116]	; (8007cb0 <pvPortMalloc+0x188>)
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	4a1b      	ldr	r2, [pc, #108]	; (8007cb0 <pvPortMalloc+0x188>)
 8007c44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c46:	4b1a      	ldr	r3, [pc, #104]	; (8007cb0 <pvPortMalloc+0x188>)
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	4b1b      	ldr	r3, [pc, #108]	; (8007cb8 <pvPortMalloc+0x190>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d203      	bcs.n	8007c5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c52:	4b17      	ldr	r3, [pc, #92]	; (8007cb0 <pvPortMalloc+0x188>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a18      	ldr	r2, [pc, #96]	; (8007cb8 <pvPortMalloc+0x190>)
 8007c58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	4b13      	ldr	r3, [pc, #76]	; (8007cac <pvPortMalloc+0x184>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	431a      	orrs	r2, r3
 8007c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c6e:	4b13      	ldr	r3, [pc, #76]	; (8007cbc <pvPortMalloc+0x194>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3301      	adds	r3, #1
 8007c74:	4a11      	ldr	r2, [pc, #68]	; (8007cbc <pvPortMalloc+0x194>)
 8007c76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c78:	f7fe fcd8 	bl	800662c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	f003 0307 	and.w	r3, r3, #7
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <pvPortMalloc+0x174>
	__asm volatile
 8007c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	60fb      	str	r3, [r7, #12]
}
 8007c98:	bf00      	nop
 8007c9a:	e7fe      	b.n	8007c9a <pvPortMalloc+0x172>
	return pvReturn;
 8007c9c:	69fb      	ldr	r3, [r7, #28]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3728      	adds	r7, #40	; 0x28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	2000c09c 	.word	0x2000c09c
 8007cac:	2000c0b0 	.word	0x2000c0b0
 8007cb0:	2000c0a0 	.word	0x2000c0a0
 8007cb4:	2000c094 	.word	0x2000c094
 8007cb8:	2000c0a4 	.word	0x2000c0a4
 8007cbc:	2000c0a8 	.word	0x2000c0a8

08007cc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d04d      	beq.n	8007d6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007cd2:	2308      	movs	r3, #8
 8007cd4:	425b      	negs	r3, r3
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	4413      	add	r3, r2
 8007cda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	4b24      	ldr	r3, [pc, #144]	; (8007d78 <vPortFree+0xb8>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4013      	ands	r3, r2
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10a      	bne.n	8007d04 <vPortFree+0x44>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	60fb      	str	r3, [r7, #12]
}
 8007d00:	bf00      	nop
 8007d02:	e7fe      	b.n	8007d02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00a      	beq.n	8007d22 <vPortFree+0x62>
	__asm volatile
 8007d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d10:	f383 8811 	msr	BASEPRI, r3
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	60bb      	str	r3, [r7, #8]
}
 8007d1e:	bf00      	nop
 8007d20:	e7fe      	b.n	8007d20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	4b14      	ldr	r3, [pc, #80]	; (8007d78 <vPortFree+0xb8>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d01e      	beq.n	8007d6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d11a      	bne.n	8007d6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	4b0e      	ldr	r3, [pc, #56]	; (8007d78 <vPortFree+0xb8>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	43db      	mvns	r3, r3
 8007d42:	401a      	ands	r2, r3
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d48:	f7fe fc62 	bl	8006610 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	4b0a      	ldr	r3, [pc, #40]	; (8007d7c <vPortFree+0xbc>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4413      	add	r3, r2
 8007d56:	4a09      	ldr	r2, [pc, #36]	; (8007d7c <vPortFree+0xbc>)
 8007d58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d5a:	6938      	ldr	r0, [r7, #16]
 8007d5c:	f000 f874 	bl	8007e48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d60:	4b07      	ldr	r3, [pc, #28]	; (8007d80 <vPortFree+0xc0>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	3301      	adds	r3, #1
 8007d66:	4a06      	ldr	r2, [pc, #24]	; (8007d80 <vPortFree+0xc0>)
 8007d68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d6a:	f7fe fc5f 	bl	800662c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d6e:	bf00      	nop
 8007d70:	3718      	adds	r7, #24
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	2000c0b0 	.word	0x2000c0b0
 8007d7c:	2000c0a0 	.word	0x2000c0a0
 8007d80:	2000c0ac 	.word	0x2000c0ac

08007d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d90:	4b27      	ldr	r3, [pc, #156]	; (8007e30 <prvHeapInit+0xac>)
 8007d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00c      	beq.n	8007db8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3307      	adds	r3, #7
 8007da2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f023 0307 	bic.w	r3, r3, #7
 8007daa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	4a1f      	ldr	r2, [pc, #124]	; (8007e30 <prvHeapInit+0xac>)
 8007db4:	4413      	add	r3, r2
 8007db6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dbc:	4a1d      	ldr	r2, [pc, #116]	; (8007e34 <prvHeapInit+0xb0>)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007dc2:	4b1c      	ldr	r3, [pc, #112]	; (8007e34 <prvHeapInit+0xb0>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	4413      	add	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007dd0:	2208      	movs	r2, #8
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	1a9b      	subs	r3, r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 0307 	bic.w	r3, r3, #7
 8007dde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4a15      	ldr	r2, [pc, #84]	; (8007e38 <prvHeapInit+0xb4>)
 8007de4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007de6:	4b14      	ldr	r3, [pc, #80]	; (8007e38 <prvHeapInit+0xb4>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2200      	movs	r2, #0
 8007dec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dee:	4b12      	ldr	r3, [pc, #72]	; (8007e38 <prvHeapInit+0xb4>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	1ad2      	subs	r2, r2, r3
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e04:	4b0c      	ldr	r3, [pc, #48]	; (8007e38 <prvHeapInit+0xb4>)
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	4a0a      	ldr	r2, [pc, #40]	; (8007e3c <prvHeapInit+0xb8>)
 8007e12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	4a09      	ldr	r2, [pc, #36]	; (8007e40 <prvHeapInit+0xbc>)
 8007e1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e1c:	4b09      	ldr	r3, [pc, #36]	; (8007e44 <prvHeapInit+0xc0>)
 8007e1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e22:	601a      	str	r2, [r3, #0]
}
 8007e24:	bf00      	nop
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	20008494 	.word	0x20008494
 8007e34:	2000c094 	.word	0x2000c094
 8007e38:	2000c09c 	.word	0x2000c09c
 8007e3c:	2000c0a4 	.word	0x2000c0a4
 8007e40:	2000c0a0 	.word	0x2000c0a0
 8007e44:	2000c0b0 	.word	0x2000c0b0

08007e48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e50:	4b28      	ldr	r3, [pc, #160]	; (8007ef4 <prvInsertBlockIntoFreeList+0xac>)
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	e002      	b.n	8007e5c <prvInsertBlockIntoFreeList+0x14>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d8f7      	bhi.n	8007e56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	4413      	add	r3, r2
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d108      	bne.n	8007e8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	441a      	add	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	441a      	add	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d118      	bne.n	8007ed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	4b15      	ldr	r3, [pc, #84]	; (8007ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d00d      	beq.n	8007ec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	441a      	add	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	e008      	b.n	8007ed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ec6:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	e003      	b.n	8007ed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d002      	beq.n	8007ee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ee6:	bf00      	nop
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	2000c094 	.word	0x2000c094
 8007ef8:	2000c09c 	.word	0x2000c09c

08007efc <rcl_get_zero_initialized_publisher>:
 8007efc:	4b01      	ldr	r3, [pc, #4]	; (8007f04 <rcl_get_zero_initialized_publisher+0x8>)
 8007efe:	6818      	ldr	r0, [r3, #0]
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	08012404 	.word	0x08012404

08007f08 <rcl_publisher_init>:
 8007f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f0c:	b088      	sub	sp, #32
 8007f0e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007f10:	2d00      	cmp	r5, #0
 8007f12:	d069      	beq.n	8007fe8 <rcl_publisher_init+0xe0>
 8007f14:	f105 0950 	add.w	r9, r5, #80	; 0x50
 8007f18:	4604      	mov	r4, r0
 8007f1a:	4648      	mov	r0, r9
 8007f1c:	460e      	mov	r6, r1
 8007f1e:	4690      	mov	r8, r2
 8007f20:	461f      	mov	r7, r3
 8007f22:	f000 f9d5 	bl	80082d0 <rcutils_allocator_is_valid>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d05e      	beq.n	8007fe8 <rcl_publisher_init+0xe0>
 8007f2a:	2c00      	cmp	r4, #0
 8007f2c:	d05c      	beq.n	8007fe8 <rcl_publisher_init+0xe0>
 8007f2e:	f8d4 a000 	ldr.w	sl, [r4]
 8007f32:	f1ba 0f00 	cmp.w	sl, #0
 8007f36:	d004      	beq.n	8007f42 <rcl_publisher_init+0x3a>
 8007f38:	2764      	movs	r7, #100	; 0x64
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	b008      	add	sp, #32
 8007f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f42:	4630      	mov	r0, r6
 8007f44:	f004 ffb8 	bl	800ceb8 <rcl_node_is_valid>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d052      	beq.n	8007ff2 <rcl_publisher_init+0xea>
 8007f4c:	f1b8 0f00 	cmp.w	r8, #0
 8007f50:	d04a      	beq.n	8007fe8 <rcl_publisher_init+0xe0>
 8007f52:	2f00      	cmp	r7, #0
 8007f54:	d048      	beq.n	8007fe8 <rcl_publisher_init+0xe0>
 8007f56:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8007f5a:	aa07      	add	r2, sp, #28
 8007f5c:	9205      	str	r2, [sp, #20]
 8007f5e:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8007f62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f66:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007f6a:	f8cd a01c 	str.w	sl, [sp, #28]
 8007f6e:	4639      	mov	r1, r7
 8007f70:	e899 000c 	ldmia.w	r9, {r2, r3}
 8007f74:	4630      	mov	r0, r6
 8007f76:	f004 fff3 	bl	800cf60 <rcl_node_resolve_name>
 8007f7a:	4607      	mov	r7, r0
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d14f      	bne.n	8008020 <rcl_publisher_init+0x118>
 8007f80:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007f82:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8007f84:	20c8      	movs	r0, #200	; 0xc8
 8007f86:	4798      	blx	r3
 8007f88:	6020      	str	r0, [r4, #0]
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d04e      	beq.n	800802c <rcl_publisher_init+0x124>
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f004 ffb4 	bl	800cefc <rcl_node_get_rmw_handle>
 8007f94:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	9a07      	ldr	r2, [sp, #28]
 8007f9c:	6827      	ldr	r7, [r4, #0]
 8007f9e:	462b      	mov	r3, r5
 8007fa0:	4641      	mov	r1, r8
 8007fa2:	f000 fa53 	bl	800844c <rmw_create_publisher>
 8007fa6:	6823      	ldr	r3, [r4, #0]
 8007fa8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8007fac:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8007fb0:	b370      	cbz	r0, 8008010 <rcl_publisher_init+0x108>
 8007fb2:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8007fb6:	f000 fb27 	bl	8008608 <rmw_publisher_get_actual_qos>
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	4607      	mov	r7, r0
 8007fbe:	b9d0      	cbnz	r0, 8007ff6 <rcl_publisher_init+0xee>
 8007fc0:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 8007fc4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8007fc8:	4629      	mov	r1, r5
 8007fca:	2270      	movs	r2, #112	; 0x70
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f009 faa6 	bl	801151e <memcpy>
 8007fd2:	6832      	ldr	r2, [r6, #0]
 8007fd4:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8007fd8:	9807      	ldr	r0, [sp, #28]
 8007fda:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8007fdc:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8007fde:	4798      	blx	r3
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	b008      	add	sp, #32
 8007fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe8:	270b      	movs	r7, #11
 8007fea:	4638      	mov	r0, r7
 8007fec:	b008      	add	sp, #32
 8007fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff2:	27c8      	movs	r7, #200	; 0xc8
 8007ff4:	e7a1      	b.n	8007f3a <rcl_publisher_init+0x32>
 8007ff6:	b18b      	cbz	r3, 800801c <rcl_publisher_init+0x114>
 8007ff8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007ffc:	b142      	cbz	r2, 8008010 <rcl_publisher_init+0x108>
 8007ffe:	4630      	mov	r0, r6
 8008000:	f004 ff7c 	bl	800cefc <rcl_node_get_rmw_handle>
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800800a:	f000 fb0d 	bl	8008628 <rmw_destroy_publisher>
 800800e:	6823      	ldr	r3, [r4, #0]
 8008010:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8008012:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8008014:	4618      	mov	r0, r3
 8008016:	4790      	blx	r2
 8008018:	2300      	movs	r3, #0
 800801a:	6023      	str	r3, [r4, #0]
 800801c:	2701      	movs	r7, #1
 800801e:	e7db      	b.n	8007fd8 <rcl_publisher_init+0xd0>
 8008020:	2867      	cmp	r0, #103	; 0x67
 8008022:	d0d9      	beq.n	8007fd8 <rcl_publisher_init+0xd0>
 8008024:	2869      	cmp	r0, #105	; 0x69
 8008026:	d003      	beq.n	8008030 <rcl_publisher_init+0x128>
 8008028:	280a      	cmp	r0, #10
 800802a:	d1f7      	bne.n	800801c <rcl_publisher_init+0x114>
 800802c:	270a      	movs	r7, #10
 800802e:	e7d3      	b.n	8007fd8 <rcl_publisher_init+0xd0>
 8008030:	2767      	movs	r7, #103	; 0x67
 8008032:	e7d1      	b.n	8007fd8 <rcl_publisher_init+0xd0>

08008034 <rcl_publisher_get_default_options>:
 8008034:	b570      	push	{r4, r5, r6, lr}
 8008036:	4d14      	ldr	r5, [pc, #80]	; (8008088 <rcl_publisher_get_default_options+0x54>)
 8008038:	4914      	ldr	r1, [pc, #80]	; (800808c <rcl_publisher_get_default_options+0x58>)
 800803a:	b088      	sub	sp, #32
 800803c:	4604      	mov	r4, r0
 800803e:	2250      	movs	r2, #80	; 0x50
 8008040:	4628      	mov	r0, r5
 8008042:	f009 fa6c 	bl	801151e <memcpy>
 8008046:	a802      	add	r0, sp, #8
 8008048:	f000 f934 	bl	80082b4 <rcutils_get_default_allocator>
 800804c:	f10d 0c08 	add.w	ip, sp, #8
 8008050:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008054:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8008058:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800805c:	466e      	mov	r6, sp
 800805e:	f8dc 3000 	ldr.w	r3, [ip]
 8008062:	f8ce 3000 	str.w	r3, [lr]
 8008066:	4630      	mov	r0, r6
 8008068:	f000 f972 	bl	8008350 <rmw_get_default_publisher_options>
 800806c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008070:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8008074:	e883 0003 	stmia.w	r3, {r0, r1}
 8008078:	2270      	movs	r2, #112	; 0x70
 800807a:	4629      	mov	r1, r5
 800807c:	4620      	mov	r0, r4
 800807e:	f009 fa4e 	bl	801151e <memcpy>
 8008082:	4620      	mov	r0, r4
 8008084:	b008      	add	sp, #32
 8008086:	bd70      	pop	{r4, r5, r6, pc}
 8008088:	2000c0b8 	.word	0x2000c0b8
 800808c:	08012408 	.word	0x08012408

08008090 <rcl_publish>:
 8008090:	b1f8      	cbz	r0, 80080d2 <rcl_publish+0x42>
 8008092:	6803      	ldr	r3, [r0, #0]
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	4604      	mov	r4, r0
 8008098:	b1b3      	cbz	r3, 80080c8 <rcl_publish+0x38>
 800809a:	4616      	mov	r6, r2
 800809c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80080a0:	b192      	cbz	r2, 80080c8 <rcl_publish+0x38>
 80080a2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80080a6:	460d      	mov	r5, r1
 80080a8:	f004 fb2c 	bl	800c704 <rcl_context_is_valid>
 80080ac:	b160      	cbz	r0, 80080c8 <rcl_publish+0x38>
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80080b4:	b140      	cbz	r0, 80080c8 <rcl_publish+0x38>
 80080b6:	b155      	cbz	r5, 80080ce <rcl_publish+0x3e>
 80080b8:	4632      	mov	r2, r6
 80080ba:	4629      	mov	r1, r5
 80080bc:	f000 f966 	bl	800838c <rmw_publish>
 80080c0:	3800      	subs	r0, #0
 80080c2:	bf18      	it	ne
 80080c4:	2001      	movne	r0, #1
 80080c6:	bd70      	pop	{r4, r5, r6, pc}
 80080c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80080cc:	bd70      	pop	{r4, r5, r6, pc}
 80080ce:	200b      	movs	r0, #11
 80080d0:	bd70      	pop	{r4, r5, r6, pc}
 80080d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80080d6:	4770      	bx	lr

080080d8 <rclc_support_init>:
 80080d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080dc:	b086      	sub	sp, #24
 80080de:	b3b8      	cbz	r0, 8008150 <rclc_support_init+0x78>
 80080e0:	461c      	mov	r4, r3
 80080e2:	b3ab      	cbz	r3, 8008150 <rclc_support_init+0x78>
 80080e4:	460f      	mov	r7, r1
 80080e6:	4690      	mov	r8, r2
 80080e8:	4606      	mov	r6, r0
 80080ea:	f004 fc75 	bl	800c9d8 <rcl_get_zero_initialized_init_options>
 80080ee:	f104 030c 	add.w	r3, r4, #12
 80080f2:	9005      	str	r0, [sp, #20]
 80080f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80080f8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80080fc:	a805      	add	r0, sp, #20
 80080fe:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8008102:	f004 fc6b 	bl	800c9dc <rcl_init_options_init>
 8008106:	4605      	mov	r5, r0
 8008108:	b9e0      	cbnz	r0, 8008144 <rclc_support_init+0x6c>
 800810a:	ad02      	add	r5, sp, #8
 800810c:	4628      	mov	r0, r5
 800810e:	f004 faef 	bl	800c6f0 <rcl_get_zero_initialized_context>
 8008112:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008116:	4633      	mov	r3, r6
 8008118:	e886 0003 	stmia.w	r6, {r0, r1}
 800811c:	aa05      	add	r2, sp, #20
 800811e:	4641      	mov	r1, r8
 8008120:	4638      	mov	r0, r7
 8008122:	f004 fb55 	bl	800c7d0 <rcl_init>
 8008126:	4605      	mov	r5, r0
 8008128:	b9b8      	cbnz	r0, 800815a <rclc_support_init+0x82>
 800812a:	60b4      	str	r4, [r6, #8]
 800812c:	4622      	mov	r2, r4
 800812e:	f106 010c 	add.w	r1, r6, #12
 8008132:	2003      	movs	r0, #3
 8008134:	f005 f8d0 	bl	800d2d8 <rcl_clock_init>
 8008138:	4605      	mov	r5, r0
 800813a:	b970      	cbnz	r0, 800815a <rclc_support_init+0x82>
 800813c:	a805      	add	r0, sp, #20
 800813e:	f004 fcb3 	bl	800caa8 <rcl_init_options_fini>
 8008142:	b108      	cbz	r0, 8008148 <rclc_support_init+0x70>
 8008144:	f000 f8e8 	bl	8008318 <rcutils_reset_error>
 8008148:	4628      	mov	r0, r5
 800814a:	b006      	add	sp, #24
 800814c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008150:	250b      	movs	r5, #11
 8008152:	4628      	mov	r0, r5
 8008154:	b006      	add	sp, #24
 8008156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800815a:	f000 f8dd 	bl	8008318 <rcutils_reset_error>
 800815e:	a805      	add	r0, sp, #20
 8008160:	f004 fca2 	bl	800caa8 <rcl_init_options_fini>
 8008164:	2800      	cmp	r0, #0
 8008166:	d0ef      	beq.n	8008148 <rclc_support_init+0x70>
 8008168:	e7ec      	b.n	8008144 <rclc_support_init+0x6c>
 800816a:	bf00      	nop

0800816c <rclc_node_init_default>:
 800816c:	b3b8      	cbz	r0, 80081de <rclc_node_init_default+0x72>
 800816e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008172:	460d      	mov	r5, r1
 8008174:	b0a1      	sub	sp, #132	; 0x84
 8008176:	b329      	cbz	r1, 80081c4 <rclc_node_init_default+0x58>
 8008178:	4616      	mov	r6, r2
 800817a:	b31a      	cbz	r2, 80081c4 <rclc_node_init_default+0x58>
 800817c:	461f      	mov	r7, r3
 800817e:	b30b      	cbz	r3, 80081c4 <rclc_node_init_default+0x58>
 8008180:	f10d 0810 	add.w	r8, sp, #16
 8008184:	4604      	mov	r4, r0
 8008186:	4640      	mov	r0, r8
 8008188:	f004 fd46 	bl	800cc18 <rcl_get_zero_initialized_node>
 800818c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8008190:	f10d 0918 	add.w	r9, sp, #24
 8008194:	e884 0003 	stmia.w	r4, {r0, r1}
 8008198:	4648      	mov	r0, r9
 800819a:	f004 feb5 	bl	800cf08 <rcl_node_get_default_options>
 800819e:	4640      	mov	r0, r8
 80081a0:	f004 fd3a 	bl	800cc18 <rcl_get_zero_initialized_node>
 80081a4:	f8cd 9000 	str.w	r9, [sp]
 80081a8:	e898 0003 	ldmia.w	r8, {r0, r1}
 80081ac:	463b      	mov	r3, r7
 80081ae:	e884 0003 	stmia.w	r4, {r0, r1}
 80081b2:	4632      	mov	r2, r6
 80081b4:	4629      	mov	r1, r5
 80081b6:	4620      	mov	r0, r4
 80081b8:	f004 fd38 	bl	800cc2c <rcl_node_init>
 80081bc:	b930      	cbnz	r0, 80081cc <rclc_node_init_default+0x60>
 80081be:	b021      	add	sp, #132	; 0x84
 80081c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081c4:	200b      	movs	r0, #11
 80081c6:	b021      	add	sp, #132	; 0x84
 80081c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081cc:	9003      	str	r0, [sp, #12]
 80081ce:	f000 f8a3 	bl	8008318 <rcutils_reset_error>
 80081d2:	f000 f8a1 	bl	8008318 <rcutils_reset_error>
 80081d6:	9803      	ldr	r0, [sp, #12]
 80081d8:	b021      	add	sp, #132	; 0x84
 80081da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081de:	200b      	movs	r0, #11
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop

080081e4 <rclc_publisher_init_default>:
 80081e4:	b368      	cbz	r0, 8008242 <rclc_publisher_init_default+0x5e>
 80081e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ea:	460d      	mov	r5, r1
 80081ec:	b0a0      	sub	sp, #128	; 0x80
 80081ee:	b321      	cbz	r1, 800823a <rclc_publisher_init_default+0x56>
 80081f0:	4616      	mov	r6, r2
 80081f2:	b312      	cbz	r2, 800823a <rclc_publisher_init_default+0x56>
 80081f4:	461f      	mov	r7, r3
 80081f6:	b303      	cbz	r3, 800823a <rclc_publisher_init_default+0x56>
 80081f8:	4604      	mov	r4, r0
 80081fa:	f7ff fe7f 	bl	8007efc <rcl_get_zero_initialized_publisher>
 80081fe:	f10d 0810 	add.w	r8, sp, #16
 8008202:	6020      	str	r0, [r4, #0]
 8008204:	4640      	mov	r0, r8
 8008206:	f7ff ff15 	bl	8008034 <rcl_publisher_get_default_options>
 800820a:	490f      	ldr	r1, [pc, #60]	; (8008248 <rclc_publisher_init_default+0x64>)
 800820c:	2250      	movs	r2, #80	; 0x50
 800820e:	4640      	mov	r0, r8
 8008210:	f009 f985 	bl	801151e <memcpy>
 8008214:	f8cd 8000 	str.w	r8, [sp]
 8008218:	463b      	mov	r3, r7
 800821a:	4632      	mov	r2, r6
 800821c:	4629      	mov	r1, r5
 800821e:	4620      	mov	r0, r4
 8008220:	f7ff fe72 	bl	8007f08 <rcl_publisher_init>
 8008224:	b910      	cbnz	r0, 800822c <rclc_publisher_init_default+0x48>
 8008226:	b020      	add	sp, #128	; 0x80
 8008228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800822c:	9003      	str	r0, [sp, #12]
 800822e:	f000 f873 	bl	8008318 <rcutils_reset_error>
 8008232:	9803      	ldr	r0, [sp, #12]
 8008234:	b020      	add	sp, #128	; 0x80
 8008236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800823a:	200b      	movs	r0, #11
 800823c:	b020      	add	sp, #128	; 0x80
 800823e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008242:	200b      	movs	r0, #11
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	08012458 	.word	0x08012458

0800824c <__default_zero_allocate>:
 800824c:	f008 bc82 	b.w	8010b54 <calloc>

08008250 <__default_reallocate>:
 8008250:	f008 be0e 	b.w	8010e70 <realloc>

08008254 <__default_deallocate>:
 8008254:	f008 bcec 	b.w	8010c30 <free>

08008258 <__default_allocate>:
 8008258:	f008 bce2 	b.w	8010c20 <malloc>

0800825c <rcutils_get_zero_initialized_allocator>:
 800825c:	b510      	push	{r4, lr}
 800825e:	4c05      	ldr	r4, [pc, #20]	; (8008274 <rcutils_get_zero_initialized_allocator+0x18>)
 8008260:	4686      	mov	lr, r0
 8008262:	4684      	mov	ip, r0
 8008264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008266:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	f8cc 3000 	str.w	r3, [ip]
 8008270:	4670      	mov	r0, lr
 8008272:	bd10      	pop	{r4, pc}
 8008274:	080124a8 	.word	0x080124a8

08008278 <rcutils_set_default_allocator>:
 8008278:	b1a8      	cbz	r0, 80082a6 <rcutils_set_default_allocator+0x2e>
 800827a:	6802      	ldr	r2, [r0, #0]
 800827c:	b1a2      	cbz	r2, 80082a8 <rcutils_set_default_allocator+0x30>
 800827e:	6841      	ldr	r1, [r0, #4]
 8008280:	b1a1      	cbz	r1, 80082ac <rcutils_set_default_allocator+0x34>
 8008282:	b410      	push	{r4}
 8008284:	68c4      	ldr	r4, [r0, #12]
 8008286:	b164      	cbz	r4, 80082a2 <rcutils_set_default_allocator+0x2a>
 8008288:	6880      	ldr	r0, [r0, #8]
 800828a:	b138      	cbz	r0, 800829c <rcutils_set_default_allocator+0x24>
 800828c:	4b08      	ldr	r3, [pc, #32]	; (80082b0 <rcutils_set_default_allocator+0x38>)
 800828e:	601a      	str	r2, [r3, #0]
 8008290:	2200      	movs	r2, #0
 8008292:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8008296:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800829a:	2001      	movs	r0, #1
 800829c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	4620      	mov	r0, r4
 80082a4:	e7fa      	b.n	800829c <rcutils_set_default_allocator+0x24>
 80082a6:	4770      	bx	lr
 80082a8:	4610      	mov	r0, r2
 80082aa:	4770      	bx	lr
 80082ac:	4608      	mov	r0, r1
 80082ae:	4770      	bx	lr
 80082b0:	20000014 	.word	0x20000014

080082b4 <rcutils_get_default_allocator>:
 80082b4:	b510      	push	{r4, lr}
 80082b6:	4c05      	ldr	r4, [pc, #20]	; (80082cc <rcutils_get_default_allocator+0x18>)
 80082b8:	4686      	mov	lr, r0
 80082ba:	4684      	mov	ip, r0
 80082bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	f8cc 3000 	str.w	r3, [ip]
 80082c8:	4670      	mov	r0, lr
 80082ca:	bd10      	pop	{r4, pc}
 80082cc:	20000014 	.word	0x20000014

080082d0 <rcutils_allocator_is_valid>:
 80082d0:	b158      	cbz	r0, 80082ea <rcutils_allocator_is_valid+0x1a>
 80082d2:	6803      	ldr	r3, [r0, #0]
 80082d4:	b143      	cbz	r3, 80082e8 <rcutils_allocator_is_valid+0x18>
 80082d6:	6843      	ldr	r3, [r0, #4]
 80082d8:	b133      	cbz	r3, 80082e8 <rcutils_allocator_is_valid+0x18>
 80082da:	68c3      	ldr	r3, [r0, #12]
 80082dc:	b123      	cbz	r3, 80082e8 <rcutils_allocator_is_valid+0x18>
 80082de:	6880      	ldr	r0, [r0, #8]
 80082e0:	3800      	subs	r0, #0
 80082e2:	bf18      	it	ne
 80082e4:	2001      	movne	r0, #1
 80082e6:	4770      	bx	lr
 80082e8:	4618      	mov	r0, r3
 80082ea:	4770      	bx	lr

080082ec <rcutils_get_error_string>:
 80082ec:	4b06      	ldr	r3, [pc, #24]	; (8008308 <rcutils_get_error_string+0x1c>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	b13b      	cbz	r3, 8008302 <rcutils_get_error_string+0x16>
 80082f2:	4b06      	ldr	r3, [pc, #24]	; (800830c <rcutils_get_error_string+0x20>)
 80082f4:	781a      	ldrb	r2, [r3, #0]
 80082f6:	b90a      	cbnz	r2, 80082fc <rcutils_get_error_string+0x10>
 80082f8:	2201      	movs	r2, #1
 80082fa:	701a      	strb	r2, [r3, #0]
 80082fc:	4b04      	ldr	r3, [pc, #16]	; (8008310 <rcutils_get_error_string+0x24>)
 80082fe:	7818      	ldrb	r0, [r3, #0]
 8008300:	4770      	bx	lr
 8008302:	4b04      	ldr	r3, [pc, #16]	; (8008314 <rcutils_get_error_string+0x28>)
 8008304:	7818      	ldrb	r0, [r3, #0]
 8008306:	4770      	bx	lr
 8008308:	2000c128 	.word	0x2000c128
 800830c:	2000c141 	.word	0x2000c141
 8008310:	2000c140 	.word	0x2000c140
 8008314:	080124bc 	.word	0x080124bc

08008318 <rcutils_reset_error>:
 8008318:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8008338 <rcutils_reset_error+0x20>
 800831c:	4a08      	ldr	r2, [pc, #32]	; (8008340 <rcutils_reset_error+0x28>)
 800831e:	4809      	ldr	r0, [pc, #36]	; (8008344 <rcutils_reset_error+0x2c>)
 8008320:	4909      	ldr	r1, [pc, #36]	; (8008348 <rcutils_reset_error+0x30>)
 8008322:	2300      	movs	r3, #0
 8008324:	8013      	strh	r3, [r2, #0]
 8008326:	ed82 7b02 	vstr	d7, [r2, #8]
 800832a:	4a08      	ldr	r2, [pc, #32]	; (800834c <rcutils_reset_error+0x34>)
 800832c:	7003      	strb	r3, [r0, #0]
 800832e:	700b      	strb	r3, [r1, #0]
 8008330:	7013      	strb	r3, [r2, #0]
 8008332:	4770      	bx	lr
 8008334:	f3af 8000 	nop.w
	...
 8008340:	2000c130 	.word	0x2000c130
 8008344:	2000c141 	.word	0x2000c141
 8008348:	2000c140 	.word	0x2000c140
 800834c:	2000c128 	.word	0x2000c128

08008350 <rmw_get_default_publisher_options>:
 8008350:	2200      	movs	r2, #0
 8008352:	6002      	str	r2, [r0, #0]
 8008354:	7102      	strb	r2, [r0, #4]
 8008356:	4770      	bx	lr

08008358 <rmw_uros_set_custom_transport>:
 8008358:	b470      	push	{r4, r5, r6}
 800835a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800835e:	b162      	cbz	r2, 800837a <rmw_uros_set_custom_transport+0x22>
 8008360:	b15b      	cbz	r3, 800837a <rmw_uros_set_custom_transport+0x22>
 8008362:	b155      	cbz	r5, 800837a <rmw_uros_set_custom_transport+0x22>
 8008364:	b14e      	cbz	r6, 800837a <rmw_uros_set_custom_transport+0x22>
 8008366:	4c06      	ldr	r4, [pc, #24]	; (8008380 <rmw_uros_set_custom_transport+0x28>)
 8008368:	7020      	strb	r0, [r4, #0]
 800836a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800836e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008372:	6166      	str	r6, [r4, #20]
 8008374:	2000      	movs	r0, #0
 8008376:	bc70      	pop	{r4, r5, r6}
 8008378:	4770      	bx	lr
 800837a:	200b      	movs	r0, #11
 800837c:	bc70      	pop	{r4, r5, r6}
 800837e:	4770      	bx	lr
 8008380:	2000c144 	.word	0x2000c144

08008384 <flush_session>:
 8008384:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8008386:	f002 bb3d 	b.w	800aa04 <uxr_run_session_until_confirm_delivery>
 800838a:	bf00      	nop

0800838c <rmw_publish>:
 800838c:	2800      	cmp	r0, #0
 800838e:	d053      	beq.n	8008438 <rmw_publish+0xac>
 8008390:	b570      	push	{r4, r5, r6, lr}
 8008392:	460d      	mov	r5, r1
 8008394:	b08e      	sub	sp, #56	; 0x38
 8008396:	2900      	cmp	r1, #0
 8008398:	d04b      	beq.n	8008432 <rmw_publish+0xa6>
 800839a:	4604      	mov	r4, r0
 800839c:	6800      	ldr	r0, [r0, #0]
 800839e:	f000 fc47 	bl	8008c30 <is_uxrce_rmw_identifier_valid>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d045      	beq.n	8008432 <rmw_publish+0xa6>
 80083a6:	6866      	ldr	r6, [r4, #4]
 80083a8:	2e00      	cmp	r6, #0
 80083aa:	d042      	beq.n	8008432 <rmw_publish+0xa6>
 80083ac:	69b4      	ldr	r4, [r6, #24]
 80083ae:	4628      	mov	r0, r5
 80083b0:	6923      	ldr	r3, [r4, #16]
 80083b2:	4798      	blx	r3
 80083b4:	69f3      	ldr	r3, [r6, #28]
 80083b6:	9005      	str	r0, [sp, #20]
 80083b8:	b113      	cbz	r3, 80083c0 <rmw_publish+0x34>
 80083ba:	a805      	add	r0, sp, #20
 80083bc:	4798      	blx	r3
 80083be:	9805      	ldr	r0, [sp, #20]
 80083c0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	9000      	str	r0, [sp, #0]
 80083c8:	6972      	ldr	r2, [r6, #20]
 80083ca:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 80083cc:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80083d0:	ab06      	add	r3, sp, #24
 80083d2:	f003 f903 	bl	800b5dc <uxr_prepare_output_stream>
 80083d6:	b1d8      	cbz	r0, 8008410 <rmw_publish+0x84>
 80083d8:	68a3      	ldr	r3, [r4, #8]
 80083da:	a906      	add	r1, sp, #24
 80083dc:	4628      	mov	r0, r5
 80083de:	4798      	blx	r3
 80083e0:	6a33      	ldr	r3, [r6, #32]
 80083e2:	4604      	mov	r4, r0
 80083e4:	b10b      	cbz	r3, 80083ea <rmw_publish+0x5e>
 80083e6:	a806      	add	r0, sp, #24
 80083e8:	4798      	blx	r3
 80083ea:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80083f4:	d022      	beq.n	800843c <rmw_publish+0xb0>
 80083f6:	6918      	ldr	r0, [r3, #16]
 80083f8:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 80083fa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80083fe:	f002 fb01 	bl	800aa04 <uxr_run_session_until_confirm_delivery>
 8008402:	4020      	ands	r0, r4
 8008404:	b2c4      	uxtb	r4, r0
 8008406:	f084 0001 	eor.w	r0, r4, #1
 800840a:	b2c0      	uxtb	r0, r0
 800840c:	b00e      	add	sp, #56	; 0x38
 800840e:	bd70      	pop	{r4, r5, r6, pc}
 8008410:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8008414:	6918      	ldr	r0, [r3, #16]
 8008416:	9b05      	ldr	r3, [sp, #20]
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	4b0b      	ldr	r3, [pc, #44]	; (8008448 <rmw_publish+0xbc>)
 800841c:	9301      	str	r3, [sp, #4]
 800841e:	9602      	str	r6, [sp, #8]
 8008420:	6972      	ldr	r2, [r6, #20]
 8008422:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8008424:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008428:	ab06      	add	r3, sp, #24
 800842a:	f003 f907 	bl	800b63c <uxr_prepare_output_stream_fragmented>
 800842e:	2800      	cmp	r0, #0
 8008430:	d1d2      	bne.n	80083d8 <rmw_publish+0x4c>
 8008432:	2001      	movs	r0, #1
 8008434:	b00e      	add	sp, #56	; 0x38
 8008436:	bd70      	pop	{r4, r5, r6, pc}
 8008438:	2001      	movs	r0, #1
 800843a:	4770      	bx	lr
 800843c:	6918      	ldr	r0, [r3, #16]
 800843e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008442:	f001 ff59 	bl	800a2f8 <uxr_flash_output_streams>
 8008446:	e7de      	b.n	8008406 <rmw_publish+0x7a>
 8008448:	08008385 	.word	0x08008385

0800844c <rmw_create_publisher>:
 800844c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008450:	b087      	sub	sp, #28
 8008452:	2800      	cmp	r0, #0
 8008454:	f000 80cc 	beq.w	80085f0 <rmw_create_publisher+0x1a4>
 8008458:	460e      	mov	r6, r1
 800845a:	2900      	cmp	r1, #0
 800845c:	f000 80c8 	beq.w	80085f0 <rmw_create_publisher+0x1a4>
 8008460:	4604      	mov	r4, r0
 8008462:	6800      	ldr	r0, [r0, #0]
 8008464:	4615      	mov	r5, r2
 8008466:	4698      	mov	r8, r3
 8008468:	f000 fbe2 	bl	8008c30 <is_uxrce_rmw_identifier_valid>
 800846c:	2800      	cmp	r0, #0
 800846e:	f000 80bf 	beq.w	80085f0 <rmw_create_publisher+0x1a4>
 8008472:	2d00      	cmp	r5, #0
 8008474:	f000 80bc 	beq.w	80085f0 <rmw_create_publisher+0x1a4>
 8008478:	782b      	ldrb	r3, [r5, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 80b8 	beq.w	80085f0 <rmw_create_publisher+0x1a4>
 8008480:	f1b8 0f00 	cmp.w	r8, #0
 8008484:	f000 80b4 	beq.w	80085f0 <rmw_create_publisher+0x1a4>
 8008488:	485c      	ldr	r0, [pc, #368]	; (80085fc <rmw_create_publisher+0x1b0>)
 800848a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800848e:	f005 fc9b 	bl	800ddc8 <get_memory>
 8008492:	2800      	cmp	r0, #0
 8008494:	f000 80ac 	beq.w	80085f0 <rmw_create_publisher+0x1a4>
 8008498:	6884      	ldr	r4, [r0, #8]
 800849a:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800849e:	f005 fcb7 	bl	800de10 <rmw_get_implementation_identifier>
 80084a2:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 80084a6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 80084aa:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 80084ae:	4628      	mov	r0, r5
 80084b0:	f7f7 fea0 	bl	80001f4 <strlen>
 80084b4:	3001      	adds	r0, #1
 80084b6:	283c      	cmp	r0, #60	; 0x3c
 80084b8:	f104 0784 	add.w	r7, r4, #132	; 0x84
 80084bc:	f200 8091 	bhi.w	80085e2 <rmw_create_publisher+0x196>
 80084c0:	4a4f      	ldr	r2, [pc, #316]	; (8008600 <rmw_create_publisher+0x1b4>)
 80084c2:	462b      	mov	r3, r5
 80084c4:	213c      	movs	r1, #60	; 0x3c
 80084c6:	4650      	mov	r0, sl
 80084c8:	f008 fe5a 	bl	8011180 <sniprintf>
 80084cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084d0:	67e3      	str	r3, [r4, #124]	; 0x7c
 80084d2:	4641      	mov	r1, r8
 80084d4:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 80084d8:	2250      	movs	r2, #80	; 0x50
 80084da:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80084de:	f009 f81e 	bl	801151e <memcpy>
 80084e2:	f898 3008 	ldrb.w	r3, [r8, #8]
 80084e6:	4947      	ldr	r1, [pc, #284]	; (8008604 <rmw_create_publisher+0x1b8>)
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084ee:	bf0c      	ite	eq
 80084f0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 80084f4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 80084f8:	67a3      	str	r3, [r4, #120]	; 0x78
 80084fa:	2300      	movs	r3, #0
 80084fc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8008500:	4630      	mov	r0, r6
 8008502:	f000 fba3 	bl	8008c4c <get_message_typesupport_handle>
 8008506:	2800      	cmp	r0, #0
 8008508:	d06b      	beq.n	80085e2 <rmw_create_publisher+0x196>
 800850a:	6842      	ldr	r2, [r0, #4]
 800850c:	61a2      	str	r2, [r4, #24]
 800850e:	2a00      	cmp	r2, #0
 8008510:	d067      	beq.n	80085e2 <rmw_create_publisher+0x196>
 8008512:	4629      	mov	r1, r5
 8008514:	4643      	mov	r3, r8
 8008516:	4648      	mov	r0, r9
 8008518:	f005 fee0 	bl	800e2dc <create_topic>
 800851c:	6260      	str	r0, [r4, #36]	; 0x24
 800851e:	2800      	cmp	r0, #0
 8008520:	d063      	beq.n	80085ea <rmw_create_publisher+0x19e>
 8008522:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800852a:	2103      	movs	r1, #3
 800852c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 8008530:	1c42      	adds	r2, r0, #1
 8008532:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8008536:	f001 fd91 	bl	800a05c <uxr_object_id>
 800853a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800853e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008542:	6120      	str	r0, [r4, #16]
 8008544:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8008548:	6910      	ldr	r0, [r2, #16]
 800854a:	2506      	movs	r5, #6
 800854c:	9500      	str	r5, [sp, #0]
 800854e:	6819      	ldr	r1, [r3, #0]
 8008550:	6922      	ldr	r2, [r4, #16]
 8008552:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8008556:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800855a:	f001 fcd9 	bl	8009f10 <uxr_buffer_create_publisher_bin>
 800855e:	4602      	mov	r2, r0
 8008560:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8008564:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8008568:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800856c:	f000 fae0 	bl	8008b30 <run_xrce_session>
 8008570:	b3b8      	cbz	r0, 80085e2 <rmw_create_publisher+0x196>
 8008572:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800857a:	2105      	movs	r1, #5
 800857c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 8008580:	1c42      	adds	r2, r0, #1
 8008582:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8008586:	f001 fd69 	bl	800a05c <uxr_object_id>
 800858a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800858e:	6160      	str	r0, [r4, #20]
 8008590:	691e      	ldr	r6, [r3, #16]
 8008592:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008596:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800859a:	f10d 0a10 	add.w	sl, sp, #16
 800859e:	4641      	mov	r1, r8
 80085a0:	4650      	mov	r0, sl
 80085a2:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 80085a6:	f000 fadf 	bl	8008b68 <convert_qos_profile>
 80085aa:	9503      	str	r5, [sp, #12]
 80085ac:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80085b0:	9001      	str	r0, [sp, #4]
 80085b2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80085b6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 80085c0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80085c4:	f8d8 1000 	ldr.w	r1, [r8]
 80085c8:	4630      	mov	r0, r6
 80085ca:	f001 fcd1 	bl	8009f70 <uxr_buffer_create_datawriter_bin>
 80085ce:	4602      	mov	r2, r0
 80085d0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80085d4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80085d8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80085dc:	f000 faa8 	bl	8008b30 <run_xrce_session>
 80085e0:	b938      	cbnz	r0, 80085f2 <rmw_create_publisher+0x1a6>
 80085e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80085e4:	b108      	cbz	r0, 80085ea <rmw_create_publisher+0x19e>
 80085e6:	f000 fa47 	bl	8008a78 <rmw_uxrce_fini_topic_memory>
 80085ea:	4638      	mov	r0, r7
 80085ec:	f000 f9ec 	bl	80089c8 <rmw_uxrce_fini_publisher_memory>
 80085f0:	2700      	movs	r7, #0
 80085f2:	4638      	mov	r0, r7
 80085f4:	b007      	add	sp, #28
 80085f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fa:	bf00      	nop
 80085fc:	20010a3c 	.word	0x20010a3c
 8008600:	080124f4 	.word	0x080124f4
 8008604:	080124c0 	.word	0x080124c0

08008608 <rmw_publisher_get_actual_qos>:
 8008608:	b150      	cbz	r0, 8008620 <rmw_publisher_get_actual_qos+0x18>
 800860a:	b508      	push	{r3, lr}
 800860c:	460b      	mov	r3, r1
 800860e:	b149      	cbz	r1, 8008624 <rmw_publisher_get_actual_qos+0x1c>
 8008610:	6841      	ldr	r1, [r0, #4]
 8008612:	2250      	movs	r2, #80	; 0x50
 8008614:	3128      	adds	r1, #40	; 0x28
 8008616:	4618      	mov	r0, r3
 8008618:	f008 ff81 	bl	801151e <memcpy>
 800861c:	2000      	movs	r0, #0
 800861e:	bd08      	pop	{r3, pc}
 8008620:	200b      	movs	r0, #11
 8008622:	4770      	bx	lr
 8008624:	200b      	movs	r0, #11
 8008626:	bd08      	pop	{r3, pc}

08008628 <rmw_destroy_publisher>:
 8008628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862a:	b128      	cbz	r0, 8008638 <rmw_destroy_publisher+0x10>
 800862c:	4604      	mov	r4, r0
 800862e:	6800      	ldr	r0, [r0, #0]
 8008630:	460d      	mov	r5, r1
 8008632:	f000 fafd 	bl	8008c30 <is_uxrce_rmw_identifier_valid>
 8008636:	b910      	cbnz	r0, 800863e <rmw_destroy_publisher+0x16>
 8008638:	2401      	movs	r4, #1
 800863a:	4620      	mov	r0, r4
 800863c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800863e:	6863      	ldr	r3, [r4, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d0f9      	beq.n	8008638 <rmw_destroy_publisher+0x10>
 8008644:	2d00      	cmp	r5, #0
 8008646:	d0f7      	beq.n	8008638 <rmw_destroy_publisher+0x10>
 8008648:	6828      	ldr	r0, [r5, #0]
 800864a:	f000 faf1 	bl	8008c30 <is_uxrce_rmw_identifier_valid>
 800864e:	2800      	cmp	r0, #0
 8008650:	d0f2      	beq.n	8008638 <rmw_destroy_publisher+0x10>
 8008652:	686c      	ldr	r4, [r5, #4]
 8008654:	2c00      	cmp	r4, #0
 8008656:	d0ef      	beq.n	8008638 <rmw_destroy_publisher+0x10>
 8008658:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800865a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800865e:	f005 fe8d 	bl	800e37c <destroy_topic>
 8008662:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8008666:	6962      	ldr	r2, [r4, #20]
 8008668:	6918      	ldr	r0, [r3, #16]
 800866a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800866e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008672:	6819      	ldr	r1, [r3, #0]
 8008674:	f001 fb98 	bl	8009da8 <uxr_buffer_delete_entity>
 8008678:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800867c:	6922      	ldr	r2, [r4, #16]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8008684:	4604      	mov	r4, r0
 8008686:	6809      	ldr	r1, [r1, #0]
 8008688:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800868c:	f001 fb8c 	bl	8009da8 <uxr_buffer_delete_entity>
 8008690:	693e      	ldr	r6, [r7, #16]
 8008692:	4622      	mov	r2, r4
 8008694:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8008698:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800869c:	4604      	mov	r4, r0
 800869e:	4630      	mov	r0, r6
 80086a0:	f000 fa46 	bl	8008b30 <run_xrce_session>
 80086a4:	693e      	ldr	r6, [r7, #16]
 80086a6:	4622      	mov	r2, r4
 80086a8:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 80086ac:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 80086b0:	4604      	mov	r4, r0
 80086b2:	4630      	mov	r0, r6
 80086b4:	f000 fa3c 	bl	8008b30 <run_xrce_session>
 80086b8:	b12c      	cbz	r4, 80086c6 <rmw_destroy_publisher+0x9e>
 80086ba:	b120      	cbz	r0, 80086c6 <rmw_destroy_publisher+0x9e>
 80086bc:	2400      	movs	r4, #0
 80086be:	4628      	mov	r0, r5
 80086c0:	f000 f982 	bl	80089c8 <rmw_uxrce_fini_publisher_memory>
 80086c4:	e7b9      	b.n	800863a <rmw_destroy_publisher+0x12>
 80086c6:	2402      	movs	r4, #2
 80086c8:	e7f9      	b.n	80086be <rmw_destroy_publisher+0x96>
 80086ca:	bf00      	nop

080086cc <rmw_uxrce_init_service_memory>:
 80086cc:	b1e2      	cbz	r2, 8008708 <rmw_uxrce_init_service_memory+0x3c>
 80086ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d2:	7b05      	ldrb	r5, [r0, #12]
 80086d4:	4606      	mov	r6, r0
 80086d6:	b9ad      	cbnz	r5, 8008704 <rmw_uxrce_init_service_memory+0x38>
 80086d8:	23c8      	movs	r3, #200	; 0xc8
 80086da:	e9c0 5500 	strd	r5, r5, [r0]
 80086de:	6083      	str	r3, [r0, #8]
 80086e0:	f240 1301 	movw	r3, #257	; 0x101
 80086e4:	4617      	mov	r7, r2
 80086e6:	8183      	strh	r3, [r0, #12]
 80086e8:	460c      	mov	r4, r1
 80086ea:	46a8      	mov	r8, r5
 80086ec:	4621      	mov	r1, r4
 80086ee:	4630      	mov	r0, r6
 80086f0:	3501      	adds	r5, #1
 80086f2:	f005 fb79 	bl	800dde8 <put_memory>
 80086f6:	42af      	cmp	r7, r5
 80086f8:	60a4      	str	r4, [r4, #8]
 80086fa:	f884 800c 	strb.w	r8, [r4, #12]
 80086fe:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8008702:	d1f3      	bne.n	80086ec <rmw_uxrce_init_service_memory+0x20>
 8008704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop

0800870c <rmw_uxrce_init_client_memory>:
 800870c:	b1e2      	cbz	r2, 8008748 <rmw_uxrce_init_client_memory+0x3c>
 800870e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008712:	7b05      	ldrb	r5, [r0, #12]
 8008714:	4606      	mov	r6, r0
 8008716:	b9ad      	cbnz	r5, 8008744 <rmw_uxrce_init_client_memory+0x38>
 8008718:	23c8      	movs	r3, #200	; 0xc8
 800871a:	e9c0 5500 	strd	r5, r5, [r0]
 800871e:	6083      	str	r3, [r0, #8]
 8008720:	f240 1301 	movw	r3, #257	; 0x101
 8008724:	4617      	mov	r7, r2
 8008726:	8183      	strh	r3, [r0, #12]
 8008728:	460c      	mov	r4, r1
 800872a:	46a8      	mov	r8, r5
 800872c:	4621      	mov	r1, r4
 800872e:	4630      	mov	r0, r6
 8008730:	3501      	adds	r5, #1
 8008732:	f005 fb59 	bl	800dde8 <put_memory>
 8008736:	42af      	cmp	r7, r5
 8008738:	60a4      	str	r4, [r4, #8]
 800873a:	f884 800c 	strb.w	r8, [r4, #12]
 800873e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8008742:	d1f3      	bne.n	800872c <rmw_uxrce_init_client_memory+0x20>
 8008744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop

0800874c <rmw_uxrce_init_publisher_memory>:
 800874c:	b1e2      	cbz	r2, 8008788 <rmw_uxrce_init_publisher_memory+0x3c>
 800874e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008752:	7b05      	ldrb	r5, [r0, #12]
 8008754:	4606      	mov	r6, r0
 8008756:	b9ad      	cbnz	r5, 8008784 <rmw_uxrce_init_publisher_memory+0x38>
 8008758:	23d8      	movs	r3, #216	; 0xd8
 800875a:	e9c0 5500 	strd	r5, r5, [r0]
 800875e:	6083      	str	r3, [r0, #8]
 8008760:	f240 1301 	movw	r3, #257	; 0x101
 8008764:	4617      	mov	r7, r2
 8008766:	8183      	strh	r3, [r0, #12]
 8008768:	460c      	mov	r4, r1
 800876a:	46a8      	mov	r8, r5
 800876c:	4621      	mov	r1, r4
 800876e:	4630      	mov	r0, r6
 8008770:	3501      	adds	r5, #1
 8008772:	f005 fb39 	bl	800dde8 <put_memory>
 8008776:	42af      	cmp	r7, r5
 8008778:	60a4      	str	r4, [r4, #8]
 800877a:	f884 800c 	strb.w	r8, [r4, #12]
 800877e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8008782:	d1f3      	bne.n	800876c <rmw_uxrce_init_publisher_memory+0x20>
 8008784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop

0800878c <rmw_uxrce_init_subscription_memory>:
 800878c:	b1e2      	cbz	r2, 80087c8 <rmw_uxrce_init_subscription_memory+0x3c>
 800878e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008792:	7b05      	ldrb	r5, [r0, #12]
 8008794:	4606      	mov	r6, r0
 8008796:	b9ad      	cbnz	r5, 80087c4 <rmw_uxrce_init_subscription_memory+0x38>
 8008798:	23d8      	movs	r3, #216	; 0xd8
 800879a:	e9c0 5500 	strd	r5, r5, [r0]
 800879e:	6083      	str	r3, [r0, #8]
 80087a0:	f240 1301 	movw	r3, #257	; 0x101
 80087a4:	4617      	mov	r7, r2
 80087a6:	8183      	strh	r3, [r0, #12]
 80087a8:	460c      	mov	r4, r1
 80087aa:	46a8      	mov	r8, r5
 80087ac:	4621      	mov	r1, r4
 80087ae:	4630      	mov	r0, r6
 80087b0:	3501      	adds	r5, #1
 80087b2:	f005 fb19 	bl	800dde8 <put_memory>
 80087b6:	42af      	cmp	r7, r5
 80087b8:	60a4      	str	r4, [r4, #8]
 80087ba:	f884 800c 	strb.w	r8, [r4, #12]
 80087be:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 80087c2:	d1f3      	bne.n	80087ac <rmw_uxrce_init_subscription_memory+0x20>
 80087c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop

080087cc <rmw_uxrce_init_node_memory>:
 80087cc:	b1e2      	cbz	r2, 8008808 <rmw_uxrce_init_node_memory+0x3c>
 80087ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d2:	7b05      	ldrb	r5, [r0, #12]
 80087d4:	4606      	mov	r6, r0
 80087d6:	b9ad      	cbnz	r5, 8008804 <rmw_uxrce_init_node_memory+0x38>
 80087d8:	23a4      	movs	r3, #164	; 0xa4
 80087da:	e9c0 5500 	strd	r5, r5, [r0]
 80087de:	6083      	str	r3, [r0, #8]
 80087e0:	f240 1301 	movw	r3, #257	; 0x101
 80087e4:	4617      	mov	r7, r2
 80087e6:	8183      	strh	r3, [r0, #12]
 80087e8:	460c      	mov	r4, r1
 80087ea:	46a8      	mov	r8, r5
 80087ec:	4621      	mov	r1, r4
 80087ee:	4630      	mov	r0, r6
 80087f0:	3501      	adds	r5, #1
 80087f2:	f005 faf9 	bl	800dde8 <put_memory>
 80087f6:	42af      	cmp	r7, r5
 80087f8:	60a4      	str	r4, [r4, #8]
 80087fa:	f884 800c 	strb.w	r8, [r4, #12]
 80087fe:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8008802:	d1f3      	bne.n	80087ec <rmw_uxrce_init_node_memory+0x20>
 8008804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop

0800880c <rmw_uxrce_init_session_memory>:
 800880c:	b1ea      	cbz	r2, 800884a <rmw_uxrce_init_session_memory+0x3e>
 800880e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008812:	7b05      	ldrb	r5, [r0, #12]
 8008814:	4606      	mov	r6, r0
 8008816:	b9b5      	cbnz	r5, 8008846 <rmw_uxrce_init_session_memory+0x3a>
 8008818:	e9c0 5500 	strd	r5, r5, [r0]
 800881c:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8008820:	f240 1301 	movw	r3, #257	; 0x101
 8008824:	4617      	mov	r7, r2
 8008826:	f8c0 8008 	str.w	r8, [r0, #8]
 800882a:	460c      	mov	r4, r1
 800882c:	8183      	strh	r3, [r0, #12]
 800882e:	46a9      	mov	r9, r5
 8008830:	4621      	mov	r1, r4
 8008832:	4630      	mov	r0, r6
 8008834:	3501      	adds	r5, #1
 8008836:	f005 fad7 	bl	800dde8 <put_memory>
 800883a:	42af      	cmp	r7, r5
 800883c:	60a4      	str	r4, [r4, #8]
 800883e:	f884 900c 	strb.w	r9, [r4, #12]
 8008842:	4444      	add	r4, r8
 8008844:	d1f4      	bne.n	8008830 <rmw_uxrce_init_session_memory+0x24>
 8008846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800884a:	4770      	bx	lr

0800884c <rmw_uxrce_init_topic_memory>:
 800884c:	b1e2      	cbz	r2, 8008888 <rmw_uxrce_init_topic_memory+0x3c>
 800884e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008852:	7b05      	ldrb	r5, [r0, #12]
 8008854:	4606      	mov	r6, r0
 8008856:	b9ad      	cbnz	r5, 8008884 <rmw_uxrce_init_topic_memory+0x38>
 8008858:	231c      	movs	r3, #28
 800885a:	e9c0 5500 	strd	r5, r5, [r0]
 800885e:	6083      	str	r3, [r0, #8]
 8008860:	f240 1301 	movw	r3, #257	; 0x101
 8008864:	4617      	mov	r7, r2
 8008866:	8183      	strh	r3, [r0, #12]
 8008868:	460c      	mov	r4, r1
 800886a:	46a8      	mov	r8, r5
 800886c:	4621      	mov	r1, r4
 800886e:	4630      	mov	r0, r6
 8008870:	3501      	adds	r5, #1
 8008872:	f005 fab9 	bl	800dde8 <put_memory>
 8008876:	42af      	cmp	r7, r5
 8008878:	60a4      	str	r4, [r4, #8]
 800887a:	f884 800c 	strb.w	r8, [r4, #12]
 800887e:	f104 041c 	add.w	r4, r4, #28
 8008882:	d1f3      	bne.n	800886c <rmw_uxrce_init_topic_memory+0x20>
 8008884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop

0800888c <rmw_uxrce_init_static_input_buffer_memory>:
 800888c:	b1ea      	cbz	r2, 80088ca <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800888e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008892:	7b05      	ldrb	r5, [r0, #12]
 8008894:	4606      	mov	r6, r0
 8008896:	b9b5      	cbnz	r5, 80088c6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8008898:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800889c:	e9c0 5500 	strd	r5, r5, [r0]
 80088a0:	6083      	str	r3, [r0, #8]
 80088a2:	f240 1301 	movw	r3, #257	; 0x101
 80088a6:	4617      	mov	r7, r2
 80088a8:	8183      	strh	r3, [r0, #12]
 80088aa:	460c      	mov	r4, r1
 80088ac:	46a8      	mov	r8, r5
 80088ae:	4621      	mov	r1, r4
 80088b0:	4630      	mov	r0, r6
 80088b2:	3501      	adds	r5, #1
 80088b4:	f005 fa98 	bl	800dde8 <put_memory>
 80088b8:	42af      	cmp	r7, r5
 80088ba:	60a4      	str	r4, [r4, #8]
 80088bc:	f884 800c 	strb.w	r8, [r4, #12]
 80088c0:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 80088c4:	d1f3      	bne.n	80088ae <rmw_uxrce_init_static_input_buffer_memory+0x22>
 80088c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088ca:	4770      	bx	lr

080088cc <rmw_uxrce_init_init_options_impl_memory>:
 80088cc:	b1e2      	cbz	r2, 8008908 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 80088ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d2:	7b05      	ldrb	r5, [r0, #12]
 80088d4:	4606      	mov	r6, r0
 80088d6:	b9ad      	cbnz	r5, 8008904 <rmw_uxrce_init_init_options_impl_memory+0x38>
 80088d8:	232c      	movs	r3, #44	; 0x2c
 80088da:	e9c0 5500 	strd	r5, r5, [r0]
 80088de:	6083      	str	r3, [r0, #8]
 80088e0:	f240 1301 	movw	r3, #257	; 0x101
 80088e4:	4617      	mov	r7, r2
 80088e6:	8183      	strh	r3, [r0, #12]
 80088e8:	460c      	mov	r4, r1
 80088ea:	46a8      	mov	r8, r5
 80088ec:	4621      	mov	r1, r4
 80088ee:	4630      	mov	r0, r6
 80088f0:	3501      	adds	r5, #1
 80088f2:	f005 fa79 	bl	800dde8 <put_memory>
 80088f6:	42af      	cmp	r7, r5
 80088f8:	60a4      	str	r4, [r4, #8]
 80088fa:	f884 800c 	strb.w	r8, [r4, #12]
 80088fe:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8008902:	d1f3      	bne.n	80088ec <rmw_uxrce_init_init_options_impl_memory+0x20>
 8008904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop

0800890c <rmw_uxrce_init_wait_set_memory>:
 800890c:	b1e2      	cbz	r2, 8008948 <rmw_uxrce_init_wait_set_memory+0x3c>
 800890e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008912:	7b05      	ldrb	r5, [r0, #12]
 8008914:	4606      	mov	r6, r0
 8008916:	b9ad      	cbnz	r5, 8008944 <rmw_uxrce_init_wait_set_memory+0x38>
 8008918:	231c      	movs	r3, #28
 800891a:	e9c0 5500 	strd	r5, r5, [r0]
 800891e:	6083      	str	r3, [r0, #8]
 8008920:	f240 1301 	movw	r3, #257	; 0x101
 8008924:	4617      	mov	r7, r2
 8008926:	8183      	strh	r3, [r0, #12]
 8008928:	460c      	mov	r4, r1
 800892a:	46a8      	mov	r8, r5
 800892c:	4621      	mov	r1, r4
 800892e:	4630      	mov	r0, r6
 8008930:	3501      	adds	r5, #1
 8008932:	f005 fa59 	bl	800dde8 <put_memory>
 8008936:	42af      	cmp	r7, r5
 8008938:	60a4      	str	r4, [r4, #8]
 800893a:	f884 800c 	strb.w	r8, [r4, #12]
 800893e:	f104 041c 	add.w	r4, r4, #28
 8008942:	d1f3      	bne.n	800892c <rmw_uxrce_init_wait_set_memory+0x20>
 8008944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop

0800894c <rmw_uxrce_init_guard_condition_memory>:
 800894c:	b1e2      	cbz	r2, 8008988 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800894e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008952:	7b05      	ldrb	r5, [r0, #12]
 8008954:	4606      	mov	r6, r0
 8008956:	b9ad      	cbnz	r5, 8008984 <rmw_uxrce_init_guard_condition_memory+0x38>
 8008958:	2320      	movs	r3, #32
 800895a:	e9c0 5500 	strd	r5, r5, [r0]
 800895e:	6083      	str	r3, [r0, #8]
 8008960:	f240 1301 	movw	r3, #257	; 0x101
 8008964:	4617      	mov	r7, r2
 8008966:	8183      	strh	r3, [r0, #12]
 8008968:	460c      	mov	r4, r1
 800896a:	46a8      	mov	r8, r5
 800896c:	4621      	mov	r1, r4
 800896e:	4630      	mov	r0, r6
 8008970:	3501      	adds	r5, #1
 8008972:	f005 fa39 	bl	800dde8 <put_memory>
 8008976:	42af      	cmp	r7, r5
 8008978:	60a4      	str	r4, [r4, #8]
 800897a:	f884 800c 	strb.w	r8, [r4, #12]
 800897e:	f104 0420 	add.w	r4, r4, #32
 8008982:	d1f3      	bne.n	800896c <rmw_uxrce_init_guard_condition_memory+0x20>
 8008984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop

0800898c <rmw_uxrce_fini_session_memory>:
 800898c:	4601      	mov	r1, r0
 800898e:	4801      	ldr	r0, [pc, #4]	; (8008994 <rmw_uxrce_fini_session_memory+0x8>)
 8008990:	f005 ba2a 	b.w	800dde8 <put_memory>
 8008994:	20010a5c 	.word	0x20010a5c

08008998 <rmw_uxrce_fini_node_memory>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4604      	mov	r4, r0
 800899c:	6800      	ldr	r0, [r0, #0]
 800899e:	b128      	cbz	r0, 80089ac <rmw_uxrce_fini_node_memory+0x14>
 80089a0:	4b07      	ldr	r3, [pc, #28]	; (80089c0 <rmw_uxrce_fini_node_memory+0x28>)
 80089a2:	6819      	ldr	r1, [r3, #0]
 80089a4:	f7f7 fc1c 	bl	80001e0 <strcmp>
 80089a8:	b940      	cbnz	r0, 80089bc <rmw_uxrce_fini_node_memory+0x24>
 80089aa:	6020      	str	r0, [r4, #0]
 80089ac:	6861      	ldr	r1, [r4, #4]
 80089ae:	b129      	cbz	r1, 80089bc <rmw_uxrce_fini_node_memory+0x24>
 80089b0:	2500      	movs	r5, #0
 80089b2:	4804      	ldr	r0, [pc, #16]	; (80089c4 <rmw_uxrce_fini_node_memory+0x2c>)
 80089b4:	610d      	str	r5, [r1, #16]
 80089b6:	f005 fa17 	bl	800dde8 <put_memory>
 80089ba:	6065      	str	r5, [r4, #4]
 80089bc:	bd38      	pop	{r3, r4, r5, pc}
 80089be:	bf00      	nop
 80089c0:	08012adc 	.word	0x08012adc
 80089c4:	20010a2c 	.word	0x20010a2c

080089c8 <rmw_uxrce_fini_publisher_memory>:
 80089c8:	b510      	push	{r4, lr}
 80089ca:	4604      	mov	r4, r0
 80089cc:	6800      	ldr	r0, [r0, #0]
 80089ce:	b128      	cbz	r0, 80089dc <rmw_uxrce_fini_publisher_memory+0x14>
 80089d0:	4b06      	ldr	r3, [pc, #24]	; (80089ec <rmw_uxrce_fini_publisher_memory+0x24>)
 80089d2:	6819      	ldr	r1, [r3, #0]
 80089d4:	f7f7 fc04 	bl	80001e0 <strcmp>
 80089d8:	b938      	cbnz	r0, 80089ea <rmw_uxrce_fini_publisher_memory+0x22>
 80089da:	6020      	str	r0, [r4, #0]
 80089dc:	6861      	ldr	r1, [r4, #4]
 80089de:	b121      	cbz	r1, 80089ea <rmw_uxrce_fini_publisher_memory+0x22>
 80089e0:	4803      	ldr	r0, [pc, #12]	; (80089f0 <rmw_uxrce_fini_publisher_memory+0x28>)
 80089e2:	f005 fa01 	bl	800dde8 <put_memory>
 80089e6:	2300      	movs	r3, #0
 80089e8:	6063      	str	r3, [r4, #4]
 80089ea:	bd10      	pop	{r4, pc}
 80089ec:	08012adc 	.word	0x08012adc
 80089f0:	20010a3c 	.word	0x20010a3c

080089f4 <rmw_uxrce_fini_subscription_memory>:
 80089f4:	b510      	push	{r4, lr}
 80089f6:	4604      	mov	r4, r0
 80089f8:	6800      	ldr	r0, [r0, #0]
 80089fa:	b128      	cbz	r0, 8008a08 <rmw_uxrce_fini_subscription_memory+0x14>
 80089fc:	4b06      	ldr	r3, [pc, #24]	; (8008a18 <rmw_uxrce_fini_subscription_memory+0x24>)
 80089fe:	6819      	ldr	r1, [r3, #0]
 8008a00:	f7f7 fbee 	bl	80001e0 <strcmp>
 8008a04:	b938      	cbnz	r0, 8008a16 <rmw_uxrce_fini_subscription_memory+0x22>
 8008a06:	6020      	str	r0, [r4, #0]
 8008a08:	6861      	ldr	r1, [r4, #4]
 8008a0a:	b121      	cbz	r1, 8008a16 <rmw_uxrce_fini_subscription_memory+0x22>
 8008a0c:	4803      	ldr	r0, [pc, #12]	; (8008a1c <rmw_uxrce_fini_subscription_memory+0x28>)
 8008a0e:	f005 f9eb 	bl	800dde8 <put_memory>
 8008a12:	2300      	movs	r3, #0
 8008a14:	6063      	str	r3, [r4, #4]
 8008a16:	bd10      	pop	{r4, pc}
 8008a18:	08012adc 	.word	0x08012adc
 8008a1c:	20010a7c 	.word	0x20010a7c

08008a20 <rmw_uxrce_fini_service_memory>:
 8008a20:	b510      	push	{r4, lr}
 8008a22:	4604      	mov	r4, r0
 8008a24:	6800      	ldr	r0, [r0, #0]
 8008a26:	b128      	cbz	r0, 8008a34 <rmw_uxrce_fini_service_memory+0x14>
 8008a28:	4b06      	ldr	r3, [pc, #24]	; (8008a44 <rmw_uxrce_fini_service_memory+0x24>)
 8008a2a:	6819      	ldr	r1, [r3, #0]
 8008a2c:	f7f7 fbd8 	bl	80001e0 <strcmp>
 8008a30:	b938      	cbnz	r0, 8008a42 <rmw_uxrce_fini_service_memory+0x22>
 8008a32:	6020      	str	r0, [r4, #0]
 8008a34:	6861      	ldr	r1, [r4, #4]
 8008a36:	b121      	cbz	r1, 8008a42 <rmw_uxrce_fini_service_memory+0x22>
 8008a38:	4803      	ldr	r0, [pc, #12]	; (8008a48 <rmw_uxrce_fini_service_memory+0x28>)
 8008a3a:	f005 f9d5 	bl	800dde8 <put_memory>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	6063      	str	r3, [r4, #4]
 8008a42:	bd10      	pop	{r4, pc}
 8008a44:	08012adc 	.word	0x08012adc
 8008a48:	20010a4c 	.word	0x20010a4c

08008a4c <rmw_uxrce_fini_client_memory>:
 8008a4c:	b510      	push	{r4, lr}
 8008a4e:	4604      	mov	r4, r0
 8008a50:	6800      	ldr	r0, [r0, #0]
 8008a52:	b128      	cbz	r0, 8008a60 <rmw_uxrce_fini_client_memory+0x14>
 8008a54:	4b06      	ldr	r3, [pc, #24]	; (8008a70 <rmw_uxrce_fini_client_memory+0x24>)
 8008a56:	6819      	ldr	r1, [r3, #0]
 8008a58:	f7f7 fbc2 	bl	80001e0 <strcmp>
 8008a5c:	b938      	cbnz	r0, 8008a6e <rmw_uxrce_fini_client_memory+0x22>
 8008a5e:	6020      	str	r0, [r4, #0]
 8008a60:	6861      	ldr	r1, [r4, #4]
 8008a62:	b121      	cbz	r1, 8008a6e <rmw_uxrce_fini_client_memory+0x22>
 8008a64:	4803      	ldr	r0, [pc, #12]	; (8008a74 <rmw_uxrce_fini_client_memory+0x28>)
 8008a66:	f005 f9bf 	bl	800dde8 <put_memory>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	6063      	str	r3, [r4, #4]
 8008a6e:	bd10      	pop	{r4, pc}
 8008a70:	08012adc 	.word	0x08012adc
 8008a74:	2000c160 	.word	0x2000c160

08008a78 <rmw_uxrce_fini_topic_memory>:
 8008a78:	b510      	push	{r4, lr}
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	4803      	ldr	r0, [pc, #12]	; (8008a8c <rmw_uxrce_fini_topic_memory+0x14>)
 8008a80:	f005 f9b2 	bl	800dde8 <put_memory>
 8008a84:	2300      	movs	r3, #0
 8008a86:	61a3      	str	r3, [r4, #24]
 8008a88:	bd10      	pop	{r4, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20010a8c 	.word	0x20010a8c

08008a90 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8008a90:	b082      	sub	sp, #8
 8008a92:	b530      	push	{r4, r5, lr}
 8008a94:	4925      	ldr	r1, [pc, #148]	; (8008b2c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8008a96:	680d      	ldr	r5, [r1, #0]
 8008a98:	ac03      	add	r4, sp, #12
 8008a9a:	e884 000c 	stmia.w	r4, {r2, r3}
 8008a9e:	461c      	mov	r4, r3
 8008aa0:	2d00      	cmp	r5, #0
 8008aa2:	d041      	beq.n	8008b28 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8008aa4:	462b      	mov	r3, r5
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	689a      	ldr	r2, [r3, #8]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8008ab0:	4290      	cmp	r0, r2
 8008ab2:	bf08      	it	eq
 8008ab4:	3101      	addeq	r1, #1
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1f6      	bne.n	8008aa8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8008aba:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d029      	beq.n	8008b16 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8008ac2:	d907      	bls.n	8008ad4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	d005      	beq.n	8008ad4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8008ac8:	2100      	movs	r1, #0
 8008aca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ace:	4608      	mov	r0, r1
 8008ad0:	b002      	add	sp, #8
 8008ad2:	4770      	bx	lr
 8008ad4:	b314      	cbz	r4, 8008b1c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8008ad6:	428c      	cmp	r4, r1
 8008ad8:	d820      	bhi.n	8008b1c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8008ada:	2d00      	cmp	r5, #0
 8008adc:	d0f4      	beq.n	8008ac8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8008ade:	2100      	movs	r1, #0
 8008ae0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008ae4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8008ae8:	e002      	b.n	8008af0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8008aea:	686d      	ldr	r5, [r5, #4]
 8008aec:	2d00      	cmp	r5, #0
 8008aee:	d0ec      	beq.n	8008aca <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8008af0:	68ab      	ldr	r3, [r5, #8]
 8008af2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8008af6:	4290      	cmp	r0, r2
 8008af8:	d1f7      	bne.n	8008aea <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8008afa:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8008afe:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8008b02:	4562      	cmp	r2, ip
 8008b04:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8008b08:	eb73 0e04 	sbcs.w	lr, r3, r4
 8008b0c:	daed      	bge.n	8008aea <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8008b0e:	4694      	mov	ip, r2
 8008b10:	461c      	mov	r4, r3
 8008b12:	4629      	mov	r1, r5
 8008b14:	e7e9      	b.n	8008aea <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8008b16:	b10c      	cbz	r4, 8008b1c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8008b18:	428c      	cmp	r4, r1
 8008b1a:	d9d5      	bls.n	8008ac8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8008b1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b20:	4802      	ldr	r0, [pc, #8]	; (8008b2c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8008b22:	b002      	add	sp, #8
 8008b24:	f005 b950 	b.w	800ddc8 <get_memory>
 8008b28:	4629      	mov	r1, r5
 8008b2a:	e7c6      	b.n	8008aba <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8008b2c:	20010a6c 	.word	0x20010a6c

08008b30 <run_xrce_session>:
 8008b30:	b510      	push	{r4, lr}
 8008b32:	788c      	ldrb	r4, [r1, #2]
 8008b34:	b086      	sub	sp, #24
 8008b36:	2c01      	cmp	r4, #1
 8008b38:	f8ad 200e 	strh.w	r2, [sp, #14]
 8008b3c:	d00c      	beq.n	8008b58 <run_xrce_session+0x28>
 8008b3e:	4619      	mov	r1, r3
 8008b40:	2301      	movs	r3, #1
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	f10d 020e 	add.w	r2, sp, #14
 8008b48:	f10d 0317 	add.w	r3, sp, #23
 8008b4c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008b50:	f001 ff7e 	bl	800aa50 <uxr_run_session_until_all_status>
 8008b54:	b006      	add	sp, #24
 8008b56:	bd10      	pop	{r4, pc}
 8008b58:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008b5c:	f001 fbcc 	bl	800a2f8 <uxr_flash_output_streams>
 8008b60:	4620      	mov	r0, r4
 8008b62:	b006      	add	sp, #24
 8008b64:	bd10      	pop	{r4, pc}
 8008b66:	bf00      	nop

08008b68 <convert_qos_profile>:
 8008b68:	7a4a      	ldrb	r2, [r1, #9]
 8008b6a:	f891 c008 	ldrb.w	ip, [r1, #8]
 8008b6e:	2a02      	cmp	r2, #2
 8008b70:	bf18      	it	ne
 8008b72:	2200      	movne	r2, #0
 8008b74:	7002      	strb	r2, [r0, #0]
 8008b76:	780a      	ldrb	r2, [r1, #0]
 8008b78:	8889      	ldrh	r1, [r1, #4]
 8008b7a:	8081      	strh	r1, [r0, #4]
 8008b7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8008b80:	f1a2 0202 	sub.w	r2, r2, #2
 8008b84:	fabc fc8c 	clz	ip, ip
 8008b88:	fab2 f282 	clz	r2, r2
 8008b8c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8008b90:	0952      	lsrs	r2, r2, #5
 8008b92:	f880 c001 	strb.w	ip, [r0, #1]
 8008b96:	7082      	strb	r2, [r0, #2]
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop

08008b9c <generate_type_name>:
 8008b9c:	b530      	push	{r4, r5, lr}
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	700b      	strb	r3, [r1, #0]
 8008ba2:	6803      	ldr	r3, [r0, #0]
 8008ba4:	b087      	sub	sp, #28
 8008ba6:	4614      	mov	r4, r2
 8008ba8:	b1d3      	cbz	r3, 8008be0 <generate_type_name+0x44>
 8008baa:	4a0f      	ldr	r2, [pc, #60]	; (8008be8 <generate_type_name+0x4c>)
 8008bac:	4615      	mov	r5, r2
 8008bae:	9203      	str	r2, [sp, #12]
 8008bb0:	9500      	str	r5, [sp, #0]
 8008bb2:	6842      	ldr	r2, [r0, #4]
 8008bb4:	480d      	ldr	r0, [pc, #52]	; (8008bec <generate_type_name+0x50>)
 8008bb6:	9001      	str	r0, [sp, #4]
 8008bb8:	4608      	mov	r0, r1
 8008bba:	490d      	ldr	r1, [pc, #52]	; (8008bf0 <generate_type_name+0x54>)
 8008bbc:	9204      	str	r2, [sp, #16]
 8008bbe:	9105      	str	r1, [sp, #20]
 8008bc0:	9102      	str	r1, [sp, #8]
 8008bc2:	4a0c      	ldr	r2, [pc, #48]	; (8008bf4 <generate_type_name+0x58>)
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	f008 fadb 	bl	8011180 <sniprintf>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	db05      	blt.n	8008bda <generate_type_name+0x3e>
 8008bce:	4284      	cmp	r4, r0
 8008bd0:	bfd4      	ite	le
 8008bd2:	2000      	movle	r0, #0
 8008bd4:	2001      	movgt	r0, #1
 8008bd6:	b007      	add	sp, #28
 8008bd8:	bd30      	pop	{r4, r5, pc}
 8008bda:	2000      	movs	r0, #0
 8008bdc:	b007      	add	sp, #28
 8008bde:	bd30      	pop	{r4, r5, pc}
 8008be0:	4b05      	ldr	r3, [pc, #20]	; (8008bf8 <generate_type_name+0x5c>)
 8008be2:	4a01      	ldr	r2, [pc, #4]	; (8008be8 <generate_type_name+0x4c>)
 8008be4:	461d      	mov	r5, r3
 8008be6:	e7e2      	b.n	8008bae <generate_type_name+0x12>
 8008be8:	080124e4 	.word	0x080124e4
 8008bec:	080124fc 	.word	0x080124fc
 8008bf0:	080124f8 	.word	0x080124f8
 8008bf4:	080124e8 	.word	0x080124e8
 8008bf8:	080128b4 	.word	0x080128b4

08008bfc <generate_topic_name>:
 8008bfc:	b510      	push	{r4, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	4614      	mov	r4, r2
 8008c02:	9000      	str	r0, [sp, #0]
 8008c04:	4b08      	ldr	r3, [pc, #32]	; (8008c28 <generate_topic_name+0x2c>)
 8008c06:	4a09      	ldr	r2, [pc, #36]	; (8008c2c <generate_topic_name+0x30>)
 8008c08:	4608      	mov	r0, r1
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	f008 fab8 	bl	8011180 <sniprintf>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	db05      	blt.n	8008c20 <generate_topic_name+0x24>
 8008c14:	4284      	cmp	r4, r0
 8008c16:	bfd4      	ite	le
 8008c18:	2000      	movle	r0, #0
 8008c1a:	2001      	movgt	r0, #1
 8008c1c:	b002      	add	sp, #8
 8008c1e:	bd10      	pop	{r4, pc}
 8008c20:	2000      	movs	r0, #0
 8008c22:	b002      	add	sp, #8
 8008c24:	bd10      	pop	{r4, pc}
 8008c26:	bf00      	nop
 8008c28:	08012508 	.word	0x08012508
 8008c2c:	08012500 	.word	0x08012500

08008c30 <is_uxrce_rmw_identifier_valid>:
 8008c30:	b510      	push	{r4, lr}
 8008c32:	4604      	mov	r4, r0
 8008c34:	b140      	cbz	r0, 8008c48 <is_uxrce_rmw_identifier_valid+0x18>
 8008c36:	f005 f8eb 	bl	800de10 <rmw_get_implementation_identifier>
 8008c3a:	4601      	mov	r1, r0
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f7f7 facf 	bl	80001e0 <strcmp>
 8008c42:	fab0 f080 	clz	r0, r0
 8008c46:	0940      	lsrs	r0, r0, #5
 8008c48:	bd10      	pop	{r4, pc}
 8008c4a:	bf00      	nop

08008c4c <get_message_typesupport_handle>:
 8008c4c:	6883      	ldr	r3, [r0, #8]
 8008c4e:	4718      	bx	r3

08008c50 <get_message_typesupport_handle_function>:
 8008c50:	b510      	push	{r4, lr}
 8008c52:	4604      	mov	r4, r0
 8008c54:	6800      	ldr	r0, [r0, #0]
 8008c56:	f7f7 fac3 	bl	80001e0 <strcmp>
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	bf0c      	ite	eq
 8008c5e:	4620      	moveq	r0, r4
 8008c60:	2000      	movne	r0, #0
 8008c62:	bd10      	pop	{r4, pc}

08008c64 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8008c64:	4b04      	ldr	r3, [pc, #16]	; (8008c78 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	b10a      	cbz	r2, 8008c6e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8008c6a:	4803      	ldr	r0, [pc, #12]	; (8008c78 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008c6c:	4770      	bx	lr
 8008c6e:	4a03      	ldr	r2, [pc, #12]	; (8008c7c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8008c70:	4801      	ldr	r0, [pc, #4]	; (8008c78 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008c72:	6812      	ldr	r2, [r2, #0]
 8008c74:	601a      	str	r2, [r3, #0]
 8008c76:	4770      	bx	lr
 8008c78:	20000030 	.word	0x20000030
 8008c7c:	200000ac 	.word	0x200000ac

08008c80 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8008c80:	4a02      	ldr	r2, [pc, #8]	; (8008c8c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8008c82:	4b03      	ldr	r3, [pc, #12]	; (8008c90 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8008c84:	6812      	ldr	r2, [r2, #0]
 8008c86:	601a      	str	r2, [r3, #0]
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	200000ac 	.word	0x200000ac
 8008c90:	20000030 	.word	0x20000030

08008c94 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8008c94:	f005 bda0 	b.w	800e7d8 <std_msgs__msg__Int32__init>

08008c98 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 8008c98:	f005 bda2 	b.w	800e7e0 <std_msgs__msg__Int32__fini>

08008c9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8008c9c:	4b04      	ldr	r3, [pc, #16]	; (8008cb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	b10a      	cbz	r2, 8008ca6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8008ca2:	4803      	ldr	r0, [pc, #12]	; (8008cb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008ca4:	4770      	bx	lr
 8008ca6:	4a03      	ldr	r2, [pc, #12]	; (8008cb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8008ca8:	4801      	ldr	r0, [pc, #4]	; (8008cb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008caa:	6812      	ldr	r2, [r2, #0]
 8008cac:	601a      	str	r2, [r3, #0]
 8008cae:	4770      	bx	lr
 8008cb0:	20000078 	.word	0x20000078
 8008cb4:	200000b0 	.word	0x200000b0

08008cb8 <_Int32__max_serialized_size>:
 8008cb8:	b508      	push	{r3, lr}
 8008cba:	2104      	movs	r1, #4
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	f001 f807 	bl	8009cd0 <ucdr_alignment>
 8008cc2:	3004      	adds	r0, #4
 8008cc4:	bd08      	pop	{r3, pc}
 8008cc6:	bf00      	nop

08008cc8 <_Int32__cdr_deserialize>:
 8008cc8:	b109      	cbz	r1, 8008cce <_Int32__cdr_deserialize+0x6>
 8008cca:	f000 bf19 	b.w	8009b00 <ucdr_deserialize_int32_t>
 8008cce:	4608      	mov	r0, r1
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop

08008cd4 <get_serialized_size_std_msgs__msg__Int32>:
 8008cd4:	b138      	cbz	r0, 8008ce6 <get_serialized_size_std_msgs__msg__Int32+0x12>
 8008cd6:	b508      	push	{r3, lr}
 8008cd8:	460b      	mov	r3, r1
 8008cda:	4618      	mov	r0, r3
 8008cdc:	2104      	movs	r1, #4
 8008cde:	f000 fff7 	bl	8009cd0 <ucdr_alignment>
 8008ce2:	3004      	adds	r0, #4
 8008ce4:	bd08      	pop	{r3, pc}
 8008ce6:	4770      	bx	lr

08008ce8 <_Int32__cdr_serialize>:
 8008ce8:	460a      	mov	r2, r1
 8008cea:	b118      	cbz	r0, 8008cf4 <_Int32__cdr_serialize+0xc>
 8008cec:	6801      	ldr	r1, [r0, #0]
 8008cee:	4610      	mov	r0, r2
 8008cf0:	f000 be6e 	b.w	80099d0 <ucdr_serialize_int32_t>
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop

08008cf8 <_Int32__get_serialized_size>:
 8008cf8:	b130      	cbz	r0, 8008d08 <_Int32__get_serialized_size+0x10>
 8008cfa:	b508      	push	{r3, lr}
 8008cfc:	2104      	movs	r1, #4
 8008cfe:	2000      	movs	r0, #0
 8008d00:	f000 ffe6 	bl	8009cd0 <ucdr_alignment>
 8008d04:	3004      	adds	r0, #4
 8008d06:	bd08      	pop	{r3, pc}
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop

08008d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8008d0c:	4800      	ldr	r0, [pc, #0]	; (8008d10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 8008d0e:	4770      	bx	lr
 8008d10:	20000084 	.word	0x20000084

08008d14 <ucdr_serialize_bool>:
 8008d14:	b538      	push	{r3, r4, r5, lr}
 8008d16:	460d      	mov	r5, r1
 8008d18:	2101      	movs	r1, #1
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	f000 ff8c 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8008d20:	b148      	cbz	r0, 8008d36 <ucdr_serialize_bool+0x22>
 8008d22:	68a3      	ldr	r3, [r4, #8]
 8008d24:	701d      	strb	r5, [r3, #0]
 8008d26:	68a2      	ldr	r2, [r4, #8]
 8008d28:	6923      	ldr	r3, [r4, #16]
 8008d2a:	2101      	movs	r1, #1
 8008d2c:	440a      	add	r2, r1
 8008d2e:	440b      	add	r3, r1
 8008d30:	60a2      	str	r2, [r4, #8]
 8008d32:	6123      	str	r3, [r4, #16]
 8008d34:	7561      	strb	r1, [r4, #21]
 8008d36:	7da0      	ldrb	r0, [r4, #22]
 8008d38:	f080 0001 	eor.w	r0, r0, #1
 8008d3c:	bd38      	pop	{r3, r4, r5, pc}
 8008d3e:	bf00      	nop

08008d40 <ucdr_deserialize_bool>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	460d      	mov	r5, r1
 8008d44:	2101      	movs	r1, #1
 8008d46:	4604      	mov	r4, r0
 8008d48:	f000 ff76 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8008d4c:	b160      	cbz	r0, 8008d68 <ucdr_deserialize_bool+0x28>
 8008d4e:	68a2      	ldr	r2, [r4, #8]
 8008d50:	6923      	ldr	r3, [r4, #16]
 8008d52:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008d56:	3900      	subs	r1, #0
 8008d58:	bf18      	it	ne
 8008d5a:	2101      	movne	r1, #1
 8008d5c:	7029      	strb	r1, [r5, #0]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	2101      	movs	r1, #1
 8008d62:	60a2      	str	r2, [r4, #8]
 8008d64:	6123      	str	r3, [r4, #16]
 8008d66:	7561      	strb	r1, [r4, #21]
 8008d68:	7da0      	ldrb	r0, [r4, #22]
 8008d6a:	f080 0001 	eor.w	r0, r0, #1
 8008d6e:	bd38      	pop	{r3, r4, r5, pc}

08008d70 <ucdr_serialize_uint8_t>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	460d      	mov	r5, r1
 8008d74:	2101      	movs	r1, #1
 8008d76:	4604      	mov	r4, r0
 8008d78:	f000 ff5e 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8008d7c:	b148      	cbz	r0, 8008d92 <ucdr_serialize_uint8_t+0x22>
 8008d7e:	68a3      	ldr	r3, [r4, #8]
 8008d80:	701d      	strb	r5, [r3, #0]
 8008d82:	68a2      	ldr	r2, [r4, #8]
 8008d84:	6923      	ldr	r3, [r4, #16]
 8008d86:	2101      	movs	r1, #1
 8008d88:	440a      	add	r2, r1
 8008d8a:	440b      	add	r3, r1
 8008d8c:	60a2      	str	r2, [r4, #8]
 8008d8e:	6123      	str	r3, [r4, #16]
 8008d90:	7561      	strb	r1, [r4, #21]
 8008d92:	7da0      	ldrb	r0, [r4, #22]
 8008d94:	f080 0001 	eor.w	r0, r0, #1
 8008d98:	bd38      	pop	{r3, r4, r5, pc}
 8008d9a:	bf00      	nop

08008d9c <ucdr_deserialize_uint8_t>:
 8008d9c:	b538      	push	{r3, r4, r5, lr}
 8008d9e:	460d      	mov	r5, r1
 8008da0:	2101      	movs	r1, #1
 8008da2:	4604      	mov	r4, r0
 8008da4:	f000 ff48 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8008da8:	b150      	cbz	r0, 8008dc0 <ucdr_deserialize_uint8_t+0x24>
 8008daa:	68a3      	ldr	r3, [r4, #8]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	702b      	strb	r3, [r5, #0]
 8008db0:	68a2      	ldr	r2, [r4, #8]
 8008db2:	6923      	ldr	r3, [r4, #16]
 8008db4:	2101      	movs	r1, #1
 8008db6:	440a      	add	r2, r1
 8008db8:	440b      	add	r3, r1
 8008dba:	60a2      	str	r2, [r4, #8]
 8008dbc:	6123      	str	r3, [r4, #16]
 8008dbe:	7561      	strb	r1, [r4, #21]
 8008dc0:	7da0      	ldrb	r0, [r4, #22]
 8008dc2:	f080 0001 	eor.w	r0, r0, #1
 8008dc6:	bd38      	pop	{r3, r4, r5, pc}

08008dc8 <ucdr_serialize_uint16_t>:
 8008dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	460b      	mov	r3, r1
 8008dd0:	2102      	movs	r1, #2
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008dd8:	f000 ff82 	bl	8009ce0 <ucdr_buffer_alignment>
 8008ddc:	4601      	mov	r1, r0
 8008dde:	4620      	mov	r0, r4
 8008de0:	7d67      	ldrb	r7, [r4, #21]
 8008de2:	f000 ffc1 	bl	8009d68 <ucdr_advance_buffer>
 8008de6:	2102      	movs	r1, #2
 8008de8:	4620      	mov	r0, r4
 8008dea:	f000 ff19 	bl	8009c20 <ucdr_check_buffer_available_for>
 8008dee:	bb78      	cbnz	r0, 8008e50 <ucdr_serialize_uint16_t+0x88>
 8008df0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008df4:	42ab      	cmp	r3, r5
 8008df6:	d926      	bls.n	8008e46 <ucdr_serialize_uint16_t+0x7e>
 8008df8:	1b5e      	subs	r6, r3, r5
 8008dfa:	60a3      	str	r3, [r4, #8]
 8008dfc:	6923      	ldr	r3, [r4, #16]
 8008dfe:	f1c6 0802 	rsb	r8, r6, #2
 8008e02:	4433      	add	r3, r6
 8008e04:	6123      	str	r3, [r4, #16]
 8008e06:	4641      	mov	r1, r8
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f000 ff15 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d03b      	beq.n	8008e8a <ucdr_serialize_uint16_t+0xc2>
 8008e12:	7d23      	ldrb	r3, [r4, #20]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d04a      	beq.n	8008eae <ucdr_serialize_uint16_t+0xe6>
 8008e18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008e1c:	702b      	strb	r3, [r5, #0]
 8008e1e:	2e00      	cmp	r6, #0
 8008e20:	d040      	beq.n	8008ea4 <ucdr_serialize_uint16_t+0xdc>
 8008e22:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008e26:	706b      	strb	r3, [r5, #1]
 8008e28:	6923      	ldr	r3, [r4, #16]
 8008e2a:	68a2      	ldr	r2, [r4, #8]
 8008e2c:	7da0      	ldrb	r0, [r4, #22]
 8008e2e:	3302      	adds	r3, #2
 8008e30:	1b9e      	subs	r6, r3, r6
 8008e32:	4442      	add	r2, r8
 8008e34:	2302      	movs	r3, #2
 8008e36:	f080 0001 	eor.w	r0, r0, #1
 8008e3a:	60a2      	str	r2, [r4, #8]
 8008e3c:	6126      	str	r6, [r4, #16]
 8008e3e:	7563      	strb	r3, [r4, #21]
 8008e40:	b002      	add	sp, #8
 8008e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e46:	2102      	movs	r1, #2
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f000 fef5 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8008e4e:	b190      	cbz	r0, 8008e76 <ucdr_serialize_uint16_t+0xae>
 8008e50:	7d23      	ldrb	r3, [r4, #20]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	68a3      	ldr	r3, [r4, #8]
 8008e56:	d014      	beq.n	8008e82 <ucdr_serialize_uint16_t+0xba>
 8008e58:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008e5c:	701a      	strb	r2, [r3, #0]
 8008e5e:	68a3      	ldr	r3, [r4, #8]
 8008e60:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008e64:	705a      	strb	r2, [r3, #1]
 8008e66:	68a2      	ldr	r2, [r4, #8]
 8008e68:	6923      	ldr	r3, [r4, #16]
 8008e6a:	3202      	adds	r2, #2
 8008e6c:	3302      	adds	r3, #2
 8008e6e:	2102      	movs	r1, #2
 8008e70:	60a2      	str	r2, [r4, #8]
 8008e72:	6123      	str	r3, [r4, #16]
 8008e74:	7561      	strb	r1, [r4, #21]
 8008e76:	7da0      	ldrb	r0, [r4, #22]
 8008e78:	f080 0001 	eor.w	r0, r0, #1
 8008e7c:	b002      	add	sp, #8
 8008e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e82:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008e86:	801a      	strh	r2, [r3, #0]
 8008e88:	e7ed      	b.n	8008e66 <ucdr_serialize_uint16_t+0x9e>
 8008e8a:	68a2      	ldr	r2, [r4, #8]
 8008e8c:	6923      	ldr	r3, [r4, #16]
 8008e8e:	7da0      	ldrb	r0, [r4, #22]
 8008e90:	7567      	strb	r7, [r4, #21]
 8008e92:	1b92      	subs	r2, r2, r6
 8008e94:	1b9b      	subs	r3, r3, r6
 8008e96:	f080 0001 	eor.w	r0, r0, #1
 8008e9a:	60a2      	str	r2, [r4, #8]
 8008e9c:	6123      	str	r3, [r4, #16]
 8008e9e:	b002      	add	sp, #8
 8008ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ea4:	68a3      	ldr	r3, [r4, #8]
 8008ea6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008eaa:	701a      	strb	r2, [r3, #0]
 8008eac:	e7bc      	b.n	8008e28 <ucdr_serialize_uint16_t+0x60>
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f10d 0506 	add.w	r5, sp, #6
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	4632      	mov	r2, r6
 8008eb8:	f008 fb31 	bl	801151e <memcpy>
 8008ebc:	68a0      	ldr	r0, [r4, #8]
 8008ebe:	4642      	mov	r2, r8
 8008ec0:	19a9      	adds	r1, r5, r6
 8008ec2:	f008 fb2c 	bl	801151e <memcpy>
 8008ec6:	e7af      	b.n	8008e28 <ucdr_serialize_uint16_t+0x60>

08008ec8 <ucdr_serialize_endian_uint16_t>:
 8008ec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ecc:	b083      	sub	sp, #12
 8008ece:	460d      	mov	r5, r1
 8008ed0:	2102      	movs	r1, #2
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	f8ad 2006 	strh.w	r2, [sp, #6]
 8008ed8:	f000 ff02 	bl	8009ce0 <ucdr_buffer_alignment>
 8008edc:	4601      	mov	r1, r0
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008ee4:	f000 ff40 	bl	8009d68 <ucdr_advance_buffer>
 8008ee8:	2102      	movs	r1, #2
 8008eea:	4620      	mov	r0, r4
 8008eec:	f000 fe98 	bl	8009c20 <ucdr_check_buffer_available_for>
 8008ef0:	bb70      	cbnz	r0, 8008f50 <ucdr_serialize_endian_uint16_t+0x88>
 8008ef2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008ef6:	42be      	cmp	r6, r7
 8008ef8:	d925      	bls.n	8008f46 <ucdr_serialize_endian_uint16_t+0x7e>
 8008efa:	6923      	ldr	r3, [r4, #16]
 8008efc:	60a6      	str	r6, [r4, #8]
 8008efe:	1bf6      	subs	r6, r6, r7
 8008f00:	4433      	add	r3, r6
 8008f02:	f1c6 0902 	rsb	r9, r6, #2
 8008f06:	6123      	str	r3, [r4, #16]
 8008f08:	4649      	mov	r1, r9
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f000 fe94 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d039      	beq.n	8008f88 <ucdr_serialize_endian_uint16_t+0xc0>
 8008f14:	2d01      	cmp	r5, #1
 8008f16:	d04a      	beq.n	8008fae <ucdr_serialize_endian_uint16_t+0xe6>
 8008f18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008f1c:	703b      	strb	r3, [r7, #0]
 8008f1e:	2e00      	cmp	r6, #0
 8008f20:	d040      	beq.n	8008fa4 <ucdr_serialize_endian_uint16_t+0xdc>
 8008f22:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008f26:	707b      	strb	r3, [r7, #1]
 8008f28:	6923      	ldr	r3, [r4, #16]
 8008f2a:	68a2      	ldr	r2, [r4, #8]
 8008f2c:	7da0      	ldrb	r0, [r4, #22]
 8008f2e:	3302      	adds	r3, #2
 8008f30:	444a      	add	r2, r9
 8008f32:	1b9b      	subs	r3, r3, r6
 8008f34:	2102      	movs	r1, #2
 8008f36:	f080 0001 	eor.w	r0, r0, #1
 8008f3a:	60a2      	str	r2, [r4, #8]
 8008f3c:	6123      	str	r3, [r4, #16]
 8008f3e:	7561      	strb	r1, [r4, #21]
 8008f40:	b003      	add	sp, #12
 8008f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f46:	2102      	movs	r1, #2
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f000 fe75 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8008f4e:	b188      	cbz	r0, 8008f74 <ucdr_serialize_endian_uint16_t+0xac>
 8008f50:	2d01      	cmp	r5, #1
 8008f52:	68a3      	ldr	r3, [r4, #8]
 8008f54:	d014      	beq.n	8008f80 <ucdr_serialize_endian_uint16_t+0xb8>
 8008f56:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008f5a:	701a      	strb	r2, [r3, #0]
 8008f5c:	68a3      	ldr	r3, [r4, #8]
 8008f5e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008f62:	705a      	strb	r2, [r3, #1]
 8008f64:	68a2      	ldr	r2, [r4, #8]
 8008f66:	6923      	ldr	r3, [r4, #16]
 8008f68:	3202      	adds	r2, #2
 8008f6a:	3302      	adds	r3, #2
 8008f6c:	2102      	movs	r1, #2
 8008f6e:	60a2      	str	r2, [r4, #8]
 8008f70:	6123      	str	r3, [r4, #16]
 8008f72:	7561      	strb	r1, [r4, #21]
 8008f74:	7da0      	ldrb	r0, [r4, #22]
 8008f76:	f080 0001 	eor.w	r0, r0, #1
 8008f7a:	b003      	add	sp, #12
 8008f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f80:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008f84:	801a      	strh	r2, [r3, #0]
 8008f86:	e7ed      	b.n	8008f64 <ucdr_serialize_endian_uint16_t+0x9c>
 8008f88:	68a2      	ldr	r2, [r4, #8]
 8008f8a:	6923      	ldr	r3, [r4, #16]
 8008f8c:	7da0      	ldrb	r0, [r4, #22]
 8008f8e:	f884 8015 	strb.w	r8, [r4, #21]
 8008f92:	1b92      	subs	r2, r2, r6
 8008f94:	1b9b      	subs	r3, r3, r6
 8008f96:	f080 0001 	eor.w	r0, r0, #1
 8008f9a:	60a2      	str	r2, [r4, #8]
 8008f9c:	6123      	str	r3, [r4, #16]
 8008f9e:	b003      	add	sp, #12
 8008fa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fa4:	68a3      	ldr	r3, [r4, #8]
 8008fa6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008faa:	701a      	strb	r2, [r3, #0]
 8008fac:	e7bc      	b.n	8008f28 <ucdr_serialize_endian_uint16_t+0x60>
 8008fae:	f10d 0506 	add.w	r5, sp, #6
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	4632      	mov	r2, r6
 8008fb6:	4638      	mov	r0, r7
 8008fb8:	f008 fab1 	bl	801151e <memcpy>
 8008fbc:	68a0      	ldr	r0, [r4, #8]
 8008fbe:	464a      	mov	r2, r9
 8008fc0:	19a9      	adds	r1, r5, r6
 8008fc2:	f008 faac 	bl	801151e <memcpy>
 8008fc6:	e7af      	b.n	8008f28 <ucdr_serialize_endian_uint16_t+0x60>

08008fc8 <ucdr_deserialize_uint16_t>:
 8008fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fcc:	460d      	mov	r5, r1
 8008fce:	2102      	movs	r1, #2
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	f000 fe85 	bl	8009ce0 <ucdr_buffer_alignment>
 8008fd6:	4601      	mov	r1, r0
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008fde:	f000 fec3 	bl	8009d68 <ucdr_advance_buffer>
 8008fe2:	2102      	movs	r1, #2
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f000 fe1b 	bl	8009c20 <ucdr_check_buffer_available_for>
 8008fea:	bb60      	cbnz	r0, 8009046 <ucdr_deserialize_uint16_t+0x7e>
 8008fec:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008ff0:	42be      	cmp	r6, r7
 8008ff2:	d923      	bls.n	800903c <ucdr_deserialize_uint16_t+0x74>
 8008ff4:	6923      	ldr	r3, [r4, #16]
 8008ff6:	60a6      	str	r6, [r4, #8]
 8008ff8:	1bf6      	subs	r6, r6, r7
 8008ffa:	4433      	add	r3, r6
 8008ffc:	f1c6 0902 	rsb	r9, r6, #2
 8009000:	6123      	str	r3, [r4, #16]
 8009002:	4649      	mov	r1, r9
 8009004:	4620      	mov	r0, r4
 8009006:	f000 fe17 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 800900a:	2800      	cmp	r0, #0
 800900c:	d034      	beq.n	8009078 <ucdr_deserialize_uint16_t+0xb0>
 800900e:	7d23      	ldrb	r3, [r4, #20]
 8009010:	2b01      	cmp	r3, #1
 8009012:	d042      	beq.n	800909a <ucdr_deserialize_uint16_t+0xd2>
 8009014:	787b      	ldrb	r3, [r7, #1]
 8009016:	702b      	strb	r3, [r5, #0]
 8009018:	2e00      	cmp	r6, #0
 800901a:	d03a      	beq.n	8009092 <ucdr_deserialize_uint16_t+0xca>
 800901c:	783b      	ldrb	r3, [r7, #0]
 800901e:	706b      	strb	r3, [r5, #1]
 8009020:	6923      	ldr	r3, [r4, #16]
 8009022:	68a2      	ldr	r2, [r4, #8]
 8009024:	7da0      	ldrb	r0, [r4, #22]
 8009026:	2102      	movs	r1, #2
 8009028:	3302      	adds	r3, #2
 800902a:	444a      	add	r2, r9
 800902c:	1b9b      	subs	r3, r3, r6
 800902e:	7561      	strb	r1, [r4, #21]
 8009030:	60a2      	str	r2, [r4, #8]
 8009032:	6123      	str	r3, [r4, #16]
 8009034:	f080 0001 	eor.w	r0, r0, #1
 8009038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800903c:	2102      	movs	r1, #2
 800903e:	4620      	mov	r0, r4
 8009040:	f000 fdfa 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8009044:	b180      	cbz	r0, 8009068 <ucdr_deserialize_uint16_t+0xa0>
 8009046:	7d23      	ldrb	r3, [r4, #20]
 8009048:	2b01      	cmp	r3, #1
 800904a:	68a3      	ldr	r3, [r4, #8]
 800904c:	d011      	beq.n	8009072 <ucdr_deserialize_uint16_t+0xaa>
 800904e:	785b      	ldrb	r3, [r3, #1]
 8009050:	702b      	strb	r3, [r5, #0]
 8009052:	68a3      	ldr	r3, [r4, #8]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	706b      	strb	r3, [r5, #1]
 8009058:	68a2      	ldr	r2, [r4, #8]
 800905a:	6923      	ldr	r3, [r4, #16]
 800905c:	3202      	adds	r2, #2
 800905e:	3302      	adds	r3, #2
 8009060:	2102      	movs	r1, #2
 8009062:	60a2      	str	r2, [r4, #8]
 8009064:	6123      	str	r3, [r4, #16]
 8009066:	7561      	strb	r1, [r4, #21]
 8009068:	7da0      	ldrb	r0, [r4, #22]
 800906a:	f080 0001 	eor.w	r0, r0, #1
 800906e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	802b      	strh	r3, [r5, #0]
 8009076:	e7ef      	b.n	8009058 <ucdr_deserialize_uint16_t+0x90>
 8009078:	68a2      	ldr	r2, [r4, #8]
 800907a:	6923      	ldr	r3, [r4, #16]
 800907c:	7da0      	ldrb	r0, [r4, #22]
 800907e:	f884 8015 	strb.w	r8, [r4, #21]
 8009082:	1b92      	subs	r2, r2, r6
 8009084:	1b9b      	subs	r3, r3, r6
 8009086:	60a2      	str	r2, [r4, #8]
 8009088:	6123      	str	r3, [r4, #16]
 800908a:	f080 0001 	eor.w	r0, r0, #1
 800908e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009092:	68a3      	ldr	r3, [r4, #8]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	706b      	strb	r3, [r5, #1]
 8009098:	e7c2      	b.n	8009020 <ucdr_deserialize_uint16_t+0x58>
 800909a:	4639      	mov	r1, r7
 800909c:	4632      	mov	r2, r6
 800909e:	4628      	mov	r0, r5
 80090a0:	f008 fa3d 	bl	801151e <memcpy>
 80090a4:	68a1      	ldr	r1, [r4, #8]
 80090a6:	464a      	mov	r2, r9
 80090a8:	19a8      	adds	r0, r5, r6
 80090aa:	f008 fa38 	bl	801151e <memcpy>
 80090ae:	e7b7      	b.n	8009020 <ucdr_deserialize_uint16_t+0x58>

080090b0 <ucdr_deserialize_endian_uint16_t>:
 80090b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b4:	460e      	mov	r6, r1
 80090b6:	2102      	movs	r1, #2
 80090b8:	4604      	mov	r4, r0
 80090ba:	4615      	mov	r5, r2
 80090bc:	f000 fe10 	bl	8009ce0 <ucdr_buffer_alignment>
 80090c0:	4601      	mov	r1, r0
 80090c2:	4620      	mov	r0, r4
 80090c4:	f894 9015 	ldrb.w	r9, [r4, #21]
 80090c8:	f000 fe4e 	bl	8009d68 <ucdr_advance_buffer>
 80090cc:	2102      	movs	r1, #2
 80090ce:	4620      	mov	r0, r4
 80090d0:	f000 fda6 	bl	8009c20 <ucdr_check_buffer_available_for>
 80090d4:	bb70      	cbnz	r0, 8009134 <ucdr_deserialize_endian_uint16_t+0x84>
 80090d6:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 80090da:	4547      	cmp	r7, r8
 80090dc:	d925      	bls.n	800912a <ucdr_deserialize_endian_uint16_t+0x7a>
 80090de:	6923      	ldr	r3, [r4, #16]
 80090e0:	60a7      	str	r7, [r4, #8]
 80090e2:	eba7 0708 	sub.w	r7, r7, r8
 80090e6:	443b      	add	r3, r7
 80090e8:	f1c7 0a02 	rsb	sl, r7, #2
 80090ec:	6123      	str	r3, [r4, #16]
 80090ee:	4651      	mov	r1, sl
 80090f0:	4620      	mov	r0, r4
 80090f2:	f000 fda1 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	d034      	beq.n	8009164 <ucdr_deserialize_endian_uint16_t+0xb4>
 80090fa:	2e01      	cmp	r6, #1
 80090fc:	d043      	beq.n	8009186 <ucdr_deserialize_endian_uint16_t+0xd6>
 80090fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009102:	702b      	strb	r3, [r5, #0]
 8009104:	2f00      	cmp	r7, #0
 8009106:	d03a      	beq.n	800917e <ucdr_deserialize_endian_uint16_t+0xce>
 8009108:	f898 3000 	ldrb.w	r3, [r8]
 800910c:	706b      	strb	r3, [r5, #1]
 800910e:	6923      	ldr	r3, [r4, #16]
 8009110:	68a2      	ldr	r2, [r4, #8]
 8009112:	7da0      	ldrb	r0, [r4, #22]
 8009114:	2102      	movs	r1, #2
 8009116:	3302      	adds	r3, #2
 8009118:	4452      	add	r2, sl
 800911a:	1bdb      	subs	r3, r3, r7
 800911c:	7561      	strb	r1, [r4, #21]
 800911e:	60a2      	str	r2, [r4, #8]
 8009120:	6123      	str	r3, [r4, #16]
 8009122:	f080 0001 	eor.w	r0, r0, #1
 8009126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800912a:	2102      	movs	r1, #2
 800912c:	4620      	mov	r0, r4
 800912e:	f000 fd83 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8009132:	b178      	cbz	r0, 8009154 <ucdr_deserialize_endian_uint16_t+0xa4>
 8009134:	2e01      	cmp	r6, #1
 8009136:	68a3      	ldr	r3, [r4, #8]
 8009138:	d011      	beq.n	800915e <ucdr_deserialize_endian_uint16_t+0xae>
 800913a:	785b      	ldrb	r3, [r3, #1]
 800913c:	702b      	strb	r3, [r5, #0]
 800913e:	68a3      	ldr	r3, [r4, #8]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	706b      	strb	r3, [r5, #1]
 8009144:	68a2      	ldr	r2, [r4, #8]
 8009146:	6923      	ldr	r3, [r4, #16]
 8009148:	3202      	adds	r2, #2
 800914a:	3302      	adds	r3, #2
 800914c:	2102      	movs	r1, #2
 800914e:	60a2      	str	r2, [r4, #8]
 8009150:	6123      	str	r3, [r4, #16]
 8009152:	7561      	strb	r1, [r4, #21]
 8009154:	7da0      	ldrb	r0, [r4, #22]
 8009156:	f080 0001 	eor.w	r0, r0, #1
 800915a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800915e:	881b      	ldrh	r3, [r3, #0]
 8009160:	802b      	strh	r3, [r5, #0]
 8009162:	e7ef      	b.n	8009144 <ucdr_deserialize_endian_uint16_t+0x94>
 8009164:	68a2      	ldr	r2, [r4, #8]
 8009166:	6923      	ldr	r3, [r4, #16]
 8009168:	7da0      	ldrb	r0, [r4, #22]
 800916a:	f884 9015 	strb.w	r9, [r4, #21]
 800916e:	1bd2      	subs	r2, r2, r7
 8009170:	1bdb      	subs	r3, r3, r7
 8009172:	60a2      	str	r2, [r4, #8]
 8009174:	6123      	str	r3, [r4, #16]
 8009176:	f080 0001 	eor.w	r0, r0, #1
 800917a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800917e:	68a3      	ldr	r3, [r4, #8]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	706b      	strb	r3, [r5, #1]
 8009184:	e7c3      	b.n	800910e <ucdr_deserialize_endian_uint16_t+0x5e>
 8009186:	4641      	mov	r1, r8
 8009188:	463a      	mov	r2, r7
 800918a:	4628      	mov	r0, r5
 800918c:	f008 f9c7 	bl	801151e <memcpy>
 8009190:	68a1      	ldr	r1, [r4, #8]
 8009192:	4652      	mov	r2, sl
 8009194:	19e8      	adds	r0, r5, r7
 8009196:	f008 f9c2 	bl	801151e <memcpy>
 800919a:	e7b8      	b.n	800910e <ucdr_deserialize_endian_uint16_t+0x5e>

0800919c <ucdr_serialize_uint32_t>:
 800919c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091a0:	b082      	sub	sp, #8
 80091a2:	4604      	mov	r4, r0
 80091a4:	9101      	str	r1, [sp, #4]
 80091a6:	2104      	movs	r1, #4
 80091a8:	f000 fd9a 	bl	8009ce0 <ucdr_buffer_alignment>
 80091ac:	4601      	mov	r1, r0
 80091ae:	4620      	mov	r0, r4
 80091b0:	7d67      	ldrb	r7, [r4, #21]
 80091b2:	f000 fdd9 	bl	8009d68 <ucdr_advance_buffer>
 80091b6:	2104      	movs	r1, #4
 80091b8:	4620      	mov	r0, r4
 80091ba:	f000 fd31 	bl	8009c20 <ucdr_check_buffer_available_for>
 80091be:	2800      	cmp	r0, #0
 80091c0:	d139      	bne.n	8009236 <ucdr_serialize_uint32_t+0x9a>
 80091c2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80091c6:	42ab      	cmp	r3, r5
 80091c8:	d930      	bls.n	800922c <ucdr_serialize_uint32_t+0x90>
 80091ca:	1b5e      	subs	r6, r3, r5
 80091cc:	60a3      	str	r3, [r4, #8]
 80091ce:	6923      	ldr	r3, [r4, #16]
 80091d0:	f1c6 0804 	rsb	r8, r6, #4
 80091d4:	4433      	add	r3, r6
 80091d6:	6123      	str	r3, [r4, #16]
 80091d8:	4641      	mov	r1, r8
 80091da:	4620      	mov	r0, r4
 80091dc:	f000 fd2c 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d04c      	beq.n	800927e <ucdr_serialize_uint32_t+0xe2>
 80091e4:	7d23      	ldrb	r3, [r4, #20]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d063      	beq.n	80092b2 <ucdr_serialize_uint32_t+0x116>
 80091ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80091ee:	702b      	strb	r3, [r5, #0]
 80091f0:	2e00      	cmp	r6, #0
 80091f2:	d051      	beq.n	8009298 <ucdr_serialize_uint32_t+0xfc>
 80091f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80091f8:	706b      	strb	r3, [r5, #1]
 80091fa:	2e01      	cmp	r6, #1
 80091fc:	d050      	beq.n	80092a0 <ucdr_serialize_uint32_t+0x104>
 80091fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009202:	70ab      	strb	r3, [r5, #2]
 8009204:	2e02      	cmp	r6, #2
 8009206:	d04f      	beq.n	80092a8 <ucdr_serialize_uint32_t+0x10c>
 8009208:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800920c:	70eb      	strb	r3, [r5, #3]
 800920e:	6923      	ldr	r3, [r4, #16]
 8009210:	68a2      	ldr	r2, [r4, #8]
 8009212:	7da0      	ldrb	r0, [r4, #22]
 8009214:	3304      	adds	r3, #4
 8009216:	1b9e      	subs	r6, r3, r6
 8009218:	4442      	add	r2, r8
 800921a:	2304      	movs	r3, #4
 800921c:	f080 0001 	eor.w	r0, r0, #1
 8009220:	60a2      	str	r2, [r4, #8]
 8009222:	6126      	str	r6, [r4, #16]
 8009224:	7563      	strb	r3, [r4, #21]
 8009226:	b002      	add	sp, #8
 8009228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800922c:	2104      	movs	r1, #4
 800922e:	4620      	mov	r0, r4
 8009230:	f000 fd02 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8009234:	b1d0      	cbz	r0, 800926c <ucdr_serialize_uint32_t+0xd0>
 8009236:	7d23      	ldrb	r3, [r4, #20]
 8009238:	2b01      	cmp	r3, #1
 800923a:	68a3      	ldr	r3, [r4, #8]
 800923c:	d01c      	beq.n	8009278 <ucdr_serialize_uint32_t+0xdc>
 800923e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009242:	701a      	strb	r2, [r3, #0]
 8009244:	68a3      	ldr	r3, [r4, #8]
 8009246:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800924a:	705a      	strb	r2, [r3, #1]
 800924c:	68a3      	ldr	r3, [r4, #8]
 800924e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009252:	709a      	strb	r2, [r3, #2]
 8009254:	68a3      	ldr	r3, [r4, #8]
 8009256:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800925a:	70da      	strb	r2, [r3, #3]
 800925c:	68a2      	ldr	r2, [r4, #8]
 800925e:	6923      	ldr	r3, [r4, #16]
 8009260:	3204      	adds	r2, #4
 8009262:	3304      	adds	r3, #4
 8009264:	2104      	movs	r1, #4
 8009266:	60a2      	str	r2, [r4, #8]
 8009268:	6123      	str	r3, [r4, #16]
 800926a:	7561      	strb	r1, [r4, #21]
 800926c:	7da0      	ldrb	r0, [r4, #22]
 800926e:	f080 0001 	eor.w	r0, r0, #1
 8009272:	b002      	add	sp, #8
 8009274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009278:	9a01      	ldr	r2, [sp, #4]
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	e7ee      	b.n	800925c <ucdr_serialize_uint32_t+0xc0>
 800927e:	68a2      	ldr	r2, [r4, #8]
 8009280:	6923      	ldr	r3, [r4, #16]
 8009282:	7da0      	ldrb	r0, [r4, #22]
 8009284:	7567      	strb	r7, [r4, #21]
 8009286:	1b92      	subs	r2, r2, r6
 8009288:	1b9b      	subs	r3, r3, r6
 800928a:	f080 0001 	eor.w	r0, r0, #1
 800928e:	60a2      	str	r2, [r4, #8]
 8009290:	6123      	str	r3, [r4, #16]
 8009292:	b002      	add	sp, #8
 8009294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009298:	68a3      	ldr	r3, [r4, #8]
 800929a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800929e:	701a      	strb	r2, [r3, #0]
 80092a0:	68a3      	ldr	r3, [r4, #8]
 80092a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80092a6:	701a      	strb	r2, [r3, #0]
 80092a8:	68a3      	ldr	r3, [r4, #8]
 80092aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80092ae:	701a      	strb	r2, [r3, #0]
 80092b0:	e7ad      	b.n	800920e <ucdr_serialize_uint32_t+0x72>
 80092b2:	4628      	mov	r0, r5
 80092b4:	ad01      	add	r5, sp, #4
 80092b6:	4629      	mov	r1, r5
 80092b8:	4632      	mov	r2, r6
 80092ba:	f008 f930 	bl	801151e <memcpy>
 80092be:	68a0      	ldr	r0, [r4, #8]
 80092c0:	4642      	mov	r2, r8
 80092c2:	19a9      	adds	r1, r5, r6
 80092c4:	f008 f92b 	bl	801151e <memcpy>
 80092c8:	e7a1      	b.n	800920e <ucdr_serialize_uint32_t+0x72>
 80092ca:	bf00      	nop

080092cc <ucdr_serialize_endian_uint32_t>:
 80092cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092d0:	b083      	sub	sp, #12
 80092d2:	460d      	mov	r5, r1
 80092d4:	2104      	movs	r1, #4
 80092d6:	4604      	mov	r4, r0
 80092d8:	9201      	str	r2, [sp, #4]
 80092da:	f000 fd01 	bl	8009ce0 <ucdr_buffer_alignment>
 80092de:	4601      	mov	r1, r0
 80092e0:	4620      	mov	r0, r4
 80092e2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80092e6:	f000 fd3f 	bl	8009d68 <ucdr_advance_buffer>
 80092ea:	2104      	movs	r1, #4
 80092ec:	4620      	mov	r0, r4
 80092ee:	f000 fc97 	bl	8009c20 <ucdr_check_buffer_available_for>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d138      	bne.n	8009368 <ucdr_serialize_endian_uint32_t+0x9c>
 80092f6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80092fa:	42b7      	cmp	r7, r6
 80092fc:	d92f      	bls.n	800935e <ucdr_serialize_endian_uint32_t+0x92>
 80092fe:	6923      	ldr	r3, [r4, #16]
 8009300:	60a7      	str	r7, [r4, #8]
 8009302:	1bbf      	subs	r7, r7, r6
 8009304:	443b      	add	r3, r7
 8009306:	f1c7 0904 	rsb	r9, r7, #4
 800930a:	6123      	str	r3, [r4, #16]
 800930c:	4649      	mov	r1, r9
 800930e:	4620      	mov	r0, r4
 8009310:	f000 fc92 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8009314:	2800      	cmp	r0, #0
 8009316:	d04a      	beq.n	80093ae <ucdr_serialize_endian_uint32_t+0xe2>
 8009318:	2d01      	cmp	r5, #1
 800931a:	d063      	beq.n	80093e4 <ucdr_serialize_endian_uint32_t+0x118>
 800931c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009320:	7033      	strb	r3, [r6, #0]
 8009322:	2f00      	cmp	r7, #0
 8009324:	d051      	beq.n	80093ca <ucdr_serialize_endian_uint32_t+0xfe>
 8009326:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800932a:	7073      	strb	r3, [r6, #1]
 800932c:	2f01      	cmp	r7, #1
 800932e:	d050      	beq.n	80093d2 <ucdr_serialize_endian_uint32_t+0x106>
 8009330:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009334:	70b3      	strb	r3, [r6, #2]
 8009336:	2f02      	cmp	r7, #2
 8009338:	d04f      	beq.n	80093da <ucdr_serialize_endian_uint32_t+0x10e>
 800933a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800933e:	70f3      	strb	r3, [r6, #3]
 8009340:	6923      	ldr	r3, [r4, #16]
 8009342:	68a2      	ldr	r2, [r4, #8]
 8009344:	7da0      	ldrb	r0, [r4, #22]
 8009346:	3304      	adds	r3, #4
 8009348:	444a      	add	r2, r9
 800934a:	1bdb      	subs	r3, r3, r7
 800934c:	2104      	movs	r1, #4
 800934e:	f080 0001 	eor.w	r0, r0, #1
 8009352:	60a2      	str	r2, [r4, #8]
 8009354:	6123      	str	r3, [r4, #16]
 8009356:	7561      	strb	r1, [r4, #21]
 8009358:	b003      	add	sp, #12
 800935a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800935e:	2104      	movs	r1, #4
 8009360:	4620      	mov	r0, r4
 8009362:	f000 fc69 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8009366:	b1c8      	cbz	r0, 800939c <ucdr_serialize_endian_uint32_t+0xd0>
 8009368:	2d01      	cmp	r5, #1
 800936a:	68a3      	ldr	r3, [r4, #8]
 800936c:	d01c      	beq.n	80093a8 <ucdr_serialize_endian_uint32_t+0xdc>
 800936e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009372:	701a      	strb	r2, [r3, #0]
 8009374:	68a3      	ldr	r3, [r4, #8]
 8009376:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800937a:	705a      	strb	r2, [r3, #1]
 800937c:	68a3      	ldr	r3, [r4, #8]
 800937e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009382:	709a      	strb	r2, [r3, #2]
 8009384:	68a3      	ldr	r3, [r4, #8]
 8009386:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800938a:	70da      	strb	r2, [r3, #3]
 800938c:	68a2      	ldr	r2, [r4, #8]
 800938e:	6923      	ldr	r3, [r4, #16]
 8009390:	3204      	adds	r2, #4
 8009392:	3304      	adds	r3, #4
 8009394:	2104      	movs	r1, #4
 8009396:	60a2      	str	r2, [r4, #8]
 8009398:	6123      	str	r3, [r4, #16]
 800939a:	7561      	strb	r1, [r4, #21]
 800939c:	7da0      	ldrb	r0, [r4, #22]
 800939e:	f080 0001 	eor.w	r0, r0, #1
 80093a2:	b003      	add	sp, #12
 80093a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093a8:	9a01      	ldr	r2, [sp, #4]
 80093aa:	601a      	str	r2, [r3, #0]
 80093ac:	e7ee      	b.n	800938c <ucdr_serialize_endian_uint32_t+0xc0>
 80093ae:	68a2      	ldr	r2, [r4, #8]
 80093b0:	6923      	ldr	r3, [r4, #16]
 80093b2:	7da0      	ldrb	r0, [r4, #22]
 80093b4:	f884 8015 	strb.w	r8, [r4, #21]
 80093b8:	1bd2      	subs	r2, r2, r7
 80093ba:	1bdb      	subs	r3, r3, r7
 80093bc:	f080 0001 	eor.w	r0, r0, #1
 80093c0:	60a2      	str	r2, [r4, #8]
 80093c2:	6123      	str	r3, [r4, #16]
 80093c4:	b003      	add	sp, #12
 80093c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093ca:	68a3      	ldr	r3, [r4, #8]
 80093cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80093d0:	701a      	strb	r2, [r3, #0]
 80093d2:	68a3      	ldr	r3, [r4, #8]
 80093d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80093d8:	701a      	strb	r2, [r3, #0]
 80093da:	68a3      	ldr	r3, [r4, #8]
 80093dc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80093e0:	701a      	strb	r2, [r3, #0]
 80093e2:	e7ad      	b.n	8009340 <ucdr_serialize_endian_uint32_t+0x74>
 80093e4:	ad01      	add	r5, sp, #4
 80093e6:	4629      	mov	r1, r5
 80093e8:	463a      	mov	r2, r7
 80093ea:	4630      	mov	r0, r6
 80093ec:	f008 f897 	bl	801151e <memcpy>
 80093f0:	68a0      	ldr	r0, [r4, #8]
 80093f2:	464a      	mov	r2, r9
 80093f4:	19e9      	adds	r1, r5, r7
 80093f6:	f008 f892 	bl	801151e <memcpy>
 80093fa:	e7a1      	b.n	8009340 <ucdr_serialize_endian_uint32_t+0x74>

080093fc <ucdr_deserialize_uint32_t>:
 80093fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009400:	460d      	mov	r5, r1
 8009402:	2104      	movs	r1, #4
 8009404:	4604      	mov	r4, r0
 8009406:	f000 fc6b 	bl	8009ce0 <ucdr_buffer_alignment>
 800940a:	4601      	mov	r1, r0
 800940c:	4620      	mov	r0, r4
 800940e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009412:	f000 fca9 	bl	8009d68 <ucdr_advance_buffer>
 8009416:	2104      	movs	r1, #4
 8009418:	4620      	mov	r0, r4
 800941a:	f000 fc01 	bl	8009c20 <ucdr_check_buffer_available_for>
 800941e:	2800      	cmp	r0, #0
 8009420:	d138      	bne.n	8009494 <ucdr_deserialize_uint32_t+0x98>
 8009422:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009426:	42b7      	cmp	r7, r6
 8009428:	d92f      	bls.n	800948a <ucdr_deserialize_uint32_t+0x8e>
 800942a:	6923      	ldr	r3, [r4, #16]
 800942c:	60a7      	str	r7, [r4, #8]
 800942e:	1bbf      	subs	r7, r7, r6
 8009430:	443b      	add	r3, r7
 8009432:	f1c7 0904 	rsb	r9, r7, #4
 8009436:	6123      	str	r3, [r4, #16]
 8009438:	4649      	mov	r1, r9
 800943a:	4620      	mov	r0, r4
 800943c:	f000 fbfc 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8009440:	2800      	cmp	r0, #0
 8009442:	d046      	beq.n	80094d2 <ucdr_deserialize_uint32_t+0xd6>
 8009444:	7d23      	ldrb	r3, [r4, #20]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d05c      	beq.n	8009504 <ucdr_deserialize_uint32_t+0x108>
 800944a:	78f3      	ldrb	r3, [r6, #3]
 800944c:	702b      	strb	r3, [r5, #0]
 800944e:	2f00      	cmp	r7, #0
 8009450:	d04c      	beq.n	80094ec <ucdr_deserialize_uint32_t+0xf0>
 8009452:	78b3      	ldrb	r3, [r6, #2]
 8009454:	706b      	strb	r3, [r5, #1]
 8009456:	2f01      	cmp	r7, #1
 8009458:	f105 0302 	add.w	r3, r5, #2
 800945c:	d04a      	beq.n	80094f4 <ucdr_deserialize_uint32_t+0xf8>
 800945e:	7873      	ldrb	r3, [r6, #1]
 8009460:	70ab      	strb	r3, [r5, #2]
 8009462:	2f02      	cmp	r7, #2
 8009464:	f105 0303 	add.w	r3, r5, #3
 8009468:	d048      	beq.n	80094fc <ucdr_deserialize_uint32_t+0x100>
 800946a:	7833      	ldrb	r3, [r6, #0]
 800946c:	70eb      	strb	r3, [r5, #3]
 800946e:	6923      	ldr	r3, [r4, #16]
 8009470:	68a2      	ldr	r2, [r4, #8]
 8009472:	7da0      	ldrb	r0, [r4, #22]
 8009474:	2104      	movs	r1, #4
 8009476:	3304      	adds	r3, #4
 8009478:	444a      	add	r2, r9
 800947a:	1bdb      	subs	r3, r3, r7
 800947c:	7561      	strb	r1, [r4, #21]
 800947e:	60a2      	str	r2, [r4, #8]
 8009480:	6123      	str	r3, [r4, #16]
 8009482:	f080 0001 	eor.w	r0, r0, #1
 8009486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800948a:	2104      	movs	r1, #4
 800948c:	4620      	mov	r0, r4
 800948e:	f000 fbd3 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8009492:	b1b0      	cbz	r0, 80094c2 <ucdr_deserialize_uint32_t+0xc6>
 8009494:	7d23      	ldrb	r3, [r4, #20]
 8009496:	2b01      	cmp	r3, #1
 8009498:	68a3      	ldr	r3, [r4, #8]
 800949a:	d017      	beq.n	80094cc <ucdr_deserialize_uint32_t+0xd0>
 800949c:	78db      	ldrb	r3, [r3, #3]
 800949e:	702b      	strb	r3, [r5, #0]
 80094a0:	68a3      	ldr	r3, [r4, #8]
 80094a2:	789b      	ldrb	r3, [r3, #2]
 80094a4:	706b      	strb	r3, [r5, #1]
 80094a6:	68a3      	ldr	r3, [r4, #8]
 80094a8:	785b      	ldrb	r3, [r3, #1]
 80094aa:	70ab      	strb	r3, [r5, #2]
 80094ac:	68a3      	ldr	r3, [r4, #8]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	70eb      	strb	r3, [r5, #3]
 80094b2:	68a2      	ldr	r2, [r4, #8]
 80094b4:	6923      	ldr	r3, [r4, #16]
 80094b6:	3204      	adds	r2, #4
 80094b8:	3304      	adds	r3, #4
 80094ba:	2104      	movs	r1, #4
 80094bc:	60a2      	str	r2, [r4, #8]
 80094be:	6123      	str	r3, [r4, #16]
 80094c0:	7561      	strb	r1, [r4, #21]
 80094c2:	7da0      	ldrb	r0, [r4, #22]
 80094c4:	f080 0001 	eor.w	r0, r0, #1
 80094c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	602b      	str	r3, [r5, #0]
 80094d0:	e7ef      	b.n	80094b2 <ucdr_deserialize_uint32_t+0xb6>
 80094d2:	68a2      	ldr	r2, [r4, #8]
 80094d4:	6923      	ldr	r3, [r4, #16]
 80094d6:	7da0      	ldrb	r0, [r4, #22]
 80094d8:	f884 8015 	strb.w	r8, [r4, #21]
 80094dc:	1bd2      	subs	r2, r2, r7
 80094de:	1bdb      	subs	r3, r3, r7
 80094e0:	60a2      	str	r2, [r4, #8]
 80094e2:	6123      	str	r3, [r4, #16]
 80094e4:	f080 0001 	eor.w	r0, r0, #1
 80094e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ec:	68a3      	ldr	r3, [r4, #8]
 80094ee:	789b      	ldrb	r3, [r3, #2]
 80094f0:	706b      	strb	r3, [r5, #1]
 80094f2:	1cab      	adds	r3, r5, #2
 80094f4:	68a2      	ldr	r2, [r4, #8]
 80094f6:	7852      	ldrb	r2, [r2, #1]
 80094f8:	f803 2b01 	strb.w	r2, [r3], #1
 80094fc:	68a2      	ldr	r2, [r4, #8]
 80094fe:	7812      	ldrb	r2, [r2, #0]
 8009500:	701a      	strb	r2, [r3, #0]
 8009502:	e7b4      	b.n	800946e <ucdr_deserialize_uint32_t+0x72>
 8009504:	4631      	mov	r1, r6
 8009506:	463a      	mov	r2, r7
 8009508:	4628      	mov	r0, r5
 800950a:	f008 f808 	bl	801151e <memcpy>
 800950e:	68a1      	ldr	r1, [r4, #8]
 8009510:	464a      	mov	r2, r9
 8009512:	19e8      	adds	r0, r5, r7
 8009514:	f008 f803 	bl	801151e <memcpy>
 8009518:	e7a9      	b.n	800946e <ucdr_deserialize_uint32_t+0x72>
 800951a:	bf00      	nop

0800951c <ucdr_deserialize_endian_uint32_t>:
 800951c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009520:	460e      	mov	r6, r1
 8009522:	2104      	movs	r1, #4
 8009524:	4604      	mov	r4, r0
 8009526:	4615      	mov	r5, r2
 8009528:	f000 fbda 	bl	8009ce0 <ucdr_buffer_alignment>
 800952c:	4601      	mov	r1, r0
 800952e:	4620      	mov	r0, r4
 8009530:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009534:	f000 fc18 	bl	8009d68 <ucdr_advance_buffer>
 8009538:	2104      	movs	r1, #4
 800953a:	4620      	mov	r0, r4
 800953c:	f000 fb70 	bl	8009c20 <ucdr_check_buffer_available_for>
 8009540:	2800      	cmp	r0, #0
 8009542:	d13c      	bne.n	80095be <ucdr_deserialize_endian_uint32_t+0xa2>
 8009544:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8009548:	42bb      	cmp	r3, r7
 800954a:	d933      	bls.n	80095b4 <ucdr_deserialize_endian_uint32_t+0x98>
 800954c:	eba3 0807 	sub.w	r8, r3, r7
 8009550:	60a3      	str	r3, [r4, #8]
 8009552:	6923      	ldr	r3, [r4, #16]
 8009554:	f1c8 0a04 	rsb	sl, r8, #4
 8009558:	4443      	add	r3, r8
 800955a:	6123      	str	r3, [r4, #16]
 800955c:	4651      	mov	r1, sl
 800955e:	4620      	mov	r0, r4
 8009560:	f000 fb6a 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8009564:	2800      	cmp	r0, #0
 8009566:	d048      	beq.n	80095fa <ucdr_deserialize_endian_uint32_t+0xde>
 8009568:	2e01      	cmp	r6, #1
 800956a:	d061      	beq.n	8009630 <ucdr_deserialize_endian_uint32_t+0x114>
 800956c:	78fb      	ldrb	r3, [r7, #3]
 800956e:	702b      	strb	r3, [r5, #0]
 8009570:	f1b8 0f00 	cmp.w	r8, #0
 8009574:	d050      	beq.n	8009618 <ucdr_deserialize_endian_uint32_t+0xfc>
 8009576:	78bb      	ldrb	r3, [r7, #2]
 8009578:	706b      	strb	r3, [r5, #1]
 800957a:	f1b8 0f01 	cmp.w	r8, #1
 800957e:	f105 0302 	add.w	r3, r5, #2
 8009582:	d04d      	beq.n	8009620 <ucdr_deserialize_endian_uint32_t+0x104>
 8009584:	787b      	ldrb	r3, [r7, #1]
 8009586:	70ab      	strb	r3, [r5, #2]
 8009588:	f1b8 0f02 	cmp.w	r8, #2
 800958c:	f105 0303 	add.w	r3, r5, #3
 8009590:	d04a      	beq.n	8009628 <ucdr_deserialize_endian_uint32_t+0x10c>
 8009592:	783b      	ldrb	r3, [r7, #0]
 8009594:	70eb      	strb	r3, [r5, #3]
 8009596:	6923      	ldr	r3, [r4, #16]
 8009598:	68a2      	ldr	r2, [r4, #8]
 800959a:	7da0      	ldrb	r0, [r4, #22]
 800959c:	2104      	movs	r1, #4
 800959e:	3304      	adds	r3, #4
 80095a0:	4452      	add	r2, sl
 80095a2:	eba3 0308 	sub.w	r3, r3, r8
 80095a6:	7561      	strb	r1, [r4, #21]
 80095a8:	60a2      	str	r2, [r4, #8]
 80095aa:	6123      	str	r3, [r4, #16]
 80095ac:	f080 0001 	eor.w	r0, r0, #1
 80095b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b4:	2104      	movs	r1, #4
 80095b6:	4620      	mov	r0, r4
 80095b8:	f000 fb3e 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 80095bc:	b1a8      	cbz	r0, 80095ea <ucdr_deserialize_endian_uint32_t+0xce>
 80095be:	2e01      	cmp	r6, #1
 80095c0:	68a3      	ldr	r3, [r4, #8]
 80095c2:	d017      	beq.n	80095f4 <ucdr_deserialize_endian_uint32_t+0xd8>
 80095c4:	78db      	ldrb	r3, [r3, #3]
 80095c6:	702b      	strb	r3, [r5, #0]
 80095c8:	68a3      	ldr	r3, [r4, #8]
 80095ca:	789b      	ldrb	r3, [r3, #2]
 80095cc:	706b      	strb	r3, [r5, #1]
 80095ce:	68a3      	ldr	r3, [r4, #8]
 80095d0:	785b      	ldrb	r3, [r3, #1]
 80095d2:	70ab      	strb	r3, [r5, #2]
 80095d4:	68a3      	ldr	r3, [r4, #8]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	70eb      	strb	r3, [r5, #3]
 80095da:	68a2      	ldr	r2, [r4, #8]
 80095dc:	6923      	ldr	r3, [r4, #16]
 80095de:	3204      	adds	r2, #4
 80095e0:	3304      	adds	r3, #4
 80095e2:	2104      	movs	r1, #4
 80095e4:	60a2      	str	r2, [r4, #8]
 80095e6:	6123      	str	r3, [r4, #16]
 80095e8:	7561      	strb	r1, [r4, #21]
 80095ea:	7da0      	ldrb	r0, [r4, #22]
 80095ec:	f080 0001 	eor.w	r0, r0, #1
 80095f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	602b      	str	r3, [r5, #0]
 80095f8:	e7ef      	b.n	80095da <ucdr_deserialize_endian_uint32_t+0xbe>
 80095fa:	68a2      	ldr	r2, [r4, #8]
 80095fc:	6923      	ldr	r3, [r4, #16]
 80095fe:	7da0      	ldrb	r0, [r4, #22]
 8009600:	f884 9015 	strb.w	r9, [r4, #21]
 8009604:	eba2 0208 	sub.w	r2, r2, r8
 8009608:	eba3 0308 	sub.w	r3, r3, r8
 800960c:	60a2      	str	r2, [r4, #8]
 800960e:	6123      	str	r3, [r4, #16]
 8009610:	f080 0001 	eor.w	r0, r0, #1
 8009614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009618:	68a3      	ldr	r3, [r4, #8]
 800961a:	789b      	ldrb	r3, [r3, #2]
 800961c:	706b      	strb	r3, [r5, #1]
 800961e:	1cab      	adds	r3, r5, #2
 8009620:	68a2      	ldr	r2, [r4, #8]
 8009622:	7852      	ldrb	r2, [r2, #1]
 8009624:	f803 2b01 	strb.w	r2, [r3], #1
 8009628:	68a2      	ldr	r2, [r4, #8]
 800962a:	7812      	ldrb	r2, [r2, #0]
 800962c:	701a      	strb	r2, [r3, #0]
 800962e:	e7b2      	b.n	8009596 <ucdr_deserialize_endian_uint32_t+0x7a>
 8009630:	4639      	mov	r1, r7
 8009632:	4642      	mov	r2, r8
 8009634:	4628      	mov	r0, r5
 8009636:	f007 ff72 	bl	801151e <memcpy>
 800963a:	68a1      	ldr	r1, [r4, #8]
 800963c:	4652      	mov	r2, sl
 800963e:	eb05 0008 	add.w	r0, r5, r8
 8009642:	f007 ff6c 	bl	801151e <memcpy>
 8009646:	e7a6      	b.n	8009596 <ucdr_deserialize_endian_uint32_t+0x7a>

08009648 <ucdr_serialize_uint64_t>:
 8009648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800964c:	2108      	movs	r1, #8
 800964e:	b082      	sub	sp, #8
 8009650:	4604      	mov	r4, r0
 8009652:	e9cd 2300 	strd	r2, r3, [sp]
 8009656:	f000 fb43 	bl	8009ce0 <ucdr_buffer_alignment>
 800965a:	4601      	mov	r1, r0
 800965c:	4620      	mov	r0, r4
 800965e:	7d67      	ldrb	r7, [r4, #21]
 8009660:	f000 fb82 	bl	8009d68 <ucdr_advance_buffer>
 8009664:	2108      	movs	r1, #8
 8009666:	4620      	mov	r0, r4
 8009668:	f000 fada 	bl	8009c20 <ucdr_check_buffer_available_for>
 800966c:	2800      	cmp	r0, #0
 800966e:	d14e      	bne.n	800970e <ucdr_serialize_uint64_t+0xc6>
 8009670:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009674:	42ab      	cmp	r3, r5
 8009676:	d945      	bls.n	8009704 <ucdr_serialize_uint64_t+0xbc>
 8009678:	1b5e      	subs	r6, r3, r5
 800967a:	60a3      	str	r3, [r4, #8]
 800967c:	6923      	ldr	r3, [r4, #16]
 800967e:	f1c6 0808 	rsb	r8, r6, #8
 8009682:	4433      	add	r3, r6
 8009684:	6123      	str	r3, [r4, #16]
 8009686:	4641      	mov	r1, r8
 8009688:	4620      	mov	r0, r4
 800968a:	f000 fad5 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 800968e:	2800      	cmp	r0, #0
 8009690:	d074      	beq.n	800977c <ucdr_serialize_uint64_t+0x134>
 8009692:	7d23      	ldrb	r3, [r4, #20]
 8009694:	2b01      	cmp	r3, #1
 8009696:	f000 809b 	beq.w	80097d0 <ucdr_serialize_uint64_t+0x188>
 800969a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800969e:	702b      	strb	r3, [r5, #0]
 80096a0:	2e00      	cmp	r6, #0
 80096a2:	d078      	beq.n	8009796 <ucdr_serialize_uint64_t+0x14e>
 80096a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80096a8:	706b      	strb	r3, [r5, #1]
 80096aa:	2e01      	cmp	r6, #1
 80096ac:	d077      	beq.n	800979e <ucdr_serialize_uint64_t+0x156>
 80096ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80096b2:	70ab      	strb	r3, [r5, #2]
 80096b4:	2e02      	cmp	r6, #2
 80096b6:	d076      	beq.n	80097a6 <ucdr_serialize_uint64_t+0x15e>
 80096b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80096bc:	70eb      	strb	r3, [r5, #3]
 80096be:	2e03      	cmp	r6, #3
 80096c0:	d075      	beq.n	80097ae <ucdr_serialize_uint64_t+0x166>
 80096c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80096c6:	712b      	strb	r3, [r5, #4]
 80096c8:	2e04      	cmp	r6, #4
 80096ca:	d074      	beq.n	80097b6 <ucdr_serialize_uint64_t+0x16e>
 80096cc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80096d0:	716b      	strb	r3, [r5, #5]
 80096d2:	2e05      	cmp	r6, #5
 80096d4:	d073      	beq.n	80097be <ucdr_serialize_uint64_t+0x176>
 80096d6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80096da:	71ab      	strb	r3, [r5, #6]
 80096dc:	2e06      	cmp	r6, #6
 80096de:	d072      	beq.n	80097c6 <ucdr_serialize_uint64_t+0x17e>
 80096e0:	f89d 3000 	ldrb.w	r3, [sp]
 80096e4:	71eb      	strb	r3, [r5, #7]
 80096e6:	6923      	ldr	r3, [r4, #16]
 80096e8:	68a2      	ldr	r2, [r4, #8]
 80096ea:	7da0      	ldrb	r0, [r4, #22]
 80096ec:	3308      	adds	r3, #8
 80096ee:	1b9e      	subs	r6, r3, r6
 80096f0:	4442      	add	r2, r8
 80096f2:	2308      	movs	r3, #8
 80096f4:	f080 0001 	eor.w	r0, r0, #1
 80096f8:	60a2      	str	r2, [r4, #8]
 80096fa:	6126      	str	r6, [r4, #16]
 80096fc:	7563      	strb	r3, [r4, #21]
 80096fe:	b002      	add	sp, #8
 8009700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009704:	2108      	movs	r1, #8
 8009706:	4620      	mov	r0, r4
 8009708:	f000 fa96 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 800970c:	b350      	cbz	r0, 8009764 <ucdr_serialize_uint64_t+0x11c>
 800970e:	7d23      	ldrb	r3, [r4, #20]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d02d      	beq.n	8009770 <ucdr_serialize_uint64_t+0x128>
 8009714:	68a3      	ldr	r3, [r4, #8]
 8009716:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800971a:	701a      	strb	r2, [r3, #0]
 800971c:	68a3      	ldr	r3, [r4, #8]
 800971e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009722:	705a      	strb	r2, [r3, #1]
 8009724:	68a3      	ldr	r3, [r4, #8]
 8009726:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800972a:	709a      	strb	r2, [r3, #2]
 800972c:	68a3      	ldr	r3, [r4, #8]
 800972e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009732:	70da      	strb	r2, [r3, #3]
 8009734:	68a3      	ldr	r3, [r4, #8]
 8009736:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800973a:	711a      	strb	r2, [r3, #4]
 800973c:	68a3      	ldr	r3, [r4, #8]
 800973e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009742:	715a      	strb	r2, [r3, #5]
 8009744:	68a3      	ldr	r3, [r4, #8]
 8009746:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800974a:	719a      	strb	r2, [r3, #6]
 800974c:	68a3      	ldr	r3, [r4, #8]
 800974e:	f89d 2000 	ldrb.w	r2, [sp]
 8009752:	71da      	strb	r2, [r3, #7]
 8009754:	68a2      	ldr	r2, [r4, #8]
 8009756:	6923      	ldr	r3, [r4, #16]
 8009758:	3208      	adds	r2, #8
 800975a:	3308      	adds	r3, #8
 800975c:	2108      	movs	r1, #8
 800975e:	60a2      	str	r2, [r4, #8]
 8009760:	6123      	str	r3, [r4, #16]
 8009762:	7561      	strb	r1, [r4, #21]
 8009764:	7da0      	ldrb	r0, [r4, #22]
 8009766:	f080 0001 	eor.w	r0, r0, #1
 800976a:	b002      	add	sp, #8
 800976c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009770:	466b      	mov	r3, sp
 8009772:	cb03      	ldmia	r3!, {r0, r1}
 8009774:	68a3      	ldr	r3, [r4, #8]
 8009776:	6018      	str	r0, [r3, #0]
 8009778:	6059      	str	r1, [r3, #4]
 800977a:	e7eb      	b.n	8009754 <ucdr_serialize_uint64_t+0x10c>
 800977c:	68a2      	ldr	r2, [r4, #8]
 800977e:	6923      	ldr	r3, [r4, #16]
 8009780:	7da0      	ldrb	r0, [r4, #22]
 8009782:	7567      	strb	r7, [r4, #21]
 8009784:	1b92      	subs	r2, r2, r6
 8009786:	1b9b      	subs	r3, r3, r6
 8009788:	f080 0001 	eor.w	r0, r0, #1
 800978c:	60a2      	str	r2, [r4, #8]
 800978e:	6123      	str	r3, [r4, #16]
 8009790:	b002      	add	sp, #8
 8009792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009796:	68a3      	ldr	r3, [r4, #8]
 8009798:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800979c:	701a      	strb	r2, [r3, #0]
 800979e:	68a3      	ldr	r3, [r4, #8]
 80097a0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80097a4:	701a      	strb	r2, [r3, #0]
 80097a6:	68a3      	ldr	r3, [r4, #8]
 80097a8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80097ac:	701a      	strb	r2, [r3, #0]
 80097ae:	68a3      	ldr	r3, [r4, #8]
 80097b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80097b4:	701a      	strb	r2, [r3, #0]
 80097b6:	68a3      	ldr	r3, [r4, #8]
 80097b8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80097bc:	701a      	strb	r2, [r3, #0]
 80097be:	68a3      	ldr	r3, [r4, #8]
 80097c0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80097c4:	701a      	strb	r2, [r3, #0]
 80097c6:	68a3      	ldr	r3, [r4, #8]
 80097c8:	f89d 2000 	ldrb.w	r2, [sp]
 80097cc:	701a      	strb	r2, [r3, #0]
 80097ce:	e78a      	b.n	80096e6 <ucdr_serialize_uint64_t+0x9e>
 80097d0:	4628      	mov	r0, r5
 80097d2:	466d      	mov	r5, sp
 80097d4:	4629      	mov	r1, r5
 80097d6:	4632      	mov	r2, r6
 80097d8:	f007 fea1 	bl	801151e <memcpy>
 80097dc:	68a0      	ldr	r0, [r4, #8]
 80097de:	4642      	mov	r2, r8
 80097e0:	19a9      	adds	r1, r5, r6
 80097e2:	f007 fe9c 	bl	801151e <memcpy>
 80097e6:	e77e      	b.n	80096e6 <ucdr_serialize_uint64_t+0x9e>

080097e8 <ucdr_serialize_int16_t>:
 80097e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ec:	b082      	sub	sp, #8
 80097ee:	460b      	mov	r3, r1
 80097f0:	2102      	movs	r1, #2
 80097f2:	4604      	mov	r4, r0
 80097f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80097f8:	f000 fa72 	bl	8009ce0 <ucdr_buffer_alignment>
 80097fc:	4601      	mov	r1, r0
 80097fe:	4620      	mov	r0, r4
 8009800:	7d67      	ldrb	r7, [r4, #21]
 8009802:	f000 fab1 	bl	8009d68 <ucdr_advance_buffer>
 8009806:	2102      	movs	r1, #2
 8009808:	4620      	mov	r0, r4
 800980a:	f000 fa09 	bl	8009c20 <ucdr_check_buffer_available_for>
 800980e:	bb78      	cbnz	r0, 8009870 <ucdr_serialize_int16_t+0x88>
 8009810:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009814:	42ab      	cmp	r3, r5
 8009816:	d926      	bls.n	8009866 <ucdr_serialize_int16_t+0x7e>
 8009818:	1b5e      	subs	r6, r3, r5
 800981a:	60a3      	str	r3, [r4, #8]
 800981c:	6923      	ldr	r3, [r4, #16]
 800981e:	f1c6 0802 	rsb	r8, r6, #2
 8009822:	4433      	add	r3, r6
 8009824:	6123      	str	r3, [r4, #16]
 8009826:	4641      	mov	r1, r8
 8009828:	4620      	mov	r0, r4
 800982a:	f000 fa05 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 800982e:	2800      	cmp	r0, #0
 8009830:	d03b      	beq.n	80098aa <ucdr_serialize_int16_t+0xc2>
 8009832:	7d23      	ldrb	r3, [r4, #20]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d04a      	beq.n	80098ce <ucdr_serialize_int16_t+0xe6>
 8009838:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800983c:	702b      	strb	r3, [r5, #0]
 800983e:	2e00      	cmp	r6, #0
 8009840:	d040      	beq.n	80098c4 <ucdr_serialize_int16_t+0xdc>
 8009842:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009846:	706b      	strb	r3, [r5, #1]
 8009848:	6923      	ldr	r3, [r4, #16]
 800984a:	68a2      	ldr	r2, [r4, #8]
 800984c:	7da0      	ldrb	r0, [r4, #22]
 800984e:	3302      	adds	r3, #2
 8009850:	1b9e      	subs	r6, r3, r6
 8009852:	4442      	add	r2, r8
 8009854:	2302      	movs	r3, #2
 8009856:	f080 0001 	eor.w	r0, r0, #1
 800985a:	60a2      	str	r2, [r4, #8]
 800985c:	6126      	str	r6, [r4, #16]
 800985e:	7563      	strb	r3, [r4, #21]
 8009860:	b002      	add	sp, #8
 8009862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009866:	2102      	movs	r1, #2
 8009868:	4620      	mov	r0, r4
 800986a:	f000 f9e5 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 800986e:	b190      	cbz	r0, 8009896 <ucdr_serialize_int16_t+0xae>
 8009870:	7d23      	ldrb	r3, [r4, #20]
 8009872:	2b01      	cmp	r3, #1
 8009874:	68a3      	ldr	r3, [r4, #8]
 8009876:	d014      	beq.n	80098a2 <ucdr_serialize_int16_t+0xba>
 8009878:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800987c:	701a      	strb	r2, [r3, #0]
 800987e:	68a3      	ldr	r3, [r4, #8]
 8009880:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009884:	705a      	strb	r2, [r3, #1]
 8009886:	68a2      	ldr	r2, [r4, #8]
 8009888:	6923      	ldr	r3, [r4, #16]
 800988a:	3202      	adds	r2, #2
 800988c:	3302      	adds	r3, #2
 800988e:	2102      	movs	r1, #2
 8009890:	60a2      	str	r2, [r4, #8]
 8009892:	6123      	str	r3, [r4, #16]
 8009894:	7561      	strb	r1, [r4, #21]
 8009896:	7da0      	ldrb	r0, [r4, #22]
 8009898:	f080 0001 	eor.w	r0, r0, #1
 800989c:	b002      	add	sp, #8
 800989e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80098a6:	801a      	strh	r2, [r3, #0]
 80098a8:	e7ed      	b.n	8009886 <ucdr_serialize_int16_t+0x9e>
 80098aa:	68a2      	ldr	r2, [r4, #8]
 80098ac:	6923      	ldr	r3, [r4, #16]
 80098ae:	7da0      	ldrb	r0, [r4, #22]
 80098b0:	7567      	strb	r7, [r4, #21]
 80098b2:	1b92      	subs	r2, r2, r6
 80098b4:	1b9b      	subs	r3, r3, r6
 80098b6:	f080 0001 	eor.w	r0, r0, #1
 80098ba:	60a2      	str	r2, [r4, #8]
 80098bc:	6123      	str	r3, [r4, #16]
 80098be:	b002      	add	sp, #8
 80098c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098c4:	68a3      	ldr	r3, [r4, #8]
 80098c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80098ca:	701a      	strb	r2, [r3, #0]
 80098cc:	e7bc      	b.n	8009848 <ucdr_serialize_int16_t+0x60>
 80098ce:	4628      	mov	r0, r5
 80098d0:	f10d 0506 	add.w	r5, sp, #6
 80098d4:	4629      	mov	r1, r5
 80098d6:	4632      	mov	r2, r6
 80098d8:	f007 fe21 	bl	801151e <memcpy>
 80098dc:	68a0      	ldr	r0, [r4, #8]
 80098de:	4642      	mov	r2, r8
 80098e0:	19a9      	adds	r1, r5, r6
 80098e2:	f007 fe1c 	bl	801151e <memcpy>
 80098e6:	e7af      	b.n	8009848 <ucdr_serialize_int16_t+0x60>

080098e8 <ucdr_deserialize_int16_t>:
 80098e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098ec:	460d      	mov	r5, r1
 80098ee:	2102      	movs	r1, #2
 80098f0:	4604      	mov	r4, r0
 80098f2:	f000 f9f5 	bl	8009ce0 <ucdr_buffer_alignment>
 80098f6:	4601      	mov	r1, r0
 80098f8:	4620      	mov	r0, r4
 80098fa:	f894 8015 	ldrb.w	r8, [r4, #21]
 80098fe:	f000 fa33 	bl	8009d68 <ucdr_advance_buffer>
 8009902:	2102      	movs	r1, #2
 8009904:	4620      	mov	r0, r4
 8009906:	f000 f98b 	bl	8009c20 <ucdr_check_buffer_available_for>
 800990a:	bb60      	cbnz	r0, 8009966 <ucdr_deserialize_int16_t+0x7e>
 800990c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009910:	42be      	cmp	r6, r7
 8009912:	d923      	bls.n	800995c <ucdr_deserialize_int16_t+0x74>
 8009914:	6923      	ldr	r3, [r4, #16]
 8009916:	60a6      	str	r6, [r4, #8]
 8009918:	1bf6      	subs	r6, r6, r7
 800991a:	4433      	add	r3, r6
 800991c:	f1c6 0902 	rsb	r9, r6, #2
 8009920:	6123      	str	r3, [r4, #16]
 8009922:	4649      	mov	r1, r9
 8009924:	4620      	mov	r0, r4
 8009926:	f000 f987 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 800992a:	2800      	cmp	r0, #0
 800992c:	d034      	beq.n	8009998 <ucdr_deserialize_int16_t+0xb0>
 800992e:	7d23      	ldrb	r3, [r4, #20]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d042      	beq.n	80099ba <ucdr_deserialize_int16_t+0xd2>
 8009934:	787b      	ldrb	r3, [r7, #1]
 8009936:	702b      	strb	r3, [r5, #0]
 8009938:	2e00      	cmp	r6, #0
 800993a:	d03a      	beq.n	80099b2 <ucdr_deserialize_int16_t+0xca>
 800993c:	783b      	ldrb	r3, [r7, #0]
 800993e:	706b      	strb	r3, [r5, #1]
 8009940:	6923      	ldr	r3, [r4, #16]
 8009942:	68a2      	ldr	r2, [r4, #8]
 8009944:	7da0      	ldrb	r0, [r4, #22]
 8009946:	2102      	movs	r1, #2
 8009948:	3302      	adds	r3, #2
 800994a:	444a      	add	r2, r9
 800994c:	1b9b      	subs	r3, r3, r6
 800994e:	7561      	strb	r1, [r4, #21]
 8009950:	60a2      	str	r2, [r4, #8]
 8009952:	6123      	str	r3, [r4, #16]
 8009954:	f080 0001 	eor.w	r0, r0, #1
 8009958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800995c:	2102      	movs	r1, #2
 800995e:	4620      	mov	r0, r4
 8009960:	f000 f96a 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8009964:	b180      	cbz	r0, 8009988 <ucdr_deserialize_int16_t+0xa0>
 8009966:	7d23      	ldrb	r3, [r4, #20]
 8009968:	2b01      	cmp	r3, #1
 800996a:	68a3      	ldr	r3, [r4, #8]
 800996c:	d011      	beq.n	8009992 <ucdr_deserialize_int16_t+0xaa>
 800996e:	785b      	ldrb	r3, [r3, #1]
 8009970:	702b      	strb	r3, [r5, #0]
 8009972:	68a3      	ldr	r3, [r4, #8]
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	706b      	strb	r3, [r5, #1]
 8009978:	68a2      	ldr	r2, [r4, #8]
 800997a:	6923      	ldr	r3, [r4, #16]
 800997c:	3202      	adds	r2, #2
 800997e:	3302      	adds	r3, #2
 8009980:	2102      	movs	r1, #2
 8009982:	60a2      	str	r2, [r4, #8]
 8009984:	6123      	str	r3, [r4, #16]
 8009986:	7561      	strb	r1, [r4, #21]
 8009988:	7da0      	ldrb	r0, [r4, #22]
 800998a:	f080 0001 	eor.w	r0, r0, #1
 800998e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	802b      	strh	r3, [r5, #0]
 8009996:	e7ef      	b.n	8009978 <ucdr_deserialize_int16_t+0x90>
 8009998:	68a2      	ldr	r2, [r4, #8]
 800999a:	6923      	ldr	r3, [r4, #16]
 800999c:	7da0      	ldrb	r0, [r4, #22]
 800999e:	f884 8015 	strb.w	r8, [r4, #21]
 80099a2:	1b92      	subs	r2, r2, r6
 80099a4:	1b9b      	subs	r3, r3, r6
 80099a6:	60a2      	str	r2, [r4, #8]
 80099a8:	6123      	str	r3, [r4, #16]
 80099aa:	f080 0001 	eor.w	r0, r0, #1
 80099ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099b2:	68a3      	ldr	r3, [r4, #8]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	706b      	strb	r3, [r5, #1]
 80099b8:	e7c2      	b.n	8009940 <ucdr_deserialize_int16_t+0x58>
 80099ba:	4639      	mov	r1, r7
 80099bc:	4632      	mov	r2, r6
 80099be:	4628      	mov	r0, r5
 80099c0:	f007 fdad 	bl	801151e <memcpy>
 80099c4:	68a1      	ldr	r1, [r4, #8]
 80099c6:	464a      	mov	r2, r9
 80099c8:	19a8      	adds	r0, r5, r6
 80099ca:	f007 fda8 	bl	801151e <memcpy>
 80099ce:	e7b7      	b.n	8009940 <ucdr_deserialize_int16_t+0x58>

080099d0 <ucdr_serialize_int32_t>:
 80099d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d4:	b082      	sub	sp, #8
 80099d6:	4604      	mov	r4, r0
 80099d8:	9101      	str	r1, [sp, #4]
 80099da:	2104      	movs	r1, #4
 80099dc:	f000 f980 	bl	8009ce0 <ucdr_buffer_alignment>
 80099e0:	4601      	mov	r1, r0
 80099e2:	4620      	mov	r0, r4
 80099e4:	7d67      	ldrb	r7, [r4, #21]
 80099e6:	f000 f9bf 	bl	8009d68 <ucdr_advance_buffer>
 80099ea:	2104      	movs	r1, #4
 80099ec:	4620      	mov	r0, r4
 80099ee:	f000 f917 	bl	8009c20 <ucdr_check_buffer_available_for>
 80099f2:	2800      	cmp	r0, #0
 80099f4:	d139      	bne.n	8009a6a <ucdr_serialize_int32_t+0x9a>
 80099f6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80099fa:	42ab      	cmp	r3, r5
 80099fc:	d930      	bls.n	8009a60 <ucdr_serialize_int32_t+0x90>
 80099fe:	1b5e      	subs	r6, r3, r5
 8009a00:	60a3      	str	r3, [r4, #8]
 8009a02:	6923      	ldr	r3, [r4, #16]
 8009a04:	f1c6 0804 	rsb	r8, r6, #4
 8009a08:	4433      	add	r3, r6
 8009a0a:	6123      	str	r3, [r4, #16]
 8009a0c:	4641      	mov	r1, r8
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f000 f912 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d04c      	beq.n	8009ab2 <ucdr_serialize_int32_t+0xe2>
 8009a18:	7d23      	ldrb	r3, [r4, #20]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d063      	beq.n	8009ae6 <ucdr_serialize_int32_t+0x116>
 8009a1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009a22:	702b      	strb	r3, [r5, #0]
 8009a24:	2e00      	cmp	r6, #0
 8009a26:	d051      	beq.n	8009acc <ucdr_serialize_int32_t+0xfc>
 8009a28:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009a2c:	706b      	strb	r3, [r5, #1]
 8009a2e:	2e01      	cmp	r6, #1
 8009a30:	d050      	beq.n	8009ad4 <ucdr_serialize_int32_t+0x104>
 8009a32:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009a36:	70ab      	strb	r3, [r5, #2]
 8009a38:	2e02      	cmp	r6, #2
 8009a3a:	d04f      	beq.n	8009adc <ucdr_serialize_int32_t+0x10c>
 8009a3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009a40:	70eb      	strb	r3, [r5, #3]
 8009a42:	6923      	ldr	r3, [r4, #16]
 8009a44:	68a2      	ldr	r2, [r4, #8]
 8009a46:	7da0      	ldrb	r0, [r4, #22]
 8009a48:	3304      	adds	r3, #4
 8009a4a:	1b9e      	subs	r6, r3, r6
 8009a4c:	4442      	add	r2, r8
 8009a4e:	2304      	movs	r3, #4
 8009a50:	f080 0001 	eor.w	r0, r0, #1
 8009a54:	60a2      	str	r2, [r4, #8]
 8009a56:	6126      	str	r6, [r4, #16]
 8009a58:	7563      	strb	r3, [r4, #21]
 8009a5a:	b002      	add	sp, #8
 8009a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a60:	2104      	movs	r1, #4
 8009a62:	4620      	mov	r0, r4
 8009a64:	f000 f8e8 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8009a68:	b1d0      	cbz	r0, 8009aa0 <ucdr_serialize_int32_t+0xd0>
 8009a6a:	7d23      	ldrb	r3, [r4, #20]
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	68a3      	ldr	r3, [r4, #8]
 8009a70:	d01c      	beq.n	8009aac <ucdr_serialize_int32_t+0xdc>
 8009a72:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009a76:	701a      	strb	r2, [r3, #0]
 8009a78:	68a3      	ldr	r3, [r4, #8]
 8009a7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009a7e:	705a      	strb	r2, [r3, #1]
 8009a80:	68a3      	ldr	r3, [r4, #8]
 8009a82:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009a86:	709a      	strb	r2, [r3, #2]
 8009a88:	68a3      	ldr	r3, [r4, #8]
 8009a8a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009a8e:	70da      	strb	r2, [r3, #3]
 8009a90:	68a2      	ldr	r2, [r4, #8]
 8009a92:	6923      	ldr	r3, [r4, #16]
 8009a94:	3204      	adds	r2, #4
 8009a96:	3304      	adds	r3, #4
 8009a98:	2104      	movs	r1, #4
 8009a9a:	60a2      	str	r2, [r4, #8]
 8009a9c:	6123      	str	r3, [r4, #16]
 8009a9e:	7561      	strb	r1, [r4, #21]
 8009aa0:	7da0      	ldrb	r0, [r4, #22]
 8009aa2:	f080 0001 	eor.w	r0, r0, #1
 8009aa6:	b002      	add	sp, #8
 8009aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aac:	9a01      	ldr	r2, [sp, #4]
 8009aae:	601a      	str	r2, [r3, #0]
 8009ab0:	e7ee      	b.n	8009a90 <ucdr_serialize_int32_t+0xc0>
 8009ab2:	68a2      	ldr	r2, [r4, #8]
 8009ab4:	6923      	ldr	r3, [r4, #16]
 8009ab6:	7da0      	ldrb	r0, [r4, #22]
 8009ab8:	7567      	strb	r7, [r4, #21]
 8009aba:	1b92      	subs	r2, r2, r6
 8009abc:	1b9b      	subs	r3, r3, r6
 8009abe:	f080 0001 	eor.w	r0, r0, #1
 8009ac2:	60a2      	str	r2, [r4, #8]
 8009ac4:	6123      	str	r3, [r4, #16]
 8009ac6:	b002      	add	sp, #8
 8009ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009acc:	68a3      	ldr	r3, [r4, #8]
 8009ace:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009ad2:	701a      	strb	r2, [r3, #0]
 8009ad4:	68a3      	ldr	r3, [r4, #8]
 8009ad6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009ada:	701a      	strb	r2, [r3, #0]
 8009adc:	68a3      	ldr	r3, [r4, #8]
 8009ade:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009ae2:	701a      	strb	r2, [r3, #0]
 8009ae4:	e7ad      	b.n	8009a42 <ucdr_serialize_int32_t+0x72>
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	ad01      	add	r5, sp, #4
 8009aea:	4629      	mov	r1, r5
 8009aec:	4632      	mov	r2, r6
 8009aee:	f007 fd16 	bl	801151e <memcpy>
 8009af2:	68a0      	ldr	r0, [r4, #8]
 8009af4:	4642      	mov	r2, r8
 8009af6:	19a9      	adds	r1, r5, r6
 8009af8:	f007 fd11 	bl	801151e <memcpy>
 8009afc:	e7a1      	b.n	8009a42 <ucdr_serialize_int32_t+0x72>
 8009afe:	bf00      	nop

08009b00 <ucdr_deserialize_int32_t>:
 8009b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b04:	460d      	mov	r5, r1
 8009b06:	2104      	movs	r1, #4
 8009b08:	4604      	mov	r4, r0
 8009b0a:	f000 f8e9 	bl	8009ce0 <ucdr_buffer_alignment>
 8009b0e:	4601      	mov	r1, r0
 8009b10:	4620      	mov	r0, r4
 8009b12:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009b16:	f000 f927 	bl	8009d68 <ucdr_advance_buffer>
 8009b1a:	2104      	movs	r1, #4
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f000 f87f 	bl	8009c20 <ucdr_check_buffer_available_for>
 8009b22:	2800      	cmp	r0, #0
 8009b24:	d138      	bne.n	8009b98 <ucdr_deserialize_int32_t+0x98>
 8009b26:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009b2a:	42b7      	cmp	r7, r6
 8009b2c:	d92f      	bls.n	8009b8e <ucdr_deserialize_int32_t+0x8e>
 8009b2e:	6923      	ldr	r3, [r4, #16]
 8009b30:	60a7      	str	r7, [r4, #8]
 8009b32:	1bbf      	subs	r7, r7, r6
 8009b34:	443b      	add	r3, r7
 8009b36:	f1c7 0904 	rsb	r9, r7, #4
 8009b3a:	6123      	str	r3, [r4, #16]
 8009b3c:	4649      	mov	r1, r9
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f000 f87a 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	d046      	beq.n	8009bd6 <ucdr_deserialize_int32_t+0xd6>
 8009b48:	7d23      	ldrb	r3, [r4, #20]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d05c      	beq.n	8009c08 <ucdr_deserialize_int32_t+0x108>
 8009b4e:	78f3      	ldrb	r3, [r6, #3]
 8009b50:	702b      	strb	r3, [r5, #0]
 8009b52:	2f00      	cmp	r7, #0
 8009b54:	d04c      	beq.n	8009bf0 <ucdr_deserialize_int32_t+0xf0>
 8009b56:	78b3      	ldrb	r3, [r6, #2]
 8009b58:	706b      	strb	r3, [r5, #1]
 8009b5a:	2f01      	cmp	r7, #1
 8009b5c:	f105 0302 	add.w	r3, r5, #2
 8009b60:	d04a      	beq.n	8009bf8 <ucdr_deserialize_int32_t+0xf8>
 8009b62:	7873      	ldrb	r3, [r6, #1]
 8009b64:	70ab      	strb	r3, [r5, #2]
 8009b66:	2f02      	cmp	r7, #2
 8009b68:	f105 0303 	add.w	r3, r5, #3
 8009b6c:	d048      	beq.n	8009c00 <ucdr_deserialize_int32_t+0x100>
 8009b6e:	7833      	ldrb	r3, [r6, #0]
 8009b70:	70eb      	strb	r3, [r5, #3]
 8009b72:	6923      	ldr	r3, [r4, #16]
 8009b74:	68a2      	ldr	r2, [r4, #8]
 8009b76:	7da0      	ldrb	r0, [r4, #22]
 8009b78:	2104      	movs	r1, #4
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	444a      	add	r2, r9
 8009b7e:	1bdb      	subs	r3, r3, r7
 8009b80:	7561      	strb	r1, [r4, #21]
 8009b82:	60a2      	str	r2, [r4, #8]
 8009b84:	6123      	str	r3, [r4, #16]
 8009b86:	f080 0001 	eor.w	r0, r0, #1
 8009b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b8e:	2104      	movs	r1, #4
 8009b90:	4620      	mov	r0, r4
 8009b92:	f000 f851 	bl	8009c38 <ucdr_check_final_buffer_behavior>
 8009b96:	b1b0      	cbz	r0, 8009bc6 <ucdr_deserialize_int32_t+0xc6>
 8009b98:	7d23      	ldrb	r3, [r4, #20]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	68a3      	ldr	r3, [r4, #8]
 8009b9e:	d017      	beq.n	8009bd0 <ucdr_deserialize_int32_t+0xd0>
 8009ba0:	78db      	ldrb	r3, [r3, #3]
 8009ba2:	702b      	strb	r3, [r5, #0]
 8009ba4:	68a3      	ldr	r3, [r4, #8]
 8009ba6:	789b      	ldrb	r3, [r3, #2]
 8009ba8:	706b      	strb	r3, [r5, #1]
 8009baa:	68a3      	ldr	r3, [r4, #8]
 8009bac:	785b      	ldrb	r3, [r3, #1]
 8009bae:	70ab      	strb	r3, [r5, #2]
 8009bb0:	68a3      	ldr	r3, [r4, #8]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	70eb      	strb	r3, [r5, #3]
 8009bb6:	68a2      	ldr	r2, [r4, #8]
 8009bb8:	6923      	ldr	r3, [r4, #16]
 8009bba:	3204      	adds	r2, #4
 8009bbc:	3304      	adds	r3, #4
 8009bbe:	2104      	movs	r1, #4
 8009bc0:	60a2      	str	r2, [r4, #8]
 8009bc2:	6123      	str	r3, [r4, #16]
 8009bc4:	7561      	strb	r1, [r4, #21]
 8009bc6:	7da0      	ldrb	r0, [r4, #22]
 8009bc8:	f080 0001 	eor.w	r0, r0, #1
 8009bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	602b      	str	r3, [r5, #0]
 8009bd4:	e7ef      	b.n	8009bb6 <ucdr_deserialize_int32_t+0xb6>
 8009bd6:	68a2      	ldr	r2, [r4, #8]
 8009bd8:	6923      	ldr	r3, [r4, #16]
 8009bda:	7da0      	ldrb	r0, [r4, #22]
 8009bdc:	f884 8015 	strb.w	r8, [r4, #21]
 8009be0:	1bd2      	subs	r2, r2, r7
 8009be2:	1bdb      	subs	r3, r3, r7
 8009be4:	60a2      	str	r2, [r4, #8]
 8009be6:	6123      	str	r3, [r4, #16]
 8009be8:	f080 0001 	eor.w	r0, r0, #1
 8009bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bf0:	68a3      	ldr	r3, [r4, #8]
 8009bf2:	789b      	ldrb	r3, [r3, #2]
 8009bf4:	706b      	strb	r3, [r5, #1]
 8009bf6:	1cab      	adds	r3, r5, #2
 8009bf8:	68a2      	ldr	r2, [r4, #8]
 8009bfa:	7852      	ldrb	r2, [r2, #1]
 8009bfc:	f803 2b01 	strb.w	r2, [r3], #1
 8009c00:	68a2      	ldr	r2, [r4, #8]
 8009c02:	7812      	ldrb	r2, [r2, #0]
 8009c04:	701a      	strb	r2, [r3, #0]
 8009c06:	e7b4      	b.n	8009b72 <ucdr_deserialize_int32_t+0x72>
 8009c08:	4631      	mov	r1, r6
 8009c0a:	463a      	mov	r2, r7
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	f007 fc86 	bl	801151e <memcpy>
 8009c12:	68a1      	ldr	r1, [r4, #8]
 8009c14:	464a      	mov	r2, r9
 8009c16:	19e8      	adds	r0, r5, r7
 8009c18:	f007 fc81 	bl	801151e <memcpy>
 8009c1c:	e7a9      	b.n	8009b72 <ucdr_deserialize_int32_t+0x72>
 8009c1e:	bf00      	nop

08009c20 <ucdr_check_buffer_available_for>:
 8009c20:	7d83      	ldrb	r3, [r0, #22]
 8009c22:	b93b      	cbnz	r3, 8009c34 <ucdr_check_buffer_available_for+0x14>
 8009c24:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8009c28:	4419      	add	r1, r3
 8009c2a:	4288      	cmp	r0, r1
 8009c2c:	bf34      	ite	cc
 8009c2e:	2000      	movcc	r0, #0
 8009c30:	2001      	movcs	r0, #1
 8009c32:	4770      	bx	lr
 8009c34:	2000      	movs	r0, #0
 8009c36:	4770      	bx	lr

08009c38 <ucdr_check_final_buffer_behavior>:
 8009c38:	7d83      	ldrb	r3, [r0, #22]
 8009c3a:	b943      	cbnz	r3, 8009c4e <ucdr_check_final_buffer_behavior+0x16>
 8009c3c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8009c40:	4291      	cmp	r1, r2
 8009c42:	b510      	push	{r4, lr}
 8009c44:	4604      	mov	r4, r0
 8009c46:	d205      	bcs.n	8009c54 <ucdr_check_final_buffer_behavior+0x1c>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	bd10      	pop	{r4, pc}
 8009c4e:	2300      	movs	r3, #0
 8009c50:	4618      	mov	r0, r3
 8009c52:	4770      	bx	lr
 8009c54:	6982      	ldr	r2, [r0, #24]
 8009c56:	b13a      	cbz	r2, 8009c68 <ucdr_check_final_buffer_behavior+0x30>
 8009c58:	69c1      	ldr	r1, [r0, #28]
 8009c5a:	4790      	blx	r2
 8009c5c:	f080 0301 	eor.w	r3, r0, #1
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	75a0      	strb	r0, [r4, #22]
 8009c64:	4618      	mov	r0, r3
 8009c66:	bd10      	pop	{r4, pc}
 8009c68:	2001      	movs	r0, #1
 8009c6a:	75a0      	strb	r0, [r4, #22]
 8009c6c:	e7fa      	b.n	8009c64 <ucdr_check_final_buffer_behavior+0x2c>
 8009c6e:	bf00      	nop

08009c70 <ucdr_set_on_full_buffer_callback>:
 8009c70:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop

08009c78 <ucdr_init_buffer_origin_offset_endian>:
 8009c78:	b410      	push	{r4}
 8009c7a:	9c01      	ldr	r4, [sp, #4]
 8009c7c:	6001      	str	r1, [r0, #0]
 8009c7e:	440a      	add	r2, r1
 8009c80:	6042      	str	r2, [r0, #4]
 8009c82:	190a      	adds	r2, r1, r4
 8009c84:	441c      	add	r4, r3
 8009c86:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8009c8a:	6082      	str	r2, [r0, #8]
 8009c8c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009c90:	7503      	strb	r3, [r0, #20]
 8009c92:	2200      	movs	r2, #0
 8009c94:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8009c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c9c:	7542      	strb	r2, [r0, #21]
 8009c9e:	7582      	strb	r2, [r0, #22]
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop

08009ca4 <ucdr_init_buffer_origin_offset>:
 8009ca4:	b510      	push	{r4, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	9c04      	ldr	r4, [sp, #16]
 8009caa:	9400      	str	r4, [sp, #0]
 8009cac:	2401      	movs	r4, #1
 8009cae:	9401      	str	r4, [sp, #4]
 8009cb0:	f7ff ffe2 	bl	8009c78 <ucdr_init_buffer_origin_offset_endian>
 8009cb4:	b002      	add	sp, #8
 8009cb6:	bd10      	pop	{r4, pc}

08009cb8 <ucdr_init_buffer_origin>:
 8009cb8:	b510      	push	{r4, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	2400      	movs	r4, #0
 8009cbe:	9400      	str	r4, [sp, #0]
 8009cc0:	f7ff fff0 	bl	8009ca4 <ucdr_init_buffer_origin_offset>
 8009cc4:	b002      	add	sp, #8
 8009cc6:	bd10      	pop	{r4, pc}

08009cc8 <ucdr_init_buffer>:
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f7ff bff5 	b.w	8009cb8 <ucdr_init_buffer_origin>
 8009cce:	bf00      	nop

08009cd0 <ucdr_alignment>:
 8009cd0:	fbb0 f3f1 	udiv	r3, r0, r1
 8009cd4:	fb03 0011 	mls	r0, r3, r1, r0
 8009cd8:	1a08      	subs	r0, r1, r0
 8009cda:	3901      	subs	r1, #1
 8009cdc:	4008      	ands	r0, r1
 8009cde:	4770      	bx	lr

08009ce0 <ucdr_buffer_alignment>:
 8009ce0:	7d43      	ldrb	r3, [r0, #21]
 8009ce2:	428b      	cmp	r3, r1
 8009ce4:	d208      	bcs.n	8009cf8 <ucdr_buffer_alignment+0x18>
 8009ce6:	6900      	ldr	r0, [r0, #16]
 8009ce8:	fbb0 f3f1 	udiv	r3, r0, r1
 8009cec:	fb01 0013 	mls	r0, r1, r3, r0
 8009cf0:	1a08      	subs	r0, r1, r0
 8009cf2:	3901      	subs	r1, #1
 8009cf4:	4008      	ands	r0, r1
 8009cf6:	4770      	bx	lr
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	4770      	bx	lr

08009cfc <ucdr_align_to>:
 8009cfc:	b538      	push	{r3, r4, r5, lr}
 8009cfe:	4604      	mov	r4, r0
 8009d00:	460d      	mov	r5, r1
 8009d02:	f7ff ffed 	bl	8009ce0 <ucdr_buffer_alignment>
 8009d06:	68a3      	ldr	r3, [r4, #8]
 8009d08:	6921      	ldr	r1, [r4, #16]
 8009d0a:	7565      	strb	r5, [r4, #21]
 8009d0c:	181a      	adds	r2, r3, r0
 8009d0e:	6863      	ldr	r3, [r4, #4]
 8009d10:	4293      	cmp	r3, r2
 8009d12:	4408      	add	r0, r1
 8009d14:	bf28      	it	cs
 8009d16:	4613      	movcs	r3, r2
 8009d18:	6120      	str	r0, [r4, #16]
 8009d1a:	60a3      	str	r3, [r4, #8]
 8009d1c:	bd38      	pop	{r3, r4, r5, pc}
 8009d1e:	bf00      	nop

08009d20 <ucdr_buffer_length>:
 8009d20:	6882      	ldr	r2, [r0, #8]
 8009d22:	6800      	ldr	r0, [r0, #0]
 8009d24:	1a10      	subs	r0, r2, r0
 8009d26:	4770      	bx	lr

08009d28 <ucdr_buffer_remaining>:
 8009d28:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8009d2c:	1a10      	subs	r0, r2, r0
 8009d2e:	4770      	bx	lr

08009d30 <ucdr_check_final_buffer_behavior_array>:
 8009d30:	b538      	push	{r3, r4, r5, lr}
 8009d32:	7d83      	ldrb	r3, [r0, #22]
 8009d34:	b963      	cbnz	r3, 8009d50 <ucdr_check_final_buffer_behavior_array+0x20>
 8009d36:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	460d      	mov	r5, r1
 8009d40:	d308      	bcc.n	8009d54 <ucdr_check_final_buffer_behavior_array+0x24>
 8009d42:	b139      	cbz	r1, 8009d54 <ucdr_check_final_buffer_behavior_array+0x24>
 8009d44:	6983      	ldr	r3, [r0, #24]
 8009d46:	b163      	cbz	r3, 8009d62 <ucdr_check_final_buffer_behavior_array+0x32>
 8009d48:	69c1      	ldr	r1, [r0, #28]
 8009d4a:	4798      	blx	r3
 8009d4c:	75a0      	strb	r0, [r4, #22]
 8009d4e:	b108      	cbz	r0, 8009d54 <ucdr_check_final_buffer_behavior_array+0x24>
 8009d50:	2000      	movs	r0, #0
 8009d52:	bd38      	pop	{r3, r4, r5, pc}
 8009d54:	4620      	mov	r0, r4
 8009d56:	f7ff ffe7 	bl	8009d28 <ucdr_buffer_remaining>
 8009d5a:	42a8      	cmp	r0, r5
 8009d5c:	bf28      	it	cs
 8009d5e:	4628      	movcs	r0, r5
 8009d60:	bd38      	pop	{r3, r4, r5, pc}
 8009d62:	2301      	movs	r3, #1
 8009d64:	7583      	strb	r3, [r0, #22]
 8009d66:	e7f3      	b.n	8009d50 <ucdr_check_final_buffer_behavior_array+0x20>

08009d68 <ucdr_advance_buffer>:
 8009d68:	b538      	push	{r3, r4, r5, lr}
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	460d      	mov	r5, r1
 8009d6e:	f7ff ff57 	bl	8009c20 <ucdr_check_buffer_available_for>
 8009d72:	b178      	cbz	r0, 8009d94 <ucdr_advance_buffer+0x2c>
 8009d74:	6923      	ldr	r3, [r4, #16]
 8009d76:	68a2      	ldr	r2, [r4, #8]
 8009d78:	442b      	add	r3, r5
 8009d7a:	6123      	str	r3, [r4, #16]
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	442a      	add	r2, r5
 8009d80:	7563      	strb	r3, [r4, #21]
 8009d82:	60a2      	str	r2, [r4, #8]
 8009d84:	bd38      	pop	{r3, r4, r5, pc}
 8009d86:	68a2      	ldr	r2, [r4, #8]
 8009d88:	6923      	ldr	r3, [r4, #16]
 8009d8a:	4402      	add	r2, r0
 8009d8c:	4403      	add	r3, r0
 8009d8e:	1a2d      	subs	r5, r5, r0
 8009d90:	60a2      	str	r2, [r4, #8]
 8009d92:	6123      	str	r3, [r4, #16]
 8009d94:	4629      	mov	r1, r5
 8009d96:	2201      	movs	r2, #1
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f7ff ffc9 	bl	8009d30 <ucdr_check_final_buffer_behavior_array>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d1f1      	bne.n	8009d86 <ucdr_advance_buffer+0x1e>
 8009da2:	2301      	movs	r3, #1
 8009da4:	7563      	strb	r3, [r4, #21]
 8009da6:	bd38      	pop	{r3, r4, r5, pc}

08009da8 <uxr_buffer_delete_entity>:
 8009da8:	b510      	push	{r4, lr}
 8009daa:	2300      	movs	r3, #0
 8009dac:	b08e      	sub	sp, #56	; 0x38
 8009dae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009db2:	2303      	movs	r3, #3
 8009db4:	9300      	str	r3, [sp, #0]
 8009db6:	2204      	movs	r2, #4
 8009db8:	ab06      	add	r3, sp, #24
 8009dba:	4604      	mov	r4, r0
 8009dbc:	9103      	str	r1, [sp, #12]
 8009dbe:	f001 f86f 	bl	800aea0 <uxr_prepare_stream_to_write_submessage>
 8009dc2:	b918      	cbnz	r0, 8009dcc <uxr_buffer_delete_entity+0x24>
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	b00e      	add	sp, #56	; 0x38
 8009dca:	bd10      	pop	{r4, pc}
 8009dcc:	9902      	ldr	r1, [sp, #8]
 8009dce:	aa05      	add	r2, sp, #20
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f001 f99b 	bl	800b10c <uxr_init_base_object_request>
 8009dd6:	a905      	add	r1, sp, #20
 8009dd8:	4604      	mov	r4, r0
 8009dda:	a806      	add	r0, sp, #24
 8009ddc:	f002 fb00 	bl	800c3e0 <uxr_serialize_DELETE_Payload>
 8009de0:	4620      	mov	r0, r4
 8009de2:	b00e      	add	sp, #56	; 0x38
 8009de4:	bd10      	pop	{r4, pc}
 8009de6:	bf00      	nop

08009de8 <uxr_common_create_entity>:
 8009de8:	b510      	push	{r4, lr}
 8009dea:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8009dee:	b08c      	sub	sp, #48	; 0x30
 8009df0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8009df4:	f1bc 0f01 	cmp.w	ip, #1
 8009df8:	bf0c      	ite	eq
 8009dfa:	f003 0201 	andeq.w	r2, r3, #1
 8009dfe:	2200      	movne	r2, #0
 8009e00:	330e      	adds	r3, #14
 8009e02:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8009e06:	9101      	str	r1, [sp, #4]
 8009e08:	441a      	add	r2, r3
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	9903      	ldr	r1, [sp, #12]
 8009e10:	ab04      	add	r3, sp, #16
 8009e12:	b292      	uxth	r2, r2
 8009e14:	4604      	mov	r4, r0
 8009e16:	f001 f843 	bl	800aea0 <uxr_prepare_stream_to_write_submessage>
 8009e1a:	b918      	cbnz	r0, 8009e24 <uxr_common_create_entity+0x3c>
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	4620      	mov	r0, r4
 8009e20:	b00c      	add	sp, #48	; 0x30
 8009e22:	bd10      	pop	{r4, pc}
 8009e24:	9902      	ldr	r1, [sp, #8]
 8009e26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f001 f96f 	bl	800b10c <uxr_init_base_object_request>
 8009e2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009e30:	4604      	mov	r4, r0
 8009e32:	a804      	add	r0, sp, #16
 8009e34:	f002 fa30 	bl	800c298 <uxr_serialize_CREATE_Payload>
 8009e38:	4620      	mov	r0, r4
 8009e3a:	b00c      	add	sp, #48	; 0x30
 8009e3c:	bd10      	pop	{r4, pc}
 8009e3e:	bf00      	nop

08009e40 <uxr_buffer_create_participant_bin>:
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8009e46:	ac11      	add	r4, sp, #68	; 0x44
 8009e48:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8009e52:	7223      	strb	r3, [r4, #8]
 8009e54:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8009e56:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	4605      	mov	r5, r0
 8009e60:	7122      	strb	r2, [r4, #4]
 8009e62:	f88d 1014 	strb.w	r1, [sp, #20]
 8009e66:	b1cb      	cbz	r3, 8009e9c <uxr_buffer_create_participant_bin+0x5c>
 8009e68:	f88d 201c 	strb.w	r2, [sp, #28]
 8009e6c:	9308      	str	r3, [sp, #32]
 8009e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e72:	a915      	add	r1, sp, #84	; 0x54
 8009e74:	a809      	add	r0, sp, #36	; 0x24
 8009e76:	f7ff ff27 	bl	8009cc8 <ucdr_init_buffer>
 8009e7a:	a905      	add	r1, sp, #20
 8009e7c:	a809      	add	r0, sp, #36	; 0x24
 8009e7e:	f001 fed9 	bl	800bc34 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8009e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e84:	9600      	str	r6, [sp, #0]
 8009e86:	9401      	str	r4, [sp, #4]
 8009e88:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009e8c:	60e3      	str	r3, [r4, #12]
 8009e8e:	4628      	mov	r0, r5
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	f7ff ffa9 	bl	8009de8 <uxr_common_create_entity>
 8009e96:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8009e9a:	bd70      	pop	{r4, r5, r6, pc}
 8009e9c:	f88d 301c 	strb.w	r3, [sp, #28]
 8009ea0:	e7e5      	b.n	8009e6e <uxr_buffer_create_participant_bin+0x2e>
 8009ea2:	bf00      	nop

08009ea4 <uxr_buffer_create_topic_bin>:
 8009ea4:	b570      	push	{r4, r5, r6, lr}
 8009ea6:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8009eaa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8009eae:	9105      	str	r1, [sp, #20]
 8009eb0:	4605      	mov	r5, r0
 8009eb2:	a997      	add	r1, sp, #604	; 0x25c
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	2302      	movs	r3, #2
 8009eb8:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8009ebc:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8009ec0:	f000 f8ee 	bl	800a0a0 <uxr_object_id_to_raw>
 8009ec4:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8009ec6:	9306      	str	r3, [sp, #24]
 8009ec8:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 8009eca:	930a      	str	r3, [sp, #40]	; 0x28
 8009ecc:	2303      	movs	r3, #3
 8009ece:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ed8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8009edc:	a917      	add	r1, sp, #92	; 0x5c
 8009ede:	2300      	movs	r3, #0
 8009ee0:	a80b      	add	r0, sp, #44	; 0x2c
 8009ee2:	f88d 301c 	strb.w	r3, [sp, #28]
 8009ee6:	f7ff feef 	bl	8009cc8 <ucdr_init_buffer>
 8009eea:	a906      	add	r1, sp, #24
 8009eec:	a80b      	add	r0, sp, #44	; 0x2c
 8009eee:	f001 fec3 	bl	800bc78 <uxr_serialize_OBJK_Topic_Binary>
 8009ef2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ef4:	9316      	str	r3, [sp, #88]	; 0x58
 8009ef6:	ac13      	add	r4, sp, #76	; 0x4c
 8009ef8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8009efc:	9600      	str	r6, [sp, #0]
 8009efe:	9401      	str	r4, [sp, #4]
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	4628      	mov	r0, r5
 8009f04:	f7ff ff70 	bl	8009de8 <uxr_common_create_entity>
 8009f08:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 8009f0c:	bd70      	pop	{r4, r5, r6, pc}
 8009f0e:	bf00      	nop

08009f10 <uxr_buffer_create_publisher_bin>:
 8009f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f12:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8009f16:	4605      	mov	r5, r0
 8009f18:	9105      	str	r1, [sp, #20]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	2603      	movs	r6, #3
 8009f1e:	a992      	add	r1, sp, #584	; 0x248
 8009f20:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8009f24:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8009f28:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8009f2c:	f000 f8b8 	bl	800a0a0 <uxr_object_id_to_raw>
 8009f30:	2300      	movs	r3, #0
 8009f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f36:	a912      	add	r1, sp, #72	; 0x48
 8009f38:	a806      	add	r0, sp, #24
 8009f3a:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8009f3e:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8009f42:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8009f46:	f7ff febf 	bl	8009cc8 <ucdr_init_buffer>
 8009f4a:	a993      	add	r1, sp, #588	; 0x24c
 8009f4c:	a806      	add	r0, sp, #24
 8009f4e:	f001 ff47 	bl	800bde0 <uxr_serialize_OBJK_Publisher_Binary>
 8009f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f54:	9311      	str	r3, [sp, #68]	; 0x44
 8009f56:	ac0e      	add	r4, sp, #56	; 0x38
 8009f58:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8009f5c:	9700      	str	r7, [sp, #0]
 8009f5e:	9401      	str	r4, [sp, #4]
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	4628      	mov	r0, r5
 8009f64:	f7ff ff40 	bl	8009de8 <uxr_common_create_entity>
 8009f68:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8009f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f6e:	bf00      	nop

08009f70 <uxr_buffer_create_datawriter_bin>:
 8009f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f74:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009f78:	ac1d      	add	r4, sp, #116	; 0x74
 8009f7a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8009f7e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8009f82:	9105      	str	r1, [sp, #20]
 8009f84:	4606      	mov	r6, r0
 8009f86:	a9a1      	add	r1, sp, #644	; 0x284
 8009f88:	4618      	mov	r0, r3
 8009f8a:	2305      	movs	r3, #5
 8009f8c:	7123      	strb	r3, [r4, #4]
 8009f8e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8009f92:	2703      	movs	r7, #3
 8009f94:	f000 f884 	bl	800a0a0 <uxr_object_id_to_raw>
 8009f98:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8009f9a:	7227      	strb	r7, [r4, #8]
 8009f9c:	a90e      	add	r1, sp, #56	; 0x38
 8009f9e:	f000 f87f 	bl	800a0a0 <uxr_object_id_to_raw>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8009fa8:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8009fac:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8009fb0:	3d00      	subs	r5, #0
 8009fb2:	bf18      	it	ne
 8009fb4:	2501      	movne	r5, #1
 8009fb6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8009fba:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8009fbe:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8009fc2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8009fcc:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8009fd0:	bb8a      	cbnz	r2, 800a036 <uxr_buffer_create_datawriter_bin+0xc6>
 8009fd2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8009fd6:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8009fda:	f04f 0c13 	mov.w	ip, #19
 8009fde:	250b      	movs	r5, #11
 8009fe0:	2221      	movs	r2, #33	; 0x21
 8009fe2:	2111      	movs	r1, #17
 8009fe4:	2009      	movs	r0, #9
 8009fe6:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8009fea:	b923      	cbnz	r3, 8009ff6 <uxr_buffer_create_datawriter_bin+0x86>
 8009fec:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8009ff0:	4672      	mov	r2, lr
 8009ff2:	4661      	mov	r1, ip
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d025      	beq.n	800a04a <uxr_buffer_create_datawriter_bin+0xda>
 8009ffe:	2b03      	cmp	r3, #3
 800a000:	d029      	beq.n	800a056 <uxr_buffer_create_datawriter_bin+0xe6>
 800a002:	b32b      	cbz	r3, 800a050 <uxr_buffer_create_datawriter_bin+0xe0>
 800a004:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a008:	a921      	add	r1, sp, #132	; 0x84
 800a00a:	a806      	add	r0, sp, #24
 800a00c:	f7ff fe5c 	bl	8009cc8 <ucdr_init_buffer>
 800a010:	a90e      	add	r1, sp, #56	; 0x38
 800a012:	a806      	add	r0, sp, #24
 800a014:	f001 ff5a 	bl	800becc <uxr_serialize_OBJK_DataWriter_Binary>
 800a018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a01a:	f8cd 8000 	str.w	r8, [sp]
 800a01e:	9401      	str	r4, [sp, #4]
 800a020:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a024:	60e3      	str	r3, [r4, #12]
 800a026:	4630      	mov	r0, r6
 800a028:	b29b      	uxth	r3, r3
 800a02a:	f7ff fedd 	bl	8009de8 <uxr_common_create_entity>
 800a02e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a036:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800a03a:	f04f 0c12 	mov.w	ip, #18
 800a03e:	250a      	movs	r5, #10
 800a040:	2220      	movs	r2, #32
 800a042:	2110      	movs	r1, #16
 800a044:	2008      	movs	r0, #8
 800a046:	2702      	movs	r7, #2
 800a048:	e7cd      	b.n	8009fe6 <uxr_buffer_create_datawriter_bin+0x76>
 800a04a:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800a04e:	e7d9      	b.n	800a004 <uxr_buffer_create_datawriter_bin+0x94>
 800a050:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800a054:	e7d6      	b.n	800a004 <uxr_buffer_create_datawriter_bin+0x94>
 800a056:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800a05a:	e7d3      	b.n	800a004 <uxr_buffer_create_datawriter_bin+0x94>

0800a05c <uxr_object_id>:
 800a05c:	b082      	sub	sp, #8
 800a05e:	2300      	movs	r3, #0
 800a060:	f88d 1006 	strb.w	r1, [sp, #6]
 800a064:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a068:	f360 030f 	bfi	r3, r0, #0, #16
 800a06c:	f362 431f 	bfi	r3, r2, #16, #16
 800a070:	4618      	mov	r0, r3
 800a072:	b002      	add	sp, #8
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop

0800a078 <uxr_object_id_from_raw>:
 800a078:	7843      	ldrb	r3, [r0, #1]
 800a07a:	7801      	ldrb	r1, [r0, #0]
 800a07c:	b082      	sub	sp, #8
 800a07e:	f003 020f 	and.w	r2, r3, #15
 800a082:	f88d 2006 	strb.w	r2, [sp, #6]
 800a086:	091b      	lsrs	r3, r3, #4
 800a088:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a08c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800a090:	2000      	movs	r0, #0
 800a092:	f363 000f 	bfi	r0, r3, #0, #16
 800a096:	f362 401f 	bfi	r0, r2, #16, #16
 800a09a:	b002      	add	sp, #8
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop

0800a0a0 <uxr_object_id_to_raw>:
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800a0ac:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800a0b0:	f881 c000 	strb.w	ip, [r1]
 800a0b4:	7048      	strb	r0, [r1, #1]
 800a0b6:	b002      	add	sp, #8
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop

0800a0bc <on_get_fragmentation_info>:
 800a0bc:	b500      	push	{lr}
 800a0be:	b08b      	sub	sp, #44	; 0x2c
 800a0c0:	4601      	mov	r1, r0
 800a0c2:	2204      	movs	r2, #4
 800a0c4:	a802      	add	r0, sp, #8
 800a0c6:	f7ff fdff 	bl	8009cc8 <ucdr_init_buffer>
 800a0ca:	f10d 0305 	add.w	r3, sp, #5
 800a0ce:	f10d 0206 	add.w	r2, sp, #6
 800a0d2:	a901      	add	r1, sp, #4
 800a0d4:	a802      	add	r0, sp, #8
 800a0d6:	f001 f99b 	bl	800b410 <uxr_read_submessage_header>
 800a0da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a0de:	2b0d      	cmp	r3, #13
 800a0e0:	d003      	beq.n	800a0ea <on_get_fragmentation_info+0x2e>
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	b00b      	add	sp, #44	; 0x2c
 800a0e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a0ee:	f013 0f02 	tst.w	r3, #2
 800a0f2:	bf14      	ite	ne
 800a0f4:	2002      	movne	r0, #2
 800a0f6:	2001      	moveq	r0, #1
 800a0f8:	b00b      	add	sp, #44	; 0x2c
 800a0fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0fe:	bf00      	nop

0800a100 <read_submessage_get_info>:
 800a100:	b570      	push	{r4, r5, r6, lr}
 800a102:	2500      	movs	r5, #0
 800a104:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800a108:	4604      	mov	r4, r0
 800a10a:	f44f 7224 	mov.w	r2, #656	; 0x290
 800a10e:	460e      	mov	r6, r1
 800a110:	a810      	add	r0, sp, #64	; 0x40
 800a112:	4629      	mov	r1, r5
 800a114:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800a118:	f007 f8e2 	bl	80112e0 <memset>
 800a11c:	a903      	add	r1, sp, #12
 800a11e:	4630      	mov	r0, r6
 800a120:	f002 f94a 	bl	800c3b8 <uxr_deserialize_GET_INFO_Payload>
 800a124:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a128:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800a12c:	4620      	mov	r0, r4
 800a12e:	f000 ffe5 	bl	800b0fc <uxr_session_header_offset>
 800a132:	462b      	mov	r3, r5
 800a134:	9000      	str	r0, [sp, #0]
 800a136:	220c      	movs	r2, #12
 800a138:	a905      	add	r1, sp, #20
 800a13a:	a808      	add	r0, sp, #32
 800a13c:	f7ff fdb2 	bl	8009ca4 <ucdr_init_buffer_origin_offset>
 800a140:	a910      	add	r1, sp, #64	; 0x40
 800a142:	a808      	add	r0, sp, #32
 800a144:	f002 f9aa 	bl	800c49c <uxr_serialize_INFO_Payload>
 800a148:	9b08      	ldr	r3, [sp, #32]
 800a14a:	462a      	mov	r2, r5
 800a14c:	4629      	mov	r1, r5
 800a14e:	4620      	mov	r0, r4
 800a150:	f000 ff7e 	bl	800b050 <uxr_stamp_session_header>
 800a154:	a808      	add	r0, sp, #32
 800a156:	f7ff fde3 	bl	8009d20 <ucdr_buffer_length>
 800a15a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a15c:	4602      	mov	r2, r0
 800a15e:	a905      	add	r1, sp, #20
 800a160:	e9d3 0400 	ldrd	r0, r4, [r3]
 800a164:	47a0      	blx	r4
 800a166:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800a16a:	bd70      	pop	{r4, r5, r6, pc}

0800a16c <write_submessage_acknack.isra.0>:
 800a16c:	b570      	push	{r4, r5, r6, lr}
 800a16e:	b092      	sub	sp, #72	; 0x48
 800a170:	4605      	mov	r5, r0
 800a172:	460e      	mov	r6, r1
 800a174:	4614      	mov	r4, r2
 800a176:	f000 ffc1 	bl	800b0fc <uxr_session_header_offset>
 800a17a:	a905      	add	r1, sp, #20
 800a17c:	9000      	str	r0, [sp, #0]
 800a17e:	2300      	movs	r3, #0
 800a180:	a80a      	add	r0, sp, #40	; 0x28
 800a182:	2211      	movs	r2, #17
 800a184:	f7ff fd8e 	bl	8009ca4 <ucdr_init_buffer_origin_offset>
 800a188:	2218      	movs	r2, #24
 800a18a:	fb02 5404 	mla	r4, r2, r4, r5
 800a18e:	2300      	movs	r3, #0
 800a190:	2205      	movs	r2, #5
 800a192:	3450      	adds	r4, #80	; 0x50
 800a194:	210a      	movs	r1, #10
 800a196:	a80a      	add	r0, sp, #40	; 0x28
 800a198:	f001 f920 	bl	800b3dc <uxr_buffer_submessage_header>
 800a19c:	a903      	add	r1, sp, #12
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f004 ff20 	bl	800efe4 <uxr_compute_acknack>
 800a1a4:	ba40      	rev16	r0, r0
 800a1a6:	f8ad 000e 	strh.w	r0, [sp, #14]
 800a1aa:	a903      	add	r1, sp, #12
 800a1ac:	a80a      	add	r0, sp, #40	; 0x28
 800a1ae:	f88d 6010 	strb.w	r6, [sp, #16]
 800a1b2:	f002 f9e3 	bl	800c57c <uxr_serialize_ACKNACK_Payload>
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ba:	4611      	mov	r1, r2
 800a1bc:	4628      	mov	r0, r5
 800a1be:	f000 ff47 	bl	800b050 <uxr_stamp_session_header>
 800a1c2:	a80a      	add	r0, sp, #40	; 0x28
 800a1c4:	f7ff fdac 	bl	8009d20 <ucdr_buffer_length>
 800a1c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	a905      	add	r1, sp, #20
 800a1ce:	e9d3 0400 	ldrd	r0, r4, [r3]
 800a1d2:	47a0      	blx	r4
 800a1d4:	b012      	add	sp, #72	; 0x48
 800a1d6:	bd70      	pop	{r4, r5, r6, pc}

0800a1d8 <uxr_init_session>:
 800a1d8:	b510      	push	{r4, lr}
 800a1da:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800a210 <uxr_init_session+0x38>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800a1ea:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800a1ee:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800a1f2:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800a1f6:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800a1fa:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800a1fe:	2181      	movs	r1, #129	; 0x81
 800a200:	f000 fe92 	bl	800af28 <uxr_init_session_info>
 800a204:	f104 0008 	add.w	r0, r4, #8
 800a208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a20c:	f001 b802 	b.w	800b214 <uxr_init_stream_storage>
	...

0800a218 <uxr_set_status_callback>:
 800a218:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop

0800a220 <uxr_set_topic_callback>:
 800a220:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop

0800a228 <uxr_set_request_callback>:
 800a228:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop

0800a230 <uxr_set_reply_callback>:
 800a230:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop

0800a238 <uxr_create_output_best_effort_stream>:
 800a238:	b510      	push	{r4, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	e9cd 2100 	strd	r2, r1, [sp]
 800a240:	4604      	mov	r4, r0
 800a242:	f000 ff5b 	bl	800b0fc <uxr_session_header_offset>
 800a246:	e9dd 2100 	ldrd	r2, r1, [sp]
 800a24a:	4603      	mov	r3, r0
 800a24c:	f104 0008 	add.w	r0, r4, #8
 800a250:	b004      	add	sp, #16
 800a252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a256:	f001 b827 	b.w	800b2a8 <uxr_add_output_best_effort_buffer>
 800a25a:	bf00      	nop

0800a25c <uxr_create_output_reliable_stream>:
 800a25c:	b510      	push	{r4, lr}
 800a25e:	b088      	sub	sp, #32
 800a260:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800a264:	4604      	mov	r4, r0
 800a266:	9303      	str	r3, [sp, #12]
 800a268:	f000 ff48 	bl	800b0fc <uxr_session_header_offset>
 800a26c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800a270:	9000      	str	r0, [sp, #0]
 800a272:	9905      	ldr	r1, [sp, #20]
 800a274:	f104 0008 	add.w	r0, r4, #8
 800a278:	f001 f82a 	bl	800b2d0 <uxr_add_output_reliable_buffer>
 800a27c:	2200      	movs	r2, #0
 800a27e:	b2c3      	uxtb	r3, r0
 800a280:	f363 0207 	bfi	r2, r3, #0, #8
 800a284:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800a288:	f363 220f 	bfi	r2, r3, #8, #8
 800a28c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800a290:	f363 4217 	bfi	r2, r3, #16, #8
 800a294:	0e03      	lsrs	r3, r0, #24
 800a296:	f363 621f 	bfi	r2, r3, #24, #8
 800a29a:	4610      	mov	r0, r2
 800a29c:	b008      	add	sp, #32
 800a29e:	bd10      	pop	{r4, pc}

0800a2a0 <uxr_create_input_best_effort_stream>:
 800a2a0:	b082      	sub	sp, #8
 800a2a2:	3008      	adds	r0, #8
 800a2a4:	b002      	add	sp, #8
 800a2a6:	f001 b82d 	b.w	800b304 <uxr_add_input_best_effort_buffer>
 800a2aa:	bf00      	nop

0800a2ac <uxr_create_input_reliable_stream>:
 800a2ac:	b510      	push	{r4, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	4c0b      	ldr	r4, [pc, #44]	; (800a2e0 <uxr_create_input_reliable_stream+0x34>)
 800a2b2:	9400      	str	r4, [sp, #0]
 800a2b4:	3008      	adds	r0, #8
 800a2b6:	f001 f83b 	bl	800b330 <uxr_add_input_reliable_buffer>
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	b2c3      	uxtb	r3, r0
 800a2be:	f363 0207 	bfi	r2, r3, #0, #8
 800a2c2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800a2c6:	f363 220f 	bfi	r2, r3, #8, #8
 800a2ca:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800a2ce:	f363 4217 	bfi	r2, r3, #16, #8
 800a2d2:	0e03      	lsrs	r3, r0, #24
 800a2d4:	f363 621f 	bfi	r2, r3, #24, #8
 800a2d8:	4610      	mov	r0, r2
 800a2da:	b004      	add	sp, #16
 800a2dc:	bd10      	pop	{r4, pc}
 800a2de:	bf00      	nop
 800a2e0:	0800a0bd 	.word	0x0800a0bd

0800a2e4 <uxr_epoch_nanos>:
 800a2e4:	b510      	push	{r4, lr}
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	f001 f8d8 	bl	800b49c <uxr_nanos>
 800a2ec:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800a2f0:	1ac0      	subs	r0, r0, r3
 800a2f2:	eb61 0102 	sbc.w	r1, r1, r2
 800a2f6:	bd10      	pop	{r4, pc}

0800a2f8 <uxr_flash_output_streams>:
 800a2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2fc:	7e03      	ldrb	r3, [r0, #24]
 800a2fe:	b084      	sub	sp, #16
 800a300:	4604      	mov	r4, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d035      	beq.n	800a372 <uxr_flash_output_streams+0x7a>
 800a306:	f04f 0900 	mov.w	r9, #0
 800a30a:	4648      	mov	r0, r9
 800a30c:	f10d 0802 	add.w	r8, sp, #2
 800a310:	af03      	add	r7, sp, #12
 800a312:	ae02      	add	r6, sp, #8
 800a314:	e006      	b.n	800a324 <uxr_flash_output_streams+0x2c>
 800a316:	7e23      	ldrb	r3, [r4, #24]
 800a318:	f109 0901 	add.w	r9, r9, #1
 800a31c:	fa5f f089 	uxtb.w	r0, r9
 800a320:	4283      	cmp	r3, r0
 800a322:	d926      	bls.n	800a372 <uxr_flash_output_streams+0x7a>
 800a324:	2201      	movs	r2, #1
 800a326:	4611      	mov	r1, r2
 800a328:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800a32c:	f000 ff1e 	bl	800b16c <uxr_stream_id>
 800a330:	3508      	adds	r5, #8
 800a332:	4684      	mov	ip, r0
 800a334:	4643      	mov	r3, r8
 800a336:	463a      	mov	r2, r7
 800a338:	4631      	mov	r1, r6
 800a33a:	4628      	mov	r0, r5
 800a33c:	f8cd c004 	str.w	ip, [sp, #4]
 800a340:	f004 fed6 	bl	800f0f0 <uxr_prepare_best_effort_buffer_to_send>
 800a344:	2800      	cmp	r0, #0
 800a346:	d0e6      	beq.n	800a316 <uxr_flash_output_streams+0x1e>
 800a348:	9b02      	ldr	r3, [sp, #8]
 800a34a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a34e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800a352:	4620      	mov	r0, r4
 800a354:	f000 fe7c 	bl	800b050 <uxr_stamp_session_header>
 800a358:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a35a:	9a03      	ldr	r2, [sp, #12]
 800a35c:	685d      	ldr	r5, [r3, #4]
 800a35e:	6818      	ldr	r0, [r3, #0]
 800a360:	9902      	ldr	r1, [sp, #8]
 800a362:	47a8      	blx	r5
 800a364:	f109 0901 	add.w	r9, r9, #1
 800a368:	7e23      	ldrb	r3, [r4, #24]
 800a36a:	fa5f f089 	uxtb.w	r0, r9
 800a36e:	4283      	cmp	r3, r0
 800a370:	d8d8      	bhi.n	800a324 <uxr_flash_output_streams+0x2c>
 800a372:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800a376:	b38b      	cbz	r3, 800a3dc <uxr_flash_output_streams+0xe4>
 800a378:	f04f 0900 	mov.w	r9, #0
 800a37c:	f10d 0802 	add.w	r8, sp, #2
 800a380:	af03      	add	r7, sp, #12
 800a382:	ae02      	add	r6, sp, #8
 800a384:	4648      	mov	r0, r9
 800a386:	2201      	movs	r2, #1
 800a388:	2102      	movs	r1, #2
 800a38a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800a38e:	f000 feed 	bl	800b16c <uxr_stream_id>
 800a392:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800a396:	3520      	adds	r5, #32
 800a398:	9001      	str	r0, [sp, #4]
 800a39a:	e00d      	b.n	800a3b8 <uxr_flash_output_streams+0xc0>
 800a39c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a3a0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800a3a4:	9b02      	ldr	r3, [sp, #8]
 800a3a6:	f000 fe53 	bl	800b050 <uxr_stamp_session_header>
 800a3aa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a3ac:	9a03      	ldr	r2, [sp, #12]
 800a3ae:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800a3b2:	9902      	ldr	r1, [sp, #8]
 800a3b4:	6818      	ldr	r0, [r3, #0]
 800a3b6:	47d0      	blx	sl
 800a3b8:	4643      	mov	r3, r8
 800a3ba:	463a      	mov	r2, r7
 800a3bc:	4631      	mov	r1, r6
 800a3be:	4628      	mov	r0, r5
 800a3c0:	f005 f8b4 	bl	800f52c <uxr_prepare_next_reliable_buffer_to_send>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1e7      	bne.n	800a39c <uxr_flash_output_streams+0xa4>
 800a3cc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800a3d0:	f109 0901 	add.w	r9, r9, #1
 800a3d4:	fa5f f089 	uxtb.w	r0, r9
 800a3d8:	4283      	cmp	r3, r0
 800a3da:	d8d4      	bhi.n	800a386 <uxr_flash_output_streams+0x8e>
 800a3dc:	b004      	add	sp, #16
 800a3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e2:	bf00      	nop

0800a3e4 <read_submessage_info>:
 800a3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e8:	460d      	mov	r5, r1
 800a3ea:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800a3ee:	4669      	mov	r1, sp
 800a3f0:	4607      	mov	r7, r0
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	f001 feee 	bl	800c1d4 <uxr_deserialize_BaseObjectReply>
 800a3f8:	a902      	add	r1, sp, #8
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800a402:	f7fe fc9d 	bl	8008d40 <ucdr_deserialize_bool>
 800a406:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a40a:	4004      	ands	r4, r0
 800a40c:	b2e4      	uxtb	r4, r4
 800a40e:	b95b      	cbnz	r3, 800a428 <read_submessage_info+0x44>
 800a410:	a987      	add	r1, sp, #540	; 0x21c
 800a412:	4628      	mov	r0, r5
 800a414:	f7fe fc94 	bl	8008d40 <ucdr_deserialize_bool>
 800a418:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800a41c:	4606      	mov	r6, r0
 800a41e:	b94b      	cbnz	r3, 800a434 <read_submessage_info+0x50>
 800a420:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800a424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a428:	a903      	add	r1, sp, #12
 800a42a:	4628      	mov	r0, r5
 800a42c:	f001 fd7a 	bl	800bf24 <uxr_deserialize_ObjectVariant>
 800a430:	4004      	ands	r4, r0
 800a432:	e7ed      	b.n	800a410 <read_submessage_info+0x2c>
 800a434:	a988      	add	r1, sp, #544	; 0x220
 800a436:	4628      	mov	r0, r5
 800a438:	f7fe fcb0 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800a43c:	4234      	tst	r4, r6
 800a43e:	d0ef      	beq.n	800a420 <read_submessage_info+0x3c>
 800a440:	2800      	cmp	r0, #0
 800a442:	d0ed      	beq.n	800a420 <read_submessage_info+0x3c>
 800a444:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800a448:	2b0d      	cmp	r3, #13
 800a44a:	d1e9      	bne.n	800a420 <read_submessage_info+0x3c>
 800a44c:	a98a      	add	r1, sp, #552	; 0x228
 800a44e:	4628      	mov	r0, r5
 800a450:	f7ff fa4a 	bl	80098e8 <ucdr_deserialize_int16_t>
 800a454:	b140      	cbz	r0, 800a468 <read_submessage_info+0x84>
 800a456:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	dd07      	ble.n	800a46e <read_submessage_info+0x8a>
 800a45e:	f1b8 0f00 	cmp.w	r8, #0
 800a462:	bf14      	ite	ne
 800a464:	2001      	movne	r0, #1
 800a466:	2002      	moveq	r0, #2
 800a468:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800a46c:	e7d8      	b.n	800a420 <read_submessage_info+0x3c>
 800a46e:	2000      	movs	r0, #0
 800a470:	e7fa      	b.n	800a468 <read_submessage_info+0x84>
 800a472:	bf00      	nop

0800a474 <read_submessage_list>:
 800a474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a478:	b097      	sub	sp, #92	; 0x5c
 800a47a:	4ec1      	ldr	r6, [pc, #772]	; (800a780 <read_submessage_list+0x30c>)
 800a47c:	9209      	str	r2, [sp, #36]	; 0x24
 800a47e:	4604      	mov	r4, r0
 800a480:	460d      	mov	r5, r1
 800a482:	f04f 0801 	mov.w	r8, #1
 800a486:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800a48a:	aa0c      	add	r2, sp, #48	; 0x30
 800a48c:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800a490:	4628      	mov	r0, r5
 800a492:	f000 ffbd 	bl	800b410 <uxr_read_submessage_header>
 800a496:	2800      	cmp	r0, #0
 800a498:	f000 813e 	beq.w	800a718 <read_submessage_list+0x2a4>
 800a49c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800a4a0:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800a4a4:	3b02      	subs	r3, #2
 800a4a6:	2b0d      	cmp	r3, #13
 800a4a8:	d8ed      	bhi.n	800a486 <read_submessage_list+0x12>
 800a4aa:	a101      	add	r1, pc, #4	; (adr r1, 800a4b0 <read_submessage_list+0x3c>)
 800a4ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4b0:	0800a70f 	.word	0x0800a70f
 800a4b4:	0800a487 	.word	0x0800a487
 800a4b8:	0800a6ff 	.word	0x0800a6ff
 800a4bc:	0800a69d 	.word	0x0800a69d
 800a4c0:	0800a693 	.word	0x0800a693
 800a4c4:	0800a487 	.word	0x0800a487
 800a4c8:	0800a487 	.word	0x0800a487
 800a4cc:	0800a5f3 	.word	0x0800a5f3
 800a4d0:	0800a583 	.word	0x0800a583
 800a4d4:	0800a543 	.word	0x0800a543
 800a4d8:	0800a487 	.word	0x0800a487
 800a4dc:	0800a487 	.word	0x0800a487
 800a4e0:	0800a487 	.word	0x0800a487
 800a4e4:	0800a4e9 	.word	0x0800a4e9
 800a4e8:	a910      	add	r1, sp, #64	; 0x40
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	f002 f896 	bl	800c61c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800a4f0:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 800a4f4:	f1b9 0f00 	cmp.w	r9, #0
 800a4f8:	f000 8116 	beq.w	800a728 <read_submessage_list+0x2b4>
 800a4fc:	f000 ffce 	bl	800b49c <uxr_nanos>
 800a500:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800a502:	4602      	mov	r2, r0
 800a504:	460b      	mov	r3, r1
 800a506:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a508:	2100      	movs	r1, #0
 800a50a:	468c      	mov	ip, r1
 800a50c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800a510:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800a514:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a516:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800a518:	468c      	mov	ip, r1
 800a51a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800a51e:	46e2      	mov	sl, ip
 800a520:	46bc      	mov	ip, r7
 800a522:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 800a526:	fbc0 7106 	smlal	r7, r1, r0, r6
 800a52a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800a52e:	e9cd 7100 	strd	r7, r1, [sp]
 800a532:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800a536:	9106      	str	r1, [sp, #24]
 800a538:	4620      	mov	r0, r4
 800a53a:	47c8      	blx	r9
 800a53c:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 800a540:	e7a1      	b.n	800a486 <read_submessage_list+0x12>
 800a542:	a910      	add	r1, sp, #64	; 0x40
 800a544:	4628      	mov	r0, r5
 800a546:	f002 f857 	bl	800c5f8 <uxr_deserialize_HEARTBEAT_Payload>
 800a54a:	2100      	movs	r1, #0
 800a54c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800a550:	f000 fe36 	bl	800b1c0 <uxr_stream_id_from_raw>
 800a554:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800a558:	900f      	str	r0, [sp, #60]	; 0x3c
 800a55a:	4639      	mov	r1, r7
 800a55c:	f104 0008 	add.w	r0, r4, #8
 800a560:	f000 ff1c 	bl	800b39c <uxr_get_input_reliable_stream>
 800a564:	2800      	cmp	r0, #0
 800a566:	d08e      	beq.n	800a486 <read_submessage_list+0x12>
 800a568:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800a56c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800a570:	f004 fd2c 	bl	800efcc <uxr_process_heartbeat>
 800a574:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800a578:	463a      	mov	r2, r7
 800a57a:	4620      	mov	r0, r4
 800a57c:	f7ff fdf6 	bl	800a16c <write_submessage_acknack.isra.0>
 800a580:	e781      	b.n	800a486 <read_submessage_list+0x12>
 800a582:	a910      	add	r1, sp, #64	; 0x40
 800a584:	4628      	mov	r0, r5
 800a586:	f002 f80f 	bl	800c5a8 <uxr_deserialize_ACKNACK_Payload>
 800a58a:	2100      	movs	r1, #0
 800a58c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800a590:	f000 fe16 	bl	800b1c0 <uxr_stream_id_from_raw>
 800a594:	900d      	str	r0, [sp, #52]	; 0x34
 800a596:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800a59a:	f104 0008 	add.w	r0, r4, #8
 800a59e:	f000 fee9 	bl	800b374 <uxr_get_output_reliable_stream>
 800a5a2:	4607      	mov	r7, r0
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	f43f af6e 	beq.w	800a486 <read_submessage_list+0x12>
 800a5aa:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800a5ae:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800a5b2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800a5b6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800a5ba:	b289      	uxth	r1, r1
 800a5bc:	f005 f860 	bl	800f680 <uxr_process_acknack>
 800a5c0:	4638      	mov	r0, r7
 800a5c2:	f005 f81d 	bl	800f600 <uxr_begin_output_nack_buffer_it>
 800a5c6:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800a5ca:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800a5ce:	e006      	b.n	800a5de <read_submessage_list+0x16a>
 800a5d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a5d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5d4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800a5d8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a5da:	6818      	ldr	r0, [r3, #0]
 800a5dc:	47c8      	blx	r9
 800a5de:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800a5e2:	aa0f      	add	r2, sp, #60	; 0x3c
 800a5e4:	4651      	mov	r1, sl
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	f005 f80c 	bl	800f604 <uxr_next_reliable_nack_buffer_to_send>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d1ef      	bne.n	800a5d0 <read_submessage_list+0x15c>
 800a5f0:	e749      	b.n	800a486 <read_submessage_list+0x12>
 800a5f2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800a5f6:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800a5fa:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800a5fe:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800a602:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800a606:	4651      	mov	r1, sl
 800a608:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a60c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 800a610:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800a614:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800a618:	4628      	mov	r0, r5
 800a61a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800a61e:	f001 fd23 	bl	800c068 <uxr_deserialize_BaseObjectRequest>
 800a622:	4650      	mov	r0, sl
 800a624:	a90f      	add	r1, sp, #60	; 0x3c
 800a626:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800a62a:	f000 fd8d 	bl	800b148 <uxr_parse_base_object_request>
 800a62e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800a632:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a634:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800a638:	9110      	str	r1, [sp, #64]	; 0x40
 800a63a:	3f04      	subs	r7, #4
 800a63c:	f009 090e 	and.w	r9, r9, #14
 800a640:	b2bf      	uxth	r7, r7
 800a642:	f1bb 0f00 	cmp.w	fp, #0
 800a646:	d006      	beq.n	800a656 <read_submessage_list+0x1e2>
 800a648:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	4652      	mov	r2, sl
 800a650:	2300      	movs	r3, #0
 800a652:	4620      	mov	r0, r4
 800a654:	47d8      	blx	fp
 800a656:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a658:	b16a      	cbz	r2, 800a676 <read_submessage_list+0x202>
 800a65a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a65c:	2100      	movs	r1, #0
 800a65e:	3802      	subs	r0, #2
 800a660:	e002      	b.n	800a668 <read_submessage_list+0x1f4>
 800a662:	3101      	adds	r1, #1
 800a664:	4291      	cmp	r1, r2
 800a666:	d006      	beq.n	800a676 <read_submessage_list+0x202>
 800a668:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800a66c:	4553      	cmp	r3, sl
 800a66e:	d1f8      	bne.n	800a662 <read_submessage_list+0x1ee>
 800a670:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a672:	2200      	movs	r2, #0
 800a674:	545a      	strb	r2, [r3, r1]
 800a676:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800a67a:	9102      	str	r1, [sp, #8]
 800a67c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a67e:	9101      	str	r1, [sp, #4]
 800a680:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a682:	9100      	str	r1, [sp, #0]
 800a684:	464b      	mov	r3, r9
 800a686:	463a      	mov	r2, r7
 800a688:	4629      	mov	r1, r5
 800a68a:	4620      	mov	r0, r4
 800a68c:	f005 f87c 	bl	800f788 <read_submessage_format>
 800a690:	e6f9      	b.n	800a486 <read_submessage_list+0x12>
 800a692:	4629      	mov	r1, r5
 800a694:	4620      	mov	r0, r4
 800a696:	f7ff fea5 	bl	800a3e4 <read_submessage_info>
 800a69a:	e6f4      	b.n	800a486 <read_submessage_list+0x12>
 800a69c:	2a00      	cmp	r2, #0
 800a69e:	d03e      	beq.n	800a71e <read_submessage_list+0x2aa>
 800a6a0:	a910      	add	r1, sp, #64	; 0x40
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	f001 fedc 	bl	800c460 <uxr_deserialize_STATUS_Payload>
 800a6a8:	a90e      	add	r1, sp, #56	; 0x38
 800a6aa:	aa0d      	add	r2, sp, #52	; 0x34
 800a6ac:	a810      	add	r0, sp, #64	; 0x40
 800a6ae:	f000 fd4b 	bl	800b148 <uxr_parse_base_object_request>
 800a6b2:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800a6b6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a6b8:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800a6bc:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 800a6c0:	910f      	str	r1, [sp, #60]	; 0x3c
 800a6c2:	f1ba 0f00 	cmp.w	sl, #0
 800a6c6:	d006      	beq.n	800a6d6 <read_submessage_list+0x262>
 800a6c8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	463a      	mov	r2, r7
 800a6d0:	464b      	mov	r3, r9
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	47d0      	blx	sl
 800a6d6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a6d8:	2a00      	cmp	r2, #0
 800a6da:	f43f aed4 	beq.w	800a486 <read_submessage_list+0x12>
 800a6de:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	3802      	subs	r0, #2
 800a6e4:	e003      	b.n	800a6ee <read_submessage_list+0x27a>
 800a6e6:	3101      	adds	r1, #1
 800a6e8:	4291      	cmp	r1, r2
 800a6ea:	f43f aecc 	beq.w	800a486 <read_submessage_list+0x12>
 800a6ee:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800a6f2:	42bb      	cmp	r3, r7
 800a6f4:	d1f7      	bne.n	800a6e6 <read_submessage_list+0x272>
 800a6f6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a6f8:	f803 9001 	strb.w	r9, [r3, r1]
 800a6fc:	e6c3      	b.n	800a486 <read_submessage_list+0x12>
 800a6fe:	2a00      	cmp	r2, #0
 800a700:	f47f aec1 	bne.w	800a486 <read_submessage_list+0x12>
 800a704:	4629      	mov	r1, r5
 800a706:	4620      	mov	r0, r4
 800a708:	f000 fc64 	bl	800afd4 <uxr_read_create_session_status>
 800a70c:	e6bb      	b.n	800a486 <read_submessage_list+0x12>
 800a70e:	4629      	mov	r1, r5
 800a710:	4620      	mov	r0, r4
 800a712:	f7ff fcf5 	bl	800a100 <read_submessage_get_info>
 800a716:	e6b6      	b.n	800a486 <read_submessage_list+0x12>
 800a718:	b017      	add	sp, #92	; 0x5c
 800a71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a71e:	4629      	mov	r1, r5
 800a720:	4620      	mov	r0, r4
 800a722:	f000 fc63 	bl	800afec <uxr_read_delete_session_status>
 800a726:	e6ae      	b.n	800a486 <read_submessage_list+0x12>
 800a728:	f000 feb8 	bl	800b49c <uxr_nanos>
 800a72c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a72e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a730:	464f      	mov	r7, r9
 800a732:	fbc3 2706 	smlal	r2, r7, r3, r6
 800a736:	1812      	adds	r2, r2, r0
 800a738:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a73a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a73c:	eb47 0101 	adc.w	r1, r7, r1
 800a740:	464f      	mov	r7, r9
 800a742:	fbc3 0706 	smlal	r0, r7, r3, r6
 800a746:	463b      	mov	r3, r7
 800a748:	4684      	mov	ip, r0
 800a74a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 800a74e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800a752:	eb1c 0c00 	adds.w	ip, ip, r0
 800a756:	464f      	mov	r7, r9
 800a758:	eb43 0307 	adc.w	r3, r3, r7
 800a75c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800a760:	eb61 0303 	sbc.w	r3, r1, r3
 800a764:	0fda      	lsrs	r2, r3, #31
 800a766:	eb12 020c 	adds.w	r2, r2, ip
 800a76a:	f143 0300 	adc.w	r3, r3, #0
 800a76e:	0852      	lsrs	r2, r2, #1
 800a770:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800a774:	105b      	asrs	r3, r3, #1
 800a776:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 800a77a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800a77e:	e6dd      	b.n	800a53c <read_submessage_list+0xc8>
 800a780:	3b9aca00 	.word	0x3b9aca00

0800a784 <listen_message_reliably>:
 800a784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a788:	1e0b      	subs	r3, r1, #0
 800a78a:	b09d      	sub	sp, #116	; 0x74
 800a78c:	bfb8      	it	lt
 800a78e:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800a792:	4680      	mov	r8, r0
 800a794:	9305      	str	r3, [sp, #20]
 800a796:	f000 fe67 	bl	800b468 <uxr_millis>
 800a79a:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800a79e:	4681      	mov	r9, r0
 800a7a0:	2a00      	cmp	r2, #0
 800a7a2:	f000 80a1 	beq.w	800a8e8 <listen_message_reliably+0x164>
 800a7a6:	2600      	movs	r6, #0
 800a7a8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a7ac:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800a7b0:	9303      	str	r3, [sp, #12]
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	460f      	mov	r7, r1
 800a7b6:	e00f      	b.n	800a7d8 <listen_message_reliably+0x54>
 800a7b8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800a7bc:	9903      	ldr	r1, [sp, #12]
 800a7be:	455a      	cmp	r2, fp
 800a7c0:	f106 0601 	add.w	r6, r6, #1
 800a7c4:	eb73 0101 	sbcs.w	r1, r3, r1
 800a7c8:	b2f0      	uxtb	r0, r6
 800a7ca:	da01      	bge.n	800a7d0 <listen_message_reliably+0x4c>
 800a7cc:	4693      	mov	fp, r2
 800a7ce:	9303      	str	r3, [sp, #12]
 800a7d0:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800a7d4:	4283      	cmp	r3, r0
 800a7d6:	d960      	bls.n	800a89a <listen_message_reliably+0x116>
 800a7d8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800a7dc:	2102      	movs	r1, #2
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f000 fcc4 	bl	800b16c <uxr_stream_id>
 800a7e4:	00e4      	lsls	r4, r4, #3
 800a7e6:	f104 0520 	add.w	r5, r4, #32
 800a7ea:	4445      	add	r5, r8
 800a7ec:	4601      	mov	r1, r0
 800a7ee:	463b      	mov	r3, r7
 800a7f0:	464a      	mov	r2, r9
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	9109      	str	r1, [sp, #36]	; 0x24
 800a7f6:	f004 fed9 	bl	800f5ac <uxr_update_output_stream_heartbeat_timestamp>
 800a7fa:	eb08 0304 	add.w	r3, r8, r4
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d0da      	beq.n	800a7b8 <listen_message_reliably+0x34>
 800a802:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a806:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800a80a:	9304      	str	r3, [sp, #16]
 800a80c:	4640      	mov	r0, r8
 800a80e:	f000 fc75 	bl	800b0fc <uxr_session_header_offset>
 800a812:	3501      	adds	r5, #1
 800a814:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800a818:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800a81c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800a820:	2300      	movs	r3, #0
 800a822:	2211      	movs	r2, #17
 800a824:	9000      	str	r0, [sp, #0]
 800a826:	a90c      	add	r1, sp, #48	; 0x30
 800a828:	4650      	mov	r0, sl
 800a82a:	f7ff fa3b 	bl	8009ca4 <ucdr_init_buffer_origin_offset>
 800a82e:	2300      	movs	r3, #0
 800a830:	2205      	movs	r2, #5
 800a832:	210b      	movs	r1, #11
 800a834:	4650      	mov	r0, sl
 800a836:	f000 fdd1 	bl	800b3dc <uxr_buffer_submessage_header>
 800a83a:	8968      	ldrh	r0, [r5, #10]
 800a83c:	2101      	movs	r1, #1
 800a83e:	f005 f86d 	bl	800f91c <uxr_seq_num_add>
 800a842:	892b      	ldrh	r3, [r5, #8]
 800a844:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800a848:	4602      	mov	r2, r0
 800a84a:	9b04      	ldr	r3, [sp, #16]
 800a84c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800a850:	a90a      	add	r1, sp, #40	; 0x28
 800a852:	4650      	mov	r0, sl
 800a854:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800a858:	f001 feba 	bl	800c5d0 <uxr_serialize_HEARTBEAT_Payload>
 800a85c:	2200      	movs	r2, #0
 800a85e:	4611      	mov	r1, r2
 800a860:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a862:	4640      	mov	r0, r8
 800a864:	f000 fbf4 	bl	800b050 <uxr_stamp_session_header>
 800a868:	4650      	mov	r0, sl
 800a86a:	f7ff fa59 	bl	8009d20 <ucdr_buffer_length>
 800a86e:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800a872:	4602      	mov	r2, r0
 800a874:	a90c      	add	r1, sp, #48	; 0x30
 800a876:	e9d3 0500 	ldrd	r0, r5, [r3]
 800a87a:	4444      	add	r4, r8
 800a87c:	47a8      	blx	r5
 800a87e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800a882:	9903      	ldr	r1, [sp, #12]
 800a884:	455a      	cmp	r2, fp
 800a886:	f106 0601 	add.w	r6, r6, #1
 800a88a:	eb73 0101 	sbcs.w	r1, r3, r1
 800a88e:	b2f0      	uxtb	r0, r6
 800a890:	db9c      	blt.n	800a7cc <listen_message_reliably+0x48>
 800a892:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800a896:	4283      	cmp	r3, r0
 800a898:	d89e      	bhi.n	800a7d8 <listen_message_reliably+0x54>
 800a89a:	9a03      	ldr	r2, [sp, #12]
 800a89c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	bf08      	it	eq
 800a8a4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800a8a8:	d01e      	beq.n	800a8e8 <listen_message_reliably+0x164>
 800a8aa:	ebab 0309 	sub.w	r3, fp, r9
 800a8ae:	9905      	ldr	r1, [sp, #20]
 800a8b0:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	bf08      	it	eq
 800a8b8:	2301      	moveq	r3, #1
 800a8ba:	4299      	cmp	r1, r3
 800a8bc:	bfa8      	it	ge
 800a8be:	4619      	movge	r1, r3
 800a8c0:	6894      	ldr	r4, [r2, #8]
 800a8c2:	6810      	ldr	r0, [r2, #0]
 800a8c4:	4689      	mov	r9, r1
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	aa08      	add	r2, sp, #32
 800a8ca:	a907      	add	r1, sp, #28
 800a8cc:	47a0      	blx	r4
 800a8ce:	b968      	cbnz	r0, 800a8ec <listen_message_reliably+0x168>
 800a8d0:	9b05      	ldr	r3, [sp, #20]
 800a8d2:	eba3 0309 	sub.w	r3, r3, r9
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	9305      	str	r3, [sp, #20]
 800a8da:	f73f af5c 	bgt.w	800a796 <listen_message_reliably+0x12>
 800a8de:	4604      	mov	r4, r0
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	b01d      	add	sp, #116	; 0x74
 800a8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e8:	9b05      	ldr	r3, [sp, #20]
 800a8ea:	e7e0      	b.n	800a8ae <listen_message_reliably+0x12a>
 800a8ec:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800a8f0:	4604      	mov	r4, r0
 800a8f2:	a80c      	add	r0, sp, #48	; 0x30
 800a8f4:	f7ff f9e8 	bl	8009cc8 <ucdr_init_buffer>
 800a8f8:	2500      	movs	r5, #0
 800a8fa:	f10d 031a 	add.w	r3, sp, #26
 800a8fe:	aa06      	add	r2, sp, #24
 800a900:	a90c      	add	r1, sp, #48	; 0x30
 800a902:	4640      	mov	r0, r8
 800a904:	f88d 5018 	strb.w	r5, [sp, #24]
 800a908:	f000 fbb6 	bl	800b078 <uxr_read_session_header>
 800a90c:	b918      	cbnz	r0, 800a916 <listen_message_reliably+0x192>
 800a90e:	4620      	mov	r0, r4
 800a910:	b01d      	add	sp, #116	; 0x74
 800a912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a916:	4629      	mov	r1, r5
 800a918:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800a91c:	f000 fc50 	bl	800b1c0 <uxr_stream_id_from_raw>
 800a920:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800a924:	2d01      	cmp	r5, #1
 800a926:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800a92a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800a92e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800a932:	d04b      	beq.n	800a9cc <listen_message_reliably+0x248>
 800a934:	2d02      	cmp	r5, #2
 800a936:	d00f      	beq.n	800a958 <listen_message_reliably+0x1d4>
 800a938:	2d00      	cmp	r5, #0
 800a93a:	d1e8      	bne.n	800a90e <listen_message_reliably+0x18a>
 800a93c:	4629      	mov	r1, r5
 800a93e:	4628      	mov	r0, r5
 800a940:	f000 fc3e 	bl	800b1c0 <uxr_stream_id_from_raw>
 800a944:	a90c      	add	r1, sp, #48	; 0x30
 800a946:	4602      	mov	r2, r0
 800a948:	4640      	mov	r0, r8
 800a94a:	920a      	str	r2, [sp, #40]	; 0x28
 800a94c:	f7ff fd92 	bl	800a474 <read_submessage_list>
 800a950:	4620      	mov	r0, r4
 800a952:	b01d      	add	sp, #116	; 0x74
 800a954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a958:	4631      	mov	r1, r6
 800a95a:	f108 0008 	add.w	r0, r8, #8
 800a95e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800a962:	f000 fd1b 	bl	800b39c <uxr_get_input_reliable_stream>
 800a966:	4607      	mov	r7, r0
 800a968:	b338      	cbz	r0, 800a9ba <listen_message_reliably+0x236>
 800a96a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a96c:	9203      	str	r2, [sp, #12]
 800a96e:	a80c      	add	r0, sp, #48	; 0x30
 800a970:	f7ff f9da 	bl	8009d28 <ucdr_buffer_remaining>
 800a974:	4603      	mov	r3, r0
 800a976:	f10d 0019 	add.w	r0, sp, #25
 800a97a:	9000      	str	r0, [sp, #0]
 800a97c:	9a03      	ldr	r2, [sp, #12]
 800a97e:	4651      	mov	r1, sl
 800a980:	4638      	mov	r0, r7
 800a982:	f004 fa29 	bl	800edd8 <uxr_receive_reliable_message>
 800a986:	b1c0      	cbz	r0, 800a9ba <listen_message_reliably+0x236>
 800a988:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800a98c:	b393      	cbz	r3, 800a9f4 <listen_message_reliably+0x270>
 800a98e:	ad14      	add	r5, sp, #80	; 0x50
 800a990:	f04f 0a02 	mov.w	sl, #2
 800a994:	e00a      	b.n	800a9ac <listen_message_reliably+0x228>
 800a996:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800a99a:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800a99e:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800a9a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	4640      	mov	r0, r8
 800a9a8:	f7ff fd64 	bl	800a474 <read_submessage_list>
 800a9ac:	2204      	movs	r2, #4
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	4638      	mov	r0, r7
 800a9b2:	f004 fa91 	bl	800eed8 <uxr_next_input_reliable_buffer_available>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	d1ed      	bne.n	800a996 <listen_message_reliably+0x212>
 800a9ba:	4640      	mov	r0, r8
 800a9bc:	4632      	mov	r2, r6
 800a9be:	4649      	mov	r1, r9
 800a9c0:	f7ff fbd4 	bl	800a16c <write_submessage_acknack.isra.0>
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	b01d      	add	sp, #116	; 0x74
 800a9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9cc:	4631      	mov	r1, r6
 800a9ce:	f108 0008 	add.w	r0, r8, #8
 800a9d2:	f000 fcd9 	bl	800b388 <uxr_get_input_best_effort_stream>
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d099      	beq.n	800a90e <listen_message_reliably+0x18a>
 800a9da:	4651      	mov	r1, sl
 800a9dc:	f004 f968 	bl	800ecb0 <uxr_receive_best_effort_message>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	d094      	beq.n	800a90e <listen_message_reliably+0x18a>
 800a9e4:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800a9e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9ea:	a90c      	add	r1, sp, #48	; 0x30
 800a9ec:	4640      	mov	r0, r8
 800a9ee:	f7ff fd41 	bl	800a474 <read_submessage_list>
 800a9f2:	e78c      	b.n	800a90e <listen_message_reliably+0x18a>
 800a9f4:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800a9f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9fa:	a90c      	add	r1, sp, #48	; 0x30
 800a9fc:	4640      	mov	r0, r8
 800a9fe:	f7ff fd39 	bl	800a474 <read_submessage_list>
 800aa02:	e7c4      	b.n	800a98e <listen_message_reliably+0x20a>

0800aa04 <uxr_run_session_until_confirm_delivery>:
 800aa04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa08:	4606      	mov	r6, r0
 800aa0a:	460d      	mov	r5, r1
 800aa0c:	f000 fd2c 	bl	800b468 <uxr_millis>
 800aa10:	4607      	mov	r7, r0
 800aa12:	4630      	mov	r0, r6
 800aa14:	f7ff fc70 	bl	800a2f8 <uxr_flash_output_streams>
 800aa18:	2d00      	cmp	r5, #0
 800aa1a:	f106 0808 	add.w	r8, r6, #8
 800aa1e:	bfa8      	it	ge
 800aa20:	462c      	movge	r4, r5
 800aa22:	da07      	bge.n	800aa34 <uxr_run_session_until_confirm_delivery+0x30>
 800aa24:	e00e      	b.n	800aa44 <uxr_run_session_until_confirm_delivery+0x40>
 800aa26:	f7ff fead 	bl	800a784 <listen_message_reliably>
 800aa2a:	f000 fd1d 	bl	800b468 <uxr_millis>
 800aa2e:	1bc3      	subs	r3, r0, r7
 800aa30:	1aec      	subs	r4, r5, r3
 800aa32:	d407      	bmi.n	800aa44 <uxr_run_session_until_confirm_delivery+0x40>
 800aa34:	4640      	mov	r0, r8
 800aa36:	f000 fcbb 	bl	800b3b0 <uxr_output_streams_confirmed>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	4621      	mov	r1, r4
 800aa3e:	4630      	mov	r0, r6
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d0f0      	beq.n	800aa26 <uxr_run_session_until_confirm_delivery+0x22>
 800aa44:	4640      	mov	r0, r8
 800aa46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa4a:	f000 bcb1 	b.w	800b3b0 <uxr_output_streams_confirmed>
 800aa4e:	bf00      	nop

0800aa50 <uxr_run_session_until_all_status>:
 800aa50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa54:	9c08      	ldr	r4, [sp, #32]
 800aa56:	4606      	mov	r6, r0
 800aa58:	460f      	mov	r7, r1
 800aa5a:	4691      	mov	r9, r2
 800aa5c:	461d      	mov	r5, r3
 800aa5e:	f7ff fc4b 	bl	800a2f8 <uxr_flash_output_streams>
 800aa62:	b124      	cbz	r4, 800aa6e <uxr_run_session_until_all_status+0x1e>
 800aa64:	4622      	mov	r2, r4
 800aa66:	21ff      	movs	r1, #255	; 0xff
 800aa68:	4628      	mov	r0, r5
 800aa6a:	f006 fc39 	bl	80112e0 <memset>
 800aa6e:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 800aa72:	67f4      	str	r4, [r6, #124]	; 0x7c
 800aa74:	f000 fcf8 	bl	800b468 <uxr_millis>
 800aa78:	3d01      	subs	r5, #1
 800aa7a:	f1a9 0902 	sub.w	r9, r9, #2
 800aa7e:	4680      	mov	r8, r0
 800aa80:	4639      	mov	r1, r7
 800aa82:	4630      	mov	r0, r6
 800aa84:	f7ff fe7e 	bl	800a784 <listen_message_reliably>
 800aa88:	f000 fcee 	bl	800b468 <uxr_millis>
 800aa8c:	eba0 0008 	sub.w	r0, r0, r8
 800aa90:	1a39      	subs	r1, r7, r0
 800aa92:	b344      	cbz	r4, 800aae6 <uxr_run_session_until_all_status+0x96>
 800aa94:	4628      	mov	r0, r5
 800aa96:	46ac      	mov	ip, r5
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e002      	b.n	800aaa2 <uxr_run_session_until_all_status+0x52>
 800aa9c:	42a3      	cmp	r3, r4
 800aa9e:	d20d      	bcs.n	800aabc <uxr_run_session_until_all_status+0x6c>
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800aaa6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800aaaa:	d1f7      	bne.n	800aa9c <uxr_run_session_until_all_status+0x4c>
 800aaac:	42a3      	cmp	r3, r4
 800aaae:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800aab2:	d213      	bcs.n	800aadc <uxr_run_session_until_all_status+0x8c>
 800aab4:	2a00      	cmp	r2, #0
 800aab6:	d0f3      	beq.n	800aaa0 <uxr_run_session_until_all_status+0x50>
 800aab8:	2900      	cmp	r1, #0
 800aaba:	dce2      	bgt.n	800aa82 <uxr_run_session_until_all_status+0x32>
 800aabc:	2300      	movs	r3, #0
 800aabe:	67f3      	str	r3, [r6, #124]	; 0x7c
 800aac0:	442c      	add	r4, r5
 800aac2:	e001      	b.n	800aac8 <uxr_run_session_until_all_status+0x78>
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d812      	bhi.n	800aaee <uxr_run_session_until_all_status+0x9e>
 800aac8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800aacc:	4284      	cmp	r4, r0
 800aace:	d1f9      	bne.n	800aac4 <uxr_run_session_until_all_status+0x74>
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	bf8c      	ite	hi
 800aad4:	2000      	movhi	r0, #0
 800aad6:	2001      	movls	r0, #1
 800aad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aadc:	2900      	cmp	r1, #0
 800aade:	dded      	ble.n	800aabc <uxr_run_session_until_all_status+0x6c>
 800aae0:	2a00      	cmp	r2, #0
 800aae2:	d1ce      	bne.n	800aa82 <uxr_run_session_until_all_status+0x32>
 800aae4:	e7ea      	b.n	800aabc <uxr_run_session_until_all_status+0x6c>
 800aae6:	67f4      	str	r4, [r6, #124]	; 0x7c
 800aae8:	2001      	movs	r0, #1
 800aaea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaee:	2000      	movs	r0, #0
 800aaf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800aaf4 <wait_session_status>:
 800aaf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf8:	4604      	mov	r4, r0
 800aafa:	b09d      	sub	sp, #116	; 0x74
 800aafc:	20ff      	movs	r0, #255	; 0xff
 800aafe:	7160      	strb	r0, [r4, #5]
 800ab00:	9303      	str	r3, [sp, #12]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f000 80b6 	beq.w	800ac74 <wait_session_status+0x180>
 800ab08:	468a      	mov	sl, r1
 800ab0a:	4691      	mov	r9, r2
 800ab0c:	f04f 0b00 	mov.w	fp, #0
 800ab10:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ab12:	464a      	mov	r2, r9
 800ab14:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ab18:	4651      	mov	r1, sl
 800ab1a:	47a8      	blx	r5
 800ab1c:	f000 fca4 	bl	800b468 <uxr_millis>
 800ab20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ab24:	4605      	mov	r5, r0
 800ab26:	e009      	b.n	800ab3c <wait_session_status+0x48>
 800ab28:	f000 fc9e 	bl	800b468 <uxr_millis>
 800ab2c:	1b40      	subs	r0, r0, r5
 800ab2e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	dd40      	ble.n	800abb8 <wait_session_status+0xc4>
 800ab36:	7960      	ldrb	r0, [r4, #5]
 800ab38:	28ff      	cmp	r0, #255	; 0xff
 800ab3a:	d145      	bne.n	800abc8 <wait_session_status+0xd4>
 800ab3c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800ab3e:	a908      	add	r1, sp, #32
 800ab40:	6896      	ldr	r6, [r2, #8]
 800ab42:	6810      	ldr	r0, [r2, #0]
 800ab44:	aa09      	add	r2, sp, #36	; 0x24
 800ab46:	47b0      	blx	r6
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	d0ed      	beq.n	800ab28 <wait_session_status+0x34>
 800ab4c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800ab50:	a80c      	add	r0, sp, #48	; 0x30
 800ab52:	f7ff f8b9 	bl	8009cc8 <ucdr_init_buffer>
 800ab56:	2600      	movs	r6, #0
 800ab58:	f10d 031e 	add.w	r3, sp, #30
 800ab5c:	aa07      	add	r2, sp, #28
 800ab5e:	a90c      	add	r1, sp, #48	; 0x30
 800ab60:	4620      	mov	r0, r4
 800ab62:	f88d 601c 	strb.w	r6, [sp, #28]
 800ab66:	f000 fa87 	bl	800b078 <uxr_read_session_header>
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	d0dc      	beq.n	800ab28 <wait_session_status+0x34>
 800ab6e:	4631      	mov	r1, r6
 800ab70:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ab74:	f000 fb24 	bl	800b1c0 <uxr_stream_id_from_raw>
 800ab78:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800ab7c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800ab80:	9302      	str	r3, [sp, #8]
 800ab82:	2f01      	cmp	r7, #1
 800ab84:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800ab88:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800ab8c:	d05c      	beq.n	800ac48 <wait_session_status+0x154>
 800ab8e:	2f02      	cmp	r7, #2
 800ab90:	d020      	beq.n	800abd4 <wait_session_status+0xe0>
 800ab92:	2f00      	cmp	r7, #0
 800ab94:	d1c8      	bne.n	800ab28 <wait_session_status+0x34>
 800ab96:	4639      	mov	r1, r7
 800ab98:	4638      	mov	r0, r7
 800ab9a:	f000 fb11 	bl	800b1c0 <uxr_stream_id_from_raw>
 800ab9e:	a90c      	add	r1, sp, #48	; 0x30
 800aba0:	4602      	mov	r2, r0
 800aba2:	900b      	str	r0, [sp, #44]	; 0x2c
 800aba4:	4620      	mov	r0, r4
 800aba6:	f7ff fc65 	bl	800a474 <read_submessage_list>
 800abaa:	f000 fc5d 	bl	800b468 <uxr_millis>
 800abae:	1b40      	subs	r0, r0, r5
 800abb0:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	dcbe      	bgt.n	800ab36 <wait_session_status+0x42>
 800abb8:	9b03      	ldr	r3, [sp, #12]
 800abba:	7960      	ldrb	r0, [r4, #5]
 800abbc:	f10b 0b01 	add.w	fp, fp, #1
 800abc0:	455b      	cmp	r3, fp
 800abc2:	d001      	beq.n	800abc8 <wait_session_status+0xd4>
 800abc4:	28ff      	cmp	r0, #255	; 0xff
 800abc6:	d0a3      	beq.n	800ab10 <wait_session_status+0x1c>
 800abc8:	38ff      	subs	r0, #255	; 0xff
 800abca:	bf18      	it	ne
 800abcc:	2001      	movne	r0, #1
 800abce:	b01d      	add	sp, #116	; 0x74
 800abd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800abd8:	9304      	str	r3, [sp, #16]
 800abda:	4631      	mov	r1, r6
 800abdc:	f104 0008 	add.w	r0, r4, #8
 800abe0:	f000 fbdc 	bl	800b39c <uxr_get_input_reliable_stream>
 800abe4:	4680      	mov	r8, r0
 800abe6:	b348      	cbz	r0, 800ac3c <wait_session_status+0x148>
 800abe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abea:	9205      	str	r2, [sp, #20]
 800abec:	a80c      	add	r0, sp, #48	; 0x30
 800abee:	f7ff f89b 	bl	8009d28 <ucdr_buffer_remaining>
 800abf2:	4603      	mov	r3, r0
 800abf4:	f10d 001d 	add.w	r0, sp, #29
 800abf8:	9000      	str	r0, [sp, #0]
 800abfa:	9a05      	ldr	r2, [sp, #20]
 800abfc:	9902      	ldr	r1, [sp, #8]
 800abfe:	4640      	mov	r0, r8
 800ac00:	f004 f8ea 	bl	800edd8 <uxr_receive_reliable_message>
 800ac04:	b1d0      	cbz	r0, 800ac3c <wait_session_status+0x148>
 800ac06:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d03a      	beq.n	800ac84 <wait_session_status+0x190>
 800ac0e:	9f04      	ldr	r7, [sp, #16]
 800ac10:	e00a      	b.n	800ac28 <wait_session_status+0x134>
 800ac12:	f04f 0302 	mov.w	r3, #2
 800ac16:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800ac1a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800ac1e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800ac22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac24:	f7ff fc26 	bl	800a474 <read_submessage_list>
 800ac28:	a914      	add	r1, sp, #80	; 0x50
 800ac2a:	2204      	movs	r2, #4
 800ac2c:	4640      	mov	r0, r8
 800ac2e:	f004 f953 	bl	800eed8 <uxr_next_input_reliable_buffer_available>
 800ac32:	4603      	mov	r3, r0
 800ac34:	a914      	add	r1, sp, #80	; 0x50
 800ac36:	4620      	mov	r0, r4
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1ea      	bne.n	800ac12 <wait_session_status+0x11e>
 800ac3c:	9904      	ldr	r1, [sp, #16]
 800ac3e:	4632      	mov	r2, r6
 800ac40:	4620      	mov	r0, r4
 800ac42:	f7ff fa93 	bl	800a16c <write_submessage_acknack.isra.0>
 800ac46:	e76f      	b.n	800ab28 <wait_session_status+0x34>
 800ac48:	4631      	mov	r1, r6
 800ac4a:	f104 0008 	add.w	r0, r4, #8
 800ac4e:	f000 fb9b 	bl	800b388 <uxr_get_input_best_effort_stream>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	f43f af68 	beq.w	800ab28 <wait_session_status+0x34>
 800ac58:	9902      	ldr	r1, [sp, #8]
 800ac5a:	f004 f829 	bl	800ecb0 <uxr_receive_best_effort_message>
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	f43f af62 	beq.w	800ab28 <wait_session_status+0x34>
 800ac64:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800ac68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac6a:	a90c      	add	r1, sp, #48	; 0x30
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	f7ff fc01 	bl	800a474 <read_submessage_list>
 800ac72:	e759      	b.n	800ab28 <wait_session_status+0x34>
 800ac74:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ac76:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ac7a:	47a0      	blx	r4
 800ac7c:	2001      	movs	r0, #1
 800ac7e:	b01d      	add	sp, #116	; 0x74
 800ac80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac84:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800ac88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac8a:	a90c      	add	r1, sp, #48	; 0x30
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f7ff fbf1 	bl	800a474 <read_submessage_list>
 800ac92:	e7bc      	b.n	800ac0e <wait_session_status+0x11a>

0800ac94 <uxr_delete_session_retries>:
 800ac94:	b530      	push	{r4, r5, lr}
 800ac96:	b08f      	sub	sp, #60	; 0x3c
 800ac98:	4604      	mov	r4, r0
 800ac9a:	460d      	mov	r5, r1
 800ac9c:	f000 fa2e 	bl	800b0fc <uxr_session_header_offset>
 800aca0:	2300      	movs	r3, #0
 800aca2:	2210      	movs	r2, #16
 800aca4:	9000      	str	r0, [sp, #0]
 800aca6:	a902      	add	r1, sp, #8
 800aca8:	a806      	add	r0, sp, #24
 800acaa:	f7fe fffb 	bl	8009ca4 <ucdr_init_buffer_origin_offset>
 800acae:	a906      	add	r1, sp, #24
 800acb0:	4620      	mov	r0, r4
 800acb2:	f000 f973 	bl	800af9c <uxr_buffer_delete_session>
 800acb6:	2200      	movs	r2, #0
 800acb8:	4611      	mov	r1, r2
 800acba:	9b06      	ldr	r3, [sp, #24]
 800acbc:	4620      	mov	r0, r4
 800acbe:	f000 f9c7 	bl	800b050 <uxr_stamp_session_header>
 800acc2:	a806      	add	r0, sp, #24
 800acc4:	f7ff f82c 	bl	8009d20 <ucdr_buffer_length>
 800acc8:	462b      	mov	r3, r5
 800acca:	4602      	mov	r2, r0
 800accc:	a902      	add	r1, sp, #8
 800acce:	4620      	mov	r0, r4
 800acd0:	f7ff ff10 	bl	800aaf4 <wait_session_status>
 800acd4:	b118      	cbz	r0, 800acde <uxr_delete_session_retries+0x4a>
 800acd6:	7960      	ldrb	r0, [r4, #5]
 800acd8:	fab0 f080 	clz	r0, r0
 800acdc:	0940      	lsrs	r0, r0, #5
 800acde:	b00f      	add	sp, #60	; 0x3c
 800ace0:	bd30      	pop	{r4, r5, pc}
 800ace2:	bf00      	nop

0800ace4 <uxr_create_session>:
 800ace4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace8:	f100 0b08 	add.w	fp, r0, #8
 800acec:	b0ab      	sub	sp, #172	; 0xac
 800acee:	4604      	mov	r4, r0
 800acf0:	4658      	mov	r0, fp
 800acf2:	f000 fa99 	bl	800b228 <uxr_reset_stream_storage>
 800acf6:	4620      	mov	r0, r4
 800acf8:	f000 fa00 	bl	800b0fc <uxr_session_header_offset>
 800acfc:	2300      	movs	r3, #0
 800acfe:	9000      	str	r0, [sp, #0]
 800ad00:	221c      	movs	r2, #28
 800ad02:	a90b      	add	r1, sp, #44	; 0x2c
 800ad04:	a812      	add	r0, sp, #72	; 0x48
 800ad06:	f7fe ffcd 	bl	8009ca4 <ucdr_init_buffer_origin_offset>
 800ad0a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ad0c:	8a1a      	ldrh	r2, [r3, #16]
 800ad0e:	3a04      	subs	r2, #4
 800ad10:	b292      	uxth	r2, r2
 800ad12:	a912      	add	r1, sp, #72	; 0x48
 800ad14:	4620      	mov	r0, r4
 800ad16:	f000 f917 	bl	800af48 <uxr_buffer_create_session>
 800ad1a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f000 f983 	bl	800b028 <uxr_stamp_create_session_header>
 800ad22:	a812      	add	r0, sp, #72	; 0x48
 800ad24:	f7fe fffc 	bl	8009d20 <ucdr_buffer_length>
 800ad28:	23ff      	movs	r3, #255	; 0xff
 800ad2a:	7163      	strb	r3, [r4, #5]
 800ad2c:	230a      	movs	r3, #10
 800ad2e:	46da      	mov	sl, fp
 800ad30:	9303      	str	r3, [sp, #12]
 800ad32:	4683      	mov	fp, r0
 800ad34:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ad36:	465a      	mov	r2, fp
 800ad38:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ad3c:	a90b      	add	r1, sp, #44	; 0x2c
 800ad3e:	47a8      	blx	r5
 800ad40:	f000 fb92 	bl	800b468 <uxr_millis>
 800ad44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ad48:	4605      	mov	r5, r0
 800ad4a:	e009      	b.n	800ad60 <uxr_create_session+0x7c>
 800ad4c:	f000 fb8c 	bl	800b468 <uxr_millis>
 800ad50:	1b40      	subs	r0, r0, r5
 800ad52:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	7962      	ldrb	r2, [r4, #5]
 800ad5a:	dd38      	ble.n	800adce <uxr_create_session+0xea>
 800ad5c:	2aff      	cmp	r2, #255	; 0xff
 800ad5e:	d13c      	bne.n	800adda <uxr_create_session+0xf6>
 800ad60:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800ad62:	a907      	add	r1, sp, #28
 800ad64:	6896      	ldr	r6, [r2, #8]
 800ad66:	6810      	ldr	r0, [r2, #0]
 800ad68:	aa08      	add	r2, sp, #32
 800ad6a:	47b0      	blx	r6
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	d0ed      	beq.n	800ad4c <uxr_create_session+0x68>
 800ad70:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800ad74:	a81a      	add	r0, sp, #104	; 0x68
 800ad76:	f7fe ffa7 	bl	8009cc8 <ucdr_init_buffer>
 800ad7a:	2600      	movs	r6, #0
 800ad7c:	f10d 031a 	add.w	r3, sp, #26
 800ad80:	aa06      	add	r2, sp, #24
 800ad82:	a91a      	add	r1, sp, #104	; 0x68
 800ad84:	4620      	mov	r0, r4
 800ad86:	f88d 6018 	strb.w	r6, [sp, #24]
 800ad8a:	f000 f975 	bl	800b078 <uxr_read_session_header>
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	d0dc      	beq.n	800ad4c <uxr_create_session+0x68>
 800ad92:	4631      	mov	r1, r6
 800ad94:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ad98:	f000 fa12 	bl	800b1c0 <uxr_stream_id_from_raw>
 800ad9c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800ada0:	2e01      	cmp	r6, #1
 800ada2:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800ada6:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800adaa:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800adae:	d053      	beq.n	800ae58 <uxr_create_session+0x174>
 800adb0:	2e02      	cmp	r6, #2
 800adb2:	d018      	beq.n	800ade6 <uxr_create_session+0x102>
 800adb4:	2e00      	cmp	r6, #0
 800adb6:	d1c9      	bne.n	800ad4c <uxr_create_session+0x68>
 800adb8:	4631      	mov	r1, r6
 800adba:	4630      	mov	r0, r6
 800adbc:	f000 fa00 	bl	800b1c0 <uxr_stream_id_from_raw>
 800adc0:	a91a      	add	r1, sp, #104	; 0x68
 800adc2:	4602      	mov	r2, r0
 800adc4:	900a      	str	r0, [sp, #40]	; 0x28
 800adc6:	4620      	mov	r0, r4
 800adc8:	f7ff fb54 	bl	800a474 <read_submessage_list>
 800adcc:	e7be      	b.n	800ad4c <uxr_create_session+0x68>
 800adce:	9b03      	ldr	r3, [sp, #12]
 800add0:	3b01      	subs	r3, #1
 800add2:	9303      	str	r3, [sp, #12]
 800add4:	d001      	beq.n	800adda <uxr_create_session+0xf6>
 800add6:	2aff      	cmp	r2, #255	; 0xff
 800add8:	d0ac      	beq.n	800ad34 <uxr_create_session+0x50>
 800adda:	2a00      	cmp	r2, #0
 800addc:	d051      	beq.n	800ae82 <uxr_create_session+0x19e>
 800adde:	2000      	movs	r0, #0
 800ade0:	b02b      	add	sp, #172	; 0xac
 800ade2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800adea:	9304      	str	r3, [sp, #16]
 800adec:	4639      	mov	r1, r7
 800adee:	4650      	mov	r0, sl
 800adf0:	f000 fad4 	bl	800b39c <uxr_get_input_reliable_stream>
 800adf4:	4680      	mov	r8, r0
 800adf6:	b348      	cbz	r0, 800ae4c <uxr_create_session+0x168>
 800adf8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800adfa:	9205      	str	r2, [sp, #20]
 800adfc:	a81a      	add	r0, sp, #104	; 0x68
 800adfe:	f7fe ff93 	bl	8009d28 <ucdr_buffer_remaining>
 800ae02:	4603      	mov	r3, r0
 800ae04:	f10d 0019 	add.w	r0, sp, #25
 800ae08:	9000      	str	r0, [sp, #0]
 800ae0a:	9a05      	ldr	r2, [sp, #20]
 800ae0c:	4649      	mov	r1, r9
 800ae0e:	4640      	mov	r0, r8
 800ae10:	f003 ffe2 	bl	800edd8 <uxr_receive_reliable_message>
 800ae14:	b1d0      	cbz	r0, 800ae4c <uxr_create_session+0x168>
 800ae16:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d038      	beq.n	800ae90 <uxr_create_session+0x1ac>
 800ae1e:	9e04      	ldr	r6, [sp, #16]
 800ae20:	e00a      	b.n	800ae38 <uxr_create_session+0x154>
 800ae22:	f04f 0302 	mov.w	r3, #2
 800ae26:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 800ae2a:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800ae2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae34:	f7ff fb1e 	bl	800a474 <read_submessage_list>
 800ae38:	a922      	add	r1, sp, #136	; 0x88
 800ae3a:	2204      	movs	r2, #4
 800ae3c:	4640      	mov	r0, r8
 800ae3e:	f004 f84b 	bl	800eed8 <uxr_next_input_reliable_buffer_available>
 800ae42:	4603      	mov	r3, r0
 800ae44:	a922      	add	r1, sp, #136	; 0x88
 800ae46:	4620      	mov	r0, r4
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1ea      	bne.n	800ae22 <uxr_create_session+0x13e>
 800ae4c:	9904      	ldr	r1, [sp, #16]
 800ae4e:	463a      	mov	r2, r7
 800ae50:	4620      	mov	r0, r4
 800ae52:	f7ff f98b 	bl	800a16c <write_submessage_acknack.isra.0>
 800ae56:	e779      	b.n	800ad4c <uxr_create_session+0x68>
 800ae58:	4639      	mov	r1, r7
 800ae5a:	4650      	mov	r0, sl
 800ae5c:	f000 fa94 	bl	800b388 <uxr_get_input_best_effort_stream>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	f43f af73 	beq.w	800ad4c <uxr_create_session+0x68>
 800ae66:	4649      	mov	r1, r9
 800ae68:	f003 ff22 	bl	800ecb0 <uxr_receive_best_effort_message>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	f43f af6d 	beq.w	800ad4c <uxr_create_session+0x68>
 800ae72:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800ae76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae78:	a91a      	add	r1, sp, #104	; 0x68
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f7ff fafa 	bl	800a474 <read_submessage_list>
 800ae80:	e764      	b.n	800ad4c <uxr_create_session+0x68>
 800ae82:	4650      	mov	r0, sl
 800ae84:	f000 f9d0 	bl	800b228 <uxr_reset_stream_storage>
 800ae88:	2001      	movs	r0, #1
 800ae8a:	b02b      	add	sp, #172	; 0xac
 800ae8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae90:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800ae94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae96:	a91a      	add	r1, sp, #104	; 0x68
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f7ff faeb 	bl	800a474 <read_submessage_list>
 800ae9e:	e7be      	b.n	800ae1e <uxr_create_session+0x13a>

0800aea0 <uxr_prepare_stream_to_write_submessage>:
 800aea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aea4:	b082      	sub	sp, #8
 800aea6:	4682      	mov	sl, r0
 800aea8:	4610      	mov	r0, r2
 800aeaa:	4615      	mov	r5, r2
 800aeac:	461e      	mov	r6, r3
 800aeae:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800aeb2:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800aeb6:	9101      	str	r1, [sp, #4]
 800aeb8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800aebc:	f000 face 	bl	800b45c <uxr_submessage_padding>
 800aec0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aec4:	f105 0904 	add.w	r9, r5, #4
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	4481      	add	r9, r0
 800aecc:	d01d      	beq.n	800af0a <uxr_prepare_stream_to_write_submessage+0x6a>
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d116      	bne.n	800af00 <uxr_prepare_stream_to_write_submessage+0x60>
 800aed2:	4621      	mov	r1, r4
 800aed4:	f10a 0008 	add.w	r0, sl, #8
 800aed8:	f000 fa4c 	bl	800b374 <uxr_get_output_reliable_stream>
 800aedc:	4604      	mov	r4, r0
 800aede:	b158      	cbz	r0, 800aef8 <uxr_prepare_stream_to_write_submessage+0x58>
 800aee0:	4649      	mov	r1, r9
 800aee2:	4632      	mov	r2, r6
 800aee4:	f004 f9b4 	bl	800f250 <uxr_prepare_reliable_buffer_to_write>
 800aee8:	4604      	mov	r4, r0
 800aeea:	b12c      	cbz	r4, 800aef8 <uxr_prepare_stream_to_write_submessage+0x58>
 800aeec:	4643      	mov	r3, r8
 800aeee:	b2aa      	uxth	r2, r5
 800aef0:	4639      	mov	r1, r7
 800aef2:	4630      	mov	r0, r6
 800aef4:	f000 fa72 	bl	800b3dc <uxr_buffer_submessage_header>
 800aef8:	4620      	mov	r0, r4
 800aefa:	b002      	add	sp, #8
 800aefc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af00:	2400      	movs	r4, #0
 800af02:	4620      	mov	r0, r4
 800af04:	b002      	add	sp, #8
 800af06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af0a:	4621      	mov	r1, r4
 800af0c:	f10a 0008 	add.w	r0, sl, #8
 800af10:	f000 fa28 	bl	800b364 <uxr_get_output_best_effort_stream>
 800af14:	4604      	mov	r4, r0
 800af16:	2800      	cmp	r0, #0
 800af18:	d0ee      	beq.n	800aef8 <uxr_prepare_stream_to_write_submessage+0x58>
 800af1a:	4649      	mov	r1, r9
 800af1c:	4632      	mov	r2, r6
 800af1e:	f004 f8c7 	bl	800f0b0 <uxr_prepare_best_effort_buffer_to_write>
 800af22:	4604      	mov	r4, r0
 800af24:	e7e1      	b.n	800aeea <uxr_prepare_stream_to_write_submessage+0x4a>
 800af26:	bf00      	nop

0800af28 <uxr_init_session_info>:
 800af28:	0e13      	lsrs	r3, r2, #24
 800af2a:	7043      	strb	r3, [r0, #1]
 800af2c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800af30:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800af34:	7001      	strb	r1, [r0, #0]
 800af36:	70c3      	strb	r3, [r0, #3]
 800af38:	2109      	movs	r1, #9
 800af3a:	23ff      	movs	r3, #255	; 0xff
 800af3c:	f880 c002 	strb.w	ip, [r0, #2]
 800af40:	7102      	strb	r2, [r0, #4]
 800af42:	80c1      	strh	r1, [r0, #6]
 800af44:	7143      	strb	r3, [r0, #5]
 800af46:	4770      	bx	lr

0800af48 <uxr_buffer_create_session>:
 800af48:	b530      	push	{r4, r5, lr}
 800af4a:	b089      	sub	sp, #36	; 0x24
 800af4c:	2300      	movs	r3, #0
 800af4e:	4d12      	ldr	r5, [pc, #72]	; (800af98 <uxr_buffer_create_session+0x50>)
 800af50:	9307      	str	r3, [sp, #28]
 800af52:	f8ad 201c 	strh.w	r2, [sp, #28]
 800af56:	2201      	movs	r2, #1
 800af58:	9301      	str	r3, [sp, #4]
 800af5a:	80c2      	strh	r2, [r0, #6]
 800af5c:	f88d 2004 	strb.w	r2, [sp, #4]
 800af60:	682a      	ldr	r2, [r5, #0]
 800af62:	9200      	str	r2, [sp, #0]
 800af64:	88aa      	ldrh	r2, [r5, #4]
 800af66:	f8ad 2006 	strh.w	r2, [sp, #6]
 800af6a:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800af6e:	9202      	str	r2, [sp, #8]
 800af70:	460c      	mov	r4, r1
 800af72:	7802      	ldrb	r2, [r0, #0]
 800af74:	9303      	str	r3, [sp, #12]
 800af76:	4619      	mov	r1, r3
 800af78:	f88d 200c 	strb.w	r2, [sp, #12]
 800af7c:	4620      	mov	r0, r4
 800af7e:	2210      	movs	r2, #16
 800af80:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800af84:	9306      	str	r3, [sp, #24]
 800af86:	f000 fa29 	bl	800b3dc <uxr_buffer_submessage_header>
 800af8a:	4669      	mov	r1, sp
 800af8c:	4620      	mov	r0, r4
 800af8e:	f001 f981 	bl	800c294 <uxr_serialize_CREATE_CLIENT_Payload>
 800af92:	b009      	add	sp, #36	; 0x24
 800af94:	bd30      	pop	{r4, r5, pc}
 800af96:	bf00      	nop
 800af98:	080123b4 	.word	0x080123b4

0800af9c <uxr_buffer_delete_session>:
 800af9c:	b510      	push	{r4, lr}
 800af9e:	4b0c      	ldr	r3, [pc, #48]	; (800afd0 <uxr_buffer_delete_session+0x34>)
 800afa0:	b082      	sub	sp, #8
 800afa2:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800afa6:	f8ad c006 	strh.w	ip, [sp, #6]
 800afaa:	460c      	mov	r4, r1
 800afac:	2202      	movs	r2, #2
 800afae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afb2:	80c2      	strh	r2, [r0, #6]
 800afb4:	f8ad 3004 	strh.w	r3, [sp, #4]
 800afb8:	2204      	movs	r2, #4
 800afba:	2300      	movs	r3, #0
 800afbc:	2103      	movs	r1, #3
 800afbe:	4620      	mov	r0, r4
 800afc0:	f000 fa0c 	bl	800b3dc <uxr_buffer_submessage_header>
 800afc4:	a901      	add	r1, sp, #4
 800afc6:	4620      	mov	r0, r4
 800afc8:	f001 fa0a 	bl	800c3e0 <uxr_serialize_DELETE_Payload>
 800afcc:	b002      	add	sp, #8
 800afce:	bd10      	pop	{r4, pc}
 800afd0:	080123b4 	.word	0x080123b4

0800afd4 <uxr_read_create_session_status>:
 800afd4:	b510      	push	{r4, lr}
 800afd6:	b088      	sub	sp, #32
 800afd8:	4604      	mov	r4, r0
 800afda:	4608      	mov	r0, r1
 800afdc:	a901      	add	r1, sp, #4
 800afde:	f001 fa0f 	bl	800c400 <uxr_deserialize_STATUS_AGENT_Payload>
 800afe2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800afe6:	7163      	strb	r3, [r4, #5]
 800afe8:	b008      	add	sp, #32
 800afea:	bd10      	pop	{r4, pc}

0800afec <uxr_read_delete_session_status>:
 800afec:	b510      	push	{r4, lr}
 800afee:	4604      	mov	r4, r0
 800aff0:	b084      	sub	sp, #16
 800aff2:	4608      	mov	r0, r1
 800aff4:	a902      	add	r1, sp, #8
 800aff6:	f001 fa33 	bl	800c460 <uxr_deserialize_STATUS_Payload>
 800affa:	88e3      	ldrh	r3, [r4, #6]
 800affc:	2b02      	cmp	r3, #2
 800affe:	d001      	beq.n	800b004 <uxr_read_delete_session_status+0x18>
 800b000:	b004      	add	sp, #16
 800b002:	bd10      	pop	{r4, pc}
 800b004:	f10d 000a 	add.w	r0, sp, #10
 800b008:	f7ff f836 	bl	800a078 <uxr_object_id_from_raw>
 800b00c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800b010:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800b014:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b018:	b29b      	uxth	r3, r3
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	bf04      	itt	eq
 800b01e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800b022:	7163      	strbeq	r3, [r4, #5]
 800b024:	b004      	add	sp, #16
 800b026:	bd10      	pop	{r4, pc}

0800b028 <uxr_stamp_create_session_header>:
 800b028:	b510      	push	{r4, lr}
 800b02a:	2208      	movs	r2, #8
 800b02c:	b08a      	sub	sp, #40	; 0x28
 800b02e:	4604      	mov	r4, r0
 800b030:	eb0d 0002 	add.w	r0, sp, r2
 800b034:	f7fe fe48 	bl	8009cc8 <ucdr_init_buffer>
 800b038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b03c:	9400      	str	r4, [sp, #0]
 800b03e:	2300      	movs	r3, #0
 800b040:	461a      	mov	r2, r3
 800b042:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800b046:	a802      	add	r0, sp, #8
 800b048:	f000 fbc2 	bl	800b7d0 <uxr_serialize_message_header>
 800b04c:	b00a      	add	sp, #40	; 0x28
 800b04e:	bd10      	pop	{r4, pc}

0800b050 <uxr_stamp_session_header>:
 800b050:	b530      	push	{r4, r5, lr}
 800b052:	b08d      	sub	sp, #52	; 0x34
 800b054:	4604      	mov	r4, r0
 800b056:	460d      	mov	r5, r1
 800b058:	9203      	str	r2, [sp, #12]
 800b05a:	4619      	mov	r1, r3
 800b05c:	a804      	add	r0, sp, #16
 800b05e:	2208      	movs	r2, #8
 800b060:	f7fe fe32 	bl	8009cc8 <ucdr_init_buffer>
 800b064:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b068:	9b03      	ldr	r3, [sp, #12]
 800b06a:	9400      	str	r4, [sp, #0]
 800b06c:	462a      	mov	r2, r5
 800b06e:	a804      	add	r0, sp, #16
 800b070:	f000 fbae 	bl	800b7d0 <uxr_serialize_message_header>
 800b074:	b00d      	add	sp, #52	; 0x34
 800b076:	bd30      	pop	{r4, r5, pc}

0800b078 <uxr_read_session_header>:
 800b078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b07c:	4607      	mov	r7, r0
 800b07e:	b084      	sub	sp, #16
 800b080:	4608      	mov	r0, r1
 800b082:	460c      	mov	r4, r1
 800b084:	4615      	mov	r5, r2
 800b086:	461e      	mov	r6, r3
 800b088:	f7fe fe4e 	bl	8009d28 <ucdr_buffer_remaining>
 800b08c:	2808      	cmp	r0, #8
 800b08e:	d803      	bhi.n	800b098 <uxr_read_session_header+0x20>
 800b090:	2000      	movs	r0, #0
 800b092:	b004      	add	sp, #16
 800b094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b098:	f10d 080c 	add.w	r8, sp, #12
 800b09c:	4633      	mov	r3, r6
 800b09e:	462a      	mov	r2, r5
 800b0a0:	f8cd 8000 	str.w	r8, [sp]
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f10d 010b 	add.w	r1, sp, #11
 800b0aa:	f000 fbaf 	bl	800b80c <uxr_deserialize_message_header>
 800b0ae:	783a      	ldrb	r2, [r7, #0]
 800b0b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d1eb      	bne.n	800b090 <uxr_read_session_header+0x18>
 800b0b8:	061b      	lsls	r3, r3, #24
 800b0ba:	d41c      	bmi.n	800b0f6 <uxr_read_session_header+0x7e>
 800b0bc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800b0c0:	787b      	ldrb	r3, [r7, #1]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d003      	beq.n	800b0ce <uxr_read_session_header+0x56>
 800b0c6:	2001      	movs	r0, #1
 800b0c8:	f080 0001 	eor.w	r0, r0, #1
 800b0cc:	e7e1      	b.n	800b092 <uxr_read_session_header+0x1a>
 800b0ce:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800b0d2:	78bb      	ldrb	r3, [r7, #2]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	f107 0102 	add.w	r1, r7, #2
 800b0da:	d1f4      	bne.n	800b0c6 <uxr_read_session_header+0x4e>
 800b0dc:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800b0e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d1ee      	bne.n	800b0c6 <uxr_read_session_header+0x4e>
 800b0e8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800b0ec:	784b      	ldrb	r3, [r1, #1]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d1e9      	bne.n	800b0c6 <uxr_read_session_header+0x4e>
 800b0f2:	2000      	movs	r0, #0
 800b0f4:	e7e8      	b.n	800b0c8 <uxr_read_session_header+0x50>
 800b0f6:	2001      	movs	r0, #1
 800b0f8:	e7cb      	b.n	800b092 <uxr_read_session_header+0x1a>
 800b0fa:	bf00      	nop

0800b0fc <uxr_session_header_offset>:
 800b0fc:	f990 3000 	ldrsb.w	r3, [r0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	bfac      	ite	ge
 800b104:	2008      	movge	r0, #8
 800b106:	2004      	movlt	r0, #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop

0800b10c <uxr_init_base_object_request>:
 800b10c:	b510      	push	{r4, lr}
 800b10e:	88c3      	ldrh	r3, [r0, #6]
 800b110:	b082      	sub	sp, #8
 800b112:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800b116:	9101      	str	r1, [sp, #4]
 800b118:	f1a3 010a 	sub.w	r1, r3, #10
 800b11c:	b289      	uxth	r1, r1
 800b11e:	42a1      	cmp	r1, r4
 800b120:	d80e      	bhi.n	800b140 <uxr_init_base_object_request+0x34>
 800b122:	3301      	adds	r3, #1
 800b124:	b29c      	uxth	r4, r3
 800b126:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	80c4      	strh	r4, [r0, #6]
 800b12e:	9801      	ldr	r0, [sp, #4]
 800b130:	7011      	strb	r1, [r2, #0]
 800b132:	7053      	strb	r3, [r2, #1]
 800b134:	1c91      	adds	r1, r2, #2
 800b136:	f7fe ffb3 	bl	800a0a0 <uxr_object_id_to_raw>
 800b13a:	4620      	mov	r0, r4
 800b13c:	b002      	add	sp, #8
 800b13e:	bd10      	pop	{r4, pc}
 800b140:	230a      	movs	r3, #10
 800b142:	2100      	movs	r1, #0
 800b144:	461c      	mov	r4, r3
 800b146:	e7f1      	b.n	800b12c <uxr_init_base_object_request+0x20>

0800b148 <uxr_parse_base_object_request>:
 800b148:	b570      	push	{r4, r5, r6, lr}
 800b14a:	4604      	mov	r4, r0
 800b14c:	3002      	adds	r0, #2
 800b14e:	460d      	mov	r5, r1
 800b150:	4616      	mov	r6, r2
 800b152:	f7fe ff91 	bl	800a078 <uxr_object_id_from_raw>
 800b156:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800b15a:	8028      	strh	r0, [r5, #0]
 800b15c:	806b      	strh	r3, [r5, #2]
 800b15e:	7822      	ldrb	r2, [r4, #0]
 800b160:	7863      	ldrb	r3, [r4, #1]
 800b162:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b166:	8033      	strh	r3, [r6, #0]
 800b168:	bd70      	pop	{r4, r5, r6, pc}
 800b16a:	bf00      	nop

0800b16c <uxr_stream_id>:
 800b16c:	2901      	cmp	r1, #1
 800b16e:	b082      	sub	sp, #8
 800b170:	d01d      	beq.n	800b1ae <uxr_stream_id+0x42>
 800b172:	2902      	cmp	r1, #2
 800b174:	f04f 0c00 	mov.w	ip, #0
 800b178:	d01e      	beq.n	800b1b8 <uxr_stream_id+0x4c>
 800b17a:	2300      	movs	r3, #0
 800b17c:	f36c 0307 	bfi	r3, ip, #0, #8
 800b180:	f360 230f 	bfi	r3, r0, #8, #8
 800b184:	f361 4317 	bfi	r3, r1, #16, #8
 800b188:	f362 631f 	bfi	r3, r2, #24, #8
 800b18c:	b2da      	uxtb	r2, r3
 800b18e:	2000      	movs	r0, #0
 800b190:	f362 0007 	bfi	r0, r2, #0, #8
 800b194:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b198:	f362 200f 	bfi	r0, r2, #8, #8
 800b19c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b1a0:	f362 4017 	bfi	r0, r2, #16, #8
 800b1a4:	0e1b      	lsrs	r3, r3, #24
 800b1a6:	f363 601f 	bfi	r0, r3, #24, #8
 800b1aa:	b002      	add	sp, #8
 800b1ac:	4770      	bx	lr
 800b1ae:	f100 0c01 	add.w	ip, r0, #1
 800b1b2:	fa5f fc8c 	uxtb.w	ip, ip
 800b1b6:	e7e0      	b.n	800b17a <uxr_stream_id+0xe>
 800b1b8:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 800b1bc:	e7dd      	b.n	800b17a <uxr_stream_id+0xe>
 800b1be:	bf00      	nop

0800b1c0 <uxr_stream_id_from_raw>:
 800b1c0:	b082      	sub	sp, #8
 800b1c2:	b130      	cbz	r0, 800b1d2 <uxr_stream_id_from_raw+0x12>
 800b1c4:	0603      	lsls	r3, r0, #24
 800b1c6:	d420      	bmi.n	800b20a <uxr_stream_id_from_raw+0x4a>
 800b1c8:	1e42      	subs	r2, r0, #1
 800b1ca:	b2d2      	uxtb	r2, r2
 800b1cc:	f04f 0c01 	mov.w	ip, #1
 800b1d0:	e001      	b.n	800b1d6 <uxr_stream_id_from_raw+0x16>
 800b1d2:	4684      	mov	ip, r0
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	f360 0307 	bfi	r3, r0, #0, #8
 800b1dc:	f362 230f 	bfi	r3, r2, #8, #8
 800b1e0:	f36c 4317 	bfi	r3, ip, #16, #8
 800b1e4:	f361 631f 	bfi	r3, r1, #24, #8
 800b1e8:	b2da      	uxtb	r2, r3
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	f362 0007 	bfi	r0, r2, #0, #8
 800b1f0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b1f4:	f362 200f 	bfi	r0, r2, #8, #8
 800b1f8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b1fc:	f362 4017 	bfi	r0, r2, #16, #8
 800b200:	0e1b      	lsrs	r3, r3, #24
 800b202:	f363 601f 	bfi	r0, r3, #24, #8
 800b206:	b002      	add	sp, #8
 800b208:	4770      	bx	lr
 800b20a:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800b20e:	f04f 0c02 	mov.w	ip, #2
 800b212:	e7e0      	b.n	800b1d6 <uxr_stream_id_from_raw+0x16>

0800b214 <uxr_init_stream_storage>:
 800b214:	2300      	movs	r3, #0
 800b216:	7403      	strb	r3, [r0, #16]
 800b218:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800b21c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800b220:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800b224:	4770      	bx	lr
 800b226:	bf00      	nop

0800b228 <uxr_reset_stream_storage>:
 800b228:	b570      	push	{r4, r5, r6, lr}
 800b22a:	7c03      	ldrb	r3, [r0, #16]
 800b22c:	4604      	mov	r4, r0
 800b22e:	b153      	cbz	r3, 800b246 <uxr_reset_stream_storage+0x1e>
 800b230:	4606      	mov	r6, r0
 800b232:	2500      	movs	r5, #0
 800b234:	4630      	mov	r0, r6
 800b236:	f003 ff35 	bl	800f0a4 <uxr_reset_output_best_effort_stream>
 800b23a:	7c23      	ldrb	r3, [r4, #16]
 800b23c:	3501      	adds	r5, #1
 800b23e:	42ab      	cmp	r3, r5
 800b240:	f106 0610 	add.w	r6, r6, #16
 800b244:	d8f6      	bhi.n	800b234 <uxr_reset_stream_storage+0xc>
 800b246:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b24a:	b163      	cbz	r3, 800b266 <uxr_reset_stream_storage+0x3e>
 800b24c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b250:	2500      	movs	r5, #0
 800b252:	4630      	mov	r0, r6
 800b254:	f003 fd28 	bl	800eca8 <uxr_reset_input_best_effort_stream>
 800b258:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b25c:	3501      	adds	r5, #1
 800b25e:	42ab      	cmp	r3, r5
 800b260:	f106 0602 	add.w	r6, r6, #2
 800b264:	d8f5      	bhi.n	800b252 <uxr_reset_stream_storage+0x2a>
 800b266:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800b26a:	b163      	cbz	r3, 800b286 <uxr_reset_stream_storage+0x5e>
 800b26c:	f104 0618 	add.w	r6, r4, #24
 800b270:	2500      	movs	r5, #0
 800b272:	4630      	mov	r0, r6
 800b274:	f003 ffc2 	bl	800f1fc <uxr_reset_output_reliable_stream>
 800b278:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800b27c:	3501      	adds	r5, #1
 800b27e:	42ab      	cmp	r3, r5
 800b280:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800b284:	d8f5      	bhi.n	800b272 <uxr_reset_stream_storage+0x4a>
 800b286:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800b28a:	b163      	cbz	r3, 800b2a6 <uxr_reset_stream_storage+0x7e>
 800b28c:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800b290:	2500      	movs	r5, #0
 800b292:	4630      	mov	r0, r6
 800b294:	f003 fd7c 	bl	800ed90 <uxr_reset_input_reliable_stream>
 800b298:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800b29c:	3501      	adds	r5, #1
 800b29e:	42ab      	cmp	r3, r5
 800b2a0:	f106 0618 	add.w	r6, r6, #24
 800b2a4:	d8f5      	bhi.n	800b292 <uxr_reset_stream_storage+0x6a>
 800b2a6:	bd70      	pop	{r4, r5, r6, pc}

0800b2a8 <uxr_add_output_best_effort_buffer>:
 800b2a8:	b510      	push	{r4, lr}
 800b2aa:	7c04      	ldrb	r4, [r0, #16]
 800b2ac:	f104 0c01 	add.w	ip, r4, #1
 800b2b0:	b082      	sub	sp, #8
 800b2b2:	f880 c010 	strb.w	ip, [r0, #16]
 800b2b6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800b2ba:	f003 fee9 	bl	800f090 <uxr_init_output_best_effort_stream>
 800b2be:	2201      	movs	r2, #1
 800b2c0:	4611      	mov	r1, r2
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	b002      	add	sp, #8
 800b2c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2ca:	f7ff bf4f 	b.w	800b16c <uxr_stream_id>
 800b2ce:	bf00      	nop

0800b2d0 <uxr_add_output_reliable_buffer>:
 800b2d0:	b510      	push	{r4, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	4684      	mov	ip, r0
 800b2d6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800b2da:	9000      	str	r0, [sp, #0]
 800b2dc:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800b2e0:	2028      	movs	r0, #40	; 0x28
 800b2e2:	fb00 c004 	mla	r0, r0, r4, ip
 800b2e6:	f104 0e01 	add.w	lr, r4, #1
 800b2ea:	3018      	adds	r0, #24
 800b2ec:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800b2f0:	f003 ff4c 	bl	800f18c <uxr_init_output_reliable_stream>
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	2102      	movs	r1, #2
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	b004      	add	sp, #16
 800b2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b300:	f7ff bf34 	b.w	800b16c <uxr_stream_id>

0800b304 <uxr_add_input_best_effort_buffer>:
 800b304:	b510      	push	{r4, lr}
 800b306:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800b30a:	4603      	mov	r3, r0
 800b30c:	1c62      	adds	r2, r4, #1
 800b30e:	f104 0021 	add.w	r0, r4, #33	; 0x21
 800b312:	b082      	sub	sp, #8
 800b314:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800b318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b31c:	f003 fcc0 	bl	800eca0 <uxr_init_input_best_effort_stream>
 800b320:	2200      	movs	r2, #0
 800b322:	2101      	movs	r1, #1
 800b324:	4620      	mov	r0, r4
 800b326:	b002      	add	sp, #8
 800b328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b32c:	f7ff bf1e 	b.w	800b16c <uxr_stream_id>

0800b330 <uxr_add_input_reliable_buffer>:
 800b330:	b510      	push	{r4, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	4684      	mov	ip, r0
 800b336:	9806      	ldr	r0, [sp, #24]
 800b338:	9000      	str	r0, [sp, #0]
 800b33a:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800b33e:	2018      	movs	r0, #24
 800b340:	fb00 c004 	mla	r0, r0, r4, ip
 800b344:	f104 0e01 	add.w	lr, r4, #1
 800b348:	3048      	adds	r0, #72	; 0x48
 800b34a:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800b34e:	f003 fcf3 	bl	800ed38 <uxr_init_input_reliable_stream>
 800b352:	2200      	movs	r2, #0
 800b354:	2102      	movs	r1, #2
 800b356:	4620      	mov	r0, r4
 800b358:	b004      	add	sp, #16
 800b35a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b35e:	f7ff bf05 	b.w	800b16c <uxr_stream_id>
 800b362:	bf00      	nop

0800b364 <uxr_get_output_best_effort_stream>:
 800b364:	7c03      	ldrb	r3, [r0, #16]
 800b366:	428b      	cmp	r3, r1
 800b368:	bf8c      	ite	hi
 800b36a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800b36e:	2000      	movls	r0, #0
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop

0800b374 <uxr_get_output_reliable_stream>:
 800b374:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b378:	428b      	cmp	r3, r1
 800b37a:	bf83      	ittte	hi
 800b37c:	2328      	movhi	r3, #40	; 0x28
 800b37e:	fb03 0001 	mlahi	r0, r3, r1, r0
 800b382:	3018      	addhi	r0, #24
 800b384:	2000      	movls	r0, #0
 800b386:	4770      	bx	lr

0800b388 <uxr_get_input_best_effort_stream>:
 800b388:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800b38c:	428b      	cmp	r3, r1
 800b38e:	bf86      	itte	hi
 800b390:	3121      	addhi	r1, #33	; 0x21
 800b392:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800b396:	2000      	movls	r0, #0
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop

0800b39c <uxr_get_input_reliable_stream>:
 800b39c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800b3a0:	428b      	cmp	r3, r1
 800b3a2:	bf83      	ittte	hi
 800b3a4:	2318      	movhi	r3, #24
 800b3a6:	fb03 0001 	mlahi	r0, r3, r1, r0
 800b3aa:	3048      	addhi	r0, #72	; 0x48
 800b3ac:	2000      	movls	r0, #0
 800b3ae:	4770      	bx	lr

0800b3b0 <uxr_output_streams_confirmed>:
 800b3b0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b3b4:	b183      	cbz	r3, 800b3d8 <uxr_output_streams_confirmed+0x28>
 800b3b6:	b570      	push	{r4, r5, r6, lr}
 800b3b8:	4606      	mov	r6, r0
 800b3ba:	f100 0518 	add.w	r5, r0, #24
 800b3be:	2400      	movs	r4, #0
 800b3c0:	e001      	b.n	800b3c6 <uxr_output_streams_confirmed+0x16>
 800b3c2:	3528      	adds	r5, #40	; 0x28
 800b3c4:	b138      	cbz	r0, 800b3d6 <uxr_output_streams_confirmed+0x26>
 800b3c6:	4628      	mov	r0, r5
 800b3c8:	f004 f988 	bl	800f6dc <uxr_is_output_up_to_date>
 800b3cc:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800b3d0:	3401      	adds	r4, #1
 800b3d2:	42a3      	cmp	r3, r4
 800b3d4:	d8f5      	bhi.n	800b3c2 <uxr_output_streams_confirmed+0x12>
 800b3d6:	bd70      	pop	{r4, r5, r6, pc}
 800b3d8:	2001      	movs	r0, #1
 800b3da:	4770      	bx	lr

0800b3dc <uxr_buffer_submessage_header>:
 800b3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3de:	4604      	mov	r4, r0
 800b3e0:	460e      	mov	r6, r1
 800b3e2:	2104      	movs	r1, #4
 800b3e4:	4615      	mov	r5, r2
 800b3e6:	461f      	mov	r7, r3
 800b3e8:	f7fe fc88 	bl	8009cfc <ucdr_align_to>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	ea47 0203 	orr.w	r2, r7, r3
 800b3f2:	4631      	mov	r1, r6
 800b3f4:	7523      	strb	r3, [r4, #20]
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	462b      	mov	r3, r5
 800b3fa:	f000 fa27 	bl	800b84c <uxr_serialize_submessage_header>
 800b3fe:	4620      	mov	r0, r4
 800b400:	f7fe fc92 	bl	8009d28 <ucdr_buffer_remaining>
 800b404:	42a8      	cmp	r0, r5
 800b406:	bf34      	ite	cc
 800b408:	2000      	movcc	r0, #0
 800b40a:	2001      	movcs	r0, #1
 800b40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b40e:	bf00      	nop

0800b410 <uxr_read_submessage_header>:
 800b410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b414:	4604      	mov	r4, r0
 800b416:	460d      	mov	r5, r1
 800b418:	2104      	movs	r1, #4
 800b41a:	4616      	mov	r6, r2
 800b41c:	4698      	mov	r8, r3
 800b41e:	f7fe fc6d 	bl	8009cfc <ucdr_align_to>
 800b422:	4620      	mov	r0, r4
 800b424:	f7fe fc80 	bl	8009d28 <ucdr_buffer_remaining>
 800b428:	2803      	cmp	r0, #3
 800b42a:	bf8c      	ite	hi
 800b42c:	2701      	movhi	r7, #1
 800b42e:	2700      	movls	r7, #0
 800b430:	d802      	bhi.n	800b438 <uxr_read_submessage_header+0x28>
 800b432:	4638      	mov	r0, r7
 800b434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b438:	4633      	mov	r3, r6
 800b43a:	4642      	mov	r2, r8
 800b43c:	4620      	mov	r0, r4
 800b43e:	4629      	mov	r1, r5
 800b440:	f000 fa18 	bl	800b874 <uxr_deserialize_submessage_header>
 800b444:	f898 3000 	ldrb.w	r3, [r8]
 800b448:	f003 0201 	and.w	r2, r3, #1
 800b44c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b450:	f888 3000 	strb.w	r3, [r8]
 800b454:	7522      	strb	r2, [r4, #20]
 800b456:	4638      	mov	r0, r7
 800b458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b45c <uxr_submessage_padding>:
 800b45c:	f010 0003 	ands.w	r0, r0, #3
 800b460:	bf18      	it	ne
 800b462:	f1c0 0004 	rsbne	r0, r0, #4
 800b466:	4770      	bx	lr

0800b468 <uxr_millis>:
 800b468:	b510      	push	{r4, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	4669      	mov	r1, sp
 800b46e:	2001      	movs	r0, #1
 800b470:	f7f5 ff62 	bl	8001338 <clock_gettime>
 800b474:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800b478:	4906      	ldr	r1, [pc, #24]	; (800b494 <uxr_millis+0x2c>)
 800b47a:	fba0 0301 	umull	r0, r3, r0, r1
 800b47e:	1900      	adds	r0, r0, r4
 800b480:	fb01 3102 	mla	r1, r1, r2, r3
 800b484:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800b488:	4a03      	ldr	r2, [pc, #12]	; (800b498 <uxr_millis+0x30>)
 800b48a:	2300      	movs	r3, #0
 800b48c:	f7f4 ff10 	bl	80002b0 <__aeabi_ldivmod>
 800b490:	b004      	add	sp, #16
 800b492:	bd10      	pop	{r4, pc}
 800b494:	3b9aca00 	.word	0x3b9aca00
 800b498:	000f4240 	.word	0x000f4240

0800b49c <uxr_nanos>:
 800b49c:	b510      	push	{r4, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	4669      	mov	r1, sp
 800b4a2:	2001      	movs	r0, #1
 800b4a4:	f7f5 ff48 	bl	8001338 <clock_gettime>
 800b4a8:	4a06      	ldr	r2, [pc, #24]	; (800b4c4 <uxr_nanos+0x28>)
 800b4aa:	9800      	ldr	r0, [sp, #0]
 800b4ac:	9902      	ldr	r1, [sp, #8]
 800b4ae:	9c01      	ldr	r4, [sp, #4]
 800b4b0:	fba0 0302 	umull	r0, r3, r0, r2
 800b4b4:	1840      	adds	r0, r0, r1
 800b4b6:	fb02 3304 	mla	r3, r2, r4, r3
 800b4ba:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800b4be:	b004      	add	sp, #16
 800b4c0:	bd10      	pop	{r4, pc}
 800b4c2:	bf00      	nop
 800b4c4:	3b9aca00 	.word	0x3b9aca00

0800b4c8 <on_full_output_buffer_fragmented>:
 800b4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4cc:	460c      	mov	r4, r1
 800b4ce:	b08a      	sub	sp, #40	; 0x28
 800b4d0:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800b4d4:	4606      	mov	r6, r0
 800b4d6:	f104 0008 	add.w	r0, r4, #8
 800b4da:	f7ff ff4b 	bl	800b374 <uxr_get_output_reliable_stream>
 800b4de:	4605      	mov	r5, r0
 800b4e0:	f004 f906 	bl	800f6f0 <get_available_free_slots>
 800b4e4:	b968      	cbnz	r0, 800b502 <on_full_output_buffer_fragmented+0x3a>
 800b4e6:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	4798      	blx	r3
 800b4ee:	b918      	cbnz	r0, 800b4f8 <on_full_output_buffer_fragmented+0x30>
 800b4f0:	2001      	movs	r0, #1
 800b4f2:	b00a      	add	sp, #40	; 0x28
 800b4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	f004 f8f9 	bl	800f6f0 <get_available_free_slots>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d0f6      	beq.n	800b4f0 <on_full_output_buffer_fragmented+0x28>
 800b502:	8929      	ldrh	r1, [r5, #8]
 800b504:	89eb      	ldrh	r3, [r5, #14]
 800b506:	7b28      	ldrb	r0, [r5, #12]
 800b508:	686a      	ldr	r2, [r5, #4]
 800b50a:	fbb2 f8f1 	udiv	r8, r2, r1
 800b50e:	fbb3 f2f1 	udiv	r2, r3, r1
 800b512:	fb01 3112 	mls	r1, r1, r2, r3
 800b516:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 800b51a:	b289      	uxth	r1, r1
 800b51c:	fb08 f101 	mul.w	r1, r8, r1
 800b520:	30fc      	adds	r0, #252	; 0xfc
 800b522:	f1a8 0804 	sub.w	r8, r8, #4
 800b526:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800b52a:	4440      	add	r0, r8
 800b52c:	b287      	uxth	r7, r0
 800b52e:	1bdb      	subs	r3, r3, r7
 800b530:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	3104      	adds	r1, #4
 800b538:	4419      	add	r1, r3
 800b53a:	4642      	mov	r2, r8
 800b53c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	a802      	add	r0, sp, #8
 800b544:	2300      	movs	r3, #0
 800b546:	f7fe fbad 	bl	8009ca4 <ucdr_init_buffer_origin_offset>
 800b54a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800b54e:	f102 0308 	add.w	r3, r2, #8
 800b552:	4543      	cmp	r3, r8
 800b554:	d928      	bls.n	800b5a8 <on_full_output_buffer_fragmented+0xe0>
 800b556:	463a      	mov	r2, r7
 800b558:	2300      	movs	r3, #0
 800b55a:	210d      	movs	r1, #13
 800b55c:	a802      	add	r0, sp, #8
 800b55e:	f7ff ff3d 	bl	800b3dc <uxr_buffer_submessage_header>
 800b562:	8929      	ldrh	r1, [r5, #8]
 800b564:	89eb      	ldrh	r3, [r5, #14]
 800b566:	fbb3 f2f1 	udiv	r2, r3, r1
 800b56a:	fb01 3312 	mls	r3, r1, r2, r3
 800b56e:	b29b      	uxth	r3, r3
 800b570:	686a      	ldr	r2, [r5, #4]
 800b572:	fbb2 f2f1 	udiv	r2, r2, r1
 800b576:	fb02 f303 	mul.w	r3, r2, r3
 800b57a:	682a      	ldr	r2, [r5, #0]
 800b57c:	f842 8003 	str.w	r8, [r2, r3]
 800b580:	89e8      	ldrh	r0, [r5, #14]
 800b582:	2101      	movs	r1, #1
 800b584:	f004 f9ca 	bl	800f91c <uxr_seq_num_add>
 800b588:	9904      	ldr	r1, [sp, #16]
 800b58a:	9a03      	ldr	r2, [sp, #12]
 800b58c:	81e8      	strh	r0, [r5, #14]
 800b58e:	1a52      	subs	r2, r2, r1
 800b590:	4630      	mov	r0, r6
 800b592:	f7fe fb99 	bl	8009cc8 <ucdr_init_buffer>
 800b596:	4630      	mov	r0, r6
 800b598:	490f      	ldr	r1, [pc, #60]	; (800b5d8 <on_full_output_buffer_fragmented+0x110>)
 800b59a:	4622      	mov	r2, r4
 800b59c:	f7fe fb68 	bl	8009c70 <ucdr_set_on_full_buffer_callback>
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	b00a      	add	sp, #40	; 0x28
 800b5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a8:	b292      	uxth	r2, r2
 800b5aa:	2302      	movs	r3, #2
 800b5ac:	210d      	movs	r1, #13
 800b5ae:	a802      	add	r0, sp, #8
 800b5b0:	f7ff ff14 	bl	800b3dc <uxr_buffer_submessage_header>
 800b5b4:	8928      	ldrh	r0, [r5, #8]
 800b5b6:	89eb      	ldrh	r3, [r5, #14]
 800b5b8:	fbb3 f1f0 	udiv	r1, r3, r0
 800b5bc:	fb00 3311 	mls	r3, r0, r1, r3
 800b5c0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800b5c4:	6869      	ldr	r1, [r5, #4]
 800b5c6:	fbb1 f1f0 	udiv	r1, r1, r0
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	fb01 f303 	mul.w	r3, r1, r3
 800b5d0:	6829      	ldr	r1, [r5, #0]
 800b5d2:	3208      	adds	r2, #8
 800b5d4:	50ca      	str	r2, [r1, r3]
 800b5d6:	e7d3      	b.n	800b580 <on_full_output_buffer_fragmented+0xb8>
 800b5d8:	0800b4c9 	.word	0x0800b4c9

0800b5dc <uxr_prepare_output_stream>:
 800b5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5de:	b087      	sub	sp, #28
 800b5e0:	2707      	movs	r7, #7
 800b5e2:	9202      	str	r2, [sp, #8]
 800b5e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5e6:	9103      	str	r1, [sp, #12]
 800b5e8:	2500      	movs	r5, #0
 800b5ea:	3204      	adds	r2, #4
 800b5ec:	e9cd 7500 	strd	r7, r5, [sp]
 800b5f0:	461c      	mov	r4, r3
 800b5f2:	4606      	mov	r6, r0
 800b5f4:	f7ff fc54 	bl	800aea0 <uxr_prepare_stream_to_write_submessage>
 800b5f8:	f080 0201 	eor.w	r2, r0, #1
 800b5fc:	b2d2      	uxtb	r2, r2
 800b5fe:	75a2      	strb	r2, [r4, #22]
 800b600:	b112      	cbz	r2, 800b608 <uxr_prepare_output_stream+0x2c>
 800b602:	4628      	mov	r0, r5
 800b604:	b007      	add	sp, #28
 800b606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b608:	aa05      	add	r2, sp, #20
 800b60a:	9902      	ldr	r1, [sp, #8]
 800b60c:	4630      	mov	r0, r6
 800b60e:	f7ff fd7d 	bl	800b10c <uxr_init_base_object_request>
 800b612:	a905      	add	r1, sp, #20
 800b614:	4605      	mov	r5, r0
 800b616:	4620      	mov	r0, r4
 800b618:	f000 ffa0 	bl	800c55c <uxr_serialize_WRITE_DATA_Payload_Data>
 800b61c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800b620:	69a6      	ldr	r6, [r4, #24]
 800b622:	69e7      	ldr	r7, [r4, #28]
 800b624:	1a52      	subs	r2, r2, r1
 800b626:	4620      	mov	r0, r4
 800b628:	f7fe fb4e 	bl	8009cc8 <ucdr_init_buffer>
 800b62c:	4620      	mov	r0, r4
 800b62e:	463a      	mov	r2, r7
 800b630:	4631      	mov	r1, r6
 800b632:	f7fe fb1d 	bl	8009c70 <ucdr_set_on_full_buffer_callback>
 800b636:	4628      	mov	r0, r5
 800b638:	b007      	add	sp, #28
 800b63a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b63c <uxr_prepare_output_stream_fragmented>:
 800b63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b640:	b091      	sub	sp, #68	; 0x44
 800b642:	4605      	mov	r5, r0
 800b644:	9105      	str	r1, [sp, #20]
 800b646:	3008      	adds	r0, #8
 800b648:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800b64c:	461e      	mov	r6, r3
 800b64e:	9204      	str	r2, [sp, #16]
 800b650:	f7ff fe90 	bl	800b374 <uxr_get_output_reliable_stream>
 800b654:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	f000 8091 	beq.w	800b780 <uxr_prepare_output_stream_fragmented+0x144>
 800b65e:	4604      	mov	r4, r0
 800b660:	2800      	cmp	r0, #0
 800b662:	f000 808d 	beq.w	800b780 <uxr_prepare_output_stream_fragmented+0x144>
 800b666:	f004 f843 	bl	800f6f0 <get_available_free_slots>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	f000 8083 	beq.w	800b776 <uxr_prepare_output_stream_fragmented+0x13a>
 800b670:	8922      	ldrh	r2, [r4, #8]
 800b672:	89e7      	ldrh	r7, [r4, #14]
 800b674:	fbb7 f9f2 	udiv	r9, r7, r2
 800b678:	fb02 7919 	mls	r9, r2, r9, r7
 800b67c:	fa1f f989 	uxth.w	r9, r9
 800b680:	6863      	ldr	r3, [r4, #4]
 800b682:	fbb3 f2f2 	udiv	r2, r3, r2
 800b686:	6823      	ldr	r3, [r4, #0]
 800b688:	9203      	str	r2, [sp, #12]
 800b68a:	fb02 f909 	mul.w	r9, r2, r9
 800b68e:	f109 0904 	add.w	r9, r9, #4
 800b692:	4499      	add	r9, r3
 800b694:	7b23      	ldrb	r3, [r4, #12]
 800b696:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800b69a:	4543      	cmp	r3, r8
 800b69c:	f1a2 0b04 	sub.w	fp, r2, #4
 800b6a0:	d37a      	bcc.n	800b798 <uxr_prepare_output_stream_fragmented+0x15c>
 800b6a2:	f1ab 0a04 	sub.w	sl, fp, #4
 800b6a6:	ebaa 0a03 	sub.w	sl, sl, r3
 800b6aa:	465a      	mov	r2, fp
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	4649      	mov	r1, r9
 800b6b0:	a808      	add	r0, sp, #32
 800b6b2:	f8cd 8000 	str.w	r8, [sp]
 800b6b6:	f7fe faf5 	bl	8009ca4 <ucdr_init_buffer_origin_offset>
 800b6ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b6bc:	fa1f fa8a 	uxth.w	sl, sl
 800b6c0:	4652      	mov	r2, sl
 800b6c2:	f103 0a08 	add.w	sl, r3, #8
 800b6c6:	45da      	cmp	sl, fp
 800b6c8:	bf34      	ite	cc
 800b6ca:	2302      	movcc	r3, #2
 800b6cc:	2300      	movcs	r3, #0
 800b6ce:	210d      	movs	r1, #13
 800b6d0:	a808      	add	r0, sp, #32
 800b6d2:	f7ff fe83 	bl	800b3dc <uxr_buffer_submessage_header>
 800b6d6:	8921      	ldrh	r1, [r4, #8]
 800b6d8:	fbb7 f2f1 	udiv	r2, r7, r1
 800b6dc:	fb01 7212 	mls	r2, r1, r2, r7
 800b6e0:	b292      	uxth	r2, r2
 800b6e2:	6863      	ldr	r3, [r4, #4]
 800b6e4:	fbb3 f3f1 	udiv	r3, r3, r1
 800b6e8:	fb02 f303 	mul.w	r3, r2, r3
 800b6ec:	6822      	ldr	r2, [r4, #0]
 800b6ee:	4638      	mov	r0, r7
 800b6f0:	f842 b003 	str.w	fp, [r2, r3]
 800b6f4:	2101      	movs	r1, #1
 800b6f6:	f004 f911 	bl	800f91c <uxr_seq_num_add>
 800b6fa:	9b03      	ldr	r3, [sp, #12]
 800b6fc:	f108 0104 	add.w	r1, r8, #4
 800b700:	f1a3 0208 	sub.w	r2, r3, #8
 800b704:	eba2 0208 	sub.w	r2, r2, r8
 800b708:	4449      	add	r1, r9
 800b70a:	4607      	mov	r7, r0
 800b70c:	4630      	mov	r0, r6
 800b70e:	f7fe fadb 	bl	8009cc8 <ucdr_init_buffer>
 800b712:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b714:	81e7      	strh	r7, [r4, #14]
 800b716:	1d1a      	adds	r2, r3, #4
 800b718:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b71c:	bf28      	it	cs
 800b71e:	2200      	movcs	r2, #0
 800b720:	2300      	movs	r3, #0
 800b722:	b292      	uxth	r2, r2
 800b724:	2107      	movs	r1, #7
 800b726:	4630      	mov	r0, r6
 800b728:	f7ff fe58 	bl	800b3dc <uxr_buffer_submessage_header>
 800b72c:	9904      	ldr	r1, [sp, #16]
 800b72e:	aa07      	add	r2, sp, #28
 800b730:	4628      	mov	r0, r5
 800b732:	f7ff fceb 	bl	800b10c <uxr_init_base_object_request>
 800b736:	4604      	mov	r4, r0
 800b738:	b318      	cbz	r0, 800b782 <uxr_prepare_output_stream_fragmented+0x146>
 800b73a:	a907      	add	r1, sp, #28
 800b73c:	4630      	mov	r0, r6
 800b73e:	f000 ff0d 	bl	800c55c <uxr_serialize_WRITE_DATA_Payload_Data>
 800b742:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800b746:	4630      	mov	r0, r6
 800b748:	1a52      	subs	r2, r2, r1
 800b74a:	f7fe fabd 	bl	8009cc8 <ucdr_init_buffer>
 800b74e:	9b05      	ldr	r3, [sp, #20]
 800b750:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800b754:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b756:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800b75a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b75c:	491b      	ldr	r1, [pc, #108]	; (800b7cc <uxr_prepare_output_stream_fragmented+0x190>)
 800b75e:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 800b762:	4630      	mov	r0, r6
 800b764:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800b768:	462a      	mov	r2, r5
 800b76a:	f7fe fa81 	bl	8009c70 <ucdr_set_on_full_buffer_callback>
 800b76e:	4620      	mov	r0, r4
 800b770:	b011      	add	sp, #68	; 0x44
 800b772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b776:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b778:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b77a:	4628      	mov	r0, r5
 800b77c:	4798      	blx	r3
 800b77e:	b920      	cbnz	r0, 800b78a <uxr_prepare_output_stream_fragmented+0x14e>
 800b780:	2400      	movs	r4, #0
 800b782:	4620      	mov	r0, r4
 800b784:	b011      	add	sp, #68	; 0x44
 800b786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78a:	4620      	mov	r0, r4
 800b78c:	f003 ffb0 	bl	800f6f0 <get_available_free_slots>
 800b790:	2800      	cmp	r0, #0
 800b792:	f47f af6d 	bne.w	800b670 <uxr_prepare_output_stream_fragmented+0x34>
 800b796:	e7f3      	b.n	800b780 <uxr_prepare_output_stream_fragmented+0x144>
 800b798:	4638      	mov	r0, r7
 800b79a:	2101      	movs	r1, #1
 800b79c:	f004 f8be 	bl	800f91c <uxr_seq_num_add>
 800b7a0:	8921      	ldrh	r1, [r4, #8]
 800b7a2:	fbb0 f2f1 	udiv	r2, r0, r1
 800b7a6:	fb01 0912 	mls	r9, r1, r2, r0
 800b7aa:	fa1f f289 	uxth.w	r2, r9
 800b7ae:	6863      	ldr	r3, [r4, #4]
 800b7b0:	fbb3 f9f1 	udiv	r9, r3, r1
 800b7b4:	6823      	ldr	r3, [r4, #0]
 800b7b6:	fb02 f909 	mul.w	r9, r2, r9
 800b7ba:	f109 0904 	add.w	r9, r9, #4
 800b7be:	4499      	add	r9, r3
 800b7c0:	4607      	mov	r7, r0
 800b7c2:	7b23      	ldrb	r3, [r4, #12]
 800b7c4:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800b7c8:	e76b      	b.n	800b6a2 <uxr_prepare_output_stream_fragmented+0x66>
 800b7ca:	bf00      	nop
 800b7cc:	0800b4c9 	.word	0x0800b4c9

0800b7d0 <uxr_serialize_message_header>:
 800b7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	4616      	mov	r6, r2
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	9301      	str	r3, [sp, #4]
 800b7da:	460d      	mov	r5, r1
 800b7dc:	9f08      	ldr	r7, [sp, #32]
 800b7de:	f7fd fac7 	bl	8008d70 <ucdr_serialize_uint8_t>
 800b7e2:	4631      	mov	r1, r6
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f7fd fac3 	bl	8008d70 <ucdr_serialize_uint8_t>
 800b7ea:	9a01      	ldr	r2, [sp, #4]
 800b7ec:	2101      	movs	r1, #1
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f7fd fb6a 	bl	8008ec8 <ucdr_serialize_endian_uint16_t>
 800b7f4:	062b      	lsls	r3, r5, #24
 800b7f6:	d501      	bpl.n	800b7fc <uxr_serialize_message_header+0x2c>
 800b7f8:	b003      	add	sp, #12
 800b7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7fc:	2204      	movs	r2, #4
 800b7fe:	4639      	mov	r1, r7
 800b800:	4620      	mov	r0, r4
 800b802:	b003      	add	sp, #12
 800b804:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b808:	f003 b850 	b.w	800e8ac <ucdr_serialize_array_uint8_t>

0800b80c <uxr_deserialize_message_header>:
 800b80c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b80e:	b083      	sub	sp, #12
 800b810:	4616      	mov	r6, r2
 800b812:	4604      	mov	r4, r0
 800b814:	9301      	str	r3, [sp, #4]
 800b816:	460d      	mov	r5, r1
 800b818:	9f08      	ldr	r7, [sp, #32]
 800b81a:	f7fd fabf 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800b81e:	4631      	mov	r1, r6
 800b820:	4620      	mov	r0, r4
 800b822:	f7fd fabb 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800b826:	9a01      	ldr	r2, [sp, #4]
 800b828:	2101      	movs	r1, #1
 800b82a:	4620      	mov	r0, r4
 800b82c:	f7fd fc40 	bl	80090b0 <ucdr_deserialize_endian_uint16_t>
 800b830:	f995 3000 	ldrsb.w	r3, [r5]
 800b834:	2b00      	cmp	r3, #0
 800b836:	da01      	bge.n	800b83c <uxr_deserialize_message_header+0x30>
 800b838:	b003      	add	sp, #12
 800b83a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b83c:	2204      	movs	r2, #4
 800b83e:	4639      	mov	r1, r7
 800b840:	4620      	mov	r0, r4
 800b842:	b003      	add	sp, #12
 800b844:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b848:	f003 b894 	b.w	800e974 <ucdr_deserialize_array_uint8_t>

0800b84c <uxr_serialize_submessage_header>:
 800b84c:	b530      	push	{r4, r5, lr}
 800b84e:	b083      	sub	sp, #12
 800b850:	4615      	mov	r5, r2
 800b852:	4604      	mov	r4, r0
 800b854:	9301      	str	r3, [sp, #4]
 800b856:	f7fd fa8b 	bl	8008d70 <ucdr_serialize_uint8_t>
 800b85a:	4629      	mov	r1, r5
 800b85c:	4620      	mov	r0, r4
 800b85e:	f7fd fa87 	bl	8008d70 <ucdr_serialize_uint8_t>
 800b862:	9a01      	ldr	r2, [sp, #4]
 800b864:	2101      	movs	r1, #1
 800b866:	4620      	mov	r0, r4
 800b868:	b003      	add	sp, #12
 800b86a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b86e:	f7fd bb2b 	b.w	8008ec8 <ucdr_serialize_endian_uint16_t>
 800b872:	bf00      	nop

0800b874 <uxr_deserialize_submessage_header>:
 800b874:	b530      	push	{r4, r5, lr}
 800b876:	b083      	sub	sp, #12
 800b878:	4615      	mov	r5, r2
 800b87a:	4604      	mov	r4, r0
 800b87c:	9301      	str	r3, [sp, #4]
 800b87e:	f7fd fa8d 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800b882:	4629      	mov	r1, r5
 800b884:	4620      	mov	r0, r4
 800b886:	f7fd fa89 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800b88a:	9a01      	ldr	r2, [sp, #4]
 800b88c:	2101      	movs	r1, #1
 800b88e:	4620      	mov	r0, r4
 800b890:	b003      	add	sp, #12
 800b892:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b896:	f7fd bc0b 	b.w	80090b0 <ucdr_deserialize_endian_uint16_t>
 800b89a:	bf00      	nop

0800b89c <uxr_serialize_CLIENT_Representation>:
 800b89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8a0:	2204      	movs	r2, #4
 800b8a2:	460e      	mov	r6, r1
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	f003 f801 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800b8aa:	2202      	movs	r2, #2
 800b8ac:	4607      	mov	r7, r0
 800b8ae:	1d31      	adds	r1, r6, #4
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	f002 fffb 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800b8b6:	4038      	ands	r0, r7
 800b8b8:	2202      	movs	r2, #2
 800b8ba:	1db1      	adds	r1, r6, #6
 800b8bc:	b2c7      	uxtb	r7, r0
 800b8be:	4628      	mov	r0, r5
 800b8c0:	f002 fff4 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800b8c4:	2204      	movs	r2, #4
 800b8c6:	4007      	ands	r7, r0
 800b8c8:	f106 0108 	add.w	r1, r6, #8
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	f002 ffed 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800b8d2:	7b31      	ldrb	r1, [r6, #12]
 800b8d4:	4007      	ands	r7, r0
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	f7fd fa4a 	bl	8008d70 <ucdr_serialize_uint8_t>
 800b8dc:	7b71      	ldrb	r1, [r6, #13]
 800b8de:	4007      	ands	r7, r0
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	f7fd fa17 	bl	8008d14 <ucdr_serialize_bool>
 800b8e6:	7b73      	ldrb	r3, [r6, #13]
 800b8e8:	ea07 0800 	and.w	r8, r7, r0
 800b8ec:	b93b      	cbnz	r3, 800b8fe <uxr_serialize_CLIENT_Representation+0x62>
 800b8ee:	8bb1      	ldrh	r1, [r6, #28]
 800b8f0:	4628      	mov	r0, r5
 800b8f2:	f7fd fa69 	bl	8008dc8 <ucdr_serialize_uint16_t>
 800b8f6:	ea08 0000 	and.w	r0, r8, r0
 800b8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8fe:	6931      	ldr	r1, [r6, #16]
 800b900:	4628      	mov	r0, r5
 800b902:	f7fd fc4b 	bl	800919c <ucdr_serialize_uint32_t>
 800b906:	6933      	ldr	r3, [r6, #16]
 800b908:	b1e3      	cbz	r3, 800b944 <uxr_serialize_CLIENT_Representation+0xa8>
 800b90a:	b1c0      	cbz	r0, 800b93e <uxr_serialize_CLIENT_Representation+0xa2>
 800b90c:	4637      	mov	r7, r6
 800b90e:	f04f 0900 	mov.w	r9, #0
 800b912:	e001      	b.n	800b918 <uxr_serialize_CLIENT_Representation+0x7c>
 800b914:	3708      	adds	r7, #8
 800b916:	b194      	cbz	r4, 800b93e <uxr_serialize_CLIENT_Representation+0xa2>
 800b918:	6979      	ldr	r1, [r7, #20]
 800b91a:	4628      	mov	r0, r5
 800b91c:	f003 f8e6 	bl	800eaec <ucdr_serialize_string>
 800b920:	69b9      	ldr	r1, [r7, #24]
 800b922:	4604      	mov	r4, r0
 800b924:	4628      	mov	r0, r5
 800b926:	f003 f8e1 	bl	800eaec <ucdr_serialize_string>
 800b92a:	6933      	ldr	r3, [r6, #16]
 800b92c:	f109 0901 	add.w	r9, r9, #1
 800b930:	4004      	ands	r4, r0
 800b932:	4599      	cmp	r9, r3
 800b934:	b2e4      	uxtb	r4, r4
 800b936:	d3ed      	bcc.n	800b914 <uxr_serialize_CLIENT_Representation+0x78>
 800b938:	ea08 0804 	and.w	r8, r8, r4
 800b93c:	e7d7      	b.n	800b8ee <uxr_serialize_CLIENT_Representation+0x52>
 800b93e:	f04f 0800 	mov.w	r8, #0
 800b942:	e7d4      	b.n	800b8ee <uxr_serialize_CLIENT_Representation+0x52>
 800b944:	ea08 0800 	and.w	r8, r8, r0
 800b948:	e7d1      	b.n	800b8ee <uxr_serialize_CLIENT_Representation+0x52>
 800b94a:	bf00      	nop

0800b94c <uxr_deserialize_CLIENT_Representation>:
 800b94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b950:	2204      	movs	r2, #4
 800b952:	460c      	mov	r4, r1
 800b954:	4605      	mov	r5, r0
 800b956:	f003 f80d 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800b95a:	2202      	movs	r2, #2
 800b95c:	4607      	mov	r7, r0
 800b95e:	1d21      	adds	r1, r4, #4
 800b960:	4628      	mov	r0, r5
 800b962:	f003 f807 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800b966:	4038      	ands	r0, r7
 800b968:	2202      	movs	r2, #2
 800b96a:	1da1      	adds	r1, r4, #6
 800b96c:	b2c6      	uxtb	r6, r0
 800b96e:	4628      	mov	r0, r5
 800b970:	f003 f800 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800b974:	2204      	movs	r2, #4
 800b976:	4006      	ands	r6, r0
 800b978:	f104 0108 	add.w	r1, r4, #8
 800b97c:	4628      	mov	r0, r5
 800b97e:	f002 fff9 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800b982:	f104 010c 	add.w	r1, r4, #12
 800b986:	4006      	ands	r6, r0
 800b988:	4628      	mov	r0, r5
 800b98a:	f7fd fa07 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800b98e:	f104 010d 	add.w	r1, r4, #13
 800b992:	ea06 0700 	and.w	r7, r6, r0
 800b996:	4628      	mov	r0, r5
 800b998:	f7fd f9d2 	bl	8008d40 <ucdr_deserialize_bool>
 800b99c:	7b63      	ldrb	r3, [r4, #13]
 800b99e:	4007      	ands	r7, r0
 800b9a0:	b93b      	cbnz	r3, 800b9b2 <uxr_deserialize_CLIENT_Representation+0x66>
 800b9a2:	f104 011c 	add.w	r1, r4, #28
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	f7fd fb0e 	bl	8008fc8 <ucdr_deserialize_uint16_t>
 800b9ac:	4038      	ands	r0, r7
 800b9ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9b2:	f104 0110 	add.w	r1, r4, #16
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	f7fd fd20 	bl	80093fc <ucdr_deserialize_uint32_t>
 800b9bc:	6923      	ldr	r3, [r4, #16]
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d903      	bls.n	800b9ca <uxr_deserialize_CLIENT_Representation+0x7e>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	75ab      	strb	r3, [r5, #22]
 800b9c6:	2700      	movs	r7, #0
 800b9c8:	e7eb      	b.n	800b9a2 <uxr_deserialize_CLIENT_Representation+0x56>
 800b9ca:	b30b      	cbz	r3, 800ba10 <uxr_deserialize_CLIENT_Representation+0xc4>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d0fa      	beq.n	800b9c6 <uxr_deserialize_CLIENT_Representation+0x7a>
 800b9d0:	46a0      	mov	r8, r4
 800b9d2:	f04f 0900 	mov.w	r9, #0
 800b9d6:	e001      	b.n	800b9dc <uxr_deserialize_CLIENT_Representation+0x90>
 800b9d8:	2e00      	cmp	r6, #0
 800b9da:	d0f4      	beq.n	800b9c6 <uxr_deserialize_CLIENT_Representation+0x7a>
 800b9dc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800b9e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	f003 f891 	bl	800eb0c <ucdr_deserialize_string>
 800b9ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9ee:	4606      	mov	r6, r0
 800b9f0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	f003 f889 	bl	800eb0c <ucdr_deserialize_string>
 800b9fa:	6923      	ldr	r3, [r4, #16]
 800b9fc:	f109 0901 	add.w	r9, r9, #1
 800ba00:	4006      	ands	r6, r0
 800ba02:	4599      	cmp	r9, r3
 800ba04:	f108 0808 	add.w	r8, r8, #8
 800ba08:	b2f6      	uxtb	r6, r6
 800ba0a:	d3e5      	bcc.n	800b9d8 <uxr_deserialize_CLIENT_Representation+0x8c>
 800ba0c:	4037      	ands	r7, r6
 800ba0e:	e7c8      	b.n	800b9a2 <uxr_deserialize_CLIENT_Representation+0x56>
 800ba10:	4007      	ands	r7, r0
 800ba12:	e7c6      	b.n	800b9a2 <uxr_deserialize_CLIENT_Representation+0x56>

0800ba14 <uxr_serialize_AGENT_Representation>:
 800ba14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba18:	2204      	movs	r2, #4
 800ba1a:	460f      	mov	r7, r1
 800ba1c:	4605      	mov	r5, r0
 800ba1e:	f002 ff45 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800ba22:	2202      	movs	r2, #2
 800ba24:	4604      	mov	r4, r0
 800ba26:	1d39      	adds	r1, r7, #4
 800ba28:	4628      	mov	r0, r5
 800ba2a:	f002 ff3f 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800ba2e:	4020      	ands	r0, r4
 800ba30:	2202      	movs	r2, #2
 800ba32:	1db9      	adds	r1, r7, #6
 800ba34:	b2c4      	uxtb	r4, r0
 800ba36:	4628      	mov	r0, r5
 800ba38:	f002 ff38 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800ba3c:	7a39      	ldrb	r1, [r7, #8]
 800ba3e:	4004      	ands	r4, r0
 800ba40:	4628      	mov	r0, r5
 800ba42:	f7fd f967 	bl	8008d14 <ucdr_serialize_bool>
 800ba46:	7a3b      	ldrb	r3, [r7, #8]
 800ba48:	ea00 0804 	and.w	r8, r0, r4
 800ba4c:	b913      	cbnz	r3, 800ba54 <uxr_serialize_AGENT_Representation+0x40>
 800ba4e:	4640      	mov	r0, r8
 800ba50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba54:	68f9      	ldr	r1, [r7, #12]
 800ba56:	4628      	mov	r0, r5
 800ba58:	f7fd fba0 	bl	800919c <ucdr_serialize_uint32_t>
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	b303      	cbz	r3, 800baa2 <uxr_serialize_AGENT_Representation+0x8e>
 800ba60:	b1d0      	cbz	r0, 800ba98 <uxr_serialize_AGENT_Representation+0x84>
 800ba62:	463e      	mov	r6, r7
 800ba64:	f04f 0900 	mov.w	r9, #0
 800ba68:	e001      	b.n	800ba6e <uxr_serialize_AGENT_Representation+0x5a>
 800ba6a:	3608      	adds	r6, #8
 800ba6c:	b1a4      	cbz	r4, 800ba98 <uxr_serialize_AGENT_Representation+0x84>
 800ba6e:	6931      	ldr	r1, [r6, #16]
 800ba70:	4628      	mov	r0, r5
 800ba72:	f003 f83b 	bl	800eaec <ucdr_serialize_string>
 800ba76:	6971      	ldr	r1, [r6, #20]
 800ba78:	4604      	mov	r4, r0
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	f003 f836 	bl	800eaec <ucdr_serialize_string>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f109 0901 	add.w	r9, r9, #1
 800ba86:	4004      	ands	r4, r0
 800ba88:	4599      	cmp	r9, r3
 800ba8a:	b2e4      	uxtb	r4, r4
 800ba8c:	d3ed      	bcc.n	800ba6a <uxr_serialize_AGENT_Representation+0x56>
 800ba8e:	ea08 0804 	and.w	r8, r8, r4
 800ba92:	4640      	mov	r0, r8
 800ba94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba98:	f04f 0800 	mov.w	r8, #0
 800ba9c:	4640      	mov	r0, r8
 800ba9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baa2:	ea08 0800 	and.w	r8, r8, r0
 800baa6:	e7d2      	b.n	800ba4e <uxr_serialize_AGENT_Representation+0x3a>

0800baa8 <uxr_serialize_DATAWRITER_Representation>:
 800baa8:	b570      	push	{r4, r5, r6, lr}
 800baaa:	460d      	mov	r5, r1
 800baac:	7809      	ldrb	r1, [r1, #0]
 800baae:	4606      	mov	r6, r0
 800bab0:	f7fd f95e 	bl	8008d70 <ucdr_serialize_uint8_t>
 800bab4:	4604      	mov	r4, r0
 800bab6:	b130      	cbz	r0, 800bac6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800bab8:	782b      	ldrb	r3, [r5, #0]
 800baba:	2b02      	cmp	r3, #2
 800babc:	d00c      	beq.n	800bad8 <uxr_serialize_DATAWRITER_Representation+0x30>
 800babe:	2b03      	cmp	r3, #3
 800bac0:	d010      	beq.n	800bae4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d008      	beq.n	800bad8 <uxr_serialize_DATAWRITER_Representation+0x30>
 800bac6:	2202      	movs	r2, #2
 800bac8:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800bacc:	4630      	mov	r0, r6
 800bace:	f002 feed 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800bad2:	4020      	ands	r0, r4
 800bad4:	b2c0      	uxtb	r0, r0
 800bad6:	bd70      	pop	{r4, r5, r6, pc}
 800bad8:	6869      	ldr	r1, [r5, #4]
 800bada:	4630      	mov	r0, r6
 800badc:	f003 f806 	bl	800eaec <ucdr_serialize_string>
 800bae0:	4604      	mov	r4, r0
 800bae2:	e7f0      	b.n	800bac6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800bae4:	4629      	mov	r1, r5
 800bae6:	4630      	mov	r0, r6
 800bae8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800baec:	3104      	adds	r1, #4
 800baee:	f002 ffd1 	bl	800ea94 <ucdr_serialize_sequence_uint8_t>
 800baf2:	4604      	mov	r4, r0
 800baf4:	e7e7      	b.n	800bac6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800baf6:	bf00      	nop

0800baf8 <uxr_serialize_ObjectVariant.part.0>:
 800baf8:	b570      	push	{r4, r5, r6, lr}
 800bafa:	780b      	ldrb	r3, [r1, #0]
 800bafc:	3b01      	subs	r3, #1
 800bafe:	460c      	mov	r4, r1
 800bb00:	4605      	mov	r5, r0
 800bb02:	2b0d      	cmp	r3, #13
 800bb04:	d854      	bhi.n	800bbb0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800bb06:	e8df f003 	tbb	[pc, r3]
 800bb0a:	0730      	.short	0x0730
 800bb0c:	07071b1b 	.word	0x07071b1b
 800bb10:	0c530707 	.word	0x0c530707
 800bb14:	494e0c0c 	.word	0x494e0c0c
 800bb18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb1c:	3104      	adds	r1, #4
 800bb1e:	f7ff bfc3 	b.w	800baa8 <uxr_serialize_DATAWRITER_Representation>
 800bb22:	7909      	ldrb	r1, [r1, #4]
 800bb24:	f7fd f924 	bl	8008d70 <ucdr_serialize_uint8_t>
 800bb28:	b1e8      	cbz	r0, 800bb66 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800bb2a:	7923      	ldrb	r3, [r4, #4]
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d001      	beq.n	800bb34 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800bb30:	2b02      	cmp	r3, #2
 800bb32:	d13d      	bne.n	800bbb0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800bb34:	68a1      	ldr	r1, [r4, #8]
 800bb36:	4628      	mov	r0, r5
 800bb38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb3c:	f002 bfd6 	b.w	800eaec <ucdr_serialize_string>
 800bb40:	7909      	ldrb	r1, [r1, #4]
 800bb42:	f7fd f915 	bl	8008d70 <ucdr_serialize_uint8_t>
 800bb46:	4606      	mov	r6, r0
 800bb48:	b120      	cbz	r0, 800bb54 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800bb4a:	7923      	ldrb	r3, [r4, #4]
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	d039      	beq.n	800bbc4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800bb50:	2b03      	cmp	r3, #3
 800bb52:	d02f      	beq.n	800bbb4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800bb54:	2202      	movs	r2, #2
 800bb56:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	f002 fea6 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800bb60:	4030      	ands	r0, r6
 800bb62:	b2c0      	uxtb	r0, r0
 800bb64:	bd70      	pop	{r4, r5, r6, pc}
 800bb66:	2000      	movs	r0, #0
 800bb68:	bd70      	pop	{r4, r5, r6, pc}
 800bb6a:	7909      	ldrb	r1, [r1, #4]
 800bb6c:	f7fd f900 	bl	8008d70 <ucdr_serialize_uint8_t>
 800bb70:	4606      	mov	r6, r0
 800bb72:	b158      	cbz	r0, 800bb8c <uxr_serialize_ObjectVariant.part.0+0x94>
 800bb74:	7923      	ldrb	r3, [r4, #4]
 800bb76:	2b02      	cmp	r3, #2
 800bb78:	d003      	beq.n	800bb82 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800bb7a:	2b03      	cmp	r3, #3
 800bb7c:	d028      	beq.n	800bbd0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d104      	bne.n	800bb8c <uxr_serialize_ObjectVariant.part.0+0x94>
 800bb82:	68a1      	ldr	r1, [r4, #8]
 800bb84:	4628      	mov	r0, r5
 800bb86:	f002 ffb1 	bl	800eaec <ucdr_serialize_string>
 800bb8a:	4606      	mov	r6, r0
 800bb8c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800bb90:	4628      	mov	r0, r5
 800bb92:	f7fd fe29 	bl	80097e8 <ucdr_serialize_int16_t>
 800bb96:	4030      	ands	r0, r6
 800bb98:	b2c0      	uxtb	r0, r0
 800bb9a:	bd70      	pop	{r4, r5, r6, pc}
 800bb9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bba0:	3104      	adds	r1, #4
 800bba2:	f7ff be7b 	b.w	800b89c <uxr_serialize_CLIENT_Representation>
 800bba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bbaa:	3104      	adds	r1, #4
 800bbac:	f7ff bf32 	b.w	800ba14 <uxr_serialize_AGENT_Representation>
 800bbb0:	2001      	movs	r0, #1
 800bbb2:	bd70      	pop	{r4, r5, r6, pc}
 800bbb4:	68a2      	ldr	r2, [r4, #8]
 800bbb6:	f104 010c 	add.w	r1, r4, #12
 800bbba:	4628      	mov	r0, r5
 800bbbc:	f002 ff6a 	bl	800ea94 <ucdr_serialize_sequence_uint8_t>
 800bbc0:	4606      	mov	r6, r0
 800bbc2:	e7c7      	b.n	800bb54 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800bbc4:	68a1      	ldr	r1, [r4, #8]
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	f002 ff90 	bl	800eaec <ucdr_serialize_string>
 800bbcc:	4606      	mov	r6, r0
 800bbce:	e7c1      	b.n	800bb54 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800bbd0:	68a2      	ldr	r2, [r4, #8]
 800bbd2:	f104 010c 	add.w	r1, r4, #12
 800bbd6:	4628      	mov	r0, r5
 800bbd8:	f002 ff5c 	bl	800ea94 <ucdr_serialize_sequence_uint8_t>
 800bbdc:	4606      	mov	r6, r0
 800bbde:	e7d5      	b.n	800bb8c <uxr_serialize_ObjectVariant.part.0+0x94>

0800bbe0 <uxr_deserialize_DATAWRITER_Representation>:
 800bbe0:	b570      	push	{r4, r5, r6, lr}
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	460d      	mov	r5, r1
 800bbe6:	f7fd f8d9 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800bbea:	4604      	mov	r4, r0
 800bbec:	b130      	cbz	r0, 800bbfc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800bbee:	782b      	ldrb	r3, [r5, #0]
 800bbf0:	2b02      	cmp	r3, #2
 800bbf2:	d00c      	beq.n	800bc0e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800bbf4:	2b03      	cmp	r3, #3
 800bbf6:	d012      	beq.n	800bc1e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d008      	beq.n	800bc0e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800bbfc:	2202      	movs	r2, #2
 800bbfe:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800bc02:	4630      	mov	r0, r6
 800bc04:	f002 feb6 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800bc08:	4020      	ands	r0, r4
 800bc0a:	b2c0      	uxtb	r0, r0
 800bc0c:	bd70      	pop	{r4, r5, r6, pc}
 800bc0e:	6869      	ldr	r1, [r5, #4]
 800bc10:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc14:	4630      	mov	r0, r6
 800bc16:	f002 ff79 	bl	800eb0c <ucdr_deserialize_string>
 800bc1a:	4604      	mov	r4, r0
 800bc1c:	e7ee      	b.n	800bbfc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800bc1e:	1d2b      	adds	r3, r5, #4
 800bc20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc24:	f105 0108 	add.w	r1, r5, #8
 800bc28:	4630      	mov	r0, r6
 800bc2a:	f002 ff45 	bl	800eab8 <ucdr_deserialize_sequence_uint8_t>
 800bc2e:	4604      	mov	r4, r0
 800bc30:	e7e4      	b.n	800bbfc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800bc32:	bf00      	nop

0800bc34 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800bc34:	b570      	push	{r4, r5, r6, lr}
 800bc36:	460d      	mov	r5, r1
 800bc38:	7809      	ldrb	r1, [r1, #0]
 800bc3a:	4606      	mov	r6, r0
 800bc3c:	f7fd f86a 	bl	8008d14 <ucdr_serialize_bool>
 800bc40:	782b      	ldrb	r3, [r5, #0]
 800bc42:	4604      	mov	r4, r0
 800bc44:	b94b      	cbnz	r3, 800bc5a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800bc46:	7a29      	ldrb	r1, [r5, #8]
 800bc48:	4630      	mov	r0, r6
 800bc4a:	f7fd f863 	bl	8008d14 <ucdr_serialize_bool>
 800bc4e:	7a2b      	ldrb	r3, [r5, #8]
 800bc50:	4004      	ands	r4, r0
 800bc52:	b2e4      	uxtb	r4, r4
 800bc54:	b943      	cbnz	r3, 800bc68 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800bc56:	4620      	mov	r0, r4
 800bc58:	bd70      	pop	{r4, r5, r6, pc}
 800bc5a:	6869      	ldr	r1, [r5, #4]
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	f002 ff45 	bl	800eaec <ucdr_serialize_string>
 800bc62:	4004      	ands	r4, r0
 800bc64:	b2e4      	uxtb	r4, r4
 800bc66:	e7ee      	b.n	800bc46 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800bc68:	68e9      	ldr	r1, [r5, #12]
 800bc6a:	4630      	mov	r0, r6
 800bc6c:	f002 ff3e 	bl	800eaec <ucdr_serialize_string>
 800bc70:	4004      	ands	r4, r0
 800bc72:	4620      	mov	r0, r4
 800bc74:	bd70      	pop	{r4, r5, r6, pc}
 800bc76:	bf00      	nop

0800bc78 <uxr_serialize_OBJK_Topic_Binary>:
 800bc78:	b570      	push	{r4, r5, r6, lr}
 800bc7a:	460d      	mov	r5, r1
 800bc7c:	6809      	ldr	r1, [r1, #0]
 800bc7e:	4606      	mov	r6, r0
 800bc80:	f002 ff34 	bl	800eaec <ucdr_serialize_string>
 800bc84:	7929      	ldrb	r1, [r5, #4]
 800bc86:	4604      	mov	r4, r0
 800bc88:	4630      	mov	r0, r6
 800bc8a:	f7fd f843 	bl	8008d14 <ucdr_serialize_bool>
 800bc8e:	792b      	ldrb	r3, [r5, #4]
 800bc90:	4004      	ands	r4, r0
 800bc92:	b2e4      	uxtb	r4, r4
 800bc94:	b943      	cbnz	r3, 800bca8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800bc96:	7b29      	ldrb	r1, [r5, #12]
 800bc98:	4630      	mov	r0, r6
 800bc9a:	f7fd f83b 	bl	8008d14 <ucdr_serialize_bool>
 800bc9e:	7b2b      	ldrb	r3, [r5, #12]
 800bca0:	4004      	ands	r4, r0
 800bca2:	b93b      	cbnz	r3, 800bcb4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800bca4:	4620      	mov	r0, r4
 800bca6:	bd70      	pop	{r4, r5, r6, pc}
 800bca8:	68a9      	ldr	r1, [r5, #8]
 800bcaa:	4630      	mov	r0, r6
 800bcac:	f002 ff1e 	bl	800eaec <ucdr_serialize_string>
 800bcb0:	4004      	ands	r4, r0
 800bcb2:	e7f0      	b.n	800bc96 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800bcb4:	6929      	ldr	r1, [r5, #16]
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	f002 ff18 	bl	800eaec <ucdr_serialize_string>
 800bcbc:	4004      	ands	r4, r0
 800bcbe:	b2e4      	uxtb	r4, r4
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	bd70      	pop	{r4, r5, r6, pc}

0800bcc4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800bcc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc8:	460c      	mov	r4, r1
 800bcca:	7809      	ldrb	r1, [r1, #0]
 800bccc:	4606      	mov	r6, r0
 800bcce:	f7fd f821 	bl	8008d14 <ucdr_serialize_bool>
 800bcd2:	7823      	ldrb	r3, [r4, #0]
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	b96b      	cbnz	r3, 800bcf4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800bcd8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800bcdc:	4630      	mov	r0, r6
 800bcde:	f7fd f819 	bl	8008d14 <ucdr_serialize_bool>
 800bce2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bce6:	4005      	ands	r5, r0
 800bce8:	b2ed      	uxtb	r5, r5
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d169      	bne.n	800bdc2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800bcee:	4628      	mov	r0, r5
 800bcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcf4:	6861      	ldr	r1, [r4, #4]
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	f7fd fa50 	bl	800919c <ucdr_serialize_uint32_t>
 800bcfc:	6863      	ldr	r3, [r4, #4]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d06b      	beq.n	800bdda <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800bd02:	2800      	cmp	r0, #0
 800bd04:	d067      	beq.n	800bdd6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bd06:	68a1      	ldr	r1, [r4, #8]
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f002 feef 	bl	800eaec <ucdr_serialize_string>
 800bd0e:	6863      	ldr	r3, [r4, #4]
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d953      	bls.n	800bdbc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	d05e      	beq.n	800bdd6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bd18:	68e1      	ldr	r1, [r4, #12]
 800bd1a:	4630      	mov	r0, r6
 800bd1c:	f002 fee6 	bl	800eaec <ucdr_serialize_string>
 800bd20:	6863      	ldr	r3, [r4, #4]
 800bd22:	2b02      	cmp	r3, #2
 800bd24:	d94a      	bls.n	800bdbc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bd26:	2800      	cmp	r0, #0
 800bd28:	d055      	beq.n	800bdd6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bd2a:	6921      	ldr	r1, [r4, #16]
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	f002 fedd 	bl	800eaec <ucdr_serialize_string>
 800bd32:	6863      	ldr	r3, [r4, #4]
 800bd34:	2b03      	cmp	r3, #3
 800bd36:	d941      	bls.n	800bdbc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	d04c      	beq.n	800bdd6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bd3c:	6961      	ldr	r1, [r4, #20]
 800bd3e:	4630      	mov	r0, r6
 800bd40:	f002 fed4 	bl	800eaec <ucdr_serialize_string>
 800bd44:	6863      	ldr	r3, [r4, #4]
 800bd46:	2b04      	cmp	r3, #4
 800bd48:	d938      	bls.n	800bdbc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	d043      	beq.n	800bdd6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bd4e:	69a1      	ldr	r1, [r4, #24]
 800bd50:	4630      	mov	r0, r6
 800bd52:	f002 fecb 	bl	800eaec <ucdr_serialize_string>
 800bd56:	6863      	ldr	r3, [r4, #4]
 800bd58:	2b05      	cmp	r3, #5
 800bd5a:	d92f      	bls.n	800bdbc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d03a      	beq.n	800bdd6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bd60:	69e1      	ldr	r1, [r4, #28]
 800bd62:	4630      	mov	r0, r6
 800bd64:	f002 fec2 	bl	800eaec <ucdr_serialize_string>
 800bd68:	6863      	ldr	r3, [r4, #4]
 800bd6a:	2b06      	cmp	r3, #6
 800bd6c:	d926      	bls.n	800bdbc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bd6e:	b390      	cbz	r0, 800bdd6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bd70:	6a21      	ldr	r1, [r4, #32]
 800bd72:	4630      	mov	r0, r6
 800bd74:	f002 feba 	bl	800eaec <ucdr_serialize_string>
 800bd78:	6863      	ldr	r3, [r4, #4]
 800bd7a:	2b07      	cmp	r3, #7
 800bd7c:	d91e      	bls.n	800bdbc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bd7e:	b350      	cbz	r0, 800bdd6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bd80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bd82:	4630      	mov	r0, r6
 800bd84:	f002 feb2 	bl	800eaec <ucdr_serialize_string>
 800bd88:	6863      	ldr	r3, [r4, #4]
 800bd8a:	2b08      	cmp	r3, #8
 800bd8c:	d916      	bls.n	800bdbc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bd8e:	b310      	cbz	r0, 800bdd6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bd90:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800bd92:	4630      	mov	r0, r6
 800bd94:	f002 feaa 	bl	800eaec <ucdr_serialize_string>
 800bd98:	6863      	ldr	r3, [r4, #4]
 800bd9a:	2b09      	cmp	r3, #9
 800bd9c:	d90e      	bls.n	800bdbc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bd9e:	b1d0      	cbz	r0, 800bdd6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bda0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800bda4:	2709      	movs	r7, #9
 800bda6:	e000      	b.n	800bdaa <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800bda8:	b1a8      	cbz	r0, 800bdd6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bdaa:	f858 1b04 	ldr.w	r1, [r8], #4
 800bdae:	4630      	mov	r0, r6
 800bdb0:	f002 fe9c 	bl	800eaec <ucdr_serialize_string>
 800bdb4:	6862      	ldr	r2, [r4, #4]
 800bdb6:	3701      	adds	r7, #1
 800bdb8:	4297      	cmp	r7, r2
 800bdba:	d3f5      	bcc.n	800bda8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800bdbc:	4005      	ands	r5, r0
 800bdbe:	b2ed      	uxtb	r5, r5
 800bdc0:	e78a      	b.n	800bcd8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800bdc2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bdc4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800bdc8:	4630      	mov	r0, r6
 800bdca:	f002 fe63 	bl	800ea94 <ucdr_serialize_sequence_uint8_t>
 800bdce:	4005      	ands	r5, r0
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd6:	2500      	movs	r5, #0
 800bdd8:	e77e      	b.n	800bcd8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800bdda:	4028      	ands	r0, r5
 800bddc:	b2c5      	uxtb	r5, r0
 800bdde:	e77b      	b.n	800bcd8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800bde0 <uxr_serialize_OBJK_Publisher_Binary>:
 800bde0:	b570      	push	{r4, r5, r6, lr}
 800bde2:	460d      	mov	r5, r1
 800bde4:	7809      	ldrb	r1, [r1, #0]
 800bde6:	4606      	mov	r6, r0
 800bde8:	f7fc ff94 	bl	8008d14 <ucdr_serialize_bool>
 800bdec:	782b      	ldrb	r3, [r5, #0]
 800bdee:	4604      	mov	r4, r0
 800bdf0:	b94b      	cbnz	r3, 800be06 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800bdf2:	7a29      	ldrb	r1, [r5, #8]
 800bdf4:	4630      	mov	r0, r6
 800bdf6:	f7fc ff8d 	bl	8008d14 <ucdr_serialize_bool>
 800bdfa:	7a2b      	ldrb	r3, [r5, #8]
 800bdfc:	4004      	ands	r4, r0
 800bdfe:	b2e4      	uxtb	r4, r4
 800be00:	b943      	cbnz	r3, 800be14 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800be02:	4620      	mov	r0, r4
 800be04:	bd70      	pop	{r4, r5, r6, pc}
 800be06:	6869      	ldr	r1, [r5, #4]
 800be08:	4630      	mov	r0, r6
 800be0a:	f002 fe6f 	bl	800eaec <ucdr_serialize_string>
 800be0e:	4004      	ands	r4, r0
 800be10:	b2e4      	uxtb	r4, r4
 800be12:	e7ee      	b.n	800bdf2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800be14:	f105 010c 	add.w	r1, r5, #12
 800be18:	4630      	mov	r0, r6
 800be1a:	f7ff ff53 	bl	800bcc4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800be1e:	4004      	ands	r4, r0
 800be20:	4620      	mov	r0, r4
 800be22:	bd70      	pop	{r4, r5, r6, pc}

0800be24 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800be24:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800be28:	4688      	mov	r8, r1
 800be2a:	8809      	ldrh	r1, [r1, #0]
 800be2c:	4681      	mov	r9, r0
 800be2e:	f7fc ffcb 	bl	8008dc8 <ucdr_serialize_uint16_t>
 800be32:	f898 1002 	ldrb.w	r1, [r8, #2]
 800be36:	4606      	mov	r6, r0
 800be38:	4648      	mov	r0, r9
 800be3a:	f7fc ff6b 	bl	8008d14 <ucdr_serialize_bool>
 800be3e:	f898 3002 	ldrb.w	r3, [r8, #2]
 800be42:	4006      	ands	r6, r0
 800be44:	b2f5      	uxtb	r5, r6
 800be46:	b9eb      	cbnz	r3, 800be84 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800be48:	f898 1006 	ldrb.w	r1, [r8, #6]
 800be4c:	4648      	mov	r0, r9
 800be4e:	f7fc ff61 	bl	8008d14 <ucdr_serialize_bool>
 800be52:	f898 3006 	ldrb.w	r3, [r8, #6]
 800be56:	4005      	ands	r5, r0
 800be58:	bb7b      	cbnz	r3, 800beba <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800be5a:	f898 100c 	ldrb.w	r1, [r8, #12]
 800be5e:	4648      	mov	r0, r9
 800be60:	f7fc ff58 	bl	8008d14 <ucdr_serialize_bool>
 800be64:	f898 300c 	ldrb.w	r3, [r8, #12]
 800be68:	4005      	ands	r5, r0
 800be6a:	b9f3      	cbnz	r3, 800beaa <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800be6c:	f898 1014 	ldrb.w	r1, [r8, #20]
 800be70:	4648      	mov	r0, r9
 800be72:	f7fc ff4f 	bl	8008d14 <ucdr_serialize_bool>
 800be76:	f898 3014 	ldrb.w	r3, [r8, #20]
 800be7a:	4005      	ands	r5, r0
 800be7c:	b94b      	cbnz	r3, 800be92 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800be7e:	4628      	mov	r0, r5
 800be80:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800be84:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800be88:	4648      	mov	r0, r9
 800be8a:	f7fc ff9d 	bl	8008dc8 <ucdr_serialize_uint16_t>
 800be8e:	4005      	ands	r5, r0
 800be90:	e7da      	b.n	800be48 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800be92:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800be96:	f108 011c 	add.w	r1, r8, #28
 800be9a:	4648      	mov	r0, r9
 800be9c:	f002 fdfa 	bl	800ea94 <ucdr_serialize_sequence_uint8_t>
 800bea0:	4028      	ands	r0, r5
 800bea2:	b2c5      	uxtb	r5, r0
 800bea4:	4628      	mov	r0, r5
 800bea6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800beaa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800beae:	4648      	mov	r0, r9
 800beb0:	f7fd f974 	bl	800919c <ucdr_serialize_uint32_t>
 800beb4:	4028      	ands	r0, r5
 800beb6:	b2c5      	uxtb	r5, r0
 800beb8:	e7d8      	b.n	800be6c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800beba:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800bebe:	4648      	mov	r0, r9
 800bec0:	f7fd f96c 	bl	800919c <ucdr_serialize_uint32_t>
 800bec4:	4028      	ands	r0, r5
 800bec6:	b2c5      	uxtb	r5, r0
 800bec8:	e7c7      	b.n	800be5a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800beca:	bf00      	nop

0800becc <uxr_serialize_OBJK_DataWriter_Binary>:
 800becc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bece:	2202      	movs	r2, #2
 800bed0:	460d      	mov	r5, r1
 800bed2:	4606      	mov	r6, r0
 800bed4:	f002 fcea 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800bed8:	78a9      	ldrb	r1, [r5, #2]
 800beda:	4604      	mov	r4, r0
 800bedc:	4630      	mov	r0, r6
 800bede:	f7fc ff19 	bl	8008d14 <ucdr_serialize_bool>
 800bee2:	78ab      	ldrb	r3, [r5, #2]
 800bee4:	4004      	ands	r4, r0
 800bee6:	b2e4      	uxtb	r4, r4
 800bee8:	b90b      	cbnz	r3, 800beee <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800beea:	4620      	mov	r0, r4
 800beec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beee:	f105 0108 	add.w	r1, r5, #8
 800bef2:	4630      	mov	r0, r6
 800bef4:	f7ff ff96 	bl	800be24 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800bef8:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800befc:	4607      	mov	r7, r0
 800befe:	4630      	mov	r0, r6
 800bf00:	f7fc ff08 	bl	8008d14 <ucdr_serialize_bool>
 800bf04:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800bf08:	4038      	ands	r0, r7
 800bf0a:	b2c7      	uxtb	r7, r0
 800bf0c:	b913      	cbnz	r3, 800bf14 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800bf0e:	403c      	ands	r4, r7
 800bf10:	4620      	mov	r0, r4
 800bf12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf14:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f7fd fb95 	bl	8009648 <ucdr_serialize_uint64_t>
 800bf1e:	4007      	ands	r7, r0
 800bf20:	e7f5      	b.n	800bf0e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800bf22:	bf00      	nop

0800bf24 <uxr_deserialize_ObjectVariant>:
 800bf24:	b570      	push	{r4, r5, r6, lr}
 800bf26:	4605      	mov	r5, r0
 800bf28:	460e      	mov	r6, r1
 800bf2a:	f7fc ff37 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800bf2e:	b168      	cbz	r0, 800bf4c <uxr_deserialize_ObjectVariant+0x28>
 800bf30:	7833      	ldrb	r3, [r6, #0]
 800bf32:	3b01      	subs	r3, #1
 800bf34:	4604      	mov	r4, r0
 800bf36:	2b0d      	cmp	r3, #13
 800bf38:	d809      	bhi.n	800bf4e <uxr_deserialize_ObjectVariant+0x2a>
 800bf3a:	e8df f003 	tbb	[pc, r3]
 800bf3e:	0a41      	.short	0x0a41
 800bf40:	0a0a2323 	.word	0x0a0a2323
 800bf44:	10080a0a 	.word	0x10080a0a
 800bf48:	565c1010 	.word	0x565c1010
 800bf4c:	2400      	movs	r4, #0
 800bf4e:	4620      	mov	r0, r4
 800bf50:	bd70      	pop	{r4, r5, r6, pc}
 800bf52:	1d31      	adds	r1, r6, #4
 800bf54:	4628      	mov	r0, r5
 800bf56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf5a:	f7ff be41 	b.w	800bbe0 <uxr_deserialize_DATAWRITER_Representation>
 800bf5e:	1d31      	adds	r1, r6, #4
 800bf60:	4628      	mov	r0, r5
 800bf62:	f7fc ff1b 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800bf66:	2800      	cmp	r0, #0
 800bf68:	d0f0      	beq.n	800bf4c <uxr_deserialize_ObjectVariant+0x28>
 800bf6a:	7933      	ldrb	r3, [r6, #4]
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d001      	beq.n	800bf74 <uxr_deserialize_ObjectVariant+0x50>
 800bf70:	2b02      	cmp	r3, #2
 800bf72:	d1ec      	bne.n	800bf4e <uxr_deserialize_ObjectVariant+0x2a>
 800bf74:	68b1      	ldr	r1, [r6, #8]
 800bf76:	4628      	mov	r0, r5
 800bf78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf80:	f002 bdc4 	b.w	800eb0c <ucdr_deserialize_string>
 800bf84:	1d31      	adds	r1, r6, #4
 800bf86:	4628      	mov	r0, r5
 800bf88:	f7fc ff08 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800bf8c:	4604      	mov	r4, r0
 800bf8e:	b170      	cbz	r0, 800bfae <uxr_deserialize_ObjectVariant+0x8a>
 800bf90:	7933      	ldrb	r3, [r6, #4]
 800bf92:	2b02      	cmp	r3, #2
 800bf94:	d04c      	beq.n	800c030 <uxr_deserialize_ObjectVariant+0x10c>
 800bf96:	2b03      	cmp	r3, #3
 800bf98:	d109      	bne.n	800bfae <uxr_deserialize_ObjectVariant+0x8a>
 800bf9a:	f106 0308 	add.w	r3, r6, #8
 800bf9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfa2:	f106 010c 	add.w	r1, r6, #12
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	f002 fd86 	bl	800eab8 <ucdr_deserialize_sequence_uint8_t>
 800bfac:	4604      	mov	r4, r0
 800bfae:	2202      	movs	r2, #2
 800bfb0:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	f002 fcdd 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800bfba:	4020      	ands	r0, r4
 800bfbc:	b2c4      	uxtb	r4, r0
 800bfbe:	e7c6      	b.n	800bf4e <uxr_deserialize_ObjectVariant+0x2a>
 800bfc0:	1d31      	adds	r1, r6, #4
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	f7fc feea 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800bfc8:	4604      	mov	r4, r0
 800bfca:	b130      	cbz	r0, 800bfda <uxr_deserialize_ObjectVariant+0xb6>
 800bfcc:	7933      	ldrb	r3, [r6, #4]
 800bfce:	2b02      	cmp	r3, #2
 800bfd0:	d036      	beq.n	800c040 <uxr_deserialize_ObjectVariant+0x11c>
 800bfd2:	2b03      	cmp	r3, #3
 800bfd4:	d03c      	beq.n	800c050 <uxr_deserialize_ObjectVariant+0x12c>
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	d032      	beq.n	800c040 <uxr_deserialize_ObjectVariant+0x11c>
 800bfda:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800bfde:	4628      	mov	r0, r5
 800bfe0:	f7fd fc82 	bl	80098e8 <ucdr_deserialize_int16_t>
 800bfe4:	4020      	ands	r0, r4
 800bfe6:	b2c4      	uxtb	r4, r0
 800bfe8:	e7b1      	b.n	800bf4e <uxr_deserialize_ObjectVariant+0x2a>
 800bfea:	1d31      	adds	r1, r6, #4
 800bfec:	4628      	mov	r0, r5
 800bfee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bff2:	f7ff bcab 	b.w	800b94c <uxr_deserialize_CLIENT_Representation>
 800bff6:	2204      	movs	r2, #4
 800bff8:	18b1      	adds	r1, r6, r2
 800bffa:	4628      	mov	r0, r5
 800bffc:	f002 fcba 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800c000:	2202      	movs	r2, #2
 800c002:	f106 0108 	add.w	r1, r6, #8
 800c006:	4604      	mov	r4, r0
 800c008:	4628      	mov	r0, r5
 800c00a:	f002 fcb3 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800c00e:	2202      	movs	r2, #2
 800c010:	4004      	ands	r4, r0
 800c012:	f106 010a 	add.w	r1, r6, #10
 800c016:	4628      	mov	r0, r5
 800c018:	f002 fcac 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800c01c:	b2e4      	uxtb	r4, r4
 800c01e:	4603      	mov	r3, r0
 800c020:	f106 010c 	add.w	r1, r6, #12
 800c024:	4628      	mov	r0, r5
 800c026:	401c      	ands	r4, r3
 800c028:	f7fc fe8a 	bl	8008d40 <ucdr_deserialize_bool>
 800c02c:	4004      	ands	r4, r0
 800c02e:	e78e      	b.n	800bf4e <uxr_deserialize_ObjectVariant+0x2a>
 800c030:	68b1      	ldr	r1, [r6, #8]
 800c032:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c036:	4628      	mov	r0, r5
 800c038:	f002 fd68 	bl	800eb0c <ucdr_deserialize_string>
 800c03c:	4604      	mov	r4, r0
 800c03e:	e7b6      	b.n	800bfae <uxr_deserialize_ObjectVariant+0x8a>
 800c040:	68b1      	ldr	r1, [r6, #8]
 800c042:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c046:	4628      	mov	r0, r5
 800c048:	f002 fd60 	bl	800eb0c <ucdr_deserialize_string>
 800c04c:	4604      	mov	r4, r0
 800c04e:	e7c4      	b.n	800bfda <uxr_deserialize_ObjectVariant+0xb6>
 800c050:	f106 0308 	add.w	r3, r6, #8
 800c054:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c058:	f106 010c 	add.w	r1, r6, #12
 800c05c:	4628      	mov	r0, r5
 800c05e:	f002 fd2b 	bl	800eab8 <ucdr_deserialize_sequence_uint8_t>
 800c062:	4604      	mov	r4, r0
 800c064:	e7b9      	b.n	800bfda <uxr_deserialize_ObjectVariant+0xb6>
 800c066:	bf00      	nop

0800c068 <uxr_deserialize_BaseObjectRequest>:
 800c068:	b570      	push	{r4, r5, r6, lr}
 800c06a:	2202      	movs	r2, #2
 800c06c:	4605      	mov	r5, r0
 800c06e:	460e      	mov	r6, r1
 800c070:	f002 fc80 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800c074:	2202      	movs	r2, #2
 800c076:	4604      	mov	r4, r0
 800c078:	18b1      	adds	r1, r6, r2
 800c07a:	4628      	mov	r0, r5
 800c07c:	f002 fc7a 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800c080:	4020      	ands	r0, r4
 800c082:	b2c0      	uxtb	r0, r0
 800c084:	bd70      	pop	{r4, r5, r6, pc}
 800c086:	bf00      	nop

0800c088 <uxr_serialize_ActivityInfoVariant>:
 800c088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c08c:	460d      	mov	r5, r1
 800c08e:	7809      	ldrb	r1, [r1, #0]
 800c090:	4607      	mov	r7, r0
 800c092:	f7fc fe6d 	bl	8008d70 <ucdr_serialize_uint8_t>
 800c096:	4681      	mov	r9, r0
 800c098:	b138      	cbz	r0, 800c0aa <uxr_serialize_ActivityInfoVariant+0x22>
 800c09a:	782b      	ldrb	r3, [r5, #0]
 800c09c:	2b06      	cmp	r3, #6
 800c09e:	f000 8082 	beq.w	800c1a6 <uxr_serialize_ActivityInfoVariant+0x11e>
 800c0a2:	2b0d      	cmp	r3, #13
 800c0a4:	d016      	beq.n	800c0d4 <uxr_serialize_ActivityInfoVariant+0x4c>
 800c0a6:	2b05      	cmp	r3, #5
 800c0a8:	d002      	beq.n	800c0b0 <uxr_serialize_ActivityInfoVariant+0x28>
 800c0aa:	4648      	mov	r0, r9
 800c0ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0b0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800c0b4:	4638      	mov	r0, r7
 800c0b6:	f7fd fb97 	bl	80097e8 <ucdr_serialize_int16_t>
 800c0ba:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800c0be:	4681      	mov	r9, r0
 800c0c0:	4638      	mov	r0, r7
 800c0c2:	f7fd fac1 	bl	8009648 <ucdr_serialize_uint64_t>
 800c0c6:	ea09 0000 	and.w	r0, r9, r0
 800c0ca:	fa5f f980 	uxtb.w	r9, r0
 800c0ce:	4648      	mov	r0, r9
 800c0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0d4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800c0d8:	4638      	mov	r0, r7
 800c0da:	f7fd fb85 	bl	80097e8 <ucdr_serialize_int16_t>
 800c0de:	68e9      	ldr	r1, [r5, #12]
 800c0e0:	4681      	mov	r9, r0
 800c0e2:	4638      	mov	r0, r7
 800c0e4:	f7fd f85a 	bl	800919c <ucdr_serialize_uint32_t>
 800c0e8:	68eb      	ldr	r3, [r5, #12]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d0eb      	beq.n	800c0c6 <uxr_serialize_ActivityInfoVariant+0x3e>
 800c0ee:	b320      	cbz	r0, 800c13a <uxr_serialize_ActivityInfoVariant+0xb2>
 800c0f0:	f105 080c 	add.w	r8, r5, #12
 800c0f4:	2600      	movs	r6, #0
 800c0f6:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800c0fa:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800c0fe:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800c102:	4638      	mov	r0, r7
 800c104:	f7fc fe34 	bl	8008d70 <ucdr_serialize_uint8_t>
 800c108:	2800      	cmp	r0, #0
 800c10a:	d053      	beq.n	800c1b4 <uxr_serialize_ActivityInfoVariant+0x12c>
 800c10c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800c110:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800c114:	0074      	lsls	r4, r6, #1
 800c116:	00c9      	lsls	r1, r1, #3
 800c118:	2b03      	cmp	r3, #3
 800c11a:	d854      	bhi.n	800c1c6 <uxr_serialize_ActivityInfoVariant+0x13e>
 800c11c:	e8df f003 	tbb	[pc, r3]
 800c120:	02102132 	.word	0x02102132
 800c124:	4441      	add	r1, r8
 800c126:	4638      	mov	r0, r7
 800c128:	6889      	ldr	r1, [r1, #8]
 800c12a:	f002 fcdf 	bl	800eaec <ucdr_serialize_string>
 800c12e:	68ea      	ldr	r2, [r5, #12]
 800c130:	3601      	adds	r6, #1
 800c132:	4296      	cmp	r6, r2
 800c134:	d242      	bcs.n	800c1bc <uxr_serialize_ActivityInfoVariant+0x134>
 800c136:	2800      	cmp	r0, #0
 800c138:	d1dd      	bne.n	800c0f6 <uxr_serialize_ActivityInfoVariant+0x6e>
 800c13a:	f04f 0900 	mov.w	r9, #0
 800c13e:	e7b4      	b.n	800c0aa <uxr_serialize_ActivityInfoVariant+0x22>
 800c140:	3108      	adds	r1, #8
 800c142:	4441      	add	r1, r8
 800c144:	2210      	movs	r2, #16
 800c146:	4638      	mov	r0, r7
 800c148:	f002 fbb0 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800c14c:	4434      	add	r4, r6
 800c14e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800c152:	4604      	mov	r4, r0
 800c154:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c156:	4638      	mov	r0, r7
 800c158:	f7fd f820 	bl	800919c <ucdr_serialize_uint32_t>
 800c15c:	4020      	ands	r0, r4
 800c15e:	b2c0      	uxtb	r0, r0
 800c160:	e7e5      	b.n	800c12e <uxr_serialize_ActivityInfoVariant+0xa6>
 800c162:	3108      	adds	r1, #8
 800c164:	4441      	add	r1, r8
 800c166:	2204      	movs	r2, #4
 800c168:	4638      	mov	r0, r7
 800c16a:	f002 fb9f 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800c16e:	4434      	add	r4, r6
 800c170:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800c174:	4604      	mov	r4, r0
 800c176:	8b19      	ldrh	r1, [r3, #24]
 800c178:	4638      	mov	r0, r7
 800c17a:	f7fc fe25 	bl	8008dc8 <ucdr_serialize_uint16_t>
 800c17e:	4020      	ands	r0, r4
 800c180:	b2c0      	uxtb	r0, r0
 800c182:	e7d4      	b.n	800c12e <uxr_serialize_ActivityInfoVariant+0xa6>
 800c184:	3108      	adds	r1, #8
 800c186:	4441      	add	r1, r8
 800c188:	2202      	movs	r2, #2
 800c18a:	4638      	mov	r0, r7
 800c18c:	f002 fb8e 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800c190:	4434      	add	r4, r6
 800c192:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800c196:	4604      	mov	r4, r0
 800c198:	7d99      	ldrb	r1, [r3, #22]
 800c19a:	4638      	mov	r0, r7
 800c19c:	f7fc fde8 	bl	8008d70 <ucdr_serialize_uint8_t>
 800c1a0:	4020      	ands	r0, r4
 800c1a2:	b2c0      	uxtb	r0, r0
 800c1a4:	e7c3      	b.n	800c12e <uxr_serialize_ActivityInfoVariant+0xa6>
 800c1a6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800c1aa:	4638      	mov	r0, r7
 800c1ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1b0:	f7fd bb1a 	b.w	80097e8 <ucdr_serialize_int16_t>
 800c1b4:	68ea      	ldr	r2, [r5, #12]
 800c1b6:	3601      	adds	r6, #1
 800c1b8:	42b2      	cmp	r2, r6
 800c1ba:	d8be      	bhi.n	800c13a <uxr_serialize_ActivityInfoVariant+0xb2>
 800c1bc:	ea09 0900 	and.w	r9, r9, r0
 800c1c0:	fa5f f989 	uxtb.w	r9, r9
 800c1c4:	e771      	b.n	800c0aa <uxr_serialize_ActivityInfoVariant+0x22>
 800c1c6:	68eb      	ldr	r3, [r5, #12]
 800c1c8:	3601      	adds	r6, #1
 800c1ca:	429e      	cmp	r6, r3
 800c1cc:	f10a 0a18 	add.w	sl, sl, #24
 800c1d0:	d395      	bcc.n	800c0fe <uxr_serialize_ActivityInfoVariant+0x76>
 800c1d2:	e76a      	b.n	800c0aa <uxr_serialize_ActivityInfoVariant+0x22>

0800c1d4 <uxr_deserialize_BaseObjectReply>:
 800c1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d8:	2202      	movs	r2, #2
 800c1da:	4606      	mov	r6, r0
 800c1dc:	460f      	mov	r7, r1
 800c1de:	f002 fbc9 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800c1e2:	2202      	movs	r2, #2
 800c1e4:	18b9      	adds	r1, r7, r2
 800c1e6:	4605      	mov	r5, r0
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	f002 fbc3 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800c1ee:	1d39      	adds	r1, r7, #4
 800c1f0:	4680      	mov	r8, r0
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	f7fc fdd2 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800c1f8:	1d79      	adds	r1, r7, #5
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	f7fc fdcd 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800c202:	ea05 0508 	and.w	r5, r5, r8
 800c206:	402c      	ands	r4, r5
 800c208:	4020      	ands	r0, r4
 800c20a:	b2c0      	uxtb	r0, r0
 800c20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c210 <uxr_serialize_ReadSpecification>:
 800c210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c214:	460e      	mov	r6, r1
 800c216:	7809      	ldrb	r1, [r1, #0]
 800c218:	4607      	mov	r7, r0
 800c21a:	f7fc fda9 	bl	8008d70 <ucdr_serialize_uint8_t>
 800c21e:	7871      	ldrb	r1, [r6, #1]
 800c220:	4604      	mov	r4, r0
 800c222:	4638      	mov	r0, r7
 800c224:	f7fc fda4 	bl	8008d70 <ucdr_serialize_uint8_t>
 800c228:	78b1      	ldrb	r1, [r6, #2]
 800c22a:	4004      	ands	r4, r0
 800c22c:	4638      	mov	r0, r7
 800c22e:	f7fc fd71 	bl	8008d14 <ucdr_serialize_bool>
 800c232:	78b3      	ldrb	r3, [r6, #2]
 800c234:	b2e4      	uxtb	r4, r4
 800c236:	4004      	ands	r4, r0
 800c238:	b94b      	cbnz	r3, 800c24e <uxr_serialize_ReadSpecification+0x3e>
 800c23a:	7a31      	ldrb	r1, [r6, #8]
 800c23c:	4638      	mov	r0, r7
 800c23e:	f7fc fd69 	bl	8008d14 <ucdr_serialize_bool>
 800c242:	7a33      	ldrb	r3, [r6, #8]
 800c244:	4004      	ands	r4, r0
 800c246:	b943      	cbnz	r3, 800c25a <uxr_serialize_ReadSpecification+0x4a>
 800c248:	4620      	mov	r0, r4
 800c24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c24e:	6871      	ldr	r1, [r6, #4]
 800c250:	4638      	mov	r0, r7
 800c252:	f002 fc4b 	bl	800eaec <ucdr_serialize_string>
 800c256:	4004      	ands	r4, r0
 800c258:	e7ef      	b.n	800c23a <uxr_serialize_ReadSpecification+0x2a>
 800c25a:	8971      	ldrh	r1, [r6, #10]
 800c25c:	4638      	mov	r0, r7
 800c25e:	f7fc fdb3 	bl	8008dc8 <ucdr_serialize_uint16_t>
 800c262:	89b1      	ldrh	r1, [r6, #12]
 800c264:	4605      	mov	r5, r0
 800c266:	4638      	mov	r0, r7
 800c268:	f7fc fdae 	bl	8008dc8 <ucdr_serialize_uint16_t>
 800c26c:	89f1      	ldrh	r1, [r6, #14]
 800c26e:	4005      	ands	r5, r0
 800c270:	4638      	mov	r0, r7
 800c272:	f7fc fda9 	bl	8008dc8 <ucdr_serialize_uint16_t>
 800c276:	8a31      	ldrh	r1, [r6, #16]
 800c278:	4680      	mov	r8, r0
 800c27a:	4638      	mov	r0, r7
 800c27c:	f7fc fda4 	bl	8008dc8 <ucdr_serialize_uint16_t>
 800c280:	b2ed      	uxtb	r5, r5
 800c282:	4025      	ands	r5, r4
 800c284:	ea08 0505 	and.w	r5, r8, r5
 800c288:	ea00 0405 	and.w	r4, r0, r5
 800c28c:	4620      	mov	r0, r4
 800c28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c292:	bf00      	nop

0800c294 <uxr_serialize_CREATE_CLIENT_Payload>:
 800c294:	f7ff bb02 	b.w	800b89c <uxr_serialize_CLIENT_Representation>

0800c298 <uxr_serialize_CREATE_Payload>:
 800c298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c29a:	2202      	movs	r2, #2
 800c29c:	4607      	mov	r7, r0
 800c29e:	460e      	mov	r6, r1
 800c2a0:	f002 fb04 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800c2a4:	2202      	movs	r2, #2
 800c2a6:	18b1      	adds	r1, r6, r2
 800c2a8:	4605      	mov	r5, r0
 800c2aa:	4638      	mov	r0, r7
 800c2ac:	f002 fafe 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800c2b0:	7931      	ldrb	r1, [r6, #4]
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	4638      	mov	r0, r7
 800c2b6:	f7fc fd5b 	bl	8008d70 <ucdr_serialize_uint8_t>
 800c2ba:	b170      	cbz	r0, 800c2da <uxr_serialize_CREATE_Payload+0x42>
 800c2bc:	7933      	ldrb	r3, [r6, #4]
 800c2be:	402c      	ands	r4, r5
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	b2e4      	uxtb	r4, r4
 800c2c4:	2b0d      	cmp	r3, #13
 800c2c6:	d809      	bhi.n	800c2dc <uxr_serialize_CREATE_Payload+0x44>
 800c2c8:	e8df f003 	tbb	[pc, r3]
 800c2cc:	23230a4c 	.word	0x23230a4c
 800c2d0:	0a0a0a0a 	.word	0x0a0a0a0a
 800c2d4:	12121208 	.word	0x12121208
 800c2d8:	3e45      	.short	0x3e45
 800c2da:	2400      	movs	r4, #0
 800c2dc:	4620      	mov	r0, r4
 800c2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2e0:	f106 0108 	add.w	r1, r6, #8
 800c2e4:	4638      	mov	r0, r7
 800c2e6:	f7ff fbdf 	bl	800baa8 <uxr_serialize_DATAWRITER_Representation>
 800c2ea:	4004      	ands	r4, r0
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2f0:	7a31      	ldrb	r1, [r6, #8]
 800c2f2:	4638      	mov	r0, r7
 800c2f4:	f7fc fd3c 	bl	8008d70 <ucdr_serialize_uint8_t>
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	d0ee      	beq.n	800c2da <uxr_serialize_CREATE_Payload+0x42>
 800c2fc:	7a33      	ldrb	r3, [r6, #8]
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d001      	beq.n	800c306 <uxr_serialize_CREATE_Payload+0x6e>
 800c302:	2b02      	cmp	r3, #2
 800c304:	d1ea      	bne.n	800c2dc <uxr_serialize_CREATE_Payload+0x44>
 800c306:	68f1      	ldr	r1, [r6, #12]
 800c308:	4638      	mov	r0, r7
 800c30a:	f002 fbef 	bl	800eaec <ucdr_serialize_string>
 800c30e:	4004      	ands	r4, r0
 800c310:	e7e4      	b.n	800c2dc <uxr_serialize_CREATE_Payload+0x44>
 800c312:	7a31      	ldrb	r1, [r6, #8]
 800c314:	4638      	mov	r0, r7
 800c316:	f7fc fd2b 	bl	8008d70 <ucdr_serialize_uint8_t>
 800c31a:	4605      	mov	r5, r0
 800c31c:	b158      	cbz	r0, 800c336 <uxr_serialize_CREATE_Payload+0x9e>
 800c31e:	7a33      	ldrb	r3, [r6, #8]
 800c320:	2b02      	cmp	r3, #2
 800c322:	d034      	beq.n	800c38e <uxr_serialize_CREATE_Payload+0xf6>
 800c324:	2b03      	cmp	r3, #3
 800c326:	d106      	bne.n	800c336 <uxr_serialize_CREATE_Payload+0x9e>
 800c328:	68f2      	ldr	r2, [r6, #12]
 800c32a:	f106 0110 	add.w	r1, r6, #16
 800c32e:	4638      	mov	r0, r7
 800c330:	f002 fbb0 	bl	800ea94 <ucdr_serialize_sequence_uint8_t>
 800c334:	4605      	mov	r5, r0
 800c336:	2202      	movs	r2, #2
 800c338:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800c33c:	4638      	mov	r0, r7
 800c33e:	f002 fab5 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800c342:	4028      	ands	r0, r5
 800c344:	4004      	ands	r4, r0
 800c346:	e7c9      	b.n	800c2dc <uxr_serialize_CREATE_Payload+0x44>
 800c348:	f106 0108 	add.w	r1, r6, #8
 800c34c:	4638      	mov	r0, r7
 800c34e:	f7ff faa5 	bl	800b89c <uxr_serialize_CLIENT_Representation>
 800c352:	4004      	ands	r4, r0
 800c354:	e7c2      	b.n	800c2dc <uxr_serialize_CREATE_Payload+0x44>
 800c356:	f106 0108 	add.w	r1, r6, #8
 800c35a:	4638      	mov	r0, r7
 800c35c:	f7ff fb5a 	bl	800ba14 <uxr_serialize_AGENT_Representation>
 800c360:	4004      	ands	r4, r0
 800c362:	e7bb      	b.n	800c2dc <uxr_serialize_CREATE_Payload+0x44>
 800c364:	7a31      	ldrb	r1, [r6, #8]
 800c366:	4638      	mov	r0, r7
 800c368:	f7fc fd02 	bl	8008d70 <ucdr_serialize_uint8_t>
 800c36c:	4605      	mov	r5, r0
 800c36e:	b130      	cbz	r0, 800c37e <uxr_serialize_CREATE_Payload+0xe6>
 800c370:	7a33      	ldrb	r3, [r6, #8]
 800c372:	2b02      	cmp	r3, #2
 800c374:	d011      	beq.n	800c39a <uxr_serialize_CREATE_Payload+0x102>
 800c376:	2b03      	cmp	r3, #3
 800c378:	d015      	beq.n	800c3a6 <uxr_serialize_CREATE_Payload+0x10e>
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d00d      	beq.n	800c39a <uxr_serialize_CREATE_Payload+0x102>
 800c37e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800c382:	4638      	mov	r0, r7
 800c384:	f7fd fa30 	bl	80097e8 <ucdr_serialize_int16_t>
 800c388:	4028      	ands	r0, r5
 800c38a:	4004      	ands	r4, r0
 800c38c:	e7a6      	b.n	800c2dc <uxr_serialize_CREATE_Payload+0x44>
 800c38e:	68f1      	ldr	r1, [r6, #12]
 800c390:	4638      	mov	r0, r7
 800c392:	f002 fbab 	bl	800eaec <ucdr_serialize_string>
 800c396:	4605      	mov	r5, r0
 800c398:	e7cd      	b.n	800c336 <uxr_serialize_CREATE_Payload+0x9e>
 800c39a:	68f1      	ldr	r1, [r6, #12]
 800c39c:	4638      	mov	r0, r7
 800c39e:	f002 fba5 	bl	800eaec <ucdr_serialize_string>
 800c3a2:	4605      	mov	r5, r0
 800c3a4:	e7eb      	b.n	800c37e <uxr_serialize_CREATE_Payload+0xe6>
 800c3a6:	68f2      	ldr	r2, [r6, #12]
 800c3a8:	f106 0110 	add.w	r1, r6, #16
 800c3ac:	4638      	mov	r0, r7
 800c3ae:	f002 fb71 	bl	800ea94 <ucdr_serialize_sequence_uint8_t>
 800c3b2:	4605      	mov	r5, r0
 800c3b4:	e7e3      	b.n	800c37e <uxr_serialize_CREATE_Payload+0xe6>
 800c3b6:	bf00      	nop

0800c3b8 <uxr_deserialize_GET_INFO_Payload>:
 800c3b8:	b570      	push	{r4, r5, r6, lr}
 800c3ba:	2202      	movs	r2, #2
 800c3bc:	4605      	mov	r5, r0
 800c3be:	460e      	mov	r6, r1
 800c3c0:	f002 fad8 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800c3c4:	2202      	movs	r2, #2
 800c3c6:	18b1      	adds	r1, r6, r2
 800c3c8:	4604      	mov	r4, r0
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	f002 fad2 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800c3d0:	1d31      	adds	r1, r6, #4
 800c3d2:	4004      	ands	r4, r0
 800c3d4:	4628      	mov	r0, r5
 800c3d6:	f7fd f811 	bl	80093fc <ucdr_deserialize_uint32_t>
 800c3da:	b2e4      	uxtb	r4, r4
 800c3dc:	4020      	ands	r0, r4
 800c3de:	bd70      	pop	{r4, r5, r6, pc}

0800c3e0 <uxr_serialize_DELETE_Payload>:
 800c3e0:	b570      	push	{r4, r5, r6, lr}
 800c3e2:	2202      	movs	r2, #2
 800c3e4:	4605      	mov	r5, r0
 800c3e6:	460e      	mov	r6, r1
 800c3e8:	f002 fa60 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800c3ec:	2202      	movs	r2, #2
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	18b1      	adds	r1, r6, r2
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	f002 fa5a 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800c3f8:	4020      	ands	r0, r4
 800c3fa:	b2c0      	uxtb	r0, r0
 800c3fc:	bd70      	pop	{r4, r5, r6, pc}
 800c3fe:	bf00      	nop

0800c400 <uxr_deserialize_STATUS_AGENT_Payload>:
 800c400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c404:	4605      	mov	r5, r0
 800c406:	460e      	mov	r6, r1
 800c408:	f7fc fcc8 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800c40c:	1c71      	adds	r1, r6, #1
 800c40e:	4604      	mov	r4, r0
 800c410:	4628      	mov	r0, r5
 800c412:	f7fc fcc3 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800c416:	2204      	movs	r2, #4
 800c418:	18b1      	adds	r1, r6, r2
 800c41a:	4680      	mov	r8, r0
 800c41c:	4628      	mov	r0, r5
 800c41e:	f002 faa9 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800c422:	f106 0108 	add.w	r1, r6, #8
 800c426:	4607      	mov	r7, r0
 800c428:	2202      	movs	r2, #2
 800c42a:	4628      	mov	r0, r5
 800c42c:	f002 faa2 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800c430:	ea04 0308 	and.w	r3, r4, r8
 800c434:	b2db      	uxtb	r3, r3
 800c436:	ea03 0407 	and.w	r4, r3, r7
 800c43a:	2202      	movs	r2, #2
 800c43c:	4607      	mov	r7, r0
 800c43e:	f106 010a 	add.w	r1, r6, #10
 800c442:	4628      	mov	r0, r5
 800c444:	f002 fa96 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800c448:	f106 010c 	add.w	r1, r6, #12
 800c44c:	4603      	mov	r3, r0
 800c44e:	4628      	mov	r0, r5
 800c450:	461d      	mov	r5, r3
 800c452:	f7fc fc75 	bl	8008d40 <ucdr_deserialize_bool>
 800c456:	403c      	ands	r4, r7
 800c458:	4025      	ands	r5, r4
 800c45a:	4028      	ands	r0, r5
 800c45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c460 <uxr_deserialize_STATUS_Payload>:
 800c460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c464:	2202      	movs	r2, #2
 800c466:	4606      	mov	r6, r0
 800c468:	460f      	mov	r7, r1
 800c46a:	f002 fa83 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800c46e:	2202      	movs	r2, #2
 800c470:	18b9      	adds	r1, r7, r2
 800c472:	4605      	mov	r5, r0
 800c474:	4630      	mov	r0, r6
 800c476:	f002 fa7d 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800c47a:	1d39      	adds	r1, r7, #4
 800c47c:	4680      	mov	r8, r0
 800c47e:	4630      	mov	r0, r6
 800c480:	f7fc fc8c 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800c484:	1d79      	adds	r1, r7, #5
 800c486:	4604      	mov	r4, r0
 800c488:	4630      	mov	r0, r6
 800c48a:	f7fc fc87 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800c48e:	ea05 0508 	and.w	r5, r5, r8
 800c492:	402c      	ands	r4, r5
 800c494:	4020      	ands	r0, r4
 800c496:	b2c0      	uxtb	r0, r0
 800c498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c49c <uxr_serialize_INFO_Payload>:
 800c49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a0:	2202      	movs	r2, #2
 800c4a2:	460c      	mov	r4, r1
 800c4a4:	4605      	mov	r5, r0
 800c4a6:	f002 fa01 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800c4aa:	2202      	movs	r2, #2
 800c4ac:	18a1      	adds	r1, r4, r2
 800c4ae:	4680      	mov	r8, r0
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	f002 f9fb 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800c4b6:	7921      	ldrb	r1, [r4, #4]
 800c4b8:	4607      	mov	r7, r0
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	f7fc fc58 	bl	8008d70 <ucdr_serialize_uint8_t>
 800c4c0:	7961      	ldrb	r1, [r4, #5]
 800c4c2:	4606      	mov	r6, r0
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	f7fc fc53 	bl	8008d70 <ucdr_serialize_uint8_t>
 800c4ca:	ea08 0807 	and.w	r8, r8, r7
 800c4ce:	ea06 0608 	and.w	r6, r6, r8
 800c4d2:	4006      	ands	r6, r0
 800c4d4:	7a21      	ldrb	r1, [r4, #8]
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	f7fc fc1c 	bl	8008d14 <ucdr_serialize_bool>
 800c4dc:	7a23      	ldrb	r3, [r4, #8]
 800c4de:	b2f7      	uxtb	r7, r6
 800c4e0:	4606      	mov	r6, r0
 800c4e2:	b96b      	cbnz	r3, 800c500 <uxr_serialize_INFO_Payload+0x64>
 800c4e4:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800c4e8:	4628      	mov	r0, r5
 800c4ea:	f7fc fc13 	bl	8008d14 <ucdr_serialize_bool>
 800c4ee:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800c4f2:	4030      	ands	r0, r6
 800c4f4:	b2c6      	uxtb	r6, r0
 800c4f6:	b983      	cbnz	r3, 800c51a <uxr_serialize_INFO_Payload+0x7e>
 800c4f8:	ea06 0007 	and.w	r0, r6, r7
 800c4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c500:	7b21      	ldrb	r1, [r4, #12]
 800c502:	4628      	mov	r0, r5
 800c504:	f7fc fc34 	bl	8008d70 <ucdr_serialize_uint8_t>
 800c508:	b188      	cbz	r0, 800c52e <uxr_serialize_INFO_Payload+0x92>
 800c50a:	f104 010c 	add.w	r1, r4, #12
 800c50e:	4628      	mov	r0, r5
 800c510:	f7ff faf2 	bl	800baf8 <uxr_serialize_ObjectVariant.part.0>
 800c514:	4030      	ands	r0, r6
 800c516:	b2c6      	uxtb	r6, r0
 800c518:	e7e4      	b.n	800c4e4 <uxr_serialize_INFO_Payload+0x48>
 800c51a:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800c51e:	4628      	mov	r0, r5
 800c520:	f7ff fdb2 	bl	800c088 <uxr_serialize_ActivityInfoVariant>
 800c524:	4006      	ands	r6, r0
 800c526:	ea06 0007 	and.w	r0, r6, r7
 800c52a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c52e:	4606      	mov	r6, r0
 800c530:	e7d8      	b.n	800c4e4 <uxr_serialize_INFO_Payload+0x48>
 800c532:	bf00      	nop

0800c534 <uxr_serialize_READ_DATA_Payload>:
 800c534:	b570      	push	{r4, r5, r6, lr}
 800c536:	2202      	movs	r2, #2
 800c538:	4605      	mov	r5, r0
 800c53a:	460e      	mov	r6, r1
 800c53c:	f002 f9b6 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800c540:	2202      	movs	r2, #2
 800c542:	18b1      	adds	r1, r6, r2
 800c544:	4604      	mov	r4, r0
 800c546:	4628      	mov	r0, r5
 800c548:	f002 f9b0 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800c54c:	1d31      	adds	r1, r6, #4
 800c54e:	4004      	ands	r4, r0
 800c550:	4628      	mov	r0, r5
 800c552:	f7ff fe5d 	bl	800c210 <uxr_serialize_ReadSpecification>
 800c556:	b2e4      	uxtb	r4, r4
 800c558:	4020      	ands	r0, r4
 800c55a:	bd70      	pop	{r4, r5, r6, pc}

0800c55c <uxr_serialize_WRITE_DATA_Payload_Data>:
 800c55c:	b570      	push	{r4, r5, r6, lr}
 800c55e:	2202      	movs	r2, #2
 800c560:	4605      	mov	r5, r0
 800c562:	460e      	mov	r6, r1
 800c564:	f002 f9a2 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800c568:	2202      	movs	r2, #2
 800c56a:	4604      	mov	r4, r0
 800c56c:	18b1      	adds	r1, r6, r2
 800c56e:	4628      	mov	r0, r5
 800c570:	f002 f99c 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800c574:	4020      	ands	r0, r4
 800c576:	b2c0      	uxtb	r0, r0
 800c578:	bd70      	pop	{r4, r5, r6, pc}
 800c57a:	bf00      	nop

0800c57c <uxr_serialize_ACKNACK_Payload>:
 800c57c:	b570      	push	{r4, r5, r6, lr}
 800c57e:	460c      	mov	r4, r1
 800c580:	460e      	mov	r6, r1
 800c582:	f834 1b02 	ldrh.w	r1, [r4], #2
 800c586:	4605      	mov	r5, r0
 800c588:	f7fc fc1e 	bl	8008dc8 <ucdr_serialize_uint16_t>
 800c58c:	2202      	movs	r2, #2
 800c58e:	4621      	mov	r1, r4
 800c590:	4604      	mov	r4, r0
 800c592:	4628      	mov	r0, r5
 800c594:	f002 f98a 	bl	800e8ac <ucdr_serialize_array_uint8_t>
 800c598:	7931      	ldrb	r1, [r6, #4]
 800c59a:	4004      	ands	r4, r0
 800c59c:	4628      	mov	r0, r5
 800c59e:	f7fc fbe7 	bl	8008d70 <ucdr_serialize_uint8_t>
 800c5a2:	b2e4      	uxtb	r4, r4
 800c5a4:	4020      	ands	r0, r4
 800c5a6:	bd70      	pop	{r4, r5, r6, pc}

0800c5a8 <uxr_deserialize_ACKNACK_Payload>:
 800c5a8:	b570      	push	{r4, r5, r6, lr}
 800c5aa:	4605      	mov	r5, r0
 800c5ac:	460e      	mov	r6, r1
 800c5ae:	f7fc fd0b 	bl	8008fc8 <ucdr_deserialize_uint16_t>
 800c5b2:	2202      	movs	r2, #2
 800c5b4:	18b1      	adds	r1, r6, r2
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	f002 f9db 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800c5be:	1d31      	adds	r1, r6, #4
 800c5c0:	4004      	ands	r4, r0
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	f7fc fbea 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800c5c8:	b2e4      	uxtb	r4, r4
 800c5ca:	4020      	ands	r0, r4
 800c5cc:	bd70      	pop	{r4, r5, r6, pc}
 800c5ce:	bf00      	nop

0800c5d0 <uxr_serialize_HEARTBEAT_Payload>:
 800c5d0:	b570      	push	{r4, r5, r6, lr}
 800c5d2:	460d      	mov	r5, r1
 800c5d4:	8809      	ldrh	r1, [r1, #0]
 800c5d6:	4606      	mov	r6, r0
 800c5d8:	f7fc fbf6 	bl	8008dc8 <ucdr_serialize_uint16_t>
 800c5dc:	8869      	ldrh	r1, [r5, #2]
 800c5de:	4604      	mov	r4, r0
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	f7fc fbf1 	bl	8008dc8 <ucdr_serialize_uint16_t>
 800c5e6:	7929      	ldrb	r1, [r5, #4]
 800c5e8:	4004      	ands	r4, r0
 800c5ea:	4630      	mov	r0, r6
 800c5ec:	f7fc fbc0 	bl	8008d70 <ucdr_serialize_uint8_t>
 800c5f0:	b2e4      	uxtb	r4, r4
 800c5f2:	4020      	ands	r0, r4
 800c5f4:	bd70      	pop	{r4, r5, r6, pc}
 800c5f6:	bf00      	nop

0800c5f8 <uxr_deserialize_HEARTBEAT_Payload>:
 800c5f8:	b570      	push	{r4, r5, r6, lr}
 800c5fa:	4605      	mov	r5, r0
 800c5fc:	460e      	mov	r6, r1
 800c5fe:	f7fc fce3 	bl	8008fc8 <ucdr_deserialize_uint16_t>
 800c602:	1cb1      	adds	r1, r6, #2
 800c604:	4604      	mov	r4, r0
 800c606:	4628      	mov	r0, r5
 800c608:	f7fc fcde 	bl	8008fc8 <ucdr_deserialize_uint16_t>
 800c60c:	1d31      	adds	r1, r6, #4
 800c60e:	4004      	ands	r4, r0
 800c610:	4628      	mov	r0, r5
 800c612:	f7fc fbc3 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800c616:	b2e4      	uxtb	r4, r4
 800c618:	4020      	ands	r0, r4
 800c61a:	bd70      	pop	{r4, r5, r6, pc}

0800c61c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800c61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c620:	4605      	mov	r5, r0
 800c622:	460e      	mov	r6, r1
 800c624:	f7fd fa6c 	bl	8009b00 <ucdr_deserialize_int32_t>
 800c628:	1d31      	adds	r1, r6, #4
 800c62a:	4607      	mov	r7, r0
 800c62c:	4628      	mov	r0, r5
 800c62e:	f7fc fee5 	bl	80093fc <ucdr_deserialize_uint32_t>
 800c632:	f106 0108 	add.w	r1, r6, #8
 800c636:	4680      	mov	r8, r0
 800c638:	4628      	mov	r0, r5
 800c63a:	f7fd fa61 	bl	8009b00 <ucdr_deserialize_int32_t>
 800c63e:	f106 010c 	add.w	r1, r6, #12
 800c642:	4604      	mov	r4, r0
 800c644:	4628      	mov	r0, r5
 800c646:	f7fc fed9 	bl	80093fc <ucdr_deserialize_uint32_t>
 800c64a:	ea07 0708 	and.w	r7, r7, r8
 800c64e:	403c      	ands	r4, r7
 800c650:	f106 0110 	add.w	r1, r6, #16
 800c654:	4004      	ands	r4, r0
 800c656:	4628      	mov	r0, r5
 800c658:	f7fd fa52 	bl	8009b00 <ucdr_deserialize_int32_t>
 800c65c:	f106 0114 	add.w	r1, r6, #20
 800c660:	4607      	mov	r7, r0
 800c662:	4628      	mov	r0, r5
 800c664:	f7fc feca 	bl	80093fc <ucdr_deserialize_uint32_t>
 800c668:	b2e4      	uxtb	r4, r4
 800c66a:	403c      	ands	r4, r7
 800c66c:	4020      	ands	r0, r4
 800c66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c672:	bf00      	nop

0800c674 <uxr_deserialize_SampleIdentity>:
 800c674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c678:	220c      	movs	r2, #12
 800c67a:	4604      	mov	r4, r0
 800c67c:	460d      	mov	r5, r1
 800c67e:	f002 f979 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800c682:	2203      	movs	r2, #3
 800c684:	f105 010c 	add.w	r1, r5, #12
 800c688:	4607      	mov	r7, r0
 800c68a:	4620      	mov	r0, r4
 800c68c:	f002 f972 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 800c690:	f105 010f 	add.w	r1, r5, #15
 800c694:	4680      	mov	r8, r0
 800c696:	4620      	mov	r0, r4
 800c698:	f7fc fb80 	bl	8008d9c <ucdr_deserialize_uint8_t>
 800c69c:	f105 0110 	add.w	r1, r5, #16
 800c6a0:	4606      	mov	r6, r0
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	f7fd fa2c 	bl	8009b00 <ucdr_deserialize_int32_t>
 800c6a8:	f105 0114 	add.w	r1, r5, #20
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	ea07 0708 	and.w	r7, r7, r8
 800c6b4:	461c      	mov	r4, r3
 800c6b6:	f7fc fea1 	bl	80093fc <ucdr_deserialize_uint32_t>
 800c6ba:	403e      	ands	r6, r7
 800c6bc:	4034      	ands	r4, r6
 800c6be:	4020      	ands	r0, r4
 800c6c0:	b2c0      	uxtb	r0, r0
 800c6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6c6:	bf00      	nop

0800c6c8 <rcl_convert_rmw_ret_to_rcl_ret>:
 800c6c8:	280b      	cmp	r0, #11
 800c6ca:	dc0d      	bgt.n	800c6e8 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	db09      	blt.n	800c6e4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800c6d0:	280b      	cmp	r0, #11
 800c6d2:	d807      	bhi.n	800c6e4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800c6d4:	e8df f000 	tbb	[pc, r0]
 800c6d8:	07060607 	.word	0x07060607
 800c6dc:	06060606 	.word	0x06060606
 800c6e0:	07070606 	.word	0x07070606
 800c6e4:	2001      	movs	r0, #1
 800c6e6:	4770      	bx	lr
 800c6e8:	28cb      	cmp	r0, #203	; 0xcb
 800c6ea:	bf18      	it	ne
 800c6ec:	2001      	movne	r0, #1
 800c6ee:	4770      	bx	lr

0800c6f0 <rcl_get_zero_initialized_context>:
 800c6f0:	4a03      	ldr	r2, [pc, #12]	; (800c700 <rcl_get_zero_initialized_context+0x10>)
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c6f8:	e883 0003 	stmia.w	r3, {r0, r1}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	4770      	bx	lr
 800c700:	0801265c 	.word	0x0801265c

0800c704 <rcl_context_is_valid>:
 800c704:	b118      	cbz	r0, 800c70e <rcl_context_is_valid+0xa>
 800c706:	6840      	ldr	r0, [r0, #4]
 800c708:	3800      	subs	r0, #0
 800c70a:	bf18      	it	ne
 800c70c:	2001      	movne	r0, #1
 800c70e:	4770      	bx	lr

0800c710 <__cleanup_context>:
 800c710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c714:	4606      	mov	r6, r0
 800c716:	6800      	ldr	r0, [r0, #0]
 800c718:	2300      	movs	r3, #0
 800c71a:	6073      	str	r3, [r6, #4]
 800c71c:	2800      	cmp	r0, #0
 800c71e:	d049      	beq.n	800c7b4 <__cleanup_context+0xa4>
 800c720:	6947      	ldr	r7, [r0, #20]
 800c722:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800c726:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800c72a:	b137      	cbz	r7, 800c73a <__cleanup_context+0x2a>
 800c72c:	3014      	adds	r0, #20
 800c72e:	f000 f9bb 	bl	800caa8 <rcl_init_options_fini>
 800c732:	4607      	mov	r7, r0
 800c734:	2800      	cmp	r0, #0
 800c736:	d144      	bne.n	800c7c2 <__cleanup_context+0xb2>
 800c738:	6830      	ldr	r0, [r6, #0]
 800c73a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c73c:	b143      	cbz	r3, 800c750 <__cleanup_context+0x40>
 800c73e:	3028      	adds	r0, #40	; 0x28
 800c740:	f001 fd9a 	bl	800e278 <rmw_context_fini>
 800c744:	b118      	cbz	r0, 800c74e <__cleanup_context+0x3e>
 800c746:	2f00      	cmp	r7, #0
 800c748:	d03e      	beq.n	800c7c8 <__cleanup_context+0xb8>
 800c74a:	f7fb fde5 	bl	8008318 <rcutils_reset_error>
 800c74e:	6830      	ldr	r0, [r6, #0]
 800c750:	6a03      	ldr	r3, [r0, #32]
 800c752:	b1db      	cbz	r3, 800c78c <__cleanup_context+0x7c>
 800c754:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800c758:	2a01      	cmp	r2, #1
 800c75a:	f17c 0100 	sbcs.w	r1, ip, #0
 800c75e:	db11      	blt.n	800c784 <__cleanup_context+0x74>
 800c760:	2400      	movs	r4, #0
 800c762:	4625      	mov	r5, r4
 800c764:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c768:	4649      	mov	r1, r9
 800c76a:	b1b8      	cbz	r0, 800c79c <__cleanup_context+0x8c>
 800c76c:	47c0      	blx	r8
 800c76e:	6833      	ldr	r3, [r6, #0]
 800c770:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800c774:	3401      	adds	r4, #1
 800c776:	f145 0500 	adc.w	r5, r5, #0
 800c77a:	4294      	cmp	r4, r2
 800c77c:	eb75 010c 	sbcs.w	r1, r5, ip
 800c780:	6a1b      	ldr	r3, [r3, #32]
 800c782:	dbef      	blt.n	800c764 <__cleanup_context+0x54>
 800c784:	4618      	mov	r0, r3
 800c786:	4649      	mov	r1, r9
 800c788:	47c0      	blx	r8
 800c78a:	6830      	ldr	r0, [r6, #0]
 800c78c:	4649      	mov	r1, r9
 800c78e:	47c0      	blx	r8
 800c790:	2300      	movs	r3, #0
 800c792:	e9c6 3300 	strd	r3, r3, [r6]
 800c796:	4638      	mov	r0, r7
 800c798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c79c:	3401      	adds	r4, #1
 800c79e:	f145 0500 	adc.w	r5, r5, #0
 800c7a2:	4294      	cmp	r4, r2
 800c7a4:	eb75 010c 	sbcs.w	r1, r5, ip
 800c7a8:	dbdc      	blt.n	800c764 <__cleanup_context+0x54>
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	4649      	mov	r1, r9
 800c7ae:	47c0      	blx	r8
 800c7b0:	6830      	ldr	r0, [r6, #0]
 800c7b2:	e7eb      	b.n	800c78c <__cleanup_context+0x7c>
 800c7b4:	4607      	mov	r7, r0
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	e9c6 3300 	strd	r3, r3, [r6]
 800c7bc:	4638      	mov	r0, r7
 800c7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7c2:	f7fb fda9 	bl	8008318 <rcutils_reset_error>
 800c7c6:	e7b7      	b.n	800c738 <__cleanup_context+0x28>
 800c7c8:	f7ff ff7e 	bl	800c6c8 <rcl_convert_rmw_ret_to_rcl_ret>
 800c7cc:	4607      	mov	r7, r0
 800c7ce:	e7bc      	b.n	800c74a <__cleanup_context+0x3a>

0800c7d0 <rcl_init>:
 800c7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7d4:	1e05      	subs	r5, r0, #0
 800c7d6:	b09e      	sub	sp, #120	; 0x78
 800c7d8:	460e      	mov	r6, r1
 800c7da:	4690      	mov	r8, r2
 800c7dc:	461f      	mov	r7, r3
 800c7de:	f340 809c 	ble.w	800c91a <rcl_init+0x14a>
 800c7e2:	2900      	cmp	r1, #0
 800c7e4:	f000 809c 	beq.w	800c920 <rcl_init+0x150>
 800c7e8:	f1a1 0e04 	sub.w	lr, r1, #4
 800c7ec:	f04f 0c00 	mov.w	ip, #0
 800c7f0:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800c7f4:	f10c 0c01 	add.w	ip, ip, #1
 800c7f8:	2c00      	cmp	r4, #0
 800c7fa:	f000 8091 	beq.w	800c920 <rcl_init+0x150>
 800c7fe:	4565      	cmp	r5, ip
 800c800:	d1f6      	bne.n	800c7f0 <rcl_init+0x20>
 800c802:	f1b8 0f00 	cmp.w	r8, #0
 800c806:	f000 808b 	beq.w	800c920 <rcl_init+0x150>
 800c80a:	f8d8 4000 	ldr.w	r4, [r8]
 800c80e:	2c00      	cmp	r4, #0
 800c810:	f000 8086 	beq.w	800c920 <rcl_init+0x150>
 800c814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c816:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800c81a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c81e:	6823      	ldr	r3, [r4, #0]
 800c820:	f8cc 3000 	str.w	r3, [ip]
 800c824:	a819      	add	r0, sp, #100	; 0x64
 800c826:	f7fb fd53 	bl	80082d0 <rcutils_allocator_is_valid>
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d078      	beq.n	800c920 <rcl_init+0x150>
 800c82e:	2f00      	cmp	r7, #0
 800c830:	d076      	beq.n	800c920 <rcl_init+0x150>
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d178      	bne.n	800c92a <rcl_init+0x15a>
 800c838:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800c83c:	2178      	movs	r1, #120	; 0x78
 800c83e:	2001      	movs	r0, #1
 800c840:	4798      	blx	r3
 800c842:	4604      	mov	r4, r0
 800c844:	6038      	str	r0, [r7, #0]
 800c846:	2800      	cmp	r0, #0
 800c848:	f000 80b6 	beq.w	800c9b8 <rcl_init+0x1e8>
 800c84c:	a802      	add	r0, sp, #8
 800c84e:	f001 f957 	bl	800db00 <rmw_get_zero_initialized_context>
 800c852:	a902      	add	r1, sp, #8
 800c854:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c858:	2250      	movs	r2, #80	; 0x50
 800c85a:	ac19      	add	r4, sp, #100	; 0x64
 800c85c:	f004 fe5f 	bl	801151e <memcpy>
 800c860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c862:	f8d7 e000 	ldr.w	lr, [r7]
 800c866:	46f4      	mov	ip, lr
 800c868:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c86c:	6823      	ldr	r3, [r4, #0]
 800c86e:	f8cc 3000 	str.w	r3, [ip]
 800c872:	f10e 0114 	add.w	r1, lr, #20
 800c876:	4640      	mov	r0, r8
 800c878:	f000 f940 	bl	800cafc <rcl_init_options_copy>
 800c87c:	4604      	mov	r4, r0
 800c87e:	2800      	cmp	r0, #0
 800c880:	d144      	bne.n	800c90c <rcl_init+0x13c>
 800c882:	f8d7 9000 	ldr.w	r9, [r7]
 800c886:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800c88a:	f8c9 0020 	str.w	r0, [r9, #32]
 800c88e:	f8c9 5018 	str.w	r5, [r9, #24]
 800c892:	f8c9 801c 	str.w	r8, [r9, #28]
 800c896:	2d00      	cmp	r5, #0
 800c898:	d04e      	beq.n	800c938 <rcl_init+0x168>
 800c89a:	2e00      	cmp	r6, #0
 800c89c:	d04c      	beq.n	800c938 <rcl_init+0x168>
 800c89e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800c8a2:	2104      	movs	r1, #4
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	4798      	blx	r3
 800c8a8:	f8c9 0020 	str.w	r0, [r9, #32]
 800c8ac:	f8d7 9000 	ldr.w	r9, [r7]
 800c8b0:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800c8b4:	46ca      	mov	sl, r9
 800c8b6:	b343      	cbz	r3, 800c90a <rcl_init+0x13a>
 800c8b8:	2d01      	cmp	r5, #1
 800c8ba:	f178 0300 	sbcs.w	r3, r8, #0
 800c8be:	db3b      	blt.n	800c938 <rcl_init+0x168>
 800c8c0:	2400      	movs	r4, #0
 800c8c2:	3e04      	subs	r6, #4
 800c8c4:	46a1      	mov	r9, r4
 800c8c6:	e00b      	b.n	800c8e0 <rcl_init+0x110>
 800c8c8:	6831      	ldr	r1, [r6, #0]
 800c8ca:	f004 fe28 	bl	801151e <memcpy>
 800c8ce:	3401      	adds	r4, #1
 800c8d0:	f149 0900 	adc.w	r9, r9, #0
 800c8d4:	45c8      	cmp	r8, r9
 800c8d6:	bf08      	it	eq
 800c8d8:	42a5      	cmpeq	r5, r4
 800c8da:	d02b      	beq.n	800c934 <rcl_init+0x164>
 800c8dc:	f8d7 a000 	ldr.w	sl, [r7]
 800c8e0:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800c8e4:	f7f3 fc86 	bl	80001f4 <strlen>
 800c8e8:	1c42      	adds	r2, r0, #1
 800c8ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c8ec:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c8ee:	f8da a020 	ldr.w	sl, [sl, #32]
 800c8f2:	9201      	str	r2, [sp, #4]
 800c8f4:	4610      	mov	r0, r2
 800c8f6:	4798      	blx	r3
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800c8fe:	6a1b      	ldr	r3, [r3, #32]
 800c900:	9a01      	ldr	r2, [sp, #4]
 800c902:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c906:	2800      	cmp	r0, #0
 800c908:	d1de      	bne.n	800c8c8 <rcl_init+0xf8>
 800c90a:	240a      	movs	r4, #10
 800c90c:	4638      	mov	r0, r7
 800c90e:	f7ff feff 	bl	800c710 <__cleanup_context>
 800c912:	4620      	mov	r0, r4
 800c914:	b01e      	add	sp, #120	; 0x78
 800c916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c91a:	2900      	cmp	r1, #0
 800c91c:	f43f af71 	beq.w	800c802 <rcl_init+0x32>
 800c920:	240b      	movs	r4, #11
 800c922:	4620      	mov	r0, r4
 800c924:	b01e      	add	sp, #120	; 0x78
 800c926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c92a:	2464      	movs	r4, #100	; 0x64
 800c92c:	4620      	mov	r0, r4
 800c92e:	b01e      	add	sp, #120	; 0x78
 800c930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c934:	f8d7 9000 	ldr.w	r9, [r7]
 800c938:	4926      	ldr	r1, [pc, #152]	; (800c9d4 <rcl_init+0x204>)
 800c93a:	680b      	ldr	r3, [r1, #0]
 800c93c:	3301      	adds	r3, #1
 800c93e:	d036      	beq.n	800c9ae <rcl_init+0x1de>
 800c940:	600b      	str	r3, [r1, #0]
 800c942:	461a      	mov	r2, r3
 800c944:	2400      	movs	r4, #0
 800c946:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800c94a:	607b      	str	r3, [r7, #4]
 800c94c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c94e:	3301      	adds	r3, #1
 800c950:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800c954:	d034      	beq.n	800c9c0 <rcl_init+0x1f0>
 800c956:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800c95a:	b93b      	cbnz	r3, 800c96c <rcl_init+0x19c>
 800c95c:	3030      	adds	r0, #48	; 0x30
 800c95e:	f000 f939 	bl	800cbd4 <rcl_get_localhost_only>
 800c962:	4604      	mov	r4, r0
 800c964:	2800      	cmp	r0, #0
 800c966:	d1d1      	bne.n	800c90c <rcl_init+0x13c>
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	6958      	ldr	r0, [r3, #20]
 800c96c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800c96e:	aa18      	add	r2, sp, #96	; 0x60
 800c970:	a917      	add	r1, sp, #92	; 0x5c
 800c972:	f000 fd81 	bl	800d478 <rcl_validate_enclave_name>
 800c976:	4604      	mov	r4, r0
 800c978:	2800      	cmp	r0, #0
 800c97a:	d1c7      	bne.n	800c90c <rcl_init+0x13c>
 800c97c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c97e:	b9eb      	cbnz	r3, 800c9bc <rcl_init+0x1ec>
 800c980:	6839      	ldr	r1, [r7, #0]
 800c982:	694b      	ldr	r3, [r1, #20]
 800c984:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c986:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800c98a:	f000 fc3d 	bl	800d208 <rcl_get_security_options_from_environment>
 800c98e:	4604      	mov	r4, r0
 800c990:	2800      	cmp	r0, #0
 800c992:	d1bb      	bne.n	800c90c <rcl_init+0x13c>
 800c994:	6839      	ldr	r1, [r7, #0]
 800c996:	6948      	ldr	r0, [r1, #20]
 800c998:	3128      	adds	r1, #40	; 0x28
 800c99a:	3018      	adds	r0, #24
 800c99c:	f001 fb36 	bl	800e00c <rmw_init>
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	2800      	cmp	r0, #0
 800c9a4:	d0bd      	beq.n	800c922 <rcl_init+0x152>
 800c9a6:	f7ff fe8f 	bl	800c6c8 <rcl_convert_rmw_ret_to_rcl_ret>
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	e7ae      	b.n	800c90c <rcl_init+0x13c>
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	461c      	mov	r4, r3
 800c9b2:	600a      	str	r2, [r1, #0]
 800c9b4:	4613      	mov	r3, r2
 800c9b6:	e7c6      	b.n	800c946 <rcl_init+0x176>
 800c9b8:	240a      	movs	r4, #10
 800c9ba:	e7b2      	b.n	800c922 <rcl_init+0x152>
 800c9bc:	2401      	movs	r4, #1
 800c9be:	e7a5      	b.n	800c90c <rcl_init+0x13c>
 800c9c0:	3024      	adds	r0, #36	; 0x24
 800c9c2:	f003 fc5d 	bl	8010280 <rcl_get_default_domain_id>
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	d19f      	bne.n	800c90c <rcl_init+0x13c>
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	6958      	ldr	r0, [r3, #20]
 800c9d0:	e7c1      	b.n	800c956 <rcl_init+0x186>
 800c9d2:	bf00      	nop
 800c9d4:	20010aac 	.word	0x20010aac

0800c9d8 <rcl_get_zero_initialized_init_options>:
 800c9d8:	2000      	movs	r0, #0
 800c9da:	4770      	bx	lr

0800c9dc <rcl_init_options_init>:
 800c9dc:	b084      	sub	sp, #16
 800c9de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9e0:	b097      	sub	sp, #92	; 0x5c
 800c9e2:	ae1d      	add	r6, sp, #116	; 0x74
 800c9e4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800c9e8:	2800      	cmp	r0, #0
 800c9ea:	d058      	beq.n	800ca9e <rcl_init_options_init+0xc2>
 800c9ec:	6803      	ldr	r3, [r0, #0]
 800c9ee:	4605      	mov	r5, r0
 800c9f0:	b133      	cbz	r3, 800ca00 <rcl_init_options_init+0x24>
 800c9f2:	2464      	movs	r4, #100	; 0x64
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	b017      	add	sp, #92	; 0x5c
 800c9f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c9fc:	b004      	add	sp, #16
 800c9fe:	4770      	bx	lr
 800ca00:	4630      	mov	r0, r6
 800ca02:	f7fb fc65 	bl	80082d0 <rcutils_allocator_is_valid>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d049      	beq.n	800ca9e <rcl_init_options_init+0xc2>
 800ca0a:	46b4      	mov	ip, r6
 800ca0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca10:	ac11      	add	r4, sp, #68	; 0x44
 800ca12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca14:	f8dc 3000 	ldr.w	r3, [ip]
 800ca18:	6023      	str	r3, [r4, #0]
 800ca1a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800ca1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca1e:	2050      	movs	r0, #80	; 0x50
 800ca20:	4798      	blx	r3
 800ca22:	4604      	mov	r4, r0
 800ca24:	6028      	str	r0, [r5, #0]
 800ca26:	2800      	cmp	r0, #0
 800ca28:	d03b      	beq.n	800caa2 <rcl_init_options_init+0xc6>
 800ca2a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800ca2e:	4686      	mov	lr, r0
 800ca30:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca34:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ca38:	f8dc 3000 	ldr.w	r3, [ip]
 800ca3c:	f8ce 3000 	str.w	r3, [lr]
 800ca40:	a802      	add	r0, sp, #8
 800ca42:	f001 f86d 	bl	800db20 <rmw_get_zero_initialized_init_options>
 800ca46:	f10d 0e08 	add.w	lr, sp, #8
 800ca4a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ca4e:	f104 0c18 	add.w	ip, r4, #24
 800ca52:	682f      	ldr	r7, [r5, #0]
 800ca54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ca58:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ca5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ca60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ca64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ca68:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ca6c:	ac20      	add	r4, sp, #128	; 0x80
 800ca6e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ca72:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ca76:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ca7a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800ca7e:	f107 0018 	add.w	r0, r7, #24
 800ca82:	f001 f9cb 	bl	800de1c <rmw_init_options_init>
 800ca86:	4604      	mov	r4, r0
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	d0b3      	beq.n	800c9f4 <rcl_init_options_init+0x18>
 800ca8c:	9921      	ldr	r1, [sp, #132]	; 0x84
 800ca8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ca90:	6828      	ldr	r0, [r5, #0]
 800ca92:	4798      	blx	r3
 800ca94:	4620      	mov	r0, r4
 800ca96:	f7ff fe17 	bl	800c6c8 <rcl_convert_rmw_ret_to_rcl_ret>
 800ca9a:	4604      	mov	r4, r0
 800ca9c:	e7aa      	b.n	800c9f4 <rcl_init_options_init+0x18>
 800ca9e:	240b      	movs	r4, #11
 800caa0:	e7a8      	b.n	800c9f4 <rcl_init_options_init+0x18>
 800caa2:	240a      	movs	r4, #10
 800caa4:	e7a6      	b.n	800c9f4 <rcl_init_options_init+0x18>
 800caa6:	bf00      	nop

0800caa8 <rcl_init_options_fini>:
 800caa8:	b530      	push	{r4, r5, lr}
 800caaa:	b087      	sub	sp, #28
 800caac:	b1f0      	cbz	r0, 800caec <rcl_init_options_fini+0x44>
 800caae:	6803      	ldr	r3, [r0, #0]
 800cab0:	4604      	mov	r4, r0
 800cab2:	b1db      	cbz	r3, 800caec <rcl_init_options_fini+0x44>
 800cab4:	469c      	mov	ip, r3
 800cab6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800caba:	f10d 0e04 	add.w	lr, sp, #4
 800cabe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cac2:	f8dc 3000 	ldr.w	r3, [ip]
 800cac6:	f8ce 3000 	str.w	r3, [lr]
 800caca:	a801      	add	r0, sp, #4
 800cacc:	f7fb fc00 	bl	80082d0 <rcutils_allocator_is_valid>
 800cad0:	b160      	cbz	r0, 800caec <rcl_init_options_fini+0x44>
 800cad2:	6820      	ldr	r0, [r4, #0]
 800cad4:	3018      	adds	r0, #24
 800cad6:	f001 fa51 	bl	800df7c <rmw_init_options_fini>
 800cada:	4605      	mov	r5, r0
 800cadc:	b950      	cbnz	r0, 800caf4 <rcl_init_options_fini+0x4c>
 800cade:	6820      	ldr	r0, [r4, #0]
 800cae0:	9b02      	ldr	r3, [sp, #8]
 800cae2:	9905      	ldr	r1, [sp, #20]
 800cae4:	4798      	blx	r3
 800cae6:	4628      	mov	r0, r5
 800cae8:	b007      	add	sp, #28
 800caea:	bd30      	pop	{r4, r5, pc}
 800caec:	250b      	movs	r5, #11
 800caee:	4628      	mov	r0, r5
 800caf0:	b007      	add	sp, #28
 800caf2:	bd30      	pop	{r4, r5, pc}
 800caf4:	f7ff fde8 	bl	800c6c8 <rcl_convert_rmw_ret_to_rcl_ret>
 800caf8:	4605      	mov	r5, r0
 800cafa:	e7f8      	b.n	800caee <rcl_init_options_fini+0x46>

0800cafc <rcl_init_options_copy>:
 800cafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb00:	b094      	sub	sp, #80	; 0x50
 800cb02:	2800      	cmp	r0, #0
 800cb04:	d058      	beq.n	800cbb8 <rcl_init_options_copy+0xbc>
 800cb06:	4604      	mov	r4, r0
 800cb08:	6800      	ldr	r0, [r0, #0]
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	d054      	beq.n	800cbb8 <rcl_init_options_copy+0xbc>
 800cb0e:	460e      	mov	r6, r1
 800cb10:	f7fb fbde 	bl	80082d0 <rcutils_allocator_is_valid>
 800cb14:	2800      	cmp	r0, #0
 800cb16:	d04f      	beq.n	800cbb8 <rcl_init_options_copy+0xbc>
 800cb18:	2e00      	cmp	r6, #0
 800cb1a:	d04d      	beq.n	800cbb8 <rcl_init_options_copy+0xbc>
 800cb1c:	6833      	ldr	r3, [r6, #0]
 800cb1e:	b123      	cbz	r3, 800cb2a <rcl_init_options_copy+0x2e>
 800cb20:	2464      	movs	r4, #100	; 0x64
 800cb22:	4620      	mov	r0, r4
 800cb24:	b014      	add	sp, #80	; 0x50
 800cb26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb2a:	6827      	ldr	r7, [r4, #0]
 800cb2c:	46bc      	mov	ip, r7
 800cb2e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cb32:	ad0f      	add	r5, sp, #60	; 0x3c
 800cb34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cb36:	f8dc 3000 	ldr.w	r3, [ip]
 800cb3a:	f8d7 8000 	ldr.w	r8, [r7]
 800cb3e:	602b      	str	r3, [r5, #0]
 800cb40:	4619      	mov	r1, r3
 800cb42:	2050      	movs	r0, #80	; 0x50
 800cb44:	47c0      	blx	r8
 800cb46:	4605      	mov	r5, r0
 800cb48:	6030      	str	r0, [r6, #0]
 800cb4a:	b3d0      	cbz	r0, 800cbc2 <rcl_init_options_copy+0xc6>
 800cb4c:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 800cb50:	4686      	mov	lr, r0
 800cb52:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cb56:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cb5a:	f8dc 3000 	ldr.w	r3, [ip]
 800cb5e:	f8ce 3000 	str.w	r3, [lr]
 800cb62:	4668      	mov	r0, sp
 800cb64:	f000 ffdc 	bl	800db20 <rmw_get_zero_initialized_init_options>
 800cb68:	46ee      	mov	lr, sp
 800cb6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cb6e:	f105 0c18 	add.w	ip, r5, #24
 800cb72:	6824      	ldr	r4, [r4, #0]
 800cb74:	6835      	ldr	r5, [r6, #0]
 800cb76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cb7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb82:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cb86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb8a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800cb8e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800cb92:	f104 0018 	add.w	r0, r4, #24
 800cb96:	f105 0118 	add.w	r1, r5, #24
 800cb9a:	f001 f9a7 	bl	800deec <rmw_init_options_copy>
 800cb9e:	4604      	mov	r4, r0
 800cba0:	2800      	cmp	r0, #0
 800cba2:	d0be      	beq.n	800cb22 <rcl_init_options_copy+0x26>
 800cba4:	f7fb fba2 	bl	80082ec <rcutils_get_error_string>
 800cba8:	f7fb fbb6 	bl	8008318 <rcutils_reset_error>
 800cbac:	4630      	mov	r0, r6
 800cbae:	f7ff ff7b 	bl	800caa8 <rcl_init_options_fini>
 800cbb2:	b140      	cbz	r0, 800cbc6 <rcl_init_options_copy+0xca>
 800cbb4:	4604      	mov	r4, r0
 800cbb6:	e7b4      	b.n	800cb22 <rcl_init_options_copy+0x26>
 800cbb8:	240b      	movs	r4, #11
 800cbba:	4620      	mov	r0, r4
 800cbbc:	b014      	add	sp, #80	; 0x50
 800cbbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbc2:	240a      	movs	r4, #10
 800cbc4:	e7ad      	b.n	800cb22 <rcl_init_options_copy+0x26>
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	b014      	add	sp, #80	; 0x50
 800cbca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbce:	f7ff bd7b 	b.w	800c6c8 <rcl_convert_rmw_ret_to_rcl_ret>
 800cbd2:	bf00      	nop

0800cbd4 <rcl_get_localhost_only>:
 800cbd4:	b510      	push	{r4, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	2300      	movs	r3, #0
 800cbda:	9301      	str	r3, [sp, #4]
 800cbdc:	b1b8      	cbz	r0, 800cc0e <rcl_get_localhost_only+0x3a>
 800cbde:	4604      	mov	r4, r0
 800cbe0:	a901      	add	r1, sp, #4
 800cbe2:	480c      	ldr	r0, [pc, #48]	; (800cc14 <rcl_get_localhost_only+0x40>)
 800cbe4:	f000 fc90 	bl	800d508 <rcutils_get_env>
 800cbe8:	b110      	cbz	r0, 800cbf0 <rcl_get_localhost_only+0x1c>
 800cbea:	2001      	movs	r0, #1
 800cbec:	b002      	add	sp, #8
 800cbee:	bd10      	pop	{r4, pc}
 800cbf0:	9b01      	ldr	r3, [sp, #4]
 800cbf2:	b113      	cbz	r3, 800cbfa <rcl_get_localhost_only+0x26>
 800cbf4:	781a      	ldrb	r2, [r3, #0]
 800cbf6:	2a31      	cmp	r2, #49	; 0x31
 800cbf8:	d004      	beq.n	800cc04 <rcl_get_localhost_only+0x30>
 800cbfa:	2302      	movs	r3, #2
 800cbfc:	2000      	movs	r0, #0
 800cbfe:	7023      	strb	r3, [r4, #0]
 800cc00:	b002      	add	sp, #8
 800cc02:	bd10      	pop	{r4, pc}
 800cc04:	785b      	ldrb	r3, [r3, #1]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d1f7      	bne.n	800cbfa <rcl_get_localhost_only+0x26>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	e7f6      	b.n	800cbfc <rcl_get_localhost_only+0x28>
 800cc0e:	200b      	movs	r0, #11
 800cc10:	b002      	add	sp, #8
 800cc12:	bd10      	pop	{r4, pc}
 800cc14:	08012664 	.word	0x08012664

0800cc18 <rcl_get_zero_initialized_node>:
 800cc18:	4a03      	ldr	r2, [pc, #12]	; (800cc28 <rcl_get_zero_initialized_node+0x10>)
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cc20:	e883 0003 	stmia.w	r3, {r0, r1}
 800cc24:	4618      	mov	r0, r3
 800cc26:	4770      	bx	lr
 800cc28:	0801268c 	.word	0x0801268c

0800cc2c <rcl_node_init>:
 800cc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc30:	b0a9      	sub	sp, #164	; 0xa4
 800cc32:	4604      	mov	r4, r0
 800cc34:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 800cc38:	a823      	add	r0, sp, #140	; 0x8c
 800cc3a:	460e      	mov	r6, r1
 800cc3c:	4615      	mov	r5, r2
 800cc3e:	461f      	mov	r7, r3
 800cc40:	f003 fd46 	bl	80106d0 <rcl_guard_condition_get_default_options>
 800cc44:	f1b8 0f00 	cmp.w	r8, #0
 800cc48:	f000 80e6 	beq.w	800ce18 <rcl_node_init+0x1ec>
 800cc4c:	4640      	mov	r0, r8
 800cc4e:	f7fb fb3f 	bl	80082d0 <rcutils_allocator_is_valid>
 800cc52:	2800      	cmp	r0, #0
 800cc54:	f000 80e0 	beq.w	800ce18 <rcl_node_init+0x1ec>
 800cc58:	2e00      	cmp	r6, #0
 800cc5a:	f000 80dd 	beq.w	800ce18 <rcl_node_init+0x1ec>
 800cc5e:	2d00      	cmp	r5, #0
 800cc60:	f000 80da 	beq.w	800ce18 <rcl_node_init+0x1ec>
 800cc64:	2c00      	cmp	r4, #0
 800cc66:	f000 80d7 	beq.w	800ce18 <rcl_node_init+0x1ec>
 800cc6a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800cc6e:	f1b9 0f00 	cmp.w	r9, #0
 800cc72:	f040 80fd 	bne.w	800ce70 <rcl_node_init+0x244>
 800cc76:	2f00      	cmp	r7, #0
 800cc78:	f000 80ce 	beq.w	800ce18 <rcl_node_init+0x1ec>
 800cc7c:	4638      	mov	r0, r7
 800cc7e:	f7ff fd41 	bl	800c704 <rcl_context_is_valid>
 800cc82:	4682      	mov	sl, r0
 800cc84:	2800      	cmp	r0, #0
 800cc86:	f000 80cd 	beq.w	800ce24 <rcl_node_init+0x1f8>
 800cc8a:	464a      	mov	r2, r9
 800cc8c:	a922      	add	r1, sp, #136	; 0x88
 800cc8e:	4630      	mov	r0, r6
 800cc90:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 800cc94:	f001 f83a 	bl	800dd0c <rmw_validate_node_name>
 800cc98:	4681      	mov	r9, r0
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	f040 80be 	bne.w	800ce1c <rcl_node_init+0x1f0>
 800cca0:	9822      	ldr	r0, [sp, #136]	; 0x88
 800cca2:	2800      	cmp	r0, #0
 800cca4:	f040 80f0 	bne.w	800ce88 <rcl_node_init+0x25c>
 800cca8:	4628      	mov	r0, r5
 800ccaa:	f7f3 faa3 	bl	80001f4 <strlen>
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	f040 80bb 	bne.w	800ce2a <rcl_node_init+0x1fe>
 800ccb4:	4d7c      	ldr	r5, [pc, #496]	; (800cea8 <rcl_node_init+0x27c>)
 800ccb6:	a922      	add	r1, sp, #136	; 0x88
 800ccb8:	2200      	movs	r2, #0
 800ccba:	4628      	mov	r0, r5
 800ccbc:	f001 f808 	bl	800dcd0 <rmw_validate_namespace>
 800ccc0:	4681      	mov	r9, r0
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	f040 80aa 	bne.w	800ce1c <rcl_node_init+0x1f0>
 800ccc8:	4682      	mov	sl, r0
 800ccca:	9822      	ldr	r0, [sp, #136]	; 0x88
 800cccc:	2800      	cmp	r0, #0
 800ccce:	f040 80e0 	bne.w	800ce92 <rcl_node_init+0x266>
 800ccd2:	f8d8 3000 	ldr.w	r3, [r8]
 800ccd6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ccda:	2078      	movs	r0, #120	; 0x78
 800ccdc:	4798      	blx	r3
 800ccde:	4681      	mov	r9, r0
 800cce0:	6060      	str	r0, [r4, #4]
 800cce2:	2800      	cmp	r0, #0
 800cce4:	f000 80ca 	beq.w	800ce7c <rcl_node_init+0x250>
 800cce8:	2200      	movs	r2, #0
 800ccea:	2300      	movs	r3, #0
 800ccec:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 800ccf0:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 800ccf4:	a808      	add	r0, sp, #32
 800ccf6:	f000 f907 	bl	800cf08 <rcl_node_get_default_options>
 800ccfa:	a908      	add	r1, sp, #32
 800ccfc:	4648      	mov	r0, r9
 800ccfe:	2268      	movs	r2, #104	; 0x68
 800cd00:	f004 fc0d 	bl	801151e <memcpy>
 800cd04:	6861      	ldr	r1, [r4, #4]
 800cd06:	6027      	str	r7, [r4, #0]
 800cd08:	4640      	mov	r0, r8
 800cd0a:	f000 f90b 	bl	800cf24 <rcl_node_options_copy>
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d158      	bne.n	800cdc4 <rcl_node_init+0x198>
 800cd12:	4628      	mov	r0, r5
 800cd14:	f7f3 fa6e 	bl	80001f4 <strlen>
 800cd18:	4428      	add	r0, r5
 800cd1a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800cd1e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800cd22:	2b2f      	cmp	r3, #47	; 0x2f
 800cd24:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cd28:	9300      	str	r3, [sp, #0]
 800cd2a:	bf0c      	ite	eq
 800cd2c:	4b5f      	ldreq	r3, [pc, #380]	; (800ceac <rcl_node_init+0x280>)
 800cd2e:	4b60      	ldrne	r3, [pc, #384]	; (800ceb0 <rcl_node_init+0x284>)
 800cd30:	9302      	str	r3, [sp, #8]
 800cd32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cd36:	9301      	str	r3, [sp, #4]
 800cd38:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800cd3c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800cd40:	f000 fc0a 	bl	800d558 <rcutils_format_string_limit>
 800cd44:	6823      	ldr	r3, [r4, #0]
 800cd46:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 800cd4a:	6818      	ldr	r0, [r3, #0]
 800cd4c:	4631      	mov	r1, r6
 800cd4e:	3028      	adds	r0, #40	; 0x28
 800cd50:	462a      	mov	r2, r5
 800cd52:	6866      	ldr	r6, [r4, #4]
 800cd54:	f001 fbae 	bl	800e4b4 <rmw_create_node>
 800cd58:	6863      	ldr	r3, [r4, #4]
 800cd5a:	66b0      	str	r0, [r6, #104]	; 0x68
 800cd5c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	d032      	beq.n	800cdc8 <rcl_node_init+0x19c>
 800cd62:	f001 fc3b 	bl	800e5dc <rmw_node_get_graph_guard_condition>
 800cd66:	4681      	mov	r9, r0
 800cd68:	b360      	cbz	r0, 800cdc4 <rcl_node_init+0x198>
 800cd6a:	f8d8 3000 	ldr.w	r3, [r8]
 800cd6e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cd72:	6866      	ldr	r6, [r4, #4]
 800cd74:	2008      	movs	r0, #8
 800cd76:	4798      	blx	r3
 800cd78:	6863      	ldr	r3, [r4, #4]
 800cd7a:	66f0      	str	r0, [r6, #108]	; 0x6c
 800cd7c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 800cd80:	f1bb 0f00 	cmp.w	fp, #0
 800cd84:	d020      	beq.n	800cdc8 <rcl_node_init+0x19c>
 800cd86:	a806      	add	r0, sp, #24
 800cd88:	f003 fc12 	bl	80105b0 <rcl_get_zero_initialized_guard_condition>
 800cd8c:	a806      	add	r0, sp, #24
 800cd8e:	c803      	ldmia	r0, {r0, r1}
 800cd90:	6863      	ldr	r3, [r4, #4]
 800cd92:	46c4      	mov	ip, r8
 800cd94:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 800cd98:	e88b 0003 	stmia.w	fp, {r0, r1}
 800cd9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cda0:	ae23      	add	r6, sp, #140	; 0x8c
 800cda2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cda4:	f8dc 3000 	ldr.w	r3, [ip]
 800cda8:	6033      	str	r3, [r6, #0]
 800cdaa:	ab28      	add	r3, sp, #160	; 0xa0
 800cdac:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800cdb0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cdb4:	4649      	mov	r1, r9
 800cdb6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cdb8:	463a      	mov	r2, r7
 800cdba:	4670      	mov	r0, lr
 800cdbc:	f003 fc02 	bl	80105c4 <rcl_guard_condition_init_from_rmw>
 800cdc0:	4681      	mov	r9, r0
 800cdc2:	b328      	cbz	r0, 800ce10 <rcl_node_init+0x1e4>
 800cdc4:	6863      	ldr	r3, [r4, #4]
 800cdc6:	b1f3      	cbz	r3, 800ce06 <rcl_node_init+0x1da>
 800cdc8:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800cdca:	b128      	cbz	r0, 800cdd8 <rcl_node_init+0x1ac>
 800cdcc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cdd0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cdd4:	4798      	blx	r3
 800cdd6:	6863      	ldr	r3, [r4, #4]
 800cdd8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800cdda:	b110      	cbz	r0, 800cde2 <rcl_node_init+0x1b6>
 800cddc:	f001 fb82 	bl	800e4e4 <rmw_destroy_node>
 800cde0:	6863      	ldr	r3, [r4, #4]
 800cde2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800cde4:	b148      	cbz	r0, 800cdfa <rcl_node_init+0x1ce>
 800cde6:	f003 fc4d 	bl	8010684 <rcl_guard_condition_fini>
 800cdea:	6863      	ldr	r3, [r4, #4]
 800cdec:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cdf0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800cdf2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cdf6:	4798      	blx	r3
 800cdf8:	6863      	ldr	r3, [r4, #4]
 800cdfa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ce04:	4798      	blx	r3
 800ce06:	2300      	movs	r3, #0
 800ce08:	e9c4 3300 	strd	r3, r3, [r4]
 800ce0c:	f04f 0901 	mov.w	r9, #1
 800ce10:	f1ba 0f00 	cmp.w	sl, #0
 800ce14:	d125      	bne.n	800ce62 <rcl_node_init+0x236>
 800ce16:	e001      	b.n	800ce1c <rcl_node_init+0x1f0>
 800ce18:	f04f 090b 	mov.w	r9, #11
 800ce1c:	4648      	mov	r0, r9
 800ce1e:	b029      	add	sp, #164	; 0xa4
 800ce20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce24:	f04f 0965 	mov.w	r9, #101	; 0x65
 800ce28:	e7f8      	b.n	800ce1c <rcl_node_init+0x1f0>
 800ce2a:	782b      	ldrb	r3, [r5, #0]
 800ce2c:	2b2f      	cmp	r3, #47	; 0x2f
 800ce2e:	f43f af42 	beq.w	800ccb6 <rcl_node_init+0x8a>
 800ce32:	9503      	str	r5, [sp, #12]
 800ce34:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ce38:	9300      	str	r3, [sp, #0]
 800ce3a:	4b1e      	ldr	r3, [pc, #120]	; (800ceb4 <rcl_node_init+0x288>)
 800ce3c:	9302      	str	r3, [sp, #8]
 800ce3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ce42:	9301      	str	r3, [sp, #4]
 800ce44:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800ce48:	f000 fb86 	bl	800d558 <rcutils_format_string_limit>
 800ce4c:	4605      	mov	r5, r0
 800ce4e:	b340      	cbz	r0, 800cea2 <rcl_node_init+0x276>
 800ce50:	2200      	movs	r2, #0
 800ce52:	a922      	add	r1, sp, #136	; 0x88
 800ce54:	9222      	str	r2, [sp, #136]	; 0x88
 800ce56:	f000 ff3b 	bl	800dcd0 <rmw_validate_namespace>
 800ce5a:	4681      	mov	r9, r0
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	f43f af34 	beq.w	800ccca <rcl_node_init+0x9e>
 800ce62:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ce66:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ce6a:	4628      	mov	r0, r5
 800ce6c:	4798      	blx	r3
 800ce6e:	e7d5      	b.n	800ce1c <rcl_node_init+0x1f0>
 800ce70:	f04f 0964 	mov.w	r9, #100	; 0x64
 800ce74:	4648      	mov	r0, r9
 800ce76:	b029      	add	sp, #164	; 0xa4
 800ce78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce7c:	f04f 090a 	mov.w	r9, #10
 800ce80:	f1ba 0f00 	cmp.w	sl, #0
 800ce84:	d1ed      	bne.n	800ce62 <rcl_node_init+0x236>
 800ce86:	e7c9      	b.n	800ce1c <rcl_node_init+0x1f0>
 800ce88:	f000 ff92 	bl	800ddb0 <rmw_node_name_validation_result_string>
 800ce8c:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800ce90:	e7c4      	b.n	800ce1c <rcl_node_init+0x1f0>
 800ce92:	f000 ff2f 	bl	800dcf4 <rmw_namespace_validation_result_string>
 800ce96:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800ce9a:	f1ba 0f00 	cmp.w	sl, #0
 800ce9e:	d1e0      	bne.n	800ce62 <rcl_node_init+0x236>
 800cea0:	e7bc      	b.n	800ce1c <rcl_node_init+0x1f0>
 800cea2:	f04f 090a 	mov.w	r9, #10
 800cea6:	e7b9      	b.n	800ce1c <rcl_node_init+0x1f0>
 800cea8:	0801267c 	.word	0x0801267c
 800ceac:	08012500 	.word	0x08012500
 800ceb0:	08012684 	.word	0x08012684
 800ceb4:	08012680 	.word	0x08012680

0800ceb8 <rcl_node_is_valid>:
 800ceb8:	b130      	cbz	r0, 800cec8 <rcl_node_is_valid+0x10>
 800ceba:	6843      	ldr	r3, [r0, #4]
 800cebc:	b123      	cbz	r3, 800cec8 <rcl_node_is_valid+0x10>
 800cebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cec0:	b113      	cbz	r3, 800cec8 <rcl_node_is_valid+0x10>
 800cec2:	6800      	ldr	r0, [r0, #0]
 800cec4:	f7ff bc1e 	b.w	800c704 <rcl_context_is_valid>
 800cec8:	2000      	movs	r0, #0
 800ceca:	4770      	bx	lr

0800cecc <rcl_node_get_name>:
 800cecc:	b120      	cbz	r0, 800ced8 <rcl_node_get_name+0xc>
 800cece:	6840      	ldr	r0, [r0, #4]
 800ced0:	b110      	cbz	r0, 800ced8 <rcl_node_get_name+0xc>
 800ced2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800ced4:	b100      	cbz	r0, 800ced8 <rcl_node_get_name+0xc>
 800ced6:	6880      	ldr	r0, [r0, #8]
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop

0800cedc <rcl_node_get_namespace>:
 800cedc:	b120      	cbz	r0, 800cee8 <rcl_node_get_namespace+0xc>
 800cede:	6840      	ldr	r0, [r0, #4]
 800cee0:	b110      	cbz	r0, 800cee8 <rcl_node_get_namespace+0xc>
 800cee2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800cee4:	b100      	cbz	r0, 800cee8 <rcl_node_get_namespace+0xc>
 800cee6:	68c0      	ldr	r0, [r0, #12]
 800cee8:	4770      	bx	lr
 800ceea:	bf00      	nop

0800ceec <rcl_node_get_options>:
 800ceec:	b128      	cbz	r0, 800cefa <rcl_node_get_options+0xe>
 800ceee:	6840      	ldr	r0, [r0, #4]
 800cef0:	b118      	cbz	r0, 800cefa <rcl_node_get_options+0xe>
 800cef2:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	bf08      	it	eq
 800cef8:	2000      	moveq	r0, #0
 800cefa:	4770      	bx	lr

0800cefc <rcl_node_get_rmw_handle>:
 800cefc:	b110      	cbz	r0, 800cf04 <rcl_node_get_rmw_handle+0x8>
 800cefe:	6840      	ldr	r0, [r0, #4]
 800cf00:	b100      	cbz	r0, 800cf04 <rcl_node_get_rmw_handle+0x8>
 800cf02:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800cf04:	4770      	bx	lr
 800cf06:	bf00      	nop

0800cf08 <rcl_node_get_default_options>:
 800cf08:	b510      	push	{r4, lr}
 800cf0a:	2268      	movs	r2, #104	; 0x68
 800cf0c:	4604      	mov	r4, r0
 800cf0e:	2100      	movs	r1, #0
 800cf10:	f004 f9e6 	bl	80112e0 <memset>
 800cf14:	4620      	mov	r0, r4
 800cf16:	f7fb f9cd 	bl	80082b4 <rcutils_get_default_allocator>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	7523      	strb	r3, [r4, #20]
 800cf1e:	4620      	mov	r0, r4
 800cf20:	bd10      	pop	{r4, pc}
 800cf22:	bf00      	nop

0800cf24 <rcl_node_options_copy>:
 800cf24:	b1d0      	cbz	r0, 800cf5c <rcl_node_options_copy+0x38>
 800cf26:	b570      	push	{r4, r5, r6, lr}
 800cf28:	460c      	mov	r4, r1
 800cf2a:	b1a9      	cbz	r1, 800cf58 <rcl_node_options_copy+0x34>
 800cf2c:	4288      	cmp	r0, r1
 800cf2e:	4684      	mov	ip, r0
 800cf30:	d012      	beq.n	800cf58 <rcl_node_options_copy+0x34>
 800cf32:	4605      	mov	r5, r0
 800cf34:	8a86      	ldrh	r6, [r0, #20]
 800cf36:	468e      	mov	lr, r1
 800cf38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf3a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cf3e:	682b      	ldr	r3, [r5, #0]
 800cf40:	f8ce 3000 	str.w	r3, [lr]
 800cf44:	f10c 0118 	add.w	r1, ip, #24
 800cf48:	2250      	movs	r2, #80	; 0x50
 800cf4a:	82a6      	strh	r6, [r4, #20]
 800cf4c:	f104 0018 	add.w	r0, r4, #24
 800cf50:	f004 fae5 	bl	801151e <memcpy>
 800cf54:	2000      	movs	r0, #0
 800cf56:	bd70      	pop	{r4, r5, r6, pc}
 800cf58:	200b      	movs	r0, #11
 800cf5a:	bd70      	pop	{r4, r5, r6, pc}
 800cf5c:	200b      	movs	r0, #11
 800cf5e:	4770      	bx	lr

0800cf60 <rcl_node_resolve_name>:
 800cf60:	b082      	sub	sp, #8
 800cf62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf66:	b091      	sub	sp, #68	; 0x44
 800cf68:	ac1a      	add	r4, sp, #104	; 0x68
 800cf6a:	e884 000c 	stmia.w	r4, {r2, r3}
 800cf6e:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d03b      	beq.n	800cfee <rcl_node_resolve_name+0x8e>
 800cf76:	460c      	mov	r4, r1
 800cf78:	4605      	mov	r5, r0
 800cf7a:	f7ff ffb7 	bl	800ceec <rcl_node_get_options>
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	d037      	beq.n	800cff2 <rcl_node_resolve_name+0x92>
 800cf82:	4628      	mov	r0, r5
 800cf84:	f7ff ffa2 	bl	800cecc <rcl_node_get_name>
 800cf88:	4606      	mov	r6, r0
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	f7ff ffa6 	bl	800cedc <rcl_node_get_namespace>
 800cf90:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800cf94:	4681      	mov	r9, r0
 800cf96:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cf9a:	ad0b      	add	r5, sp, #44	; 0x2c
 800cf9c:	46ac      	mov	ip, r5
 800cf9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cfa2:	f8de 3000 	ldr.w	r3, [lr]
 800cfa6:	f8cc 3000 	str.w	r3, [ip]
 800cfaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cfac:	b1fb      	cbz	r3, 800cfee <rcl_node_resolve_name+0x8e>
 800cfae:	468a      	mov	sl, r1
 800cfb0:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800cfb4:	f000 fc28 	bl	800d808 <rcutils_get_zero_initialized_string_map>
 800cfb8:	ab10      	add	r3, sp, #64	; 0x40
 800cfba:	9008      	str	r0, [sp, #32]
 800cfbc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800cfc0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	e895 000c 	ldmia.w	r5, {r2, r3}
 800cfca:	a808      	add	r0, sp, #32
 800cfcc:	f000 fc94 	bl	800d8f8 <rcutils_string_map_init>
 800cfd0:	4607      	mov	r7, r0
 800cfd2:	b180      	cbz	r0, 800cff6 <rcl_node_resolve_name+0x96>
 800cfd4:	f7fb f98a 	bl	80082ec <rcutils_get_error_string>
 800cfd8:	f7fb f99e 	bl	8008318 <rcutils_reset_error>
 800cfdc:	2f0a      	cmp	r7, #10
 800cfde:	bf18      	it	ne
 800cfe0:	2701      	movne	r7, #1
 800cfe2:	4638      	mov	r0, r7
 800cfe4:	b011      	add	sp, #68	; 0x44
 800cfe6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfea:	b002      	add	sp, #8
 800cfec:	4770      	bx	lr
 800cfee:	270b      	movs	r7, #11
 800cff0:	e7f7      	b.n	800cfe2 <rcl_node_resolve_name+0x82>
 800cff2:	2701      	movs	r7, #1
 800cff4:	e7f5      	b.n	800cfe2 <rcl_node_resolve_name+0x82>
 800cff6:	9009      	str	r0, [sp, #36]	; 0x24
 800cff8:	9007      	str	r0, [sp, #28]
 800cffa:	a808      	add	r0, sp, #32
 800cffc:	f003 fad2 	bl	80105a4 <rcl_get_default_topic_name_substitutions>
 800d000:	4607      	mov	r7, r0
 800d002:	b1a8      	cbz	r0, 800d030 <rcl_node_resolve_name+0xd0>
 800d004:	280a      	cmp	r0, #10
 800d006:	9c07      	ldr	r4, [sp, #28]
 800d008:	d000      	beq.n	800d00c <rcl_node_resolve_name+0xac>
 800d00a:	2701      	movs	r7, #1
 800d00c:	a808      	add	r0, sp, #32
 800d00e:	f000 fcb3 	bl	800d978 <rcutils_string_map_fini>
 800d012:	2800      	cmp	r0, #0
 800d014:	d13d      	bne.n	800d092 <rcl_node_resolve_name+0x132>
 800d016:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d018:	4659      	mov	r1, fp
 800d01a:	47d0      	blx	sl
 800d01c:	4659      	mov	r1, fp
 800d01e:	4620      	mov	r0, r4
 800d020:	47d0      	blx	sl
 800d022:	f1b8 0f00 	cmp.w	r8, #0
 800d026:	d0dc      	beq.n	800cfe2 <rcl_node_resolve_name+0x82>
 800d028:	2f67      	cmp	r7, #103	; 0x67
 800d02a:	bf08      	it	eq
 800d02c:	2768      	moveq	r7, #104	; 0x68
 800d02e:	e7d8      	b.n	800cfe2 <rcl_node_resolve_name+0x82>
 800d030:	ab09      	add	r3, sp, #36	; 0x24
 800d032:	9305      	str	r3, [sp, #20]
 800d034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d036:	46ec      	mov	ip, sp
 800d038:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d03c:	682b      	ldr	r3, [r5, #0]
 800d03e:	f8cc 3000 	str.w	r3, [ip]
 800d042:	464a      	mov	r2, r9
 800d044:	4631      	mov	r1, r6
 800d046:	4620      	mov	r0, r4
 800d048:	ab08      	add	r3, sp, #32
 800d04a:	f003 f94d 	bl	80102e8 <rcl_expand_topic_name>
 800d04e:	4607      	mov	r7, r0
 800d050:	b9b8      	cbnz	r0, 800d082 <rcl_node_resolve_name+0x122>
 800d052:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d054:	9009      	str	r0, [sp, #36]	; 0x24
 800d056:	4602      	mov	r2, r0
 800d058:	a90a      	add	r1, sp, #40	; 0x28
 800d05a:	4620      	mov	r0, r4
 800d05c:	f000 fd74 	bl	800db48 <rmw_validate_full_topic_name>
 800d060:	b988      	cbnz	r0, 800d086 <rcl_node_resolve_name+0x126>
 800d062:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d064:	b9d5      	cbnz	r5, 800d09c <rcl_node_resolve_name+0x13c>
 800d066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d068:	a808      	add	r0, sp, #32
 800d06a:	601c      	str	r4, [r3, #0]
 800d06c:	f000 fc84 	bl	800d978 <rcutils_string_map_fini>
 800d070:	4607      	mov	r7, r0
 800d072:	b1a8      	cbz	r0, 800d0a0 <rcl_node_resolve_name+0x140>
 800d074:	f7fb f93a 	bl	80082ec <rcutils_get_error_string>
 800d078:	462c      	mov	r4, r5
 800d07a:	f7fb f94d 	bl	8008318 <rcutils_reset_error>
 800d07e:	2701      	movs	r7, #1
 800d080:	e7c9      	b.n	800d016 <rcl_node_resolve_name+0xb6>
 800d082:	9c07      	ldr	r4, [sp, #28]
 800d084:	e7c2      	b.n	800d00c <rcl_node_resolve_name+0xac>
 800d086:	f7fb f931 	bl	80082ec <rcutils_get_error_string>
 800d08a:	2701      	movs	r7, #1
 800d08c:	f7fb f944 	bl	8008318 <rcutils_reset_error>
 800d090:	e7bc      	b.n	800d00c <rcl_node_resolve_name+0xac>
 800d092:	f7fb f92b 	bl	80082ec <rcutils_get_error_string>
 800d096:	f7fb f93f 	bl	8008318 <rcutils_reset_error>
 800d09a:	e7bc      	b.n	800d016 <rcl_node_resolve_name+0xb6>
 800d09c:	2767      	movs	r7, #103	; 0x67
 800d09e:	e7b5      	b.n	800d00c <rcl_node_resolve_name+0xac>
 800d0a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0a2:	4659      	mov	r1, fp
 800d0a4:	47d0      	blx	sl
 800d0a6:	4659      	mov	r1, fp
 800d0a8:	4638      	mov	r0, r7
 800d0aa:	47d0      	blx	sl
 800d0ac:	e799      	b.n	800cfe2 <rcl_node_resolve_name+0x82>
 800d0ae:	bf00      	nop

0800d0b0 <exact_match_lookup>:
 800d0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0b2:	f102 0708 	add.w	r7, r2, #8
 800d0b6:	460b      	mov	r3, r1
 800d0b8:	4614      	mov	r4, r2
 800d0ba:	4606      	mov	r6, r0
 800d0bc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800d0c0:	b085      	sub	sp, #20
 800d0c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	4919      	ldr	r1, [pc, #100]	; (800d130 <exact_match_lookup+0x80>)
 800d0ca:	e894 000c 	ldmia.w	r4, {r2, r3}
 800d0ce:	f000 fa35 	bl	800d53c <rcutils_join_path>
 800d0d2:	7833      	ldrb	r3, [r6, #0]
 800d0d4:	2b2f      	cmp	r3, #47	; 0x2f
 800d0d6:	4605      	mov	r5, r0
 800d0d8:	d023      	beq.n	800d122 <exact_match_lookup+0x72>
 800d0da:	f104 030c 	add.w	r3, r4, #12
 800d0de:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d0e2:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d0e6:	1c70      	adds	r0, r6, #1
 800d0e8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d0ec:	f000 fa2c 	bl	800d548 <rcutils_to_native_path>
 800d0f0:	4606      	mov	r6, r0
 800d0f2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800d0f6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d0fa:	4631      	mov	r1, r6
 800d0fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 800d100:	4628      	mov	r0, r5
 800d102:	f000 fa1b 	bl	800d53c <rcutils_join_path>
 800d106:	6862      	ldr	r2, [r4, #4]
 800d108:	6921      	ldr	r1, [r4, #16]
 800d10a:	4603      	mov	r3, r0
 800d10c:	4630      	mov	r0, r6
 800d10e:	461e      	mov	r6, r3
 800d110:	4790      	blx	r2
 800d112:	4628      	mov	r0, r5
 800d114:	6863      	ldr	r3, [r4, #4]
 800d116:	6921      	ldr	r1, [r4, #16]
 800d118:	4798      	blx	r3
 800d11a:	4635      	mov	r5, r6
 800d11c:	4628      	mov	r0, r5
 800d11e:	b005      	add	sp, #20
 800d120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d122:	7873      	ldrb	r3, [r6, #1]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d1d8      	bne.n	800d0da <exact_match_lookup+0x2a>
 800d128:	4628      	mov	r0, r5
 800d12a:	b005      	add	sp, #20
 800d12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d12e:	bf00      	nop
 800d130:	080126d0 	.word	0x080126d0

0800d134 <rcl_get_secure_root>:
 800d134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d138:	b085      	sub	sp, #20
 800d13a:	b168      	cbz	r0, 800d158 <rcl_get_secure_root+0x24>
 800d13c:	4607      	mov	r7, r0
 800d13e:	4608      	mov	r0, r1
 800d140:	460c      	mov	r4, r1
 800d142:	f7fb f8c5 	bl	80082d0 <rcutils_allocator_is_valid>
 800d146:	b138      	cbz	r0, 800d158 <rcl_get_secure_root+0x24>
 800d148:	2300      	movs	r3, #0
 800d14a:	482d      	ldr	r0, [pc, #180]	; (800d200 <rcl_get_secure_root+0xcc>)
 800d14c:	9303      	str	r3, [sp, #12]
 800d14e:	a903      	add	r1, sp, #12
 800d150:	f000 f9da 	bl	800d508 <rcutils_get_env>
 800d154:	4605      	mov	r5, r0
 800d156:	b120      	cbz	r0, 800d162 <rcl_get_secure_root+0x2e>
 800d158:	2500      	movs	r5, #0
 800d15a:	4628      	mov	r0, r5
 800d15c:	b005      	add	sp, #20
 800d15e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d162:	9b03      	ldr	r3, [sp, #12]
 800d164:	781a      	ldrb	r2, [r3, #0]
 800d166:	2a00      	cmp	r2, #0
 800d168:	d0f6      	beq.n	800d158 <rcl_get_secure_root+0x24>
 800d16a:	f104 090c 	add.w	r9, r4, #12
 800d16e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d172:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d176:	4618      	mov	r0, r3
 800d178:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d17c:	f000 fb06 	bl	800d78c <rcutils_strdup>
 800d180:	4680      	mov	r8, r0
 800d182:	2800      	cmp	r0, #0
 800d184:	d0e8      	beq.n	800d158 <rcl_get_secure_root+0x24>
 800d186:	481f      	ldr	r0, [pc, #124]	; (800d204 <rcl_get_secure_root+0xd0>)
 800d188:	9503      	str	r5, [sp, #12]
 800d18a:	a903      	add	r1, sp, #12
 800d18c:	f000 f9bc 	bl	800d508 <rcutils_get_env>
 800d190:	b160      	cbz	r0, 800d1ac <rcl_get_secure_root+0x78>
 800d192:	2600      	movs	r6, #0
 800d194:	6863      	ldr	r3, [r4, #4]
 800d196:	6921      	ldr	r1, [r4, #16]
 800d198:	4630      	mov	r0, r6
 800d19a:	4798      	blx	r3
 800d19c:	4640      	mov	r0, r8
 800d19e:	6863      	ldr	r3, [r4, #4]
 800d1a0:	6921      	ldr	r1, [r4, #16]
 800d1a2:	4798      	blx	r3
 800d1a4:	4628      	mov	r0, r5
 800d1a6:	b005      	add	sp, #20
 800d1a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1ac:	9b03      	ldr	r3, [sp, #12]
 800d1ae:	781e      	ldrb	r6, [r3, #0]
 800d1b0:	b1f6      	cbz	r6, 800d1f0 <rcl_get_secure_root+0xbc>
 800d1b2:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d1b6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d1c0:	f000 fae4 	bl	800d78c <rcutils_strdup>
 800d1c4:	4606      	mov	r6, r0
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	d0e3      	beq.n	800d192 <rcl_get_secure_root+0x5e>
 800d1ca:	4622      	mov	r2, r4
 800d1cc:	4641      	mov	r1, r8
 800d1ce:	f7ff ff6f 	bl	800d0b0 <exact_match_lookup>
 800d1d2:	4605      	mov	r5, r0
 800d1d4:	2d00      	cmp	r5, #0
 800d1d6:	d0dd      	beq.n	800d194 <rcl_get_secure_root+0x60>
 800d1d8:	4628      	mov	r0, r5
 800d1da:	f000 f9ad 	bl	800d538 <rcutils_is_directory>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	d1d7      	bne.n	800d194 <rcl_get_secure_root+0x60>
 800d1e4:	4628      	mov	r0, r5
 800d1e6:	6921      	ldr	r1, [r4, #16]
 800d1e8:	461d      	mov	r5, r3
 800d1ea:	6863      	ldr	r3, [r4, #4]
 800d1ec:	4798      	blx	r3
 800d1ee:	e7d1      	b.n	800d194 <rcl_get_secure_root+0x60>
 800d1f0:	4622      	mov	r2, r4
 800d1f2:	4638      	mov	r0, r7
 800d1f4:	4641      	mov	r1, r8
 800d1f6:	f7ff ff5b 	bl	800d0b0 <exact_match_lookup>
 800d1fa:	4605      	mov	r5, r0
 800d1fc:	e7ea      	b.n	800d1d4 <rcl_get_secure_root+0xa0>
 800d1fe:	bf00      	nop
 800d200:	080126dc 	.word	0x080126dc
 800d204:	080126f4 	.word	0x080126f4

0800d208 <rcl_get_security_options_from_environment>:
 800d208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d20c:	b082      	sub	sp, #8
 800d20e:	2300      	movs	r3, #0
 800d210:	4606      	mov	r6, r0
 800d212:	460f      	mov	r7, r1
 800d214:	4820      	ldr	r0, [pc, #128]	; (800d298 <rcl_get_security_options_from_environment+0x90>)
 800d216:	9301      	str	r3, [sp, #4]
 800d218:	a901      	add	r1, sp, #4
 800d21a:	4690      	mov	r8, r2
 800d21c:	f000 f974 	bl	800d508 <rcutils_get_env>
 800d220:	b120      	cbz	r0, 800d22c <rcl_get_security_options_from_environment+0x24>
 800d222:	2501      	movs	r5, #1
 800d224:	4628      	mov	r0, r5
 800d226:	b002      	add	sp, #8
 800d228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d22c:	491b      	ldr	r1, [pc, #108]	; (800d29c <rcl_get_security_options_from_environment+0x94>)
 800d22e:	4604      	mov	r4, r0
 800d230:	9801      	ldr	r0, [sp, #4]
 800d232:	f7f2 ffd5 	bl	80001e0 <strcmp>
 800d236:	4605      	mov	r5, r0
 800d238:	b9e8      	cbnz	r0, 800d276 <rcl_get_security_options_from_environment+0x6e>
 800d23a:	9001      	str	r0, [sp, #4]
 800d23c:	f1b8 0f00 	cmp.w	r8, #0
 800d240:	d020      	beq.n	800d284 <rcl_get_security_options_from_environment+0x7c>
 800d242:	4817      	ldr	r0, [pc, #92]	; (800d2a0 <rcl_get_security_options_from_environment+0x98>)
 800d244:	a901      	add	r1, sp, #4
 800d246:	f000 f95f 	bl	800d508 <rcutils_get_env>
 800d24a:	2800      	cmp	r0, #0
 800d24c:	d1e9      	bne.n	800d222 <rcl_get_security_options_from_environment+0x1a>
 800d24e:	4915      	ldr	r1, [pc, #84]	; (800d2a4 <rcl_get_security_options_from_environment+0x9c>)
 800d250:	9801      	ldr	r0, [sp, #4]
 800d252:	f7f2 ffc5 	bl	80001e0 <strcmp>
 800d256:	fab0 f080 	clz	r0, r0
 800d25a:	0940      	lsrs	r0, r0, #5
 800d25c:	f888 0000 	strb.w	r0, [r8]
 800d260:	4639      	mov	r1, r7
 800d262:	4630      	mov	r0, r6
 800d264:	f7ff ff66 	bl	800d134 <rcl_get_secure_root>
 800d268:	b170      	cbz	r0, 800d288 <rcl_get_security_options_from_environment+0x80>
 800d26a:	f8c8 0004 	str.w	r0, [r8, #4]
 800d26e:	4628      	mov	r0, r5
 800d270:	b002      	add	sp, #8
 800d272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d276:	4625      	mov	r5, r4
 800d278:	4628      	mov	r0, r5
 800d27a:	f888 4000 	strb.w	r4, [r8]
 800d27e:	b002      	add	sp, #8
 800d280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d284:	250b      	movs	r5, #11
 800d286:	e7cd      	b.n	800d224 <rcl_get_security_options_from_environment+0x1c>
 800d288:	f898 5000 	ldrb.w	r5, [r8]
 800d28c:	f1a5 0501 	sub.w	r5, r5, #1
 800d290:	fab5 f585 	clz	r5, r5
 800d294:	096d      	lsrs	r5, r5, #5
 800d296:	e7c5      	b.n	800d224 <rcl_get_security_options_from_environment+0x1c>
 800d298:	08012694 	.word	0x08012694
 800d29c:	080126a8 	.word	0x080126a8
 800d2a0:	080126b0 	.word	0x080126b0
 800d2a4:	080126c8 	.word	0x080126c8

0800d2a8 <rcl_get_system_time>:
 800d2a8:	4608      	mov	r0, r1
 800d2aa:	f000 bbd9 	b.w	800da60 <rcutils_system_time_now>
 800d2ae:	bf00      	nop

0800d2b0 <rcl_get_steady_time>:
 800d2b0:	4608      	mov	r0, r1
 800d2b2:	f000 bbfd 	b.w	800dab0 <rcutils_steady_time_now>
 800d2b6:	bf00      	nop

0800d2b8 <rcl_get_ros_time>:
 800d2b8:	7a03      	ldrb	r3, [r0, #8]
 800d2ba:	b510      	push	{r4, lr}
 800d2bc:	460c      	mov	r4, r1
 800d2be:	b133      	cbz	r3, 800d2ce <rcl_get_ros_time+0x16>
 800d2c0:	2105      	movs	r1, #5
 800d2c2:	f000 f8eb 	bl	800d49c <__atomic_load_8>
 800d2c6:	e9c4 0100 	strd	r0, r1, [r4]
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	bd10      	pop	{r4, pc}
 800d2ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2d2:	4608      	mov	r0, r1
 800d2d4:	f000 bbc4 	b.w	800da60 <rcutils_system_time_now>

0800d2d8 <rcl_clock_init>:
 800d2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2da:	4605      	mov	r5, r0
 800d2dc:	4610      	mov	r0, r2
 800d2de:	4614      	mov	r4, r2
 800d2e0:	460e      	mov	r6, r1
 800d2e2:	f7fa fff5 	bl	80082d0 <rcutils_allocator_is_valid>
 800d2e6:	b128      	cbz	r0, 800d2f4 <rcl_clock_init+0x1c>
 800d2e8:	2d03      	cmp	r5, #3
 800d2ea:	d803      	bhi.n	800d2f4 <rcl_clock_init+0x1c>
 800d2ec:	e8df f005 	tbb	[pc, r5]
 800d2f0:	06532e1d 	.word	0x06532e1d
 800d2f4:	f04f 0c0b 	mov.w	ip, #11
 800d2f8:	4660      	mov	r0, ip
 800d2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2fc:	2e00      	cmp	r6, #0
 800d2fe:	d0f9      	beq.n	800d2f4 <rcl_clock_init+0x1c>
 800d300:	2c00      	cmp	r4, #0
 800d302:	d0f7      	beq.n	800d2f4 <rcl_clock_init+0x1c>
 800d304:	2300      	movs	r3, #0
 800d306:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800d30a:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800d3c0 <rcl_clock_init+0xe8>
 800d30e:	6133      	str	r3, [r6, #16]
 800d310:	f106 0514 	add.w	r5, r6, #20
 800d314:	469c      	mov	ip, r3
 800d316:	2703      	movs	r7, #3
 800d318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d31a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d31c:	6823      	ldr	r3, [r4, #0]
 800d31e:	602b      	str	r3, [r5, #0]
 800d320:	7037      	strb	r7, [r6, #0]
 800d322:	f8c6 e00c 	str.w	lr, [r6, #12]
 800d326:	4660      	mov	r0, ip
 800d328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d32a:	2e00      	cmp	r6, #0
 800d32c:	d0e2      	beq.n	800d2f4 <rcl_clock_init+0x1c>
 800d32e:	2300      	movs	r3, #0
 800d330:	7033      	strb	r3, [r6, #0]
 800d332:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800d336:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800d33a:	469c      	mov	ip, r3
 800d33c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d33e:	f106 0514 	add.w	r5, r6, #20
 800d342:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d344:	6823      	ldr	r3, [r4, #0]
 800d346:	602b      	str	r3, [r5, #0]
 800d348:	4660      	mov	r0, ip
 800d34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d34c:	2e00      	cmp	r6, #0
 800d34e:	d0d1      	beq.n	800d2f4 <rcl_clock_init+0x1c>
 800d350:	2c00      	cmp	r4, #0
 800d352:	d0cf      	beq.n	800d2f4 <rcl_clock_init+0x1c>
 800d354:	2700      	movs	r7, #0
 800d356:	7037      	strb	r7, [r6, #0]
 800d358:	46a4      	mov	ip, r4
 800d35a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d35e:	f106 0514 	add.w	r5, r6, #20
 800d362:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800d366:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800d36a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d36c:	f8dc 3000 	ldr.w	r3, [ip]
 800d370:	602b      	str	r3, [r5, #0]
 800d372:	6921      	ldr	r1, [r4, #16]
 800d374:	6823      	ldr	r3, [r4, #0]
 800d376:	2010      	movs	r0, #16
 800d378:	4798      	blx	r3
 800d37a:	6130      	str	r0, [r6, #16]
 800d37c:	b1d0      	cbz	r0, 800d3b4 <rcl_clock_init+0xdc>
 800d37e:	2200      	movs	r2, #0
 800d380:	2300      	movs	r3, #0
 800d382:	e9c0 2300 	strd	r2, r3, [r0]
 800d386:	2301      	movs	r3, #1
 800d388:	7207      	strb	r7, [r0, #8]
 800d38a:	4a0c      	ldr	r2, [pc, #48]	; (800d3bc <rcl_clock_init+0xe4>)
 800d38c:	7033      	strb	r3, [r6, #0]
 800d38e:	46bc      	mov	ip, r7
 800d390:	60f2      	str	r2, [r6, #12]
 800d392:	4660      	mov	r0, ip
 800d394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d396:	2e00      	cmp	r6, #0
 800d398:	d0ac      	beq.n	800d2f4 <rcl_clock_init+0x1c>
 800d39a:	2c00      	cmp	r4, #0
 800d39c:	d0aa      	beq.n	800d2f4 <rcl_clock_init+0x1c>
 800d39e:	2300      	movs	r3, #0
 800d3a0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800d3a4:	f8df e01c 	ldr.w	lr, [pc, #28]	; 800d3c4 <rcl_clock_init+0xec>
 800d3a8:	6133      	str	r3, [r6, #16]
 800d3aa:	f106 0514 	add.w	r5, r6, #20
 800d3ae:	469c      	mov	ip, r3
 800d3b0:	2702      	movs	r7, #2
 800d3b2:	e7b1      	b.n	800d318 <rcl_clock_init+0x40>
 800d3b4:	f04f 0c0a 	mov.w	ip, #10
 800d3b8:	e79e      	b.n	800d2f8 <rcl_clock_init+0x20>
 800d3ba:	bf00      	nop
 800d3bc:	0800d2b9 	.word	0x0800d2b9
 800d3c0:	0800d2b1 	.word	0x0800d2b1
 800d3c4:	0800d2a9 	.word	0x0800d2a9

0800d3c8 <rcl_validate_enclave_name_with_size>:
 800d3c8:	b378      	cbz	r0, 800d42a <rcl_validate_enclave_name_with_size+0x62>
 800d3ca:	b570      	push	{r4, r5, r6, lr}
 800d3cc:	4615      	mov	r5, r2
 800d3ce:	b0c2      	sub	sp, #264	; 0x108
 800d3d0:	b302      	cbz	r2, 800d414 <rcl_validate_enclave_name_with_size+0x4c>
 800d3d2:	461e      	mov	r6, r3
 800d3d4:	466a      	mov	r2, sp
 800d3d6:	ab01      	add	r3, sp, #4
 800d3d8:	460c      	mov	r4, r1
 800d3da:	f000 fc2b 	bl	800dc34 <rmw_validate_namespace_with_size>
 800d3de:	4684      	mov	ip, r0
 800d3e0:	b9e8      	cbnz	r0, 800d41e <rcl_validate_enclave_name_with_size+0x56>
 800d3e2:	9b00      	ldr	r3, [sp, #0]
 800d3e4:	b923      	cbnz	r3, 800d3f0 <rcl_validate_enclave_name_with_size+0x28>
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	602b      	str	r3, [r5, #0]
 800d3ea:	4660      	mov	r0, ip
 800d3ec:	b042      	add	sp, #264	; 0x108
 800d3ee:	bd70      	pop	{r4, r5, r6, pc}
 800d3f0:	2b07      	cmp	r3, #7
 800d3f2:	d007      	beq.n	800d404 <rcl_validate_enclave_name_with_size+0x3c>
 800d3f4:	1e5a      	subs	r2, r3, #1
 800d3f6:	2a05      	cmp	r2, #5
 800d3f8:	d833      	bhi.n	800d462 <rcl_validate_enclave_name_with_size+0x9a>
 800d3fa:	e8df f002 	tbb	[pc, r2]
 800d3fe:	2c2f      	.short	0x2c2f
 800d400:	1a232629 	.word	0x1a232629
 800d404:	2cff      	cmp	r4, #255	; 0xff
 800d406:	d9ee      	bls.n	800d3e6 <rcl_validate_enclave_name_with_size+0x1e>
 800d408:	602b      	str	r3, [r5, #0]
 800d40a:	2e00      	cmp	r6, #0
 800d40c:	d0ed      	beq.n	800d3ea <rcl_validate_enclave_name_with_size+0x22>
 800d40e:	23fe      	movs	r3, #254	; 0xfe
 800d410:	6033      	str	r3, [r6, #0]
 800d412:	e7ea      	b.n	800d3ea <rcl_validate_enclave_name_with_size+0x22>
 800d414:	f04f 0c0b 	mov.w	ip, #11
 800d418:	4660      	mov	r0, ip
 800d41a:	b042      	add	sp, #264	; 0x108
 800d41c:	bd70      	pop	{r4, r5, r6, pc}
 800d41e:	f7ff f953 	bl	800c6c8 <rcl_convert_rmw_ret_to_rcl_ret>
 800d422:	4684      	mov	ip, r0
 800d424:	4660      	mov	r0, ip
 800d426:	b042      	add	sp, #264	; 0x108
 800d428:	bd70      	pop	{r4, r5, r6, pc}
 800d42a:	f04f 0c0b 	mov.w	ip, #11
 800d42e:	4660      	mov	r0, ip
 800d430:	4770      	bx	lr
 800d432:	2306      	movs	r3, #6
 800d434:	602b      	str	r3, [r5, #0]
 800d436:	2e00      	cmp	r6, #0
 800d438:	d0d7      	beq.n	800d3ea <rcl_validate_enclave_name_with_size+0x22>
 800d43a:	9b01      	ldr	r3, [sp, #4]
 800d43c:	6033      	str	r3, [r6, #0]
 800d43e:	4660      	mov	r0, ip
 800d440:	b042      	add	sp, #264	; 0x108
 800d442:	bd70      	pop	{r4, r5, r6, pc}
 800d444:	2305      	movs	r3, #5
 800d446:	602b      	str	r3, [r5, #0]
 800d448:	e7f5      	b.n	800d436 <rcl_validate_enclave_name_with_size+0x6e>
 800d44a:	2304      	movs	r3, #4
 800d44c:	602b      	str	r3, [r5, #0]
 800d44e:	e7f2      	b.n	800d436 <rcl_validate_enclave_name_with_size+0x6e>
 800d450:	2303      	movs	r3, #3
 800d452:	602b      	str	r3, [r5, #0]
 800d454:	e7ef      	b.n	800d436 <rcl_validate_enclave_name_with_size+0x6e>
 800d456:	2302      	movs	r3, #2
 800d458:	602b      	str	r3, [r5, #0]
 800d45a:	e7ec      	b.n	800d436 <rcl_validate_enclave_name_with_size+0x6e>
 800d45c:	2301      	movs	r3, #1
 800d45e:	602b      	str	r3, [r5, #0]
 800d460:	e7e9      	b.n	800d436 <rcl_validate_enclave_name_with_size+0x6e>
 800d462:	4a04      	ldr	r2, [pc, #16]	; (800d474 <rcl_validate_enclave_name_with_size+0xac>)
 800d464:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d468:	a802      	add	r0, sp, #8
 800d46a:	f000 f963 	bl	800d734 <rcutils_snprintf>
 800d46e:	f04f 0c01 	mov.w	ip, #1
 800d472:	e7ba      	b.n	800d3ea <rcl_validate_enclave_name_with_size+0x22>
 800d474:	08012714 	.word	0x08012714

0800d478 <rcl_validate_enclave_name>:
 800d478:	b168      	cbz	r0, 800d496 <rcl_validate_enclave_name+0x1e>
 800d47a:	b570      	push	{r4, r5, r6, lr}
 800d47c:	460d      	mov	r5, r1
 800d47e:	4616      	mov	r6, r2
 800d480:	4604      	mov	r4, r0
 800d482:	f7f2 feb7 	bl	80001f4 <strlen>
 800d486:	4633      	mov	r3, r6
 800d488:	4601      	mov	r1, r0
 800d48a:	462a      	mov	r2, r5
 800d48c:	4620      	mov	r0, r4
 800d48e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d492:	f7ff bf99 	b.w	800d3c8 <rcl_validate_enclave_name_with_size>
 800d496:	200b      	movs	r0, #11
 800d498:	4770      	bx	lr
 800d49a:	bf00      	nop

0800d49c <__atomic_load_8>:
 800d49c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800d4a0:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 800d4a4:	4a15      	ldr	r2, [pc, #84]	; (800d4fc <__atomic_load_8+0x60>)
 800d4a6:	4b16      	ldr	r3, [pc, #88]	; (800d500 <__atomic_load_8+0x64>)
 800d4a8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800d4ac:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800d4b0:	fb02 f101 	mul.w	r1, r2, r1
 800d4b4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800d4b8:	fba3 2301 	umull	r2, r3, r3, r1
 800d4bc:	091b      	lsrs	r3, r3, #4
 800d4be:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d4c2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800d4c6:	b4d0      	push	{r4, r6, r7}
 800d4c8:	4c0e      	ldr	r4, [pc, #56]	; (800d504 <__atomic_load_8+0x68>)
 800d4ca:	1ac9      	subs	r1, r1, r3
 800d4cc:	1862      	adds	r2, r4, r1
 800d4ce:	f04f 0c01 	mov.w	ip, #1
 800d4d2:	e8d2 3f4f 	ldrexb	r3, [r2]
 800d4d6:	e8c2 cf46 	strexb	r6, ip, [r2]
 800d4da:	2e00      	cmp	r6, #0
 800d4dc:	d1f9      	bne.n	800d4d2 <__atomic_load_8+0x36>
 800d4de:	f3bf 8f5b 	dmb	ish
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d1f4      	bne.n	800d4d2 <__atomic_load_8+0x36>
 800d4e8:	e9d0 6700 	ldrd	r6, r7, [r0]
 800d4ec:	f3bf 8f5b 	dmb	ish
 800d4f0:	5463      	strb	r3, [r4, r1]
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	4639      	mov	r1, r7
 800d4f6:	bcd0      	pop	{r4, r6, r7}
 800d4f8:	4770      	bx	lr
 800d4fa:	bf00      	nop
 800d4fc:	27d4eb2d 	.word	0x27d4eb2d
 800d500:	b21642c9 	.word	0xb21642c9
 800d504:	20010ab0 	.word	0x20010ab0

0800d508 <rcutils_get_env>:
 800d508:	b168      	cbz	r0, 800d526 <rcutils_get_env+0x1e>
 800d50a:	b510      	push	{r4, lr}
 800d50c:	460c      	mov	r4, r1
 800d50e:	b129      	cbz	r1, 800d51c <rcutils_get_env+0x14>
 800d510:	f003 fb3e 	bl	8010b90 <getenv>
 800d514:	b120      	cbz	r0, 800d520 <rcutils_get_env+0x18>
 800d516:	6020      	str	r0, [r4, #0]
 800d518:	2000      	movs	r0, #0
 800d51a:	bd10      	pop	{r4, pc}
 800d51c:	4803      	ldr	r0, [pc, #12]	; (800d52c <rcutils_get_env+0x24>)
 800d51e:	bd10      	pop	{r4, pc}
 800d520:	4b03      	ldr	r3, [pc, #12]	; (800d530 <rcutils_get_env+0x28>)
 800d522:	6023      	str	r3, [r4, #0]
 800d524:	bd10      	pop	{r4, pc}
 800d526:	4803      	ldr	r0, [pc, #12]	; (800d534 <rcutils_get_env+0x2c>)
 800d528:	4770      	bx	lr
 800d52a:	bf00      	nop
 800d52c:	08012790 	.word	0x08012790
 800d530:	080128b4 	.word	0x080128b4
 800d534:	08012774 	.word	0x08012774

0800d538 <rcutils_is_directory>:
 800d538:	2000      	movs	r0, #0
 800d53a:	4770      	bx	lr

0800d53c <rcutils_join_path>:
 800d53c:	b082      	sub	sp, #8
 800d53e:	e88d 000c 	stmia.w	sp, {r2, r3}
 800d542:	2000      	movs	r0, #0
 800d544:	b002      	add	sp, #8
 800d546:	4770      	bx	lr

0800d548 <rcutils_to_native_path>:
 800d548:	b084      	sub	sp, #16
 800d54a:	a801      	add	r0, sp, #4
 800d54c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800d550:	b004      	add	sp, #16
 800d552:	2000      	movs	r0, #0
 800d554:	4770      	bx	lr
 800d556:	bf00      	nop

0800d558 <rcutils_format_string_limit>:
 800d558:	b40f      	push	{r0, r1, r2, r3}
 800d55a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d55c:	b083      	sub	sp, #12
 800d55e:	ac08      	add	r4, sp, #32
 800d560:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d562:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d566:	b34e      	cbz	r6, 800d5bc <rcutils_format_string_limit+0x64>
 800d568:	a808      	add	r0, sp, #32
 800d56a:	f7fa feb1 	bl	80082d0 <rcutils_allocator_is_valid>
 800d56e:	b328      	cbz	r0, 800d5bc <rcutils_format_string_limit+0x64>
 800d570:	2100      	movs	r1, #0
 800d572:	ab0f      	add	r3, sp, #60	; 0x3c
 800d574:	4632      	mov	r2, r6
 800d576:	4608      	mov	r0, r1
 800d578:	e9cd 3300 	strd	r3, r3, [sp]
 800d57c:	f000 f8f4 	bl	800d768 <rcutils_vsnprintf>
 800d580:	1c43      	adds	r3, r0, #1
 800d582:	4605      	mov	r5, r0
 800d584:	d01a      	beq.n	800d5bc <rcutils_format_string_limit+0x64>
 800d586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d588:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d58a:	1c47      	adds	r7, r0, #1
 800d58c:	429f      	cmp	r7, r3
 800d58e:	bf84      	itt	hi
 800d590:	461f      	movhi	r7, r3
 800d592:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 800d596:	4638      	mov	r0, r7
 800d598:	9b08      	ldr	r3, [sp, #32]
 800d59a:	4798      	blx	r3
 800d59c:	4604      	mov	r4, r0
 800d59e:	b168      	cbz	r0, 800d5bc <rcutils_format_string_limit+0x64>
 800d5a0:	9b01      	ldr	r3, [sp, #4]
 800d5a2:	4632      	mov	r2, r6
 800d5a4:	4639      	mov	r1, r7
 800d5a6:	f000 f8df 	bl	800d768 <rcutils_vsnprintf>
 800d5aa:	2800      	cmp	r0, #0
 800d5ac:	db02      	blt.n	800d5b4 <rcutils_format_string_limit+0x5c>
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	5563      	strb	r3, [r4, r5]
 800d5b2:	e004      	b.n	800d5be <rcutils_format_string_limit+0x66>
 800d5b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	4798      	blx	r3
 800d5bc:	2400      	movs	r4, #0
 800d5be:	4620      	mov	r0, r4
 800d5c0:	b003      	add	sp, #12
 800d5c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d5c6:	b004      	add	sp, #16
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop

0800d5cc <rcutils_repl_str>:
 800d5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d0:	ed2d 8b02 	vpush	{d8}
 800d5d4:	b087      	sub	sp, #28
 800d5d6:	4680      	mov	r8, r0
 800d5d8:	4608      	mov	r0, r1
 800d5da:	f8cd 8004 	str.w	r8, [sp, #4]
 800d5de:	ee08 2a10 	vmov	s16, r2
 800d5e2:	468a      	mov	sl, r1
 800d5e4:	4699      	mov	r9, r3
 800d5e6:	f7f2 fe05 	bl	80001f4 <strlen>
 800d5ea:	2600      	movs	r6, #0
 800d5ec:	4647      	mov	r7, r8
 800d5ee:	9002      	str	r0, [sp, #8]
 800d5f0:	46b3      	mov	fp, r6
 800d5f2:	2510      	movs	r5, #16
 800d5f4:	46b0      	mov	r8, r6
 800d5f6:	e01d      	b.n	800d634 <rcutils_repl_str+0x68>
 800d5f8:	f10b 0b01 	add.w	fp, fp, #1
 800d5fc:	455e      	cmp	r6, fp
 800d5fe:	d211      	bcs.n	800d624 <rcutils_repl_str+0x58>
 800d600:	442e      	add	r6, r5
 800d602:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d606:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d60a:	00b1      	lsls	r1, r6, #2
 800d60c:	4798      	blx	r3
 800d60e:	2800      	cmp	r0, #0
 800d610:	f000 8088 	beq.w	800d724 <rcutils_repl_str+0x158>
 800d614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d618:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800d61c:	4680      	mov	r8, r0
 800d61e:	bf28      	it	cs
 800d620:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 800d624:	9a01      	ldr	r2, [sp, #4]
 800d626:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800d62a:	1aa2      	subs	r2, r4, r2
 800d62c:	f843 2c04 	str.w	r2, [r3, #-4]
 800d630:	9b02      	ldr	r3, [sp, #8]
 800d632:	18e7      	adds	r7, r4, r3
 800d634:	4651      	mov	r1, sl
 800d636:	4638      	mov	r0, r7
 800d638:	f003 fe79 	bl	801132e <strstr>
 800d63c:	4604      	mov	r4, r0
 800d63e:	4640      	mov	r0, r8
 800d640:	2c00      	cmp	r4, #0
 800d642:	d1d9      	bne.n	800d5f8 <rcutils_repl_str+0x2c>
 800d644:	46b8      	mov	r8, r7
 800d646:	4607      	mov	r7, r0
 800d648:	4640      	mov	r0, r8
 800d64a:	f7f2 fdd3 	bl	80001f4 <strlen>
 800d64e:	9b01      	ldr	r3, [sp, #4]
 800d650:	eba8 0303 	sub.w	r3, r8, r3
 800d654:	181c      	adds	r4, r3, r0
 800d656:	9404      	str	r4, [sp, #16]
 800d658:	f1bb 0f00 	cmp.w	fp, #0
 800d65c:	d04a      	beq.n	800d6f4 <rcutils_repl_str+0x128>
 800d65e:	ee18 0a10 	vmov	r0, s16
 800d662:	f7f2 fdc7 	bl	80001f4 <strlen>
 800d666:	9b02      	ldr	r3, [sp, #8]
 800d668:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800d66c:	1ac3      	subs	r3, r0, r3
 800d66e:	fb0b 4303 	mla	r3, fp, r3, r4
 800d672:	461a      	mov	r2, r3
 800d674:	9305      	str	r3, [sp, #20]
 800d676:	4606      	mov	r6, r0
 800d678:	f8d9 3000 	ldr.w	r3, [r9]
 800d67c:	1c50      	adds	r0, r2, #1
 800d67e:	4798      	blx	r3
 800d680:	9003      	str	r0, [sp, #12]
 800d682:	2800      	cmp	r0, #0
 800d684:	d04f      	beq.n	800d726 <rcutils_repl_str+0x15a>
 800d686:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d68a:	683a      	ldr	r2, [r7, #0]
 800d68c:	4641      	mov	r1, r8
 800d68e:	f003 ff46 	bl	801151e <memcpy>
 800d692:	683d      	ldr	r5, [r7, #0]
 800d694:	9b03      	ldr	r3, [sp, #12]
 800d696:	9701      	str	r7, [sp, #4]
 800d698:	46ba      	mov	sl, r7
 800d69a:	441d      	add	r5, r3
 800d69c:	9f02      	ldr	r7, [sp, #8]
 800d69e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d6a2:	2401      	movs	r4, #1
 800d6a4:	46d1      	mov	r9, sl
 800d6a6:	ee18 aa10 	vmov	sl, s16
 800d6aa:	e00a      	b.n	800d6c2 <rcutils_repl_str+0xf6>
 800d6ac:	f8d9 5000 	ldr.w	r5, [r9]
 800d6b0:	1aaa      	subs	r2, r5, r2
 800d6b2:	1885      	adds	r5, r0, r2
 800d6b4:	f003 ff33 	bl	801151e <memcpy>
 800d6b8:	45a3      	cmp	fp, r4
 800d6ba:	f104 0201 	add.w	r2, r4, #1
 800d6be:	d935      	bls.n	800d72c <rcutils_repl_str+0x160>
 800d6c0:	4614      	mov	r4, r2
 800d6c2:	4632      	mov	r2, r6
 800d6c4:	4651      	mov	r1, sl
 800d6c6:	4628      	mov	r0, r5
 800d6c8:	f003 ff29 	bl	801151e <memcpy>
 800d6cc:	f859 2b04 	ldr.w	r2, [r9], #4
 800d6d0:	45a3      	cmp	fp, r4
 800d6d2:	443a      	add	r2, r7
 800d6d4:	eb05 0006 	add.w	r0, r5, r6
 800d6d8:	eb08 0102 	add.w	r1, r8, r2
 800d6dc:	d1e6      	bne.n	800d6ac <rcutils_repl_str+0xe0>
 800d6de:	9b04      	ldr	r3, [sp, #16]
 800d6e0:	1a9a      	subs	r2, r3, r2
 800d6e2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800d6e6:	f003 ff1a 	bl	801151e <memcpy>
 800d6ea:	9a03      	ldr	r2, [sp, #12]
 800d6ec:	9905      	ldr	r1, [sp, #20]
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	5453      	strb	r3, [r2, r1]
 800d6f2:	e00b      	b.n	800d70c <rcutils_repl_str+0x140>
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	f8d9 3000 	ldr.w	r3, [r9]
 800d6fa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800d6fe:	3001      	adds	r0, #1
 800d700:	4798      	blx	r3
 800d702:	9003      	str	r0, [sp, #12]
 800d704:	b110      	cbz	r0, 800d70c <rcutils_repl_str+0x140>
 800d706:	9901      	ldr	r1, [sp, #4]
 800d708:	f003 ff01 	bl	801150e <strcpy>
 800d70c:	4638      	mov	r0, r7
 800d70e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d712:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800d716:	4798      	blx	r3
 800d718:	9803      	ldr	r0, [sp, #12]
 800d71a:	b007      	add	sp, #28
 800d71c:	ecbd 8b02 	vpop	{d8}
 800d720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d724:	4647      	mov	r7, r8
 800d726:	2300      	movs	r3, #0
 800d728:	9303      	str	r3, [sp, #12]
 800d72a:	e7ef      	b.n	800d70c <rcutils_repl_str+0x140>
 800d72c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800d730:	e7db      	b.n	800d6ea <rcutils_repl_str+0x11e>
 800d732:	bf00      	nop

0800d734 <rcutils_snprintf>:
 800d734:	b40c      	push	{r2, r3}
 800d736:	b530      	push	{r4, r5, lr}
 800d738:	b083      	sub	sp, #12
 800d73a:	ab06      	add	r3, sp, #24
 800d73c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d740:	9301      	str	r3, [sp, #4]
 800d742:	b152      	cbz	r2, 800d75a <rcutils_snprintf+0x26>
 800d744:	b138      	cbz	r0, 800d756 <rcutils_snprintf+0x22>
 800d746:	b141      	cbz	r1, 800d75a <rcutils_snprintf+0x26>
 800d748:	f003 fdbc 	bl	80112c4 <vsniprintf>
 800d74c:	b003      	add	sp, #12
 800d74e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d752:	b002      	add	sp, #8
 800d754:	4770      	bx	lr
 800d756:	2900      	cmp	r1, #0
 800d758:	d0f6      	beq.n	800d748 <rcutils_snprintf+0x14>
 800d75a:	f003 feab 	bl	80114b4 <__errno>
 800d75e:	2316      	movs	r3, #22
 800d760:	6003      	str	r3, [r0, #0]
 800d762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d766:	e7f1      	b.n	800d74c <rcutils_snprintf+0x18>

0800d768 <rcutils_vsnprintf>:
 800d768:	b570      	push	{r4, r5, r6, lr}
 800d76a:	b13a      	cbz	r2, 800d77c <rcutils_vsnprintf+0x14>
 800d76c:	b120      	cbz	r0, 800d778 <rcutils_vsnprintf+0x10>
 800d76e:	b129      	cbz	r1, 800d77c <rcutils_vsnprintf+0x14>
 800d770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d774:	f003 bda6 	b.w	80112c4 <vsniprintf>
 800d778:	2900      	cmp	r1, #0
 800d77a:	d0f9      	beq.n	800d770 <rcutils_vsnprintf+0x8>
 800d77c:	f003 fe9a 	bl	80114b4 <__errno>
 800d780:	2316      	movs	r3, #22
 800d782:	6003      	str	r3, [r0, #0]
 800d784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d788:	bd70      	pop	{r4, r5, r6, pc}
 800d78a:	bf00      	nop

0800d78c <rcutils_strdup>:
 800d78c:	b084      	sub	sp, #16
 800d78e:	b570      	push	{r4, r5, r6, lr}
 800d790:	b082      	sub	sp, #8
 800d792:	ac07      	add	r4, sp, #28
 800d794:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800d798:	4605      	mov	r5, r0
 800d79a:	b1b0      	cbz	r0, 800d7ca <rcutils_strdup+0x3e>
 800d79c:	f7f2 fd2a 	bl	80001f4 <strlen>
 800d7a0:	1c42      	adds	r2, r0, #1
 800d7a2:	9b07      	ldr	r3, [sp, #28]
 800d7a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d7a6:	9201      	str	r2, [sp, #4]
 800d7a8:	4606      	mov	r6, r0
 800d7aa:	4610      	mov	r0, r2
 800d7ac:	4798      	blx	r3
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	b128      	cbz	r0, 800d7be <rcutils_strdup+0x32>
 800d7b2:	9a01      	ldr	r2, [sp, #4]
 800d7b4:	4629      	mov	r1, r5
 800d7b6:	f003 feb2 	bl	801151e <memcpy>
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	55a3      	strb	r3, [r4, r6]
 800d7be:	4620      	mov	r0, r4
 800d7c0:	b002      	add	sp, #8
 800d7c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d7c6:	b004      	add	sp, #16
 800d7c8:	4770      	bx	lr
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	e7f7      	b.n	800d7be <rcutils_strdup+0x32>
 800d7ce:	bf00      	nop

0800d7d0 <rcutils_strndup>:
 800d7d0:	b082      	sub	sp, #8
 800d7d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7d4:	ac06      	add	r4, sp, #24
 800d7d6:	e884 000c 	stmia.w	r4, {r2, r3}
 800d7da:	4605      	mov	r5, r0
 800d7dc:	b188      	cbz	r0, 800d802 <rcutils_strndup+0x32>
 800d7de:	1c4f      	adds	r7, r1, #1
 800d7e0:	460e      	mov	r6, r1
 800d7e2:	4638      	mov	r0, r7
 800d7e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d7e6:	4790      	blx	r2
 800d7e8:	4604      	mov	r4, r0
 800d7ea:	b128      	cbz	r0, 800d7f8 <rcutils_strndup+0x28>
 800d7ec:	463a      	mov	r2, r7
 800d7ee:	4629      	mov	r1, r5
 800d7f0:	f003 fe95 	bl	801151e <memcpy>
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	55a3      	strb	r3, [r4, r6]
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d7fe:	b002      	add	sp, #8
 800d800:	4770      	bx	lr
 800d802:	4604      	mov	r4, r0
 800d804:	e7f8      	b.n	800d7f8 <rcutils_strndup+0x28>
 800d806:	bf00      	nop

0800d808 <rcutils_get_zero_initialized_string_map>:
 800d808:	4b01      	ldr	r3, [pc, #4]	; (800d810 <rcutils_get_zero_initialized_string_map+0x8>)
 800d80a:	2000      	movs	r0, #0
 800d80c:	6018      	str	r0, [r3, #0]
 800d80e:	4770      	bx	lr
 800d810:	20010ac8 	.word	0x20010ac8

0800d814 <rcutils_string_map_reserve>:
 800d814:	2800      	cmp	r0, #0
 800d816:	d05f      	beq.n	800d8d8 <rcutils_string_map_reserve+0xc4>
 800d818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d81c:	460c      	mov	r4, r1
 800d81e:	6801      	ldr	r1, [r0, #0]
 800d820:	b082      	sub	sp, #8
 800d822:	4605      	mov	r5, r0
 800d824:	b129      	cbz	r1, 800d832 <rcutils_string_map_reserve+0x1e>
 800d826:	68cb      	ldr	r3, [r1, #12]
 800d828:	42a3      	cmp	r3, r4
 800d82a:	d906      	bls.n	800d83a <rcutils_string_map_reserve+0x26>
 800d82c:	461c      	mov	r4, r3
 800d82e:	2900      	cmp	r1, #0
 800d830:	d1f9      	bne.n	800d826 <rcutils_string_map_reserve+0x12>
 800d832:	201f      	movs	r0, #31
 800d834:	b002      	add	sp, #8
 800d836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d83a:	688b      	ldr	r3, [r1, #8]
 800d83c:	42a3      	cmp	r3, r4
 800d83e:	d047      	beq.n	800d8d0 <rcutils_string_map_reserve+0xbc>
 800d840:	6a0e      	ldr	r6, [r1, #32]
 800d842:	2c00      	cmp	r4, #0
 800d844:	d034      	beq.n	800d8b0 <rcutils_string_map_reserve+0x9c>
 800d846:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800d84a:	d243      	bcs.n	800d8d4 <rcutils_string_map_reserve+0xc0>
 800d84c:	00a7      	lsls	r7, r4, #2
 800d84e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800d852:	6808      	ldr	r0, [r1, #0]
 800d854:	4632      	mov	r2, r6
 800d856:	4639      	mov	r1, r7
 800d858:	47c0      	blx	r8
 800d85a:	2800      	cmp	r0, #0
 800d85c:	d03a      	beq.n	800d8d4 <rcutils_string_map_reserve+0xc0>
 800d85e:	682b      	ldr	r3, [r5, #0]
 800d860:	4632      	mov	r2, r6
 800d862:	6018      	str	r0, [r3, #0]
 800d864:	4639      	mov	r1, r7
 800d866:	6858      	ldr	r0, [r3, #4]
 800d868:	47c0      	blx	r8
 800d86a:	2800      	cmp	r0, #0
 800d86c:	d032      	beq.n	800d8d4 <rcutils_string_map_reserve+0xc0>
 800d86e:	682d      	ldr	r5, [r5, #0]
 800d870:	68ab      	ldr	r3, [r5, #8]
 800d872:	6068      	str	r0, [r5, #4]
 800d874:	42a3      	cmp	r3, r4
 800d876:	d226      	bcs.n	800d8c6 <rcutils_string_map_reserve+0xb2>
 800d878:	682a      	ldr	r2, [r5, #0]
 800d87a:	eb00 0c07 	add.w	ip, r0, r7
 800d87e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800d882:	45e6      	cmp	lr, ip
 800d884:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800d888:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800d88c:	d203      	bcs.n	800d896 <rcutils_string_map_reserve+0x82>
 800d88e:	eb02 0c07 	add.w	ip, r2, r7
 800d892:	4566      	cmp	r6, ip
 800d894:	d322      	bcc.n	800d8dc <rcutils_string_map_reserve+0xc8>
 800d896:	1ae3      	subs	r3, r4, r3
 800d898:	009a      	lsls	r2, r3, #2
 800d89a:	4670      	mov	r0, lr
 800d89c:	2100      	movs	r1, #0
 800d89e:	9201      	str	r2, [sp, #4]
 800d8a0:	f003 fd1e 	bl	80112e0 <memset>
 800d8a4:	9a01      	ldr	r2, [sp, #4]
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	4630      	mov	r0, r6
 800d8aa:	f003 fd19 	bl	80112e0 <memset>
 800d8ae:	e00a      	b.n	800d8c6 <rcutils_string_map_reserve+0xb2>
 800d8b0:	694f      	ldr	r7, [r1, #20]
 800d8b2:	6808      	ldr	r0, [r1, #0]
 800d8b4:	4631      	mov	r1, r6
 800d8b6:	47b8      	blx	r7
 800d8b8:	682b      	ldr	r3, [r5, #0]
 800d8ba:	4631      	mov	r1, r6
 800d8bc:	6858      	ldr	r0, [r3, #4]
 800d8be:	601c      	str	r4, [r3, #0]
 800d8c0:	47b8      	blx	r7
 800d8c2:	682d      	ldr	r5, [r5, #0]
 800d8c4:	606c      	str	r4, [r5, #4]
 800d8c6:	2000      	movs	r0, #0
 800d8c8:	60ac      	str	r4, [r5, #8]
 800d8ca:	b002      	add	sp, #8
 800d8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8d0:	2000      	movs	r0, #0
 800d8d2:	e7af      	b.n	800d834 <rcutils_string_map_reserve+0x20>
 800d8d4:	200a      	movs	r0, #10
 800d8d6:	e7ad      	b.n	800d834 <rcutils_string_map_reserve+0x20>
 800d8d8:	200b      	movs	r0, #11
 800d8da:	4770      	bx	lr
 800d8dc:	1f0b      	subs	r3, r1, #4
 800d8de:	4418      	add	r0, r3
 800d8e0:	4413      	add	r3, r2
 800d8e2:	3a04      	subs	r2, #4
 800d8e4:	4417      	add	r7, r2
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	f843 2f04 	str.w	r2, [r3, #4]!
 800d8ec:	42bb      	cmp	r3, r7
 800d8ee:	f840 2f04 	str.w	r2, [r0, #4]!
 800d8f2:	d1f9      	bne.n	800d8e8 <rcutils_string_map_reserve+0xd4>
 800d8f4:	e7e7      	b.n	800d8c6 <rcutils_string_map_reserve+0xb2>
 800d8f6:	bf00      	nop

0800d8f8 <rcutils_string_map_init>:
 800d8f8:	b082      	sub	sp, #8
 800d8fa:	b570      	push	{r4, r5, r6, lr}
 800d8fc:	ac04      	add	r4, sp, #16
 800d8fe:	e884 000c 	stmia.w	r4, {r2, r3}
 800d902:	b380      	cbz	r0, 800d966 <rcutils_string_map_init+0x6e>
 800d904:	6806      	ldr	r6, [r0, #0]
 800d906:	4604      	mov	r4, r0
 800d908:	b12e      	cbz	r6, 800d916 <rcutils_string_map_init+0x1e>
 800d90a:	251e      	movs	r5, #30
 800d90c:	4628      	mov	r0, r5
 800d90e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d912:	b002      	add	sp, #8
 800d914:	4770      	bx	lr
 800d916:	a804      	add	r0, sp, #16
 800d918:	460d      	mov	r5, r1
 800d91a:	f7fa fcd9 	bl	80082d0 <rcutils_allocator_is_valid>
 800d91e:	b310      	cbz	r0, 800d966 <rcutils_string_map_init+0x6e>
 800d920:	9b04      	ldr	r3, [sp, #16]
 800d922:	9908      	ldr	r1, [sp, #32]
 800d924:	2024      	movs	r0, #36	; 0x24
 800d926:	4798      	blx	r3
 800d928:	6020      	str	r0, [r4, #0]
 800d92a:	b310      	cbz	r0, 800d972 <rcutils_string_map_init+0x7a>
 800d92c:	f10d 0e10 	add.w	lr, sp, #16
 800d930:	e9c0 6600 	strd	r6, r6, [r0]
 800d934:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800d938:	f100 0c10 	add.w	ip, r0, #16
 800d93c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d940:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d944:	f8de 3000 	ldr.w	r3, [lr]
 800d948:	f8cc 3000 	str.w	r3, [ip]
 800d94c:	4629      	mov	r1, r5
 800d94e:	4620      	mov	r0, r4
 800d950:	f7ff ff60 	bl	800d814 <rcutils_string_map_reserve>
 800d954:	4605      	mov	r5, r0
 800d956:	2800      	cmp	r0, #0
 800d958:	d0d8      	beq.n	800d90c <rcutils_string_map_init+0x14>
 800d95a:	9b05      	ldr	r3, [sp, #20]
 800d95c:	9908      	ldr	r1, [sp, #32]
 800d95e:	6820      	ldr	r0, [r4, #0]
 800d960:	4798      	blx	r3
 800d962:	6026      	str	r6, [r4, #0]
 800d964:	e7d2      	b.n	800d90c <rcutils_string_map_init+0x14>
 800d966:	250b      	movs	r5, #11
 800d968:	4628      	mov	r0, r5
 800d96a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d96e:	b002      	add	sp, #8
 800d970:	4770      	bx	lr
 800d972:	250a      	movs	r5, #10
 800d974:	e7ca      	b.n	800d90c <rcutils_string_map_init+0x14>
 800d976:	bf00      	nop

0800d978 <rcutils_string_map_fini>:
 800d978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d97c:	b082      	sub	sp, #8
 800d97e:	2800      	cmp	r0, #0
 800d980:	d03a      	beq.n	800d9f8 <rcutils_string_map_fini+0x80>
 800d982:	6804      	ldr	r4, [r0, #0]
 800d984:	4606      	mov	r6, r0
 800d986:	2c00      	cmp	r4, #0
 800d988:	d032      	beq.n	800d9f0 <rcutils_string_map_fini+0x78>
 800d98a:	68a3      	ldr	r3, [r4, #8]
 800d98c:	b32b      	cbz	r3, 800d9da <rcutils_string_map_fini+0x62>
 800d98e:	2500      	movs	r5, #0
 800d990:	6822      	ldr	r2, [r4, #0]
 800d992:	462f      	mov	r7, r5
 800d994:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800d998:	b1e0      	cbz	r0, 800d9d4 <rcutils_string_map_fini+0x5c>
 800d99a:	6a21      	ldr	r1, [r4, #32]
 800d99c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800d9a0:	9101      	str	r1, [sp, #4]
 800d9a2:	47c0      	blx	r8
 800d9a4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d9a8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800d9ac:	9901      	ldr	r1, [sp, #4]
 800d9ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d9b2:	47c0      	blx	r8
 800d9b4:	68e3      	ldr	r3, [r4, #12]
 800d9b6:	6862      	ldr	r2, [r4, #4]
 800d9b8:	3b01      	subs	r3, #1
 800d9ba:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800d9be:	60e3      	str	r3, [r4, #12]
 800d9c0:	6834      	ldr	r4, [r6, #0]
 800d9c2:	68a3      	ldr	r3, [r4, #8]
 800d9c4:	3501      	adds	r5, #1
 800d9c6:	429d      	cmp	r5, r3
 800d9c8:	d207      	bcs.n	800d9da <rcutils_string_map_fini+0x62>
 800d9ca:	6822      	ldr	r2, [r4, #0]
 800d9cc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	d1e2      	bne.n	800d99a <rcutils_string_map_fini+0x22>
 800d9d4:	3501      	adds	r5, #1
 800d9d6:	429d      	cmp	r5, r3
 800d9d8:	d3dc      	bcc.n	800d994 <rcutils_string_map_fini+0x1c>
 800d9da:	2100      	movs	r1, #0
 800d9dc:	4630      	mov	r0, r6
 800d9de:	f7ff ff19 	bl	800d814 <rcutils_string_map_reserve>
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	b920      	cbnz	r0, 800d9f0 <rcutils_string_map_fini+0x78>
 800d9e6:	6830      	ldr	r0, [r6, #0]
 800d9e8:	6943      	ldr	r3, [r0, #20]
 800d9ea:	6a01      	ldr	r1, [r0, #32]
 800d9ec:	4798      	blx	r3
 800d9ee:	6034      	str	r4, [r6, #0]
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	b002      	add	sp, #8
 800d9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9f8:	240b      	movs	r4, #11
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	b002      	add	sp, #8
 800d9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da02:	bf00      	nop

0800da04 <rcutils_string_map_getn>:
 800da04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da08:	b300      	cbz	r0, 800da4c <rcutils_string_map_getn+0x48>
 800da0a:	6807      	ldr	r7, [r0, #0]
 800da0c:	b1ff      	cbz	r7, 800da4e <rcutils_string_map_getn+0x4a>
 800da0e:	4688      	mov	r8, r1
 800da10:	b1e1      	cbz	r1, 800da4c <rcutils_string_map_getn+0x48>
 800da12:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800da16:	683e      	ldr	r6, [r7, #0]
 800da18:	f1ba 0f00 	cmp.w	sl, #0
 800da1c:	d016      	beq.n	800da4c <rcutils_string_map_getn+0x48>
 800da1e:	4691      	mov	r9, r2
 800da20:	3e04      	subs	r6, #4
 800da22:	2400      	movs	r4, #0
 800da24:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800da28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800da2c:	4628      	mov	r0, r5
 800da2e:	3401      	adds	r4, #1
 800da30:	b155      	cbz	r5, 800da48 <rcutils_string_map_getn+0x44>
 800da32:	f7f2 fbdf 	bl	80001f4 <strlen>
 800da36:	4548      	cmp	r0, r9
 800da38:	4602      	mov	r2, r0
 800da3a:	4629      	mov	r1, r5
 800da3c:	bf38      	it	cc
 800da3e:	464a      	movcc	r2, r9
 800da40:	4640      	mov	r0, r8
 800da42:	f003 fc62 	bl	801130a <strncmp>
 800da46:	b128      	cbz	r0, 800da54 <rcutils_string_map_getn+0x50>
 800da48:	45a2      	cmp	sl, r4
 800da4a:	d1eb      	bne.n	800da24 <rcutils_string_map_getn+0x20>
 800da4c:	2700      	movs	r7, #0
 800da4e:	4638      	mov	r0, r7
 800da50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f853 700b 	ldr.w	r7, [r3, fp]
 800da5a:	4638      	mov	r0, r7
 800da5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800da60 <rcutils_system_time_now>:
 800da60:	b308      	cbz	r0, 800daa6 <rcutils_system_time_now+0x46>
 800da62:	b570      	push	{r4, r5, r6, lr}
 800da64:	b084      	sub	sp, #16
 800da66:	4604      	mov	r4, r0
 800da68:	4669      	mov	r1, sp
 800da6a:	2001      	movs	r0, #1
 800da6c:	f7f3 fc64 	bl	8001338 <clock_gettime>
 800da70:	e9dd 3500 	ldrd	r3, r5, [sp]
 800da74:	2d00      	cmp	r5, #0
 800da76:	db13      	blt.n	800daa0 <rcutils_system_time_now+0x40>
 800da78:	9902      	ldr	r1, [sp, #8]
 800da7a:	2900      	cmp	r1, #0
 800da7c:	db0d      	blt.n	800da9a <rcutils_system_time_now+0x3a>
 800da7e:	4e0b      	ldr	r6, [pc, #44]	; (800daac <rcutils_system_time_now+0x4c>)
 800da80:	fba3 3206 	umull	r3, r2, r3, r6
 800da84:	185b      	adds	r3, r3, r1
 800da86:	fb06 2205 	mla	r2, r6, r5, r2
 800da8a:	f04f 0000 	mov.w	r0, #0
 800da8e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800da92:	e9c4 3200 	strd	r3, r2, [r4]
 800da96:	b004      	add	sp, #16
 800da98:	bd70      	pop	{r4, r5, r6, pc}
 800da9a:	ea53 0205 	orrs.w	r2, r3, r5
 800da9e:	d1ee      	bne.n	800da7e <rcutils_system_time_now+0x1e>
 800daa0:	2002      	movs	r0, #2
 800daa2:	b004      	add	sp, #16
 800daa4:	bd70      	pop	{r4, r5, r6, pc}
 800daa6:	200b      	movs	r0, #11
 800daa8:	4770      	bx	lr
 800daaa:	bf00      	nop
 800daac:	3b9aca00 	.word	0x3b9aca00

0800dab0 <rcutils_steady_time_now>:
 800dab0:	b308      	cbz	r0, 800daf6 <rcutils_steady_time_now+0x46>
 800dab2:	b570      	push	{r4, r5, r6, lr}
 800dab4:	b084      	sub	sp, #16
 800dab6:	4604      	mov	r4, r0
 800dab8:	4669      	mov	r1, sp
 800daba:	2000      	movs	r0, #0
 800dabc:	f7f3 fc3c 	bl	8001338 <clock_gettime>
 800dac0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800dac4:	2d00      	cmp	r5, #0
 800dac6:	db13      	blt.n	800daf0 <rcutils_steady_time_now+0x40>
 800dac8:	9902      	ldr	r1, [sp, #8]
 800daca:	2900      	cmp	r1, #0
 800dacc:	db0d      	blt.n	800daea <rcutils_steady_time_now+0x3a>
 800dace:	4e0b      	ldr	r6, [pc, #44]	; (800dafc <rcutils_steady_time_now+0x4c>)
 800dad0:	fba3 3206 	umull	r3, r2, r3, r6
 800dad4:	185b      	adds	r3, r3, r1
 800dad6:	fb06 2205 	mla	r2, r6, r5, r2
 800dada:	f04f 0000 	mov.w	r0, #0
 800dade:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800dae2:	e9c4 3200 	strd	r3, r2, [r4]
 800dae6:	b004      	add	sp, #16
 800dae8:	bd70      	pop	{r4, r5, r6, pc}
 800daea:	ea53 0205 	orrs.w	r2, r3, r5
 800daee:	d1ee      	bne.n	800dace <rcutils_steady_time_now+0x1e>
 800daf0:	2002      	movs	r0, #2
 800daf2:	b004      	add	sp, #16
 800daf4:	bd70      	pop	{r4, r5, r6, pc}
 800daf6:	200b      	movs	r0, #11
 800daf8:	4770      	bx	lr
 800dafa:	bf00      	nop
 800dafc:	3b9aca00 	.word	0x3b9aca00

0800db00 <rmw_get_zero_initialized_context>:
 800db00:	b510      	push	{r4, lr}
 800db02:	4604      	mov	r4, r0
 800db04:	3010      	adds	r0, #16
 800db06:	f000 f80b 	bl	800db20 <rmw_get_zero_initialized_init_options>
 800db0a:	2300      	movs	r3, #0
 800db0c:	2000      	movs	r0, #0
 800db0e:	2100      	movs	r1, #0
 800db10:	e9c4 0100 	strd	r0, r1, [r4]
 800db14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800db18:	60a3      	str	r3, [r4, #8]
 800db1a:	4620      	mov	r0, r4
 800db1c:	bd10      	pop	{r4, pc}
 800db1e:	bf00      	nop

0800db20 <rmw_get_zero_initialized_init_options>:
 800db20:	b510      	push	{r4, lr}
 800db22:	2238      	movs	r2, #56	; 0x38
 800db24:	4604      	mov	r4, r0
 800db26:	2100      	movs	r1, #0
 800db28:	f003 fbda 	bl	80112e0 <memset>
 800db2c:	f104 0010 	add.w	r0, r4, #16
 800db30:	f000 f806 	bl	800db40 <rmw_get_default_security_options>
 800db34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db38:	60e3      	str	r3, [r4, #12]
 800db3a:	4620      	mov	r0, r4
 800db3c:	bd10      	pop	{r4, pc}
 800db3e:	bf00      	nop

0800db40 <rmw_get_default_security_options>:
 800db40:	2200      	movs	r2, #0
 800db42:	7002      	strb	r2, [r0, #0]
 800db44:	6042      	str	r2, [r0, #4]
 800db46:	4770      	bx	lr

0800db48 <rmw_validate_full_topic_name>:
 800db48:	2800      	cmp	r0, #0
 800db4a:	d057      	beq.n	800dbfc <rmw_validate_full_topic_name+0xb4>
 800db4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db50:	460d      	mov	r5, r1
 800db52:	2900      	cmp	r1, #0
 800db54:	d054      	beq.n	800dc00 <rmw_validate_full_topic_name+0xb8>
 800db56:	4616      	mov	r6, r2
 800db58:	4604      	mov	r4, r0
 800db5a:	f7f2 fb4b 	bl	80001f4 <strlen>
 800db5e:	b148      	cbz	r0, 800db74 <rmw_validate_full_topic_name+0x2c>
 800db60:	7823      	ldrb	r3, [r4, #0]
 800db62:	2b2f      	cmp	r3, #47	; 0x2f
 800db64:	d00d      	beq.n	800db82 <rmw_validate_full_topic_name+0x3a>
 800db66:	2302      	movs	r3, #2
 800db68:	602b      	str	r3, [r5, #0]
 800db6a:	b13e      	cbz	r6, 800db7c <rmw_validate_full_topic_name+0x34>
 800db6c:	2000      	movs	r0, #0
 800db6e:	6030      	str	r0, [r6, #0]
 800db70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db74:	2301      	movs	r3, #1
 800db76:	602b      	str	r3, [r5, #0]
 800db78:	2e00      	cmp	r6, #0
 800db7a:	d1f7      	bne.n	800db6c <rmw_validate_full_topic_name+0x24>
 800db7c:	2000      	movs	r0, #0
 800db7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db82:	1e43      	subs	r3, r0, #1
 800db84:	5ce2      	ldrb	r2, [r4, r3]
 800db86:	2a2f      	cmp	r2, #47	; 0x2f
 800db88:	d03c      	beq.n	800dc04 <rmw_validate_full_topic_name+0xbc>
 800db8a:	1e63      	subs	r3, r4, #1
 800db8c:	eb03 0800 	add.w	r8, r3, r0
 800db90:	f1c4 0e01 	rsb	lr, r4, #1
 800db94:	eb0e 0703 	add.w	r7, lr, r3
 800db98:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800db9c:	f021 0220 	bic.w	r2, r1, #32
 800dba0:	3a41      	subs	r2, #65	; 0x41
 800dba2:	2a19      	cmp	r2, #25
 800dba4:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800dba8:	d90b      	bls.n	800dbc2 <rmw_validate_full_topic_name+0x7a>
 800dbaa:	295f      	cmp	r1, #95	; 0x5f
 800dbac:	d009      	beq.n	800dbc2 <rmw_validate_full_topic_name+0x7a>
 800dbae:	f1bc 0f0a 	cmp.w	ip, #10
 800dbb2:	d906      	bls.n	800dbc2 <rmw_validate_full_topic_name+0x7a>
 800dbb4:	2304      	movs	r3, #4
 800dbb6:	602b      	str	r3, [r5, #0]
 800dbb8:	2e00      	cmp	r6, #0
 800dbba:	d0df      	beq.n	800db7c <rmw_validate_full_topic_name+0x34>
 800dbbc:	6037      	str	r7, [r6, #0]
 800dbbe:	2000      	movs	r0, #0
 800dbc0:	e7d6      	b.n	800db70 <rmw_validate_full_topic_name+0x28>
 800dbc2:	4543      	cmp	r3, r8
 800dbc4:	d1e6      	bne.n	800db94 <rmw_validate_full_topic_name+0x4c>
 800dbc6:	4f1a      	ldr	r7, [pc, #104]	; (800dc30 <rmw_validate_full_topic_name+0xe8>)
 800dbc8:	2301      	movs	r3, #1
 800dbca:	e004      	b.n	800dbd6 <rmw_validate_full_topic_name+0x8e>
 800dbcc:	4298      	cmp	r0, r3
 800dbce:	f104 0401 	add.w	r4, r4, #1
 800dbd2:	d91c      	bls.n	800dc0e <rmw_validate_full_topic_name+0xc6>
 800dbd4:	4613      	mov	r3, r2
 800dbd6:	4298      	cmp	r0, r3
 800dbd8:	f103 0201 	add.w	r2, r3, #1
 800dbdc:	d0f6      	beq.n	800dbcc <rmw_validate_full_topic_name+0x84>
 800dbde:	7821      	ldrb	r1, [r4, #0]
 800dbe0:	292f      	cmp	r1, #47	; 0x2f
 800dbe2:	d1f3      	bne.n	800dbcc <rmw_validate_full_topic_name+0x84>
 800dbe4:	7861      	ldrb	r1, [r4, #1]
 800dbe6:	292f      	cmp	r1, #47	; 0x2f
 800dbe8:	d01c      	beq.n	800dc24 <rmw_validate_full_topic_name+0xdc>
 800dbea:	5dc9      	ldrb	r1, [r1, r7]
 800dbec:	0749      	lsls	r1, r1, #29
 800dbee:	d5ed      	bpl.n	800dbcc <rmw_validate_full_topic_name+0x84>
 800dbf0:	2206      	movs	r2, #6
 800dbf2:	602a      	str	r2, [r5, #0]
 800dbf4:	2e00      	cmp	r6, #0
 800dbf6:	d0c1      	beq.n	800db7c <rmw_validate_full_topic_name+0x34>
 800dbf8:	6033      	str	r3, [r6, #0]
 800dbfa:	e7bf      	b.n	800db7c <rmw_validate_full_topic_name+0x34>
 800dbfc:	200b      	movs	r0, #11
 800dbfe:	4770      	bx	lr
 800dc00:	200b      	movs	r0, #11
 800dc02:	e7b5      	b.n	800db70 <rmw_validate_full_topic_name+0x28>
 800dc04:	2203      	movs	r2, #3
 800dc06:	602a      	str	r2, [r5, #0]
 800dc08:	2e00      	cmp	r6, #0
 800dc0a:	d1f5      	bne.n	800dbf8 <rmw_validate_full_topic_name+0xb0>
 800dc0c:	e7b6      	b.n	800db7c <rmw_validate_full_topic_name+0x34>
 800dc0e:	28f7      	cmp	r0, #247	; 0xf7
 800dc10:	d802      	bhi.n	800dc18 <rmw_validate_full_topic_name+0xd0>
 800dc12:	2000      	movs	r0, #0
 800dc14:	6028      	str	r0, [r5, #0]
 800dc16:	e7ab      	b.n	800db70 <rmw_validate_full_topic_name+0x28>
 800dc18:	2307      	movs	r3, #7
 800dc1a:	602b      	str	r3, [r5, #0]
 800dc1c:	2e00      	cmp	r6, #0
 800dc1e:	d0ad      	beq.n	800db7c <rmw_validate_full_topic_name+0x34>
 800dc20:	23f6      	movs	r3, #246	; 0xf6
 800dc22:	e7e9      	b.n	800dbf8 <rmw_validate_full_topic_name+0xb0>
 800dc24:	2205      	movs	r2, #5
 800dc26:	602a      	str	r2, [r5, #0]
 800dc28:	2e00      	cmp	r6, #0
 800dc2a:	d1e5      	bne.n	800dbf8 <rmw_validate_full_topic_name+0xb0>
 800dc2c:	e7a6      	b.n	800db7c <rmw_validate_full_topic_name+0x34>
 800dc2e:	bf00      	nop
 800dc30:	08012da4 	.word	0x08012da4

0800dc34 <rmw_validate_namespace_with_size>:
 800dc34:	b340      	cbz	r0, 800dc88 <rmw_validate_namespace_with_size+0x54>
 800dc36:	b570      	push	{r4, r5, r6, lr}
 800dc38:	4614      	mov	r4, r2
 800dc3a:	b0c2      	sub	sp, #264	; 0x108
 800dc3c:	b332      	cbz	r2, 800dc8c <rmw_validate_namespace_with_size+0x58>
 800dc3e:	2901      	cmp	r1, #1
 800dc40:	460d      	mov	r5, r1
 800dc42:	461e      	mov	r6, r3
 800dc44:	d102      	bne.n	800dc4c <rmw_validate_namespace_with_size+0x18>
 800dc46:	7803      	ldrb	r3, [r0, #0]
 800dc48:	2b2f      	cmp	r3, #47	; 0x2f
 800dc4a:	d012      	beq.n	800dc72 <rmw_validate_namespace_with_size+0x3e>
 800dc4c:	aa01      	add	r2, sp, #4
 800dc4e:	4669      	mov	r1, sp
 800dc50:	f7ff ff7a 	bl	800db48 <rmw_validate_full_topic_name>
 800dc54:	b978      	cbnz	r0, 800dc76 <rmw_validate_namespace_with_size+0x42>
 800dc56:	9b00      	ldr	r3, [sp, #0]
 800dc58:	b14b      	cbz	r3, 800dc6e <rmw_validate_namespace_with_size+0x3a>
 800dc5a:	2b07      	cmp	r3, #7
 800dc5c:	d007      	beq.n	800dc6e <rmw_validate_namespace_with_size+0x3a>
 800dc5e:	1e5a      	subs	r2, r3, #1
 800dc60:	2a05      	cmp	r2, #5
 800dc62:	d82b      	bhi.n	800dcbc <rmw_validate_namespace_with_size+0x88>
 800dc64:	e8df f002 	tbb	[pc, r2]
 800dc68:	1e212427 	.word	0x1e212427
 800dc6c:	141b      	.short	0x141b
 800dc6e:	2df5      	cmp	r5, #245	; 0xf5
 800dc70:	d803      	bhi.n	800dc7a <rmw_validate_namespace_with_size+0x46>
 800dc72:	2000      	movs	r0, #0
 800dc74:	6020      	str	r0, [r4, #0]
 800dc76:	b042      	add	sp, #264	; 0x108
 800dc78:	bd70      	pop	{r4, r5, r6, pc}
 800dc7a:	2307      	movs	r3, #7
 800dc7c:	6023      	str	r3, [r4, #0]
 800dc7e:	2e00      	cmp	r6, #0
 800dc80:	d0f9      	beq.n	800dc76 <rmw_validate_namespace_with_size+0x42>
 800dc82:	23f4      	movs	r3, #244	; 0xf4
 800dc84:	6033      	str	r3, [r6, #0]
 800dc86:	e7f6      	b.n	800dc76 <rmw_validate_namespace_with_size+0x42>
 800dc88:	200b      	movs	r0, #11
 800dc8a:	4770      	bx	lr
 800dc8c:	200b      	movs	r0, #11
 800dc8e:	e7f2      	b.n	800dc76 <rmw_validate_namespace_with_size+0x42>
 800dc90:	2306      	movs	r3, #6
 800dc92:	6023      	str	r3, [r4, #0]
 800dc94:	2e00      	cmp	r6, #0
 800dc96:	d0ee      	beq.n	800dc76 <rmw_validate_namespace_with_size+0x42>
 800dc98:	9b01      	ldr	r3, [sp, #4]
 800dc9a:	6033      	str	r3, [r6, #0]
 800dc9c:	e7eb      	b.n	800dc76 <rmw_validate_namespace_with_size+0x42>
 800dc9e:	2305      	movs	r3, #5
 800dca0:	6023      	str	r3, [r4, #0]
 800dca2:	e7f7      	b.n	800dc94 <rmw_validate_namespace_with_size+0x60>
 800dca4:	2304      	movs	r3, #4
 800dca6:	6023      	str	r3, [r4, #0]
 800dca8:	e7f4      	b.n	800dc94 <rmw_validate_namespace_with_size+0x60>
 800dcaa:	2303      	movs	r3, #3
 800dcac:	6023      	str	r3, [r4, #0]
 800dcae:	e7f1      	b.n	800dc94 <rmw_validate_namespace_with_size+0x60>
 800dcb0:	2302      	movs	r3, #2
 800dcb2:	6023      	str	r3, [r4, #0]
 800dcb4:	e7ee      	b.n	800dc94 <rmw_validate_namespace_with_size+0x60>
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	6023      	str	r3, [r4, #0]
 800dcba:	e7eb      	b.n	800dc94 <rmw_validate_namespace_with_size+0x60>
 800dcbc:	4a03      	ldr	r2, [pc, #12]	; (800dccc <rmw_validate_namespace_with_size+0x98>)
 800dcbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dcc2:	a802      	add	r0, sp, #8
 800dcc4:	f7ff fd36 	bl	800d734 <rcutils_snprintf>
 800dcc8:	2001      	movs	r0, #1
 800dcca:	e7d4      	b.n	800dc76 <rmw_validate_namespace_with_size+0x42>
 800dccc:	080127ac 	.word	0x080127ac

0800dcd0 <rmw_validate_namespace>:
 800dcd0:	b168      	cbz	r0, 800dcee <rmw_validate_namespace+0x1e>
 800dcd2:	b570      	push	{r4, r5, r6, lr}
 800dcd4:	460d      	mov	r5, r1
 800dcd6:	4616      	mov	r6, r2
 800dcd8:	4604      	mov	r4, r0
 800dcda:	f7f2 fa8b 	bl	80001f4 <strlen>
 800dcde:	4633      	mov	r3, r6
 800dce0:	4601      	mov	r1, r0
 800dce2:	462a      	mov	r2, r5
 800dce4:	4620      	mov	r0, r4
 800dce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dcea:	f7ff bfa3 	b.w	800dc34 <rmw_validate_namespace_with_size>
 800dcee:	200b      	movs	r0, #11
 800dcf0:	4770      	bx	lr
 800dcf2:	bf00      	nop

0800dcf4 <rmw_namespace_validation_result_string>:
 800dcf4:	2807      	cmp	r0, #7
 800dcf6:	bf9a      	itte	ls
 800dcf8:	4b02      	ldrls	r3, [pc, #8]	; (800dd04 <rmw_namespace_validation_result_string+0x10>)
 800dcfa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800dcfe:	4802      	ldrhi	r0, [pc, #8]	; (800dd08 <rmw_namespace_validation_result_string+0x14>)
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	080129a4 	.word	0x080129a4
 800dd08:	080127fc 	.word	0x080127fc

0800dd0c <rmw_validate_node_name>:
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	d03b      	beq.n	800dd88 <rmw_validate_node_name+0x7c>
 800dd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd14:	460d      	mov	r5, r1
 800dd16:	2900      	cmp	r1, #0
 800dd18:	d038      	beq.n	800dd8c <rmw_validate_node_name+0x80>
 800dd1a:	4616      	mov	r6, r2
 800dd1c:	4604      	mov	r4, r0
 800dd1e:	f7f2 fa69 	bl	80001f4 <strlen>
 800dd22:	b1e0      	cbz	r0, 800dd5e <rmw_validate_node_name+0x52>
 800dd24:	1e63      	subs	r3, r4, #1
 800dd26:	eb03 0800 	add.w	r8, r3, r0
 800dd2a:	f1c4 0101 	rsb	r1, r4, #1
 800dd2e:	18cf      	adds	r7, r1, r3
 800dd30:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800dd34:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 800dd38:	f02e 0c20 	bic.w	ip, lr, #32
 800dd3c:	2a09      	cmp	r2, #9
 800dd3e:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 800dd42:	d914      	bls.n	800dd6e <rmw_validate_node_name+0x62>
 800dd44:	f1bc 0f19 	cmp.w	ip, #25
 800dd48:	d911      	bls.n	800dd6e <rmw_validate_node_name+0x62>
 800dd4a:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800dd4e:	d00e      	beq.n	800dd6e <rmw_validate_node_name+0x62>
 800dd50:	2302      	movs	r3, #2
 800dd52:	602b      	str	r3, [r5, #0]
 800dd54:	b106      	cbz	r6, 800dd58 <rmw_validate_node_name+0x4c>
 800dd56:	6037      	str	r7, [r6, #0]
 800dd58:	2000      	movs	r0, #0
 800dd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd5e:	2301      	movs	r3, #1
 800dd60:	602b      	str	r3, [r5, #0]
 800dd62:	2e00      	cmp	r6, #0
 800dd64:	d0f8      	beq.n	800dd58 <rmw_validate_node_name+0x4c>
 800dd66:	2000      	movs	r0, #0
 800dd68:	6030      	str	r0, [r6, #0]
 800dd6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd6e:	4543      	cmp	r3, r8
 800dd70:	d1dd      	bne.n	800dd2e <rmw_validate_node_name+0x22>
 800dd72:	7822      	ldrb	r2, [r4, #0]
 800dd74:	4b0d      	ldr	r3, [pc, #52]	; (800ddac <rmw_validate_node_name+0xa0>)
 800dd76:	5cd3      	ldrb	r3, [r2, r3]
 800dd78:	f013 0304 	ands.w	r3, r3, #4
 800dd7c:	d110      	bne.n	800dda0 <rmw_validate_node_name+0x94>
 800dd7e:	28ff      	cmp	r0, #255	; 0xff
 800dd80:	d806      	bhi.n	800dd90 <rmw_validate_node_name+0x84>
 800dd82:	602b      	str	r3, [r5, #0]
 800dd84:	4618      	mov	r0, r3
 800dd86:	e7e8      	b.n	800dd5a <rmw_validate_node_name+0x4e>
 800dd88:	200b      	movs	r0, #11
 800dd8a:	4770      	bx	lr
 800dd8c:	200b      	movs	r0, #11
 800dd8e:	e7e4      	b.n	800dd5a <rmw_validate_node_name+0x4e>
 800dd90:	2204      	movs	r2, #4
 800dd92:	602a      	str	r2, [r5, #0]
 800dd94:	2e00      	cmp	r6, #0
 800dd96:	d0df      	beq.n	800dd58 <rmw_validate_node_name+0x4c>
 800dd98:	22fe      	movs	r2, #254	; 0xfe
 800dd9a:	6032      	str	r2, [r6, #0]
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	e7dc      	b.n	800dd5a <rmw_validate_node_name+0x4e>
 800dda0:	2303      	movs	r3, #3
 800dda2:	602b      	str	r3, [r5, #0]
 800dda4:	2e00      	cmp	r6, #0
 800dda6:	d1de      	bne.n	800dd66 <rmw_validate_node_name+0x5a>
 800dda8:	e7d6      	b.n	800dd58 <rmw_validate_node_name+0x4c>
 800ddaa:	bf00      	nop
 800ddac:	08012da4 	.word	0x08012da4

0800ddb0 <rmw_node_name_validation_result_string>:
 800ddb0:	2804      	cmp	r0, #4
 800ddb2:	bf9a      	itte	ls
 800ddb4:	4b02      	ldrls	r3, [pc, #8]	; (800ddc0 <rmw_node_name_validation_result_string+0x10>)
 800ddb6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800ddba:	4802      	ldrhi	r0, [pc, #8]	; (800ddc4 <rmw_node_name_validation_result_string+0x14>)
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop
 800ddc0:	08012ab0 	.word	0x08012ab0
 800ddc4:	080129c4 	.word	0x080129c4

0800ddc8 <get_memory>:
 800ddc8:	4603      	mov	r3, r0
 800ddca:	6840      	ldr	r0, [r0, #4]
 800ddcc:	b158      	cbz	r0, 800dde6 <get_memory+0x1e>
 800ddce:	6842      	ldr	r2, [r0, #4]
 800ddd0:	605a      	str	r2, [r3, #4]
 800ddd2:	b10a      	cbz	r2, 800ddd8 <get_memory+0x10>
 800ddd4:	2100      	movs	r1, #0
 800ddd6:	6011      	str	r1, [r2, #0]
 800ddd8:	681a      	ldr	r2, [r3, #0]
 800ddda:	6042      	str	r2, [r0, #4]
 800dddc:	b102      	cbz	r2, 800dde0 <get_memory+0x18>
 800ddde:	6010      	str	r0, [r2, #0]
 800dde0:	2200      	movs	r2, #0
 800dde2:	6002      	str	r2, [r0, #0]
 800dde4:	6018      	str	r0, [r3, #0]
 800dde6:	4770      	bx	lr

0800dde8 <put_memory>:
 800dde8:	680b      	ldr	r3, [r1, #0]
 800ddea:	b10b      	cbz	r3, 800ddf0 <put_memory+0x8>
 800ddec:	684a      	ldr	r2, [r1, #4]
 800ddee:	605a      	str	r2, [r3, #4]
 800ddf0:	684a      	ldr	r2, [r1, #4]
 800ddf2:	b102      	cbz	r2, 800ddf6 <put_memory+0xe>
 800ddf4:	6013      	str	r3, [r2, #0]
 800ddf6:	6803      	ldr	r3, [r0, #0]
 800ddf8:	428b      	cmp	r3, r1
 800ddfa:	6843      	ldr	r3, [r0, #4]
 800ddfc:	bf08      	it	eq
 800ddfe:	6002      	streq	r2, [r0, #0]
 800de00:	604b      	str	r3, [r1, #4]
 800de02:	b103      	cbz	r3, 800de06 <put_memory+0x1e>
 800de04:	6019      	str	r1, [r3, #0]
 800de06:	2300      	movs	r3, #0
 800de08:	600b      	str	r3, [r1, #0]
 800de0a:	6041      	str	r1, [r0, #4]
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop

0800de10 <rmw_get_implementation_identifier>:
 800de10:	4b01      	ldr	r3, [pc, #4]	; (800de18 <rmw_get_implementation_identifier+0x8>)
 800de12:	6818      	ldr	r0, [r3, #0]
 800de14:	4770      	bx	lr
 800de16:	bf00      	nop
 800de18:	08012adc 	.word	0x08012adc

0800de1c <rmw_init_options_init>:
 800de1c:	b084      	sub	sp, #16
 800de1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de20:	b083      	sub	sp, #12
 800de22:	ad09      	add	r5, sp, #36	; 0x24
 800de24:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800de28:	b130      	cbz	r0, 800de38 <rmw_init_options_init+0x1c>
 800de2a:	4604      	mov	r4, r0
 800de2c:	4628      	mov	r0, r5
 800de2e:	f7fa fa4f 	bl	80082d0 <rcutils_allocator_is_valid>
 800de32:	b108      	cbz	r0, 800de38 <rmw_init_options_init+0x1c>
 800de34:	68a6      	ldr	r6, [r4, #8]
 800de36:	b12e      	cbz	r6, 800de44 <rmw_init_options_init+0x28>
 800de38:	200b      	movs	r0, #11
 800de3a:	b003      	add	sp, #12
 800de3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800de40:	b004      	add	sp, #16
 800de42:	4770      	bx	lr
 800de44:	2200      	movs	r2, #0
 800de46:	2300      	movs	r3, #0
 800de48:	e9c4 2300 	strd	r2, r3, [r4]
 800de4c:	4b22      	ldr	r3, [pc, #136]	; (800ded8 <rmw_init_options_init+0xbc>)
 800de4e:	f8df e098 	ldr.w	lr, [pc, #152]	; 800dee8 <rmw_init_options_init+0xcc>
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	60a3      	str	r3, [r4, #8]
 800de56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de58:	f104 0c20 	add.w	ip, r4, #32
 800de5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de60:	466f      	mov	r7, sp
 800de62:	682b      	ldr	r3, [r5, #0]
 800de64:	f8cc 3000 	str.w	r3, [ip]
 800de68:	4638      	mov	r0, r7
 800de6a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800de6e:	60e6      	str	r6, [r4, #12]
 800de70:	f7ff fe66 	bl	800db40 <rmw_get_default_security_options>
 800de74:	e897 0003 	ldmia.w	r7, {r0, r1}
 800de78:	f104 0310 	add.w	r3, r4, #16
 800de7c:	e883 0003 	stmia.w	r3, {r0, r1}
 800de80:	2203      	movs	r2, #3
 800de82:	4816      	ldr	r0, [pc, #88]	; (800dedc <rmw_init_options_init+0xc0>)
 800de84:	4916      	ldr	r1, [pc, #88]	; (800dee0 <rmw_init_options_init+0xc4>)
 800de86:	7626      	strb	r6, [r4, #24]
 800de88:	f7fa fd20 	bl	80088cc <rmw_uxrce_init_init_options_impl_memory>
 800de8c:	4813      	ldr	r0, [pc, #76]	; (800dedc <rmw_init_options_init+0xc0>)
 800de8e:	f7ff ff9b 	bl	800ddc8 <get_memory>
 800de92:	b1f0      	cbz	r0, 800ded2 <rmw_init_options_init+0xb6>
 800de94:	4a13      	ldr	r2, [pc, #76]	; (800dee4 <rmw_init_options_init+0xc8>)
 800de96:	6883      	ldr	r3, [r0, #8]
 800de98:	6851      	ldr	r1, [r2, #4]
 800de9a:	7810      	ldrb	r0, [r2, #0]
 800de9c:	6363      	str	r3, [r4, #52]	; 0x34
 800de9e:	7418      	strb	r0, [r3, #16]
 800dea0:	6159      	str	r1, [r3, #20]
 800dea2:	68d1      	ldr	r1, [r2, #12]
 800dea4:	61d9      	str	r1, [r3, #28]
 800dea6:	6911      	ldr	r1, [r2, #16]
 800dea8:	6219      	str	r1, [r3, #32]
 800deaa:	6951      	ldr	r1, [r2, #20]
 800deac:	6892      	ldr	r2, [r2, #8]
 800deae:	619a      	str	r2, [r3, #24]
 800deb0:	6259      	str	r1, [r3, #36]	; 0x24
 800deb2:	f7fd faf3 	bl	800b49c <uxr_nanos>
 800deb6:	f002 ff6f 	bl	8010d98 <srand>
 800deba:	f002 ff9b 	bl	8010df4 <rand>
 800debe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dec0:	6298      	str	r0, [r3, #40]	; 0x28
 800dec2:	2800      	cmp	r0, #0
 800dec4:	d0f9      	beq.n	800deba <rmw_init_options_init+0x9e>
 800dec6:	2000      	movs	r0, #0
 800dec8:	b003      	add	sp, #12
 800deca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dece:	b004      	add	sp, #16
 800ded0:	4770      	bx	lr
 800ded2:	2001      	movs	r0, #1
 800ded4:	e7b1      	b.n	800de3a <rmw_init_options_init+0x1e>
 800ded6:	bf00      	nop
 800ded8:	08012adc 	.word	0x08012adc
 800dedc:	20010a1c 	.word	0x20010a1c
 800dee0:	2000c2b8 	.word	0x2000c2b8
 800dee4:	2000c144 	.word	0x2000c144
 800dee8:	0801267c 	.word	0x0801267c

0800deec <rmw_init_options_copy>:
 800deec:	b570      	push	{r4, r5, r6, lr}
 800deee:	b158      	cbz	r0, 800df08 <rmw_init_options_copy+0x1c>
 800def0:	460d      	mov	r5, r1
 800def2:	b149      	cbz	r1, 800df08 <rmw_init_options_copy+0x1c>
 800def4:	4604      	mov	r4, r0
 800def6:	6880      	ldr	r0, [r0, #8]
 800def8:	b120      	cbz	r0, 800df04 <rmw_init_options_copy+0x18>
 800defa:	4b1e      	ldr	r3, [pc, #120]	; (800df74 <rmw_init_options_copy+0x88>)
 800defc:	6819      	ldr	r1, [r3, #0]
 800defe:	f7f2 f96f 	bl	80001e0 <strcmp>
 800df02:	bb90      	cbnz	r0, 800df6a <rmw_init_options_copy+0x7e>
 800df04:	68ab      	ldr	r3, [r5, #8]
 800df06:	b113      	cbz	r3, 800df0e <rmw_init_options_copy+0x22>
 800df08:	250b      	movs	r5, #11
 800df0a:	4628      	mov	r0, r5
 800df0c:	bd70      	pop	{r4, r5, r6, pc}
 800df0e:	4623      	mov	r3, r4
 800df10:	462a      	mov	r2, r5
 800df12:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800df16:	f8d3 c000 	ldr.w	ip, [r3]
 800df1a:	6858      	ldr	r0, [r3, #4]
 800df1c:	6899      	ldr	r1, [r3, #8]
 800df1e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800df22:	f8c2 e00c 	str.w	lr, [r2, #12]
 800df26:	3310      	adds	r3, #16
 800df28:	42b3      	cmp	r3, r6
 800df2a:	f8c2 c000 	str.w	ip, [r2]
 800df2e:	6050      	str	r0, [r2, #4]
 800df30:	6091      	str	r1, [r2, #8]
 800df32:	f102 0210 	add.w	r2, r2, #16
 800df36:	d1ee      	bne.n	800df16 <rmw_init_options_copy+0x2a>
 800df38:	6819      	ldr	r1, [r3, #0]
 800df3a:	685b      	ldr	r3, [r3, #4]
 800df3c:	480e      	ldr	r0, [pc, #56]	; (800df78 <rmw_init_options_copy+0x8c>)
 800df3e:	6053      	str	r3, [r2, #4]
 800df40:	6011      	str	r1, [r2, #0]
 800df42:	f7ff ff41 	bl	800ddc8 <get_memory>
 800df46:	b198      	cbz	r0, 800df70 <rmw_init_options_copy+0x84>
 800df48:	6883      	ldr	r3, [r0, #8]
 800df4a:	636b      	str	r3, [r5, #52]	; 0x34
 800df4c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800df4e:	f102 0c10 	add.w	ip, r2, #16
 800df52:	f103 0410 	add.w	r4, r3, #16
 800df56:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800df5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df5c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800df60:	2500      	movs	r5, #0
 800df62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800df66:	4628      	mov	r0, r5
 800df68:	bd70      	pop	{r4, r5, r6, pc}
 800df6a:	250c      	movs	r5, #12
 800df6c:	4628      	mov	r0, r5
 800df6e:	bd70      	pop	{r4, r5, r6, pc}
 800df70:	2501      	movs	r5, #1
 800df72:	e7ca      	b.n	800df0a <rmw_init_options_copy+0x1e>
 800df74:	08012adc 	.word	0x08012adc
 800df78:	20010a1c 	.word	0x20010a1c

0800df7c <rmw_init_options_fini>:
 800df7c:	2800      	cmp	r0, #0
 800df7e:	d03d      	beq.n	800dffc <rmw_init_options_fini+0x80>
 800df80:	b510      	push	{r4, lr}
 800df82:	4604      	mov	r4, r0
 800df84:	b08e      	sub	sp, #56	; 0x38
 800df86:	3020      	adds	r0, #32
 800df88:	f7fa f9a2 	bl	80082d0 <rcutils_allocator_is_valid>
 800df8c:	b360      	cbz	r0, 800dfe8 <rmw_init_options_fini+0x6c>
 800df8e:	68a0      	ldr	r0, [r4, #8]
 800df90:	b120      	cbz	r0, 800df9c <rmw_init_options_fini+0x20>
 800df92:	4b1c      	ldr	r3, [pc, #112]	; (800e004 <rmw_init_options_fini+0x88>)
 800df94:	6819      	ldr	r1, [r3, #0]
 800df96:	f7f2 f923 	bl	80001e0 <strcmp>
 800df9a:	bb68      	cbnz	r0, 800dff8 <rmw_init_options_fini+0x7c>
 800df9c:	4b1a      	ldr	r3, [pc, #104]	; (800e008 <rmw_init_options_fini+0x8c>)
 800df9e:	6819      	ldr	r1, [r3, #0]
 800dfa0:	b331      	cbz	r1, 800dff0 <rmw_init_options_fini+0x74>
 800dfa2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800dfa4:	e001      	b.n	800dfaa <rmw_init_options_fini+0x2e>
 800dfa6:	6849      	ldr	r1, [r1, #4]
 800dfa8:	b311      	cbz	r1, 800dff0 <rmw_init_options_fini+0x74>
 800dfaa:	688b      	ldr	r3, [r1, #8]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d1fa      	bne.n	800dfa6 <rmw_init_options_fini+0x2a>
 800dfb0:	4815      	ldr	r0, [pc, #84]	; (800e008 <rmw_init_options_fini+0x8c>)
 800dfb2:	f7ff ff19 	bl	800dde8 <put_memory>
 800dfb6:	4668      	mov	r0, sp
 800dfb8:	f7ff fdb2 	bl	800db20 <rmw_get_zero_initialized_init_options>
 800dfbc:	46ee      	mov	lr, sp
 800dfbe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dfc2:	46a4      	mov	ip, r4
 800dfc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dfc8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dfcc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dfd0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dfd4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dfd8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800dfdc:	e88c 0003 	stmia.w	ip, {r0, r1}
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	b00e      	add	sp, #56	; 0x38
 800dfe6:	bd10      	pop	{r4, pc}
 800dfe8:	230b      	movs	r3, #11
 800dfea:	4618      	mov	r0, r3
 800dfec:	b00e      	add	sp, #56	; 0x38
 800dfee:	bd10      	pop	{r4, pc}
 800dff0:	2301      	movs	r3, #1
 800dff2:	4618      	mov	r0, r3
 800dff4:	b00e      	add	sp, #56	; 0x38
 800dff6:	bd10      	pop	{r4, pc}
 800dff8:	230c      	movs	r3, #12
 800dffa:	e7f2      	b.n	800dfe2 <rmw_init_options_fini+0x66>
 800dffc:	230b      	movs	r3, #11
 800dffe:	4618      	mov	r0, r3
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop
 800e004:	08012adc 	.word	0x08012adc
 800e008:	20010a1c 	.word	0x20010a1c

0800e00c <rmw_init>:
 800e00c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e010:	b083      	sub	sp, #12
 800e012:	2800      	cmp	r0, #0
 800e014:	f000 80d3 	beq.w	800e1be <rmw_init+0x1b2>
 800e018:	460e      	mov	r6, r1
 800e01a:	2900      	cmp	r1, #0
 800e01c:	f000 80cf 	beq.w	800e1be <rmw_init+0x1b2>
 800e020:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e022:	4605      	mov	r5, r0
 800e024:	2b00      	cmp	r3, #0
 800e026:	f000 80ca 	beq.w	800e1be <rmw_init+0x1b2>
 800e02a:	4b78      	ldr	r3, [pc, #480]	; (800e20c <rmw_init+0x200>)
 800e02c:	6880      	ldr	r0, [r0, #8]
 800e02e:	681f      	ldr	r7, [r3, #0]
 800e030:	b128      	cbz	r0, 800e03e <rmw_init+0x32>
 800e032:	4639      	mov	r1, r7
 800e034:	f7f2 f8d4 	bl	80001e0 <strcmp>
 800e038:	2800      	cmp	r0, #0
 800e03a:	f040 80ca 	bne.w	800e1d2 <rmw_init+0x1c6>
 800e03e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e042:	4c73      	ldr	r4, [pc, #460]	; (800e210 <rmw_init+0x204>)
 800e044:	4973      	ldr	r1, [pc, #460]	; (800e214 <rmw_init+0x208>)
 800e046:	4874      	ldr	r0, [pc, #464]	; (800e218 <rmw_init+0x20c>)
 800e048:	60b7      	str	r7, [r6, #8]
 800e04a:	e9c6 2300 	strd	r2, r3, [r6]
 800e04e:	68eb      	ldr	r3, [r5, #12]
 800e050:	64b3      	str	r3, [r6, #72]	; 0x48
 800e052:	2201      	movs	r2, #1
 800e054:	f7fa fbda 	bl	800880c <rmw_uxrce_init_session_memory>
 800e058:	4620      	mov	r0, r4
 800e05a:	4970      	ldr	r1, [pc, #448]	; (800e21c <rmw_init+0x210>)
 800e05c:	2204      	movs	r2, #4
 800e05e:	f7fa fc15 	bl	800888c <rmw_uxrce_init_static_input_buffer_memory>
 800e062:	f04f 0800 	mov.w	r8, #0
 800e066:	486c      	ldr	r0, [pc, #432]	; (800e218 <rmw_init+0x20c>)
 800e068:	f884 800d 	strb.w	r8, [r4, #13]
 800e06c:	f7ff feac 	bl	800ddc8 <get_memory>
 800e070:	2800      	cmp	r0, #0
 800e072:	f000 80a9 	beq.w	800e1c8 <rmw_init+0x1bc>
 800e076:	6884      	ldr	r4, [r0, #8]
 800e078:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800e07a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800e07c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800e080:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800e084:	9101      	str	r1, [sp, #4]
 800e086:	6a00      	ldr	r0, [r0, #32]
 800e088:	9000      	str	r0, [sp, #0]
 800e08a:	f104 0910 	add.w	r9, r4, #16
 800e08e:	4661      	mov	r1, ip
 800e090:	4648      	mov	r0, r9
 800e092:	f000 fdbf 	bl	800ec14 <uxr_set_custom_transport_callbacks>
 800e096:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800e09a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e09e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800e0a2:	f504 725e 	add.w	r2, r4, #888	; 0x378
 800e0a6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 800e0aa:	495d      	ldr	r1, [pc, #372]	; (800e220 <rmw_init+0x214>)
 800e0ac:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 800e0b0:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 800e0b4:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 800e0b8:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 800e0bc:	4859      	ldr	r0, [pc, #356]	; (800e224 <rmw_init+0x218>)
 800e0be:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	64f4      	str	r4, [r6, #76]	; 0x4c
 800e0c6:	f7fa fb81 	bl	80087cc <rmw_uxrce_init_node_memory>
 800e0ca:	4957      	ldr	r1, [pc, #348]	; (800e228 <rmw_init+0x21c>)
 800e0cc:	4857      	ldr	r0, [pc, #348]	; (800e22c <rmw_init+0x220>)
 800e0ce:	2205      	movs	r2, #5
 800e0d0:	f7fa fb5c 	bl	800878c <rmw_uxrce_init_subscription_memory>
 800e0d4:	4956      	ldr	r1, [pc, #344]	; (800e230 <rmw_init+0x224>)
 800e0d6:	4857      	ldr	r0, [pc, #348]	; (800e234 <rmw_init+0x228>)
 800e0d8:	220a      	movs	r2, #10
 800e0da:	f7fa fb37 	bl	800874c <rmw_uxrce_init_publisher_memory>
 800e0de:	4956      	ldr	r1, [pc, #344]	; (800e238 <rmw_init+0x22c>)
 800e0e0:	4856      	ldr	r0, [pc, #344]	; (800e23c <rmw_init+0x230>)
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	f7fa faf2 	bl	80086cc <rmw_uxrce_init_service_memory>
 800e0e8:	4955      	ldr	r1, [pc, #340]	; (800e240 <rmw_init+0x234>)
 800e0ea:	4856      	ldr	r0, [pc, #344]	; (800e244 <rmw_init+0x238>)
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	f7fa fb0d 	bl	800870c <rmw_uxrce_init_client_memory>
 800e0f2:	4955      	ldr	r1, [pc, #340]	; (800e248 <rmw_init+0x23c>)
 800e0f4:	4855      	ldr	r0, [pc, #340]	; (800e24c <rmw_init+0x240>)
 800e0f6:	220f      	movs	r2, #15
 800e0f8:	f7fa fba8 	bl	800884c <rmw_uxrce_init_topic_memory>
 800e0fc:	4954      	ldr	r1, [pc, #336]	; (800e250 <rmw_init+0x244>)
 800e0fe:	4855      	ldr	r0, [pc, #340]	; (800e254 <rmw_init+0x248>)
 800e100:	2203      	movs	r2, #3
 800e102:	f7fa fbe3 	bl	80088cc <rmw_uxrce_init_init_options_impl_memory>
 800e106:	4954      	ldr	r1, [pc, #336]	; (800e258 <rmw_init+0x24c>)
 800e108:	4854      	ldr	r0, [pc, #336]	; (800e25c <rmw_init+0x250>)
 800e10a:	2204      	movs	r2, #4
 800e10c:	f7fa fbfe 	bl	800890c <rmw_uxrce_init_wait_set_memory>
 800e110:	4953      	ldr	r1, [pc, #332]	; (800e260 <rmw_init+0x254>)
 800e112:	4854      	ldr	r0, [pc, #336]	; (800e264 <rmw_init+0x258>)
 800e114:	2204      	movs	r2, #4
 800e116:	f7fa fc19 	bl	800894c <rmw_uxrce_init_guard_condition_memory>
 800e11a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800e11c:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800e11e:	4642      	mov	r2, r8
 800e120:	f000 fb06 	bl	800e730 <rmw_uxrce_transport_init>
 800e124:	4607      	mov	r7, r0
 800e126:	2800      	cmp	r0, #0
 800e128:	d158      	bne.n	800e1dc <rmw_init+0x1d0>
 800e12a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800e12c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800e130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e132:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800e136:	4628      	mov	r0, r5
 800e138:	f7fc f84e 	bl	800a1d8 <uxr_init_session>
 800e13c:	494a      	ldr	r1, [pc, #296]	; (800e268 <rmw_init+0x25c>)
 800e13e:	4622      	mov	r2, r4
 800e140:	4628      	mov	r0, r5
 800e142:	f7fc f86d 	bl	800a220 <uxr_set_topic_callback>
 800e146:	4949      	ldr	r1, [pc, #292]	; (800e26c <rmw_init+0x260>)
 800e148:	463a      	mov	r2, r7
 800e14a:	4628      	mov	r0, r5
 800e14c:	f7fc f864 	bl	800a218 <uxr_set_status_callback>
 800e150:	4947      	ldr	r1, [pc, #284]	; (800e270 <rmw_init+0x264>)
 800e152:	463a      	mov	r2, r7
 800e154:	4628      	mov	r0, r5
 800e156:	f7fc f867 	bl	800a228 <uxr_set_request_callback>
 800e15a:	4946      	ldr	r1, [pc, #280]	; (800e274 <rmw_init+0x268>)
 800e15c:	463a      	mov	r2, r7
 800e15e:	4628      	mov	r0, r5
 800e160:	f7fc f866 	bl	800a230 <uxr_set_reply_callback>
 800e164:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800e168:	2304      	movs	r3, #4
 800e16a:	0092      	lsls	r2, r2, #2
 800e16c:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800e170:	4628      	mov	r0, r5
 800e172:	f7fc f89b 	bl	800a2ac <uxr_create_input_reliable_stream>
 800e176:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800e17a:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800e17e:	0092      	lsls	r2, r2, #2
 800e180:	2304      	movs	r3, #4
 800e182:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800e186:	4628      	mov	r0, r5
 800e188:	f7fc f868 	bl	800a25c <uxr_create_output_reliable_stream>
 800e18c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 800e190:	4628      	mov	r0, r5
 800e192:	f7fc f885 	bl	800a2a0 <uxr_create_input_best_effort_stream>
 800e196:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 800e19a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800e19e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800e1a2:	3114      	adds	r1, #20
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	f7fc f847 	bl	800a238 <uxr_create_output_best_effort_stream>
 800e1aa:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 800e1ae:	4628      	mov	r0, r5
 800e1b0:	f7fc fd98 	bl	800ace4 <uxr_create_session>
 800e1b4:	b1f8      	cbz	r0, 800e1f6 <rmw_init+0x1ea>
 800e1b6:	4638      	mov	r0, r7
 800e1b8:	b003      	add	sp, #12
 800e1ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1be:	270b      	movs	r7, #11
 800e1c0:	4638      	mov	r0, r7
 800e1c2:	b003      	add	sp, #12
 800e1c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1c8:	2701      	movs	r7, #1
 800e1ca:	4638      	mov	r0, r7
 800e1cc:	b003      	add	sp, #12
 800e1ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1d2:	270c      	movs	r7, #12
 800e1d4:	4638      	mov	r0, r7
 800e1d6:	b003      	add	sp, #12
 800e1d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1dc:	4648      	mov	r0, r9
 800e1de:	f000 fd5b 	bl	800ec98 <uxr_close_custom_transport>
 800e1e2:	480d      	ldr	r0, [pc, #52]	; (800e218 <rmw_init+0x20c>)
 800e1e4:	4621      	mov	r1, r4
 800e1e6:	f7ff fdff 	bl	800dde8 <put_memory>
 800e1ea:	4638      	mov	r0, r7
 800e1ec:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 800e1f0:	b003      	add	sp, #12
 800e1f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1f6:	4648      	mov	r0, r9
 800e1f8:	f000 fd4e 	bl	800ec98 <uxr_close_custom_transport>
 800e1fc:	4806      	ldr	r0, [pc, #24]	; (800e218 <rmw_init+0x20c>)
 800e1fe:	4621      	mov	r1, r4
 800e200:	f7ff fdf2 	bl	800dde8 <put_memory>
 800e204:	64f7      	str	r7, [r6, #76]	; 0x4c
 800e206:	2701      	movs	r7, #1
 800e208:	e7d5      	b.n	800e1b6 <rmw_init+0x1aa>
 800e20a:	bf00      	nop
 800e20c:	08012adc 	.word	0x08012adc
 800e210:	20010a6c 	.word	0x20010a6c
 800e214:	2000cd18 	.word	0x2000cd18
 800e218:	20010a5c 	.word	0x20010a5c
 800e21c:	2000e2c0 	.word	0x2000e2c0
 800e220:	2000c33c 	.word	0x2000c33c
 800e224:	20010a2c 	.word	0x20010a2c
 800e228:	200103c0 	.word	0x200103c0
 800e22c:	20010a7c 	.word	0x20010a7c
 800e230:	2000c3e0 	.word	0x2000c3e0
 800e234:	20010a3c 	.word	0x20010a3c
 800e238:	2000cc50 	.word	0x2000cc50
 800e23c:	20010a4c 	.word	0x20010a4c
 800e240:	2000c170 	.word	0x2000c170
 800e244:	2000c160 	.word	0x2000c160
 800e248:	200107f8 	.word	0x200107f8
 800e24c:	20010a8c 	.word	0x20010a8c
 800e250:	2000c2b8 	.word	0x2000c2b8
 800e254:	20010a1c 	.word	0x20010a1c
 800e258:	2001099c 	.word	0x2001099c
 800e25c:	20010a9c 	.word	0x20010a9c
 800e260:	2000c238 	.word	0x2000c238
 800e264:	20010a0c 	.word	0x20010a0c
 800e268:	080108b5 	.word	0x080108b5
 800e26c:	080108ad 	.word	0x080108ad
 800e270:	0801094d 	.word	0x0801094d
 800e274:	080109e9 	.word	0x080109e9

0800e278 <rmw_context_fini>:
 800e278:	4b17      	ldr	r3, [pc, #92]	; (800e2d8 <rmw_context_fini+0x60>)
 800e27a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800e27c:	b570      	push	{r4, r5, r6, lr}
 800e27e:	681c      	ldr	r4, [r3, #0]
 800e280:	4605      	mov	r5, r0
 800e282:	b334      	cbz	r4, 800e2d2 <rmw_context_fini+0x5a>
 800e284:	2600      	movs	r6, #0
 800e286:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800e28a:	6902      	ldr	r2, [r0, #16]
 800e28c:	428a      	cmp	r2, r1
 800e28e:	d018      	beq.n	800e2c2 <rmw_context_fini+0x4a>
 800e290:	2c00      	cmp	r4, #0
 800e292:	d1f8      	bne.n	800e286 <rmw_context_fini+0xe>
 800e294:	b189      	cbz	r1, 800e2ba <rmw_context_fini+0x42>
 800e296:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 800e29a:	789b      	ldrb	r3, [r3, #2]
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 800e2a2:	bf14      	ite	ne
 800e2a4:	210a      	movne	r1, #10
 800e2a6:	2100      	moveq	r1, #0
 800e2a8:	f7fc fcf4 	bl	800ac94 <uxr_delete_session_retries>
 800e2ac:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800e2ae:	f7fa fb6d 	bl	800898c <rmw_uxrce_fini_session_memory>
 800e2b2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800e2b4:	3010      	adds	r0, #16
 800e2b6:	f000 fcef 	bl	800ec98 <uxr_close_custom_transport>
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	64eb      	str	r3, [r5, #76]	; 0x4c
 800e2be:	4630      	mov	r0, r6
 800e2c0:	bd70      	pop	{r4, r5, r6, pc}
 800e2c2:	3018      	adds	r0, #24
 800e2c4:	f000 f90e 	bl	800e4e4 <rmw_destroy_node>
 800e2c8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800e2ca:	4606      	mov	r6, r0
 800e2cc:	2c00      	cmp	r4, #0
 800e2ce:	d1da      	bne.n	800e286 <rmw_context_fini+0xe>
 800e2d0:	e7e0      	b.n	800e294 <rmw_context_fini+0x1c>
 800e2d2:	4626      	mov	r6, r4
 800e2d4:	e7de      	b.n	800e294 <rmw_context_fini+0x1c>
 800e2d6:	bf00      	nop
 800e2d8:	20010a2c 	.word	0x20010a2c

0800e2dc <create_topic>:
 800e2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2e0:	4605      	mov	r5, r0
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	4822      	ldr	r0, [pc, #136]	; (800e370 <create_topic+0x94>)
 800e2e6:	460f      	mov	r7, r1
 800e2e8:	4616      	mov	r6, r2
 800e2ea:	f7ff fd6d 	bl	800ddc8 <get_memory>
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	2800      	cmp	r0, #0
 800e2f2:	d039      	beq.n	800e368 <create_topic+0x8c>
 800e2f4:	692b      	ldr	r3, [r5, #16]
 800e2f6:	6884      	ldr	r4, [r0, #8]
 800e2f8:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800e378 <create_topic+0x9c>
 800e2fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e300:	e9c4 6505 	strd	r6, r5, [r4, #20]
 800e304:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 800e308:	1c42      	adds	r2, r0, #1
 800e30a:	2102      	movs	r1, #2
 800e30c:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 800e310:	f7fb fea4 	bl	800a05c <uxr_object_id>
 800e314:	223c      	movs	r2, #60	; 0x3c
 800e316:	6120      	str	r0, [r4, #16]
 800e318:	4641      	mov	r1, r8
 800e31a:	4638      	mov	r0, r7
 800e31c:	f7fa fc6e 	bl	8008bfc <generate_topic_name>
 800e320:	b1f0      	cbz	r0, 800e360 <create_topic+0x84>
 800e322:	4f14      	ldr	r7, [pc, #80]	; (800e374 <create_topic+0x98>)
 800e324:	4630      	mov	r0, r6
 800e326:	2264      	movs	r2, #100	; 0x64
 800e328:	4639      	mov	r1, r7
 800e32a:	f7fa fc37 	bl	8008b9c <generate_type_name>
 800e32e:	b1b8      	cbz	r0, 800e360 <create_topic+0x84>
 800e330:	6928      	ldr	r0, [r5, #16]
 800e332:	2306      	movs	r3, #6
 800e334:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800e338:	f8cd 8000 	str.w	r8, [sp]
 800e33c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800e340:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e344:	6811      	ldr	r1, [r2, #0]
 800e346:	696b      	ldr	r3, [r5, #20]
 800e348:	6922      	ldr	r2, [r4, #16]
 800e34a:	f7fb fdab 	bl	8009ea4 <uxr_buffer_create_topic_bin>
 800e34e:	4602      	mov	r2, r0
 800e350:	6928      	ldr	r0, [r5, #16]
 800e352:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e356:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e35a:	f7fa fbe9 	bl	8008b30 <run_xrce_session>
 800e35e:	b918      	cbnz	r0, 800e368 <create_topic+0x8c>
 800e360:	4620      	mov	r0, r4
 800e362:	f7fa fb89 	bl	8008a78 <rmw_uxrce_fini_topic_memory>
 800e366:	2400      	movs	r4, #0
 800e368:	4620      	mov	r0, r4
 800e36a:	b004      	add	sp, #16
 800e36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e370:	20010a8c 	.word	0x20010a8c
 800e374:	20010b08 	.word	0x20010b08
 800e378:	20010acc 	.word	0x20010acc

0800e37c <destroy_topic>:
 800e37c:	b538      	push	{r3, r4, r5, lr}
 800e37e:	6985      	ldr	r5, [r0, #24]
 800e380:	b1d5      	cbz	r5, 800e3b8 <destroy_topic+0x3c>
 800e382:	4604      	mov	r4, r0
 800e384:	6928      	ldr	r0, [r5, #16]
 800e386:	6922      	ldr	r2, [r4, #16]
 800e388:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e38c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e390:	6819      	ldr	r1, [r3, #0]
 800e392:	f7fb fd09 	bl	8009da8 <uxr_buffer_delete_entity>
 800e396:	4602      	mov	r2, r0
 800e398:	6928      	ldr	r0, [r5, #16]
 800e39a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e39e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e3a2:	f7fa fbc5 	bl	8008b30 <run_xrce_session>
 800e3a6:	2800      	cmp	r0, #0
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	bf14      	ite	ne
 800e3ac:	2400      	movne	r4, #0
 800e3ae:	2402      	moveq	r4, #2
 800e3b0:	f7fa fb62 	bl	8008a78 <rmw_uxrce_fini_topic_memory>
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	bd38      	pop	{r3, r4, r5, pc}
 800e3b8:	2401      	movs	r4, #1
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	bd38      	pop	{r3, r4, r5, pc}
 800e3be:	bf00      	nop

0800e3c0 <create_node>:
 800e3c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3c4:	b083      	sub	sp, #12
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d05f      	beq.n	800e48a <create_node+0xca>
 800e3ca:	4606      	mov	r6, r0
 800e3cc:	4835      	ldr	r0, [pc, #212]	; (800e4a4 <create_node+0xe4>)
 800e3ce:	460f      	mov	r7, r1
 800e3d0:	4690      	mov	r8, r2
 800e3d2:	461d      	mov	r5, r3
 800e3d4:	f7ff fcf8 	bl	800ddc8 <get_memory>
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	d056      	beq.n	800e48a <create_node+0xca>
 800e3dc:	6884      	ldr	r4, [r0, #8]
 800e3de:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800e3e0:	6123      	str	r3, [r4, #16]
 800e3e2:	f7ff fd15 	bl	800de10 <rmw_get_implementation_identifier>
 800e3e6:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800e3ea:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800e3ee:	f8c4 9020 	str.w	r9, [r4, #32]
 800e3f2:	4630      	mov	r0, r6
 800e3f4:	f7f1 fefe 	bl	80001f4 <strlen>
 800e3f8:	1c42      	adds	r2, r0, #1
 800e3fa:	2a3c      	cmp	r2, #60	; 0x3c
 800e3fc:	f104 0518 	add.w	r5, r4, #24
 800e400:	d840      	bhi.n	800e484 <create_node+0xc4>
 800e402:	4648      	mov	r0, r9
 800e404:	4631      	mov	r1, r6
 800e406:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800e40a:	f003 f888 	bl	801151e <memcpy>
 800e40e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800e412:	4638      	mov	r0, r7
 800e414:	f7f1 feee 	bl	80001f4 <strlen>
 800e418:	1c42      	adds	r2, r0, #1
 800e41a:	2a3c      	cmp	r2, #60	; 0x3c
 800e41c:	d832      	bhi.n	800e484 <create_node+0xc4>
 800e41e:	4639      	mov	r1, r7
 800e420:	4648      	mov	r0, r9
 800e422:	f003 f87c 	bl	801151e <memcpy>
 800e426:	6923      	ldr	r3, [r4, #16]
 800e428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e42c:	2101      	movs	r1, #1
 800e42e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 800e432:	1842      	adds	r2, r0, r1
 800e434:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 800e438:	f7fb fe10 	bl	800a05c <uxr_object_id>
 800e43c:	6160      	str	r0, [r4, #20]
 800e43e:	783b      	ldrb	r3, [r7, #0]
 800e440:	2b2f      	cmp	r3, #47	; 0x2f
 800e442:	d127      	bne.n	800e494 <create_node+0xd4>
 800e444:	787b      	ldrb	r3, [r7, #1]
 800e446:	bb2b      	cbnz	r3, 800e494 <create_node+0xd4>
 800e448:	4a17      	ldr	r2, [pc, #92]	; (800e4a8 <create_node+0xe8>)
 800e44a:	4818      	ldr	r0, [pc, #96]	; (800e4ac <create_node+0xec>)
 800e44c:	4633      	mov	r3, r6
 800e44e:	213c      	movs	r1, #60	; 0x3c
 800e450:	f002 fe96 	bl	8011180 <sniprintf>
 800e454:	6920      	ldr	r0, [r4, #16]
 800e456:	4915      	ldr	r1, [pc, #84]	; (800e4ac <create_node+0xec>)
 800e458:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800e45c:	9100      	str	r1, [sp, #0]
 800e45e:	2106      	movs	r1, #6
 800e460:	9101      	str	r1, [sp, #4]
 800e462:	6811      	ldr	r1, [r2, #0]
 800e464:	6962      	ldr	r2, [r4, #20]
 800e466:	fa1f f388 	uxth.w	r3, r8
 800e46a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e46e:	f7fb fce7 	bl	8009e40 <uxr_buffer_create_participant_bin>
 800e472:	4602      	mov	r2, r0
 800e474:	6920      	ldr	r0, [r4, #16]
 800e476:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e47a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e47e:	f7fa fb57 	bl	8008b30 <run_xrce_session>
 800e482:	b918      	cbnz	r0, 800e48c <create_node+0xcc>
 800e484:	4628      	mov	r0, r5
 800e486:	f7fa fa87 	bl	8008998 <rmw_uxrce_fini_node_memory>
 800e48a:	2500      	movs	r5, #0
 800e48c:	4628      	mov	r0, r5
 800e48e:	b003      	add	sp, #12
 800e490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e494:	4a06      	ldr	r2, [pc, #24]	; (800e4b0 <create_node+0xf0>)
 800e496:	9600      	str	r6, [sp, #0]
 800e498:	463b      	mov	r3, r7
 800e49a:	213c      	movs	r1, #60	; 0x3c
 800e49c:	4803      	ldr	r0, [pc, #12]	; (800e4ac <create_node+0xec>)
 800e49e:	f002 fe6f 	bl	8011180 <sniprintf>
 800e4a2:	e7d7      	b.n	800e454 <create_node+0x94>
 800e4a4:	20010a2c 	.word	0x20010a2c
 800e4a8:	080124f4 	.word	0x080124f4
 800e4ac:	20010b6c 	.word	0x20010b6c
 800e4b0:	08012684 	.word	0x08012684

0800e4b4 <rmw_create_node>:
 800e4b4:	b199      	cbz	r1, 800e4de <rmw_create_node+0x2a>
 800e4b6:	780b      	ldrb	r3, [r1, #0]
 800e4b8:	468c      	mov	ip, r1
 800e4ba:	b183      	cbz	r3, 800e4de <rmw_create_node+0x2a>
 800e4bc:	b410      	push	{r4}
 800e4be:	4614      	mov	r4, r2
 800e4c0:	b14a      	cbz	r2, 800e4d6 <rmw_create_node+0x22>
 800e4c2:	7813      	ldrb	r3, [r2, #0]
 800e4c4:	b13b      	cbz	r3, 800e4d6 <rmw_create_node+0x22>
 800e4c6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	4621      	mov	r1, r4
 800e4cc:	4660      	mov	r0, ip
 800e4ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4d2:	f7ff bf75 	b.w	800e3c0 <create_node>
 800e4d6:	2000      	movs	r0, #0
 800e4d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4dc:	4770      	bx	lr
 800e4de:	2000      	movs	r0, #0
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop

0800e4e4 <rmw_destroy_node>:
 800e4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4e6:	b328      	cbz	r0, 800e534 <rmw_destroy_node+0x50>
 800e4e8:	4607      	mov	r7, r0
 800e4ea:	6800      	ldr	r0, [r0, #0]
 800e4ec:	b120      	cbz	r0, 800e4f8 <rmw_destroy_node+0x14>
 800e4ee:	4b36      	ldr	r3, [pc, #216]	; (800e5c8 <rmw_destroy_node+0xe4>)
 800e4f0:	6819      	ldr	r1, [r3, #0]
 800e4f2:	f7f1 fe75 	bl	80001e0 <strcmp>
 800e4f6:	b9e8      	cbnz	r0, 800e534 <rmw_destroy_node+0x50>
 800e4f8:	687d      	ldr	r5, [r7, #4]
 800e4fa:	b1dd      	cbz	r5, 800e534 <rmw_destroy_node+0x50>
 800e4fc:	4b33      	ldr	r3, [pc, #204]	; (800e5cc <rmw_destroy_node+0xe8>)
 800e4fe:	681c      	ldr	r4, [r3, #0]
 800e500:	2c00      	cmp	r4, #0
 800e502:	d05f      	beq.n	800e5c4 <rmw_destroy_node+0xe0>
 800e504:	2600      	movs	r6, #0
 800e506:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e50a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800e50e:	429d      	cmp	r5, r3
 800e510:	d013      	beq.n	800e53a <rmw_destroy_node+0x56>
 800e512:	2c00      	cmp	r4, #0
 800e514:	d1f7      	bne.n	800e506 <rmw_destroy_node+0x22>
 800e516:	4b2e      	ldr	r3, [pc, #184]	; (800e5d0 <rmw_destroy_node+0xec>)
 800e518:	681c      	ldr	r4, [r3, #0]
 800e51a:	b1c4      	cbz	r4, 800e54e <rmw_destroy_node+0x6a>
 800e51c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e520:	6a0b      	ldr	r3, [r1, #32]
 800e522:	429d      	cmp	r5, r3
 800e524:	d1f9      	bne.n	800e51a <rmw_destroy_node+0x36>
 800e526:	317c      	adds	r1, #124	; 0x7c
 800e528:	4638      	mov	r0, r7
 800e52a:	f000 f8a1 	bl	800e670 <rmw_destroy_subscription>
 800e52e:	2801      	cmp	r0, #1
 800e530:	4606      	mov	r6, r0
 800e532:	d1f2      	bne.n	800e51a <rmw_destroy_node+0x36>
 800e534:	2601      	movs	r6, #1
 800e536:	4630      	mov	r0, r6
 800e538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e53a:	3184      	adds	r1, #132	; 0x84
 800e53c:	4638      	mov	r0, r7
 800e53e:	f7fa f873 	bl	8008628 <rmw_destroy_publisher>
 800e542:	2801      	cmp	r0, #1
 800e544:	4606      	mov	r6, r0
 800e546:	d0f5      	beq.n	800e534 <rmw_destroy_node+0x50>
 800e548:	2c00      	cmp	r4, #0
 800e54a:	d1dc      	bne.n	800e506 <rmw_destroy_node+0x22>
 800e54c:	e7e3      	b.n	800e516 <rmw_destroy_node+0x32>
 800e54e:	4b21      	ldr	r3, [pc, #132]	; (800e5d4 <rmw_destroy_node+0xf0>)
 800e550:	681c      	ldr	r4, [r3, #0]
 800e552:	b16c      	cbz	r4, 800e570 <rmw_destroy_node+0x8c>
 800e554:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e558:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800e55a:	429d      	cmp	r5, r3
 800e55c:	d1f9      	bne.n	800e552 <rmw_destroy_node+0x6e>
 800e55e:	317c      	adds	r1, #124	; 0x7c
 800e560:	4638      	mov	r0, r7
 800e562:	f000 f841 	bl	800e5e8 <rmw_destroy_service>
 800e566:	2801      	cmp	r0, #1
 800e568:	4606      	mov	r6, r0
 800e56a:	d0e3      	beq.n	800e534 <rmw_destroy_node+0x50>
 800e56c:	2c00      	cmp	r4, #0
 800e56e:	d1f1      	bne.n	800e554 <rmw_destroy_node+0x70>
 800e570:	4b19      	ldr	r3, [pc, #100]	; (800e5d8 <rmw_destroy_node+0xf4>)
 800e572:	681c      	ldr	r4, [r3, #0]
 800e574:	b16c      	cbz	r4, 800e592 <rmw_destroy_node+0xae>
 800e576:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e57a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800e57c:	429d      	cmp	r5, r3
 800e57e:	d1f9      	bne.n	800e574 <rmw_destroy_node+0x90>
 800e580:	317c      	adds	r1, #124	; 0x7c
 800e582:	4638      	mov	r0, r7
 800e584:	f002 fa7a 	bl	8010a7c <rmw_destroy_client>
 800e588:	2801      	cmp	r0, #1
 800e58a:	4606      	mov	r6, r0
 800e58c:	d0d2      	beq.n	800e534 <rmw_destroy_node+0x50>
 800e58e:	2c00      	cmp	r4, #0
 800e590:	d1f1      	bne.n	800e576 <rmw_destroy_node+0x92>
 800e592:	6928      	ldr	r0, [r5, #16]
 800e594:	696a      	ldr	r2, [r5, #20]
 800e596:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e59a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e59e:	6819      	ldr	r1, [r3, #0]
 800e5a0:	f7fb fc02 	bl	8009da8 <uxr_buffer_delete_entity>
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	6928      	ldr	r0, [r5, #16]
 800e5a8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e5ac:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e5b0:	f7fa fabe 	bl	8008b30 <run_xrce_session>
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	bf08      	it	eq
 800e5b8:	2602      	moveq	r6, #2
 800e5ba:	4638      	mov	r0, r7
 800e5bc:	f7fa f9ec 	bl	8008998 <rmw_uxrce_fini_node_memory>
 800e5c0:	4630      	mov	r0, r6
 800e5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5c4:	4626      	mov	r6, r4
 800e5c6:	e7a6      	b.n	800e516 <rmw_destroy_node+0x32>
 800e5c8:	08012adc 	.word	0x08012adc
 800e5cc:	20010a3c 	.word	0x20010a3c
 800e5d0:	20010a7c 	.word	0x20010a7c
 800e5d4:	20010a4c 	.word	0x20010a4c
 800e5d8:	2000c160 	.word	0x2000c160

0800e5dc <rmw_node_get_graph_guard_condition>:
 800e5dc:	6843      	ldr	r3, [r0, #4]
 800e5de:	6918      	ldr	r0, [r3, #16]
 800e5e0:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop

0800e5e8 <rmw_destroy_service>:
 800e5e8:	b570      	push	{r4, r5, r6, lr}
 800e5ea:	b128      	cbz	r0, 800e5f8 <rmw_destroy_service+0x10>
 800e5ec:	4604      	mov	r4, r0
 800e5ee:	6800      	ldr	r0, [r0, #0]
 800e5f0:	460d      	mov	r5, r1
 800e5f2:	f7fa fb1d 	bl	8008c30 <is_uxrce_rmw_identifier_valid>
 800e5f6:	b910      	cbnz	r0, 800e5fe <rmw_destroy_service+0x16>
 800e5f8:	2401      	movs	r4, #1
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	bd70      	pop	{r4, r5, r6, pc}
 800e5fe:	6863      	ldr	r3, [r4, #4]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d0f9      	beq.n	800e5f8 <rmw_destroy_service+0x10>
 800e604:	2d00      	cmp	r5, #0
 800e606:	d0f7      	beq.n	800e5f8 <rmw_destroy_service+0x10>
 800e608:	6828      	ldr	r0, [r5, #0]
 800e60a:	f7fa fb11 	bl	8008c30 <is_uxrce_rmw_identifier_valid>
 800e60e:	2800      	cmp	r0, #0
 800e610:	d0f2      	beq.n	800e5f8 <rmw_destroy_service+0x10>
 800e612:	686e      	ldr	r6, [r5, #4]
 800e614:	2e00      	cmp	r6, #0
 800e616:	d0ef      	beq.n	800e5f8 <rmw_destroy_service+0x10>
 800e618:	6864      	ldr	r4, [r4, #4]
 800e61a:	6932      	ldr	r2, [r6, #16]
 800e61c:	6920      	ldr	r0, [r4, #16]
 800e61e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e622:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e626:	6819      	ldr	r1, [r3, #0]
 800e628:	f001 f882 	bl	800f730 <uxr_buffer_cancel_data>
 800e62c:	4602      	mov	r2, r0
 800e62e:	6920      	ldr	r0, [r4, #16]
 800e630:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e634:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e638:	f7fa fa7a 	bl	8008b30 <run_xrce_session>
 800e63c:	6920      	ldr	r0, [r4, #16]
 800e63e:	6932      	ldr	r2, [r6, #16]
 800e640:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e644:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e648:	6819      	ldr	r1, [r3, #0]
 800e64a:	f7fb fbad 	bl	8009da8 <uxr_buffer_delete_entity>
 800e64e:	4602      	mov	r2, r0
 800e650:	6920      	ldr	r0, [r4, #16]
 800e652:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e656:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e65a:	f7fa fa69 	bl	8008b30 <run_xrce_session>
 800e65e:	2800      	cmp	r0, #0
 800e660:	4628      	mov	r0, r5
 800e662:	bf14      	ite	ne
 800e664:	2400      	movne	r4, #0
 800e666:	2402      	moveq	r4, #2
 800e668:	f7fa f9da 	bl	8008a20 <rmw_uxrce_fini_service_memory>
 800e66c:	e7c5      	b.n	800e5fa <rmw_destroy_service+0x12>
 800e66e:	bf00      	nop

0800e670 <rmw_destroy_subscription>:
 800e670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e672:	b128      	cbz	r0, 800e680 <rmw_destroy_subscription+0x10>
 800e674:	4604      	mov	r4, r0
 800e676:	6800      	ldr	r0, [r0, #0]
 800e678:	460d      	mov	r5, r1
 800e67a:	f7fa fad9 	bl	8008c30 <is_uxrce_rmw_identifier_valid>
 800e67e:	b910      	cbnz	r0, 800e686 <rmw_destroy_subscription+0x16>
 800e680:	2401      	movs	r4, #1
 800e682:	4620      	mov	r0, r4
 800e684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e686:	6863      	ldr	r3, [r4, #4]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d0f9      	beq.n	800e680 <rmw_destroy_subscription+0x10>
 800e68c:	2d00      	cmp	r5, #0
 800e68e:	d0f7      	beq.n	800e680 <rmw_destroy_subscription+0x10>
 800e690:	6828      	ldr	r0, [r5, #0]
 800e692:	f7fa facd 	bl	8008c30 <is_uxrce_rmw_identifier_valid>
 800e696:	2800      	cmp	r0, #0
 800e698:	d0f2      	beq.n	800e680 <rmw_destroy_subscription+0x10>
 800e69a:	686c      	ldr	r4, [r5, #4]
 800e69c:	2c00      	cmp	r4, #0
 800e69e:	d0ef      	beq.n	800e680 <rmw_destroy_subscription+0x10>
 800e6a0:	6a26      	ldr	r6, [r4, #32]
 800e6a2:	6962      	ldr	r2, [r4, #20]
 800e6a4:	6930      	ldr	r0, [r6, #16]
 800e6a6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e6aa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e6ae:	6819      	ldr	r1, [r3, #0]
 800e6b0:	f001 f83e 	bl	800f730 <uxr_buffer_cancel_data>
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	6930      	ldr	r0, [r6, #16]
 800e6b8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e6bc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e6c0:	f7fa fa36 	bl	8008b30 <run_xrce_session>
 800e6c4:	69e0      	ldr	r0, [r4, #28]
 800e6c6:	f7ff fe59 	bl	800e37c <destroy_topic>
 800e6ca:	6a23      	ldr	r3, [r4, #32]
 800e6cc:	6962      	ldr	r2, [r4, #20]
 800e6ce:	6918      	ldr	r0, [r3, #16]
 800e6d0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e6d4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e6d8:	6819      	ldr	r1, [r3, #0]
 800e6da:	f7fb fb65 	bl	8009da8 <uxr_buffer_delete_entity>
 800e6de:	6a23      	ldr	r3, [r4, #32]
 800e6e0:	6922      	ldr	r2, [r4, #16]
 800e6e2:	691b      	ldr	r3, [r3, #16]
 800e6e4:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800e6e8:	4604      	mov	r4, r0
 800e6ea:	6809      	ldr	r1, [r1, #0]
 800e6ec:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800e6f0:	f7fb fb5a 	bl	8009da8 <uxr_buffer_delete_entity>
 800e6f4:	6937      	ldr	r7, [r6, #16]
 800e6f6:	4622      	mov	r2, r4
 800e6f8:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800e6fc:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800e700:	4604      	mov	r4, r0
 800e702:	4638      	mov	r0, r7
 800e704:	f7fa fa14 	bl	8008b30 <run_xrce_session>
 800e708:	6936      	ldr	r6, [r6, #16]
 800e70a:	4622      	mov	r2, r4
 800e70c:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800e710:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800e714:	4604      	mov	r4, r0
 800e716:	4630      	mov	r0, r6
 800e718:	f7fa fa0a 	bl	8008b30 <run_xrce_session>
 800e71c:	b12c      	cbz	r4, 800e72a <rmw_destroy_subscription+0xba>
 800e71e:	b120      	cbz	r0, 800e72a <rmw_destroy_subscription+0xba>
 800e720:	2400      	movs	r4, #0
 800e722:	4628      	mov	r0, r5
 800e724:	f7fa f966 	bl	80089f4 <rmw_uxrce_fini_subscription_memory>
 800e728:	e7ab      	b.n	800e682 <rmw_destroy_subscription+0x12>
 800e72a:	2402      	movs	r4, #2
 800e72c:	e7f9      	b.n	800e722 <rmw_destroy_subscription+0xb2>
 800e72e:	bf00      	nop

0800e730 <rmw_uxrce_transport_init>:
 800e730:	b508      	push	{r3, lr}
 800e732:	b108      	cbz	r0, 800e738 <rmw_uxrce_transport_init+0x8>
 800e734:	f100 0210 	add.w	r2, r0, #16
 800e738:	b139      	cbz	r1, 800e74a <rmw_uxrce_transport_init+0x1a>
 800e73a:	6949      	ldr	r1, [r1, #20]
 800e73c:	4610      	mov	r0, r2
 800e73e:	f000 fa77 	bl	800ec30 <uxr_init_custom_transport>
 800e742:	f080 0001 	eor.w	r0, r0, #1
 800e746:	b2c0      	uxtb	r0, r0
 800e748:	bd08      	pop	{r3, pc}
 800e74a:	4b04      	ldr	r3, [pc, #16]	; (800e75c <rmw_uxrce_transport_init+0x2c>)
 800e74c:	4610      	mov	r0, r2
 800e74e:	6859      	ldr	r1, [r3, #4]
 800e750:	f000 fa6e 	bl	800ec30 <uxr_init_custom_transport>
 800e754:	f080 0001 	eor.w	r0, r0, #1
 800e758:	b2c0      	uxtb	r0, r0
 800e75a:	bd08      	pop	{r3, pc}
 800e75c:	2000c144 	.word	0x2000c144

0800e760 <rmw_uros_epoch_nanos>:
 800e760:	4b05      	ldr	r3, [pc, #20]	; (800e778 <rmw_uros_epoch_nanos+0x18>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	b123      	cbz	r3, 800e770 <rmw_uros_epoch_nanos+0x10>
 800e766:	6898      	ldr	r0, [r3, #8]
 800e768:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e76c:	f7fb bdba 	b.w	800a2e4 <uxr_epoch_nanos>
 800e770:	2000      	movs	r0, #0
 800e772:	2100      	movs	r1, #0
 800e774:	4770      	bx	lr
 800e776:	bf00      	nop
 800e778:	20010a5c 	.word	0x20010a5c

0800e77c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800e77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e780:	6805      	ldr	r5, [r0, #0]
 800e782:	4604      	mov	r4, r0
 800e784:	4628      	mov	r0, r5
 800e786:	460e      	mov	r6, r1
 800e788:	f7f1 fd2a 	bl	80001e0 <strcmp>
 800e78c:	b1c8      	cbz	r0, 800e7c2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800e78e:	4b11      	ldr	r3, [pc, #68]	; (800e7d4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	429d      	cmp	r5, r3
 800e794:	d112      	bne.n	800e7bc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e796:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e79a:	f8d8 4000 	ldr.w	r4, [r8]
 800e79e:	b16c      	cbz	r4, 800e7bc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e7a0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e7a4:	2700      	movs	r7, #0
 800e7a6:	3d04      	subs	r5, #4
 800e7a8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800e7ac:	4631      	mov	r1, r6
 800e7ae:	f7f1 fd17 	bl	80001e0 <strcmp>
 800e7b2:	00bb      	lsls	r3, r7, #2
 800e7b4:	b140      	cbz	r0, 800e7c8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800e7b6:	3701      	adds	r7, #1
 800e7b8:	42bc      	cmp	r4, r7
 800e7ba:	d1f5      	bne.n	800e7a8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800e7bc:	2000      	movs	r0, #0
 800e7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7c2:	4620      	mov	r0, r4
 800e7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7c8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e7cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d0:	58d3      	ldr	r3, [r2, r3]
 800e7d2:	4718      	bx	r3
 800e7d4:	200000ac 	.word	0x200000ac

0800e7d8 <std_msgs__msg__Int32__init>:
 800e7d8:	3800      	subs	r0, #0
 800e7da:	bf18      	it	ne
 800e7dc:	2001      	movne	r0, #1
 800e7de:	4770      	bx	lr

0800e7e0 <std_msgs__msg__Int32__fini>:
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop

0800e7e4 <ucdr_serialize_endian_array_char>:
 800e7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	461f      	mov	r7, r3
 800e7ec:	4605      	mov	r5, r0
 800e7ee:	4690      	mov	r8, r2
 800e7f0:	f7fb fa16 	bl	8009c20 <ucdr_check_buffer_available_for>
 800e7f4:	b9e0      	cbnz	r0, 800e830 <ucdr_serialize_endian_array_char+0x4c>
 800e7f6:	463e      	mov	r6, r7
 800e7f8:	e009      	b.n	800e80e <ucdr_serialize_endian_array_char+0x2a>
 800e7fa:	68a8      	ldr	r0, [r5, #8]
 800e7fc:	f002 fe8f 	bl	801151e <memcpy>
 800e800:	68ab      	ldr	r3, [r5, #8]
 800e802:	6928      	ldr	r0, [r5, #16]
 800e804:	4423      	add	r3, r4
 800e806:	4420      	add	r0, r4
 800e808:	1b36      	subs	r6, r6, r4
 800e80a:	60ab      	str	r3, [r5, #8]
 800e80c:	6128      	str	r0, [r5, #16]
 800e80e:	4631      	mov	r1, r6
 800e810:	2201      	movs	r2, #1
 800e812:	4628      	mov	r0, r5
 800e814:	f7fb fa8c 	bl	8009d30 <ucdr_check_final_buffer_behavior_array>
 800e818:	1bb9      	subs	r1, r7, r6
 800e81a:	4441      	add	r1, r8
 800e81c:	4604      	mov	r4, r0
 800e81e:	4602      	mov	r2, r0
 800e820:	2800      	cmp	r0, #0
 800e822:	d1ea      	bne.n	800e7fa <ucdr_serialize_endian_array_char+0x16>
 800e824:	2301      	movs	r3, #1
 800e826:	7da8      	ldrb	r0, [r5, #22]
 800e828:	756b      	strb	r3, [r5, #21]
 800e82a:	4058      	eors	r0, r3
 800e82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e830:	463a      	mov	r2, r7
 800e832:	68a8      	ldr	r0, [r5, #8]
 800e834:	4641      	mov	r1, r8
 800e836:	f002 fe72 	bl	801151e <memcpy>
 800e83a:	68aa      	ldr	r2, [r5, #8]
 800e83c:	692b      	ldr	r3, [r5, #16]
 800e83e:	443a      	add	r2, r7
 800e840:	443b      	add	r3, r7
 800e842:	60aa      	str	r2, [r5, #8]
 800e844:	612b      	str	r3, [r5, #16]
 800e846:	e7ed      	b.n	800e824 <ucdr_serialize_endian_array_char+0x40>

0800e848 <ucdr_deserialize_endian_array_char>:
 800e848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e84c:	4619      	mov	r1, r3
 800e84e:	461f      	mov	r7, r3
 800e850:	4605      	mov	r5, r0
 800e852:	4690      	mov	r8, r2
 800e854:	f7fb f9e4 	bl	8009c20 <ucdr_check_buffer_available_for>
 800e858:	b9e0      	cbnz	r0, 800e894 <ucdr_deserialize_endian_array_char+0x4c>
 800e85a:	463e      	mov	r6, r7
 800e85c:	e009      	b.n	800e872 <ucdr_deserialize_endian_array_char+0x2a>
 800e85e:	68a9      	ldr	r1, [r5, #8]
 800e860:	f002 fe5d 	bl	801151e <memcpy>
 800e864:	68ab      	ldr	r3, [r5, #8]
 800e866:	6928      	ldr	r0, [r5, #16]
 800e868:	4423      	add	r3, r4
 800e86a:	4420      	add	r0, r4
 800e86c:	1b36      	subs	r6, r6, r4
 800e86e:	60ab      	str	r3, [r5, #8]
 800e870:	6128      	str	r0, [r5, #16]
 800e872:	2201      	movs	r2, #1
 800e874:	4631      	mov	r1, r6
 800e876:	4628      	mov	r0, r5
 800e878:	f7fb fa5a 	bl	8009d30 <ucdr_check_final_buffer_behavior_array>
 800e87c:	4604      	mov	r4, r0
 800e87e:	1bb8      	subs	r0, r7, r6
 800e880:	4440      	add	r0, r8
 800e882:	4622      	mov	r2, r4
 800e884:	2c00      	cmp	r4, #0
 800e886:	d1ea      	bne.n	800e85e <ucdr_deserialize_endian_array_char+0x16>
 800e888:	2301      	movs	r3, #1
 800e88a:	7da8      	ldrb	r0, [r5, #22]
 800e88c:	756b      	strb	r3, [r5, #21]
 800e88e:	4058      	eors	r0, r3
 800e890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e894:	463a      	mov	r2, r7
 800e896:	68a9      	ldr	r1, [r5, #8]
 800e898:	4640      	mov	r0, r8
 800e89a:	f002 fe40 	bl	801151e <memcpy>
 800e89e:	68aa      	ldr	r2, [r5, #8]
 800e8a0:	692b      	ldr	r3, [r5, #16]
 800e8a2:	443a      	add	r2, r7
 800e8a4:	443b      	add	r3, r7
 800e8a6:	60aa      	str	r2, [r5, #8]
 800e8a8:	612b      	str	r3, [r5, #16]
 800e8aa:	e7ed      	b.n	800e888 <ucdr_deserialize_endian_array_char+0x40>

0800e8ac <ucdr_serialize_array_uint8_t>:
 800e8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b0:	4688      	mov	r8, r1
 800e8b2:	4611      	mov	r1, r2
 800e8b4:	4617      	mov	r7, r2
 800e8b6:	4605      	mov	r5, r0
 800e8b8:	f7fb f9b2 	bl	8009c20 <ucdr_check_buffer_available_for>
 800e8bc:	b9e0      	cbnz	r0, 800e8f8 <ucdr_serialize_array_uint8_t+0x4c>
 800e8be:	463e      	mov	r6, r7
 800e8c0:	e009      	b.n	800e8d6 <ucdr_serialize_array_uint8_t+0x2a>
 800e8c2:	68a8      	ldr	r0, [r5, #8]
 800e8c4:	f002 fe2b 	bl	801151e <memcpy>
 800e8c8:	68aa      	ldr	r2, [r5, #8]
 800e8ca:	692b      	ldr	r3, [r5, #16]
 800e8cc:	4422      	add	r2, r4
 800e8ce:	4423      	add	r3, r4
 800e8d0:	1b36      	subs	r6, r6, r4
 800e8d2:	60aa      	str	r2, [r5, #8]
 800e8d4:	612b      	str	r3, [r5, #16]
 800e8d6:	4631      	mov	r1, r6
 800e8d8:	2201      	movs	r2, #1
 800e8da:	4628      	mov	r0, r5
 800e8dc:	f7fb fa28 	bl	8009d30 <ucdr_check_final_buffer_behavior_array>
 800e8e0:	1bb9      	subs	r1, r7, r6
 800e8e2:	4441      	add	r1, r8
 800e8e4:	4604      	mov	r4, r0
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	2800      	cmp	r0, #0
 800e8ea:	d1ea      	bne.n	800e8c2 <ucdr_serialize_array_uint8_t+0x16>
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	7da8      	ldrb	r0, [r5, #22]
 800e8f0:	756b      	strb	r3, [r5, #21]
 800e8f2:	4058      	eors	r0, r3
 800e8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8f8:	463a      	mov	r2, r7
 800e8fa:	68a8      	ldr	r0, [r5, #8]
 800e8fc:	4641      	mov	r1, r8
 800e8fe:	f002 fe0e 	bl	801151e <memcpy>
 800e902:	68aa      	ldr	r2, [r5, #8]
 800e904:	692b      	ldr	r3, [r5, #16]
 800e906:	443a      	add	r2, r7
 800e908:	443b      	add	r3, r7
 800e90a:	60aa      	str	r2, [r5, #8]
 800e90c:	612b      	str	r3, [r5, #16]
 800e90e:	e7ed      	b.n	800e8ec <ucdr_serialize_array_uint8_t+0x40>

0800e910 <ucdr_serialize_endian_array_uint8_t>:
 800e910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e914:	4619      	mov	r1, r3
 800e916:	461f      	mov	r7, r3
 800e918:	4605      	mov	r5, r0
 800e91a:	4690      	mov	r8, r2
 800e91c:	f7fb f980 	bl	8009c20 <ucdr_check_buffer_available_for>
 800e920:	b9e0      	cbnz	r0, 800e95c <ucdr_serialize_endian_array_uint8_t+0x4c>
 800e922:	463e      	mov	r6, r7
 800e924:	e009      	b.n	800e93a <ucdr_serialize_endian_array_uint8_t+0x2a>
 800e926:	68a8      	ldr	r0, [r5, #8]
 800e928:	f002 fdf9 	bl	801151e <memcpy>
 800e92c:	68ab      	ldr	r3, [r5, #8]
 800e92e:	6928      	ldr	r0, [r5, #16]
 800e930:	4423      	add	r3, r4
 800e932:	4420      	add	r0, r4
 800e934:	1b36      	subs	r6, r6, r4
 800e936:	60ab      	str	r3, [r5, #8]
 800e938:	6128      	str	r0, [r5, #16]
 800e93a:	4631      	mov	r1, r6
 800e93c:	2201      	movs	r2, #1
 800e93e:	4628      	mov	r0, r5
 800e940:	f7fb f9f6 	bl	8009d30 <ucdr_check_final_buffer_behavior_array>
 800e944:	1bb9      	subs	r1, r7, r6
 800e946:	4441      	add	r1, r8
 800e948:	4604      	mov	r4, r0
 800e94a:	4602      	mov	r2, r0
 800e94c:	2800      	cmp	r0, #0
 800e94e:	d1ea      	bne.n	800e926 <ucdr_serialize_endian_array_uint8_t+0x16>
 800e950:	2301      	movs	r3, #1
 800e952:	7da8      	ldrb	r0, [r5, #22]
 800e954:	756b      	strb	r3, [r5, #21]
 800e956:	4058      	eors	r0, r3
 800e958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e95c:	463a      	mov	r2, r7
 800e95e:	68a8      	ldr	r0, [r5, #8]
 800e960:	4641      	mov	r1, r8
 800e962:	f002 fddc 	bl	801151e <memcpy>
 800e966:	68aa      	ldr	r2, [r5, #8]
 800e968:	692b      	ldr	r3, [r5, #16]
 800e96a:	443a      	add	r2, r7
 800e96c:	443b      	add	r3, r7
 800e96e:	60aa      	str	r2, [r5, #8]
 800e970:	612b      	str	r3, [r5, #16]
 800e972:	e7ed      	b.n	800e950 <ucdr_serialize_endian_array_uint8_t+0x40>

0800e974 <ucdr_deserialize_array_uint8_t>:
 800e974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e978:	4688      	mov	r8, r1
 800e97a:	4611      	mov	r1, r2
 800e97c:	4617      	mov	r7, r2
 800e97e:	4605      	mov	r5, r0
 800e980:	f7fb f94e 	bl	8009c20 <ucdr_check_buffer_available_for>
 800e984:	b9e0      	cbnz	r0, 800e9c0 <ucdr_deserialize_array_uint8_t+0x4c>
 800e986:	463e      	mov	r6, r7
 800e988:	e009      	b.n	800e99e <ucdr_deserialize_array_uint8_t+0x2a>
 800e98a:	68a9      	ldr	r1, [r5, #8]
 800e98c:	f002 fdc7 	bl	801151e <memcpy>
 800e990:	68aa      	ldr	r2, [r5, #8]
 800e992:	692b      	ldr	r3, [r5, #16]
 800e994:	4422      	add	r2, r4
 800e996:	4423      	add	r3, r4
 800e998:	1b36      	subs	r6, r6, r4
 800e99a:	60aa      	str	r2, [r5, #8]
 800e99c:	612b      	str	r3, [r5, #16]
 800e99e:	2201      	movs	r2, #1
 800e9a0:	4631      	mov	r1, r6
 800e9a2:	4628      	mov	r0, r5
 800e9a4:	f7fb f9c4 	bl	8009d30 <ucdr_check_final_buffer_behavior_array>
 800e9a8:	4604      	mov	r4, r0
 800e9aa:	1bb8      	subs	r0, r7, r6
 800e9ac:	4440      	add	r0, r8
 800e9ae:	4622      	mov	r2, r4
 800e9b0:	2c00      	cmp	r4, #0
 800e9b2:	d1ea      	bne.n	800e98a <ucdr_deserialize_array_uint8_t+0x16>
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	7da8      	ldrb	r0, [r5, #22]
 800e9b8:	756b      	strb	r3, [r5, #21]
 800e9ba:	4058      	eors	r0, r3
 800e9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9c0:	463a      	mov	r2, r7
 800e9c2:	68a9      	ldr	r1, [r5, #8]
 800e9c4:	4640      	mov	r0, r8
 800e9c6:	f002 fdaa 	bl	801151e <memcpy>
 800e9ca:	68aa      	ldr	r2, [r5, #8]
 800e9cc:	692b      	ldr	r3, [r5, #16]
 800e9ce:	443a      	add	r2, r7
 800e9d0:	443b      	add	r3, r7
 800e9d2:	60aa      	str	r2, [r5, #8]
 800e9d4:	612b      	str	r3, [r5, #16]
 800e9d6:	e7ed      	b.n	800e9b4 <ucdr_deserialize_array_uint8_t+0x40>

0800e9d8 <ucdr_deserialize_endian_array_uint8_t>:
 800e9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9dc:	4619      	mov	r1, r3
 800e9de:	461f      	mov	r7, r3
 800e9e0:	4605      	mov	r5, r0
 800e9e2:	4690      	mov	r8, r2
 800e9e4:	f7fb f91c 	bl	8009c20 <ucdr_check_buffer_available_for>
 800e9e8:	b9e0      	cbnz	r0, 800ea24 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800e9ea:	463e      	mov	r6, r7
 800e9ec:	e009      	b.n	800ea02 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800e9ee:	68a9      	ldr	r1, [r5, #8]
 800e9f0:	f002 fd95 	bl	801151e <memcpy>
 800e9f4:	68ab      	ldr	r3, [r5, #8]
 800e9f6:	6928      	ldr	r0, [r5, #16]
 800e9f8:	4423      	add	r3, r4
 800e9fa:	4420      	add	r0, r4
 800e9fc:	1b36      	subs	r6, r6, r4
 800e9fe:	60ab      	str	r3, [r5, #8]
 800ea00:	6128      	str	r0, [r5, #16]
 800ea02:	2201      	movs	r2, #1
 800ea04:	4631      	mov	r1, r6
 800ea06:	4628      	mov	r0, r5
 800ea08:	f7fb f992 	bl	8009d30 <ucdr_check_final_buffer_behavior_array>
 800ea0c:	4604      	mov	r4, r0
 800ea0e:	1bb8      	subs	r0, r7, r6
 800ea10:	4440      	add	r0, r8
 800ea12:	4622      	mov	r2, r4
 800ea14:	2c00      	cmp	r4, #0
 800ea16:	d1ea      	bne.n	800e9ee <ucdr_deserialize_endian_array_uint8_t+0x16>
 800ea18:	2301      	movs	r3, #1
 800ea1a:	7da8      	ldrb	r0, [r5, #22]
 800ea1c:	756b      	strb	r3, [r5, #21]
 800ea1e:	4058      	eors	r0, r3
 800ea20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea24:	463a      	mov	r2, r7
 800ea26:	68a9      	ldr	r1, [r5, #8]
 800ea28:	4640      	mov	r0, r8
 800ea2a:	f002 fd78 	bl	801151e <memcpy>
 800ea2e:	68aa      	ldr	r2, [r5, #8]
 800ea30:	692b      	ldr	r3, [r5, #16]
 800ea32:	443a      	add	r2, r7
 800ea34:	443b      	add	r3, r7
 800ea36:	60aa      	str	r2, [r5, #8]
 800ea38:	612b      	str	r3, [r5, #16]
 800ea3a:	e7ed      	b.n	800ea18 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800ea3c <ucdr_serialize_sequence_char>:
 800ea3c:	b570      	push	{r4, r5, r6, lr}
 800ea3e:	4615      	mov	r5, r2
 800ea40:	460e      	mov	r6, r1
 800ea42:	7d01      	ldrb	r1, [r0, #20]
 800ea44:	4604      	mov	r4, r0
 800ea46:	f7fa fc41 	bl	80092cc <ucdr_serialize_endian_uint32_t>
 800ea4a:	b90d      	cbnz	r5, 800ea50 <ucdr_serialize_sequence_char+0x14>
 800ea4c:	2001      	movs	r0, #1
 800ea4e:	bd70      	pop	{r4, r5, r6, pc}
 800ea50:	7d21      	ldrb	r1, [r4, #20]
 800ea52:	462b      	mov	r3, r5
 800ea54:	4632      	mov	r2, r6
 800ea56:	4620      	mov	r0, r4
 800ea58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea5c:	f7ff bec2 	b.w	800e7e4 <ucdr_serialize_endian_array_char>

0800ea60 <ucdr_deserialize_sequence_char>:
 800ea60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea64:	461d      	mov	r5, r3
 800ea66:	4616      	mov	r6, r2
 800ea68:	460f      	mov	r7, r1
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	7d01      	ldrb	r1, [r0, #20]
 800ea6e:	4604      	mov	r4, r0
 800ea70:	f7fa fd54 	bl	800951c <ucdr_deserialize_endian_uint32_t>
 800ea74:	682b      	ldr	r3, [r5, #0]
 800ea76:	429e      	cmp	r6, r3
 800ea78:	bf3c      	itt	cc
 800ea7a:	2201      	movcc	r2, #1
 800ea7c:	75a2      	strbcc	r2, [r4, #22]
 800ea7e:	b913      	cbnz	r3, 800ea86 <ucdr_deserialize_sequence_char+0x26>
 800ea80:	2001      	movs	r0, #1
 800ea82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea86:	7d21      	ldrb	r1, [r4, #20]
 800ea88:	463a      	mov	r2, r7
 800ea8a:	4620      	mov	r0, r4
 800ea8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea90:	f7ff beda 	b.w	800e848 <ucdr_deserialize_endian_array_char>

0800ea94 <ucdr_serialize_sequence_uint8_t>:
 800ea94:	b570      	push	{r4, r5, r6, lr}
 800ea96:	4615      	mov	r5, r2
 800ea98:	460e      	mov	r6, r1
 800ea9a:	7d01      	ldrb	r1, [r0, #20]
 800ea9c:	4604      	mov	r4, r0
 800ea9e:	f7fa fc15 	bl	80092cc <ucdr_serialize_endian_uint32_t>
 800eaa2:	b90d      	cbnz	r5, 800eaa8 <ucdr_serialize_sequence_uint8_t+0x14>
 800eaa4:	2001      	movs	r0, #1
 800eaa6:	bd70      	pop	{r4, r5, r6, pc}
 800eaa8:	7d21      	ldrb	r1, [r4, #20]
 800eaaa:	462b      	mov	r3, r5
 800eaac:	4632      	mov	r2, r6
 800eaae:	4620      	mov	r0, r4
 800eab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eab4:	f7ff bf2c 	b.w	800e910 <ucdr_serialize_endian_array_uint8_t>

0800eab8 <ucdr_deserialize_sequence_uint8_t>:
 800eab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eabc:	461d      	mov	r5, r3
 800eabe:	4616      	mov	r6, r2
 800eac0:	460f      	mov	r7, r1
 800eac2:	461a      	mov	r2, r3
 800eac4:	7d01      	ldrb	r1, [r0, #20]
 800eac6:	4604      	mov	r4, r0
 800eac8:	f7fa fd28 	bl	800951c <ucdr_deserialize_endian_uint32_t>
 800eacc:	682b      	ldr	r3, [r5, #0]
 800eace:	429e      	cmp	r6, r3
 800ead0:	bf3c      	itt	cc
 800ead2:	2201      	movcc	r2, #1
 800ead4:	75a2      	strbcc	r2, [r4, #22]
 800ead6:	b913      	cbnz	r3, 800eade <ucdr_deserialize_sequence_uint8_t+0x26>
 800ead8:	2001      	movs	r0, #1
 800eada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eade:	7d21      	ldrb	r1, [r4, #20]
 800eae0:	463a      	mov	r2, r7
 800eae2:	4620      	mov	r0, r4
 800eae4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eae8:	f7ff bf76 	b.w	800e9d8 <ucdr_deserialize_endian_array_uint8_t>

0800eaec <ucdr_serialize_string>:
 800eaec:	b510      	push	{r4, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	4604      	mov	r4, r0
 800eaf2:	4608      	mov	r0, r1
 800eaf4:	9101      	str	r1, [sp, #4]
 800eaf6:	f7f1 fb7d 	bl	80001f4 <strlen>
 800eafa:	9901      	ldr	r1, [sp, #4]
 800eafc:	1c42      	adds	r2, r0, #1
 800eafe:	4620      	mov	r0, r4
 800eb00:	b002      	add	sp, #8
 800eb02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb06:	f7ff bf99 	b.w	800ea3c <ucdr_serialize_sequence_char>
 800eb0a:	bf00      	nop

0800eb0c <ucdr_deserialize_string>:
 800eb0c:	b500      	push	{lr}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	ab01      	add	r3, sp, #4
 800eb12:	f7ff ffa5 	bl	800ea60 <ucdr_deserialize_sequence_char>
 800eb16:	b003      	add	sp, #12
 800eb18:	f85d fb04 	ldr.w	pc, [sp], #4

0800eb1c <get_custom_error>:
 800eb1c:	4b01      	ldr	r3, [pc, #4]	; (800eb24 <get_custom_error+0x8>)
 800eb1e:	7818      	ldrb	r0, [r3, #0]
 800eb20:	4770      	bx	lr
 800eb22:	bf00      	nop
 800eb24:	20010ba8 	.word	0x20010ba8

0800eb28 <recv_custom_msg>:
 800eb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb2c:	4693      	mov	fp, r2
 800eb2e:	b089      	sub	sp, #36	; 0x24
 800eb30:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 800eb34:	9305      	str	r3, [sp, #20]
 800eb36:	468a      	mov	sl, r1
 800eb38:	2100      	movs	r1, #0
 800eb3a:	4604      	mov	r4, r0
 800eb3c:	f88d 101e 	strb.w	r1, [sp, #30]
 800eb40:	b322      	cbz	r2, 800eb8c <recv_custom_msg+0x64>
 800eb42:	f200 2902 	addw	r9, r0, #514	; 0x202
 800eb46:	f10d 081f 	add.w	r8, sp, #31
 800eb4a:	af05      	add	r7, sp, #20
 800eb4c:	f10d 061e 	add.w	r6, sp, #30
 800eb50:	f44f 7500 	mov.w	r5, #512	; 0x200
 800eb54:	e002      	b.n	800eb5c <recv_custom_msg+0x34>
 800eb56:	9b05      	ldr	r3, [sp, #20]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	dd0f      	ble.n	800eb7c <recv_custom_msg+0x54>
 800eb5c:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 800eb60:	4623      	mov	r3, r4
 800eb62:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800eb66:	e9cd 5600 	strd	r5, r6, [sp]
 800eb6a:	4622      	mov	r2, r4
 800eb6c:	4648      	mov	r0, r9
 800eb6e:	f001 f8f3 	bl	800fd58 <uxr_read_framed_msg>
 800eb72:	2800      	cmp	r0, #0
 800eb74:	d0ef      	beq.n	800eb56 <recv_custom_msg+0x2e>
 800eb76:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800eb7a:	b1b3      	cbz	r3, 800ebaa <recv_custom_msg+0x82>
 800eb7c:	4b0f      	ldr	r3, [pc, #60]	; (800ebbc <recv_custom_msg+0x94>)
 800eb7e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800eb82:	701a      	strb	r2, [r3, #0]
 800eb84:	2000      	movs	r0, #0
 800eb86:	b009      	add	sp, #36	; 0x24
 800eb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb8c:	f10d 021f 	add.w	r2, sp, #31
 800eb90:	9200      	str	r2, [sp, #0]
 800eb92:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 800eb96:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb9a:	4601      	mov	r1, r0
 800eb9c:	47a8      	blx	r5
 800eb9e:	2800      	cmp	r0, #0
 800eba0:	d0ec      	beq.n	800eb7c <recv_custom_msg+0x54>
 800eba2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d1e8      	bne.n	800eb7c <recv_custom_msg+0x54>
 800ebaa:	f8cb 0000 	str.w	r0, [fp]
 800ebae:	2001      	movs	r0, #1
 800ebb0:	f8ca 4000 	str.w	r4, [sl]
 800ebb4:	b009      	add	sp, #36	; 0x24
 800ebb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebba:	bf00      	nop
 800ebbc:	20010ba8 	.word	0x20010ba8

0800ebc0 <send_custom_msg>:
 800ebc0:	b530      	push	{r4, r5, lr}
 800ebc2:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 800ebc6:	b087      	sub	sp, #28
 800ebc8:	4615      	mov	r5, r2
 800ebca:	b974      	cbnz	r4, 800ebea <send_custom_msg+0x2a>
 800ebcc:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 800ebd0:	f10d 0317 	add.w	r3, sp, #23
 800ebd4:	47a0      	blx	r4
 800ebd6:	b108      	cbz	r0, 800ebdc <send_custom_msg+0x1c>
 800ebd8:	42a8      	cmp	r0, r5
 800ebda:	d015      	beq.n	800ec08 <send_custom_msg+0x48>
 800ebdc:	4b0c      	ldr	r3, [pc, #48]	; (800ec10 <send_custom_msg+0x50>)
 800ebde:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800ebe2:	701a      	strb	r2, [r3, #0]
 800ebe4:	2000      	movs	r0, #0
 800ebe6:	b007      	add	sp, #28
 800ebe8:	bd30      	pop	{r4, r5, pc}
 800ebea:	460b      	mov	r3, r1
 800ebec:	2200      	movs	r2, #0
 800ebee:	f10d 0117 	add.w	r1, sp, #23
 800ebf2:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800ebf6:	4602      	mov	r2, r0
 800ebf8:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 800ebfc:	9500      	str	r5, [sp, #0]
 800ebfe:	f200 2002 	addw	r0, r0, #514	; 0x202
 800ec02:	f000 feb1 	bl	800f968 <uxr_write_framed_msg>
 800ec06:	e7e6      	b.n	800ebd6 <send_custom_msg+0x16>
 800ec08:	2001      	movs	r0, #1
 800ec0a:	b007      	add	sp, #28
 800ec0c:	bd30      	pop	{r4, r5, pc}
 800ec0e:	bf00      	nop
 800ec10:	20010ba8 	.word	0x20010ba8

0800ec14 <uxr_set_custom_transport_callbacks>:
 800ec14:	b410      	push	{r4}
 800ec16:	9c01      	ldr	r4, [sp, #4]
 800ec18:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 800ec1c:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 800ec20:	9b02      	ldr	r3, [sp, #8]
 800ec22:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 800ec26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec2a:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 800ec2e:	4770      	bx	lr

0800ec30 <uxr_init_custom_transport>:
 800ec30:	b538      	push	{r3, r4, r5, lr}
 800ec32:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 800ec36:	b303      	cbz	r3, 800ec7a <uxr_init_custom_transport+0x4a>
 800ec38:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800ec3c:	4604      	mov	r4, r0
 800ec3e:	b1e2      	cbz	r2, 800ec7a <uxr_init_custom_transport+0x4a>
 800ec40:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800ec44:	b1ca      	cbz	r2, 800ec7a <uxr_init_custom_transport+0x4a>
 800ec46:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 800ec4a:	b1b2      	cbz	r2, 800ec7a <uxr_init_custom_transport+0x4a>
 800ec4c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 800ec50:	4798      	blx	r3
 800ec52:	4605      	mov	r5, r0
 800ec54:	b188      	cbz	r0, 800ec7a <uxr_init_custom_transport+0x4a>
 800ec56:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800ec5a:	b98b      	cbnz	r3, 800ec80 <uxr_init_custom_transport+0x50>
 800ec5c:	490b      	ldr	r1, [pc, #44]	; (800ec8c <uxr_init_custom_transport+0x5c>)
 800ec5e:	4b0c      	ldr	r3, [pc, #48]	; (800ec90 <uxr_init_custom_transport+0x60>)
 800ec60:	4a0c      	ldr	r2, [pc, #48]	; (800ec94 <uxr_init_custom_transport+0x64>)
 800ec62:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 800ec66:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec6a:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 800ec6e:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 800ec72:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 800ec76:	4628      	mov	r0, r5
 800ec78:	bd38      	pop	{r3, r4, r5, pc}
 800ec7a:	2500      	movs	r5, #0
 800ec7c:	4628      	mov	r0, r5
 800ec7e:	bd38      	pop	{r3, r4, r5, pc}
 800ec80:	2100      	movs	r1, #0
 800ec82:	f204 2002 	addw	r0, r4, #514	; 0x202
 800ec86:	f000 fe69 	bl	800f95c <uxr_init_framing_io>
 800ec8a:	e7e7      	b.n	800ec5c <uxr_init_custom_transport+0x2c>
 800ec8c:	0800ebc1 	.word	0x0800ebc1
 800ec90:	0800eb29 	.word	0x0800eb29
 800ec94:	0800eb1d 	.word	0x0800eb1d

0800ec98 <uxr_close_custom_transport>:
 800ec98:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800ec9c:	4718      	bx	r3
 800ec9e:	bf00      	nop

0800eca0 <uxr_init_input_best_effort_stream>:
 800eca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eca4:	8003      	strh	r3, [r0, #0]
 800eca6:	4770      	bx	lr

0800eca8 <uxr_reset_input_best_effort_stream>:
 800eca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ecac:	8003      	strh	r3, [r0, #0]
 800ecae:	4770      	bx	lr

0800ecb0 <uxr_receive_best_effort_message>:
 800ecb0:	b538      	push	{r3, r4, r5, lr}
 800ecb2:	4604      	mov	r4, r0
 800ecb4:	8800      	ldrh	r0, [r0, #0]
 800ecb6:	460d      	mov	r5, r1
 800ecb8:	f000 fe38 	bl	800f92c <uxr_seq_num_cmp>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800ecc4:	bfb8      	it	lt
 800ecc6:	8025      	strhlt	r5, [r4, #0]
 800ecc8:	bd38      	pop	{r3, r4, r5, pc}
 800ecca:	bf00      	nop

0800eccc <on_full_input_buffer>:
 800eccc:	b570      	push	{r4, r5, r6, lr}
 800ecce:	4605      	mov	r5, r0
 800ecd0:	460c      	mov	r4, r1
 800ecd2:	682b      	ldr	r3, [r5, #0]
 800ecd4:	6809      	ldr	r1, [r1, #0]
 800ecd6:	8920      	ldrh	r0, [r4, #8]
 800ecd8:	6862      	ldr	r2, [r4, #4]
 800ecda:	fbb2 f2f0 	udiv	r2, r2, r0
 800ecde:	eba3 0c01 	sub.w	ip, r3, r1
 800ece2:	fbbc fcf2 	udiv	ip, ip, r2
 800ece6:	f10c 0c01 	add.w	ip, ip, #1
 800ecea:	fa1f f38c 	uxth.w	r3, ip
 800ecee:	fbb3 f6f0 	udiv	r6, r3, r0
 800ecf2:	fb00 3316 	mls	r3, r0, r6, r3
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	fb02 f303 	mul.w	r3, r2, r3
 800ecfc:	1d18      	adds	r0, r3, #4
 800ecfe:	4408      	add	r0, r1
 800ed00:	7d26      	ldrb	r6, [r4, #20]
 800ed02:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ed06:	b116      	cbz	r6, 800ed0e <on_full_input_buffer+0x42>
 800ed08:	2600      	movs	r6, #0
 800ed0a:	f840 6c04 	str.w	r6, [r0, #-4]
 800ed0e:	2a03      	cmp	r2, #3
 800ed10:	d801      	bhi.n	800ed16 <on_full_input_buffer+0x4a>
 800ed12:	2001      	movs	r0, #1
 800ed14:	bd70      	pop	{r4, r5, r6, pc}
 800ed16:	3308      	adds	r3, #8
 800ed18:	4419      	add	r1, r3
 800ed1a:	4628      	mov	r0, r5
 800ed1c:	692b      	ldr	r3, [r5, #16]
 800ed1e:	3a04      	subs	r2, #4
 800ed20:	f7fa ffca 	bl	8009cb8 <ucdr_init_buffer_origin>
 800ed24:	4628      	mov	r0, r5
 800ed26:	4903      	ldr	r1, [pc, #12]	; (800ed34 <on_full_input_buffer+0x68>)
 800ed28:	4622      	mov	r2, r4
 800ed2a:	f7fa ffa1 	bl	8009c70 <ucdr_set_on_full_buffer_callback>
 800ed2e:	2000      	movs	r0, #0
 800ed30:	bd70      	pop	{r4, r5, r6, pc}
 800ed32:	bf00      	nop
 800ed34:	0800eccd 	.word	0x0800eccd

0800ed38 <uxr_init_input_reliable_stream>:
 800ed38:	b500      	push	{lr}
 800ed3a:	e9c0 1200 	strd	r1, r2, [r0]
 800ed3e:	f04f 0e00 	mov.w	lr, #0
 800ed42:	9a01      	ldr	r2, [sp, #4]
 800ed44:	8103      	strh	r3, [r0, #8]
 800ed46:	6102      	str	r2, [r0, #16]
 800ed48:	f880 e014 	strb.w	lr, [r0, #20]
 800ed4c:	b1d3      	cbz	r3, 800ed84 <uxr_init_input_reliable_stream+0x4c>
 800ed4e:	f8c1 e000 	str.w	lr, [r1]
 800ed52:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800ed56:	f1bc 0f01 	cmp.w	ip, #1
 800ed5a:	d913      	bls.n	800ed84 <uxr_init_input_reliable_stream+0x4c>
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	fbb3 f1fc 	udiv	r1, r3, ip
 800ed62:	fb0c 3111 	mls	r1, ip, r1, r3
 800ed66:	b289      	uxth	r1, r1
 800ed68:	6842      	ldr	r2, [r0, #4]
 800ed6a:	fbb2 f2fc 	udiv	r2, r2, ip
 800ed6e:	fb01 f202 	mul.w	r2, r1, r2
 800ed72:	6801      	ldr	r1, [r0, #0]
 800ed74:	f841 e002 	str.w	lr, [r1, r2]
 800ed78:	3301      	adds	r3, #1
 800ed7a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	459c      	cmp	ip, r3
 800ed82:	d8ec      	bhi.n	800ed5e <uxr_init_input_reliable_stream+0x26>
 800ed84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed88:	60c3      	str	r3, [r0, #12]
 800ed8a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed8e:	bf00      	nop

0800ed90 <uxr_reset_input_reliable_stream>:
 800ed90:	8901      	ldrh	r1, [r0, #8]
 800ed92:	b1e9      	cbz	r1, 800edd0 <uxr_reset_input_reliable_stream+0x40>
 800ed94:	f04f 0c00 	mov.w	ip, #0
 800ed98:	b500      	push	{lr}
 800ed9a:	4663      	mov	r3, ip
 800ed9c:	46e6      	mov	lr, ip
 800ed9e:	fbb3 f2f1 	udiv	r2, r3, r1
 800eda2:	fb01 3312 	mls	r3, r1, r2, r3
 800eda6:	b29b      	uxth	r3, r3
 800eda8:	6842      	ldr	r2, [r0, #4]
 800edaa:	fbb2 f2f1 	udiv	r2, r2, r1
 800edae:	fb02 f303 	mul.w	r3, r2, r3
 800edb2:	6802      	ldr	r2, [r0, #0]
 800edb4:	f842 e003 	str.w	lr, [r2, r3]
 800edb8:	f10c 0c01 	add.w	ip, ip, #1
 800edbc:	8901      	ldrh	r1, [r0, #8]
 800edbe:	fa1f f38c 	uxth.w	r3, ip
 800edc2:	4299      	cmp	r1, r3
 800edc4:	d8eb      	bhi.n	800ed9e <uxr_reset_input_reliable_stream+0xe>
 800edc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800edca:	60c3      	str	r3, [r0, #12]
 800edcc:	f85d fb04 	ldr.w	pc, [sp], #4
 800edd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800edd4:	60c3      	str	r3, [r0, #12]
 800edd6:	4770      	bx	lr

0800edd8 <uxr_receive_reliable_message>:
 800edd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eddc:	4604      	mov	r4, r0
 800edde:	460d      	mov	r5, r1
 800ede0:	8901      	ldrh	r1, [r0, #8]
 800ede2:	8980      	ldrh	r0, [r0, #12]
 800ede4:	4690      	mov	r8, r2
 800ede6:	461f      	mov	r7, r3
 800ede8:	f000 fd98 	bl	800f91c <uxr_seq_num_add>
 800edec:	4629      	mov	r1, r5
 800edee:	4606      	mov	r6, r0
 800edf0:	89a0      	ldrh	r0, [r4, #12]
 800edf2:	f000 fd9b 	bl	800f92c <uxr_seq_num_cmp>
 800edf6:	2800      	cmp	r0, #0
 800edf8:	db0a      	blt.n	800ee10 <uxr_receive_reliable_message+0x38>
 800edfa:	2600      	movs	r6, #0
 800edfc:	89e0      	ldrh	r0, [r4, #14]
 800edfe:	4629      	mov	r1, r5
 800ee00:	f000 fd94 	bl	800f92c <uxr_seq_num_cmp>
 800ee04:	2800      	cmp	r0, #0
 800ee06:	da00      	bge.n	800ee0a <uxr_receive_reliable_message+0x32>
 800ee08:	81e5      	strh	r5, [r4, #14]
 800ee0a:	4630      	mov	r0, r6
 800ee0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee10:	4630      	mov	r0, r6
 800ee12:	4629      	mov	r1, r5
 800ee14:	f000 fd8a 	bl	800f92c <uxr_seq_num_cmp>
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	dbee      	blt.n	800edfa <uxr_receive_reliable_message+0x22>
 800ee1c:	6923      	ldr	r3, [r4, #16]
 800ee1e:	4640      	mov	r0, r8
 800ee20:	4798      	blx	r3
 800ee22:	2101      	movs	r1, #1
 800ee24:	4681      	mov	r9, r0
 800ee26:	89a0      	ldrh	r0, [r4, #12]
 800ee28:	f000 fd78 	bl	800f91c <uxr_seq_num_add>
 800ee2c:	f1b9 0f00 	cmp.w	r9, #0
 800ee30:	d101      	bne.n	800ee36 <uxr_receive_reliable_message+0x5e>
 800ee32:	4285      	cmp	r5, r0
 800ee34:	d047      	beq.n	800eec6 <uxr_receive_reliable_message+0xee>
 800ee36:	8922      	ldrh	r2, [r4, #8]
 800ee38:	fbb5 f0f2 	udiv	r0, r5, r2
 800ee3c:	fb02 5010 	mls	r0, r2, r0, r5
 800ee40:	b280      	uxth	r0, r0
 800ee42:	6863      	ldr	r3, [r4, #4]
 800ee44:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee48:	fb00 f303 	mul.w	r3, r0, r3
 800ee4c:	6820      	ldr	r0, [r4, #0]
 800ee4e:	3304      	adds	r3, #4
 800ee50:	4418      	add	r0, r3
 800ee52:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d1cf      	bne.n	800edfa <uxr_receive_reliable_message+0x22>
 800ee5a:	4641      	mov	r1, r8
 800ee5c:	463a      	mov	r2, r7
 800ee5e:	f002 fb5e 	bl	801151e <memcpy>
 800ee62:	8921      	ldrh	r1, [r4, #8]
 800ee64:	fbb5 f2f1 	udiv	r2, r5, r1
 800ee68:	fb01 5212 	mls	r2, r1, r2, r5
 800ee6c:	b292      	uxth	r2, r2
 800ee6e:	6863      	ldr	r3, [r4, #4]
 800ee70:	fbb3 f3f1 	udiv	r3, r3, r1
 800ee74:	fb02 f303 	mul.w	r3, r2, r3
 800ee78:	6822      	ldr	r2, [r4, #0]
 800ee7a:	50d7      	str	r7, [r2, r3]
 800ee7c:	9a08      	ldr	r2, [sp, #32]
 800ee7e:	2301      	movs	r3, #1
 800ee80:	7013      	strb	r3, [r2, #0]
 800ee82:	f1b9 0f00 	cmp.w	r9, #0
 800ee86:	d0b8      	beq.n	800edfa <uxr_receive_reliable_message+0x22>
 800ee88:	89a6      	ldrh	r6, [r4, #12]
 800ee8a:	4630      	mov	r0, r6
 800ee8c:	2101      	movs	r1, #1
 800ee8e:	f000 fd45 	bl	800f91c <uxr_seq_num_add>
 800ee92:	8922      	ldrh	r2, [r4, #8]
 800ee94:	6863      	ldr	r3, [r4, #4]
 800ee96:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee9a:	4606      	mov	r6, r0
 800ee9c:	fbb0 f0f2 	udiv	r0, r0, r2
 800eea0:	fb02 6010 	mls	r0, r2, r0, r6
 800eea4:	b280      	uxth	r0, r0
 800eea6:	fb00 f303 	mul.w	r3, r0, r3
 800eeaa:	6820      	ldr	r0, [r4, #0]
 800eeac:	3304      	adds	r3, #4
 800eeae:	4418      	add	r0, r3
 800eeb0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d0a0      	beq.n	800edfa <uxr_receive_reliable_message+0x22>
 800eeb8:	6923      	ldr	r3, [r4, #16]
 800eeba:	4798      	blx	r3
 800eebc:	2802      	cmp	r0, #2
 800eebe:	d008      	beq.n	800eed2 <uxr_receive_reliable_message+0xfa>
 800eec0:	2801      	cmp	r0, #1
 800eec2:	d0e2      	beq.n	800ee8a <uxr_receive_reliable_message+0xb2>
 800eec4:	e799      	b.n	800edfa <uxr_receive_reliable_message+0x22>
 800eec6:	9b08      	ldr	r3, [sp, #32]
 800eec8:	81a5      	strh	r5, [r4, #12]
 800eeca:	2601      	movs	r6, #1
 800eecc:	f883 9000 	strb.w	r9, [r3]
 800eed0:	e794      	b.n	800edfc <uxr_receive_reliable_message+0x24>
 800eed2:	2601      	movs	r6, #1
 800eed4:	e792      	b.n	800edfc <uxr_receive_reliable_message+0x24>
 800eed6:	bf00      	nop

0800eed8 <uxr_next_input_reliable_buffer_available>:
 800eed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eedc:	4604      	mov	r4, r0
 800eede:	460f      	mov	r7, r1
 800eee0:	8980      	ldrh	r0, [r0, #12]
 800eee2:	2101      	movs	r1, #1
 800eee4:	4690      	mov	r8, r2
 800eee6:	f000 fd19 	bl	800f91c <uxr_seq_num_add>
 800eeea:	8922      	ldrh	r2, [r4, #8]
 800eeec:	fbb0 f6f2 	udiv	r6, r0, r2
 800eef0:	fb02 0616 	mls	r6, r2, r6, r0
 800eef4:	b2b6      	uxth	r6, r6
 800eef6:	6863      	ldr	r3, [r4, #4]
 800eef8:	fbb3 f3f2 	udiv	r3, r3, r2
 800eefc:	fb06 f303 	mul.w	r3, r6, r3
 800ef00:	6826      	ldr	r6, [r4, #0]
 800ef02:	3304      	adds	r3, #4
 800ef04:	441e      	add	r6, r3
 800ef06:	f856 9c04 	ldr.w	r9, [r6, #-4]
 800ef0a:	f1b9 0f00 	cmp.w	r9, #0
 800ef0e:	d023      	beq.n	800ef58 <uxr_next_input_reliable_buffer_available+0x80>
 800ef10:	6923      	ldr	r3, [r4, #16]
 800ef12:	4605      	mov	r5, r0
 800ef14:	4630      	mov	r0, r6
 800ef16:	4798      	blx	r3
 800ef18:	4682      	mov	sl, r0
 800ef1a:	b300      	cbz	r0, 800ef5e <uxr_next_input_reliable_buffer_available+0x86>
 800ef1c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 800ef20:	2101      	movs	r1, #1
 800ef22:	4650      	mov	r0, sl
 800ef24:	f000 fcfa 	bl	800f91c <uxr_seq_num_add>
 800ef28:	8921      	ldrh	r1, [r4, #8]
 800ef2a:	fbb0 f2f1 	udiv	r2, r0, r1
 800ef2e:	4682      	mov	sl, r0
 800ef30:	fb01 0212 	mls	r2, r1, r2, r0
 800ef34:	e9d4 0300 	ldrd	r0, r3, [r4]
 800ef38:	b292      	uxth	r2, r2
 800ef3a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef3e:	fb02 f303 	mul.w	r3, r2, r3
 800ef42:	3304      	adds	r3, #4
 800ef44:	4418      	add	r0, r3
 800ef46:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ef4a:	b12b      	cbz	r3, 800ef58 <uxr_next_input_reliable_buffer_available+0x80>
 800ef4c:	6923      	ldr	r3, [r4, #16]
 800ef4e:	4798      	blx	r3
 800ef50:	2802      	cmp	r0, #2
 800ef52:	d01b      	beq.n	800ef8c <uxr_next_input_reliable_buffer_available+0xb4>
 800ef54:	2801      	cmp	r0, #1
 800ef56:	d0e3      	beq.n	800ef20 <uxr_next_input_reliable_buffer_available+0x48>
 800ef58:	2000      	movs	r0, #0
 800ef5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef5e:	464a      	mov	r2, r9
 800ef60:	4631      	mov	r1, r6
 800ef62:	4638      	mov	r0, r7
 800ef64:	f7fa feb0 	bl	8009cc8 <ucdr_init_buffer>
 800ef68:	8921      	ldrh	r1, [r4, #8]
 800ef6a:	fbb5 f2f1 	udiv	r2, r5, r1
 800ef6e:	fb01 5212 	mls	r2, r1, r2, r5
 800ef72:	b292      	uxth	r2, r2
 800ef74:	6863      	ldr	r3, [r4, #4]
 800ef76:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef7a:	fb02 f303 	mul.w	r3, r2, r3
 800ef7e:	6822      	ldr	r2, [r4, #0]
 800ef80:	f842 a003 	str.w	sl, [r2, r3]
 800ef84:	2001      	movs	r0, #1
 800ef86:	81a5      	strh	r5, [r4, #12]
 800ef88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef8c:	8920      	ldrh	r0, [r4, #8]
 800ef8e:	fbb5 f3f0 	udiv	r3, r5, r0
 800ef92:	fb00 5513 	mls	r5, r0, r3, r5
 800ef96:	b2ad      	uxth	r5, r5
 800ef98:	6863      	ldr	r3, [r4, #4]
 800ef9a:	fbb3 f3f0 	udiv	r3, r3, r0
 800ef9e:	fb03 f505 	mul.w	r5, r3, r5
 800efa2:	6823      	ldr	r3, [r4, #0]
 800efa4:	2000      	movs	r0, #0
 800efa6:	5158      	str	r0, [r3, r5]
 800efa8:	eb06 0108 	add.w	r1, r6, r8
 800efac:	eba9 0208 	sub.w	r2, r9, r8
 800efb0:	4638      	mov	r0, r7
 800efb2:	f7fa fe89 	bl	8009cc8 <ucdr_init_buffer>
 800efb6:	4638      	mov	r0, r7
 800efb8:	4903      	ldr	r1, [pc, #12]	; (800efc8 <uxr_next_input_reliable_buffer_available+0xf0>)
 800efba:	4622      	mov	r2, r4
 800efbc:	f7fa fe58 	bl	8009c70 <ucdr_set_on_full_buffer_callback>
 800efc0:	f8a4 a00c 	strh.w	sl, [r4, #12]
 800efc4:	2001      	movs	r0, #1
 800efc6:	e7c8      	b.n	800ef5a <uxr_next_input_reliable_buffer_available+0x82>
 800efc8:	0800eccd 	.word	0x0800eccd

0800efcc <uxr_process_heartbeat>:
 800efcc:	b538      	push	{r3, r4, r5, lr}
 800efce:	4611      	mov	r1, r2
 800efd0:	4604      	mov	r4, r0
 800efd2:	89c0      	ldrh	r0, [r0, #14]
 800efd4:	4615      	mov	r5, r2
 800efd6:	f000 fca9 	bl	800f92c <uxr_seq_num_cmp>
 800efda:	2800      	cmp	r0, #0
 800efdc:	bfb8      	it	lt
 800efde:	81e5      	strhlt	r5, [r4, #14]
 800efe0:	bd38      	pop	{r3, r4, r5, pc}
 800efe2:	bf00      	nop

0800efe4 <uxr_compute_acknack>:
 800efe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efe8:	8903      	ldrh	r3, [r0, #8]
 800efea:	8985      	ldrh	r5, [r0, #12]
 800efec:	4604      	mov	r4, r0
 800efee:	460e      	mov	r6, r1
 800eff0:	b1d3      	cbz	r3, 800f028 <uxr_compute_acknack+0x44>
 800eff2:	4628      	mov	r0, r5
 800eff4:	2701      	movs	r7, #1
 800eff6:	e003      	b.n	800f000 <uxr_compute_acknack+0x1c>
 800eff8:	4567      	cmp	r7, ip
 800effa:	d215      	bcs.n	800f028 <uxr_compute_acknack+0x44>
 800effc:	89a0      	ldrh	r0, [r4, #12]
 800effe:	3701      	adds	r7, #1
 800f000:	b2b9      	uxth	r1, r7
 800f002:	f000 fc8b 	bl	800f91c <uxr_seq_num_add>
 800f006:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f00a:	fbb0 f3fc 	udiv	r3, r0, ip
 800f00e:	fb0c 0313 	mls	r3, ip, r3, r0
 800f012:	b29a      	uxth	r2, r3
 800f014:	e9d4 1300 	ldrd	r1, r3, [r4]
 800f018:	fbb3 f3fc 	udiv	r3, r3, ip
 800f01c:	fb02 f303 	mul.w	r3, r2, r3
 800f020:	58cb      	ldr	r3, [r1, r3]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d1e8      	bne.n	800eff8 <uxr_compute_acknack+0x14>
 800f026:	4605      	mov	r5, r0
 800f028:	8035      	strh	r5, [r6, #0]
 800f02a:	2101      	movs	r1, #1
 800f02c:	4628      	mov	r0, r5
 800f02e:	89e7      	ldrh	r7, [r4, #14]
 800f030:	f000 fc78 	bl	800f924 <uxr_seq_num_sub>
 800f034:	4601      	mov	r1, r0
 800f036:	4638      	mov	r0, r7
 800f038:	f000 fc74 	bl	800f924 <uxr_seq_num_sub>
 800f03c:	4605      	mov	r5, r0
 800f03e:	b318      	cbz	r0, 800f088 <uxr_compute_acknack+0xa4>
 800f040:	f04f 0900 	mov.w	r9, #0
 800f044:	464f      	mov	r7, r9
 800f046:	f04f 0801 	mov.w	r8, #1
 800f04a:	fa1f f189 	uxth.w	r1, r9
 800f04e:	8830      	ldrh	r0, [r6, #0]
 800f050:	f000 fc64 	bl	800f91c <uxr_seq_num_add>
 800f054:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f058:	fbb0 f3fc 	udiv	r3, r0, ip
 800f05c:	e9d4 1200 	ldrd	r1, r2, [r4]
 800f060:	fb03 001c 	mls	r0, r3, ip, r0
 800f064:	b283      	uxth	r3, r0
 800f066:	fbb2 f2fc 	udiv	r2, r2, ip
 800f06a:	fb02 f303 	mul.w	r3, r2, r3
 800f06e:	fa08 f209 	lsl.w	r2, r8, r9
 800f072:	58cb      	ldr	r3, [r1, r3]
 800f074:	f109 0901 	add.w	r9, r9, #1
 800f078:	b90b      	cbnz	r3, 800f07e <uxr_compute_acknack+0x9a>
 800f07a:	4317      	orrs	r7, r2
 800f07c:	b2bf      	uxth	r7, r7
 800f07e:	454d      	cmp	r5, r9
 800f080:	d1e3      	bne.n	800f04a <uxr_compute_acknack+0x66>
 800f082:	4638      	mov	r0, r7
 800f084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f088:	4607      	mov	r7, r0
 800f08a:	4638      	mov	r0, r7
 800f08c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f090 <uxr_init_output_best_effort_stream>:
 800f090:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800f094:	e9c0 3201 	strd	r3, r2, [r0, #4]
 800f098:	6001      	str	r1, [r0, #0]
 800f09a:	7303      	strb	r3, [r0, #12]
 800f09c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 800f0a0:	4770      	bx	lr
 800f0a2:	bf00      	nop

0800f0a4 <uxr_reset_output_best_effort_stream>:
 800f0a4:	7b02      	ldrb	r2, [r0, #12]
 800f0a6:	6042      	str	r2, [r0, #4]
 800f0a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f0ac:	81c3      	strh	r3, [r0, #14]
 800f0ae:	4770      	bx	lr

0800f0b0 <uxr_prepare_best_effort_buffer_to_write>:
 800f0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	b083      	sub	sp, #12
 800f0b6:	6840      	ldr	r0, [r0, #4]
 800f0b8:	460d      	mov	r5, r1
 800f0ba:	4616      	mov	r6, r2
 800f0bc:	f7fc f9ce 	bl	800b45c <uxr_submessage_padding>
 800f0c0:	6863      	ldr	r3, [r4, #4]
 800f0c2:	4418      	add	r0, r3
 800f0c4:	68a3      	ldr	r3, [r4, #8]
 800f0c6:	1942      	adds	r2, r0, r5
 800f0c8:	4293      	cmp	r3, r2
 800f0ca:	bf2c      	ite	cs
 800f0cc:	2701      	movcs	r7, #1
 800f0ce:	2700      	movcc	r7, #0
 800f0d0:	d202      	bcs.n	800f0d8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 800f0d2:	4638      	mov	r0, r7
 800f0d4:	b003      	add	sp, #12
 800f0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0d8:	9000      	str	r0, [sp, #0]
 800f0da:	6821      	ldr	r1, [r4, #0]
 800f0dc:	4630      	mov	r0, r6
 800f0de:	2300      	movs	r3, #0
 800f0e0:	f7fa fde0 	bl	8009ca4 <ucdr_init_buffer_origin_offset>
 800f0e4:	6861      	ldr	r1, [r4, #4]
 800f0e6:	4638      	mov	r0, r7
 800f0e8:	4429      	add	r1, r5
 800f0ea:	6061      	str	r1, [r4, #4]
 800f0ec:	b003      	add	sp, #12
 800f0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f0f0 <uxr_prepare_best_effort_buffer_to_send>:
 800f0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f4:	4604      	mov	r4, r0
 800f0f6:	461d      	mov	r5, r3
 800f0f8:	6840      	ldr	r0, [r0, #4]
 800f0fa:	7b23      	ldrb	r3, [r4, #12]
 800f0fc:	4298      	cmp	r0, r3
 800f0fe:	bf8c      	ite	hi
 800f100:	2601      	movhi	r6, #1
 800f102:	2600      	movls	r6, #0
 800f104:	d802      	bhi.n	800f10c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 800f106:	4630      	mov	r0, r6
 800f108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f10c:	4688      	mov	r8, r1
 800f10e:	89e0      	ldrh	r0, [r4, #14]
 800f110:	2101      	movs	r1, #1
 800f112:	4617      	mov	r7, r2
 800f114:	f000 fc02 	bl	800f91c <uxr_seq_num_add>
 800f118:	6823      	ldr	r3, [r4, #0]
 800f11a:	81e0      	strh	r0, [r4, #14]
 800f11c:	8028      	strh	r0, [r5, #0]
 800f11e:	f8c8 3000 	str.w	r3, [r8]
 800f122:	6863      	ldr	r3, [r4, #4]
 800f124:	603b      	str	r3, [r7, #0]
 800f126:	7b23      	ldrb	r3, [r4, #12]
 800f128:	6063      	str	r3, [r4, #4]
 800f12a:	4630      	mov	r0, r6
 800f12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f130 <on_full_output_buffer>:
 800f130:	b538      	push	{r3, r4, r5, lr}
 800f132:	6802      	ldr	r2, [r0, #0]
 800f134:	460c      	mov	r4, r1
 800f136:	6809      	ldr	r1, [r1, #0]
 800f138:	8923      	ldrh	r3, [r4, #8]
 800f13a:	eba2 0c01 	sub.w	ip, r2, r1
 800f13e:	6862      	ldr	r2, [r4, #4]
 800f140:	fbb2 f2f3 	udiv	r2, r2, r3
 800f144:	fbbc fcf2 	udiv	ip, ip, r2
 800f148:	f10c 0c01 	add.w	ip, ip, #1
 800f14c:	fa1f fc8c 	uxth.w	ip, ip
 800f150:	fbbc fef3 	udiv	lr, ip, r3
 800f154:	fb03 c31e 	mls	r3, r3, lr, ip
 800f158:	b29b      	uxth	r3, r3
 800f15a:	fb02 f303 	mul.w	r3, r2, r3
 800f15e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 800f162:	58ca      	ldr	r2, [r1, r3]
 800f164:	4463      	add	r3, ip
 800f166:	eba2 020c 	sub.w	r2, r2, ip
 800f16a:	3308      	adds	r3, #8
 800f16c:	4605      	mov	r5, r0
 800f16e:	4419      	add	r1, r3
 800f170:	3a04      	subs	r2, #4
 800f172:	6903      	ldr	r3, [r0, #16]
 800f174:	f7fa fda0 	bl	8009cb8 <ucdr_init_buffer_origin>
 800f178:	4628      	mov	r0, r5
 800f17a:	4903      	ldr	r1, [pc, #12]	; (800f188 <on_full_output_buffer+0x58>)
 800f17c:	4622      	mov	r2, r4
 800f17e:	f7fa fd77 	bl	8009c70 <ucdr_set_on_full_buffer_callback>
 800f182:	2000      	movs	r0, #0
 800f184:	bd38      	pop	{r3, r4, r5, pc}
 800f186:	bf00      	nop
 800f188:	0800f131 	.word	0x0800f131

0800f18c <uxr_init_output_reliable_stream>:
 800f18c:	b410      	push	{r4}
 800f18e:	f89d c004 	ldrb.w	ip, [sp, #4]
 800f192:	8103      	strh	r3, [r0, #8]
 800f194:	e9c0 1200 	strd	r1, r2, [r0]
 800f198:	f880 c00c 	strb.w	ip, [r0, #12]
 800f19c:	b1d3      	cbz	r3, 800f1d4 <uxr_init_output_reliable_stream+0x48>
 800f19e:	f8c1 c000 	str.w	ip, [r1]
 800f1a2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800f1a6:	f1bc 0f01 	cmp.w	ip, #1
 800f1aa:	d913      	bls.n	800f1d4 <uxr_init_output_reliable_stream+0x48>
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	fbb3 f1fc 	udiv	r1, r3, ip
 800f1b2:	fb0c 3111 	mls	r1, ip, r1, r3
 800f1b6:	b289      	uxth	r1, r1
 800f1b8:	6842      	ldr	r2, [r0, #4]
 800f1ba:	6804      	ldr	r4, [r0, #0]
 800f1bc:	fbb2 f2fc 	udiv	r2, r2, ip
 800f1c0:	fb01 f202 	mul.w	r2, r1, r2
 800f1c4:	7b01      	ldrb	r1, [r0, #12]
 800f1c6:	50a1      	str	r1, [r4, r2]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800f1ce:	b29b      	uxth	r3, r3
 800f1d0:	459c      	cmp	ip, r3
 800f1d2:	d8ec      	bhi.n	800f1ae <uxr_init_output_reliable_stream+0x22>
 800f1d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f1d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f1dc:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800f1e0:	4905      	ldr	r1, [pc, #20]	; (800f1f8 <uxr_init_output_reliable_stream+0x6c>)
 800f1e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1e6:	f8c0 100e 	str.w	r1, [r0, #14]
 800f1ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	8242      	strh	r2, [r0, #18]
 800f1f2:	8403      	strh	r3, [r0, #32]
 800f1f4:	4770      	bx	lr
 800f1f6:	bf00      	nop
 800f1f8:	ffff0000 	.word	0xffff0000

0800f1fc <uxr_reset_output_reliable_stream>:
 800f1fc:	8901      	ldrh	r1, [r0, #8]
 800f1fe:	b1b1      	cbz	r1, 800f22e <uxr_reset_output_reliable_stream+0x32>
 800f200:	f04f 0c00 	mov.w	ip, #0
 800f204:	4663      	mov	r3, ip
 800f206:	fbb3 f2f1 	udiv	r2, r3, r1
 800f20a:	fb01 3312 	mls	r3, r1, r2, r3
 800f20e:	b29b      	uxth	r3, r3
 800f210:	6842      	ldr	r2, [r0, #4]
 800f212:	fbb2 f2f1 	udiv	r2, r2, r1
 800f216:	6801      	ldr	r1, [r0, #0]
 800f218:	fb02 f303 	mul.w	r3, r2, r3
 800f21c:	7b02      	ldrb	r2, [r0, #12]
 800f21e:	50ca      	str	r2, [r1, r3]
 800f220:	f10c 0c01 	add.w	ip, ip, #1
 800f224:	8901      	ldrh	r1, [r0, #8]
 800f226:	fa1f f38c 	uxth.w	r3, ip
 800f22a:	4299      	cmp	r1, r3
 800f22c:	d8eb      	bhi.n	800f206 <uxr_reset_output_reliable_stream+0xa>
 800f22e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f232:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f236:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800f23a:	4904      	ldr	r1, [pc, #16]	; (800f24c <uxr_reset_output_reliable_stream+0x50>)
 800f23c:	f8c0 100e 	str.w	r1, [r0, #14]
 800f240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f244:	2300      	movs	r3, #0
 800f246:	8242      	strh	r2, [r0, #18]
 800f248:	8403      	strh	r3, [r0, #32]
 800f24a:	4770      	bx	lr
 800f24c:	ffff0000 	.word	0xffff0000

0800f250 <uxr_prepare_reliable_buffer_to_write>:
 800f250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f254:	4604      	mov	r4, r0
 800f256:	b091      	sub	sp, #68	; 0x44
 800f258:	8900      	ldrh	r0, [r0, #8]
 800f25a:	89e6      	ldrh	r6, [r4, #14]
 800f25c:	6823      	ldr	r3, [r4, #0]
 800f25e:	9204      	str	r2, [sp, #16]
 800f260:	fbb6 f2f0 	udiv	r2, r6, r0
 800f264:	fb00 6212 	mls	r2, r0, r2, r6
 800f268:	b292      	uxth	r2, r2
 800f26a:	6865      	ldr	r5, [r4, #4]
 800f26c:	fbb5 f5f0 	udiv	r5, r5, r0
 800f270:	fb05 3202 	mla	r2, r5, r2, r3
 800f274:	3204      	adds	r2, #4
 800f276:	f852 8c04 	ldr.w	r8, [r2, #-4]
 800f27a:	f894 900c 	ldrb.w	r9, [r4, #12]
 800f27e:	9203      	str	r2, [sp, #12]
 800f280:	468b      	mov	fp, r1
 800f282:	1f2f      	subs	r7, r5, #4
 800f284:	2800      	cmp	r0, #0
 800f286:	f000 814c 	beq.w	800f522 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 800f28a:	f04f 0c00 	mov.w	ip, #0
 800f28e:	46e2      	mov	sl, ip
 800f290:	4661      	mov	r1, ip
 800f292:	fbb1 f2f0 	udiv	r2, r1, r0
 800f296:	fb00 1212 	mls	r2, r0, r2, r1
 800f29a:	b292      	uxth	r2, r2
 800f29c:	fb05 f202 	mul.w	r2, r5, r2
 800f2a0:	f10c 0c01 	add.w	ip, ip, #1
 800f2a4:	589a      	ldr	r2, [r3, r2]
 800f2a6:	454a      	cmp	r2, r9
 800f2a8:	bf08      	it	eq
 800f2aa:	f10a 0a01 	addeq.w	sl, sl, #1
 800f2ae:	fa1f f18c 	uxth.w	r1, ip
 800f2b2:	bf08      	it	eq
 800f2b4:	fa1f fa8a 	uxtheq.w	sl, sl
 800f2b8:	4281      	cmp	r1, r0
 800f2ba:	d3ea      	bcc.n	800f292 <uxr_prepare_reliable_buffer_to_write+0x42>
 800f2bc:	4640      	mov	r0, r8
 800f2be:	2104      	movs	r1, #4
 800f2c0:	f8cd a014 	str.w	sl, [sp, #20]
 800f2c4:	f7fa fd04 	bl	8009cd0 <ucdr_alignment>
 800f2c8:	4480      	add	r8, r0
 800f2ca:	eb08 020b 	add.w	r2, r8, fp
 800f2ce:	42ba      	cmp	r2, r7
 800f2d0:	f240 80cd 	bls.w	800f46e <uxr_prepare_reliable_buffer_to_write+0x21e>
 800f2d4:	7b22      	ldrb	r2, [r4, #12]
 800f2d6:	445a      	add	r2, fp
 800f2d8:	42ba      	cmp	r2, r7
 800f2da:	f240 80b5 	bls.w	800f448 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 800f2de:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 800f2e2:	33fc      	adds	r3, #252	; 0xfc
 800f2e4:	b2ba      	uxth	r2, r7
 800f2e6:	4413      	add	r3, r2
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	fb0a f903 	mul.w	r9, sl, r3
 800f2ee:	45d9      	cmp	r9, fp
 800f2f0:	9305      	str	r3, [sp, #20]
 800f2f2:	9306      	str	r3, [sp, #24]
 800f2f4:	f0c0 80b7 	bcc.w	800f466 <uxr_prepare_reliable_buffer_to_write+0x216>
 800f2f8:	f108 0304 	add.w	r3, r8, #4
 800f2fc:	42bb      	cmp	r3, r7
 800f2fe:	f080 80db 	bcs.w	800f4b8 <uxr_prepare_reliable_buffer_to_write+0x268>
 800f302:	f1a2 0904 	sub.w	r9, r2, #4
 800f306:	eba9 0908 	sub.w	r9, r9, r8
 800f30a:	9b05      	ldr	r3, [sp, #20]
 800f30c:	fa1f f989 	uxth.w	r9, r9
 800f310:	ebab 0b09 	sub.w	fp, fp, r9
 800f314:	fbbb f2f3 	udiv	r2, fp, r3
 800f318:	fb03 b312 	mls	r3, r3, r2, fp
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	f000 80c8 	beq.w	800f4b2 <uxr_prepare_reliable_buffer_to_write+0x262>
 800f322:	3201      	adds	r2, #1
 800f324:	b292      	uxth	r2, r2
 800f326:	9306      	str	r3, [sp, #24]
 800f328:	4552      	cmp	r2, sl
 800f32a:	f200 809c 	bhi.w	800f466 <uxr_prepare_reliable_buffer_to_write+0x216>
 800f32e:	f10d 0b20 	add.w	fp, sp, #32
 800f332:	2a00      	cmp	r2, #0
 800f334:	d042      	beq.n	800f3bc <uxr_prepare_reliable_buffer_to_write+0x16c>
 800f336:	f8cd 801c 	str.w	r8, [sp, #28]
 800f33a:	f04f 0a00 	mov.w	sl, #0
 800f33e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f342:	9505      	str	r5, [sp, #20]
 800f344:	f10d 0b20 	add.w	fp, sp, #32
 800f348:	4615      	mov	r5, r2
 800f34a:	e000      	b.n	800f34e <uxr_prepare_reliable_buffer_to_write+0xfe>
 800f34c:	46c1      	mov	r9, r8
 800f34e:	8920      	ldrh	r0, [r4, #8]
 800f350:	fbb6 f2f0 	udiv	r2, r6, r0
 800f354:	fb00 6112 	mls	r1, r0, r2, r6
 800f358:	b28a      	uxth	r2, r1
 800f35a:	6863      	ldr	r3, [r4, #4]
 800f35c:	fbb3 f1f0 	udiv	r1, r3, r0
 800f360:	6823      	ldr	r3, [r4, #0]
 800f362:	fb02 f101 	mul.w	r1, r2, r1
 800f366:	3104      	adds	r1, #4
 800f368:	4419      	add	r1, r3
 800f36a:	4658      	mov	r0, fp
 800f36c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800f370:	9200      	str	r2, [sp, #0]
 800f372:	2300      	movs	r3, #0
 800f374:	463a      	mov	r2, r7
 800f376:	f7fa fc95 	bl	8009ca4 <ucdr_init_buffer_origin_offset>
 800f37a:	464a      	mov	r2, r9
 800f37c:	2300      	movs	r3, #0
 800f37e:	210d      	movs	r1, #13
 800f380:	4658      	mov	r0, fp
 800f382:	f7fc f82b 	bl	800b3dc <uxr_buffer_submessage_header>
 800f386:	8921      	ldrh	r1, [r4, #8]
 800f388:	fbb6 f2f1 	udiv	r2, r6, r1
 800f38c:	fb01 6212 	mls	r2, r1, r2, r6
 800f390:	b292      	uxth	r2, r2
 800f392:	6863      	ldr	r3, [r4, #4]
 800f394:	fbb3 f3f1 	udiv	r3, r3, r1
 800f398:	fb02 f303 	mul.w	r3, r2, r3
 800f39c:	6822      	ldr	r2, [r4, #0]
 800f39e:	4630      	mov	r0, r6
 800f3a0:	50d7      	str	r7, [r2, r3]
 800f3a2:	2101      	movs	r1, #1
 800f3a4:	f000 faba 	bl	800f91c <uxr_seq_num_add>
 800f3a8:	f10a 0a01 	add.w	sl, sl, #1
 800f3ac:	fa1f f38a 	uxth.w	r3, sl
 800f3b0:	429d      	cmp	r5, r3
 800f3b2:	4606      	mov	r6, r0
 800f3b4:	d8ca      	bhi.n	800f34c <uxr_prepare_reliable_buffer_to_write+0xfc>
 800f3b6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800f3ba:	9d05      	ldr	r5, [sp, #20]
 800f3bc:	8920      	ldrh	r0, [r4, #8]
 800f3be:	fbb6 f3f0 	udiv	r3, r6, r0
 800f3c2:	fb00 6313 	mls	r3, r0, r3, r6
 800f3c6:	b299      	uxth	r1, r3
 800f3c8:	6863      	ldr	r3, [r4, #4]
 800f3ca:	fbb3 f3f0 	udiv	r3, r3, r0
 800f3ce:	fb01 f303 	mul.w	r3, r1, r3
 800f3d2:	6821      	ldr	r1, [r4, #0]
 800f3d4:	3304      	adds	r3, #4
 800f3d6:	4419      	add	r1, r3
 800f3d8:	463a      	mov	r2, r7
 800f3da:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800f3de:	9000      	str	r0, [sp, #0]
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	4658      	mov	r0, fp
 800f3e4:	f7fa fc5e 	bl	8009ca4 <ucdr_init_buffer_origin_offset>
 800f3e8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800f3ec:	4658      	mov	r0, fp
 800f3ee:	fa1f f289 	uxth.w	r2, r9
 800f3f2:	2302      	movs	r3, #2
 800f3f4:	210d      	movs	r1, #13
 800f3f6:	f7fb fff1 	bl	800b3dc <uxr_buffer_submessage_header>
 800f3fa:	9b03      	ldr	r3, [sp, #12]
 800f3fc:	8927      	ldrh	r7, [r4, #8]
 800f3fe:	7b20      	ldrb	r0, [r4, #12]
 800f400:	f108 0104 	add.w	r1, r8, #4
 800f404:	440b      	add	r3, r1
 800f406:	4619      	mov	r1, r3
 800f408:	fbb6 f3f7 	udiv	r3, r6, r7
 800f40c:	fb07 6313 	mls	r3, r7, r3, r6
 800f410:	f1a5 0208 	sub.w	r2, r5, #8
 800f414:	b29d      	uxth	r5, r3
 800f416:	3004      	adds	r0, #4
 800f418:	6863      	ldr	r3, [r4, #4]
 800f41a:	fbb3 f3f7 	udiv	r3, r3, r7
 800f41e:	fb05 f303 	mul.w	r3, r5, r3
 800f422:	6825      	ldr	r5, [r4, #0]
 800f424:	4448      	add	r0, r9
 800f426:	50e8      	str	r0, [r5, r3]
 800f428:	9d04      	ldr	r5, [sp, #16]
 800f42a:	eba2 0208 	sub.w	r2, r2, r8
 800f42e:	4628      	mov	r0, r5
 800f430:	f7fa fc4a 	bl	8009cc8 <ucdr_init_buffer>
 800f434:	4628      	mov	r0, r5
 800f436:	493c      	ldr	r1, [pc, #240]	; (800f528 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 800f438:	4622      	mov	r2, r4
 800f43a:	f7fa fc19 	bl	8009c70 <ucdr_set_on_full_buffer_callback>
 800f43e:	2001      	movs	r0, #1
 800f440:	81e6      	strh	r6, [r4, #14]
 800f442:	b011      	add	sp, #68	; 0x44
 800f444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f448:	2101      	movs	r1, #1
 800f44a:	89e0      	ldrh	r0, [r4, #14]
 800f44c:	f000 fa66 	bl	800f91c <uxr_seq_num_add>
 800f450:	8921      	ldrh	r1, [r4, #8]
 800f452:	4605      	mov	r5, r0
 800f454:	8a60      	ldrh	r0, [r4, #18]
 800f456:	f000 fa61 	bl	800f91c <uxr_seq_num_add>
 800f45a:	4601      	mov	r1, r0
 800f45c:	4628      	mov	r0, r5
 800f45e:	f000 fa65 	bl	800f92c <uxr_seq_num_cmp>
 800f462:	2800      	cmp	r0, #0
 800f464:	dd42      	ble.n	800f4ec <uxr_prepare_reliable_buffer_to_write+0x29c>
 800f466:	2000      	movs	r0, #0
 800f468:	b011      	add	sp, #68	; 0x44
 800f46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f46e:	8921      	ldrh	r1, [r4, #8]
 800f470:	8a60      	ldrh	r0, [r4, #18]
 800f472:	9205      	str	r2, [sp, #20]
 800f474:	f000 fa52 	bl	800f91c <uxr_seq_num_add>
 800f478:	4601      	mov	r1, r0
 800f47a:	4630      	mov	r0, r6
 800f47c:	f000 fa56 	bl	800f92c <uxr_seq_num_cmp>
 800f480:	2800      	cmp	r0, #0
 800f482:	9a05      	ldr	r2, [sp, #20]
 800f484:	dcef      	bgt.n	800f466 <uxr_prepare_reliable_buffer_to_write+0x216>
 800f486:	8927      	ldrh	r7, [r4, #8]
 800f488:	fbb6 f3f7 	udiv	r3, r6, r7
 800f48c:	fb07 6313 	mls	r3, r7, r3, r6
 800f490:	b29d      	uxth	r5, r3
 800f492:	6863      	ldr	r3, [r4, #4]
 800f494:	6824      	ldr	r4, [r4, #0]
 800f496:	fbb3 f3f7 	udiv	r3, r3, r7
 800f49a:	fb05 f303 	mul.w	r3, r5, r3
 800f49e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 800f4a2:	50e2      	str	r2, [r4, r3]
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	f8cd 8000 	str.w	r8, [sp]
 800f4aa:	f7fa fbfb 	bl	8009ca4 <ucdr_init_buffer_origin_offset>
 800f4ae:	2001      	movs	r0, #1
 800f4b0:	e7da      	b.n	800f468 <uxr_prepare_reliable_buffer_to_write+0x218>
 800f4b2:	b293      	uxth	r3, r2
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	e737      	b.n	800f328 <uxr_prepare_reliable_buffer_to_write+0xd8>
 800f4b8:	4630      	mov	r0, r6
 800f4ba:	2101      	movs	r1, #1
 800f4bc:	9207      	str	r2, [sp, #28]
 800f4be:	f000 fa2d 	bl	800f91c <uxr_seq_num_add>
 800f4c2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f4c6:	fbb0 f1fc 	udiv	r1, r0, ip
 800f4ca:	fb0c 0111 	mls	r1, ip, r1, r0
 800f4ce:	4606      	mov	r6, r0
 800f4d0:	b288      	uxth	r0, r1
 800f4d2:	6863      	ldr	r3, [r4, #4]
 800f4d4:	fbb3 f1fc 	udiv	r1, r3, ip
 800f4d8:	6823      	ldr	r3, [r4, #0]
 800f4da:	9a07      	ldr	r2, [sp, #28]
 800f4dc:	fb00 f101 	mul.w	r1, r0, r1
 800f4e0:	3104      	adds	r1, #4
 800f4e2:	440b      	add	r3, r1
 800f4e4:	9303      	str	r3, [sp, #12]
 800f4e6:	f853 8c04 	ldr.w	r8, [r3, #-4]
 800f4ea:	e70a      	b.n	800f302 <uxr_prepare_reliable_buffer_to_write+0xb2>
 800f4ec:	8921      	ldrh	r1, [r4, #8]
 800f4ee:	fbb5 f3f1 	udiv	r3, r5, r1
 800f4f2:	fb01 5313 	mls	r3, r1, r3, r5
 800f4f6:	b29a      	uxth	r2, r3
 800f4f8:	6863      	ldr	r3, [r4, #4]
 800f4fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800f4fe:	6821      	ldr	r1, [r4, #0]
 800f500:	9804      	ldr	r0, [sp, #16]
 800f502:	fb02 f303 	mul.w	r3, r2, r3
 800f506:	3304      	adds	r3, #4
 800f508:	7b22      	ldrb	r2, [r4, #12]
 800f50a:	4419      	add	r1, r3
 800f50c:	445a      	add	r2, fp
 800f50e:	f841 2c04 	str.w	r2, [r1, #-4]
 800f512:	7b23      	ldrb	r3, [r4, #12]
 800f514:	9300      	str	r3, [sp, #0]
 800f516:	2300      	movs	r3, #0
 800f518:	f7fa fbc4 	bl	8009ca4 <ucdr_init_buffer_origin_offset>
 800f51c:	81e5      	strh	r5, [r4, #14]
 800f51e:	2001      	movs	r0, #1
 800f520:	e7a2      	b.n	800f468 <uxr_prepare_reliable_buffer_to_write+0x218>
 800f522:	4682      	mov	sl, r0
 800f524:	e6ca      	b.n	800f2bc <uxr_prepare_reliable_buffer_to_write+0x6c>
 800f526:	bf00      	nop
 800f528:	0800f131 	.word	0x0800f131

0800f52c <uxr_prepare_next_reliable_buffer_to_send>:
 800f52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f52e:	4604      	mov	r4, r0
 800f530:	460f      	mov	r7, r1
 800f532:	8a00      	ldrh	r0, [r0, #16]
 800f534:	2101      	movs	r1, #1
 800f536:	4616      	mov	r6, r2
 800f538:	461d      	mov	r5, r3
 800f53a:	f000 f9ef 	bl	800f91c <uxr_seq_num_add>
 800f53e:	8028      	strh	r0, [r5, #0]
 800f540:	8922      	ldrh	r2, [r4, #8]
 800f542:	fbb0 f3f2 	udiv	r3, r0, r2
 800f546:	fb02 0c13 	mls	ip, r2, r3, r0
 800f54a:	fa1f fc8c 	uxth.w	ip, ip
 800f54e:	6863      	ldr	r3, [r4, #4]
 800f550:	fbb3 f3f2 	udiv	r3, r3, r2
 800f554:	fb0c fc03 	mul.w	ip, ip, r3
 800f558:	6823      	ldr	r3, [r4, #0]
 800f55a:	89e1      	ldrh	r1, [r4, #14]
 800f55c:	f10c 0c04 	add.w	ip, ip, #4
 800f560:	4463      	add	r3, ip
 800f562:	603b      	str	r3, [r7, #0]
 800f564:	6823      	ldr	r3, [r4, #0]
 800f566:	449c      	add	ip, r3
 800f568:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 800f56c:	6033      	str	r3, [r6, #0]
 800f56e:	f000 f9dd 	bl	800f92c <uxr_seq_num_cmp>
 800f572:	2800      	cmp	r0, #0
 800f574:	dd01      	ble.n	800f57a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 800f576:	2000      	movs	r0, #0
 800f578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f57a:	7b23      	ldrb	r3, [r4, #12]
 800f57c:	6832      	ldr	r2, [r6, #0]
 800f57e:	429a      	cmp	r2, r3
 800f580:	d9f9      	bls.n	800f576 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800f582:	8a61      	ldrh	r1, [r4, #18]
 800f584:	8a20      	ldrh	r0, [r4, #16]
 800f586:	f000 f9cd 	bl	800f924 <uxr_seq_num_sub>
 800f58a:	8923      	ldrh	r3, [r4, #8]
 800f58c:	4283      	cmp	r3, r0
 800f58e:	d0f2      	beq.n	800f576 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800f590:	8828      	ldrh	r0, [r5, #0]
 800f592:	89e3      	ldrh	r3, [r4, #14]
 800f594:	8220      	strh	r0, [r4, #16]
 800f596:	4298      	cmp	r0, r3
 800f598:	d001      	beq.n	800f59e <uxr_prepare_next_reliable_buffer_to_send+0x72>
 800f59a:	2001      	movs	r0, #1
 800f59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f59e:	2101      	movs	r1, #1
 800f5a0:	f000 f9bc 	bl	800f91c <uxr_seq_num_add>
 800f5a4:	81e0      	strh	r0, [r4, #14]
 800f5a6:	2001      	movs	r0, #1
 800f5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5aa:	bf00      	nop

0800f5ac <uxr_update_output_stream_heartbeat_timestamp>:
 800f5ac:	b570      	push	{r4, r5, r6, lr}
 800f5ae:	8a01      	ldrh	r1, [r0, #16]
 800f5b0:	4604      	mov	r4, r0
 800f5b2:	8a40      	ldrh	r0, [r0, #18]
 800f5b4:	4615      	mov	r5, r2
 800f5b6:	461e      	mov	r6, r3
 800f5b8:	f000 f9b8 	bl	800f92c <uxr_seq_num_cmp>
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	db07      	blt.n	800f5d0 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 800f5c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5c4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f5c8:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800f5cc:	2000      	movs	r0, #0
 800f5ce:	bd70      	pop	{r4, r5, r6, pc}
 800f5d0:	f894 0020 	ldrb.w	r0, [r4, #32]
 800f5d4:	b940      	cbnz	r0, 800f5e8 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	f884 3020 	strb.w	r3, [r4, #32]
 800f5dc:	3564      	adds	r5, #100	; 0x64
 800f5de:	f146 0600 	adc.w	r6, r6, #0
 800f5e2:	e9c4 5606 	strd	r5, r6, [r4, #24]
 800f5e6:	bd70      	pop	{r4, r5, r6, pc}
 800f5e8:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800f5ec:	4295      	cmp	r5, r2
 800f5ee:	eb76 0303 	sbcs.w	r3, r6, r3
 800f5f2:	bfa5      	ittet	ge
 800f5f4:	3001      	addge	r0, #1
 800f5f6:	f884 0020 	strbge.w	r0, [r4, #32]
 800f5fa:	2000      	movlt	r0, #0
 800f5fc:	2001      	movge	r0, #1
 800f5fe:	e7ed      	b.n	800f5dc <uxr_update_output_stream_heartbeat_timestamp+0x30>

0800f600 <uxr_begin_output_nack_buffer_it>:
 800f600:	8a40      	ldrh	r0, [r0, #18]
 800f602:	4770      	bx	lr

0800f604 <uxr_next_reliable_nack_buffer_to_send>:
 800f604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f608:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 800f60c:	b082      	sub	sp, #8
 800f60e:	f1b8 0f00 	cmp.w	r8, #0
 800f612:	d011      	beq.n	800f638 <uxr_next_reliable_nack_buffer_to_send+0x34>
 800f614:	4604      	mov	r4, r0
 800f616:	8818      	ldrh	r0, [r3, #0]
 800f618:	460e      	mov	r6, r1
 800f61a:	4617      	mov	r7, r2
 800f61c:	461d      	mov	r5, r3
 800f61e:	2101      	movs	r1, #1
 800f620:	f000 f97c 	bl	800f91c <uxr_seq_num_add>
 800f624:	8028      	strh	r0, [r5, #0]
 800f626:	8a21      	ldrh	r1, [r4, #16]
 800f628:	f000 f980 	bl	800f92c <uxr_seq_num_cmp>
 800f62c:	2800      	cmp	r0, #0
 800f62e:	dd07      	ble.n	800f640 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 800f630:	f04f 0800 	mov.w	r8, #0
 800f634:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 800f638:	4640      	mov	r0, r8
 800f63a:	b002      	add	sp, #8
 800f63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f640:	8921      	ldrh	r1, [r4, #8]
 800f642:	8828      	ldrh	r0, [r5, #0]
 800f644:	6823      	ldr	r3, [r4, #0]
 800f646:	fbb0 f2f1 	udiv	r2, r0, r1
 800f64a:	fb01 0c12 	mls	ip, r1, r2, r0
 800f64e:	fa1f f28c 	uxth.w	r2, ip
 800f652:	9301      	str	r3, [sp, #4]
 800f654:	6863      	ldr	r3, [r4, #4]
 800f656:	fbb3 fcf1 	udiv	ip, r3, r1
 800f65a:	9b01      	ldr	r3, [sp, #4]
 800f65c:	fb02 fc0c 	mul.w	ip, r2, ip
 800f660:	f10c 0c04 	add.w	ip, ip, #4
 800f664:	4463      	add	r3, ip
 800f666:	6033      	str	r3, [r6, #0]
 800f668:	6823      	ldr	r3, [r4, #0]
 800f66a:	4463      	add	r3, ip
 800f66c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f670:	603b      	str	r3, [r7, #0]
 800f672:	7b22      	ldrb	r2, [r4, #12]
 800f674:	429a      	cmp	r2, r3
 800f676:	d0d2      	beq.n	800f61e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 800f678:	4640      	mov	r0, r8
 800f67a:	b002      	add	sp, #8
 800f67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f680 <uxr_process_acknack>:
 800f680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f682:	4604      	mov	r4, r0
 800f684:	460e      	mov	r6, r1
 800f686:	4610      	mov	r0, r2
 800f688:	2101      	movs	r1, #1
 800f68a:	f000 f94b 	bl	800f924 <uxr_seq_num_sub>
 800f68e:	8a61      	ldrh	r1, [r4, #18]
 800f690:	f000 f948 	bl	800f924 <uxr_seq_num_sub>
 800f694:	b1c0      	cbz	r0, 800f6c8 <uxr_process_acknack+0x48>
 800f696:	4605      	mov	r5, r0
 800f698:	2700      	movs	r7, #0
 800f69a:	2101      	movs	r1, #1
 800f69c:	8a60      	ldrh	r0, [r4, #18]
 800f69e:	f000 f93d 	bl	800f91c <uxr_seq_num_add>
 800f6a2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f6a6:	fbb0 f1fc 	udiv	r1, r0, ip
 800f6aa:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f6ae:	fb0c 0111 	mls	r1, ip, r1, r0
 800f6b2:	b289      	uxth	r1, r1
 800f6b4:	3701      	adds	r7, #1
 800f6b6:	fbb3 f3fc 	udiv	r3, r3, ip
 800f6ba:	fb01 f303 	mul.w	r3, r1, r3
 800f6be:	42bd      	cmp	r5, r7
 800f6c0:	7b21      	ldrb	r1, [r4, #12]
 800f6c2:	8260      	strh	r0, [r4, #18]
 800f6c4:	50d1      	str	r1, [r2, r3]
 800f6c6:	d1e8      	bne.n	800f69a <uxr_process_acknack+0x1a>
 800f6c8:	3e00      	subs	r6, #0
 800f6ca:	f04f 0300 	mov.w	r3, #0
 800f6ce:	bf18      	it	ne
 800f6d0:	2601      	movne	r6, #1
 800f6d2:	f884 3020 	strb.w	r3, [r4, #32]
 800f6d6:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 800f6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f6dc <uxr_is_output_up_to_date>:
 800f6dc:	8a01      	ldrh	r1, [r0, #16]
 800f6de:	8a40      	ldrh	r0, [r0, #18]
 800f6e0:	b508      	push	{r3, lr}
 800f6e2:	f000 f923 	bl	800f92c <uxr_seq_num_cmp>
 800f6e6:	fab0 f080 	clz	r0, r0
 800f6ea:	0940      	lsrs	r0, r0, #5
 800f6ec:	bd08      	pop	{r3, pc}
 800f6ee:	bf00      	nop

0800f6f0 <get_available_free_slots>:
 800f6f0:	8902      	ldrh	r2, [r0, #8]
 800f6f2:	b1da      	cbz	r2, 800f72c <get_available_free_slots+0x3c>
 800f6f4:	b530      	push	{r4, r5, lr}
 800f6f6:	2100      	movs	r1, #0
 800f6f8:	6843      	ldr	r3, [r0, #4]
 800f6fa:	6805      	ldr	r5, [r0, #0]
 800f6fc:	7b04      	ldrb	r4, [r0, #12]
 800f6fe:	fbb3 fef2 	udiv	lr, r3, r2
 800f702:	4608      	mov	r0, r1
 800f704:	460b      	mov	r3, r1
 800f706:	fbb3 fcf2 	udiv	ip, r3, r2
 800f70a:	fb02 331c 	mls	r3, r2, ip, r3
 800f70e:	b29b      	uxth	r3, r3
 800f710:	fb0e f303 	mul.w	r3, lr, r3
 800f714:	3101      	adds	r1, #1
 800f716:	f855 c003 	ldr.w	ip, [r5, r3]
 800f71a:	4564      	cmp	r4, ip
 800f71c:	bf08      	it	eq
 800f71e:	3001      	addeq	r0, #1
 800f720:	b28b      	uxth	r3, r1
 800f722:	bf08      	it	eq
 800f724:	b280      	uxtheq	r0, r0
 800f726:	4293      	cmp	r3, r2
 800f728:	d3ed      	bcc.n	800f706 <get_available_free_slots+0x16>
 800f72a:	bd30      	pop	{r4, r5, pc}
 800f72c:	4610      	mov	r0, r2
 800f72e:	4770      	bx	lr

0800f730 <uxr_buffer_cancel_data>:
 800f730:	b510      	push	{r4, lr}
 800f732:	b094      	sub	sp, #80	; 0x50
 800f734:	2300      	movs	r3, #0
 800f736:	9202      	str	r2, [sp, #8]
 800f738:	9205      	str	r2, [sp, #20]
 800f73a:	9301      	str	r3, [sp, #4]
 800f73c:	2201      	movs	r2, #1
 800f73e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f742:	f88d 301e 	strb.w	r3, [sp, #30]
 800f746:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800f74a:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 800f74e:	2308      	movs	r3, #8
 800f750:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800f754:	9300      	str	r3, [sp, #0]
 800f756:	2210      	movs	r2, #16
 800f758:	ab0c      	add	r3, sp, #48	; 0x30
 800f75a:	4604      	mov	r4, r0
 800f75c:	9103      	str	r1, [sp, #12]
 800f75e:	f7fb fb9f 	bl	800aea0 <uxr_prepare_stream_to_write_submessage>
 800f762:	b918      	cbnz	r0, 800f76c <uxr_buffer_cancel_data+0x3c>
 800f764:	4604      	mov	r4, r0
 800f766:	4620      	mov	r0, r4
 800f768:	b014      	add	sp, #80	; 0x50
 800f76a:	bd10      	pop	{r4, pc}
 800f76c:	9905      	ldr	r1, [sp, #20]
 800f76e:	aa06      	add	r2, sp, #24
 800f770:	4620      	mov	r0, r4
 800f772:	f7fb fccb 	bl	800b10c <uxr_init_base_object_request>
 800f776:	a906      	add	r1, sp, #24
 800f778:	4604      	mov	r4, r0
 800f77a:	a80c      	add	r0, sp, #48	; 0x30
 800f77c:	f7fc feda 	bl	800c534 <uxr_serialize_READ_DATA_Payload>
 800f780:	4620      	mov	r0, r4
 800f782:	b014      	add	sp, #80	; 0x50
 800f784:	bd10      	pop	{r4, pc}
 800f786:	bf00      	nop

0800f788 <read_submessage_format>:
 800f788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f78c:	b095      	sub	sp, #84	; 0x54
 800f78e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 800f792:	b113      	cbz	r3, 800f79a <read_submessage_format+0x12>
 800f794:	b015      	add	sp, #84	; 0x54
 800f796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f79a:	460c      	mov	r4, r1
 800f79c:	4615      	mov	r5, r2
 800f79e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800f7a2:	4607      	mov	r7, r0
 800f7a4:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f7a6:	9004      	str	r0, [sp, #16]
 800f7a8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800f7aa:	9005      	str	r0, [sp, #20]
 800f7ac:	1a52      	subs	r2, r2, r1
 800f7ae:	a80c      	add	r0, sp, #48	; 0x30
 800f7b0:	4699      	mov	r9, r3
 800f7b2:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800f7b6:	f7fa fa87 	bl	8009cc8 <ucdr_init_buffer>
 800f7ba:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f7be:	a80c      	add	r0, sp, #48	; 0x30
 800f7c0:	f7fa fa56 	bl	8009c70 <ucdr_set_on_full_buffer_callback>
 800f7c4:	69e2      	ldr	r2, [r4, #28]
 800f7c6:	b19a      	cbz	r2, 800f7f0 <read_submessage_format+0x68>
 800f7c8:	f1b8 0f07 	cmp.w	r8, #7
 800f7cc:	f882 9014 	strb.w	r9, [r2, #20]
 800f7d0:	d040      	beq.n	800f854 <read_submessage_format+0xcc>
 800f7d2:	f1b8 0f08 	cmp.w	r8, #8
 800f7d6:	d02e      	beq.n	800f836 <read_submessage_format+0xae>
 800f7d8:	f1b8 0f06 	cmp.w	r8, #6
 800f7dc:	d011      	beq.n	800f802 <read_submessage_format+0x7a>
 800f7de:	2301      	movs	r3, #1
 800f7e0:	7513      	strb	r3, [r2, #20]
 800f7e2:	4629      	mov	r1, r5
 800f7e4:	4620      	mov	r0, r4
 800f7e6:	f7fa fabf 	bl	8009d68 <ucdr_advance_buffer>
 800f7ea:	b015      	add	sp, #84	; 0x54
 800f7ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7f0:	f1b8 0f07 	cmp.w	r8, #7
 800f7f4:	d02e      	beq.n	800f854 <read_submessage_format+0xcc>
 800f7f6:	f1b8 0f08 	cmp.w	r8, #8
 800f7fa:	d01c      	beq.n	800f836 <read_submessage_format+0xae>
 800f7fc:	f1b8 0f06 	cmp.w	r8, #6
 800f800:	d1ef      	bne.n	800f7e2 <read_submessage_format+0x5a>
 800f802:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 800f806:	f1b8 0f00 	cmp.w	r8, #0
 800f80a:	d011      	beq.n	800f830 <read_submessage_format+0xa8>
 800f80c:	ab0c      	add	r3, sp, #48	; 0x30
 800f80e:	e9cd 3500 	strd	r3, r5, [sp]
 800f812:	2306      	movs	r3, #6
 800f814:	f88d 3016 	strb.w	r3, [sp, #22]
 800f818:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f81c:	9302      	str	r3, [sp, #8]
 800f81e:	4632      	mov	r2, r6
 800f820:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800f824:	4638      	mov	r0, r7
 800f826:	47c0      	blx	r8
 800f828:	2301      	movs	r3, #1
 800f82a:	69e2      	ldr	r2, [r4, #28]
 800f82c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800f830:	2a00      	cmp	r2, #0
 800f832:	d1d4      	bne.n	800f7de <read_submessage_format+0x56>
 800f834:	e7d5      	b.n	800f7e2 <read_submessage_format+0x5a>
 800f836:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d0f8      	beq.n	800f830 <read_submessage_format+0xa8>
 800f83e:	a906      	add	r1, sp, #24
 800f840:	a80c      	add	r0, sp, #48	; 0x30
 800f842:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800f846:	f7fc ff15 	bl	800c674 <uxr_deserialize_SampleIdentity>
 800f84a:	b9a0      	cbnz	r0, 800f876 <read_submessage_format+0xee>
 800f84c:	69e2      	ldr	r2, [r4, #28]
 800f84e:	2a00      	cmp	r2, #0
 800f850:	d1c5      	bne.n	800f7de <read_submessage_format+0x56>
 800f852:	e7c6      	b.n	800f7e2 <read_submessage_format+0x5a>
 800f854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f858:	b13b      	cbz	r3, 800f86a <read_submessage_format+0xe2>
 800f85a:	a906      	add	r1, sp, #24
 800f85c:	a80c      	add	r0, sp, #48	; 0x30
 800f85e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800f862:	f7fc fc01 	bl	800c068 <uxr_deserialize_BaseObjectRequest>
 800f866:	bb60      	cbnz	r0, 800f8c2 <read_submessage_format+0x13a>
 800f868:	69e2      	ldr	r2, [r4, #28]
 800f86a:	68a3      	ldr	r3, [r4, #8]
 800f86c:	442b      	add	r3, r5
 800f86e:	60a3      	str	r3, [r4, #8]
 800f870:	2a00      	cmp	r2, #0
 800f872:	d1b4      	bne.n	800f7de <read_submessage_format+0x56>
 800f874:	e7b5      	b.n	800f7e2 <read_submessage_format+0x5a>
 800f876:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800f87a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f87c:	1a52      	subs	r2, r2, r1
 800f87e:	eba8 0803 	sub.w	r8, r8, r3
 800f882:	a80c      	add	r0, sp, #48	; 0x30
 800f884:	f7fa fa20 	bl	8009cc8 <ucdr_init_buffer>
 800f888:	44a8      	add	r8, r5
 800f88a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f88e:	a80c      	add	r0, sp, #48	; 0x30
 800f890:	f7fa f9ee 	bl	8009c70 <ucdr_set_on_full_buffer_callback>
 800f894:	fa1f f888 	uxth.w	r8, r8
 800f898:	ab0c      	add	r3, sp, #48	; 0x30
 800f89a:	9300      	str	r3, [sp, #0]
 800f89c:	f8cd 8004 	str.w	r8, [sp, #4]
 800f8a0:	2108      	movs	r1, #8
 800f8a2:	f88d 1016 	strb.w	r1, [sp, #22]
 800f8a6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800f8aa:	9102      	str	r1, [sp, #8]
 800f8ac:	ab06      	add	r3, sp, #24
 800f8ae:	4632      	mov	r2, r6
 800f8b0:	9905      	ldr	r1, [sp, #20]
 800f8b2:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 800f8b6:	4638      	mov	r0, r7
 800f8b8:	47b0      	blx	r6
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800f8c0:	e7c4      	b.n	800f84c <read_submessage_format+0xc4>
 800f8c2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800f8c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f8c8:	1a52      	subs	r2, r2, r1
 800f8ca:	a80c      	add	r0, sp, #48	; 0x30
 800f8cc:	eba8 0803 	sub.w	r8, r8, r3
 800f8d0:	f7fa f9fa 	bl	8009cc8 <ucdr_init_buffer>
 800f8d4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f8d8:	a80c      	add	r0, sp, #48	; 0x30
 800f8da:	f7fa f9c9 	bl	8009c70 <ucdr_set_on_full_buffer_callback>
 800f8de:	ab0c      	add	r3, sp, #48	; 0x30
 800f8e0:	9300      	str	r3, [sp, #0]
 800f8e2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800f8e6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f8ea:	44a8      	add	r8, r5
 800f8ec:	fa1f f888 	uxth.w	r8, r8
 800f8f0:	f8cd 8004 	str.w	r8, [sp, #4]
 800f8f4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f8f8:	2107      	movs	r1, #7
 800f8fa:	f88d 1016 	strb.w	r1, [sp, #22]
 800f8fe:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800f902:	9102      	str	r1, [sp, #8]
 800f904:	4632      	mov	r2, r6
 800f906:	b29b      	uxth	r3, r3
 800f908:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 800f90c:	9905      	ldr	r1, [sp, #20]
 800f90e:	4638      	mov	r0, r7
 800f910:	47b0      	blx	r6
 800f912:	2301      	movs	r3, #1
 800f914:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800f918:	e7a6      	b.n	800f868 <read_submessage_format+0xe0>
 800f91a:	bf00      	nop

0800f91c <uxr_seq_num_add>:
 800f91c:	4408      	add	r0, r1
 800f91e:	b280      	uxth	r0, r0
 800f920:	4770      	bx	lr
 800f922:	bf00      	nop

0800f924 <uxr_seq_num_sub>:
 800f924:	1a40      	subs	r0, r0, r1
 800f926:	b280      	uxth	r0, r0
 800f928:	4770      	bx	lr
 800f92a:	bf00      	nop

0800f92c <uxr_seq_num_cmp>:
 800f92c:	4288      	cmp	r0, r1
 800f92e:	d011      	beq.n	800f954 <uxr_seq_num_cmp+0x28>
 800f930:	d309      	bcc.n	800f946 <uxr_seq_num_cmp+0x1a>
 800f932:	4288      	cmp	r0, r1
 800f934:	d910      	bls.n	800f958 <uxr_seq_num_cmp+0x2c>
 800f936:	1a40      	subs	r0, r0, r1
 800f938:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800f93c:	bfd4      	ite	le
 800f93e:	2001      	movle	r0, #1
 800f940:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 800f944:	4770      	bx	lr
 800f946:	1a0b      	subs	r3, r1, r0
 800f948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f94c:	daf1      	bge.n	800f932 <uxr_seq_num_cmp+0x6>
 800f94e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f952:	4770      	bx	lr
 800f954:	2000      	movs	r0, #0
 800f956:	4770      	bx	lr
 800f958:	2001      	movs	r0, #1
 800f95a:	4770      	bx	lr

0800f95c <uxr_init_framing_io>:
 800f95c:	2300      	movs	r3, #0
 800f95e:	7041      	strb	r1, [r0, #1]
 800f960:	7003      	strb	r3, [r0, #0]
 800f962:	8583      	strh	r3, [r0, #44]	; 0x2c
 800f964:	4770      	bx	lr
 800f966:	bf00      	nop

0800f968 <uxr_write_framed_msg>:
 800f968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f96c:	4617      	mov	r7, r2
 800f96e:	7842      	ldrb	r2, [r0, #1]
 800f970:	b083      	sub	sp, #12
 800f972:	460e      	mov	r6, r1
 800f974:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 800f978:	469a      	mov	sl, r3
 800f97a:	2901      	cmp	r1, #1
 800f97c:	f04f 037e 	mov.w	r3, #126	; 0x7e
 800f980:	4604      	mov	r4, r0
 800f982:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800f986:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800f98a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 800f98e:	f240 8137 	bls.w	800fc00 <uxr_write_framed_msg+0x298>
 800f992:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 800f996:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 800f99a:	2901      	cmp	r1, #1
 800f99c:	f04f 0202 	mov.w	r2, #2
 800f9a0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f9a4:	f240 808f 	bls.w	800fac6 <uxr_write_framed_msg+0x15e>
 800f9a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9aa:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 800f9ae:	b2dd      	uxtb	r5, r3
 800f9b0:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 800f9b4:	2203      	movs	r2, #3
 800f9b6:	2901      	cmp	r1, #1
 800f9b8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f9bc:	f240 809a 	bls.w	800faf4 <uxr_write_framed_msg+0x18c>
 800f9c0:	18a1      	adds	r1, r4, r2
 800f9c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9c4:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 800f9c8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f9cc:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 800f9d0:	3201      	adds	r2, #1
 800f9d2:	2801      	cmp	r0, #1
 800f9d4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f9d8:	f240 80a0 	bls.w	800fb1c <uxr_write_framed_msg+0x1b4>
 800f9dc:	18a0      	adds	r0, r4, r2
 800f9de:	3201      	adds	r2, #1
 800f9e0:	b2d2      	uxtb	r2, r2
 800f9e2:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800f9e6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	f000 80a9 	beq.w	800fb42 <uxr_write_framed_msg+0x1da>
 800f9f0:	f04f 0900 	mov.w	r9, #0
 800f9f4:	46c8      	mov	r8, r9
 800f9f6:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800f9fa:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 800f9fe:	2901      	cmp	r1, #1
 800fa00:	f240 80c3 	bls.w	800fb8a <uxr_write_framed_msg+0x222>
 800fa04:	2a29      	cmp	r2, #41	; 0x29
 800fa06:	f200 809f 	bhi.w	800fb48 <uxr_write_framed_msg+0x1e0>
 800fa0a:	18a1      	adds	r1, r4, r2
 800fa0c:	3201      	adds	r2, #1
 800fa0e:	b2d2      	uxtb	r2, r2
 800fa10:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 800fa14:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fa18:	ea89 0303 	eor.w	r3, r9, r3
 800fa1c:	498c      	ldr	r1, [pc, #560]	; (800fc50 <uxr_write_framed_msg+0x2e8>)
 800fa1e:	b2db      	uxtb	r3, r3
 800fa20:	f108 0801 	add.w	r8, r8, #1
 800fa24:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fa28:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800fa2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa2e:	4543      	cmp	r3, r8
 800fa30:	d8e1      	bhi.n	800f9f6 <uxr_write_framed_msg+0x8e>
 800fa32:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800fa36:	fa5f f889 	uxtb.w	r8, r9
 800fa3a:	9301      	str	r3, [sp, #4]
 800fa3c:	f04f 0900 	mov.w	r9, #0
 800fa40:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 800fa44:	fa5f f18a 	uxtb.w	r1, sl
 800fa48:	2901      	cmp	r1, #1
 800fa4a:	d921      	bls.n	800fa90 <uxr_write_framed_msg+0x128>
 800fa4c:	2a29      	cmp	r2, #41	; 0x29
 800fa4e:	f240 80af 	bls.w	800fbb0 <uxr_write_framed_msg+0x248>
 800fa52:	2500      	movs	r5, #0
 800fa54:	e000      	b.n	800fa58 <uxr_write_framed_msg+0xf0>
 800fa56:	b160      	cbz	r0, 800fa72 <uxr_write_framed_msg+0x10a>
 800fa58:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800fa5c:	1b52      	subs	r2, r2, r5
 800fa5e:	465b      	mov	r3, fp
 800fa60:	4421      	add	r1, r4
 800fa62:	4638      	mov	r0, r7
 800fa64:	47b0      	blx	r6
 800fa66:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800fa6a:	4405      	add	r5, r0
 800fa6c:	4295      	cmp	r5, r2
 800fa6e:	d3f2      	bcc.n	800fa56 <uxr_write_framed_msg+0xee>
 800fa70:	d003      	beq.n	800fa7a <uxr_write_framed_msg+0x112>
 800fa72:	2000      	movs	r0, #0
 800fa74:	b003      	add	sp, #12
 800fa76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa7a:	fa5f f18a 	uxtb.w	r1, sl
 800fa7e:	f04f 0300 	mov.w	r3, #0
 800fa82:	2901      	cmp	r1, #1
 800fa84:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800fa88:	f04f 0200 	mov.w	r2, #0
 800fa8c:	f200 8090 	bhi.w	800fbb0 <uxr_write_framed_msg+0x248>
 800fa90:	1c51      	adds	r1, r2, #1
 800fa92:	b2c9      	uxtb	r1, r1
 800fa94:	2929      	cmp	r1, #41	; 0x29
 800fa96:	d8dc      	bhi.n	800fa52 <uxr_write_framed_msg+0xea>
 800fa98:	18a5      	adds	r5, r4, r2
 800fa9a:	4421      	add	r1, r4
 800fa9c:	3202      	adds	r2, #2
 800fa9e:	f088 0820 	eor.w	r8, r8, #32
 800faa2:	4648      	mov	r0, r9
 800faa4:	f04f 037d 	mov.w	r3, #125	; 0x7d
 800faa8:	b2d2      	uxtb	r2, r2
 800faaa:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 800faae:	f04f 0901 	mov.w	r9, #1
 800fab2:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 800fab6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800faba:	2800      	cmp	r0, #0
 800fabc:	f040 8085 	bne.w	800fbca <uxr_write_framed_msg+0x262>
 800fac0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fac4:	e7bc      	b.n	800fa40 <uxr_write_framed_msg+0xd8>
 800fac6:	4611      	mov	r1, r2
 800fac8:	f04f 0c03 	mov.w	ip, #3
 800facc:	2204      	movs	r2, #4
 800face:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fad0:	4421      	add	r1, r4
 800fad2:	b2dd      	uxtb	r5, r3
 800fad4:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 800fad8:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 800fadc:	44a4      	add	ip, r4
 800fade:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 800fae2:	f080 0020 	eor.w	r0, r0, #32
 800fae6:	2901      	cmp	r1, #1
 800fae8:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 800faec:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800faf0:	f63f af66 	bhi.w	800f9c0 <uxr_write_framed_msg+0x58>
 800faf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800faf6:	18a0      	adds	r0, r4, r2
 800faf8:	f085 0520 	eor.w	r5, r5, #32
 800fafc:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 800fb00:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800fb04:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 800fb08:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 800fb0c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 800fb10:	3202      	adds	r2, #2
 800fb12:	2801      	cmp	r0, #1
 800fb14:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fb18:	f63f af60 	bhi.w	800f9dc <uxr_write_framed_msg+0x74>
 800fb1c:	1c50      	adds	r0, r2, #1
 800fb1e:	18a5      	adds	r5, r4, r2
 800fb20:	fa54 f080 	uxtab	r0, r4, r0
 800fb24:	3202      	adds	r2, #2
 800fb26:	f081 0120 	eor.w	r1, r1, #32
 800fb2a:	b2d2      	uxtb	r2, r2
 800fb2c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 800fb30:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 800fb34:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800fb38:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	f47f af57 	bne.w	800f9f0 <uxr_write_framed_msg+0x88>
 800fb42:	9301      	str	r3, [sp, #4]
 800fb44:	4698      	mov	r8, r3
 800fb46:	e779      	b.n	800fa3c <uxr_write_framed_msg+0xd4>
 800fb48:	2500      	movs	r5, #0
 800fb4a:	e001      	b.n	800fb50 <uxr_write_framed_msg+0x1e8>
 800fb4c:	2800      	cmp	r0, #0
 800fb4e:	d090      	beq.n	800fa72 <uxr_write_framed_msg+0x10a>
 800fb50:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800fb54:	1b52      	subs	r2, r2, r5
 800fb56:	465b      	mov	r3, fp
 800fb58:	4421      	add	r1, r4
 800fb5a:	4638      	mov	r0, r7
 800fb5c:	47b0      	blx	r6
 800fb5e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800fb62:	4405      	add	r5, r0
 800fb64:	4295      	cmp	r5, r2
 800fb66:	d3f1      	bcc.n	800fb4c <uxr_write_framed_msg+0x1e4>
 800fb68:	d183      	bne.n	800fa72 <uxr_write_framed_msg+0x10a>
 800fb6a:	f04f 0300 	mov.w	r3, #0
 800fb6e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800fb72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb74:	4543      	cmp	r3, r8
 800fb76:	d964      	bls.n	800fc42 <uxr_write_framed_msg+0x2da>
 800fb78:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800fb7c:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 800fb80:	2901      	cmp	r1, #1
 800fb82:	f04f 0200 	mov.w	r2, #0
 800fb86:	f63f af3d 	bhi.w	800fa04 <uxr_write_framed_msg+0x9c>
 800fb8a:	1c51      	adds	r1, r2, #1
 800fb8c:	b2c9      	uxtb	r1, r1
 800fb8e:	2929      	cmp	r1, #41	; 0x29
 800fb90:	d8da      	bhi.n	800fb48 <uxr_write_framed_msg+0x1e0>
 800fb92:	18a0      	adds	r0, r4, r2
 800fb94:	4421      	add	r1, r4
 800fb96:	f04f 057d 	mov.w	r5, #125	; 0x7d
 800fb9a:	3202      	adds	r2, #2
 800fb9c:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 800fba0:	b2d2      	uxtb	r2, r2
 800fba2:	f083 0020 	eor.w	r0, r3, #32
 800fba6:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 800fbaa:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fbae:	e733      	b.n	800fa18 <uxr_write_framed_msg+0xb0>
 800fbb0:	18a1      	adds	r1, r4, r2
 800fbb2:	3201      	adds	r2, #1
 800fbb4:	4648      	mov	r0, r9
 800fbb6:	b2d2      	uxtb	r2, r2
 800fbb8:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 800fbbc:	f04f 0901 	mov.w	r9, #1
 800fbc0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	f43f af7b 	beq.w	800fac0 <uxr_write_framed_msg+0x158>
 800fbca:	2500      	movs	r5, #0
 800fbcc:	e002      	b.n	800fbd4 <uxr_write_framed_msg+0x26c>
 800fbce:	2800      	cmp	r0, #0
 800fbd0:	f43f af4f 	beq.w	800fa72 <uxr_write_framed_msg+0x10a>
 800fbd4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800fbd8:	1b52      	subs	r2, r2, r5
 800fbda:	465b      	mov	r3, fp
 800fbdc:	4421      	add	r1, r4
 800fbde:	4638      	mov	r0, r7
 800fbe0:	47b0      	blx	r6
 800fbe2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800fbe6:	4405      	add	r5, r0
 800fbe8:	4295      	cmp	r5, r2
 800fbea:	d3f0      	bcc.n	800fbce <uxr_write_framed_msg+0x266>
 800fbec:	f47f af41 	bne.w	800fa72 <uxr_write_framed_msg+0x10a>
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800fbf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbf8:	b298      	uxth	r0, r3
 800fbfa:	b003      	add	sp, #12
 800fbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc00:	217d      	movs	r1, #125	; 0x7d
 800fc02:	f082 0220 	eor.w	r2, r2, #32
 800fc06:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 800fc0a:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 800fc0e:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 800fc12:	2901      	cmp	r1, #1
 800fc14:	f04f 0203 	mov.w	r2, #3
 800fc18:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fc1c:	d804      	bhi.n	800fc28 <uxr_write_framed_msg+0x2c0>
 800fc1e:	4611      	mov	r1, r2
 800fc20:	f04f 0c04 	mov.w	ip, #4
 800fc24:	2205      	movs	r2, #5
 800fc26:	e752      	b.n	800face <uxr_write_framed_msg+0x166>
 800fc28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc2a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 800fc2e:	b2dd      	uxtb	r5, r3
 800fc30:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 800fc34:	2204      	movs	r2, #4
 800fc36:	2901      	cmp	r1, #1
 800fc38:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fc3c:	f63f aec0 	bhi.w	800f9c0 <uxr_write_framed_msg+0x58>
 800fc40:	e758      	b.n	800faf4 <uxr_write_framed_msg+0x18c>
 800fc42:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800fc46:	fa5f f889 	uxtb.w	r8, r9
 800fc4a:	9301      	str	r3, [sp, #4]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	e6f5      	b.n	800fa3c <uxr_write_framed_msg+0xd4>
 800fc50:	08012af8 	.word	0x08012af8

0800fc54 <uxr_framing_read_transport>:
 800fc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc58:	4604      	mov	r4, r0
 800fc5a:	b083      	sub	sp, #12
 800fc5c:	461f      	mov	r7, r3
 800fc5e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800fc62:	4689      	mov	r9, r1
 800fc64:	4692      	mov	sl, r2
 800fc66:	f7fb fbff 	bl	800b468 <uxr_millis>
 800fc6a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800fc6e:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 800fc72:	42b3      	cmp	r3, r6
 800fc74:	4680      	mov	r8, r0
 800fc76:	d061      	beq.n	800fd3c <uxr_framing_read_transport+0xe8>
 800fc78:	d81c      	bhi.n	800fcb4 <uxr_framing_read_transport+0x60>
 800fc7a:	1e75      	subs	r5, r6, #1
 800fc7c:	1aed      	subs	r5, r5, r3
 800fc7e:	b2ed      	uxtb	r5, r5
 800fc80:	2600      	movs	r6, #0
 800fc82:	455d      	cmp	r5, fp
 800fc84:	d81f      	bhi.n	800fcc6 <uxr_framing_read_transport+0x72>
 800fc86:	19ab      	adds	r3, r5, r6
 800fc88:	455b      	cmp	r3, fp
 800fc8a:	bf84      	itt	hi
 800fc8c:	ebab 0605 	subhi.w	r6, fp, r5
 800fc90:	b2f6      	uxtbhi	r6, r6
 800fc92:	b9ed      	cbnz	r5, 800fcd0 <uxr_framing_read_transport+0x7c>
 800fc94:	f04f 0b00 	mov.w	fp, #0
 800fc98:	f7fb fbe6 	bl	800b468 <uxr_millis>
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	eba0 0808 	sub.w	r8, r0, r8
 800fca2:	eba3 0308 	sub.w	r3, r3, r8
 800fca6:	4658      	mov	r0, fp
 800fca8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fcac:	603b      	str	r3, [r7, #0]
 800fcae:	b003      	add	sp, #12
 800fcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcb4:	2e00      	cmp	r6, #0
 800fcb6:	d049      	beq.n	800fd4c <uxr_framing_read_transport+0xf8>
 800fcb8:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 800fcbc:	b2ed      	uxtb	r5, r5
 800fcbe:	3e01      	subs	r6, #1
 800fcc0:	455d      	cmp	r5, fp
 800fcc2:	b2f6      	uxtb	r6, r6
 800fcc4:	d9df      	bls.n	800fc86 <uxr_framing_read_transport+0x32>
 800fcc6:	fa5f f58b 	uxtb.w	r5, fp
 800fcca:	2600      	movs	r6, #0
 800fccc:	2d00      	cmp	r5, #0
 800fcce:	d0e1      	beq.n	800fc94 <uxr_framing_read_transport+0x40>
 800fcd0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800fcd4:	3102      	adds	r1, #2
 800fcd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcd8:	9300      	str	r3, [sp, #0]
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	4421      	add	r1, r4
 800fcde:	462a      	mov	r2, r5
 800fce0:	4650      	mov	r0, sl
 800fce2:	47c8      	blx	r9
 800fce4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800fce8:	4a1a      	ldr	r2, [pc, #104]	; (800fd54 <uxr_framing_read_transport+0x100>)
 800fcea:	4403      	add	r3, r0
 800fcec:	0859      	lsrs	r1, r3, #1
 800fcee:	fba2 2101 	umull	r2, r1, r2, r1
 800fcf2:	0889      	lsrs	r1, r1, #2
 800fcf4:	222a      	movs	r2, #42	; 0x2a
 800fcf6:	fb02 3111 	mls	r1, r2, r1, r3
 800fcfa:	4683      	mov	fp, r0
 800fcfc:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 800fd00:	2800      	cmp	r0, #0
 800fd02:	d0c7      	beq.n	800fc94 <uxr_framing_read_transport+0x40>
 800fd04:	42a8      	cmp	r0, r5
 800fd06:	d1c7      	bne.n	800fc98 <uxr_framing_read_transport+0x44>
 800fd08:	2e00      	cmp	r6, #0
 800fd0a:	d0c5      	beq.n	800fc98 <uxr_framing_read_transport+0x44>
 800fd0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd0e:	9300      	str	r3, [sp, #0]
 800fd10:	3102      	adds	r1, #2
 800fd12:	4632      	mov	r2, r6
 800fd14:	4421      	add	r1, r4
 800fd16:	2300      	movs	r3, #0
 800fd18:	4650      	mov	r0, sl
 800fd1a:	47c8      	blx	r9
 800fd1c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800fd20:	4a0c      	ldr	r2, [pc, #48]	; (800fd54 <uxr_framing_read_transport+0x100>)
 800fd22:	180b      	adds	r3, r1, r0
 800fd24:	0859      	lsrs	r1, r3, #1
 800fd26:	fba2 1201 	umull	r1, r2, r2, r1
 800fd2a:	0892      	lsrs	r2, r2, #2
 800fd2c:	212a      	movs	r1, #42	; 0x2a
 800fd2e:	fb01 3312 	mls	r3, r1, r2, r3
 800fd32:	eb00 0b05 	add.w	fp, r0, r5
 800fd36:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800fd3a:	e7ad      	b.n	800fc98 <uxr_framing_read_transport+0x44>
 800fd3c:	2600      	movs	r6, #0
 800fd3e:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 800fd42:	85a6      	strh	r6, [r4, #44]	; 0x2c
 800fd44:	d9bf      	bls.n	800fcc6 <uxr_framing_read_transport+0x72>
 800fd46:	2102      	movs	r1, #2
 800fd48:	2529      	movs	r5, #41	; 0x29
 800fd4a:	e7c4      	b.n	800fcd6 <uxr_framing_read_transport+0x82>
 800fd4c:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 800fd50:	b2ed      	uxtb	r5, r5
 800fd52:	e796      	b.n	800fc82 <uxr_framing_read_transport+0x2e>
 800fd54:	30c30c31 	.word	0x30c30c31

0800fd58 <uxr_read_framed_msg>:
 800fd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd5c:	461e      	mov	r6, r3
 800fd5e:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 800fd62:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800fd66:	429d      	cmp	r5, r3
 800fd68:	b083      	sub	sp, #12
 800fd6a:	4604      	mov	r4, r0
 800fd6c:	4688      	mov	r8, r1
 800fd6e:	4691      	mov	r9, r2
 800fd70:	f000 8188 	beq.w	8010084 <uxr_read_framed_msg+0x32c>
 800fd74:	7823      	ldrb	r3, [r4, #0]
 800fd76:	4dc1      	ldr	r5, [pc, #772]	; (801007c <uxr_read_framed_msg+0x324>)
 800fd78:	4fc1      	ldr	r7, [pc, #772]	; (8010080 <uxr_read_framed_msg+0x328>)
 800fd7a:	2b07      	cmp	r3, #7
 800fd7c:	d8fd      	bhi.n	800fd7a <uxr_read_framed_msg+0x22>
 800fd7e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fd82:	0115      	.short	0x0115
 800fd84:	00d600f6 	.word	0x00d600f6
 800fd88:	009000b9 	.word	0x009000b9
 800fd8c:	0030004d 	.word	0x0030004d
 800fd90:	0008      	.short	0x0008
 800fd92:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800fd96:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800fd9a:	4299      	cmp	r1, r3
 800fd9c:	f000 814a 	beq.w	8010034 <uxr_read_framed_msg+0x2dc>
 800fda0:	18e2      	adds	r2, r4, r3
 800fda2:	7892      	ldrb	r2, [r2, #2]
 800fda4:	2a7d      	cmp	r2, #125	; 0x7d
 800fda6:	f000 8199 	beq.w	80100dc <uxr_read_framed_msg+0x384>
 800fdaa:	3301      	adds	r3, #1
 800fdac:	0858      	lsrs	r0, r3, #1
 800fdae:	fba5 1000 	umull	r1, r0, r5, r0
 800fdb2:	0880      	lsrs	r0, r0, #2
 800fdb4:	212a      	movs	r1, #42	; 0x2a
 800fdb6:	fb01 3310 	mls	r3, r1, r0, r3
 800fdba:	2a7e      	cmp	r2, #126	; 0x7e
 800fdbc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800fdc0:	f000 8252 	beq.w	8010268 <uxr_read_framed_msg+0x510>
 800fdc4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800fdc6:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800fdc8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	2200      	movs	r2, #0
 800fdd0:	4299      	cmp	r1, r3
 800fdd2:	86a3      	strh	r3, [r4, #52]	; 0x34
 800fdd4:	7022      	strb	r2, [r4, #0]
 800fdd6:	f000 8179 	beq.w	80100cc <uxr_read_framed_msg+0x374>
 800fdda:	2000      	movs	r0, #0
 800fddc:	b003      	add	sp, #12
 800fdde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800fde6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800fdea:	4299      	cmp	r1, r3
 800fdec:	f000 8131 	beq.w	8010052 <uxr_read_framed_msg+0x2fa>
 800fdf0:	18e2      	adds	r2, r4, r3
 800fdf2:	7890      	ldrb	r0, [r2, #2]
 800fdf4:	287d      	cmp	r0, #125	; 0x7d
 800fdf6:	f000 8190 	beq.w	801011a <uxr_read_framed_msg+0x3c2>
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	085a      	lsrs	r2, r3, #1
 800fdfe:	fba5 1202 	umull	r1, r2, r5, r2
 800fe02:	0892      	lsrs	r2, r2, #2
 800fe04:	212a      	movs	r1, #42	; 0x2a
 800fe06:	fb01 3312 	mls	r3, r1, r2, r3
 800fe0a:	287e      	cmp	r0, #126	; 0x7e
 800fe0c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800fe10:	f000 821a 	beq.w	8010248 <uxr_read_framed_msg+0x4f0>
 800fe14:	2307      	movs	r3, #7
 800fe16:	86a0      	strh	r0, [r4, #52]	; 0x34
 800fe18:	7023      	strb	r3, [r4, #0]
 800fe1a:	e7ae      	b.n	800fd7a <uxr_read_framed_msg+0x22>
 800fe1c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800fe1e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 800fe22:	459e      	cmp	lr, r3
 800fe24:	d938      	bls.n	800fe98 <uxr_read_framed_msg+0x140>
 800fe26:	ee07 8a90 	vmov	s15, r8
 800fe2a:	212a      	movs	r1, #42	; 0x2a
 800fe2c:	e020      	b.n	800fe70 <uxr_read_framed_msg+0x118>
 800fe2e:	f89b c002 	ldrb.w	ip, [fp, #2]
 800fe32:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 800fe36:	f000 80d4 	beq.w	800ffe2 <uxr_read_framed_msg+0x28a>
 800fe3a:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 800fe3e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800fe42:	f000 8219 	beq.w	8010278 <uxr_read_framed_msg+0x520>
 800fe46:	f806 c003 	strb.w	ip, [r6, r3]
 800fe4a:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 800fe4e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800fe50:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 800fe54:	ea8a 000c 	eor.w	r0, sl, ip
 800fe58:	b2c0      	uxtb	r0, r0
 800fe5a:	3301      	adds	r3, #1
 800fe5c:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800fe60:	b29b      	uxth	r3, r3
 800fe62:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800fe66:	4573      	cmp	r3, lr
 800fe68:	8663      	strh	r3, [r4, #50]	; 0x32
 800fe6a:	86e2      	strh	r2, [r4, #54]	; 0x36
 800fe6c:	f080 8120 	bcs.w	80100b0 <uxr_read_framed_msg+0x358>
 800fe70:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 800fe74:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 800fe78:	f100 0c01 	add.w	ip, r0, #1
 800fe7c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800fe80:	fba5 8202 	umull	r8, r2, r5, r2
 800fe84:	0892      	lsrs	r2, r2, #2
 800fe86:	4582      	cmp	sl, r0
 800fe88:	eb04 0b00 	add.w	fp, r4, r0
 800fe8c:	fb01 c212 	mls	r2, r1, r2, ip
 800fe90:	d1cd      	bne.n	800fe2e <uxr_read_framed_msg+0xd6>
 800fe92:	ee17 8a90 	vmov	r8, s15
 800fe96:	459e      	cmp	lr, r3
 800fe98:	f040 8111 	bne.w	80100be <uxr_read_framed_msg+0x366>
 800fe9c:	2306      	movs	r3, #6
 800fe9e:	7023      	strb	r3, [r4, #0]
 800fea0:	e76b      	b.n	800fd7a <uxr_read_framed_msg+0x22>
 800fea2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800fea6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800feaa:	4298      	cmp	r0, r3
 800feac:	f000 80c2 	beq.w	8010034 <uxr_read_framed_msg+0x2dc>
 800feb0:	18e2      	adds	r2, r4, r3
 800feb2:	7891      	ldrb	r1, [r2, #2]
 800feb4:	297d      	cmp	r1, #125	; 0x7d
 800feb6:	f000 814c 	beq.w	8010152 <uxr_read_framed_msg+0x3fa>
 800feba:	3301      	adds	r3, #1
 800febc:	085a      	lsrs	r2, r3, #1
 800febe:	fba5 0202 	umull	r0, r2, r5, r2
 800fec2:	0892      	lsrs	r2, r2, #2
 800fec4:	202a      	movs	r0, #42	; 0x2a
 800fec6:	fb00 3312 	mls	r3, r0, r2, r3
 800feca:	297e      	cmp	r1, #126	; 0x7e
 800fecc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800fed0:	f000 81ca 	beq.w	8010268 <uxr_read_framed_msg+0x510>
 800fed4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800fed6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800feda:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fedc:	b29b      	uxth	r3, r3
 800fede:	2000      	movs	r0, #0
 800fee0:	428b      	cmp	r3, r1
 800fee2:	8623      	strh	r3, [r4, #48]	; 0x30
 800fee4:	8660      	strh	r0, [r4, #50]	; 0x32
 800fee6:	86e0      	strh	r0, [r4, #54]	; 0x36
 800fee8:	f240 80df 	bls.w	80100aa <uxr_read_framed_msg+0x352>
 800feec:	7020      	strb	r0, [r4, #0]
 800feee:	b003      	add	sp, #12
 800fef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fef4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800fef8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800fefc:	4299      	cmp	r1, r3
 800fefe:	f000 80a8 	beq.w	8010052 <uxr_read_framed_msg+0x2fa>
 800ff02:	18e2      	adds	r2, r4, r3
 800ff04:	7890      	ldrb	r0, [r2, #2]
 800ff06:	287d      	cmp	r0, #125	; 0x7d
 800ff08:	f000 8164 	beq.w	80101d4 <uxr_read_framed_msg+0x47c>
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	085a      	lsrs	r2, r3, #1
 800ff10:	fba5 1202 	umull	r1, r2, r5, r2
 800ff14:	0892      	lsrs	r2, r2, #2
 800ff16:	212a      	movs	r1, #42	; 0x2a
 800ff18:	fb01 3312 	mls	r3, r1, r2, r3
 800ff1c:	287e      	cmp	r0, #126	; 0x7e
 800ff1e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800ff22:	f000 8191 	beq.w	8010248 <uxr_read_framed_msg+0x4f0>
 800ff26:	2304      	movs	r3, #4
 800ff28:	8620      	strh	r0, [r4, #48]	; 0x30
 800ff2a:	7023      	strb	r3, [r4, #0]
 800ff2c:	e725      	b.n	800fd7a <uxr_read_framed_msg+0x22>
 800ff2e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800ff32:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800ff36:	4290      	cmp	r0, r2
 800ff38:	f000 80b3 	beq.w	80100a2 <uxr_read_framed_msg+0x34a>
 800ff3c:	18a3      	adds	r3, r4, r2
 800ff3e:	7899      	ldrb	r1, [r3, #2]
 800ff40:	297d      	cmp	r1, #125	; 0x7d
 800ff42:	f000 8164 	beq.w	801020e <uxr_read_framed_msg+0x4b6>
 800ff46:	3201      	adds	r2, #1
 800ff48:	0850      	lsrs	r0, r2, #1
 800ff4a:	fba5 3000 	umull	r3, r0, r5, r0
 800ff4e:	0880      	lsrs	r0, r0, #2
 800ff50:	232a      	movs	r3, #42	; 0x2a
 800ff52:	fb03 2210 	mls	r2, r3, r0, r2
 800ff56:	297e      	cmp	r1, #126	; 0x7e
 800ff58:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800ff5c:	f000 8188 	beq.w	8010270 <uxr_read_framed_msg+0x518>
 800ff60:	7863      	ldrb	r3, [r4, #1]
 800ff62:	428b      	cmp	r3, r1
 800ff64:	bf0c      	ite	eq
 800ff66:	2303      	moveq	r3, #3
 800ff68:	2300      	movne	r3, #0
 800ff6a:	7023      	strb	r3, [r4, #0]
 800ff6c:	e705      	b.n	800fd7a <uxr_read_framed_msg+0x22>
 800ff6e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800ff72:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800ff76:	2200      	movs	r2, #0
 800ff78:	4299      	cmp	r1, r3
 800ff7a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 800ff7e:	d06c      	beq.n	801005a <uxr_read_framed_msg+0x302>
 800ff80:	18e2      	adds	r2, r4, r3
 800ff82:	7890      	ldrb	r0, [r2, #2]
 800ff84:	287d      	cmp	r0, #125	; 0x7d
 800ff86:	f000 8101 	beq.w	801018c <uxr_read_framed_msg+0x434>
 800ff8a:	3301      	adds	r3, #1
 800ff8c:	085a      	lsrs	r2, r3, #1
 800ff8e:	fba5 1202 	umull	r1, r2, r5, r2
 800ff92:	0892      	lsrs	r2, r2, #2
 800ff94:	212a      	movs	r1, #42	; 0x2a
 800ff96:	fb01 3312 	mls	r3, r1, r2, r3
 800ff9a:	287e      	cmp	r0, #126	; 0x7e
 800ff9c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 800ffa0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800ffa4:	d059      	beq.n	801005a <uxr_read_framed_msg+0x302>
 800ffa6:	2302      	movs	r3, #2
 800ffa8:	7023      	strb	r3, [r4, #0]
 800ffaa:	e6e6      	b.n	800fd7a <uxr_read_framed_msg+0x22>
 800ffac:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 800ffb0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800ffb4:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 800ffb8:	1c51      	adds	r1, r2, #1
 800ffba:	084b      	lsrs	r3, r1, #1
 800ffbc:	fba5 c303 	umull	ip, r3, r5, r3
 800ffc0:	089b      	lsrs	r3, r3, #2
 800ffc2:	fb0e 1313 	mls	r3, lr, r3, r1
 800ffc6:	4592      	cmp	sl, r2
 800ffc8:	eb04 0002 	add.w	r0, r4, r2
 800ffcc:	b2da      	uxtb	r2, r3
 800ffce:	f43f af04 	beq.w	800fdda <uxr_read_framed_msg+0x82>
 800ffd2:	7883      	ldrb	r3, [r0, #2]
 800ffd4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800ffd8:	2b7e      	cmp	r3, #126	; 0x7e
 800ffda:	d1ed      	bne.n	800ffb8 <uxr_read_framed_msg+0x260>
 800ffdc:	2301      	movs	r3, #1
 800ffde:	7023      	strb	r3, [r4, #0]
 800ffe0:	e6cb      	b.n	800fd7a <uxr_read_framed_msg+0x22>
 800ffe2:	f100 0c01 	add.w	ip, r0, #1
 800ffe6:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800ffea:	fba5 8202 	umull	r8, r2, r5, r2
 800ffee:	0892      	lsrs	r2, r2, #2
 800fff0:	fb01 c212 	mls	r2, r1, r2, ip
 800fff4:	eb04 0c02 	add.w	ip, r4, r2
 800fff8:	b2d2      	uxtb	r2, r2
 800fffa:	4592      	cmp	sl, r2
 800fffc:	f100 0002 	add.w	r0, r0, #2
 8010000:	f43f af47 	beq.w	800fe92 <uxr_read_framed_msg+0x13a>
 8010004:	0842      	lsrs	r2, r0, #1
 8010006:	f89c a002 	ldrb.w	sl, [ip, #2]
 801000a:	fba5 8202 	umull	r8, r2, r5, r2
 801000e:	0892      	lsrs	r2, r2, #2
 8010010:	fb01 0012 	mls	r0, r1, r2, r0
 8010014:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 8010018:	f08a 0c20 	eor.w	ip, sl, #32
 801001c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8010020:	f47f af11 	bne.w	800fe46 <uxr_read_framed_msg+0xee>
 8010024:	459e      	cmp	lr, r3
 8010026:	ee17 8a90 	vmov	r8, s15
 801002a:	f43f af37 	beq.w	800fe9c <uxr_read_framed_msg+0x144>
 801002e:	2301      	movs	r3, #1
 8010030:	7023      	strb	r3, [r4, #0]
 8010032:	e6a2      	b.n	800fd7a <uxr_read_framed_msg+0x22>
 8010034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010036:	9300      	str	r3, [sp, #0]
 8010038:	2301      	movs	r3, #1
 801003a:	9301      	str	r3, [sp, #4]
 801003c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801003e:	464a      	mov	r2, r9
 8010040:	4641      	mov	r1, r8
 8010042:	4620      	mov	r0, r4
 8010044:	f7ff fe06 	bl	800fc54 <uxr_framing_read_transport>
 8010048:	2800      	cmp	r0, #0
 801004a:	f43f aec6 	beq.w	800fdda <uxr_read_framed_msg+0x82>
 801004e:	7823      	ldrb	r3, [r4, #0]
 8010050:	e693      	b.n	800fd7a <uxr_read_framed_msg+0x22>
 8010052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010054:	9300      	str	r3, [sp, #0]
 8010056:	2302      	movs	r3, #2
 8010058:	e7ef      	b.n	801003a <uxr_read_framed_msg+0x2e2>
 801005a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801005c:	9300      	str	r3, [sp, #0]
 801005e:	2304      	movs	r3, #4
 8010060:	9301      	str	r3, [sp, #4]
 8010062:	464a      	mov	r2, r9
 8010064:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010066:	4641      	mov	r1, r8
 8010068:	4620      	mov	r0, r4
 801006a:	f7ff fdf3 	bl	800fc54 <uxr_framing_read_transport>
 801006e:	2800      	cmp	r0, #0
 8010070:	d1ed      	bne.n	801004e <uxr_read_framed_msg+0x2f6>
 8010072:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8010076:	2b7e      	cmp	r3, #126	; 0x7e
 8010078:	d0e9      	beq.n	801004e <uxr_read_framed_msg+0x2f6>
 801007a:	e6ae      	b.n	800fdda <uxr_read_framed_msg+0x82>
 801007c:	30c30c31 	.word	0x30c30c31
 8010080:	08012af8 	.word	0x08012af8
 8010084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010086:	9300      	str	r3, [sp, #0]
 8010088:	2305      	movs	r3, #5
 801008a:	9301      	str	r3, [sp, #4]
 801008c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801008e:	f7ff fde1 	bl	800fc54 <uxr_framing_read_transport>
 8010092:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8010096:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801009a:	429a      	cmp	r2, r3
 801009c:	f43f ae9d 	beq.w	800fdda <uxr_read_framed_msg+0x82>
 80100a0:	e668      	b.n	800fd74 <uxr_read_framed_msg+0x1c>
 80100a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80100a4:	9300      	str	r3, [sp, #0]
 80100a6:	2303      	movs	r3, #3
 80100a8:	e7c7      	b.n	801003a <uxr_read_framed_msg+0x2e2>
 80100aa:	2305      	movs	r3, #5
 80100ac:	7023      	strb	r3, [r4, #0]
 80100ae:	e664      	b.n	800fd7a <uxr_read_framed_msg+0x22>
 80100b0:	ee17 8a90 	vmov	r8, s15
 80100b4:	f43f aef2 	beq.w	800fe9c <uxr_read_framed_msg+0x144>
 80100b8:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 80100bc:	d08e      	beq.n	800ffdc <uxr_read_framed_msg+0x284>
 80100be:	ebae 0303 	sub.w	r3, lr, r3
 80100c2:	3302      	adds	r3, #2
 80100c4:	9301      	str	r3, [sp, #4]
 80100c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80100c8:	9300      	str	r3, [sp, #0]
 80100ca:	e7b7      	b.n	801003c <uxr_read_framed_msg+0x2e4>
 80100cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80100ce:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80100d2:	7013      	strb	r3, [r2, #0]
 80100d4:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80100d6:	b003      	add	sp, #12
 80100d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100dc:	f103 0c01 	add.w	ip, r3, #1
 80100e0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80100e4:	fba5 0202 	umull	r0, r2, r5, r2
 80100e8:	0892      	lsrs	r2, r2, #2
 80100ea:	202a      	movs	r0, #42	; 0x2a
 80100ec:	fb00 c212 	mls	r2, r0, r2, ip
 80100f0:	fa5f fc82 	uxtb.w	ip, r2
 80100f4:	4561      	cmp	r1, ip
 80100f6:	d09d      	beq.n	8010034 <uxr_read_framed_msg+0x2dc>
 80100f8:	3302      	adds	r3, #2
 80100fa:	4422      	add	r2, r4
 80100fc:	0859      	lsrs	r1, r3, #1
 80100fe:	7892      	ldrb	r2, [r2, #2]
 8010100:	fba5 c101 	umull	ip, r1, r5, r1
 8010104:	0889      	lsrs	r1, r1, #2
 8010106:	fb00 3311 	mls	r3, r0, r1, r3
 801010a:	2a7e      	cmp	r2, #126	; 0x7e
 801010c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010110:	f000 80aa 	beq.w	8010268 <uxr_read_framed_msg+0x510>
 8010114:	f082 0220 	eor.w	r2, r2, #32
 8010118:	e654      	b.n	800fdc4 <uxr_read_framed_msg+0x6c>
 801011a:	1c58      	adds	r0, r3, #1
 801011c:	0842      	lsrs	r2, r0, #1
 801011e:	fba5 c202 	umull	ip, r2, r5, r2
 8010122:	0892      	lsrs	r2, r2, #2
 8010124:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8010128:	fb0c 0212 	mls	r2, ip, r2, r0
 801012c:	b2d0      	uxtb	r0, r2
 801012e:	4281      	cmp	r1, r0
 8010130:	d08f      	beq.n	8010052 <uxr_read_framed_msg+0x2fa>
 8010132:	4422      	add	r2, r4
 8010134:	3302      	adds	r3, #2
 8010136:	7890      	ldrb	r0, [r2, #2]
 8010138:	085a      	lsrs	r2, r3, #1
 801013a:	fba5 1202 	umull	r1, r2, r5, r2
 801013e:	0892      	lsrs	r2, r2, #2
 8010140:	fb0c 3312 	mls	r3, ip, r2, r3
 8010144:	287e      	cmp	r0, #126	; 0x7e
 8010146:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801014a:	d07d      	beq.n	8010248 <uxr_read_framed_msg+0x4f0>
 801014c:	f080 0020 	eor.w	r0, r0, #32
 8010150:	e660      	b.n	800fe14 <uxr_read_framed_msg+0xbc>
 8010152:	1c59      	adds	r1, r3, #1
 8010154:	084a      	lsrs	r2, r1, #1
 8010156:	fba5 c202 	umull	ip, r2, r5, r2
 801015a:	0892      	lsrs	r2, r2, #2
 801015c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8010160:	fb0c 1212 	mls	r2, ip, r2, r1
 8010164:	b2d1      	uxtb	r1, r2
 8010166:	4288      	cmp	r0, r1
 8010168:	f43f af64 	beq.w	8010034 <uxr_read_framed_msg+0x2dc>
 801016c:	4422      	add	r2, r4
 801016e:	3302      	adds	r3, #2
 8010170:	7891      	ldrb	r1, [r2, #2]
 8010172:	085a      	lsrs	r2, r3, #1
 8010174:	fba5 0202 	umull	r0, r2, r5, r2
 8010178:	0892      	lsrs	r2, r2, #2
 801017a:	fb0c 3312 	mls	r3, ip, r2, r3
 801017e:	297e      	cmp	r1, #126	; 0x7e
 8010180:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010184:	d070      	beq.n	8010268 <uxr_read_framed_msg+0x510>
 8010186:	f081 0120 	eor.w	r1, r1, #32
 801018a:	e6a3      	b.n	800fed4 <uxr_read_framed_msg+0x17c>
 801018c:	f103 0c01 	add.w	ip, r3, #1
 8010190:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010194:	fba5 0202 	umull	r0, r2, r5, r2
 8010198:	0892      	lsrs	r2, r2, #2
 801019a:	202a      	movs	r0, #42	; 0x2a
 801019c:	fb00 c212 	mls	r2, r0, r2, ip
 80101a0:	fa5f fc82 	uxtb.w	ip, r2
 80101a4:	4561      	cmp	r1, ip
 80101a6:	f43f af58 	beq.w	801005a <uxr_read_framed_msg+0x302>
 80101aa:	4422      	add	r2, r4
 80101ac:	3302      	adds	r3, #2
 80101ae:	7891      	ldrb	r1, [r2, #2]
 80101b0:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 80101b4:	085a      	lsrs	r2, r3, #1
 80101b6:	fba5 c202 	umull	ip, r2, r5, r2
 80101ba:	0892      	lsrs	r2, r2, #2
 80101bc:	fb00 3312 	mls	r3, r0, r2, r3
 80101c0:	297e      	cmp	r1, #126	; 0x7e
 80101c2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80101c6:	f43f af48 	beq.w	801005a <uxr_read_framed_msg+0x302>
 80101ca:	f081 0120 	eor.w	r1, r1, #32
 80101ce:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 80101d2:	e6e8      	b.n	800ffa6 <uxr_read_framed_msg+0x24e>
 80101d4:	1c58      	adds	r0, r3, #1
 80101d6:	0842      	lsrs	r2, r0, #1
 80101d8:	fba5 c202 	umull	ip, r2, r5, r2
 80101dc:	0892      	lsrs	r2, r2, #2
 80101de:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80101e2:	fb0c 0212 	mls	r2, ip, r2, r0
 80101e6:	b2d0      	uxtb	r0, r2
 80101e8:	4281      	cmp	r1, r0
 80101ea:	f43f af32 	beq.w	8010052 <uxr_read_framed_msg+0x2fa>
 80101ee:	4422      	add	r2, r4
 80101f0:	3302      	adds	r3, #2
 80101f2:	7890      	ldrb	r0, [r2, #2]
 80101f4:	085a      	lsrs	r2, r3, #1
 80101f6:	fba5 1202 	umull	r1, r2, r5, r2
 80101fa:	0892      	lsrs	r2, r2, #2
 80101fc:	fb0c 3312 	mls	r3, ip, r2, r3
 8010200:	287e      	cmp	r0, #126	; 0x7e
 8010202:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010206:	d01f      	beq.n	8010248 <uxr_read_framed_msg+0x4f0>
 8010208:	f080 0020 	eor.w	r0, r0, #32
 801020c:	e68b      	b.n	800ff26 <uxr_read_framed_msg+0x1ce>
 801020e:	1c51      	adds	r1, r2, #1
 8010210:	084b      	lsrs	r3, r1, #1
 8010212:	fba5 c303 	umull	ip, r3, r5, r3
 8010216:	089b      	lsrs	r3, r3, #2
 8010218:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801021c:	fb0c 1313 	mls	r3, ip, r3, r1
 8010220:	b2d9      	uxtb	r1, r3
 8010222:	4288      	cmp	r0, r1
 8010224:	f43f af3d 	beq.w	80100a2 <uxr_read_framed_msg+0x34a>
 8010228:	3202      	adds	r2, #2
 801022a:	4423      	add	r3, r4
 801022c:	0850      	lsrs	r0, r2, #1
 801022e:	789b      	ldrb	r3, [r3, #2]
 8010230:	fba5 1000 	umull	r1, r0, r5, r0
 8010234:	0880      	lsrs	r0, r0, #2
 8010236:	fb0c 2210 	mls	r2, ip, r0, r2
 801023a:	2b7e      	cmp	r3, #126	; 0x7e
 801023c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8010240:	d016      	beq.n	8010270 <uxr_read_framed_msg+0x518>
 8010242:	f083 0120 	eor.w	r1, r3, #32
 8010246:	e68b      	b.n	800ff60 <uxr_read_framed_msg+0x208>
 8010248:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801024a:	9300      	str	r3, [sp, #0]
 801024c:	2302      	movs	r3, #2
 801024e:	9301      	str	r3, [sp, #4]
 8010250:	464a      	mov	r2, r9
 8010252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010254:	4641      	mov	r1, r8
 8010256:	4620      	mov	r0, r4
 8010258:	f7ff fcfc 	bl	800fc54 <uxr_framing_read_transport>
 801025c:	2800      	cmp	r0, #0
 801025e:	f47f aef6 	bne.w	801004e <uxr_read_framed_msg+0x2f6>
 8010262:	2301      	movs	r3, #1
 8010264:	7023      	strb	r3, [r4, #0]
 8010266:	e588      	b.n	800fd7a <uxr_read_framed_msg+0x22>
 8010268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801026a:	9300      	str	r3, [sp, #0]
 801026c:	2301      	movs	r3, #1
 801026e:	e7ee      	b.n	801024e <uxr_read_framed_msg+0x4f6>
 8010270:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010272:	9300      	str	r3, [sp, #0]
 8010274:	2303      	movs	r3, #3
 8010276:	e7ea      	b.n	801024e <uxr_read_framed_msg+0x4f6>
 8010278:	ee17 8a90 	vmov	r8, s15
 801027c:	e6ae      	b.n	800ffdc <uxr_read_framed_msg+0x284>
 801027e:	bf00      	nop

08010280 <rcl_get_default_domain_id>:
 8010280:	b530      	push	{r4, r5, lr}
 8010282:	b083      	sub	sp, #12
 8010284:	2300      	movs	r3, #0
 8010286:	9300      	str	r3, [sp, #0]
 8010288:	b1d0      	cbz	r0, 80102c0 <rcl_get_default_domain_id+0x40>
 801028a:	4604      	mov	r4, r0
 801028c:	4669      	mov	r1, sp
 801028e:	4815      	ldr	r0, [pc, #84]	; (80102e4 <rcl_get_default_domain_id+0x64>)
 8010290:	f7fd f93a 	bl	800d508 <rcutils_get_env>
 8010294:	4602      	mov	r2, r0
 8010296:	b110      	cbz	r0, 801029e <rcl_get_default_domain_id+0x1e>
 8010298:	2001      	movs	r0, #1
 801029a:	b003      	add	sp, #12
 801029c:	bd30      	pop	{r4, r5, pc}
 801029e:	9b00      	ldr	r3, [sp, #0]
 80102a0:	b18b      	cbz	r3, 80102c6 <rcl_get_default_domain_id+0x46>
 80102a2:	7818      	ldrb	r0, [r3, #0]
 80102a4:	2800      	cmp	r0, #0
 80102a6:	d0f8      	beq.n	801029a <rcl_get_default_domain_id+0x1a>
 80102a8:	a901      	add	r1, sp, #4
 80102aa:	4618      	mov	r0, r3
 80102ac:	9201      	str	r2, [sp, #4]
 80102ae:	f000 fe89 	bl	8010fc4 <strtoul>
 80102b2:	4605      	mov	r5, r0
 80102b4:	b150      	cbz	r0, 80102cc <rcl_get_default_domain_id+0x4c>
 80102b6:	1c43      	adds	r3, r0, #1
 80102b8:	d00d      	beq.n	80102d6 <rcl_get_default_domain_id+0x56>
 80102ba:	6025      	str	r5, [r4, #0]
 80102bc:	2000      	movs	r0, #0
 80102be:	e7ec      	b.n	801029a <rcl_get_default_domain_id+0x1a>
 80102c0:	200b      	movs	r0, #11
 80102c2:	b003      	add	sp, #12
 80102c4:	bd30      	pop	{r4, r5, pc}
 80102c6:	4618      	mov	r0, r3
 80102c8:	b003      	add	sp, #12
 80102ca:	bd30      	pop	{r4, r5, pc}
 80102cc:	9b01      	ldr	r3, [sp, #4]
 80102ce:	781b      	ldrb	r3, [r3, #0]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d0f2      	beq.n	80102ba <rcl_get_default_domain_id+0x3a>
 80102d4:	e7e0      	b.n	8010298 <rcl_get_default_domain_id+0x18>
 80102d6:	f001 f8ed 	bl	80114b4 <__errno>
 80102da:	6803      	ldr	r3, [r0, #0]
 80102dc:	2b22      	cmp	r3, #34	; 0x22
 80102de:	d1ec      	bne.n	80102ba <rcl_get_default_domain_id+0x3a>
 80102e0:	e7da      	b.n	8010298 <rcl_get_default_domain_id+0x18>
 80102e2:	bf00      	nop
 80102e4:	08012cf8 	.word	0x08012cf8

080102e8 <rcl_expand_topic_name>:
 80102e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102ec:	b08b      	sub	sp, #44	; 0x2c
 80102ee:	9306      	str	r3, [sp, #24]
 80102f0:	2800      	cmp	r0, #0
 80102f2:	f000 80ad 	beq.w	8010450 <rcl_expand_topic_name+0x168>
 80102f6:	460e      	mov	r6, r1
 80102f8:	2900      	cmp	r1, #0
 80102fa:	f000 80a9 	beq.w	8010450 <rcl_expand_topic_name+0x168>
 80102fe:	4617      	mov	r7, r2
 8010300:	2a00      	cmp	r2, #0
 8010302:	f000 80a5 	beq.w	8010450 <rcl_expand_topic_name+0x168>
 8010306:	2b00      	cmp	r3, #0
 8010308:	f000 80a2 	beq.w	8010450 <rcl_expand_topic_name+0x168>
 801030c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801030e:	2b00      	cmp	r3, #0
 8010310:	f000 809e 	beq.w	8010450 <rcl_expand_topic_name+0x168>
 8010314:	2200      	movs	r2, #0
 8010316:	a909      	add	r1, sp, #36	; 0x24
 8010318:	4680      	mov	r8, r0
 801031a:	f000 f9f5 	bl	8010708 <rcl_validate_topic_name>
 801031e:	4604      	mov	r4, r0
 8010320:	2800      	cmp	r0, #0
 8010322:	f040 8096 	bne.w	8010452 <rcl_expand_topic_name+0x16a>
 8010326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010328:	2b00      	cmp	r3, #0
 801032a:	f040 809a 	bne.w	8010462 <rcl_expand_topic_name+0x17a>
 801032e:	4602      	mov	r2, r0
 8010330:	a909      	add	r1, sp, #36	; 0x24
 8010332:	4630      	mov	r0, r6
 8010334:	f7fd fcea 	bl	800dd0c <rmw_validate_node_name>
 8010338:	2800      	cmp	r0, #0
 801033a:	f040 808e 	bne.w	801045a <rcl_expand_topic_name+0x172>
 801033e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010340:	2a00      	cmp	r2, #0
 8010342:	f040 8093 	bne.w	801046c <rcl_expand_topic_name+0x184>
 8010346:	a909      	add	r1, sp, #36	; 0x24
 8010348:	4638      	mov	r0, r7
 801034a:	f7fd fcc1 	bl	800dcd0 <rmw_validate_namespace>
 801034e:	2800      	cmp	r0, #0
 8010350:	f040 8083 	bne.w	801045a <rcl_expand_topic_name+0x172>
 8010354:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010356:	2c00      	cmp	r4, #0
 8010358:	f040 80ed 	bne.w	8010536 <rcl_expand_topic_name+0x24e>
 801035c:	217b      	movs	r1, #123	; 0x7b
 801035e:	4640      	mov	r0, r8
 8010360:	f000 ffc6 	bl	80112f0 <strchr>
 8010364:	f898 3000 	ldrb.w	r3, [r8]
 8010368:	2b2f      	cmp	r3, #47	; 0x2f
 801036a:	4605      	mov	r5, r0
 801036c:	f000 809e 	beq.w	80104ac <rcl_expand_topic_name+0x1c4>
 8010370:	2b7e      	cmp	r3, #126	; 0x7e
 8010372:	f040 80a2 	bne.w	80104ba <rcl_expand_topic_name+0x1d2>
 8010376:	4638      	mov	r0, r7
 8010378:	f7ef ff3c 	bl	80001f4 <strlen>
 801037c:	4a82      	ldr	r2, [pc, #520]	; (8010588 <rcl_expand_topic_name+0x2a0>)
 801037e:	4b83      	ldr	r3, [pc, #524]	; (801058c <rcl_expand_topic_name+0x2a4>)
 8010380:	2801      	cmp	r0, #1
 8010382:	bf18      	it	ne
 8010384:	4613      	movne	r3, r2
 8010386:	9302      	str	r3, [sp, #8]
 8010388:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801038a:	9300      	str	r3, [sp, #0]
 801038c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8010390:	f108 0301 	add.w	r3, r8, #1
 8010394:	9305      	str	r3, [sp, #20]
 8010396:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801039a:	9301      	str	r3, [sp, #4]
 801039c:	ab14      	add	r3, sp, #80	; 0x50
 801039e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80103a0:	f7fd f8da 	bl	800d558 <rcutils_format_string_limit>
 80103a4:	4682      	mov	sl, r0
 80103a6:	2800      	cmp	r0, #0
 80103a8:	f000 80c7 	beq.w	801053a <rcl_expand_topic_name+0x252>
 80103ac:	2d00      	cmp	r5, #0
 80103ae:	f000 80a2 	beq.w	80104f6 <rcl_expand_topic_name+0x20e>
 80103b2:	217b      	movs	r1, #123	; 0x7b
 80103b4:	f000 ff9c 	bl	80112f0 <strchr>
 80103b8:	46d1      	mov	r9, sl
 80103ba:	4605      	mov	r5, r0
 80103bc:	9407      	str	r4, [sp, #28]
 80103be:	46d3      	mov	fp, sl
 80103c0:	464c      	mov	r4, r9
 80103c2:	2d00      	cmp	r5, #0
 80103c4:	f000 80be 	beq.w	8010544 <rcl_expand_topic_name+0x25c>
 80103c8:	217d      	movs	r1, #125	; 0x7d
 80103ca:	4620      	mov	r0, r4
 80103cc:	f000 ff90 	bl	80112f0 <strchr>
 80103d0:	eba0 0905 	sub.w	r9, r0, r5
 80103d4:	f109 0a01 	add.w	sl, r9, #1
 80103d8:	486d      	ldr	r0, [pc, #436]	; (8010590 <rcl_expand_topic_name+0x2a8>)
 80103da:	4652      	mov	r2, sl
 80103dc:	4629      	mov	r1, r5
 80103de:	f000 ff94 	bl	801130a <strncmp>
 80103e2:	2800      	cmp	r0, #0
 80103e4:	d067      	beq.n	80104b6 <rcl_expand_topic_name+0x1ce>
 80103e6:	486b      	ldr	r0, [pc, #428]	; (8010594 <rcl_expand_topic_name+0x2ac>)
 80103e8:	4652      	mov	r2, sl
 80103ea:	4629      	mov	r1, r5
 80103ec:	f000 ff8d 	bl	801130a <strncmp>
 80103f0:	b130      	cbz	r0, 8010400 <rcl_expand_topic_name+0x118>
 80103f2:	4869      	ldr	r0, [pc, #420]	; (8010598 <rcl_expand_topic_name+0x2b0>)
 80103f4:	4652      	mov	r2, sl
 80103f6:	4629      	mov	r1, r5
 80103f8:	f000 ff87 	bl	801130a <strncmp>
 80103fc:	2800      	cmp	r0, #0
 80103fe:	d137      	bne.n	8010470 <rcl_expand_topic_name+0x188>
 8010400:	46b9      	mov	r9, r7
 8010402:	ab16      	add	r3, sp, #88	; 0x58
 8010404:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010408:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801040c:	ab14      	add	r3, sp, #80	; 0x50
 801040e:	4628      	mov	r0, r5
 8010410:	cb0c      	ldmia	r3, {r2, r3}
 8010412:	4651      	mov	r1, sl
 8010414:	f7fd f9dc 	bl	800d7d0 <rcutils_strndup>
 8010418:	4605      	mov	r5, r0
 801041a:	2800      	cmp	r0, #0
 801041c:	f000 809c 	beq.w	8010558 <rcl_expand_topic_name+0x270>
 8010420:	464a      	mov	r2, r9
 8010422:	4620      	mov	r0, r4
 8010424:	ab14      	add	r3, sp, #80	; 0x50
 8010426:	4629      	mov	r1, r5
 8010428:	f7fd f8d0 	bl	800d5cc <rcutils_repl_str>
 801042c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801042e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010430:	4604      	mov	r4, r0
 8010432:	4628      	mov	r0, r5
 8010434:	4798      	blx	r3
 8010436:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010438:	9918      	ldr	r1, [sp, #96]	; 0x60
 801043a:	4658      	mov	r0, fp
 801043c:	4798      	blx	r3
 801043e:	2c00      	cmp	r4, #0
 8010440:	d07b      	beq.n	801053a <rcl_expand_topic_name+0x252>
 8010442:	217b      	movs	r1, #123	; 0x7b
 8010444:	4620      	mov	r0, r4
 8010446:	f000 ff53 	bl	80112f0 <strchr>
 801044a:	46a3      	mov	fp, r4
 801044c:	4605      	mov	r5, r0
 801044e:	e7b8      	b.n	80103c2 <rcl_expand_topic_name+0xda>
 8010450:	240b      	movs	r4, #11
 8010452:	4620      	mov	r0, r4
 8010454:	b00b      	add	sp, #44	; 0x2c
 8010456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801045a:	f7fc f935 	bl	800c6c8 <rcl_convert_rmw_ret_to_rcl_ret>
 801045e:	4604      	mov	r4, r0
 8010460:	e7f7      	b.n	8010452 <rcl_expand_topic_name+0x16a>
 8010462:	2467      	movs	r4, #103	; 0x67
 8010464:	4620      	mov	r0, r4
 8010466:	b00b      	add	sp, #44	; 0x2c
 8010468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801046c:	24c9      	movs	r4, #201	; 0xc9
 801046e:	e7f0      	b.n	8010452 <rcl_expand_topic_name+0x16a>
 8010470:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8010474:	9806      	ldr	r0, [sp, #24]
 8010476:	1c69      	adds	r1, r5, #1
 8010478:	f7fd fac4 	bl	800da04 <rcutils_string_map_getn>
 801047c:	4681      	mov	r9, r0
 801047e:	2800      	cmp	r0, #0
 8010480:	d1bf      	bne.n	8010402 <rcl_expand_topic_name+0x11a>
 8010482:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010484:	aa16      	add	r2, sp, #88	; 0x58
 8010486:	6018      	str	r0, [r3, #0]
 8010488:	ca07      	ldmia	r2, {r0, r1, r2}
 801048a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801048e:	ab14      	add	r3, sp, #80	; 0x50
 8010490:	cb0c      	ldmia	r3, {r2, r3}
 8010492:	4651      	mov	r1, sl
 8010494:	4628      	mov	r0, r5
 8010496:	f7fd f99b 	bl	800d7d0 <rcutils_strndup>
 801049a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801049c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801049e:	4798      	blx	r3
 80104a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80104a4:	4658      	mov	r0, fp
 80104a6:	2469      	movs	r4, #105	; 0x69
 80104a8:	4798      	blx	r3
 80104aa:	e7d2      	b.n	8010452 <rcl_expand_topic_name+0x16a>
 80104ac:	2800      	cmp	r0, #0
 80104ae:	d05b      	beq.n	8010568 <rcl_expand_topic_name+0x280>
 80104b0:	46c1      	mov	r9, r8
 80104b2:	46a2      	mov	sl, r4
 80104b4:	e782      	b.n	80103bc <rcl_expand_topic_name+0xd4>
 80104b6:	46b1      	mov	r9, r6
 80104b8:	e7a3      	b.n	8010402 <rcl_expand_topic_name+0x11a>
 80104ba:	2800      	cmp	r0, #0
 80104bc:	d1f8      	bne.n	80104b0 <rcl_expand_topic_name+0x1c8>
 80104be:	4638      	mov	r0, r7
 80104c0:	f7ef fe98 	bl	80001f4 <strlen>
 80104c4:	4a35      	ldr	r2, [pc, #212]	; (801059c <rcl_expand_topic_name+0x2b4>)
 80104c6:	4b36      	ldr	r3, [pc, #216]	; (80105a0 <rcl_expand_topic_name+0x2b8>)
 80104c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80104cc:	2801      	cmp	r0, #1
 80104ce:	bf18      	it	ne
 80104d0:	4613      	movne	r3, r2
 80104d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80104d6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80104da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80104dc:	9703      	str	r7, [sp, #12]
 80104de:	9200      	str	r2, [sp, #0]
 80104e0:	ab14      	add	r3, sp, #80	; 0x50
 80104e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80104e4:	f7fd f838 	bl	800d558 <rcutils_format_string_limit>
 80104e8:	4682      	mov	sl, r0
 80104ea:	4653      	mov	r3, sl
 80104ec:	b32b      	cbz	r3, 801053a <rcl_expand_topic_name+0x252>
 80104ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80104f0:	f8c3 a000 	str.w	sl, [r3]
 80104f4:	e7ad      	b.n	8010452 <rcl_expand_topic_name+0x16a>
 80104f6:	f89a 3000 	ldrb.w	r3, [sl]
 80104fa:	2b2f      	cmp	r3, #47	; 0x2f
 80104fc:	d0f7      	beq.n	80104ee <rcl_expand_topic_name+0x206>
 80104fe:	4638      	mov	r0, r7
 8010500:	f7ef fe78 	bl	80001f4 <strlen>
 8010504:	4a25      	ldr	r2, [pc, #148]	; (801059c <rcl_expand_topic_name+0x2b4>)
 8010506:	4b26      	ldr	r3, [pc, #152]	; (80105a0 <rcl_expand_topic_name+0x2b8>)
 8010508:	f8cd a010 	str.w	sl, [sp, #16]
 801050c:	2801      	cmp	r0, #1
 801050e:	bf18      	it	ne
 8010510:	4613      	movne	r3, r2
 8010512:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010516:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801051a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801051c:	9703      	str	r7, [sp, #12]
 801051e:	9200      	str	r2, [sp, #0]
 8010520:	ab14      	add	r3, sp, #80	; 0x50
 8010522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010524:	f7fd f818 	bl	800d558 <rcutils_format_string_limit>
 8010528:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801052a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801052c:	4605      	mov	r5, r0
 801052e:	4650      	mov	r0, sl
 8010530:	4798      	blx	r3
 8010532:	46aa      	mov	sl, r5
 8010534:	e7d9      	b.n	80104ea <rcl_expand_topic_name+0x202>
 8010536:	24ca      	movs	r4, #202	; 0xca
 8010538:	e78b      	b.n	8010452 <rcl_expand_topic_name+0x16a>
 801053a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801053c:	2300      	movs	r3, #0
 801053e:	6013      	str	r3, [r2, #0]
 8010540:	240a      	movs	r4, #10
 8010542:	e786      	b.n	8010452 <rcl_expand_topic_name+0x16a>
 8010544:	465b      	mov	r3, fp
 8010546:	9c07      	ldr	r4, [sp, #28]
 8010548:	46da      	mov	sl, fp
 801054a:	2b00      	cmp	r3, #0
 801054c:	d1d3      	bne.n	80104f6 <rcl_expand_topic_name+0x20e>
 801054e:	f898 3000 	ldrb.w	r3, [r8]
 8010552:	2b2f      	cmp	r3, #47	; 0x2f
 8010554:	d0cb      	beq.n	80104ee <rcl_expand_topic_name+0x206>
 8010556:	e7b2      	b.n	80104be <rcl_expand_topic_name+0x1d6>
 8010558:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 801055c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801055e:	6015      	str	r5, [r2, #0]
 8010560:	4658      	mov	r0, fp
 8010562:	4798      	blx	r3
 8010564:	240a      	movs	r4, #10
 8010566:	e774      	b.n	8010452 <rcl_expand_topic_name+0x16a>
 8010568:	ab17      	add	r3, sp, #92	; 0x5c
 801056a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801056e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010572:	ab14      	add	r3, sp, #80	; 0x50
 8010574:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010576:	4640      	mov	r0, r8
 8010578:	f7fd f908 	bl	800d78c <rcutils_strdup>
 801057c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801057e:	2800      	cmp	r0, #0
 8010580:	6018      	str	r0, [r3, #0]
 8010582:	bf08      	it	eq
 8010584:	240a      	moveq	r4, #10
 8010586:	e764      	b.n	8010452 <rcl_expand_topic_name+0x16a>
 8010588:	08012d08 	.word	0x08012d08
 801058c:	080124f0 	.word	0x080124f0
 8010590:	08012d10 	.word	0x08012d10
 8010594:	08012d18 	.word	0x08012d18
 8010598:	08012d20 	.word	0x08012d20
 801059c:	08012684 	.word	0x08012684
 80105a0:	08012500 	.word	0x08012500

080105a4 <rcl_get_default_topic_name_substitutions>:
 80105a4:	2800      	cmp	r0, #0
 80105a6:	bf0c      	ite	eq
 80105a8:	200b      	moveq	r0, #11
 80105aa:	2000      	movne	r0, #0
 80105ac:	4770      	bx	lr
 80105ae:	bf00      	nop

080105b0 <rcl_get_zero_initialized_guard_condition>:
 80105b0:	4a03      	ldr	r2, [pc, #12]	; (80105c0 <rcl_get_zero_initialized_guard_condition+0x10>)
 80105b2:	4603      	mov	r3, r0
 80105b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80105bc:	4618      	mov	r0, r3
 80105be:	4770      	bx	lr
 80105c0:	08012d2c 	.word	0x08012d2c

080105c4 <rcl_guard_condition_init_from_rmw>:
 80105c4:	b082      	sub	sp, #8
 80105c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105ca:	b086      	sub	sp, #24
 80105cc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80105d0:	4604      	mov	r4, r0
 80105d2:	f84c 3f04 	str.w	r3, [ip, #4]!
 80105d6:	460e      	mov	r6, r1
 80105d8:	4617      	mov	r7, r2
 80105da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80105de:	f10d 0e04 	add.w	lr, sp, #4
 80105e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80105e6:	f8dc 3000 	ldr.w	r3, [ip]
 80105ea:	f8ce 3000 	str.w	r3, [lr]
 80105ee:	a801      	add	r0, sp, #4
 80105f0:	f7f7 fe6e 	bl	80082d0 <rcutils_allocator_is_valid>
 80105f4:	b350      	cbz	r0, 801064c <rcl_guard_condition_init_from_rmw+0x88>
 80105f6:	b34c      	cbz	r4, 801064c <rcl_guard_condition_init_from_rmw+0x88>
 80105f8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80105fc:	f1b8 0f00 	cmp.w	r8, #0
 8010600:	d11e      	bne.n	8010640 <rcl_guard_condition_init_from_rmw+0x7c>
 8010602:	b31f      	cbz	r7, 801064c <rcl_guard_condition_init_from_rmw+0x88>
 8010604:	4638      	mov	r0, r7
 8010606:	f7fc f87d 	bl	800c704 <rcl_context_is_valid>
 801060a:	b328      	cbz	r0, 8010658 <rcl_guard_condition_init_from_rmw+0x94>
 801060c:	9b01      	ldr	r3, [sp, #4]
 801060e:	9905      	ldr	r1, [sp, #20]
 8010610:	201c      	movs	r0, #28
 8010612:	4798      	blx	r3
 8010614:	4605      	mov	r5, r0
 8010616:	6060      	str	r0, [r4, #4]
 8010618:	b358      	cbz	r0, 8010672 <rcl_guard_condition_init_from_rmw+0xae>
 801061a:	b1fe      	cbz	r6, 801065c <rcl_guard_condition_init_from_rmw+0x98>
 801061c:	6006      	str	r6, [r0, #0]
 801061e:	f880 8004 	strb.w	r8, [r0, #4]
 8010622:	ac01      	add	r4, sp, #4
 8010624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010626:	f105 0c08 	add.w	ip, r5, #8
 801062a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801062e:	6823      	ldr	r3, [r4, #0]
 8010630:	f8cc 3000 	str.w	r3, [ip]
 8010634:	2000      	movs	r0, #0
 8010636:	b006      	add	sp, #24
 8010638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801063c:	b002      	add	sp, #8
 801063e:	4770      	bx	lr
 8010640:	2064      	movs	r0, #100	; 0x64
 8010642:	b006      	add	sp, #24
 8010644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010648:	b002      	add	sp, #8
 801064a:	4770      	bx	lr
 801064c:	200b      	movs	r0, #11
 801064e:	b006      	add	sp, #24
 8010650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010654:	b002      	add	sp, #8
 8010656:	4770      	bx	lr
 8010658:	2065      	movs	r0, #101	; 0x65
 801065a:	e7f2      	b.n	8010642 <rcl_guard_condition_init_from_rmw+0x7e>
 801065c:	6838      	ldr	r0, [r7, #0]
 801065e:	3028      	adds	r0, #40	; 0x28
 8010660:	f000 fa50 	bl	8010b04 <rmw_create_guard_condition>
 8010664:	6028      	str	r0, [r5, #0]
 8010666:	6865      	ldr	r5, [r4, #4]
 8010668:	682e      	ldr	r6, [r5, #0]
 801066a:	b126      	cbz	r6, 8010676 <rcl_guard_condition_init_from_rmw+0xb2>
 801066c:	2301      	movs	r3, #1
 801066e:	712b      	strb	r3, [r5, #4]
 8010670:	e7d7      	b.n	8010622 <rcl_guard_condition_init_from_rmw+0x5e>
 8010672:	200a      	movs	r0, #10
 8010674:	e7e5      	b.n	8010642 <rcl_guard_condition_init_from_rmw+0x7e>
 8010676:	4628      	mov	r0, r5
 8010678:	9b02      	ldr	r3, [sp, #8]
 801067a:	9905      	ldr	r1, [sp, #20]
 801067c:	4798      	blx	r3
 801067e:	6066      	str	r6, [r4, #4]
 8010680:	2001      	movs	r0, #1
 8010682:	e7de      	b.n	8010642 <rcl_guard_condition_init_from_rmw+0x7e>

08010684 <rcl_guard_condition_fini>:
 8010684:	b570      	push	{r4, r5, r6, lr}
 8010686:	b082      	sub	sp, #8
 8010688:	b1f0      	cbz	r0, 80106c8 <rcl_guard_condition_fini+0x44>
 801068a:	6843      	ldr	r3, [r0, #4]
 801068c:	4604      	mov	r4, r0
 801068e:	b163      	cbz	r3, 80106aa <rcl_guard_condition_fini+0x26>
 8010690:	6818      	ldr	r0, [r3, #0]
 8010692:	68de      	ldr	r6, [r3, #12]
 8010694:	6999      	ldr	r1, [r3, #24]
 8010696:	b160      	cbz	r0, 80106b2 <rcl_guard_condition_fini+0x2e>
 8010698:	791d      	ldrb	r5, [r3, #4]
 801069a:	b965      	cbnz	r5, 80106b6 <rcl_guard_condition_fini+0x32>
 801069c:	4618      	mov	r0, r3
 801069e:	47b0      	blx	r6
 80106a0:	2300      	movs	r3, #0
 80106a2:	4628      	mov	r0, r5
 80106a4:	6063      	str	r3, [r4, #4]
 80106a6:	b002      	add	sp, #8
 80106a8:	bd70      	pop	{r4, r5, r6, pc}
 80106aa:	461d      	mov	r5, r3
 80106ac:	4628      	mov	r0, r5
 80106ae:	b002      	add	sp, #8
 80106b0:	bd70      	pop	{r4, r5, r6, pc}
 80106b2:	4605      	mov	r5, r0
 80106b4:	e7f2      	b.n	801069c <rcl_guard_condition_fini+0x18>
 80106b6:	9101      	str	r1, [sp, #4]
 80106b8:	f000 fa38 	bl	8010b2c <rmw_destroy_guard_condition>
 80106bc:	1e05      	subs	r5, r0, #0
 80106be:	6863      	ldr	r3, [r4, #4]
 80106c0:	9901      	ldr	r1, [sp, #4]
 80106c2:	bf18      	it	ne
 80106c4:	2501      	movne	r5, #1
 80106c6:	e7e9      	b.n	801069c <rcl_guard_condition_fini+0x18>
 80106c8:	250b      	movs	r5, #11
 80106ca:	4628      	mov	r0, r5
 80106cc:	b002      	add	sp, #8
 80106ce:	bd70      	pop	{r4, r5, r6, pc}

080106d0 <rcl_guard_condition_get_default_options>:
 80106d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106d2:	b087      	sub	sp, #28
 80106d4:	4606      	mov	r6, r0
 80106d6:	4668      	mov	r0, sp
 80106d8:	f7f7 fdec 	bl	80082b4 <rcutils_get_default_allocator>
 80106dc:	4b09      	ldr	r3, [pc, #36]	; (8010704 <rcl_guard_condition_get_default_options+0x34>)
 80106de:	46ee      	mov	lr, sp
 80106e0:	469c      	mov	ip, r3
 80106e2:	461d      	mov	r5, r3
 80106e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80106e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80106ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106ee:	4634      	mov	r4, r6
 80106f0:	f8de 7000 	ldr.w	r7, [lr]
 80106f4:	f8cc 7000 	str.w	r7, [ip]
 80106f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106fa:	4630      	mov	r0, r6
 80106fc:	6027      	str	r7, [r4, #0]
 80106fe:	b007      	add	sp, #28
 8010700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010702:	bf00      	nop
 8010704:	20010bac 	.word	0x20010bac

08010708 <rcl_validate_topic_name>:
 8010708:	2800      	cmp	r0, #0
 801070a:	d07a      	beq.n	8010802 <rcl_validate_topic_name+0xfa>
 801070c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010710:	460e      	mov	r6, r1
 8010712:	2900      	cmp	r1, #0
 8010714:	d07c      	beq.n	8010810 <rcl_validate_topic_name+0x108>
 8010716:	4617      	mov	r7, r2
 8010718:	4605      	mov	r5, r0
 801071a:	f7ef fd6b 	bl	80001f4 <strlen>
 801071e:	b1b0      	cbz	r0, 801074e <rcl_validate_topic_name+0x46>
 8010720:	f895 9000 	ldrb.w	r9, [r5]
 8010724:	f8df c180 	ldr.w	ip, [pc, #384]	; 80108a8 <rcl_validate_topic_name+0x1a0>
 8010728:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801072c:	f013 0304 	ands.w	r3, r3, #4
 8010730:	d169      	bne.n	8010806 <rcl_validate_topic_name+0xfe>
 8010732:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8010736:	f815 2008 	ldrb.w	r2, [r5, r8]
 801073a:	2a2f      	cmp	r2, #47	; 0x2f
 801073c:	d10e      	bne.n	801075c <rcl_validate_topic_name+0x54>
 801073e:	2202      	movs	r2, #2
 8010740:	6032      	str	r2, [r6, #0]
 8010742:	b36f      	cbz	r7, 80107a0 <rcl_validate_topic_name+0x98>
 8010744:	f8c7 8000 	str.w	r8, [r7]
 8010748:	4618      	mov	r0, r3
 801074a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801074e:	2301      	movs	r3, #1
 8010750:	6033      	str	r3, [r6, #0]
 8010752:	b32f      	cbz	r7, 80107a0 <rcl_validate_topic_name+0x98>
 8010754:	2000      	movs	r0, #0
 8010756:	6038      	str	r0, [r7, #0]
 8010758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801075c:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8010760:	461c      	mov	r4, r3
 8010762:	4619      	mov	r1, r3
 8010764:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8010768:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801076c:	f1be 0f09 	cmp.w	lr, #9
 8010770:	d919      	bls.n	80107a6 <rcl_validate_topic_name+0x9e>
 8010772:	f022 0e20 	bic.w	lr, r2, #32
 8010776:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 801077a:	f1be 0f19 	cmp.w	lr, #25
 801077e:	d912      	bls.n	80107a6 <rcl_validate_topic_name+0x9e>
 8010780:	2a5f      	cmp	r2, #95	; 0x5f
 8010782:	d019      	beq.n	80107b8 <rcl_validate_topic_name+0xb0>
 8010784:	2a2f      	cmp	r2, #47	; 0x2f
 8010786:	d051      	beq.n	801082c <rcl_validate_topic_name+0x124>
 8010788:	2a7e      	cmp	r2, #126	; 0x7e
 801078a:	d048      	beq.n	801081e <rcl_validate_topic_name+0x116>
 801078c:	2a7b      	cmp	r2, #123	; 0x7b
 801078e:	d054      	beq.n	801083a <rcl_validate_topic_name+0x132>
 8010790:	2a7d      	cmp	r2, #125	; 0x7d
 8010792:	d161      	bne.n	8010858 <rcl_validate_topic_name+0x150>
 8010794:	2c00      	cmp	r4, #0
 8010796:	d155      	bne.n	8010844 <rcl_validate_topic_name+0x13c>
 8010798:	2305      	movs	r3, #5
 801079a:	6033      	str	r3, [r6, #0]
 801079c:	b107      	cbz	r7, 80107a0 <rcl_validate_topic_name+0x98>
 801079e:	6039      	str	r1, [r7, #0]
 80107a0:	2000      	movs	r0, #0
 80107a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107a6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80107aa:	0752      	lsls	r2, r2, #29
 80107ac:	d504      	bpl.n	80107b8 <rcl_validate_topic_name+0xb0>
 80107ae:	b11c      	cbz	r4, 80107b8 <rcl_validate_topic_name+0xb0>
 80107b0:	b111      	cbz	r1, 80107b8 <rcl_validate_topic_name+0xb0>
 80107b2:	1e4a      	subs	r2, r1, #1
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d02d      	beq.n	8010814 <rcl_validate_topic_name+0x10c>
 80107b8:	3101      	adds	r1, #1
 80107ba:	4288      	cmp	r0, r1
 80107bc:	d1d2      	bne.n	8010764 <rcl_validate_topic_name+0x5c>
 80107be:	2c00      	cmp	r4, #0
 80107c0:	d145      	bne.n	801084e <rcl_validate_topic_name+0x146>
 80107c2:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 80107c6:	d04f      	beq.n	8010868 <rcl_validate_topic_name+0x160>
 80107c8:	4620      	mov	r0, r4
 80107ca:	2301      	movs	r3, #1
 80107cc:	e006      	b.n	80107dc <rcl_validate_topic_name+0xd4>
 80107ce:	428b      	cmp	r3, r1
 80107d0:	f105 0501 	add.w	r5, r5, #1
 80107d4:	f103 0201 	add.w	r2, r3, #1
 80107d8:	d236      	bcs.n	8010848 <rcl_validate_topic_name+0x140>
 80107da:	4613      	mov	r3, r2
 80107dc:	4580      	cmp	r8, r0
 80107de:	f100 0001 	add.w	r0, r0, #1
 80107e2:	d0f4      	beq.n	80107ce <rcl_validate_topic_name+0xc6>
 80107e4:	782a      	ldrb	r2, [r5, #0]
 80107e6:	2a2f      	cmp	r2, #47	; 0x2f
 80107e8:	d1f1      	bne.n	80107ce <rcl_validate_topic_name+0xc6>
 80107ea:	786a      	ldrb	r2, [r5, #1]
 80107ec:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80107f0:	0754      	lsls	r4, r2, #29
 80107f2:	d5ec      	bpl.n	80107ce <rcl_validate_topic_name+0xc6>
 80107f4:	2204      	movs	r2, #4
 80107f6:	6032      	str	r2, [r6, #0]
 80107f8:	2f00      	cmp	r7, #0
 80107fa:	d0d1      	beq.n	80107a0 <rcl_validate_topic_name+0x98>
 80107fc:	603b      	str	r3, [r7, #0]
 80107fe:	2000      	movs	r0, #0
 8010800:	e7aa      	b.n	8010758 <rcl_validate_topic_name+0x50>
 8010802:	200b      	movs	r0, #11
 8010804:	4770      	bx	lr
 8010806:	2304      	movs	r3, #4
 8010808:	6033      	str	r3, [r6, #0]
 801080a:	2f00      	cmp	r7, #0
 801080c:	d1a2      	bne.n	8010754 <rcl_validate_topic_name+0x4c>
 801080e:	e7c7      	b.n	80107a0 <rcl_validate_topic_name+0x98>
 8010810:	200b      	movs	r0, #11
 8010812:	e7a1      	b.n	8010758 <rcl_validate_topic_name+0x50>
 8010814:	2309      	movs	r3, #9
 8010816:	6033      	str	r3, [r6, #0]
 8010818:	2f00      	cmp	r7, #0
 801081a:	d1c0      	bne.n	801079e <rcl_validate_topic_name+0x96>
 801081c:	e7c0      	b.n	80107a0 <rcl_validate_topic_name+0x98>
 801081e:	2900      	cmp	r1, #0
 8010820:	d0ca      	beq.n	80107b8 <rcl_validate_topic_name+0xb0>
 8010822:	2306      	movs	r3, #6
 8010824:	6033      	str	r3, [r6, #0]
 8010826:	2f00      	cmp	r7, #0
 8010828:	d1b9      	bne.n	801079e <rcl_validate_topic_name+0x96>
 801082a:	e7b9      	b.n	80107a0 <rcl_validate_topic_name+0x98>
 801082c:	2c00      	cmp	r4, #0
 801082e:	d0c3      	beq.n	80107b8 <rcl_validate_topic_name+0xb0>
 8010830:	2308      	movs	r3, #8
 8010832:	6033      	str	r3, [r6, #0]
 8010834:	2f00      	cmp	r7, #0
 8010836:	d1b2      	bne.n	801079e <rcl_validate_topic_name+0x96>
 8010838:	e7b2      	b.n	80107a0 <rcl_validate_topic_name+0x98>
 801083a:	2c00      	cmp	r4, #0
 801083c:	d1f8      	bne.n	8010830 <rcl_validate_topic_name+0x128>
 801083e:	460b      	mov	r3, r1
 8010840:	2401      	movs	r4, #1
 8010842:	e7b9      	b.n	80107b8 <rcl_validate_topic_name+0xb0>
 8010844:	2400      	movs	r4, #0
 8010846:	e7b7      	b.n	80107b8 <rcl_validate_topic_name+0xb0>
 8010848:	2000      	movs	r0, #0
 801084a:	6030      	str	r0, [r6, #0]
 801084c:	e784      	b.n	8010758 <rcl_validate_topic_name+0x50>
 801084e:	2205      	movs	r2, #5
 8010850:	6032      	str	r2, [r6, #0]
 8010852:	2f00      	cmp	r7, #0
 8010854:	d1d2      	bne.n	80107fc <rcl_validate_topic_name+0xf4>
 8010856:	e7a3      	b.n	80107a0 <rcl_validate_topic_name+0x98>
 8010858:	2c00      	cmp	r4, #0
 801085a:	bf14      	ite	ne
 801085c:	2308      	movne	r3, #8
 801085e:	2303      	moveq	r3, #3
 8010860:	6033      	str	r3, [r6, #0]
 8010862:	2f00      	cmp	r7, #0
 8010864:	d19b      	bne.n	801079e <rcl_validate_topic_name+0x96>
 8010866:	e79b      	b.n	80107a0 <rcl_validate_topic_name+0x98>
 8010868:	2301      	movs	r3, #1
 801086a:	e00a      	b.n	8010882 <rcl_validate_topic_name+0x17a>
 801086c:	2c01      	cmp	r4, #1
 801086e:	d013      	beq.n	8010898 <rcl_validate_topic_name+0x190>
 8010870:	4299      	cmp	r1, r3
 8010872:	f104 0401 	add.w	r4, r4, #1
 8010876:	f105 0501 	add.w	r5, r5, #1
 801087a:	f103 0201 	add.w	r2, r3, #1
 801087e:	d9e3      	bls.n	8010848 <rcl_validate_topic_name+0x140>
 8010880:	4613      	mov	r3, r2
 8010882:	45a0      	cmp	r8, r4
 8010884:	d0f4      	beq.n	8010870 <rcl_validate_topic_name+0x168>
 8010886:	782a      	ldrb	r2, [r5, #0]
 8010888:	2a2f      	cmp	r2, #47	; 0x2f
 801088a:	d1ef      	bne.n	801086c <rcl_validate_topic_name+0x164>
 801088c:	786a      	ldrb	r2, [r5, #1]
 801088e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8010892:	0752      	lsls	r2, r2, #29
 8010894:	d5ec      	bpl.n	8010870 <rcl_validate_topic_name+0x168>
 8010896:	e7ad      	b.n	80107f4 <rcl_validate_topic_name+0xec>
 8010898:	2307      	movs	r3, #7
 801089a:	6033      	str	r3, [r6, #0]
 801089c:	2f00      	cmp	r7, #0
 801089e:	f43f af7f 	beq.w	80107a0 <rcl_validate_topic_name+0x98>
 80108a2:	603c      	str	r4, [r7, #0]
 80108a4:	2000      	movs	r0, #0
 80108a6:	e757      	b.n	8010758 <rcl_validate_topic_name+0x50>
 80108a8:	08012da4 	.word	0x08012da4

080108ac <on_status>:
 80108ac:	b082      	sub	sp, #8
 80108ae:	b002      	add	sp, #8
 80108b0:	4770      	bx	lr
 80108b2:	bf00      	nop

080108b4 <on_topic>:
 80108b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108b8:	4a22      	ldr	r2, [pc, #136]	; (8010944 <on_topic+0x90>)
 80108ba:	b094      	sub	sp, #80	; 0x50
 80108bc:	6812      	ldr	r2, [r2, #0]
 80108be:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80108c0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 80108c4:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 80108c8:	b3c2      	cbz	r2, 801093c <on_topic+0x88>
 80108ca:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80108ce:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80108d2:	e001      	b.n	80108d8 <on_topic+0x24>
 80108d4:	6852      	ldr	r2, [r2, #4]
 80108d6:	b38a      	cbz	r2, 801093c <on_topic+0x88>
 80108d8:	6894      	ldr	r4, [r2, #8]
 80108da:	8aa3      	ldrh	r3, [r4, #20]
 80108dc:	428b      	cmp	r3, r1
 80108de:	d1f9      	bne.n	80108d4 <on_topic+0x20>
 80108e0:	7da3      	ldrb	r3, [r4, #22]
 80108e2:	4283      	cmp	r3, r0
 80108e4:	d1f6      	bne.n	80108d4 <on_topic+0x20>
 80108e6:	2248      	movs	r2, #72	; 0x48
 80108e8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80108ec:	4668      	mov	r0, sp
 80108ee:	f000 fe16 	bl	801151e <memcpy>
 80108f2:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80108f6:	cb0c      	ldmia	r3, {r2, r3}
 80108f8:	4620      	mov	r0, r4
 80108fa:	f7f8 f8c9 	bl	8008a90 <rmw_uxrce_get_static_input_buffer_for_entity>
 80108fe:	4607      	mov	r7, r0
 8010900:	b1e0      	cbz	r0, 801093c <on_topic+0x88>
 8010902:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8010906:	4632      	mov	r2, r6
 8010908:	4628      	mov	r0, r5
 801090a:	f108 0110 	add.w	r1, r8, #16
 801090e:	f7fe f831 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 8010912:	b930      	cbnz	r0, 8010922 <on_topic+0x6e>
 8010914:	480c      	ldr	r0, [pc, #48]	; (8010948 <on_topic+0x94>)
 8010916:	4639      	mov	r1, r7
 8010918:	b014      	add	sp, #80	; 0x50
 801091a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801091e:	f7fd ba63 	b.w	800dde8 <put_memory>
 8010922:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8010926:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 801092a:	f7fd ff19 	bl	800e760 <rmw_uros_epoch_nanos>
 801092e:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8010932:	2305      	movs	r3, #5
 8010934:	e942 0102 	strd	r0, r1, [r2, #-8]
 8010938:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801093c:	b014      	add	sp, #80	; 0x50
 801093e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010942:	bf00      	nop
 8010944:	20010a7c 	.word	0x20010a7c
 8010948:	20010a6c 	.word	0x20010a6c

0801094c <on_request>:
 801094c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010950:	4823      	ldr	r0, [pc, #140]	; (80109e0 <on_request+0x94>)
 8010952:	b094      	sub	sp, #80	; 0x50
 8010954:	6800      	ldr	r0, [r0, #0]
 8010956:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8010958:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 801095c:	9113      	str	r1, [sp, #76]	; 0x4c
 801095e:	2800      	cmp	r0, #0
 8010960:	d03b      	beq.n	80109da <on_request+0x8e>
 8010962:	461d      	mov	r5, r3
 8010964:	e001      	b.n	801096a <on_request+0x1e>
 8010966:	6840      	ldr	r0, [r0, #4]
 8010968:	b3b8      	cbz	r0, 80109da <on_request+0x8e>
 801096a:	6884      	ldr	r4, [r0, #8]
 801096c:	8b21      	ldrh	r1, [r4, #24]
 801096e:	4291      	cmp	r1, r2
 8010970:	d1f9      	bne.n	8010966 <on_request+0x1a>
 8010972:	2248      	movs	r2, #72	; 0x48
 8010974:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8010978:	4668      	mov	r0, sp
 801097a:	f000 fdd0 	bl	801151e <memcpy>
 801097e:	f104 0320 	add.w	r3, r4, #32
 8010982:	cb0c      	ldmia	r3, {r2, r3}
 8010984:	4620      	mov	r0, r4
 8010986:	f7f8 f883 	bl	8008a90 <rmw_uxrce_get_static_input_buffer_for_entity>
 801098a:	4680      	mov	r8, r0
 801098c:	b328      	cbz	r0, 80109da <on_request+0x8e>
 801098e:	4638      	mov	r0, r7
 8010990:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8010994:	4632      	mov	r2, r6
 8010996:	f107 0110 	add.w	r1, r7, #16
 801099a:	f7fd ffeb 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 801099e:	b930      	cbnz	r0, 80109ae <on_request+0x62>
 80109a0:	4810      	ldr	r0, [pc, #64]	; (80109e4 <on_request+0x98>)
 80109a2:	4641      	mov	r1, r8
 80109a4:	b014      	add	sp, #80	; 0x50
 80109a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109aa:	f7fd ba1d 	b.w	800dde8 <put_memory>
 80109ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109b0:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 80109b4:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 80109b8:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 80109bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80109c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80109c4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80109c8:	f7fd feca 	bl	800e760 <rmw_uros_epoch_nanos>
 80109cc:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 80109d0:	2303      	movs	r3, #3
 80109d2:	e942 0102 	strd	r0, r1, [r2, #-8]
 80109d6:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 80109da:	b014      	add	sp, #80	; 0x50
 80109dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109e0:	20010a4c 	.word	0x20010a4c
 80109e4:	20010a6c 	.word	0x20010a6c

080109e8 <on_reply>:
 80109e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109ec:	4821      	ldr	r0, [pc, #132]	; (8010a74 <on_reply+0x8c>)
 80109ee:	b094      	sub	sp, #80	; 0x50
 80109f0:	6800      	ldr	r0, [r0, #0]
 80109f2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80109f4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 80109f8:	9113      	str	r1, [sp, #76]	; 0x4c
 80109fa:	b3b8      	cbz	r0, 8010a6c <on_reply+0x84>
 80109fc:	461d      	mov	r5, r3
 80109fe:	e001      	b.n	8010a04 <on_reply+0x1c>
 8010a00:	6840      	ldr	r0, [r0, #4]
 8010a02:	b398      	cbz	r0, 8010a6c <on_reply+0x84>
 8010a04:	6884      	ldr	r4, [r0, #8]
 8010a06:	8b21      	ldrh	r1, [r4, #24]
 8010a08:	4291      	cmp	r1, r2
 8010a0a:	d1f9      	bne.n	8010a00 <on_reply+0x18>
 8010a0c:	2248      	movs	r2, #72	; 0x48
 8010a0e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8010a12:	4668      	mov	r0, sp
 8010a14:	f000 fd83 	bl	801151e <memcpy>
 8010a18:	f104 0320 	add.w	r3, r4, #32
 8010a1c:	cb0c      	ldmia	r3, {r2, r3}
 8010a1e:	4620      	mov	r0, r4
 8010a20:	f7f8 f836 	bl	8008a90 <rmw_uxrce_get_static_input_buffer_for_entity>
 8010a24:	4680      	mov	r8, r0
 8010a26:	b308      	cbz	r0, 8010a6c <on_reply+0x84>
 8010a28:	4638      	mov	r0, r7
 8010a2a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8010a2e:	4632      	mov	r2, r6
 8010a30:	f107 0110 	add.w	r1, r7, #16
 8010a34:	f7fd ff9e 	bl	800e974 <ucdr_deserialize_array_uint8_t>
 8010a38:	b930      	cbnz	r0, 8010a48 <on_reply+0x60>
 8010a3a:	480f      	ldr	r0, [pc, #60]	; (8010a78 <on_reply+0x90>)
 8010a3c:	4641      	mov	r1, r8
 8010a3e:	b014      	add	sp, #80	; 0x50
 8010a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a44:	f7fd b9d0 	b.w	800dde8 <put_memory>
 8010a48:	2200      	movs	r2, #0
 8010a4a:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 8010a4e:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8010a52:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8010a56:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 8010a5a:	f7fd fe81 	bl	800e760 <rmw_uros_epoch_nanos>
 8010a5e:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8010a62:	2304      	movs	r3, #4
 8010a64:	e942 0102 	strd	r0, r1, [r2, #-8]
 8010a68:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8010a6c:	b014      	add	sp, #80	; 0x50
 8010a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a72:	bf00      	nop
 8010a74:	2000c160 	.word	0x2000c160
 8010a78:	20010a6c 	.word	0x20010a6c

08010a7c <rmw_destroy_client>:
 8010a7c:	b570      	push	{r4, r5, r6, lr}
 8010a7e:	b128      	cbz	r0, 8010a8c <rmw_destroy_client+0x10>
 8010a80:	4604      	mov	r4, r0
 8010a82:	6800      	ldr	r0, [r0, #0]
 8010a84:	460d      	mov	r5, r1
 8010a86:	f7f8 f8d3 	bl	8008c30 <is_uxrce_rmw_identifier_valid>
 8010a8a:	b910      	cbnz	r0, 8010a92 <rmw_destroy_client+0x16>
 8010a8c:	2401      	movs	r4, #1
 8010a8e:	4620      	mov	r0, r4
 8010a90:	bd70      	pop	{r4, r5, r6, pc}
 8010a92:	6863      	ldr	r3, [r4, #4]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d0f9      	beq.n	8010a8c <rmw_destroy_client+0x10>
 8010a98:	2d00      	cmp	r5, #0
 8010a9a:	d0f7      	beq.n	8010a8c <rmw_destroy_client+0x10>
 8010a9c:	6828      	ldr	r0, [r5, #0]
 8010a9e:	f7f8 f8c7 	bl	8008c30 <is_uxrce_rmw_identifier_valid>
 8010aa2:	2800      	cmp	r0, #0
 8010aa4:	d0f2      	beq.n	8010a8c <rmw_destroy_client+0x10>
 8010aa6:	686e      	ldr	r6, [r5, #4]
 8010aa8:	2e00      	cmp	r6, #0
 8010aaa:	d0ef      	beq.n	8010a8c <rmw_destroy_client+0x10>
 8010aac:	6864      	ldr	r4, [r4, #4]
 8010aae:	6932      	ldr	r2, [r6, #16]
 8010ab0:	6920      	ldr	r0, [r4, #16]
 8010ab2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010ab6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010aba:	6819      	ldr	r1, [r3, #0]
 8010abc:	f7fe fe38 	bl	800f730 <uxr_buffer_cancel_data>
 8010ac0:	4602      	mov	r2, r0
 8010ac2:	6920      	ldr	r0, [r4, #16]
 8010ac4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010ac8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010acc:	f7f8 f830 	bl	8008b30 <run_xrce_session>
 8010ad0:	6920      	ldr	r0, [r4, #16]
 8010ad2:	6932      	ldr	r2, [r6, #16]
 8010ad4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010ad8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010adc:	6819      	ldr	r1, [r3, #0]
 8010ade:	f7f9 f963 	bl	8009da8 <uxr_buffer_delete_entity>
 8010ae2:	4602      	mov	r2, r0
 8010ae4:	6920      	ldr	r0, [r4, #16]
 8010ae6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010aea:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010aee:	f7f8 f81f 	bl	8008b30 <run_xrce_session>
 8010af2:	2800      	cmp	r0, #0
 8010af4:	4628      	mov	r0, r5
 8010af6:	bf14      	ite	ne
 8010af8:	2400      	movne	r4, #0
 8010afa:	2402      	moveq	r4, #2
 8010afc:	f7f7 ffa6 	bl	8008a4c <rmw_uxrce_fini_client_memory>
 8010b00:	e7c5      	b.n	8010a8e <rmw_destroy_client+0x12>
 8010b02:	bf00      	nop

08010b04 <rmw_create_guard_condition>:
 8010b04:	b538      	push	{r3, r4, r5, lr}
 8010b06:	4605      	mov	r5, r0
 8010b08:	4807      	ldr	r0, [pc, #28]	; (8010b28 <rmw_create_guard_condition+0x24>)
 8010b0a:	f7fd f95d 	bl	800ddc8 <get_memory>
 8010b0e:	b148      	cbz	r0, 8010b24 <rmw_create_guard_condition+0x20>
 8010b10:	6884      	ldr	r4, [r0, #8]
 8010b12:	2300      	movs	r3, #0
 8010b14:	7423      	strb	r3, [r4, #16]
 8010b16:	61e5      	str	r5, [r4, #28]
 8010b18:	f7fd f97a 	bl	800de10 <rmw_get_implementation_identifier>
 8010b1c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8010b20:	f104 0014 	add.w	r0, r4, #20
 8010b24:	bd38      	pop	{r3, r4, r5, pc}
 8010b26:	bf00      	nop
 8010b28:	20010a0c 	.word	0x20010a0c

08010b2c <rmw_destroy_guard_condition>:
 8010b2c:	b508      	push	{r3, lr}
 8010b2e:	4b08      	ldr	r3, [pc, #32]	; (8010b50 <rmw_destroy_guard_condition+0x24>)
 8010b30:	6819      	ldr	r1, [r3, #0]
 8010b32:	b911      	cbnz	r1, 8010b3a <rmw_destroy_guard_condition+0xe>
 8010b34:	e00a      	b.n	8010b4c <rmw_destroy_guard_condition+0x20>
 8010b36:	6849      	ldr	r1, [r1, #4]
 8010b38:	b141      	cbz	r1, 8010b4c <rmw_destroy_guard_condition+0x20>
 8010b3a:	688b      	ldr	r3, [r1, #8]
 8010b3c:	3314      	adds	r3, #20
 8010b3e:	4298      	cmp	r0, r3
 8010b40:	d1f9      	bne.n	8010b36 <rmw_destroy_guard_condition+0xa>
 8010b42:	4803      	ldr	r0, [pc, #12]	; (8010b50 <rmw_destroy_guard_condition+0x24>)
 8010b44:	f7fd f950 	bl	800dde8 <put_memory>
 8010b48:	2000      	movs	r0, #0
 8010b4a:	bd08      	pop	{r3, pc}
 8010b4c:	2001      	movs	r0, #1
 8010b4e:	bd08      	pop	{r3, pc}
 8010b50:	20010a0c 	.word	0x20010a0c

08010b54 <calloc>:
 8010b54:	4b02      	ldr	r3, [pc, #8]	; (8010b60 <calloc+0xc>)
 8010b56:	460a      	mov	r2, r1
 8010b58:	4601      	mov	r1, r0
 8010b5a:	6818      	ldr	r0, [r3, #0]
 8010b5c:	f000 b802 	b.w	8010b64 <_calloc_r>
 8010b60:	2000010c 	.word	0x2000010c

08010b64 <_calloc_r>:
 8010b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b66:	fba1 2402 	umull	r2, r4, r1, r2
 8010b6a:	b94c      	cbnz	r4, 8010b80 <_calloc_r+0x1c>
 8010b6c:	4611      	mov	r1, r2
 8010b6e:	9201      	str	r2, [sp, #4]
 8010b70:	f000 f886 	bl	8010c80 <_malloc_r>
 8010b74:	9a01      	ldr	r2, [sp, #4]
 8010b76:	4605      	mov	r5, r0
 8010b78:	b930      	cbnz	r0, 8010b88 <_calloc_r+0x24>
 8010b7a:	4628      	mov	r0, r5
 8010b7c:	b003      	add	sp, #12
 8010b7e:	bd30      	pop	{r4, r5, pc}
 8010b80:	220c      	movs	r2, #12
 8010b82:	6002      	str	r2, [r0, #0]
 8010b84:	2500      	movs	r5, #0
 8010b86:	e7f8      	b.n	8010b7a <_calloc_r+0x16>
 8010b88:	4621      	mov	r1, r4
 8010b8a:	f000 fba9 	bl	80112e0 <memset>
 8010b8e:	e7f4      	b.n	8010b7a <_calloc_r+0x16>

08010b90 <getenv>:
 8010b90:	b507      	push	{r0, r1, r2, lr}
 8010b92:	4b04      	ldr	r3, [pc, #16]	; (8010ba4 <getenv+0x14>)
 8010b94:	4601      	mov	r1, r0
 8010b96:	aa01      	add	r2, sp, #4
 8010b98:	6818      	ldr	r0, [r3, #0]
 8010b9a:	f000 f805 	bl	8010ba8 <_findenv_r>
 8010b9e:	b003      	add	sp, #12
 8010ba0:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ba4:	2000010c 	.word	0x2000010c

08010ba8 <_findenv_r>:
 8010ba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bac:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8010c1c <_findenv_r+0x74>
 8010bb0:	4607      	mov	r7, r0
 8010bb2:	4689      	mov	r9, r1
 8010bb4:	4616      	mov	r6, r2
 8010bb6:	f000 fcdf 	bl	8011578 <__env_lock>
 8010bba:	f8da 4000 	ldr.w	r4, [sl]
 8010bbe:	b134      	cbz	r4, 8010bce <_findenv_r+0x26>
 8010bc0:	464b      	mov	r3, r9
 8010bc2:	4698      	mov	r8, r3
 8010bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010bc8:	b13a      	cbz	r2, 8010bda <_findenv_r+0x32>
 8010bca:	2a3d      	cmp	r2, #61	; 0x3d
 8010bcc:	d1f9      	bne.n	8010bc2 <_findenv_r+0x1a>
 8010bce:	4638      	mov	r0, r7
 8010bd0:	f000 fcd8 	bl	8011584 <__env_unlock>
 8010bd4:	2000      	movs	r0, #0
 8010bd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bda:	eba8 0809 	sub.w	r8, r8, r9
 8010bde:	46a3      	mov	fp, r4
 8010be0:	f854 0b04 	ldr.w	r0, [r4], #4
 8010be4:	2800      	cmp	r0, #0
 8010be6:	d0f2      	beq.n	8010bce <_findenv_r+0x26>
 8010be8:	4642      	mov	r2, r8
 8010bea:	4649      	mov	r1, r9
 8010bec:	f000 fb8d 	bl	801130a <strncmp>
 8010bf0:	2800      	cmp	r0, #0
 8010bf2:	d1f4      	bne.n	8010bde <_findenv_r+0x36>
 8010bf4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010bf8:	eb03 0508 	add.w	r5, r3, r8
 8010bfc:	f813 3008 	ldrb.w	r3, [r3, r8]
 8010c00:	2b3d      	cmp	r3, #61	; 0x3d
 8010c02:	d1ec      	bne.n	8010bde <_findenv_r+0x36>
 8010c04:	f8da 3000 	ldr.w	r3, [sl]
 8010c08:	ebab 0303 	sub.w	r3, fp, r3
 8010c0c:	109b      	asrs	r3, r3, #2
 8010c0e:	4638      	mov	r0, r7
 8010c10:	6033      	str	r3, [r6, #0]
 8010c12:	f000 fcb7 	bl	8011584 <__env_unlock>
 8010c16:	1c68      	adds	r0, r5, #1
 8010c18:	e7dd      	b.n	8010bd6 <_findenv_r+0x2e>
 8010c1a:	bf00      	nop
 8010c1c:	20000000 	.word	0x20000000

08010c20 <malloc>:
 8010c20:	4b02      	ldr	r3, [pc, #8]	; (8010c2c <malloc+0xc>)
 8010c22:	4601      	mov	r1, r0
 8010c24:	6818      	ldr	r0, [r3, #0]
 8010c26:	f000 b82b 	b.w	8010c80 <_malloc_r>
 8010c2a:	bf00      	nop
 8010c2c:	2000010c 	.word	0x2000010c

08010c30 <free>:
 8010c30:	4b02      	ldr	r3, [pc, #8]	; (8010c3c <free+0xc>)
 8010c32:	4601      	mov	r1, r0
 8010c34:	6818      	ldr	r0, [r3, #0]
 8010c36:	f000 bcab 	b.w	8011590 <_free_r>
 8010c3a:	bf00      	nop
 8010c3c:	2000010c 	.word	0x2000010c

08010c40 <sbrk_aligned>:
 8010c40:	b570      	push	{r4, r5, r6, lr}
 8010c42:	4e0e      	ldr	r6, [pc, #56]	; (8010c7c <sbrk_aligned+0x3c>)
 8010c44:	460c      	mov	r4, r1
 8010c46:	6831      	ldr	r1, [r6, #0]
 8010c48:	4605      	mov	r5, r0
 8010c4a:	b911      	cbnz	r1, 8010c52 <sbrk_aligned+0x12>
 8010c4c:	f000 fc10 	bl	8011470 <_sbrk_r>
 8010c50:	6030      	str	r0, [r6, #0]
 8010c52:	4621      	mov	r1, r4
 8010c54:	4628      	mov	r0, r5
 8010c56:	f000 fc0b 	bl	8011470 <_sbrk_r>
 8010c5a:	1c43      	adds	r3, r0, #1
 8010c5c:	d00a      	beq.n	8010c74 <sbrk_aligned+0x34>
 8010c5e:	1cc4      	adds	r4, r0, #3
 8010c60:	f024 0403 	bic.w	r4, r4, #3
 8010c64:	42a0      	cmp	r0, r4
 8010c66:	d007      	beq.n	8010c78 <sbrk_aligned+0x38>
 8010c68:	1a21      	subs	r1, r4, r0
 8010c6a:	4628      	mov	r0, r5
 8010c6c:	f000 fc00 	bl	8011470 <_sbrk_r>
 8010c70:	3001      	adds	r0, #1
 8010c72:	d101      	bne.n	8010c78 <sbrk_aligned+0x38>
 8010c74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010c78:	4620      	mov	r0, r4
 8010c7a:	bd70      	pop	{r4, r5, r6, pc}
 8010c7c:	20010bc4 	.word	0x20010bc4

08010c80 <_malloc_r>:
 8010c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c84:	1ccd      	adds	r5, r1, #3
 8010c86:	f025 0503 	bic.w	r5, r5, #3
 8010c8a:	3508      	adds	r5, #8
 8010c8c:	2d0c      	cmp	r5, #12
 8010c8e:	bf38      	it	cc
 8010c90:	250c      	movcc	r5, #12
 8010c92:	2d00      	cmp	r5, #0
 8010c94:	4607      	mov	r7, r0
 8010c96:	db01      	blt.n	8010c9c <_malloc_r+0x1c>
 8010c98:	42a9      	cmp	r1, r5
 8010c9a:	d905      	bls.n	8010ca8 <_malloc_r+0x28>
 8010c9c:	230c      	movs	r3, #12
 8010c9e:	603b      	str	r3, [r7, #0]
 8010ca0:	2600      	movs	r6, #0
 8010ca2:	4630      	mov	r0, r6
 8010ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ca8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010d7c <_malloc_r+0xfc>
 8010cac:	f000 f868 	bl	8010d80 <__malloc_lock>
 8010cb0:	f8d8 3000 	ldr.w	r3, [r8]
 8010cb4:	461c      	mov	r4, r3
 8010cb6:	bb5c      	cbnz	r4, 8010d10 <_malloc_r+0x90>
 8010cb8:	4629      	mov	r1, r5
 8010cba:	4638      	mov	r0, r7
 8010cbc:	f7ff ffc0 	bl	8010c40 <sbrk_aligned>
 8010cc0:	1c43      	adds	r3, r0, #1
 8010cc2:	4604      	mov	r4, r0
 8010cc4:	d155      	bne.n	8010d72 <_malloc_r+0xf2>
 8010cc6:	f8d8 4000 	ldr.w	r4, [r8]
 8010cca:	4626      	mov	r6, r4
 8010ccc:	2e00      	cmp	r6, #0
 8010cce:	d145      	bne.n	8010d5c <_malloc_r+0xdc>
 8010cd0:	2c00      	cmp	r4, #0
 8010cd2:	d048      	beq.n	8010d66 <_malloc_r+0xe6>
 8010cd4:	6823      	ldr	r3, [r4, #0]
 8010cd6:	4631      	mov	r1, r6
 8010cd8:	4638      	mov	r0, r7
 8010cda:	eb04 0903 	add.w	r9, r4, r3
 8010cde:	f000 fbc7 	bl	8011470 <_sbrk_r>
 8010ce2:	4581      	cmp	r9, r0
 8010ce4:	d13f      	bne.n	8010d66 <_malloc_r+0xe6>
 8010ce6:	6821      	ldr	r1, [r4, #0]
 8010ce8:	1a6d      	subs	r5, r5, r1
 8010cea:	4629      	mov	r1, r5
 8010cec:	4638      	mov	r0, r7
 8010cee:	f7ff ffa7 	bl	8010c40 <sbrk_aligned>
 8010cf2:	3001      	adds	r0, #1
 8010cf4:	d037      	beq.n	8010d66 <_malloc_r+0xe6>
 8010cf6:	6823      	ldr	r3, [r4, #0]
 8010cf8:	442b      	add	r3, r5
 8010cfa:	6023      	str	r3, [r4, #0]
 8010cfc:	f8d8 3000 	ldr.w	r3, [r8]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d038      	beq.n	8010d76 <_malloc_r+0xf6>
 8010d04:	685a      	ldr	r2, [r3, #4]
 8010d06:	42a2      	cmp	r2, r4
 8010d08:	d12b      	bne.n	8010d62 <_malloc_r+0xe2>
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	605a      	str	r2, [r3, #4]
 8010d0e:	e00f      	b.n	8010d30 <_malloc_r+0xb0>
 8010d10:	6822      	ldr	r2, [r4, #0]
 8010d12:	1b52      	subs	r2, r2, r5
 8010d14:	d41f      	bmi.n	8010d56 <_malloc_r+0xd6>
 8010d16:	2a0b      	cmp	r2, #11
 8010d18:	d917      	bls.n	8010d4a <_malloc_r+0xca>
 8010d1a:	1961      	adds	r1, r4, r5
 8010d1c:	42a3      	cmp	r3, r4
 8010d1e:	6025      	str	r5, [r4, #0]
 8010d20:	bf18      	it	ne
 8010d22:	6059      	strne	r1, [r3, #4]
 8010d24:	6863      	ldr	r3, [r4, #4]
 8010d26:	bf08      	it	eq
 8010d28:	f8c8 1000 	streq.w	r1, [r8]
 8010d2c:	5162      	str	r2, [r4, r5]
 8010d2e:	604b      	str	r3, [r1, #4]
 8010d30:	4638      	mov	r0, r7
 8010d32:	f104 060b 	add.w	r6, r4, #11
 8010d36:	f000 f829 	bl	8010d8c <__malloc_unlock>
 8010d3a:	f026 0607 	bic.w	r6, r6, #7
 8010d3e:	1d23      	adds	r3, r4, #4
 8010d40:	1af2      	subs	r2, r6, r3
 8010d42:	d0ae      	beq.n	8010ca2 <_malloc_r+0x22>
 8010d44:	1b9b      	subs	r3, r3, r6
 8010d46:	50a3      	str	r3, [r4, r2]
 8010d48:	e7ab      	b.n	8010ca2 <_malloc_r+0x22>
 8010d4a:	42a3      	cmp	r3, r4
 8010d4c:	6862      	ldr	r2, [r4, #4]
 8010d4e:	d1dd      	bne.n	8010d0c <_malloc_r+0x8c>
 8010d50:	f8c8 2000 	str.w	r2, [r8]
 8010d54:	e7ec      	b.n	8010d30 <_malloc_r+0xb0>
 8010d56:	4623      	mov	r3, r4
 8010d58:	6864      	ldr	r4, [r4, #4]
 8010d5a:	e7ac      	b.n	8010cb6 <_malloc_r+0x36>
 8010d5c:	4634      	mov	r4, r6
 8010d5e:	6876      	ldr	r6, [r6, #4]
 8010d60:	e7b4      	b.n	8010ccc <_malloc_r+0x4c>
 8010d62:	4613      	mov	r3, r2
 8010d64:	e7cc      	b.n	8010d00 <_malloc_r+0x80>
 8010d66:	230c      	movs	r3, #12
 8010d68:	603b      	str	r3, [r7, #0]
 8010d6a:	4638      	mov	r0, r7
 8010d6c:	f000 f80e 	bl	8010d8c <__malloc_unlock>
 8010d70:	e797      	b.n	8010ca2 <_malloc_r+0x22>
 8010d72:	6025      	str	r5, [r4, #0]
 8010d74:	e7dc      	b.n	8010d30 <_malloc_r+0xb0>
 8010d76:	605b      	str	r3, [r3, #4]
 8010d78:	deff      	udf	#255	; 0xff
 8010d7a:	bf00      	nop
 8010d7c:	20010bc0 	.word	0x20010bc0

08010d80 <__malloc_lock>:
 8010d80:	4801      	ldr	r0, [pc, #4]	; (8010d88 <__malloc_lock+0x8>)
 8010d82:	f000 bbc2 	b.w	801150a <__retarget_lock_acquire_recursive>
 8010d86:	bf00      	nop
 8010d88:	20010d09 	.word	0x20010d09

08010d8c <__malloc_unlock>:
 8010d8c:	4801      	ldr	r0, [pc, #4]	; (8010d94 <__malloc_unlock+0x8>)
 8010d8e:	f000 bbbd 	b.w	801150c <__retarget_lock_release_recursive>
 8010d92:	bf00      	nop
 8010d94:	20010d09 	.word	0x20010d09

08010d98 <srand>:
 8010d98:	b538      	push	{r3, r4, r5, lr}
 8010d9a:	4b10      	ldr	r3, [pc, #64]	; (8010ddc <srand+0x44>)
 8010d9c:	681d      	ldr	r5, [r3, #0]
 8010d9e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010da0:	4604      	mov	r4, r0
 8010da2:	b9b3      	cbnz	r3, 8010dd2 <srand+0x3a>
 8010da4:	2018      	movs	r0, #24
 8010da6:	f7ff ff3b 	bl	8010c20 <malloc>
 8010daa:	4602      	mov	r2, r0
 8010dac:	6328      	str	r0, [r5, #48]	; 0x30
 8010dae:	b920      	cbnz	r0, 8010dba <srand+0x22>
 8010db0:	4b0b      	ldr	r3, [pc, #44]	; (8010de0 <srand+0x48>)
 8010db2:	480c      	ldr	r0, [pc, #48]	; (8010de4 <srand+0x4c>)
 8010db4:	2146      	movs	r1, #70	; 0x46
 8010db6:	f000 fbc1 	bl	801153c <__assert_func>
 8010dba:	490b      	ldr	r1, [pc, #44]	; (8010de8 <srand+0x50>)
 8010dbc:	4b0b      	ldr	r3, [pc, #44]	; (8010dec <srand+0x54>)
 8010dbe:	e9c0 1300 	strd	r1, r3, [r0]
 8010dc2:	4b0b      	ldr	r3, [pc, #44]	; (8010df0 <srand+0x58>)
 8010dc4:	6083      	str	r3, [r0, #8]
 8010dc6:	230b      	movs	r3, #11
 8010dc8:	8183      	strh	r3, [r0, #12]
 8010dca:	2100      	movs	r1, #0
 8010dcc:	2001      	movs	r0, #1
 8010dce:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010dd2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	611c      	str	r4, [r3, #16]
 8010dd8:	615a      	str	r2, [r3, #20]
 8010dda:	bd38      	pop	{r3, r4, r5, pc}
 8010ddc:	2000010c 	.word	0x2000010c
 8010de0:	08012d34 	.word	0x08012d34
 8010de4:	08012d4b 	.word	0x08012d4b
 8010de8:	abcd330e 	.word	0xabcd330e
 8010dec:	e66d1234 	.word	0xe66d1234
 8010df0:	0005deec 	.word	0x0005deec

08010df4 <rand>:
 8010df4:	4b16      	ldr	r3, [pc, #88]	; (8010e50 <rand+0x5c>)
 8010df6:	b510      	push	{r4, lr}
 8010df8:	681c      	ldr	r4, [r3, #0]
 8010dfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010dfc:	b9b3      	cbnz	r3, 8010e2c <rand+0x38>
 8010dfe:	2018      	movs	r0, #24
 8010e00:	f7ff ff0e 	bl	8010c20 <malloc>
 8010e04:	4602      	mov	r2, r0
 8010e06:	6320      	str	r0, [r4, #48]	; 0x30
 8010e08:	b920      	cbnz	r0, 8010e14 <rand+0x20>
 8010e0a:	4b12      	ldr	r3, [pc, #72]	; (8010e54 <rand+0x60>)
 8010e0c:	4812      	ldr	r0, [pc, #72]	; (8010e58 <rand+0x64>)
 8010e0e:	2152      	movs	r1, #82	; 0x52
 8010e10:	f000 fb94 	bl	801153c <__assert_func>
 8010e14:	4911      	ldr	r1, [pc, #68]	; (8010e5c <rand+0x68>)
 8010e16:	4b12      	ldr	r3, [pc, #72]	; (8010e60 <rand+0x6c>)
 8010e18:	e9c0 1300 	strd	r1, r3, [r0]
 8010e1c:	4b11      	ldr	r3, [pc, #68]	; (8010e64 <rand+0x70>)
 8010e1e:	6083      	str	r3, [r0, #8]
 8010e20:	230b      	movs	r3, #11
 8010e22:	8183      	strh	r3, [r0, #12]
 8010e24:	2100      	movs	r1, #0
 8010e26:	2001      	movs	r0, #1
 8010e28:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010e2c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010e2e:	480e      	ldr	r0, [pc, #56]	; (8010e68 <rand+0x74>)
 8010e30:	690b      	ldr	r3, [r1, #16]
 8010e32:	694c      	ldr	r4, [r1, #20]
 8010e34:	4a0d      	ldr	r2, [pc, #52]	; (8010e6c <rand+0x78>)
 8010e36:	4358      	muls	r0, r3
 8010e38:	fb02 0004 	mla	r0, r2, r4, r0
 8010e3c:	fba3 3202 	umull	r3, r2, r3, r2
 8010e40:	3301      	adds	r3, #1
 8010e42:	eb40 0002 	adc.w	r0, r0, r2
 8010e46:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010e4a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010e4e:	bd10      	pop	{r4, pc}
 8010e50:	2000010c 	.word	0x2000010c
 8010e54:	08012d34 	.word	0x08012d34
 8010e58:	08012d4b 	.word	0x08012d4b
 8010e5c:	abcd330e 	.word	0xabcd330e
 8010e60:	e66d1234 	.word	0xe66d1234
 8010e64:	0005deec 	.word	0x0005deec
 8010e68:	5851f42d 	.word	0x5851f42d
 8010e6c:	4c957f2d 	.word	0x4c957f2d

08010e70 <realloc>:
 8010e70:	4b02      	ldr	r3, [pc, #8]	; (8010e7c <realloc+0xc>)
 8010e72:	460a      	mov	r2, r1
 8010e74:	4601      	mov	r1, r0
 8010e76:	6818      	ldr	r0, [r3, #0]
 8010e78:	f000 b802 	b.w	8010e80 <_realloc_r>
 8010e7c:	2000010c 	.word	0x2000010c

08010e80 <_realloc_r>:
 8010e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e84:	4680      	mov	r8, r0
 8010e86:	4614      	mov	r4, r2
 8010e88:	460e      	mov	r6, r1
 8010e8a:	b921      	cbnz	r1, 8010e96 <_realloc_r+0x16>
 8010e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e90:	4611      	mov	r1, r2
 8010e92:	f7ff bef5 	b.w	8010c80 <_malloc_r>
 8010e96:	b92a      	cbnz	r2, 8010ea4 <_realloc_r+0x24>
 8010e98:	f000 fb7a 	bl	8011590 <_free_r>
 8010e9c:	4625      	mov	r5, r4
 8010e9e:	4628      	mov	r0, r5
 8010ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ea4:	f000 fbc0 	bl	8011628 <_malloc_usable_size_r>
 8010ea8:	4284      	cmp	r4, r0
 8010eaa:	4607      	mov	r7, r0
 8010eac:	d802      	bhi.n	8010eb4 <_realloc_r+0x34>
 8010eae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010eb2:	d812      	bhi.n	8010eda <_realloc_r+0x5a>
 8010eb4:	4621      	mov	r1, r4
 8010eb6:	4640      	mov	r0, r8
 8010eb8:	f7ff fee2 	bl	8010c80 <_malloc_r>
 8010ebc:	4605      	mov	r5, r0
 8010ebe:	2800      	cmp	r0, #0
 8010ec0:	d0ed      	beq.n	8010e9e <_realloc_r+0x1e>
 8010ec2:	42bc      	cmp	r4, r7
 8010ec4:	4622      	mov	r2, r4
 8010ec6:	4631      	mov	r1, r6
 8010ec8:	bf28      	it	cs
 8010eca:	463a      	movcs	r2, r7
 8010ecc:	f000 fb27 	bl	801151e <memcpy>
 8010ed0:	4631      	mov	r1, r6
 8010ed2:	4640      	mov	r0, r8
 8010ed4:	f000 fb5c 	bl	8011590 <_free_r>
 8010ed8:	e7e1      	b.n	8010e9e <_realloc_r+0x1e>
 8010eda:	4635      	mov	r5, r6
 8010edc:	e7df      	b.n	8010e9e <_realloc_r+0x1e>
	...

08010ee0 <_strtoul_l.constprop.0>:
 8010ee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ee4:	4f36      	ldr	r7, [pc, #216]	; (8010fc0 <_strtoul_l.constprop.0+0xe0>)
 8010ee6:	4686      	mov	lr, r0
 8010ee8:	460d      	mov	r5, r1
 8010eea:	4628      	mov	r0, r5
 8010eec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010ef0:	5d3e      	ldrb	r6, [r7, r4]
 8010ef2:	f016 0608 	ands.w	r6, r6, #8
 8010ef6:	d1f8      	bne.n	8010eea <_strtoul_l.constprop.0+0xa>
 8010ef8:	2c2d      	cmp	r4, #45	; 0x2d
 8010efa:	d130      	bne.n	8010f5e <_strtoul_l.constprop.0+0x7e>
 8010efc:	782c      	ldrb	r4, [r5, #0]
 8010efe:	2601      	movs	r6, #1
 8010f00:	1c85      	adds	r5, r0, #2
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d057      	beq.n	8010fb6 <_strtoul_l.constprop.0+0xd6>
 8010f06:	2b10      	cmp	r3, #16
 8010f08:	d109      	bne.n	8010f1e <_strtoul_l.constprop.0+0x3e>
 8010f0a:	2c30      	cmp	r4, #48	; 0x30
 8010f0c:	d107      	bne.n	8010f1e <_strtoul_l.constprop.0+0x3e>
 8010f0e:	7828      	ldrb	r0, [r5, #0]
 8010f10:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010f14:	2858      	cmp	r0, #88	; 0x58
 8010f16:	d149      	bne.n	8010fac <_strtoul_l.constprop.0+0xcc>
 8010f18:	786c      	ldrb	r4, [r5, #1]
 8010f1a:	2310      	movs	r3, #16
 8010f1c:	3502      	adds	r5, #2
 8010f1e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8010f22:	2700      	movs	r7, #0
 8010f24:	fbb8 f8f3 	udiv	r8, r8, r3
 8010f28:	fb03 f908 	mul.w	r9, r3, r8
 8010f2c:	ea6f 0909 	mvn.w	r9, r9
 8010f30:	4638      	mov	r0, r7
 8010f32:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010f36:	f1bc 0f09 	cmp.w	ip, #9
 8010f3a:	d815      	bhi.n	8010f68 <_strtoul_l.constprop.0+0x88>
 8010f3c:	4664      	mov	r4, ip
 8010f3e:	42a3      	cmp	r3, r4
 8010f40:	dd23      	ble.n	8010f8a <_strtoul_l.constprop.0+0xaa>
 8010f42:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8010f46:	d007      	beq.n	8010f58 <_strtoul_l.constprop.0+0x78>
 8010f48:	4580      	cmp	r8, r0
 8010f4a:	d31b      	bcc.n	8010f84 <_strtoul_l.constprop.0+0xa4>
 8010f4c:	d101      	bne.n	8010f52 <_strtoul_l.constprop.0+0x72>
 8010f4e:	45a1      	cmp	r9, r4
 8010f50:	db18      	blt.n	8010f84 <_strtoul_l.constprop.0+0xa4>
 8010f52:	fb00 4003 	mla	r0, r0, r3, r4
 8010f56:	2701      	movs	r7, #1
 8010f58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010f5c:	e7e9      	b.n	8010f32 <_strtoul_l.constprop.0+0x52>
 8010f5e:	2c2b      	cmp	r4, #43	; 0x2b
 8010f60:	bf04      	itt	eq
 8010f62:	782c      	ldrbeq	r4, [r5, #0]
 8010f64:	1c85      	addeq	r5, r0, #2
 8010f66:	e7cc      	b.n	8010f02 <_strtoul_l.constprop.0+0x22>
 8010f68:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010f6c:	f1bc 0f19 	cmp.w	ip, #25
 8010f70:	d801      	bhi.n	8010f76 <_strtoul_l.constprop.0+0x96>
 8010f72:	3c37      	subs	r4, #55	; 0x37
 8010f74:	e7e3      	b.n	8010f3e <_strtoul_l.constprop.0+0x5e>
 8010f76:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010f7a:	f1bc 0f19 	cmp.w	ip, #25
 8010f7e:	d804      	bhi.n	8010f8a <_strtoul_l.constprop.0+0xaa>
 8010f80:	3c57      	subs	r4, #87	; 0x57
 8010f82:	e7dc      	b.n	8010f3e <_strtoul_l.constprop.0+0x5e>
 8010f84:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010f88:	e7e6      	b.n	8010f58 <_strtoul_l.constprop.0+0x78>
 8010f8a:	1c7b      	adds	r3, r7, #1
 8010f8c:	d106      	bne.n	8010f9c <_strtoul_l.constprop.0+0xbc>
 8010f8e:	2322      	movs	r3, #34	; 0x22
 8010f90:	f8ce 3000 	str.w	r3, [lr]
 8010f94:	4638      	mov	r0, r7
 8010f96:	b932      	cbnz	r2, 8010fa6 <_strtoul_l.constprop.0+0xc6>
 8010f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f9c:	b106      	cbz	r6, 8010fa0 <_strtoul_l.constprop.0+0xc0>
 8010f9e:	4240      	negs	r0, r0
 8010fa0:	2a00      	cmp	r2, #0
 8010fa2:	d0f9      	beq.n	8010f98 <_strtoul_l.constprop.0+0xb8>
 8010fa4:	b107      	cbz	r7, 8010fa8 <_strtoul_l.constprop.0+0xc8>
 8010fa6:	1e69      	subs	r1, r5, #1
 8010fa8:	6011      	str	r1, [r2, #0]
 8010faa:	e7f5      	b.n	8010f98 <_strtoul_l.constprop.0+0xb8>
 8010fac:	2430      	movs	r4, #48	; 0x30
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d1b5      	bne.n	8010f1e <_strtoul_l.constprop.0+0x3e>
 8010fb2:	2308      	movs	r3, #8
 8010fb4:	e7b3      	b.n	8010f1e <_strtoul_l.constprop.0+0x3e>
 8010fb6:	2c30      	cmp	r4, #48	; 0x30
 8010fb8:	d0a9      	beq.n	8010f0e <_strtoul_l.constprop.0+0x2e>
 8010fba:	230a      	movs	r3, #10
 8010fbc:	e7af      	b.n	8010f1e <_strtoul_l.constprop.0+0x3e>
 8010fbe:	bf00      	nop
 8010fc0:	08012da4 	.word	0x08012da4

08010fc4 <strtoul>:
 8010fc4:	4613      	mov	r3, r2
 8010fc6:	460a      	mov	r2, r1
 8010fc8:	4601      	mov	r1, r0
 8010fca:	4802      	ldr	r0, [pc, #8]	; (8010fd4 <strtoul+0x10>)
 8010fcc:	6800      	ldr	r0, [r0, #0]
 8010fce:	f7ff bf87 	b.w	8010ee0 <_strtoul_l.constprop.0>
 8010fd2:	bf00      	nop
 8010fd4:	2000010c 	.word	0x2000010c

08010fd8 <std>:
 8010fd8:	2300      	movs	r3, #0
 8010fda:	b510      	push	{r4, lr}
 8010fdc:	4604      	mov	r4, r0
 8010fde:	e9c0 3300 	strd	r3, r3, [r0]
 8010fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010fe6:	6083      	str	r3, [r0, #8]
 8010fe8:	8181      	strh	r1, [r0, #12]
 8010fea:	6643      	str	r3, [r0, #100]	; 0x64
 8010fec:	81c2      	strh	r2, [r0, #14]
 8010fee:	6183      	str	r3, [r0, #24]
 8010ff0:	4619      	mov	r1, r3
 8010ff2:	2208      	movs	r2, #8
 8010ff4:	305c      	adds	r0, #92	; 0x5c
 8010ff6:	f000 f973 	bl	80112e0 <memset>
 8010ffa:	4b0d      	ldr	r3, [pc, #52]	; (8011030 <std+0x58>)
 8010ffc:	6263      	str	r3, [r4, #36]	; 0x24
 8010ffe:	4b0d      	ldr	r3, [pc, #52]	; (8011034 <std+0x5c>)
 8011000:	62a3      	str	r3, [r4, #40]	; 0x28
 8011002:	4b0d      	ldr	r3, [pc, #52]	; (8011038 <std+0x60>)
 8011004:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011006:	4b0d      	ldr	r3, [pc, #52]	; (801103c <std+0x64>)
 8011008:	6323      	str	r3, [r4, #48]	; 0x30
 801100a:	4b0d      	ldr	r3, [pc, #52]	; (8011040 <std+0x68>)
 801100c:	6224      	str	r4, [r4, #32]
 801100e:	429c      	cmp	r4, r3
 8011010:	d006      	beq.n	8011020 <std+0x48>
 8011012:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011016:	4294      	cmp	r4, r2
 8011018:	d002      	beq.n	8011020 <std+0x48>
 801101a:	33d0      	adds	r3, #208	; 0xd0
 801101c:	429c      	cmp	r4, r3
 801101e:	d105      	bne.n	801102c <std+0x54>
 8011020:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011028:	f000 ba6e 	b.w	8011508 <__retarget_lock_init_recursive>
 801102c:	bd10      	pop	{r4, pc}
 801102e:	bf00      	nop
 8011030:	080111e9 	.word	0x080111e9
 8011034:	0801120b 	.word	0x0801120b
 8011038:	08011243 	.word	0x08011243
 801103c:	08011267 	.word	0x08011267
 8011040:	20010bc8 	.word	0x20010bc8

08011044 <stdio_exit_handler>:
 8011044:	4a02      	ldr	r2, [pc, #8]	; (8011050 <stdio_exit_handler+0xc>)
 8011046:	4903      	ldr	r1, [pc, #12]	; (8011054 <stdio_exit_handler+0x10>)
 8011048:	4803      	ldr	r0, [pc, #12]	; (8011058 <stdio_exit_handler+0x14>)
 801104a:	f000 b869 	b.w	8011120 <_fwalk_sglue>
 801104e:	bf00      	nop
 8011050:	200000b4 	.word	0x200000b4
 8011054:	08011f9d 	.word	0x08011f9d
 8011058:	200000c0 	.word	0x200000c0

0801105c <cleanup_stdio>:
 801105c:	6841      	ldr	r1, [r0, #4]
 801105e:	4b0c      	ldr	r3, [pc, #48]	; (8011090 <cleanup_stdio+0x34>)
 8011060:	4299      	cmp	r1, r3
 8011062:	b510      	push	{r4, lr}
 8011064:	4604      	mov	r4, r0
 8011066:	d001      	beq.n	801106c <cleanup_stdio+0x10>
 8011068:	f000 ff98 	bl	8011f9c <_fflush_r>
 801106c:	68a1      	ldr	r1, [r4, #8]
 801106e:	4b09      	ldr	r3, [pc, #36]	; (8011094 <cleanup_stdio+0x38>)
 8011070:	4299      	cmp	r1, r3
 8011072:	d002      	beq.n	801107a <cleanup_stdio+0x1e>
 8011074:	4620      	mov	r0, r4
 8011076:	f000 ff91 	bl	8011f9c <_fflush_r>
 801107a:	68e1      	ldr	r1, [r4, #12]
 801107c:	4b06      	ldr	r3, [pc, #24]	; (8011098 <cleanup_stdio+0x3c>)
 801107e:	4299      	cmp	r1, r3
 8011080:	d004      	beq.n	801108c <cleanup_stdio+0x30>
 8011082:	4620      	mov	r0, r4
 8011084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011088:	f000 bf88 	b.w	8011f9c <_fflush_r>
 801108c:	bd10      	pop	{r4, pc}
 801108e:	bf00      	nop
 8011090:	20010bc8 	.word	0x20010bc8
 8011094:	20010c30 	.word	0x20010c30
 8011098:	20010c98 	.word	0x20010c98

0801109c <global_stdio_init.part.0>:
 801109c:	b510      	push	{r4, lr}
 801109e:	4b0b      	ldr	r3, [pc, #44]	; (80110cc <global_stdio_init.part.0+0x30>)
 80110a0:	4c0b      	ldr	r4, [pc, #44]	; (80110d0 <global_stdio_init.part.0+0x34>)
 80110a2:	4a0c      	ldr	r2, [pc, #48]	; (80110d4 <global_stdio_init.part.0+0x38>)
 80110a4:	601a      	str	r2, [r3, #0]
 80110a6:	4620      	mov	r0, r4
 80110a8:	2200      	movs	r2, #0
 80110aa:	2104      	movs	r1, #4
 80110ac:	f7ff ff94 	bl	8010fd8 <std>
 80110b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80110b4:	2201      	movs	r2, #1
 80110b6:	2109      	movs	r1, #9
 80110b8:	f7ff ff8e 	bl	8010fd8 <std>
 80110bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80110c0:	2202      	movs	r2, #2
 80110c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110c6:	2112      	movs	r1, #18
 80110c8:	f7ff bf86 	b.w	8010fd8 <std>
 80110cc:	20010d00 	.word	0x20010d00
 80110d0:	20010bc8 	.word	0x20010bc8
 80110d4:	08011045 	.word	0x08011045

080110d8 <__sfp_lock_acquire>:
 80110d8:	4801      	ldr	r0, [pc, #4]	; (80110e0 <__sfp_lock_acquire+0x8>)
 80110da:	f000 ba16 	b.w	801150a <__retarget_lock_acquire_recursive>
 80110de:	bf00      	nop
 80110e0:	20010d0a 	.word	0x20010d0a

080110e4 <__sfp_lock_release>:
 80110e4:	4801      	ldr	r0, [pc, #4]	; (80110ec <__sfp_lock_release+0x8>)
 80110e6:	f000 ba11 	b.w	801150c <__retarget_lock_release_recursive>
 80110ea:	bf00      	nop
 80110ec:	20010d0a 	.word	0x20010d0a

080110f0 <__sinit>:
 80110f0:	b510      	push	{r4, lr}
 80110f2:	4604      	mov	r4, r0
 80110f4:	f7ff fff0 	bl	80110d8 <__sfp_lock_acquire>
 80110f8:	6a23      	ldr	r3, [r4, #32]
 80110fa:	b11b      	cbz	r3, 8011104 <__sinit+0x14>
 80110fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011100:	f7ff bff0 	b.w	80110e4 <__sfp_lock_release>
 8011104:	4b04      	ldr	r3, [pc, #16]	; (8011118 <__sinit+0x28>)
 8011106:	6223      	str	r3, [r4, #32]
 8011108:	4b04      	ldr	r3, [pc, #16]	; (801111c <__sinit+0x2c>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d1f5      	bne.n	80110fc <__sinit+0xc>
 8011110:	f7ff ffc4 	bl	801109c <global_stdio_init.part.0>
 8011114:	e7f2      	b.n	80110fc <__sinit+0xc>
 8011116:	bf00      	nop
 8011118:	0801105d 	.word	0x0801105d
 801111c:	20010d00 	.word	0x20010d00

08011120 <_fwalk_sglue>:
 8011120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011124:	4607      	mov	r7, r0
 8011126:	4688      	mov	r8, r1
 8011128:	4614      	mov	r4, r2
 801112a:	2600      	movs	r6, #0
 801112c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011130:	f1b9 0901 	subs.w	r9, r9, #1
 8011134:	d505      	bpl.n	8011142 <_fwalk_sglue+0x22>
 8011136:	6824      	ldr	r4, [r4, #0]
 8011138:	2c00      	cmp	r4, #0
 801113a:	d1f7      	bne.n	801112c <_fwalk_sglue+0xc>
 801113c:	4630      	mov	r0, r6
 801113e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011142:	89ab      	ldrh	r3, [r5, #12]
 8011144:	2b01      	cmp	r3, #1
 8011146:	d907      	bls.n	8011158 <_fwalk_sglue+0x38>
 8011148:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801114c:	3301      	adds	r3, #1
 801114e:	d003      	beq.n	8011158 <_fwalk_sglue+0x38>
 8011150:	4629      	mov	r1, r5
 8011152:	4638      	mov	r0, r7
 8011154:	47c0      	blx	r8
 8011156:	4306      	orrs	r6, r0
 8011158:	3568      	adds	r5, #104	; 0x68
 801115a:	e7e9      	b.n	8011130 <_fwalk_sglue+0x10>

0801115c <iprintf>:
 801115c:	b40f      	push	{r0, r1, r2, r3}
 801115e:	b507      	push	{r0, r1, r2, lr}
 8011160:	4906      	ldr	r1, [pc, #24]	; (801117c <iprintf+0x20>)
 8011162:	ab04      	add	r3, sp, #16
 8011164:	6808      	ldr	r0, [r1, #0]
 8011166:	f853 2b04 	ldr.w	r2, [r3], #4
 801116a:	6881      	ldr	r1, [r0, #8]
 801116c:	9301      	str	r3, [sp, #4]
 801116e:	f000 fbe5 	bl	801193c <_vfiprintf_r>
 8011172:	b003      	add	sp, #12
 8011174:	f85d eb04 	ldr.w	lr, [sp], #4
 8011178:	b004      	add	sp, #16
 801117a:	4770      	bx	lr
 801117c:	2000010c 	.word	0x2000010c

08011180 <sniprintf>:
 8011180:	b40c      	push	{r2, r3}
 8011182:	b530      	push	{r4, r5, lr}
 8011184:	4b17      	ldr	r3, [pc, #92]	; (80111e4 <sniprintf+0x64>)
 8011186:	1e0c      	subs	r4, r1, #0
 8011188:	681d      	ldr	r5, [r3, #0]
 801118a:	b09d      	sub	sp, #116	; 0x74
 801118c:	da08      	bge.n	80111a0 <sniprintf+0x20>
 801118e:	238b      	movs	r3, #139	; 0x8b
 8011190:	602b      	str	r3, [r5, #0]
 8011192:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011196:	b01d      	add	sp, #116	; 0x74
 8011198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801119c:	b002      	add	sp, #8
 801119e:	4770      	bx	lr
 80111a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80111a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80111a8:	bf14      	ite	ne
 80111aa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80111ae:	4623      	moveq	r3, r4
 80111b0:	9304      	str	r3, [sp, #16]
 80111b2:	9307      	str	r3, [sp, #28]
 80111b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80111b8:	9002      	str	r0, [sp, #8]
 80111ba:	9006      	str	r0, [sp, #24]
 80111bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80111c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80111c2:	ab21      	add	r3, sp, #132	; 0x84
 80111c4:	a902      	add	r1, sp, #8
 80111c6:	4628      	mov	r0, r5
 80111c8:	9301      	str	r3, [sp, #4]
 80111ca:	f000 fa8f 	bl	80116ec <_svfiprintf_r>
 80111ce:	1c43      	adds	r3, r0, #1
 80111d0:	bfbc      	itt	lt
 80111d2:	238b      	movlt	r3, #139	; 0x8b
 80111d4:	602b      	strlt	r3, [r5, #0]
 80111d6:	2c00      	cmp	r4, #0
 80111d8:	d0dd      	beq.n	8011196 <sniprintf+0x16>
 80111da:	9b02      	ldr	r3, [sp, #8]
 80111dc:	2200      	movs	r2, #0
 80111de:	701a      	strb	r2, [r3, #0]
 80111e0:	e7d9      	b.n	8011196 <sniprintf+0x16>
 80111e2:	bf00      	nop
 80111e4:	2000010c 	.word	0x2000010c

080111e8 <__sread>:
 80111e8:	b510      	push	{r4, lr}
 80111ea:	460c      	mov	r4, r1
 80111ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111f0:	f000 f92c 	bl	801144c <_read_r>
 80111f4:	2800      	cmp	r0, #0
 80111f6:	bfab      	itete	ge
 80111f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80111fa:	89a3      	ldrhlt	r3, [r4, #12]
 80111fc:	181b      	addge	r3, r3, r0
 80111fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011202:	bfac      	ite	ge
 8011204:	6563      	strge	r3, [r4, #84]	; 0x54
 8011206:	81a3      	strhlt	r3, [r4, #12]
 8011208:	bd10      	pop	{r4, pc}

0801120a <__swrite>:
 801120a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801120e:	461f      	mov	r7, r3
 8011210:	898b      	ldrh	r3, [r1, #12]
 8011212:	05db      	lsls	r3, r3, #23
 8011214:	4605      	mov	r5, r0
 8011216:	460c      	mov	r4, r1
 8011218:	4616      	mov	r6, r2
 801121a:	d505      	bpl.n	8011228 <__swrite+0x1e>
 801121c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011220:	2302      	movs	r3, #2
 8011222:	2200      	movs	r2, #0
 8011224:	f000 f900 	bl	8011428 <_lseek_r>
 8011228:	89a3      	ldrh	r3, [r4, #12]
 801122a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801122e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011232:	81a3      	strh	r3, [r4, #12]
 8011234:	4632      	mov	r2, r6
 8011236:	463b      	mov	r3, r7
 8011238:	4628      	mov	r0, r5
 801123a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801123e:	f000 b927 	b.w	8011490 <_write_r>

08011242 <__sseek>:
 8011242:	b510      	push	{r4, lr}
 8011244:	460c      	mov	r4, r1
 8011246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801124a:	f000 f8ed 	bl	8011428 <_lseek_r>
 801124e:	1c43      	adds	r3, r0, #1
 8011250:	89a3      	ldrh	r3, [r4, #12]
 8011252:	bf15      	itete	ne
 8011254:	6560      	strne	r0, [r4, #84]	; 0x54
 8011256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801125a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801125e:	81a3      	strheq	r3, [r4, #12]
 8011260:	bf18      	it	ne
 8011262:	81a3      	strhne	r3, [r4, #12]
 8011264:	bd10      	pop	{r4, pc}

08011266 <__sclose>:
 8011266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801126a:	f000 b877 	b.w	801135c <_close_r>

0801126e <_vsniprintf_r>:
 801126e:	b530      	push	{r4, r5, lr}
 8011270:	4614      	mov	r4, r2
 8011272:	2c00      	cmp	r4, #0
 8011274:	b09b      	sub	sp, #108	; 0x6c
 8011276:	4605      	mov	r5, r0
 8011278:	461a      	mov	r2, r3
 801127a:	da05      	bge.n	8011288 <_vsniprintf_r+0x1a>
 801127c:	238b      	movs	r3, #139	; 0x8b
 801127e:	6003      	str	r3, [r0, #0]
 8011280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011284:	b01b      	add	sp, #108	; 0x6c
 8011286:	bd30      	pop	{r4, r5, pc}
 8011288:	f44f 7302 	mov.w	r3, #520	; 0x208
 801128c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011290:	bf14      	ite	ne
 8011292:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8011296:	4623      	moveq	r3, r4
 8011298:	9302      	str	r3, [sp, #8]
 801129a:	9305      	str	r3, [sp, #20]
 801129c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80112a0:	9100      	str	r1, [sp, #0]
 80112a2:	9104      	str	r1, [sp, #16]
 80112a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80112a8:	4669      	mov	r1, sp
 80112aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80112ac:	f000 fa1e 	bl	80116ec <_svfiprintf_r>
 80112b0:	1c43      	adds	r3, r0, #1
 80112b2:	bfbc      	itt	lt
 80112b4:	238b      	movlt	r3, #139	; 0x8b
 80112b6:	602b      	strlt	r3, [r5, #0]
 80112b8:	2c00      	cmp	r4, #0
 80112ba:	d0e3      	beq.n	8011284 <_vsniprintf_r+0x16>
 80112bc:	9b00      	ldr	r3, [sp, #0]
 80112be:	2200      	movs	r2, #0
 80112c0:	701a      	strb	r2, [r3, #0]
 80112c2:	e7df      	b.n	8011284 <_vsniprintf_r+0x16>

080112c4 <vsniprintf>:
 80112c4:	b507      	push	{r0, r1, r2, lr}
 80112c6:	9300      	str	r3, [sp, #0]
 80112c8:	4613      	mov	r3, r2
 80112ca:	460a      	mov	r2, r1
 80112cc:	4601      	mov	r1, r0
 80112ce:	4803      	ldr	r0, [pc, #12]	; (80112dc <vsniprintf+0x18>)
 80112d0:	6800      	ldr	r0, [r0, #0]
 80112d2:	f7ff ffcc 	bl	801126e <_vsniprintf_r>
 80112d6:	b003      	add	sp, #12
 80112d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80112dc:	2000010c 	.word	0x2000010c

080112e0 <memset>:
 80112e0:	4402      	add	r2, r0
 80112e2:	4603      	mov	r3, r0
 80112e4:	4293      	cmp	r3, r2
 80112e6:	d100      	bne.n	80112ea <memset+0xa>
 80112e8:	4770      	bx	lr
 80112ea:	f803 1b01 	strb.w	r1, [r3], #1
 80112ee:	e7f9      	b.n	80112e4 <memset+0x4>

080112f0 <strchr>:
 80112f0:	b2c9      	uxtb	r1, r1
 80112f2:	4603      	mov	r3, r0
 80112f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112f8:	b11a      	cbz	r2, 8011302 <strchr+0x12>
 80112fa:	428a      	cmp	r2, r1
 80112fc:	d1f9      	bne.n	80112f2 <strchr+0x2>
 80112fe:	4618      	mov	r0, r3
 8011300:	4770      	bx	lr
 8011302:	2900      	cmp	r1, #0
 8011304:	bf18      	it	ne
 8011306:	2300      	movne	r3, #0
 8011308:	e7f9      	b.n	80112fe <strchr+0xe>

0801130a <strncmp>:
 801130a:	b510      	push	{r4, lr}
 801130c:	b16a      	cbz	r2, 801132a <strncmp+0x20>
 801130e:	3901      	subs	r1, #1
 8011310:	1884      	adds	r4, r0, r2
 8011312:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011316:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801131a:	429a      	cmp	r2, r3
 801131c:	d103      	bne.n	8011326 <strncmp+0x1c>
 801131e:	42a0      	cmp	r0, r4
 8011320:	d001      	beq.n	8011326 <strncmp+0x1c>
 8011322:	2a00      	cmp	r2, #0
 8011324:	d1f5      	bne.n	8011312 <strncmp+0x8>
 8011326:	1ad0      	subs	r0, r2, r3
 8011328:	bd10      	pop	{r4, pc}
 801132a:	4610      	mov	r0, r2
 801132c:	e7fc      	b.n	8011328 <strncmp+0x1e>

0801132e <strstr>:
 801132e:	780a      	ldrb	r2, [r1, #0]
 8011330:	b570      	push	{r4, r5, r6, lr}
 8011332:	b96a      	cbnz	r2, 8011350 <strstr+0x22>
 8011334:	bd70      	pop	{r4, r5, r6, pc}
 8011336:	429a      	cmp	r2, r3
 8011338:	d109      	bne.n	801134e <strstr+0x20>
 801133a:	460c      	mov	r4, r1
 801133c:	4605      	mov	r5, r0
 801133e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011342:	2b00      	cmp	r3, #0
 8011344:	d0f6      	beq.n	8011334 <strstr+0x6>
 8011346:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801134a:	429e      	cmp	r6, r3
 801134c:	d0f7      	beq.n	801133e <strstr+0x10>
 801134e:	3001      	adds	r0, #1
 8011350:	7803      	ldrb	r3, [r0, #0]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d1ef      	bne.n	8011336 <strstr+0x8>
 8011356:	4618      	mov	r0, r3
 8011358:	e7ec      	b.n	8011334 <strstr+0x6>
	...

0801135c <_close_r>:
 801135c:	b538      	push	{r3, r4, r5, lr}
 801135e:	4d06      	ldr	r5, [pc, #24]	; (8011378 <_close_r+0x1c>)
 8011360:	2300      	movs	r3, #0
 8011362:	4604      	mov	r4, r0
 8011364:	4608      	mov	r0, r1
 8011366:	602b      	str	r3, [r5, #0]
 8011368:	f7f0 fab3 	bl	80018d2 <_close>
 801136c:	1c43      	adds	r3, r0, #1
 801136e:	d102      	bne.n	8011376 <_close_r+0x1a>
 8011370:	682b      	ldr	r3, [r5, #0]
 8011372:	b103      	cbz	r3, 8011376 <_close_r+0x1a>
 8011374:	6023      	str	r3, [r4, #0]
 8011376:	bd38      	pop	{r3, r4, r5, pc}
 8011378:	20010d04 	.word	0x20010d04

0801137c <_reclaim_reent>:
 801137c:	4b29      	ldr	r3, [pc, #164]	; (8011424 <_reclaim_reent+0xa8>)
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	4283      	cmp	r3, r0
 8011382:	b570      	push	{r4, r5, r6, lr}
 8011384:	4604      	mov	r4, r0
 8011386:	d04b      	beq.n	8011420 <_reclaim_reent+0xa4>
 8011388:	69c3      	ldr	r3, [r0, #28]
 801138a:	b143      	cbz	r3, 801139e <_reclaim_reent+0x22>
 801138c:	68db      	ldr	r3, [r3, #12]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d144      	bne.n	801141c <_reclaim_reent+0xa0>
 8011392:	69e3      	ldr	r3, [r4, #28]
 8011394:	6819      	ldr	r1, [r3, #0]
 8011396:	b111      	cbz	r1, 801139e <_reclaim_reent+0x22>
 8011398:	4620      	mov	r0, r4
 801139a:	f000 f8f9 	bl	8011590 <_free_r>
 801139e:	6961      	ldr	r1, [r4, #20]
 80113a0:	b111      	cbz	r1, 80113a8 <_reclaim_reent+0x2c>
 80113a2:	4620      	mov	r0, r4
 80113a4:	f000 f8f4 	bl	8011590 <_free_r>
 80113a8:	69e1      	ldr	r1, [r4, #28]
 80113aa:	b111      	cbz	r1, 80113b2 <_reclaim_reent+0x36>
 80113ac:	4620      	mov	r0, r4
 80113ae:	f000 f8ef 	bl	8011590 <_free_r>
 80113b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80113b4:	b111      	cbz	r1, 80113bc <_reclaim_reent+0x40>
 80113b6:	4620      	mov	r0, r4
 80113b8:	f000 f8ea 	bl	8011590 <_free_r>
 80113bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80113be:	b111      	cbz	r1, 80113c6 <_reclaim_reent+0x4a>
 80113c0:	4620      	mov	r0, r4
 80113c2:	f000 f8e5 	bl	8011590 <_free_r>
 80113c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80113c8:	b111      	cbz	r1, 80113d0 <_reclaim_reent+0x54>
 80113ca:	4620      	mov	r0, r4
 80113cc:	f000 f8e0 	bl	8011590 <_free_r>
 80113d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80113d2:	b111      	cbz	r1, 80113da <_reclaim_reent+0x5e>
 80113d4:	4620      	mov	r0, r4
 80113d6:	f000 f8db 	bl	8011590 <_free_r>
 80113da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80113dc:	b111      	cbz	r1, 80113e4 <_reclaim_reent+0x68>
 80113de:	4620      	mov	r0, r4
 80113e0:	f000 f8d6 	bl	8011590 <_free_r>
 80113e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80113e6:	b111      	cbz	r1, 80113ee <_reclaim_reent+0x72>
 80113e8:	4620      	mov	r0, r4
 80113ea:	f000 f8d1 	bl	8011590 <_free_r>
 80113ee:	6a23      	ldr	r3, [r4, #32]
 80113f0:	b1b3      	cbz	r3, 8011420 <_reclaim_reent+0xa4>
 80113f2:	4620      	mov	r0, r4
 80113f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113f8:	4718      	bx	r3
 80113fa:	5949      	ldr	r1, [r1, r5]
 80113fc:	b941      	cbnz	r1, 8011410 <_reclaim_reent+0x94>
 80113fe:	3504      	adds	r5, #4
 8011400:	69e3      	ldr	r3, [r4, #28]
 8011402:	2d80      	cmp	r5, #128	; 0x80
 8011404:	68d9      	ldr	r1, [r3, #12]
 8011406:	d1f8      	bne.n	80113fa <_reclaim_reent+0x7e>
 8011408:	4620      	mov	r0, r4
 801140a:	f000 f8c1 	bl	8011590 <_free_r>
 801140e:	e7c0      	b.n	8011392 <_reclaim_reent+0x16>
 8011410:	680e      	ldr	r6, [r1, #0]
 8011412:	4620      	mov	r0, r4
 8011414:	f000 f8bc 	bl	8011590 <_free_r>
 8011418:	4631      	mov	r1, r6
 801141a:	e7ef      	b.n	80113fc <_reclaim_reent+0x80>
 801141c:	2500      	movs	r5, #0
 801141e:	e7ef      	b.n	8011400 <_reclaim_reent+0x84>
 8011420:	bd70      	pop	{r4, r5, r6, pc}
 8011422:	bf00      	nop
 8011424:	2000010c 	.word	0x2000010c

08011428 <_lseek_r>:
 8011428:	b538      	push	{r3, r4, r5, lr}
 801142a:	4d07      	ldr	r5, [pc, #28]	; (8011448 <_lseek_r+0x20>)
 801142c:	4604      	mov	r4, r0
 801142e:	4608      	mov	r0, r1
 8011430:	4611      	mov	r1, r2
 8011432:	2200      	movs	r2, #0
 8011434:	602a      	str	r2, [r5, #0]
 8011436:	461a      	mov	r2, r3
 8011438:	f7f0 fa72 	bl	8001920 <_lseek>
 801143c:	1c43      	adds	r3, r0, #1
 801143e:	d102      	bne.n	8011446 <_lseek_r+0x1e>
 8011440:	682b      	ldr	r3, [r5, #0]
 8011442:	b103      	cbz	r3, 8011446 <_lseek_r+0x1e>
 8011444:	6023      	str	r3, [r4, #0]
 8011446:	bd38      	pop	{r3, r4, r5, pc}
 8011448:	20010d04 	.word	0x20010d04

0801144c <_read_r>:
 801144c:	b538      	push	{r3, r4, r5, lr}
 801144e:	4d07      	ldr	r5, [pc, #28]	; (801146c <_read_r+0x20>)
 8011450:	4604      	mov	r4, r0
 8011452:	4608      	mov	r0, r1
 8011454:	4611      	mov	r1, r2
 8011456:	2200      	movs	r2, #0
 8011458:	602a      	str	r2, [r5, #0]
 801145a:	461a      	mov	r2, r3
 801145c:	f7f0 fa00 	bl	8001860 <_read>
 8011460:	1c43      	adds	r3, r0, #1
 8011462:	d102      	bne.n	801146a <_read_r+0x1e>
 8011464:	682b      	ldr	r3, [r5, #0]
 8011466:	b103      	cbz	r3, 801146a <_read_r+0x1e>
 8011468:	6023      	str	r3, [r4, #0]
 801146a:	bd38      	pop	{r3, r4, r5, pc}
 801146c:	20010d04 	.word	0x20010d04

08011470 <_sbrk_r>:
 8011470:	b538      	push	{r3, r4, r5, lr}
 8011472:	4d06      	ldr	r5, [pc, #24]	; (801148c <_sbrk_r+0x1c>)
 8011474:	2300      	movs	r3, #0
 8011476:	4604      	mov	r4, r0
 8011478:	4608      	mov	r0, r1
 801147a:	602b      	str	r3, [r5, #0]
 801147c:	f7f0 fa5e 	bl	800193c <_sbrk>
 8011480:	1c43      	adds	r3, r0, #1
 8011482:	d102      	bne.n	801148a <_sbrk_r+0x1a>
 8011484:	682b      	ldr	r3, [r5, #0]
 8011486:	b103      	cbz	r3, 801148a <_sbrk_r+0x1a>
 8011488:	6023      	str	r3, [r4, #0]
 801148a:	bd38      	pop	{r3, r4, r5, pc}
 801148c:	20010d04 	.word	0x20010d04

08011490 <_write_r>:
 8011490:	b538      	push	{r3, r4, r5, lr}
 8011492:	4d07      	ldr	r5, [pc, #28]	; (80114b0 <_write_r+0x20>)
 8011494:	4604      	mov	r4, r0
 8011496:	4608      	mov	r0, r1
 8011498:	4611      	mov	r1, r2
 801149a:	2200      	movs	r2, #0
 801149c:	602a      	str	r2, [r5, #0]
 801149e:	461a      	mov	r2, r3
 80114a0:	f7f0 f9fb 	bl	800189a <_write>
 80114a4:	1c43      	adds	r3, r0, #1
 80114a6:	d102      	bne.n	80114ae <_write_r+0x1e>
 80114a8:	682b      	ldr	r3, [r5, #0]
 80114aa:	b103      	cbz	r3, 80114ae <_write_r+0x1e>
 80114ac:	6023      	str	r3, [r4, #0]
 80114ae:	bd38      	pop	{r3, r4, r5, pc}
 80114b0:	20010d04 	.word	0x20010d04

080114b4 <__errno>:
 80114b4:	4b01      	ldr	r3, [pc, #4]	; (80114bc <__errno+0x8>)
 80114b6:	6818      	ldr	r0, [r3, #0]
 80114b8:	4770      	bx	lr
 80114ba:	bf00      	nop
 80114bc:	2000010c 	.word	0x2000010c

080114c0 <__libc_init_array>:
 80114c0:	b570      	push	{r4, r5, r6, lr}
 80114c2:	4d0d      	ldr	r5, [pc, #52]	; (80114f8 <__libc_init_array+0x38>)
 80114c4:	4c0d      	ldr	r4, [pc, #52]	; (80114fc <__libc_init_array+0x3c>)
 80114c6:	1b64      	subs	r4, r4, r5
 80114c8:	10a4      	asrs	r4, r4, #2
 80114ca:	2600      	movs	r6, #0
 80114cc:	42a6      	cmp	r6, r4
 80114ce:	d109      	bne.n	80114e4 <__libc_init_array+0x24>
 80114d0:	4d0b      	ldr	r5, [pc, #44]	; (8011500 <__libc_init_array+0x40>)
 80114d2:	4c0c      	ldr	r4, [pc, #48]	; (8011504 <__libc_init_array+0x44>)
 80114d4:	f000 ff1c 	bl	8012310 <_init>
 80114d8:	1b64      	subs	r4, r4, r5
 80114da:	10a4      	asrs	r4, r4, #2
 80114dc:	2600      	movs	r6, #0
 80114de:	42a6      	cmp	r6, r4
 80114e0:	d105      	bne.n	80114ee <__libc_init_array+0x2e>
 80114e2:	bd70      	pop	{r4, r5, r6, pc}
 80114e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80114e8:	4798      	blx	r3
 80114ea:	3601      	adds	r6, #1
 80114ec:	e7ee      	b.n	80114cc <__libc_init_array+0xc>
 80114ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80114f2:	4798      	blx	r3
 80114f4:	3601      	adds	r6, #1
 80114f6:	e7f2      	b.n	80114de <__libc_init_array+0x1e>
 80114f8:	08012f1c 	.word	0x08012f1c
 80114fc:	08012f1c 	.word	0x08012f1c
 8011500:	08012f1c 	.word	0x08012f1c
 8011504:	08012f24 	.word	0x08012f24

08011508 <__retarget_lock_init_recursive>:
 8011508:	4770      	bx	lr

0801150a <__retarget_lock_acquire_recursive>:
 801150a:	4770      	bx	lr

0801150c <__retarget_lock_release_recursive>:
 801150c:	4770      	bx	lr

0801150e <strcpy>:
 801150e:	4603      	mov	r3, r0
 8011510:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011514:	f803 2b01 	strb.w	r2, [r3], #1
 8011518:	2a00      	cmp	r2, #0
 801151a:	d1f9      	bne.n	8011510 <strcpy+0x2>
 801151c:	4770      	bx	lr

0801151e <memcpy>:
 801151e:	440a      	add	r2, r1
 8011520:	4291      	cmp	r1, r2
 8011522:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011526:	d100      	bne.n	801152a <memcpy+0xc>
 8011528:	4770      	bx	lr
 801152a:	b510      	push	{r4, lr}
 801152c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011530:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011534:	4291      	cmp	r1, r2
 8011536:	d1f9      	bne.n	801152c <memcpy+0xe>
 8011538:	bd10      	pop	{r4, pc}
	...

0801153c <__assert_func>:
 801153c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801153e:	4614      	mov	r4, r2
 8011540:	461a      	mov	r2, r3
 8011542:	4b09      	ldr	r3, [pc, #36]	; (8011568 <__assert_func+0x2c>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	4605      	mov	r5, r0
 8011548:	68d8      	ldr	r0, [r3, #12]
 801154a:	b14c      	cbz	r4, 8011560 <__assert_func+0x24>
 801154c:	4b07      	ldr	r3, [pc, #28]	; (801156c <__assert_func+0x30>)
 801154e:	9100      	str	r1, [sp, #0]
 8011550:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011554:	4906      	ldr	r1, [pc, #24]	; (8011570 <__assert_func+0x34>)
 8011556:	462b      	mov	r3, r5
 8011558:	f000 fd48 	bl	8011fec <fiprintf>
 801155c:	f000 fe08 	bl	8012170 <abort>
 8011560:	4b04      	ldr	r3, [pc, #16]	; (8011574 <__assert_func+0x38>)
 8011562:	461c      	mov	r4, r3
 8011564:	e7f3      	b.n	801154e <__assert_func+0x12>
 8011566:	bf00      	nop
 8011568:	2000010c 	.word	0x2000010c
 801156c:	08012ea4 	.word	0x08012ea4
 8011570:	08012eb1 	.word	0x08012eb1
 8011574:	08012edf 	.word	0x08012edf

08011578 <__env_lock>:
 8011578:	4801      	ldr	r0, [pc, #4]	; (8011580 <__env_lock+0x8>)
 801157a:	f7ff bfc6 	b.w	801150a <__retarget_lock_acquire_recursive>
 801157e:	bf00      	nop
 8011580:	20010d08 	.word	0x20010d08

08011584 <__env_unlock>:
 8011584:	4801      	ldr	r0, [pc, #4]	; (801158c <__env_unlock+0x8>)
 8011586:	f7ff bfc1 	b.w	801150c <__retarget_lock_release_recursive>
 801158a:	bf00      	nop
 801158c:	20010d08 	.word	0x20010d08

08011590 <_free_r>:
 8011590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011592:	2900      	cmp	r1, #0
 8011594:	d044      	beq.n	8011620 <_free_r+0x90>
 8011596:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801159a:	9001      	str	r0, [sp, #4]
 801159c:	2b00      	cmp	r3, #0
 801159e:	f1a1 0404 	sub.w	r4, r1, #4
 80115a2:	bfb8      	it	lt
 80115a4:	18e4      	addlt	r4, r4, r3
 80115a6:	f7ff fbeb 	bl	8010d80 <__malloc_lock>
 80115aa:	4a1e      	ldr	r2, [pc, #120]	; (8011624 <_free_r+0x94>)
 80115ac:	9801      	ldr	r0, [sp, #4]
 80115ae:	6813      	ldr	r3, [r2, #0]
 80115b0:	b933      	cbnz	r3, 80115c0 <_free_r+0x30>
 80115b2:	6063      	str	r3, [r4, #4]
 80115b4:	6014      	str	r4, [r2, #0]
 80115b6:	b003      	add	sp, #12
 80115b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80115bc:	f7ff bbe6 	b.w	8010d8c <__malloc_unlock>
 80115c0:	42a3      	cmp	r3, r4
 80115c2:	d908      	bls.n	80115d6 <_free_r+0x46>
 80115c4:	6825      	ldr	r5, [r4, #0]
 80115c6:	1961      	adds	r1, r4, r5
 80115c8:	428b      	cmp	r3, r1
 80115ca:	bf01      	itttt	eq
 80115cc:	6819      	ldreq	r1, [r3, #0]
 80115ce:	685b      	ldreq	r3, [r3, #4]
 80115d0:	1949      	addeq	r1, r1, r5
 80115d2:	6021      	streq	r1, [r4, #0]
 80115d4:	e7ed      	b.n	80115b2 <_free_r+0x22>
 80115d6:	461a      	mov	r2, r3
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	b10b      	cbz	r3, 80115e0 <_free_r+0x50>
 80115dc:	42a3      	cmp	r3, r4
 80115de:	d9fa      	bls.n	80115d6 <_free_r+0x46>
 80115e0:	6811      	ldr	r1, [r2, #0]
 80115e2:	1855      	adds	r5, r2, r1
 80115e4:	42a5      	cmp	r5, r4
 80115e6:	d10b      	bne.n	8011600 <_free_r+0x70>
 80115e8:	6824      	ldr	r4, [r4, #0]
 80115ea:	4421      	add	r1, r4
 80115ec:	1854      	adds	r4, r2, r1
 80115ee:	42a3      	cmp	r3, r4
 80115f0:	6011      	str	r1, [r2, #0]
 80115f2:	d1e0      	bne.n	80115b6 <_free_r+0x26>
 80115f4:	681c      	ldr	r4, [r3, #0]
 80115f6:	685b      	ldr	r3, [r3, #4]
 80115f8:	6053      	str	r3, [r2, #4]
 80115fa:	440c      	add	r4, r1
 80115fc:	6014      	str	r4, [r2, #0]
 80115fe:	e7da      	b.n	80115b6 <_free_r+0x26>
 8011600:	d902      	bls.n	8011608 <_free_r+0x78>
 8011602:	230c      	movs	r3, #12
 8011604:	6003      	str	r3, [r0, #0]
 8011606:	e7d6      	b.n	80115b6 <_free_r+0x26>
 8011608:	6825      	ldr	r5, [r4, #0]
 801160a:	1961      	adds	r1, r4, r5
 801160c:	428b      	cmp	r3, r1
 801160e:	bf04      	itt	eq
 8011610:	6819      	ldreq	r1, [r3, #0]
 8011612:	685b      	ldreq	r3, [r3, #4]
 8011614:	6063      	str	r3, [r4, #4]
 8011616:	bf04      	itt	eq
 8011618:	1949      	addeq	r1, r1, r5
 801161a:	6021      	streq	r1, [r4, #0]
 801161c:	6054      	str	r4, [r2, #4]
 801161e:	e7ca      	b.n	80115b6 <_free_r+0x26>
 8011620:	b003      	add	sp, #12
 8011622:	bd30      	pop	{r4, r5, pc}
 8011624:	20010bc0 	.word	0x20010bc0

08011628 <_malloc_usable_size_r>:
 8011628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801162c:	1f18      	subs	r0, r3, #4
 801162e:	2b00      	cmp	r3, #0
 8011630:	bfbc      	itt	lt
 8011632:	580b      	ldrlt	r3, [r1, r0]
 8011634:	18c0      	addlt	r0, r0, r3
 8011636:	4770      	bx	lr

08011638 <__ssputs_r>:
 8011638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801163c:	688e      	ldr	r6, [r1, #8]
 801163e:	461f      	mov	r7, r3
 8011640:	42be      	cmp	r6, r7
 8011642:	680b      	ldr	r3, [r1, #0]
 8011644:	4682      	mov	sl, r0
 8011646:	460c      	mov	r4, r1
 8011648:	4690      	mov	r8, r2
 801164a:	d82c      	bhi.n	80116a6 <__ssputs_r+0x6e>
 801164c:	898a      	ldrh	r2, [r1, #12]
 801164e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011652:	d026      	beq.n	80116a2 <__ssputs_r+0x6a>
 8011654:	6965      	ldr	r5, [r4, #20]
 8011656:	6909      	ldr	r1, [r1, #16]
 8011658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801165c:	eba3 0901 	sub.w	r9, r3, r1
 8011660:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011664:	1c7b      	adds	r3, r7, #1
 8011666:	444b      	add	r3, r9
 8011668:	106d      	asrs	r5, r5, #1
 801166a:	429d      	cmp	r5, r3
 801166c:	bf38      	it	cc
 801166e:	461d      	movcc	r5, r3
 8011670:	0553      	lsls	r3, r2, #21
 8011672:	d527      	bpl.n	80116c4 <__ssputs_r+0x8c>
 8011674:	4629      	mov	r1, r5
 8011676:	f7ff fb03 	bl	8010c80 <_malloc_r>
 801167a:	4606      	mov	r6, r0
 801167c:	b360      	cbz	r0, 80116d8 <__ssputs_r+0xa0>
 801167e:	6921      	ldr	r1, [r4, #16]
 8011680:	464a      	mov	r2, r9
 8011682:	f7ff ff4c 	bl	801151e <memcpy>
 8011686:	89a3      	ldrh	r3, [r4, #12]
 8011688:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801168c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011690:	81a3      	strh	r3, [r4, #12]
 8011692:	6126      	str	r6, [r4, #16]
 8011694:	6165      	str	r5, [r4, #20]
 8011696:	444e      	add	r6, r9
 8011698:	eba5 0509 	sub.w	r5, r5, r9
 801169c:	6026      	str	r6, [r4, #0]
 801169e:	60a5      	str	r5, [r4, #8]
 80116a0:	463e      	mov	r6, r7
 80116a2:	42be      	cmp	r6, r7
 80116a4:	d900      	bls.n	80116a8 <__ssputs_r+0x70>
 80116a6:	463e      	mov	r6, r7
 80116a8:	6820      	ldr	r0, [r4, #0]
 80116aa:	4632      	mov	r2, r6
 80116ac:	4641      	mov	r1, r8
 80116ae:	f000 fd45 	bl	801213c <memmove>
 80116b2:	68a3      	ldr	r3, [r4, #8]
 80116b4:	1b9b      	subs	r3, r3, r6
 80116b6:	60a3      	str	r3, [r4, #8]
 80116b8:	6823      	ldr	r3, [r4, #0]
 80116ba:	4433      	add	r3, r6
 80116bc:	6023      	str	r3, [r4, #0]
 80116be:	2000      	movs	r0, #0
 80116c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116c4:	462a      	mov	r2, r5
 80116c6:	f7ff fbdb 	bl	8010e80 <_realloc_r>
 80116ca:	4606      	mov	r6, r0
 80116cc:	2800      	cmp	r0, #0
 80116ce:	d1e0      	bne.n	8011692 <__ssputs_r+0x5a>
 80116d0:	6921      	ldr	r1, [r4, #16]
 80116d2:	4650      	mov	r0, sl
 80116d4:	f7ff ff5c 	bl	8011590 <_free_r>
 80116d8:	230c      	movs	r3, #12
 80116da:	f8ca 3000 	str.w	r3, [sl]
 80116de:	89a3      	ldrh	r3, [r4, #12]
 80116e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116e4:	81a3      	strh	r3, [r4, #12]
 80116e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80116ea:	e7e9      	b.n	80116c0 <__ssputs_r+0x88>

080116ec <_svfiprintf_r>:
 80116ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116f0:	4698      	mov	r8, r3
 80116f2:	898b      	ldrh	r3, [r1, #12]
 80116f4:	061b      	lsls	r3, r3, #24
 80116f6:	b09d      	sub	sp, #116	; 0x74
 80116f8:	4607      	mov	r7, r0
 80116fa:	460d      	mov	r5, r1
 80116fc:	4614      	mov	r4, r2
 80116fe:	d50e      	bpl.n	801171e <_svfiprintf_r+0x32>
 8011700:	690b      	ldr	r3, [r1, #16]
 8011702:	b963      	cbnz	r3, 801171e <_svfiprintf_r+0x32>
 8011704:	2140      	movs	r1, #64	; 0x40
 8011706:	f7ff fabb 	bl	8010c80 <_malloc_r>
 801170a:	6028      	str	r0, [r5, #0]
 801170c:	6128      	str	r0, [r5, #16]
 801170e:	b920      	cbnz	r0, 801171a <_svfiprintf_r+0x2e>
 8011710:	230c      	movs	r3, #12
 8011712:	603b      	str	r3, [r7, #0]
 8011714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011718:	e0d0      	b.n	80118bc <_svfiprintf_r+0x1d0>
 801171a:	2340      	movs	r3, #64	; 0x40
 801171c:	616b      	str	r3, [r5, #20]
 801171e:	2300      	movs	r3, #0
 8011720:	9309      	str	r3, [sp, #36]	; 0x24
 8011722:	2320      	movs	r3, #32
 8011724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011728:	f8cd 800c 	str.w	r8, [sp, #12]
 801172c:	2330      	movs	r3, #48	; 0x30
 801172e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80118d4 <_svfiprintf_r+0x1e8>
 8011732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011736:	f04f 0901 	mov.w	r9, #1
 801173a:	4623      	mov	r3, r4
 801173c:	469a      	mov	sl, r3
 801173e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011742:	b10a      	cbz	r2, 8011748 <_svfiprintf_r+0x5c>
 8011744:	2a25      	cmp	r2, #37	; 0x25
 8011746:	d1f9      	bne.n	801173c <_svfiprintf_r+0x50>
 8011748:	ebba 0b04 	subs.w	fp, sl, r4
 801174c:	d00b      	beq.n	8011766 <_svfiprintf_r+0x7a>
 801174e:	465b      	mov	r3, fp
 8011750:	4622      	mov	r2, r4
 8011752:	4629      	mov	r1, r5
 8011754:	4638      	mov	r0, r7
 8011756:	f7ff ff6f 	bl	8011638 <__ssputs_r>
 801175a:	3001      	adds	r0, #1
 801175c:	f000 80a9 	beq.w	80118b2 <_svfiprintf_r+0x1c6>
 8011760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011762:	445a      	add	r2, fp
 8011764:	9209      	str	r2, [sp, #36]	; 0x24
 8011766:	f89a 3000 	ldrb.w	r3, [sl]
 801176a:	2b00      	cmp	r3, #0
 801176c:	f000 80a1 	beq.w	80118b2 <_svfiprintf_r+0x1c6>
 8011770:	2300      	movs	r3, #0
 8011772:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801177a:	f10a 0a01 	add.w	sl, sl, #1
 801177e:	9304      	str	r3, [sp, #16]
 8011780:	9307      	str	r3, [sp, #28]
 8011782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011786:	931a      	str	r3, [sp, #104]	; 0x68
 8011788:	4654      	mov	r4, sl
 801178a:	2205      	movs	r2, #5
 801178c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011790:	4850      	ldr	r0, [pc, #320]	; (80118d4 <_svfiprintf_r+0x1e8>)
 8011792:	f7ee fd3d 	bl	8000210 <memchr>
 8011796:	9a04      	ldr	r2, [sp, #16]
 8011798:	b9d8      	cbnz	r0, 80117d2 <_svfiprintf_r+0xe6>
 801179a:	06d0      	lsls	r0, r2, #27
 801179c:	bf44      	itt	mi
 801179e:	2320      	movmi	r3, #32
 80117a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117a4:	0711      	lsls	r1, r2, #28
 80117a6:	bf44      	itt	mi
 80117a8:	232b      	movmi	r3, #43	; 0x2b
 80117aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117ae:	f89a 3000 	ldrb.w	r3, [sl]
 80117b2:	2b2a      	cmp	r3, #42	; 0x2a
 80117b4:	d015      	beq.n	80117e2 <_svfiprintf_r+0xf6>
 80117b6:	9a07      	ldr	r2, [sp, #28]
 80117b8:	4654      	mov	r4, sl
 80117ba:	2000      	movs	r0, #0
 80117bc:	f04f 0c0a 	mov.w	ip, #10
 80117c0:	4621      	mov	r1, r4
 80117c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117c6:	3b30      	subs	r3, #48	; 0x30
 80117c8:	2b09      	cmp	r3, #9
 80117ca:	d94d      	bls.n	8011868 <_svfiprintf_r+0x17c>
 80117cc:	b1b0      	cbz	r0, 80117fc <_svfiprintf_r+0x110>
 80117ce:	9207      	str	r2, [sp, #28]
 80117d0:	e014      	b.n	80117fc <_svfiprintf_r+0x110>
 80117d2:	eba0 0308 	sub.w	r3, r0, r8
 80117d6:	fa09 f303 	lsl.w	r3, r9, r3
 80117da:	4313      	orrs	r3, r2
 80117dc:	9304      	str	r3, [sp, #16]
 80117de:	46a2      	mov	sl, r4
 80117e0:	e7d2      	b.n	8011788 <_svfiprintf_r+0x9c>
 80117e2:	9b03      	ldr	r3, [sp, #12]
 80117e4:	1d19      	adds	r1, r3, #4
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	9103      	str	r1, [sp, #12]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	bfbb      	ittet	lt
 80117ee:	425b      	neglt	r3, r3
 80117f0:	f042 0202 	orrlt.w	r2, r2, #2
 80117f4:	9307      	strge	r3, [sp, #28]
 80117f6:	9307      	strlt	r3, [sp, #28]
 80117f8:	bfb8      	it	lt
 80117fa:	9204      	strlt	r2, [sp, #16]
 80117fc:	7823      	ldrb	r3, [r4, #0]
 80117fe:	2b2e      	cmp	r3, #46	; 0x2e
 8011800:	d10c      	bne.n	801181c <_svfiprintf_r+0x130>
 8011802:	7863      	ldrb	r3, [r4, #1]
 8011804:	2b2a      	cmp	r3, #42	; 0x2a
 8011806:	d134      	bne.n	8011872 <_svfiprintf_r+0x186>
 8011808:	9b03      	ldr	r3, [sp, #12]
 801180a:	1d1a      	adds	r2, r3, #4
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	9203      	str	r2, [sp, #12]
 8011810:	2b00      	cmp	r3, #0
 8011812:	bfb8      	it	lt
 8011814:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011818:	3402      	adds	r4, #2
 801181a:	9305      	str	r3, [sp, #20]
 801181c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80118e4 <_svfiprintf_r+0x1f8>
 8011820:	7821      	ldrb	r1, [r4, #0]
 8011822:	2203      	movs	r2, #3
 8011824:	4650      	mov	r0, sl
 8011826:	f7ee fcf3 	bl	8000210 <memchr>
 801182a:	b138      	cbz	r0, 801183c <_svfiprintf_r+0x150>
 801182c:	9b04      	ldr	r3, [sp, #16]
 801182e:	eba0 000a 	sub.w	r0, r0, sl
 8011832:	2240      	movs	r2, #64	; 0x40
 8011834:	4082      	lsls	r2, r0
 8011836:	4313      	orrs	r3, r2
 8011838:	3401      	adds	r4, #1
 801183a:	9304      	str	r3, [sp, #16]
 801183c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011840:	4825      	ldr	r0, [pc, #148]	; (80118d8 <_svfiprintf_r+0x1ec>)
 8011842:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011846:	2206      	movs	r2, #6
 8011848:	f7ee fce2 	bl	8000210 <memchr>
 801184c:	2800      	cmp	r0, #0
 801184e:	d038      	beq.n	80118c2 <_svfiprintf_r+0x1d6>
 8011850:	4b22      	ldr	r3, [pc, #136]	; (80118dc <_svfiprintf_r+0x1f0>)
 8011852:	bb1b      	cbnz	r3, 801189c <_svfiprintf_r+0x1b0>
 8011854:	9b03      	ldr	r3, [sp, #12]
 8011856:	3307      	adds	r3, #7
 8011858:	f023 0307 	bic.w	r3, r3, #7
 801185c:	3308      	adds	r3, #8
 801185e:	9303      	str	r3, [sp, #12]
 8011860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011862:	4433      	add	r3, r6
 8011864:	9309      	str	r3, [sp, #36]	; 0x24
 8011866:	e768      	b.n	801173a <_svfiprintf_r+0x4e>
 8011868:	fb0c 3202 	mla	r2, ip, r2, r3
 801186c:	460c      	mov	r4, r1
 801186e:	2001      	movs	r0, #1
 8011870:	e7a6      	b.n	80117c0 <_svfiprintf_r+0xd4>
 8011872:	2300      	movs	r3, #0
 8011874:	3401      	adds	r4, #1
 8011876:	9305      	str	r3, [sp, #20]
 8011878:	4619      	mov	r1, r3
 801187a:	f04f 0c0a 	mov.w	ip, #10
 801187e:	4620      	mov	r0, r4
 8011880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011884:	3a30      	subs	r2, #48	; 0x30
 8011886:	2a09      	cmp	r2, #9
 8011888:	d903      	bls.n	8011892 <_svfiprintf_r+0x1a6>
 801188a:	2b00      	cmp	r3, #0
 801188c:	d0c6      	beq.n	801181c <_svfiprintf_r+0x130>
 801188e:	9105      	str	r1, [sp, #20]
 8011890:	e7c4      	b.n	801181c <_svfiprintf_r+0x130>
 8011892:	fb0c 2101 	mla	r1, ip, r1, r2
 8011896:	4604      	mov	r4, r0
 8011898:	2301      	movs	r3, #1
 801189a:	e7f0      	b.n	801187e <_svfiprintf_r+0x192>
 801189c:	ab03      	add	r3, sp, #12
 801189e:	9300      	str	r3, [sp, #0]
 80118a0:	462a      	mov	r2, r5
 80118a2:	4b0f      	ldr	r3, [pc, #60]	; (80118e0 <_svfiprintf_r+0x1f4>)
 80118a4:	a904      	add	r1, sp, #16
 80118a6:	4638      	mov	r0, r7
 80118a8:	f3af 8000 	nop.w
 80118ac:	1c42      	adds	r2, r0, #1
 80118ae:	4606      	mov	r6, r0
 80118b0:	d1d6      	bne.n	8011860 <_svfiprintf_r+0x174>
 80118b2:	89ab      	ldrh	r3, [r5, #12]
 80118b4:	065b      	lsls	r3, r3, #25
 80118b6:	f53f af2d 	bmi.w	8011714 <_svfiprintf_r+0x28>
 80118ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118bc:	b01d      	add	sp, #116	; 0x74
 80118be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118c2:	ab03      	add	r3, sp, #12
 80118c4:	9300      	str	r3, [sp, #0]
 80118c6:	462a      	mov	r2, r5
 80118c8:	4b05      	ldr	r3, [pc, #20]	; (80118e0 <_svfiprintf_r+0x1f4>)
 80118ca:	a904      	add	r1, sp, #16
 80118cc:	4638      	mov	r0, r7
 80118ce:	f000 f9bd 	bl	8011c4c <_printf_i>
 80118d2:	e7eb      	b.n	80118ac <_svfiprintf_r+0x1c0>
 80118d4:	08012ee0 	.word	0x08012ee0
 80118d8:	08012eea 	.word	0x08012eea
 80118dc:	00000000 	.word	0x00000000
 80118e0:	08011639 	.word	0x08011639
 80118e4:	08012ee6 	.word	0x08012ee6

080118e8 <__sfputc_r>:
 80118e8:	6893      	ldr	r3, [r2, #8]
 80118ea:	3b01      	subs	r3, #1
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	b410      	push	{r4}
 80118f0:	6093      	str	r3, [r2, #8]
 80118f2:	da08      	bge.n	8011906 <__sfputc_r+0x1e>
 80118f4:	6994      	ldr	r4, [r2, #24]
 80118f6:	42a3      	cmp	r3, r4
 80118f8:	db01      	blt.n	80118fe <__sfputc_r+0x16>
 80118fa:	290a      	cmp	r1, #10
 80118fc:	d103      	bne.n	8011906 <__sfputc_r+0x1e>
 80118fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011902:	f000 bb85 	b.w	8012010 <__swbuf_r>
 8011906:	6813      	ldr	r3, [r2, #0]
 8011908:	1c58      	adds	r0, r3, #1
 801190a:	6010      	str	r0, [r2, #0]
 801190c:	7019      	strb	r1, [r3, #0]
 801190e:	4608      	mov	r0, r1
 8011910:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011914:	4770      	bx	lr

08011916 <__sfputs_r>:
 8011916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011918:	4606      	mov	r6, r0
 801191a:	460f      	mov	r7, r1
 801191c:	4614      	mov	r4, r2
 801191e:	18d5      	adds	r5, r2, r3
 8011920:	42ac      	cmp	r4, r5
 8011922:	d101      	bne.n	8011928 <__sfputs_r+0x12>
 8011924:	2000      	movs	r0, #0
 8011926:	e007      	b.n	8011938 <__sfputs_r+0x22>
 8011928:	f814 1b01 	ldrb.w	r1, [r4], #1
 801192c:	463a      	mov	r2, r7
 801192e:	4630      	mov	r0, r6
 8011930:	f7ff ffda 	bl	80118e8 <__sfputc_r>
 8011934:	1c43      	adds	r3, r0, #1
 8011936:	d1f3      	bne.n	8011920 <__sfputs_r+0xa>
 8011938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801193c <_vfiprintf_r>:
 801193c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011940:	460d      	mov	r5, r1
 8011942:	b09d      	sub	sp, #116	; 0x74
 8011944:	4614      	mov	r4, r2
 8011946:	4698      	mov	r8, r3
 8011948:	4606      	mov	r6, r0
 801194a:	b118      	cbz	r0, 8011954 <_vfiprintf_r+0x18>
 801194c:	6a03      	ldr	r3, [r0, #32]
 801194e:	b90b      	cbnz	r3, 8011954 <_vfiprintf_r+0x18>
 8011950:	f7ff fbce 	bl	80110f0 <__sinit>
 8011954:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011956:	07d9      	lsls	r1, r3, #31
 8011958:	d405      	bmi.n	8011966 <_vfiprintf_r+0x2a>
 801195a:	89ab      	ldrh	r3, [r5, #12]
 801195c:	059a      	lsls	r2, r3, #22
 801195e:	d402      	bmi.n	8011966 <_vfiprintf_r+0x2a>
 8011960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011962:	f7ff fdd2 	bl	801150a <__retarget_lock_acquire_recursive>
 8011966:	89ab      	ldrh	r3, [r5, #12]
 8011968:	071b      	lsls	r3, r3, #28
 801196a:	d501      	bpl.n	8011970 <_vfiprintf_r+0x34>
 801196c:	692b      	ldr	r3, [r5, #16]
 801196e:	b99b      	cbnz	r3, 8011998 <_vfiprintf_r+0x5c>
 8011970:	4629      	mov	r1, r5
 8011972:	4630      	mov	r0, r6
 8011974:	f000 fb8a 	bl	801208c <__swsetup_r>
 8011978:	b170      	cbz	r0, 8011998 <_vfiprintf_r+0x5c>
 801197a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801197c:	07dc      	lsls	r4, r3, #31
 801197e:	d504      	bpl.n	801198a <_vfiprintf_r+0x4e>
 8011980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011984:	b01d      	add	sp, #116	; 0x74
 8011986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801198a:	89ab      	ldrh	r3, [r5, #12]
 801198c:	0598      	lsls	r0, r3, #22
 801198e:	d4f7      	bmi.n	8011980 <_vfiprintf_r+0x44>
 8011990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011992:	f7ff fdbb 	bl	801150c <__retarget_lock_release_recursive>
 8011996:	e7f3      	b.n	8011980 <_vfiprintf_r+0x44>
 8011998:	2300      	movs	r3, #0
 801199a:	9309      	str	r3, [sp, #36]	; 0x24
 801199c:	2320      	movs	r3, #32
 801199e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80119a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80119a6:	2330      	movs	r3, #48	; 0x30
 80119a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011b5c <_vfiprintf_r+0x220>
 80119ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80119b0:	f04f 0901 	mov.w	r9, #1
 80119b4:	4623      	mov	r3, r4
 80119b6:	469a      	mov	sl, r3
 80119b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119bc:	b10a      	cbz	r2, 80119c2 <_vfiprintf_r+0x86>
 80119be:	2a25      	cmp	r2, #37	; 0x25
 80119c0:	d1f9      	bne.n	80119b6 <_vfiprintf_r+0x7a>
 80119c2:	ebba 0b04 	subs.w	fp, sl, r4
 80119c6:	d00b      	beq.n	80119e0 <_vfiprintf_r+0xa4>
 80119c8:	465b      	mov	r3, fp
 80119ca:	4622      	mov	r2, r4
 80119cc:	4629      	mov	r1, r5
 80119ce:	4630      	mov	r0, r6
 80119d0:	f7ff ffa1 	bl	8011916 <__sfputs_r>
 80119d4:	3001      	adds	r0, #1
 80119d6:	f000 80a9 	beq.w	8011b2c <_vfiprintf_r+0x1f0>
 80119da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80119dc:	445a      	add	r2, fp
 80119de:	9209      	str	r2, [sp, #36]	; 0x24
 80119e0:	f89a 3000 	ldrb.w	r3, [sl]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	f000 80a1 	beq.w	8011b2c <_vfiprintf_r+0x1f0>
 80119ea:	2300      	movs	r3, #0
 80119ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80119f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80119f4:	f10a 0a01 	add.w	sl, sl, #1
 80119f8:	9304      	str	r3, [sp, #16]
 80119fa:	9307      	str	r3, [sp, #28]
 80119fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a00:	931a      	str	r3, [sp, #104]	; 0x68
 8011a02:	4654      	mov	r4, sl
 8011a04:	2205      	movs	r2, #5
 8011a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a0a:	4854      	ldr	r0, [pc, #336]	; (8011b5c <_vfiprintf_r+0x220>)
 8011a0c:	f7ee fc00 	bl	8000210 <memchr>
 8011a10:	9a04      	ldr	r2, [sp, #16]
 8011a12:	b9d8      	cbnz	r0, 8011a4c <_vfiprintf_r+0x110>
 8011a14:	06d1      	lsls	r1, r2, #27
 8011a16:	bf44      	itt	mi
 8011a18:	2320      	movmi	r3, #32
 8011a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a1e:	0713      	lsls	r3, r2, #28
 8011a20:	bf44      	itt	mi
 8011a22:	232b      	movmi	r3, #43	; 0x2b
 8011a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a28:	f89a 3000 	ldrb.w	r3, [sl]
 8011a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8011a2e:	d015      	beq.n	8011a5c <_vfiprintf_r+0x120>
 8011a30:	9a07      	ldr	r2, [sp, #28]
 8011a32:	4654      	mov	r4, sl
 8011a34:	2000      	movs	r0, #0
 8011a36:	f04f 0c0a 	mov.w	ip, #10
 8011a3a:	4621      	mov	r1, r4
 8011a3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a40:	3b30      	subs	r3, #48	; 0x30
 8011a42:	2b09      	cmp	r3, #9
 8011a44:	d94d      	bls.n	8011ae2 <_vfiprintf_r+0x1a6>
 8011a46:	b1b0      	cbz	r0, 8011a76 <_vfiprintf_r+0x13a>
 8011a48:	9207      	str	r2, [sp, #28]
 8011a4a:	e014      	b.n	8011a76 <_vfiprintf_r+0x13a>
 8011a4c:	eba0 0308 	sub.w	r3, r0, r8
 8011a50:	fa09 f303 	lsl.w	r3, r9, r3
 8011a54:	4313      	orrs	r3, r2
 8011a56:	9304      	str	r3, [sp, #16]
 8011a58:	46a2      	mov	sl, r4
 8011a5a:	e7d2      	b.n	8011a02 <_vfiprintf_r+0xc6>
 8011a5c:	9b03      	ldr	r3, [sp, #12]
 8011a5e:	1d19      	adds	r1, r3, #4
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	9103      	str	r1, [sp, #12]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	bfbb      	ittet	lt
 8011a68:	425b      	neglt	r3, r3
 8011a6a:	f042 0202 	orrlt.w	r2, r2, #2
 8011a6e:	9307      	strge	r3, [sp, #28]
 8011a70:	9307      	strlt	r3, [sp, #28]
 8011a72:	bfb8      	it	lt
 8011a74:	9204      	strlt	r2, [sp, #16]
 8011a76:	7823      	ldrb	r3, [r4, #0]
 8011a78:	2b2e      	cmp	r3, #46	; 0x2e
 8011a7a:	d10c      	bne.n	8011a96 <_vfiprintf_r+0x15a>
 8011a7c:	7863      	ldrb	r3, [r4, #1]
 8011a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8011a80:	d134      	bne.n	8011aec <_vfiprintf_r+0x1b0>
 8011a82:	9b03      	ldr	r3, [sp, #12]
 8011a84:	1d1a      	adds	r2, r3, #4
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	9203      	str	r2, [sp, #12]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	bfb8      	it	lt
 8011a8e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011a92:	3402      	adds	r4, #2
 8011a94:	9305      	str	r3, [sp, #20]
 8011a96:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011b6c <_vfiprintf_r+0x230>
 8011a9a:	7821      	ldrb	r1, [r4, #0]
 8011a9c:	2203      	movs	r2, #3
 8011a9e:	4650      	mov	r0, sl
 8011aa0:	f7ee fbb6 	bl	8000210 <memchr>
 8011aa4:	b138      	cbz	r0, 8011ab6 <_vfiprintf_r+0x17a>
 8011aa6:	9b04      	ldr	r3, [sp, #16]
 8011aa8:	eba0 000a 	sub.w	r0, r0, sl
 8011aac:	2240      	movs	r2, #64	; 0x40
 8011aae:	4082      	lsls	r2, r0
 8011ab0:	4313      	orrs	r3, r2
 8011ab2:	3401      	adds	r4, #1
 8011ab4:	9304      	str	r3, [sp, #16]
 8011ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011aba:	4829      	ldr	r0, [pc, #164]	; (8011b60 <_vfiprintf_r+0x224>)
 8011abc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011ac0:	2206      	movs	r2, #6
 8011ac2:	f7ee fba5 	bl	8000210 <memchr>
 8011ac6:	2800      	cmp	r0, #0
 8011ac8:	d03f      	beq.n	8011b4a <_vfiprintf_r+0x20e>
 8011aca:	4b26      	ldr	r3, [pc, #152]	; (8011b64 <_vfiprintf_r+0x228>)
 8011acc:	bb1b      	cbnz	r3, 8011b16 <_vfiprintf_r+0x1da>
 8011ace:	9b03      	ldr	r3, [sp, #12]
 8011ad0:	3307      	adds	r3, #7
 8011ad2:	f023 0307 	bic.w	r3, r3, #7
 8011ad6:	3308      	adds	r3, #8
 8011ad8:	9303      	str	r3, [sp, #12]
 8011ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011adc:	443b      	add	r3, r7
 8011ade:	9309      	str	r3, [sp, #36]	; 0x24
 8011ae0:	e768      	b.n	80119b4 <_vfiprintf_r+0x78>
 8011ae2:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ae6:	460c      	mov	r4, r1
 8011ae8:	2001      	movs	r0, #1
 8011aea:	e7a6      	b.n	8011a3a <_vfiprintf_r+0xfe>
 8011aec:	2300      	movs	r3, #0
 8011aee:	3401      	adds	r4, #1
 8011af0:	9305      	str	r3, [sp, #20]
 8011af2:	4619      	mov	r1, r3
 8011af4:	f04f 0c0a 	mov.w	ip, #10
 8011af8:	4620      	mov	r0, r4
 8011afa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011afe:	3a30      	subs	r2, #48	; 0x30
 8011b00:	2a09      	cmp	r2, #9
 8011b02:	d903      	bls.n	8011b0c <_vfiprintf_r+0x1d0>
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d0c6      	beq.n	8011a96 <_vfiprintf_r+0x15a>
 8011b08:	9105      	str	r1, [sp, #20]
 8011b0a:	e7c4      	b.n	8011a96 <_vfiprintf_r+0x15a>
 8011b0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b10:	4604      	mov	r4, r0
 8011b12:	2301      	movs	r3, #1
 8011b14:	e7f0      	b.n	8011af8 <_vfiprintf_r+0x1bc>
 8011b16:	ab03      	add	r3, sp, #12
 8011b18:	9300      	str	r3, [sp, #0]
 8011b1a:	462a      	mov	r2, r5
 8011b1c:	4b12      	ldr	r3, [pc, #72]	; (8011b68 <_vfiprintf_r+0x22c>)
 8011b1e:	a904      	add	r1, sp, #16
 8011b20:	4630      	mov	r0, r6
 8011b22:	f3af 8000 	nop.w
 8011b26:	4607      	mov	r7, r0
 8011b28:	1c78      	adds	r0, r7, #1
 8011b2a:	d1d6      	bne.n	8011ada <_vfiprintf_r+0x19e>
 8011b2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b2e:	07d9      	lsls	r1, r3, #31
 8011b30:	d405      	bmi.n	8011b3e <_vfiprintf_r+0x202>
 8011b32:	89ab      	ldrh	r3, [r5, #12]
 8011b34:	059a      	lsls	r2, r3, #22
 8011b36:	d402      	bmi.n	8011b3e <_vfiprintf_r+0x202>
 8011b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b3a:	f7ff fce7 	bl	801150c <__retarget_lock_release_recursive>
 8011b3e:	89ab      	ldrh	r3, [r5, #12]
 8011b40:	065b      	lsls	r3, r3, #25
 8011b42:	f53f af1d 	bmi.w	8011980 <_vfiprintf_r+0x44>
 8011b46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b48:	e71c      	b.n	8011984 <_vfiprintf_r+0x48>
 8011b4a:	ab03      	add	r3, sp, #12
 8011b4c:	9300      	str	r3, [sp, #0]
 8011b4e:	462a      	mov	r2, r5
 8011b50:	4b05      	ldr	r3, [pc, #20]	; (8011b68 <_vfiprintf_r+0x22c>)
 8011b52:	a904      	add	r1, sp, #16
 8011b54:	4630      	mov	r0, r6
 8011b56:	f000 f879 	bl	8011c4c <_printf_i>
 8011b5a:	e7e4      	b.n	8011b26 <_vfiprintf_r+0x1ea>
 8011b5c:	08012ee0 	.word	0x08012ee0
 8011b60:	08012eea 	.word	0x08012eea
 8011b64:	00000000 	.word	0x00000000
 8011b68:	08011917 	.word	0x08011917
 8011b6c:	08012ee6 	.word	0x08012ee6

08011b70 <_printf_common>:
 8011b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b74:	4616      	mov	r6, r2
 8011b76:	4699      	mov	r9, r3
 8011b78:	688a      	ldr	r2, [r1, #8]
 8011b7a:	690b      	ldr	r3, [r1, #16]
 8011b7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011b80:	4293      	cmp	r3, r2
 8011b82:	bfb8      	it	lt
 8011b84:	4613      	movlt	r3, r2
 8011b86:	6033      	str	r3, [r6, #0]
 8011b88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011b8c:	4607      	mov	r7, r0
 8011b8e:	460c      	mov	r4, r1
 8011b90:	b10a      	cbz	r2, 8011b96 <_printf_common+0x26>
 8011b92:	3301      	adds	r3, #1
 8011b94:	6033      	str	r3, [r6, #0]
 8011b96:	6823      	ldr	r3, [r4, #0]
 8011b98:	0699      	lsls	r1, r3, #26
 8011b9a:	bf42      	ittt	mi
 8011b9c:	6833      	ldrmi	r3, [r6, #0]
 8011b9e:	3302      	addmi	r3, #2
 8011ba0:	6033      	strmi	r3, [r6, #0]
 8011ba2:	6825      	ldr	r5, [r4, #0]
 8011ba4:	f015 0506 	ands.w	r5, r5, #6
 8011ba8:	d106      	bne.n	8011bb8 <_printf_common+0x48>
 8011baa:	f104 0a19 	add.w	sl, r4, #25
 8011bae:	68e3      	ldr	r3, [r4, #12]
 8011bb0:	6832      	ldr	r2, [r6, #0]
 8011bb2:	1a9b      	subs	r3, r3, r2
 8011bb4:	42ab      	cmp	r3, r5
 8011bb6:	dc26      	bgt.n	8011c06 <_printf_common+0x96>
 8011bb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011bbc:	1e13      	subs	r3, r2, #0
 8011bbe:	6822      	ldr	r2, [r4, #0]
 8011bc0:	bf18      	it	ne
 8011bc2:	2301      	movne	r3, #1
 8011bc4:	0692      	lsls	r2, r2, #26
 8011bc6:	d42b      	bmi.n	8011c20 <_printf_common+0xb0>
 8011bc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011bcc:	4649      	mov	r1, r9
 8011bce:	4638      	mov	r0, r7
 8011bd0:	47c0      	blx	r8
 8011bd2:	3001      	adds	r0, #1
 8011bd4:	d01e      	beq.n	8011c14 <_printf_common+0xa4>
 8011bd6:	6823      	ldr	r3, [r4, #0]
 8011bd8:	6922      	ldr	r2, [r4, #16]
 8011bda:	f003 0306 	and.w	r3, r3, #6
 8011bde:	2b04      	cmp	r3, #4
 8011be0:	bf02      	ittt	eq
 8011be2:	68e5      	ldreq	r5, [r4, #12]
 8011be4:	6833      	ldreq	r3, [r6, #0]
 8011be6:	1aed      	subeq	r5, r5, r3
 8011be8:	68a3      	ldr	r3, [r4, #8]
 8011bea:	bf0c      	ite	eq
 8011bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011bf0:	2500      	movne	r5, #0
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	bfc4      	itt	gt
 8011bf6:	1a9b      	subgt	r3, r3, r2
 8011bf8:	18ed      	addgt	r5, r5, r3
 8011bfa:	2600      	movs	r6, #0
 8011bfc:	341a      	adds	r4, #26
 8011bfe:	42b5      	cmp	r5, r6
 8011c00:	d11a      	bne.n	8011c38 <_printf_common+0xc8>
 8011c02:	2000      	movs	r0, #0
 8011c04:	e008      	b.n	8011c18 <_printf_common+0xa8>
 8011c06:	2301      	movs	r3, #1
 8011c08:	4652      	mov	r2, sl
 8011c0a:	4649      	mov	r1, r9
 8011c0c:	4638      	mov	r0, r7
 8011c0e:	47c0      	blx	r8
 8011c10:	3001      	adds	r0, #1
 8011c12:	d103      	bne.n	8011c1c <_printf_common+0xac>
 8011c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c1c:	3501      	adds	r5, #1
 8011c1e:	e7c6      	b.n	8011bae <_printf_common+0x3e>
 8011c20:	18e1      	adds	r1, r4, r3
 8011c22:	1c5a      	adds	r2, r3, #1
 8011c24:	2030      	movs	r0, #48	; 0x30
 8011c26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011c2a:	4422      	add	r2, r4
 8011c2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011c30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011c34:	3302      	adds	r3, #2
 8011c36:	e7c7      	b.n	8011bc8 <_printf_common+0x58>
 8011c38:	2301      	movs	r3, #1
 8011c3a:	4622      	mov	r2, r4
 8011c3c:	4649      	mov	r1, r9
 8011c3e:	4638      	mov	r0, r7
 8011c40:	47c0      	blx	r8
 8011c42:	3001      	adds	r0, #1
 8011c44:	d0e6      	beq.n	8011c14 <_printf_common+0xa4>
 8011c46:	3601      	adds	r6, #1
 8011c48:	e7d9      	b.n	8011bfe <_printf_common+0x8e>
	...

08011c4c <_printf_i>:
 8011c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c50:	7e0f      	ldrb	r7, [r1, #24]
 8011c52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011c54:	2f78      	cmp	r7, #120	; 0x78
 8011c56:	4691      	mov	r9, r2
 8011c58:	4680      	mov	r8, r0
 8011c5a:	460c      	mov	r4, r1
 8011c5c:	469a      	mov	sl, r3
 8011c5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011c62:	d807      	bhi.n	8011c74 <_printf_i+0x28>
 8011c64:	2f62      	cmp	r7, #98	; 0x62
 8011c66:	d80a      	bhi.n	8011c7e <_printf_i+0x32>
 8011c68:	2f00      	cmp	r7, #0
 8011c6a:	f000 80d4 	beq.w	8011e16 <_printf_i+0x1ca>
 8011c6e:	2f58      	cmp	r7, #88	; 0x58
 8011c70:	f000 80c0 	beq.w	8011df4 <_printf_i+0x1a8>
 8011c74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011c7c:	e03a      	b.n	8011cf4 <_printf_i+0xa8>
 8011c7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011c82:	2b15      	cmp	r3, #21
 8011c84:	d8f6      	bhi.n	8011c74 <_printf_i+0x28>
 8011c86:	a101      	add	r1, pc, #4	; (adr r1, 8011c8c <_printf_i+0x40>)
 8011c88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011c8c:	08011ce5 	.word	0x08011ce5
 8011c90:	08011cf9 	.word	0x08011cf9
 8011c94:	08011c75 	.word	0x08011c75
 8011c98:	08011c75 	.word	0x08011c75
 8011c9c:	08011c75 	.word	0x08011c75
 8011ca0:	08011c75 	.word	0x08011c75
 8011ca4:	08011cf9 	.word	0x08011cf9
 8011ca8:	08011c75 	.word	0x08011c75
 8011cac:	08011c75 	.word	0x08011c75
 8011cb0:	08011c75 	.word	0x08011c75
 8011cb4:	08011c75 	.word	0x08011c75
 8011cb8:	08011dfd 	.word	0x08011dfd
 8011cbc:	08011d25 	.word	0x08011d25
 8011cc0:	08011db7 	.word	0x08011db7
 8011cc4:	08011c75 	.word	0x08011c75
 8011cc8:	08011c75 	.word	0x08011c75
 8011ccc:	08011e1f 	.word	0x08011e1f
 8011cd0:	08011c75 	.word	0x08011c75
 8011cd4:	08011d25 	.word	0x08011d25
 8011cd8:	08011c75 	.word	0x08011c75
 8011cdc:	08011c75 	.word	0x08011c75
 8011ce0:	08011dbf 	.word	0x08011dbf
 8011ce4:	682b      	ldr	r3, [r5, #0]
 8011ce6:	1d1a      	adds	r2, r3, #4
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	602a      	str	r2, [r5, #0]
 8011cec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011cf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	e09f      	b.n	8011e38 <_printf_i+0x1ec>
 8011cf8:	6820      	ldr	r0, [r4, #0]
 8011cfa:	682b      	ldr	r3, [r5, #0]
 8011cfc:	0607      	lsls	r7, r0, #24
 8011cfe:	f103 0104 	add.w	r1, r3, #4
 8011d02:	6029      	str	r1, [r5, #0]
 8011d04:	d501      	bpl.n	8011d0a <_printf_i+0xbe>
 8011d06:	681e      	ldr	r6, [r3, #0]
 8011d08:	e003      	b.n	8011d12 <_printf_i+0xc6>
 8011d0a:	0646      	lsls	r6, r0, #25
 8011d0c:	d5fb      	bpl.n	8011d06 <_printf_i+0xba>
 8011d0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011d12:	2e00      	cmp	r6, #0
 8011d14:	da03      	bge.n	8011d1e <_printf_i+0xd2>
 8011d16:	232d      	movs	r3, #45	; 0x2d
 8011d18:	4276      	negs	r6, r6
 8011d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d1e:	485a      	ldr	r0, [pc, #360]	; (8011e88 <_printf_i+0x23c>)
 8011d20:	230a      	movs	r3, #10
 8011d22:	e012      	b.n	8011d4a <_printf_i+0xfe>
 8011d24:	682b      	ldr	r3, [r5, #0]
 8011d26:	6820      	ldr	r0, [r4, #0]
 8011d28:	1d19      	adds	r1, r3, #4
 8011d2a:	6029      	str	r1, [r5, #0]
 8011d2c:	0605      	lsls	r5, r0, #24
 8011d2e:	d501      	bpl.n	8011d34 <_printf_i+0xe8>
 8011d30:	681e      	ldr	r6, [r3, #0]
 8011d32:	e002      	b.n	8011d3a <_printf_i+0xee>
 8011d34:	0641      	lsls	r1, r0, #25
 8011d36:	d5fb      	bpl.n	8011d30 <_printf_i+0xe4>
 8011d38:	881e      	ldrh	r6, [r3, #0]
 8011d3a:	4853      	ldr	r0, [pc, #332]	; (8011e88 <_printf_i+0x23c>)
 8011d3c:	2f6f      	cmp	r7, #111	; 0x6f
 8011d3e:	bf0c      	ite	eq
 8011d40:	2308      	moveq	r3, #8
 8011d42:	230a      	movne	r3, #10
 8011d44:	2100      	movs	r1, #0
 8011d46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011d4a:	6865      	ldr	r5, [r4, #4]
 8011d4c:	60a5      	str	r5, [r4, #8]
 8011d4e:	2d00      	cmp	r5, #0
 8011d50:	bfa2      	ittt	ge
 8011d52:	6821      	ldrge	r1, [r4, #0]
 8011d54:	f021 0104 	bicge.w	r1, r1, #4
 8011d58:	6021      	strge	r1, [r4, #0]
 8011d5a:	b90e      	cbnz	r6, 8011d60 <_printf_i+0x114>
 8011d5c:	2d00      	cmp	r5, #0
 8011d5e:	d04b      	beq.n	8011df8 <_printf_i+0x1ac>
 8011d60:	4615      	mov	r5, r2
 8011d62:	fbb6 f1f3 	udiv	r1, r6, r3
 8011d66:	fb03 6711 	mls	r7, r3, r1, r6
 8011d6a:	5dc7      	ldrb	r7, [r0, r7]
 8011d6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011d70:	4637      	mov	r7, r6
 8011d72:	42bb      	cmp	r3, r7
 8011d74:	460e      	mov	r6, r1
 8011d76:	d9f4      	bls.n	8011d62 <_printf_i+0x116>
 8011d78:	2b08      	cmp	r3, #8
 8011d7a:	d10b      	bne.n	8011d94 <_printf_i+0x148>
 8011d7c:	6823      	ldr	r3, [r4, #0]
 8011d7e:	07de      	lsls	r6, r3, #31
 8011d80:	d508      	bpl.n	8011d94 <_printf_i+0x148>
 8011d82:	6923      	ldr	r3, [r4, #16]
 8011d84:	6861      	ldr	r1, [r4, #4]
 8011d86:	4299      	cmp	r1, r3
 8011d88:	bfde      	ittt	le
 8011d8a:	2330      	movle	r3, #48	; 0x30
 8011d8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011d90:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011d94:	1b52      	subs	r2, r2, r5
 8011d96:	6122      	str	r2, [r4, #16]
 8011d98:	f8cd a000 	str.w	sl, [sp]
 8011d9c:	464b      	mov	r3, r9
 8011d9e:	aa03      	add	r2, sp, #12
 8011da0:	4621      	mov	r1, r4
 8011da2:	4640      	mov	r0, r8
 8011da4:	f7ff fee4 	bl	8011b70 <_printf_common>
 8011da8:	3001      	adds	r0, #1
 8011daa:	d14a      	bne.n	8011e42 <_printf_i+0x1f6>
 8011dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011db0:	b004      	add	sp, #16
 8011db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011db6:	6823      	ldr	r3, [r4, #0]
 8011db8:	f043 0320 	orr.w	r3, r3, #32
 8011dbc:	6023      	str	r3, [r4, #0]
 8011dbe:	4833      	ldr	r0, [pc, #204]	; (8011e8c <_printf_i+0x240>)
 8011dc0:	2778      	movs	r7, #120	; 0x78
 8011dc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011dc6:	6823      	ldr	r3, [r4, #0]
 8011dc8:	6829      	ldr	r1, [r5, #0]
 8011dca:	061f      	lsls	r7, r3, #24
 8011dcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8011dd0:	d402      	bmi.n	8011dd8 <_printf_i+0x18c>
 8011dd2:	065f      	lsls	r7, r3, #25
 8011dd4:	bf48      	it	mi
 8011dd6:	b2b6      	uxthmi	r6, r6
 8011dd8:	07df      	lsls	r7, r3, #31
 8011dda:	bf48      	it	mi
 8011ddc:	f043 0320 	orrmi.w	r3, r3, #32
 8011de0:	6029      	str	r1, [r5, #0]
 8011de2:	bf48      	it	mi
 8011de4:	6023      	strmi	r3, [r4, #0]
 8011de6:	b91e      	cbnz	r6, 8011df0 <_printf_i+0x1a4>
 8011de8:	6823      	ldr	r3, [r4, #0]
 8011dea:	f023 0320 	bic.w	r3, r3, #32
 8011dee:	6023      	str	r3, [r4, #0]
 8011df0:	2310      	movs	r3, #16
 8011df2:	e7a7      	b.n	8011d44 <_printf_i+0xf8>
 8011df4:	4824      	ldr	r0, [pc, #144]	; (8011e88 <_printf_i+0x23c>)
 8011df6:	e7e4      	b.n	8011dc2 <_printf_i+0x176>
 8011df8:	4615      	mov	r5, r2
 8011dfa:	e7bd      	b.n	8011d78 <_printf_i+0x12c>
 8011dfc:	682b      	ldr	r3, [r5, #0]
 8011dfe:	6826      	ldr	r6, [r4, #0]
 8011e00:	6961      	ldr	r1, [r4, #20]
 8011e02:	1d18      	adds	r0, r3, #4
 8011e04:	6028      	str	r0, [r5, #0]
 8011e06:	0635      	lsls	r5, r6, #24
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	d501      	bpl.n	8011e10 <_printf_i+0x1c4>
 8011e0c:	6019      	str	r1, [r3, #0]
 8011e0e:	e002      	b.n	8011e16 <_printf_i+0x1ca>
 8011e10:	0670      	lsls	r0, r6, #25
 8011e12:	d5fb      	bpl.n	8011e0c <_printf_i+0x1c0>
 8011e14:	8019      	strh	r1, [r3, #0]
 8011e16:	2300      	movs	r3, #0
 8011e18:	6123      	str	r3, [r4, #16]
 8011e1a:	4615      	mov	r5, r2
 8011e1c:	e7bc      	b.n	8011d98 <_printf_i+0x14c>
 8011e1e:	682b      	ldr	r3, [r5, #0]
 8011e20:	1d1a      	adds	r2, r3, #4
 8011e22:	602a      	str	r2, [r5, #0]
 8011e24:	681d      	ldr	r5, [r3, #0]
 8011e26:	6862      	ldr	r2, [r4, #4]
 8011e28:	2100      	movs	r1, #0
 8011e2a:	4628      	mov	r0, r5
 8011e2c:	f7ee f9f0 	bl	8000210 <memchr>
 8011e30:	b108      	cbz	r0, 8011e36 <_printf_i+0x1ea>
 8011e32:	1b40      	subs	r0, r0, r5
 8011e34:	6060      	str	r0, [r4, #4]
 8011e36:	6863      	ldr	r3, [r4, #4]
 8011e38:	6123      	str	r3, [r4, #16]
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e40:	e7aa      	b.n	8011d98 <_printf_i+0x14c>
 8011e42:	6923      	ldr	r3, [r4, #16]
 8011e44:	462a      	mov	r2, r5
 8011e46:	4649      	mov	r1, r9
 8011e48:	4640      	mov	r0, r8
 8011e4a:	47d0      	blx	sl
 8011e4c:	3001      	adds	r0, #1
 8011e4e:	d0ad      	beq.n	8011dac <_printf_i+0x160>
 8011e50:	6823      	ldr	r3, [r4, #0]
 8011e52:	079b      	lsls	r3, r3, #30
 8011e54:	d413      	bmi.n	8011e7e <_printf_i+0x232>
 8011e56:	68e0      	ldr	r0, [r4, #12]
 8011e58:	9b03      	ldr	r3, [sp, #12]
 8011e5a:	4298      	cmp	r0, r3
 8011e5c:	bfb8      	it	lt
 8011e5e:	4618      	movlt	r0, r3
 8011e60:	e7a6      	b.n	8011db0 <_printf_i+0x164>
 8011e62:	2301      	movs	r3, #1
 8011e64:	4632      	mov	r2, r6
 8011e66:	4649      	mov	r1, r9
 8011e68:	4640      	mov	r0, r8
 8011e6a:	47d0      	blx	sl
 8011e6c:	3001      	adds	r0, #1
 8011e6e:	d09d      	beq.n	8011dac <_printf_i+0x160>
 8011e70:	3501      	adds	r5, #1
 8011e72:	68e3      	ldr	r3, [r4, #12]
 8011e74:	9903      	ldr	r1, [sp, #12]
 8011e76:	1a5b      	subs	r3, r3, r1
 8011e78:	42ab      	cmp	r3, r5
 8011e7a:	dcf2      	bgt.n	8011e62 <_printf_i+0x216>
 8011e7c:	e7eb      	b.n	8011e56 <_printf_i+0x20a>
 8011e7e:	2500      	movs	r5, #0
 8011e80:	f104 0619 	add.w	r6, r4, #25
 8011e84:	e7f5      	b.n	8011e72 <_printf_i+0x226>
 8011e86:	bf00      	nop
 8011e88:	08012ef1 	.word	0x08012ef1
 8011e8c:	08012f02 	.word	0x08012f02

08011e90 <__sflush_r>:
 8011e90:	898a      	ldrh	r2, [r1, #12]
 8011e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e96:	4605      	mov	r5, r0
 8011e98:	0710      	lsls	r0, r2, #28
 8011e9a:	460c      	mov	r4, r1
 8011e9c:	d458      	bmi.n	8011f50 <__sflush_r+0xc0>
 8011e9e:	684b      	ldr	r3, [r1, #4]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	dc05      	bgt.n	8011eb0 <__sflush_r+0x20>
 8011ea4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	dc02      	bgt.n	8011eb0 <__sflush_r+0x20>
 8011eaa:	2000      	movs	r0, #0
 8011eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011eb2:	2e00      	cmp	r6, #0
 8011eb4:	d0f9      	beq.n	8011eaa <__sflush_r+0x1a>
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011ebc:	682f      	ldr	r7, [r5, #0]
 8011ebe:	6a21      	ldr	r1, [r4, #32]
 8011ec0:	602b      	str	r3, [r5, #0]
 8011ec2:	d032      	beq.n	8011f2a <__sflush_r+0x9a>
 8011ec4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011ec6:	89a3      	ldrh	r3, [r4, #12]
 8011ec8:	075a      	lsls	r2, r3, #29
 8011eca:	d505      	bpl.n	8011ed8 <__sflush_r+0x48>
 8011ecc:	6863      	ldr	r3, [r4, #4]
 8011ece:	1ac0      	subs	r0, r0, r3
 8011ed0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011ed2:	b10b      	cbz	r3, 8011ed8 <__sflush_r+0x48>
 8011ed4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011ed6:	1ac0      	subs	r0, r0, r3
 8011ed8:	2300      	movs	r3, #0
 8011eda:	4602      	mov	r2, r0
 8011edc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011ede:	6a21      	ldr	r1, [r4, #32]
 8011ee0:	4628      	mov	r0, r5
 8011ee2:	47b0      	blx	r6
 8011ee4:	1c43      	adds	r3, r0, #1
 8011ee6:	89a3      	ldrh	r3, [r4, #12]
 8011ee8:	d106      	bne.n	8011ef8 <__sflush_r+0x68>
 8011eea:	6829      	ldr	r1, [r5, #0]
 8011eec:	291d      	cmp	r1, #29
 8011eee:	d82b      	bhi.n	8011f48 <__sflush_r+0xb8>
 8011ef0:	4a29      	ldr	r2, [pc, #164]	; (8011f98 <__sflush_r+0x108>)
 8011ef2:	410a      	asrs	r2, r1
 8011ef4:	07d6      	lsls	r6, r2, #31
 8011ef6:	d427      	bmi.n	8011f48 <__sflush_r+0xb8>
 8011ef8:	2200      	movs	r2, #0
 8011efa:	6062      	str	r2, [r4, #4]
 8011efc:	04d9      	lsls	r1, r3, #19
 8011efe:	6922      	ldr	r2, [r4, #16]
 8011f00:	6022      	str	r2, [r4, #0]
 8011f02:	d504      	bpl.n	8011f0e <__sflush_r+0x7e>
 8011f04:	1c42      	adds	r2, r0, #1
 8011f06:	d101      	bne.n	8011f0c <__sflush_r+0x7c>
 8011f08:	682b      	ldr	r3, [r5, #0]
 8011f0a:	b903      	cbnz	r3, 8011f0e <__sflush_r+0x7e>
 8011f0c:	6560      	str	r0, [r4, #84]	; 0x54
 8011f0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f10:	602f      	str	r7, [r5, #0]
 8011f12:	2900      	cmp	r1, #0
 8011f14:	d0c9      	beq.n	8011eaa <__sflush_r+0x1a>
 8011f16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f1a:	4299      	cmp	r1, r3
 8011f1c:	d002      	beq.n	8011f24 <__sflush_r+0x94>
 8011f1e:	4628      	mov	r0, r5
 8011f20:	f7ff fb36 	bl	8011590 <_free_r>
 8011f24:	2000      	movs	r0, #0
 8011f26:	6360      	str	r0, [r4, #52]	; 0x34
 8011f28:	e7c0      	b.n	8011eac <__sflush_r+0x1c>
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	4628      	mov	r0, r5
 8011f2e:	47b0      	blx	r6
 8011f30:	1c41      	adds	r1, r0, #1
 8011f32:	d1c8      	bne.n	8011ec6 <__sflush_r+0x36>
 8011f34:	682b      	ldr	r3, [r5, #0]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d0c5      	beq.n	8011ec6 <__sflush_r+0x36>
 8011f3a:	2b1d      	cmp	r3, #29
 8011f3c:	d001      	beq.n	8011f42 <__sflush_r+0xb2>
 8011f3e:	2b16      	cmp	r3, #22
 8011f40:	d101      	bne.n	8011f46 <__sflush_r+0xb6>
 8011f42:	602f      	str	r7, [r5, #0]
 8011f44:	e7b1      	b.n	8011eaa <__sflush_r+0x1a>
 8011f46:	89a3      	ldrh	r3, [r4, #12]
 8011f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f4c:	81a3      	strh	r3, [r4, #12]
 8011f4e:	e7ad      	b.n	8011eac <__sflush_r+0x1c>
 8011f50:	690f      	ldr	r7, [r1, #16]
 8011f52:	2f00      	cmp	r7, #0
 8011f54:	d0a9      	beq.n	8011eaa <__sflush_r+0x1a>
 8011f56:	0793      	lsls	r3, r2, #30
 8011f58:	680e      	ldr	r6, [r1, #0]
 8011f5a:	bf08      	it	eq
 8011f5c:	694b      	ldreq	r3, [r1, #20]
 8011f5e:	600f      	str	r7, [r1, #0]
 8011f60:	bf18      	it	ne
 8011f62:	2300      	movne	r3, #0
 8011f64:	eba6 0807 	sub.w	r8, r6, r7
 8011f68:	608b      	str	r3, [r1, #8]
 8011f6a:	f1b8 0f00 	cmp.w	r8, #0
 8011f6e:	dd9c      	ble.n	8011eaa <__sflush_r+0x1a>
 8011f70:	6a21      	ldr	r1, [r4, #32]
 8011f72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011f74:	4643      	mov	r3, r8
 8011f76:	463a      	mov	r2, r7
 8011f78:	4628      	mov	r0, r5
 8011f7a:	47b0      	blx	r6
 8011f7c:	2800      	cmp	r0, #0
 8011f7e:	dc06      	bgt.n	8011f8e <__sflush_r+0xfe>
 8011f80:	89a3      	ldrh	r3, [r4, #12]
 8011f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f86:	81a3      	strh	r3, [r4, #12]
 8011f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f8c:	e78e      	b.n	8011eac <__sflush_r+0x1c>
 8011f8e:	4407      	add	r7, r0
 8011f90:	eba8 0800 	sub.w	r8, r8, r0
 8011f94:	e7e9      	b.n	8011f6a <__sflush_r+0xda>
 8011f96:	bf00      	nop
 8011f98:	dfbffffe 	.word	0xdfbffffe

08011f9c <_fflush_r>:
 8011f9c:	b538      	push	{r3, r4, r5, lr}
 8011f9e:	690b      	ldr	r3, [r1, #16]
 8011fa0:	4605      	mov	r5, r0
 8011fa2:	460c      	mov	r4, r1
 8011fa4:	b913      	cbnz	r3, 8011fac <_fflush_r+0x10>
 8011fa6:	2500      	movs	r5, #0
 8011fa8:	4628      	mov	r0, r5
 8011faa:	bd38      	pop	{r3, r4, r5, pc}
 8011fac:	b118      	cbz	r0, 8011fb6 <_fflush_r+0x1a>
 8011fae:	6a03      	ldr	r3, [r0, #32]
 8011fb0:	b90b      	cbnz	r3, 8011fb6 <_fflush_r+0x1a>
 8011fb2:	f7ff f89d 	bl	80110f0 <__sinit>
 8011fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d0f3      	beq.n	8011fa6 <_fflush_r+0xa>
 8011fbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011fc0:	07d0      	lsls	r0, r2, #31
 8011fc2:	d404      	bmi.n	8011fce <_fflush_r+0x32>
 8011fc4:	0599      	lsls	r1, r3, #22
 8011fc6:	d402      	bmi.n	8011fce <_fflush_r+0x32>
 8011fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fca:	f7ff fa9e 	bl	801150a <__retarget_lock_acquire_recursive>
 8011fce:	4628      	mov	r0, r5
 8011fd0:	4621      	mov	r1, r4
 8011fd2:	f7ff ff5d 	bl	8011e90 <__sflush_r>
 8011fd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fd8:	07da      	lsls	r2, r3, #31
 8011fda:	4605      	mov	r5, r0
 8011fdc:	d4e4      	bmi.n	8011fa8 <_fflush_r+0xc>
 8011fde:	89a3      	ldrh	r3, [r4, #12]
 8011fe0:	059b      	lsls	r3, r3, #22
 8011fe2:	d4e1      	bmi.n	8011fa8 <_fflush_r+0xc>
 8011fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fe6:	f7ff fa91 	bl	801150c <__retarget_lock_release_recursive>
 8011fea:	e7dd      	b.n	8011fa8 <_fflush_r+0xc>

08011fec <fiprintf>:
 8011fec:	b40e      	push	{r1, r2, r3}
 8011fee:	b503      	push	{r0, r1, lr}
 8011ff0:	4601      	mov	r1, r0
 8011ff2:	ab03      	add	r3, sp, #12
 8011ff4:	4805      	ldr	r0, [pc, #20]	; (801200c <fiprintf+0x20>)
 8011ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ffa:	6800      	ldr	r0, [r0, #0]
 8011ffc:	9301      	str	r3, [sp, #4]
 8011ffe:	f7ff fc9d 	bl	801193c <_vfiprintf_r>
 8012002:	b002      	add	sp, #8
 8012004:	f85d eb04 	ldr.w	lr, [sp], #4
 8012008:	b003      	add	sp, #12
 801200a:	4770      	bx	lr
 801200c:	2000010c 	.word	0x2000010c

08012010 <__swbuf_r>:
 8012010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012012:	460e      	mov	r6, r1
 8012014:	4614      	mov	r4, r2
 8012016:	4605      	mov	r5, r0
 8012018:	b118      	cbz	r0, 8012022 <__swbuf_r+0x12>
 801201a:	6a03      	ldr	r3, [r0, #32]
 801201c:	b90b      	cbnz	r3, 8012022 <__swbuf_r+0x12>
 801201e:	f7ff f867 	bl	80110f0 <__sinit>
 8012022:	69a3      	ldr	r3, [r4, #24]
 8012024:	60a3      	str	r3, [r4, #8]
 8012026:	89a3      	ldrh	r3, [r4, #12]
 8012028:	071a      	lsls	r2, r3, #28
 801202a:	d525      	bpl.n	8012078 <__swbuf_r+0x68>
 801202c:	6923      	ldr	r3, [r4, #16]
 801202e:	b31b      	cbz	r3, 8012078 <__swbuf_r+0x68>
 8012030:	6823      	ldr	r3, [r4, #0]
 8012032:	6922      	ldr	r2, [r4, #16]
 8012034:	1a98      	subs	r0, r3, r2
 8012036:	6963      	ldr	r3, [r4, #20]
 8012038:	b2f6      	uxtb	r6, r6
 801203a:	4283      	cmp	r3, r0
 801203c:	4637      	mov	r7, r6
 801203e:	dc04      	bgt.n	801204a <__swbuf_r+0x3a>
 8012040:	4621      	mov	r1, r4
 8012042:	4628      	mov	r0, r5
 8012044:	f7ff ffaa 	bl	8011f9c <_fflush_r>
 8012048:	b9e0      	cbnz	r0, 8012084 <__swbuf_r+0x74>
 801204a:	68a3      	ldr	r3, [r4, #8]
 801204c:	3b01      	subs	r3, #1
 801204e:	60a3      	str	r3, [r4, #8]
 8012050:	6823      	ldr	r3, [r4, #0]
 8012052:	1c5a      	adds	r2, r3, #1
 8012054:	6022      	str	r2, [r4, #0]
 8012056:	701e      	strb	r6, [r3, #0]
 8012058:	6962      	ldr	r2, [r4, #20]
 801205a:	1c43      	adds	r3, r0, #1
 801205c:	429a      	cmp	r2, r3
 801205e:	d004      	beq.n	801206a <__swbuf_r+0x5a>
 8012060:	89a3      	ldrh	r3, [r4, #12]
 8012062:	07db      	lsls	r3, r3, #31
 8012064:	d506      	bpl.n	8012074 <__swbuf_r+0x64>
 8012066:	2e0a      	cmp	r6, #10
 8012068:	d104      	bne.n	8012074 <__swbuf_r+0x64>
 801206a:	4621      	mov	r1, r4
 801206c:	4628      	mov	r0, r5
 801206e:	f7ff ff95 	bl	8011f9c <_fflush_r>
 8012072:	b938      	cbnz	r0, 8012084 <__swbuf_r+0x74>
 8012074:	4638      	mov	r0, r7
 8012076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012078:	4621      	mov	r1, r4
 801207a:	4628      	mov	r0, r5
 801207c:	f000 f806 	bl	801208c <__swsetup_r>
 8012080:	2800      	cmp	r0, #0
 8012082:	d0d5      	beq.n	8012030 <__swbuf_r+0x20>
 8012084:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012088:	e7f4      	b.n	8012074 <__swbuf_r+0x64>
	...

0801208c <__swsetup_r>:
 801208c:	b538      	push	{r3, r4, r5, lr}
 801208e:	4b2a      	ldr	r3, [pc, #168]	; (8012138 <__swsetup_r+0xac>)
 8012090:	4605      	mov	r5, r0
 8012092:	6818      	ldr	r0, [r3, #0]
 8012094:	460c      	mov	r4, r1
 8012096:	b118      	cbz	r0, 80120a0 <__swsetup_r+0x14>
 8012098:	6a03      	ldr	r3, [r0, #32]
 801209a:	b90b      	cbnz	r3, 80120a0 <__swsetup_r+0x14>
 801209c:	f7ff f828 	bl	80110f0 <__sinit>
 80120a0:	89a3      	ldrh	r3, [r4, #12]
 80120a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80120a6:	0718      	lsls	r0, r3, #28
 80120a8:	d422      	bmi.n	80120f0 <__swsetup_r+0x64>
 80120aa:	06d9      	lsls	r1, r3, #27
 80120ac:	d407      	bmi.n	80120be <__swsetup_r+0x32>
 80120ae:	2309      	movs	r3, #9
 80120b0:	602b      	str	r3, [r5, #0]
 80120b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80120b6:	81a3      	strh	r3, [r4, #12]
 80120b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80120bc:	e034      	b.n	8012128 <__swsetup_r+0x9c>
 80120be:	0758      	lsls	r0, r3, #29
 80120c0:	d512      	bpl.n	80120e8 <__swsetup_r+0x5c>
 80120c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80120c4:	b141      	cbz	r1, 80120d8 <__swsetup_r+0x4c>
 80120c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80120ca:	4299      	cmp	r1, r3
 80120cc:	d002      	beq.n	80120d4 <__swsetup_r+0x48>
 80120ce:	4628      	mov	r0, r5
 80120d0:	f7ff fa5e 	bl	8011590 <_free_r>
 80120d4:	2300      	movs	r3, #0
 80120d6:	6363      	str	r3, [r4, #52]	; 0x34
 80120d8:	89a3      	ldrh	r3, [r4, #12]
 80120da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80120de:	81a3      	strh	r3, [r4, #12]
 80120e0:	2300      	movs	r3, #0
 80120e2:	6063      	str	r3, [r4, #4]
 80120e4:	6923      	ldr	r3, [r4, #16]
 80120e6:	6023      	str	r3, [r4, #0]
 80120e8:	89a3      	ldrh	r3, [r4, #12]
 80120ea:	f043 0308 	orr.w	r3, r3, #8
 80120ee:	81a3      	strh	r3, [r4, #12]
 80120f0:	6923      	ldr	r3, [r4, #16]
 80120f2:	b94b      	cbnz	r3, 8012108 <__swsetup_r+0x7c>
 80120f4:	89a3      	ldrh	r3, [r4, #12]
 80120f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80120fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80120fe:	d003      	beq.n	8012108 <__swsetup_r+0x7c>
 8012100:	4621      	mov	r1, r4
 8012102:	4628      	mov	r0, r5
 8012104:	f000 f861 	bl	80121ca <__smakebuf_r>
 8012108:	89a0      	ldrh	r0, [r4, #12]
 801210a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801210e:	f010 0301 	ands.w	r3, r0, #1
 8012112:	d00a      	beq.n	801212a <__swsetup_r+0x9e>
 8012114:	2300      	movs	r3, #0
 8012116:	60a3      	str	r3, [r4, #8]
 8012118:	6963      	ldr	r3, [r4, #20]
 801211a:	425b      	negs	r3, r3
 801211c:	61a3      	str	r3, [r4, #24]
 801211e:	6923      	ldr	r3, [r4, #16]
 8012120:	b943      	cbnz	r3, 8012134 <__swsetup_r+0xa8>
 8012122:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012126:	d1c4      	bne.n	80120b2 <__swsetup_r+0x26>
 8012128:	bd38      	pop	{r3, r4, r5, pc}
 801212a:	0781      	lsls	r1, r0, #30
 801212c:	bf58      	it	pl
 801212e:	6963      	ldrpl	r3, [r4, #20]
 8012130:	60a3      	str	r3, [r4, #8]
 8012132:	e7f4      	b.n	801211e <__swsetup_r+0x92>
 8012134:	2000      	movs	r0, #0
 8012136:	e7f7      	b.n	8012128 <__swsetup_r+0x9c>
 8012138:	2000010c 	.word	0x2000010c

0801213c <memmove>:
 801213c:	4288      	cmp	r0, r1
 801213e:	b510      	push	{r4, lr}
 8012140:	eb01 0402 	add.w	r4, r1, r2
 8012144:	d902      	bls.n	801214c <memmove+0x10>
 8012146:	4284      	cmp	r4, r0
 8012148:	4623      	mov	r3, r4
 801214a:	d807      	bhi.n	801215c <memmove+0x20>
 801214c:	1e43      	subs	r3, r0, #1
 801214e:	42a1      	cmp	r1, r4
 8012150:	d008      	beq.n	8012164 <memmove+0x28>
 8012152:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012156:	f803 2f01 	strb.w	r2, [r3, #1]!
 801215a:	e7f8      	b.n	801214e <memmove+0x12>
 801215c:	4402      	add	r2, r0
 801215e:	4601      	mov	r1, r0
 8012160:	428a      	cmp	r2, r1
 8012162:	d100      	bne.n	8012166 <memmove+0x2a>
 8012164:	bd10      	pop	{r4, pc}
 8012166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801216a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801216e:	e7f7      	b.n	8012160 <memmove+0x24>

08012170 <abort>:
 8012170:	b508      	push	{r3, lr}
 8012172:	2006      	movs	r0, #6
 8012174:	f000 f88e 	bl	8012294 <raise>
 8012178:	2001      	movs	r0, #1
 801217a:	f7ef fb67 	bl	800184c <_exit>

0801217e <__swhatbuf_r>:
 801217e:	b570      	push	{r4, r5, r6, lr}
 8012180:	460c      	mov	r4, r1
 8012182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012186:	2900      	cmp	r1, #0
 8012188:	b096      	sub	sp, #88	; 0x58
 801218a:	4615      	mov	r5, r2
 801218c:	461e      	mov	r6, r3
 801218e:	da0d      	bge.n	80121ac <__swhatbuf_r+0x2e>
 8012190:	89a3      	ldrh	r3, [r4, #12]
 8012192:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012196:	f04f 0100 	mov.w	r1, #0
 801219a:	bf0c      	ite	eq
 801219c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80121a0:	2340      	movne	r3, #64	; 0x40
 80121a2:	2000      	movs	r0, #0
 80121a4:	6031      	str	r1, [r6, #0]
 80121a6:	602b      	str	r3, [r5, #0]
 80121a8:	b016      	add	sp, #88	; 0x58
 80121aa:	bd70      	pop	{r4, r5, r6, pc}
 80121ac:	466a      	mov	r2, sp
 80121ae:	f000 f879 	bl	80122a4 <_fstat_r>
 80121b2:	2800      	cmp	r0, #0
 80121b4:	dbec      	blt.n	8012190 <__swhatbuf_r+0x12>
 80121b6:	9901      	ldr	r1, [sp, #4]
 80121b8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80121bc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80121c0:	4259      	negs	r1, r3
 80121c2:	4159      	adcs	r1, r3
 80121c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80121c8:	e7eb      	b.n	80121a2 <__swhatbuf_r+0x24>

080121ca <__smakebuf_r>:
 80121ca:	898b      	ldrh	r3, [r1, #12]
 80121cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80121ce:	079d      	lsls	r5, r3, #30
 80121d0:	4606      	mov	r6, r0
 80121d2:	460c      	mov	r4, r1
 80121d4:	d507      	bpl.n	80121e6 <__smakebuf_r+0x1c>
 80121d6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80121da:	6023      	str	r3, [r4, #0]
 80121dc:	6123      	str	r3, [r4, #16]
 80121de:	2301      	movs	r3, #1
 80121e0:	6163      	str	r3, [r4, #20]
 80121e2:	b002      	add	sp, #8
 80121e4:	bd70      	pop	{r4, r5, r6, pc}
 80121e6:	ab01      	add	r3, sp, #4
 80121e8:	466a      	mov	r2, sp
 80121ea:	f7ff ffc8 	bl	801217e <__swhatbuf_r>
 80121ee:	9900      	ldr	r1, [sp, #0]
 80121f0:	4605      	mov	r5, r0
 80121f2:	4630      	mov	r0, r6
 80121f4:	f7fe fd44 	bl	8010c80 <_malloc_r>
 80121f8:	b948      	cbnz	r0, 801220e <__smakebuf_r+0x44>
 80121fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121fe:	059a      	lsls	r2, r3, #22
 8012200:	d4ef      	bmi.n	80121e2 <__smakebuf_r+0x18>
 8012202:	f023 0303 	bic.w	r3, r3, #3
 8012206:	f043 0302 	orr.w	r3, r3, #2
 801220a:	81a3      	strh	r3, [r4, #12]
 801220c:	e7e3      	b.n	80121d6 <__smakebuf_r+0xc>
 801220e:	89a3      	ldrh	r3, [r4, #12]
 8012210:	6020      	str	r0, [r4, #0]
 8012212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012216:	81a3      	strh	r3, [r4, #12]
 8012218:	9b00      	ldr	r3, [sp, #0]
 801221a:	6163      	str	r3, [r4, #20]
 801221c:	9b01      	ldr	r3, [sp, #4]
 801221e:	6120      	str	r0, [r4, #16]
 8012220:	b15b      	cbz	r3, 801223a <__smakebuf_r+0x70>
 8012222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012226:	4630      	mov	r0, r6
 8012228:	f000 f84e 	bl	80122c8 <_isatty_r>
 801222c:	b128      	cbz	r0, 801223a <__smakebuf_r+0x70>
 801222e:	89a3      	ldrh	r3, [r4, #12]
 8012230:	f023 0303 	bic.w	r3, r3, #3
 8012234:	f043 0301 	orr.w	r3, r3, #1
 8012238:	81a3      	strh	r3, [r4, #12]
 801223a:	89a3      	ldrh	r3, [r4, #12]
 801223c:	431d      	orrs	r5, r3
 801223e:	81a5      	strh	r5, [r4, #12]
 8012240:	e7cf      	b.n	80121e2 <__smakebuf_r+0x18>

08012242 <_raise_r>:
 8012242:	291f      	cmp	r1, #31
 8012244:	b538      	push	{r3, r4, r5, lr}
 8012246:	4604      	mov	r4, r0
 8012248:	460d      	mov	r5, r1
 801224a:	d904      	bls.n	8012256 <_raise_r+0x14>
 801224c:	2316      	movs	r3, #22
 801224e:	6003      	str	r3, [r0, #0]
 8012250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012254:	bd38      	pop	{r3, r4, r5, pc}
 8012256:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012258:	b112      	cbz	r2, 8012260 <_raise_r+0x1e>
 801225a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801225e:	b94b      	cbnz	r3, 8012274 <_raise_r+0x32>
 8012260:	4620      	mov	r0, r4
 8012262:	f000 f853 	bl	801230c <_getpid_r>
 8012266:	462a      	mov	r2, r5
 8012268:	4601      	mov	r1, r0
 801226a:	4620      	mov	r0, r4
 801226c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012270:	f000 b83a 	b.w	80122e8 <_kill_r>
 8012274:	2b01      	cmp	r3, #1
 8012276:	d00a      	beq.n	801228e <_raise_r+0x4c>
 8012278:	1c59      	adds	r1, r3, #1
 801227a:	d103      	bne.n	8012284 <_raise_r+0x42>
 801227c:	2316      	movs	r3, #22
 801227e:	6003      	str	r3, [r0, #0]
 8012280:	2001      	movs	r0, #1
 8012282:	e7e7      	b.n	8012254 <_raise_r+0x12>
 8012284:	2400      	movs	r4, #0
 8012286:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801228a:	4628      	mov	r0, r5
 801228c:	4798      	blx	r3
 801228e:	2000      	movs	r0, #0
 8012290:	e7e0      	b.n	8012254 <_raise_r+0x12>
	...

08012294 <raise>:
 8012294:	4b02      	ldr	r3, [pc, #8]	; (80122a0 <raise+0xc>)
 8012296:	4601      	mov	r1, r0
 8012298:	6818      	ldr	r0, [r3, #0]
 801229a:	f7ff bfd2 	b.w	8012242 <_raise_r>
 801229e:	bf00      	nop
 80122a0:	2000010c 	.word	0x2000010c

080122a4 <_fstat_r>:
 80122a4:	b538      	push	{r3, r4, r5, lr}
 80122a6:	4d07      	ldr	r5, [pc, #28]	; (80122c4 <_fstat_r+0x20>)
 80122a8:	2300      	movs	r3, #0
 80122aa:	4604      	mov	r4, r0
 80122ac:	4608      	mov	r0, r1
 80122ae:	4611      	mov	r1, r2
 80122b0:	602b      	str	r3, [r5, #0]
 80122b2:	f7ef fb1a 	bl	80018ea <_fstat>
 80122b6:	1c43      	adds	r3, r0, #1
 80122b8:	d102      	bne.n	80122c0 <_fstat_r+0x1c>
 80122ba:	682b      	ldr	r3, [r5, #0]
 80122bc:	b103      	cbz	r3, 80122c0 <_fstat_r+0x1c>
 80122be:	6023      	str	r3, [r4, #0]
 80122c0:	bd38      	pop	{r3, r4, r5, pc}
 80122c2:	bf00      	nop
 80122c4:	20010d04 	.word	0x20010d04

080122c8 <_isatty_r>:
 80122c8:	b538      	push	{r3, r4, r5, lr}
 80122ca:	4d06      	ldr	r5, [pc, #24]	; (80122e4 <_isatty_r+0x1c>)
 80122cc:	2300      	movs	r3, #0
 80122ce:	4604      	mov	r4, r0
 80122d0:	4608      	mov	r0, r1
 80122d2:	602b      	str	r3, [r5, #0]
 80122d4:	f7ef fb19 	bl	800190a <_isatty>
 80122d8:	1c43      	adds	r3, r0, #1
 80122da:	d102      	bne.n	80122e2 <_isatty_r+0x1a>
 80122dc:	682b      	ldr	r3, [r5, #0]
 80122de:	b103      	cbz	r3, 80122e2 <_isatty_r+0x1a>
 80122e0:	6023      	str	r3, [r4, #0]
 80122e2:	bd38      	pop	{r3, r4, r5, pc}
 80122e4:	20010d04 	.word	0x20010d04

080122e8 <_kill_r>:
 80122e8:	b538      	push	{r3, r4, r5, lr}
 80122ea:	4d07      	ldr	r5, [pc, #28]	; (8012308 <_kill_r+0x20>)
 80122ec:	2300      	movs	r3, #0
 80122ee:	4604      	mov	r4, r0
 80122f0:	4608      	mov	r0, r1
 80122f2:	4611      	mov	r1, r2
 80122f4:	602b      	str	r3, [r5, #0]
 80122f6:	f7ef fa99 	bl	800182c <_kill>
 80122fa:	1c43      	adds	r3, r0, #1
 80122fc:	d102      	bne.n	8012304 <_kill_r+0x1c>
 80122fe:	682b      	ldr	r3, [r5, #0]
 8012300:	b103      	cbz	r3, 8012304 <_kill_r+0x1c>
 8012302:	6023      	str	r3, [r4, #0]
 8012304:	bd38      	pop	{r3, r4, r5, pc}
 8012306:	bf00      	nop
 8012308:	20010d04 	.word	0x20010d04

0801230c <_getpid_r>:
 801230c:	f7ef ba86 	b.w	800181c <_getpid>

08012310 <_init>:
 8012310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012312:	bf00      	nop
 8012314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012316:	bc08      	pop	{r3}
 8012318:	469e      	mov	lr, r3
 801231a:	4770      	bx	lr

0801231c <_fini>:
 801231c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801231e:	bf00      	nop
 8012320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012322:	bc08      	pop	{r3}
 8012324:	469e      	mov	lr, r3
 8012326:	4770      	bx	lr
