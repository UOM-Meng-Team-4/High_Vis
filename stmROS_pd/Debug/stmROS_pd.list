
stmROS_pd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000132d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bec  08013478  08013478  00023478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014064  08014064  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  08014064  08014064  00024064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801406c  0801406c  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801406c  0801406c  0002406c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014074  08014074  00024074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08014078  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012594  20000110  08014188  00030110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200126a4  08014188  000326a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dd8e  00000000  00000000  000301b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004285  00000000  00000000  0004df44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c8  00000000  00000000  000521d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001263  00000000  00000000  00053998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d2ab  00000000  00000000  00054bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c732  00000000  00000000  00071ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aea65  00000000  00000000  0008e5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007254  00000000  00000000  0013d040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00144294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000110 	.word	0x20000110
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013460 	.word	0x08013460

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000114 	.word	0x20000114
 80001dc:	08013460 	.word	0x08013460

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <__aeabi_ldivmod>:
 80008bc:	b97b      	cbnz	r3, 80008de <__aeabi_ldivmod+0x22>
 80008be:	b972      	cbnz	r2, 80008de <__aeabi_ldivmod+0x22>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bfbe      	ittt	lt
 80008c4:	2000      	movlt	r0, #0
 80008c6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80008ca:	e006      	blt.n	80008da <__aeabi_ldivmod+0x1e>
 80008cc:	bf08      	it	eq
 80008ce:	2800      	cmpeq	r0, #0
 80008d0:	bf1c      	itt	ne
 80008d2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008d6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008da:	f000 b9bb 	b.w	8000c54 <__aeabi_idiv0>
 80008de:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008e6:	2900      	cmp	r1, #0
 80008e8:	db09      	blt.n	80008fe <__aeabi_ldivmod+0x42>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	db1a      	blt.n	8000924 <__aeabi_ldivmod+0x68>
 80008ee:	f000 f84d 	bl	800098c <__udivmoddi4>
 80008f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008fa:	b004      	add	sp, #16
 80008fc:	4770      	bx	lr
 80008fe:	4240      	negs	r0, r0
 8000900:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000904:	2b00      	cmp	r3, #0
 8000906:	db1b      	blt.n	8000940 <__aeabi_ldivmod+0x84>
 8000908:	f000 f840 	bl	800098c <__udivmoddi4>
 800090c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000910:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000914:	b004      	add	sp, #16
 8000916:	4240      	negs	r0, r0
 8000918:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800091c:	4252      	negs	r2, r2
 800091e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000922:	4770      	bx	lr
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	f000 f82f 	bl	800098c <__udivmoddi4>
 800092e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000932:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000936:	b004      	add	sp, #16
 8000938:	4240      	negs	r0, r0
 800093a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800093e:	4770      	bx	lr
 8000940:	4252      	negs	r2, r2
 8000942:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000946:	f000 f821 	bl	800098c <__udivmoddi4>
 800094a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800094e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000952:	b004      	add	sp, #16
 8000954:	4252      	negs	r2, r2
 8000956:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800095a:	4770      	bx	lr

0800095c <__aeabi_uldivmod>:
 800095c:	b953      	cbnz	r3, 8000974 <__aeabi_uldivmod+0x18>
 800095e:	b94a      	cbnz	r2, 8000974 <__aeabi_uldivmod+0x18>
 8000960:	2900      	cmp	r1, #0
 8000962:	bf08      	it	eq
 8000964:	2800      	cmpeq	r0, #0
 8000966:	bf1c      	itt	ne
 8000968:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800096c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000970:	f000 b970 	b.w	8000c54 <__aeabi_idiv0>
 8000974:	f1ad 0c08 	sub.w	ip, sp, #8
 8000978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800097c:	f000 f806 	bl	800098c <__udivmoddi4>
 8000980:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000988:	b004      	add	sp, #16
 800098a:	4770      	bx	lr

0800098c <__udivmoddi4>:
 800098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000990:	9e08      	ldr	r6, [sp, #32]
 8000992:	460d      	mov	r5, r1
 8000994:	4604      	mov	r4, r0
 8000996:	460f      	mov	r7, r1
 8000998:	2b00      	cmp	r3, #0
 800099a:	d14a      	bne.n	8000a32 <__udivmoddi4+0xa6>
 800099c:	428a      	cmp	r2, r1
 800099e:	4694      	mov	ip, r2
 80009a0:	d965      	bls.n	8000a6e <__udivmoddi4+0xe2>
 80009a2:	fab2 f382 	clz	r3, r2
 80009a6:	b143      	cbz	r3, 80009ba <__udivmoddi4+0x2e>
 80009a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80009ac:	f1c3 0220 	rsb	r2, r3, #32
 80009b0:	409f      	lsls	r7, r3
 80009b2:	fa20 f202 	lsr.w	r2, r0, r2
 80009b6:	4317      	orrs	r7, r2
 80009b8:	409c      	lsls	r4, r3
 80009ba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009be:	fa1f f58c 	uxth.w	r5, ip
 80009c2:	fbb7 f1fe 	udiv	r1, r7, lr
 80009c6:	0c22      	lsrs	r2, r4, #16
 80009c8:	fb0e 7711 	mls	r7, lr, r1, r7
 80009cc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009d0:	fb01 f005 	mul.w	r0, r1, r5
 80009d4:	4290      	cmp	r0, r2
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x62>
 80009d8:	eb1c 0202 	adds.w	r2, ip, r2
 80009dc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80009e0:	f080 811c 	bcs.w	8000c1c <__udivmoddi4+0x290>
 80009e4:	4290      	cmp	r0, r2
 80009e6:	f240 8119 	bls.w	8000c1c <__udivmoddi4+0x290>
 80009ea:	3902      	subs	r1, #2
 80009ec:	4462      	add	r2, ip
 80009ee:	1a12      	subs	r2, r2, r0
 80009f0:	b2a4      	uxth	r4, r4
 80009f2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009f6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009fe:	fb00 f505 	mul.w	r5, r0, r5
 8000a02:	42a5      	cmp	r5, r4
 8000a04:	d90a      	bls.n	8000a1c <__udivmoddi4+0x90>
 8000a06:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000a0e:	f080 8107 	bcs.w	8000c20 <__udivmoddi4+0x294>
 8000a12:	42a5      	cmp	r5, r4
 8000a14:	f240 8104 	bls.w	8000c20 <__udivmoddi4+0x294>
 8000a18:	4464      	add	r4, ip
 8000a1a:	3802      	subs	r0, #2
 8000a1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a20:	1b64      	subs	r4, r4, r5
 8000a22:	2100      	movs	r1, #0
 8000a24:	b11e      	cbz	r6, 8000a2e <__udivmoddi4+0xa2>
 8000a26:	40dc      	lsrs	r4, r3
 8000a28:	2300      	movs	r3, #0
 8000a2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d908      	bls.n	8000a48 <__udivmoddi4+0xbc>
 8000a36:	2e00      	cmp	r6, #0
 8000a38:	f000 80ed 	beq.w	8000c16 <__udivmoddi4+0x28a>
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000a42:	4608      	mov	r0, r1
 8000a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a48:	fab3 f183 	clz	r1, r3
 8000a4c:	2900      	cmp	r1, #0
 8000a4e:	d149      	bne.n	8000ae4 <__udivmoddi4+0x158>
 8000a50:	42ab      	cmp	r3, r5
 8000a52:	d302      	bcc.n	8000a5a <__udivmoddi4+0xce>
 8000a54:	4282      	cmp	r2, r0
 8000a56:	f200 80f8 	bhi.w	8000c4a <__udivmoddi4+0x2be>
 8000a5a:	1a84      	subs	r4, r0, r2
 8000a5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a60:	2001      	movs	r0, #1
 8000a62:	4617      	mov	r7, r2
 8000a64:	2e00      	cmp	r6, #0
 8000a66:	d0e2      	beq.n	8000a2e <__udivmoddi4+0xa2>
 8000a68:	e9c6 4700 	strd	r4, r7, [r6]
 8000a6c:	e7df      	b.n	8000a2e <__udivmoddi4+0xa2>
 8000a6e:	b902      	cbnz	r2, 8000a72 <__udivmoddi4+0xe6>
 8000a70:	deff      	udf	#255	; 0xff
 8000a72:	fab2 f382 	clz	r3, r2
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f040 8090 	bne.w	8000b9c <__udivmoddi4+0x210>
 8000a7c:	1a8a      	subs	r2, r1, r2
 8000a7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a82:	fa1f fe8c 	uxth.w	lr, ip
 8000a86:	2101      	movs	r1, #1
 8000a88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a90:	0c22      	lsrs	r2, r4, #16
 8000a92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a96:	fb0e f005 	mul.w	r0, lr, r5
 8000a9a:	4290      	cmp	r0, r2
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x124>
 8000a9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000aa2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000aa6:	d202      	bcs.n	8000aae <__udivmoddi4+0x122>
 8000aa8:	4290      	cmp	r0, r2
 8000aaa:	f200 80cb 	bhi.w	8000c44 <__udivmoddi4+0x2b8>
 8000aae:	4645      	mov	r5, r8
 8000ab0:	1a12      	subs	r2, r2, r0
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ab8:	fb07 2210 	mls	r2, r7, r0, r2
 8000abc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ac0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ac4:	45a6      	cmp	lr, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x14e>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ad0:	d202      	bcs.n	8000ad8 <__udivmoddi4+0x14c>
 8000ad2:	45a6      	cmp	lr, r4
 8000ad4:	f200 80bb 	bhi.w	8000c4e <__udivmoddi4+0x2c2>
 8000ad8:	4610      	mov	r0, r2
 8000ada:	eba4 040e 	sub.w	r4, r4, lr
 8000ade:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ae2:	e79f      	b.n	8000a24 <__udivmoddi4+0x98>
 8000ae4:	f1c1 0720 	rsb	r7, r1, #32
 8000ae8:	408b      	lsls	r3, r1
 8000aea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000af2:	fa05 f401 	lsl.w	r4, r5, r1
 8000af6:	fa20 f307 	lsr.w	r3, r0, r7
 8000afa:	40fd      	lsrs	r5, r7
 8000afc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b00:	4323      	orrs	r3, r4
 8000b02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b06:	fa1f fe8c 	uxth.w	lr, ip
 8000b0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b0e:	0c1c      	lsrs	r4, r3, #16
 8000b10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b14:	fb08 f50e 	mul.w	r5, r8, lr
 8000b18:	42a5      	cmp	r5, r4
 8000b1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b22:	d90b      	bls.n	8000b3c <__udivmoddi4+0x1b0>
 8000b24:	eb1c 0404 	adds.w	r4, ip, r4
 8000b28:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b2c:	f080 8088 	bcs.w	8000c40 <__udivmoddi4+0x2b4>
 8000b30:	42a5      	cmp	r5, r4
 8000b32:	f240 8085 	bls.w	8000c40 <__udivmoddi4+0x2b4>
 8000b36:	f1a8 0802 	sub.w	r8, r8, #2
 8000b3a:	4464      	add	r4, ip
 8000b3c:	1b64      	subs	r4, r4, r5
 8000b3e:	b29d      	uxth	r5, r3
 8000b40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b44:	fb09 4413 	mls	r4, r9, r3, r4
 8000b48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x1da>
 8000b54:	eb1c 0404 	adds.w	r4, ip, r4
 8000b58:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000b5c:	d26c      	bcs.n	8000c38 <__udivmoddi4+0x2ac>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	d96a      	bls.n	8000c38 <__udivmoddi4+0x2ac>
 8000b62:	3b02      	subs	r3, #2
 8000b64:	4464      	add	r4, ip
 8000b66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b6e:	eba4 040e 	sub.w	r4, r4, lr
 8000b72:	42ac      	cmp	r4, r5
 8000b74:	46c8      	mov	r8, r9
 8000b76:	46ae      	mov	lr, r5
 8000b78:	d356      	bcc.n	8000c28 <__udivmoddi4+0x29c>
 8000b7a:	d053      	beq.n	8000c24 <__udivmoddi4+0x298>
 8000b7c:	b156      	cbz	r6, 8000b94 <__udivmoddi4+0x208>
 8000b7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b82:	eb64 040e 	sbc.w	r4, r4, lr
 8000b86:	fa04 f707 	lsl.w	r7, r4, r7
 8000b8a:	40ca      	lsrs	r2, r1
 8000b8c:	40cc      	lsrs	r4, r1
 8000b8e:	4317      	orrs	r7, r2
 8000b90:	e9c6 7400 	strd	r7, r4, [r6]
 8000b94:	4618      	mov	r0, r3
 8000b96:	2100      	movs	r1, #0
 8000b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ba0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ba8:	fa25 f101 	lsr.w	r1, r5, r1
 8000bac:	409d      	lsls	r5, r3
 8000bae:	432a      	orrs	r2, r5
 8000bb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb4:	fa1f fe8c 	uxth.w	lr, ip
 8000bb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000bc0:	0c11      	lsrs	r1, r2, #16
 8000bc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000bc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000bca:	428d      	cmp	r5, r1
 8000bcc:	fa04 f403 	lsl.w	r4, r4, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x258>
 8000bd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bda:	d22f      	bcs.n	8000c3c <__udivmoddi4+0x2b0>
 8000bdc:	428d      	cmp	r5, r1
 8000bde:	d92d      	bls.n	8000c3c <__udivmoddi4+0x2b0>
 8000be0:	3802      	subs	r0, #2
 8000be2:	4461      	add	r1, ip
 8000be4:	1b49      	subs	r1, r1, r5
 8000be6:	b292      	uxth	r2, r2
 8000be8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bec:	fb07 1115 	mls	r1, r7, r5, r1
 8000bf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bf8:	4291      	cmp	r1, r2
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x282>
 8000bfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000c00:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c04:	d216      	bcs.n	8000c34 <__udivmoddi4+0x2a8>
 8000c06:	4291      	cmp	r1, r2
 8000c08:	d914      	bls.n	8000c34 <__udivmoddi4+0x2a8>
 8000c0a:	3d02      	subs	r5, #2
 8000c0c:	4462      	add	r2, ip
 8000c0e:	1a52      	subs	r2, r2, r1
 8000c10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c14:	e738      	b.n	8000a88 <__udivmoddi4+0xfc>
 8000c16:	4631      	mov	r1, r6
 8000c18:	4630      	mov	r0, r6
 8000c1a:	e708      	b.n	8000a2e <__udivmoddi4+0xa2>
 8000c1c:	4639      	mov	r1, r7
 8000c1e:	e6e6      	b.n	80009ee <__udivmoddi4+0x62>
 8000c20:	4610      	mov	r0, r2
 8000c22:	e6fb      	b.n	8000a1c <__udivmoddi4+0x90>
 8000c24:	4548      	cmp	r0, r9
 8000c26:	d2a9      	bcs.n	8000b7c <__udivmoddi4+0x1f0>
 8000c28:	ebb9 0802 	subs.w	r8, r9, r2
 8000c2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c30:	3b01      	subs	r3, #1
 8000c32:	e7a3      	b.n	8000b7c <__udivmoddi4+0x1f0>
 8000c34:	4645      	mov	r5, r8
 8000c36:	e7ea      	b.n	8000c0e <__udivmoddi4+0x282>
 8000c38:	462b      	mov	r3, r5
 8000c3a:	e794      	b.n	8000b66 <__udivmoddi4+0x1da>
 8000c3c:	4640      	mov	r0, r8
 8000c3e:	e7d1      	b.n	8000be4 <__udivmoddi4+0x258>
 8000c40:	46d0      	mov	r8, sl
 8000c42:	e77b      	b.n	8000b3c <__udivmoddi4+0x1b0>
 8000c44:	3d02      	subs	r5, #2
 8000c46:	4462      	add	r2, ip
 8000c48:	e732      	b.n	8000ab0 <__udivmoddi4+0x124>
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e70a      	b.n	8000a64 <__udivmoddi4+0xd8>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	e742      	b.n	8000ada <__udivmoddi4+0x14e>

08000c54 <__aeabi_idiv0>:
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000c64:	f006 fd7c 	bl	8007760 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000c68:	4b58      	ldr	r3, [pc, #352]	; (8000dcc <pvPortMallocMicroROS+0x174>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d101      	bne.n	8000c74 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000c70:	f000 f980 	bl	8000f74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000c74:	4b56      	ldr	r3, [pc, #344]	; (8000dd0 <pvPortMallocMicroROS+0x178>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f040 808e 	bne.w	8000d9e <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d01d      	beq.n	8000cc4 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000c88:	2208      	movs	r2, #8
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d014      	beq.n	8000cc4 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f023 0307 	bic.w	r3, r3, #7
 8000ca0:	3308      	adds	r3, #8
 8000ca2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00a      	beq.n	8000cc4 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cb2:	f383 8811 	msr	BASEPRI, r3
 8000cb6:	f3bf 8f6f 	isb	sy
 8000cba:	f3bf 8f4f 	dsb	sy
 8000cbe:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000cc0:	bf00      	nop
 8000cc2:	e7fe      	b.n	8000cc2 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d069      	beq.n	8000d9e <pvPortMallocMicroROS+0x146>
 8000cca:	4b42      	ldr	r3, [pc, #264]	; (8000dd4 <pvPortMallocMicroROS+0x17c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d864      	bhi.n	8000d9e <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000cd4:	4b40      	ldr	r3, [pc, #256]	; (8000dd8 <pvPortMallocMicroROS+0x180>)
 8000cd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000cd8:	4b3f      	ldr	r3, [pc, #252]	; (8000dd8 <pvPortMallocMicroROS+0x180>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000cde:	e004      	b.n	8000cea <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d903      	bls.n	8000cfc <pvPortMallocMicroROS+0xa4>
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1f1      	bne.n	8000ce0 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000cfc:	4b33      	ldr	r3, [pc, #204]	; (8000dcc <pvPortMallocMicroROS+0x174>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d04b      	beq.n	8000d9e <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000d06:	6a3b      	ldr	r3, [r7, #32]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	4413      	add	r3, r2
 8000d0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	6a3b      	ldr	r3, [r7, #32]
 8000d16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	1ad2      	subs	r2, r2, r3
 8000d20:	2308      	movs	r3, #8
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d91f      	bls.n	8000d68 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00a      	beq.n	8000d50 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8000d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d3e:	f383 8811 	msr	BASEPRI, r3
 8000d42:	f3bf 8f6f 	isb	sy
 8000d46:	f3bf 8f4f 	dsb	sy
 8000d4a:	613b      	str	r3, [r7, #16]
}
 8000d4c:	bf00      	nop
 8000d4e:	e7fe      	b.n	8000d4e <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	1ad2      	subs	r2, r2, r3
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000d62:	69b8      	ldr	r0, [r7, #24]
 8000d64:	f000 f968 	bl	8001038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <pvPortMallocMicroROS+0x17c>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	4a18      	ldr	r2, [pc, #96]	; (8000dd4 <pvPortMallocMicroROS+0x17c>)
 8000d74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <pvPortMallocMicroROS+0x17c>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <pvPortMallocMicroROS+0x184>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d203      	bcs.n	8000d8a <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <pvPortMallocMicroROS+0x17c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <pvPortMallocMicroROS+0x184>)
 8000d88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <pvPortMallocMicroROS+0x178>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	431a      	orrs	r2, r3
 8000d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000d9e:	f006 fced 	bl	800777c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d00a      	beq.n	8000dc2 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8000dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000db0:	f383 8811 	msr	BASEPRI, r3
 8000db4:	f3bf 8f6f 	isb	sy
 8000db8:	f3bf 8f4f 	dsb	sy
 8000dbc:	60fb      	str	r3, [r7, #12]
}
 8000dbe:	bf00      	nop
 8000dc0:	e7fe      	b.n	8000dc0 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 8000dc2:	69fb      	ldr	r3, [r7, #28]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3728      	adds	r7, #40	; 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20003d34 	.word	0x20003d34
 8000dd0:	20003d40 	.word	0x20003d40
 8000dd4:	20003d38 	.word	0x20003d38
 8000dd8:	20003d2c 	.word	0x20003d2c
 8000ddc:	20003d3c 	.word	0x20003d3c

08000de0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d048      	beq.n	8000e84 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000df2:	2308      	movs	r3, #8
 8000df4:	425b      	negs	r3, r3
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	4413      	add	r3, r2
 8000dfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <vPortFreeMicroROS+0xac>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10a      	bne.n	8000e24 <vPortFreeMicroROS+0x44>
	__asm volatile
 8000e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e12:	f383 8811 	msr	BASEPRI, r3
 8000e16:	f3bf 8f6f 	isb	sy
 8000e1a:	f3bf 8f4f 	dsb	sy
 8000e1e:	60fb      	str	r3, [r7, #12]
}
 8000e20:	bf00      	nop
 8000e22:	e7fe      	b.n	8000e22 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d00a      	beq.n	8000e42 <vPortFreeMicroROS+0x62>
	__asm volatile
 8000e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e30:	f383 8811 	msr	BASEPRI, r3
 8000e34:	f3bf 8f6f 	isb	sy
 8000e38:	f3bf 8f4f 	dsb	sy
 8000e3c:	60bb      	str	r3, [r7, #8]
}
 8000e3e:	bf00      	nop
 8000e40:	e7fe      	b.n	8000e40 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <vPortFreeMicroROS+0xac>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d019      	beq.n	8000e84 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d115      	bne.n	8000e84 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <vPortFreeMicroROS+0xac>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	401a      	ands	r2, r3
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000e68:	f006 fc7a 	bl	8007760 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <vPortFreeMicroROS+0xb0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <vPortFreeMicroROS+0xb0>)
 8000e78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000e7a:	6938      	ldr	r0, [r7, #16]
 8000e7c:	f000 f8dc 	bl	8001038 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000e80:	f006 fc7c 	bl	800777c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000e84:	bf00      	nop
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20003d40 	.word	0x20003d40
 8000e90:	20003d38 	.word	0x20003d38

08000e94 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000e94:	b480      	push	{r7}
 8000e96:	b087      	sub	sp, #28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000ea0:	2308      	movs	r3, #8
 8000ea2:	425b      	negs	r3, r3
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <getBlockSize+0x38>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

	return count;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	371c      	adds	r7, #28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20003d40 	.word	0x20003d40

08000ed0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000eda:	f006 fc41 	bl	8007760 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000ede:	6838      	ldr	r0, [r7, #0]
 8000ee0:	f7ff feba 	bl	8000c58 <pvPortMallocMicroROS>
 8000ee4:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d017      	beq.n	8000f1c <pvPortReallocMicroROS+0x4c>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d014      	beq.n	8000f1c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ffce 	bl	8000e94 <getBlockSize>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2208      	movs	r2, #8
 8000efc:	1a9b      	subs	r3, r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d201      	bcs.n	8000f0c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	68b8      	ldr	r0, [r7, #8]
 8000f12:	f011 fbac 	bl	801266e <memcpy>

		vPortFreeMicroROS(pv);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ff62 	bl	8000de0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000f1c:	f006 fc2e 	bl	800777c <xTaskResumeAll>

	return newmem;
 8000f20:	68bb      	ldr	r3, [r7, #8]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f34:	f006 fc14 	bl	8007760 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	fb02 f303 	mul.w	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff fe88 	bl	8000c58 <pvPortMallocMicroROS>
 8000f48:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000f4e:	e004      	b.n	8000f5a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	613a      	str	r2, [r7, #16]
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	1e5a      	subs	r2, r3, #1
 8000f5e:	617a      	str	r2, [r7, #20]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1f5      	bne.n	8000f50 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000f64:	f006 fc0a 	bl	800777c <xTaskResumeAll>
  	return mem;
 8000f68:	68fb      	ldr	r3, [r7, #12]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000f7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000f7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000f80:	4b27      	ldr	r3, [pc, #156]	; (8001020 <prvHeapInit+0xac>)
 8000f82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00c      	beq.n	8000fa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	3307      	adds	r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f023 0307 	bic.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	4a1f      	ldr	r2, [pc, #124]	; (8001020 <prvHeapInit+0xac>)
 8000fa4:	4413      	add	r3, r2
 8000fa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000fac:	4a1d      	ldr	r2, [pc, #116]	; (8001024 <prvHeapInit+0xb0>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <prvHeapInit+0xb0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000fc0:	2208      	movs	r2, #8
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	1a9b      	subs	r3, r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f023 0307 	bic.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4a15      	ldr	r2, [pc, #84]	; (8001028 <prvHeapInit+0xb4>)
 8000fd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <prvHeapInit+0xb4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <prvHeapInit+0xb4>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	1ad2      	subs	r2, r2, r3
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <prvHeapInit+0xb4>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	4a0a      	ldr	r2, [pc, #40]	; (800102c <prvHeapInit+0xb8>)
 8001002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	4a09      	ldr	r2, [pc, #36]	; (8001030 <prvHeapInit+0xbc>)
 800100a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <prvHeapInit+0xc0>)
 800100e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001012:	601a      	str	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	2000012c 	.word	0x2000012c
 8001024:	20003d2c 	.word	0x20003d2c
 8001028:	20003d34 	.word	0x20003d34
 800102c:	20003d3c 	.word	0x20003d3c
 8001030:	20003d38 	.word	0x20003d38
 8001034:	20003d40 	.word	0x20003d40

08001038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001040:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <prvInsertBlockIntoFreeList+0xac>)
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e002      	b.n	800104c <prvInsertBlockIntoFreeList+0x14>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	429a      	cmp	r2, r3
 8001054:	d8f7      	bhi.n	8001046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	4413      	add	r3, r2
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	429a      	cmp	r2, r3
 8001066:	d108      	bne.n	800107a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	441a      	add	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	441a      	add	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	429a      	cmp	r2, r3
 800108c:	d118      	bne.n	80010c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <prvInsertBlockIntoFreeList+0xb0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	429a      	cmp	r2, r3
 8001098:	d00d      	beq.n	80010b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	441a      	add	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	e008      	b.n	80010c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <prvInsertBlockIntoFreeList+0xb0>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	e003      	b.n	80010c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d002      	beq.n	80010d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20003d2c 	.word	0x20003d2c
 80010e8:	20003d34 	.word	0x20003d34

080010ec <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80010fa:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80010fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001100:	4904      	ldr	r1, [pc, #16]	; (8001114 <cubemx_transport_open+0x28>)
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f004 f81e 	bl	8005144 <HAL_UART_Receive_DMA>
    return true;
 8001108:	2301      	movs	r3, #1
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20003d44 	.word	0x20003d44

08001118 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001126:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f004 f830 	bl	800518e <HAL_UART_DMAStop>
    return true;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800114c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b20      	cmp	r3, #32
 8001158:	d11c      	bne.n	8001194 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	b29b      	uxth	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f003 ff7e 	bl	8005064 <HAL_UART_Transmit_DMA>
 8001168:	4603      	mov	r3, r0
 800116a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800116c:	e002      	b.n	8001174 <cubemx_transport_write+0x3c>
            osDelay(1);
 800116e:	2001      	movs	r0, #1
 8001170:	f005 faaa 	bl	80066c8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001174:	7cfb      	ldrb	r3, [r7, #19]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d105      	bne.n	8001186 <cubemx_transport_write+0x4e>
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b20      	cmp	r3, #32
 8001184:	d1f3      	bne.n	800116e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001186:	7cfb      	ldrb	r3, [r7, #19]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <cubemx_transport_write+0x58>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	e002      	b.n	8001196 <cubemx_transport_write+0x5e>
 8001190:	2300      	movs	r3, #0
 8001192:	e000      	b.n	8001196 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001194:	2300      	movs	r3, #0
    }
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80011b4:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ba:	b672      	cpsid	i
}
 80011bc:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <cubemx_transport_read+0x9c>)
 80011cc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80011ce:	b662      	cpsie	i
}
 80011d0:	bf00      	nop
        __enable_irq();
        ms_used++;
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3301      	adds	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80011d8:	2001      	movs	r0, #1
 80011da:	f005 fa75 	bl	80066c8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <cubemx_transport_read+0xa0>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <cubemx_transport_read+0x9c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d103      	bne.n	80011f2 <cubemx_transport_read+0x52>
 80011ea:	69fa      	ldr	r2, [r7, #28]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	dbe3      	blt.n	80011ba <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80011f6:	e011      	b.n	800121c <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <cubemx_transport_read+0xa0>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	440b      	add	r3, r1
 8001202:	4910      	ldr	r1, [pc, #64]	; (8001244 <cubemx_transport_read+0xa4>)
 8001204:	5c8a      	ldrb	r2, [r1, r2]
 8001206:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <cubemx_transport_read+0xa0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	3301      	adds	r3, #1
 800120e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <cubemx_transport_read+0xa0>)
 8001214:	6013      	str	r3, [r2, #0]
        wrote++;
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	3301      	adds	r3, #1
 800121a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <cubemx_transport_read+0xa0>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <cubemx_transport_read+0x9c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	d003      	beq.n	8001230 <cubemx_transport_read+0x90>
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	429a      	cmp	r2, r3
 800122e:	d3e3      	bcc.n	80011f8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001230:	69bb      	ldr	r3, [r7, #24]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20004548 	.word	0x20004548
 8001240:	20004544 	.word	0x20004544
 8001244:	20003d44 	.word	0x20003d44

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124c:	f001 fa22 	bl	8002694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001250:	f000 f848 	bl	80012e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001254:	f000 f9a2 	bl	800159c <MX_GPIO_Init>
  MX_DMA_Init();
 8001258:	f000 f978 	bl	800154c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800125c:	f000 f94c 	bl	80014f8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001260:	f000 f8aa 	bl	80013b8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001264:	f000 f8fa 	bl	800145c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8001268:	4809      	ldr	r0, [pc, #36]	; (8001290 <main+0x48>)
 800126a:	f003 fa67 	bl	800473c <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1);
 800126e:	4809      	ldr	r0, [pc, #36]	; (8001294 <main+0x4c>)
 8001270:	f001 fa96 	bl	80027a0 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001274:	f005 f94c 	bl	8006510 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001278:	4a07      	ldr	r2, [pc, #28]	; (8001298 <main+0x50>)
 800127a:	2100      	movs	r1, #0
 800127c:	4807      	ldr	r0, [pc, #28]	; (800129c <main+0x54>)
 800127e:	f005 f991 	bl	80065a4 <osThreadNew>
 8001282:	4603      	mov	r3, r0
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <main+0x58>)
 8001286:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001288:	f005 f966 	bl	8006558 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800128c:	e7fe      	b.n	800128c <main+0x44>
 800128e:	bf00      	nop
 8001290:	20004594 	.word	0x20004594
 8001294:	2000454c 	.word	0x2000454c
 8001298:	08013510 	.word	0x08013510
 800129c:	08001681 	.word	0x08001681
 80012a0:	200046e4 	.word	0x200046e4

080012a4 <HAL_ADC_ConvCpltCallback>:
    /* USER CODE BEGIN 3 */
  }

}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    AD_RES = HAL_ADC_GetValue(&hadc1); // Read & Update The ADC Result
 80012ac:	4809      	ldr	r0, [pc, #36]	; (80012d4 <HAL_ADC_ConvCpltCallback+0x30>)
 80012ae:	f001 fc45 	bl	8002b3c <HAL_ADC_GetValue>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_ADC_ConvCpltCallback+0x34>)
 80012b8:	801a      	strh	r2, [r3, #0]
    flagNewSample = 1;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_ADC_ConvCpltCallback+0x38>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8); // Toggle Interrupt Rate Indicator Pin
 80012c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c4:	4806      	ldr	r0, [pc, #24]	; (80012e0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80012c6:	f002 fd04 	bl	8003cd2 <HAL_GPIO_TogglePin>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000454c 	.word	0x2000454c
 80012d8:	20007670 	.word	0x20007670
 80012dc:	20008ff8 	.word	0x20008ff8
 80012e0:	40020000 	.word	0x40020000

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b094      	sub	sp, #80	; 0x50
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	2230      	movs	r2, #48	; 0x30
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f011 f89c 	bl	8012430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <SystemClock_Config+0xcc>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	4a27      	ldr	r2, [pc, #156]	; (80013b0 <SystemClock_Config+0xcc>)
 8001312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
 8001318:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <SystemClock_Config+0xcc>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <SystemClock_Config+0xd0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001330:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <SystemClock_Config+0xd0>)
 8001332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <SystemClock_Config+0xd0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001344:	2301      	movs	r3, #1
 8001346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134e:	2302      	movs	r3, #2
 8001350:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001352:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001356:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001358:	2304      	movs	r3, #4
 800135a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800135c:	2354      	movs	r3, #84	; 0x54
 800135e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001360:	2302      	movs	r3, #2
 8001362:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001364:	2307      	movs	r3, #7
 8001366:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001368:	f107 0320 	add.w	r3, r7, #32
 800136c:	4618      	mov	r0, r3
 800136e:	f002 fccb 	bl	8003d08 <HAL_RCC_OscConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001378:	f000 fd12 	bl	8001da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137c:	230f      	movs	r3, #15
 800137e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001380:	2302      	movs	r3, #2
 8001382:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	2102      	movs	r1, #2
 8001398:	4618      	mov	r0, r3
 800139a:	f002 ff2d 	bl	80041f8 <HAL_RCC_ClockConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013a4:	f000 fcfc 	bl	8001da0 <Error_Handler>
  }
}
 80013a8:	bf00      	nop
 80013aa:	3750      	adds	r7, #80	; 0x50
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000

080013b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013be:	463b      	mov	r3, r7
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <MX_ADC1_Init+0x9c>)
 80013cc:	4a22      	ldr	r2, [pc, #136]	; (8001458 <MX_ADC1_Init+0xa0>)
 80013ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013d0:	4b20      	ldr	r3, [pc, #128]	; (8001454 <MX_ADC1_Init+0x9c>)
 80013d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <MX_ADC1_Init+0x9c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_ADC1_Init+0x9c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <MX_ADC1_Init+0x9c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_ADC1_Init+0x9c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <MX_ADC1_Init+0x9c>)
 80013f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_ADC1_Init+0x9c>)
 80013fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_ADC1_Init+0x9c>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MX_ADC1_Init+0x9c>)
 800140a:	2201      	movs	r2, #1
 800140c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_ADC1_Init+0x9c>)
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_ADC1_Init+0x9c>)
 8001418:	2201      	movs	r2, #1
 800141a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_ADC1_Init+0x9c>)
 800141e:	f001 f97b 	bl	8002718 <HAL_ADC_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001428:	f000 fcba 	bl	8001da0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800142c:	2307      	movs	r3, #7
 800142e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001430:	2301      	movs	r3, #1
 8001432:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_ADC1_Init+0x9c>)
 800143e:	f001 fb9f 	bl	8002b80 <HAL_ADC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001448:	f000 fcaa 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000454c 	.word	0x2000454c
 8001458:	40012000 	.word	0x40012000

0800145c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	463b      	mov	r3, r7
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001478:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <MX_TIM3_Init+0x94>)
 800147a:	4a1e      	ldr	r2, [pc, #120]	; (80014f4 <MX_TIM3_Init+0x98>)
 800147c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2;
 800147e:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <MX_TIM3_Init+0x94>)
 8001480:	2202      	movs	r2, #2
 8001482:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001484:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <MX_TIM3_Init+0x94>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 345;
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <MX_TIM3_Init+0x94>)
 800148c:	f240 1259 	movw	r2, #345	; 0x159
 8001490:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <MX_TIM3_Init+0x94>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <MX_TIM3_Init+0x94>)
 800149a:	2280      	movs	r2, #128	; 0x80
 800149c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800149e:	4814      	ldr	r0, [pc, #80]	; (80014f0 <MX_TIM3_Init+0x94>)
 80014a0:	f003 f8fc 	bl	800469c <HAL_TIM_Base_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80014aa:	f000 fc79 	bl	8001da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	4619      	mov	r1, r3
 80014ba:	480d      	ldr	r0, [pc, #52]	; (80014f0 <MX_TIM3_Init+0x94>)
 80014bc:	f003 faea 	bl	8004a94 <HAL_TIM_ConfigClockSource>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80014c6:	f000 fc6b 	bl	8001da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014ca:	2320      	movs	r3, #32
 80014cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d2:	463b      	mov	r3, r7
 80014d4:	4619      	mov	r1, r3
 80014d6:	4806      	ldr	r0, [pc, #24]	; (80014f0 <MX_TIM3_Init+0x94>)
 80014d8:	f003 fcf2 	bl	8004ec0 <HAL_TIMEx_MasterConfigSynchronization>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80014e2:	f000 fc5d 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20004594 	.word	0x20004594
 80014f4:	40000400 	.word	0x40000400

080014f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_USART2_UART_Init+0x4c>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <MX_USART2_UART_Init+0x50>)
 8001500:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <MX_USART2_UART_Init+0x4c>)
 8001504:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001508:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_USART2_UART_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_USART2_UART_Init+0x4c>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MX_USART2_UART_Init+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_USART2_UART_Init+0x4c>)
 800151e:	220c      	movs	r2, #12
 8001520:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <MX_USART2_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_USART2_UART_Init+0x4c>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_USART2_UART_Init+0x4c>)
 8001530:	f003 fd48 	bl	8004fc4 <HAL_UART_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800153a:	f000 fc31 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200045dc 	.word	0x200045dc
 8001548:	40004400 	.word	0x40004400

0800154c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <MX_DMA_Init+0x4c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <MX_DMA_Init+0x4c>)
 800155c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <MX_DMA_Init+0x4c>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2105      	movs	r1, #5
 8001572:	2010      	movs	r0, #16
 8001574:	f001 fde4 	bl	8003140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001578:	2010      	movs	r0, #16
 800157a:	f001 fdfd 	bl	8003178 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2105      	movs	r1, #5
 8001582:	2011      	movs	r0, #17
 8001584:	f001 fddc 	bl	8003140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001588:	2011      	movs	r0, #17
 800158a:	f001 fdf5 	bl	8003178 <HAL_NVIC_EnableIRQ>

}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800

0800159c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b2e      	ldr	r3, [pc, #184]	; (8001670 <MX_GPIO_Init+0xd4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a2d      	ldr	r2, [pc, #180]	; (8001670 <MX_GPIO_Init+0xd4>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <MX_GPIO_Init+0xd4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b27      	ldr	r3, [pc, #156]	; (8001670 <MX_GPIO_Init+0xd4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a26      	ldr	r2, [pc, #152]	; (8001670 <MX_GPIO_Init+0xd4>)
 80015d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b24      	ldr	r3, [pc, #144]	; (8001670 <MX_GPIO_Init+0xd4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <MX_GPIO_Init+0xd4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a1f      	ldr	r2, [pc, #124]	; (8001670 <MX_GPIO_Init+0xd4>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <MX_GPIO_Init+0xd4>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <MX_GPIO_Init+0xd4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a18      	ldr	r2, [pc, #96]	; (8001670 <MX_GPIO_Init+0xd4>)
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b16      	ldr	r3, [pc, #88]	; (8001670 <MX_GPIO_Init+0xd4>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001628:	4812      	ldr	r0, [pc, #72]	; (8001674 <MX_GPIO_Init+0xd8>)
 800162a:	f002 fb39 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800162e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001634:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <MX_GPIO_Init+0xdc>)
 8001646:	f002 f9a7 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 800164a:	f44f 7390 	mov.w	r3, #288	; 0x120
 800164e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001650:	2301      	movs	r3, #1
 8001652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4804      	ldr	r0, [pc, #16]	; (8001674 <MX_GPIO_Init+0xd8>)
 8001664:	f002 f998 	bl	8003998 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001668:	bf00      	nop
 800166a:	3728      	adds	r7, #40	; 0x28
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800
 8001674:	40020000 	.word	0x40020000
 8001678:	40020800 	.word	0x40020800
 800167c:	00000000 	.word	0x00000000

08001680 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001680:	b5b0      	push	{r4, r5, r7, lr}
 8001682:	b0ae      	sub	sp, #184	; 0xb8
 8001684:	af02      	add	r7, sp, #8
 8001686:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	  // micro-ROS configuration

	  rmw_uros_set_custom_transport(
 8001688:	4ba3      	ldr	r3, [pc, #652]	; (8001918 <StartDefaultTask+0x298>)
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	4ba3      	ldr	r3, [pc, #652]	; (800191c <StartDefaultTask+0x29c>)
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	4ba3      	ldr	r3, [pc, #652]	; (8001920 <StartDefaultTask+0x2a0>)
 8001692:	4aa4      	ldr	r2, [pc, #656]	; (8001924 <StartDefaultTask+0x2a4>)
 8001694:	49a4      	ldr	r1, [pc, #656]	; (8001928 <StartDefaultTask+0x2a8>)
 8001696:	2001      	movs	r0, #1
 8001698:	f007 ff06 	bl	80094a8 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800169c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016a0:	4618      	mov	r0, r3
 80016a2:	f007 fe83 	bl	80093ac <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 80016a6:	4ba1      	ldr	r3, [pc, #644]	; (800192c <StartDefaultTask+0x2ac>)
 80016a8:	67fb      	str	r3, [r7, #124]	; 0x7c
	  freeRTOS_allocator.deallocate = microros_deallocate;
 80016aa:	4ba1      	ldr	r3, [pc, #644]	; (8001930 <StartDefaultTask+0x2b0>)
 80016ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  freeRTOS_allocator.reallocate = microros_reallocate;
 80016b0:	4ba0      	ldr	r3, [pc, #640]	; (8001934 <StartDefaultTask+0x2b4>)
 80016b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80016b6:	4ba0      	ldr	r3, [pc, #640]	; (8001938 <StartDefaultTask+0x2b8>)
 80016b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80016bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016c0:	4618      	mov	r0, r3
 80016c2:	f007 fe81 	bl	80093c8 <rcutils_set_default_allocator>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f083 0301 	eor.w	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d004      	beq.n	80016dc <StartDefaultTask+0x5c>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 80016d2:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80016d6:	4899      	ldr	r0, [pc, #612]	; (800193c <StartDefaultTask+0x2bc>)
 80016d8:	f010 fde8 	bl	80122ac <iprintf>
	  std_msgs__msg__Int32 msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 80016dc:	463b      	mov	r3, r7
 80016de:	4618      	mov	r0, r3
 80016e0:	f007 fe90 	bl	8009404 <rcutils_get_default_allocator>
 80016e4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80016e8:	463d      	mov	r5, r7
 80016ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ee:	682b      	ldr	r3, [r5, #0]
 80016f0:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 80016f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	f007 fd93 	bl	8009228 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001702:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001706:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800170a:	4a8d      	ldr	r2, [pc, #564]	; (8001940 <StartDefaultTask+0x2c0>)
 800170c:	498d      	ldr	r1, [pc, #564]	; (8001944 <StartDefaultTask+0x2c4>)
 800170e:	f007 fdd5 	bl	80092bc <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 8001712:	f008 fb4f 	bl	8009db4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001716:	4602      	mov	r2, r0
 8001718:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800171c:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001720:	4b89      	ldr	r3, [pc, #548]	; (8001948 <StartDefaultTask+0x2c8>)
 8001722:	f007 fe07 	bl	8009334 <rclc_publisher_init_default>
	    &publisher,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    "cubemx_publisher");

	  msg.data = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	677b      	str	r3, [r7, #116]	; 0x74
		  //-----------------------------------------------------
		  //----------SAMPLING-----------------------------------
		  //-----------------------------------------------------
		  //if(sampleCounter < SAMPLES_PER_FRAME)
		  //{
		  if(flagNewSample == 1)
 800172a:	4b88      	ldr	r3, [pc, #544]	; (800194c <StartDefaultTask+0x2cc>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d113      	bne.n	800175a <StartDefaultTask+0xda>
		  {
			  //if(flagOddSample == 0)
			  //{
				  data[sampleCounter] = AD_RES;
 8001732:	4b87      	ldr	r3, [pc, #540]	; (8001950 <StartDefaultTask+0x2d0>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	4b86      	ldr	r3, [pc, #536]	; (8001954 <StartDefaultTask+0x2d4>)
 800173a:	8819      	ldrh	r1, [r3, #0]
 800173c:	4b86      	ldr	r3, [pc, #536]	; (8001958 <StartDefaultTask+0x2d8>)
 800173e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				  //flagOddSample = 1;
				  sampleCounter ++;
 8001742:	4b83      	ldr	r3, [pc, #524]	; (8001950 <StartDefaultTask+0x2d0>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	b29a      	uxth	r2, r3
 800174a:	4b81      	ldr	r3, [pc, #516]	; (8001950 <StartDefaultTask+0x2d0>)
 800174c:	801a      	strh	r2, [r3, #0]
				  flagNewData = 1;
 800174e:	4b83      	ldr	r3, [pc, #524]	; (800195c <StartDefaultTask+0x2dc>)
 8001750:	2201      	movs	r2, #1
 8001752:	701a      	strb	r2, [r3, #0]
				  data[sampleCounter] = (data[sampleCounter] + AD_RES)/2;
				  flagOddSample = 0;
				  sampleCounter ++;
				  flagNewData = 1;
			  }*/
			  flagNewSample = 0;
 8001754:	4b7d      	ldr	r3, [pc, #500]	; (800194c <StartDefaultTask+0x2cc>)
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
		  //}

		  //-----------------------------------------------------
		  //----------FINDING-PEAKS------------------------------
		  //-----------------------------------------------------
		  if(flagNewData == 1)
 800175a:	4b80      	ldr	r3, [pc, #512]	; (800195c <StartDefaultTask+0x2dc>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d164      	bne.n	800182c <StartDefaultTask+0x1ac>
		  {
			  flagNewData = 0;
 8001762:	4b7e      	ldr	r3, [pc, #504]	; (800195c <StartDefaultTask+0x2dc>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
			  if(findPeakFlag == 0)
 8001768:	4b7d      	ldr	r3, [pc, #500]	; (8001960 <StartDefaultTask+0x2e0>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d12f      	bne.n	80017d0 <StartDefaultTask+0x150>
			  {
				  if(data[sampleCounter-1] >= MIN_PEAK && data[sampleCounter-1] >= minPeak)
 8001770:	4b77      	ldr	r3, [pc, #476]	; (8001950 <StartDefaultTask+0x2d0>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	3b01      	subs	r3, #1
 8001776:	4a78      	ldr	r2, [pc, #480]	; (8001958 <StartDefaultTask+0x2d8>)
 8001778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800177c:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001780:	d354      	bcc.n	800182c <StartDefaultTask+0x1ac>
 8001782:	4b73      	ldr	r3, [pc, #460]	; (8001950 <StartDefaultTask+0x2d0>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	3b01      	subs	r3, #1
 8001788:	4a73      	ldr	r2, [pc, #460]	; (8001958 <StartDefaultTask+0x2d8>)
 800178a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800178e:	4b75      	ldr	r3, [pc, #468]	; (8001964 <StartDefaultTask+0x2e4>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d34a      	bcc.n	800182c <StartDefaultTask+0x1ac>
				  {
					  findPeakFlag = 1;
 8001796:	4b72      	ldr	r3, [pc, #456]	; (8001960 <StartDefaultTask+0x2e0>)
 8001798:	2201      	movs	r2, #1
 800179a:	801a      	strh	r2, [r3, #0]
					  dataPeak[peakCounter] = data[sampleCounter-1];
 800179c:	4b6c      	ldr	r3, [pc, #432]	; (8001950 <StartDefaultTask+0x2d0>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	4a71      	ldr	r2, [pc, #452]	; (8001968 <StartDefaultTask+0x2e8>)
 80017a4:	8812      	ldrh	r2, [r2, #0]
 80017a6:	4611      	mov	r1, r2
 80017a8:	4a6b      	ldr	r2, [pc, #428]	; (8001958 <StartDefaultTask+0x2d8>)
 80017aa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80017ae:	4b6f      	ldr	r3, [pc, #444]	; (800196c <StartDefaultTask+0x2ec>)
 80017b0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
					  timePeak[peakCounter] = sampleCounter - 1 + timeOffset;
 80017b4:	4b66      	ldr	r3, [pc, #408]	; (8001950 <StartDefaultTask+0x2d0>)
 80017b6:	881a      	ldrh	r2, [r3, #0]
 80017b8:	4b6d      	ldr	r3, [pc, #436]	; (8001970 <StartDefaultTask+0x2f0>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	4413      	add	r3, r2
 80017be:	b29b      	uxth	r3, r3
 80017c0:	4a69      	ldr	r2, [pc, #420]	; (8001968 <StartDefaultTask+0x2e8>)
 80017c2:	8812      	ldrh	r2, [r2, #0]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b299      	uxth	r1, r3
 80017c8:	4b6a      	ldr	r3, [pc, #424]	; (8001974 <StartDefaultTask+0x2f4>)
 80017ca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80017ce:	e02d      	b.n	800182c <StartDefaultTask+0x1ac>
				  }
			  }
			  else
			  {
				  if(data[sampleCounter-1] >= dataPeak[peakCounter]) //care for >= when max voltage
 80017d0:	4b5f      	ldr	r3, [pc, #380]	; (8001950 <StartDefaultTask+0x2d0>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	4a60      	ldr	r2, [pc, #384]	; (8001958 <StartDefaultTask+0x2d8>)
 80017d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80017dc:	4b62      	ldr	r3, [pc, #392]	; (8001968 <StartDefaultTask+0x2e8>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	4b62      	ldr	r3, [pc, #392]	; (800196c <StartDefaultTask+0x2ec>)
 80017e4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d319      	bcc.n	8001820 <StartDefaultTask+0x1a0>
				  {
					  dataPeak[peakCounter] = data[sampleCounter-1];
 80017ec:	4b58      	ldr	r3, [pc, #352]	; (8001950 <StartDefaultTask+0x2d0>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	4a5d      	ldr	r2, [pc, #372]	; (8001968 <StartDefaultTask+0x2e8>)
 80017f4:	8812      	ldrh	r2, [r2, #0]
 80017f6:	4611      	mov	r1, r2
 80017f8:	4a57      	ldr	r2, [pc, #348]	; (8001958 <StartDefaultTask+0x2d8>)
 80017fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80017fe:	4b5b      	ldr	r3, [pc, #364]	; (800196c <StartDefaultTask+0x2ec>)
 8001800:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
					  timePeak[peakCounter] = sampleCounter -1 + timeOffset;
 8001804:	4b52      	ldr	r3, [pc, #328]	; (8001950 <StartDefaultTask+0x2d0>)
 8001806:	881a      	ldrh	r2, [r3, #0]
 8001808:	4b59      	ldr	r3, [pc, #356]	; (8001970 <StartDefaultTask+0x2f0>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	4413      	add	r3, r2
 800180e:	b29b      	uxth	r3, r3
 8001810:	4a55      	ldr	r2, [pc, #340]	; (8001968 <StartDefaultTask+0x2e8>)
 8001812:	8812      	ldrh	r2, [r2, #0]
 8001814:	3b01      	subs	r3, #1
 8001816:	b299      	uxth	r1, r3
 8001818:	4b56      	ldr	r3, [pc, #344]	; (8001974 <StartDefaultTask+0x2f4>)
 800181a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800181e:	e005      	b.n	800182c <StartDefaultTask+0x1ac>
				  }
				  else
				  {
					  findPeakCounter ++;
 8001820:	4b55      	ldr	r3, [pc, #340]	; (8001978 <StartDefaultTask+0x2f8>)
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	b29a      	uxth	r2, r3
 8001828:	4b53      	ldr	r3, [pc, #332]	; (8001978 <StartDefaultTask+0x2f8>)
 800182a:	801a      	strh	r2, [r3, #0]
				  }
			  }

		  }

		  if(findPeakCounter == MAX_PEAK_LENGTH)
 800182c:	4b52      	ldr	r3, [pc, #328]	; (8001978 <StartDefaultTask+0x2f8>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	2b64      	cmp	r3, #100	; 0x64
 8001832:	d133      	bne.n	800189c <StartDefaultTask+0x21c>
		  {
			  peakCounter ++;
 8001834:	4b4c      	ldr	r3, [pc, #304]	; (8001968 <StartDefaultTask+0x2e8>)
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	3301      	adds	r3, #1
 800183a:	b29a      	uxth	r2, r3
 800183c:	4b4a      	ldr	r3, [pc, #296]	; (8001968 <StartDefaultTask+0x2e8>)
 800183e:	801a      	strh	r2, [r3, #0]
			  findPeakFlag = 0;
 8001840:	4b47      	ldr	r3, [pc, #284]	; (8001960 <StartDefaultTask+0x2e0>)
 8001842:	2200      	movs	r2, #0
 8001844:	801a      	strh	r2, [r3, #0]
			  findPeakCounter = 0;
 8001846:	4b4c      	ldr	r3, [pc, #304]	; (8001978 <StartDefaultTask+0x2f8>)
 8001848:	2200      	movs	r2, #0
 800184a:	801a      	strh	r2, [r3, #0]
			  if(peakCounter == MAX_PEAKS)
 800184c:	4b46      	ldr	r3, [pc, #280]	; (8001968 <StartDefaultTask+0x2e8>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	2b1e      	cmp	r3, #30
 8001852:	d120      	bne.n	8001896 <StartDefaultTask+0x216>
			  {
				  peakCounter = 0;
 8001854:	4b44      	ldr	r3, [pc, #272]	; (8001968 <StartDefaultTask+0x2e8>)
 8001856:	2200      	movs	r2, #0
 8001858:	801a      	strh	r2, [r3, #0]
				  for(int i = 0; i < MAX_PEAKS; i ++)
 800185a:	2300      	movs	r3, #0
 800185c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001860:	e010      	b.n	8001884 <StartDefaultTask+0x204>
				  {
					  dataPeak[i] = 0;
 8001862:	4a42      	ldr	r2, [pc, #264]	; (800196c <StartDefaultTask+0x2ec>)
 8001864:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001868:	2100      	movs	r1, #0
 800186a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					  timePeak[i] = 0;
 800186e:	4a41      	ldr	r2, [pc, #260]	; (8001974 <StartDefaultTask+0x2f4>)
 8001870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001874:	2100      	movs	r1, #0
 8001876:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  for(int i = 0; i < MAX_PEAKS; i ++)
 800187a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800187e:	3301      	adds	r3, #1
 8001880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001888:	2b1d      	cmp	r3, #29
 800188a:	ddea      	ble.n	8001862 <StartDefaultTask+0x1e2>
				  }
				  sampleCounter = SAMPLES_PER_FRAME;
 800188c:	4b30      	ldr	r3, [pc, #192]	; (8001950 <StartDefaultTask+0x2d0>)
 800188e:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001892:	801a      	strh	r2, [r3, #0]
 8001894:	e002      	b.n	800189c <StartDefaultTask+0x21c>
			  }

			  else
			  {
				  flagNewPeak = 1;
 8001896:	4b39      	ldr	r3, [pc, #228]	; (800197c <StartDefaultTask+0x2fc>)
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]


		  //-----------------------------------------------------
		  //----------FINDING-PD---------------------------------
		  //-----------------------------------------------------
		  if(flagNewPeak == 1 && peakCounter > 1)
 800189c:	4b37      	ldr	r3, [pc, #220]	; (800197c <StartDefaultTask+0x2fc>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	f040 80a8 	bne.w	80019f6 <StartDefaultTask+0x376>
 80018a6:	4b30      	ldr	r3, [pc, #192]	; (8001968 <StartDefaultTask+0x2e8>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	f240 80a3 	bls.w	80019f6 <StartDefaultTask+0x376>
		  {
			  flagNewPeak = 0;
 80018b0:	4b32      	ldr	r3, [pc, #200]	; (800197c <StartDefaultTask+0x2fc>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i < peakCounter; i++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80018bc:	e093      	b.n	80019e6 <StartDefaultTask+0x366>
			  {
				  peakDiff = timePeak[peakCounter-1] - timePeak[peakCounter-1-i];
 80018be:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <StartDefaultTask+0x2e8>)
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	4a2b      	ldr	r2, [pc, #172]	; (8001974 <StartDefaultTask+0x2f4>)
 80018c6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80018ca:	4b27      	ldr	r3, [pc, #156]	; (8001968 <StartDefaultTask+0x2e8>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	1e59      	subs	r1, r3, #1
 80018d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018d4:	1acb      	subs	r3, r1, r3
 80018d6:	4927      	ldr	r1, [pc, #156]	; (8001974 <StartDefaultTask+0x2f4>)
 80018d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4b27      	ldr	r3, [pc, #156]	; (8001980 <StartDefaultTask+0x300>)
 80018e2:	801a      	strh	r2, [r3, #0]
				  if(peakDiff > 760)
 80018e4:	4b26      	ldr	r3, [pc, #152]	; (8001980 <StartDefaultTask+0x300>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 80018ec:	d976      	bls.n	80019dc <StartDefaultTask+0x35c>
				  {
					  if(peakDiff <= 840)
 80018ee:	4b24      	ldr	r3, [pc, #144]	; (8001980 <StartDefaultTask+0x300>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 80018f6:	d849      	bhi.n	800198c <StartDefaultTask+0x30c>
					  {
						  if(consPeakCounter < MIN_CONSECUTIVE_PEAKS)
 80018f8:	4b22      	ldr	r3, [pc, #136]	; (8001984 <StartDefaultTask+0x304>)
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	2b05      	cmp	r3, #5
 80018fe:	d806      	bhi.n	800190e <StartDefaultTask+0x28e>
						  {
							  consPeakCounter ++;
 8001900:	4b20      	ldr	r3, [pc, #128]	; (8001984 <StartDefaultTask+0x304>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	b29a      	uxth	r2, r3
 8001908:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <StartDefaultTask+0x304>)
 800190a:	801a      	strh	r2, [r3, #0]
						  else
						  {
							 //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
							  flagPD = 1;
						  }
						  break;
 800190c:	e073      	b.n	80019f6 <StartDefaultTask+0x376>
							  flagPD = 1;
 800190e:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <StartDefaultTask+0x308>)
 8001910:	2201      	movs	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
						  break;
 8001914:	e06f      	b.n	80019f6 <StartDefaultTask+0x376>
 8001916:	bf00      	nop
 8001918:	080011a1 	.word	0x080011a1
 800191c:	08001139 	.word	0x08001139
 8001920:	08001119 	.word	0x08001119
 8001924:	080010ed 	.word	0x080010ed
 8001928:	200045dc 	.word	0x200045dc
 800192c:	08001dad 	.word	0x08001dad
 8001930:	08001df1 	.word	0x08001df1
 8001934:	08001e29 	.word	0x08001e29
 8001938:	08001e95 	.word	0x08001e95
 800193c:	08013484 	.word	0x08013484
 8001940:	080134ac 	.word	0x080134ac
 8001944:	080134b0 	.word	0x080134b0
 8001948:	080134bc 	.word	0x080134bc
 800194c:	20008ff8 	.word	0x20008ff8
 8001950:	20008fec 	.word	0x20008fec
 8001954:	20007670 	.word	0x20007670
 8001958:	20007674 	.word	0x20007674
 800195c:	20008ff9 	.word	0x20008ff9
 8001960:	20008ff6 	.word	0x20008ff6
 8001964:	20009004 	.word	0x20009004
 8001968:	20008fee 	.word	0x20008fee
 800196c:	20008f74 	.word	0x20008f74
 8001970:	20009000 	.word	0x20009000
 8001974:	20008fb0 	.word	0x20008fb0
 8001978:	20008ff2 	.word	0x20008ff2
 800197c:	20008ffa 	.word	0x20008ffa
 8001980:	20008ffe 	.word	0x20008ffe
 8001984:	20008ff4 	.word	0x20008ff4
 8001988:	20008ffb 	.word	0x20008ffb
					  }
					  else if(peakDiff > 1520)
 800198c:	4b81      	ldr	r3, [pc, #516]	; (8001b94 <StartDefaultTask+0x514>)
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8001994:	d922      	bls.n	80019dc <StartDefaultTask+0x35c>
					  {
						  if(peakDiff <= 1680)
 8001996:	4b7f      	ldr	r3, [pc, #508]	; (8001b94 <StartDefaultTask+0x514>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	f5b3 6fd2 	cmp.w	r3, #1680	; 0x690
 800199e:	d80e      	bhi.n	80019be <StartDefaultTask+0x33e>
						  {
							  if(consPeakCounter < MIN_CONSECUTIVE_PEAKS)
 80019a0:	4b7d      	ldr	r3, [pc, #500]	; (8001b98 <StartDefaultTask+0x518>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	2b05      	cmp	r3, #5
 80019a6:	d806      	bhi.n	80019b6 <StartDefaultTask+0x336>
							  {
								  consPeakCounter ++;
 80019a8:	4b7b      	ldr	r3, [pc, #492]	; (8001b98 <StartDefaultTask+0x518>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b79      	ldr	r3, [pc, #484]	; (8001b98 <StartDefaultTask+0x518>)
 80019b2:	801a      	strh	r2, [r3, #0]
							  else
							  {
								  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
								  flagPD = 1;
							  }
							  break;
 80019b4:	e01f      	b.n	80019f6 <StartDefaultTask+0x376>
								  flagPD = 1;
 80019b6:	4b79      	ldr	r3, [pc, #484]	; (8001b9c <StartDefaultTask+0x51c>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
							  break;
 80019bc:	e01b      	b.n	80019f6 <StartDefaultTask+0x376>
						  }
						  else
						  {
							  if(consPeakCounter != 0)
 80019be:	4b76      	ldr	r3, [pc, #472]	; (8001b98 <StartDefaultTask+0x518>)
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d006      	beq.n	80019d4 <StartDefaultTask+0x354>
							  {
								  consPeakCounter --;
 80019c6:	4b74      	ldr	r3, [pc, #464]	; (8001b98 <StartDefaultTask+0x518>)
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	4b72      	ldr	r3, [pc, #456]	; (8001b98 <StartDefaultTask+0x518>)
 80019d0:	801a      	strh	r2, [r3, #0]
							  else
							  {
								  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
								  flagPD = 0;
							  }
							  break;
 80019d2:	e010      	b.n	80019f6 <StartDefaultTask+0x376>
								  flagPD = 0;
 80019d4:	4b71      	ldr	r3, [pc, #452]	; (8001b9c <StartDefaultTask+0x51c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
							  break;
 80019da:	e00c      	b.n	80019f6 <StartDefaultTask+0x376>
			  for(int i = 0; i < peakCounter; i++)
 80019dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019e0:	3301      	adds	r3, #1
 80019e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80019e6:	4b6e      	ldr	r3, [pc, #440]	; (8001ba0 <StartDefaultTask+0x520>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019f0:	4293      	cmp	r3, r2
 80019f2:	f6ff af64 	blt.w	80018be <StartDefaultTask+0x23e>


		  //-----------------------------------------------------
		  //----------END-OF-FRAME-------------------------------
		  //-----------------------------------------------------
		  if(sampleCounter == SAMPLES_PER_FRAME)
 80019f6:	4b6b      	ldr	r3, [pc, #428]	; (8001ba4 <StartDefaultTask+0x524>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 80019fe:	f040 812c 	bne.w	8001c5a <StartDefaultTask+0x5da>
		  {
			  if(findPeakFlag == 1)
 8001a02:	4b69      	ldr	r3, [pc, #420]	; (8001ba8 <StartDefaultTask+0x528>)
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d105      	bne.n	8001a16 <StartDefaultTask+0x396>
			  {
				  peakCounter ++;
 8001a0a:	4b65      	ldr	r3, [pc, #404]	; (8001ba0 <StartDefaultTask+0x520>)
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <StartDefaultTask+0x520>)
 8001a14:	801a      	strh	r2, [r3, #0]
			  }


			  peakCounterEnd = peakCounter;
 8001a16:	4b62      	ldr	r3, [pc, #392]	; (8001ba0 <StartDefaultTask+0x520>)
 8001a18:	881a      	ldrh	r2, [r3, #0]
 8001a1a:	4b64      	ldr	r3, [pc, #400]	; (8001bac <StartDefaultTask+0x52c>)
 8001a1c:	801a      	strh	r2, [r3, #0]
			  for(int i = 0; i < peakCounterEnd; i++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001a24:	e016      	b.n	8001a54 <StartDefaultTask+0x3d4>
			  {
				  if(timePeak[i] <= SAMPLES_PER_HALF_FRAME + timeOffset)
 8001a26:	4a62      	ldr	r2, [pc, #392]	; (8001bb0 <StartDefaultTask+0x530>)
 8001a28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b60      	ldr	r3, [pc, #384]	; (8001bb4 <StartDefaultTask+0x534>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	dc12      	bgt.n	8001a64 <StartDefaultTask+0x3e4>
				  {
					  //timePeak[i] = 0;
					  //dataPeak[i] = 0;
					  peakCounter--;
 8001a3e:	4b58      	ldr	r3, [pc, #352]	; (8001ba0 <StartDefaultTask+0x520>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	4b56      	ldr	r3, [pc, #344]	; (8001ba0 <StartDefaultTask+0x520>)
 8001a48:	801a      	strh	r2, [r3, #0]
			  for(int i = 0; i < peakCounterEnd; i++)
 8001a4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001a54:	4b55      	ldr	r3, [pc, #340]	; (8001bac <StartDefaultTask+0x52c>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	dbe1      	blt.n	8001a26 <StartDefaultTask+0x3a6>
 8001a62:	e000      	b.n	8001a66 <StartDefaultTask+0x3e6>
						  dataPeak[i] = 0;
						  peakCounter--;
					  }*/
					  //else
					  //{
					  break;
 8001a64:	bf00      	nop
					  //}
				  }
			  }

			  if(peakCounter != 0)
 8001a66:	4b4e      	ldr	r3, [pc, #312]	; (8001ba0 <StartDefaultTask+0x520>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d067      	beq.n	8001b3e <StartDefaultTask+0x4be>
			  {
				  timeOffsetOld = timeOffset;
 8001a6e:	4b51      	ldr	r3, [pc, #324]	; (8001bb4 <StartDefaultTask+0x534>)
 8001a70:	881a      	ldrh	r2, [r3, #0]
 8001a72:	4b51      	ldr	r3, [pc, #324]	; (8001bb8 <StartDefaultTask+0x538>)
 8001a74:	801a      	strh	r2, [r3, #0]
				  timeOffset = timeOffset + SAMPLES_PER_FRAME - timePeak[peakCounterEnd - peakCounter];
 8001a76:	4b4f      	ldr	r3, [pc, #316]	; (8001bb4 <StartDefaultTask+0x534>)
 8001a78:	881a      	ldrh	r2, [r3, #0]
 8001a7a:	4b4c      	ldr	r3, [pc, #304]	; (8001bac <StartDefaultTask+0x52c>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <StartDefaultTask+0x520>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	1acb      	subs	r3, r1, r3
 8001a86:	494a      	ldr	r1, [pc, #296]	; (8001bb0 <StartDefaultTask+0x530>)
 8001a88:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <StartDefaultTask+0x534>)
 8001a98:	801a      	strh	r2, [r3, #0]
				  for(int i = 0; i < peakCounterEnd; i ++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001aa0:	e045      	b.n	8001b2e <StartDefaultTask+0x4ae>
				  {
					  if(i>=peakCounter)
 8001aa2:	4b3f      	ldr	r3, [pc, #252]	; (8001ba0 <StartDefaultTask+0x520>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001aac:	4293      	cmp	r3, r2
 8001aae:	db0c      	blt.n	8001aca <StartDefaultTask+0x44a>
					  {
						  dataPeak[i] = 0;
 8001ab0:	4a42      	ldr	r2, [pc, #264]	; (8001bbc <StartDefaultTask+0x53c>)
 8001ab2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						  timePeak[i] = 0;
 8001abc:	4a3c      	ldr	r2, [pc, #240]	; (8001bb0 <StartDefaultTask+0x530>)
 8001abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001ac8:	e02c      	b.n	8001b24 <StartDefaultTask+0x4a4>
					  }
					  else
					  {
						  dataPeak[i] = dataPeak[peakCounterEnd - peakCounter + i];
 8001aca:	4b38      	ldr	r3, [pc, #224]	; (8001bac <StartDefaultTask+0x52c>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <StartDefaultTask+0x520>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	1ad2      	subs	r2, r2, r3
 8001ad6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ada:	4413      	add	r3, r2
 8001adc:	4a37      	ldr	r2, [pc, #220]	; (8001bbc <StartDefaultTask+0x53c>)
 8001ade:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001ae2:	4a36      	ldr	r2, [pc, #216]	; (8001bbc <StartDefaultTask+0x53c>)
 8001ae4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ae8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						  timePeak[i] = timePeak[peakCounterEnd - peakCounter + i] + timeOffset - SAMPLES_PER_FRAME - timeOffsetOld;
 8001aec:	4b2f      	ldr	r3, [pc, #188]	; (8001bac <StartDefaultTask+0x52c>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <StartDefaultTask+0x520>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	1ad2      	subs	r2, r2, r3
 8001af8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001afc:	4413      	add	r3, r2
 8001afe:	4a2c      	ldr	r2, [pc, #176]	; (8001bb0 <StartDefaultTask+0x530>)
 8001b00:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b04:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <StartDefaultTask+0x534>)
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	4413      	add	r3, r2
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <StartDefaultTask+0x538>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	f5a3 6348 	sub.w	r3, r3, #3200	; 0xc80
 8001b18:	b299      	uxth	r1, r3
 8001b1a:	4a25      	ldr	r2, [pc, #148]	; (8001bb0 <StartDefaultTask+0x530>)
 8001b1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  for(int i = 0; i < peakCounterEnd; i ++)
 8001b24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b28:	3301      	adds	r3, #1
 8001b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <StartDefaultTask+0x52c>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	dbb2      	blt.n	8001aa2 <StartDefaultTask+0x422>
 8001b3c:	e022      	b.n	8001b84 <StartDefaultTask+0x504>
					  }
				  }
			  }
			  else
			  {
				  for(int i = 0; i < peakCounterEnd; i ++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b44:	e010      	b.n	8001b68 <StartDefaultTask+0x4e8>
				  {
					  dataPeak[i] = 0;
 8001b46:	4a1d      	ldr	r2, [pc, #116]	; (8001bbc <StartDefaultTask+0x53c>)
 8001b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					  timePeak[i] = 0;
 8001b52:	4a17      	ldr	r2, [pc, #92]	; (8001bb0 <StartDefaultTask+0x530>)
 8001b54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b58:	2100      	movs	r1, #0
 8001b5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  for(int i = 0; i < peakCounterEnd; i ++)
 8001b5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b62:	3301      	adds	r3, #1
 8001b64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b68:	4b10      	ldr	r3, [pc, #64]	; (8001bac <StartDefaultTask+0x52c>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b72:	4293      	cmp	r3, r2
 8001b74:	dbe7      	blt.n	8001b46 <StartDefaultTask+0x4c6>
				  }
				  timeOffset = 0;
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <StartDefaultTask+0x534>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	801a      	strh	r2, [r3, #0]
				  timeOffsetOld = timeOffset;
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <StartDefaultTask+0x534>)
 8001b7e:	881a      	ldrh	r2, [r3, #0]
 8001b80:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <StartDefaultTask+0x538>)
 8001b82:	801a      	strh	r2, [r3, #0]
			  }

			  maxPeakFrame = 0;
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <StartDefaultTask+0x540>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	801a      	strh	r2, [r3, #0]
			  for(int i = 0; i < peakCounter; i++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001b90:	e02d      	b.n	8001bee <StartDefaultTask+0x56e>
 8001b92:	bf00      	nop
 8001b94:	20008ffe 	.word	0x20008ffe
 8001b98:	20008ff4 	.word	0x20008ff4
 8001b9c:	20008ffb 	.word	0x20008ffb
 8001ba0:	20008fee 	.word	0x20008fee
 8001ba4:	20008fec 	.word	0x20008fec
 8001ba8:	20008ff6 	.word	0x20008ff6
 8001bac:	20008ff0 	.word	0x20008ff0
 8001bb0:	20008fb0 	.word	0x20008fb0
 8001bb4:	20009000 	.word	0x20009000
 8001bb8:	20009002 	.word	0x20009002
 8001bbc:	20008f74 	.word	0x20008f74
 8001bc0:	20009006 	.word	0x20009006
			  {
				  if(maxPeakFrame < dataPeak[i])
 8001bc4:	4a60      	ldr	r2, [pc, #384]	; (8001d48 <StartDefaultTask+0x6c8>)
 8001bc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001bce:	4b5f      	ldr	r3, [pc, #380]	; (8001d4c <StartDefaultTask+0x6cc>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d906      	bls.n	8001be4 <StartDefaultTask+0x564>
				  {
					  maxPeakFrame = dataPeak[i];
 8001bd6:	4a5c      	ldr	r2, [pc, #368]	; (8001d48 <StartDefaultTask+0x6c8>)
 8001bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bdc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001be0:	4b5a      	ldr	r3, [pc, #360]	; (8001d4c <StartDefaultTask+0x6cc>)
 8001be2:	801a      	strh	r2, [r3, #0]
			  for(int i = 0; i < peakCounter; i++)
 8001be4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001be8:	3301      	adds	r3, #1
 8001bea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001bee:	4b58      	ldr	r3, [pc, #352]	; (8001d50 <StartDefaultTask+0x6d0>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	dbe3      	blt.n	8001bc4 <StartDefaultTask+0x544>
				  }
			  }
			  minPeak = 0.7 * maxPeakFrame;
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <StartDefaultTask+0x6cc>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fdd1 	bl	80007a8 <__aeabi_i2d>
 8001c06:	a34e      	add	r3, pc, #312	; (adr r3, 8001d40 <StartDefaultTask+0x6c0>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	f7fe fb50 	bl	80002b0 <__aeabi_dmul>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	f7fe fe30 	bl	800087c <__aeabi_d2uiz>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	4b4c      	ldr	r3, [pc, #304]	; (8001d54 <StartDefaultTask+0x6d4>)
 8001c22:	801a      	strh	r2, [r3, #0]


			  if(findPeakFlag == 1)
 8001c24:	4b4c      	ldr	r3, [pc, #304]	; (8001d58 <StartDefaultTask+0x6d8>)
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d105      	bne.n	8001c38 <StartDefaultTask+0x5b8>
			  {
				  peakCounter --;
 8001c2c:	4b48      	ldr	r3, [pc, #288]	; (8001d50 <StartDefaultTask+0x6d0>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	4b46      	ldr	r3, [pc, #280]	; (8001d50 <StartDefaultTask+0x6d0>)
 8001c36:	801a      	strh	r2, [r3, #0]
			  }

			  sampleCounter = 0;
 8001c38:	4b48      	ldr	r3, [pc, #288]	; (8001d5c <StartDefaultTask+0x6dc>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	801a      	strh	r2, [r3, #0]

			  if(consPeakCounter != 0)
 8001c3e:	4b48      	ldr	r3, [pc, #288]	; (8001d60 <StartDefaultTask+0x6e0>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <StartDefaultTask+0x5d4>
			  {
				  consPeakCounter --;
 8001c46:	4b46      	ldr	r3, [pc, #280]	; (8001d60 <StartDefaultTask+0x6e0>)
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	4b44      	ldr	r3, [pc, #272]	; (8001d60 <StartDefaultTask+0x6e0>)
 8001c50:	801a      	strh	r2, [r3, #0]
 8001c52:	e002      	b.n	8001c5a <StartDefaultTask+0x5da>
			  }
			  else
			  {
				  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
				  flagPD = 0;
 8001c54:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <StartDefaultTask+0x6e4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]


		  //-----------------------------------------------------
		  //-------------REPORTING-------------------------------
		  //-----------------------------------------------------
		  if(sampleCounter == 1)
 8001c5a:	4b40      	ldr	r3, [pc, #256]	; (8001d5c <StartDefaultTask+0x6dc>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	f47f ad63 	bne.w	800172a <StartDefaultTask+0xaa>
		  {
			  if(flagPD == 1)
 8001c64:	4b3f      	ldr	r3, [pc, #252]	; (8001d64 <StartDefaultTask+0x6e4>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d10a      	bne.n	8001c82 <StartDefaultTask+0x602>
			  {
				  if(countPD != 10)
 8001c6c:	4b3e      	ldr	r3, [pc, #248]	; (8001d68 <StartDefaultTask+0x6e8>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b0a      	cmp	r3, #10
 8001c72:	d010      	beq.n	8001c96 <StartDefaultTask+0x616>
				  {
					  countPD ++;
 8001c74:	4b3c      	ldr	r3, [pc, #240]	; (8001d68 <StartDefaultTask+0x6e8>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <StartDefaultTask+0x6e8>)
 8001c7e:	701a      	strb	r2, [r3, #0]
 8001c80:	e009      	b.n	8001c96 <StartDefaultTask+0x616>
				  }

			  }
			  else
			  {
				  if(countPD !=0)
 8001c82:	4b39      	ldr	r3, [pc, #228]	; (8001d68 <StartDefaultTask+0x6e8>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <StartDefaultTask+0x616>
				  {
					  countPD --;
 8001c8a:	4b37      	ldr	r3, [pc, #220]	; (8001d68 <StartDefaultTask+0x6e8>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <StartDefaultTask+0x6e8>)
 8001c94:	701a      	strb	r2, [r3, #0]
				  }

			  }


			  if(countPD > 5)
 8001c96:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <StartDefaultTask+0x6e8>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b05      	cmp	r3, #5
 8001c9c:	d934      	bls.n	8001d08 <StartDefaultTask+0x688>
			  {
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	2120      	movs	r1, #32
 8001ca2:	4832      	ldr	r0, [pc, #200]	; (8001d6c <StartDefaultTask+0x6ec>)
 8001ca4:	f001 fffc 	bl	8003ca0 <HAL_GPIO_WritePin>
				  //sprintf(MSG, "%d\r\n", maxPeakFrame);
				  //HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 20);
				  if (maxPeakFrame >= 1500)
 8001ca8:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <StartDefaultTask+0x6cc>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	f240 52db 	movw	r2, #1499	; 0x5db
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d90c      	bls.n	8001cce <StartDefaultTask+0x64e>
				  {
					  msg.data = 22 + (maxPeakFrame-1500)/250;
 8001cb4:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <StartDefaultTask+0x6cc>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001cbc:	4a2c      	ldr	r2, [pc, #176]	; (8001d70 <StartDefaultTask+0x6f0>)
 8001cbe:	fb82 1203 	smull	r1, r2, r2, r3
 8001cc2:	1112      	asrs	r2, r2, #4
 8001cc4:	17db      	asrs	r3, r3, #31
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	3316      	adds	r3, #22
 8001cca:	677b      	str	r3, [r7, #116]	; 0x74
 8001ccc:	e007      	b.n	8001cde <StartDefaultTask+0x65e>
				  }
				  else
				  {
					  msg.data = maxPeakFrame/69;
 8001cce:	4b1f      	ldr	r3, [pc, #124]	; (8001d4c <StartDefaultTask+0x6cc>)
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	4a28      	ldr	r2, [pc, #160]	; (8001d74 <StartDefaultTask+0x6f4>)
 8001cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd8:	095b      	lsrs	r3, r3, #5
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	677b      	str	r3, [r7, #116]	; 0x74
				  }
				  //msg.data = maxPeakFrame;
				  rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 8001cde:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001ce2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f007 fa79 	bl	80091e0 <rcl_publish>
 8001cee:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
				  if (ret != RCL_RET_OK)
 8001cf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f43f ad17 	beq.w	800172a <StartDefaultTask+0xaa>
				  {
				    printf("Error publishing (line %d)\n", __LINE__);
 8001cfc:	f240 3121 	movw	r1, #801	; 0x321
 8001d00:	481d      	ldr	r0, [pc, #116]	; (8001d78 <StartDefaultTask+0x6f8>)
 8001d02:	f010 fad3 	bl	80122ac <iprintf>
 8001d06:	e510      	b.n	800172a <StartDefaultTask+0xaa>


			  }
			  else
			  {
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2120      	movs	r1, #32
 8001d0c:	4817      	ldr	r0, [pc, #92]	; (8001d6c <StartDefaultTask+0x6ec>)
 8001d0e:	f001 ffc7 	bl	8003ca0 <HAL_GPIO_WritePin>
				  //sprintf(MSG, "%d\r\n", 1);
				  //HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 20);
				  msg.data = 1;
 8001d12:	2301      	movs	r3, #1
 8001d14:	677b      	str	r3, [r7, #116]	; 0x74
				  rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 8001d16:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001d1a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d1e:	2200      	movs	r2, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f007 fa5d 	bl	80091e0 <rcl_publish>
 8001d26:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
				  if (ret != RCL_RET_OK)
 8001d2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f43f acfb 	beq.w	800172a <StartDefaultTask+0xaa>
				  {
				    printf("Error publishing (line %d)\n", __LINE__);
 8001d34:	f240 312f 	movw	r1, #815	; 0x32f
 8001d38:	480f      	ldr	r0, [pc, #60]	; (8001d78 <StartDefaultTask+0x6f8>)
 8001d3a:	f010 fab7 	bl	80122ac <iprintf>
		  if(flagNewSample == 1)
 8001d3e:	e4f4      	b.n	800172a <StartDefaultTask+0xaa>
 8001d40:	66666666 	.word	0x66666666
 8001d44:	3fe66666 	.word	0x3fe66666
 8001d48:	20008f74 	.word	0x20008f74
 8001d4c:	20009006 	.word	0x20009006
 8001d50:	20008fee 	.word	0x20008fee
 8001d54:	20009004 	.word	0x20009004
 8001d58:	20008ff6 	.word	0x20008ff6
 8001d5c:	20008fec 	.word	0x20008fec
 8001d60:	20008ff4 	.word	0x20008ff4
 8001d64:	20008ffb 	.word	0x20008ffb
 8001d68:	20008ffc 	.word	0x20008ffc
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	10624dd3 	.word	0x10624dd3
 8001d74:	76b981db 	.word	0x76b981db
 8001d78:	080134d0 	.word	0x080134d0

08001d7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d101      	bne.n	8001d92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d8e:	f000 fca3 	bl	80026d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40010000 	.word	0x40010000

08001da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001da4:	b672      	cpsid	i
}
 8001da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <Error_Handler+0x8>
	...

08001dac <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <microros_allocate+0x3c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <microros_allocate+0x3c>)
 8001dc4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <microros_allocate+0x40>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4413      	add	r3, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <microros_allocate+0x40>)
 8001dd4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7fe ff3e 	bl	8000c58 <pvPortMallocMicroROS>
 8001ddc:	4603      	mov	r3, r0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20009008 	.word	0x20009008
 8001dec:	2000900c 	.word	0x2000900c

08001df0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00c      	beq.n	8001e1a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff f847 	bl	8000e94 <getBlockSize>
 8001e06:	4603      	mov	r3, r0
 8001e08:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <microros_deallocate+0x34>)
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <microros_deallocate+0x34>)
 8001e12:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7fe ffe3 	bl	8000de0 <vPortFreeMicroROS>
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2000900c 	.word	0x2000900c

08001e28 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001e34:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <microros_reallocate+0x64>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <microros_reallocate+0x64>)
 8001e42:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <microros_reallocate+0x68>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <microros_reallocate+0x68>)
 8001e52:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d104      	bne.n	8001e64 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001e5a:	68b8      	ldr	r0, [r7, #8]
 8001e5c:	f7fe fefc 	bl	8000c58 <pvPortMallocMicroROS>
 8001e60:	4603      	mov	r3, r0
 8001e62:	e00e      	b.n	8001e82 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f7ff f815 	bl	8000e94 <getBlockSize>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <microros_reallocate+0x68>)
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <microros_reallocate+0x68>)
 8001e76:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f7ff f828 	bl	8000ed0 <pvPortReallocMicroROS>
 8001e80:	4603      	mov	r3, r0
  }
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20009008 	.word	0x20009008
 8001e90:	2000900c 	.word	0x2000900c

08001e94 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	fb02 f303 	mul.w	r3, r2, r3
 8001ea8:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <microros_zero_allocate+0x48>)
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	4413      	add	r3, r2
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <microros_zero_allocate+0x48>)
 8001eb2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	fb02 f303 	mul.w	r3, r2, r3
 8001ebc:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <microros_zero_allocate+0x4c>)
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <microros_zero_allocate+0x4c>)
 8001ec6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f7ff f82d 	bl	8000f2a <pvPortCallocMicroROS>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20009008 	.word	0x20009008
 8001ee0:	2000900c 	.word	0x2000900c
 8001ee4:	00000000 	.word	0x00000000

08001ee8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001ee8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001efa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001efe:	a320      	add	r3, pc, #128	; (adr r3, 8001f80 <UTILS_NanosecondsToTimespec+0x98>)
 8001f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f04:	f7fe fcda 	bl	80008bc <__aeabi_ldivmod>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001f12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f16:	a31a      	add	r3, pc, #104	; (adr r3, 8001f80 <UTILS_NanosecondsToTimespec+0x98>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	f7fe fcce 	bl	80008bc <__aeabi_ldivmod>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	da20      	bge.n	8001f6e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	4a11      	ldr	r2, [pc, #68]	; (8001f78 <UTILS_NanosecondsToTimespec+0x90>)
 8001f32:	fb82 1203 	smull	r1, r2, r2, r3
 8001f36:	1712      	asrs	r2, r2, #28
 8001f38:	17db      	asrs	r3, r3, #31
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f46:	6979      	ldr	r1, [r7, #20]
 8001f48:	17c8      	asrs	r0, r1, #31
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	4605      	mov	r5, r0
 8001f4e:	ebb2 0804 	subs.w	r8, r2, r4
 8001f52:	eb63 0905 	sbc.w	r9, r3, r5
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	4906      	ldr	r1, [pc, #24]	; (8001f7c <UTILS_NanosecondsToTimespec+0x94>)
 8001f64:	fb01 f303 	mul.w	r3, r1, r3
 8001f68:	441a      	add	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
    }
}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f78:	44b82fa1 	.word	0x44b82fa1
 8001f7c:	3b9aca00 	.word	0x3b9aca00
 8001f80:	3b9aca00 	.word	0x3b9aca00
 8001f84:	00000000 	.word	0x00000000

08001f88 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f8c:	b08e      	sub	sp, #56	; 0x38
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6278      	str	r0, [r7, #36]	; 0x24
 8001f92:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001f94:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f98:	2300      	movs	r3, #0
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f005 fe64 	bl	8007c7c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb6:	17da      	asrs	r2, r3, #31
 8001fb8:	61bb      	str	r3, [r7, #24]
 8001fba:	61fa      	str	r2, [r7, #28]
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	69b9      	ldr	r1, [r7, #24]
 8001fc6:	000b      	movs	r3, r1
 8001fc8:	2200      	movs	r2, #0
 8001fca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	461c      	mov	r4, r3
 8001fd4:	4615      	mov	r5, r2
 8001fd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001fda:	1911      	adds	r1, r2, r4
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	416b      	adcs	r3, r5
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001fe6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001fea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	f04f 0400 	mov.w	r4, #0
 8001ff6:	f04f 0500 	mov.w	r5, #0
 8001ffa:	015d      	lsls	r5, r3, #5
 8001ffc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002000:	0154      	lsls	r4, r2, #5
 8002002:	4622      	mov	r2, r4
 8002004:	462b      	mov	r3, r5
 8002006:	ebb2 0800 	subs.w	r8, r2, r0
 800200a:	eb63 0901 	sbc.w	r9, r3, r1
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800201a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800201e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002022:	4690      	mov	r8, r2
 8002024:	4699      	mov	r9, r3
 8002026:	eb18 0a00 	adds.w	sl, r8, r0
 800202a:	eb49 0b01 	adc.w	fp, r9, r1
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800203a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800203e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002042:	ebb2 040a 	subs.w	r4, r2, sl
 8002046:	603c      	str	r4, [r7, #0]
 8002048:	eb63 030b 	sbc.w	r3, r3, fp
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002052:	4623      	mov	r3, r4
 8002054:	181b      	adds	r3, r3, r0
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	462b      	mov	r3, r5
 800205a:	eb41 0303 	adc.w	r3, r1, r3
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	6a3a      	ldr	r2, [r7, #32]
 8002062:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002066:	f7ff ff3f 	bl	8001ee8 <UTILS_NanosecondsToTimespec>

    return 0;
 800206a:	2300      	movs	r3, #0
 800206c:	4618      	mov	r0, r3
 800206e:	3738      	adds	r7, #56	; 0x38
 8002070:	46bd      	mov	sp, r7
 8002072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_MspInit+0x54>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	4a11      	ldr	r2, [pc, #68]	; (80020cc <HAL_MspInit+0x54>)
 8002088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800208c:	6453      	str	r3, [r2, #68]	; 0x44
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <HAL_MspInit+0x54>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_MspInit+0x54>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <HAL_MspInit+0x54>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <HAL_MspInit+0x54>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	210f      	movs	r1, #15
 80020ba:	f06f 0001 	mvn.w	r0, #1
 80020be:	f001 f83f 	bl	8003140 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800

080020d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a1b      	ldr	r2, [pc, #108]	; (800215c <HAL_ADC_MspInit+0x8c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d12f      	bne.n	8002152 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <HAL_ADC_MspInit+0x90>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	4a19      	ldr	r2, [pc, #100]	; (8002160 <HAL_ADC_MspInit+0x90>)
 80020fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002100:	6453      	str	r3, [r2, #68]	; 0x44
 8002102:	4b17      	ldr	r3, [pc, #92]	; (8002160 <HAL_ADC_MspInit+0x90>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_ADC_MspInit+0x90>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <HAL_ADC_MspInit+0x90>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <HAL_ADC_MspInit+0x90>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800212e:	2303      	movs	r3, #3
 8002130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	4809      	ldr	r0, [pc, #36]	; (8002164 <HAL_ADC_MspInit+0x94>)
 800213e:	f001 fc2b 	bl	8003998 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2105      	movs	r1, #5
 8002146:	2012      	movs	r0, #18
 8002148:	f000 fffa 	bl	8003140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800214c:	2012      	movs	r0, #18
 800214e:	f001 f813 	bl	8003178 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002152:	bf00      	nop
 8002154:	3728      	adds	r7, #40	; 0x28
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40012000 	.word	0x40012000
 8002160:	40023800 	.word	0x40023800
 8002164:	40020000 	.word	0x40020000

08002168 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0b      	ldr	r2, [pc, #44]	; (80021a4 <HAL_TIM_Base_MspInit+0x3c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d10d      	bne.n	8002196 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <HAL_TIM_Base_MspInit+0x40>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	4a09      	ldr	r2, [pc, #36]	; (80021a8 <HAL_TIM_Base_MspInit+0x40>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	6413      	str	r3, [r2, #64]	; 0x40
 800218a:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <HAL_TIM_Base_MspInit+0x40>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40000400 	.word	0x40000400
 80021a8:	40023800 	.word	0x40023800

080021ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a4d      	ldr	r2, [pc, #308]	; (8002300 <HAL_UART_MspInit+0x154>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	f040 8093 	bne.w	80022f6 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021d0:	2300      	movs	r3, #0
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	4b4b      	ldr	r3, [pc, #300]	; (8002304 <HAL_UART_MspInit+0x158>)
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	4a4a      	ldr	r2, [pc, #296]	; (8002304 <HAL_UART_MspInit+0x158>)
 80021da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021de:	6413      	str	r3, [r2, #64]	; 0x40
 80021e0:	4b48      	ldr	r3, [pc, #288]	; (8002304 <HAL_UART_MspInit+0x158>)
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	4b44      	ldr	r3, [pc, #272]	; (8002304 <HAL_UART_MspInit+0x158>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	4a43      	ldr	r2, [pc, #268]	; (8002304 <HAL_UART_MspInit+0x158>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6313      	str	r3, [r2, #48]	; 0x30
 80021fc:	4b41      	ldr	r3, [pc, #260]	; (8002304 <HAL_UART_MspInit+0x158>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002208:	230c      	movs	r3, #12
 800220a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002218:	2307      	movs	r3, #7
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	4619      	mov	r1, r3
 8002222:	4839      	ldr	r0, [pc, #228]	; (8002308 <HAL_UART_MspInit+0x15c>)
 8002224:	f001 fbb8 	bl	8003998 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <HAL_UART_MspInit+0x160>)
 800222a:	4a39      	ldr	r2, [pc, #228]	; (8002310 <HAL_UART_MspInit+0x164>)
 800222c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800222e:	4b37      	ldr	r3, [pc, #220]	; (800230c <HAL_UART_MspInit+0x160>)
 8002230:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002234:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002236:	4b35      	ldr	r3, [pc, #212]	; (800230c <HAL_UART_MspInit+0x160>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800223c:	4b33      	ldr	r3, [pc, #204]	; (800230c <HAL_UART_MspInit+0x160>)
 800223e:	2200      	movs	r2, #0
 8002240:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002242:	4b32      	ldr	r3, [pc, #200]	; (800230c <HAL_UART_MspInit+0x160>)
 8002244:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002248:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800224a:	4b30      	ldr	r3, [pc, #192]	; (800230c <HAL_UART_MspInit+0x160>)
 800224c:	2200      	movs	r2, #0
 800224e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002250:	4b2e      	ldr	r3, [pc, #184]	; (800230c <HAL_UART_MspInit+0x160>)
 8002252:	2200      	movs	r2, #0
 8002254:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002256:	4b2d      	ldr	r3, [pc, #180]	; (800230c <HAL_UART_MspInit+0x160>)
 8002258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800225c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800225e:	4b2b      	ldr	r3, [pc, #172]	; (800230c <HAL_UART_MspInit+0x160>)
 8002260:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002264:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002266:	4b29      	ldr	r3, [pc, #164]	; (800230c <HAL_UART_MspInit+0x160>)
 8002268:	2200      	movs	r2, #0
 800226a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800226c:	4827      	ldr	r0, [pc, #156]	; (800230c <HAL_UART_MspInit+0x160>)
 800226e:	f000 ff91 	bl	8003194 <HAL_DMA_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002278:	f7ff fd92 	bl	8001da0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a23      	ldr	r2, [pc, #140]	; (800230c <HAL_UART_MspInit+0x160>)
 8002280:	63da      	str	r2, [r3, #60]	; 0x3c
 8002282:	4a22      	ldr	r2, [pc, #136]	; (800230c <HAL_UART_MspInit+0x160>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002288:	4b22      	ldr	r3, [pc, #136]	; (8002314 <HAL_UART_MspInit+0x168>)
 800228a:	4a23      	ldr	r2, [pc, #140]	; (8002318 <HAL_UART_MspInit+0x16c>)
 800228c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800228e:	4b21      	ldr	r3, [pc, #132]	; (8002314 <HAL_UART_MspInit+0x168>)
 8002290:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002294:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002296:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <HAL_UART_MspInit+0x168>)
 8002298:	2240      	movs	r2, #64	; 0x40
 800229a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800229c:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <HAL_UART_MspInit+0x168>)
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022a2:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <HAL_UART_MspInit+0x168>)
 80022a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022a8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022aa:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <HAL_UART_MspInit+0x168>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022b0:	4b18      	ldr	r3, [pc, #96]	; (8002314 <HAL_UART_MspInit+0x168>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <HAL_UART_MspInit+0x168>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80022bc:	4b15      	ldr	r3, [pc, #84]	; (8002314 <HAL_UART_MspInit+0x168>)
 80022be:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80022c2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022c4:	4b13      	ldr	r3, [pc, #76]	; (8002314 <HAL_UART_MspInit+0x168>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80022ca:	4812      	ldr	r0, [pc, #72]	; (8002314 <HAL_UART_MspInit+0x168>)
 80022cc:	f000 ff62 	bl	8003194 <HAL_DMA_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80022d6:	f7ff fd63 	bl	8001da0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a0d      	ldr	r2, [pc, #52]	; (8002314 <HAL_UART_MspInit+0x168>)
 80022de:	639a      	str	r2, [r3, #56]	; 0x38
 80022e0:	4a0c      	ldr	r2, [pc, #48]	; (8002314 <HAL_UART_MspInit+0x168>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2105      	movs	r1, #5
 80022ea:	2026      	movs	r0, #38	; 0x26
 80022ec:	f000 ff28 	bl	8003140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022f0:	2026      	movs	r0, #38	; 0x26
 80022f2:	f000 ff41 	bl	8003178 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022f6:	bf00      	nop
 80022f8:	3728      	adds	r7, #40	; 0x28
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40004400 	.word	0x40004400
 8002304:	40023800 	.word	0x40023800
 8002308:	40020000 	.word	0x40020000
 800230c:	20004624 	.word	0x20004624
 8002310:	40026088 	.word	0x40026088
 8002314:	20004684 	.word	0x20004684
 8002318:	400260a0 	.word	0x400260a0

0800231c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	; 0x30
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	4b2e      	ldr	r3, [pc, #184]	; (80023ec <HAL_InitTick+0xd0>)
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	4a2d      	ldr	r2, [pc, #180]	; (80023ec <HAL_InitTick+0xd0>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6453      	str	r3, [r2, #68]	; 0x44
 800233c:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <HAL_InitTick+0xd0>)
 800233e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002348:	f107 020c 	add.w	r2, r7, #12
 800234c:	f107 0310 	add.w	r3, r7, #16
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f002 f970 	bl	8004638 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002358:	f002 f95a 	bl	8004610 <HAL_RCC_GetPCLK2Freq>
 800235c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	4a23      	ldr	r2, [pc, #140]	; (80023f0 <HAL_InitTick+0xd4>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	0c9b      	lsrs	r3, r3, #18
 8002368:	3b01      	subs	r3, #1
 800236a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <HAL_InitTick+0xd8>)
 800236e:	4a22      	ldr	r2, [pc, #136]	; (80023f8 <HAL_InitTick+0xdc>)
 8002370:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_InitTick+0xd8>)
 8002374:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002378:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800237a:	4a1e      	ldr	r2, [pc, #120]	; (80023f4 <HAL_InitTick+0xd8>)
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002380:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_InitTick+0xd8>)
 8002382:	2200      	movs	r2, #0
 8002384:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002386:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <HAL_InitTick+0xd8>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_InitTick+0xd8>)
 800238e:	2200      	movs	r2, #0
 8002390:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002392:	4818      	ldr	r0, [pc, #96]	; (80023f4 <HAL_InitTick+0xd8>)
 8002394:	f002 f982 	bl	800469c <HAL_TIM_Base_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800239e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d11b      	bne.n	80023de <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80023a6:	4813      	ldr	r0, [pc, #76]	; (80023f4 <HAL_InitTick+0xd8>)
 80023a8:	f002 fa22 	bl	80047f0 <HAL_TIM_Base_Start_IT>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80023b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d111      	bne.n	80023de <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023ba:	2019      	movs	r0, #25
 80023bc:	f000 fedc 	bl	8003178 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b0f      	cmp	r3, #15
 80023c4:	d808      	bhi.n	80023d8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80023c6:	2200      	movs	r2, #0
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	2019      	movs	r0, #25
 80023cc:	f000 feb8 	bl	8003140 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <HAL_InitTick+0xe0>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e002      	b.n	80023de <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80023de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3730      	adds	r7, #48	; 0x30
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	431bde83 	.word	0x431bde83
 80023f4:	20009010 	.word	0x20009010
 80023f8:	40010000 	.word	0x40010000
 80023fc:	20000008 	.word	0x20000008

08002400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002404:	e7fe      	b.n	8002404 <NMI_Handler+0x4>

08002406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800240a:	e7fe      	b.n	800240a <HardFault_Handler+0x4>

0800240c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <MemManage_Handler+0x4>

08002412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002416:	e7fe      	b.n	8002416 <BusFault_Handler+0x4>

08002418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800241c:	e7fe      	b.n	800241c <UsageFault_Handler+0x4>

0800241e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <DMA1_Stream5_IRQHandler+0x10>)
 8002432:	f001 f847 	bl	80034c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20004624 	.word	0x20004624

08002440 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <DMA1_Stream6_IRQHandler+0x10>)
 8002446:	f001 f83d 	bl	80034c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20004684 	.word	0x20004684

08002454 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <ADC_IRQHandler+0x10>)
 800245a:	f000 fa5f 	bl	800291c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	2000454c 	.word	0x2000454c

08002468 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800246e:	f002 fa21 	bl	80048b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20009010 	.word	0x20009010

0800247c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <USART2_IRQHandler+0x10>)
 8002482:	f002 ff03 	bl	800528c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200045dc 	.word	0x200045dc

08002490 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return 1;
 8002494:	2301      	movs	r3, #1
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <_kill>:

int _kill(int pid, int sig)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024aa:	f010 f8ab 	bl	8012604 <__errno>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2216      	movs	r2, #22
 80024b2:	601a      	str	r2, [r3, #0]
  return -1;
 80024b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <_exit>:

void _exit (int status)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ffe7 	bl	80024a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024d2:	e7fe      	b.n	80024d2 <_exit+0x12>

080024d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	e00a      	b.n	80024fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024e6:	f3af 8000 	nop.w
 80024ea:	4601      	mov	r1, r0
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	60ba      	str	r2, [r7, #8]
 80024f2:	b2ca      	uxtb	r2, r1
 80024f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3301      	adds	r3, #1
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	dbf0      	blt.n	80024e6 <_read+0x12>
  }

  return len;
 8002504:	687b      	ldr	r3, [r7, #4]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	e009      	b.n	8002534 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	60ba      	str	r2, [r7, #8]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	3301      	adds	r3, #1
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	429a      	cmp	r2, r3
 800253a:	dbf1      	blt.n	8002520 <_write+0x12>
  }
  return len;
 800253c:	687b      	ldr	r3, [r7, #4]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <_close>:

int _close(int file)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800254e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800256e:	605a      	str	r2, [r3, #4]
  return 0;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <_isatty>:

int _isatty(int file)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002586:	2301      	movs	r3, #1
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b8:	4a14      	ldr	r2, [pc, #80]	; (800260c <_sbrk+0x5c>)
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <_sbrk+0x60>)
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c4:	4b13      	ldr	r3, [pc, #76]	; (8002614 <_sbrk+0x64>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <_sbrk+0x64>)
 80025ce:	4a12      	ldr	r2, [pc, #72]	; (8002618 <_sbrk+0x68>)
 80025d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <_sbrk+0x64>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d207      	bcs.n	80025f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025e0:	f010 f810 	bl	8012604 <__errno>
 80025e4:	4603      	mov	r3, r0
 80025e6:	220c      	movs	r2, #12
 80025e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ee:	e009      	b.n	8002604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025f0:	4b08      	ldr	r3, [pc, #32]	; (8002614 <_sbrk+0x64>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <_sbrk+0x64>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	4a05      	ldr	r2, [pc, #20]	; (8002614 <_sbrk+0x64>)
 8002600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002602:	68fb      	ldr	r3, [r7, #12]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20018000 	.word	0x20018000
 8002610:	00000400 	.word	0x00000400
 8002614:	2000905c 	.word	0x2000905c
 8002618:	200126a8 	.word	0x200126a8

0800261c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <SystemInit+0x20>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002626:	4a05      	ldr	r2, [pc, #20]	; (800263c <SystemInit+0x20>)
 8002628:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800262c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002678 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002644:	f7ff ffea 	bl	800261c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002648:	480c      	ldr	r0, [pc, #48]	; (800267c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800264a:	490d      	ldr	r1, [pc, #52]	; (8002680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800264c:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800264e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002650:	e002      	b.n	8002658 <LoopCopyDataInit>

08002652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002656:	3304      	adds	r3, #4

08002658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800265a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800265c:	d3f9      	bcc.n	8002652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800265e:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002660:	4c0a      	ldr	r4, [pc, #40]	; (800268c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002664:	e001      	b.n	800266a <LoopFillZerobss>

08002666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002668:	3204      	adds	r2, #4

0800266a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800266a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800266c:	d3fb      	bcc.n	8002666 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800266e:	f00f ffcf 	bl	8012610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002672:	f7fe fde9 	bl	8001248 <main>
  bx  lr    
 8002676:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002678:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800267c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002680:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8002684:	08014078 	.word	0x08014078
  ldr r2, =_sbss
 8002688:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 800268c:	200126a4 	.word	0x200126a4

08002690 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002690:	e7fe      	b.n	8002690 <DMA1_Stream0_IRQHandler>
	...

08002694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002698:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <HAL_Init+0x40>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0d      	ldr	r2, [pc, #52]	; (80026d4 <HAL_Init+0x40>)
 800269e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_Init+0x40>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <HAL_Init+0x40>)
 80026aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <HAL_Init+0x40>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a07      	ldr	r2, [pc, #28]	; (80026d4 <HAL_Init+0x40>)
 80026b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026bc:	2003      	movs	r0, #3
 80026be:	f000 fd34 	bl	800312a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026c2:	200f      	movs	r0, #15
 80026c4:	f7ff fe2a 	bl	800231c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026c8:	f7ff fcd6 	bl	8002078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023c00 	.word	0x40023c00

080026d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_IncTick+0x20>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_IncTick+0x24>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	4a04      	ldr	r2, [pc, #16]	; (80026fc <HAL_IncTick+0x24>)
 80026ea:	6013      	str	r3, [r2, #0]
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	2000000c 	.word	0x2000000c
 80026fc:	20009060 	.word	0x20009060

08002700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return uwTick;
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <HAL_GetTick+0x14>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20009060 	.word	0x20009060

08002718 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e033      	b.n	8002796 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff fcca 	bl	80020d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	d118      	bne.n	8002788 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800275e:	f023 0302 	bic.w	r3, r3, #2
 8002762:	f043 0202 	orr.w	r2, r3, #2
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 fb2a 	bl	8002dc4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f023 0303 	bic.w	r3, r3, #3
 800277e:	f043 0201 	orr.w	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	641a      	str	r2, [r3, #64]	; 0x40
 8002786:	e001      	b.n	800278c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002794:	7bfb      	ldrb	r3, [r7, #15]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_ADC_Start_IT+0x1a>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e0a1      	b.n	80028fe <HAL_ADC_Start_IT+0x15e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d018      	beq.n	8002802 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027e0:	4b4a      	ldr	r3, [pc, #296]	; (800290c <HAL_ADC_Start_IT+0x16c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a4a      	ldr	r2, [pc, #296]	; (8002910 <HAL_ADC_Start_IT+0x170>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	0c9a      	lsrs	r2, r3, #18
 80027ec:	4613      	mov	r3, r2
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4413      	add	r3, r2
 80027f2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80027f4:	e002      	b.n	80027fc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f9      	bne.n	80027f6 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b01      	cmp	r3, #1
 800280e:	d169      	bne.n	80028e4 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282e:	2b00      	cmp	r3, #0
 8002830:	d007      	beq.n	8002842 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800283a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800284a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284e:	d106      	bne.n	800285e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	f023 0206 	bic.w	r2, r3, #6
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	645a      	str	r2, [r3, #68]	; 0x44
 800285c:	e002      	b.n	8002864 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800286c:	4b29      	ldr	r3, [pc, #164]	; (8002914 <HAL_ADC_Start_IT+0x174>)
 800286e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002878:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002888:	f043 0320 	orr.w	r3, r3, #32
 800288c:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10f      	bne.n	80028ba <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d129      	bne.n	80028fc <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	e020      	b.n	80028fc <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a16      	ldr	r2, [pc, #88]	; (8002918 <HAL_ADC_Start_IT+0x178>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d11b      	bne.n	80028fc <HAL_ADC_Start_IT+0x15c>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d114      	bne.n	80028fc <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028e0:	609a      	str	r2, [r3, #8]
 80028e2:	e00b      	b.n	80028fc <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f043 0210 	orr.w	r2, r3, #16
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	f043 0201 	orr.w	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000004 	.word	0x20000004
 8002910:	431bde83 	.word	0x431bde83
 8002914:	40012300 	.word	0x40012300
 8002918:	40012000 	.word	0x40012000

0800291c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	2300      	movs	r3, #0
 800292a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d049      	beq.n	80029e6 <HAL_ADC_IRQHandler+0xca>
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d046      	beq.n	80029e6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2b00      	cmp	r3, #0
 8002962:	d105      	bne.n	8002970 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d12b      	bne.n	80029d6 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002982:	2b00      	cmp	r3, #0
 8002984:	d127      	bne.n	80029d6 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002990:	2b00      	cmp	r3, #0
 8002992:	d006      	beq.n	80029a2 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d119      	bne.n	80029d6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0220 	bic.w	r2, r2, #32
 80029b0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d105      	bne.n	80029d6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f043 0201 	orr.w	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fe fc64 	bl	80012a4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0212 	mvn.w	r2, #18
 80029e4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d057      	beq.n	8002aac <HAL_ADC_IRQHandler+0x190>
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d054      	beq.n	8002aac <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d105      	bne.n	8002a1a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d139      	bne.n	8002a9c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d006      	beq.n	8002a44 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d12b      	bne.n	8002a9c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d124      	bne.n	8002a9c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d11d      	bne.n	8002a9c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d119      	bne.n	8002a9c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a76:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d105      	bne.n	8002a9c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	f043 0201 	orr.w	r2, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fa8d 	bl	8002fbc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f06f 020c 	mvn.w	r2, #12
 8002aaa:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aba:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d017      	beq.n	8002af2 <HAL_ADC_IRQHandler+0x1d6>
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d014      	beq.n	8002af2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d10d      	bne.n	8002af2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f837 	bl	8002b56 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0201 	mvn.w	r2, #1
 8002af0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b00:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d015      	beq.n	8002b34 <HAL_ADC_IRQHandler+0x218>
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d012      	beq.n	8002b34 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f043 0202 	orr.w	r2, r3, #2
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f06f 0220 	mvn.w	r2, #32
 8002b22:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f820 	bl	8002b6a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f06f 0220 	mvn.w	r2, #32
 8002b32:	601a      	str	r2, [r3, #0]
  }
}
 8002b34:	bf00      	nop
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x1c>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e105      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x228>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b09      	cmp	r3, #9
 8002baa:	d925      	bls.n	8002bf8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68d9      	ldr	r1, [r3, #12]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4613      	mov	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3b1e      	subs	r3, #30
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43da      	mvns	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	400a      	ands	r2, r1
 8002bd0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68d9      	ldr	r1, [r3, #12]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	4603      	mov	r3, r0
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4403      	add	r3, r0
 8002bea:	3b1e      	subs	r3, #30
 8002bec:	409a      	lsls	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	e022      	b.n	8002c3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6919      	ldr	r1, [r3, #16]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	4613      	mov	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43da      	mvns	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	400a      	ands	r2, r1
 8002c1a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6919      	ldr	r1, [r3, #16]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	4603      	mov	r3, r0
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4403      	add	r3, r0
 8002c34:	409a      	lsls	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b06      	cmp	r3, #6
 8002c44:	d824      	bhi.n	8002c90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	3b05      	subs	r3, #5
 8002c58:	221f      	movs	r2, #31
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	400a      	ands	r2, r1
 8002c66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	4618      	mov	r0, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	3b05      	subs	r3, #5
 8002c82:	fa00 f203 	lsl.w	r2, r0, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c8e:	e04c      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b0c      	cmp	r3, #12
 8002c96:	d824      	bhi.n	8002ce2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3b23      	subs	r3, #35	; 0x23
 8002caa:	221f      	movs	r2, #31
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43da      	mvns	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	400a      	ands	r2, r1
 8002cb8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3b23      	subs	r3, #35	; 0x23
 8002cd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce0:	e023      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3b41      	subs	r3, #65	; 0x41
 8002cf4:	221f      	movs	r2, #31
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43da      	mvns	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	400a      	ands	r2, r1
 8002d02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	4618      	mov	r0, r3
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3b41      	subs	r3, #65	; 0x41
 8002d1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d2a:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <HAL_ADC_ConfigChannel+0x234>)
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a21      	ldr	r2, [pc, #132]	; (8002db8 <HAL_ADC_ConfigChannel+0x238>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d109      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x1cc>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b12      	cmp	r3, #18
 8002d3e:	d105      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a19      	ldr	r2, [pc, #100]	; (8002db8 <HAL_ADC_ConfigChannel+0x238>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d123      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x21e>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d003      	beq.n	8002d66 <HAL_ADC_ConfigChannel+0x1e6>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b11      	cmp	r3, #17
 8002d64:	d11b      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d111      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_ADC_ConfigChannel+0x23c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a10      	ldr	r2, [pc, #64]	; (8002dc0 <HAL_ADC_ConfigChannel+0x240>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	0c9a      	lsrs	r2, r3, #18
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d90:	e002      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f9      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40012300 	.word	0x40012300
 8002db8:	40012000 	.word	0x40012000
 8002dbc:	20000004 	.word	0x20000004
 8002dc0:	431bde83 	.word	0x431bde83

08002dc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dcc:	4b79      	ldr	r3, [pc, #484]	; (8002fb4 <ADC_Init+0x1f0>)
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002df8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6859      	ldr	r1, [r3, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	021a      	lsls	r2, r3, #8
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6899      	ldr	r1, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	4a58      	ldr	r2, [pc, #352]	; (8002fb8 <ADC_Init+0x1f4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d022      	beq.n	8002ea2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6899      	ldr	r1, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6899      	ldr	r1, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	e00f      	b.n	8002ec2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ec0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0202 	bic.w	r2, r2, #2
 8002ed0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6899      	ldr	r1, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7e1b      	ldrb	r3, [r3, #24]
 8002edc:	005a      	lsls	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01b      	beq.n	8002f28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002efe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6859      	ldr	r1, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	035a      	lsls	r2, r3, #13
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	e007      	b.n	8002f38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f36:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	051a      	lsls	r2, r3, #20
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6899      	ldr	r1, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f7a:	025a      	lsls	r2, r3, #9
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6899      	ldr	r1, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	029a      	lsls	r2, r3, #10
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	609a      	str	r2, [r3, #8]
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	40012300 	.word	0x40012300
 8002fb8:	0f000001 	.word	0x0f000001

08002fbc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fec:	4013      	ands	r3, r2
 8002fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003002:	4a04      	ldr	r2, [pc, #16]	; (8003014 <__NVIC_SetPriorityGrouping+0x44>)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	60d3      	str	r3, [r2, #12]
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800301c:	4b04      	ldr	r3, [pc, #16]	; (8003030 <__NVIC_GetPriorityGrouping+0x18>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	0a1b      	lsrs	r3, r3, #8
 8003022:	f003 0307 	and.w	r3, r3, #7
}
 8003026:	4618      	mov	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	2b00      	cmp	r3, #0
 8003044:	db0b      	blt.n	800305e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	f003 021f 	and.w	r2, r3, #31
 800304c:	4907      	ldr	r1, [pc, #28]	; (800306c <__NVIC_EnableIRQ+0x38>)
 800304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	2001      	movs	r0, #1
 8003056:	fa00 f202 	lsl.w	r2, r0, r2
 800305a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	e000e100 	.word	0xe000e100

08003070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	6039      	str	r1, [r7, #0]
 800307a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003080:	2b00      	cmp	r3, #0
 8003082:	db0a      	blt.n	800309a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	b2da      	uxtb	r2, r3
 8003088:	490c      	ldr	r1, [pc, #48]	; (80030bc <__NVIC_SetPriority+0x4c>)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	0112      	lsls	r2, r2, #4
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	440b      	add	r3, r1
 8003094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003098:	e00a      	b.n	80030b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	4908      	ldr	r1, [pc, #32]	; (80030c0 <__NVIC_SetPriority+0x50>)
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	3b04      	subs	r3, #4
 80030a8:	0112      	lsls	r2, r2, #4
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	440b      	add	r3, r1
 80030ae:	761a      	strb	r2, [r3, #24]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	e000e100 	.word	0xe000e100
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b089      	sub	sp, #36	; 0x24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f1c3 0307 	rsb	r3, r3, #7
 80030de:	2b04      	cmp	r3, #4
 80030e0:	bf28      	it	cs
 80030e2:	2304      	movcs	r3, #4
 80030e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3304      	adds	r3, #4
 80030ea:	2b06      	cmp	r3, #6
 80030ec:	d902      	bls.n	80030f4 <NVIC_EncodePriority+0x30>
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3b03      	subs	r3, #3
 80030f2:	e000      	b.n	80030f6 <NVIC_EncodePriority+0x32>
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43da      	mvns	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	401a      	ands	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800310c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	43d9      	mvns	r1, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311c:	4313      	orrs	r3, r2
         );
}
 800311e:	4618      	mov	r0, r3
 8003120:	3724      	adds	r7, #36	; 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7ff ff4c 	bl	8002fd0 <__NVIC_SetPriorityGrouping>
}
 8003138:	bf00      	nop
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003152:	f7ff ff61 	bl	8003018 <__NVIC_GetPriorityGrouping>
 8003156:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	6978      	ldr	r0, [r7, #20]
 800315e:	f7ff ffb1 	bl	80030c4 <NVIC_EncodePriority>
 8003162:	4602      	mov	r2, r0
 8003164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff ff80 	bl	8003070 <__NVIC_SetPriority>
}
 8003170:	bf00      	nop
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ff54 	bl	8003034 <__NVIC_EnableIRQ>
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031a0:	f7ff faae 	bl	8002700 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e099      	b.n	80032e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031d0:	e00f      	b.n	80031f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031d2:	f7ff fa95 	bl	8002700 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b05      	cmp	r3, #5
 80031de:	d908      	bls.n	80031f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2203      	movs	r2, #3
 80031ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e078      	b.n	80032e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1e8      	bne.n	80031d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	4b38      	ldr	r3, [pc, #224]	; (80032ec <HAL_DMA_Init+0x158>)
 800320c:	4013      	ands	r3, r2
 800320e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800321e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800322a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003236:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	2b04      	cmp	r3, #4
 800324a:	d107      	bne.n	800325c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	4313      	orrs	r3, r2
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f023 0307 	bic.w	r3, r3, #7
 8003272:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	2b04      	cmp	r3, #4
 8003284:	d117      	bne.n	80032b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00e      	beq.n	80032b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 fb01 	bl	80038a0 <DMA_CheckFifoParam>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2240      	movs	r2, #64	; 0x40
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032b2:	2301      	movs	r3, #1
 80032b4:	e016      	b.n	80032e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fab8 	bl	8003834 <DMA_CalcBaseAndBitshift>
 80032c4:	4603      	mov	r3, r0
 80032c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032cc:	223f      	movs	r2, #63	; 0x3f
 80032ce:	409a      	lsls	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	f010803f 	.word	0xf010803f

080032f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003306:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_DMA_Start_IT+0x26>
 8003312:	2302      	movs	r3, #2
 8003314:	e040      	b.n	8003398 <HAL_DMA_Start_IT+0xa8>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b01      	cmp	r3, #1
 8003328:	d12f      	bne.n	800338a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2202      	movs	r2, #2
 800332e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	68b9      	ldr	r1, [r7, #8]
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 fa4a 	bl	80037d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003348:	223f      	movs	r2, #63	; 0x3f
 800334a:	409a      	lsls	r2, r3
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0216 	orr.w	r2, r2, #22
 800335e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d007      	beq.n	8003378 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0208 	orr.w	r2, r2, #8
 8003376:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	e005      	b.n	8003396 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003392:	2302      	movs	r3, #2
 8003394:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003396:	7dfb      	ldrb	r3, [r7, #23]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033ae:	f7ff f9a7 	bl	8002700 <HAL_GetTick>
 80033b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d008      	beq.n	80033d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2280      	movs	r2, #128	; 0x80
 80033c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e052      	b.n	8003478 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0216 	bic.w	r2, r2, #22
 80033e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695a      	ldr	r2, [r3, #20]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d103      	bne.n	8003402 <HAL_DMA_Abort+0x62>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d007      	beq.n	8003412 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0208 	bic.w	r2, r2, #8
 8003410:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0201 	bic.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003422:	e013      	b.n	800344c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003424:	f7ff f96c 	bl	8002700 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b05      	cmp	r3, #5
 8003430:	d90c      	bls.n	800344c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2220      	movs	r2, #32
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2203      	movs	r2, #3
 800343c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e015      	b.n	8003478 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1e4      	bne.n	8003424 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345e:	223f      	movs	r2, #63	; 0x3f
 8003460:	409a      	lsls	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d004      	beq.n	800349e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2280      	movs	r2, #128	; 0x80
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e00c      	b.n	80034b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2205      	movs	r2, #5
 80034a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0201 	bic.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034d0:	4b8e      	ldr	r3, [pc, #568]	; (800370c <HAL_DMA_IRQHandler+0x248>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a8e      	ldr	r2, [pc, #568]	; (8003710 <HAL_DMA_IRQHandler+0x24c>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	0a9b      	lsrs	r3, r3, #10
 80034dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	2208      	movs	r2, #8
 80034f0:	409a      	lsls	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d01a      	beq.n	8003530 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d013      	beq.n	8003530 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0204 	bic.w	r2, r2, #4
 8003516:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351c:	2208      	movs	r2, #8
 800351e:	409a      	lsls	r2, r3
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003528:	f043 0201 	orr.w	r2, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003534:	2201      	movs	r2, #1
 8003536:	409a      	lsls	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4013      	ands	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d012      	beq.n	8003566 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003552:	2201      	movs	r2, #1
 8003554:	409a      	lsls	r2, r3
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	f043 0202 	orr.w	r2, r3, #2
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356a:	2204      	movs	r2, #4
 800356c:	409a      	lsls	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4013      	ands	r3, r2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d012      	beq.n	800359c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00b      	beq.n	800359c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	2204      	movs	r2, #4
 800358a:	409a      	lsls	r2, r3
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003594:	f043 0204 	orr.w	r2, r3, #4
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a0:	2210      	movs	r2, #16
 80035a2:	409a      	lsls	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d043      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d03c      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035be:	2210      	movs	r2, #16
 80035c0:	409a      	lsls	r2, r3
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d018      	beq.n	8003606 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d108      	bne.n	80035f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d024      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	4798      	blx	r3
 80035f2:	e01f      	b.n	8003634 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01b      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	4798      	blx	r3
 8003604:	e016      	b.n	8003634 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d107      	bne.n	8003624 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0208 	bic.w	r2, r2, #8
 8003622:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	2220      	movs	r2, #32
 800363a:	409a      	lsls	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4013      	ands	r3, r2
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 808f 	beq.w	8003764 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8087 	beq.w	8003764 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365a:	2220      	movs	r2, #32
 800365c:	409a      	lsls	r2, r3
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b05      	cmp	r3, #5
 800366c:	d136      	bne.n	80036dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0216 	bic.w	r2, r2, #22
 800367c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800368c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d103      	bne.n	800369e <HAL_DMA_IRQHandler+0x1da>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369a:	2b00      	cmp	r3, #0
 800369c:	d007      	beq.n	80036ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0208 	bic.w	r2, r2, #8
 80036ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b2:	223f      	movs	r2, #63	; 0x3f
 80036b4:	409a      	lsls	r2, r3
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d07e      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	4798      	blx	r3
        }
        return;
 80036da:	e079      	b.n	80037d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d01d      	beq.n	8003726 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10d      	bne.n	8003714 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d031      	beq.n	8003764 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	4798      	blx	r3
 8003708:	e02c      	b.n	8003764 <HAL_DMA_IRQHandler+0x2a0>
 800370a:	bf00      	nop
 800370c:	20000004 	.word	0x20000004
 8003710:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d023      	beq.n	8003764 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	4798      	blx	r3
 8003724:	e01e      	b.n	8003764 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10f      	bne.n	8003754 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0210 	bic.w	r2, r2, #16
 8003742:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	2b00      	cmp	r3, #0
 800376a:	d032      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d022      	beq.n	80037be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2205      	movs	r2, #5
 800377c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	3301      	adds	r3, #1
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	429a      	cmp	r2, r3
 800379a:	d307      	bcc.n	80037ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f2      	bne.n	8003790 <HAL_DMA_IRQHandler+0x2cc>
 80037aa:	e000      	b.n	80037ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	4798      	blx	r3
 80037ce:	e000      	b.n	80037d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80037d0:	bf00      	nop
    }
  }
}
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2b40      	cmp	r3, #64	; 0x40
 8003804:	d108      	bne.n	8003818 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003816:	e007      	b.n	8003828 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	60da      	str	r2, [r3, #12]
}
 8003828:	bf00      	nop
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	3b10      	subs	r3, #16
 8003844:	4a14      	ldr	r2, [pc, #80]	; (8003898 <DMA_CalcBaseAndBitshift+0x64>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800384e:	4a13      	ldr	r2, [pc, #76]	; (800389c <DMA_CalcBaseAndBitshift+0x68>)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b03      	cmp	r3, #3
 8003860:	d909      	bls.n	8003876 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800386a:	f023 0303 	bic.w	r3, r3, #3
 800386e:	1d1a      	adds	r2, r3, #4
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	659a      	str	r2, [r3, #88]	; 0x58
 8003874:	e007      	b.n	8003886 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800387e:	f023 0303 	bic.w	r3, r3, #3
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	aaaaaaab 	.word	0xaaaaaaab
 800389c:	0801354c 	.word	0x0801354c

080038a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d11f      	bne.n	80038fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d856      	bhi.n	800396e <DMA_CheckFifoParam+0xce>
 80038c0:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <DMA_CheckFifoParam+0x28>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	080038d9 	.word	0x080038d9
 80038cc:	080038eb 	.word	0x080038eb
 80038d0:	080038d9 	.word	0x080038d9
 80038d4:	0800396f 	.word	0x0800396f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d046      	beq.n	8003972 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e8:	e043      	b.n	8003972 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038f2:	d140      	bne.n	8003976 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f8:	e03d      	b.n	8003976 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003902:	d121      	bne.n	8003948 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b03      	cmp	r3, #3
 8003908:	d837      	bhi.n	800397a <DMA_CheckFifoParam+0xda>
 800390a:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <DMA_CheckFifoParam+0x70>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	08003921 	.word	0x08003921
 8003914:	08003927 	.word	0x08003927
 8003918:	08003921 	.word	0x08003921
 800391c:	08003939 	.word	0x08003939
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      break;
 8003924:	e030      	b.n	8003988 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d025      	beq.n	800397e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003936:	e022      	b.n	800397e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003940:	d11f      	bne.n	8003982 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003946:	e01c      	b.n	8003982 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d903      	bls.n	8003956 <DMA_CheckFifoParam+0xb6>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d003      	beq.n	800395c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003954:	e018      	b.n	8003988 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	73fb      	strb	r3, [r7, #15]
      break;
 800395a:	e015      	b.n	8003988 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00e      	beq.n	8003986 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
      break;
 800396c:	e00b      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
      break;
 800396e:	bf00      	nop
 8003970:	e00a      	b.n	8003988 <DMA_CheckFifoParam+0xe8>
      break;
 8003972:	bf00      	nop
 8003974:	e008      	b.n	8003988 <DMA_CheckFifoParam+0xe8>
      break;
 8003976:	bf00      	nop
 8003978:	e006      	b.n	8003988 <DMA_CheckFifoParam+0xe8>
      break;
 800397a:	bf00      	nop
 800397c:	e004      	b.n	8003988 <DMA_CheckFifoParam+0xe8>
      break;
 800397e:	bf00      	nop
 8003980:	e002      	b.n	8003988 <DMA_CheckFifoParam+0xe8>
      break;   
 8003982:	bf00      	nop
 8003984:	e000      	b.n	8003988 <DMA_CheckFifoParam+0xe8>
      break;
 8003986:	bf00      	nop
    }
  } 
  
  return status; 
 8003988:	7bfb      	ldrb	r3, [r7, #15]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop

08003998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003998:	b480      	push	{r7}
 800399a:	b089      	sub	sp, #36	; 0x24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	e159      	b.n	8003c68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039b4:	2201      	movs	r2, #1
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4013      	ands	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	f040 8148 	bne.w	8003c62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d005      	beq.n	80039ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d130      	bne.n	8003a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	2203      	movs	r2, #3
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4013      	ands	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a20:	2201      	movs	r2, #1
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 0201 	and.w	r2, r3, #1
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d017      	beq.n	8003a88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	2203      	movs	r2, #3
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d123      	bne.n	8003adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	08da      	lsrs	r2, r3, #3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3208      	adds	r2, #8
 8003a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	220f      	movs	r2, #15
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	08da      	lsrs	r2, r3, #3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3208      	adds	r2, #8
 8003ad6:	69b9      	ldr	r1, [r7, #24]
 8003ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4013      	ands	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 0203 	and.w	r2, r3, #3
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80a2 	beq.w	8003c62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	4b57      	ldr	r3, [pc, #348]	; (8003c80 <HAL_GPIO_Init+0x2e8>)
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	4a56      	ldr	r2, [pc, #344]	; (8003c80 <HAL_GPIO_Init+0x2e8>)
 8003b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b2e:	4b54      	ldr	r3, [pc, #336]	; (8003c80 <HAL_GPIO_Init+0x2e8>)
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b3a:	4a52      	ldr	r2, [pc, #328]	; (8003c84 <HAL_GPIO_Init+0x2ec>)
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	3302      	adds	r3, #2
 8003b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	220f      	movs	r2, #15
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a49      	ldr	r2, [pc, #292]	; (8003c88 <HAL_GPIO_Init+0x2f0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d019      	beq.n	8003b9a <HAL_GPIO_Init+0x202>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a48      	ldr	r2, [pc, #288]	; (8003c8c <HAL_GPIO_Init+0x2f4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d013      	beq.n	8003b96 <HAL_GPIO_Init+0x1fe>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a47      	ldr	r2, [pc, #284]	; (8003c90 <HAL_GPIO_Init+0x2f8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00d      	beq.n	8003b92 <HAL_GPIO_Init+0x1fa>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a46      	ldr	r2, [pc, #280]	; (8003c94 <HAL_GPIO_Init+0x2fc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <HAL_GPIO_Init+0x1f6>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a45      	ldr	r2, [pc, #276]	; (8003c98 <HAL_GPIO_Init+0x300>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <HAL_GPIO_Init+0x1f2>
 8003b86:	2304      	movs	r3, #4
 8003b88:	e008      	b.n	8003b9c <HAL_GPIO_Init+0x204>
 8003b8a:	2307      	movs	r3, #7
 8003b8c:	e006      	b.n	8003b9c <HAL_GPIO_Init+0x204>
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e004      	b.n	8003b9c <HAL_GPIO_Init+0x204>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e002      	b.n	8003b9c <HAL_GPIO_Init+0x204>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <HAL_GPIO_Init+0x204>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	f002 0203 	and.w	r2, r2, #3
 8003ba2:	0092      	lsls	r2, r2, #2
 8003ba4:	4093      	lsls	r3, r2
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bac:	4935      	ldr	r1, [pc, #212]	; (8003c84 <HAL_GPIO_Init+0x2ec>)
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	089b      	lsrs	r3, r3, #2
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bba:	4b38      	ldr	r3, [pc, #224]	; (8003c9c <HAL_GPIO_Init+0x304>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bde:	4a2f      	ldr	r2, [pc, #188]	; (8003c9c <HAL_GPIO_Init+0x304>)
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003be4:	4b2d      	ldr	r3, [pc, #180]	; (8003c9c <HAL_GPIO_Init+0x304>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c08:	4a24      	ldr	r2, [pc, #144]	; (8003c9c <HAL_GPIO_Init+0x304>)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c0e:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <HAL_GPIO_Init+0x304>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	43db      	mvns	r3, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c32:	4a1a      	ldr	r2, [pc, #104]	; (8003c9c <HAL_GPIO_Init+0x304>)
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c38:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <HAL_GPIO_Init+0x304>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	43db      	mvns	r3, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4013      	ands	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c5c:	4a0f      	ldr	r2, [pc, #60]	; (8003c9c <HAL_GPIO_Init+0x304>)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	3301      	adds	r3, #1
 8003c66:	61fb      	str	r3, [r7, #28]
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	2b0f      	cmp	r3, #15
 8003c6c:	f67f aea2 	bls.w	80039b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c70:	bf00      	nop
 8003c72:	bf00      	nop
 8003c74:	3724      	adds	r7, #36	; 0x24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40013800 	.word	0x40013800
 8003c88:	40020000 	.word	0x40020000
 8003c8c:	40020400 	.word	0x40020400
 8003c90:	40020800 	.word	0x40020800
 8003c94:	40020c00 	.word	0x40020c00
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40013c00 	.word	0x40013c00

08003ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	807b      	strh	r3, [r7, #2]
 8003cac:	4613      	mov	r3, r2
 8003cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cb0:	787b      	ldrb	r3, [r7, #1]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cb6:	887a      	ldrh	r2, [r7, #2]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cbc:	e003      	b.n	8003cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cbe:	887b      	ldrh	r3, [r7, #2]
 8003cc0:	041a      	lsls	r2, r3, #16
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	619a      	str	r2, [r3, #24]
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b085      	sub	sp, #20
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	460b      	mov	r3, r1
 8003cdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ce4:	887a      	ldrh	r2, [r7, #2]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	041a      	lsls	r2, r3, #16
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	43d9      	mvns	r1, r3
 8003cf0:	887b      	ldrh	r3, [r7, #2]
 8003cf2:	400b      	ands	r3, r1
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	619a      	str	r2, [r3, #24]
}
 8003cfa:	bf00      	nop
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e267      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d075      	beq.n	8003e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d26:	4b88      	ldr	r3, [pc, #544]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d00c      	beq.n	8003d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d32:	4b85      	ldr	r3, [pc, #532]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d112      	bne.n	8003d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d3e:	4b82      	ldr	r3, [pc, #520]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d4a:	d10b      	bne.n	8003d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4c:	4b7e      	ldr	r3, [pc, #504]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d05b      	beq.n	8003e10 <HAL_RCC_OscConfig+0x108>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d157      	bne.n	8003e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e242      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d6c:	d106      	bne.n	8003d7c <HAL_RCC_OscConfig+0x74>
 8003d6e:	4b76      	ldr	r3, [pc, #472]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a75      	ldr	r2, [pc, #468]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e01d      	b.n	8003db8 <HAL_RCC_OscConfig+0xb0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d84:	d10c      	bne.n	8003da0 <HAL_RCC_OscConfig+0x98>
 8003d86:	4b70      	ldr	r3, [pc, #448]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a6f      	ldr	r2, [pc, #444]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4b6d      	ldr	r3, [pc, #436]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a6c      	ldr	r2, [pc, #432]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCC_OscConfig+0xb0>
 8003da0:	4b69      	ldr	r3, [pc, #420]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a68      	ldr	r2, [pc, #416]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	4b66      	ldr	r3, [pc, #408]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a65      	ldr	r2, [pc, #404]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d013      	beq.n	8003de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7fe fc9e 	bl	8002700 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7fe fc9a 	bl	8002700 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e207      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dda:	4b5b      	ldr	r3, [pc, #364]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0xc0>
 8003de6:	e014      	b.n	8003e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fe fc8a 	bl	8002700 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df0:	f7fe fc86 	bl	8002700 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	; 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e1f3      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e02:	4b51      	ldr	r3, [pc, #324]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0xe8>
 8003e0e:	e000      	b.n	8003e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d063      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e1e:	4b4a      	ldr	r3, [pc, #296]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2a:	4b47      	ldr	r3, [pc, #284]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d11c      	bne.n	8003e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e36:	4b44      	ldr	r3, [pc, #272]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d116      	bne.n	8003e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e42:	4b41      	ldr	r3, [pc, #260]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_RCC_OscConfig+0x152>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d001      	beq.n	8003e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e1c7      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5a:	4b3b      	ldr	r3, [pc, #236]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4937      	ldr	r1, [pc, #220]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6e:	e03a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d020      	beq.n	8003eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e78:	4b34      	ldr	r3, [pc, #208]	; (8003f4c <HAL_RCC_OscConfig+0x244>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7e:	f7fe fc3f 	bl	8002700 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e86:	f7fe fc3b 	bl	8002700 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e1a8      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e98:	4b2b      	ldr	r3, [pc, #172]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea4:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4925      	ldr	r1, [pc, #148]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	600b      	str	r3, [r1, #0]
 8003eb8:	e015      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eba:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <HAL_RCC_OscConfig+0x244>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fe fc1e 	bl	8002700 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec8:	f7fe fc1a 	bl	8002700 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e187      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eda:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d036      	beq.n	8003f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d016      	beq.n	8003f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efa:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <HAL_RCC_OscConfig+0x248>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f00:	f7fe fbfe 	bl	8002700 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f08:	f7fe fbfa 	bl	8002700 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e167      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x200>
 8003f26:	e01b      	b.n	8003f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f28:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <HAL_RCC_OscConfig+0x248>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2e:	f7fe fbe7 	bl	8002700 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f34:	e00e      	b.n	8003f54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f36:	f7fe fbe3 	bl	8002700 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d907      	bls.n	8003f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e150      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	42470000 	.word	0x42470000
 8003f50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f54:	4b88      	ldr	r3, [pc, #544]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1ea      	bne.n	8003f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8097 	beq.w	800409c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f72:	4b81      	ldr	r3, [pc, #516]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10f      	bne.n	8003f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	4b7d      	ldr	r3, [pc, #500]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	4a7c      	ldr	r2, [pc, #496]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f8e:	4b7a      	ldr	r3, [pc, #488]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9e:	4b77      	ldr	r3, [pc, #476]	; (800417c <HAL_RCC_OscConfig+0x474>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d118      	bne.n	8003fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003faa:	4b74      	ldr	r3, [pc, #464]	; (800417c <HAL_RCC_OscConfig+0x474>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a73      	ldr	r2, [pc, #460]	; (800417c <HAL_RCC_OscConfig+0x474>)
 8003fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fb6:	f7fe fba3 	bl	8002700 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbe:	f7fe fb9f 	bl	8002700 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e10c      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd0:	4b6a      	ldr	r3, [pc, #424]	; (800417c <HAL_RCC_OscConfig+0x474>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d106      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x2ea>
 8003fe4:	4b64      	ldr	r3, [pc, #400]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe8:	4a63      	ldr	r2, [pc, #396]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff0:	e01c      	b.n	800402c <HAL_RCC_OscConfig+0x324>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b05      	cmp	r3, #5
 8003ff8:	d10c      	bne.n	8004014 <HAL_RCC_OscConfig+0x30c>
 8003ffa:	4b5f      	ldr	r3, [pc, #380]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	4a5e      	ldr	r2, [pc, #376]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004000:	f043 0304 	orr.w	r3, r3, #4
 8004004:	6713      	str	r3, [r2, #112]	; 0x70
 8004006:	4b5c      	ldr	r3, [pc, #368]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	4a5b      	ldr	r2, [pc, #364]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	6713      	str	r3, [r2, #112]	; 0x70
 8004012:	e00b      	b.n	800402c <HAL_RCC_OscConfig+0x324>
 8004014:	4b58      	ldr	r3, [pc, #352]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004018:	4a57      	ldr	r2, [pc, #348]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	6713      	str	r3, [r2, #112]	; 0x70
 8004020:	4b55      	ldr	r3, [pc, #340]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	4a54      	ldr	r2, [pc, #336]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004026:	f023 0304 	bic.w	r3, r3, #4
 800402a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d015      	beq.n	8004060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004034:	f7fe fb64 	bl	8002700 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403a:	e00a      	b.n	8004052 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800403c:	f7fe fb60 	bl	8002700 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	; 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e0cb      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004052:	4b49      	ldr	r3, [pc, #292]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0ee      	beq.n	800403c <HAL_RCC_OscConfig+0x334>
 800405e:	e014      	b.n	800408a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004060:	f7fe fb4e 	bl	8002700 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004066:	e00a      	b.n	800407e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004068:	f7fe fb4a 	bl	8002700 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f241 3288 	movw	r2, #5000	; 0x1388
 8004076:	4293      	cmp	r3, r2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e0b5      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800407e:	4b3e      	ldr	r3, [pc, #248]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1ee      	bne.n	8004068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800408a:	7dfb      	ldrb	r3, [r7, #23]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d105      	bne.n	800409c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004090:	4b39      	ldr	r3, [pc, #228]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	4a38      	ldr	r2, [pc, #224]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 80a1 	beq.w	80041e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040a6:	4b34      	ldr	r3, [pc, #208]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d05c      	beq.n	800416c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d141      	bne.n	800413e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ba:	4b31      	ldr	r3, [pc, #196]	; (8004180 <HAL_RCC_OscConfig+0x478>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7fe fb1e 	bl	8002700 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fe fb1a 	bl	8002700 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e087      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	4b27      	ldr	r3, [pc, #156]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69da      	ldr	r2, [r3, #28]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	019b      	lsls	r3, r3, #6
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	085b      	lsrs	r3, r3, #1
 80040fe:	3b01      	subs	r3, #1
 8004100:	041b      	lsls	r3, r3, #16
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	061b      	lsls	r3, r3, #24
 800410a:	491b      	ldr	r1, [pc, #108]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004110:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <HAL_RCC_OscConfig+0x478>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004116:	f7fe faf3 	bl	8002700 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800411e:	f7fe faef 	bl	8002700 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e05c      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f0      	beq.n	800411e <HAL_RCC_OscConfig+0x416>
 800413c:	e054      	b.n	80041e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413e:	4b10      	ldr	r3, [pc, #64]	; (8004180 <HAL_RCC_OscConfig+0x478>)
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004144:	f7fe fadc 	bl	8002700 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800414c:	f7fe fad8 	bl	8002700 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e045      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x444>
 800416a:	e03d      	b.n	80041e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d107      	bne.n	8004184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e038      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
 8004178:	40023800 	.word	0x40023800
 800417c:	40007000 	.word	0x40007000
 8004180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004184:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <HAL_RCC_OscConfig+0x4ec>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d028      	beq.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d121      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d11a      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041b4:	4013      	ands	r3, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041bc:	4293      	cmp	r3, r2
 80041be:	d111      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	3b01      	subs	r3, #1
 80041ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d107      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40023800 	.word	0x40023800

080041f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0cc      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800420c:	4b68      	ldr	r3, [pc, #416]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d90c      	bls.n	8004234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	4b65      	ldr	r3, [pc, #404]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004222:	4b63      	ldr	r3, [pc, #396]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0b8      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d020      	beq.n	8004282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800424c:	4b59      	ldr	r3, [pc, #356]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	4a58      	ldr	r2, [pc, #352]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004264:	4b53      	ldr	r3, [pc, #332]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	4a52      	ldr	r2, [pc, #328]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800426e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004270:	4b50      	ldr	r3, [pc, #320]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	494d      	ldr	r1, [pc, #308]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d044      	beq.n	8004318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	4b47      	ldr	r3, [pc, #284]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d119      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e07f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d003      	beq.n	80042b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b6:	4b3f      	ldr	r3, [pc, #252]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e06f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c6:	4b3b      	ldr	r3, [pc, #236]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e067      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042d6:	4b37      	ldr	r3, [pc, #220]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f023 0203 	bic.w	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4934      	ldr	r1, [pc, #208]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042e8:	f7fe fa0a 	bl	8002700 <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f0:	f7fe fa06 	bl	8002700 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e04f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004306:	4b2b      	ldr	r3, [pc, #172]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 020c 	and.w	r2, r3, #12
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	429a      	cmp	r2, r3
 8004316:	d1eb      	bne.n	80042f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004318:	4b25      	ldr	r3, [pc, #148]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d20c      	bcs.n	8004340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004326:	4b22      	ldr	r3, [pc, #136]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800432e:	4b20      	ldr	r3, [pc, #128]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d001      	beq.n	8004340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e032      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800434c:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4916      	ldr	r1, [pc, #88]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	490e      	ldr	r1, [pc, #56]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800437e:	f000 f821 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 8004382:	4602      	mov	r2, r0
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	490a      	ldr	r1, [pc, #40]	; (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	5ccb      	ldrb	r3, [r1, r3]
 8004392:	fa22 f303 	lsr.w	r3, r2, r3
 8004396:	4a09      	ldr	r2, [pc, #36]	; (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800439a:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <HAL_RCC_ClockConfig+0x1c8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fd ffbc 	bl	800231c <HAL_InitTick>

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40023c00 	.word	0x40023c00
 80043b4:	40023800 	.word	0x40023800
 80043b8:	08013534 	.word	0x08013534
 80043bc:	20000004 	.word	0x20000004
 80043c0:	20000008 	.word	0x20000008

080043c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c8:	b094      	sub	sp, #80	; 0x50
 80043ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	647b      	str	r3, [r7, #68]	; 0x44
 80043d0:	2300      	movs	r3, #0
 80043d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d4:	2300      	movs	r3, #0
 80043d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043dc:	4b79      	ldr	r3, [pc, #484]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 030c 	and.w	r3, r3, #12
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d00d      	beq.n	8004404 <HAL_RCC_GetSysClockFreq+0x40>
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	f200 80e1 	bhi.w	80045b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x34>
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_GetSysClockFreq+0x3a>
 80043f6:	e0db      	b.n	80045b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043f8:	4b73      	ldr	r3, [pc, #460]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80043fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80043fc:	e0db      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043fe:	4b73      	ldr	r3, [pc, #460]	; (80045cc <HAL_RCC_GetSysClockFreq+0x208>)
 8004400:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004402:	e0d8      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004404:	4b6f      	ldr	r3, [pc, #444]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800440c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800440e:	4b6d      	ldr	r3, [pc, #436]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d063      	beq.n	80044e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800441a:	4b6a      	ldr	r3, [pc, #424]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	099b      	lsrs	r3, r3, #6
 8004420:	2200      	movs	r2, #0
 8004422:	63bb      	str	r3, [r7, #56]	; 0x38
 8004424:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442c:	633b      	str	r3, [r7, #48]	; 0x30
 800442e:	2300      	movs	r3, #0
 8004430:	637b      	str	r3, [r7, #52]	; 0x34
 8004432:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004436:	4622      	mov	r2, r4
 8004438:	462b      	mov	r3, r5
 800443a:	f04f 0000 	mov.w	r0, #0
 800443e:	f04f 0100 	mov.w	r1, #0
 8004442:	0159      	lsls	r1, r3, #5
 8004444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004448:	0150      	lsls	r0, r2, #5
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4621      	mov	r1, r4
 8004450:	1a51      	subs	r1, r2, r1
 8004452:	6139      	str	r1, [r7, #16]
 8004454:	4629      	mov	r1, r5
 8004456:	eb63 0301 	sbc.w	r3, r3, r1
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004468:	4659      	mov	r1, fp
 800446a:	018b      	lsls	r3, r1, #6
 800446c:	4651      	mov	r1, sl
 800446e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004472:	4651      	mov	r1, sl
 8004474:	018a      	lsls	r2, r1, #6
 8004476:	4651      	mov	r1, sl
 8004478:	ebb2 0801 	subs.w	r8, r2, r1
 800447c:	4659      	mov	r1, fp
 800447e:	eb63 0901 	sbc.w	r9, r3, r1
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800448e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004496:	4690      	mov	r8, r2
 8004498:	4699      	mov	r9, r3
 800449a:	4623      	mov	r3, r4
 800449c:	eb18 0303 	adds.w	r3, r8, r3
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	462b      	mov	r3, r5
 80044a4:	eb49 0303 	adc.w	r3, r9, r3
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044b6:	4629      	mov	r1, r5
 80044b8:	024b      	lsls	r3, r1, #9
 80044ba:	4621      	mov	r1, r4
 80044bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044c0:	4621      	mov	r1, r4
 80044c2:	024a      	lsls	r2, r1, #9
 80044c4:	4610      	mov	r0, r2
 80044c6:	4619      	mov	r1, r3
 80044c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ca:	2200      	movs	r2, #0
 80044cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044d4:	f7fc fa42 	bl	800095c <__aeabi_uldivmod>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4613      	mov	r3, r2
 80044de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e0:	e058      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e2:	4b38      	ldr	r3, [pc, #224]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	2200      	movs	r2, #0
 80044ea:	4618      	mov	r0, r3
 80044ec:	4611      	mov	r1, r2
 80044ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044f2:	623b      	str	r3, [r7, #32]
 80044f4:	2300      	movs	r3, #0
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
 80044f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044fc:	4642      	mov	r2, r8
 80044fe:	464b      	mov	r3, r9
 8004500:	f04f 0000 	mov.w	r0, #0
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	0159      	lsls	r1, r3, #5
 800450a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800450e:	0150      	lsls	r0, r2, #5
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4641      	mov	r1, r8
 8004516:	ebb2 0a01 	subs.w	sl, r2, r1
 800451a:	4649      	mov	r1, r9
 800451c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800452c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004530:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004534:	ebb2 040a 	subs.w	r4, r2, sl
 8004538:	eb63 050b 	sbc.w	r5, r3, fp
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	00eb      	lsls	r3, r5, #3
 8004546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800454a:	00e2      	lsls	r2, r4, #3
 800454c:	4614      	mov	r4, r2
 800454e:	461d      	mov	r5, r3
 8004550:	4643      	mov	r3, r8
 8004552:	18e3      	adds	r3, r4, r3
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	464b      	mov	r3, r9
 8004558:	eb45 0303 	adc.w	r3, r5, r3
 800455c:	607b      	str	r3, [r7, #4]
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800456a:	4629      	mov	r1, r5
 800456c:	028b      	lsls	r3, r1, #10
 800456e:	4621      	mov	r1, r4
 8004570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004574:	4621      	mov	r1, r4
 8004576:	028a      	lsls	r2, r1, #10
 8004578:	4610      	mov	r0, r2
 800457a:	4619      	mov	r1, r3
 800457c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800457e:	2200      	movs	r2, #0
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	61fa      	str	r2, [r7, #28]
 8004584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004588:	f7fc f9e8 	bl	800095c <__aeabi_uldivmod>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4613      	mov	r3, r2
 8004592:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004594:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	0c1b      	lsrs	r3, r3, #16
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	3301      	adds	r3, #1
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80045a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045ae:	e002      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045b0:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80045b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3750      	adds	r7, #80	; 0x50
 80045bc:	46bd      	mov	sp, r7
 80045be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800
 80045c8:	00f42400 	.word	0x00f42400
 80045cc:	007a1200 	.word	0x007a1200

080045d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d4:	4b03      	ldr	r3, [pc, #12]	; (80045e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045d6:	681b      	ldr	r3, [r3, #0]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000004 	.word	0x20000004

080045e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045ec:	f7ff fff0 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b05      	ldr	r3, [pc, #20]	; (8004608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	0a9b      	lsrs	r3, r3, #10
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	4903      	ldr	r1, [pc, #12]	; (800460c <HAL_RCC_GetPCLK1Freq+0x24>)
 80045fe:	5ccb      	ldrb	r3, [r1, r3]
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004604:	4618      	mov	r0, r3
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40023800 	.word	0x40023800
 800460c:	08013544 	.word	0x08013544

08004610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004614:	f7ff ffdc 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 8004618:	4602      	mov	r2, r0
 800461a:	4b05      	ldr	r3, [pc, #20]	; (8004630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	0b5b      	lsrs	r3, r3, #13
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	4903      	ldr	r1, [pc, #12]	; (8004634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004626:	5ccb      	ldrb	r3, [r1, r3]
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800462c:	4618      	mov	r0, r3
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40023800 	.word	0x40023800
 8004634:	08013544 	.word	0x08013544

08004638 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	220f      	movs	r2, #15
 8004646:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004648:	4b12      	ldr	r3, [pc, #72]	; (8004694 <HAL_RCC_GetClockConfig+0x5c>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 0203 	and.w	r2, r3, #3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004654:	4b0f      	ldr	r3, [pc, #60]	; (8004694 <HAL_RCC_GetClockConfig+0x5c>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <HAL_RCC_GetClockConfig+0x5c>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800466c:	4b09      	ldr	r3, [pc, #36]	; (8004694 <HAL_RCC_GetClockConfig+0x5c>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	08db      	lsrs	r3, r3, #3
 8004672:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800467a:	4b07      	ldr	r3, [pc, #28]	; (8004698 <HAL_RCC_GetClockConfig+0x60>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0207 	and.w	r2, r3, #7
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	601a      	str	r2, [r3, #0]
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40023800 	.word	0x40023800
 8004698:	40023c00 	.word	0x40023c00

0800469c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e041      	b.n	8004732 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fd fd50 	bl	8002168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	4619      	mov	r1, r3
 80046da:	4610      	mov	r0, r2
 80046dc:	f000 faca 	bl	8004c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	d001      	beq.n	8004754 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e03c      	b.n	80047ce <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a1e      	ldr	r2, [pc, #120]	; (80047dc <HAL_TIM_Base_Start+0xa0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d018      	beq.n	8004798 <HAL_TIM_Base_Start+0x5c>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476e:	d013      	beq.n	8004798 <HAL_TIM_Base_Start+0x5c>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1a      	ldr	r2, [pc, #104]	; (80047e0 <HAL_TIM_Base_Start+0xa4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00e      	beq.n	8004798 <HAL_TIM_Base_Start+0x5c>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <HAL_TIM_Base_Start+0xa8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d009      	beq.n	8004798 <HAL_TIM_Base_Start+0x5c>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a17      	ldr	r2, [pc, #92]	; (80047e8 <HAL_TIM_Base_Start+0xac>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d004      	beq.n	8004798 <HAL_TIM_Base_Start+0x5c>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a16      	ldr	r2, [pc, #88]	; (80047ec <HAL_TIM_Base_Start+0xb0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d111      	bne.n	80047bc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b06      	cmp	r3, #6
 80047a8:	d010      	beq.n	80047cc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0201 	orr.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ba:	e007      	b.n	80047cc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40010000 	.word	0x40010000
 80047e0:	40000400 	.word	0x40000400
 80047e4:	40000800 	.word	0x40000800
 80047e8:	40000c00 	.word	0x40000c00
 80047ec:	40014000 	.word	0x40014000

080047f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d001      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e044      	b.n	8004892 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1e      	ldr	r2, [pc, #120]	; (80048a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d018      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x6c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004832:	d013      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x6c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a1a      	ldr	r2, [pc, #104]	; (80048a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00e      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x6c>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a19      	ldr	r2, [pc, #100]	; (80048a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d009      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x6c>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a17      	ldr	r2, [pc, #92]	; (80048ac <HAL_TIM_Base_Start_IT+0xbc>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d004      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x6c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a16      	ldr	r2, [pc, #88]	; (80048b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d111      	bne.n	8004880 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b06      	cmp	r3, #6
 800486c:	d010      	beq.n	8004890 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0201 	orr.w	r2, r2, #1
 800487c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487e:	e007      	b.n	8004890 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40010000 	.word	0x40010000
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40000c00 	.word	0x40000c00
 80048b0:	40014000 	.word	0x40014000

080048b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d020      	beq.n	8004918 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01b      	beq.n	8004918 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f06f 0202 	mvn.w	r2, #2
 80048e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f999 	bl	8004c36 <HAL_TIM_IC_CaptureCallback>
 8004904:	e005      	b.n	8004912 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f98b 	bl	8004c22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f99c 	bl	8004c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	2b00      	cmp	r3, #0
 8004920:	d020      	beq.n	8004964 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d01b      	beq.n	8004964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f06f 0204 	mvn.w	r2, #4
 8004934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2202      	movs	r2, #2
 800493a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f973 	bl	8004c36 <HAL_TIM_IC_CaptureCallback>
 8004950:	e005      	b.n	800495e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f965 	bl	8004c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f976 	bl	8004c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d020      	beq.n	80049b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01b      	beq.n	80049b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0208 	mvn.w	r2, #8
 8004980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2204      	movs	r2, #4
 8004986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f94d 	bl	8004c36 <HAL_TIM_IC_CaptureCallback>
 800499c:	e005      	b.n	80049aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f93f 	bl	8004c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f950 	bl	8004c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d020      	beq.n	80049fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d01b      	beq.n	80049fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0210 	mvn.w	r2, #16
 80049cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2208      	movs	r2, #8
 80049d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f927 	bl	8004c36 <HAL_TIM_IC_CaptureCallback>
 80049e8:	e005      	b.n	80049f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f919 	bl	8004c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f92a 	bl	8004c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00c      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d007      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0201 	mvn.w	r2, #1
 8004a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fd f9ae 	bl	8001d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00c      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d007      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fab6 	bl	8004fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00c      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f8fb 	bl	8004c5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00c      	beq.n	8004a8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d007      	beq.n	8004a8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0220 	mvn.w	r2, #32
 8004a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fa88 	bl	8004f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a8c:	bf00      	nop
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_TIM_ConfigClockSource+0x1c>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e0b4      	b.n	8004c1a <HAL_TIM_ConfigClockSource+0x186>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ad6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ae8:	d03e      	beq.n	8004b68 <HAL_TIM_ConfigClockSource+0xd4>
 8004aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aee:	f200 8087 	bhi.w	8004c00 <HAL_TIM_ConfigClockSource+0x16c>
 8004af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af6:	f000 8086 	beq.w	8004c06 <HAL_TIM_ConfigClockSource+0x172>
 8004afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afe:	d87f      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x16c>
 8004b00:	2b70      	cmp	r3, #112	; 0x70
 8004b02:	d01a      	beq.n	8004b3a <HAL_TIM_ConfigClockSource+0xa6>
 8004b04:	2b70      	cmp	r3, #112	; 0x70
 8004b06:	d87b      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x16c>
 8004b08:	2b60      	cmp	r3, #96	; 0x60
 8004b0a:	d050      	beq.n	8004bae <HAL_TIM_ConfigClockSource+0x11a>
 8004b0c:	2b60      	cmp	r3, #96	; 0x60
 8004b0e:	d877      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x16c>
 8004b10:	2b50      	cmp	r3, #80	; 0x50
 8004b12:	d03c      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0xfa>
 8004b14:	2b50      	cmp	r3, #80	; 0x50
 8004b16:	d873      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x16c>
 8004b18:	2b40      	cmp	r3, #64	; 0x40
 8004b1a:	d058      	beq.n	8004bce <HAL_TIM_ConfigClockSource+0x13a>
 8004b1c:	2b40      	cmp	r3, #64	; 0x40
 8004b1e:	d86f      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x16c>
 8004b20:	2b30      	cmp	r3, #48	; 0x30
 8004b22:	d064      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x15a>
 8004b24:	2b30      	cmp	r3, #48	; 0x30
 8004b26:	d86b      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x16c>
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	d060      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x15a>
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d867      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x16c>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d05c      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x15a>
 8004b34:	2b10      	cmp	r3, #16
 8004b36:	d05a      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x15a>
 8004b38:	e062      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b4a:	f000 f999 	bl	8004e80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	609a      	str	r2, [r3, #8]
      break;
 8004b66:	e04f      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b78:	f000 f982 	bl	8004e80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b8a:	609a      	str	r2, [r3, #8]
      break;
 8004b8c:	e03c      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f000 f8f6 	bl	8004d8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2150      	movs	r1, #80	; 0x50
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 f94f 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004bac:	e02c      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f000 f915 	bl	8004dea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2160      	movs	r1, #96	; 0x60
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 f93f 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004bcc:	e01c      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f000 f8d6 	bl	8004d8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2140      	movs	r1, #64	; 0x40
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 f92f 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004bec:	e00c      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	f000 f926 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004bfe:	e003      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	73fb      	strb	r3, [r7, #15]
      break;
 8004c04:	e000      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
	...

08004c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a3a      	ldr	r2, [pc, #232]	; (8004d70 <TIM_Base_SetConfig+0xfc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00f      	beq.n	8004cac <TIM_Base_SetConfig+0x38>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c92:	d00b      	beq.n	8004cac <TIM_Base_SetConfig+0x38>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a37      	ldr	r2, [pc, #220]	; (8004d74 <TIM_Base_SetConfig+0x100>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d007      	beq.n	8004cac <TIM_Base_SetConfig+0x38>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a36      	ldr	r2, [pc, #216]	; (8004d78 <TIM_Base_SetConfig+0x104>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d003      	beq.n	8004cac <TIM_Base_SetConfig+0x38>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a35      	ldr	r2, [pc, #212]	; (8004d7c <TIM_Base_SetConfig+0x108>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d108      	bne.n	8004cbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a2b      	ldr	r2, [pc, #172]	; (8004d70 <TIM_Base_SetConfig+0xfc>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d01b      	beq.n	8004cfe <TIM_Base_SetConfig+0x8a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ccc:	d017      	beq.n	8004cfe <TIM_Base_SetConfig+0x8a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a28      	ldr	r2, [pc, #160]	; (8004d74 <TIM_Base_SetConfig+0x100>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d013      	beq.n	8004cfe <TIM_Base_SetConfig+0x8a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a27      	ldr	r2, [pc, #156]	; (8004d78 <TIM_Base_SetConfig+0x104>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00f      	beq.n	8004cfe <TIM_Base_SetConfig+0x8a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a26      	ldr	r2, [pc, #152]	; (8004d7c <TIM_Base_SetConfig+0x108>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00b      	beq.n	8004cfe <TIM_Base_SetConfig+0x8a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a25      	ldr	r2, [pc, #148]	; (8004d80 <TIM_Base_SetConfig+0x10c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d007      	beq.n	8004cfe <TIM_Base_SetConfig+0x8a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a24      	ldr	r2, [pc, #144]	; (8004d84 <TIM_Base_SetConfig+0x110>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d003      	beq.n	8004cfe <TIM_Base_SetConfig+0x8a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a23      	ldr	r2, [pc, #140]	; (8004d88 <TIM_Base_SetConfig+0x114>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d108      	bne.n	8004d10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a0e      	ldr	r2, [pc, #56]	; (8004d70 <TIM_Base_SetConfig+0xfc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d103      	bne.n	8004d44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d105      	bne.n	8004d62 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f023 0201 	bic.w	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	611a      	str	r2, [r3, #16]
  }
}
 8004d62:	bf00      	nop
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40010000 	.word	0x40010000
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40000800 	.word	0x40000800
 8004d7c:	40000c00 	.word	0x40000c00
 8004d80:	40014000 	.word	0x40014000
 8004d84:	40014400 	.word	0x40014400
 8004d88:	40014800 	.word	0x40014800

08004d8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f023 0201 	bic.w	r2, r3, #1
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004db6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f023 030a 	bic.w	r3, r3, #10
 8004dc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	621a      	str	r2, [r3, #32]
}
 8004dde:	bf00      	nop
 8004de0:	371c      	adds	r7, #28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b087      	sub	sp, #28
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	f023 0210 	bic.w	r2, r3, #16
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	031b      	lsls	r3, r3, #12
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	621a      	str	r2, [r3, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b085      	sub	sp, #20
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f043 0307 	orr.w	r3, r3, #7
 8004e6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	609a      	str	r2, [r3, #8]
}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	021a      	lsls	r2, r3, #8
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	609a      	str	r2, [r3, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e050      	b.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1c      	ldr	r2, [pc, #112]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d018      	beq.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f24:	d013      	beq.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a18      	ldr	r2, [pc, #96]	; (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00e      	beq.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a16      	ldr	r2, [pc, #88]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d009      	beq.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a15      	ldr	r2, [pc, #84]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d004      	beq.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a13      	ldr	r2, [pc, #76]	; (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d10c      	bne.n	8004f68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40010000 	.word	0x40010000
 8004f8c:	40000400 	.word	0x40000400
 8004f90:	40000800 	.word	0x40000800
 8004f94:	40000c00 	.word	0x40000c00
 8004f98:	40014000 	.word	0x40014000

08004f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e042      	b.n	800505c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fd f8de 	bl	80021ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2224      	movs	r2, #36	; 0x24
 8004ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005006:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 ffc9 	bl	8005fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800501c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	695a      	ldr	r2, [r3, #20]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800502c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800503c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08c      	sub	sp, #48	; 0x30
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	4613      	mov	r3, r2
 8005070:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b20      	cmp	r3, #32
 800507c:	d156      	bne.n	800512c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <HAL_UART_Transmit_DMA+0x26>
 8005084:	88fb      	ldrh	r3, [r7, #6]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e04f      	b.n	800512e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	88fa      	ldrh	r2, [r7, #6]
 8005098:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	88fa      	ldrh	r2, [r7, #6]
 800509e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2221      	movs	r2, #33	; 0x21
 80050aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b2:	4a21      	ldr	r2, [pc, #132]	; (8005138 <HAL_UART_Transmit_DMA+0xd4>)
 80050b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	4a20      	ldr	r2, [pc, #128]	; (800513c <HAL_UART_Transmit_DMA+0xd8>)
 80050bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	4a1f      	ldr	r2, [pc, #124]	; (8005140 <HAL_UART_Transmit_DMA+0xdc>)
 80050c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	2200      	movs	r2, #0
 80050cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80050ce:	f107 0308 	add.w	r3, r7, #8
 80050d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80050d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050da:	6819      	ldr	r1, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3304      	adds	r3, #4
 80050e2:	461a      	mov	r2, r3
 80050e4:	88fb      	ldrh	r3, [r7, #6]
 80050e6:	f7fe f903 	bl	80032f0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050f2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3314      	adds	r3, #20
 80050fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	617b      	str	r3, [r7, #20]
   return(result);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800510a:	62bb      	str	r3, [r7, #40]	; 0x28
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3314      	adds	r3, #20
 8005112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005114:	627a      	str	r2, [r7, #36]	; 0x24
 8005116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	6a39      	ldr	r1, [r7, #32]
 800511a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	61fb      	str	r3, [r7, #28]
   return(result);
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e5      	bne.n	80050f4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	e000      	b.n	800512e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800512c:	2302      	movs	r3, #2
  }
}
 800512e:	4618      	mov	r0, r3
 8005130:	3730      	adds	r7, #48	; 0x30
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	0800582d 	.word	0x0800582d
 800513c:	080058c7 	.word	0x080058c7
 8005140:	08005a4b 	.word	0x08005a4b

08005144 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	4613      	mov	r3, r2
 8005150:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b20      	cmp	r3, #32
 800515c:	d112      	bne.n	8005184 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <HAL_UART_Receive_DMA+0x26>
 8005164:	88fb      	ldrh	r3, [r7, #6]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e00b      	b.n	8005186 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005174:	88fb      	ldrh	r3, [r7, #6]
 8005176:	461a      	mov	r2, r3
 8005178:	68b9      	ldr	r1, [r7, #8]
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 fcb0 	bl	8005ae0 <UART_Start_Receive_DMA>
 8005180:	4603      	mov	r3, r0
 8005182:	e000      	b.n	8005186 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005184:	2302      	movs	r3, #2
  }
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b090      	sub	sp, #64	; 0x40
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005196:	2300      	movs	r3, #0
 8005198:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a4:	2b80      	cmp	r3, #128	; 0x80
 80051a6:	bf0c      	ite	eq
 80051a8:	2301      	moveq	r3, #1
 80051aa:	2300      	movne	r3, #0
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b21      	cmp	r3, #33	; 0x21
 80051ba:	d128      	bne.n	800520e <HAL_UART_DMAStop+0x80>
 80051bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d025      	beq.n	800520e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3314      	adds	r3, #20
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	623b      	str	r3, [r7, #32]
   return(result);
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3314      	adds	r3, #20
 80051e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051e2:	633a      	str	r2, [r7, #48]	; 0x30
 80051e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e5      	bne.n	80051c2 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d004      	beq.n	8005208 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005202:	4618      	mov	r0, r3
 8005204:	f7fe f8cc 	bl	80033a0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fd03 	bl	8005c14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005218:	2b40      	cmp	r3, #64	; 0x40
 800521a:	bf0c      	ite	eq
 800521c:	2301      	moveq	r3, #1
 800521e:	2300      	movne	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b22      	cmp	r3, #34	; 0x22
 800522e:	d128      	bne.n	8005282 <HAL_UART_DMAStop+0xf4>
 8005230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005232:	2b00      	cmp	r3, #0
 8005234:	d025      	beq.n	8005282 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3314      	adds	r3, #20
 800523c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	60fb      	str	r3, [r7, #12]
   return(result);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800524c:	637b      	str	r3, [r7, #52]	; 0x34
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3314      	adds	r3, #20
 8005254:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005256:	61fa      	str	r2, [r7, #28]
 8005258:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	69b9      	ldr	r1, [r7, #24]
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	617b      	str	r3, [r7, #20]
   return(result);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e5      	bne.n	8005236 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d004      	beq.n	800527c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005276:	4618      	mov	r0, r3
 8005278:	f7fe f892 	bl	80033a0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fcf1 	bl	8005c64 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3740      	adds	r7, #64	; 0x40
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b0ba      	sub	sp, #232	; 0xe8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10f      	bne.n	80052f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d009      	beq.n	80052f2 <HAL_UART_IRQHandler+0x66>
 80052de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fd99 	bl	8005e22 <UART_Receive_IT>
      return;
 80052f0:	e25b      	b.n	80057aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 80de 	beq.w	80054b8 <HAL_UART_IRQHandler+0x22c>
 80052fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800530c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 80d1 	beq.w	80054b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00b      	beq.n	800533a <HAL_UART_IRQHandler+0xae>
 8005322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005332:	f043 0201 	orr.w	r2, r3, #1
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800533a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00b      	beq.n	800535e <HAL_UART_IRQHandler+0xd2>
 8005346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d005      	beq.n	800535e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005356:	f043 0202 	orr.w	r2, r3, #2
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800535e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00b      	beq.n	8005382 <HAL_UART_IRQHandler+0xf6>
 800536a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d005      	beq.n	8005382 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537a:	f043 0204 	orr.w	r2, r3, #4
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b00      	cmp	r3, #0
 800538c:	d011      	beq.n	80053b2 <HAL_UART_IRQHandler+0x126>
 800538e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d105      	bne.n	80053a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800539a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d005      	beq.n	80053b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053aa:	f043 0208 	orr.w	r2, r3, #8
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 81f2 	beq.w	80057a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d008      	beq.n	80053da <HAL_UART_IRQHandler+0x14e>
 80053c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d002      	beq.n	80053da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 fd24 	bl	8005e22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e4:	2b40      	cmp	r3, #64	; 0x40
 80053e6:	bf0c      	ite	eq
 80053e8:	2301      	moveq	r3, #1
 80053ea:	2300      	movne	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <HAL_UART_IRQHandler+0x17a>
 80053fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005402:	2b00      	cmp	r3, #0
 8005404:	d04f      	beq.n	80054a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fc2c 	bl	8005c64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005416:	2b40      	cmp	r3, #64	; 0x40
 8005418:	d141      	bne.n	800549e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3314      	adds	r3, #20
 8005420:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005430:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3314      	adds	r3, #20
 8005442:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005446:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800544a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005452:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800545e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1d9      	bne.n	800541a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546a:	2b00      	cmp	r3, #0
 800546c:	d013      	beq.n	8005496 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005472:	4a7e      	ldr	r2, [pc, #504]	; (800566c <HAL_UART_IRQHandler+0x3e0>)
 8005474:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547a:	4618      	mov	r0, r3
 800547c:	f7fe f800 	bl	8003480 <HAL_DMA_Abort_IT>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d016      	beq.n	80054b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005490:	4610      	mov	r0, r2
 8005492:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005494:	e00e      	b.n	80054b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f9b2 	bl	8005800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800549c:	e00a      	b.n	80054b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f9ae 	bl	8005800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a4:	e006      	b.n	80054b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f9aa 	bl	8005800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80054b2:	e175      	b.n	80057a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b4:	bf00      	nop
    return;
 80054b6:	e173      	b.n	80057a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	2b01      	cmp	r3, #1
 80054be:	f040 814f 	bne.w	8005760 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c6:	f003 0310 	and.w	r3, r3, #16
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 8148 	beq.w	8005760 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d4:	f003 0310 	and.w	r3, r3, #16
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 8141 	beq.w	8005760 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054de:	2300      	movs	r3, #0
 80054e0:	60bb      	str	r3, [r7, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60bb      	str	r3, [r7, #8]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	60bb      	str	r3, [r7, #8]
 80054f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fe:	2b40      	cmp	r3, #64	; 0x40
 8005500:	f040 80b6 	bne.w	8005670 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005510:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8145 	beq.w	80057a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800551e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005522:	429a      	cmp	r2, r3
 8005524:	f080 813e 	bcs.w	80057a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800552e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800553a:	f000 8088 	beq.w	800564e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	330c      	adds	r3, #12
 8005544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005554:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800555c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	330c      	adds	r3, #12
 8005566:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800556a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800556e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005576:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005582:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1d9      	bne.n	800553e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3314      	adds	r3, #20
 8005590:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800559a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800559c:	f023 0301 	bic.w	r3, r3, #1
 80055a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3314      	adds	r3, #20
 80055aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e1      	bne.n	800558a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	3314      	adds	r3, #20
 80055cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3314      	adds	r3, #20
 80055e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e3      	bne.n	80055c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	330c      	adds	r3, #12
 8005612:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005616:	e853 3f00 	ldrex	r3, [r3]
 800561a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800561c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800561e:	f023 0310 	bic.w	r3, r3, #16
 8005622:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	330c      	adds	r3, #12
 800562c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005630:	65ba      	str	r2, [r7, #88]	; 0x58
 8005632:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005636:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800563e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e3      	bne.n	800560c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005648:	4618      	mov	r0, r3
 800564a:	f7fd fea9 	bl	80033a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2202      	movs	r2, #2
 8005652:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800565c:	b29b      	uxth	r3, r3
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	b29b      	uxth	r3, r3
 8005662:	4619      	mov	r1, r3
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f8d5 	bl	8005814 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800566a:	e09b      	b.n	80057a4 <HAL_UART_IRQHandler+0x518>
 800566c:	08005d2b 	.word	0x08005d2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005678:	b29b      	uxth	r3, r3
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 808e 	beq.w	80057a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800568c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 8089 	beq.w	80057a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	330c      	adds	r3, #12
 800569c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	330c      	adds	r3, #12
 80056b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80056ba:	647a      	str	r2, [r7, #68]	; 0x44
 80056bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e3      	bne.n	8005696 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3314      	adds	r3, #20
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	623b      	str	r3, [r7, #32]
   return(result);
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	f023 0301 	bic.w	r3, r3, #1
 80056e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3314      	adds	r3, #20
 80056ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056f2:	633a      	str	r2, [r7, #48]	; 0x30
 80056f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e3      	bne.n	80056ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	330c      	adds	r3, #12
 800571a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	e853 3f00 	ldrex	r3, [r3]
 8005722:	60fb      	str	r3, [r7, #12]
   return(result);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0310 	bic.w	r3, r3, #16
 800572a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	330c      	adds	r3, #12
 8005734:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005738:	61fa      	str	r2, [r7, #28]
 800573a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	69b9      	ldr	r1, [r7, #24]
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	617b      	str	r3, [r7, #20]
   return(result);
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e3      	bne.n	8005714 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005752:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f85b 	bl	8005814 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800575e:	e023      	b.n	80057a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005768:	2b00      	cmp	r3, #0
 800576a:	d009      	beq.n	8005780 <HAL_UART_IRQHandler+0x4f4>
 800576c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 faea 	bl	8005d52 <UART_Transmit_IT>
    return;
 800577e:	e014      	b.n	80057aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00e      	beq.n	80057aa <HAL_UART_IRQHandler+0x51e>
 800578c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005794:	2b00      	cmp	r3, #0
 8005796:	d008      	beq.n	80057aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fb2a 	bl	8005df2 <UART_EndTransmit_IT>
    return;
 800579e:	e004      	b.n	80057aa <HAL_UART_IRQHandler+0x51e>
    return;
 80057a0:	bf00      	nop
 80057a2:	e002      	b.n	80057aa <HAL_UART_IRQHandler+0x51e>
      return;
 80057a4:	bf00      	nop
 80057a6:	e000      	b.n	80057aa <HAL_UART_IRQHandler+0x51e>
      return;
 80057a8:	bf00      	nop
  }
}
 80057aa:	37e8      	adds	r7, #232	; 0xe8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b090      	sub	sp, #64	; 0x40
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005844:	2b00      	cmp	r3, #0
 8005846:	d137      	bne.n	80058b8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800584a:	2200      	movs	r2, #0
 800584c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800584e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3314      	adds	r3, #20
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	623b      	str	r3, [r7, #32]
   return(result);
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005864:	63bb      	str	r3, [r7, #56]	; 0x38
 8005866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3314      	adds	r3, #20
 800586c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800586e:	633a      	str	r2, [r7, #48]	; 0x30
 8005870:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e5      	bne.n	800584e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	60fb      	str	r3, [r7, #12]
   return(result);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005898:	637b      	str	r3, [r7, #52]	; 0x34
 800589a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058a2:	61fa      	str	r2, [r7, #28]
 80058a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	69b9      	ldr	r1, [r7, #24]
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	617b      	str	r3, [r7, #20]
   return(result);
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e5      	bne.n	8005882 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058b6:	e002      	b.n	80058be <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80058b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80058ba:	f7ff ff79 	bl	80057b0 <HAL_UART_TxCpltCallback>
}
 80058be:	bf00      	nop
 80058c0:	3740      	adds	r7, #64	; 0x40
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f7ff ff75 	bl	80057c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058da:	bf00      	nop
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b09c      	sub	sp, #112	; 0x70
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d172      	bne.n	80059e4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80058fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005900:	2200      	movs	r2, #0
 8005902:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	330c      	adds	r3, #12
 800590a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800590e:	e853 3f00 	ldrex	r3, [r3]
 8005912:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005916:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800591a:	66bb      	str	r3, [r7, #104]	; 0x68
 800591c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	330c      	adds	r3, #12
 8005922:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005924:	65ba      	str	r2, [r7, #88]	; 0x58
 8005926:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800592a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800592c:	e841 2300 	strex	r3, r2, [r1]
 8005930:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1e5      	bne.n	8005904 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3314      	adds	r3, #20
 800593e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	e853 3f00 	ldrex	r3, [r3]
 8005946:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594a:	f023 0301 	bic.w	r3, r3, #1
 800594e:	667b      	str	r3, [r7, #100]	; 0x64
 8005950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3314      	adds	r3, #20
 8005956:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005958:	647a      	str	r2, [r7, #68]	; 0x44
 800595a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800595e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005960:	e841 2300 	strex	r3, r2, [r1]
 8005964:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e5      	bne.n	8005938 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800596c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3314      	adds	r3, #20
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	e853 3f00 	ldrex	r3, [r3]
 800597a:	623b      	str	r3, [r7, #32]
   return(result);
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005982:	663b      	str	r3, [r7, #96]	; 0x60
 8005984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3314      	adds	r3, #20
 800598a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800598c:	633a      	str	r2, [r7, #48]	; 0x30
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005994:	e841 2300 	strex	r3, r2, [r1]
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e5      	bne.n	800596c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d119      	bne.n	80059e4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	330c      	adds	r3, #12
 80059b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	e853 3f00 	ldrex	r3, [r3]
 80059be:	60fb      	str	r3, [r7, #12]
   return(result);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0310 	bic.w	r3, r3, #16
 80059c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	330c      	adds	r3, #12
 80059ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059d0:	61fa      	str	r2, [r7, #28]
 80059d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d4:	69b9      	ldr	r1, [r7, #24]
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	e841 2300 	strex	r3, r2, [r1]
 80059dc:	617b      	str	r3, [r7, #20]
   return(result);
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1e5      	bne.n	80059b0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e6:	2200      	movs	r2, #0
 80059e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d106      	bne.n	8005a00 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059f6:	4619      	mov	r1, r3
 80059f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80059fa:	f7ff ff0b 	bl	8005814 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059fe:	e002      	b.n	8005a06 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005a00:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a02:	f7ff fee9 	bl	80057d8 <HAL_UART_RxCpltCallback>
}
 8005a06:	bf00      	nop
 8005a08:	3770      	adds	r7, #112	; 0x70
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d108      	bne.n	8005a3c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a2e:	085b      	lsrs	r3, r3, #1
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	4619      	mov	r1, r3
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f7ff feed 	bl	8005814 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a3a:	e002      	b.n	8005a42 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f7ff fed5 	bl	80057ec <HAL_UART_RxHalfCpltCallback>
}
 8005a42:	bf00      	nop
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a66:	2b80      	cmp	r3, #128	; 0x80
 8005a68:	bf0c      	ite	eq
 8005a6a:	2301      	moveq	r3, #1
 8005a6c:	2300      	movne	r3, #0
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b21      	cmp	r3, #33	; 0x21
 8005a7c:	d108      	bne.n	8005a90 <UART_DMAError+0x46>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d005      	beq.n	8005a90 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2200      	movs	r2, #0
 8005a88:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005a8a:	68b8      	ldr	r0, [r7, #8]
 8005a8c:	f000 f8c2 	bl	8005c14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9a:	2b40      	cmp	r3, #64	; 0x40
 8005a9c:	bf0c      	ite	eq
 8005a9e:	2301      	moveq	r3, #1
 8005aa0:	2300      	movne	r3, #0
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b22      	cmp	r3, #34	; 0x22
 8005ab0:	d108      	bne.n	8005ac4 <UART_DMAError+0x7a>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d005      	beq.n	8005ac4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2200      	movs	r2, #0
 8005abc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005abe:	68b8      	ldr	r0, [r7, #8]
 8005ac0:	f000 f8d0 	bl	8005c64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac8:	f043 0210 	orr.w	r2, r3, #16
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ad0:	68b8      	ldr	r0, [r7, #8]
 8005ad2:	f7ff fe95 	bl	8005800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b098      	sub	sp, #96	; 0x60
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	4613      	mov	r3, r2
 8005aec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	88fa      	ldrh	r2, [r7, #6]
 8005af8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2222      	movs	r2, #34	; 0x22
 8005b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0c:	4a3e      	ldr	r2, [pc, #248]	; (8005c08 <UART_Start_Receive_DMA+0x128>)
 8005b0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b14:	4a3d      	ldr	r2, [pc, #244]	; (8005c0c <UART_Start_Receive_DMA+0x12c>)
 8005b16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1c:	4a3c      	ldr	r2, [pc, #240]	; (8005c10 <UART_Start_Receive_DMA+0x130>)
 8005b1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b24:	2200      	movs	r2, #0
 8005b26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005b28:	f107 0308 	add.w	r3, r7, #8
 8005b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3304      	adds	r3, #4
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	f7fd fbd6 	bl	80032f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005b44:	2300      	movs	r3, #0
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	613b      	str	r3, [r7, #16]
 8005b58:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d019      	beq.n	8005b96 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	330c      	adds	r3, #12
 8005b68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b78:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	330c      	adds	r3, #12
 8005b80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b82:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005b84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005b88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e5      	bne.n	8005b62 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3314      	adds	r3, #20
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	f043 0301 	orr.w	r3, r3, #1
 8005bac:	657b      	str	r3, [r7, #84]	; 0x54
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3314      	adds	r3, #20
 8005bb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bb6:	63ba      	str	r2, [r7, #56]	; 0x38
 8005bb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005bbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e5      	bne.n	8005b96 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3314      	adds	r3, #20
 8005bd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be0:	653b      	str	r3, [r7, #80]	; 0x50
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3314      	adds	r3, #20
 8005be8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005bea:	627a      	str	r2, [r7, #36]	; 0x24
 8005bec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	6a39      	ldr	r1, [r7, #32]
 8005bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e5      	bne.n	8005bca <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3760      	adds	r7, #96	; 0x60
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	080058e3 	.word	0x080058e3
 8005c0c:	08005a0f 	.word	0x08005a0f
 8005c10:	08005a4b 	.word	0x08005a4b

08005c14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b089      	sub	sp, #36	; 0x24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	330c      	adds	r3, #12
 8005c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	e853 3f00 	ldrex	r3, [r3]
 8005c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c32:	61fb      	str	r3, [r7, #28]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	330c      	adds	r3, #12
 8005c3a:	69fa      	ldr	r2, [r7, #28]
 8005c3c:	61ba      	str	r2, [r7, #24]
 8005c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	6979      	ldr	r1, [r7, #20]
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	e841 2300 	strex	r3, r2, [r1]
 8005c48:	613b      	str	r3, [r7, #16]
   return(result);
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e5      	bne.n	8005c1c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005c58:	bf00      	nop
 8005c5a:	3724      	adds	r7, #36	; 0x24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b095      	sub	sp, #84	; 0x54
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	330c      	adds	r3, #12
 8005c72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c76:	e853 3f00 	ldrex	r3, [r3]
 8005c7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	330c      	adds	r3, #12
 8005c8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c8c:	643a      	str	r2, [r7, #64]	; 0x40
 8005c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c94:	e841 2300 	strex	r3, r2, [r1]
 8005c98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e5      	bne.n	8005c6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3314      	adds	r3, #20
 8005ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	e853 3f00 	ldrex	r3, [r3]
 8005cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	f023 0301 	bic.w	r3, r3, #1
 8005cb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3314      	adds	r3, #20
 8005cbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cc8:	e841 2300 	strex	r3, r2, [r1]
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e5      	bne.n	8005ca0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d119      	bne.n	8005d10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f023 0310 	bic.w	r3, r3, #16
 8005cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	330c      	adds	r3, #12
 8005cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cfc:	61ba      	str	r2, [r7, #24]
 8005cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	6979      	ldr	r1, [r7, #20]
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	e841 2300 	strex	r3, r2, [r1]
 8005d08:	613b      	str	r3, [r7, #16]
   return(result);
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e5      	bne.n	8005cdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d1e:	bf00      	nop
 8005d20:	3754      	adds	r7, #84	; 0x54
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f7ff fd5b 	bl	8005800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d4a:	bf00      	nop
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b085      	sub	sp, #20
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b21      	cmp	r3, #33	; 0x21
 8005d64:	d13e      	bne.n	8005de4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d6e:	d114      	bne.n	8005d9a <UART_Transmit_IT+0x48>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d110      	bne.n	8005d9a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	461a      	mov	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	1c9a      	adds	r2, r3, #2
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	621a      	str	r2, [r3, #32]
 8005d98:	e008      	b.n	8005dac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	1c59      	adds	r1, r3, #1
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6211      	str	r1, [r2, #32]
 8005da4:	781a      	ldrb	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	4619      	mov	r1, r3
 8005dba:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10f      	bne.n	8005de0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dde:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	e000      	b.n	8005de6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005de4:	2302      	movs	r3, #2
  }
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b082      	sub	sp, #8
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7ff fccc 	bl	80057b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b08c      	sub	sp, #48	; 0x30
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b22      	cmp	r3, #34	; 0x22
 8005e34:	f040 80ae 	bne.w	8005f94 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e40:	d117      	bne.n	8005e72 <UART_Receive_IT+0x50>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d113      	bne.n	8005e72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6a:	1c9a      	adds	r2, r3, #2
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	629a      	str	r2, [r3, #40]	; 0x28
 8005e70:	e026      	b.n	8005ec0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e84:	d007      	beq.n	8005e96 <UART_Receive_IT+0x74>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10a      	bne.n	8005ea4 <UART_Receive_IT+0x82>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d106      	bne.n	8005ea4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	e008      	b.n	8005eb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	4619      	mov	r1, r3
 8005ece:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d15d      	bne.n	8005f90 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0220 	bic.w	r2, r2, #32
 8005ee2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ef2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	695a      	ldr	r2, [r3, #20]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0201 	bic.w	r2, r2, #1
 8005f02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d135      	bne.n	8005f86 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	330c      	adds	r3, #12
 8005f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	e853 3f00 	ldrex	r3, [r3]
 8005f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f023 0310 	bic.w	r3, r3, #16
 8005f36:	627b      	str	r3, [r7, #36]	; 0x24
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	330c      	adds	r3, #12
 8005f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f40:	623a      	str	r2, [r7, #32]
 8005f42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f44:	69f9      	ldr	r1, [r7, #28]
 8005f46:	6a3a      	ldr	r2, [r7, #32]
 8005f48:	e841 2300 	strex	r3, r2, [r1]
 8005f4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1e5      	bne.n	8005f20 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0310 	and.w	r3, r3, #16
 8005f5e:	2b10      	cmp	r3, #16
 8005f60:	d10a      	bne.n	8005f78 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7ff fc48 	bl	8005814 <HAL_UARTEx_RxEventCallback>
 8005f84:	e002      	b.n	8005f8c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7ff fc26 	bl	80057d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	e002      	b.n	8005f96 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	e000      	b.n	8005f96 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005f94:	2302      	movs	r3, #2
  }
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3730      	adds	r7, #48	; 0x30
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fa4:	b0c0      	sub	sp, #256	; 0x100
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fbc:	68d9      	ldr	r1, [r3, #12]
 8005fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	ea40 0301 	orr.w	r3, r0, r1
 8005fc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ff8:	f021 010c 	bic.w	r1, r1, #12
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006006:	430b      	orrs	r3, r1
 8006008:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800600a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601a:	6999      	ldr	r1, [r3, #24]
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	ea40 0301 	orr.w	r3, r0, r1
 8006026:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	4b8f      	ldr	r3, [pc, #572]	; (800626c <UART_SetConfig+0x2cc>)
 8006030:	429a      	cmp	r2, r3
 8006032:	d005      	beq.n	8006040 <UART_SetConfig+0xa0>
 8006034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4b8d      	ldr	r3, [pc, #564]	; (8006270 <UART_SetConfig+0x2d0>)
 800603c:	429a      	cmp	r2, r3
 800603e:	d104      	bne.n	800604a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006040:	f7fe fae6 	bl	8004610 <HAL_RCC_GetPCLK2Freq>
 8006044:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006048:	e003      	b.n	8006052 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800604a:	f7fe facd 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 800604e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800605c:	f040 810c 	bne.w	8006278 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006064:	2200      	movs	r2, #0
 8006066:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800606a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800606e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006072:	4622      	mov	r2, r4
 8006074:	462b      	mov	r3, r5
 8006076:	1891      	adds	r1, r2, r2
 8006078:	65b9      	str	r1, [r7, #88]	; 0x58
 800607a:	415b      	adcs	r3, r3
 800607c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800607e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006082:	4621      	mov	r1, r4
 8006084:	eb12 0801 	adds.w	r8, r2, r1
 8006088:	4629      	mov	r1, r5
 800608a:	eb43 0901 	adc.w	r9, r3, r1
 800608e:	f04f 0200 	mov.w	r2, #0
 8006092:	f04f 0300 	mov.w	r3, #0
 8006096:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800609a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800609e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060a2:	4690      	mov	r8, r2
 80060a4:	4699      	mov	r9, r3
 80060a6:	4623      	mov	r3, r4
 80060a8:	eb18 0303 	adds.w	r3, r8, r3
 80060ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060b0:	462b      	mov	r3, r5
 80060b2:	eb49 0303 	adc.w	r3, r9, r3
 80060b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060ce:	460b      	mov	r3, r1
 80060d0:	18db      	adds	r3, r3, r3
 80060d2:	653b      	str	r3, [r7, #80]	; 0x50
 80060d4:	4613      	mov	r3, r2
 80060d6:	eb42 0303 	adc.w	r3, r2, r3
 80060da:	657b      	str	r3, [r7, #84]	; 0x54
 80060dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060e4:	f7fa fc3a 	bl	800095c <__aeabi_uldivmod>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4b61      	ldr	r3, [pc, #388]	; (8006274 <UART_SetConfig+0x2d4>)
 80060ee:	fba3 2302 	umull	r2, r3, r3, r2
 80060f2:	095b      	lsrs	r3, r3, #5
 80060f4:	011c      	lsls	r4, r3, #4
 80060f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006100:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006104:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006108:	4642      	mov	r2, r8
 800610a:	464b      	mov	r3, r9
 800610c:	1891      	adds	r1, r2, r2
 800610e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006110:	415b      	adcs	r3, r3
 8006112:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006114:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006118:	4641      	mov	r1, r8
 800611a:	eb12 0a01 	adds.w	sl, r2, r1
 800611e:	4649      	mov	r1, r9
 8006120:	eb43 0b01 	adc.w	fp, r3, r1
 8006124:	f04f 0200 	mov.w	r2, #0
 8006128:	f04f 0300 	mov.w	r3, #0
 800612c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006130:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006134:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006138:	4692      	mov	sl, r2
 800613a:	469b      	mov	fp, r3
 800613c:	4643      	mov	r3, r8
 800613e:	eb1a 0303 	adds.w	r3, sl, r3
 8006142:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006146:	464b      	mov	r3, r9
 8006148:	eb4b 0303 	adc.w	r3, fp, r3
 800614c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800615c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006160:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006164:	460b      	mov	r3, r1
 8006166:	18db      	adds	r3, r3, r3
 8006168:	643b      	str	r3, [r7, #64]	; 0x40
 800616a:	4613      	mov	r3, r2
 800616c:	eb42 0303 	adc.w	r3, r2, r3
 8006170:	647b      	str	r3, [r7, #68]	; 0x44
 8006172:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006176:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800617a:	f7fa fbef 	bl	800095c <__aeabi_uldivmod>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	4611      	mov	r1, r2
 8006184:	4b3b      	ldr	r3, [pc, #236]	; (8006274 <UART_SetConfig+0x2d4>)
 8006186:	fba3 2301 	umull	r2, r3, r3, r1
 800618a:	095b      	lsrs	r3, r3, #5
 800618c:	2264      	movs	r2, #100	; 0x64
 800618e:	fb02 f303 	mul.w	r3, r2, r3
 8006192:	1acb      	subs	r3, r1, r3
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800619a:	4b36      	ldr	r3, [pc, #216]	; (8006274 <UART_SetConfig+0x2d4>)
 800619c:	fba3 2302 	umull	r2, r3, r3, r2
 80061a0:	095b      	lsrs	r3, r3, #5
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061a8:	441c      	add	r4, r3
 80061aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ae:	2200      	movs	r2, #0
 80061b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061bc:	4642      	mov	r2, r8
 80061be:	464b      	mov	r3, r9
 80061c0:	1891      	adds	r1, r2, r2
 80061c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80061c4:	415b      	adcs	r3, r3
 80061c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061cc:	4641      	mov	r1, r8
 80061ce:	1851      	adds	r1, r2, r1
 80061d0:	6339      	str	r1, [r7, #48]	; 0x30
 80061d2:	4649      	mov	r1, r9
 80061d4:	414b      	adcs	r3, r1
 80061d6:	637b      	str	r3, [r7, #52]	; 0x34
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	f04f 0300 	mov.w	r3, #0
 80061e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061e4:	4659      	mov	r1, fp
 80061e6:	00cb      	lsls	r3, r1, #3
 80061e8:	4651      	mov	r1, sl
 80061ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ee:	4651      	mov	r1, sl
 80061f0:	00ca      	lsls	r2, r1, #3
 80061f2:	4610      	mov	r0, r2
 80061f4:	4619      	mov	r1, r3
 80061f6:	4603      	mov	r3, r0
 80061f8:	4642      	mov	r2, r8
 80061fa:	189b      	adds	r3, r3, r2
 80061fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006200:	464b      	mov	r3, r9
 8006202:	460a      	mov	r2, r1
 8006204:	eb42 0303 	adc.w	r3, r2, r3
 8006208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800620c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006218:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800621c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006220:	460b      	mov	r3, r1
 8006222:	18db      	adds	r3, r3, r3
 8006224:	62bb      	str	r3, [r7, #40]	; 0x28
 8006226:	4613      	mov	r3, r2
 8006228:	eb42 0303 	adc.w	r3, r2, r3
 800622c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800622e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006232:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006236:	f7fa fb91 	bl	800095c <__aeabi_uldivmod>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4b0d      	ldr	r3, [pc, #52]	; (8006274 <UART_SetConfig+0x2d4>)
 8006240:	fba3 1302 	umull	r1, r3, r3, r2
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	2164      	movs	r1, #100	; 0x64
 8006248:	fb01 f303 	mul.w	r3, r1, r3
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	3332      	adds	r3, #50	; 0x32
 8006252:	4a08      	ldr	r2, [pc, #32]	; (8006274 <UART_SetConfig+0x2d4>)
 8006254:	fba2 2303 	umull	r2, r3, r2, r3
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	f003 0207 	and.w	r2, r3, #7
 800625e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4422      	add	r2, r4
 8006266:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006268:	e106      	b.n	8006478 <UART_SetConfig+0x4d8>
 800626a:	bf00      	nop
 800626c:	40011000 	.word	0x40011000
 8006270:	40011400 	.word	0x40011400
 8006274:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800627c:	2200      	movs	r2, #0
 800627e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006282:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006286:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800628a:	4642      	mov	r2, r8
 800628c:	464b      	mov	r3, r9
 800628e:	1891      	adds	r1, r2, r2
 8006290:	6239      	str	r1, [r7, #32]
 8006292:	415b      	adcs	r3, r3
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
 8006296:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800629a:	4641      	mov	r1, r8
 800629c:	1854      	adds	r4, r2, r1
 800629e:	4649      	mov	r1, r9
 80062a0:	eb43 0501 	adc.w	r5, r3, r1
 80062a4:	f04f 0200 	mov.w	r2, #0
 80062a8:	f04f 0300 	mov.w	r3, #0
 80062ac:	00eb      	lsls	r3, r5, #3
 80062ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062b2:	00e2      	lsls	r2, r4, #3
 80062b4:	4614      	mov	r4, r2
 80062b6:	461d      	mov	r5, r3
 80062b8:	4643      	mov	r3, r8
 80062ba:	18e3      	adds	r3, r4, r3
 80062bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062c0:	464b      	mov	r3, r9
 80062c2:	eb45 0303 	adc.w	r3, r5, r3
 80062c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062da:	f04f 0200 	mov.w	r2, #0
 80062de:	f04f 0300 	mov.w	r3, #0
 80062e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062e6:	4629      	mov	r1, r5
 80062e8:	008b      	lsls	r3, r1, #2
 80062ea:	4621      	mov	r1, r4
 80062ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062f0:	4621      	mov	r1, r4
 80062f2:	008a      	lsls	r2, r1, #2
 80062f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062f8:	f7fa fb30 	bl	800095c <__aeabi_uldivmod>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4b60      	ldr	r3, [pc, #384]	; (8006484 <UART_SetConfig+0x4e4>)
 8006302:	fba3 2302 	umull	r2, r3, r3, r2
 8006306:	095b      	lsrs	r3, r3, #5
 8006308:	011c      	lsls	r4, r3, #4
 800630a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800630e:	2200      	movs	r2, #0
 8006310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006314:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006318:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800631c:	4642      	mov	r2, r8
 800631e:	464b      	mov	r3, r9
 8006320:	1891      	adds	r1, r2, r2
 8006322:	61b9      	str	r1, [r7, #24]
 8006324:	415b      	adcs	r3, r3
 8006326:	61fb      	str	r3, [r7, #28]
 8006328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800632c:	4641      	mov	r1, r8
 800632e:	1851      	adds	r1, r2, r1
 8006330:	6139      	str	r1, [r7, #16]
 8006332:	4649      	mov	r1, r9
 8006334:	414b      	adcs	r3, r1
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	f04f 0200 	mov.w	r2, #0
 800633c:	f04f 0300 	mov.w	r3, #0
 8006340:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006344:	4659      	mov	r1, fp
 8006346:	00cb      	lsls	r3, r1, #3
 8006348:	4651      	mov	r1, sl
 800634a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800634e:	4651      	mov	r1, sl
 8006350:	00ca      	lsls	r2, r1, #3
 8006352:	4610      	mov	r0, r2
 8006354:	4619      	mov	r1, r3
 8006356:	4603      	mov	r3, r0
 8006358:	4642      	mov	r2, r8
 800635a:	189b      	adds	r3, r3, r2
 800635c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006360:	464b      	mov	r3, r9
 8006362:	460a      	mov	r2, r1
 8006364:	eb42 0303 	adc.w	r3, r2, r3
 8006368:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800636c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	67bb      	str	r3, [r7, #120]	; 0x78
 8006376:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006384:	4649      	mov	r1, r9
 8006386:	008b      	lsls	r3, r1, #2
 8006388:	4641      	mov	r1, r8
 800638a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800638e:	4641      	mov	r1, r8
 8006390:	008a      	lsls	r2, r1, #2
 8006392:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006396:	f7fa fae1 	bl	800095c <__aeabi_uldivmod>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	4611      	mov	r1, r2
 80063a0:	4b38      	ldr	r3, [pc, #224]	; (8006484 <UART_SetConfig+0x4e4>)
 80063a2:	fba3 2301 	umull	r2, r3, r3, r1
 80063a6:	095b      	lsrs	r3, r3, #5
 80063a8:	2264      	movs	r2, #100	; 0x64
 80063aa:	fb02 f303 	mul.w	r3, r2, r3
 80063ae:	1acb      	subs	r3, r1, r3
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	3332      	adds	r3, #50	; 0x32
 80063b4:	4a33      	ldr	r2, [pc, #204]	; (8006484 <UART_SetConfig+0x4e4>)
 80063b6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ba:	095b      	lsrs	r3, r3, #5
 80063bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063c0:	441c      	add	r4, r3
 80063c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063c6:	2200      	movs	r2, #0
 80063c8:	673b      	str	r3, [r7, #112]	; 0x70
 80063ca:	677a      	str	r2, [r7, #116]	; 0x74
 80063cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063d0:	4642      	mov	r2, r8
 80063d2:	464b      	mov	r3, r9
 80063d4:	1891      	adds	r1, r2, r2
 80063d6:	60b9      	str	r1, [r7, #8]
 80063d8:	415b      	adcs	r3, r3
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063e0:	4641      	mov	r1, r8
 80063e2:	1851      	adds	r1, r2, r1
 80063e4:	6039      	str	r1, [r7, #0]
 80063e6:	4649      	mov	r1, r9
 80063e8:	414b      	adcs	r3, r1
 80063ea:	607b      	str	r3, [r7, #4]
 80063ec:	f04f 0200 	mov.w	r2, #0
 80063f0:	f04f 0300 	mov.w	r3, #0
 80063f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063f8:	4659      	mov	r1, fp
 80063fa:	00cb      	lsls	r3, r1, #3
 80063fc:	4651      	mov	r1, sl
 80063fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006402:	4651      	mov	r1, sl
 8006404:	00ca      	lsls	r2, r1, #3
 8006406:	4610      	mov	r0, r2
 8006408:	4619      	mov	r1, r3
 800640a:	4603      	mov	r3, r0
 800640c:	4642      	mov	r2, r8
 800640e:	189b      	adds	r3, r3, r2
 8006410:	66bb      	str	r3, [r7, #104]	; 0x68
 8006412:	464b      	mov	r3, r9
 8006414:	460a      	mov	r2, r1
 8006416:	eb42 0303 	adc.w	r3, r2, r3
 800641a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800641c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	663b      	str	r3, [r7, #96]	; 0x60
 8006426:	667a      	str	r2, [r7, #100]	; 0x64
 8006428:	f04f 0200 	mov.w	r2, #0
 800642c:	f04f 0300 	mov.w	r3, #0
 8006430:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006434:	4649      	mov	r1, r9
 8006436:	008b      	lsls	r3, r1, #2
 8006438:	4641      	mov	r1, r8
 800643a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800643e:	4641      	mov	r1, r8
 8006440:	008a      	lsls	r2, r1, #2
 8006442:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006446:	f7fa fa89 	bl	800095c <__aeabi_uldivmod>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4b0d      	ldr	r3, [pc, #52]	; (8006484 <UART_SetConfig+0x4e4>)
 8006450:	fba3 1302 	umull	r1, r3, r3, r2
 8006454:	095b      	lsrs	r3, r3, #5
 8006456:	2164      	movs	r1, #100	; 0x64
 8006458:	fb01 f303 	mul.w	r3, r1, r3
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	3332      	adds	r3, #50	; 0x32
 8006462:	4a08      	ldr	r2, [pc, #32]	; (8006484 <UART_SetConfig+0x4e4>)
 8006464:	fba2 2303 	umull	r2, r3, r2, r3
 8006468:	095b      	lsrs	r3, r3, #5
 800646a:	f003 020f 	and.w	r2, r3, #15
 800646e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4422      	add	r2, r4
 8006476:	609a      	str	r2, [r3, #8]
}
 8006478:	bf00      	nop
 800647a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800647e:	46bd      	mov	sp, r7
 8006480:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006484:	51eb851f 	.word	0x51eb851f

08006488 <__NVIC_SetPriority>:
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	4603      	mov	r3, r0
 8006490:	6039      	str	r1, [r7, #0]
 8006492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006498:	2b00      	cmp	r3, #0
 800649a:	db0a      	blt.n	80064b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	490c      	ldr	r1, [pc, #48]	; (80064d4 <__NVIC_SetPriority+0x4c>)
 80064a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064a6:	0112      	lsls	r2, r2, #4
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	440b      	add	r3, r1
 80064ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80064b0:	e00a      	b.n	80064c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	4908      	ldr	r1, [pc, #32]	; (80064d8 <__NVIC_SetPriority+0x50>)
 80064b8:	79fb      	ldrb	r3, [r7, #7]
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	3b04      	subs	r3, #4
 80064c0:	0112      	lsls	r2, r2, #4
 80064c2:	b2d2      	uxtb	r2, r2
 80064c4:	440b      	add	r3, r1
 80064c6:	761a      	strb	r2, [r3, #24]
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	e000e100 	.word	0xe000e100
 80064d8:	e000ed00 	.word	0xe000ed00

080064dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80064dc:	b580      	push	{r7, lr}
 80064de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80064e0:	4b05      	ldr	r3, [pc, #20]	; (80064f8 <SysTick_Handler+0x1c>)
 80064e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80064e4:	f001 fd4e 	bl	8007f84 <xTaskGetSchedulerState>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d001      	beq.n	80064f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80064ee:	f002 fb33 	bl	8008b58 <xPortSysTickHandler>
  }
}
 80064f2:	bf00      	nop
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	e000e010 	.word	0xe000e010

080064fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006500:	2100      	movs	r1, #0
 8006502:	f06f 0004 	mvn.w	r0, #4
 8006506:	f7ff ffbf 	bl	8006488 <__NVIC_SetPriority>
#endif
}
 800650a:	bf00      	nop
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006516:	f3ef 8305 	mrs	r3, IPSR
 800651a:	603b      	str	r3, [r7, #0]
  return(result);
 800651c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006522:	f06f 0305 	mvn.w	r3, #5
 8006526:	607b      	str	r3, [r7, #4]
 8006528:	e00c      	b.n	8006544 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800652a:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <osKernelInitialize+0x44>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d105      	bne.n	800653e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006532:	4b08      	ldr	r3, [pc, #32]	; (8006554 <osKernelInitialize+0x44>)
 8006534:	2201      	movs	r2, #1
 8006536:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006538:	2300      	movs	r3, #0
 800653a:	607b      	str	r3, [r7, #4]
 800653c:	e002      	b.n	8006544 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800653e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006542:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006544:	687b      	ldr	r3, [r7, #4]
}
 8006546:	4618      	mov	r0, r3
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20009064 	.word	0x20009064

08006558 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800655e:	f3ef 8305 	mrs	r3, IPSR
 8006562:	603b      	str	r3, [r7, #0]
  return(result);
 8006564:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <osKernelStart+0x1a>
    stat = osErrorISR;
 800656a:	f06f 0305 	mvn.w	r3, #5
 800656e:	607b      	str	r3, [r7, #4]
 8006570:	e010      	b.n	8006594 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006572:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <osKernelStart+0x48>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d109      	bne.n	800658e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800657a:	f7ff ffbf 	bl	80064fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800657e:	4b08      	ldr	r3, [pc, #32]	; (80065a0 <osKernelStart+0x48>)
 8006580:	2202      	movs	r2, #2
 8006582:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006584:	f001 f87c 	bl	8007680 <vTaskStartScheduler>
      stat = osOK;
 8006588:	2300      	movs	r3, #0
 800658a:	607b      	str	r3, [r7, #4]
 800658c:	e002      	b.n	8006594 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800658e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006592:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006594:	687b      	ldr	r3, [r7, #4]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	20009064 	.word	0x20009064

080065a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b08e      	sub	sp, #56	; 0x38
 80065a8:	af04      	add	r7, sp, #16
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80065b0:	2300      	movs	r3, #0
 80065b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065b4:	f3ef 8305 	mrs	r3, IPSR
 80065b8:	617b      	str	r3, [r7, #20]
  return(result);
 80065ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d17e      	bne.n	80066be <osThreadNew+0x11a>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d07b      	beq.n	80066be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80065c6:	2380      	movs	r3, #128	; 0x80
 80065c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80065ca:	2318      	movs	r3, #24
 80065cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80065ce:	2300      	movs	r3, #0
 80065d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80065d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d045      	beq.n	800666a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <osThreadNew+0x48>
        name = attr->name;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d008      	beq.n	8006612 <osThreadNew+0x6e>
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	2b38      	cmp	r3, #56	; 0x38
 8006604:	d805      	bhi.n	8006612 <osThreadNew+0x6e>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <osThreadNew+0x72>
        return (NULL);
 8006612:	2300      	movs	r3, #0
 8006614:	e054      	b.n	80066c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	089b      	lsrs	r3, r3, #2
 8006624:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00e      	beq.n	800664c <osThreadNew+0xa8>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	2ba7      	cmp	r3, #167	; 0xa7
 8006634:	d90a      	bls.n	800664c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800663a:	2b00      	cmp	r3, #0
 800663c:	d006      	beq.n	800664c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <osThreadNew+0xa8>
        mem = 1;
 8006646:	2301      	movs	r3, #1
 8006648:	61bb      	str	r3, [r7, #24]
 800664a:	e010      	b.n	800666e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10c      	bne.n	800666e <osThreadNew+0xca>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d108      	bne.n	800666e <osThreadNew+0xca>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d104      	bne.n	800666e <osThreadNew+0xca>
          mem = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	61bb      	str	r3, [r7, #24]
 8006668:	e001      	b.n	800666e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800666a:	2300      	movs	r3, #0
 800666c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d110      	bne.n	8006696 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800667c:	9202      	str	r2, [sp, #8]
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	6a3a      	ldr	r2, [r7, #32]
 8006688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 fe0c 	bl	80072a8 <xTaskCreateStatic>
 8006690:	4603      	mov	r3, r0
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	e013      	b.n	80066be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d110      	bne.n	80066be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	b29a      	uxth	r2, r3
 80066a0:	f107 0310 	add.w	r3, r7, #16
 80066a4:	9301      	str	r3, [sp, #4]
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fe57 	bl	8007362 <xTaskCreate>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d001      	beq.n	80066be <osThreadNew+0x11a>
            hTask = NULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066be:	693b      	ldr	r3, [r7, #16]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3728      	adds	r7, #40	; 0x28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066d0:	f3ef 8305 	mrs	r3, IPSR
 80066d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80066d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <osDelay+0x1c>
    stat = osErrorISR;
 80066dc:	f06f 0305 	mvn.w	r3, #5
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	e007      	b.n	80066f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 ff92 	bl	8007618 <vTaskDelay>
    }
  }

  return (stat);
 80066f4:	68fb      	ldr	r3, [r7, #12]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4a07      	ldr	r2, [pc, #28]	; (800672c <vApplicationGetIdleTaskMemory+0x2c>)
 8006710:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	4a06      	ldr	r2, [pc, #24]	; (8006730 <vApplicationGetIdleTaskMemory+0x30>)
 8006716:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2280      	movs	r2, #128	; 0x80
 800671c:	601a      	str	r2, [r3, #0]
}
 800671e:	bf00      	nop
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	20009068 	.word	0x20009068
 8006730:	20009110 	.word	0x20009110

08006734 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4a07      	ldr	r2, [pc, #28]	; (8006760 <vApplicationGetTimerTaskMemory+0x2c>)
 8006744:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	4a06      	ldr	r2, [pc, #24]	; (8006764 <vApplicationGetTimerTaskMemory+0x30>)
 800674a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006752:	601a      	str	r2, [r3, #0]
}
 8006754:	bf00      	nop
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	20009310 	.word	0x20009310
 8006764:	200093b8 	.word	0x200093b8

08006768 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f103 0208 	add.w	r2, r3, #8
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006780:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f103 0208 	add.w	r2, r3, #8
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f103 0208 	add.w	r2, r3, #8
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067c2:	b480      	push	{r7}
 80067c4:	b085      	sub	sp, #20
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	601a      	str	r2, [r3, #0]
}
 80067fe:	bf00      	nop
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800680a:	b480      	push	{r7}
 800680c:	b085      	sub	sp, #20
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006820:	d103      	bne.n	800682a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	e00c      	b.n	8006844 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	3308      	adds	r3, #8
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	e002      	b.n	8006838 <vListInsert+0x2e>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	429a      	cmp	r2, r3
 8006842:	d2f6      	bcs.n	8006832 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	601a      	str	r2, [r3, #0]
}
 8006870:	bf00      	nop
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	6892      	ldr	r2, [r2, #8]
 8006892:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	6852      	ldr	r2, [r2, #4]
 800689c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d103      	bne.n	80068b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	1e5a      	subs	r2, r3, #1
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10a      	bne.n	80068fa <xQueueGenericReset+0x2a>
	__asm volatile
 80068e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	60bb      	str	r3, [r7, #8]
}
 80068f6:	bf00      	nop
 80068f8:	e7fe      	b.n	80068f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80068fa:	f002 f89b 	bl	8008a34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006906:	68f9      	ldr	r1, [r7, #12]
 8006908:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800690a:	fb01 f303 	mul.w	r3, r1, r3
 800690e:	441a      	add	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692a:	3b01      	subs	r3, #1
 800692c:	68f9      	ldr	r1, [r7, #12]
 800692e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006930:	fb01 f303 	mul.w	r3, r1, r3
 8006934:	441a      	add	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	22ff      	movs	r2, #255	; 0xff
 800693e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	22ff      	movs	r2, #255	; 0xff
 8006946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d114      	bne.n	800697a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d01a      	beq.n	800698e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	3310      	adds	r3, #16
 800695c:	4618      	mov	r0, r3
 800695e:	f001 f929 	bl	8007bb4 <xTaskRemoveFromEventList>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d012      	beq.n	800698e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006968:	4b0c      	ldr	r3, [pc, #48]	; (800699c <xQueueGenericReset+0xcc>)
 800696a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	e009      	b.n	800698e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	3310      	adds	r3, #16
 800697e:	4618      	mov	r0, r3
 8006980:	f7ff fef2 	bl	8006768 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3324      	adds	r3, #36	; 0x24
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff feed 	bl	8006768 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800698e:	f002 f881 	bl	8008a94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006992:	2301      	movs	r3, #1
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	e000ed04 	.word	0xe000ed04

080069a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08e      	sub	sp, #56	; 0x38
 80069a4:	af02      	add	r7, sp, #8
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069c6:	bf00      	nop
 80069c8:	e7fe      	b.n	80069c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d002      	beq.n	80069f2 <xQueueGenericCreateStatic+0x52>
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <xQueueGenericCreateStatic+0x56>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e000      	b.n	80069f8 <xQueueGenericCreateStatic+0x58>
 80069f6:	2300      	movs	r3, #0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10a      	bne.n	8006a12 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	623b      	str	r3, [r7, #32]
}
 8006a0e:	bf00      	nop
 8006a10:	e7fe      	b.n	8006a10 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d102      	bne.n	8006a1e <xQueueGenericCreateStatic+0x7e>
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <xQueueGenericCreateStatic+0x82>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <xQueueGenericCreateStatic+0x84>
 8006a22:	2300      	movs	r3, #0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10a      	bne.n	8006a3e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	61fb      	str	r3, [r7, #28]
}
 8006a3a:	bf00      	nop
 8006a3c:	e7fe      	b.n	8006a3c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a3e:	2350      	movs	r3, #80	; 0x50
 8006a40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2b50      	cmp	r3, #80	; 0x50
 8006a46:	d00a      	beq.n	8006a5e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	61bb      	str	r3, [r7, #24]
}
 8006a5a:	bf00      	nop
 8006a5c:	e7fe      	b.n	8006a5c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a5e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00d      	beq.n	8006a86 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	68b9      	ldr	r1, [r7, #8]
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 f805 	bl	8006a90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3730      	adds	r7, #48	; 0x30
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
 8006a9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d103      	bne.n	8006aac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	e002      	b.n	8006ab2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006abe:	2101      	movs	r1, #1
 8006ac0:	69b8      	ldr	r0, [r7, #24]
 8006ac2:	f7ff ff05 	bl	80068d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	78fa      	ldrb	r2, [r7, #3]
 8006aca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ace:	bf00      	nop
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08e      	sub	sp, #56	; 0x38
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <xQueueGenericSend+0x32>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b06:	bf00      	nop
 8006b08:	e7fe      	b.n	8006b08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d103      	bne.n	8006b18 <xQueueGenericSend+0x40>
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <xQueueGenericSend+0x44>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e000      	b.n	8006b1e <xQueueGenericSend+0x46>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10a      	bne.n	8006b38 <xQueueGenericSend+0x60>
	__asm volatile
 8006b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b34:	bf00      	nop
 8006b36:	e7fe      	b.n	8006b36 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d103      	bne.n	8006b46 <xQueueGenericSend+0x6e>
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d101      	bne.n	8006b4a <xQueueGenericSend+0x72>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e000      	b.n	8006b4c <xQueueGenericSend+0x74>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <xQueueGenericSend+0x8e>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	623b      	str	r3, [r7, #32]
}
 8006b62:	bf00      	nop
 8006b64:	e7fe      	b.n	8006b64 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b66:	f001 fa0d 	bl	8007f84 <xTaskGetSchedulerState>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d102      	bne.n	8006b76 <xQueueGenericSend+0x9e>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <xQueueGenericSend+0xa2>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e000      	b.n	8006b7c <xQueueGenericSend+0xa4>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10a      	bne.n	8006b96 <xQueueGenericSend+0xbe>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	61fb      	str	r3, [r7, #28]
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b96:	f001 ff4d 	bl	8008a34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d302      	bcc.n	8006bac <xQueueGenericSend+0xd4>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d129      	bne.n	8006c00 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	68b9      	ldr	r1, [r7, #8]
 8006bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bb2:	f000 fa0b 	bl	8006fcc <prvCopyDataToQueue>
 8006bb6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d010      	beq.n	8006be2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc2:	3324      	adds	r3, #36	; 0x24
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 fff5 	bl	8007bb4 <xTaskRemoveFromEventList>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d013      	beq.n	8006bf8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006bd0:	4b3f      	ldr	r3, [pc, #252]	; (8006cd0 <xQueueGenericSend+0x1f8>)
 8006bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	e00a      	b.n	8006bf8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d007      	beq.n	8006bf8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006be8:	4b39      	ldr	r3, [pc, #228]	; (8006cd0 <xQueueGenericSend+0x1f8>)
 8006bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006bf8:	f001 ff4c 	bl	8008a94 <vPortExitCritical>
				return pdPASS;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e063      	b.n	8006cc8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d103      	bne.n	8006c0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c06:	f001 ff45 	bl	8008a94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	e05c      	b.n	8006cc8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d106      	bne.n	8006c22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c14:	f107 0314 	add.w	r3, r7, #20
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f001 f855 	bl	8007cc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c22:	f001 ff37 	bl	8008a94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c26:	f000 fd9b 	bl	8007760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c2a:	f001 ff03 	bl	8008a34 <vPortEnterCritical>
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c34:	b25b      	sxtb	r3, r3
 8006c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c3a:	d103      	bne.n	8006c44 <xQueueGenericSend+0x16c>
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c4a:	b25b      	sxtb	r3, r3
 8006c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c50:	d103      	bne.n	8006c5a <xQueueGenericSend+0x182>
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c5a:	f001 ff1b 	bl	8008a94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c5e:	1d3a      	adds	r2, r7, #4
 8006c60:	f107 0314 	add.w	r3, r7, #20
 8006c64:	4611      	mov	r1, r2
 8006c66:	4618      	mov	r0, r3
 8006c68:	f001 f844 	bl	8007cf4 <xTaskCheckForTimeOut>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d124      	bne.n	8006cbc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c74:	f000 faa2 	bl	80071bc <prvIsQueueFull>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d018      	beq.n	8006cb0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	3310      	adds	r3, #16
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	4611      	mov	r1, r2
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 ff44 	bl	8007b14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c8e:	f000 fa2d 	bl	80070ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c92:	f000 fd73 	bl	800777c <xTaskResumeAll>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f47f af7c 	bne.w	8006b96 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006c9e:	4b0c      	ldr	r3, [pc, #48]	; (8006cd0 <xQueueGenericSend+0x1f8>)
 8006ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	e772      	b.n	8006b96 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cb2:	f000 fa1b 	bl	80070ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cb6:	f000 fd61 	bl	800777c <xTaskResumeAll>
 8006cba:	e76c      	b.n	8006b96 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cbe:	f000 fa15 	bl	80070ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cc2:	f000 fd5b 	bl	800777c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006cc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3738      	adds	r7, #56	; 0x38
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	e000ed04 	.word	0xe000ed04

08006cd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b090      	sub	sp, #64	; 0x40
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10a      	bne.n	8006d02 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006cfe:	bf00      	nop
 8006d00:	e7fe      	b.n	8006d00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d103      	bne.n	8006d10 <xQueueGenericSendFromISR+0x3c>
 8006d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <xQueueGenericSendFromISR+0x40>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e000      	b.n	8006d16 <xQueueGenericSendFromISR+0x42>
 8006d14:	2300      	movs	r3, #0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10a      	bne.n	8006d30 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d2c:	bf00      	nop
 8006d2e:	e7fe      	b.n	8006d2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d103      	bne.n	8006d3e <xQueueGenericSendFromISR+0x6a>
 8006d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d101      	bne.n	8006d42 <xQueueGenericSendFromISR+0x6e>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e000      	b.n	8006d44 <xQueueGenericSendFromISR+0x70>
 8006d42:	2300      	movs	r3, #0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10a      	bne.n	8006d5e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	623b      	str	r3, [r7, #32]
}
 8006d5a:	bf00      	nop
 8006d5c:	e7fe      	b.n	8006d5c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d5e:	f001 ff4b 	bl	8008bf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d62:	f3ef 8211 	mrs	r2, BASEPRI
 8006d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	61fa      	str	r2, [r7, #28]
 8006d78:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d7a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d7c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d302      	bcc.n	8006d90 <xQueueGenericSendFromISR+0xbc>
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d12f      	bne.n	8006df0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	68b9      	ldr	r1, [r7, #8]
 8006da4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006da6:	f000 f911 	bl	8006fcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006daa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006dae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006db2:	d112      	bne.n	8006dda <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d016      	beq.n	8006dea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	3324      	adds	r3, #36	; 0x24
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 fef7 	bl	8007bb4 <xTaskRemoveFromEventList>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00e      	beq.n	8006dea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00b      	beq.n	8006dea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	e007      	b.n	8006dea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006dda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006dde:	3301      	adds	r3, #1
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	b25a      	sxtb	r2, r3
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006dea:	2301      	movs	r3, #1
 8006dec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006dee:	e001      	b.n	8006df4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006df0:	2300      	movs	r3, #0
 8006df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006dfe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3740      	adds	r7, #64	; 0x40
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
	...

08006e0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b08c      	sub	sp, #48	; 0x30
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10a      	bne.n	8006e3c <xQueueReceive+0x30>
	__asm volatile
 8006e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2a:	f383 8811 	msr	BASEPRI, r3
 8006e2e:	f3bf 8f6f 	isb	sy
 8006e32:	f3bf 8f4f 	dsb	sy
 8006e36:	623b      	str	r3, [r7, #32]
}
 8006e38:	bf00      	nop
 8006e3a:	e7fe      	b.n	8006e3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d103      	bne.n	8006e4a <xQueueReceive+0x3e>
 8006e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <xQueueReceive+0x42>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e000      	b.n	8006e50 <xQueueReceive+0x44>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10a      	bne.n	8006e6a <xQueueReceive+0x5e>
	__asm volatile
 8006e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	61fb      	str	r3, [r7, #28]
}
 8006e66:	bf00      	nop
 8006e68:	e7fe      	b.n	8006e68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e6a:	f001 f88b 	bl	8007f84 <xTaskGetSchedulerState>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d102      	bne.n	8006e7a <xQueueReceive+0x6e>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <xQueueReceive+0x72>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e000      	b.n	8006e80 <xQueueReceive+0x74>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10a      	bne.n	8006e9a <xQueueReceive+0x8e>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	61bb      	str	r3, [r7, #24]
}
 8006e96:	bf00      	nop
 8006e98:	e7fe      	b.n	8006e98 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e9a:	f001 fdcb 	bl	8008a34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d01f      	beq.n	8006eea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006eaa:	68b9      	ldr	r1, [r7, #8]
 8006eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eae:	f000 f8f7 	bl	80070a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	1e5a      	subs	r2, r3, #1
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00f      	beq.n	8006ee2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec4:	3310      	adds	r3, #16
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 fe74 	bl	8007bb4 <xTaskRemoveFromEventList>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d007      	beq.n	8006ee2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ed2:	4b3d      	ldr	r3, [pc, #244]	; (8006fc8 <xQueueReceive+0x1bc>)
 8006ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ee2:	f001 fdd7 	bl	8008a94 <vPortExitCritical>
				return pdPASS;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e069      	b.n	8006fbe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d103      	bne.n	8006ef8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ef0:	f001 fdd0 	bl	8008a94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e062      	b.n	8006fbe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d106      	bne.n	8006f0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006efe:	f107 0310 	add.w	r3, r7, #16
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 fee0 	bl	8007cc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f0c:	f001 fdc2 	bl	8008a94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f10:	f000 fc26 	bl	8007760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f14:	f001 fd8e 	bl	8008a34 <vPortEnterCritical>
 8006f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f1e:	b25b      	sxtb	r3, r3
 8006f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f24:	d103      	bne.n	8006f2e <xQueueReceive+0x122>
 8006f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f34:	b25b      	sxtb	r3, r3
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f3a:	d103      	bne.n	8006f44 <xQueueReceive+0x138>
 8006f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f44:	f001 fda6 	bl	8008a94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f48:	1d3a      	adds	r2, r7, #4
 8006f4a:	f107 0310 	add.w	r3, r7, #16
 8006f4e:	4611      	mov	r1, r2
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 fecf 	bl	8007cf4 <xTaskCheckForTimeOut>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d123      	bne.n	8006fa4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f5e:	f000 f917 	bl	8007190 <prvIsQueueEmpty>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d017      	beq.n	8006f98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	3324      	adds	r3, #36	; 0x24
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	4611      	mov	r1, r2
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 fdcf 	bl	8007b14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f78:	f000 f8b8 	bl	80070ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f7c:	f000 fbfe 	bl	800777c <xTaskResumeAll>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d189      	bne.n	8006e9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006f86:	4b10      	ldr	r3, [pc, #64]	; (8006fc8 <xQueueReceive+0x1bc>)
 8006f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	e780      	b.n	8006e9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f9a:	f000 f8a7 	bl	80070ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f9e:	f000 fbed 	bl	800777c <xTaskResumeAll>
 8006fa2:	e77a      	b.n	8006e9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fa6:	f000 f8a1 	bl	80070ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006faa:	f000 fbe7 	bl	800777c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fb0:	f000 f8ee 	bl	8007190 <prvIsQueueEmpty>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f43f af6f 	beq.w	8006e9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3730      	adds	r7, #48	; 0x30
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	e000ed04 	.word	0xe000ed04

08006fcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10d      	bne.n	8007006 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d14d      	bne.n	800708e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 ffe2 	bl	8007fc0 <xTaskPriorityDisinherit>
 8006ffc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	609a      	str	r2, [r3, #8]
 8007004:	e043      	b.n	800708e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d119      	bne.n	8007040 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6858      	ldr	r0, [r3, #4]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007014:	461a      	mov	r2, r3
 8007016:	68b9      	ldr	r1, [r7, #8]
 8007018:	f00b fb29 	bl	801266e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007024:	441a      	add	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	429a      	cmp	r2, r3
 8007034:	d32b      	bcc.n	800708e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	605a      	str	r2, [r3, #4]
 800703e:	e026      	b.n	800708e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	68d8      	ldr	r0, [r3, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007048:	461a      	mov	r2, r3
 800704a:	68b9      	ldr	r1, [r7, #8]
 800704c:	f00b fb0f 	bl	801266e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007058:	425b      	negs	r3, r3
 800705a:	441a      	add	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d207      	bcs.n	800707c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007074:	425b      	negs	r3, r3
 8007076:	441a      	add	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b02      	cmp	r3, #2
 8007080:	d105      	bne.n	800708e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	3b01      	subs	r3, #1
 800708c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007096:	697b      	ldr	r3, [r7, #20]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d018      	beq.n	80070e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	441a      	add	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68da      	ldr	r2, [r3, #12]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d303      	bcc.n	80070d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68d9      	ldr	r1, [r3, #12]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070dc:	461a      	mov	r2, r3
 80070de:	6838      	ldr	r0, [r7, #0]
 80070e0:	f00b fac5 	bl	801266e <memcpy>
	}
}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070f4:	f001 fc9e 	bl	8008a34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007100:	e011      	b.n	8007126 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	2b00      	cmp	r3, #0
 8007108:	d012      	beq.n	8007130 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	3324      	adds	r3, #36	; 0x24
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fd50 	bl	8007bb4 <xTaskRemoveFromEventList>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800711a:	f000 fe4d 	bl	8007db8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800711e:	7bfb      	ldrb	r3, [r7, #15]
 8007120:	3b01      	subs	r3, #1
 8007122:	b2db      	uxtb	r3, r3
 8007124:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800712a:	2b00      	cmp	r3, #0
 800712c:	dce9      	bgt.n	8007102 <prvUnlockQueue+0x16>
 800712e:	e000      	b.n	8007132 <prvUnlockQueue+0x46>
					break;
 8007130:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	22ff      	movs	r2, #255	; 0xff
 8007136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800713a:	f001 fcab 	bl	8008a94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800713e:	f001 fc79 	bl	8008a34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007148:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800714a:	e011      	b.n	8007170 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d012      	beq.n	800717a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	3310      	adds	r3, #16
 8007158:	4618      	mov	r0, r3
 800715a:	f000 fd2b 	bl	8007bb4 <xTaskRemoveFromEventList>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007164:	f000 fe28 	bl	8007db8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007168:	7bbb      	ldrb	r3, [r7, #14]
 800716a:	3b01      	subs	r3, #1
 800716c:	b2db      	uxtb	r3, r3
 800716e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007174:	2b00      	cmp	r3, #0
 8007176:	dce9      	bgt.n	800714c <prvUnlockQueue+0x60>
 8007178:	e000      	b.n	800717c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800717a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	22ff      	movs	r2, #255	; 0xff
 8007180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007184:	f001 fc86 	bl	8008a94 <vPortExitCritical>
}
 8007188:	bf00      	nop
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007198:	f001 fc4c 	bl	8008a34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d102      	bne.n	80071aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071a4:	2301      	movs	r3, #1
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	e001      	b.n	80071ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071ae:	f001 fc71 	bl	8008a94 <vPortExitCritical>

	return xReturn;
 80071b2:	68fb      	ldr	r3, [r7, #12]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071c4:	f001 fc36 	bl	8008a34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d102      	bne.n	80071da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071d4:	2301      	movs	r3, #1
 80071d6:	60fb      	str	r3, [r7, #12]
 80071d8:	e001      	b.n	80071de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071de:	f001 fc59 	bl	8008a94 <vPortExitCritical>

	return xReturn;
 80071e2:	68fb      	ldr	r3, [r7, #12]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071f6:	2300      	movs	r3, #0
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	e014      	b.n	8007226 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80071fc:	4a0f      	ldr	r2, [pc, #60]	; (800723c <vQueueAddToRegistry+0x50>)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10b      	bne.n	8007220 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007208:	490c      	ldr	r1, [pc, #48]	; (800723c <vQueueAddToRegistry+0x50>)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007212:	4a0a      	ldr	r2, [pc, #40]	; (800723c <vQueueAddToRegistry+0x50>)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	00db      	lsls	r3, r3, #3
 8007218:	4413      	add	r3, r2
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800721e:	e006      	b.n	800722e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	3301      	adds	r3, #1
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2b07      	cmp	r3, #7
 800722a:	d9e7      	bls.n	80071fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800722c:	bf00      	nop
 800722e:	bf00      	nop
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	200097b8 	.word	0x200097b8

08007240 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007250:	f001 fbf0 	bl	8008a34 <vPortEnterCritical>
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800725a:	b25b      	sxtb	r3, r3
 800725c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007260:	d103      	bne.n	800726a <vQueueWaitForMessageRestricted+0x2a>
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007270:	b25b      	sxtb	r3, r3
 8007272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007276:	d103      	bne.n	8007280 <vQueueWaitForMessageRestricted+0x40>
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007280:	f001 fc08 	bl	8008a94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007288:	2b00      	cmp	r3, #0
 800728a:	d106      	bne.n	800729a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	3324      	adds	r3, #36	; 0x24
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	68b9      	ldr	r1, [r7, #8]
 8007294:	4618      	mov	r0, r3
 8007296:	f000 fc61 	bl	8007b5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800729a:	6978      	ldr	r0, [r7, #20]
 800729c:	f7ff ff26 	bl	80070ec <prvUnlockQueue>
	}
 80072a0:	bf00      	nop
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08e      	sub	sp, #56	; 0x38
 80072ac:	af04      	add	r7, sp, #16
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
 80072b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10a      	bne.n	80072d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	623b      	str	r3, [r7, #32]
}
 80072ce:	bf00      	nop
 80072d0:	e7fe      	b.n	80072d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80072d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10a      	bne.n	80072ee <xTaskCreateStatic+0x46>
	__asm volatile
 80072d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072dc:	f383 8811 	msr	BASEPRI, r3
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	61fb      	str	r3, [r7, #28]
}
 80072ea:	bf00      	nop
 80072ec:	e7fe      	b.n	80072ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80072ee:	23a8      	movs	r3, #168	; 0xa8
 80072f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	2ba8      	cmp	r3, #168	; 0xa8
 80072f6:	d00a      	beq.n	800730e <xTaskCreateStatic+0x66>
	__asm volatile
 80072f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fc:	f383 8811 	msr	BASEPRI, r3
 8007300:	f3bf 8f6f 	isb	sy
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	61bb      	str	r3, [r7, #24]
}
 800730a:	bf00      	nop
 800730c:	e7fe      	b.n	800730c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800730e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007312:	2b00      	cmp	r3, #0
 8007314:	d01e      	beq.n	8007354 <xTaskCreateStatic+0xac>
 8007316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007318:	2b00      	cmp	r3, #0
 800731a:	d01b      	beq.n	8007354 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800731c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007324:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	2202      	movs	r2, #2
 800732a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800732e:	2300      	movs	r3, #0
 8007330:	9303      	str	r3, [sp, #12]
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	9302      	str	r3, [sp, #8]
 8007336:	f107 0314 	add.w	r3, r7, #20
 800733a:	9301      	str	r3, [sp, #4]
 800733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	68b9      	ldr	r1, [r7, #8]
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 f850 	bl	80073ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800734c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800734e:	f000 f8f3 	bl	8007538 <prvAddNewTaskToReadyList>
 8007352:	e001      	b.n	8007358 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007354:	2300      	movs	r3, #0
 8007356:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007358:	697b      	ldr	r3, [r7, #20]
	}
 800735a:	4618      	mov	r0, r3
 800735c:	3728      	adds	r7, #40	; 0x28
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007362:	b580      	push	{r7, lr}
 8007364:	b08c      	sub	sp, #48	; 0x30
 8007366:	af04      	add	r7, sp, #16
 8007368:	60f8      	str	r0, [r7, #12]
 800736a:	60b9      	str	r1, [r7, #8]
 800736c:	603b      	str	r3, [r7, #0]
 800736e:	4613      	mov	r3, r2
 8007370:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007372:	88fb      	ldrh	r3, [r7, #6]
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4618      	mov	r0, r3
 8007378:	f001 fc7e 	bl	8008c78 <pvPortMalloc>
 800737c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00e      	beq.n	80073a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007384:	20a8      	movs	r0, #168	; 0xa8
 8007386:	f001 fc77 	bl	8008c78 <pvPortMalloc>
 800738a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	631a      	str	r2, [r3, #48]	; 0x30
 8007398:	e005      	b.n	80073a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800739a:	6978      	ldr	r0, [r7, #20]
 800739c:	f001 fd38 	bl	8008e10 <vPortFree>
 80073a0:	e001      	b.n	80073a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d017      	beq.n	80073dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073b4:	88fa      	ldrh	r2, [r7, #6]
 80073b6:	2300      	movs	r3, #0
 80073b8:	9303      	str	r3, [sp, #12]
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	9302      	str	r3, [sp, #8]
 80073be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c0:	9301      	str	r3, [sp, #4]
 80073c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	68b9      	ldr	r1, [r7, #8]
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 f80e 	bl	80073ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073d0:	69f8      	ldr	r0, [r7, #28]
 80073d2:	f000 f8b1 	bl	8007538 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073d6:	2301      	movs	r3, #1
 80073d8:	61bb      	str	r3, [r7, #24]
 80073da:	e002      	b.n	80073e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073e2:	69bb      	ldr	r3, [r7, #24]
	}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3720      	adds	r7, #32
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b088      	sub	sp, #32
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
 80073f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	461a      	mov	r2, r3
 8007404:	21a5      	movs	r1, #165	; 0xa5
 8007406:	f00b f813 	bl	8012430 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800740a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007414:	3b01      	subs	r3, #1
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	f023 0307 	bic.w	r3, r3, #7
 8007422:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00a      	beq.n	8007444 <prvInitialiseNewTask+0x58>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	617b      	str	r3, [r7, #20]
}
 8007440:	bf00      	nop
 8007442:	e7fe      	b.n	8007442 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d01f      	beq.n	800748a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800744a:	2300      	movs	r3, #0
 800744c:	61fb      	str	r3, [r7, #28]
 800744e:	e012      	b.n	8007476 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	4413      	add	r3, r2
 8007456:	7819      	ldrb	r1, [r3, #0]
 8007458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	4413      	add	r3, r2
 800745e:	3334      	adds	r3, #52	; 0x34
 8007460:	460a      	mov	r2, r1
 8007462:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	4413      	add	r3, r2
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d006      	beq.n	800747e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	3301      	adds	r3, #1
 8007474:	61fb      	str	r3, [r7, #28]
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	2b0f      	cmp	r3, #15
 800747a:	d9e9      	bls.n	8007450 <prvInitialiseNewTask+0x64>
 800747c:	e000      	b.n	8007480 <prvInitialiseNewTask+0x94>
			{
				break;
 800747e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007488:	e003      	b.n	8007492 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800748a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007494:	2b37      	cmp	r3, #55	; 0x37
 8007496:	d901      	bls.n	800749c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007498:	2337      	movs	r3, #55	; 0x37
 800749a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074aa:	2200      	movs	r2, #0
 80074ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	3304      	adds	r3, #4
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff f978 	bl	80067a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ba:	3318      	adds	r3, #24
 80074bc:	4618      	mov	r0, r3
 80074be:	f7ff f973 	bl	80067a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	2200      	movs	r2, #0
 80074dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	3354      	adds	r3, #84	; 0x54
 80074ec:	224c      	movs	r2, #76	; 0x4c
 80074ee:	2100      	movs	r1, #0
 80074f0:	4618      	mov	r0, r3
 80074f2:	f00a ff9d 	bl	8012430 <memset>
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	4a0c      	ldr	r2, [pc, #48]	; (800752c <prvInitialiseNewTask+0x140>)
 80074fa:	659a      	str	r2, [r3, #88]	; 0x58
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	4a0c      	ldr	r2, [pc, #48]	; (8007530 <prvInitialiseNewTask+0x144>)
 8007500:	65da      	str	r2, [r3, #92]	; 0x5c
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	4a0b      	ldr	r2, [pc, #44]	; (8007534 <prvInitialiseNewTask+0x148>)
 8007506:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	68f9      	ldr	r1, [r7, #12]
 800750c:	69b8      	ldr	r0, [r7, #24]
 800750e:	f001 f967 	bl	80087e0 <pxPortInitialiseStack>
 8007512:	4602      	mov	r2, r0
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800751e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007522:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007524:	bf00      	nop
 8007526:	3720      	adds	r7, #32
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	20012560 	.word	0x20012560
 8007530:	200125c8 	.word	0x200125c8
 8007534:	20012630 	.word	0x20012630

08007538 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007540:	f001 fa78 	bl	8008a34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007544:	4b2d      	ldr	r3, [pc, #180]	; (80075fc <prvAddNewTaskToReadyList+0xc4>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3301      	adds	r3, #1
 800754a:	4a2c      	ldr	r2, [pc, #176]	; (80075fc <prvAddNewTaskToReadyList+0xc4>)
 800754c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800754e:	4b2c      	ldr	r3, [pc, #176]	; (8007600 <prvAddNewTaskToReadyList+0xc8>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d109      	bne.n	800756a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007556:	4a2a      	ldr	r2, [pc, #168]	; (8007600 <prvAddNewTaskToReadyList+0xc8>)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800755c:	4b27      	ldr	r3, [pc, #156]	; (80075fc <prvAddNewTaskToReadyList+0xc4>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d110      	bne.n	8007586 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007564:	f000 fc4c 	bl	8007e00 <prvInitialiseTaskLists>
 8007568:	e00d      	b.n	8007586 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800756a:	4b26      	ldr	r3, [pc, #152]	; (8007604 <prvAddNewTaskToReadyList+0xcc>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d109      	bne.n	8007586 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007572:	4b23      	ldr	r3, [pc, #140]	; (8007600 <prvAddNewTaskToReadyList+0xc8>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757c:	429a      	cmp	r2, r3
 800757e:	d802      	bhi.n	8007586 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007580:	4a1f      	ldr	r2, [pc, #124]	; (8007600 <prvAddNewTaskToReadyList+0xc8>)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007586:	4b20      	ldr	r3, [pc, #128]	; (8007608 <prvAddNewTaskToReadyList+0xd0>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3301      	adds	r3, #1
 800758c:	4a1e      	ldr	r2, [pc, #120]	; (8007608 <prvAddNewTaskToReadyList+0xd0>)
 800758e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007590:	4b1d      	ldr	r3, [pc, #116]	; (8007608 <prvAddNewTaskToReadyList+0xd0>)
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800759c:	4b1b      	ldr	r3, [pc, #108]	; (800760c <prvAddNewTaskToReadyList+0xd4>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d903      	bls.n	80075ac <prvAddNewTaskToReadyList+0x74>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a8:	4a18      	ldr	r2, [pc, #96]	; (800760c <prvAddNewTaskToReadyList+0xd4>)
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b0:	4613      	mov	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4a15      	ldr	r2, [pc, #84]	; (8007610 <prvAddNewTaskToReadyList+0xd8>)
 80075ba:	441a      	add	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3304      	adds	r3, #4
 80075c0:	4619      	mov	r1, r3
 80075c2:	4610      	mov	r0, r2
 80075c4:	f7ff f8fd 	bl	80067c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075c8:	f001 fa64 	bl	8008a94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075cc:	4b0d      	ldr	r3, [pc, #52]	; (8007604 <prvAddNewTaskToReadyList+0xcc>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00e      	beq.n	80075f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075d4:	4b0a      	ldr	r3, [pc, #40]	; (8007600 <prvAddNewTaskToReadyList+0xc8>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075de:	429a      	cmp	r2, r3
 80075e0:	d207      	bcs.n	80075f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075e2:	4b0c      	ldr	r3, [pc, #48]	; (8007614 <prvAddNewTaskToReadyList+0xdc>)
 80075e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075f2:	bf00      	nop
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	20009ccc 	.word	0x20009ccc
 8007600:	200097f8 	.word	0x200097f8
 8007604:	20009cd8 	.word	0x20009cd8
 8007608:	20009ce8 	.word	0x20009ce8
 800760c:	20009cd4 	.word	0x20009cd4
 8007610:	200097fc 	.word	0x200097fc
 8007614:	e000ed04 	.word	0xe000ed04

08007618 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007620:	2300      	movs	r3, #0
 8007622:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d017      	beq.n	800765a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800762a:	4b13      	ldr	r3, [pc, #76]	; (8007678 <vTaskDelay+0x60>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00a      	beq.n	8007648 <vTaskDelay+0x30>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	60bb      	str	r3, [r7, #8]
}
 8007644:	bf00      	nop
 8007646:	e7fe      	b.n	8007646 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007648:	f000 f88a 	bl	8007760 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800764c:	2100      	movs	r1, #0
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fd24 	bl	800809c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007654:	f000 f892 	bl	800777c <xTaskResumeAll>
 8007658:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d107      	bne.n	8007670 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007660:	4b06      	ldr	r3, [pc, #24]	; (800767c <vTaskDelay+0x64>)
 8007662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007670:	bf00      	nop
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	20009cf4 	.word	0x20009cf4
 800767c:	e000ed04 	.word	0xe000ed04

08007680 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b08a      	sub	sp, #40	; 0x28
 8007684:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007686:	2300      	movs	r3, #0
 8007688:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800768a:	2300      	movs	r3, #0
 800768c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800768e:	463a      	mov	r2, r7
 8007690:	1d39      	adds	r1, r7, #4
 8007692:	f107 0308 	add.w	r3, r7, #8
 8007696:	4618      	mov	r0, r3
 8007698:	f7ff f832 	bl	8006700 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	9202      	str	r2, [sp, #8]
 80076a4:	9301      	str	r3, [sp, #4]
 80076a6:	2300      	movs	r3, #0
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	2300      	movs	r3, #0
 80076ac:	460a      	mov	r2, r1
 80076ae:	4924      	ldr	r1, [pc, #144]	; (8007740 <vTaskStartScheduler+0xc0>)
 80076b0:	4824      	ldr	r0, [pc, #144]	; (8007744 <vTaskStartScheduler+0xc4>)
 80076b2:	f7ff fdf9 	bl	80072a8 <xTaskCreateStatic>
 80076b6:	4603      	mov	r3, r0
 80076b8:	4a23      	ldr	r2, [pc, #140]	; (8007748 <vTaskStartScheduler+0xc8>)
 80076ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076bc:	4b22      	ldr	r3, [pc, #136]	; (8007748 <vTaskStartScheduler+0xc8>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d002      	beq.n	80076ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076c4:	2301      	movs	r3, #1
 80076c6:	617b      	str	r3, [r7, #20]
 80076c8:	e001      	b.n	80076ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d102      	bne.n	80076da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80076d4:	f000 fd36 	bl	8008144 <xTimerCreateTimerTask>
 80076d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d11b      	bne.n	8007718 <vTaskStartScheduler+0x98>
	__asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	613b      	str	r3, [r7, #16]
}
 80076f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076f4:	4b15      	ldr	r3, [pc, #84]	; (800774c <vTaskStartScheduler+0xcc>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3354      	adds	r3, #84	; 0x54
 80076fa:	4a15      	ldr	r2, [pc, #84]	; (8007750 <vTaskStartScheduler+0xd0>)
 80076fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076fe:	4b15      	ldr	r3, [pc, #84]	; (8007754 <vTaskStartScheduler+0xd4>)
 8007700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007704:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007706:	4b14      	ldr	r3, [pc, #80]	; (8007758 <vTaskStartScheduler+0xd8>)
 8007708:	2201      	movs	r2, #1
 800770a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800770c:	4b13      	ldr	r3, [pc, #76]	; (800775c <vTaskStartScheduler+0xdc>)
 800770e:	2200      	movs	r2, #0
 8007710:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007712:	f001 f8ed 	bl	80088f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007716:	e00e      	b.n	8007736 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800771e:	d10a      	bne.n	8007736 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	60fb      	str	r3, [r7, #12]
}
 8007732:	bf00      	nop
 8007734:	e7fe      	b.n	8007734 <vTaskStartScheduler+0xb4>
}
 8007736:	bf00      	nop
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	080134ec 	.word	0x080134ec
 8007744:	08007dd1 	.word	0x08007dd1
 8007748:	20009cf0 	.word	0x20009cf0
 800774c:	200097f8 	.word	0x200097f8
 8007750:	2000010c 	.word	0x2000010c
 8007754:	20009cec 	.word	0x20009cec
 8007758:	20009cd8 	.word	0x20009cd8
 800775c:	20009cd0 	.word	0x20009cd0

08007760 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007760:	b480      	push	{r7}
 8007762:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007764:	4b04      	ldr	r3, [pc, #16]	; (8007778 <vTaskSuspendAll+0x18>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3301      	adds	r3, #1
 800776a:	4a03      	ldr	r2, [pc, #12]	; (8007778 <vTaskSuspendAll+0x18>)
 800776c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800776e:	bf00      	nop
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr
 8007778:	20009cf4 	.word	0x20009cf4

0800777c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007782:	2300      	movs	r3, #0
 8007784:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007786:	2300      	movs	r3, #0
 8007788:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800778a:	4b42      	ldr	r3, [pc, #264]	; (8007894 <xTaskResumeAll+0x118>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10a      	bne.n	80077a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	603b      	str	r3, [r7, #0]
}
 80077a4:	bf00      	nop
 80077a6:	e7fe      	b.n	80077a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077a8:	f001 f944 	bl	8008a34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077ac:	4b39      	ldr	r3, [pc, #228]	; (8007894 <xTaskResumeAll+0x118>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	4a38      	ldr	r2, [pc, #224]	; (8007894 <xTaskResumeAll+0x118>)
 80077b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077b6:	4b37      	ldr	r3, [pc, #220]	; (8007894 <xTaskResumeAll+0x118>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d162      	bne.n	8007884 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077be:	4b36      	ldr	r3, [pc, #216]	; (8007898 <xTaskResumeAll+0x11c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d05e      	beq.n	8007884 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077c6:	e02f      	b.n	8007828 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077c8:	4b34      	ldr	r3, [pc, #208]	; (800789c <xTaskResumeAll+0x120>)
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3318      	adds	r3, #24
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7ff f851 	bl	800687c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3304      	adds	r3, #4
 80077de:	4618      	mov	r0, r3
 80077e0:	f7ff f84c 	bl	800687c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e8:	4b2d      	ldr	r3, [pc, #180]	; (80078a0 <xTaskResumeAll+0x124>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d903      	bls.n	80077f8 <xTaskResumeAll+0x7c>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	4a2a      	ldr	r2, [pc, #168]	; (80078a0 <xTaskResumeAll+0x124>)
 80077f6:	6013      	str	r3, [r2, #0]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fc:	4613      	mov	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4413      	add	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4a27      	ldr	r2, [pc, #156]	; (80078a4 <xTaskResumeAll+0x128>)
 8007806:	441a      	add	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3304      	adds	r3, #4
 800780c:	4619      	mov	r1, r3
 800780e:	4610      	mov	r0, r2
 8007810:	f7fe ffd7 	bl	80067c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007818:	4b23      	ldr	r3, [pc, #140]	; (80078a8 <xTaskResumeAll+0x12c>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781e:	429a      	cmp	r2, r3
 8007820:	d302      	bcc.n	8007828 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007822:	4b22      	ldr	r3, [pc, #136]	; (80078ac <xTaskResumeAll+0x130>)
 8007824:	2201      	movs	r2, #1
 8007826:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007828:	4b1c      	ldr	r3, [pc, #112]	; (800789c <xTaskResumeAll+0x120>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1cb      	bne.n	80077c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007836:	f000 fb85 	bl	8007f44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800783a:	4b1d      	ldr	r3, [pc, #116]	; (80078b0 <xTaskResumeAll+0x134>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d010      	beq.n	8007868 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007846:	f000 f847 	bl	80078d8 <xTaskIncrementTick>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007850:	4b16      	ldr	r3, [pc, #88]	; (80078ac <xTaskResumeAll+0x130>)
 8007852:	2201      	movs	r2, #1
 8007854:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	3b01      	subs	r3, #1
 800785a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1f1      	bne.n	8007846 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007862:	4b13      	ldr	r3, [pc, #76]	; (80078b0 <xTaskResumeAll+0x134>)
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007868:	4b10      	ldr	r3, [pc, #64]	; (80078ac <xTaskResumeAll+0x130>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d009      	beq.n	8007884 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007870:	2301      	movs	r3, #1
 8007872:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007874:	4b0f      	ldr	r3, [pc, #60]	; (80078b4 <xTaskResumeAll+0x138>)
 8007876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007884:	f001 f906 	bl	8008a94 <vPortExitCritical>

	return xAlreadyYielded;
 8007888:	68bb      	ldr	r3, [r7, #8]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20009cf4 	.word	0x20009cf4
 8007898:	20009ccc 	.word	0x20009ccc
 800789c:	20009c8c 	.word	0x20009c8c
 80078a0:	20009cd4 	.word	0x20009cd4
 80078a4:	200097fc 	.word	0x200097fc
 80078a8:	200097f8 	.word	0x200097f8
 80078ac:	20009ce0 	.word	0x20009ce0
 80078b0:	20009cdc 	.word	0x20009cdc
 80078b4:	e000ed04 	.word	0xe000ed04

080078b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078be:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <xTaskGetTickCount+0x1c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078c4:	687b      	ldr	r3, [r7, #4]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	20009cd0 	.word	0x20009cd0

080078d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078de:	2300      	movs	r3, #0
 80078e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078e2:	4b4f      	ldr	r3, [pc, #316]	; (8007a20 <xTaskIncrementTick+0x148>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f040 808f 	bne.w	8007a0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078ec:	4b4d      	ldr	r3, [pc, #308]	; (8007a24 <xTaskIncrementTick+0x14c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3301      	adds	r3, #1
 80078f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078f4:	4a4b      	ldr	r2, [pc, #300]	; (8007a24 <xTaskIncrementTick+0x14c>)
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d120      	bne.n	8007942 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007900:	4b49      	ldr	r3, [pc, #292]	; (8007a28 <xTaskIncrementTick+0x150>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <xTaskIncrementTick+0x48>
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	603b      	str	r3, [r7, #0]
}
 800791c:	bf00      	nop
 800791e:	e7fe      	b.n	800791e <xTaskIncrementTick+0x46>
 8007920:	4b41      	ldr	r3, [pc, #260]	; (8007a28 <xTaskIncrementTick+0x150>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	60fb      	str	r3, [r7, #12]
 8007926:	4b41      	ldr	r3, [pc, #260]	; (8007a2c <xTaskIncrementTick+0x154>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a3f      	ldr	r2, [pc, #252]	; (8007a28 <xTaskIncrementTick+0x150>)
 800792c:	6013      	str	r3, [r2, #0]
 800792e:	4a3f      	ldr	r2, [pc, #252]	; (8007a2c <xTaskIncrementTick+0x154>)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	4b3e      	ldr	r3, [pc, #248]	; (8007a30 <xTaskIncrementTick+0x158>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3301      	adds	r3, #1
 800793a:	4a3d      	ldr	r2, [pc, #244]	; (8007a30 <xTaskIncrementTick+0x158>)
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	f000 fb01 	bl	8007f44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007942:	4b3c      	ldr	r3, [pc, #240]	; (8007a34 <xTaskIncrementTick+0x15c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	429a      	cmp	r2, r3
 800794a:	d349      	bcc.n	80079e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800794c:	4b36      	ldr	r3, [pc, #216]	; (8007a28 <xTaskIncrementTick+0x150>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d104      	bne.n	8007960 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007956:	4b37      	ldr	r3, [pc, #220]	; (8007a34 <xTaskIncrementTick+0x15c>)
 8007958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800795c:	601a      	str	r2, [r3, #0]
					break;
 800795e:	e03f      	b.n	80079e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007960:	4b31      	ldr	r3, [pc, #196]	; (8007a28 <xTaskIncrementTick+0x150>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	429a      	cmp	r2, r3
 8007976:	d203      	bcs.n	8007980 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007978:	4a2e      	ldr	r2, [pc, #184]	; (8007a34 <xTaskIncrementTick+0x15c>)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800797e:	e02f      	b.n	80079e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	3304      	adds	r3, #4
 8007984:	4618      	mov	r0, r3
 8007986:	f7fe ff79 	bl	800687c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	2b00      	cmp	r3, #0
 8007990:	d004      	beq.n	800799c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	3318      	adds	r3, #24
 8007996:	4618      	mov	r0, r3
 8007998:	f7fe ff70 	bl	800687c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a0:	4b25      	ldr	r3, [pc, #148]	; (8007a38 <xTaskIncrementTick+0x160>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d903      	bls.n	80079b0 <xTaskIncrementTick+0xd8>
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	4a22      	ldr	r2, [pc, #136]	; (8007a38 <xTaskIncrementTick+0x160>)
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b4:	4613      	mov	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4a1f      	ldr	r2, [pc, #124]	; (8007a3c <xTaskIncrementTick+0x164>)
 80079be:	441a      	add	r2, r3
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	3304      	adds	r3, #4
 80079c4:	4619      	mov	r1, r3
 80079c6:	4610      	mov	r0, r2
 80079c8:	f7fe fefb 	bl	80067c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d0:	4b1b      	ldr	r3, [pc, #108]	; (8007a40 <xTaskIncrementTick+0x168>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d3b8      	bcc.n	800794c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80079da:	2301      	movs	r3, #1
 80079dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079de:	e7b5      	b.n	800794c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079e0:	4b17      	ldr	r3, [pc, #92]	; (8007a40 <xTaskIncrementTick+0x168>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e6:	4915      	ldr	r1, [pc, #84]	; (8007a3c <xTaskIncrementTick+0x164>)
 80079e8:	4613      	mov	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	440b      	add	r3, r1
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d901      	bls.n	80079fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80079f8:	2301      	movs	r3, #1
 80079fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079fc:	4b11      	ldr	r3, [pc, #68]	; (8007a44 <xTaskIncrementTick+0x16c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d007      	beq.n	8007a14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007a04:	2301      	movs	r3, #1
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	e004      	b.n	8007a14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a0a:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <xTaskIncrementTick+0x170>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	4a0d      	ldr	r2, [pc, #52]	; (8007a48 <xTaskIncrementTick+0x170>)
 8007a12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a14:	697b      	ldr	r3, [r7, #20]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20009cf4 	.word	0x20009cf4
 8007a24:	20009cd0 	.word	0x20009cd0
 8007a28:	20009c84 	.word	0x20009c84
 8007a2c:	20009c88 	.word	0x20009c88
 8007a30:	20009ce4 	.word	0x20009ce4
 8007a34:	20009cec 	.word	0x20009cec
 8007a38:	20009cd4 	.word	0x20009cd4
 8007a3c:	200097fc 	.word	0x200097fc
 8007a40:	200097f8 	.word	0x200097f8
 8007a44:	20009ce0 	.word	0x20009ce0
 8007a48:	20009cdc 	.word	0x20009cdc

08007a4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a52:	4b2a      	ldr	r3, [pc, #168]	; (8007afc <vTaskSwitchContext+0xb0>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a5a:	4b29      	ldr	r3, [pc, #164]	; (8007b00 <vTaskSwitchContext+0xb4>)
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a60:	e046      	b.n	8007af0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007a62:	4b27      	ldr	r3, [pc, #156]	; (8007b00 <vTaskSwitchContext+0xb4>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a68:	4b26      	ldr	r3, [pc, #152]	; (8007b04 <vTaskSwitchContext+0xb8>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	60fb      	str	r3, [r7, #12]
 8007a6e:	e010      	b.n	8007a92 <vTaskSwitchContext+0x46>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10a      	bne.n	8007a8c <vTaskSwitchContext+0x40>
	__asm volatile
 8007a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	607b      	str	r3, [r7, #4]
}
 8007a88:	bf00      	nop
 8007a8a:	e7fe      	b.n	8007a8a <vTaskSwitchContext+0x3e>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	491d      	ldr	r1, [pc, #116]	; (8007b08 <vTaskSwitchContext+0xbc>)
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	440b      	add	r3, r1
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d0e4      	beq.n	8007a70 <vTaskSwitchContext+0x24>
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4a15      	ldr	r2, [pc, #84]	; (8007b08 <vTaskSwitchContext+0xbc>)
 8007ab2:	4413      	add	r3, r2
 8007ab4:	60bb      	str	r3, [r7, #8]
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	605a      	str	r2, [r3, #4]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	3308      	adds	r3, #8
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d104      	bne.n	8007ad6 <vTaskSwitchContext+0x8a>
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	605a      	str	r2, [r3, #4]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	4a0b      	ldr	r2, [pc, #44]	; (8007b0c <vTaskSwitchContext+0xc0>)
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	4a08      	ldr	r2, [pc, #32]	; (8007b04 <vTaskSwitchContext+0xb8>)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ae6:	4b09      	ldr	r3, [pc, #36]	; (8007b0c <vTaskSwitchContext+0xc0>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3354      	adds	r3, #84	; 0x54
 8007aec:	4a08      	ldr	r2, [pc, #32]	; (8007b10 <vTaskSwitchContext+0xc4>)
 8007aee:	6013      	str	r3, [r2, #0]
}
 8007af0:	bf00      	nop
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	20009cf4 	.word	0x20009cf4
 8007b00:	20009ce0 	.word	0x20009ce0
 8007b04:	20009cd4 	.word	0x20009cd4
 8007b08:	200097fc 	.word	0x200097fc
 8007b0c:	200097f8 	.word	0x200097f8
 8007b10:	2000010c 	.word	0x2000010c

08007b14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10a      	bne.n	8007b3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	60fb      	str	r3, [r7, #12]
}
 8007b36:	bf00      	nop
 8007b38:	e7fe      	b.n	8007b38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b3a:	4b07      	ldr	r3, [pc, #28]	; (8007b58 <vTaskPlaceOnEventList+0x44>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3318      	adds	r3, #24
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7fe fe61 	bl	800680a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b48:	2101      	movs	r1, #1
 8007b4a:	6838      	ldr	r0, [r7, #0]
 8007b4c:	f000 faa6 	bl	800809c <prvAddCurrentTaskToDelayedList>
}
 8007b50:	bf00      	nop
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	200097f8 	.word	0x200097f8

08007b5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10a      	bne.n	8007b84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	617b      	str	r3, [r7, #20]
}
 8007b80:	bf00      	nop
 8007b82:	e7fe      	b.n	8007b82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b84:	4b0a      	ldr	r3, [pc, #40]	; (8007bb0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3318      	adds	r3, #24
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f7fe fe18 	bl	80067c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	68b8      	ldr	r0, [r7, #8]
 8007ba2:	f000 fa7b 	bl	800809c <prvAddCurrentTaskToDelayedList>
	}
 8007ba6:	bf00      	nop
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	200097f8 	.word	0x200097f8

08007bb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10a      	bne.n	8007be0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	60fb      	str	r3, [r7, #12]
}
 8007bdc:	bf00      	nop
 8007bde:	e7fe      	b.n	8007bde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	3318      	adds	r3, #24
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7fe fe49 	bl	800687c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bea:	4b1e      	ldr	r3, [pc, #120]	; (8007c64 <xTaskRemoveFromEventList+0xb0>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d11d      	bne.n	8007c2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fe fe40 	bl	800687c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c00:	4b19      	ldr	r3, [pc, #100]	; (8007c68 <xTaskRemoveFromEventList+0xb4>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d903      	bls.n	8007c10 <xTaskRemoveFromEventList+0x5c>
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0c:	4a16      	ldr	r2, [pc, #88]	; (8007c68 <xTaskRemoveFromEventList+0xb4>)
 8007c0e:	6013      	str	r3, [r2, #0]
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c14:	4613      	mov	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4a13      	ldr	r2, [pc, #76]	; (8007c6c <xTaskRemoveFromEventList+0xb8>)
 8007c1e:	441a      	add	r2, r3
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	3304      	adds	r3, #4
 8007c24:	4619      	mov	r1, r3
 8007c26:	4610      	mov	r0, r2
 8007c28:	f7fe fdcb 	bl	80067c2 <vListInsertEnd>
 8007c2c:	e005      	b.n	8007c3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	3318      	adds	r3, #24
 8007c32:	4619      	mov	r1, r3
 8007c34:	480e      	ldr	r0, [pc, #56]	; (8007c70 <xTaskRemoveFromEventList+0xbc>)
 8007c36:	f7fe fdc4 	bl	80067c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3e:	4b0d      	ldr	r3, [pc, #52]	; (8007c74 <xTaskRemoveFromEventList+0xc0>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d905      	bls.n	8007c54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c4c:	4b0a      	ldr	r3, [pc, #40]	; (8007c78 <xTaskRemoveFromEventList+0xc4>)
 8007c4e:	2201      	movs	r2, #1
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	e001      	b.n	8007c58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007c54:	2300      	movs	r3, #0
 8007c56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c58:	697b      	ldr	r3, [r7, #20]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20009cf4 	.word	0x20009cf4
 8007c68:	20009cd4 	.word	0x20009cd4
 8007c6c:	200097fc 	.word	0x200097fc
 8007c70:	20009c8c 	.word	0x20009c8c
 8007c74:	200097f8 	.word	0x200097f8
 8007c78:	20009ce0 	.word	0x20009ce0

08007c7c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10a      	bne.n	8007ca0 <vTaskSetTimeOutState+0x24>
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	60fb      	str	r3, [r7, #12]
}
 8007c9c:	bf00      	nop
 8007c9e:	e7fe      	b.n	8007c9e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007ca0:	f000 fec8 	bl	8008a34 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ca4:	4b06      	ldr	r3, [pc, #24]	; (8007cc0 <vTaskSetTimeOutState+0x44>)
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007cac:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <vTaskSetTimeOutState+0x48>)
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007cb4:	f000 feee 	bl	8008a94 <vPortExitCritical>
}
 8007cb8:	bf00      	nop
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	20009ce4 	.word	0x20009ce4
 8007cc4:	20009cd0 	.word	0x20009cd0

08007cc8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007cd0:	4b06      	ldr	r3, [pc, #24]	; (8007cec <vTaskInternalSetTimeOutState+0x24>)
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007cd8:	4b05      	ldr	r3, [pc, #20]	; (8007cf0 <vTaskInternalSetTimeOutState+0x28>)
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	605a      	str	r2, [r3, #4]
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	20009ce4 	.word	0x20009ce4
 8007cf0:	20009cd0 	.word	0x20009cd0

08007cf4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b088      	sub	sp, #32
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10a      	bne.n	8007d1a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	613b      	str	r3, [r7, #16]
}
 8007d16:	bf00      	nop
 8007d18:	e7fe      	b.n	8007d18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10a      	bne.n	8007d36 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	60fb      	str	r3, [r7, #12]
}
 8007d32:	bf00      	nop
 8007d34:	e7fe      	b.n	8007d34 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007d36:	f000 fe7d 	bl	8008a34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d3a:	4b1d      	ldr	r3, [pc, #116]	; (8007db0 <xTaskCheckForTimeOut+0xbc>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d52:	d102      	bne.n	8007d5a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d54:	2300      	movs	r3, #0
 8007d56:	61fb      	str	r3, [r7, #28]
 8007d58:	e023      	b.n	8007da2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	4b15      	ldr	r3, [pc, #84]	; (8007db4 <xTaskCheckForTimeOut+0xc0>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d007      	beq.n	8007d76 <xTaskCheckForTimeOut+0x82>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d302      	bcc.n	8007d76 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d70:	2301      	movs	r3, #1
 8007d72:	61fb      	str	r3, [r7, #28]
 8007d74:	e015      	b.n	8007da2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d20b      	bcs.n	8007d98 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	1ad2      	subs	r2, r2, r3
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7ff ff9b 	bl	8007cc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d92:	2300      	movs	r3, #0
 8007d94:	61fb      	str	r3, [r7, #28]
 8007d96:	e004      	b.n	8007da2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007da2:	f000 fe77 	bl	8008a94 <vPortExitCritical>

	return xReturn;
 8007da6:	69fb      	ldr	r3, [r7, #28]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3720      	adds	r7, #32
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	20009cd0 	.word	0x20009cd0
 8007db4:	20009ce4 	.word	0x20009ce4

08007db8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007db8:	b480      	push	{r7}
 8007dba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007dbc:	4b03      	ldr	r3, [pc, #12]	; (8007dcc <vTaskMissedYield+0x14>)
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	601a      	str	r2, [r3, #0]
}
 8007dc2:	bf00      	nop
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	20009ce0 	.word	0x20009ce0

08007dd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007dd8:	f000 f852 	bl	8007e80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ddc:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <prvIdleTask+0x28>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d9f9      	bls.n	8007dd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007de4:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <prvIdleTask+0x2c>)
 8007de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dea:	601a      	str	r2, [r3, #0]
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007df4:	e7f0      	b.n	8007dd8 <prvIdleTask+0x8>
 8007df6:	bf00      	nop
 8007df8:	200097fc 	.word	0x200097fc
 8007dfc:	e000ed04 	.word	0xe000ed04

08007e00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e06:	2300      	movs	r3, #0
 8007e08:	607b      	str	r3, [r7, #4]
 8007e0a:	e00c      	b.n	8007e26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4a12      	ldr	r2, [pc, #72]	; (8007e60 <prvInitialiseTaskLists+0x60>)
 8007e18:	4413      	add	r3, r2
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe fca4 	bl	8006768 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	3301      	adds	r3, #1
 8007e24:	607b      	str	r3, [r7, #4]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b37      	cmp	r3, #55	; 0x37
 8007e2a:	d9ef      	bls.n	8007e0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e2c:	480d      	ldr	r0, [pc, #52]	; (8007e64 <prvInitialiseTaskLists+0x64>)
 8007e2e:	f7fe fc9b 	bl	8006768 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e32:	480d      	ldr	r0, [pc, #52]	; (8007e68 <prvInitialiseTaskLists+0x68>)
 8007e34:	f7fe fc98 	bl	8006768 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e38:	480c      	ldr	r0, [pc, #48]	; (8007e6c <prvInitialiseTaskLists+0x6c>)
 8007e3a:	f7fe fc95 	bl	8006768 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e3e:	480c      	ldr	r0, [pc, #48]	; (8007e70 <prvInitialiseTaskLists+0x70>)
 8007e40:	f7fe fc92 	bl	8006768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e44:	480b      	ldr	r0, [pc, #44]	; (8007e74 <prvInitialiseTaskLists+0x74>)
 8007e46:	f7fe fc8f 	bl	8006768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e4a:	4b0b      	ldr	r3, [pc, #44]	; (8007e78 <prvInitialiseTaskLists+0x78>)
 8007e4c:	4a05      	ldr	r2, [pc, #20]	; (8007e64 <prvInitialiseTaskLists+0x64>)
 8007e4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e50:	4b0a      	ldr	r3, [pc, #40]	; (8007e7c <prvInitialiseTaskLists+0x7c>)
 8007e52:	4a05      	ldr	r2, [pc, #20]	; (8007e68 <prvInitialiseTaskLists+0x68>)
 8007e54:	601a      	str	r2, [r3, #0]
}
 8007e56:	bf00      	nop
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	200097fc 	.word	0x200097fc
 8007e64:	20009c5c 	.word	0x20009c5c
 8007e68:	20009c70 	.word	0x20009c70
 8007e6c:	20009c8c 	.word	0x20009c8c
 8007e70:	20009ca0 	.word	0x20009ca0
 8007e74:	20009cb8 	.word	0x20009cb8
 8007e78:	20009c84 	.word	0x20009c84
 8007e7c:	20009c88 	.word	0x20009c88

08007e80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e86:	e019      	b.n	8007ebc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e88:	f000 fdd4 	bl	8008a34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e8c:	4b10      	ldr	r3, [pc, #64]	; (8007ed0 <prvCheckTasksWaitingTermination+0x50>)
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3304      	adds	r3, #4
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fe fcef 	bl	800687c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e9e:	4b0d      	ldr	r3, [pc, #52]	; (8007ed4 <prvCheckTasksWaitingTermination+0x54>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	4a0b      	ldr	r2, [pc, #44]	; (8007ed4 <prvCheckTasksWaitingTermination+0x54>)
 8007ea6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ea8:	4b0b      	ldr	r3, [pc, #44]	; (8007ed8 <prvCheckTasksWaitingTermination+0x58>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	4a0a      	ldr	r2, [pc, #40]	; (8007ed8 <prvCheckTasksWaitingTermination+0x58>)
 8007eb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007eb2:	f000 fdef 	bl	8008a94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f810 	bl	8007edc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ebc:	4b06      	ldr	r3, [pc, #24]	; (8007ed8 <prvCheckTasksWaitingTermination+0x58>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e1      	bne.n	8007e88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ec4:	bf00      	nop
 8007ec6:	bf00      	nop
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20009ca0 	.word	0x20009ca0
 8007ed4:	20009ccc 	.word	0x20009ccc
 8007ed8:	20009cb4 	.word	0x20009cb4

08007edc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3354      	adds	r3, #84	; 0x54
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f00a faef 	bl	80124cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d108      	bne.n	8007f0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 ff87 	bl	8008e10 <vPortFree>
				vPortFree( pxTCB );
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 ff84 	bl	8008e10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f08:	e018      	b.n	8007f3c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d103      	bne.n	8007f1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 ff7b 	bl	8008e10 <vPortFree>
	}
 8007f1a:	e00f      	b.n	8007f3c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d00a      	beq.n	8007f3c <prvDeleteTCB+0x60>
	__asm volatile
 8007f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	60fb      	str	r3, [r7, #12]
}
 8007f38:	bf00      	nop
 8007f3a:	e7fe      	b.n	8007f3a <prvDeleteTCB+0x5e>
	}
 8007f3c:	bf00      	nop
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f4a:	4b0c      	ldr	r3, [pc, #48]	; (8007f7c <prvResetNextTaskUnblockTime+0x38>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d104      	bne.n	8007f5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f54:	4b0a      	ldr	r3, [pc, #40]	; (8007f80 <prvResetNextTaskUnblockTime+0x3c>)
 8007f56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f5c:	e008      	b.n	8007f70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f5e:	4b07      	ldr	r3, [pc, #28]	; (8007f7c <prvResetNextTaskUnblockTime+0x38>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	4a04      	ldr	r2, [pc, #16]	; (8007f80 <prvResetNextTaskUnblockTime+0x3c>)
 8007f6e:	6013      	str	r3, [r2, #0]
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	20009c84 	.word	0x20009c84
 8007f80:	20009cec 	.word	0x20009cec

08007f84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f8a:	4b0b      	ldr	r3, [pc, #44]	; (8007fb8 <xTaskGetSchedulerState+0x34>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d102      	bne.n	8007f98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f92:	2301      	movs	r3, #1
 8007f94:	607b      	str	r3, [r7, #4]
 8007f96:	e008      	b.n	8007faa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f98:	4b08      	ldr	r3, [pc, #32]	; (8007fbc <xTaskGetSchedulerState+0x38>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d102      	bne.n	8007fa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	607b      	str	r3, [r7, #4]
 8007fa4:	e001      	b.n	8007faa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007faa:	687b      	ldr	r3, [r7, #4]
	}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	20009cd8 	.word	0x20009cd8
 8007fbc:	20009cf4 	.word	0x20009cf4

08007fc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d056      	beq.n	8008084 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007fd6:	4b2e      	ldr	r3, [pc, #184]	; (8008090 <xTaskPriorityDisinherit+0xd0>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d00a      	beq.n	8007ff6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	60fb      	str	r3, [r7, #12]
}
 8007ff2:	bf00      	nop
 8007ff4:	e7fe      	b.n	8007ff4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10a      	bne.n	8008014 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	60bb      	str	r3, [r7, #8]
}
 8008010:	bf00      	nop
 8008012:	e7fe      	b.n	8008012 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008018:	1e5a      	subs	r2, r3, #1
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008026:	429a      	cmp	r2, r3
 8008028:	d02c      	beq.n	8008084 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800802e:	2b00      	cmp	r3, #0
 8008030:	d128      	bne.n	8008084 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	3304      	adds	r3, #4
 8008036:	4618      	mov	r0, r3
 8008038:	f7fe fc20 	bl	800687c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008048:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008054:	4b0f      	ldr	r3, [pc, #60]	; (8008094 <xTaskPriorityDisinherit+0xd4>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	429a      	cmp	r2, r3
 800805a:	d903      	bls.n	8008064 <xTaskPriorityDisinherit+0xa4>
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008060:	4a0c      	ldr	r2, [pc, #48]	; (8008094 <xTaskPriorityDisinherit+0xd4>)
 8008062:	6013      	str	r3, [r2, #0]
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008068:	4613      	mov	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4a09      	ldr	r2, [pc, #36]	; (8008098 <xTaskPriorityDisinherit+0xd8>)
 8008072:	441a      	add	r2, r3
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	3304      	adds	r3, #4
 8008078:	4619      	mov	r1, r3
 800807a:	4610      	mov	r0, r2
 800807c:	f7fe fba1 	bl	80067c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008080:	2301      	movs	r3, #1
 8008082:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008084:	697b      	ldr	r3, [r7, #20]
	}
 8008086:	4618      	mov	r0, r3
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	200097f8 	.word	0x200097f8
 8008094:	20009cd4 	.word	0x20009cd4
 8008098:	200097fc 	.word	0x200097fc

0800809c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080a6:	4b21      	ldr	r3, [pc, #132]	; (800812c <prvAddCurrentTaskToDelayedList+0x90>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080ac:	4b20      	ldr	r3, [pc, #128]	; (8008130 <prvAddCurrentTaskToDelayedList+0x94>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3304      	adds	r3, #4
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fe fbe2 	bl	800687c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080be:	d10a      	bne.n	80080d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080c6:	4b1a      	ldr	r3, [pc, #104]	; (8008130 <prvAddCurrentTaskToDelayedList+0x94>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3304      	adds	r3, #4
 80080cc:	4619      	mov	r1, r3
 80080ce:	4819      	ldr	r0, [pc, #100]	; (8008134 <prvAddCurrentTaskToDelayedList+0x98>)
 80080d0:	f7fe fb77 	bl	80067c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080d4:	e026      	b.n	8008124 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4413      	add	r3, r2
 80080dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080de:	4b14      	ldr	r3, [pc, #80]	; (8008130 <prvAddCurrentTaskToDelayedList+0x94>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d209      	bcs.n	8008102 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080ee:	4b12      	ldr	r3, [pc, #72]	; (8008138 <prvAddCurrentTaskToDelayedList+0x9c>)
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	4b0f      	ldr	r3, [pc, #60]	; (8008130 <prvAddCurrentTaskToDelayedList+0x94>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	3304      	adds	r3, #4
 80080f8:	4619      	mov	r1, r3
 80080fa:	4610      	mov	r0, r2
 80080fc:	f7fe fb85 	bl	800680a <vListInsert>
}
 8008100:	e010      	b.n	8008124 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008102:	4b0e      	ldr	r3, [pc, #56]	; (800813c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	4b0a      	ldr	r3, [pc, #40]	; (8008130 <prvAddCurrentTaskToDelayedList+0x94>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3304      	adds	r3, #4
 800810c:	4619      	mov	r1, r3
 800810e:	4610      	mov	r0, r2
 8008110:	f7fe fb7b 	bl	800680a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008114:	4b0a      	ldr	r3, [pc, #40]	; (8008140 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	429a      	cmp	r2, r3
 800811c:	d202      	bcs.n	8008124 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800811e:	4a08      	ldr	r2, [pc, #32]	; (8008140 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	6013      	str	r3, [r2, #0]
}
 8008124:	bf00      	nop
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	20009cd0 	.word	0x20009cd0
 8008130:	200097f8 	.word	0x200097f8
 8008134:	20009cb8 	.word	0x20009cb8
 8008138:	20009c88 	.word	0x20009c88
 800813c:	20009c84 	.word	0x20009c84
 8008140:	20009cec 	.word	0x20009cec

08008144 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b08a      	sub	sp, #40	; 0x28
 8008148:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800814a:	2300      	movs	r3, #0
 800814c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800814e:	f000 fb07 	bl	8008760 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008152:	4b1c      	ldr	r3, [pc, #112]	; (80081c4 <xTimerCreateTimerTask+0x80>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d021      	beq.n	800819e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800815a:	2300      	movs	r3, #0
 800815c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800815e:	2300      	movs	r3, #0
 8008160:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008162:	1d3a      	adds	r2, r7, #4
 8008164:	f107 0108 	add.w	r1, r7, #8
 8008168:	f107 030c 	add.w	r3, r7, #12
 800816c:	4618      	mov	r0, r3
 800816e:	f7fe fae1 	bl	8006734 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008172:	6879      	ldr	r1, [r7, #4]
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	9202      	str	r2, [sp, #8]
 800817a:	9301      	str	r3, [sp, #4]
 800817c:	2302      	movs	r3, #2
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	2300      	movs	r3, #0
 8008182:	460a      	mov	r2, r1
 8008184:	4910      	ldr	r1, [pc, #64]	; (80081c8 <xTimerCreateTimerTask+0x84>)
 8008186:	4811      	ldr	r0, [pc, #68]	; (80081cc <xTimerCreateTimerTask+0x88>)
 8008188:	f7ff f88e 	bl	80072a8 <xTaskCreateStatic>
 800818c:	4603      	mov	r3, r0
 800818e:	4a10      	ldr	r2, [pc, #64]	; (80081d0 <xTimerCreateTimerTask+0x8c>)
 8008190:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008192:	4b0f      	ldr	r3, [pc, #60]	; (80081d0 <xTimerCreateTimerTask+0x8c>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800819a:	2301      	movs	r3, #1
 800819c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10a      	bne.n	80081ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 80081a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a8:	f383 8811 	msr	BASEPRI, r3
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	613b      	str	r3, [r7, #16]
}
 80081b6:	bf00      	nop
 80081b8:	e7fe      	b.n	80081b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80081ba:	697b      	ldr	r3, [r7, #20]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3718      	adds	r7, #24
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	20009d28 	.word	0x20009d28
 80081c8:	080134f4 	.word	0x080134f4
 80081cc:	08008309 	.word	0x08008309
 80081d0:	20009d2c 	.word	0x20009d2c

080081d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08a      	sub	sp, #40	; 0x28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
 80081e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10a      	bne.n	8008202 <xTimerGenericCommand+0x2e>
	__asm volatile
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	623b      	str	r3, [r7, #32]
}
 80081fe:	bf00      	nop
 8008200:	e7fe      	b.n	8008200 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008202:	4b1a      	ldr	r3, [pc, #104]	; (800826c <xTimerGenericCommand+0x98>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d02a      	beq.n	8008260 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	2b05      	cmp	r3, #5
 800821a:	dc18      	bgt.n	800824e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800821c:	f7ff feb2 	bl	8007f84 <xTaskGetSchedulerState>
 8008220:	4603      	mov	r3, r0
 8008222:	2b02      	cmp	r3, #2
 8008224:	d109      	bne.n	800823a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008226:	4b11      	ldr	r3, [pc, #68]	; (800826c <xTimerGenericCommand+0x98>)
 8008228:	6818      	ldr	r0, [r3, #0]
 800822a:	f107 0110 	add.w	r1, r7, #16
 800822e:	2300      	movs	r3, #0
 8008230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008232:	f7fe fc51 	bl	8006ad8 <xQueueGenericSend>
 8008236:	6278      	str	r0, [r7, #36]	; 0x24
 8008238:	e012      	b.n	8008260 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800823a:	4b0c      	ldr	r3, [pc, #48]	; (800826c <xTimerGenericCommand+0x98>)
 800823c:	6818      	ldr	r0, [r3, #0]
 800823e:	f107 0110 	add.w	r1, r7, #16
 8008242:	2300      	movs	r3, #0
 8008244:	2200      	movs	r2, #0
 8008246:	f7fe fc47 	bl	8006ad8 <xQueueGenericSend>
 800824a:	6278      	str	r0, [r7, #36]	; 0x24
 800824c:	e008      	b.n	8008260 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800824e:	4b07      	ldr	r3, [pc, #28]	; (800826c <xTimerGenericCommand+0x98>)
 8008250:	6818      	ldr	r0, [r3, #0]
 8008252:	f107 0110 	add.w	r1, r7, #16
 8008256:	2300      	movs	r3, #0
 8008258:	683a      	ldr	r2, [r7, #0]
 800825a:	f7fe fd3b 	bl	8006cd4 <xQueueGenericSendFromISR>
 800825e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008262:	4618      	mov	r0, r3
 8008264:	3728      	adds	r7, #40	; 0x28
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	20009d28 	.word	0x20009d28

08008270 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b088      	sub	sp, #32
 8008274:	af02      	add	r7, sp, #8
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800827a:	4b22      	ldr	r3, [pc, #136]	; (8008304 <prvProcessExpiredTimer+0x94>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	3304      	adds	r3, #4
 8008288:	4618      	mov	r0, r3
 800828a:	f7fe faf7 	bl	800687c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b00      	cmp	r3, #0
 800829a:	d022      	beq.n	80082e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	699a      	ldr	r2, [r3, #24]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	18d1      	adds	r1, r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	6978      	ldr	r0, [r7, #20]
 80082aa:	f000 f8d1 	bl	8008450 <prvInsertTimerInActiveList>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d01f      	beq.n	80082f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082b4:	2300      	movs	r3, #0
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	2300      	movs	r3, #0
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	2100      	movs	r1, #0
 80082be:	6978      	ldr	r0, [r7, #20]
 80082c0:	f7ff ff88 	bl	80081d4 <xTimerGenericCommand>
 80082c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d113      	bne.n	80082f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80082cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d0:	f383 8811 	msr	BASEPRI, r3
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	60fb      	str	r3, [r7, #12]
}
 80082de:	bf00      	nop
 80082e0:	e7fe      	b.n	80082e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082e8:	f023 0301 	bic.w	r3, r3, #1
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	6978      	ldr	r0, [r7, #20]
 80082fa:	4798      	blx	r3
}
 80082fc:	bf00      	nop
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	20009d20 	.word	0x20009d20

08008308 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008310:	f107 0308 	add.w	r3, r7, #8
 8008314:	4618      	mov	r0, r3
 8008316:	f000 f857 	bl	80083c8 <prvGetNextExpireTime>
 800831a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	4619      	mov	r1, r3
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f000 f803 	bl	800832c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008326:	f000 f8d5 	bl	80084d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800832a:	e7f1      	b.n	8008310 <prvTimerTask+0x8>

0800832c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008336:	f7ff fa13 	bl	8007760 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800833a:	f107 0308 	add.w	r3, r7, #8
 800833e:	4618      	mov	r0, r3
 8008340:	f000 f866 	bl	8008410 <prvSampleTimeNow>
 8008344:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d130      	bne.n	80083ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10a      	bne.n	8008368 <prvProcessTimerOrBlockTask+0x3c>
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	429a      	cmp	r2, r3
 8008358:	d806      	bhi.n	8008368 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800835a:	f7ff fa0f 	bl	800777c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800835e:	68f9      	ldr	r1, [r7, #12]
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff ff85 	bl	8008270 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008366:	e024      	b.n	80083b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d008      	beq.n	8008380 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800836e:	4b13      	ldr	r3, [pc, #76]	; (80083bc <prvProcessTimerOrBlockTask+0x90>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d101      	bne.n	800837c <prvProcessTimerOrBlockTask+0x50>
 8008378:	2301      	movs	r3, #1
 800837a:	e000      	b.n	800837e <prvProcessTimerOrBlockTask+0x52>
 800837c:	2300      	movs	r3, #0
 800837e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008380:	4b0f      	ldr	r3, [pc, #60]	; (80083c0 <prvProcessTimerOrBlockTask+0x94>)
 8008382:	6818      	ldr	r0, [r3, #0]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	4619      	mov	r1, r3
 800838e:	f7fe ff57 	bl	8007240 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008392:	f7ff f9f3 	bl	800777c <xTaskResumeAll>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10a      	bne.n	80083b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800839c:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <prvProcessTimerOrBlockTask+0x98>)
 800839e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	f3bf 8f6f 	isb	sy
}
 80083ac:	e001      	b.n	80083b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80083ae:	f7ff f9e5 	bl	800777c <xTaskResumeAll>
}
 80083b2:	bf00      	nop
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	20009d24 	.word	0x20009d24
 80083c0:	20009d28 	.word	0x20009d28
 80083c4:	e000ed04 	.word	0xe000ed04

080083c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80083d0:	4b0e      	ldr	r3, [pc, #56]	; (800840c <prvGetNextExpireTime+0x44>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <prvGetNextExpireTime+0x16>
 80083da:	2201      	movs	r2, #1
 80083dc:	e000      	b.n	80083e0 <prvGetNextExpireTime+0x18>
 80083de:	2200      	movs	r2, #0
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d105      	bne.n	80083f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083ec:	4b07      	ldr	r3, [pc, #28]	; (800840c <prvGetNextExpireTime+0x44>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	60fb      	str	r3, [r7, #12]
 80083f6:	e001      	b.n	80083fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80083f8:	2300      	movs	r3, #0
 80083fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80083fc:	68fb      	ldr	r3, [r7, #12]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	20009d20 	.word	0x20009d20

08008410 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008418:	f7ff fa4e 	bl	80078b8 <xTaskGetTickCount>
 800841c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800841e:	4b0b      	ldr	r3, [pc, #44]	; (800844c <prvSampleTimeNow+0x3c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	429a      	cmp	r2, r3
 8008426:	d205      	bcs.n	8008434 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008428:	f000 f936 	bl	8008698 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	e002      	b.n	800843a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800843a:	4a04      	ldr	r2, [pc, #16]	; (800844c <prvSampleTimeNow+0x3c>)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008440:	68fb      	ldr	r3, [r7, #12]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	20009d30 	.word	0x20009d30

08008450 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
 800845c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800845e:	2300      	movs	r3, #0
 8008460:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	429a      	cmp	r2, r3
 8008474:	d812      	bhi.n	800849c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	1ad2      	subs	r2, r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	429a      	cmp	r2, r3
 8008482:	d302      	bcc.n	800848a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008484:	2301      	movs	r3, #1
 8008486:	617b      	str	r3, [r7, #20]
 8008488:	e01b      	b.n	80084c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800848a:	4b10      	ldr	r3, [pc, #64]	; (80084cc <prvInsertTimerInActiveList+0x7c>)
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	3304      	adds	r3, #4
 8008492:	4619      	mov	r1, r3
 8008494:	4610      	mov	r0, r2
 8008496:	f7fe f9b8 	bl	800680a <vListInsert>
 800849a:	e012      	b.n	80084c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d206      	bcs.n	80084b2 <prvInsertTimerInActiveList+0x62>
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d302      	bcc.n	80084b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80084ac:	2301      	movs	r3, #1
 80084ae:	617b      	str	r3, [r7, #20]
 80084b0:	e007      	b.n	80084c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084b2:	4b07      	ldr	r3, [pc, #28]	; (80084d0 <prvInsertTimerInActiveList+0x80>)
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	3304      	adds	r3, #4
 80084ba:	4619      	mov	r1, r3
 80084bc:	4610      	mov	r0, r2
 80084be:	f7fe f9a4 	bl	800680a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80084c2:	697b      	ldr	r3, [r7, #20]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20009d24 	.word	0x20009d24
 80084d0:	20009d20 	.word	0x20009d20

080084d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08e      	sub	sp, #56	; 0x38
 80084d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084da:	e0ca      	b.n	8008672 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	da18      	bge.n	8008514 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80084e2:	1d3b      	adds	r3, r7, #4
 80084e4:	3304      	adds	r3, #4
 80084e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80084e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10a      	bne.n	8008504 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	61fb      	str	r3, [r7, #28]
}
 8008500:	bf00      	nop
 8008502:	e7fe      	b.n	8008502 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800850a:	6850      	ldr	r0, [r2, #4]
 800850c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800850e:	6892      	ldr	r2, [r2, #8]
 8008510:	4611      	mov	r1, r2
 8008512:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f2c0 80ab 	blt.w	8008672 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d004      	beq.n	8008532 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852a:	3304      	adds	r3, #4
 800852c:	4618      	mov	r0, r3
 800852e:	f7fe f9a5 	bl	800687c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008532:	463b      	mov	r3, r7
 8008534:	4618      	mov	r0, r3
 8008536:	f7ff ff6b 	bl	8008410 <prvSampleTimeNow>
 800853a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b09      	cmp	r3, #9
 8008540:	f200 8096 	bhi.w	8008670 <prvProcessReceivedCommands+0x19c>
 8008544:	a201      	add	r2, pc, #4	; (adr r2, 800854c <prvProcessReceivedCommands+0x78>)
 8008546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854a:	bf00      	nop
 800854c:	08008575 	.word	0x08008575
 8008550:	08008575 	.word	0x08008575
 8008554:	08008575 	.word	0x08008575
 8008558:	080085e9 	.word	0x080085e9
 800855c:	080085fd 	.word	0x080085fd
 8008560:	08008647 	.word	0x08008647
 8008564:	08008575 	.word	0x08008575
 8008568:	08008575 	.word	0x08008575
 800856c:	080085e9 	.word	0x080085e9
 8008570:	080085fd 	.word	0x080085fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800857a:	f043 0301 	orr.w	r3, r3, #1
 800857e:	b2da      	uxtb	r2, r3
 8008580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008582:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	18d1      	adds	r1, r2, r3
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008594:	f7ff ff5c 	bl	8008450 <prvInsertTimerInActiveList>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d069      	beq.n	8008672 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800859e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085ac:	f003 0304 	and.w	r3, r3, #4
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d05e      	beq.n	8008672 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	441a      	add	r2, r3
 80085bc:	2300      	movs	r3, #0
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	2300      	movs	r3, #0
 80085c2:	2100      	movs	r1, #0
 80085c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085c6:	f7ff fe05 	bl	80081d4 <xTimerGenericCommand>
 80085ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d14f      	bne.n	8008672 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	61bb      	str	r3, [r7, #24]
}
 80085e4:	bf00      	nop
 80085e6:	e7fe      	b.n	80085e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085ee:	f023 0301 	bic.w	r3, r3, #1
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80085fa:	e03a      	b.n	8008672 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008602:	f043 0301 	orr.w	r3, r3, #1
 8008606:	b2da      	uxtb	r2, r3
 8008608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008612:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	617b      	str	r3, [r7, #20]
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008634:	699a      	ldr	r2, [r3, #24]
 8008636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008638:	18d1      	adds	r1, r2, r3
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800863e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008640:	f7ff ff06 	bl	8008450 <prvInsertTimerInActiveList>
					break;
 8008644:	e015      	b.n	8008672 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800864c:	f003 0302 	and.w	r3, r3, #2
 8008650:	2b00      	cmp	r3, #0
 8008652:	d103      	bne.n	800865c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008656:	f000 fbdb 	bl	8008e10 <vPortFree>
 800865a:	e00a      	b.n	8008672 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800865c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008662:	f023 0301 	bic.w	r3, r3, #1
 8008666:	b2da      	uxtb	r2, r3
 8008668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800866e:	e000      	b.n	8008672 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008670:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008672:	4b08      	ldr	r3, [pc, #32]	; (8008694 <prvProcessReceivedCommands+0x1c0>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	1d39      	adds	r1, r7, #4
 8008678:	2200      	movs	r2, #0
 800867a:	4618      	mov	r0, r3
 800867c:	f7fe fbc6 	bl	8006e0c <xQueueReceive>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	f47f af2a 	bne.w	80084dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008688:	bf00      	nop
 800868a:	bf00      	nop
 800868c:	3730      	adds	r7, #48	; 0x30
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	20009d28 	.word	0x20009d28

08008698 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b088      	sub	sp, #32
 800869c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800869e:	e048      	b.n	8008732 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086a0:	4b2d      	ldr	r3, [pc, #180]	; (8008758 <prvSwitchTimerLists+0xc0>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086aa:	4b2b      	ldr	r3, [pc, #172]	; (8008758 <prvSwitchTimerLists+0xc0>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	3304      	adds	r3, #4
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fe f8df 	bl	800687c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086cc:	f003 0304 	and.w	r3, r3, #4
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d02e      	beq.n	8008732 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	4413      	add	r3, r2
 80086dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d90e      	bls.n	8008704 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086f2:	4b19      	ldr	r3, [pc, #100]	; (8008758 <prvSwitchTimerLists+0xc0>)
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	3304      	adds	r3, #4
 80086fa:	4619      	mov	r1, r3
 80086fc:	4610      	mov	r0, r2
 80086fe:	f7fe f884 	bl	800680a <vListInsert>
 8008702:	e016      	b.n	8008732 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008704:	2300      	movs	r3, #0
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	2300      	movs	r3, #0
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	2100      	movs	r1, #0
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f7ff fd60 	bl	80081d4 <xTimerGenericCommand>
 8008714:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10a      	bne.n	8008732 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800871c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	603b      	str	r3, [r7, #0]
}
 800872e:	bf00      	nop
 8008730:	e7fe      	b.n	8008730 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008732:	4b09      	ldr	r3, [pc, #36]	; (8008758 <prvSwitchTimerLists+0xc0>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1b1      	bne.n	80086a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800873c:	4b06      	ldr	r3, [pc, #24]	; (8008758 <prvSwitchTimerLists+0xc0>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008742:	4b06      	ldr	r3, [pc, #24]	; (800875c <prvSwitchTimerLists+0xc4>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a04      	ldr	r2, [pc, #16]	; (8008758 <prvSwitchTimerLists+0xc0>)
 8008748:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800874a:	4a04      	ldr	r2, [pc, #16]	; (800875c <prvSwitchTimerLists+0xc4>)
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	6013      	str	r3, [r2, #0]
}
 8008750:	bf00      	nop
 8008752:	3718      	adds	r7, #24
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	20009d20 	.word	0x20009d20
 800875c:	20009d24 	.word	0x20009d24

08008760 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008766:	f000 f965 	bl	8008a34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800876a:	4b15      	ldr	r3, [pc, #84]	; (80087c0 <prvCheckForValidListAndQueue+0x60>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d120      	bne.n	80087b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008772:	4814      	ldr	r0, [pc, #80]	; (80087c4 <prvCheckForValidListAndQueue+0x64>)
 8008774:	f7fd fff8 	bl	8006768 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008778:	4813      	ldr	r0, [pc, #76]	; (80087c8 <prvCheckForValidListAndQueue+0x68>)
 800877a:	f7fd fff5 	bl	8006768 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800877e:	4b13      	ldr	r3, [pc, #76]	; (80087cc <prvCheckForValidListAndQueue+0x6c>)
 8008780:	4a10      	ldr	r2, [pc, #64]	; (80087c4 <prvCheckForValidListAndQueue+0x64>)
 8008782:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008784:	4b12      	ldr	r3, [pc, #72]	; (80087d0 <prvCheckForValidListAndQueue+0x70>)
 8008786:	4a10      	ldr	r2, [pc, #64]	; (80087c8 <prvCheckForValidListAndQueue+0x68>)
 8008788:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800878a:	2300      	movs	r3, #0
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	4b11      	ldr	r3, [pc, #68]	; (80087d4 <prvCheckForValidListAndQueue+0x74>)
 8008790:	4a11      	ldr	r2, [pc, #68]	; (80087d8 <prvCheckForValidListAndQueue+0x78>)
 8008792:	2110      	movs	r1, #16
 8008794:	200a      	movs	r0, #10
 8008796:	f7fe f903 	bl	80069a0 <xQueueGenericCreateStatic>
 800879a:	4603      	mov	r3, r0
 800879c:	4a08      	ldr	r2, [pc, #32]	; (80087c0 <prvCheckForValidListAndQueue+0x60>)
 800879e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80087a0:	4b07      	ldr	r3, [pc, #28]	; (80087c0 <prvCheckForValidListAndQueue+0x60>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d005      	beq.n	80087b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80087a8:	4b05      	ldr	r3, [pc, #20]	; (80087c0 <prvCheckForValidListAndQueue+0x60>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	490b      	ldr	r1, [pc, #44]	; (80087dc <prvCheckForValidListAndQueue+0x7c>)
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fe fd1c 	bl	80071ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087b4:	f000 f96e 	bl	8008a94 <vPortExitCritical>
}
 80087b8:	bf00      	nop
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	20009d28 	.word	0x20009d28
 80087c4:	20009cf8 	.word	0x20009cf8
 80087c8:	20009d0c 	.word	0x20009d0c
 80087cc:	20009d20 	.word	0x20009d20
 80087d0:	20009d24 	.word	0x20009d24
 80087d4:	20009dd4 	.word	0x20009dd4
 80087d8:	20009d34 	.word	0x20009d34
 80087dc:	080134fc 	.word	0x080134fc

080087e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	3b04      	subs	r3, #4
 80087f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3b04      	subs	r3, #4
 80087fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	f023 0201 	bic.w	r2, r3, #1
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3b04      	subs	r3, #4
 800880e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008810:	4a0c      	ldr	r2, [pc, #48]	; (8008844 <pxPortInitialiseStack+0x64>)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	3b14      	subs	r3, #20
 800881a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3b04      	subs	r3, #4
 8008826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f06f 0202 	mvn.w	r2, #2
 800882e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	3b20      	subs	r3, #32
 8008834:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008836:	68fb      	ldr	r3, [r7, #12]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	08008849 	.word	0x08008849

08008848 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008852:	4b12      	ldr	r3, [pc, #72]	; (800889c <prvTaskExitError+0x54>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800885a:	d00a      	beq.n	8008872 <prvTaskExitError+0x2a>
	__asm volatile
 800885c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	60fb      	str	r3, [r7, #12]
}
 800886e:	bf00      	nop
 8008870:	e7fe      	b.n	8008870 <prvTaskExitError+0x28>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	60bb      	str	r3, [r7, #8]
}
 8008884:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008886:	bf00      	nop
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d0fc      	beq.n	8008888 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800888e:	bf00      	nop
 8008890:	bf00      	nop
 8008892:	3714      	adds	r7, #20
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	20000010 	.word	0x20000010

080088a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80088a0:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <pxCurrentTCBConst2>)
 80088a2:	6819      	ldr	r1, [r3, #0]
 80088a4:	6808      	ldr	r0, [r1, #0]
 80088a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088aa:	f380 8809 	msr	PSP, r0
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f04f 0000 	mov.w	r0, #0
 80088b6:	f380 8811 	msr	BASEPRI, r0
 80088ba:	4770      	bx	lr
 80088bc:	f3af 8000 	nop.w

080088c0 <pxCurrentTCBConst2>:
 80088c0:	200097f8 	.word	0x200097f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088c4:	bf00      	nop
 80088c6:	bf00      	nop

080088c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80088c8:	4808      	ldr	r0, [pc, #32]	; (80088ec <prvPortStartFirstTask+0x24>)
 80088ca:	6800      	ldr	r0, [r0, #0]
 80088cc:	6800      	ldr	r0, [r0, #0]
 80088ce:	f380 8808 	msr	MSP, r0
 80088d2:	f04f 0000 	mov.w	r0, #0
 80088d6:	f380 8814 	msr	CONTROL, r0
 80088da:	b662      	cpsie	i
 80088dc:	b661      	cpsie	f
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	df00      	svc	0
 80088e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088ea:	bf00      	nop
 80088ec:	e000ed08 	.word	0xe000ed08

080088f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80088f6:	4b46      	ldr	r3, [pc, #280]	; (8008a10 <xPortStartScheduler+0x120>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a46      	ldr	r2, [pc, #280]	; (8008a14 <xPortStartScheduler+0x124>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d10a      	bne.n	8008916 <xPortStartScheduler+0x26>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	613b      	str	r3, [r7, #16]
}
 8008912:	bf00      	nop
 8008914:	e7fe      	b.n	8008914 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008916:	4b3e      	ldr	r3, [pc, #248]	; (8008a10 <xPortStartScheduler+0x120>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a3f      	ldr	r2, [pc, #252]	; (8008a18 <xPortStartScheduler+0x128>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d10a      	bne.n	8008936 <xPortStartScheduler+0x46>
	__asm volatile
 8008920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	60fb      	str	r3, [r7, #12]
}
 8008932:	bf00      	nop
 8008934:	e7fe      	b.n	8008934 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008936:	4b39      	ldr	r3, [pc, #228]	; (8008a1c <xPortStartScheduler+0x12c>)
 8008938:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	b2db      	uxtb	r3, r3
 8008940:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	22ff      	movs	r2, #255	; 0xff
 8008946:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	b2db      	uxtb	r3, r3
 800894e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008950:	78fb      	ldrb	r3, [r7, #3]
 8008952:	b2db      	uxtb	r3, r3
 8008954:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008958:	b2da      	uxtb	r2, r3
 800895a:	4b31      	ldr	r3, [pc, #196]	; (8008a20 <xPortStartScheduler+0x130>)
 800895c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800895e:	4b31      	ldr	r3, [pc, #196]	; (8008a24 <xPortStartScheduler+0x134>)
 8008960:	2207      	movs	r2, #7
 8008962:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008964:	e009      	b.n	800897a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008966:	4b2f      	ldr	r3, [pc, #188]	; (8008a24 <xPortStartScheduler+0x134>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3b01      	subs	r3, #1
 800896c:	4a2d      	ldr	r2, [pc, #180]	; (8008a24 <xPortStartScheduler+0x134>)
 800896e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008970:	78fb      	ldrb	r3, [r7, #3]
 8008972:	b2db      	uxtb	r3, r3
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	b2db      	uxtb	r3, r3
 8008978:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800897a:	78fb      	ldrb	r3, [r7, #3]
 800897c:	b2db      	uxtb	r3, r3
 800897e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008982:	2b80      	cmp	r3, #128	; 0x80
 8008984:	d0ef      	beq.n	8008966 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008986:	4b27      	ldr	r3, [pc, #156]	; (8008a24 <xPortStartScheduler+0x134>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f1c3 0307 	rsb	r3, r3, #7
 800898e:	2b04      	cmp	r3, #4
 8008990:	d00a      	beq.n	80089a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	60bb      	str	r3, [r7, #8]
}
 80089a4:	bf00      	nop
 80089a6:	e7fe      	b.n	80089a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089a8:	4b1e      	ldr	r3, [pc, #120]	; (8008a24 <xPortStartScheduler+0x134>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	021b      	lsls	r3, r3, #8
 80089ae:	4a1d      	ldr	r2, [pc, #116]	; (8008a24 <xPortStartScheduler+0x134>)
 80089b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089b2:	4b1c      	ldr	r3, [pc, #112]	; (8008a24 <xPortStartScheduler+0x134>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089ba:	4a1a      	ldr	r2, [pc, #104]	; (8008a24 <xPortStartScheduler+0x134>)
 80089bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80089c6:	4b18      	ldr	r3, [pc, #96]	; (8008a28 <xPortStartScheduler+0x138>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a17      	ldr	r2, [pc, #92]	; (8008a28 <xPortStartScheduler+0x138>)
 80089cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089d2:	4b15      	ldr	r3, [pc, #84]	; (8008a28 <xPortStartScheduler+0x138>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a14      	ldr	r2, [pc, #80]	; (8008a28 <xPortStartScheduler+0x138>)
 80089d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80089dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089de:	f000 f8dd 	bl	8008b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089e2:	4b12      	ldr	r3, [pc, #72]	; (8008a2c <xPortStartScheduler+0x13c>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80089e8:	f000 f8fc 	bl	8008be4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80089ec:	4b10      	ldr	r3, [pc, #64]	; (8008a30 <xPortStartScheduler+0x140>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a0f      	ldr	r2, [pc, #60]	; (8008a30 <xPortStartScheduler+0x140>)
 80089f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80089f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089f8:	f7ff ff66 	bl	80088c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089fc:	f7ff f826 	bl	8007a4c <vTaskSwitchContext>
	prvTaskExitError();
 8008a00:	f7ff ff22 	bl	8008848 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3718      	adds	r7, #24
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	e000ed00 	.word	0xe000ed00
 8008a14:	410fc271 	.word	0x410fc271
 8008a18:	410fc270 	.word	0x410fc270
 8008a1c:	e000e400 	.word	0xe000e400
 8008a20:	20009e24 	.word	0x20009e24
 8008a24:	20009e28 	.word	0x20009e28
 8008a28:	e000ed20 	.word	0xe000ed20
 8008a2c:	20000010 	.word	0x20000010
 8008a30:	e000ef34 	.word	0xe000ef34

08008a34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
	__asm volatile
 8008a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3e:	f383 8811 	msr	BASEPRI, r3
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	607b      	str	r3, [r7, #4]
}
 8008a4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a4e:	4b0f      	ldr	r3, [pc, #60]	; (8008a8c <vPortEnterCritical+0x58>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	3301      	adds	r3, #1
 8008a54:	4a0d      	ldr	r2, [pc, #52]	; (8008a8c <vPortEnterCritical+0x58>)
 8008a56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a58:	4b0c      	ldr	r3, [pc, #48]	; (8008a8c <vPortEnterCritical+0x58>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d10f      	bne.n	8008a80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a60:	4b0b      	ldr	r3, [pc, #44]	; (8008a90 <vPortEnterCritical+0x5c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00a      	beq.n	8008a80 <vPortEnterCritical+0x4c>
	__asm volatile
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	603b      	str	r3, [r7, #0]
}
 8008a7c:	bf00      	nop
 8008a7e:	e7fe      	b.n	8008a7e <vPortEnterCritical+0x4a>
	}
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	20000010 	.word	0x20000010
 8008a90:	e000ed04 	.word	0xe000ed04

08008a94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a9a:	4b12      	ldr	r3, [pc, #72]	; (8008ae4 <vPortExitCritical+0x50>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10a      	bne.n	8008ab8 <vPortExitCritical+0x24>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	607b      	str	r3, [r7, #4]
}
 8008ab4:	bf00      	nop
 8008ab6:	e7fe      	b.n	8008ab6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ab8:	4b0a      	ldr	r3, [pc, #40]	; (8008ae4 <vPortExitCritical+0x50>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	3b01      	subs	r3, #1
 8008abe:	4a09      	ldr	r2, [pc, #36]	; (8008ae4 <vPortExitCritical+0x50>)
 8008ac0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ac2:	4b08      	ldr	r3, [pc, #32]	; (8008ae4 <vPortExitCritical+0x50>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d105      	bne.n	8008ad6 <vPortExitCritical+0x42>
 8008aca:	2300      	movs	r3, #0
 8008acc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	f383 8811 	msr	BASEPRI, r3
}
 8008ad4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ad6:	bf00      	nop
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	20000010 	.word	0x20000010
	...

08008af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008af0:	f3ef 8009 	mrs	r0, PSP
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	4b15      	ldr	r3, [pc, #84]	; (8008b50 <pxCurrentTCBConst>)
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	f01e 0f10 	tst.w	lr, #16
 8008b00:	bf08      	it	eq
 8008b02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0a:	6010      	str	r0, [r2, #0]
 8008b0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b14:	f380 8811 	msr	BASEPRI, r0
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f7fe ff94 	bl	8007a4c <vTaskSwitchContext>
 8008b24:	f04f 0000 	mov.w	r0, #0
 8008b28:	f380 8811 	msr	BASEPRI, r0
 8008b2c:	bc09      	pop	{r0, r3}
 8008b2e:	6819      	ldr	r1, [r3, #0]
 8008b30:	6808      	ldr	r0, [r1, #0]
 8008b32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b36:	f01e 0f10 	tst.w	lr, #16
 8008b3a:	bf08      	it	eq
 8008b3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b40:	f380 8809 	msr	PSP, r0
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	f3af 8000 	nop.w

08008b50 <pxCurrentTCBConst>:
 8008b50:	200097f8 	.word	0x200097f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b54:	bf00      	nop
 8008b56:	bf00      	nop

08008b58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	607b      	str	r3, [r7, #4]
}
 8008b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b72:	f7fe feb1 	bl	80078d8 <xTaskIncrementTick>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d003      	beq.n	8008b84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b7c:	4b06      	ldr	r3, [pc, #24]	; (8008b98 <xPortSysTickHandler+0x40>)
 8008b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	2300      	movs	r3, #0
 8008b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	f383 8811 	msr	BASEPRI, r3
}
 8008b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	e000ed04 	.word	0xe000ed04

08008b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ba0:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <vPortSetupTimerInterrupt+0x34>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ba6:	4b0b      	ldr	r3, [pc, #44]	; (8008bd4 <vPortSetupTimerInterrupt+0x38>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bac:	4b0a      	ldr	r3, [pc, #40]	; (8008bd8 <vPortSetupTimerInterrupt+0x3c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a0a      	ldr	r2, [pc, #40]	; (8008bdc <vPortSetupTimerInterrupt+0x40>)
 8008bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb6:	099b      	lsrs	r3, r3, #6
 8008bb8:	4a09      	ldr	r2, [pc, #36]	; (8008be0 <vPortSetupTimerInterrupt+0x44>)
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bbe:	4b04      	ldr	r3, [pc, #16]	; (8008bd0 <vPortSetupTimerInterrupt+0x34>)
 8008bc0:	2207      	movs	r2, #7
 8008bc2:	601a      	str	r2, [r3, #0]
}
 8008bc4:	bf00      	nop
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	e000e010 	.word	0xe000e010
 8008bd4:	e000e018 	.word	0xe000e018
 8008bd8:	20000004 	.word	0x20000004
 8008bdc:	10624dd3 	.word	0x10624dd3
 8008be0:	e000e014 	.word	0xe000e014

08008be4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008be4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008bf4 <vPortEnableVFP+0x10>
 8008be8:	6801      	ldr	r1, [r0, #0]
 8008bea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008bee:	6001      	str	r1, [r0, #0]
 8008bf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008bf2:	bf00      	nop
 8008bf4:	e000ed88 	.word	0xe000ed88

08008bf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008bfe:	f3ef 8305 	mrs	r3, IPSR
 8008c02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2b0f      	cmp	r3, #15
 8008c08:	d914      	bls.n	8008c34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c0a:	4a17      	ldr	r2, [pc, #92]	; (8008c68 <vPortValidateInterruptPriority+0x70>)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	4413      	add	r3, r2
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c14:	4b15      	ldr	r3, [pc, #84]	; (8008c6c <vPortValidateInterruptPriority+0x74>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	7afa      	ldrb	r2, [r7, #11]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d20a      	bcs.n	8008c34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	607b      	str	r3, [r7, #4]
}
 8008c30:	bf00      	nop
 8008c32:	e7fe      	b.n	8008c32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c34:	4b0e      	ldr	r3, [pc, #56]	; (8008c70 <vPortValidateInterruptPriority+0x78>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c3c:	4b0d      	ldr	r3, [pc, #52]	; (8008c74 <vPortValidateInterruptPriority+0x7c>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d90a      	bls.n	8008c5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	603b      	str	r3, [r7, #0]
}
 8008c56:	bf00      	nop
 8008c58:	e7fe      	b.n	8008c58 <vPortValidateInterruptPriority+0x60>
	}
 8008c5a:	bf00      	nop
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	e000e3f0 	.word	0xe000e3f0
 8008c6c:	20009e24 	.word	0x20009e24
 8008c70:	e000ed0c 	.word	0xe000ed0c
 8008c74:	20009e28 	.word	0x20009e28

08008c78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b08a      	sub	sp, #40	; 0x28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c80:	2300      	movs	r3, #0
 8008c82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c84:	f7fe fd6c 	bl	8007760 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c88:	4b5b      	ldr	r3, [pc, #364]	; (8008df8 <pvPortMalloc+0x180>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c90:	f000 f920 	bl	8008ed4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c94:	4b59      	ldr	r3, [pc, #356]	; (8008dfc <pvPortMalloc+0x184>)
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f040 8093 	bne.w	8008dc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d01d      	beq.n	8008ce4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008ca8:	2208      	movs	r2, #8
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4413      	add	r3, r2
 8008cae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f003 0307 	and.w	r3, r3, #7
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d014      	beq.n	8008ce4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f023 0307 	bic.w	r3, r3, #7
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f003 0307 	and.w	r3, r3, #7
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00a      	beq.n	8008ce4 <pvPortMalloc+0x6c>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	617b      	str	r3, [r7, #20]
}
 8008ce0:	bf00      	nop
 8008ce2:	e7fe      	b.n	8008ce2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d06e      	beq.n	8008dc8 <pvPortMalloc+0x150>
 8008cea:	4b45      	ldr	r3, [pc, #276]	; (8008e00 <pvPortMalloc+0x188>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d869      	bhi.n	8008dc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008cf4:	4b43      	ldr	r3, [pc, #268]	; (8008e04 <pvPortMalloc+0x18c>)
 8008cf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008cf8:	4b42      	ldr	r3, [pc, #264]	; (8008e04 <pvPortMalloc+0x18c>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cfe:	e004      	b.n	8008d0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d903      	bls.n	8008d1c <pvPortMalloc+0xa4>
 8008d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1f1      	bne.n	8008d00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d1c:	4b36      	ldr	r3, [pc, #216]	; (8008df8 <pvPortMalloc+0x180>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d050      	beq.n	8008dc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2208      	movs	r2, #8
 8008d2c:	4413      	add	r3, r2
 8008d2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	685a      	ldr	r2, [r3, #4]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	1ad2      	subs	r2, r2, r3
 8008d40:	2308      	movs	r3, #8
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d91f      	bls.n	8008d88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	f003 0307 	and.w	r3, r3, #7
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00a      	beq.n	8008d70 <pvPortMalloc+0xf8>
	__asm volatile
 8008d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	613b      	str	r3, [r7, #16]
}
 8008d6c:	bf00      	nop
 8008d6e:	e7fe      	b.n	8008d6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	1ad2      	subs	r2, r2, r3
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d82:	69b8      	ldr	r0, [r7, #24]
 8008d84:	f000 f908 	bl	8008f98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d88:	4b1d      	ldr	r3, [pc, #116]	; (8008e00 <pvPortMalloc+0x188>)
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	4a1b      	ldr	r2, [pc, #108]	; (8008e00 <pvPortMalloc+0x188>)
 8008d94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d96:	4b1a      	ldr	r3, [pc, #104]	; (8008e00 <pvPortMalloc+0x188>)
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	4b1b      	ldr	r3, [pc, #108]	; (8008e08 <pvPortMalloc+0x190>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d203      	bcs.n	8008daa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008da2:	4b17      	ldr	r3, [pc, #92]	; (8008e00 <pvPortMalloc+0x188>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a18      	ldr	r2, [pc, #96]	; (8008e08 <pvPortMalloc+0x190>)
 8008da8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <pvPortMalloc+0x184>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	431a      	orrs	r2, r3
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008dbe:	4b13      	ldr	r3, [pc, #76]	; (8008e0c <pvPortMalloc+0x194>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	4a11      	ldr	r2, [pc, #68]	; (8008e0c <pvPortMalloc+0x194>)
 8008dc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008dc8:	f7fe fcd8 	bl	800777c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	f003 0307 	and.w	r3, r3, #7
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00a      	beq.n	8008dec <pvPortMalloc+0x174>
	__asm volatile
 8008dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dda:	f383 8811 	msr	BASEPRI, r3
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	60fb      	str	r3, [r7, #12]
}
 8008de8:	bf00      	nop
 8008dea:	e7fe      	b.n	8008dea <pvPortMalloc+0x172>
	return pvReturn;
 8008dec:	69fb      	ldr	r3, [r7, #28]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3728      	adds	r7, #40	; 0x28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	2000da34 	.word	0x2000da34
 8008dfc:	2000da48 	.word	0x2000da48
 8008e00:	2000da38 	.word	0x2000da38
 8008e04:	2000da2c 	.word	0x2000da2c
 8008e08:	2000da3c 	.word	0x2000da3c
 8008e0c:	2000da40 	.word	0x2000da40

08008e10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d04d      	beq.n	8008ebe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e22:	2308      	movs	r3, #8
 8008e24:	425b      	negs	r3, r3
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	4413      	add	r3, r2
 8008e2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	4b24      	ldr	r3, [pc, #144]	; (8008ec8 <vPortFree+0xb8>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4013      	ands	r3, r2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10a      	bne.n	8008e54 <vPortFree+0x44>
	__asm volatile
 8008e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	60fb      	str	r3, [r7, #12]
}
 8008e50:	bf00      	nop
 8008e52:	e7fe      	b.n	8008e52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00a      	beq.n	8008e72 <vPortFree+0x62>
	__asm volatile
 8008e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	60bb      	str	r3, [r7, #8]
}
 8008e6e:	bf00      	nop
 8008e70:	e7fe      	b.n	8008e70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	4b14      	ldr	r3, [pc, #80]	; (8008ec8 <vPortFree+0xb8>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d01e      	beq.n	8008ebe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d11a      	bne.n	8008ebe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	4b0e      	ldr	r3, [pc, #56]	; (8008ec8 <vPortFree+0xb8>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	43db      	mvns	r3, r3
 8008e92:	401a      	ands	r2, r3
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e98:	f7fe fc62 	bl	8007760 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	4b0a      	ldr	r3, [pc, #40]	; (8008ecc <vPortFree+0xbc>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	4a09      	ldr	r2, [pc, #36]	; (8008ecc <vPortFree+0xbc>)
 8008ea8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008eaa:	6938      	ldr	r0, [r7, #16]
 8008eac:	f000 f874 	bl	8008f98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008eb0:	4b07      	ldr	r3, [pc, #28]	; (8008ed0 <vPortFree+0xc0>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	4a06      	ldr	r2, [pc, #24]	; (8008ed0 <vPortFree+0xc0>)
 8008eb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008eba:	f7fe fc5f 	bl	800777c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ebe:	bf00      	nop
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	2000da48 	.word	0x2000da48
 8008ecc:	2000da38 	.word	0x2000da38
 8008ed0:	2000da44 	.word	0x2000da44

08008ed4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008eda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008ede:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ee0:	4b27      	ldr	r3, [pc, #156]	; (8008f80 <prvHeapInit+0xac>)
 8008ee2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f003 0307 	and.w	r3, r3, #7
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00c      	beq.n	8008f08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3307      	adds	r3, #7
 8008ef2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f023 0307 	bic.w	r3, r3, #7
 8008efa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	4a1f      	ldr	r2, [pc, #124]	; (8008f80 <prvHeapInit+0xac>)
 8008f04:	4413      	add	r3, r2
 8008f06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f0c:	4a1d      	ldr	r2, [pc, #116]	; (8008f84 <prvHeapInit+0xb0>)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f12:	4b1c      	ldr	r3, [pc, #112]	; (8008f84 <prvHeapInit+0xb0>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f20:	2208      	movs	r2, #8
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	1a9b      	subs	r3, r3, r2
 8008f26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f023 0307 	bic.w	r3, r3, #7
 8008f2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	4a15      	ldr	r2, [pc, #84]	; (8008f88 <prvHeapInit+0xb4>)
 8008f34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f36:	4b14      	ldr	r3, [pc, #80]	; (8008f88 <prvHeapInit+0xb4>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f3e:	4b12      	ldr	r3, [pc, #72]	; (8008f88 <prvHeapInit+0xb4>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	1ad2      	subs	r2, r2, r3
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f54:	4b0c      	ldr	r3, [pc, #48]	; (8008f88 <prvHeapInit+0xb4>)
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	4a0a      	ldr	r2, [pc, #40]	; (8008f8c <prvHeapInit+0xb8>)
 8008f62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	4a09      	ldr	r2, [pc, #36]	; (8008f90 <prvHeapInit+0xbc>)
 8008f6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f6c:	4b09      	ldr	r3, [pc, #36]	; (8008f94 <prvHeapInit+0xc0>)
 8008f6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f72:	601a      	str	r2, [r3, #0]
}
 8008f74:	bf00      	nop
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	20009e2c 	.word	0x20009e2c
 8008f84:	2000da2c 	.word	0x2000da2c
 8008f88:	2000da34 	.word	0x2000da34
 8008f8c:	2000da3c 	.word	0x2000da3c
 8008f90:	2000da38 	.word	0x2000da38
 8008f94:	2000da48 	.word	0x2000da48

08008f98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008fa0:	4b28      	ldr	r3, [pc, #160]	; (8009044 <prvInsertBlockIntoFreeList+0xac>)
 8008fa2:	60fb      	str	r3, [r7, #12]
 8008fa4:	e002      	b.n	8008fac <prvInsertBlockIntoFreeList+0x14>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	60fb      	str	r3, [r7, #12]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d8f7      	bhi.n	8008fa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d108      	bne.n	8008fda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	441a      	add	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	441a      	add	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d118      	bne.n	8009020 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	4b15      	ldr	r3, [pc, #84]	; (8009048 <prvInsertBlockIntoFreeList+0xb0>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d00d      	beq.n	8009016 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685a      	ldr	r2, [r3, #4]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	441a      	add	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	e008      	b.n	8009028 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009016:	4b0c      	ldr	r3, [pc, #48]	; (8009048 <prvInsertBlockIntoFreeList+0xb0>)
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	e003      	b.n	8009028 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	429a      	cmp	r2, r3
 800902e:	d002      	beq.n	8009036 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009036:	bf00      	nop
 8009038:	3714      	adds	r7, #20
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	2000da2c 	.word	0x2000da2c
 8009048:	2000da34 	.word	0x2000da34

0800904c <rcl_get_zero_initialized_publisher>:
 800904c:	4b01      	ldr	r3, [pc, #4]	; (8009054 <rcl_get_zero_initialized_publisher+0x8>)
 800904e:	6818      	ldr	r0, [r3, #0]
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	08013554 	.word	0x08013554

08009058 <rcl_publisher_init>:
 8009058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800905c:	b088      	sub	sp, #32
 800905e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009060:	2d00      	cmp	r5, #0
 8009062:	d069      	beq.n	8009138 <rcl_publisher_init+0xe0>
 8009064:	f105 0950 	add.w	r9, r5, #80	; 0x50
 8009068:	4604      	mov	r4, r0
 800906a:	4648      	mov	r0, r9
 800906c:	460e      	mov	r6, r1
 800906e:	4690      	mov	r8, r2
 8009070:	461f      	mov	r7, r3
 8009072:	f000 f9d5 	bl	8009420 <rcutils_allocator_is_valid>
 8009076:	2800      	cmp	r0, #0
 8009078:	d05e      	beq.n	8009138 <rcl_publisher_init+0xe0>
 800907a:	2c00      	cmp	r4, #0
 800907c:	d05c      	beq.n	8009138 <rcl_publisher_init+0xe0>
 800907e:	f8d4 a000 	ldr.w	sl, [r4]
 8009082:	f1ba 0f00 	cmp.w	sl, #0
 8009086:	d004      	beq.n	8009092 <rcl_publisher_init+0x3a>
 8009088:	2764      	movs	r7, #100	; 0x64
 800908a:	4638      	mov	r0, r7
 800908c:	b008      	add	sp, #32
 800908e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009092:	4630      	mov	r0, r6
 8009094:	f004 ffb8 	bl	800e008 <rcl_node_is_valid>
 8009098:	2800      	cmp	r0, #0
 800909a:	d052      	beq.n	8009142 <rcl_publisher_init+0xea>
 800909c:	f1b8 0f00 	cmp.w	r8, #0
 80090a0:	d04a      	beq.n	8009138 <rcl_publisher_init+0xe0>
 80090a2:	2f00      	cmp	r7, #0
 80090a4:	d048      	beq.n	8009138 <rcl_publisher_init+0xe0>
 80090a6:	e9cd aa03 	strd	sl, sl, [sp, #12]
 80090aa:	aa07      	add	r2, sp, #28
 80090ac:	9205      	str	r2, [sp, #20]
 80090ae:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80090b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80090b6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80090ba:	f8cd a01c 	str.w	sl, [sp, #28]
 80090be:	4639      	mov	r1, r7
 80090c0:	e899 000c 	ldmia.w	r9, {r2, r3}
 80090c4:	4630      	mov	r0, r6
 80090c6:	f004 fff3 	bl	800e0b0 <rcl_node_resolve_name>
 80090ca:	4607      	mov	r7, r0
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d14f      	bne.n	8009170 <rcl_publisher_init+0x118>
 80090d0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80090d2:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80090d4:	20c8      	movs	r0, #200	; 0xc8
 80090d6:	4798      	blx	r3
 80090d8:	6020      	str	r0, [r4, #0]
 80090da:	2800      	cmp	r0, #0
 80090dc:	d04e      	beq.n	800917c <rcl_publisher_init+0x124>
 80090de:	4630      	mov	r0, r6
 80090e0:	f004 ffb4 	bl	800e04c <rcl_node_get_rmw_handle>
 80090e4:	f105 0364 	add.w	r3, r5, #100	; 0x64
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	9a07      	ldr	r2, [sp, #28]
 80090ec:	6827      	ldr	r7, [r4, #0]
 80090ee:	462b      	mov	r3, r5
 80090f0:	4641      	mov	r1, r8
 80090f2:	f000 fa53 	bl	800959c <rmw_create_publisher>
 80090f6:	6823      	ldr	r3, [r4, #0]
 80090f8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 80090fc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8009100:	b370      	cbz	r0, 8009160 <rcl_publisher_init+0x108>
 8009102:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8009106:	f000 fb27 	bl	8009758 <rmw_publisher_get_actual_qos>
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	4607      	mov	r7, r0
 800910e:	b9d0      	cbnz	r0, 8009146 <rcl_publisher_init+0xee>
 8009110:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 8009114:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8009118:	4629      	mov	r1, r5
 800911a:	2270      	movs	r2, #112	; 0x70
 800911c:	4618      	mov	r0, r3
 800911e:	f009 faa6 	bl	801266e <memcpy>
 8009122:	6832      	ldr	r2, [r6, #0]
 8009124:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8009128:	9807      	ldr	r0, [sp, #28]
 800912a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800912c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800912e:	4798      	blx	r3
 8009130:	4638      	mov	r0, r7
 8009132:	b008      	add	sp, #32
 8009134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009138:	270b      	movs	r7, #11
 800913a:	4638      	mov	r0, r7
 800913c:	b008      	add	sp, #32
 800913e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009142:	27c8      	movs	r7, #200	; 0xc8
 8009144:	e7a1      	b.n	800908a <rcl_publisher_init+0x32>
 8009146:	b18b      	cbz	r3, 800916c <rcl_publisher_init+0x114>
 8009148:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800914c:	b142      	cbz	r2, 8009160 <rcl_publisher_init+0x108>
 800914e:	4630      	mov	r0, r6
 8009150:	f004 ff7c 	bl	800e04c <rcl_node_get_rmw_handle>
 8009154:	6823      	ldr	r3, [r4, #0]
 8009156:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800915a:	f000 fb0d 	bl	8009778 <rmw_destroy_publisher>
 800915e:	6823      	ldr	r3, [r4, #0]
 8009160:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8009162:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8009164:	4618      	mov	r0, r3
 8009166:	4790      	blx	r2
 8009168:	2300      	movs	r3, #0
 800916a:	6023      	str	r3, [r4, #0]
 800916c:	2701      	movs	r7, #1
 800916e:	e7db      	b.n	8009128 <rcl_publisher_init+0xd0>
 8009170:	2867      	cmp	r0, #103	; 0x67
 8009172:	d0d9      	beq.n	8009128 <rcl_publisher_init+0xd0>
 8009174:	2869      	cmp	r0, #105	; 0x69
 8009176:	d003      	beq.n	8009180 <rcl_publisher_init+0x128>
 8009178:	280a      	cmp	r0, #10
 800917a:	d1f7      	bne.n	800916c <rcl_publisher_init+0x114>
 800917c:	270a      	movs	r7, #10
 800917e:	e7d3      	b.n	8009128 <rcl_publisher_init+0xd0>
 8009180:	2767      	movs	r7, #103	; 0x67
 8009182:	e7d1      	b.n	8009128 <rcl_publisher_init+0xd0>

08009184 <rcl_publisher_get_default_options>:
 8009184:	b570      	push	{r4, r5, r6, lr}
 8009186:	4d14      	ldr	r5, [pc, #80]	; (80091d8 <rcl_publisher_get_default_options+0x54>)
 8009188:	4914      	ldr	r1, [pc, #80]	; (80091dc <rcl_publisher_get_default_options+0x58>)
 800918a:	b088      	sub	sp, #32
 800918c:	4604      	mov	r4, r0
 800918e:	2250      	movs	r2, #80	; 0x50
 8009190:	4628      	mov	r0, r5
 8009192:	f009 fa6c 	bl	801266e <memcpy>
 8009196:	a802      	add	r0, sp, #8
 8009198:	f000 f934 	bl	8009404 <rcutils_get_default_allocator>
 800919c:	f10d 0c08 	add.w	ip, sp, #8
 80091a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80091a4:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 80091a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80091ac:	466e      	mov	r6, sp
 80091ae:	f8dc 3000 	ldr.w	r3, [ip]
 80091b2:	f8ce 3000 	str.w	r3, [lr]
 80091b6:	4630      	mov	r0, r6
 80091b8:	f000 f972 	bl	80094a0 <rmw_get_default_publisher_options>
 80091bc:	e896 0003 	ldmia.w	r6, {r0, r1}
 80091c0:	f105 0364 	add.w	r3, r5, #100	; 0x64
 80091c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80091c8:	2270      	movs	r2, #112	; 0x70
 80091ca:	4629      	mov	r1, r5
 80091cc:	4620      	mov	r0, r4
 80091ce:	f009 fa4e 	bl	801266e <memcpy>
 80091d2:	4620      	mov	r0, r4
 80091d4:	b008      	add	sp, #32
 80091d6:	bd70      	pop	{r4, r5, r6, pc}
 80091d8:	2000da50 	.word	0x2000da50
 80091dc:	08013558 	.word	0x08013558

080091e0 <rcl_publish>:
 80091e0:	b1f8      	cbz	r0, 8009222 <rcl_publish+0x42>
 80091e2:	6803      	ldr	r3, [r0, #0]
 80091e4:	b570      	push	{r4, r5, r6, lr}
 80091e6:	4604      	mov	r4, r0
 80091e8:	b1b3      	cbz	r3, 8009218 <rcl_publish+0x38>
 80091ea:	4616      	mov	r6, r2
 80091ec:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80091f0:	b192      	cbz	r2, 8009218 <rcl_publish+0x38>
 80091f2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80091f6:	460d      	mov	r5, r1
 80091f8:	f004 fb2c 	bl	800d854 <rcl_context_is_valid>
 80091fc:	b160      	cbz	r0, 8009218 <rcl_publish+0x38>
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8009204:	b140      	cbz	r0, 8009218 <rcl_publish+0x38>
 8009206:	b155      	cbz	r5, 800921e <rcl_publish+0x3e>
 8009208:	4632      	mov	r2, r6
 800920a:	4629      	mov	r1, r5
 800920c:	f000 f966 	bl	80094dc <rmw_publish>
 8009210:	3800      	subs	r0, #0
 8009212:	bf18      	it	ne
 8009214:	2001      	movne	r0, #1
 8009216:	bd70      	pop	{r4, r5, r6, pc}
 8009218:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800921c:	bd70      	pop	{r4, r5, r6, pc}
 800921e:	200b      	movs	r0, #11
 8009220:	bd70      	pop	{r4, r5, r6, pc}
 8009222:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009226:	4770      	bx	lr

08009228 <rclc_support_init>:
 8009228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800922c:	b086      	sub	sp, #24
 800922e:	b3b8      	cbz	r0, 80092a0 <rclc_support_init+0x78>
 8009230:	461c      	mov	r4, r3
 8009232:	b3ab      	cbz	r3, 80092a0 <rclc_support_init+0x78>
 8009234:	460f      	mov	r7, r1
 8009236:	4690      	mov	r8, r2
 8009238:	4606      	mov	r6, r0
 800923a:	f004 fc75 	bl	800db28 <rcl_get_zero_initialized_init_options>
 800923e:	f104 030c 	add.w	r3, r4, #12
 8009242:	9005      	str	r0, [sp, #20]
 8009244:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009248:	e88d 0003 	stmia.w	sp, {r0, r1}
 800924c:	a805      	add	r0, sp, #20
 800924e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009252:	f004 fc6b 	bl	800db2c <rcl_init_options_init>
 8009256:	4605      	mov	r5, r0
 8009258:	b9e0      	cbnz	r0, 8009294 <rclc_support_init+0x6c>
 800925a:	ad02      	add	r5, sp, #8
 800925c:	4628      	mov	r0, r5
 800925e:	f004 faef 	bl	800d840 <rcl_get_zero_initialized_context>
 8009262:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009266:	4633      	mov	r3, r6
 8009268:	e886 0003 	stmia.w	r6, {r0, r1}
 800926c:	aa05      	add	r2, sp, #20
 800926e:	4641      	mov	r1, r8
 8009270:	4638      	mov	r0, r7
 8009272:	f004 fb55 	bl	800d920 <rcl_init>
 8009276:	4605      	mov	r5, r0
 8009278:	b9b8      	cbnz	r0, 80092aa <rclc_support_init+0x82>
 800927a:	60b4      	str	r4, [r6, #8]
 800927c:	4622      	mov	r2, r4
 800927e:	f106 010c 	add.w	r1, r6, #12
 8009282:	2003      	movs	r0, #3
 8009284:	f005 f8d0 	bl	800e428 <rcl_clock_init>
 8009288:	4605      	mov	r5, r0
 800928a:	b970      	cbnz	r0, 80092aa <rclc_support_init+0x82>
 800928c:	a805      	add	r0, sp, #20
 800928e:	f004 fcb3 	bl	800dbf8 <rcl_init_options_fini>
 8009292:	b108      	cbz	r0, 8009298 <rclc_support_init+0x70>
 8009294:	f000 f8e8 	bl	8009468 <rcutils_reset_error>
 8009298:	4628      	mov	r0, r5
 800929a:	b006      	add	sp, #24
 800929c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a0:	250b      	movs	r5, #11
 80092a2:	4628      	mov	r0, r5
 80092a4:	b006      	add	sp, #24
 80092a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092aa:	f000 f8dd 	bl	8009468 <rcutils_reset_error>
 80092ae:	a805      	add	r0, sp, #20
 80092b0:	f004 fca2 	bl	800dbf8 <rcl_init_options_fini>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	d0ef      	beq.n	8009298 <rclc_support_init+0x70>
 80092b8:	e7ec      	b.n	8009294 <rclc_support_init+0x6c>
 80092ba:	bf00      	nop

080092bc <rclc_node_init_default>:
 80092bc:	b3b8      	cbz	r0, 800932e <rclc_node_init_default+0x72>
 80092be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092c2:	460d      	mov	r5, r1
 80092c4:	b0a1      	sub	sp, #132	; 0x84
 80092c6:	b329      	cbz	r1, 8009314 <rclc_node_init_default+0x58>
 80092c8:	4616      	mov	r6, r2
 80092ca:	b31a      	cbz	r2, 8009314 <rclc_node_init_default+0x58>
 80092cc:	461f      	mov	r7, r3
 80092ce:	b30b      	cbz	r3, 8009314 <rclc_node_init_default+0x58>
 80092d0:	f10d 0810 	add.w	r8, sp, #16
 80092d4:	4604      	mov	r4, r0
 80092d6:	4640      	mov	r0, r8
 80092d8:	f004 fd46 	bl	800dd68 <rcl_get_zero_initialized_node>
 80092dc:	e898 0003 	ldmia.w	r8, {r0, r1}
 80092e0:	f10d 0918 	add.w	r9, sp, #24
 80092e4:	e884 0003 	stmia.w	r4, {r0, r1}
 80092e8:	4648      	mov	r0, r9
 80092ea:	f004 feb5 	bl	800e058 <rcl_node_get_default_options>
 80092ee:	4640      	mov	r0, r8
 80092f0:	f004 fd3a 	bl	800dd68 <rcl_get_zero_initialized_node>
 80092f4:	f8cd 9000 	str.w	r9, [sp]
 80092f8:	e898 0003 	ldmia.w	r8, {r0, r1}
 80092fc:	463b      	mov	r3, r7
 80092fe:	e884 0003 	stmia.w	r4, {r0, r1}
 8009302:	4632      	mov	r2, r6
 8009304:	4629      	mov	r1, r5
 8009306:	4620      	mov	r0, r4
 8009308:	f004 fd38 	bl	800dd7c <rcl_node_init>
 800930c:	b930      	cbnz	r0, 800931c <rclc_node_init_default+0x60>
 800930e:	b021      	add	sp, #132	; 0x84
 8009310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009314:	200b      	movs	r0, #11
 8009316:	b021      	add	sp, #132	; 0x84
 8009318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800931c:	9003      	str	r0, [sp, #12]
 800931e:	f000 f8a3 	bl	8009468 <rcutils_reset_error>
 8009322:	f000 f8a1 	bl	8009468 <rcutils_reset_error>
 8009326:	9803      	ldr	r0, [sp, #12]
 8009328:	b021      	add	sp, #132	; 0x84
 800932a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800932e:	200b      	movs	r0, #11
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop

08009334 <rclc_publisher_init_default>:
 8009334:	b368      	cbz	r0, 8009392 <rclc_publisher_init_default+0x5e>
 8009336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800933a:	460d      	mov	r5, r1
 800933c:	b0a0      	sub	sp, #128	; 0x80
 800933e:	b321      	cbz	r1, 800938a <rclc_publisher_init_default+0x56>
 8009340:	4616      	mov	r6, r2
 8009342:	b312      	cbz	r2, 800938a <rclc_publisher_init_default+0x56>
 8009344:	461f      	mov	r7, r3
 8009346:	b303      	cbz	r3, 800938a <rclc_publisher_init_default+0x56>
 8009348:	4604      	mov	r4, r0
 800934a:	f7ff fe7f 	bl	800904c <rcl_get_zero_initialized_publisher>
 800934e:	f10d 0810 	add.w	r8, sp, #16
 8009352:	6020      	str	r0, [r4, #0]
 8009354:	4640      	mov	r0, r8
 8009356:	f7ff ff15 	bl	8009184 <rcl_publisher_get_default_options>
 800935a:	490f      	ldr	r1, [pc, #60]	; (8009398 <rclc_publisher_init_default+0x64>)
 800935c:	2250      	movs	r2, #80	; 0x50
 800935e:	4640      	mov	r0, r8
 8009360:	f009 f985 	bl	801266e <memcpy>
 8009364:	f8cd 8000 	str.w	r8, [sp]
 8009368:	463b      	mov	r3, r7
 800936a:	4632      	mov	r2, r6
 800936c:	4629      	mov	r1, r5
 800936e:	4620      	mov	r0, r4
 8009370:	f7ff fe72 	bl	8009058 <rcl_publisher_init>
 8009374:	b910      	cbnz	r0, 800937c <rclc_publisher_init_default+0x48>
 8009376:	b020      	add	sp, #128	; 0x80
 8009378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800937c:	9003      	str	r0, [sp, #12]
 800937e:	f000 f873 	bl	8009468 <rcutils_reset_error>
 8009382:	9803      	ldr	r0, [sp, #12]
 8009384:	b020      	add	sp, #128	; 0x80
 8009386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800938a:	200b      	movs	r0, #11
 800938c:	b020      	add	sp, #128	; 0x80
 800938e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009392:	200b      	movs	r0, #11
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	080135a8 	.word	0x080135a8

0800939c <__default_zero_allocate>:
 800939c:	f008 bc82 	b.w	8011ca4 <calloc>

080093a0 <__default_reallocate>:
 80093a0:	f008 be0e 	b.w	8011fc0 <realloc>

080093a4 <__default_deallocate>:
 80093a4:	f008 bcec 	b.w	8011d80 <free>

080093a8 <__default_allocate>:
 80093a8:	f008 bce2 	b.w	8011d70 <malloc>

080093ac <rcutils_get_zero_initialized_allocator>:
 80093ac:	b510      	push	{r4, lr}
 80093ae:	4c05      	ldr	r4, [pc, #20]	; (80093c4 <rcutils_get_zero_initialized_allocator+0x18>)
 80093b0:	4686      	mov	lr, r0
 80093b2:	4684      	mov	ip, r0
 80093b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80093ba:	6823      	ldr	r3, [r4, #0]
 80093bc:	f8cc 3000 	str.w	r3, [ip]
 80093c0:	4670      	mov	r0, lr
 80093c2:	bd10      	pop	{r4, pc}
 80093c4:	080135f8 	.word	0x080135f8

080093c8 <rcutils_set_default_allocator>:
 80093c8:	b1a8      	cbz	r0, 80093f6 <rcutils_set_default_allocator+0x2e>
 80093ca:	6802      	ldr	r2, [r0, #0]
 80093cc:	b1a2      	cbz	r2, 80093f8 <rcutils_set_default_allocator+0x30>
 80093ce:	6841      	ldr	r1, [r0, #4]
 80093d0:	b1a1      	cbz	r1, 80093fc <rcutils_set_default_allocator+0x34>
 80093d2:	b410      	push	{r4}
 80093d4:	68c4      	ldr	r4, [r0, #12]
 80093d6:	b164      	cbz	r4, 80093f2 <rcutils_set_default_allocator+0x2a>
 80093d8:	6880      	ldr	r0, [r0, #8]
 80093da:	b138      	cbz	r0, 80093ec <rcutils_set_default_allocator+0x24>
 80093dc:	4b08      	ldr	r3, [pc, #32]	; (8009400 <rcutils_set_default_allocator+0x38>)
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	2200      	movs	r2, #0
 80093e2:	e9c3 4203 	strd	r4, r2, [r3, #12]
 80093e6:	e9c3 1001 	strd	r1, r0, [r3, #4]
 80093ea:	2001      	movs	r0, #1
 80093ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	4620      	mov	r0, r4
 80093f4:	e7fa      	b.n	80093ec <rcutils_set_default_allocator+0x24>
 80093f6:	4770      	bx	lr
 80093f8:	4610      	mov	r0, r2
 80093fa:	4770      	bx	lr
 80093fc:	4608      	mov	r0, r1
 80093fe:	4770      	bx	lr
 8009400:	20000014 	.word	0x20000014

08009404 <rcutils_get_default_allocator>:
 8009404:	b510      	push	{r4, lr}
 8009406:	4c05      	ldr	r4, [pc, #20]	; (800941c <rcutils_get_default_allocator+0x18>)
 8009408:	4686      	mov	lr, r0
 800940a:	4684      	mov	ip, r0
 800940c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800940e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	f8cc 3000 	str.w	r3, [ip]
 8009418:	4670      	mov	r0, lr
 800941a:	bd10      	pop	{r4, pc}
 800941c:	20000014 	.word	0x20000014

08009420 <rcutils_allocator_is_valid>:
 8009420:	b158      	cbz	r0, 800943a <rcutils_allocator_is_valid+0x1a>
 8009422:	6803      	ldr	r3, [r0, #0]
 8009424:	b143      	cbz	r3, 8009438 <rcutils_allocator_is_valid+0x18>
 8009426:	6843      	ldr	r3, [r0, #4]
 8009428:	b133      	cbz	r3, 8009438 <rcutils_allocator_is_valid+0x18>
 800942a:	68c3      	ldr	r3, [r0, #12]
 800942c:	b123      	cbz	r3, 8009438 <rcutils_allocator_is_valid+0x18>
 800942e:	6880      	ldr	r0, [r0, #8]
 8009430:	3800      	subs	r0, #0
 8009432:	bf18      	it	ne
 8009434:	2001      	movne	r0, #1
 8009436:	4770      	bx	lr
 8009438:	4618      	mov	r0, r3
 800943a:	4770      	bx	lr

0800943c <rcutils_get_error_string>:
 800943c:	4b06      	ldr	r3, [pc, #24]	; (8009458 <rcutils_get_error_string+0x1c>)
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	b13b      	cbz	r3, 8009452 <rcutils_get_error_string+0x16>
 8009442:	4b06      	ldr	r3, [pc, #24]	; (800945c <rcutils_get_error_string+0x20>)
 8009444:	781a      	ldrb	r2, [r3, #0]
 8009446:	b90a      	cbnz	r2, 800944c <rcutils_get_error_string+0x10>
 8009448:	2201      	movs	r2, #1
 800944a:	701a      	strb	r2, [r3, #0]
 800944c:	4b04      	ldr	r3, [pc, #16]	; (8009460 <rcutils_get_error_string+0x24>)
 800944e:	7818      	ldrb	r0, [r3, #0]
 8009450:	4770      	bx	lr
 8009452:	4b04      	ldr	r3, [pc, #16]	; (8009464 <rcutils_get_error_string+0x28>)
 8009454:	7818      	ldrb	r0, [r3, #0]
 8009456:	4770      	bx	lr
 8009458:	2000dac0 	.word	0x2000dac0
 800945c:	2000dad9 	.word	0x2000dad9
 8009460:	2000dad8 	.word	0x2000dad8
 8009464:	0801360c 	.word	0x0801360c

08009468 <rcutils_reset_error>:
 8009468:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8009488 <rcutils_reset_error+0x20>
 800946c:	4a08      	ldr	r2, [pc, #32]	; (8009490 <rcutils_reset_error+0x28>)
 800946e:	4809      	ldr	r0, [pc, #36]	; (8009494 <rcutils_reset_error+0x2c>)
 8009470:	4909      	ldr	r1, [pc, #36]	; (8009498 <rcutils_reset_error+0x30>)
 8009472:	2300      	movs	r3, #0
 8009474:	8013      	strh	r3, [r2, #0]
 8009476:	ed82 7b02 	vstr	d7, [r2, #8]
 800947a:	4a08      	ldr	r2, [pc, #32]	; (800949c <rcutils_reset_error+0x34>)
 800947c:	7003      	strb	r3, [r0, #0]
 800947e:	700b      	strb	r3, [r1, #0]
 8009480:	7013      	strb	r3, [r2, #0]
 8009482:	4770      	bx	lr
 8009484:	f3af 8000 	nop.w
	...
 8009490:	2000dac8 	.word	0x2000dac8
 8009494:	2000dad9 	.word	0x2000dad9
 8009498:	2000dad8 	.word	0x2000dad8
 800949c:	2000dac0 	.word	0x2000dac0

080094a0 <rmw_get_default_publisher_options>:
 80094a0:	2200      	movs	r2, #0
 80094a2:	6002      	str	r2, [r0, #0]
 80094a4:	7102      	strb	r2, [r0, #4]
 80094a6:	4770      	bx	lr

080094a8 <rmw_uros_set_custom_transport>:
 80094a8:	b470      	push	{r4, r5, r6}
 80094aa:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80094ae:	b162      	cbz	r2, 80094ca <rmw_uros_set_custom_transport+0x22>
 80094b0:	b15b      	cbz	r3, 80094ca <rmw_uros_set_custom_transport+0x22>
 80094b2:	b155      	cbz	r5, 80094ca <rmw_uros_set_custom_transport+0x22>
 80094b4:	b14e      	cbz	r6, 80094ca <rmw_uros_set_custom_transport+0x22>
 80094b6:	4c06      	ldr	r4, [pc, #24]	; (80094d0 <rmw_uros_set_custom_transport+0x28>)
 80094b8:	7020      	strb	r0, [r4, #0]
 80094ba:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80094be:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80094c2:	6166      	str	r6, [r4, #20]
 80094c4:	2000      	movs	r0, #0
 80094c6:	bc70      	pop	{r4, r5, r6}
 80094c8:	4770      	bx	lr
 80094ca:	200b      	movs	r0, #11
 80094cc:	bc70      	pop	{r4, r5, r6}
 80094ce:	4770      	bx	lr
 80094d0:	2000dadc 	.word	0x2000dadc

080094d4 <flush_session>:
 80094d4:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 80094d6:	f002 bb3d 	b.w	800bb54 <uxr_run_session_until_confirm_delivery>
 80094da:	bf00      	nop

080094dc <rmw_publish>:
 80094dc:	2800      	cmp	r0, #0
 80094de:	d053      	beq.n	8009588 <rmw_publish+0xac>
 80094e0:	b570      	push	{r4, r5, r6, lr}
 80094e2:	460d      	mov	r5, r1
 80094e4:	b08e      	sub	sp, #56	; 0x38
 80094e6:	2900      	cmp	r1, #0
 80094e8:	d04b      	beq.n	8009582 <rmw_publish+0xa6>
 80094ea:	4604      	mov	r4, r0
 80094ec:	6800      	ldr	r0, [r0, #0]
 80094ee:	f000 fc47 	bl	8009d80 <is_uxrce_rmw_identifier_valid>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d045      	beq.n	8009582 <rmw_publish+0xa6>
 80094f6:	6866      	ldr	r6, [r4, #4]
 80094f8:	2e00      	cmp	r6, #0
 80094fa:	d042      	beq.n	8009582 <rmw_publish+0xa6>
 80094fc:	69b4      	ldr	r4, [r6, #24]
 80094fe:	4628      	mov	r0, r5
 8009500:	6923      	ldr	r3, [r4, #16]
 8009502:	4798      	blx	r3
 8009504:	69f3      	ldr	r3, [r6, #28]
 8009506:	9005      	str	r0, [sp, #20]
 8009508:	b113      	cbz	r3, 8009510 <rmw_publish+0x34>
 800950a:	a805      	add	r0, sp, #20
 800950c:	4798      	blx	r3
 800950e:	9805      	ldr	r0, [sp, #20]
 8009510:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	9000      	str	r0, [sp, #0]
 8009518:	6972      	ldr	r2, [r6, #20]
 800951a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800951c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8009520:	ab06      	add	r3, sp, #24
 8009522:	f003 f903 	bl	800c72c <uxr_prepare_output_stream>
 8009526:	b1d8      	cbz	r0, 8009560 <rmw_publish+0x84>
 8009528:	68a3      	ldr	r3, [r4, #8]
 800952a:	a906      	add	r1, sp, #24
 800952c:	4628      	mov	r0, r5
 800952e:	4798      	blx	r3
 8009530:	6a33      	ldr	r3, [r6, #32]
 8009532:	4604      	mov	r4, r0
 8009534:	b10b      	cbz	r3, 800953a <rmw_publish+0x5e>
 8009536:	a806      	add	r0, sp, #24
 8009538:	4798      	blx	r3
 800953a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800953e:	2b01      	cmp	r3, #1
 8009540:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8009544:	d022      	beq.n	800958c <rmw_publish+0xb0>
 8009546:	6918      	ldr	r0, [r3, #16]
 8009548:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800954a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800954e:	f002 fb01 	bl	800bb54 <uxr_run_session_until_confirm_delivery>
 8009552:	4020      	ands	r0, r4
 8009554:	b2c4      	uxtb	r4, r0
 8009556:	f084 0001 	eor.w	r0, r4, #1
 800955a:	b2c0      	uxtb	r0, r0
 800955c:	b00e      	add	sp, #56	; 0x38
 800955e:	bd70      	pop	{r4, r5, r6, pc}
 8009560:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8009564:	6918      	ldr	r0, [r3, #16]
 8009566:	9b05      	ldr	r3, [sp, #20]
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	4b0b      	ldr	r3, [pc, #44]	; (8009598 <rmw_publish+0xbc>)
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	9602      	str	r6, [sp, #8]
 8009570:	6972      	ldr	r2, [r6, #20]
 8009572:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8009574:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8009578:	ab06      	add	r3, sp, #24
 800957a:	f003 f907 	bl	800c78c <uxr_prepare_output_stream_fragmented>
 800957e:	2800      	cmp	r0, #0
 8009580:	d1d2      	bne.n	8009528 <rmw_publish+0x4c>
 8009582:	2001      	movs	r0, #1
 8009584:	b00e      	add	sp, #56	; 0x38
 8009586:	bd70      	pop	{r4, r5, r6, pc}
 8009588:	2001      	movs	r0, #1
 800958a:	4770      	bx	lr
 800958c:	6918      	ldr	r0, [r3, #16]
 800958e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8009592:	f001 ff59 	bl	800b448 <uxr_flash_output_streams>
 8009596:	e7de      	b.n	8009556 <rmw_publish+0x7a>
 8009598:	080094d5 	.word	0x080094d5

0800959c <rmw_create_publisher>:
 800959c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a0:	b087      	sub	sp, #28
 80095a2:	2800      	cmp	r0, #0
 80095a4:	f000 80cc 	beq.w	8009740 <rmw_create_publisher+0x1a4>
 80095a8:	460e      	mov	r6, r1
 80095aa:	2900      	cmp	r1, #0
 80095ac:	f000 80c8 	beq.w	8009740 <rmw_create_publisher+0x1a4>
 80095b0:	4604      	mov	r4, r0
 80095b2:	6800      	ldr	r0, [r0, #0]
 80095b4:	4615      	mov	r5, r2
 80095b6:	4698      	mov	r8, r3
 80095b8:	f000 fbe2 	bl	8009d80 <is_uxrce_rmw_identifier_valid>
 80095bc:	2800      	cmp	r0, #0
 80095be:	f000 80bf 	beq.w	8009740 <rmw_create_publisher+0x1a4>
 80095c2:	2d00      	cmp	r5, #0
 80095c4:	f000 80bc 	beq.w	8009740 <rmw_create_publisher+0x1a4>
 80095c8:	782b      	ldrb	r3, [r5, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 80b8 	beq.w	8009740 <rmw_create_publisher+0x1a4>
 80095d0:	f1b8 0f00 	cmp.w	r8, #0
 80095d4:	f000 80b4 	beq.w	8009740 <rmw_create_publisher+0x1a4>
 80095d8:	485c      	ldr	r0, [pc, #368]	; (800974c <rmw_create_publisher+0x1b0>)
 80095da:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80095de:	f005 fc9b 	bl	800ef18 <get_memory>
 80095e2:	2800      	cmp	r0, #0
 80095e4:	f000 80ac 	beq.w	8009740 <rmw_create_publisher+0x1a4>
 80095e8:	6884      	ldr	r4, [r0, #8]
 80095ea:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 80095ee:	f005 fcb7 	bl	800ef60 <rmw_get_implementation_identifier>
 80095f2:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 80095f6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 80095fa:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 80095fe:	4628      	mov	r0, r5
 8009600:	f7f6 fdf8 	bl	80001f4 <strlen>
 8009604:	3001      	adds	r0, #1
 8009606:	283c      	cmp	r0, #60	; 0x3c
 8009608:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800960c:	f200 8091 	bhi.w	8009732 <rmw_create_publisher+0x196>
 8009610:	4a4f      	ldr	r2, [pc, #316]	; (8009750 <rmw_create_publisher+0x1b4>)
 8009612:	462b      	mov	r3, r5
 8009614:	213c      	movs	r1, #60	; 0x3c
 8009616:	4650      	mov	r0, sl
 8009618:	f008 fe5a 	bl	80122d0 <sniprintf>
 800961c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009620:	67e3      	str	r3, [r4, #124]	; 0x7c
 8009622:	4641      	mov	r1, r8
 8009624:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8009628:	2250      	movs	r2, #80	; 0x50
 800962a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800962e:	f009 f81e 	bl	801266e <memcpy>
 8009632:	f898 3008 	ldrb.w	r3, [r8, #8]
 8009636:	4947      	ldr	r1, [pc, #284]	; (8009754 <rmw_create_publisher+0x1b8>)
 8009638:	2b02      	cmp	r3, #2
 800963a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800963e:	bf0c      	ite	eq
 8009640:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8009644:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8009648:	67a3      	str	r3, [r4, #120]	; 0x78
 800964a:	2300      	movs	r3, #0
 800964c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8009650:	4630      	mov	r0, r6
 8009652:	f000 fba3 	bl	8009d9c <get_message_typesupport_handle>
 8009656:	2800      	cmp	r0, #0
 8009658:	d06b      	beq.n	8009732 <rmw_create_publisher+0x196>
 800965a:	6842      	ldr	r2, [r0, #4]
 800965c:	61a2      	str	r2, [r4, #24]
 800965e:	2a00      	cmp	r2, #0
 8009660:	d067      	beq.n	8009732 <rmw_create_publisher+0x196>
 8009662:	4629      	mov	r1, r5
 8009664:	4643      	mov	r3, r8
 8009666:	4648      	mov	r0, r9
 8009668:	f005 fee0 	bl	800f42c <create_topic>
 800966c:	6260      	str	r0, [r4, #36]	; 0x24
 800966e:	2800      	cmp	r0, #0
 8009670:	d063      	beq.n	800973a <rmw_create_publisher+0x19e>
 8009672:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800967a:	2103      	movs	r1, #3
 800967c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 8009680:	1c42      	adds	r2, r0, #1
 8009682:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8009686:	f001 fd91 	bl	800b1ac <uxr_object_id>
 800968a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800968e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009692:	6120      	str	r0, [r4, #16]
 8009694:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8009698:	6910      	ldr	r0, [r2, #16]
 800969a:	2506      	movs	r5, #6
 800969c:	9500      	str	r5, [sp, #0]
 800969e:	6819      	ldr	r1, [r3, #0]
 80096a0:	6922      	ldr	r2, [r4, #16]
 80096a2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80096a6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80096aa:	f001 fcd9 	bl	800b060 <uxr_buffer_create_publisher_bin>
 80096ae:	4602      	mov	r2, r0
 80096b0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80096b4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80096b8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80096bc:	f000 fae0 	bl	8009c80 <run_xrce_session>
 80096c0:	b3b8      	cbz	r0, 8009732 <rmw_create_publisher+0x196>
 80096c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ca:	2105      	movs	r1, #5
 80096cc:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 80096d0:	1c42      	adds	r2, r0, #1
 80096d2:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 80096d6:	f001 fd69 	bl	800b1ac <uxr_object_id>
 80096da:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80096de:	6160      	str	r0, [r4, #20]
 80096e0:	691e      	ldr	r6, [r3, #16]
 80096e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096e6:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 80096ea:	f10d 0a10 	add.w	sl, sp, #16
 80096ee:	4641      	mov	r1, r8
 80096f0:	4650      	mov	r0, sl
 80096f2:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 80096f6:	f000 fadf 	bl	8009cb8 <convert_qos_profile>
 80096fa:	9503      	str	r5, [sp, #12]
 80096fc:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8009700:	9001      	str	r0, [sp, #4]
 8009702:	f8ad 1008 	strh.w	r1, [sp, #8]
 8009706:	f8db 3010 	ldr.w	r3, [fp, #16]
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 8009710:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8009714:	f8d8 1000 	ldr.w	r1, [r8]
 8009718:	4630      	mov	r0, r6
 800971a:	f001 fcd1 	bl	800b0c0 <uxr_buffer_create_datawriter_bin>
 800971e:	4602      	mov	r2, r0
 8009720:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8009724:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8009728:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800972c:	f000 faa8 	bl	8009c80 <run_xrce_session>
 8009730:	b938      	cbnz	r0, 8009742 <rmw_create_publisher+0x1a6>
 8009732:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009734:	b108      	cbz	r0, 800973a <rmw_create_publisher+0x19e>
 8009736:	f000 fa47 	bl	8009bc8 <rmw_uxrce_fini_topic_memory>
 800973a:	4638      	mov	r0, r7
 800973c:	f000 f9ec 	bl	8009b18 <rmw_uxrce_fini_publisher_memory>
 8009740:	2700      	movs	r7, #0
 8009742:	4638      	mov	r0, r7
 8009744:	b007      	add	sp, #28
 8009746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800974a:	bf00      	nop
 800974c:	200123d4 	.word	0x200123d4
 8009750:	08013644 	.word	0x08013644
 8009754:	08013610 	.word	0x08013610

08009758 <rmw_publisher_get_actual_qos>:
 8009758:	b150      	cbz	r0, 8009770 <rmw_publisher_get_actual_qos+0x18>
 800975a:	b508      	push	{r3, lr}
 800975c:	460b      	mov	r3, r1
 800975e:	b149      	cbz	r1, 8009774 <rmw_publisher_get_actual_qos+0x1c>
 8009760:	6841      	ldr	r1, [r0, #4]
 8009762:	2250      	movs	r2, #80	; 0x50
 8009764:	3128      	adds	r1, #40	; 0x28
 8009766:	4618      	mov	r0, r3
 8009768:	f008 ff81 	bl	801266e <memcpy>
 800976c:	2000      	movs	r0, #0
 800976e:	bd08      	pop	{r3, pc}
 8009770:	200b      	movs	r0, #11
 8009772:	4770      	bx	lr
 8009774:	200b      	movs	r0, #11
 8009776:	bd08      	pop	{r3, pc}

08009778 <rmw_destroy_publisher>:
 8009778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977a:	b128      	cbz	r0, 8009788 <rmw_destroy_publisher+0x10>
 800977c:	4604      	mov	r4, r0
 800977e:	6800      	ldr	r0, [r0, #0]
 8009780:	460d      	mov	r5, r1
 8009782:	f000 fafd 	bl	8009d80 <is_uxrce_rmw_identifier_valid>
 8009786:	b910      	cbnz	r0, 800978e <rmw_destroy_publisher+0x16>
 8009788:	2401      	movs	r4, #1
 800978a:	4620      	mov	r0, r4
 800978c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800978e:	6863      	ldr	r3, [r4, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d0f9      	beq.n	8009788 <rmw_destroy_publisher+0x10>
 8009794:	2d00      	cmp	r5, #0
 8009796:	d0f7      	beq.n	8009788 <rmw_destroy_publisher+0x10>
 8009798:	6828      	ldr	r0, [r5, #0]
 800979a:	f000 faf1 	bl	8009d80 <is_uxrce_rmw_identifier_valid>
 800979e:	2800      	cmp	r0, #0
 80097a0:	d0f2      	beq.n	8009788 <rmw_destroy_publisher+0x10>
 80097a2:	686c      	ldr	r4, [r5, #4]
 80097a4:	2c00      	cmp	r4, #0
 80097a6:	d0ef      	beq.n	8009788 <rmw_destroy_publisher+0x10>
 80097a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80097aa:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 80097ae:	f005 fe8d 	bl	800f4cc <destroy_topic>
 80097b2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80097b6:	6962      	ldr	r2, [r4, #20]
 80097b8:	6918      	ldr	r0, [r3, #16]
 80097ba:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80097be:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80097c2:	6819      	ldr	r1, [r3, #0]
 80097c4:	f001 fb98 	bl	800aef8 <uxr_buffer_delete_entity>
 80097c8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80097cc:	6922      	ldr	r2, [r4, #16]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 80097d4:	4604      	mov	r4, r0
 80097d6:	6809      	ldr	r1, [r1, #0]
 80097d8:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80097dc:	f001 fb8c 	bl	800aef8 <uxr_buffer_delete_entity>
 80097e0:	693e      	ldr	r6, [r7, #16]
 80097e2:	4622      	mov	r2, r4
 80097e4:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 80097e8:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 80097ec:	4604      	mov	r4, r0
 80097ee:	4630      	mov	r0, r6
 80097f0:	f000 fa46 	bl	8009c80 <run_xrce_session>
 80097f4:	693e      	ldr	r6, [r7, #16]
 80097f6:	4622      	mov	r2, r4
 80097f8:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 80097fc:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8009800:	4604      	mov	r4, r0
 8009802:	4630      	mov	r0, r6
 8009804:	f000 fa3c 	bl	8009c80 <run_xrce_session>
 8009808:	b12c      	cbz	r4, 8009816 <rmw_destroy_publisher+0x9e>
 800980a:	b120      	cbz	r0, 8009816 <rmw_destroy_publisher+0x9e>
 800980c:	2400      	movs	r4, #0
 800980e:	4628      	mov	r0, r5
 8009810:	f000 f982 	bl	8009b18 <rmw_uxrce_fini_publisher_memory>
 8009814:	e7b9      	b.n	800978a <rmw_destroy_publisher+0x12>
 8009816:	2402      	movs	r4, #2
 8009818:	e7f9      	b.n	800980e <rmw_destroy_publisher+0x96>
 800981a:	bf00      	nop

0800981c <rmw_uxrce_init_service_memory>:
 800981c:	b1e2      	cbz	r2, 8009858 <rmw_uxrce_init_service_memory+0x3c>
 800981e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009822:	7b05      	ldrb	r5, [r0, #12]
 8009824:	4606      	mov	r6, r0
 8009826:	b9ad      	cbnz	r5, 8009854 <rmw_uxrce_init_service_memory+0x38>
 8009828:	23c8      	movs	r3, #200	; 0xc8
 800982a:	e9c0 5500 	strd	r5, r5, [r0]
 800982e:	6083      	str	r3, [r0, #8]
 8009830:	f240 1301 	movw	r3, #257	; 0x101
 8009834:	4617      	mov	r7, r2
 8009836:	8183      	strh	r3, [r0, #12]
 8009838:	460c      	mov	r4, r1
 800983a:	46a8      	mov	r8, r5
 800983c:	4621      	mov	r1, r4
 800983e:	4630      	mov	r0, r6
 8009840:	3501      	adds	r5, #1
 8009842:	f005 fb79 	bl	800ef38 <put_memory>
 8009846:	42af      	cmp	r7, r5
 8009848:	60a4      	str	r4, [r4, #8]
 800984a:	f884 800c 	strb.w	r8, [r4, #12]
 800984e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8009852:	d1f3      	bne.n	800983c <rmw_uxrce_init_service_memory+0x20>
 8009854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop

0800985c <rmw_uxrce_init_client_memory>:
 800985c:	b1e2      	cbz	r2, 8009898 <rmw_uxrce_init_client_memory+0x3c>
 800985e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009862:	7b05      	ldrb	r5, [r0, #12]
 8009864:	4606      	mov	r6, r0
 8009866:	b9ad      	cbnz	r5, 8009894 <rmw_uxrce_init_client_memory+0x38>
 8009868:	23c8      	movs	r3, #200	; 0xc8
 800986a:	e9c0 5500 	strd	r5, r5, [r0]
 800986e:	6083      	str	r3, [r0, #8]
 8009870:	f240 1301 	movw	r3, #257	; 0x101
 8009874:	4617      	mov	r7, r2
 8009876:	8183      	strh	r3, [r0, #12]
 8009878:	460c      	mov	r4, r1
 800987a:	46a8      	mov	r8, r5
 800987c:	4621      	mov	r1, r4
 800987e:	4630      	mov	r0, r6
 8009880:	3501      	adds	r5, #1
 8009882:	f005 fb59 	bl	800ef38 <put_memory>
 8009886:	42af      	cmp	r7, r5
 8009888:	60a4      	str	r4, [r4, #8]
 800988a:	f884 800c 	strb.w	r8, [r4, #12]
 800988e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8009892:	d1f3      	bne.n	800987c <rmw_uxrce_init_client_memory+0x20>
 8009894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop

0800989c <rmw_uxrce_init_publisher_memory>:
 800989c:	b1e2      	cbz	r2, 80098d8 <rmw_uxrce_init_publisher_memory+0x3c>
 800989e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a2:	7b05      	ldrb	r5, [r0, #12]
 80098a4:	4606      	mov	r6, r0
 80098a6:	b9ad      	cbnz	r5, 80098d4 <rmw_uxrce_init_publisher_memory+0x38>
 80098a8:	23d8      	movs	r3, #216	; 0xd8
 80098aa:	e9c0 5500 	strd	r5, r5, [r0]
 80098ae:	6083      	str	r3, [r0, #8]
 80098b0:	f240 1301 	movw	r3, #257	; 0x101
 80098b4:	4617      	mov	r7, r2
 80098b6:	8183      	strh	r3, [r0, #12]
 80098b8:	460c      	mov	r4, r1
 80098ba:	46a8      	mov	r8, r5
 80098bc:	4621      	mov	r1, r4
 80098be:	4630      	mov	r0, r6
 80098c0:	3501      	adds	r5, #1
 80098c2:	f005 fb39 	bl	800ef38 <put_memory>
 80098c6:	42af      	cmp	r7, r5
 80098c8:	60a4      	str	r4, [r4, #8]
 80098ca:	f884 800c 	strb.w	r8, [r4, #12]
 80098ce:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 80098d2:	d1f3      	bne.n	80098bc <rmw_uxrce_init_publisher_memory+0x20>
 80098d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop

080098dc <rmw_uxrce_init_subscription_memory>:
 80098dc:	b1e2      	cbz	r2, 8009918 <rmw_uxrce_init_subscription_memory+0x3c>
 80098de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e2:	7b05      	ldrb	r5, [r0, #12]
 80098e4:	4606      	mov	r6, r0
 80098e6:	b9ad      	cbnz	r5, 8009914 <rmw_uxrce_init_subscription_memory+0x38>
 80098e8:	23d8      	movs	r3, #216	; 0xd8
 80098ea:	e9c0 5500 	strd	r5, r5, [r0]
 80098ee:	6083      	str	r3, [r0, #8]
 80098f0:	f240 1301 	movw	r3, #257	; 0x101
 80098f4:	4617      	mov	r7, r2
 80098f6:	8183      	strh	r3, [r0, #12]
 80098f8:	460c      	mov	r4, r1
 80098fa:	46a8      	mov	r8, r5
 80098fc:	4621      	mov	r1, r4
 80098fe:	4630      	mov	r0, r6
 8009900:	3501      	adds	r5, #1
 8009902:	f005 fb19 	bl	800ef38 <put_memory>
 8009906:	42af      	cmp	r7, r5
 8009908:	60a4      	str	r4, [r4, #8]
 800990a:	f884 800c 	strb.w	r8, [r4, #12]
 800990e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8009912:	d1f3      	bne.n	80098fc <rmw_uxrce_init_subscription_memory+0x20>
 8009914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop

0800991c <rmw_uxrce_init_node_memory>:
 800991c:	b1e2      	cbz	r2, 8009958 <rmw_uxrce_init_node_memory+0x3c>
 800991e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009922:	7b05      	ldrb	r5, [r0, #12]
 8009924:	4606      	mov	r6, r0
 8009926:	b9ad      	cbnz	r5, 8009954 <rmw_uxrce_init_node_memory+0x38>
 8009928:	23a4      	movs	r3, #164	; 0xa4
 800992a:	e9c0 5500 	strd	r5, r5, [r0]
 800992e:	6083      	str	r3, [r0, #8]
 8009930:	f240 1301 	movw	r3, #257	; 0x101
 8009934:	4617      	mov	r7, r2
 8009936:	8183      	strh	r3, [r0, #12]
 8009938:	460c      	mov	r4, r1
 800993a:	46a8      	mov	r8, r5
 800993c:	4621      	mov	r1, r4
 800993e:	4630      	mov	r0, r6
 8009940:	3501      	adds	r5, #1
 8009942:	f005 faf9 	bl	800ef38 <put_memory>
 8009946:	42af      	cmp	r7, r5
 8009948:	60a4      	str	r4, [r4, #8]
 800994a:	f884 800c 	strb.w	r8, [r4, #12]
 800994e:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8009952:	d1f3      	bne.n	800993c <rmw_uxrce_init_node_memory+0x20>
 8009954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop

0800995c <rmw_uxrce_init_session_memory>:
 800995c:	b1ea      	cbz	r2, 800999a <rmw_uxrce_init_session_memory+0x3e>
 800995e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009962:	7b05      	ldrb	r5, [r0, #12]
 8009964:	4606      	mov	r6, r0
 8009966:	b9b5      	cbnz	r5, 8009996 <rmw_uxrce_init_session_memory+0x3a>
 8009968:	e9c0 5500 	strd	r5, r5, [r0]
 800996c:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8009970:	f240 1301 	movw	r3, #257	; 0x101
 8009974:	4617      	mov	r7, r2
 8009976:	f8c0 8008 	str.w	r8, [r0, #8]
 800997a:	460c      	mov	r4, r1
 800997c:	8183      	strh	r3, [r0, #12]
 800997e:	46a9      	mov	r9, r5
 8009980:	4621      	mov	r1, r4
 8009982:	4630      	mov	r0, r6
 8009984:	3501      	adds	r5, #1
 8009986:	f005 fad7 	bl	800ef38 <put_memory>
 800998a:	42af      	cmp	r7, r5
 800998c:	60a4      	str	r4, [r4, #8]
 800998e:	f884 900c 	strb.w	r9, [r4, #12]
 8009992:	4444      	add	r4, r8
 8009994:	d1f4      	bne.n	8009980 <rmw_uxrce_init_session_memory+0x24>
 8009996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800999a:	4770      	bx	lr

0800999c <rmw_uxrce_init_topic_memory>:
 800999c:	b1e2      	cbz	r2, 80099d8 <rmw_uxrce_init_topic_memory+0x3c>
 800999e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099a2:	7b05      	ldrb	r5, [r0, #12]
 80099a4:	4606      	mov	r6, r0
 80099a6:	b9ad      	cbnz	r5, 80099d4 <rmw_uxrce_init_topic_memory+0x38>
 80099a8:	231c      	movs	r3, #28
 80099aa:	e9c0 5500 	strd	r5, r5, [r0]
 80099ae:	6083      	str	r3, [r0, #8]
 80099b0:	f240 1301 	movw	r3, #257	; 0x101
 80099b4:	4617      	mov	r7, r2
 80099b6:	8183      	strh	r3, [r0, #12]
 80099b8:	460c      	mov	r4, r1
 80099ba:	46a8      	mov	r8, r5
 80099bc:	4621      	mov	r1, r4
 80099be:	4630      	mov	r0, r6
 80099c0:	3501      	adds	r5, #1
 80099c2:	f005 fab9 	bl	800ef38 <put_memory>
 80099c6:	42af      	cmp	r7, r5
 80099c8:	60a4      	str	r4, [r4, #8]
 80099ca:	f884 800c 	strb.w	r8, [r4, #12]
 80099ce:	f104 041c 	add.w	r4, r4, #28
 80099d2:	d1f3      	bne.n	80099bc <rmw_uxrce_init_topic_memory+0x20>
 80099d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop

080099dc <rmw_uxrce_init_static_input_buffer_memory>:
 80099dc:	b1ea      	cbz	r2, 8009a1a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80099de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e2:	7b05      	ldrb	r5, [r0, #12]
 80099e4:	4606      	mov	r6, r0
 80099e6:	b9b5      	cbnz	r5, 8009a16 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80099e8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80099ec:	e9c0 5500 	strd	r5, r5, [r0]
 80099f0:	6083      	str	r3, [r0, #8]
 80099f2:	f240 1301 	movw	r3, #257	; 0x101
 80099f6:	4617      	mov	r7, r2
 80099f8:	8183      	strh	r3, [r0, #12]
 80099fa:	460c      	mov	r4, r1
 80099fc:	46a8      	mov	r8, r5
 80099fe:	4621      	mov	r1, r4
 8009a00:	4630      	mov	r0, r6
 8009a02:	3501      	adds	r5, #1
 8009a04:	f005 fa98 	bl	800ef38 <put_memory>
 8009a08:	42af      	cmp	r7, r5
 8009a0a:	60a4      	str	r4, [r4, #8]
 8009a0c:	f884 800c 	strb.w	r8, [r4, #12]
 8009a10:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8009a14:	d1f3      	bne.n	80099fe <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8009a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a1a:	4770      	bx	lr

08009a1c <rmw_uxrce_init_init_options_impl_memory>:
 8009a1c:	b1e2      	cbz	r2, 8009a58 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8009a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a22:	7b05      	ldrb	r5, [r0, #12]
 8009a24:	4606      	mov	r6, r0
 8009a26:	b9ad      	cbnz	r5, 8009a54 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8009a28:	232c      	movs	r3, #44	; 0x2c
 8009a2a:	e9c0 5500 	strd	r5, r5, [r0]
 8009a2e:	6083      	str	r3, [r0, #8]
 8009a30:	f240 1301 	movw	r3, #257	; 0x101
 8009a34:	4617      	mov	r7, r2
 8009a36:	8183      	strh	r3, [r0, #12]
 8009a38:	460c      	mov	r4, r1
 8009a3a:	46a8      	mov	r8, r5
 8009a3c:	4621      	mov	r1, r4
 8009a3e:	4630      	mov	r0, r6
 8009a40:	3501      	adds	r5, #1
 8009a42:	f005 fa79 	bl	800ef38 <put_memory>
 8009a46:	42af      	cmp	r7, r5
 8009a48:	60a4      	str	r4, [r4, #8]
 8009a4a:	f884 800c 	strb.w	r8, [r4, #12]
 8009a4e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8009a52:	d1f3      	bne.n	8009a3c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8009a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop

08009a5c <rmw_uxrce_init_wait_set_memory>:
 8009a5c:	b1e2      	cbz	r2, 8009a98 <rmw_uxrce_init_wait_set_memory+0x3c>
 8009a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a62:	7b05      	ldrb	r5, [r0, #12]
 8009a64:	4606      	mov	r6, r0
 8009a66:	b9ad      	cbnz	r5, 8009a94 <rmw_uxrce_init_wait_set_memory+0x38>
 8009a68:	231c      	movs	r3, #28
 8009a6a:	e9c0 5500 	strd	r5, r5, [r0]
 8009a6e:	6083      	str	r3, [r0, #8]
 8009a70:	f240 1301 	movw	r3, #257	; 0x101
 8009a74:	4617      	mov	r7, r2
 8009a76:	8183      	strh	r3, [r0, #12]
 8009a78:	460c      	mov	r4, r1
 8009a7a:	46a8      	mov	r8, r5
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	4630      	mov	r0, r6
 8009a80:	3501      	adds	r5, #1
 8009a82:	f005 fa59 	bl	800ef38 <put_memory>
 8009a86:	42af      	cmp	r7, r5
 8009a88:	60a4      	str	r4, [r4, #8]
 8009a8a:	f884 800c 	strb.w	r8, [r4, #12]
 8009a8e:	f104 041c 	add.w	r4, r4, #28
 8009a92:	d1f3      	bne.n	8009a7c <rmw_uxrce_init_wait_set_memory+0x20>
 8009a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop

08009a9c <rmw_uxrce_init_guard_condition_memory>:
 8009a9c:	b1e2      	cbz	r2, 8009ad8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8009a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa2:	7b05      	ldrb	r5, [r0, #12]
 8009aa4:	4606      	mov	r6, r0
 8009aa6:	b9ad      	cbnz	r5, 8009ad4 <rmw_uxrce_init_guard_condition_memory+0x38>
 8009aa8:	2320      	movs	r3, #32
 8009aaa:	e9c0 5500 	strd	r5, r5, [r0]
 8009aae:	6083      	str	r3, [r0, #8]
 8009ab0:	f240 1301 	movw	r3, #257	; 0x101
 8009ab4:	4617      	mov	r7, r2
 8009ab6:	8183      	strh	r3, [r0, #12]
 8009ab8:	460c      	mov	r4, r1
 8009aba:	46a8      	mov	r8, r5
 8009abc:	4621      	mov	r1, r4
 8009abe:	4630      	mov	r0, r6
 8009ac0:	3501      	adds	r5, #1
 8009ac2:	f005 fa39 	bl	800ef38 <put_memory>
 8009ac6:	42af      	cmp	r7, r5
 8009ac8:	60a4      	str	r4, [r4, #8]
 8009aca:	f884 800c 	strb.w	r8, [r4, #12]
 8009ace:	f104 0420 	add.w	r4, r4, #32
 8009ad2:	d1f3      	bne.n	8009abc <rmw_uxrce_init_guard_condition_memory+0x20>
 8009ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop

08009adc <rmw_uxrce_fini_session_memory>:
 8009adc:	4601      	mov	r1, r0
 8009ade:	4801      	ldr	r0, [pc, #4]	; (8009ae4 <rmw_uxrce_fini_session_memory+0x8>)
 8009ae0:	f005 ba2a 	b.w	800ef38 <put_memory>
 8009ae4:	200123f4 	.word	0x200123f4

08009ae8 <rmw_uxrce_fini_node_memory>:
 8009ae8:	b538      	push	{r3, r4, r5, lr}
 8009aea:	4604      	mov	r4, r0
 8009aec:	6800      	ldr	r0, [r0, #0]
 8009aee:	b128      	cbz	r0, 8009afc <rmw_uxrce_fini_node_memory+0x14>
 8009af0:	4b07      	ldr	r3, [pc, #28]	; (8009b10 <rmw_uxrce_fini_node_memory+0x28>)
 8009af2:	6819      	ldr	r1, [r3, #0]
 8009af4:	f7f6 fb74 	bl	80001e0 <strcmp>
 8009af8:	b940      	cbnz	r0, 8009b0c <rmw_uxrce_fini_node_memory+0x24>
 8009afa:	6020      	str	r0, [r4, #0]
 8009afc:	6861      	ldr	r1, [r4, #4]
 8009afe:	b129      	cbz	r1, 8009b0c <rmw_uxrce_fini_node_memory+0x24>
 8009b00:	2500      	movs	r5, #0
 8009b02:	4804      	ldr	r0, [pc, #16]	; (8009b14 <rmw_uxrce_fini_node_memory+0x2c>)
 8009b04:	610d      	str	r5, [r1, #16]
 8009b06:	f005 fa17 	bl	800ef38 <put_memory>
 8009b0a:	6065      	str	r5, [r4, #4]
 8009b0c:	bd38      	pop	{r3, r4, r5, pc}
 8009b0e:	bf00      	nop
 8009b10:	08013c2c 	.word	0x08013c2c
 8009b14:	200123c4 	.word	0x200123c4

08009b18 <rmw_uxrce_fini_publisher_memory>:
 8009b18:	b510      	push	{r4, lr}
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	6800      	ldr	r0, [r0, #0]
 8009b1e:	b128      	cbz	r0, 8009b2c <rmw_uxrce_fini_publisher_memory+0x14>
 8009b20:	4b06      	ldr	r3, [pc, #24]	; (8009b3c <rmw_uxrce_fini_publisher_memory+0x24>)
 8009b22:	6819      	ldr	r1, [r3, #0]
 8009b24:	f7f6 fb5c 	bl	80001e0 <strcmp>
 8009b28:	b938      	cbnz	r0, 8009b3a <rmw_uxrce_fini_publisher_memory+0x22>
 8009b2a:	6020      	str	r0, [r4, #0]
 8009b2c:	6861      	ldr	r1, [r4, #4]
 8009b2e:	b121      	cbz	r1, 8009b3a <rmw_uxrce_fini_publisher_memory+0x22>
 8009b30:	4803      	ldr	r0, [pc, #12]	; (8009b40 <rmw_uxrce_fini_publisher_memory+0x28>)
 8009b32:	f005 fa01 	bl	800ef38 <put_memory>
 8009b36:	2300      	movs	r3, #0
 8009b38:	6063      	str	r3, [r4, #4]
 8009b3a:	bd10      	pop	{r4, pc}
 8009b3c:	08013c2c 	.word	0x08013c2c
 8009b40:	200123d4 	.word	0x200123d4

08009b44 <rmw_uxrce_fini_subscription_memory>:
 8009b44:	b510      	push	{r4, lr}
 8009b46:	4604      	mov	r4, r0
 8009b48:	6800      	ldr	r0, [r0, #0]
 8009b4a:	b128      	cbz	r0, 8009b58 <rmw_uxrce_fini_subscription_memory+0x14>
 8009b4c:	4b06      	ldr	r3, [pc, #24]	; (8009b68 <rmw_uxrce_fini_subscription_memory+0x24>)
 8009b4e:	6819      	ldr	r1, [r3, #0]
 8009b50:	f7f6 fb46 	bl	80001e0 <strcmp>
 8009b54:	b938      	cbnz	r0, 8009b66 <rmw_uxrce_fini_subscription_memory+0x22>
 8009b56:	6020      	str	r0, [r4, #0]
 8009b58:	6861      	ldr	r1, [r4, #4]
 8009b5a:	b121      	cbz	r1, 8009b66 <rmw_uxrce_fini_subscription_memory+0x22>
 8009b5c:	4803      	ldr	r0, [pc, #12]	; (8009b6c <rmw_uxrce_fini_subscription_memory+0x28>)
 8009b5e:	f005 f9eb 	bl	800ef38 <put_memory>
 8009b62:	2300      	movs	r3, #0
 8009b64:	6063      	str	r3, [r4, #4]
 8009b66:	bd10      	pop	{r4, pc}
 8009b68:	08013c2c 	.word	0x08013c2c
 8009b6c:	20012414 	.word	0x20012414

08009b70 <rmw_uxrce_fini_service_memory>:
 8009b70:	b510      	push	{r4, lr}
 8009b72:	4604      	mov	r4, r0
 8009b74:	6800      	ldr	r0, [r0, #0]
 8009b76:	b128      	cbz	r0, 8009b84 <rmw_uxrce_fini_service_memory+0x14>
 8009b78:	4b06      	ldr	r3, [pc, #24]	; (8009b94 <rmw_uxrce_fini_service_memory+0x24>)
 8009b7a:	6819      	ldr	r1, [r3, #0]
 8009b7c:	f7f6 fb30 	bl	80001e0 <strcmp>
 8009b80:	b938      	cbnz	r0, 8009b92 <rmw_uxrce_fini_service_memory+0x22>
 8009b82:	6020      	str	r0, [r4, #0]
 8009b84:	6861      	ldr	r1, [r4, #4]
 8009b86:	b121      	cbz	r1, 8009b92 <rmw_uxrce_fini_service_memory+0x22>
 8009b88:	4803      	ldr	r0, [pc, #12]	; (8009b98 <rmw_uxrce_fini_service_memory+0x28>)
 8009b8a:	f005 f9d5 	bl	800ef38 <put_memory>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	6063      	str	r3, [r4, #4]
 8009b92:	bd10      	pop	{r4, pc}
 8009b94:	08013c2c 	.word	0x08013c2c
 8009b98:	200123e4 	.word	0x200123e4

08009b9c <rmw_uxrce_fini_client_memory>:
 8009b9c:	b510      	push	{r4, lr}
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	6800      	ldr	r0, [r0, #0]
 8009ba2:	b128      	cbz	r0, 8009bb0 <rmw_uxrce_fini_client_memory+0x14>
 8009ba4:	4b06      	ldr	r3, [pc, #24]	; (8009bc0 <rmw_uxrce_fini_client_memory+0x24>)
 8009ba6:	6819      	ldr	r1, [r3, #0]
 8009ba8:	f7f6 fb1a 	bl	80001e0 <strcmp>
 8009bac:	b938      	cbnz	r0, 8009bbe <rmw_uxrce_fini_client_memory+0x22>
 8009bae:	6020      	str	r0, [r4, #0]
 8009bb0:	6861      	ldr	r1, [r4, #4]
 8009bb2:	b121      	cbz	r1, 8009bbe <rmw_uxrce_fini_client_memory+0x22>
 8009bb4:	4803      	ldr	r0, [pc, #12]	; (8009bc4 <rmw_uxrce_fini_client_memory+0x28>)
 8009bb6:	f005 f9bf 	bl	800ef38 <put_memory>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	6063      	str	r3, [r4, #4]
 8009bbe:	bd10      	pop	{r4, pc}
 8009bc0:	08013c2c 	.word	0x08013c2c
 8009bc4:	2000daf8 	.word	0x2000daf8

08009bc8 <rmw_uxrce_fini_topic_memory>:
 8009bc8:	b510      	push	{r4, lr}
 8009bca:	4604      	mov	r4, r0
 8009bcc:	4621      	mov	r1, r4
 8009bce:	4803      	ldr	r0, [pc, #12]	; (8009bdc <rmw_uxrce_fini_topic_memory+0x14>)
 8009bd0:	f005 f9b2 	bl	800ef38 <put_memory>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	61a3      	str	r3, [r4, #24]
 8009bd8:	bd10      	pop	{r4, pc}
 8009bda:	bf00      	nop
 8009bdc:	20012424 	.word	0x20012424

08009be0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8009be0:	b082      	sub	sp, #8
 8009be2:	b530      	push	{r4, r5, lr}
 8009be4:	4925      	ldr	r1, [pc, #148]	; (8009c7c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8009be6:	680d      	ldr	r5, [r1, #0]
 8009be8:	ac03      	add	r4, sp, #12
 8009bea:	e884 000c 	stmia.w	r4, {r2, r3}
 8009bee:	461c      	mov	r4, r3
 8009bf0:	2d00      	cmp	r5, #0
 8009bf2:	d041      	beq.n	8009c78 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8009bf4:	462b      	mov	r3, r5
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	689a      	ldr	r2, [r3, #8]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8009c00:	4290      	cmp	r0, r2
 8009c02:	bf08      	it	eq
 8009c04:	3101      	addeq	r1, #1
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1f6      	bne.n	8009bf8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8009c0a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d029      	beq.n	8009c66 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8009c12:	d907      	bls.n	8009c24 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8009c14:	2b03      	cmp	r3, #3
 8009c16:	d005      	beq.n	8009c24 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8009c18:	2100      	movs	r1, #0
 8009c1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c1e:	4608      	mov	r0, r1
 8009c20:	b002      	add	sp, #8
 8009c22:	4770      	bx	lr
 8009c24:	b314      	cbz	r4, 8009c6c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8009c26:	428c      	cmp	r4, r1
 8009c28:	d820      	bhi.n	8009c6c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8009c2a:	2d00      	cmp	r5, #0
 8009c2c:	d0f4      	beq.n	8009c18 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8009c2e:	2100      	movs	r1, #0
 8009c30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009c34:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8009c38:	e002      	b.n	8009c40 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8009c3a:	686d      	ldr	r5, [r5, #4]
 8009c3c:	2d00      	cmp	r5, #0
 8009c3e:	d0ec      	beq.n	8009c1a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8009c40:	68ab      	ldr	r3, [r5, #8]
 8009c42:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8009c46:	4290      	cmp	r0, r2
 8009c48:	d1f7      	bne.n	8009c3a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8009c4a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8009c4e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8009c52:	4562      	cmp	r2, ip
 8009c54:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8009c58:	eb73 0e04 	sbcs.w	lr, r3, r4
 8009c5c:	daed      	bge.n	8009c3a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8009c5e:	4694      	mov	ip, r2
 8009c60:	461c      	mov	r4, r3
 8009c62:	4629      	mov	r1, r5
 8009c64:	e7e9      	b.n	8009c3a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8009c66:	b10c      	cbz	r4, 8009c6c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8009c68:	428c      	cmp	r4, r1
 8009c6a:	d9d5      	bls.n	8009c18 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8009c6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c70:	4802      	ldr	r0, [pc, #8]	; (8009c7c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8009c72:	b002      	add	sp, #8
 8009c74:	f005 b950 	b.w	800ef18 <get_memory>
 8009c78:	4629      	mov	r1, r5
 8009c7a:	e7c6      	b.n	8009c0a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8009c7c:	20012404 	.word	0x20012404

08009c80 <run_xrce_session>:
 8009c80:	b510      	push	{r4, lr}
 8009c82:	788c      	ldrb	r4, [r1, #2]
 8009c84:	b086      	sub	sp, #24
 8009c86:	2c01      	cmp	r4, #1
 8009c88:	f8ad 200e 	strh.w	r2, [sp, #14]
 8009c8c:	d00c      	beq.n	8009ca8 <run_xrce_session+0x28>
 8009c8e:	4619      	mov	r1, r3
 8009c90:	2301      	movs	r3, #1
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	f10d 020e 	add.w	r2, sp, #14
 8009c98:	f10d 0317 	add.w	r3, sp, #23
 8009c9c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8009ca0:	f001 ff7e 	bl	800bba0 <uxr_run_session_until_all_status>
 8009ca4:	b006      	add	sp, #24
 8009ca6:	bd10      	pop	{r4, pc}
 8009ca8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8009cac:	f001 fbcc 	bl	800b448 <uxr_flash_output_streams>
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	b006      	add	sp, #24
 8009cb4:	bd10      	pop	{r4, pc}
 8009cb6:	bf00      	nop

08009cb8 <convert_qos_profile>:
 8009cb8:	7a4a      	ldrb	r2, [r1, #9]
 8009cba:	f891 c008 	ldrb.w	ip, [r1, #8]
 8009cbe:	2a02      	cmp	r2, #2
 8009cc0:	bf18      	it	ne
 8009cc2:	2200      	movne	r2, #0
 8009cc4:	7002      	strb	r2, [r0, #0]
 8009cc6:	780a      	ldrb	r2, [r1, #0]
 8009cc8:	8889      	ldrh	r1, [r1, #4]
 8009cca:	8081      	strh	r1, [r0, #4]
 8009ccc:	f1ac 0c02 	sub.w	ip, ip, #2
 8009cd0:	f1a2 0202 	sub.w	r2, r2, #2
 8009cd4:	fabc fc8c 	clz	ip, ip
 8009cd8:	fab2 f282 	clz	r2, r2
 8009cdc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8009ce0:	0952      	lsrs	r2, r2, #5
 8009ce2:	f880 c001 	strb.w	ip, [r0, #1]
 8009ce6:	7082      	strb	r2, [r0, #2]
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop

08009cec <generate_type_name>:
 8009cec:	b530      	push	{r4, r5, lr}
 8009cee:	2300      	movs	r3, #0
 8009cf0:	700b      	strb	r3, [r1, #0]
 8009cf2:	6803      	ldr	r3, [r0, #0]
 8009cf4:	b087      	sub	sp, #28
 8009cf6:	4614      	mov	r4, r2
 8009cf8:	b1d3      	cbz	r3, 8009d30 <generate_type_name+0x44>
 8009cfa:	4a0f      	ldr	r2, [pc, #60]	; (8009d38 <generate_type_name+0x4c>)
 8009cfc:	4615      	mov	r5, r2
 8009cfe:	9203      	str	r2, [sp, #12]
 8009d00:	9500      	str	r5, [sp, #0]
 8009d02:	6842      	ldr	r2, [r0, #4]
 8009d04:	480d      	ldr	r0, [pc, #52]	; (8009d3c <generate_type_name+0x50>)
 8009d06:	9001      	str	r0, [sp, #4]
 8009d08:	4608      	mov	r0, r1
 8009d0a:	490d      	ldr	r1, [pc, #52]	; (8009d40 <generate_type_name+0x54>)
 8009d0c:	9204      	str	r2, [sp, #16]
 8009d0e:	9105      	str	r1, [sp, #20]
 8009d10:	9102      	str	r1, [sp, #8]
 8009d12:	4a0c      	ldr	r2, [pc, #48]	; (8009d44 <generate_type_name+0x58>)
 8009d14:	4621      	mov	r1, r4
 8009d16:	f008 fadb 	bl	80122d0 <sniprintf>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	db05      	blt.n	8009d2a <generate_type_name+0x3e>
 8009d1e:	4284      	cmp	r4, r0
 8009d20:	bfd4      	ite	le
 8009d22:	2000      	movle	r0, #0
 8009d24:	2001      	movgt	r0, #1
 8009d26:	b007      	add	sp, #28
 8009d28:	bd30      	pop	{r4, r5, pc}
 8009d2a:	2000      	movs	r0, #0
 8009d2c:	b007      	add	sp, #28
 8009d2e:	bd30      	pop	{r4, r5, pc}
 8009d30:	4b05      	ldr	r3, [pc, #20]	; (8009d48 <generate_type_name+0x5c>)
 8009d32:	4a01      	ldr	r2, [pc, #4]	; (8009d38 <generate_type_name+0x4c>)
 8009d34:	461d      	mov	r5, r3
 8009d36:	e7e2      	b.n	8009cfe <generate_type_name+0x12>
 8009d38:	08013634 	.word	0x08013634
 8009d3c:	0801364c 	.word	0x0801364c
 8009d40:	08013648 	.word	0x08013648
 8009d44:	08013638 	.word	0x08013638
 8009d48:	08013a04 	.word	0x08013a04

08009d4c <generate_topic_name>:
 8009d4c:	b510      	push	{r4, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	4614      	mov	r4, r2
 8009d52:	9000      	str	r0, [sp, #0]
 8009d54:	4b08      	ldr	r3, [pc, #32]	; (8009d78 <generate_topic_name+0x2c>)
 8009d56:	4a09      	ldr	r2, [pc, #36]	; (8009d7c <generate_topic_name+0x30>)
 8009d58:	4608      	mov	r0, r1
 8009d5a:	4621      	mov	r1, r4
 8009d5c:	f008 fab8 	bl	80122d0 <sniprintf>
 8009d60:	2800      	cmp	r0, #0
 8009d62:	db05      	blt.n	8009d70 <generate_topic_name+0x24>
 8009d64:	4284      	cmp	r4, r0
 8009d66:	bfd4      	ite	le
 8009d68:	2000      	movle	r0, #0
 8009d6a:	2001      	movgt	r0, #1
 8009d6c:	b002      	add	sp, #8
 8009d6e:	bd10      	pop	{r4, pc}
 8009d70:	2000      	movs	r0, #0
 8009d72:	b002      	add	sp, #8
 8009d74:	bd10      	pop	{r4, pc}
 8009d76:	bf00      	nop
 8009d78:	08013658 	.word	0x08013658
 8009d7c:	08013650 	.word	0x08013650

08009d80 <is_uxrce_rmw_identifier_valid>:
 8009d80:	b510      	push	{r4, lr}
 8009d82:	4604      	mov	r4, r0
 8009d84:	b140      	cbz	r0, 8009d98 <is_uxrce_rmw_identifier_valid+0x18>
 8009d86:	f005 f8eb 	bl	800ef60 <rmw_get_implementation_identifier>
 8009d8a:	4601      	mov	r1, r0
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f7f6 fa27 	bl	80001e0 <strcmp>
 8009d92:	fab0 f080 	clz	r0, r0
 8009d96:	0940      	lsrs	r0, r0, #5
 8009d98:	bd10      	pop	{r4, pc}
 8009d9a:	bf00      	nop

08009d9c <get_message_typesupport_handle>:
 8009d9c:	6883      	ldr	r3, [r0, #8]
 8009d9e:	4718      	bx	r3

08009da0 <get_message_typesupport_handle_function>:
 8009da0:	b510      	push	{r4, lr}
 8009da2:	4604      	mov	r4, r0
 8009da4:	6800      	ldr	r0, [r0, #0]
 8009da6:	f7f6 fa1b 	bl	80001e0 <strcmp>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	bf0c      	ite	eq
 8009dae:	4620      	moveq	r0, r4
 8009db0:	2000      	movne	r0, #0
 8009db2:	bd10      	pop	{r4, pc}

08009db4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8009db4:	4b04      	ldr	r3, [pc, #16]	; (8009dc8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	b10a      	cbz	r2, 8009dbe <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8009dba:	4803      	ldr	r0, [pc, #12]	; (8009dc8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8009dbc:	4770      	bx	lr
 8009dbe:	4a03      	ldr	r2, [pc, #12]	; (8009dcc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8009dc0:	4801      	ldr	r0, [pc, #4]	; (8009dc8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8009dc2:	6812      	ldr	r2, [r2, #0]
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	4770      	bx	lr
 8009dc8:	20000030 	.word	0x20000030
 8009dcc:	200000ac 	.word	0x200000ac

08009dd0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8009dd0:	4a02      	ldr	r2, [pc, #8]	; (8009ddc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8009dd2:	4b03      	ldr	r3, [pc, #12]	; (8009de0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8009dd4:	6812      	ldr	r2, [r2, #0]
 8009dd6:	601a      	str	r2, [r3, #0]
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	200000ac 	.word	0x200000ac
 8009de0:	20000030 	.word	0x20000030

08009de4 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8009de4:	f005 bda0 	b.w	800f928 <std_msgs__msg__Int32__init>

08009de8 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 8009de8:	f005 bda2 	b.w	800f930 <std_msgs__msg__Int32__fini>

08009dec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8009dec:	4b04      	ldr	r3, [pc, #16]	; (8009e00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	b10a      	cbz	r2, 8009df6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8009df2:	4803      	ldr	r0, [pc, #12]	; (8009e00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8009df4:	4770      	bx	lr
 8009df6:	4a03      	ldr	r2, [pc, #12]	; (8009e04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8009df8:	4801      	ldr	r0, [pc, #4]	; (8009e00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8009dfa:	6812      	ldr	r2, [r2, #0]
 8009dfc:	601a      	str	r2, [r3, #0]
 8009dfe:	4770      	bx	lr
 8009e00:	20000078 	.word	0x20000078
 8009e04:	200000b0 	.word	0x200000b0

08009e08 <_Int32__max_serialized_size>:
 8009e08:	b508      	push	{r3, lr}
 8009e0a:	2104      	movs	r1, #4
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	f001 f807 	bl	800ae20 <ucdr_alignment>
 8009e12:	3004      	adds	r0, #4
 8009e14:	bd08      	pop	{r3, pc}
 8009e16:	bf00      	nop

08009e18 <_Int32__cdr_deserialize>:
 8009e18:	b109      	cbz	r1, 8009e1e <_Int32__cdr_deserialize+0x6>
 8009e1a:	f000 bf19 	b.w	800ac50 <ucdr_deserialize_int32_t>
 8009e1e:	4608      	mov	r0, r1
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop

08009e24 <get_serialized_size_std_msgs__msg__Int32>:
 8009e24:	b138      	cbz	r0, 8009e36 <get_serialized_size_std_msgs__msg__Int32+0x12>
 8009e26:	b508      	push	{r3, lr}
 8009e28:	460b      	mov	r3, r1
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	2104      	movs	r1, #4
 8009e2e:	f000 fff7 	bl	800ae20 <ucdr_alignment>
 8009e32:	3004      	adds	r0, #4
 8009e34:	bd08      	pop	{r3, pc}
 8009e36:	4770      	bx	lr

08009e38 <_Int32__cdr_serialize>:
 8009e38:	460a      	mov	r2, r1
 8009e3a:	b118      	cbz	r0, 8009e44 <_Int32__cdr_serialize+0xc>
 8009e3c:	6801      	ldr	r1, [r0, #0]
 8009e3e:	4610      	mov	r0, r2
 8009e40:	f000 be6e 	b.w	800ab20 <ucdr_serialize_int32_t>
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop

08009e48 <_Int32__get_serialized_size>:
 8009e48:	b130      	cbz	r0, 8009e58 <_Int32__get_serialized_size+0x10>
 8009e4a:	b508      	push	{r3, lr}
 8009e4c:	2104      	movs	r1, #4
 8009e4e:	2000      	movs	r0, #0
 8009e50:	f000 ffe6 	bl	800ae20 <ucdr_alignment>
 8009e54:	3004      	adds	r0, #4
 8009e56:	bd08      	pop	{r3, pc}
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop

08009e5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8009e5c:	4800      	ldr	r0, [pc, #0]	; (8009e60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 8009e5e:	4770      	bx	lr
 8009e60:	20000084 	.word	0x20000084

08009e64 <ucdr_serialize_bool>:
 8009e64:	b538      	push	{r3, r4, r5, lr}
 8009e66:	460d      	mov	r5, r1
 8009e68:	2101      	movs	r1, #1
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	f000 ff8c 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 8009e70:	b148      	cbz	r0, 8009e86 <ucdr_serialize_bool+0x22>
 8009e72:	68a3      	ldr	r3, [r4, #8]
 8009e74:	701d      	strb	r5, [r3, #0]
 8009e76:	68a2      	ldr	r2, [r4, #8]
 8009e78:	6923      	ldr	r3, [r4, #16]
 8009e7a:	2101      	movs	r1, #1
 8009e7c:	440a      	add	r2, r1
 8009e7e:	440b      	add	r3, r1
 8009e80:	60a2      	str	r2, [r4, #8]
 8009e82:	6123      	str	r3, [r4, #16]
 8009e84:	7561      	strb	r1, [r4, #21]
 8009e86:	7da0      	ldrb	r0, [r4, #22]
 8009e88:	f080 0001 	eor.w	r0, r0, #1
 8009e8c:	bd38      	pop	{r3, r4, r5, pc}
 8009e8e:	bf00      	nop

08009e90 <ucdr_deserialize_bool>:
 8009e90:	b538      	push	{r3, r4, r5, lr}
 8009e92:	460d      	mov	r5, r1
 8009e94:	2101      	movs	r1, #1
 8009e96:	4604      	mov	r4, r0
 8009e98:	f000 ff76 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 8009e9c:	b160      	cbz	r0, 8009eb8 <ucdr_deserialize_bool+0x28>
 8009e9e:	68a2      	ldr	r2, [r4, #8]
 8009ea0:	6923      	ldr	r3, [r4, #16]
 8009ea2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009ea6:	3900      	subs	r1, #0
 8009ea8:	bf18      	it	ne
 8009eaa:	2101      	movne	r1, #1
 8009eac:	7029      	strb	r1, [r5, #0]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	2101      	movs	r1, #1
 8009eb2:	60a2      	str	r2, [r4, #8]
 8009eb4:	6123      	str	r3, [r4, #16]
 8009eb6:	7561      	strb	r1, [r4, #21]
 8009eb8:	7da0      	ldrb	r0, [r4, #22]
 8009eba:	f080 0001 	eor.w	r0, r0, #1
 8009ebe:	bd38      	pop	{r3, r4, r5, pc}

08009ec0 <ucdr_serialize_uint8_t>:
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	460d      	mov	r5, r1
 8009ec4:	2101      	movs	r1, #1
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	f000 ff5e 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 8009ecc:	b148      	cbz	r0, 8009ee2 <ucdr_serialize_uint8_t+0x22>
 8009ece:	68a3      	ldr	r3, [r4, #8]
 8009ed0:	701d      	strb	r5, [r3, #0]
 8009ed2:	68a2      	ldr	r2, [r4, #8]
 8009ed4:	6923      	ldr	r3, [r4, #16]
 8009ed6:	2101      	movs	r1, #1
 8009ed8:	440a      	add	r2, r1
 8009eda:	440b      	add	r3, r1
 8009edc:	60a2      	str	r2, [r4, #8]
 8009ede:	6123      	str	r3, [r4, #16]
 8009ee0:	7561      	strb	r1, [r4, #21]
 8009ee2:	7da0      	ldrb	r0, [r4, #22]
 8009ee4:	f080 0001 	eor.w	r0, r0, #1
 8009ee8:	bd38      	pop	{r3, r4, r5, pc}
 8009eea:	bf00      	nop

08009eec <ucdr_deserialize_uint8_t>:
 8009eec:	b538      	push	{r3, r4, r5, lr}
 8009eee:	460d      	mov	r5, r1
 8009ef0:	2101      	movs	r1, #1
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	f000 ff48 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 8009ef8:	b150      	cbz	r0, 8009f10 <ucdr_deserialize_uint8_t+0x24>
 8009efa:	68a3      	ldr	r3, [r4, #8]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	702b      	strb	r3, [r5, #0]
 8009f00:	68a2      	ldr	r2, [r4, #8]
 8009f02:	6923      	ldr	r3, [r4, #16]
 8009f04:	2101      	movs	r1, #1
 8009f06:	440a      	add	r2, r1
 8009f08:	440b      	add	r3, r1
 8009f0a:	60a2      	str	r2, [r4, #8]
 8009f0c:	6123      	str	r3, [r4, #16]
 8009f0e:	7561      	strb	r1, [r4, #21]
 8009f10:	7da0      	ldrb	r0, [r4, #22]
 8009f12:	f080 0001 	eor.w	r0, r0, #1
 8009f16:	bd38      	pop	{r3, r4, r5, pc}

08009f18 <ucdr_serialize_uint16_t>:
 8009f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f1c:	b082      	sub	sp, #8
 8009f1e:	460b      	mov	r3, r1
 8009f20:	2102      	movs	r1, #2
 8009f22:	4604      	mov	r4, r0
 8009f24:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009f28:	f000 ff82 	bl	800ae30 <ucdr_buffer_alignment>
 8009f2c:	4601      	mov	r1, r0
 8009f2e:	4620      	mov	r0, r4
 8009f30:	7d67      	ldrb	r7, [r4, #21]
 8009f32:	f000 ffc1 	bl	800aeb8 <ucdr_advance_buffer>
 8009f36:	2102      	movs	r1, #2
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f000 ff19 	bl	800ad70 <ucdr_check_buffer_available_for>
 8009f3e:	bb78      	cbnz	r0, 8009fa0 <ucdr_serialize_uint16_t+0x88>
 8009f40:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009f44:	42ab      	cmp	r3, r5
 8009f46:	d926      	bls.n	8009f96 <ucdr_serialize_uint16_t+0x7e>
 8009f48:	1b5e      	subs	r6, r3, r5
 8009f4a:	60a3      	str	r3, [r4, #8]
 8009f4c:	6923      	ldr	r3, [r4, #16]
 8009f4e:	f1c6 0802 	rsb	r8, r6, #2
 8009f52:	4433      	add	r3, r6
 8009f54:	6123      	str	r3, [r4, #16]
 8009f56:	4641      	mov	r1, r8
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f000 ff15 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d03b      	beq.n	8009fda <ucdr_serialize_uint16_t+0xc2>
 8009f62:	7d23      	ldrb	r3, [r4, #20]
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d04a      	beq.n	8009ffe <ucdr_serialize_uint16_t+0xe6>
 8009f68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009f6c:	702b      	strb	r3, [r5, #0]
 8009f6e:	2e00      	cmp	r6, #0
 8009f70:	d040      	beq.n	8009ff4 <ucdr_serialize_uint16_t+0xdc>
 8009f72:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009f76:	706b      	strb	r3, [r5, #1]
 8009f78:	6923      	ldr	r3, [r4, #16]
 8009f7a:	68a2      	ldr	r2, [r4, #8]
 8009f7c:	7da0      	ldrb	r0, [r4, #22]
 8009f7e:	3302      	adds	r3, #2
 8009f80:	1b9e      	subs	r6, r3, r6
 8009f82:	4442      	add	r2, r8
 8009f84:	2302      	movs	r3, #2
 8009f86:	f080 0001 	eor.w	r0, r0, #1
 8009f8a:	60a2      	str	r2, [r4, #8]
 8009f8c:	6126      	str	r6, [r4, #16]
 8009f8e:	7563      	strb	r3, [r4, #21]
 8009f90:	b002      	add	sp, #8
 8009f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f96:	2102      	movs	r1, #2
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f000 fef5 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 8009f9e:	b190      	cbz	r0, 8009fc6 <ucdr_serialize_uint16_t+0xae>
 8009fa0:	7d23      	ldrb	r3, [r4, #20]
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	68a3      	ldr	r3, [r4, #8]
 8009fa6:	d014      	beq.n	8009fd2 <ucdr_serialize_uint16_t+0xba>
 8009fa8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009fac:	701a      	strb	r2, [r3, #0]
 8009fae:	68a3      	ldr	r3, [r4, #8]
 8009fb0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009fb4:	705a      	strb	r2, [r3, #1]
 8009fb6:	68a2      	ldr	r2, [r4, #8]
 8009fb8:	6923      	ldr	r3, [r4, #16]
 8009fba:	3202      	adds	r2, #2
 8009fbc:	3302      	adds	r3, #2
 8009fbe:	2102      	movs	r1, #2
 8009fc0:	60a2      	str	r2, [r4, #8]
 8009fc2:	6123      	str	r3, [r4, #16]
 8009fc4:	7561      	strb	r1, [r4, #21]
 8009fc6:	7da0      	ldrb	r0, [r4, #22]
 8009fc8:	f080 0001 	eor.w	r0, r0, #1
 8009fcc:	b002      	add	sp, #8
 8009fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fd2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009fd6:	801a      	strh	r2, [r3, #0]
 8009fd8:	e7ed      	b.n	8009fb6 <ucdr_serialize_uint16_t+0x9e>
 8009fda:	68a2      	ldr	r2, [r4, #8]
 8009fdc:	6923      	ldr	r3, [r4, #16]
 8009fde:	7da0      	ldrb	r0, [r4, #22]
 8009fe0:	7567      	strb	r7, [r4, #21]
 8009fe2:	1b92      	subs	r2, r2, r6
 8009fe4:	1b9b      	subs	r3, r3, r6
 8009fe6:	f080 0001 	eor.w	r0, r0, #1
 8009fea:	60a2      	str	r2, [r4, #8]
 8009fec:	6123      	str	r3, [r4, #16]
 8009fee:	b002      	add	sp, #8
 8009ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff4:	68a3      	ldr	r3, [r4, #8]
 8009ff6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009ffa:	701a      	strb	r2, [r3, #0]
 8009ffc:	e7bc      	b.n	8009f78 <ucdr_serialize_uint16_t+0x60>
 8009ffe:	4628      	mov	r0, r5
 800a000:	f10d 0506 	add.w	r5, sp, #6
 800a004:	4629      	mov	r1, r5
 800a006:	4632      	mov	r2, r6
 800a008:	f008 fb31 	bl	801266e <memcpy>
 800a00c:	68a0      	ldr	r0, [r4, #8]
 800a00e:	4642      	mov	r2, r8
 800a010:	19a9      	adds	r1, r5, r6
 800a012:	f008 fb2c 	bl	801266e <memcpy>
 800a016:	e7af      	b.n	8009f78 <ucdr_serialize_uint16_t+0x60>

0800a018 <ucdr_serialize_endian_uint16_t>:
 800a018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a01c:	b083      	sub	sp, #12
 800a01e:	460d      	mov	r5, r1
 800a020:	2102      	movs	r1, #2
 800a022:	4604      	mov	r4, r0
 800a024:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a028:	f000 ff02 	bl	800ae30 <ucdr_buffer_alignment>
 800a02c:	4601      	mov	r1, r0
 800a02e:	4620      	mov	r0, r4
 800a030:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a034:	f000 ff40 	bl	800aeb8 <ucdr_advance_buffer>
 800a038:	2102      	movs	r1, #2
 800a03a:	4620      	mov	r0, r4
 800a03c:	f000 fe98 	bl	800ad70 <ucdr_check_buffer_available_for>
 800a040:	bb70      	cbnz	r0, 800a0a0 <ucdr_serialize_endian_uint16_t+0x88>
 800a042:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a046:	42be      	cmp	r6, r7
 800a048:	d925      	bls.n	800a096 <ucdr_serialize_endian_uint16_t+0x7e>
 800a04a:	6923      	ldr	r3, [r4, #16]
 800a04c:	60a6      	str	r6, [r4, #8]
 800a04e:	1bf6      	subs	r6, r6, r7
 800a050:	4433      	add	r3, r6
 800a052:	f1c6 0902 	rsb	r9, r6, #2
 800a056:	6123      	str	r3, [r4, #16]
 800a058:	4649      	mov	r1, r9
 800a05a:	4620      	mov	r0, r4
 800a05c:	f000 fe94 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800a060:	2800      	cmp	r0, #0
 800a062:	d039      	beq.n	800a0d8 <ucdr_serialize_endian_uint16_t+0xc0>
 800a064:	2d01      	cmp	r5, #1
 800a066:	d04a      	beq.n	800a0fe <ucdr_serialize_endian_uint16_t+0xe6>
 800a068:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a06c:	703b      	strb	r3, [r7, #0]
 800a06e:	2e00      	cmp	r6, #0
 800a070:	d040      	beq.n	800a0f4 <ucdr_serialize_endian_uint16_t+0xdc>
 800a072:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a076:	707b      	strb	r3, [r7, #1]
 800a078:	6923      	ldr	r3, [r4, #16]
 800a07a:	68a2      	ldr	r2, [r4, #8]
 800a07c:	7da0      	ldrb	r0, [r4, #22]
 800a07e:	3302      	adds	r3, #2
 800a080:	444a      	add	r2, r9
 800a082:	1b9b      	subs	r3, r3, r6
 800a084:	2102      	movs	r1, #2
 800a086:	f080 0001 	eor.w	r0, r0, #1
 800a08a:	60a2      	str	r2, [r4, #8]
 800a08c:	6123      	str	r3, [r4, #16]
 800a08e:	7561      	strb	r1, [r4, #21]
 800a090:	b003      	add	sp, #12
 800a092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a096:	2102      	movs	r1, #2
 800a098:	4620      	mov	r0, r4
 800a09a:	f000 fe75 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800a09e:	b188      	cbz	r0, 800a0c4 <ucdr_serialize_endian_uint16_t+0xac>
 800a0a0:	2d01      	cmp	r5, #1
 800a0a2:	68a3      	ldr	r3, [r4, #8]
 800a0a4:	d014      	beq.n	800a0d0 <ucdr_serialize_endian_uint16_t+0xb8>
 800a0a6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a0aa:	701a      	strb	r2, [r3, #0]
 800a0ac:	68a3      	ldr	r3, [r4, #8]
 800a0ae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a0b2:	705a      	strb	r2, [r3, #1]
 800a0b4:	68a2      	ldr	r2, [r4, #8]
 800a0b6:	6923      	ldr	r3, [r4, #16]
 800a0b8:	3202      	adds	r2, #2
 800a0ba:	3302      	adds	r3, #2
 800a0bc:	2102      	movs	r1, #2
 800a0be:	60a2      	str	r2, [r4, #8]
 800a0c0:	6123      	str	r3, [r4, #16]
 800a0c2:	7561      	strb	r1, [r4, #21]
 800a0c4:	7da0      	ldrb	r0, [r4, #22]
 800a0c6:	f080 0001 	eor.w	r0, r0, #1
 800a0ca:	b003      	add	sp, #12
 800a0cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0d0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a0d4:	801a      	strh	r2, [r3, #0]
 800a0d6:	e7ed      	b.n	800a0b4 <ucdr_serialize_endian_uint16_t+0x9c>
 800a0d8:	68a2      	ldr	r2, [r4, #8]
 800a0da:	6923      	ldr	r3, [r4, #16]
 800a0dc:	7da0      	ldrb	r0, [r4, #22]
 800a0de:	f884 8015 	strb.w	r8, [r4, #21]
 800a0e2:	1b92      	subs	r2, r2, r6
 800a0e4:	1b9b      	subs	r3, r3, r6
 800a0e6:	f080 0001 	eor.w	r0, r0, #1
 800a0ea:	60a2      	str	r2, [r4, #8]
 800a0ec:	6123      	str	r3, [r4, #16]
 800a0ee:	b003      	add	sp, #12
 800a0f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0f4:	68a3      	ldr	r3, [r4, #8]
 800a0f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a0fa:	701a      	strb	r2, [r3, #0]
 800a0fc:	e7bc      	b.n	800a078 <ucdr_serialize_endian_uint16_t+0x60>
 800a0fe:	f10d 0506 	add.w	r5, sp, #6
 800a102:	4629      	mov	r1, r5
 800a104:	4632      	mov	r2, r6
 800a106:	4638      	mov	r0, r7
 800a108:	f008 fab1 	bl	801266e <memcpy>
 800a10c:	68a0      	ldr	r0, [r4, #8]
 800a10e:	464a      	mov	r2, r9
 800a110:	19a9      	adds	r1, r5, r6
 800a112:	f008 faac 	bl	801266e <memcpy>
 800a116:	e7af      	b.n	800a078 <ucdr_serialize_endian_uint16_t+0x60>

0800a118 <ucdr_deserialize_uint16_t>:
 800a118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a11c:	460d      	mov	r5, r1
 800a11e:	2102      	movs	r1, #2
 800a120:	4604      	mov	r4, r0
 800a122:	f000 fe85 	bl	800ae30 <ucdr_buffer_alignment>
 800a126:	4601      	mov	r1, r0
 800a128:	4620      	mov	r0, r4
 800a12a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a12e:	f000 fec3 	bl	800aeb8 <ucdr_advance_buffer>
 800a132:	2102      	movs	r1, #2
 800a134:	4620      	mov	r0, r4
 800a136:	f000 fe1b 	bl	800ad70 <ucdr_check_buffer_available_for>
 800a13a:	bb60      	cbnz	r0, 800a196 <ucdr_deserialize_uint16_t+0x7e>
 800a13c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a140:	42be      	cmp	r6, r7
 800a142:	d923      	bls.n	800a18c <ucdr_deserialize_uint16_t+0x74>
 800a144:	6923      	ldr	r3, [r4, #16]
 800a146:	60a6      	str	r6, [r4, #8]
 800a148:	1bf6      	subs	r6, r6, r7
 800a14a:	4433      	add	r3, r6
 800a14c:	f1c6 0902 	rsb	r9, r6, #2
 800a150:	6123      	str	r3, [r4, #16]
 800a152:	4649      	mov	r1, r9
 800a154:	4620      	mov	r0, r4
 800a156:	f000 fe17 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d034      	beq.n	800a1c8 <ucdr_deserialize_uint16_t+0xb0>
 800a15e:	7d23      	ldrb	r3, [r4, #20]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d042      	beq.n	800a1ea <ucdr_deserialize_uint16_t+0xd2>
 800a164:	787b      	ldrb	r3, [r7, #1]
 800a166:	702b      	strb	r3, [r5, #0]
 800a168:	2e00      	cmp	r6, #0
 800a16a:	d03a      	beq.n	800a1e2 <ucdr_deserialize_uint16_t+0xca>
 800a16c:	783b      	ldrb	r3, [r7, #0]
 800a16e:	706b      	strb	r3, [r5, #1]
 800a170:	6923      	ldr	r3, [r4, #16]
 800a172:	68a2      	ldr	r2, [r4, #8]
 800a174:	7da0      	ldrb	r0, [r4, #22]
 800a176:	2102      	movs	r1, #2
 800a178:	3302      	adds	r3, #2
 800a17a:	444a      	add	r2, r9
 800a17c:	1b9b      	subs	r3, r3, r6
 800a17e:	7561      	strb	r1, [r4, #21]
 800a180:	60a2      	str	r2, [r4, #8]
 800a182:	6123      	str	r3, [r4, #16]
 800a184:	f080 0001 	eor.w	r0, r0, #1
 800a188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a18c:	2102      	movs	r1, #2
 800a18e:	4620      	mov	r0, r4
 800a190:	f000 fdfa 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800a194:	b180      	cbz	r0, 800a1b8 <ucdr_deserialize_uint16_t+0xa0>
 800a196:	7d23      	ldrb	r3, [r4, #20]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	68a3      	ldr	r3, [r4, #8]
 800a19c:	d011      	beq.n	800a1c2 <ucdr_deserialize_uint16_t+0xaa>
 800a19e:	785b      	ldrb	r3, [r3, #1]
 800a1a0:	702b      	strb	r3, [r5, #0]
 800a1a2:	68a3      	ldr	r3, [r4, #8]
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	706b      	strb	r3, [r5, #1]
 800a1a8:	68a2      	ldr	r2, [r4, #8]
 800a1aa:	6923      	ldr	r3, [r4, #16]
 800a1ac:	3202      	adds	r2, #2
 800a1ae:	3302      	adds	r3, #2
 800a1b0:	2102      	movs	r1, #2
 800a1b2:	60a2      	str	r2, [r4, #8]
 800a1b4:	6123      	str	r3, [r4, #16]
 800a1b6:	7561      	strb	r1, [r4, #21]
 800a1b8:	7da0      	ldrb	r0, [r4, #22]
 800a1ba:	f080 0001 	eor.w	r0, r0, #1
 800a1be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	802b      	strh	r3, [r5, #0]
 800a1c6:	e7ef      	b.n	800a1a8 <ucdr_deserialize_uint16_t+0x90>
 800a1c8:	68a2      	ldr	r2, [r4, #8]
 800a1ca:	6923      	ldr	r3, [r4, #16]
 800a1cc:	7da0      	ldrb	r0, [r4, #22]
 800a1ce:	f884 8015 	strb.w	r8, [r4, #21]
 800a1d2:	1b92      	subs	r2, r2, r6
 800a1d4:	1b9b      	subs	r3, r3, r6
 800a1d6:	60a2      	str	r2, [r4, #8]
 800a1d8:	6123      	str	r3, [r4, #16]
 800a1da:	f080 0001 	eor.w	r0, r0, #1
 800a1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1e2:	68a3      	ldr	r3, [r4, #8]
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	706b      	strb	r3, [r5, #1]
 800a1e8:	e7c2      	b.n	800a170 <ucdr_deserialize_uint16_t+0x58>
 800a1ea:	4639      	mov	r1, r7
 800a1ec:	4632      	mov	r2, r6
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	f008 fa3d 	bl	801266e <memcpy>
 800a1f4:	68a1      	ldr	r1, [r4, #8]
 800a1f6:	464a      	mov	r2, r9
 800a1f8:	19a8      	adds	r0, r5, r6
 800a1fa:	f008 fa38 	bl	801266e <memcpy>
 800a1fe:	e7b7      	b.n	800a170 <ucdr_deserialize_uint16_t+0x58>

0800a200 <ucdr_deserialize_endian_uint16_t>:
 800a200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a204:	460e      	mov	r6, r1
 800a206:	2102      	movs	r1, #2
 800a208:	4604      	mov	r4, r0
 800a20a:	4615      	mov	r5, r2
 800a20c:	f000 fe10 	bl	800ae30 <ucdr_buffer_alignment>
 800a210:	4601      	mov	r1, r0
 800a212:	4620      	mov	r0, r4
 800a214:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a218:	f000 fe4e 	bl	800aeb8 <ucdr_advance_buffer>
 800a21c:	2102      	movs	r1, #2
 800a21e:	4620      	mov	r0, r4
 800a220:	f000 fda6 	bl	800ad70 <ucdr_check_buffer_available_for>
 800a224:	bb70      	cbnz	r0, 800a284 <ucdr_deserialize_endian_uint16_t+0x84>
 800a226:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800a22a:	4547      	cmp	r7, r8
 800a22c:	d925      	bls.n	800a27a <ucdr_deserialize_endian_uint16_t+0x7a>
 800a22e:	6923      	ldr	r3, [r4, #16]
 800a230:	60a7      	str	r7, [r4, #8]
 800a232:	eba7 0708 	sub.w	r7, r7, r8
 800a236:	443b      	add	r3, r7
 800a238:	f1c7 0a02 	rsb	sl, r7, #2
 800a23c:	6123      	str	r3, [r4, #16]
 800a23e:	4651      	mov	r1, sl
 800a240:	4620      	mov	r0, r4
 800a242:	f000 fda1 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800a246:	2800      	cmp	r0, #0
 800a248:	d034      	beq.n	800a2b4 <ucdr_deserialize_endian_uint16_t+0xb4>
 800a24a:	2e01      	cmp	r6, #1
 800a24c:	d043      	beq.n	800a2d6 <ucdr_deserialize_endian_uint16_t+0xd6>
 800a24e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a252:	702b      	strb	r3, [r5, #0]
 800a254:	2f00      	cmp	r7, #0
 800a256:	d03a      	beq.n	800a2ce <ucdr_deserialize_endian_uint16_t+0xce>
 800a258:	f898 3000 	ldrb.w	r3, [r8]
 800a25c:	706b      	strb	r3, [r5, #1]
 800a25e:	6923      	ldr	r3, [r4, #16]
 800a260:	68a2      	ldr	r2, [r4, #8]
 800a262:	7da0      	ldrb	r0, [r4, #22]
 800a264:	2102      	movs	r1, #2
 800a266:	3302      	adds	r3, #2
 800a268:	4452      	add	r2, sl
 800a26a:	1bdb      	subs	r3, r3, r7
 800a26c:	7561      	strb	r1, [r4, #21]
 800a26e:	60a2      	str	r2, [r4, #8]
 800a270:	6123      	str	r3, [r4, #16]
 800a272:	f080 0001 	eor.w	r0, r0, #1
 800a276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a27a:	2102      	movs	r1, #2
 800a27c:	4620      	mov	r0, r4
 800a27e:	f000 fd83 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800a282:	b178      	cbz	r0, 800a2a4 <ucdr_deserialize_endian_uint16_t+0xa4>
 800a284:	2e01      	cmp	r6, #1
 800a286:	68a3      	ldr	r3, [r4, #8]
 800a288:	d011      	beq.n	800a2ae <ucdr_deserialize_endian_uint16_t+0xae>
 800a28a:	785b      	ldrb	r3, [r3, #1]
 800a28c:	702b      	strb	r3, [r5, #0]
 800a28e:	68a3      	ldr	r3, [r4, #8]
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	706b      	strb	r3, [r5, #1]
 800a294:	68a2      	ldr	r2, [r4, #8]
 800a296:	6923      	ldr	r3, [r4, #16]
 800a298:	3202      	adds	r2, #2
 800a29a:	3302      	adds	r3, #2
 800a29c:	2102      	movs	r1, #2
 800a29e:	60a2      	str	r2, [r4, #8]
 800a2a0:	6123      	str	r3, [r4, #16]
 800a2a2:	7561      	strb	r1, [r4, #21]
 800a2a4:	7da0      	ldrb	r0, [r4, #22]
 800a2a6:	f080 0001 	eor.w	r0, r0, #1
 800a2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ae:	881b      	ldrh	r3, [r3, #0]
 800a2b0:	802b      	strh	r3, [r5, #0]
 800a2b2:	e7ef      	b.n	800a294 <ucdr_deserialize_endian_uint16_t+0x94>
 800a2b4:	68a2      	ldr	r2, [r4, #8]
 800a2b6:	6923      	ldr	r3, [r4, #16]
 800a2b8:	7da0      	ldrb	r0, [r4, #22]
 800a2ba:	f884 9015 	strb.w	r9, [r4, #21]
 800a2be:	1bd2      	subs	r2, r2, r7
 800a2c0:	1bdb      	subs	r3, r3, r7
 800a2c2:	60a2      	str	r2, [r4, #8]
 800a2c4:	6123      	str	r3, [r4, #16]
 800a2c6:	f080 0001 	eor.w	r0, r0, #1
 800a2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ce:	68a3      	ldr	r3, [r4, #8]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	706b      	strb	r3, [r5, #1]
 800a2d4:	e7c3      	b.n	800a25e <ucdr_deserialize_endian_uint16_t+0x5e>
 800a2d6:	4641      	mov	r1, r8
 800a2d8:	463a      	mov	r2, r7
 800a2da:	4628      	mov	r0, r5
 800a2dc:	f008 f9c7 	bl	801266e <memcpy>
 800a2e0:	68a1      	ldr	r1, [r4, #8]
 800a2e2:	4652      	mov	r2, sl
 800a2e4:	19e8      	adds	r0, r5, r7
 800a2e6:	f008 f9c2 	bl	801266e <memcpy>
 800a2ea:	e7b8      	b.n	800a25e <ucdr_deserialize_endian_uint16_t+0x5e>

0800a2ec <ucdr_serialize_uint32_t>:
 800a2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f0:	b082      	sub	sp, #8
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	9101      	str	r1, [sp, #4]
 800a2f6:	2104      	movs	r1, #4
 800a2f8:	f000 fd9a 	bl	800ae30 <ucdr_buffer_alignment>
 800a2fc:	4601      	mov	r1, r0
 800a2fe:	4620      	mov	r0, r4
 800a300:	7d67      	ldrb	r7, [r4, #21]
 800a302:	f000 fdd9 	bl	800aeb8 <ucdr_advance_buffer>
 800a306:	2104      	movs	r1, #4
 800a308:	4620      	mov	r0, r4
 800a30a:	f000 fd31 	bl	800ad70 <ucdr_check_buffer_available_for>
 800a30e:	2800      	cmp	r0, #0
 800a310:	d139      	bne.n	800a386 <ucdr_serialize_uint32_t+0x9a>
 800a312:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a316:	42ab      	cmp	r3, r5
 800a318:	d930      	bls.n	800a37c <ucdr_serialize_uint32_t+0x90>
 800a31a:	1b5e      	subs	r6, r3, r5
 800a31c:	60a3      	str	r3, [r4, #8]
 800a31e:	6923      	ldr	r3, [r4, #16]
 800a320:	f1c6 0804 	rsb	r8, r6, #4
 800a324:	4433      	add	r3, r6
 800a326:	6123      	str	r3, [r4, #16]
 800a328:	4641      	mov	r1, r8
 800a32a:	4620      	mov	r0, r4
 800a32c:	f000 fd2c 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800a330:	2800      	cmp	r0, #0
 800a332:	d04c      	beq.n	800a3ce <ucdr_serialize_uint32_t+0xe2>
 800a334:	7d23      	ldrb	r3, [r4, #20]
 800a336:	2b01      	cmp	r3, #1
 800a338:	d063      	beq.n	800a402 <ucdr_serialize_uint32_t+0x116>
 800a33a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a33e:	702b      	strb	r3, [r5, #0]
 800a340:	2e00      	cmp	r6, #0
 800a342:	d051      	beq.n	800a3e8 <ucdr_serialize_uint32_t+0xfc>
 800a344:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a348:	706b      	strb	r3, [r5, #1]
 800a34a:	2e01      	cmp	r6, #1
 800a34c:	d050      	beq.n	800a3f0 <ucdr_serialize_uint32_t+0x104>
 800a34e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a352:	70ab      	strb	r3, [r5, #2]
 800a354:	2e02      	cmp	r6, #2
 800a356:	d04f      	beq.n	800a3f8 <ucdr_serialize_uint32_t+0x10c>
 800a358:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a35c:	70eb      	strb	r3, [r5, #3]
 800a35e:	6923      	ldr	r3, [r4, #16]
 800a360:	68a2      	ldr	r2, [r4, #8]
 800a362:	7da0      	ldrb	r0, [r4, #22]
 800a364:	3304      	adds	r3, #4
 800a366:	1b9e      	subs	r6, r3, r6
 800a368:	4442      	add	r2, r8
 800a36a:	2304      	movs	r3, #4
 800a36c:	f080 0001 	eor.w	r0, r0, #1
 800a370:	60a2      	str	r2, [r4, #8]
 800a372:	6126      	str	r6, [r4, #16]
 800a374:	7563      	strb	r3, [r4, #21]
 800a376:	b002      	add	sp, #8
 800a378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a37c:	2104      	movs	r1, #4
 800a37e:	4620      	mov	r0, r4
 800a380:	f000 fd02 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800a384:	b1d0      	cbz	r0, 800a3bc <ucdr_serialize_uint32_t+0xd0>
 800a386:	7d23      	ldrb	r3, [r4, #20]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	68a3      	ldr	r3, [r4, #8]
 800a38c:	d01c      	beq.n	800a3c8 <ucdr_serialize_uint32_t+0xdc>
 800a38e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a392:	701a      	strb	r2, [r3, #0]
 800a394:	68a3      	ldr	r3, [r4, #8]
 800a396:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a39a:	705a      	strb	r2, [r3, #1]
 800a39c:	68a3      	ldr	r3, [r4, #8]
 800a39e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a3a2:	709a      	strb	r2, [r3, #2]
 800a3a4:	68a3      	ldr	r3, [r4, #8]
 800a3a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a3aa:	70da      	strb	r2, [r3, #3]
 800a3ac:	68a2      	ldr	r2, [r4, #8]
 800a3ae:	6923      	ldr	r3, [r4, #16]
 800a3b0:	3204      	adds	r2, #4
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	2104      	movs	r1, #4
 800a3b6:	60a2      	str	r2, [r4, #8]
 800a3b8:	6123      	str	r3, [r4, #16]
 800a3ba:	7561      	strb	r1, [r4, #21]
 800a3bc:	7da0      	ldrb	r0, [r4, #22]
 800a3be:	f080 0001 	eor.w	r0, r0, #1
 800a3c2:	b002      	add	sp, #8
 800a3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c8:	9a01      	ldr	r2, [sp, #4]
 800a3ca:	601a      	str	r2, [r3, #0]
 800a3cc:	e7ee      	b.n	800a3ac <ucdr_serialize_uint32_t+0xc0>
 800a3ce:	68a2      	ldr	r2, [r4, #8]
 800a3d0:	6923      	ldr	r3, [r4, #16]
 800a3d2:	7da0      	ldrb	r0, [r4, #22]
 800a3d4:	7567      	strb	r7, [r4, #21]
 800a3d6:	1b92      	subs	r2, r2, r6
 800a3d8:	1b9b      	subs	r3, r3, r6
 800a3da:	f080 0001 	eor.w	r0, r0, #1
 800a3de:	60a2      	str	r2, [r4, #8]
 800a3e0:	6123      	str	r3, [r4, #16]
 800a3e2:	b002      	add	sp, #8
 800a3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e8:	68a3      	ldr	r3, [r4, #8]
 800a3ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a3ee:	701a      	strb	r2, [r3, #0]
 800a3f0:	68a3      	ldr	r3, [r4, #8]
 800a3f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a3f6:	701a      	strb	r2, [r3, #0]
 800a3f8:	68a3      	ldr	r3, [r4, #8]
 800a3fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a3fe:	701a      	strb	r2, [r3, #0]
 800a400:	e7ad      	b.n	800a35e <ucdr_serialize_uint32_t+0x72>
 800a402:	4628      	mov	r0, r5
 800a404:	ad01      	add	r5, sp, #4
 800a406:	4629      	mov	r1, r5
 800a408:	4632      	mov	r2, r6
 800a40a:	f008 f930 	bl	801266e <memcpy>
 800a40e:	68a0      	ldr	r0, [r4, #8]
 800a410:	4642      	mov	r2, r8
 800a412:	19a9      	adds	r1, r5, r6
 800a414:	f008 f92b 	bl	801266e <memcpy>
 800a418:	e7a1      	b.n	800a35e <ucdr_serialize_uint32_t+0x72>
 800a41a:	bf00      	nop

0800a41c <ucdr_serialize_endian_uint32_t>:
 800a41c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a420:	b083      	sub	sp, #12
 800a422:	460d      	mov	r5, r1
 800a424:	2104      	movs	r1, #4
 800a426:	4604      	mov	r4, r0
 800a428:	9201      	str	r2, [sp, #4]
 800a42a:	f000 fd01 	bl	800ae30 <ucdr_buffer_alignment>
 800a42e:	4601      	mov	r1, r0
 800a430:	4620      	mov	r0, r4
 800a432:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a436:	f000 fd3f 	bl	800aeb8 <ucdr_advance_buffer>
 800a43a:	2104      	movs	r1, #4
 800a43c:	4620      	mov	r0, r4
 800a43e:	f000 fc97 	bl	800ad70 <ucdr_check_buffer_available_for>
 800a442:	2800      	cmp	r0, #0
 800a444:	d138      	bne.n	800a4b8 <ucdr_serialize_endian_uint32_t+0x9c>
 800a446:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a44a:	42b7      	cmp	r7, r6
 800a44c:	d92f      	bls.n	800a4ae <ucdr_serialize_endian_uint32_t+0x92>
 800a44e:	6923      	ldr	r3, [r4, #16]
 800a450:	60a7      	str	r7, [r4, #8]
 800a452:	1bbf      	subs	r7, r7, r6
 800a454:	443b      	add	r3, r7
 800a456:	f1c7 0904 	rsb	r9, r7, #4
 800a45a:	6123      	str	r3, [r4, #16]
 800a45c:	4649      	mov	r1, r9
 800a45e:	4620      	mov	r0, r4
 800a460:	f000 fc92 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800a464:	2800      	cmp	r0, #0
 800a466:	d04a      	beq.n	800a4fe <ucdr_serialize_endian_uint32_t+0xe2>
 800a468:	2d01      	cmp	r5, #1
 800a46a:	d063      	beq.n	800a534 <ucdr_serialize_endian_uint32_t+0x118>
 800a46c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a470:	7033      	strb	r3, [r6, #0]
 800a472:	2f00      	cmp	r7, #0
 800a474:	d051      	beq.n	800a51a <ucdr_serialize_endian_uint32_t+0xfe>
 800a476:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a47a:	7073      	strb	r3, [r6, #1]
 800a47c:	2f01      	cmp	r7, #1
 800a47e:	d050      	beq.n	800a522 <ucdr_serialize_endian_uint32_t+0x106>
 800a480:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a484:	70b3      	strb	r3, [r6, #2]
 800a486:	2f02      	cmp	r7, #2
 800a488:	d04f      	beq.n	800a52a <ucdr_serialize_endian_uint32_t+0x10e>
 800a48a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a48e:	70f3      	strb	r3, [r6, #3]
 800a490:	6923      	ldr	r3, [r4, #16]
 800a492:	68a2      	ldr	r2, [r4, #8]
 800a494:	7da0      	ldrb	r0, [r4, #22]
 800a496:	3304      	adds	r3, #4
 800a498:	444a      	add	r2, r9
 800a49a:	1bdb      	subs	r3, r3, r7
 800a49c:	2104      	movs	r1, #4
 800a49e:	f080 0001 	eor.w	r0, r0, #1
 800a4a2:	60a2      	str	r2, [r4, #8]
 800a4a4:	6123      	str	r3, [r4, #16]
 800a4a6:	7561      	strb	r1, [r4, #21]
 800a4a8:	b003      	add	sp, #12
 800a4aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4ae:	2104      	movs	r1, #4
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f000 fc69 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800a4b6:	b1c8      	cbz	r0, 800a4ec <ucdr_serialize_endian_uint32_t+0xd0>
 800a4b8:	2d01      	cmp	r5, #1
 800a4ba:	68a3      	ldr	r3, [r4, #8]
 800a4bc:	d01c      	beq.n	800a4f8 <ucdr_serialize_endian_uint32_t+0xdc>
 800a4be:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a4c2:	701a      	strb	r2, [r3, #0]
 800a4c4:	68a3      	ldr	r3, [r4, #8]
 800a4c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a4ca:	705a      	strb	r2, [r3, #1]
 800a4cc:	68a3      	ldr	r3, [r4, #8]
 800a4ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a4d2:	709a      	strb	r2, [r3, #2]
 800a4d4:	68a3      	ldr	r3, [r4, #8]
 800a4d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a4da:	70da      	strb	r2, [r3, #3]
 800a4dc:	68a2      	ldr	r2, [r4, #8]
 800a4de:	6923      	ldr	r3, [r4, #16]
 800a4e0:	3204      	adds	r2, #4
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	2104      	movs	r1, #4
 800a4e6:	60a2      	str	r2, [r4, #8]
 800a4e8:	6123      	str	r3, [r4, #16]
 800a4ea:	7561      	strb	r1, [r4, #21]
 800a4ec:	7da0      	ldrb	r0, [r4, #22]
 800a4ee:	f080 0001 	eor.w	r0, r0, #1
 800a4f2:	b003      	add	sp, #12
 800a4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4f8:	9a01      	ldr	r2, [sp, #4]
 800a4fa:	601a      	str	r2, [r3, #0]
 800a4fc:	e7ee      	b.n	800a4dc <ucdr_serialize_endian_uint32_t+0xc0>
 800a4fe:	68a2      	ldr	r2, [r4, #8]
 800a500:	6923      	ldr	r3, [r4, #16]
 800a502:	7da0      	ldrb	r0, [r4, #22]
 800a504:	f884 8015 	strb.w	r8, [r4, #21]
 800a508:	1bd2      	subs	r2, r2, r7
 800a50a:	1bdb      	subs	r3, r3, r7
 800a50c:	f080 0001 	eor.w	r0, r0, #1
 800a510:	60a2      	str	r2, [r4, #8]
 800a512:	6123      	str	r3, [r4, #16]
 800a514:	b003      	add	sp, #12
 800a516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a51a:	68a3      	ldr	r3, [r4, #8]
 800a51c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a520:	701a      	strb	r2, [r3, #0]
 800a522:	68a3      	ldr	r3, [r4, #8]
 800a524:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a528:	701a      	strb	r2, [r3, #0]
 800a52a:	68a3      	ldr	r3, [r4, #8]
 800a52c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a530:	701a      	strb	r2, [r3, #0]
 800a532:	e7ad      	b.n	800a490 <ucdr_serialize_endian_uint32_t+0x74>
 800a534:	ad01      	add	r5, sp, #4
 800a536:	4629      	mov	r1, r5
 800a538:	463a      	mov	r2, r7
 800a53a:	4630      	mov	r0, r6
 800a53c:	f008 f897 	bl	801266e <memcpy>
 800a540:	68a0      	ldr	r0, [r4, #8]
 800a542:	464a      	mov	r2, r9
 800a544:	19e9      	adds	r1, r5, r7
 800a546:	f008 f892 	bl	801266e <memcpy>
 800a54a:	e7a1      	b.n	800a490 <ucdr_serialize_endian_uint32_t+0x74>

0800a54c <ucdr_deserialize_uint32_t>:
 800a54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a550:	460d      	mov	r5, r1
 800a552:	2104      	movs	r1, #4
 800a554:	4604      	mov	r4, r0
 800a556:	f000 fc6b 	bl	800ae30 <ucdr_buffer_alignment>
 800a55a:	4601      	mov	r1, r0
 800a55c:	4620      	mov	r0, r4
 800a55e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a562:	f000 fca9 	bl	800aeb8 <ucdr_advance_buffer>
 800a566:	2104      	movs	r1, #4
 800a568:	4620      	mov	r0, r4
 800a56a:	f000 fc01 	bl	800ad70 <ucdr_check_buffer_available_for>
 800a56e:	2800      	cmp	r0, #0
 800a570:	d138      	bne.n	800a5e4 <ucdr_deserialize_uint32_t+0x98>
 800a572:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a576:	42b7      	cmp	r7, r6
 800a578:	d92f      	bls.n	800a5da <ucdr_deserialize_uint32_t+0x8e>
 800a57a:	6923      	ldr	r3, [r4, #16]
 800a57c:	60a7      	str	r7, [r4, #8]
 800a57e:	1bbf      	subs	r7, r7, r6
 800a580:	443b      	add	r3, r7
 800a582:	f1c7 0904 	rsb	r9, r7, #4
 800a586:	6123      	str	r3, [r4, #16]
 800a588:	4649      	mov	r1, r9
 800a58a:	4620      	mov	r0, r4
 800a58c:	f000 fbfc 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800a590:	2800      	cmp	r0, #0
 800a592:	d046      	beq.n	800a622 <ucdr_deserialize_uint32_t+0xd6>
 800a594:	7d23      	ldrb	r3, [r4, #20]
 800a596:	2b01      	cmp	r3, #1
 800a598:	d05c      	beq.n	800a654 <ucdr_deserialize_uint32_t+0x108>
 800a59a:	78f3      	ldrb	r3, [r6, #3]
 800a59c:	702b      	strb	r3, [r5, #0]
 800a59e:	2f00      	cmp	r7, #0
 800a5a0:	d04c      	beq.n	800a63c <ucdr_deserialize_uint32_t+0xf0>
 800a5a2:	78b3      	ldrb	r3, [r6, #2]
 800a5a4:	706b      	strb	r3, [r5, #1]
 800a5a6:	2f01      	cmp	r7, #1
 800a5a8:	f105 0302 	add.w	r3, r5, #2
 800a5ac:	d04a      	beq.n	800a644 <ucdr_deserialize_uint32_t+0xf8>
 800a5ae:	7873      	ldrb	r3, [r6, #1]
 800a5b0:	70ab      	strb	r3, [r5, #2]
 800a5b2:	2f02      	cmp	r7, #2
 800a5b4:	f105 0303 	add.w	r3, r5, #3
 800a5b8:	d048      	beq.n	800a64c <ucdr_deserialize_uint32_t+0x100>
 800a5ba:	7833      	ldrb	r3, [r6, #0]
 800a5bc:	70eb      	strb	r3, [r5, #3]
 800a5be:	6923      	ldr	r3, [r4, #16]
 800a5c0:	68a2      	ldr	r2, [r4, #8]
 800a5c2:	7da0      	ldrb	r0, [r4, #22]
 800a5c4:	2104      	movs	r1, #4
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	444a      	add	r2, r9
 800a5ca:	1bdb      	subs	r3, r3, r7
 800a5cc:	7561      	strb	r1, [r4, #21]
 800a5ce:	60a2      	str	r2, [r4, #8]
 800a5d0:	6123      	str	r3, [r4, #16]
 800a5d2:	f080 0001 	eor.w	r0, r0, #1
 800a5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5da:	2104      	movs	r1, #4
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f000 fbd3 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800a5e2:	b1b0      	cbz	r0, 800a612 <ucdr_deserialize_uint32_t+0xc6>
 800a5e4:	7d23      	ldrb	r3, [r4, #20]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	68a3      	ldr	r3, [r4, #8]
 800a5ea:	d017      	beq.n	800a61c <ucdr_deserialize_uint32_t+0xd0>
 800a5ec:	78db      	ldrb	r3, [r3, #3]
 800a5ee:	702b      	strb	r3, [r5, #0]
 800a5f0:	68a3      	ldr	r3, [r4, #8]
 800a5f2:	789b      	ldrb	r3, [r3, #2]
 800a5f4:	706b      	strb	r3, [r5, #1]
 800a5f6:	68a3      	ldr	r3, [r4, #8]
 800a5f8:	785b      	ldrb	r3, [r3, #1]
 800a5fa:	70ab      	strb	r3, [r5, #2]
 800a5fc:	68a3      	ldr	r3, [r4, #8]
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	70eb      	strb	r3, [r5, #3]
 800a602:	68a2      	ldr	r2, [r4, #8]
 800a604:	6923      	ldr	r3, [r4, #16]
 800a606:	3204      	adds	r2, #4
 800a608:	3304      	adds	r3, #4
 800a60a:	2104      	movs	r1, #4
 800a60c:	60a2      	str	r2, [r4, #8]
 800a60e:	6123      	str	r3, [r4, #16]
 800a610:	7561      	strb	r1, [r4, #21]
 800a612:	7da0      	ldrb	r0, [r4, #22]
 800a614:	f080 0001 	eor.w	r0, r0, #1
 800a618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	602b      	str	r3, [r5, #0]
 800a620:	e7ef      	b.n	800a602 <ucdr_deserialize_uint32_t+0xb6>
 800a622:	68a2      	ldr	r2, [r4, #8]
 800a624:	6923      	ldr	r3, [r4, #16]
 800a626:	7da0      	ldrb	r0, [r4, #22]
 800a628:	f884 8015 	strb.w	r8, [r4, #21]
 800a62c:	1bd2      	subs	r2, r2, r7
 800a62e:	1bdb      	subs	r3, r3, r7
 800a630:	60a2      	str	r2, [r4, #8]
 800a632:	6123      	str	r3, [r4, #16]
 800a634:	f080 0001 	eor.w	r0, r0, #1
 800a638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a63c:	68a3      	ldr	r3, [r4, #8]
 800a63e:	789b      	ldrb	r3, [r3, #2]
 800a640:	706b      	strb	r3, [r5, #1]
 800a642:	1cab      	adds	r3, r5, #2
 800a644:	68a2      	ldr	r2, [r4, #8]
 800a646:	7852      	ldrb	r2, [r2, #1]
 800a648:	f803 2b01 	strb.w	r2, [r3], #1
 800a64c:	68a2      	ldr	r2, [r4, #8]
 800a64e:	7812      	ldrb	r2, [r2, #0]
 800a650:	701a      	strb	r2, [r3, #0]
 800a652:	e7b4      	b.n	800a5be <ucdr_deserialize_uint32_t+0x72>
 800a654:	4631      	mov	r1, r6
 800a656:	463a      	mov	r2, r7
 800a658:	4628      	mov	r0, r5
 800a65a:	f008 f808 	bl	801266e <memcpy>
 800a65e:	68a1      	ldr	r1, [r4, #8]
 800a660:	464a      	mov	r2, r9
 800a662:	19e8      	adds	r0, r5, r7
 800a664:	f008 f803 	bl	801266e <memcpy>
 800a668:	e7a9      	b.n	800a5be <ucdr_deserialize_uint32_t+0x72>
 800a66a:	bf00      	nop

0800a66c <ucdr_deserialize_endian_uint32_t>:
 800a66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a670:	460e      	mov	r6, r1
 800a672:	2104      	movs	r1, #4
 800a674:	4604      	mov	r4, r0
 800a676:	4615      	mov	r5, r2
 800a678:	f000 fbda 	bl	800ae30 <ucdr_buffer_alignment>
 800a67c:	4601      	mov	r1, r0
 800a67e:	4620      	mov	r0, r4
 800a680:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a684:	f000 fc18 	bl	800aeb8 <ucdr_advance_buffer>
 800a688:	2104      	movs	r1, #4
 800a68a:	4620      	mov	r0, r4
 800a68c:	f000 fb70 	bl	800ad70 <ucdr_check_buffer_available_for>
 800a690:	2800      	cmp	r0, #0
 800a692:	d13c      	bne.n	800a70e <ucdr_deserialize_endian_uint32_t+0xa2>
 800a694:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800a698:	42bb      	cmp	r3, r7
 800a69a:	d933      	bls.n	800a704 <ucdr_deserialize_endian_uint32_t+0x98>
 800a69c:	eba3 0807 	sub.w	r8, r3, r7
 800a6a0:	60a3      	str	r3, [r4, #8]
 800a6a2:	6923      	ldr	r3, [r4, #16]
 800a6a4:	f1c8 0a04 	rsb	sl, r8, #4
 800a6a8:	4443      	add	r3, r8
 800a6aa:	6123      	str	r3, [r4, #16]
 800a6ac:	4651      	mov	r1, sl
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f000 fb6a 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d048      	beq.n	800a74a <ucdr_deserialize_endian_uint32_t+0xde>
 800a6b8:	2e01      	cmp	r6, #1
 800a6ba:	d061      	beq.n	800a780 <ucdr_deserialize_endian_uint32_t+0x114>
 800a6bc:	78fb      	ldrb	r3, [r7, #3]
 800a6be:	702b      	strb	r3, [r5, #0]
 800a6c0:	f1b8 0f00 	cmp.w	r8, #0
 800a6c4:	d050      	beq.n	800a768 <ucdr_deserialize_endian_uint32_t+0xfc>
 800a6c6:	78bb      	ldrb	r3, [r7, #2]
 800a6c8:	706b      	strb	r3, [r5, #1]
 800a6ca:	f1b8 0f01 	cmp.w	r8, #1
 800a6ce:	f105 0302 	add.w	r3, r5, #2
 800a6d2:	d04d      	beq.n	800a770 <ucdr_deserialize_endian_uint32_t+0x104>
 800a6d4:	787b      	ldrb	r3, [r7, #1]
 800a6d6:	70ab      	strb	r3, [r5, #2]
 800a6d8:	f1b8 0f02 	cmp.w	r8, #2
 800a6dc:	f105 0303 	add.w	r3, r5, #3
 800a6e0:	d04a      	beq.n	800a778 <ucdr_deserialize_endian_uint32_t+0x10c>
 800a6e2:	783b      	ldrb	r3, [r7, #0]
 800a6e4:	70eb      	strb	r3, [r5, #3]
 800a6e6:	6923      	ldr	r3, [r4, #16]
 800a6e8:	68a2      	ldr	r2, [r4, #8]
 800a6ea:	7da0      	ldrb	r0, [r4, #22]
 800a6ec:	2104      	movs	r1, #4
 800a6ee:	3304      	adds	r3, #4
 800a6f0:	4452      	add	r2, sl
 800a6f2:	eba3 0308 	sub.w	r3, r3, r8
 800a6f6:	7561      	strb	r1, [r4, #21]
 800a6f8:	60a2      	str	r2, [r4, #8]
 800a6fa:	6123      	str	r3, [r4, #16]
 800a6fc:	f080 0001 	eor.w	r0, r0, #1
 800a700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a704:	2104      	movs	r1, #4
 800a706:	4620      	mov	r0, r4
 800a708:	f000 fb3e 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800a70c:	b1a8      	cbz	r0, 800a73a <ucdr_deserialize_endian_uint32_t+0xce>
 800a70e:	2e01      	cmp	r6, #1
 800a710:	68a3      	ldr	r3, [r4, #8]
 800a712:	d017      	beq.n	800a744 <ucdr_deserialize_endian_uint32_t+0xd8>
 800a714:	78db      	ldrb	r3, [r3, #3]
 800a716:	702b      	strb	r3, [r5, #0]
 800a718:	68a3      	ldr	r3, [r4, #8]
 800a71a:	789b      	ldrb	r3, [r3, #2]
 800a71c:	706b      	strb	r3, [r5, #1]
 800a71e:	68a3      	ldr	r3, [r4, #8]
 800a720:	785b      	ldrb	r3, [r3, #1]
 800a722:	70ab      	strb	r3, [r5, #2]
 800a724:	68a3      	ldr	r3, [r4, #8]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	70eb      	strb	r3, [r5, #3]
 800a72a:	68a2      	ldr	r2, [r4, #8]
 800a72c:	6923      	ldr	r3, [r4, #16]
 800a72e:	3204      	adds	r2, #4
 800a730:	3304      	adds	r3, #4
 800a732:	2104      	movs	r1, #4
 800a734:	60a2      	str	r2, [r4, #8]
 800a736:	6123      	str	r3, [r4, #16]
 800a738:	7561      	strb	r1, [r4, #21]
 800a73a:	7da0      	ldrb	r0, [r4, #22]
 800a73c:	f080 0001 	eor.w	r0, r0, #1
 800a740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	602b      	str	r3, [r5, #0]
 800a748:	e7ef      	b.n	800a72a <ucdr_deserialize_endian_uint32_t+0xbe>
 800a74a:	68a2      	ldr	r2, [r4, #8]
 800a74c:	6923      	ldr	r3, [r4, #16]
 800a74e:	7da0      	ldrb	r0, [r4, #22]
 800a750:	f884 9015 	strb.w	r9, [r4, #21]
 800a754:	eba2 0208 	sub.w	r2, r2, r8
 800a758:	eba3 0308 	sub.w	r3, r3, r8
 800a75c:	60a2      	str	r2, [r4, #8]
 800a75e:	6123      	str	r3, [r4, #16]
 800a760:	f080 0001 	eor.w	r0, r0, #1
 800a764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a768:	68a3      	ldr	r3, [r4, #8]
 800a76a:	789b      	ldrb	r3, [r3, #2]
 800a76c:	706b      	strb	r3, [r5, #1]
 800a76e:	1cab      	adds	r3, r5, #2
 800a770:	68a2      	ldr	r2, [r4, #8]
 800a772:	7852      	ldrb	r2, [r2, #1]
 800a774:	f803 2b01 	strb.w	r2, [r3], #1
 800a778:	68a2      	ldr	r2, [r4, #8]
 800a77a:	7812      	ldrb	r2, [r2, #0]
 800a77c:	701a      	strb	r2, [r3, #0]
 800a77e:	e7b2      	b.n	800a6e6 <ucdr_deserialize_endian_uint32_t+0x7a>
 800a780:	4639      	mov	r1, r7
 800a782:	4642      	mov	r2, r8
 800a784:	4628      	mov	r0, r5
 800a786:	f007 ff72 	bl	801266e <memcpy>
 800a78a:	68a1      	ldr	r1, [r4, #8]
 800a78c:	4652      	mov	r2, sl
 800a78e:	eb05 0008 	add.w	r0, r5, r8
 800a792:	f007 ff6c 	bl	801266e <memcpy>
 800a796:	e7a6      	b.n	800a6e6 <ucdr_deserialize_endian_uint32_t+0x7a>

0800a798 <ucdr_serialize_uint64_t>:
 800a798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a79c:	2108      	movs	r1, #8
 800a79e:	b082      	sub	sp, #8
 800a7a0:	4604      	mov	r4, r0
 800a7a2:	e9cd 2300 	strd	r2, r3, [sp]
 800a7a6:	f000 fb43 	bl	800ae30 <ucdr_buffer_alignment>
 800a7aa:	4601      	mov	r1, r0
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	7d67      	ldrb	r7, [r4, #21]
 800a7b0:	f000 fb82 	bl	800aeb8 <ucdr_advance_buffer>
 800a7b4:	2108      	movs	r1, #8
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f000 fada 	bl	800ad70 <ucdr_check_buffer_available_for>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d14e      	bne.n	800a85e <ucdr_serialize_uint64_t+0xc6>
 800a7c0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a7c4:	42ab      	cmp	r3, r5
 800a7c6:	d945      	bls.n	800a854 <ucdr_serialize_uint64_t+0xbc>
 800a7c8:	1b5e      	subs	r6, r3, r5
 800a7ca:	60a3      	str	r3, [r4, #8]
 800a7cc:	6923      	ldr	r3, [r4, #16]
 800a7ce:	f1c6 0808 	rsb	r8, r6, #8
 800a7d2:	4433      	add	r3, r6
 800a7d4:	6123      	str	r3, [r4, #16]
 800a7d6:	4641      	mov	r1, r8
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f000 fad5 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d074      	beq.n	800a8cc <ucdr_serialize_uint64_t+0x134>
 800a7e2:	7d23      	ldrb	r3, [r4, #20]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	f000 809b 	beq.w	800a920 <ucdr_serialize_uint64_t+0x188>
 800a7ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a7ee:	702b      	strb	r3, [r5, #0]
 800a7f0:	2e00      	cmp	r6, #0
 800a7f2:	d078      	beq.n	800a8e6 <ucdr_serialize_uint64_t+0x14e>
 800a7f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a7f8:	706b      	strb	r3, [r5, #1]
 800a7fa:	2e01      	cmp	r6, #1
 800a7fc:	d077      	beq.n	800a8ee <ucdr_serialize_uint64_t+0x156>
 800a7fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a802:	70ab      	strb	r3, [r5, #2]
 800a804:	2e02      	cmp	r6, #2
 800a806:	d076      	beq.n	800a8f6 <ucdr_serialize_uint64_t+0x15e>
 800a808:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a80c:	70eb      	strb	r3, [r5, #3]
 800a80e:	2e03      	cmp	r6, #3
 800a810:	d075      	beq.n	800a8fe <ucdr_serialize_uint64_t+0x166>
 800a812:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a816:	712b      	strb	r3, [r5, #4]
 800a818:	2e04      	cmp	r6, #4
 800a81a:	d074      	beq.n	800a906 <ucdr_serialize_uint64_t+0x16e>
 800a81c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800a820:	716b      	strb	r3, [r5, #5]
 800a822:	2e05      	cmp	r6, #5
 800a824:	d073      	beq.n	800a90e <ucdr_serialize_uint64_t+0x176>
 800a826:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800a82a:	71ab      	strb	r3, [r5, #6]
 800a82c:	2e06      	cmp	r6, #6
 800a82e:	d072      	beq.n	800a916 <ucdr_serialize_uint64_t+0x17e>
 800a830:	f89d 3000 	ldrb.w	r3, [sp]
 800a834:	71eb      	strb	r3, [r5, #7]
 800a836:	6923      	ldr	r3, [r4, #16]
 800a838:	68a2      	ldr	r2, [r4, #8]
 800a83a:	7da0      	ldrb	r0, [r4, #22]
 800a83c:	3308      	adds	r3, #8
 800a83e:	1b9e      	subs	r6, r3, r6
 800a840:	4442      	add	r2, r8
 800a842:	2308      	movs	r3, #8
 800a844:	f080 0001 	eor.w	r0, r0, #1
 800a848:	60a2      	str	r2, [r4, #8]
 800a84a:	6126      	str	r6, [r4, #16]
 800a84c:	7563      	strb	r3, [r4, #21]
 800a84e:	b002      	add	sp, #8
 800a850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a854:	2108      	movs	r1, #8
 800a856:	4620      	mov	r0, r4
 800a858:	f000 fa96 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800a85c:	b350      	cbz	r0, 800a8b4 <ucdr_serialize_uint64_t+0x11c>
 800a85e:	7d23      	ldrb	r3, [r4, #20]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d02d      	beq.n	800a8c0 <ucdr_serialize_uint64_t+0x128>
 800a864:	68a3      	ldr	r3, [r4, #8]
 800a866:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a86a:	701a      	strb	r2, [r3, #0]
 800a86c:	68a3      	ldr	r3, [r4, #8]
 800a86e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a872:	705a      	strb	r2, [r3, #1]
 800a874:	68a3      	ldr	r3, [r4, #8]
 800a876:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a87a:	709a      	strb	r2, [r3, #2]
 800a87c:	68a3      	ldr	r3, [r4, #8]
 800a87e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a882:	70da      	strb	r2, [r3, #3]
 800a884:	68a3      	ldr	r3, [r4, #8]
 800a886:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a88a:	711a      	strb	r2, [r3, #4]
 800a88c:	68a3      	ldr	r3, [r4, #8]
 800a88e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800a892:	715a      	strb	r2, [r3, #5]
 800a894:	68a3      	ldr	r3, [r4, #8]
 800a896:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a89a:	719a      	strb	r2, [r3, #6]
 800a89c:	68a3      	ldr	r3, [r4, #8]
 800a89e:	f89d 2000 	ldrb.w	r2, [sp]
 800a8a2:	71da      	strb	r2, [r3, #7]
 800a8a4:	68a2      	ldr	r2, [r4, #8]
 800a8a6:	6923      	ldr	r3, [r4, #16]
 800a8a8:	3208      	adds	r2, #8
 800a8aa:	3308      	adds	r3, #8
 800a8ac:	2108      	movs	r1, #8
 800a8ae:	60a2      	str	r2, [r4, #8]
 800a8b0:	6123      	str	r3, [r4, #16]
 800a8b2:	7561      	strb	r1, [r4, #21]
 800a8b4:	7da0      	ldrb	r0, [r4, #22]
 800a8b6:	f080 0001 	eor.w	r0, r0, #1
 800a8ba:	b002      	add	sp, #8
 800a8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8c0:	466b      	mov	r3, sp
 800a8c2:	cb03      	ldmia	r3!, {r0, r1}
 800a8c4:	68a3      	ldr	r3, [r4, #8]
 800a8c6:	6018      	str	r0, [r3, #0]
 800a8c8:	6059      	str	r1, [r3, #4]
 800a8ca:	e7eb      	b.n	800a8a4 <ucdr_serialize_uint64_t+0x10c>
 800a8cc:	68a2      	ldr	r2, [r4, #8]
 800a8ce:	6923      	ldr	r3, [r4, #16]
 800a8d0:	7da0      	ldrb	r0, [r4, #22]
 800a8d2:	7567      	strb	r7, [r4, #21]
 800a8d4:	1b92      	subs	r2, r2, r6
 800a8d6:	1b9b      	subs	r3, r3, r6
 800a8d8:	f080 0001 	eor.w	r0, r0, #1
 800a8dc:	60a2      	str	r2, [r4, #8]
 800a8de:	6123      	str	r3, [r4, #16]
 800a8e0:	b002      	add	sp, #8
 800a8e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e6:	68a3      	ldr	r3, [r4, #8]
 800a8e8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a8ec:	701a      	strb	r2, [r3, #0]
 800a8ee:	68a3      	ldr	r3, [r4, #8]
 800a8f0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a8f4:	701a      	strb	r2, [r3, #0]
 800a8f6:	68a3      	ldr	r3, [r4, #8]
 800a8f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a8fc:	701a      	strb	r2, [r3, #0]
 800a8fe:	68a3      	ldr	r3, [r4, #8]
 800a900:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a904:	701a      	strb	r2, [r3, #0]
 800a906:	68a3      	ldr	r3, [r4, #8]
 800a908:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800a90c:	701a      	strb	r2, [r3, #0]
 800a90e:	68a3      	ldr	r3, [r4, #8]
 800a910:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a914:	701a      	strb	r2, [r3, #0]
 800a916:	68a3      	ldr	r3, [r4, #8]
 800a918:	f89d 2000 	ldrb.w	r2, [sp]
 800a91c:	701a      	strb	r2, [r3, #0]
 800a91e:	e78a      	b.n	800a836 <ucdr_serialize_uint64_t+0x9e>
 800a920:	4628      	mov	r0, r5
 800a922:	466d      	mov	r5, sp
 800a924:	4629      	mov	r1, r5
 800a926:	4632      	mov	r2, r6
 800a928:	f007 fea1 	bl	801266e <memcpy>
 800a92c:	68a0      	ldr	r0, [r4, #8]
 800a92e:	4642      	mov	r2, r8
 800a930:	19a9      	adds	r1, r5, r6
 800a932:	f007 fe9c 	bl	801266e <memcpy>
 800a936:	e77e      	b.n	800a836 <ucdr_serialize_uint64_t+0x9e>

0800a938 <ucdr_serialize_int16_t>:
 800a938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a93c:	b082      	sub	sp, #8
 800a93e:	460b      	mov	r3, r1
 800a940:	2102      	movs	r1, #2
 800a942:	4604      	mov	r4, r0
 800a944:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a948:	f000 fa72 	bl	800ae30 <ucdr_buffer_alignment>
 800a94c:	4601      	mov	r1, r0
 800a94e:	4620      	mov	r0, r4
 800a950:	7d67      	ldrb	r7, [r4, #21]
 800a952:	f000 fab1 	bl	800aeb8 <ucdr_advance_buffer>
 800a956:	2102      	movs	r1, #2
 800a958:	4620      	mov	r0, r4
 800a95a:	f000 fa09 	bl	800ad70 <ucdr_check_buffer_available_for>
 800a95e:	bb78      	cbnz	r0, 800a9c0 <ucdr_serialize_int16_t+0x88>
 800a960:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a964:	42ab      	cmp	r3, r5
 800a966:	d926      	bls.n	800a9b6 <ucdr_serialize_int16_t+0x7e>
 800a968:	1b5e      	subs	r6, r3, r5
 800a96a:	60a3      	str	r3, [r4, #8]
 800a96c:	6923      	ldr	r3, [r4, #16]
 800a96e:	f1c6 0802 	rsb	r8, r6, #2
 800a972:	4433      	add	r3, r6
 800a974:	6123      	str	r3, [r4, #16]
 800a976:	4641      	mov	r1, r8
 800a978:	4620      	mov	r0, r4
 800a97a:	f000 fa05 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800a97e:	2800      	cmp	r0, #0
 800a980:	d03b      	beq.n	800a9fa <ucdr_serialize_int16_t+0xc2>
 800a982:	7d23      	ldrb	r3, [r4, #20]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d04a      	beq.n	800aa1e <ucdr_serialize_int16_t+0xe6>
 800a988:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a98c:	702b      	strb	r3, [r5, #0]
 800a98e:	2e00      	cmp	r6, #0
 800a990:	d040      	beq.n	800aa14 <ucdr_serialize_int16_t+0xdc>
 800a992:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a996:	706b      	strb	r3, [r5, #1]
 800a998:	6923      	ldr	r3, [r4, #16]
 800a99a:	68a2      	ldr	r2, [r4, #8]
 800a99c:	7da0      	ldrb	r0, [r4, #22]
 800a99e:	3302      	adds	r3, #2
 800a9a0:	1b9e      	subs	r6, r3, r6
 800a9a2:	4442      	add	r2, r8
 800a9a4:	2302      	movs	r3, #2
 800a9a6:	f080 0001 	eor.w	r0, r0, #1
 800a9aa:	60a2      	str	r2, [r4, #8]
 800a9ac:	6126      	str	r6, [r4, #16]
 800a9ae:	7563      	strb	r3, [r4, #21]
 800a9b0:	b002      	add	sp, #8
 800a9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9b6:	2102      	movs	r1, #2
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 f9e5 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800a9be:	b190      	cbz	r0, 800a9e6 <ucdr_serialize_int16_t+0xae>
 800a9c0:	7d23      	ldrb	r3, [r4, #20]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	68a3      	ldr	r3, [r4, #8]
 800a9c6:	d014      	beq.n	800a9f2 <ucdr_serialize_int16_t+0xba>
 800a9c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a9cc:	701a      	strb	r2, [r3, #0]
 800a9ce:	68a3      	ldr	r3, [r4, #8]
 800a9d0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a9d4:	705a      	strb	r2, [r3, #1]
 800a9d6:	68a2      	ldr	r2, [r4, #8]
 800a9d8:	6923      	ldr	r3, [r4, #16]
 800a9da:	3202      	adds	r2, #2
 800a9dc:	3302      	adds	r3, #2
 800a9de:	2102      	movs	r1, #2
 800a9e0:	60a2      	str	r2, [r4, #8]
 800a9e2:	6123      	str	r3, [r4, #16]
 800a9e4:	7561      	strb	r1, [r4, #21]
 800a9e6:	7da0      	ldrb	r0, [r4, #22]
 800a9e8:	f080 0001 	eor.w	r0, r0, #1
 800a9ec:	b002      	add	sp, #8
 800a9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a9f6:	801a      	strh	r2, [r3, #0]
 800a9f8:	e7ed      	b.n	800a9d6 <ucdr_serialize_int16_t+0x9e>
 800a9fa:	68a2      	ldr	r2, [r4, #8]
 800a9fc:	6923      	ldr	r3, [r4, #16]
 800a9fe:	7da0      	ldrb	r0, [r4, #22]
 800aa00:	7567      	strb	r7, [r4, #21]
 800aa02:	1b92      	subs	r2, r2, r6
 800aa04:	1b9b      	subs	r3, r3, r6
 800aa06:	f080 0001 	eor.w	r0, r0, #1
 800aa0a:	60a2      	str	r2, [r4, #8]
 800aa0c:	6123      	str	r3, [r4, #16]
 800aa0e:	b002      	add	sp, #8
 800aa10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa14:	68a3      	ldr	r3, [r4, #8]
 800aa16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aa1a:	701a      	strb	r2, [r3, #0]
 800aa1c:	e7bc      	b.n	800a998 <ucdr_serialize_int16_t+0x60>
 800aa1e:	4628      	mov	r0, r5
 800aa20:	f10d 0506 	add.w	r5, sp, #6
 800aa24:	4629      	mov	r1, r5
 800aa26:	4632      	mov	r2, r6
 800aa28:	f007 fe21 	bl	801266e <memcpy>
 800aa2c:	68a0      	ldr	r0, [r4, #8]
 800aa2e:	4642      	mov	r2, r8
 800aa30:	19a9      	adds	r1, r5, r6
 800aa32:	f007 fe1c 	bl	801266e <memcpy>
 800aa36:	e7af      	b.n	800a998 <ucdr_serialize_int16_t+0x60>

0800aa38 <ucdr_deserialize_int16_t>:
 800aa38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa3c:	460d      	mov	r5, r1
 800aa3e:	2102      	movs	r1, #2
 800aa40:	4604      	mov	r4, r0
 800aa42:	f000 f9f5 	bl	800ae30 <ucdr_buffer_alignment>
 800aa46:	4601      	mov	r1, r0
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800aa4e:	f000 fa33 	bl	800aeb8 <ucdr_advance_buffer>
 800aa52:	2102      	movs	r1, #2
 800aa54:	4620      	mov	r0, r4
 800aa56:	f000 f98b 	bl	800ad70 <ucdr_check_buffer_available_for>
 800aa5a:	bb60      	cbnz	r0, 800aab6 <ucdr_deserialize_int16_t+0x7e>
 800aa5c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800aa60:	42be      	cmp	r6, r7
 800aa62:	d923      	bls.n	800aaac <ucdr_deserialize_int16_t+0x74>
 800aa64:	6923      	ldr	r3, [r4, #16]
 800aa66:	60a6      	str	r6, [r4, #8]
 800aa68:	1bf6      	subs	r6, r6, r7
 800aa6a:	4433      	add	r3, r6
 800aa6c:	f1c6 0902 	rsb	r9, r6, #2
 800aa70:	6123      	str	r3, [r4, #16]
 800aa72:	4649      	mov	r1, r9
 800aa74:	4620      	mov	r0, r4
 800aa76:	f000 f987 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d034      	beq.n	800aae8 <ucdr_deserialize_int16_t+0xb0>
 800aa7e:	7d23      	ldrb	r3, [r4, #20]
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d042      	beq.n	800ab0a <ucdr_deserialize_int16_t+0xd2>
 800aa84:	787b      	ldrb	r3, [r7, #1]
 800aa86:	702b      	strb	r3, [r5, #0]
 800aa88:	2e00      	cmp	r6, #0
 800aa8a:	d03a      	beq.n	800ab02 <ucdr_deserialize_int16_t+0xca>
 800aa8c:	783b      	ldrb	r3, [r7, #0]
 800aa8e:	706b      	strb	r3, [r5, #1]
 800aa90:	6923      	ldr	r3, [r4, #16]
 800aa92:	68a2      	ldr	r2, [r4, #8]
 800aa94:	7da0      	ldrb	r0, [r4, #22]
 800aa96:	2102      	movs	r1, #2
 800aa98:	3302      	adds	r3, #2
 800aa9a:	444a      	add	r2, r9
 800aa9c:	1b9b      	subs	r3, r3, r6
 800aa9e:	7561      	strb	r1, [r4, #21]
 800aaa0:	60a2      	str	r2, [r4, #8]
 800aaa2:	6123      	str	r3, [r4, #16]
 800aaa4:	f080 0001 	eor.w	r0, r0, #1
 800aaa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaac:	2102      	movs	r1, #2
 800aaae:	4620      	mov	r0, r4
 800aab0:	f000 f96a 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800aab4:	b180      	cbz	r0, 800aad8 <ucdr_deserialize_int16_t+0xa0>
 800aab6:	7d23      	ldrb	r3, [r4, #20]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	68a3      	ldr	r3, [r4, #8]
 800aabc:	d011      	beq.n	800aae2 <ucdr_deserialize_int16_t+0xaa>
 800aabe:	785b      	ldrb	r3, [r3, #1]
 800aac0:	702b      	strb	r3, [r5, #0]
 800aac2:	68a3      	ldr	r3, [r4, #8]
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	706b      	strb	r3, [r5, #1]
 800aac8:	68a2      	ldr	r2, [r4, #8]
 800aaca:	6923      	ldr	r3, [r4, #16]
 800aacc:	3202      	adds	r2, #2
 800aace:	3302      	adds	r3, #2
 800aad0:	2102      	movs	r1, #2
 800aad2:	60a2      	str	r2, [r4, #8]
 800aad4:	6123      	str	r3, [r4, #16]
 800aad6:	7561      	strb	r1, [r4, #21]
 800aad8:	7da0      	ldrb	r0, [r4, #22]
 800aada:	f080 0001 	eor.w	r0, r0, #1
 800aade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aae2:	881b      	ldrh	r3, [r3, #0]
 800aae4:	802b      	strh	r3, [r5, #0]
 800aae6:	e7ef      	b.n	800aac8 <ucdr_deserialize_int16_t+0x90>
 800aae8:	68a2      	ldr	r2, [r4, #8]
 800aaea:	6923      	ldr	r3, [r4, #16]
 800aaec:	7da0      	ldrb	r0, [r4, #22]
 800aaee:	f884 8015 	strb.w	r8, [r4, #21]
 800aaf2:	1b92      	subs	r2, r2, r6
 800aaf4:	1b9b      	subs	r3, r3, r6
 800aaf6:	60a2      	str	r2, [r4, #8]
 800aaf8:	6123      	str	r3, [r4, #16]
 800aafa:	f080 0001 	eor.w	r0, r0, #1
 800aafe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab02:	68a3      	ldr	r3, [r4, #8]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	706b      	strb	r3, [r5, #1]
 800ab08:	e7c2      	b.n	800aa90 <ucdr_deserialize_int16_t+0x58>
 800ab0a:	4639      	mov	r1, r7
 800ab0c:	4632      	mov	r2, r6
 800ab0e:	4628      	mov	r0, r5
 800ab10:	f007 fdad 	bl	801266e <memcpy>
 800ab14:	68a1      	ldr	r1, [r4, #8]
 800ab16:	464a      	mov	r2, r9
 800ab18:	19a8      	adds	r0, r5, r6
 800ab1a:	f007 fda8 	bl	801266e <memcpy>
 800ab1e:	e7b7      	b.n	800aa90 <ucdr_deserialize_int16_t+0x58>

0800ab20 <ucdr_serialize_int32_t>:
 800ab20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab24:	b082      	sub	sp, #8
 800ab26:	4604      	mov	r4, r0
 800ab28:	9101      	str	r1, [sp, #4]
 800ab2a:	2104      	movs	r1, #4
 800ab2c:	f000 f980 	bl	800ae30 <ucdr_buffer_alignment>
 800ab30:	4601      	mov	r1, r0
 800ab32:	4620      	mov	r0, r4
 800ab34:	7d67      	ldrb	r7, [r4, #21]
 800ab36:	f000 f9bf 	bl	800aeb8 <ucdr_advance_buffer>
 800ab3a:	2104      	movs	r1, #4
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f000 f917 	bl	800ad70 <ucdr_check_buffer_available_for>
 800ab42:	2800      	cmp	r0, #0
 800ab44:	d139      	bne.n	800abba <ucdr_serialize_int32_t+0x9a>
 800ab46:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ab4a:	42ab      	cmp	r3, r5
 800ab4c:	d930      	bls.n	800abb0 <ucdr_serialize_int32_t+0x90>
 800ab4e:	1b5e      	subs	r6, r3, r5
 800ab50:	60a3      	str	r3, [r4, #8]
 800ab52:	6923      	ldr	r3, [r4, #16]
 800ab54:	f1c6 0804 	rsb	r8, r6, #4
 800ab58:	4433      	add	r3, r6
 800ab5a:	6123      	str	r3, [r4, #16]
 800ab5c:	4641      	mov	r1, r8
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f000 f912 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	d04c      	beq.n	800ac02 <ucdr_serialize_int32_t+0xe2>
 800ab68:	7d23      	ldrb	r3, [r4, #20]
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d063      	beq.n	800ac36 <ucdr_serialize_int32_t+0x116>
 800ab6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ab72:	702b      	strb	r3, [r5, #0]
 800ab74:	2e00      	cmp	r6, #0
 800ab76:	d051      	beq.n	800ac1c <ucdr_serialize_int32_t+0xfc>
 800ab78:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ab7c:	706b      	strb	r3, [r5, #1]
 800ab7e:	2e01      	cmp	r6, #1
 800ab80:	d050      	beq.n	800ac24 <ucdr_serialize_int32_t+0x104>
 800ab82:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ab86:	70ab      	strb	r3, [r5, #2]
 800ab88:	2e02      	cmp	r6, #2
 800ab8a:	d04f      	beq.n	800ac2c <ucdr_serialize_int32_t+0x10c>
 800ab8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ab90:	70eb      	strb	r3, [r5, #3]
 800ab92:	6923      	ldr	r3, [r4, #16]
 800ab94:	68a2      	ldr	r2, [r4, #8]
 800ab96:	7da0      	ldrb	r0, [r4, #22]
 800ab98:	3304      	adds	r3, #4
 800ab9a:	1b9e      	subs	r6, r3, r6
 800ab9c:	4442      	add	r2, r8
 800ab9e:	2304      	movs	r3, #4
 800aba0:	f080 0001 	eor.w	r0, r0, #1
 800aba4:	60a2      	str	r2, [r4, #8]
 800aba6:	6126      	str	r6, [r4, #16]
 800aba8:	7563      	strb	r3, [r4, #21]
 800abaa:	b002      	add	sp, #8
 800abac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abb0:	2104      	movs	r1, #4
 800abb2:	4620      	mov	r0, r4
 800abb4:	f000 f8e8 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800abb8:	b1d0      	cbz	r0, 800abf0 <ucdr_serialize_int32_t+0xd0>
 800abba:	7d23      	ldrb	r3, [r4, #20]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	68a3      	ldr	r3, [r4, #8]
 800abc0:	d01c      	beq.n	800abfc <ucdr_serialize_int32_t+0xdc>
 800abc2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800abc6:	701a      	strb	r2, [r3, #0]
 800abc8:	68a3      	ldr	r3, [r4, #8]
 800abca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800abce:	705a      	strb	r2, [r3, #1]
 800abd0:	68a3      	ldr	r3, [r4, #8]
 800abd2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800abd6:	709a      	strb	r2, [r3, #2]
 800abd8:	68a3      	ldr	r3, [r4, #8]
 800abda:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800abde:	70da      	strb	r2, [r3, #3]
 800abe0:	68a2      	ldr	r2, [r4, #8]
 800abe2:	6923      	ldr	r3, [r4, #16]
 800abe4:	3204      	adds	r2, #4
 800abe6:	3304      	adds	r3, #4
 800abe8:	2104      	movs	r1, #4
 800abea:	60a2      	str	r2, [r4, #8]
 800abec:	6123      	str	r3, [r4, #16]
 800abee:	7561      	strb	r1, [r4, #21]
 800abf0:	7da0      	ldrb	r0, [r4, #22]
 800abf2:	f080 0001 	eor.w	r0, r0, #1
 800abf6:	b002      	add	sp, #8
 800abf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abfc:	9a01      	ldr	r2, [sp, #4]
 800abfe:	601a      	str	r2, [r3, #0]
 800ac00:	e7ee      	b.n	800abe0 <ucdr_serialize_int32_t+0xc0>
 800ac02:	68a2      	ldr	r2, [r4, #8]
 800ac04:	6923      	ldr	r3, [r4, #16]
 800ac06:	7da0      	ldrb	r0, [r4, #22]
 800ac08:	7567      	strb	r7, [r4, #21]
 800ac0a:	1b92      	subs	r2, r2, r6
 800ac0c:	1b9b      	subs	r3, r3, r6
 800ac0e:	f080 0001 	eor.w	r0, r0, #1
 800ac12:	60a2      	str	r2, [r4, #8]
 800ac14:	6123      	str	r3, [r4, #16]
 800ac16:	b002      	add	sp, #8
 800ac18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac1c:	68a3      	ldr	r3, [r4, #8]
 800ac1e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ac22:	701a      	strb	r2, [r3, #0]
 800ac24:	68a3      	ldr	r3, [r4, #8]
 800ac26:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ac2a:	701a      	strb	r2, [r3, #0]
 800ac2c:	68a3      	ldr	r3, [r4, #8]
 800ac2e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ac32:	701a      	strb	r2, [r3, #0]
 800ac34:	e7ad      	b.n	800ab92 <ucdr_serialize_int32_t+0x72>
 800ac36:	4628      	mov	r0, r5
 800ac38:	ad01      	add	r5, sp, #4
 800ac3a:	4629      	mov	r1, r5
 800ac3c:	4632      	mov	r2, r6
 800ac3e:	f007 fd16 	bl	801266e <memcpy>
 800ac42:	68a0      	ldr	r0, [r4, #8]
 800ac44:	4642      	mov	r2, r8
 800ac46:	19a9      	adds	r1, r5, r6
 800ac48:	f007 fd11 	bl	801266e <memcpy>
 800ac4c:	e7a1      	b.n	800ab92 <ucdr_serialize_int32_t+0x72>
 800ac4e:	bf00      	nop

0800ac50 <ucdr_deserialize_int32_t>:
 800ac50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac54:	460d      	mov	r5, r1
 800ac56:	2104      	movs	r1, #4
 800ac58:	4604      	mov	r4, r0
 800ac5a:	f000 f8e9 	bl	800ae30 <ucdr_buffer_alignment>
 800ac5e:	4601      	mov	r1, r0
 800ac60:	4620      	mov	r0, r4
 800ac62:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ac66:	f000 f927 	bl	800aeb8 <ucdr_advance_buffer>
 800ac6a:	2104      	movs	r1, #4
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	f000 f87f 	bl	800ad70 <ucdr_check_buffer_available_for>
 800ac72:	2800      	cmp	r0, #0
 800ac74:	d138      	bne.n	800ace8 <ucdr_deserialize_int32_t+0x98>
 800ac76:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ac7a:	42b7      	cmp	r7, r6
 800ac7c:	d92f      	bls.n	800acde <ucdr_deserialize_int32_t+0x8e>
 800ac7e:	6923      	ldr	r3, [r4, #16]
 800ac80:	60a7      	str	r7, [r4, #8]
 800ac82:	1bbf      	subs	r7, r7, r6
 800ac84:	443b      	add	r3, r7
 800ac86:	f1c7 0904 	rsb	r9, r7, #4
 800ac8a:	6123      	str	r3, [r4, #16]
 800ac8c:	4649      	mov	r1, r9
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f000 f87a 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d046      	beq.n	800ad26 <ucdr_deserialize_int32_t+0xd6>
 800ac98:	7d23      	ldrb	r3, [r4, #20]
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d05c      	beq.n	800ad58 <ucdr_deserialize_int32_t+0x108>
 800ac9e:	78f3      	ldrb	r3, [r6, #3]
 800aca0:	702b      	strb	r3, [r5, #0]
 800aca2:	2f00      	cmp	r7, #0
 800aca4:	d04c      	beq.n	800ad40 <ucdr_deserialize_int32_t+0xf0>
 800aca6:	78b3      	ldrb	r3, [r6, #2]
 800aca8:	706b      	strb	r3, [r5, #1]
 800acaa:	2f01      	cmp	r7, #1
 800acac:	f105 0302 	add.w	r3, r5, #2
 800acb0:	d04a      	beq.n	800ad48 <ucdr_deserialize_int32_t+0xf8>
 800acb2:	7873      	ldrb	r3, [r6, #1]
 800acb4:	70ab      	strb	r3, [r5, #2]
 800acb6:	2f02      	cmp	r7, #2
 800acb8:	f105 0303 	add.w	r3, r5, #3
 800acbc:	d048      	beq.n	800ad50 <ucdr_deserialize_int32_t+0x100>
 800acbe:	7833      	ldrb	r3, [r6, #0]
 800acc0:	70eb      	strb	r3, [r5, #3]
 800acc2:	6923      	ldr	r3, [r4, #16]
 800acc4:	68a2      	ldr	r2, [r4, #8]
 800acc6:	7da0      	ldrb	r0, [r4, #22]
 800acc8:	2104      	movs	r1, #4
 800acca:	3304      	adds	r3, #4
 800accc:	444a      	add	r2, r9
 800acce:	1bdb      	subs	r3, r3, r7
 800acd0:	7561      	strb	r1, [r4, #21]
 800acd2:	60a2      	str	r2, [r4, #8]
 800acd4:	6123      	str	r3, [r4, #16]
 800acd6:	f080 0001 	eor.w	r0, r0, #1
 800acda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acde:	2104      	movs	r1, #4
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 f851 	bl	800ad88 <ucdr_check_final_buffer_behavior>
 800ace6:	b1b0      	cbz	r0, 800ad16 <ucdr_deserialize_int32_t+0xc6>
 800ace8:	7d23      	ldrb	r3, [r4, #20]
 800acea:	2b01      	cmp	r3, #1
 800acec:	68a3      	ldr	r3, [r4, #8]
 800acee:	d017      	beq.n	800ad20 <ucdr_deserialize_int32_t+0xd0>
 800acf0:	78db      	ldrb	r3, [r3, #3]
 800acf2:	702b      	strb	r3, [r5, #0]
 800acf4:	68a3      	ldr	r3, [r4, #8]
 800acf6:	789b      	ldrb	r3, [r3, #2]
 800acf8:	706b      	strb	r3, [r5, #1]
 800acfa:	68a3      	ldr	r3, [r4, #8]
 800acfc:	785b      	ldrb	r3, [r3, #1]
 800acfe:	70ab      	strb	r3, [r5, #2]
 800ad00:	68a3      	ldr	r3, [r4, #8]
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	70eb      	strb	r3, [r5, #3]
 800ad06:	68a2      	ldr	r2, [r4, #8]
 800ad08:	6923      	ldr	r3, [r4, #16]
 800ad0a:	3204      	adds	r2, #4
 800ad0c:	3304      	adds	r3, #4
 800ad0e:	2104      	movs	r1, #4
 800ad10:	60a2      	str	r2, [r4, #8]
 800ad12:	6123      	str	r3, [r4, #16]
 800ad14:	7561      	strb	r1, [r4, #21]
 800ad16:	7da0      	ldrb	r0, [r4, #22]
 800ad18:	f080 0001 	eor.w	r0, r0, #1
 800ad1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	602b      	str	r3, [r5, #0]
 800ad24:	e7ef      	b.n	800ad06 <ucdr_deserialize_int32_t+0xb6>
 800ad26:	68a2      	ldr	r2, [r4, #8]
 800ad28:	6923      	ldr	r3, [r4, #16]
 800ad2a:	7da0      	ldrb	r0, [r4, #22]
 800ad2c:	f884 8015 	strb.w	r8, [r4, #21]
 800ad30:	1bd2      	subs	r2, r2, r7
 800ad32:	1bdb      	subs	r3, r3, r7
 800ad34:	60a2      	str	r2, [r4, #8]
 800ad36:	6123      	str	r3, [r4, #16]
 800ad38:	f080 0001 	eor.w	r0, r0, #1
 800ad3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad40:	68a3      	ldr	r3, [r4, #8]
 800ad42:	789b      	ldrb	r3, [r3, #2]
 800ad44:	706b      	strb	r3, [r5, #1]
 800ad46:	1cab      	adds	r3, r5, #2
 800ad48:	68a2      	ldr	r2, [r4, #8]
 800ad4a:	7852      	ldrb	r2, [r2, #1]
 800ad4c:	f803 2b01 	strb.w	r2, [r3], #1
 800ad50:	68a2      	ldr	r2, [r4, #8]
 800ad52:	7812      	ldrb	r2, [r2, #0]
 800ad54:	701a      	strb	r2, [r3, #0]
 800ad56:	e7b4      	b.n	800acc2 <ucdr_deserialize_int32_t+0x72>
 800ad58:	4631      	mov	r1, r6
 800ad5a:	463a      	mov	r2, r7
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	f007 fc86 	bl	801266e <memcpy>
 800ad62:	68a1      	ldr	r1, [r4, #8]
 800ad64:	464a      	mov	r2, r9
 800ad66:	19e8      	adds	r0, r5, r7
 800ad68:	f007 fc81 	bl	801266e <memcpy>
 800ad6c:	e7a9      	b.n	800acc2 <ucdr_deserialize_int32_t+0x72>
 800ad6e:	bf00      	nop

0800ad70 <ucdr_check_buffer_available_for>:
 800ad70:	7d83      	ldrb	r3, [r0, #22]
 800ad72:	b93b      	cbnz	r3, 800ad84 <ucdr_check_buffer_available_for+0x14>
 800ad74:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800ad78:	4419      	add	r1, r3
 800ad7a:	4288      	cmp	r0, r1
 800ad7c:	bf34      	ite	cc
 800ad7e:	2000      	movcc	r0, #0
 800ad80:	2001      	movcs	r0, #1
 800ad82:	4770      	bx	lr
 800ad84:	2000      	movs	r0, #0
 800ad86:	4770      	bx	lr

0800ad88 <ucdr_check_final_buffer_behavior>:
 800ad88:	7d83      	ldrb	r3, [r0, #22]
 800ad8a:	b943      	cbnz	r3, 800ad9e <ucdr_check_final_buffer_behavior+0x16>
 800ad8c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800ad90:	4291      	cmp	r1, r2
 800ad92:	b510      	push	{r4, lr}
 800ad94:	4604      	mov	r4, r0
 800ad96:	d205      	bcs.n	800ada4 <ucdr_check_final_buffer_behavior+0x1c>
 800ad98:	2301      	movs	r3, #1
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	bd10      	pop	{r4, pc}
 800ad9e:	2300      	movs	r3, #0
 800ada0:	4618      	mov	r0, r3
 800ada2:	4770      	bx	lr
 800ada4:	6982      	ldr	r2, [r0, #24]
 800ada6:	b13a      	cbz	r2, 800adb8 <ucdr_check_final_buffer_behavior+0x30>
 800ada8:	69c1      	ldr	r1, [r0, #28]
 800adaa:	4790      	blx	r2
 800adac:	f080 0301 	eor.w	r3, r0, #1
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	75a0      	strb	r0, [r4, #22]
 800adb4:	4618      	mov	r0, r3
 800adb6:	bd10      	pop	{r4, pc}
 800adb8:	2001      	movs	r0, #1
 800adba:	75a0      	strb	r0, [r4, #22]
 800adbc:	e7fa      	b.n	800adb4 <ucdr_check_final_buffer_behavior+0x2c>
 800adbe:	bf00      	nop

0800adc0 <ucdr_set_on_full_buffer_callback>:
 800adc0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop

0800adc8 <ucdr_init_buffer_origin_offset_endian>:
 800adc8:	b410      	push	{r4}
 800adca:	9c01      	ldr	r4, [sp, #4]
 800adcc:	6001      	str	r1, [r0, #0]
 800adce:	440a      	add	r2, r1
 800add0:	6042      	str	r2, [r0, #4]
 800add2:	190a      	adds	r2, r1, r4
 800add4:	441c      	add	r4, r3
 800add6:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800adda:	6082      	str	r2, [r0, #8]
 800addc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ade0:	7503      	strb	r3, [r0, #20]
 800ade2:	2200      	movs	r2, #0
 800ade4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800ade8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adec:	7542      	strb	r2, [r0, #21]
 800adee:	7582      	strb	r2, [r0, #22]
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop

0800adf4 <ucdr_init_buffer_origin_offset>:
 800adf4:	b510      	push	{r4, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	9c04      	ldr	r4, [sp, #16]
 800adfa:	9400      	str	r4, [sp, #0]
 800adfc:	2401      	movs	r4, #1
 800adfe:	9401      	str	r4, [sp, #4]
 800ae00:	f7ff ffe2 	bl	800adc8 <ucdr_init_buffer_origin_offset_endian>
 800ae04:	b002      	add	sp, #8
 800ae06:	bd10      	pop	{r4, pc}

0800ae08 <ucdr_init_buffer_origin>:
 800ae08:	b510      	push	{r4, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	2400      	movs	r4, #0
 800ae0e:	9400      	str	r4, [sp, #0]
 800ae10:	f7ff fff0 	bl	800adf4 <ucdr_init_buffer_origin_offset>
 800ae14:	b002      	add	sp, #8
 800ae16:	bd10      	pop	{r4, pc}

0800ae18 <ucdr_init_buffer>:
 800ae18:	2300      	movs	r3, #0
 800ae1a:	f7ff bff5 	b.w	800ae08 <ucdr_init_buffer_origin>
 800ae1e:	bf00      	nop

0800ae20 <ucdr_alignment>:
 800ae20:	fbb0 f3f1 	udiv	r3, r0, r1
 800ae24:	fb03 0011 	mls	r0, r3, r1, r0
 800ae28:	1a08      	subs	r0, r1, r0
 800ae2a:	3901      	subs	r1, #1
 800ae2c:	4008      	ands	r0, r1
 800ae2e:	4770      	bx	lr

0800ae30 <ucdr_buffer_alignment>:
 800ae30:	7d43      	ldrb	r3, [r0, #21]
 800ae32:	428b      	cmp	r3, r1
 800ae34:	d208      	bcs.n	800ae48 <ucdr_buffer_alignment+0x18>
 800ae36:	6900      	ldr	r0, [r0, #16]
 800ae38:	fbb0 f3f1 	udiv	r3, r0, r1
 800ae3c:	fb01 0013 	mls	r0, r1, r3, r0
 800ae40:	1a08      	subs	r0, r1, r0
 800ae42:	3901      	subs	r1, #1
 800ae44:	4008      	ands	r0, r1
 800ae46:	4770      	bx	lr
 800ae48:	2000      	movs	r0, #0
 800ae4a:	4770      	bx	lr

0800ae4c <ucdr_align_to>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	4604      	mov	r4, r0
 800ae50:	460d      	mov	r5, r1
 800ae52:	f7ff ffed 	bl	800ae30 <ucdr_buffer_alignment>
 800ae56:	68a3      	ldr	r3, [r4, #8]
 800ae58:	6921      	ldr	r1, [r4, #16]
 800ae5a:	7565      	strb	r5, [r4, #21]
 800ae5c:	181a      	adds	r2, r3, r0
 800ae5e:	6863      	ldr	r3, [r4, #4]
 800ae60:	4293      	cmp	r3, r2
 800ae62:	4408      	add	r0, r1
 800ae64:	bf28      	it	cs
 800ae66:	4613      	movcs	r3, r2
 800ae68:	6120      	str	r0, [r4, #16]
 800ae6a:	60a3      	str	r3, [r4, #8]
 800ae6c:	bd38      	pop	{r3, r4, r5, pc}
 800ae6e:	bf00      	nop

0800ae70 <ucdr_buffer_length>:
 800ae70:	6882      	ldr	r2, [r0, #8]
 800ae72:	6800      	ldr	r0, [r0, #0]
 800ae74:	1a10      	subs	r0, r2, r0
 800ae76:	4770      	bx	lr

0800ae78 <ucdr_buffer_remaining>:
 800ae78:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800ae7c:	1a10      	subs	r0, r2, r0
 800ae7e:	4770      	bx	lr

0800ae80 <ucdr_check_final_buffer_behavior_array>:
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	7d83      	ldrb	r3, [r0, #22]
 800ae84:	b963      	cbnz	r3, 800aea0 <ucdr_check_final_buffer_behavior_array+0x20>
 800ae86:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	460d      	mov	r5, r1
 800ae90:	d308      	bcc.n	800aea4 <ucdr_check_final_buffer_behavior_array+0x24>
 800ae92:	b139      	cbz	r1, 800aea4 <ucdr_check_final_buffer_behavior_array+0x24>
 800ae94:	6983      	ldr	r3, [r0, #24]
 800ae96:	b163      	cbz	r3, 800aeb2 <ucdr_check_final_buffer_behavior_array+0x32>
 800ae98:	69c1      	ldr	r1, [r0, #28]
 800ae9a:	4798      	blx	r3
 800ae9c:	75a0      	strb	r0, [r4, #22]
 800ae9e:	b108      	cbz	r0, 800aea4 <ucdr_check_final_buffer_behavior_array+0x24>
 800aea0:	2000      	movs	r0, #0
 800aea2:	bd38      	pop	{r3, r4, r5, pc}
 800aea4:	4620      	mov	r0, r4
 800aea6:	f7ff ffe7 	bl	800ae78 <ucdr_buffer_remaining>
 800aeaa:	42a8      	cmp	r0, r5
 800aeac:	bf28      	it	cs
 800aeae:	4628      	movcs	r0, r5
 800aeb0:	bd38      	pop	{r3, r4, r5, pc}
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	7583      	strb	r3, [r0, #22]
 800aeb6:	e7f3      	b.n	800aea0 <ucdr_check_final_buffer_behavior_array+0x20>

0800aeb8 <ucdr_advance_buffer>:
 800aeb8:	b538      	push	{r3, r4, r5, lr}
 800aeba:	4604      	mov	r4, r0
 800aebc:	460d      	mov	r5, r1
 800aebe:	f7ff ff57 	bl	800ad70 <ucdr_check_buffer_available_for>
 800aec2:	b178      	cbz	r0, 800aee4 <ucdr_advance_buffer+0x2c>
 800aec4:	6923      	ldr	r3, [r4, #16]
 800aec6:	68a2      	ldr	r2, [r4, #8]
 800aec8:	442b      	add	r3, r5
 800aeca:	6123      	str	r3, [r4, #16]
 800aecc:	2301      	movs	r3, #1
 800aece:	442a      	add	r2, r5
 800aed0:	7563      	strb	r3, [r4, #21]
 800aed2:	60a2      	str	r2, [r4, #8]
 800aed4:	bd38      	pop	{r3, r4, r5, pc}
 800aed6:	68a2      	ldr	r2, [r4, #8]
 800aed8:	6923      	ldr	r3, [r4, #16]
 800aeda:	4402      	add	r2, r0
 800aedc:	4403      	add	r3, r0
 800aede:	1a2d      	subs	r5, r5, r0
 800aee0:	60a2      	str	r2, [r4, #8]
 800aee2:	6123      	str	r3, [r4, #16]
 800aee4:	4629      	mov	r1, r5
 800aee6:	2201      	movs	r2, #1
 800aee8:	4620      	mov	r0, r4
 800aeea:	f7ff ffc9 	bl	800ae80 <ucdr_check_final_buffer_behavior_array>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d1f1      	bne.n	800aed6 <ucdr_advance_buffer+0x1e>
 800aef2:	2301      	movs	r3, #1
 800aef4:	7563      	strb	r3, [r4, #21]
 800aef6:	bd38      	pop	{r3, r4, r5, pc}

0800aef8 <uxr_buffer_delete_entity>:
 800aef8:	b510      	push	{r4, lr}
 800aefa:	2300      	movs	r3, #0
 800aefc:	b08e      	sub	sp, #56	; 0x38
 800aefe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800af02:	2303      	movs	r3, #3
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	2204      	movs	r2, #4
 800af08:	ab06      	add	r3, sp, #24
 800af0a:	4604      	mov	r4, r0
 800af0c:	9103      	str	r1, [sp, #12]
 800af0e:	f001 f86f 	bl	800bff0 <uxr_prepare_stream_to_write_submessage>
 800af12:	b918      	cbnz	r0, 800af1c <uxr_buffer_delete_entity+0x24>
 800af14:	4604      	mov	r4, r0
 800af16:	4620      	mov	r0, r4
 800af18:	b00e      	add	sp, #56	; 0x38
 800af1a:	bd10      	pop	{r4, pc}
 800af1c:	9902      	ldr	r1, [sp, #8]
 800af1e:	aa05      	add	r2, sp, #20
 800af20:	4620      	mov	r0, r4
 800af22:	f001 f99b 	bl	800c25c <uxr_init_base_object_request>
 800af26:	a905      	add	r1, sp, #20
 800af28:	4604      	mov	r4, r0
 800af2a:	a806      	add	r0, sp, #24
 800af2c:	f002 fb00 	bl	800d530 <uxr_serialize_DELETE_Payload>
 800af30:	4620      	mov	r0, r4
 800af32:	b00e      	add	sp, #56	; 0x38
 800af34:	bd10      	pop	{r4, pc}
 800af36:	bf00      	nop

0800af38 <uxr_common_create_entity>:
 800af38:	b510      	push	{r4, lr}
 800af3a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800af3e:	b08c      	sub	sp, #48	; 0x30
 800af40:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800af44:	f1bc 0f01 	cmp.w	ip, #1
 800af48:	bf0c      	ite	eq
 800af4a:	f003 0201 	andeq.w	r2, r3, #1
 800af4e:	2200      	movne	r2, #0
 800af50:	330e      	adds	r3, #14
 800af52:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800af56:	9101      	str	r1, [sp, #4]
 800af58:	441a      	add	r2, r3
 800af5a:	2301      	movs	r3, #1
 800af5c:	9300      	str	r3, [sp, #0]
 800af5e:	9903      	ldr	r1, [sp, #12]
 800af60:	ab04      	add	r3, sp, #16
 800af62:	b292      	uxth	r2, r2
 800af64:	4604      	mov	r4, r0
 800af66:	f001 f843 	bl	800bff0 <uxr_prepare_stream_to_write_submessage>
 800af6a:	b918      	cbnz	r0, 800af74 <uxr_common_create_entity+0x3c>
 800af6c:	4604      	mov	r4, r0
 800af6e:	4620      	mov	r0, r4
 800af70:	b00c      	add	sp, #48	; 0x30
 800af72:	bd10      	pop	{r4, pc}
 800af74:	9902      	ldr	r1, [sp, #8]
 800af76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af78:	4620      	mov	r0, r4
 800af7a:	f001 f96f 	bl	800c25c <uxr_init_base_object_request>
 800af7e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800af80:	4604      	mov	r4, r0
 800af82:	a804      	add	r0, sp, #16
 800af84:	f002 fa30 	bl	800d3e8 <uxr_serialize_CREATE_Payload>
 800af88:	4620      	mov	r0, r4
 800af8a:	b00c      	add	sp, #48	; 0x30
 800af8c:	bd10      	pop	{r4, pc}
 800af8e:	bf00      	nop

0800af90 <uxr_buffer_create_participant_bin>:
 800af90:	b570      	push	{r4, r5, r6, lr}
 800af92:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800af96:	ac11      	add	r4, sp, #68	; 0x44
 800af98:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800af9c:	2303      	movs	r3, #3
 800af9e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800afa2:	7223      	strb	r3, [r4, #8]
 800afa4:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800afa6:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800afaa:	2201      	movs	r2, #1
 800afac:	2100      	movs	r1, #0
 800afae:	4605      	mov	r5, r0
 800afb0:	7122      	strb	r2, [r4, #4]
 800afb2:	f88d 1014 	strb.w	r1, [sp, #20]
 800afb6:	b1cb      	cbz	r3, 800afec <uxr_buffer_create_participant_bin+0x5c>
 800afb8:	f88d 201c 	strb.w	r2, [sp, #28]
 800afbc:	9308      	str	r3, [sp, #32]
 800afbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afc2:	a915      	add	r1, sp, #84	; 0x54
 800afc4:	a809      	add	r0, sp, #36	; 0x24
 800afc6:	f7ff ff27 	bl	800ae18 <ucdr_init_buffer>
 800afca:	a905      	add	r1, sp, #20
 800afcc:	a809      	add	r0, sp, #36	; 0x24
 800afce:	f001 fed9 	bl	800cd84 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800afd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afd4:	9600      	str	r6, [sp, #0]
 800afd6:	9401      	str	r4, [sp, #4]
 800afd8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800afdc:	60e3      	str	r3, [r4, #12]
 800afde:	4628      	mov	r0, r5
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	f7ff ffa9 	bl	800af38 <uxr_common_create_entity>
 800afe6:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800afea:	bd70      	pop	{r4, r5, r6, pc}
 800afec:	f88d 301c 	strb.w	r3, [sp, #28]
 800aff0:	e7e5      	b.n	800afbe <uxr_buffer_create_participant_bin+0x2e>
 800aff2:	bf00      	nop

0800aff4 <uxr_buffer_create_topic_bin>:
 800aff4:	b570      	push	{r4, r5, r6, lr}
 800aff6:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800affa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800affe:	9105      	str	r1, [sp, #20]
 800b000:	4605      	mov	r5, r0
 800b002:	a997      	add	r1, sp, #604	; 0x25c
 800b004:	4618      	mov	r0, r3
 800b006:	2302      	movs	r3, #2
 800b008:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800b00c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800b010:	f000 f8ee 	bl	800b1f0 <uxr_object_id_to_raw>
 800b014:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800b016:	9306      	str	r3, [sp, #24]
 800b018:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800b01a:	930a      	str	r3, [sp, #40]	; 0x28
 800b01c:	2303      	movs	r3, #3
 800b01e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800b022:	2301      	movs	r3, #1
 800b024:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b028:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b02c:	a917      	add	r1, sp, #92	; 0x5c
 800b02e:	2300      	movs	r3, #0
 800b030:	a80b      	add	r0, sp, #44	; 0x2c
 800b032:	f88d 301c 	strb.w	r3, [sp, #28]
 800b036:	f7ff feef 	bl	800ae18 <ucdr_init_buffer>
 800b03a:	a906      	add	r1, sp, #24
 800b03c:	a80b      	add	r0, sp, #44	; 0x2c
 800b03e:	f001 fec3 	bl	800cdc8 <uxr_serialize_OBJK_Topic_Binary>
 800b042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b044:	9316      	str	r3, [sp, #88]	; 0x58
 800b046:	ac13      	add	r4, sp, #76	; 0x4c
 800b048:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b04c:	9600      	str	r6, [sp, #0]
 800b04e:	9401      	str	r4, [sp, #4]
 800b050:	b29b      	uxth	r3, r3
 800b052:	4628      	mov	r0, r5
 800b054:	f7ff ff70 	bl	800af38 <uxr_common_create_entity>
 800b058:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800b05c:	bd70      	pop	{r4, r5, r6, pc}
 800b05e:	bf00      	nop

0800b060 <uxr_buffer_create_publisher_bin>:
 800b060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b062:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800b066:	4605      	mov	r5, r0
 800b068:	9105      	str	r1, [sp, #20]
 800b06a:	4618      	mov	r0, r3
 800b06c:	2603      	movs	r6, #3
 800b06e:	a992      	add	r1, sp, #584	; 0x248
 800b070:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b074:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800b078:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800b07c:	f000 f8b8 	bl	800b1f0 <uxr_object_id_to_raw>
 800b080:	2300      	movs	r3, #0
 800b082:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b086:	a912      	add	r1, sp, #72	; 0x48
 800b088:	a806      	add	r0, sp, #24
 800b08a:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800b08e:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800b092:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800b096:	f7ff febf 	bl	800ae18 <ucdr_init_buffer>
 800b09a:	a993      	add	r1, sp, #588	; 0x24c
 800b09c:	a806      	add	r0, sp, #24
 800b09e:	f001 ff47 	bl	800cf30 <uxr_serialize_OBJK_Publisher_Binary>
 800b0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0a4:	9311      	str	r3, [sp, #68]	; 0x44
 800b0a6:	ac0e      	add	r4, sp, #56	; 0x38
 800b0a8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b0ac:	9700      	str	r7, [sp, #0]
 800b0ae:	9401      	str	r4, [sp, #4]
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	f7ff ff40 	bl	800af38 <uxr_common_create_entity>
 800b0b8:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800b0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0be:	bf00      	nop

0800b0c0 <uxr_buffer_create_datawriter_bin>:
 800b0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c4:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b0c8:	ac1d      	add	r4, sp, #116	; 0x74
 800b0ca:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b0ce:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800b0d2:	9105      	str	r1, [sp, #20]
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	a9a1      	add	r1, sp, #644	; 0x284
 800b0d8:	4618      	mov	r0, r3
 800b0da:	2305      	movs	r3, #5
 800b0dc:	7123      	strb	r3, [r4, #4]
 800b0de:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800b0e2:	2703      	movs	r7, #3
 800b0e4:	f000 f884 	bl	800b1f0 <uxr_object_id_to_raw>
 800b0e8:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800b0ea:	7227      	strb	r7, [r4, #8]
 800b0ec:	a90e      	add	r1, sp, #56	; 0x38
 800b0ee:	f000 f87f 	bl	800b1f0 <uxr_object_id_to_raw>
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800b0f8:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800b0fc:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800b100:	3d00      	subs	r5, #0
 800b102:	bf18      	it	ne
 800b104:	2501      	movne	r5, #1
 800b106:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800b10a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800b10e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800b112:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800b116:	2301      	movs	r3, #1
 800b118:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800b11c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800b120:	bb8a      	cbnz	r2, 800b186 <uxr_buffer_create_datawriter_bin+0xc6>
 800b122:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800b126:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800b12a:	f04f 0c13 	mov.w	ip, #19
 800b12e:	250b      	movs	r5, #11
 800b130:	2221      	movs	r2, #33	; 0x21
 800b132:	2111      	movs	r1, #17
 800b134:	2009      	movs	r0, #9
 800b136:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800b13a:	b923      	cbnz	r3, 800b146 <uxr_buffer_create_datawriter_bin+0x86>
 800b13c:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800b140:	4672      	mov	r2, lr
 800b142:	4661      	mov	r1, ip
 800b144:	4628      	mov	r0, r5
 800b146:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d025      	beq.n	800b19a <uxr_buffer_create_datawriter_bin+0xda>
 800b14e:	2b03      	cmp	r3, #3
 800b150:	d029      	beq.n	800b1a6 <uxr_buffer_create_datawriter_bin+0xe6>
 800b152:	b32b      	cbz	r3, 800b1a0 <uxr_buffer_create_datawriter_bin+0xe0>
 800b154:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b158:	a921      	add	r1, sp, #132	; 0x84
 800b15a:	a806      	add	r0, sp, #24
 800b15c:	f7ff fe5c 	bl	800ae18 <ucdr_init_buffer>
 800b160:	a90e      	add	r1, sp, #56	; 0x38
 800b162:	a806      	add	r0, sp, #24
 800b164:	f001 ff5a 	bl	800d01c <uxr_serialize_OBJK_DataWriter_Binary>
 800b168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b16a:	f8cd 8000 	str.w	r8, [sp]
 800b16e:	9401      	str	r4, [sp, #4]
 800b170:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b174:	60e3      	str	r3, [r4, #12]
 800b176:	4630      	mov	r0, r6
 800b178:	b29b      	uxth	r3, r3
 800b17a:	f7ff fedd 	bl	800af38 <uxr_common_create_entity>
 800b17e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b186:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800b18a:	f04f 0c12 	mov.w	ip, #18
 800b18e:	250a      	movs	r5, #10
 800b190:	2220      	movs	r2, #32
 800b192:	2110      	movs	r1, #16
 800b194:	2008      	movs	r0, #8
 800b196:	2702      	movs	r7, #2
 800b198:	e7cd      	b.n	800b136 <uxr_buffer_create_datawriter_bin+0x76>
 800b19a:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800b19e:	e7d9      	b.n	800b154 <uxr_buffer_create_datawriter_bin+0x94>
 800b1a0:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800b1a4:	e7d6      	b.n	800b154 <uxr_buffer_create_datawriter_bin+0x94>
 800b1a6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800b1aa:	e7d3      	b.n	800b154 <uxr_buffer_create_datawriter_bin+0x94>

0800b1ac <uxr_object_id>:
 800b1ac:	b082      	sub	sp, #8
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	f88d 1006 	strb.w	r1, [sp, #6]
 800b1b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b1b8:	f360 030f 	bfi	r3, r0, #0, #16
 800b1bc:	f362 431f 	bfi	r3, r2, #16, #16
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	b002      	add	sp, #8
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop

0800b1c8 <uxr_object_id_from_raw>:
 800b1c8:	7843      	ldrb	r3, [r0, #1]
 800b1ca:	7801      	ldrb	r1, [r0, #0]
 800b1cc:	b082      	sub	sp, #8
 800b1ce:	f003 020f 	and.w	r2, r3, #15
 800b1d2:	f88d 2006 	strb.w	r2, [sp, #6]
 800b1d6:	091b      	lsrs	r3, r3, #4
 800b1d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b1dc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	f363 000f 	bfi	r0, r3, #0, #16
 800b1e6:	f362 401f 	bfi	r0, r2, #16, #16
 800b1ea:	b002      	add	sp, #8
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop

0800b1f0 <uxr_object_id_to_raw>:
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800b1fc:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800b200:	f881 c000 	strb.w	ip, [r1]
 800b204:	7048      	strb	r0, [r1, #1]
 800b206:	b002      	add	sp, #8
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop

0800b20c <on_get_fragmentation_info>:
 800b20c:	b500      	push	{lr}
 800b20e:	b08b      	sub	sp, #44	; 0x2c
 800b210:	4601      	mov	r1, r0
 800b212:	2204      	movs	r2, #4
 800b214:	a802      	add	r0, sp, #8
 800b216:	f7ff fdff 	bl	800ae18 <ucdr_init_buffer>
 800b21a:	f10d 0305 	add.w	r3, sp, #5
 800b21e:	f10d 0206 	add.w	r2, sp, #6
 800b222:	a901      	add	r1, sp, #4
 800b224:	a802      	add	r0, sp, #8
 800b226:	f001 f99b 	bl	800c560 <uxr_read_submessage_header>
 800b22a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b22e:	2b0d      	cmp	r3, #13
 800b230:	d003      	beq.n	800b23a <on_get_fragmentation_info+0x2e>
 800b232:	2000      	movs	r0, #0
 800b234:	b00b      	add	sp, #44	; 0x2c
 800b236:	f85d fb04 	ldr.w	pc, [sp], #4
 800b23a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b23e:	f013 0f02 	tst.w	r3, #2
 800b242:	bf14      	ite	ne
 800b244:	2002      	movne	r0, #2
 800b246:	2001      	moveq	r0, #1
 800b248:	b00b      	add	sp, #44	; 0x2c
 800b24a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b24e:	bf00      	nop

0800b250 <read_submessage_get_info>:
 800b250:	b570      	push	{r4, r5, r6, lr}
 800b252:	2500      	movs	r5, #0
 800b254:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800b258:	4604      	mov	r4, r0
 800b25a:	f44f 7224 	mov.w	r2, #656	; 0x290
 800b25e:	460e      	mov	r6, r1
 800b260:	a810      	add	r0, sp, #64	; 0x40
 800b262:	4629      	mov	r1, r5
 800b264:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800b268:	f007 f8e2 	bl	8012430 <memset>
 800b26c:	a903      	add	r1, sp, #12
 800b26e:	4630      	mov	r0, r6
 800b270:	f002 f94a 	bl	800d508 <uxr_deserialize_GET_INFO_Payload>
 800b274:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b278:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800b27c:	4620      	mov	r0, r4
 800b27e:	f000 ffe5 	bl	800c24c <uxr_session_header_offset>
 800b282:	462b      	mov	r3, r5
 800b284:	9000      	str	r0, [sp, #0]
 800b286:	220c      	movs	r2, #12
 800b288:	a905      	add	r1, sp, #20
 800b28a:	a808      	add	r0, sp, #32
 800b28c:	f7ff fdb2 	bl	800adf4 <ucdr_init_buffer_origin_offset>
 800b290:	a910      	add	r1, sp, #64	; 0x40
 800b292:	a808      	add	r0, sp, #32
 800b294:	f002 f9aa 	bl	800d5ec <uxr_serialize_INFO_Payload>
 800b298:	9b08      	ldr	r3, [sp, #32]
 800b29a:	462a      	mov	r2, r5
 800b29c:	4629      	mov	r1, r5
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f000 ff7e 	bl	800c1a0 <uxr_stamp_session_header>
 800b2a4:	a808      	add	r0, sp, #32
 800b2a6:	f7ff fde3 	bl	800ae70 <ucdr_buffer_length>
 800b2aa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	a905      	add	r1, sp, #20
 800b2b0:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b2b4:	47a0      	blx	r4
 800b2b6:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800b2ba:	bd70      	pop	{r4, r5, r6, pc}

0800b2bc <write_submessage_acknack.isra.0>:
 800b2bc:	b570      	push	{r4, r5, r6, lr}
 800b2be:	b092      	sub	sp, #72	; 0x48
 800b2c0:	4605      	mov	r5, r0
 800b2c2:	460e      	mov	r6, r1
 800b2c4:	4614      	mov	r4, r2
 800b2c6:	f000 ffc1 	bl	800c24c <uxr_session_header_offset>
 800b2ca:	a905      	add	r1, sp, #20
 800b2cc:	9000      	str	r0, [sp, #0]
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	a80a      	add	r0, sp, #40	; 0x28
 800b2d2:	2211      	movs	r2, #17
 800b2d4:	f7ff fd8e 	bl	800adf4 <ucdr_init_buffer_origin_offset>
 800b2d8:	2218      	movs	r2, #24
 800b2da:	fb02 5404 	mla	r4, r2, r4, r5
 800b2de:	2300      	movs	r3, #0
 800b2e0:	2205      	movs	r2, #5
 800b2e2:	3450      	adds	r4, #80	; 0x50
 800b2e4:	210a      	movs	r1, #10
 800b2e6:	a80a      	add	r0, sp, #40	; 0x28
 800b2e8:	f001 f920 	bl	800c52c <uxr_buffer_submessage_header>
 800b2ec:	a903      	add	r1, sp, #12
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f004 ff20 	bl	8010134 <uxr_compute_acknack>
 800b2f4:	ba40      	rev16	r0, r0
 800b2f6:	f8ad 000e 	strh.w	r0, [sp, #14]
 800b2fa:	a903      	add	r1, sp, #12
 800b2fc:	a80a      	add	r0, sp, #40	; 0x28
 800b2fe:	f88d 6010 	strb.w	r6, [sp, #16]
 800b302:	f002 f9e3 	bl	800d6cc <uxr_serialize_ACKNACK_Payload>
 800b306:	2200      	movs	r2, #0
 800b308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b30a:	4611      	mov	r1, r2
 800b30c:	4628      	mov	r0, r5
 800b30e:	f000 ff47 	bl	800c1a0 <uxr_stamp_session_header>
 800b312:	a80a      	add	r0, sp, #40	; 0x28
 800b314:	f7ff fdac 	bl	800ae70 <ucdr_buffer_length>
 800b318:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b31a:	4602      	mov	r2, r0
 800b31c:	a905      	add	r1, sp, #20
 800b31e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b322:	47a0      	blx	r4
 800b324:	b012      	add	sp, #72	; 0x48
 800b326:	bd70      	pop	{r4, r5, r6, pc}

0800b328 <uxr_init_session>:
 800b328:	b510      	push	{r4, lr}
 800b32a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800b360 <uxr_init_session+0x38>
 800b32e:	2300      	movs	r3, #0
 800b330:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800b334:	4604      	mov	r4, r0
 800b336:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800b33a:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800b33e:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800b342:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800b346:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800b34a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800b34e:	2181      	movs	r1, #129	; 0x81
 800b350:	f000 fe92 	bl	800c078 <uxr_init_session_info>
 800b354:	f104 0008 	add.w	r0, r4, #8
 800b358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b35c:	f001 b802 	b.w	800c364 <uxr_init_stream_storage>
	...

0800b368 <uxr_set_status_callback>:
 800b368:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop

0800b370 <uxr_set_topic_callback>:
 800b370:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop

0800b378 <uxr_set_request_callback>:
 800b378:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop

0800b380 <uxr_set_reply_callback>:
 800b380:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop

0800b388 <uxr_create_output_best_effort_stream>:
 800b388:	b510      	push	{r4, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	e9cd 2100 	strd	r2, r1, [sp]
 800b390:	4604      	mov	r4, r0
 800b392:	f000 ff5b 	bl	800c24c <uxr_session_header_offset>
 800b396:	e9dd 2100 	ldrd	r2, r1, [sp]
 800b39a:	4603      	mov	r3, r0
 800b39c:	f104 0008 	add.w	r0, r4, #8
 800b3a0:	b004      	add	sp, #16
 800b3a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3a6:	f001 b827 	b.w	800c3f8 <uxr_add_output_best_effort_buffer>
 800b3aa:	bf00      	nop

0800b3ac <uxr_create_output_reliable_stream>:
 800b3ac:	b510      	push	{r4, lr}
 800b3ae:	b088      	sub	sp, #32
 800b3b0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	9303      	str	r3, [sp, #12]
 800b3b8:	f000 ff48 	bl	800c24c <uxr_session_header_offset>
 800b3bc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800b3c0:	9000      	str	r0, [sp, #0]
 800b3c2:	9905      	ldr	r1, [sp, #20]
 800b3c4:	f104 0008 	add.w	r0, r4, #8
 800b3c8:	f001 f82a 	bl	800c420 <uxr_add_output_reliable_buffer>
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	b2c3      	uxtb	r3, r0
 800b3d0:	f363 0207 	bfi	r2, r3, #0, #8
 800b3d4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b3d8:	f363 220f 	bfi	r2, r3, #8, #8
 800b3dc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800b3e0:	f363 4217 	bfi	r2, r3, #16, #8
 800b3e4:	0e03      	lsrs	r3, r0, #24
 800b3e6:	f363 621f 	bfi	r2, r3, #24, #8
 800b3ea:	4610      	mov	r0, r2
 800b3ec:	b008      	add	sp, #32
 800b3ee:	bd10      	pop	{r4, pc}

0800b3f0 <uxr_create_input_best_effort_stream>:
 800b3f0:	b082      	sub	sp, #8
 800b3f2:	3008      	adds	r0, #8
 800b3f4:	b002      	add	sp, #8
 800b3f6:	f001 b82d 	b.w	800c454 <uxr_add_input_best_effort_buffer>
 800b3fa:	bf00      	nop

0800b3fc <uxr_create_input_reliable_stream>:
 800b3fc:	b510      	push	{r4, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	4c0b      	ldr	r4, [pc, #44]	; (800b430 <uxr_create_input_reliable_stream+0x34>)
 800b402:	9400      	str	r4, [sp, #0]
 800b404:	3008      	adds	r0, #8
 800b406:	f001 f83b 	bl	800c480 <uxr_add_input_reliable_buffer>
 800b40a:	2200      	movs	r2, #0
 800b40c:	b2c3      	uxtb	r3, r0
 800b40e:	f363 0207 	bfi	r2, r3, #0, #8
 800b412:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b416:	f363 220f 	bfi	r2, r3, #8, #8
 800b41a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800b41e:	f363 4217 	bfi	r2, r3, #16, #8
 800b422:	0e03      	lsrs	r3, r0, #24
 800b424:	f363 621f 	bfi	r2, r3, #24, #8
 800b428:	4610      	mov	r0, r2
 800b42a:	b004      	add	sp, #16
 800b42c:	bd10      	pop	{r4, pc}
 800b42e:	bf00      	nop
 800b430:	0800b20d 	.word	0x0800b20d

0800b434 <uxr_epoch_nanos>:
 800b434:	b510      	push	{r4, lr}
 800b436:	4604      	mov	r4, r0
 800b438:	f001 f8d8 	bl	800c5ec <uxr_nanos>
 800b43c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800b440:	1ac0      	subs	r0, r0, r3
 800b442:	eb61 0102 	sbc.w	r1, r1, r2
 800b446:	bd10      	pop	{r4, pc}

0800b448 <uxr_flash_output_streams>:
 800b448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b44c:	7e03      	ldrb	r3, [r0, #24]
 800b44e:	b084      	sub	sp, #16
 800b450:	4604      	mov	r4, r0
 800b452:	2b00      	cmp	r3, #0
 800b454:	d035      	beq.n	800b4c2 <uxr_flash_output_streams+0x7a>
 800b456:	f04f 0900 	mov.w	r9, #0
 800b45a:	4648      	mov	r0, r9
 800b45c:	f10d 0802 	add.w	r8, sp, #2
 800b460:	af03      	add	r7, sp, #12
 800b462:	ae02      	add	r6, sp, #8
 800b464:	e006      	b.n	800b474 <uxr_flash_output_streams+0x2c>
 800b466:	7e23      	ldrb	r3, [r4, #24]
 800b468:	f109 0901 	add.w	r9, r9, #1
 800b46c:	fa5f f089 	uxtb.w	r0, r9
 800b470:	4283      	cmp	r3, r0
 800b472:	d926      	bls.n	800b4c2 <uxr_flash_output_streams+0x7a>
 800b474:	2201      	movs	r2, #1
 800b476:	4611      	mov	r1, r2
 800b478:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800b47c:	f000 ff1e 	bl	800c2bc <uxr_stream_id>
 800b480:	3508      	adds	r5, #8
 800b482:	4684      	mov	ip, r0
 800b484:	4643      	mov	r3, r8
 800b486:	463a      	mov	r2, r7
 800b488:	4631      	mov	r1, r6
 800b48a:	4628      	mov	r0, r5
 800b48c:	f8cd c004 	str.w	ip, [sp, #4]
 800b490:	f004 fed6 	bl	8010240 <uxr_prepare_best_effort_buffer_to_send>
 800b494:	2800      	cmp	r0, #0
 800b496:	d0e6      	beq.n	800b466 <uxr_flash_output_streams+0x1e>
 800b498:	9b02      	ldr	r3, [sp, #8]
 800b49a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b49e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f000 fe7c 	bl	800c1a0 <uxr_stamp_session_header>
 800b4a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b4aa:	9a03      	ldr	r2, [sp, #12]
 800b4ac:	685d      	ldr	r5, [r3, #4]
 800b4ae:	6818      	ldr	r0, [r3, #0]
 800b4b0:	9902      	ldr	r1, [sp, #8]
 800b4b2:	47a8      	blx	r5
 800b4b4:	f109 0901 	add.w	r9, r9, #1
 800b4b8:	7e23      	ldrb	r3, [r4, #24]
 800b4ba:	fa5f f089 	uxtb.w	r0, r9
 800b4be:	4283      	cmp	r3, r0
 800b4c0:	d8d8      	bhi.n	800b474 <uxr_flash_output_streams+0x2c>
 800b4c2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800b4c6:	b38b      	cbz	r3, 800b52c <uxr_flash_output_streams+0xe4>
 800b4c8:	f04f 0900 	mov.w	r9, #0
 800b4cc:	f10d 0802 	add.w	r8, sp, #2
 800b4d0:	af03      	add	r7, sp, #12
 800b4d2:	ae02      	add	r6, sp, #8
 800b4d4:	4648      	mov	r0, r9
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	2102      	movs	r1, #2
 800b4da:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800b4de:	f000 feed 	bl	800c2bc <uxr_stream_id>
 800b4e2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800b4e6:	3520      	adds	r5, #32
 800b4e8:	9001      	str	r0, [sp, #4]
 800b4ea:	e00d      	b.n	800b508 <uxr_flash_output_streams+0xc0>
 800b4ec:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b4f0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b4f4:	9b02      	ldr	r3, [sp, #8]
 800b4f6:	f000 fe53 	bl	800c1a0 <uxr_stamp_session_header>
 800b4fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b4fc:	9a03      	ldr	r2, [sp, #12]
 800b4fe:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800b502:	9902      	ldr	r1, [sp, #8]
 800b504:	6818      	ldr	r0, [r3, #0]
 800b506:	47d0      	blx	sl
 800b508:	4643      	mov	r3, r8
 800b50a:	463a      	mov	r2, r7
 800b50c:	4631      	mov	r1, r6
 800b50e:	4628      	mov	r0, r5
 800b510:	f005 f8b4 	bl	801067c <uxr_prepare_next_reliable_buffer_to_send>
 800b514:	4603      	mov	r3, r0
 800b516:	4620      	mov	r0, r4
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d1e7      	bne.n	800b4ec <uxr_flash_output_streams+0xa4>
 800b51c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800b520:	f109 0901 	add.w	r9, r9, #1
 800b524:	fa5f f089 	uxtb.w	r0, r9
 800b528:	4283      	cmp	r3, r0
 800b52a:	d8d4      	bhi.n	800b4d6 <uxr_flash_output_streams+0x8e>
 800b52c:	b004      	add	sp, #16
 800b52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b532:	bf00      	nop

0800b534 <read_submessage_info>:
 800b534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b538:	460d      	mov	r5, r1
 800b53a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800b53e:	4669      	mov	r1, sp
 800b540:	4607      	mov	r7, r0
 800b542:	4628      	mov	r0, r5
 800b544:	f001 feee 	bl	800d324 <uxr_deserialize_BaseObjectReply>
 800b548:	a902      	add	r1, sp, #8
 800b54a:	4604      	mov	r4, r0
 800b54c:	4628      	mov	r0, r5
 800b54e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800b552:	f7fe fc9d 	bl	8009e90 <ucdr_deserialize_bool>
 800b556:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b55a:	4004      	ands	r4, r0
 800b55c:	b2e4      	uxtb	r4, r4
 800b55e:	b95b      	cbnz	r3, 800b578 <read_submessage_info+0x44>
 800b560:	a987      	add	r1, sp, #540	; 0x21c
 800b562:	4628      	mov	r0, r5
 800b564:	f7fe fc94 	bl	8009e90 <ucdr_deserialize_bool>
 800b568:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800b56c:	4606      	mov	r6, r0
 800b56e:	b94b      	cbnz	r3, 800b584 <read_submessage_info+0x50>
 800b570:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800b574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b578:	a903      	add	r1, sp, #12
 800b57a:	4628      	mov	r0, r5
 800b57c:	f001 fd7a 	bl	800d074 <uxr_deserialize_ObjectVariant>
 800b580:	4004      	ands	r4, r0
 800b582:	e7ed      	b.n	800b560 <read_submessage_info+0x2c>
 800b584:	a988      	add	r1, sp, #544	; 0x220
 800b586:	4628      	mov	r0, r5
 800b588:	f7fe fcb0 	bl	8009eec <ucdr_deserialize_uint8_t>
 800b58c:	4234      	tst	r4, r6
 800b58e:	d0ef      	beq.n	800b570 <read_submessage_info+0x3c>
 800b590:	2800      	cmp	r0, #0
 800b592:	d0ed      	beq.n	800b570 <read_submessage_info+0x3c>
 800b594:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800b598:	2b0d      	cmp	r3, #13
 800b59a:	d1e9      	bne.n	800b570 <read_submessage_info+0x3c>
 800b59c:	a98a      	add	r1, sp, #552	; 0x228
 800b59e:	4628      	mov	r0, r5
 800b5a0:	f7ff fa4a 	bl	800aa38 <ucdr_deserialize_int16_t>
 800b5a4:	b140      	cbz	r0, 800b5b8 <read_submessage_info+0x84>
 800b5a6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	dd07      	ble.n	800b5be <read_submessage_info+0x8a>
 800b5ae:	f1b8 0f00 	cmp.w	r8, #0
 800b5b2:	bf14      	ite	ne
 800b5b4:	2001      	movne	r0, #1
 800b5b6:	2002      	moveq	r0, #2
 800b5b8:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800b5bc:	e7d8      	b.n	800b570 <read_submessage_info+0x3c>
 800b5be:	2000      	movs	r0, #0
 800b5c0:	e7fa      	b.n	800b5b8 <read_submessage_info+0x84>
 800b5c2:	bf00      	nop

0800b5c4 <read_submessage_list>:
 800b5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c8:	b097      	sub	sp, #92	; 0x5c
 800b5ca:	4ec1      	ldr	r6, [pc, #772]	; (800b8d0 <read_submessage_list+0x30c>)
 800b5cc:	9209      	str	r2, [sp, #36]	; 0x24
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	460d      	mov	r5, r1
 800b5d2:	f04f 0801 	mov.w	r8, #1
 800b5d6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800b5da:	aa0c      	add	r2, sp, #48	; 0x30
 800b5dc:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	f000 ffbd 	bl	800c560 <uxr_read_submessage_header>
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	f000 813e 	beq.w	800b868 <read_submessage_list+0x2a4>
 800b5ec:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800b5f0:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800b5f4:	3b02      	subs	r3, #2
 800b5f6:	2b0d      	cmp	r3, #13
 800b5f8:	d8ed      	bhi.n	800b5d6 <read_submessage_list+0x12>
 800b5fa:	a101      	add	r1, pc, #4	; (adr r1, 800b600 <read_submessage_list+0x3c>)
 800b5fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b600:	0800b85f 	.word	0x0800b85f
 800b604:	0800b5d7 	.word	0x0800b5d7
 800b608:	0800b84f 	.word	0x0800b84f
 800b60c:	0800b7ed 	.word	0x0800b7ed
 800b610:	0800b7e3 	.word	0x0800b7e3
 800b614:	0800b5d7 	.word	0x0800b5d7
 800b618:	0800b5d7 	.word	0x0800b5d7
 800b61c:	0800b743 	.word	0x0800b743
 800b620:	0800b6d3 	.word	0x0800b6d3
 800b624:	0800b693 	.word	0x0800b693
 800b628:	0800b5d7 	.word	0x0800b5d7
 800b62c:	0800b5d7 	.word	0x0800b5d7
 800b630:	0800b5d7 	.word	0x0800b5d7
 800b634:	0800b639 	.word	0x0800b639
 800b638:	a910      	add	r1, sp, #64	; 0x40
 800b63a:	4628      	mov	r0, r5
 800b63c:	f002 f896 	bl	800d76c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800b640:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 800b644:	f1b9 0f00 	cmp.w	r9, #0
 800b648:	f000 8116 	beq.w	800b878 <read_submessage_list+0x2b4>
 800b64c:	f000 ffce 	bl	800c5ec <uxr_nanos>
 800b650:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800b652:	4602      	mov	r2, r0
 800b654:	460b      	mov	r3, r1
 800b656:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b658:	2100      	movs	r1, #0
 800b65a:	468c      	mov	ip, r1
 800b65c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800b660:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800b664:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b666:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800b668:	468c      	mov	ip, r1
 800b66a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800b66e:	46e2      	mov	sl, ip
 800b670:	46bc      	mov	ip, r7
 800b672:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 800b676:	fbc0 7106 	smlal	r7, r1, r0, r6
 800b67a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800b67e:	e9cd 7100 	strd	r7, r1, [sp]
 800b682:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800b686:	9106      	str	r1, [sp, #24]
 800b688:	4620      	mov	r0, r4
 800b68a:	47c8      	blx	r9
 800b68c:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 800b690:	e7a1      	b.n	800b5d6 <read_submessage_list+0x12>
 800b692:	a910      	add	r1, sp, #64	; 0x40
 800b694:	4628      	mov	r0, r5
 800b696:	f002 f857 	bl	800d748 <uxr_deserialize_HEARTBEAT_Payload>
 800b69a:	2100      	movs	r1, #0
 800b69c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800b6a0:	f000 fe36 	bl	800c310 <uxr_stream_id_from_raw>
 800b6a4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800b6a8:	900f      	str	r0, [sp, #60]	; 0x3c
 800b6aa:	4639      	mov	r1, r7
 800b6ac:	f104 0008 	add.w	r0, r4, #8
 800b6b0:	f000 ff1c 	bl	800c4ec <uxr_get_input_reliable_stream>
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	d08e      	beq.n	800b5d6 <read_submessage_list+0x12>
 800b6b8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800b6bc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800b6c0:	f004 fd2c 	bl	801011c <uxr_process_heartbeat>
 800b6c4:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800b6c8:	463a      	mov	r2, r7
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f7ff fdf6 	bl	800b2bc <write_submessage_acknack.isra.0>
 800b6d0:	e781      	b.n	800b5d6 <read_submessage_list+0x12>
 800b6d2:	a910      	add	r1, sp, #64	; 0x40
 800b6d4:	4628      	mov	r0, r5
 800b6d6:	f002 f80f 	bl	800d6f8 <uxr_deserialize_ACKNACK_Payload>
 800b6da:	2100      	movs	r1, #0
 800b6dc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800b6e0:	f000 fe16 	bl	800c310 <uxr_stream_id_from_raw>
 800b6e4:	900d      	str	r0, [sp, #52]	; 0x34
 800b6e6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800b6ea:	f104 0008 	add.w	r0, r4, #8
 800b6ee:	f000 fee9 	bl	800c4c4 <uxr_get_output_reliable_stream>
 800b6f2:	4607      	mov	r7, r0
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	f43f af6e 	beq.w	800b5d6 <read_submessage_list+0x12>
 800b6fa:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800b6fe:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800b702:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800b706:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800b70a:	b289      	uxth	r1, r1
 800b70c:	f005 f860 	bl	80107d0 <uxr_process_acknack>
 800b710:	4638      	mov	r0, r7
 800b712:	f005 f81d 	bl	8010750 <uxr_begin_output_nack_buffer_it>
 800b716:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800b71a:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800b71e:	e006      	b.n	800b72e <read_submessage_list+0x16a>
 800b720:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b722:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b724:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800b728:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b72a:	6818      	ldr	r0, [r3, #0]
 800b72c:	47c8      	blx	r9
 800b72e:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800b732:	aa0f      	add	r2, sp, #60	; 0x3c
 800b734:	4651      	mov	r1, sl
 800b736:	4638      	mov	r0, r7
 800b738:	f005 f80c 	bl	8010754 <uxr_next_reliable_nack_buffer_to_send>
 800b73c:	2800      	cmp	r0, #0
 800b73e:	d1ef      	bne.n	800b720 <read_submessage_list+0x15c>
 800b740:	e749      	b.n	800b5d6 <read_submessage_list+0x12>
 800b742:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800b746:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800b74a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800b74e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800b752:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800b756:	4651      	mov	r1, sl
 800b758:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b75c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 800b760:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800b764:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800b768:	4628      	mov	r0, r5
 800b76a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800b76e:	f001 fd23 	bl	800d1b8 <uxr_deserialize_BaseObjectRequest>
 800b772:	4650      	mov	r0, sl
 800b774:	a90f      	add	r1, sp, #60	; 0x3c
 800b776:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800b77a:	f000 fd8d 	bl	800c298 <uxr_parse_base_object_request>
 800b77e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800b782:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b784:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800b788:	9110      	str	r1, [sp, #64]	; 0x40
 800b78a:	3f04      	subs	r7, #4
 800b78c:	f009 090e 	and.w	r9, r9, #14
 800b790:	b2bf      	uxth	r7, r7
 800b792:	f1bb 0f00 	cmp.w	fp, #0
 800b796:	d006      	beq.n	800b7a6 <read_submessage_list+0x1e2>
 800b798:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b79c:	9300      	str	r3, [sp, #0]
 800b79e:	4652      	mov	r2, sl
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	47d8      	blx	fp
 800b7a6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800b7a8:	b16a      	cbz	r2, 800b7c6 <read_submessage_list+0x202>
 800b7aa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	3802      	subs	r0, #2
 800b7b0:	e002      	b.n	800b7b8 <read_submessage_list+0x1f4>
 800b7b2:	3101      	adds	r1, #1
 800b7b4:	4291      	cmp	r1, r2
 800b7b6:	d006      	beq.n	800b7c6 <read_submessage_list+0x202>
 800b7b8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800b7bc:	4553      	cmp	r3, sl
 800b7be:	d1f8      	bne.n	800b7b2 <read_submessage_list+0x1ee>
 800b7c0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	545a      	strb	r2, [r3, r1]
 800b7c6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800b7ca:	9102      	str	r1, [sp, #8]
 800b7cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b7ce:	9101      	str	r1, [sp, #4]
 800b7d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b7d2:	9100      	str	r1, [sp, #0]
 800b7d4:	464b      	mov	r3, r9
 800b7d6:	463a      	mov	r2, r7
 800b7d8:	4629      	mov	r1, r5
 800b7da:	4620      	mov	r0, r4
 800b7dc:	f005 f87c 	bl	80108d8 <read_submessage_format>
 800b7e0:	e6f9      	b.n	800b5d6 <read_submessage_list+0x12>
 800b7e2:	4629      	mov	r1, r5
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f7ff fea5 	bl	800b534 <read_submessage_info>
 800b7ea:	e6f4      	b.n	800b5d6 <read_submessage_list+0x12>
 800b7ec:	2a00      	cmp	r2, #0
 800b7ee:	d03e      	beq.n	800b86e <read_submessage_list+0x2aa>
 800b7f0:	a910      	add	r1, sp, #64	; 0x40
 800b7f2:	4628      	mov	r0, r5
 800b7f4:	f001 fedc 	bl	800d5b0 <uxr_deserialize_STATUS_Payload>
 800b7f8:	a90e      	add	r1, sp, #56	; 0x38
 800b7fa:	aa0d      	add	r2, sp, #52	; 0x34
 800b7fc:	a810      	add	r0, sp, #64	; 0x40
 800b7fe:	f000 fd4b 	bl	800c298 <uxr_parse_base_object_request>
 800b802:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800b806:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b808:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800b80c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 800b810:	910f      	str	r1, [sp, #60]	; 0x3c
 800b812:	f1ba 0f00 	cmp.w	sl, #0
 800b816:	d006      	beq.n	800b826 <read_submessage_list+0x262>
 800b818:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	463a      	mov	r2, r7
 800b820:	464b      	mov	r3, r9
 800b822:	4620      	mov	r0, r4
 800b824:	47d0      	blx	sl
 800b826:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800b828:	2a00      	cmp	r2, #0
 800b82a:	f43f aed4 	beq.w	800b5d6 <read_submessage_list+0x12>
 800b82e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800b830:	2100      	movs	r1, #0
 800b832:	3802      	subs	r0, #2
 800b834:	e003      	b.n	800b83e <read_submessage_list+0x27a>
 800b836:	3101      	adds	r1, #1
 800b838:	4291      	cmp	r1, r2
 800b83a:	f43f aecc 	beq.w	800b5d6 <read_submessage_list+0x12>
 800b83e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800b842:	42bb      	cmp	r3, r7
 800b844:	d1f7      	bne.n	800b836 <read_submessage_list+0x272>
 800b846:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b848:	f803 9001 	strb.w	r9, [r3, r1]
 800b84c:	e6c3      	b.n	800b5d6 <read_submessage_list+0x12>
 800b84e:	2a00      	cmp	r2, #0
 800b850:	f47f aec1 	bne.w	800b5d6 <read_submessage_list+0x12>
 800b854:	4629      	mov	r1, r5
 800b856:	4620      	mov	r0, r4
 800b858:	f000 fc64 	bl	800c124 <uxr_read_create_session_status>
 800b85c:	e6bb      	b.n	800b5d6 <read_submessage_list+0x12>
 800b85e:	4629      	mov	r1, r5
 800b860:	4620      	mov	r0, r4
 800b862:	f7ff fcf5 	bl	800b250 <read_submessage_get_info>
 800b866:	e6b6      	b.n	800b5d6 <read_submessage_list+0x12>
 800b868:	b017      	add	sp, #92	; 0x5c
 800b86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b86e:	4629      	mov	r1, r5
 800b870:	4620      	mov	r0, r4
 800b872:	f000 fc63 	bl	800c13c <uxr_read_delete_session_status>
 800b876:	e6ae      	b.n	800b5d6 <read_submessage_list+0x12>
 800b878:	f000 feb8 	bl	800c5ec <uxr_nanos>
 800b87c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b87e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b880:	464f      	mov	r7, r9
 800b882:	fbc3 2706 	smlal	r2, r7, r3, r6
 800b886:	1812      	adds	r2, r2, r0
 800b888:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b88a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b88c:	eb47 0101 	adc.w	r1, r7, r1
 800b890:	464f      	mov	r7, r9
 800b892:	fbc3 0706 	smlal	r0, r7, r3, r6
 800b896:	463b      	mov	r3, r7
 800b898:	4684      	mov	ip, r0
 800b89a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 800b89e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800b8a2:	eb1c 0c00 	adds.w	ip, ip, r0
 800b8a6:	464f      	mov	r7, r9
 800b8a8:	eb43 0307 	adc.w	r3, r3, r7
 800b8ac:	ebb2 0c0c 	subs.w	ip, r2, ip
 800b8b0:	eb61 0303 	sbc.w	r3, r1, r3
 800b8b4:	0fda      	lsrs	r2, r3, #31
 800b8b6:	eb12 020c 	adds.w	r2, r2, ip
 800b8ba:	f143 0300 	adc.w	r3, r3, #0
 800b8be:	0852      	lsrs	r2, r2, #1
 800b8c0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800b8c4:	105b      	asrs	r3, r3, #1
 800b8c6:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 800b8ca:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800b8ce:	e6dd      	b.n	800b68c <read_submessage_list+0xc8>
 800b8d0:	3b9aca00 	.word	0x3b9aca00

0800b8d4 <listen_message_reliably>:
 800b8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d8:	1e0b      	subs	r3, r1, #0
 800b8da:	b09d      	sub	sp, #116	; 0x74
 800b8dc:	bfb8      	it	lt
 800b8de:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800b8e2:	4680      	mov	r8, r0
 800b8e4:	9305      	str	r3, [sp, #20]
 800b8e6:	f000 fe67 	bl	800c5b8 <uxr_millis>
 800b8ea:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800b8ee:	4681      	mov	r9, r0
 800b8f0:	2a00      	cmp	r2, #0
 800b8f2:	f000 80a1 	beq.w	800ba38 <listen_message_reliably+0x164>
 800b8f6:	2600      	movs	r6, #0
 800b8f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b8fc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800b900:	9303      	str	r3, [sp, #12]
 800b902:	4630      	mov	r0, r6
 800b904:	460f      	mov	r7, r1
 800b906:	e00f      	b.n	800b928 <listen_message_reliably+0x54>
 800b908:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b90c:	9903      	ldr	r1, [sp, #12]
 800b90e:	455a      	cmp	r2, fp
 800b910:	f106 0601 	add.w	r6, r6, #1
 800b914:	eb73 0101 	sbcs.w	r1, r3, r1
 800b918:	b2f0      	uxtb	r0, r6
 800b91a:	da01      	bge.n	800b920 <listen_message_reliably+0x4c>
 800b91c:	4693      	mov	fp, r2
 800b91e:	9303      	str	r3, [sp, #12]
 800b920:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800b924:	4283      	cmp	r3, r0
 800b926:	d960      	bls.n	800b9ea <listen_message_reliably+0x116>
 800b928:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800b92c:	2102      	movs	r1, #2
 800b92e:	2201      	movs	r2, #1
 800b930:	f000 fcc4 	bl	800c2bc <uxr_stream_id>
 800b934:	00e4      	lsls	r4, r4, #3
 800b936:	f104 0520 	add.w	r5, r4, #32
 800b93a:	4445      	add	r5, r8
 800b93c:	4601      	mov	r1, r0
 800b93e:	463b      	mov	r3, r7
 800b940:	464a      	mov	r2, r9
 800b942:	4628      	mov	r0, r5
 800b944:	9109      	str	r1, [sp, #36]	; 0x24
 800b946:	f004 fed9 	bl	80106fc <uxr_update_output_stream_heartbeat_timestamp>
 800b94a:	eb08 0304 	add.w	r3, r8, r4
 800b94e:	2800      	cmp	r0, #0
 800b950:	d0da      	beq.n	800b908 <listen_message_reliably+0x34>
 800b952:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b956:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800b95a:	9304      	str	r3, [sp, #16]
 800b95c:	4640      	mov	r0, r8
 800b95e:	f000 fc75 	bl	800c24c <uxr_session_header_offset>
 800b962:	3501      	adds	r5, #1
 800b964:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800b968:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800b96c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800b970:	2300      	movs	r3, #0
 800b972:	2211      	movs	r2, #17
 800b974:	9000      	str	r0, [sp, #0]
 800b976:	a90c      	add	r1, sp, #48	; 0x30
 800b978:	4650      	mov	r0, sl
 800b97a:	f7ff fa3b 	bl	800adf4 <ucdr_init_buffer_origin_offset>
 800b97e:	2300      	movs	r3, #0
 800b980:	2205      	movs	r2, #5
 800b982:	210b      	movs	r1, #11
 800b984:	4650      	mov	r0, sl
 800b986:	f000 fdd1 	bl	800c52c <uxr_buffer_submessage_header>
 800b98a:	8968      	ldrh	r0, [r5, #10]
 800b98c:	2101      	movs	r1, #1
 800b98e:	f005 f86d 	bl	8010a6c <uxr_seq_num_add>
 800b992:	892b      	ldrh	r3, [r5, #8]
 800b994:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800b998:	4602      	mov	r2, r0
 800b99a:	9b04      	ldr	r3, [sp, #16]
 800b99c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800b9a0:	a90a      	add	r1, sp, #40	; 0x28
 800b9a2:	4650      	mov	r0, sl
 800b9a4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800b9a8:	f001 feba 	bl	800d720 <uxr_serialize_HEARTBEAT_Payload>
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	4611      	mov	r1, r2
 800b9b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b9b2:	4640      	mov	r0, r8
 800b9b4:	f000 fbf4 	bl	800c1a0 <uxr_stamp_session_header>
 800b9b8:	4650      	mov	r0, sl
 800b9ba:	f7ff fa59 	bl	800ae70 <ucdr_buffer_length>
 800b9be:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	a90c      	add	r1, sp, #48	; 0x30
 800b9c6:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b9ca:	4444      	add	r4, r8
 800b9cc:	47a8      	blx	r5
 800b9ce:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800b9d2:	9903      	ldr	r1, [sp, #12]
 800b9d4:	455a      	cmp	r2, fp
 800b9d6:	f106 0601 	add.w	r6, r6, #1
 800b9da:	eb73 0101 	sbcs.w	r1, r3, r1
 800b9de:	b2f0      	uxtb	r0, r6
 800b9e0:	db9c      	blt.n	800b91c <listen_message_reliably+0x48>
 800b9e2:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800b9e6:	4283      	cmp	r3, r0
 800b9e8:	d89e      	bhi.n	800b928 <listen_message_reliably+0x54>
 800b9ea:	9a03      	ldr	r2, [sp, #12]
 800b9ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	bf08      	it	eq
 800b9f4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800b9f8:	d01e      	beq.n	800ba38 <listen_message_reliably+0x164>
 800b9fa:	ebab 0309 	sub.w	r3, fp, r9
 800b9fe:	9905      	ldr	r1, [sp, #20]
 800ba00:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	bf08      	it	eq
 800ba08:	2301      	moveq	r3, #1
 800ba0a:	4299      	cmp	r1, r3
 800ba0c:	bfa8      	it	ge
 800ba0e:	4619      	movge	r1, r3
 800ba10:	6894      	ldr	r4, [r2, #8]
 800ba12:	6810      	ldr	r0, [r2, #0]
 800ba14:	4689      	mov	r9, r1
 800ba16:	460b      	mov	r3, r1
 800ba18:	aa08      	add	r2, sp, #32
 800ba1a:	a907      	add	r1, sp, #28
 800ba1c:	47a0      	blx	r4
 800ba1e:	b968      	cbnz	r0, 800ba3c <listen_message_reliably+0x168>
 800ba20:	9b05      	ldr	r3, [sp, #20]
 800ba22:	eba3 0309 	sub.w	r3, r3, r9
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	9305      	str	r3, [sp, #20]
 800ba2a:	f73f af5c 	bgt.w	800b8e6 <listen_message_reliably+0x12>
 800ba2e:	4604      	mov	r4, r0
 800ba30:	4620      	mov	r0, r4
 800ba32:	b01d      	add	sp, #116	; 0x74
 800ba34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba38:	9b05      	ldr	r3, [sp, #20]
 800ba3a:	e7e0      	b.n	800b9fe <listen_message_reliably+0x12a>
 800ba3c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800ba40:	4604      	mov	r4, r0
 800ba42:	a80c      	add	r0, sp, #48	; 0x30
 800ba44:	f7ff f9e8 	bl	800ae18 <ucdr_init_buffer>
 800ba48:	2500      	movs	r5, #0
 800ba4a:	f10d 031a 	add.w	r3, sp, #26
 800ba4e:	aa06      	add	r2, sp, #24
 800ba50:	a90c      	add	r1, sp, #48	; 0x30
 800ba52:	4640      	mov	r0, r8
 800ba54:	f88d 5018 	strb.w	r5, [sp, #24]
 800ba58:	f000 fbb6 	bl	800c1c8 <uxr_read_session_header>
 800ba5c:	b918      	cbnz	r0, 800ba66 <listen_message_reliably+0x192>
 800ba5e:	4620      	mov	r0, r4
 800ba60:	b01d      	add	sp, #116	; 0x74
 800ba62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba66:	4629      	mov	r1, r5
 800ba68:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ba6c:	f000 fc50 	bl	800c310 <uxr_stream_id_from_raw>
 800ba70:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800ba74:	2d01      	cmp	r5, #1
 800ba76:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800ba7a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800ba7e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800ba82:	d04b      	beq.n	800bb1c <listen_message_reliably+0x248>
 800ba84:	2d02      	cmp	r5, #2
 800ba86:	d00f      	beq.n	800baa8 <listen_message_reliably+0x1d4>
 800ba88:	2d00      	cmp	r5, #0
 800ba8a:	d1e8      	bne.n	800ba5e <listen_message_reliably+0x18a>
 800ba8c:	4629      	mov	r1, r5
 800ba8e:	4628      	mov	r0, r5
 800ba90:	f000 fc3e 	bl	800c310 <uxr_stream_id_from_raw>
 800ba94:	a90c      	add	r1, sp, #48	; 0x30
 800ba96:	4602      	mov	r2, r0
 800ba98:	4640      	mov	r0, r8
 800ba9a:	920a      	str	r2, [sp, #40]	; 0x28
 800ba9c:	f7ff fd92 	bl	800b5c4 <read_submessage_list>
 800baa0:	4620      	mov	r0, r4
 800baa2:	b01d      	add	sp, #116	; 0x74
 800baa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa8:	4631      	mov	r1, r6
 800baaa:	f108 0008 	add.w	r0, r8, #8
 800baae:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800bab2:	f000 fd1b 	bl	800c4ec <uxr_get_input_reliable_stream>
 800bab6:	4607      	mov	r7, r0
 800bab8:	b338      	cbz	r0, 800bb0a <listen_message_reliably+0x236>
 800baba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800babc:	9203      	str	r2, [sp, #12]
 800babe:	a80c      	add	r0, sp, #48	; 0x30
 800bac0:	f7ff f9da 	bl	800ae78 <ucdr_buffer_remaining>
 800bac4:	4603      	mov	r3, r0
 800bac6:	f10d 0019 	add.w	r0, sp, #25
 800baca:	9000      	str	r0, [sp, #0]
 800bacc:	9a03      	ldr	r2, [sp, #12]
 800bace:	4651      	mov	r1, sl
 800bad0:	4638      	mov	r0, r7
 800bad2:	f004 fa29 	bl	800ff28 <uxr_receive_reliable_message>
 800bad6:	b1c0      	cbz	r0, 800bb0a <listen_message_reliably+0x236>
 800bad8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800badc:	b393      	cbz	r3, 800bb44 <listen_message_reliably+0x270>
 800bade:	ad14      	add	r5, sp, #80	; 0x50
 800bae0:	f04f 0a02 	mov.w	sl, #2
 800bae4:	e00a      	b.n	800bafc <listen_message_reliably+0x228>
 800bae6:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800baea:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800baee:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800baf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800baf4:	4629      	mov	r1, r5
 800baf6:	4640      	mov	r0, r8
 800baf8:	f7ff fd64 	bl	800b5c4 <read_submessage_list>
 800bafc:	2204      	movs	r2, #4
 800bafe:	4629      	mov	r1, r5
 800bb00:	4638      	mov	r0, r7
 800bb02:	f004 fa91 	bl	8010028 <uxr_next_input_reliable_buffer_available>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d1ed      	bne.n	800bae6 <listen_message_reliably+0x212>
 800bb0a:	4640      	mov	r0, r8
 800bb0c:	4632      	mov	r2, r6
 800bb0e:	4649      	mov	r1, r9
 800bb10:	f7ff fbd4 	bl	800b2bc <write_submessage_acknack.isra.0>
 800bb14:	4620      	mov	r0, r4
 800bb16:	b01d      	add	sp, #116	; 0x74
 800bb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb1c:	4631      	mov	r1, r6
 800bb1e:	f108 0008 	add.w	r0, r8, #8
 800bb22:	f000 fcd9 	bl	800c4d8 <uxr_get_input_best_effort_stream>
 800bb26:	2800      	cmp	r0, #0
 800bb28:	d099      	beq.n	800ba5e <listen_message_reliably+0x18a>
 800bb2a:	4651      	mov	r1, sl
 800bb2c:	f004 f968 	bl	800fe00 <uxr_receive_best_effort_message>
 800bb30:	2800      	cmp	r0, #0
 800bb32:	d094      	beq.n	800ba5e <listen_message_reliably+0x18a>
 800bb34:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800bb38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb3a:	a90c      	add	r1, sp, #48	; 0x30
 800bb3c:	4640      	mov	r0, r8
 800bb3e:	f7ff fd41 	bl	800b5c4 <read_submessage_list>
 800bb42:	e78c      	b.n	800ba5e <listen_message_reliably+0x18a>
 800bb44:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800bb48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb4a:	a90c      	add	r1, sp, #48	; 0x30
 800bb4c:	4640      	mov	r0, r8
 800bb4e:	f7ff fd39 	bl	800b5c4 <read_submessage_list>
 800bb52:	e7c4      	b.n	800bade <listen_message_reliably+0x20a>

0800bb54 <uxr_run_session_until_confirm_delivery>:
 800bb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb58:	4606      	mov	r6, r0
 800bb5a:	460d      	mov	r5, r1
 800bb5c:	f000 fd2c 	bl	800c5b8 <uxr_millis>
 800bb60:	4607      	mov	r7, r0
 800bb62:	4630      	mov	r0, r6
 800bb64:	f7ff fc70 	bl	800b448 <uxr_flash_output_streams>
 800bb68:	2d00      	cmp	r5, #0
 800bb6a:	f106 0808 	add.w	r8, r6, #8
 800bb6e:	bfa8      	it	ge
 800bb70:	462c      	movge	r4, r5
 800bb72:	da07      	bge.n	800bb84 <uxr_run_session_until_confirm_delivery+0x30>
 800bb74:	e00e      	b.n	800bb94 <uxr_run_session_until_confirm_delivery+0x40>
 800bb76:	f7ff fead 	bl	800b8d4 <listen_message_reliably>
 800bb7a:	f000 fd1d 	bl	800c5b8 <uxr_millis>
 800bb7e:	1bc3      	subs	r3, r0, r7
 800bb80:	1aec      	subs	r4, r5, r3
 800bb82:	d407      	bmi.n	800bb94 <uxr_run_session_until_confirm_delivery+0x40>
 800bb84:	4640      	mov	r0, r8
 800bb86:	f000 fcbb 	bl	800c500 <uxr_output_streams_confirmed>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	4621      	mov	r1, r4
 800bb8e:	4630      	mov	r0, r6
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d0f0      	beq.n	800bb76 <uxr_run_session_until_confirm_delivery+0x22>
 800bb94:	4640      	mov	r0, r8
 800bb96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb9a:	f000 bcb1 	b.w	800c500 <uxr_output_streams_confirmed>
 800bb9e:	bf00      	nop

0800bba0 <uxr_run_session_until_all_status>:
 800bba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bba4:	9c08      	ldr	r4, [sp, #32]
 800bba6:	4606      	mov	r6, r0
 800bba8:	460f      	mov	r7, r1
 800bbaa:	4691      	mov	r9, r2
 800bbac:	461d      	mov	r5, r3
 800bbae:	f7ff fc4b 	bl	800b448 <uxr_flash_output_streams>
 800bbb2:	b124      	cbz	r4, 800bbbe <uxr_run_session_until_all_status+0x1e>
 800bbb4:	4622      	mov	r2, r4
 800bbb6:	21ff      	movs	r1, #255	; 0xff
 800bbb8:	4628      	mov	r0, r5
 800bbba:	f006 fc39 	bl	8012430 <memset>
 800bbbe:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 800bbc2:	67f4      	str	r4, [r6, #124]	; 0x7c
 800bbc4:	f000 fcf8 	bl	800c5b8 <uxr_millis>
 800bbc8:	3d01      	subs	r5, #1
 800bbca:	f1a9 0902 	sub.w	r9, r9, #2
 800bbce:	4680      	mov	r8, r0
 800bbd0:	4639      	mov	r1, r7
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	f7ff fe7e 	bl	800b8d4 <listen_message_reliably>
 800bbd8:	f000 fcee 	bl	800c5b8 <uxr_millis>
 800bbdc:	eba0 0008 	sub.w	r0, r0, r8
 800bbe0:	1a39      	subs	r1, r7, r0
 800bbe2:	b344      	cbz	r4, 800bc36 <uxr_run_session_until_all_status+0x96>
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	46ac      	mov	ip, r5
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e002      	b.n	800bbf2 <uxr_run_session_until_all_status+0x52>
 800bbec:	42a3      	cmp	r3, r4
 800bbee:	d20d      	bcs.n	800bc0c <uxr_run_session_until_all_status+0x6c>
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800bbf6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800bbfa:	d1f7      	bne.n	800bbec <uxr_run_session_until_all_status+0x4c>
 800bbfc:	42a3      	cmp	r3, r4
 800bbfe:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800bc02:	d213      	bcs.n	800bc2c <uxr_run_session_until_all_status+0x8c>
 800bc04:	2a00      	cmp	r2, #0
 800bc06:	d0f3      	beq.n	800bbf0 <uxr_run_session_until_all_status+0x50>
 800bc08:	2900      	cmp	r1, #0
 800bc0a:	dce2      	bgt.n	800bbd2 <uxr_run_session_until_all_status+0x32>
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	67f3      	str	r3, [r6, #124]	; 0x7c
 800bc10:	442c      	add	r4, r5
 800bc12:	e001      	b.n	800bc18 <uxr_run_session_until_all_status+0x78>
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d812      	bhi.n	800bc3e <uxr_run_session_until_all_status+0x9e>
 800bc18:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800bc1c:	4284      	cmp	r4, r0
 800bc1e:	d1f9      	bne.n	800bc14 <uxr_run_session_until_all_status+0x74>
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	bf8c      	ite	hi
 800bc24:	2000      	movhi	r0, #0
 800bc26:	2001      	movls	r0, #1
 800bc28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc2c:	2900      	cmp	r1, #0
 800bc2e:	dded      	ble.n	800bc0c <uxr_run_session_until_all_status+0x6c>
 800bc30:	2a00      	cmp	r2, #0
 800bc32:	d1ce      	bne.n	800bbd2 <uxr_run_session_until_all_status+0x32>
 800bc34:	e7ea      	b.n	800bc0c <uxr_run_session_until_all_status+0x6c>
 800bc36:	67f4      	str	r4, [r6, #124]	; 0x7c
 800bc38:	2001      	movs	r0, #1
 800bc3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc3e:	2000      	movs	r0, #0
 800bc40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800bc44 <wait_session_status>:
 800bc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc48:	4604      	mov	r4, r0
 800bc4a:	b09d      	sub	sp, #116	; 0x74
 800bc4c:	20ff      	movs	r0, #255	; 0xff
 800bc4e:	7160      	strb	r0, [r4, #5]
 800bc50:	9303      	str	r3, [sp, #12]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f000 80b6 	beq.w	800bdc4 <wait_session_status+0x180>
 800bc58:	468a      	mov	sl, r1
 800bc5a:	4691      	mov	r9, r2
 800bc5c:	f04f 0b00 	mov.w	fp, #0
 800bc60:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bc62:	464a      	mov	r2, r9
 800bc64:	e9d3 0500 	ldrd	r0, r5, [r3]
 800bc68:	4651      	mov	r1, sl
 800bc6a:	47a8      	blx	r5
 800bc6c:	f000 fca4 	bl	800c5b8 <uxr_millis>
 800bc70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc74:	4605      	mov	r5, r0
 800bc76:	e009      	b.n	800bc8c <wait_session_status+0x48>
 800bc78:	f000 fc9e 	bl	800c5b8 <uxr_millis>
 800bc7c:	1b40      	subs	r0, r0, r5
 800bc7e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	dd40      	ble.n	800bd08 <wait_session_status+0xc4>
 800bc86:	7960      	ldrb	r0, [r4, #5]
 800bc88:	28ff      	cmp	r0, #255	; 0xff
 800bc8a:	d145      	bne.n	800bd18 <wait_session_status+0xd4>
 800bc8c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800bc8e:	a908      	add	r1, sp, #32
 800bc90:	6896      	ldr	r6, [r2, #8]
 800bc92:	6810      	ldr	r0, [r2, #0]
 800bc94:	aa09      	add	r2, sp, #36	; 0x24
 800bc96:	47b0      	blx	r6
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d0ed      	beq.n	800bc78 <wait_session_status+0x34>
 800bc9c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800bca0:	a80c      	add	r0, sp, #48	; 0x30
 800bca2:	f7ff f8b9 	bl	800ae18 <ucdr_init_buffer>
 800bca6:	2600      	movs	r6, #0
 800bca8:	f10d 031e 	add.w	r3, sp, #30
 800bcac:	aa07      	add	r2, sp, #28
 800bcae:	a90c      	add	r1, sp, #48	; 0x30
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	f88d 601c 	strb.w	r6, [sp, #28]
 800bcb6:	f000 fa87 	bl	800c1c8 <uxr_read_session_header>
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	d0dc      	beq.n	800bc78 <wait_session_status+0x34>
 800bcbe:	4631      	mov	r1, r6
 800bcc0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800bcc4:	f000 fb24 	bl	800c310 <uxr_stream_id_from_raw>
 800bcc8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800bccc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800bcd0:	9302      	str	r3, [sp, #8]
 800bcd2:	2f01      	cmp	r7, #1
 800bcd4:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800bcd8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800bcdc:	d05c      	beq.n	800bd98 <wait_session_status+0x154>
 800bcde:	2f02      	cmp	r7, #2
 800bce0:	d020      	beq.n	800bd24 <wait_session_status+0xe0>
 800bce2:	2f00      	cmp	r7, #0
 800bce4:	d1c8      	bne.n	800bc78 <wait_session_status+0x34>
 800bce6:	4639      	mov	r1, r7
 800bce8:	4638      	mov	r0, r7
 800bcea:	f000 fb11 	bl	800c310 <uxr_stream_id_from_raw>
 800bcee:	a90c      	add	r1, sp, #48	; 0x30
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	900b      	str	r0, [sp, #44]	; 0x2c
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	f7ff fc65 	bl	800b5c4 <read_submessage_list>
 800bcfa:	f000 fc5d 	bl	800c5b8 <uxr_millis>
 800bcfe:	1b40      	subs	r0, r0, r5
 800bd00:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	dcbe      	bgt.n	800bc86 <wait_session_status+0x42>
 800bd08:	9b03      	ldr	r3, [sp, #12]
 800bd0a:	7960      	ldrb	r0, [r4, #5]
 800bd0c:	f10b 0b01 	add.w	fp, fp, #1
 800bd10:	455b      	cmp	r3, fp
 800bd12:	d001      	beq.n	800bd18 <wait_session_status+0xd4>
 800bd14:	28ff      	cmp	r0, #255	; 0xff
 800bd16:	d0a3      	beq.n	800bc60 <wait_session_status+0x1c>
 800bd18:	38ff      	subs	r0, #255	; 0xff
 800bd1a:	bf18      	it	ne
 800bd1c:	2001      	movne	r0, #1
 800bd1e:	b01d      	add	sp, #116	; 0x74
 800bd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd24:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800bd28:	9304      	str	r3, [sp, #16]
 800bd2a:	4631      	mov	r1, r6
 800bd2c:	f104 0008 	add.w	r0, r4, #8
 800bd30:	f000 fbdc 	bl	800c4ec <uxr_get_input_reliable_stream>
 800bd34:	4680      	mov	r8, r0
 800bd36:	b348      	cbz	r0, 800bd8c <wait_session_status+0x148>
 800bd38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd3a:	9205      	str	r2, [sp, #20]
 800bd3c:	a80c      	add	r0, sp, #48	; 0x30
 800bd3e:	f7ff f89b 	bl	800ae78 <ucdr_buffer_remaining>
 800bd42:	4603      	mov	r3, r0
 800bd44:	f10d 001d 	add.w	r0, sp, #29
 800bd48:	9000      	str	r0, [sp, #0]
 800bd4a:	9a05      	ldr	r2, [sp, #20]
 800bd4c:	9902      	ldr	r1, [sp, #8]
 800bd4e:	4640      	mov	r0, r8
 800bd50:	f004 f8ea 	bl	800ff28 <uxr_receive_reliable_message>
 800bd54:	b1d0      	cbz	r0, 800bd8c <wait_session_status+0x148>
 800bd56:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d03a      	beq.n	800bdd4 <wait_session_status+0x190>
 800bd5e:	9f04      	ldr	r7, [sp, #16]
 800bd60:	e00a      	b.n	800bd78 <wait_session_status+0x134>
 800bd62:	f04f 0302 	mov.w	r3, #2
 800bd66:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800bd6a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800bd6e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800bd72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd74:	f7ff fc26 	bl	800b5c4 <read_submessage_list>
 800bd78:	a914      	add	r1, sp, #80	; 0x50
 800bd7a:	2204      	movs	r2, #4
 800bd7c:	4640      	mov	r0, r8
 800bd7e:	f004 f953 	bl	8010028 <uxr_next_input_reliable_buffer_available>
 800bd82:	4603      	mov	r3, r0
 800bd84:	a914      	add	r1, sp, #80	; 0x50
 800bd86:	4620      	mov	r0, r4
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d1ea      	bne.n	800bd62 <wait_session_status+0x11e>
 800bd8c:	9904      	ldr	r1, [sp, #16]
 800bd8e:	4632      	mov	r2, r6
 800bd90:	4620      	mov	r0, r4
 800bd92:	f7ff fa93 	bl	800b2bc <write_submessage_acknack.isra.0>
 800bd96:	e76f      	b.n	800bc78 <wait_session_status+0x34>
 800bd98:	4631      	mov	r1, r6
 800bd9a:	f104 0008 	add.w	r0, r4, #8
 800bd9e:	f000 fb9b 	bl	800c4d8 <uxr_get_input_best_effort_stream>
 800bda2:	2800      	cmp	r0, #0
 800bda4:	f43f af68 	beq.w	800bc78 <wait_session_status+0x34>
 800bda8:	9902      	ldr	r1, [sp, #8]
 800bdaa:	f004 f829 	bl	800fe00 <uxr_receive_best_effort_message>
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	f43f af62 	beq.w	800bc78 <wait_session_status+0x34>
 800bdb4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800bdb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bdba:	a90c      	add	r1, sp, #48	; 0x30
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	f7ff fc01 	bl	800b5c4 <read_submessage_list>
 800bdc2:	e759      	b.n	800bc78 <wait_session_status+0x34>
 800bdc4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bdc6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800bdca:	47a0      	blx	r4
 800bdcc:	2001      	movs	r0, #1
 800bdce:	b01d      	add	sp, #116	; 0x74
 800bdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800bdd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bdda:	a90c      	add	r1, sp, #48	; 0x30
 800bddc:	4620      	mov	r0, r4
 800bdde:	f7ff fbf1 	bl	800b5c4 <read_submessage_list>
 800bde2:	e7bc      	b.n	800bd5e <wait_session_status+0x11a>

0800bde4 <uxr_delete_session_retries>:
 800bde4:	b530      	push	{r4, r5, lr}
 800bde6:	b08f      	sub	sp, #60	; 0x3c
 800bde8:	4604      	mov	r4, r0
 800bdea:	460d      	mov	r5, r1
 800bdec:	f000 fa2e 	bl	800c24c <uxr_session_header_offset>
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	2210      	movs	r2, #16
 800bdf4:	9000      	str	r0, [sp, #0]
 800bdf6:	a902      	add	r1, sp, #8
 800bdf8:	a806      	add	r0, sp, #24
 800bdfa:	f7fe fffb 	bl	800adf4 <ucdr_init_buffer_origin_offset>
 800bdfe:	a906      	add	r1, sp, #24
 800be00:	4620      	mov	r0, r4
 800be02:	f000 f973 	bl	800c0ec <uxr_buffer_delete_session>
 800be06:	2200      	movs	r2, #0
 800be08:	4611      	mov	r1, r2
 800be0a:	9b06      	ldr	r3, [sp, #24]
 800be0c:	4620      	mov	r0, r4
 800be0e:	f000 f9c7 	bl	800c1a0 <uxr_stamp_session_header>
 800be12:	a806      	add	r0, sp, #24
 800be14:	f7ff f82c 	bl	800ae70 <ucdr_buffer_length>
 800be18:	462b      	mov	r3, r5
 800be1a:	4602      	mov	r2, r0
 800be1c:	a902      	add	r1, sp, #8
 800be1e:	4620      	mov	r0, r4
 800be20:	f7ff ff10 	bl	800bc44 <wait_session_status>
 800be24:	b118      	cbz	r0, 800be2e <uxr_delete_session_retries+0x4a>
 800be26:	7960      	ldrb	r0, [r4, #5]
 800be28:	fab0 f080 	clz	r0, r0
 800be2c:	0940      	lsrs	r0, r0, #5
 800be2e:	b00f      	add	sp, #60	; 0x3c
 800be30:	bd30      	pop	{r4, r5, pc}
 800be32:	bf00      	nop

0800be34 <uxr_create_session>:
 800be34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be38:	f100 0b08 	add.w	fp, r0, #8
 800be3c:	b0ab      	sub	sp, #172	; 0xac
 800be3e:	4604      	mov	r4, r0
 800be40:	4658      	mov	r0, fp
 800be42:	f000 fa99 	bl	800c378 <uxr_reset_stream_storage>
 800be46:	4620      	mov	r0, r4
 800be48:	f000 fa00 	bl	800c24c <uxr_session_header_offset>
 800be4c:	2300      	movs	r3, #0
 800be4e:	9000      	str	r0, [sp, #0]
 800be50:	221c      	movs	r2, #28
 800be52:	a90b      	add	r1, sp, #44	; 0x2c
 800be54:	a812      	add	r0, sp, #72	; 0x48
 800be56:	f7fe ffcd 	bl	800adf4 <ucdr_init_buffer_origin_offset>
 800be5a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800be5c:	8a1a      	ldrh	r2, [r3, #16]
 800be5e:	3a04      	subs	r2, #4
 800be60:	b292      	uxth	r2, r2
 800be62:	a912      	add	r1, sp, #72	; 0x48
 800be64:	4620      	mov	r0, r4
 800be66:	f000 f917 	bl	800c098 <uxr_buffer_create_session>
 800be6a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800be6c:	4620      	mov	r0, r4
 800be6e:	f000 f983 	bl	800c178 <uxr_stamp_create_session_header>
 800be72:	a812      	add	r0, sp, #72	; 0x48
 800be74:	f7fe fffc 	bl	800ae70 <ucdr_buffer_length>
 800be78:	23ff      	movs	r3, #255	; 0xff
 800be7a:	7163      	strb	r3, [r4, #5]
 800be7c:	230a      	movs	r3, #10
 800be7e:	46da      	mov	sl, fp
 800be80:	9303      	str	r3, [sp, #12]
 800be82:	4683      	mov	fp, r0
 800be84:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800be86:	465a      	mov	r2, fp
 800be88:	e9d3 0500 	ldrd	r0, r5, [r3]
 800be8c:	a90b      	add	r1, sp, #44	; 0x2c
 800be8e:	47a8      	blx	r5
 800be90:	f000 fb92 	bl	800c5b8 <uxr_millis>
 800be94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800be98:	4605      	mov	r5, r0
 800be9a:	e009      	b.n	800beb0 <uxr_create_session+0x7c>
 800be9c:	f000 fb8c 	bl	800c5b8 <uxr_millis>
 800bea0:	1b40      	subs	r0, r0, r5
 800bea2:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	7962      	ldrb	r2, [r4, #5]
 800beaa:	dd38      	ble.n	800bf1e <uxr_create_session+0xea>
 800beac:	2aff      	cmp	r2, #255	; 0xff
 800beae:	d13c      	bne.n	800bf2a <uxr_create_session+0xf6>
 800beb0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800beb2:	a907      	add	r1, sp, #28
 800beb4:	6896      	ldr	r6, [r2, #8]
 800beb6:	6810      	ldr	r0, [r2, #0]
 800beb8:	aa08      	add	r2, sp, #32
 800beba:	47b0      	blx	r6
 800bebc:	2800      	cmp	r0, #0
 800bebe:	d0ed      	beq.n	800be9c <uxr_create_session+0x68>
 800bec0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800bec4:	a81a      	add	r0, sp, #104	; 0x68
 800bec6:	f7fe ffa7 	bl	800ae18 <ucdr_init_buffer>
 800beca:	2600      	movs	r6, #0
 800becc:	f10d 031a 	add.w	r3, sp, #26
 800bed0:	aa06      	add	r2, sp, #24
 800bed2:	a91a      	add	r1, sp, #104	; 0x68
 800bed4:	4620      	mov	r0, r4
 800bed6:	f88d 6018 	strb.w	r6, [sp, #24]
 800beda:	f000 f975 	bl	800c1c8 <uxr_read_session_header>
 800bede:	2800      	cmp	r0, #0
 800bee0:	d0dc      	beq.n	800be9c <uxr_create_session+0x68>
 800bee2:	4631      	mov	r1, r6
 800bee4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800bee8:	f000 fa12 	bl	800c310 <uxr_stream_id_from_raw>
 800beec:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800bef0:	2e01      	cmp	r6, #1
 800bef2:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800bef6:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800befa:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800befe:	d053      	beq.n	800bfa8 <uxr_create_session+0x174>
 800bf00:	2e02      	cmp	r6, #2
 800bf02:	d018      	beq.n	800bf36 <uxr_create_session+0x102>
 800bf04:	2e00      	cmp	r6, #0
 800bf06:	d1c9      	bne.n	800be9c <uxr_create_session+0x68>
 800bf08:	4631      	mov	r1, r6
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	f000 fa00 	bl	800c310 <uxr_stream_id_from_raw>
 800bf10:	a91a      	add	r1, sp, #104	; 0x68
 800bf12:	4602      	mov	r2, r0
 800bf14:	900a      	str	r0, [sp, #40]	; 0x28
 800bf16:	4620      	mov	r0, r4
 800bf18:	f7ff fb54 	bl	800b5c4 <read_submessage_list>
 800bf1c:	e7be      	b.n	800be9c <uxr_create_session+0x68>
 800bf1e:	9b03      	ldr	r3, [sp, #12]
 800bf20:	3b01      	subs	r3, #1
 800bf22:	9303      	str	r3, [sp, #12]
 800bf24:	d001      	beq.n	800bf2a <uxr_create_session+0xf6>
 800bf26:	2aff      	cmp	r2, #255	; 0xff
 800bf28:	d0ac      	beq.n	800be84 <uxr_create_session+0x50>
 800bf2a:	2a00      	cmp	r2, #0
 800bf2c:	d051      	beq.n	800bfd2 <uxr_create_session+0x19e>
 800bf2e:	2000      	movs	r0, #0
 800bf30:	b02b      	add	sp, #172	; 0xac
 800bf32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf36:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800bf3a:	9304      	str	r3, [sp, #16]
 800bf3c:	4639      	mov	r1, r7
 800bf3e:	4650      	mov	r0, sl
 800bf40:	f000 fad4 	bl	800c4ec <uxr_get_input_reliable_stream>
 800bf44:	4680      	mov	r8, r0
 800bf46:	b348      	cbz	r0, 800bf9c <uxr_create_session+0x168>
 800bf48:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bf4a:	9205      	str	r2, [sp, #20]
 800bf4c:	a81a      	add	r0, sp, #104	; 0x68
 800bf4e:	f7fe ff93 	bl	800ae78 <ucdr_buffer_remaining>
 800bf52:	4603      	mov	r3, r0
 800bf54:	f10d 0019 	add.w	r0, sp, #25
 800bf58:	9000      	str	r0, [sp, #0]
 800bf5a:	9a05      	ldr	r2, [sp, #20]
 800bf5c:	4649      	mov	r1, r9
 800bf5e:	4640      	mov	r0, r8
 800bf60:	f003 ffe2 	bl	800ff28 <uxr_receive_reliable_message>
 800bf64:	b1d0      	cbz	r0, 800bf9c <uxr_create_session+0x168>
 800bf66:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d038      	beq.n	800bfe0 <uxr_create_session+0x1ac>
 800bf6e:	9e04      	ldr	r6, [sp, #16]
 800bf70:	e00a      	b.n	800bf88 <uxr_create_session+0x154>
 800bf72:	f04f 0302 	mov.w	r3, #2
 800bf76:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 800bf7a:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800bf7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf84:	f7ff fb1e 	bl	800b5c4 <read_submessage_list>
 800bf88:	a922      	add	r1, sp, #136	; 0x88
 800bf8a:	2204      	movs	r2, #4
 800bf8c:	4640      	mov	r0, r8
 800bf8e:	f004 f84b 	bl	8010028 <uxr_next_input_reliable_buffer_available>
 800bf92:	4603      	mov	r3, r0
 800bf94:	a922      	add	r1, sp, #136	; 0x88
 800bf96:	4620      	mov	r0, r4
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d1ea      	bne.n	800bf72 <uxr_create_session+0x13e>
 800bf9c:	9904      	ldr	r1, [sp, #16]
 800bf9e:	463a      	mov	r2, r7
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	f7ff f98b 	bl	800b2bc <write_submessage_acknack.isra.0>
 800bfa6:	e779      	b.n	800be9c <uxr_create_session+0x68>
 800bfa8:	4639      	mov	r1, r7
 800bfaa:	4650      	mov	r0, sl
 800bfac:	f000 fa94 	bl	800c4d8 <uxr_get_input_best_effort_stream>
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	f43f af73 	beq.w	800be9c <uxr_create_session+0x68>
 800bfb6:	4649      	mov	r1, r9
 800bfb8:	f003 ff22 	bl	800fe00 <uxr_receive_best_effort_message>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	f43f af6d 	beq.w	800be9c <uxr_create_session+0x68>
 800bfc2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800bfc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfc8:	a91a      	add	r1, sp, #104	; 0x68
 800bfca:	4620      	mov	r0, r4
 800bfcc:	f7ff fafa 	bl	800b5c4 <read_submessage_list>
 800bfd0:	e764      	b.n	800be9c <uxr_create_session+0x68>
 800bfd2:	4650      	mov	r0, sl
 800bfd4:	f000 f9d0 	bl	800c378 <uxr_reset_stream_storage>
 800bfd8:	2001      	movs	r0, #1
 800bfda:	b02b      	add	sp, #172	; 0xac
 800bfdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe0:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800bfe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfe6:	a91a      	add	r1, sp, #104	; 0x68
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f7ff faeb 	bl	800b5c4 <read_submessage_list>
 800bfee:	e7be      	b.n	800bf6e <uxr_create_session+0x13a>

0800bff0 <uxr_prepare_stream_to_write_submessage>:
 800bff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bff4:	b082      	sub	sp, #8
 800bff6:	4682      	mov	sl, r0
 800bff8:	4610      	mov	r0, r2
 800bffa:	4615      	mov	r5, r2
 800bffc:	461e      	mov	r6, r3
 800bffe:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800c002:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800c006:	9101      	str	r1, [sp, #4]
 800c008:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800c00c:	f000 face 	bl	800c5ac <uxr_submessage_padding>
 800c010:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c014:	f105 0904 	add.w	r9, r5, #4
 800c018:	2b01      	cmp	r3, #1
 800c01a:	4481      	add	r9, r0
 800c01c:	d01d      	beq.n	800c05a <uxr_prepare_stream_to_write_submessage+0x6a>
 800c01e:	2b02      	cmp	r3, #2
 800c020:	d116      	bne.n	800c050 <uxr_prepare_stream_to_write_submessage+0x60>
 800c022:	4621      	mov	r1, r4
 800c024:	f10a 0008 	add.w	r0, sl, #8
 800c028:	f000 fa4c 	bl	800c4c4 <uxr_get_output_reliable_stream>
 800c02c:	4604      	mov	r4, r0
 800c02e:	b158      	cbz	r0, 800c048 <uxr_prepare_stream_to_write_submessage+0x58>
 800c030:	4649      	mov	r1, r9
 800c032:	4632      	mov	r2, r6
 800c034:	f004 f9b4 	bl	80103a0 <uxr_prepare_reliable_buffer_to_write>
 800c038:	4604      	mov	r4, r0
 800c03a:	b12c      	cbz	r4, 800c048 <uxr_prepare_stream_to_write_submessage+0x58>
 800c03c:	4643      	mov	r3, r8
 800c03e:	b2aa      	uxth	r2, r5
 800c040:	4639      	mov	r1, r7
 800c042:	4630      	mov	r0, r6
 800c044:	f000 fa72 	bl	800c52c <uxr_buffer_submessage_header>
 800c048:	4620      	mov	r0, r4
 800c04a:	b002      	add	sp, #8
 800c04c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c050:	2400      	movs	r4, #0
 800c052:	4620      	mov	r0, r4
 800c054:	b002      	add	sp, #8
 800c056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c05a:	4621      	mov	r1, r4
 800c05c:	f10a 0008 	add.w	r0, sl, #8
 800c060:	f000 fa28 	bl	800c4b4 <uxr_get_output_best_effort_stream>
 800c064:	4604      	mov	r4, r0
 800c066:	2800      	cmp	r0, #0
 800c068:	d0ee      	beq.n	800c048 <uxr_prepare_stream_to_write_submessage+0x58>
 800c06a:	4649      	mov	r1, r9
 800c06c:	4632      	mov	r2, r6
 800c06e:	f004 f8c7 	bl	8010200 <uxr_prepare_best_effort_buffer_to_write>
 800c072:	4604      	mov	r4, r0
 800c074:	e7e1      	b.n	800c03a <uxr_prepare_stream_to_write_submessage+0x4a>
 800c076:	bf00      	nop

0800c078 <uxr_init_session_info>:
 800c078:	0e13      	lsrs	r3, r2, #24
 800c07a:	7043      	strb	r3, [r0, #1]
 800c07c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800c080:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c084:	7001      	strb	r1, [r0, #0]
 800c086:	70c3      	strb	r3, [r0, #3]
 800c088:	2109      	movs	r1, #9
 800c08a:	23ff      	movs	r3, #255	; 0xff
 800c08c:	f880 c002 	strb.w	ip, [r0, #2]
 800c090:	7102      	strb	r2, [r0, #4]
 800c092:	80c1      	strh	r1, [r0, #6]
 800c094:	7143      	strb	r3, [r0, #5]
 800c096:	4770      	bx	lr

0800c098 <uxr_buffer_create_session>:
 800c098:	b530      	push	{r4, r5, lr}
 800c09a:	b089      	sub	sp, #36	; 0x24
 800c09c:	2300      	movs	r3, #0
 800c09e:	4d12      	ldr	r5, [pc, #72]	; (800c0e8 <uxr_buffer_create_session+0x50>)
 800c0a0:	9307      	str	r3, [sp, #28]
 800c0a2:	f8ad 201c 	strh.w	r2, [sp, #28]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	9301      	str	r3, [sp, #4]
 800c0aa:	80c2      	strh	r2, [r0, #6]
 800c0ac:	f88d 2004 	strb.w	r2, [sp, #4]
 800c0b0:	682a      	ldr	r2, [r5, #0]
 800c0b2:	9200      	str	r2, [sp, #0]
 800c0b4:	88aa      	ldrh	r2, [r5, #4]
 800c0b6:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c0ba:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800c0be:	9202      	str	r2, [sp, #8]
 800c0c0:	460c      	mov	r4, r1
 800c0c2:	7802      	ldrb	r2, [r0, #0]
 800c0c4:	9303      	str	r3, [sp, #12]
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	f88d 200c 	strb.w	r2, [sp, #12]
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	2210      	movs	r2, #16
 800c0d0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800c0d4:	9306      	str	r3, [sp, #24]
 800c0d6:	f000 fa29 	bl	800c52c <uxr_buffer_submessage_header>
 800c0da:	4669      	mov	r1, sp
 800c0dc:	4620      	mov	r0, r4
 800c0de:	f001 f981 	bl	800d3e4 <uxr_serialize_CREATE_CLIENT_Payload>
 800c0e2:	b009      	add	sp, #36	; 0x24
 800c0e4:	bd30      	pop	{r4, r5, pc}
 800c0e6:	bf00      	nop
 800c0e8:	08013504 	.word	0x08013504

0800c0ec <uxr_buffer_delete_session>:
 800c0ec:	b510      	push	{r4, lr}
 800c0ee:	4b0c      	ldr	r3, [pc, #48]	; (800c120 <uxr_buffer_delete_session+0x34>)
 800c0f0:	b082      	sub	sp, #8
 800c0f2:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800c0f6:	f8ad c006 	strh.w	ip, [sp, #6]
 800c0fa:	460c      	mov	r4, r1
 800c0fc:	2202      	movs	r2, #2
 800c0fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c102:	80c2      	strh	r2, [r0, #6]
 800c104:	f8ad 3004 	strh.w	r3, [sp, #4]
 800c108:	2204      	movs	r2, #4
 800c10a:	2300      	movs	r3, #0
 800c10c:	2103      	movs	r1, #3
 800c10e:	4620      	mov	r0, r4
 800c110:	f000 fa0c 	bl	800c52c <uxr_buffer_submessage_header>
 800c114:	a901      	add	r1, sp, #4
 800c116:	4620      	mov	r0, r4
 800c118:	f001 fa0a 	bl	800d530 <uxr_serialize_DELETE_Payload>
 800c11c:	b002      	add	sp, #8
 800c11e:	bd10      	pop	{r4, pc}
 800c120:	08013504 	.word	0x08013504

0800c124 <uxr_read_create_session_status>:
 800c124:	b510      	push	{r4, lr}
 800c126:	b088      	sub	sp, #32
 800c128:	4604      	mov	r4, r0
 800c12a:	4608      	mov	r0, r1
 800c12c:	a901      	add	r1, sp, #4
 800c12e:	f001 fa0f 	bl	800d550 <uxr_deserialize_STATUS_AGENT_Payload>
 800c132:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c136:	7163      	strb	r3, [r4, #5]
 800c138:	b008      	add	sp, #32
 800c13a:	bd10      	pop	{r4, pc}

0800c13c <uxr_read_delete_session_status>:
 800c13c:	b510      	push	{r4, lr}
 800c13e:	4604      	mov	r4, r0
 800c140:	b084      	sub	sp, #16
 800c142:	4608      	mov	r0, r1
 800c144:	a902      	add	r1, sp, #8
 800c146:	f001 fa33 	bl	800d5b0 <uxr_deserialize_STATUS_Payload>
 800c14a:	88e3      	ldrh	r3, [r4, #6]
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d001      	beq.n	800c154 <uxr_read_delete_session_status+0x18>
 800c150:	b004      	add	sp, #16
 800c152:	bd10      	pop	{r4, pc}
 800c154:	f10d 000a 	add.w	r0, sp, #10
 800c158:	f7ff f836 	bl	800b1c8 <uxr_object_id_from_raw>
 800c15c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800c160:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800c164:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c168:	b29b      	uxth	r3, r3
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	bf04      	itt	eq
 800c16e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800c172:	7163      	strbeq	r3, [r4, #5]
 800c174:	b004      	add	sp, #16
 800c176:	bd10      	pop	{r4, pc}

0800c178 <uxr_stamp_create_session_header>:
 800c178:	b510      	push	{r4, lr}
 800c17a:	2208      	movs	r2, #8
 800c17c:	b08a      	sub	sp, #40	; 0x28
 800c17e:	4604      	mov	r4, r0
 800c180:	eb0d 0002 	add.w	r0, sp, r2
 800c184:	f7fe fe48 	bl	800ae18 <ucdr_init_buffer>
 800c188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c18c:	9400      	str	r4, [sp, #0]
 800c18e:	2300      	movs	r3, #0
 800c190:	461a      	mov	r2, r3
 800c192:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800c196:	a802      	add	r0, sp, #8
 800c198:	f000 fbc2 	bl	800c920 <uxr_serialize_message_header>
 800c19c:	b00a      	add	sp, #40	; 0x28
 800c19e:	bd10      	pop	{r4, pc}

0800c1a0 <uxr_stamp_session_header>:
 800c1a0:	b530      	push	{r4, r5, lr}
 800c1a2:	b08d      	sub	sp, #52	; 0x34
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	460d      	mov	r5, r1
 800c1a8:	9203      	str	r2, [sp, #12]
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	a804      	add	r0, sp, #16
 800c1ae:	2208      	movs	r2, #8
 800c1b0:	f7fe fe32 	bl	800ae18 <ucdr_init_buffer>
 800c1b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1b8:	9b03      	ldr	r3, [sp, #12]
 800c1ba:	9400      	str	r4, [sp, #0]
 800c1bc:	462a      	mov	r2, r5
 800c1be:	a804      	add	r0, sp, #16
 800c1c0:	f000 fbae 	bl	800c920 <uxr_serialize_message_header>
 800c1c4:	b00d      	add	sp, #52	; 0x34
 800c1c6:	bd30      	pop	{r4, r5, pc}

0800c1c8 <uxr_read_session_header>:
 800c1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1cc:	4607      	mov	r7, r0
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	4608      	mov	r0, r1
 800c1d2:	460c      	mov	r4, r1
 800c1d4:	4615      	mov	r5, r2
 800c1d6:	461e      	mov	r6, r3
 800c1d8:	f7fe fe4e 	bl	800ae78 <ucdr_buffer_remaining>
 800c1dc:	2808      	cmp	r0, #8
 800c1de:	d803      	bhi.n	800c1e8 <uxr_read_session_header+0x20>
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	b004      	add	sp, #16
 800c1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1e8:	f10d 080c 	add.w	r8, sp, #12
 800c1ec:	4633      	mov	r3, r6
 800c1ee:	462a      	mov	r2, r5
 800c1f0:	f8cd 8000 	str.w	r8, [sp]
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	f10d 010b 	add.w	r1, sp, #11
 800c1fa:	f000 fbaf 	bl	800c95c <uxr_deserialize_message_header>
 800c1fe:	783a      	ldrb	r2, [r7, #0]
 800c200:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800c204:	4293      	cmp	r3, r2
 800c206:	d1eb      	bne.n	800c1e0 <uxr_read_session_header+0x18>
 800c208:	061b      	lsls	r3, r3, #24
 800c20a:	d41c      	bmi.n	800c246 <uxr_read_session_header+0x7e>
 800c20c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800c210:	787b      	ldrb	r3, [r7, #1]
 800c212:	429a      	cmp	r2, r3
 800c214:	d003      	beq.n	800c21e <uxr_read_session_header+0x56>
 800c216:	2001      	movs	r0, #1
 800c218:	f080 0001 	eor.w	r0, r0, #1
 800c21c:	e7e1      	b.n	800c1e2 <uxr_read_session_header+0x1a>
 800c21e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800c222:	78bb      	ldrb	r3, [r7, #2]
 800c224:	429a      	cmp	r2, r3
 800c226:	f107 0102 	add.w	r1, r7, #2
 800c22a:	d1f4      	bne.n	800c216 <uxr_read_session_header+0x4e>
 800c22c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800c230:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c234:	429a      	cmp	r2, r3
 800c236:	d1ee      	bne.n	800c216 <uxr_read_session_header+0x4e>
 800c238:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800c23c:	784b      	ldrb	r3, [r1, #1]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d1e9      	bne.n	800c216 <uxr_read_session_header+0x4e>
 800c242:	2000      	movs	r0, #0
 800c244:	e7e8      	b.n	800c218 <uxr_read_session_header+0x50>
 800c246:	2001      	movs	r0, #1
 800c248:	e7cb      	b.n	800c1e2 <uxr_read_session_header+0x1a>
 800c24a:	bf00      	nop

0800c24c <uxr_session_header_offset>:
 800c24c:	f990 3000 	ldrsb.w	r3, [r0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	bfac      	ite	ge
 800c254:	2008      	movge	r0, #8
 800c256:	2004      	movlt	r0, #4
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop

0800c25c <uxr_init_base_object_request>:
 800c25c:	b510      	push	{r4, lr}
 800c25e:	88c3      	ldrh	r3, [r0, #6]
 800c260:	b082      	sub	sp, #8
 800c262:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800c266:	9101      	str	r1, [sp, #4]
 800c268:	f1a3 010a 	sub.w	r1, r3, #10
 800c26c:	b289      	uxth	r1, r1
 800c26e:	42a1      	cmp	r1, r4
 800c270:	d80e      	bhi.n	800c290 <uxr_init_base_object_request+0x34>
 800c272:	3301      	adds	r3, #1
 800c274:	b29c      	uxth	r4, r3
 800c276:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	80c4      	strh	r4, [r0, #6]
 800c27e:	9801      	ldr	r0, [sp, #4]
 800c280:	7011      	strb	r1, [r2, #0]
 800c282:	7053      	strb	r3, [r2, #1]
 800c284:	1c91      	adds	r1, r2, #2
 800c286:	f7fe ffb3 	bl	800b1f0 <uxr_object_id_to_raw>
 800c28a:	4620      	mov	r0, r4
 800c28c:	b002      	add	sp, #8
 800c28e:	bd10      	pop	{r4, pc}
 800c290:	230a      	movs	r3, #10
 800c292:	2100      	movs	r1, #0
 800c294:	461c      	mov	r4, r3
 800c296:	e7f1      	b.n	800c27c <uxr_init_base_object_request+0x20>

0800c298 <uxr_parse_base_object_request>:
 800c298:	b570      	push	{r4, r5, r6, lr}
 800c29a:	4604      	mov	r4, r0
 800c29c:	3002      	adds	r0, #2
 800c29e:	460d      	mov	r5, r1
 800c2a0:	4616      	mov	r6, r2
 800c2a2:	f7fe ff91 	bl	800b1c8 <uxr_object_id_from_raw>
 800c2a6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800c2aa:	8028      	strh	r0, [r5, #0]
 800c2ac:	806b      	strh	r3, [r5, #2]
 800c2ae:	7822      	ldrb	r2, [r4, #0]
 800c2b0:	7863      	ldrb	r3, [r4, #1]
 800c2b2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c2b6:	8033      	strh	r3, [r6, #0]
 800c2b8:	bd70      	pop	{r4, r5, r6, pc}
 800c2ba:	bf00      	nop

0800c2bc <uxr_stream_id>:
 800c2bc:	2901      	cmp	r1, #1
 800c2be:	b082      	sub	sp, #8
 800c2c0:	d01d      	beq.n	800c2fe <uxr_stream_id+0x42>
 800c2c2:	2902      	cmp	r1, #2
 800c2c4:	f04f 0c00 	mov.w	ip, #0
 800c2c8:	d01e      	beq.n	800c308 <uxr_stream_id+0x4c>
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	f36c 0307 	bfi	r3, ip, #0, #8
 800c2d0:	f360 230f 	bfi	r3, r0, #8, #8
 800c2d4:	f361 4317 	bfi	r3, r1, #16, #8
 800c2d8:	f362 631f 	bfi	r3, r2, #24, #8
 800c2dc:	b2da      	uxtb	r2, r3
 800c2de:	2000      	movs	r0, #0
 800c2e0:	f362 0007 	bfi	r0, r2, #0, #8
 800c2e4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c2e8:	f362 200f 	bfi	r0, r2, #8, #8
 800c2ec:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c2f0:	f362 4017 	bfi	r0, r2, #16, #8
 800c2f4:	0e1b      	lsrs	r3, r3, #24
 800c2f6:	f363 601f 	bfi	r0, r3, #24, #8
 800c2fa:	b002      	add	sp, #8
 800c2fc:	4770      	bx	lr
 800c2fe:	f100 0c01 	add.w	ip, r0, #1
 800c302:	fa5f fc8c 	uxtb.w	ip, ip
 800c306:	e7e0      	b.n	800c2ca <uxr_stream_id+0xe>
 800c308:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 800c30c:	e7dd      	b.n	800c2ca <uxr_stream_id+0xe>
 800c30e:	bf00      	nop

0800c310 <uxr_stream_id_from_raw>:
 800c310:	b082      	sub	sp, #8
 800c312:	b130      	cbz	r0, 800c322 <uxr_stream_id_from_raw+0x12>
 800c314:	0603      	lsls	r3, r0, #24
 800c316:	d420      	bmi.n	800c35a <uxr_stream_id_from_raw+0x4a>
 800c318:	1e42      	subs	r2, r0, #1
 800c31a:	b2d2      	uxtb	r2, r2
 800c31c:	f04f 0c01 	mov.w	ip, #1
 800c320:	e001      	b.n	800c326 <uxr_stream_id_from_raw+0x16>
 800c322:	4684      	mov	ip, r0
 800c324:	4602      	mov	r2, r0
 800c326:	2300      	movs	r3, #0
 800c328:	f360 0307 	bfi	r3, r0, #0, #8
 800c32c:	f362 230f 	bfi	r3, r2, #8, #8
 800c330:	f36c 4317 	bfi	r3, ip, #16, #8
 800c334:	f361 631f 	bfi	r3, r1, #24, #8
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	2000      	movs	r0, #0
 800c33c:	f362 0007 	bfi	r0, r2, #0, #8
 800c340:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c344:	f362 200f 	bfi	r0, r2, #8, #8
 800c348:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c34c:	f362 4017 	bfi	r0, r2, #16, #8
 800c350:	0e1b      	lsrs	r3, r3, #24
 800c352:	f363 601f 	bfi	r0, r3, #24, #8
 800c356:	b002      	add	sp, #8
 800c358:	4770      	bx	lr
 800c35a:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800c35e:	f04f 0c02 	mov.w	ip, #2
 800c362:	e7e0      	b.n	800c326 <uxr_stream_id_from_raw+0x16>

0800c364 <uxr_init_stream_storage>:
 800c364:	2300      	movs	r3, #0
 800c366:	7403      	strb	r3, [r0, #16]
 800c368:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800c36c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800c370:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop

0800c378 <uxr_reset_stream_storage>:
 800c378:	b570      	push	{r4, r5, r6, lr}
 800c37a:	7c03      	ldrb	r3, [r0, #16]
 800c37c:	4604      	mov	r4, r0
 800c37e:	b153      	cbz	r3, 800c396 <uxr_reset_stream_storage+0x1e>
 800c380:	4606      	mov	r6, r0
 800c382:	2500      	movs	r5, #0
 800c384:	4630      	mov	r0, r6
 800c386:	f003 ff35 	bl	80101f4 <uxr_reset_output_best_effort_stream>
 800c38a:	7c23      	ldrb	r3, [r4, #16]
 800c38c:	3501      	adds	r5, #1
 800c38e:	42ab      	cmp	r3, r5
 800c390:	f106 0610 	add.w	r6, r6, #16
 800c394:	d8f6      	bhi.n	800c384 <uxr_reset_stream_storage+0xc>
 800c396:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c39a:	b163      	cbz	r3, 800c3b6 <uxr_reset_stream_storage+0x3e>
 800c39c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c3a0:	2500      	movs	r5, #0
 800c3a2:	4630      	mov	r0, r6
 800c3a4:	f003 fd28 	bl	800fdf8 <uxr_reset_input_best_effort_stream>
 800c3a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c3ac:	3501      	adds	r5, #1
 800c3ae:	42ab      	cmp	r3, r5
 800c3b0:	f106 0602 	add.w	r6, r6, #2
 800c3b4:	d8f5      	bhi.n	800c3a2 <uxr_reset_stream_storage+0x2a>
 800c3b6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800c3ba:	b163      	cbz	r3, 800c3d6 <uxr_reset_stream_storage+0x5e>
 800c3bc:	f104 0618 	add.w	r6, r4, #24
 800c3c0:	2500      	movs	r5, #0
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	f003 ffc2 	bl	801034c <uxr_reset_output_reliable_stream>
 800c3c8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800c3cc:	3501      	adds	r5, #1
 800c3ce:	42ab      	cmp	r3, r5
 800c3d0:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800c3d4:	d8f5      	bhi.n	800c3c2 <uxr_reset_stream_storage+0x4a>
 800c3d6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800c3da:	b163      	cbz	r3, 800c3f6 <uxr_reset_stream_storage+0x7e>
 800c3dc:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800c3e0:	2500      	movs	r5, #0
 800c3e2:	4630      	mov	r0, r6
 800c3e4:	f003 fd7c 	bl	800fee0 <uxr_reset_input_reliable_stream>
 800c3e8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800c3ec:	3501      	adds	r5, #1
 800c3ee:	42ab      	cmp	r3, r5
 800c3f0:	f106 0618 	add.w	r6, r6, #24
 800c3f4:	d8f5      	bhi.n	800c3e2 <uxr_reset_stream_storage+0x6a>
 800c3f6:	bd70      	pop	{r4, r5, r6, pc}

0800c3f8 <uxr_add_output_best_effort_buffer>:
 800c3f8:	b510      	push	{r4, lr}
 800c3fa:	7c04      	ldrb	r4, [r0, #16]
 800c3fc:	f104 0c01 	add.w	ip, r4, #1
 800c400:	b082      	sub	sp, #8
 800c402:	f880 c010 	strb.w	ip, [r0, #16]
 800c406:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800c40a:	f003 fee9 	bl	80101e0 <uxr_init_output_best_effort_stream>
 800c40e:	2201      	movs	r2, #1
 800c410:	4611      	mov	r1, r2
 800c412:	4620      	mov	r0, r4
 800c414:	b002      	add	sp, #8
 800c416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c41a:	f7ff bf4f 	b.w	800c2bc <uxr_stream_id>
 800c41e:	bf00      	nop

0800c420 <uxr_add_output_reliable_buffer>:
 800c420:	b510      	push	{r4, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	4684      	mov	ip, r0
 800c426:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c42a:	9000      	str	r0, [sp, #0]
 800c42c:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800c430:	2028      	movs	r0, #40	; 0x28
 800c432:	fb00 c004 	mla	r0, r0, r4, ip
 800c436:	f104 0e01 	add.w	lr, r4, #1
 800c43a:	3018      	adds	r0, #24
 800c43c:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800c440:	f003 ff4c 	bl	80102dc <uxr_init_output_reliable_stream>
 800c444:	2201      	movs	r2, #1
 800c446:	2102      	movs	r1, #2
 800c448:	4620      	mov	r0, r4
 800c44a:	b004      	add	sp, #16
 800c44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c450:	f7ff bf34 	b.w	800c2bc <uxr_stream_id>

0800c454 <uxr_add_input_best_effort_buffer>:
 800c454:	b510      	push	{r4, lr}
 800c456:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800c45a:	4603      	mov	r3, r0
 800c45c:	1c62      	adds	r2, r4, #1
 800c45e:	f104 0021 	add.w	r0, r4, #33	; 0x21
 800c462:	b082      	sub	sp, #8
 800c464:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800c468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c46c:	f003 fcc0 	bl	800fdf0 <uxr_init_input_best_effort_stream>
 800c470:	2200      	movs	r2, #0
 800c472:	2101      	movs	r1, #1
 800c474:	4620      	mov	r0, r4
 800c476:	b002      	add	sp, #8
 800c478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c47c:	f7ff bf1e 	b.w	800c2bc <uxr_stream_id>

0800c480 <uxr_add_input_reliable_buffer>:
 800c480:	b510      	push	{r4, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	4684      	mov	ip, r0
 800c486:	9806      	ldr	r0, [sp, #24]
 800c488:	9000      	str	r0, [sp, #0]
 800c48a:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800c48e:	2018      	movs	r0, #24
 800c490:	fb00 c004 	mla	r0, r0, r4, ip
 800c494:	f104 0e01 	add.w	lr, r4, #1
 800c498:	3048      	adds	r0, #72	; 0x48
 800c49a:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800c49e:	f003 fcf3 	bl	800fe88 <uxr_init_input_reliable_stream>
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	2102      	movs	r1, #2
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	b004      	add	sp, #16
 800c4aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4ae:	f7ff bf05 	b.w	800c2bc <uxr_stream_id>
 800c4b2:	bf00      	nop

0800c4b4 <uxr_get_output_best_effort_stream>:
 800c4b4:	7c03      	ldrb	r3, [r0, #16]
 800c4b6:	428b      	cmp	r3, r1
 800c4b8:	bf8c      	ite	hi
 800c4ba:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800c4be:	2000      	movls	r0, #0
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop

0800c4c4 <uxr_get_output_reliable_stream>:
 800c4c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c4c8:	428b      	cmp	r3, r1
 800c4ca:	bf83      	ittte	hi
 800c4cc:	2328      	movhi	r3, #40	; 0x28
 800c4ce:	fb03 0001 	mlahi	r0, r3, r1, r0
 800c4d2:	3018      	addhi	r0, #24
 800c4d4:	2000      	movls	r0, #0
 800c4d6:	4770      	bx	lr

0800c4d8 <uxr_get_input_best_effort_stream>:
 800c4d8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800c4dc:	428b      	cmp	r3, r1
 800c4de:	bf86      	itte	hi
 800c4e0:	3121      	addhi	r1, #33	; 0x21
 800c4e2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800c4e6:	2000      	movls	r0, #0
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop

0800c4ec <uxr_get_input_reliable_stream>:
 800c4ec:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800c4f0:	428b      	cmp	r3, r1
 800c4f2:	bf83      	ittte	hi
 800c4f4:	2318      	movhi	r3, #24
 800c4f6:	fb03 0001 	mlahi	r0, r3, r1, r0
 800c4fa:	3048      	addhi	r0, #72	; 0x48
 800c4fc:	2000      	movls	r0, #0
 800c4fe:	4770      	bx	lr

0800c500 <uxr_output_streams_confirmed>:
 800c500:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c504:	b183      	cbz	r3, 800c528 <uxr_output_streams_confirmed+0x28>
 800c506:	b570      	push	{r4, r5, r6, lr}
 800c508:	4606      	mov	r6, r0
 800c50a:	f100 0518 	add.w	r5, r0, #24
 800c50e:	2400      	movs	r4, #0
 800c510:	e001      	b.n	800c516 <uxr_output_streams_confirmed+0x16>
 800c512:	3528      	adds	r5, #40	; 0x28
 800c514:	b138      	cbz	r0, 800c526 <uxr_output_streams_confirmed+0x26>
 800c516:	4628      	mov	r0, r5
 800c518:	f004 f988 	bl	801082c <uxr_is_output_up_to_date>
 800c51c:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800c520:	3401      	adds	r4, #1
 800c522:	42a3      	cmp	r3, r4
 800c524:	d8f5      	bhi.n	800c512 <uxr_output_streams_confirmed+0x12>
 800c526:	bd70      	pop	{r4, r5, r6, pc}
 800c528:	2001      	movs	r0, #1
 800c52a:	4770      	bx	lr

0800c52c <uxr_buffer_submessage_header>:
 800c52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52e:	4604      	mov	r4, r0
 800c530:	460e      	mov	r6, r1
 800c532:	2104      	movs	r1, #4
 800c534:	4615      	mov	r5, r2
 800c536:	461f      	mov	r7, r3
 800c538:	f7fe fc88 	bl	800ae4c <ucdr_align_to>
 800c53c:	2301      	movs	r3, #1
 800c53e:	ea47 0203 	orr.w	r2, r7, r3
 800c542:	4631      	mov	r1, r6
 800c544:	7523      	strb	r3, [r4, #20]
 800c546:	4620      	mov	r0, r4
 800c548:	462b      	mov	r3, r5
 800c54a:	f000 fa27 	bl	800c99c <uxr_serialize_submessage_header>
 800c54e:	4620      	mov	r0, r4
 800c550:	f7fe fc92 	bl	800ae78 <ucdr_buffer_remaining>
 800c554:	42a8      	cmp	r0, r5
 800c556:	bf34      	ite	cc
 800c558:	2000      	movcc	r0, #0
 800c55a:	2001      	movcs	r0, #1
 800c55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c55e:	bf00      	nop

0800c560 <uxr_read_submessage_header>:
 800c560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c564:	4604      	mov	r4, r0
 800c566:	460d      	mov	r5, r1
 800c568:	2104      	movs	r1, #4
 800c56a:	4616      	mov	r6, r2
 800c56c:	4698      	mov	r8, r3
 800c56e:	f7fe fc6d 	bl	800ae4c <ucdr_align_to>
 800c572:	4620      	mov	r0, r4
 800c574:	f7fe fc80 	bl	800ae78 <ucdr_buffer_remaining>
 800c578:	2803      	cmp	r0, #3
 800c57a:	bf8c      	ite	hi
 800c57c:	2701      	movhi	r7, #1
 800c57e:	2700      	movls	r7, #0
 800c580:	d802      	bhi.n	800c588 <uxr_read_submessage_header+0x28>
 800c582:	4638      	mov	r0, r7
 800c584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c588:	4633      	mov	r3, r6
 800c58a:	4642      	mov	r2, r8
 800c58c:	4620      	mov	r0, r4
 800c58e:	4629      	mov	r1, r5
 800c590:	f000 fa18 	bl	800c9c4 <uxr_deserialize_submessage_header>
 800c594:	f898 3000 	ldrb.w	r3, [r8]
 800c598:	f003 0201 	and.w	r2, r3, #1
 800c59c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c5a0:	f888 3000 	strb.w	r3, [r8]
 800c5a4:	7522      	strb	r2, [r4, #20]
 800c5a6:	4638      	mov	r0, r7
 800c5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c5ac <uxr_submessage_padding>:
 800c5ac:	f010 0003 	ands.w	r0, r0, #3
 800c5b0:	bf18      	it	ne
 800c5b2:	f1c0 0004 	rsbne	r0, r0, #4
 800c5b6:	4770      	bx	lr

0800c5b8 <uxr_millis>:
 800c5b8:	b510      	push	{r4, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	4669      	mov	r1, sp
 800c5be:	2001      	movs	r0, #1
 800c5c0:	f7f5 fce2 	bl	8001f88 <clock_gettime>
 800c5c4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800c5c8:	4906      	ldr	r1, [pc, #24]	; (800c5e4 <uxr_millis+0x2c>)
 800c5ca:	fba0 0301 	umull	r0, r3, r0, r1
 800c5ce:	1900      	adds	r0, r0, r4
 800c5d0:	fb01 3102 	mla	r1, r1, r2, r3
 800c5d4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800c5d8:	4a03      	ldr	r2, [pc, #12]	; (800c5e8 <uxr_millis+0x30>)
 800c5da:	2300      	movs	r3, #0
 800c5dc:	f7f4 f96e 	bl	80008bc <__aeabi_ldivmod>
 800c5e0:	b004      	add	sp, #16
 800c5e2:	bd10      	pop	{r4, pc}
 800c5e4:	3b9aca00 	.word	0x3b9aca00
 800c5e8:	000f4240 	.word	0x000f4240

0800c5ec <uxr_nanos>:
 800c5ec:	b510      	push	{r4, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	4669      	mov	r1, sp
 800c5f2:	2001      	movs	r0, #1
 800c5f4:	f7f5 fcc8 	bl	8001f88 <clock_gettime>
 800c5f8:	4a06      	ldr	r2, [pc, #24]	; (800c614 <uxr_nanos+0x28>)
 800c5fa:	9800      	ldr	r0, [sp, #0]
 800c5fc:	9902      	ldr	r1, [sp, #8]
 800c5fe:	9c01      	ldr	r4, [sp, #4]
 800c600:	fba0 0302 	umull	r0, r3, r0, r2
 800c604:	1840      	adds	r0, r0, r1
 800c606:	fb02 3304 	mla	r3, r2, r4, r3
 800c60a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800c60e:	b004      	add	sp, #16
 800c610:	bd10      	pop	{r4, pc}
 800c612:	bf00      	nop
 800c614:	3b9aca00 	.word	0x3b9aca00

0800c618 <on_full_output_buffer_fragmented>:
 800c618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c61c:	460c      	mov	r4, r1
 800c61e:	b08a      	sub	sp, #40	; 0x28
 800c620:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800c624:	4606      	mov	r6, r0
 800c626:	f104 0008 	add.w	r0, r4, #8
 800c62a:	f7ff ff4b 	bl	800c4c4 <uxr_get_output_reliable_stream>
 800c62e:	4605      	mov	r5, r0
 800c630:	f004 f906 	bl	8010840 <get_available_free_slots>
 800c634:	b968      	cbnz	r0, 800c652 <on_full_output_buffer_fragmented+0x3a>
 800c636:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800c63a:	4620      	mov	r0, r4
 800c63c:	4798      	blx	r3
 800c63e:	b918      	cbnz	r0, 800c648 <on_full_output_buffer_fragmented+0x30>
 800c640:	2001      	movs	r0, #1
 800c642:	b00a      	add	sp, #40	; 0x28
 800c644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c648:	4628      	mov	r0, r5
 800c64a:	f004 f8f9 	bl	8010840 <get_available_free_slots>
 800c64e:	2800      	cmp	r0, #0
 800c650:	d0f6      	beq.n	800c640 <on_full_output_buffer_fragmented+0x28>
 800c652:	8929      	ldrh	r1, [r5, #8]
 800c654:	89eb      	ldrh	r3, [r5, #14]
 800c656:	7b28      	ldrb	r0, [r5, #12]
 800c658:	686a      	ldr	r2, [r5, #4]
 800c65a:	fbb2 f8f1 	udiv	r8, r2, r1
 800c65e:	fbb3 f2f1 	udiv	r2, r3, r1
 800c662:	fb01 3112 	mls	r1, r1, r2, r3
 800c666:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 800c66a:	b289      	uxth	r1, r1
 800c66c:	fb08 f101 	mul.w	r1, r8, r1
 800c670:	30fc      	adds	r0, #252	; 0xfc
 800c672:	f1a8 0804 	sub.w	r8, r8, #4
 800c676:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800c67a:	4440      	add	r0, r8
 800c67c:	b287      	uxth	r7, r0
 800c67e:	1bdb      	subs	r3, r3, r7
 800c680:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800c684:	682b      	ldr	r3, [r5, #0]
 800c686:	3104      	adds	r1, #4
 800c688:	4419      	add	r1, r3
 800c68a:	4642      	mov	r2, r8
 800c68c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	a802      	add	r0, sp, #8
 800c694:	2300      	movs	r3, #0
 800c696:	f7fe fbad 	bl	800adf4 <ucdr_init_buffer_origin_offset>
 800c69a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800c69e:	f102 0308 	add.w	r3, r2, #8
 800c6a2:	4543      	cmp	r3, r8
 800c6a4:	d928      	bls.n	800c6f8 <on_full_output_buffer_fragmented+0xe0>
 800c6a6:	463a      	mov	r2, r7
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	210d      	movs	r1, #13
 800c6ac:	a802      	add	r0, sp, #8
 800c6ae:	f7ff ff3d 	bl	800c52c <uxr_buffer_submessage_header>
 800c6b2:	8929      	ldrh	r1, [r5, #8]
 800c6b4:	89eb      	ldrh	r3, [r5, #14]
 800c6b6:	fbb3 f2f1 	udiv	r2, r3, r1
 800c6ba:	fb01 3312 	mls	r3, r1, r2, r3
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	686a      	ldr	r2, [r5, #4]
 800c6c2:	fbb2 f2f1 	udiv	r2, r2, r1
 800c6c6:	fb02 f303 	mul.w	r3, r2, r3
 800c6ca:	682a      	ldr	r2, [r5, #0]
 800c6cc:	f842 8003 	str.w	r8, [r2, r3]
 800c6d0:	89e8      	ldrh	r0, [r5, #14]
 800c6d2:	2101      	movs	r1, #1
 800c6d4:	f004 f9ca 	bl	8010a6c <uxr_seq_num_add>
 800c6d8:	9904      	ldr	r1, [sp, #16]
 800c6da:	9a03      	ldr	r2, [sp, #12]
 800c6dc:	81e8      	strh	r0, [r5, #14]
 800c6de:	1a52      	subs	r2, r2, r1
 800c6e0:	4630      	mov	r0, r6
 800c6e2:	f7fe fb99 	bl	800ae18 <ucdr_init_buffer>
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	490f      	ldr	r1, [pc, #60]	; (800c728 <on_full_output_buffer_fragmented+0x110>)
 800c6ea:	4622      	mov	r2, r4
 800c6ec:	f7fe fb68 	bl	800adc0 <ucdr_set_on_full_buffer_callback>
 800c6f0:	2000      	movs	r0, #0
 800c6f2:	b00a      	add	sp, #40	; 0x28
 800c6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6f8:	b292      	uxth	r2, r2
 800c6fa:	2302      	movs	r3, #2
 800c6fc:	210d      	movs	r1, #13
 800c6fe:	a802      	add	r0, sp, #8
 800c700:	f7ff ff14 	bl	800c52c <uxr_buffer_submessage_header>
 800c704:	8928      	ldrh	r0, [r5, #8]
 800c706:	89eb      	ldrh	r3, [r5, #14]
 800c708:	fbb3 f1f0 	udiv	r1, r3, r0
 800c70c:	fb00 3311 	mls	r3, r0, r1, r3
 800c710:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800c714:	6869      	ldr	r1, [r5, #4]
 800c716:	fbb1 f1f0 	udiv	r1, r1, r0
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	fb01 f303 	mul.w	r3, r1, r3
 800c720:	6829      	ldr	r1, [r5, #0]
 800c722:	3208      	adds	r2, #8
 800c724:	50ca      	str	r2, [r1, r3]
 800c726:	e7d3      	b.n	800c6d0 <on_full_output_buffer_fragmented+0xb8>
 800c728:	0800c619 	.word	0x0800c619

0800c72c <uxr_prepare_output_stream>:
 800c72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c72e:	b087      	sub	sp, #28
 800c730:	2707      	movs	r7, #7
 800c732:	9202      	str	r2, [sp, #8]
 800c734:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c736:	9103      	str	r1, [sp, #12]
 800c738:	2500      	movs	r5, #0
 800c73a:	3204      	adds	r2, #4
 800c73c:	e9cd 7500 	strd	r7, r5, [sp]
 800c740:	461c      	mov	r4, r3
 800c742:	4606      	mov	r6, r0
 800c744:	f7ff fc54 	bl	800bff0 <uxr_prepare_stream_to_write_submessage>
 800c748:	f080 0201 	eor.w	r2, r0, #1
 800c74c:	b2d2      	uxtb	r2, r2
 800c74e:	75a2      	strb	r2, [r4, #22]
 800c750:	b112      	cbz	r2, 800c758 <uxr_prepare_output_stream+0x2c>
 800c752:	4628      	mov	r0, r5
 800c754:	b007      	add	sp, #28
 800c756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c758:	aa05      	add	r2, sp, #20
 800c75a:	9902      	ldr	r1, [sp, #8]
 800c75c:	4630      	mov	r0, r6
 800c75e:	f7ff fd7d 	bl	800c25c <uxr_init_base_object_request>
 800c762:	a905      	add	r1, sp, #20
 800c764:	4605      	mov	r5, r0
 800c766:	4620      	mov	r0, r4
 800c768:	f000 ffa0 	bl	800d6ac <uxr_serialize_WRITE_DATA_Payload_Data>
 800c76c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800c770:	69a6      	ldr	r6, [r4, #24]
 800c772:	69e7      	ldr	r7, [r4, #28]
 800c774:	1a52      	subs	r2, r2, r1
 800c776:	4620      	mov	r0, r4
 800c778:	f7fe fb4e 	bl	800ae18 <ucdr_init_buffer>
 800c77c:	4620      	mov	r0, r4
 800c77e:	463a      	mov	r2, r7
 800c780:	4631      	mov	r1, r6
 800c782:	f7fe fb1d 	bl	800adc0 <ucdr_set_on_full_buffer_callback>
 800c786:	4628      	mov	r0, r5
 800c788:	b007      	add	sp, #28
 800c78a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c78c <uxr_prepare_output_stream_fragmented>:
 800c78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c790:	b091      	sub	sp, #68	; 0x44
 800c792:	4605      	mov	r5, r0
 800c794:	9105      	str	r1, [sp, #20]
 800c796:	3008      	adds	r0, #8
 800c798:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800c79c:	461e      	mov	r6, r3
 800c79e:	9204      	str	r2, [sp, #16]
 800c7a0:	f7ff fe90 	bl	800c4c4 <uxr_get_output_reliable_stream>
 800c7a4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	f000 8091 	beq.w	800c8d0 <uxr_prepare_output_stream_fragmented+0x144>
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	f000 808d 	beq.w	800c8d0 <uxr_prepare_output_stream_fragmented+0x144>
 800c7b6:	f004 f843 	bl	8010840 <get_available_free_slots>
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	f000 8083 	beq.w	800c8c6 <uxr_prepare_output_stream_fragmented+0x13a>
 800c7c0:	8922      	ldrh	r2, [r4, #8]
 800c7c2:	89e7      	ldrh	r7, [r4, #14]
 800c7c4:	fbb7 f9f2 	udiv	r9, r7, r2
 800c7c8:	fb02 7919 	mls	r9, r2, r9, r7
 800c7cc:	fa1f f989 	uxth.w	r9, r9
 800c7d0:	6863      	ldr	r3, [r4, #4]
 800c7d2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c7d6:	6823      	ldr	r3, [r4, #0]
 800c7d8:	9203      	str	r2, [sp, #12]
 800c7da:	fb02 f909 	mul.w	r9, r2, r9
 800c7de:	f109 0904 	add.w	r9, r9, #4
 800c7e2:	4499      	add	r9, r3
 800c7e4:	7b23      	ldrb	r3, [r4, #12]
 800c7e6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800c7ea:	4543      	cmp	r3, r8
 800c7ec:	f1a2 0b04 	sub.w	fp, r2, #4
 800c7f0:	d37a      	bcc.n	800c8e8 <uxr_prepare_output_stream_fragmented+0x15c>
 800c7f2:	f1ab 0a04 	sub.w	sl, fp, #4
 800c7f6:	ebaa 0a03 	sub.w	sl, sl, r3
 800c7fa:	465a      	mov	r2, fp
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	4649      	mov	r1, r9
 800c800:	a808      	add	r0, sp, #32
 800c802:	f8cd 8000 	str.w	r8, [sp]
 800c806:	f7fe faf5 	bl	800adf4 <ucdr_init_buffer_origin_offset>
 800c80a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c80c:	fa1f fa8a 	uxth.w	sl, sl
 800c810:	4652      	mov	r2, sl
 800c812:	f103 0a08 	add.w	sl, r3, #8
 800c816:	45da      	cmp	sl, fp
 800c818:	bf34      	ite	cc
 800c81a:	2302      	movcc	r3, #2
 800c81c:	2300      	movcs	r3, #0
 800c81e:	210d      	movs	r1, #13
 800c820:	a808      	add	r0, sp, #32
 800c822:	f7ff fe83 	bl	800c52c <uxr_buffer_submessage_header>
 800c826:	8921      	ldrh	r1, [r4, #8]
 800c828:	fbb7 f2f1 	udiv	r2, r7, r1
 800c82c:	fb01 7212 	mls	r2, r1, r2, r7
 800c830:	b292      	uxth	r2, r2
 800c832:	6863      	ldr	r3, [r4, #4]
 800c834:	fbb3 f3f1 	udiv	r3, r3, r1
 800c838:	fb02 f303 	mul.w	r3, r2, r3
 800c83c:	6822      	ldr	r2, [r4, #0]
 800c83e:	4638      	mov	r0, r7
 800c840:	f842 b003 	str.w	fp, [r2, r3]
 800c844:	2101      	movs	r1, #1
 800c846:	f004 f911 	bl	8010a6c <uxr_seq_num_add>
 800c84a:	9b03      	ldr	r3, [sp, #12]
 800c84c:	f108 0104 	add.w	r1, r8, #4
 800c850:	f1a3 0208 	sub.w	r2, r3, #8
 800c854:	eba2 0208 	sub.w	r2, r2, r8
 800c858:	4449      	add	r1, r9
 800c85a:	4607      	mov	r7, r0
 800c85c:	4630      	mov	r0, r6
 800c85e:	f7fe fadb 	bl	800ae18 <ucdr_init_buffer>
 800c862:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c864:	81e7      	strh	r7, [r4, #14]
 800c866:	1d1a      	adds	r2, r3, #4
 800c868:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800c86c:	bf28      	it	cs
 800c86e:	2200      	movcs	r2, #0
 800c870:	2300      	movs	r3, #0
 800c872:	b292      	uxth	r2, r2
 800c874:	2107      	movs	r1, #7
 800c876:	4630      	mov	r0, r6
 800c878:	f7ff fe58 	bl	800c52c <uxr_buffer_submessage_header>
 800c87c:	9904      	ldr	r1, [sp, #16]
 800c87e:	aa07      	add	r2, sp, #28
 800c880:	4628      	mov	r0, r5
 800c882:	f7ff fceb 	bl	800c25c <uxr_init_base_object_request>
 800c886:	4604      	mov	r4, r0
 800c888:	b318      	cbz	r0, 800c8d2 <uxr_prepare_output_stream_fragmented+0x146>
 800c88a:	a907      	add	r1, sp, #28
 800c88c:	4630      	mov	r0, r6
 800c88e:	f000 ff0d 	bl	800d6ac <uxr_serialize_WRITE_DATA_Payload_Data>
 800c892:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800c896:	4630      	mov	r0, r6
 800c898:	1a52      	subs	r2, r2, r1
 800c89a:	f7fe fabd 	bl	800ae18 <ucdr_init_buffer>
 800c89e:	9b05      	ldr	r3, [sp, #20]
 800c8a0:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800c8a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c8a6:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800c8aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c8ac:	491b      	ldr	r1, [pc, #108]	; (800c91c <uxr_prepare_output_stream_fragmented+0x190>)
 800c8ae:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800c8b8:	462a      	mov	r2, r5
 800c8ba:	f7fe fa81 	bl	800adc0 <ucdr_set_on_full_buffer_callback>
 800c8be:	4620      	mov	r0, r4
 800c8c0:	b011      	add	sp, #68	; 0x44
 800c8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c8c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c8ca:	4628      	mov	r0, r5
 800c8cc:	4798      	blx	r3
 800c8ce:	b920      	cbnz	r0, 800c8da <uxr_prepare_output_stream_fragmented+0x14e>
 800c8d0:	2400      	movs	r4, #0
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	b011      	add	sp, #68	; 0x44
 800c8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8da:	4620      	mov	r0, r4
 800c8dc:	f003 ffb0 	bl	8010840 <get_available_free_slots>
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	f47f af6d 	bne.w	800c7c0 <uxr_prepare_output_stream_fragmented+0x34>
 800c8e6:	e7f3      	b.n	800c8d0 <uxr_prepare_output_stream_fragmented+0x144>
 800c8e8:	4638      	mov	r0, r7
 800c8ea:	2101      	movs	r1, #1
 800c8ec:	f004 f8be 	bl	8010a6c <uxr_seq_num_add>
 800c8f0:	8921      	ldrh	r1, [r4, #8]
 800c8f2:	fbb0 f2f1 	udiv	r2, r0, r1
 800c8f6:	fb01 0912 	mls	r9, r1, r2, r0
 800c8fa:	fa1f f289 	uxth.w	r2, r9
 800c8fe:	6863      	ldr	r3, [r4, #4]
 800c900:	fbb3 f9f1 	udiv	r9, r3, r1
 800c904:	6823      	ldr	r3, [r4, #0]
 800c906:	fb02 f909 	mul.w	r9, r2, r9
 800c90a:	f109 0904 	add.w	r9, r9, #4
 800c90e:	4499      	add	r9, r3
 800c910:	4607      	mov	r7, r0
 800c912:	7b23      	ldrb	r3, [r4, #12]
 800c914:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800c918:	e76b      	b.n	800c7f2 <uxr_prepare_output_stream_fragmented+0x66>
 800c91a:	bf00      	nop
 800c91c:	0800c619 	.word	0x0800c619

0800c920 <uxr_serialize_message_header>:
 800c920:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c922:	b083      	sub	sp, #12
 800c924:	4616      	mov	r6, r2
 800c926:	4604      	mov	r4, r0
 800c928:	9301      	str	r3, [sp, #4]
 800c92a:	460d      	mov	r5, r1
 800c92c:	9f08      	ldr	r7, [sp, #32]
 800c92e:	f7fd fac7 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800c932:	4631      	mov	r1, r6
 800c934:	4620      	mov	r0, r4
 800c936:	f7fd fac3 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800c93a:	9a01      	ldr	r2, [sp, #4]
 800c93c:	2101      	movs	r1, #1
 800c93e:	4620      	mov	r0, r4
 800c940:	f7fd fb6a 	bl	800a018 <ucdr_serialize_endian_uint16_t>
 800c944:	062b      	lsls	r3, r5, #24
 800c946:	d501      	bpl.n	800c94c <uxr_serialize_message_header+0x2c>
 800c948:	b003      	add	sp, #12
 800c94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c94c:	2204      	movs	r2, #4
 800c94e:	4639      	mov	r1, r7
 800c950:	4620      	mov	r0, r4
 800c952:	b003      	add	sp, #12
 800c954:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c958:	f003 b850 	b.w	800f9fc <ucdr_serialize_array_uint8_t>

0800c95c <uxr_deserialize_message_header>:
 800c95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c95e:	b083      	sub	sp, #12
 800c960:	4616      	mov	r6, r2
 800c962:	4604      	mov	r4, r0
 800c964:	9301      	str	r3, [sp, #4]
 800c966:	460d      	mov	r5, r1
 800c968:	9f08      	ldr	r7, [sp, #32]
 800c96a:	f7fd fabf 	bl	8009eec <ucdr_deserialize_uint8_t>
 800c96e:	4631      	mov	r1, r6
 800c970:	4620      	mov	r0, r4
 800c972:	f7fd fabb 	bl	8009eec <ucdr_deserialize_uint8_t>
 800c976:	9a01      	ldr	r2, [sp, #4]
 800c978:	2101      	movs	r1, #1
 800c97a:	4620      	mov	r0, r4
 800c97c:	f7fd fc40 	bl	800a200 <ucdr_deserialize_endian_uint16_t>
 800c980:	f995 3000 	ldrsb.w	r3, [r5]
 800c984:	2b00      	cmp	r3, #0
 800c986:	da01      	bge.n	800c98c <uxr_deserialize_message_header+0x30>
 800c988:	b003      	add	sp, #12
 800c98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c98c:	2204      	movs	r2, #4
 800c98e:	4639      	mov	r1, r7
 800c990:	4620      	mov	r0, r4
 800c992:	b003      	add	sp, #12
 800c994:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c998:	f003 b894 	b.w	800fac4 <ucdr_deserialize_array_uint8_t>

0800c99c <uxr_serialize_submessage_header>:
 800c99c:	b530      	push	{r4, r5, lr}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	4615      	mov	r5, r2
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	9301      	str	r3, [sp, #4]
 800c9a6:	f7fd fa8b 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800c9aa:	4629      	mov	r1, r5
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f7fd fa87 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800c9b2:	9a01      	ldr	r2, [sp, #4]
 800c9b4:	2101      	movs	r1, #1
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	b003      	add	sp, #12
 800c9ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9be:	f7fd bb2b 	b.w	800a018 <ucdr_serialize_endian_uint16_t>
 800c9c2:	bf00      	nop

0800c9c4 <uxr_deserialize_submessage_header>:
 800c9c4:	b530      	push	{r4, r5, lr}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	4615      	mov	r5, r2
 800c9ca:	4604      	mov	r4, r0
 800c9cc:	9301      	str	r3, [sp, #4]
 800c9ce:	f7fd fa8d 	bl	8009eec <ucdr_deserialize_uint8_t>
 800c9d2:	4629      	mov	r1, r5
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	f7fd fa89 	bl	8009eec <ucdr_deserialize_uint8_t>
 800c9da:	9a01      	ldr	r2, [sp, #4]
 800c9dc:	2101      	movs	r1, #1
 800c9de:	4620      	mov	r0, r4
 800c9e0:	b003      	add	sp, #12
 800c9e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9e6:	f7fd bc0b 	b.w	800a200 <ucdr_deserialize_endian_uint16_t>
 800c9ea:	bf00      	nop

0800c9ec <uxr_serialize_CLIENT_Representation>:
 800c9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9f0:	2204      	movs	r2, #4
 800c9f2:	460e      	mov	r6, r1
 800c9f4:	4605      	mov	r5, r0
 800c9f6:	f003 f801 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800c9fa:	2202      	movs	r2, #2
 800c9fc:	4607      	mov	r7, r0
 800c9fe:	1d31      	adds	r1, r6, #4
 800ca00:	4628      	mov	r0, r5
 800ca02:	f002 fffb 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800ca06:	4038      	ands	r0, r7
 800ca08:	2202      	movs	r2, #2
 800ca0a:	1db1      	adds	r1, r6, #6
 800ca0c:	b2c7      	uxtb	r7, r0
 800ca0e:	4628      	mov	r0, r5
 800ca10:	f002 fff4 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800ca14:	2204      	movs	r2, #4
 800ca16:	4007      	ands	r7, r0
 800ca18:	f106 0108 	add.w	r1, r6, #8
 800ca1c:	4628      	mov	r0, r5
 800ca1e:	f002 ffed 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800ca22:	7b31      	ldrb	r1, [r6, #12]
 800ca24:	4007      	ands	r7, r0
 800ca26:	4628      	mov	r0, r5
 800ca28:	f7fd fa4a 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800ca2c:	7b71      	ldrb	r1, [r6, #13]
 800ca2e:	4007      	ands	r7, r0
 800ca30:	4628      	mov	r0, r5
 800ca32:	f7fd fa17 	bl	8009e64 <ucdr_serialize_bool>
 800ca36:	7b73      	ldrb	r3, [r6, #13]
 800ca38:	ea07 0800 	and.w	r8, r7, r0
 800ca3c:	b93b      	cbnz	r3, 800ca4e <uxr_serialize_CLIENT_Representation+0x62>
 800ca3e:	8bb1      	ldrh	r1, [r6, #28]
 800ca40:	4628      	mov	r0, r5
 800ca42:	f7fd fa69 	bl	8009f18 <ucdr_serialize_uint16_t>
 800ca46:	ea08 0000 	and.w	r0, r8, r0
 800ca4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca4e:	6931      	ldr	r1, [r6, #16]
 800ca50:	4628      	mov	r0, r5
 800ca52:	f7fd fc4b 	bl	800a2ec <ucdr_serialize_uint32_t>
 800ca56:	6933      	ldr	r3, [r6, #16]
 800ca58:	b1e3      	cbz	r3, 800ca94 <uxr_serialize_CLIENT_Representation+0xa8>
 800ca5a:	b1c0      	cbz	r0, 800ca8e <uxr_serialize_CLIENT_Representation+0xa2>
 800ca5c:	4637      	mov	r7, r6
 800ca5e:	f04f 0900 	mov.w	r9, #0
 800ca62:	e001      	b.n	800ca68 <uxr_serialize_CLIENT_Representation+0x7c>
 800ca64:	3708      	adds	r7, #8
 800ca66:	b194      	cbz	r4, 800ca8e <uxr_serialize_CLIENT_Representation+0xa2>
 800ca68:	6979      	ldr	r1, [r7, #20]
 800ca6a:	4628      	mov	r0, r5
 800ca6c:	f003 f8e6 	bl	800fc3c <ucdr_serialize_string>
 800ca70:	69b9      	ldr	r1, [r7, #24]
 800ca72:	4604      	mov	r4, r0
 800ca74:	4628      	mov	r0, r5
 800ca76:	f003 f8e1 	bl	800fc3c <ucdr_serialize_string>
 800ca7a:	6933      	ldr	r3, [r6, #16]
 800ca7c:	f109 0901 	add.w	r9, r9, #1
 800ca80:	4004      	ands	r4, r0
 800ca82:	4599      	cmp	r9, r3
 800ca84:	b2e4      	uxtb	r4, r4
 800ca86:	d3ed      	bcc.n	800ca64 <uxr_serialize_CLIENT_Representation+0x78>
 800ca88:	ea08 0804 	and.w	r8, r8, r4
 800ca8c:	e7d7      	b.n	800ca3e <uxr_serialize_CLIENT_Representation+0x52>
 800ca8e:	f04f 0800 	mov.w	r8, #0
 800ca92:	e7d4      	b.n	800ca3e <uxr_serialize_CLIENT_Representation+0x52>
 800ca94:	ea08 0800 	and.w	r8, r8, r0
 800ca98:	e7d1      	b.n	800ca3e <uxr_serialize_CLIENT_Representation+0x52>
 800ca9a:	bf00      	nop

0800ca9c <uxr_deserialize_CLIENT_Representation>:
 800ca9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caa0:	2204      	movs	r2, #4
 800caa2:	460c      	mov	r4, r1
 800caa4:	4605      	mov	r5, r0
 800caa6:	f003 f80d 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800caaa:	2202      	movs	r2, #2
 800caac:	4607      	mov	r7, r0
 800caae:	1d21      	adds	r1, r4, #4
 800cab0:	4628      	mov	r0, r5
 800cab2:	f003 f807 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800cab6:	4038      	ands	r0, r7
 800cab8:	2202      	movs	r2, #2
 800caba:	1da1      	adds	r1, r4, #6
 800cabc:	b2c6      	uxtb	r6, r0
 800cabe:	4628      	mov	r0, r5
 800cac0:	f003 f800 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800cac4:	2204      	movs	r2, #4
 800cac6:	4006      	ands	r6, r0
 800cac8:	f104 0108 	add.w	r1, r4, #8
 800cacc:	4628      	mov	r0, r5
 800cace:	f002 fff9 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800cad2:	f104 010c 	add.w	r1, r4, #12
 800cad6:	4006      	ands	r6, r0
 800cad8:	4628      	mov	r0, r5
 800cada:	f7fd fa07 	bl	8009eec <ucdr_deserialize_uint8_t>
 800cade:	f104 010d 	add.w	r1, r4, #13
 800cae2:	ea06 0700 	and.w	r7, r6, r0
 800cae6:	4628      	mov	r0, r5
 800cae8:	f7fd f9d2 	bl	8009e90 <ucdr_deserialize_bool>
 800caec:	7b63      	ldrb	r3, [r4, #13]
 800caee:	4007      	ands	r7, r0
 800caf0:	b93b      	cbnz	r3, 800cb02 <uxr_deserialize_CLIENT_Representation+0x66>
 800caf2:	f104 011c 	add.w	r1, r4, #28
 800caf6:	4628      	mov	r0, r5
 800caf8:	f7fd fb0e 	bl	800a118 <ucdr_deserialize_uint16_t>
 800cafc:	4038      	ands	r0, r7
 800cafe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb02:	f104 0110 	add.w	r1, r4, #16
 800cb06:	4628      	mov	r0, r5
 800cb08:	f7fd fd20 	bl	800a54c <ucdr_deserialize_uint32_t>
 800cb0c:	6923      	ldr	r3, [r4, #16]
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d903      	bls.n	800cb1a <uxr_deserialize_CLIENT_Representation+0x7e>
 800cb12:	2301      	movs	r3, #1
 800cb14:	75ab      	strb	r3, [r5, #22]
 800cb16:	2700      	movs	r7, #0
 800cb18:	e7eb      	b.n	800caf2 <uxr_deserialize_CLIENT_Representation+0x56>
 800cb1a:	b30b      	cbz	r3, 800cb60 <uxr_deserialize_CLIENT_Representation+0xc4>
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	d0fa      	beq.n	800cb16 <uxr_deserialize_CLIENT_Representation+0x7a>
 800cb20:	46a0      	mov	r8, r4
 800cb22:	f04f 0900 	mov.w	r9, #0
 800cb26:	e001      	b.n	800cb2c <uxr_deserialize_CLIENT_Representation+0x90>
 800cb28:	2e00      	cmp	r6, #0
 800cb2a:	d0f4      	beq.n	800cb16 <uxr_deserialize_CLIENT_Representation+0x7a>
 800cb2c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800cb30:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb34:	4628      	mov	r0, r5
 800cb36:	f003 f891 	bl	800fc5c <ucdr_deserialize_string>
 800cb3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb3e:	4606      	mov	r6, r0
 800cb40:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800cb44:	4628      	mov	r0, r5
 800cb46:	f003 f889 	bl	800fc5c <ucdr_deserialize_string>
 800cb4a:	6923      	ldr	r3, [r4, #16]
 800cb4c:	f109 0901 	add.w	r9, r9, #1
 800cb50:	4006      	ands	r6, r0
 800cb52:	4599      	cmp	r9, r3
 800cb54:	f108 0808 	add.w	r8, r8, #8
 800cb58:	b2f6      	uxtb	r6, r6
 800cb5a:	d3e5      	bcc.n	800cb28 <uxr_deserialize_CLIENT_Representation+0x8c>
 800cb5c:	4037      	ands	r7, r6
 800cb5e:	e7c8      	b.n	800caf2 <uxr_deserialize_CLIENT_Representation+0x56>
 800cb60:	4007      	ands	r7, r0
 800cb62:	e7c6      	b.n	800caf2 <uxr_deserialize_CLIENT_Representation+0x56>

0800cb64 <uxr_serialize_AGENT_Representation>:
 800cb64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb68:	2204      	movs	r2, #4
 800cb6a:	460f      	mov	r7, r1
 800cb6c:	4605      	mov	r5, r0
 800cb6e:	f002 ff45 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800cb72:	2202      	movs	r2, #2
 800cb74:	4604      	mov	r4, r0
 800cb76:	1d39      	adds	r1, r7, #4
 800cb78:	4628      	mov	r0, r5
 800cb7a:	f002 ff3f 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800cb7e:	4020      	ands	r0, r4
 800cb80:	2202      	movs	r2, #2
 800cb82:	1db9      	adds	r1, r7, #6
 800cb84:	b2c4      	uxtb	r4, r0
 800cb86:	4628      	mov	r0, r5
 800cb88:	f002 ff38 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800cb8c:	7a39      	ldrb	r1, [r7, #8]
 800cb8e:	4004      	ands	r4, r0
 800cb90:	4628      	mov	r0, r5
 800cb92:	f7fd f967 	bl	8009e64 <ucdr_serialize_bool>
 800cb96:	7a3b      	ldrb	r3, [r7, #8]
 800cb98:	ea00 0804 	and.w	r8, r0, r4
 800cb9c:	b913      	cbnz	r3, 800cba4 <uxr_serialize_AGENT_Representation+0x40>
 800cb9e:	4640      	mov	r0, r8
 800cba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cba4:	68f9      	ldr	r1, [r7, #12]
 800cba6:	4628      	mov	r0, r5
 800cba8:	f7fd fba0 	bl	800a2ec <ucdr_serialize_uint32_t>
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	b303      	cbz	r3, 800cbf2 <uxr_serialize_AGENT_Representation+0x8e>
 800cbb0:	b1d0      	cbz	r0, 800cbe8 <uxr_serialize_AGENT_Representation+0x84>
 800cbb2:	463e      	mov	r6, r7
 800cbb4:	f04f 0900 	mov.w	r9, #0
 800cbb8:	e001      	b.n	800cbbe <uxr_serialize_AGENT_Representation+0x5a>
 800cbba:	3608      	adds	r6, #8
 800cbbc:	b1a4      	cbz	r4, 800cbe8 <uxr_serialize_AGENT_Representation+0x84>
 800cbbe:	6931      	ldr	r1, [r6, #16]
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	f003 f83b 	bl	800fc3c <ucdr_serialize_string>
 800cbc6:	6971      	ldr	r1, [r6, #20]
 800cbc8:	4604      	mov	r4, r0
 800cbca:	4628      	mov	r0, r5
 800cbcc:	f003 f836 	bl	800fc3c <ucdr_serialize_string>
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f109 0901 	add.w	r9, r9, #1
 800cbd6:	4004      	ands	r4, r0
 800cbd8:	4599      	cmp	r9, r3
 800cbda:	b2e4      	uxtb	r4, r4
 800cbdc:	d3ed      	bcc.n	800cbba <uxr_serialize_AGENT_Representation+0x56>
 800cbde:	ea08 0804 	and.w	r8, r8, r4
 800cbe2:	4640      	mov	r0, r8
 800cbe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbe8:	f04f 0800 	mov.w	r8, #0
 800cbec:	4640      	mov	r0, r8
 800cbee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbf2:	ea08 0800 	and.w	r8, r8, r0
 800cbf6:	e7d2      	b.n	800cb9e <uxr_serialize_AGENT_Representation+0x3a>

0800cbf8 <uxr_serialize_DATAWRITER_Representation>:
 800cbf8:	b570      	push	{r4, r5, r6, lr}
 800cbfa:	460d      	mov	r5, r1
 800cbfc:	7809      	ldrb	r1, [r1, #0]
 800cbfe:	4606      	mov	r6, r0
 800cc00:	f7fd f95e 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800cc04:	4604      	mov	r4, r0
 800cc06:	b130      	cbz	r0, 800cc16 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800cc08:	782b      	ldrb	r3, [r5, #0]
 800cc0a:	2b02      	cmp	r3, #2
 800cc0c:	d00c      	beq.n	800cc28 <uxr_serialize_DATAWRITER_Representation+0x30>
 800cc0e:	2b03      	cmp	r3, #3
 800cc10:	d010      	beq.n	800cc34 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d008      	beq.n	800cc28 <uxr_serialize_DATAWRITER_Representation+0x30>
 800cc16:	2202      	movs	r2, #2
 800cc18:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	f002 feed 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800cc22:	4020      	ands	r0, r4
 800cc24:	b2c0      	uxtb	r0, r0
 800cc26:	bd70      	pop	{r4, r5, r6, pc}
 800cc28:	6869      	ldr	r1, [r5, #4]
 800cc2a:	4630      	mov	r0, r6
 800cc2c:	f003 f806 	bl	800fc3c <ucdr_serialize_string>
 800cc30:	4604      	mov	r4, r0
 800cc32:	e7f0      	b.n	800cc16 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800cc34:	4629      	mov	r1, r5
 800cc36:	4630      	mov	r0, r6
 800cc38:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800cc3c:	3104      	adds	r1, #4
 800cc3e:	f002 ffd1 	bl	800fbe4 <ucdr_serialize_sequence_uint8_t>
 800cc42:	4604      	mov	r4, r0
 800cc44:	e7e7      	b.n	800cc16 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800cc46:	bf00      	nop

0800cc48 <uxr_serialize_ObjectVariant.part.0>:
 800cc48:	b570      	push	{r4, r5, r6, lr}
 800cc4a:	780b      	ldrb	r3, [r1, #0]
 800cc4c:	3b01      	subs	r3, #1
 800cc4e:	460c      	mov	r4, r1
 800cc50:	4605      	mov	r5, r0
 800cc52:	2b0d      	cmp	r3, #13
 800cc54:	d854      	bhi.n	800cd00 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800cc56:	e8df f003 	tbb	[pc, r3]
 800cc5a:	0730      	.short	0x0730
 800cc5c:	07071b1b 	.word	0x07071b1b
 800cc60:	0c530707 	.word	0x0c530707
 800cc64:	494e0c0c 	.word	0x494e0c0c
 800cc68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc6c:	3104      	adds	r1, #4
 800cc6e:	f7ff bfc3 	b.w	800cbf8 <uxr_serialize_DATAWRITER_Representation>
 800cc72:	7909      	ldrb	r1, [r1, #4]
 800cc74:	f7fd f924 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800cc78:	b1e8      	cbz	r0, 800ccb6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800cc7a:	7923      	ldrb	r3, [r4, #4]
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d001      	beq.n	800cc84 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800cc80:	2b02      	cmp	r3, #2
 800cc82:	d13d      	bne.n	800cd00 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800cc84:	68a1      	ldr	r1, [r4, #8]
 800cc86:	4628      	mov	r0, r5
 800cc88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc8c:	f002 bfd6 	b.w	800fc3c <ucdr_serialize_string>
 800cc90:	7909      	ldrb	r1, [r1, #4]
 800cc92:	f7fd f915 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800cc96:	4606      	mov	r6, r0
 800cc98:	b120      	cbz	r0, 800cca4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800cc9a:	7923      	ldrb	r3, [r4, #4]
 800cc9c:	2b02      	cmp	r3, #2
 800cc9e:	d039      	beq.n	800cd14 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800cca0:	2b03      	cmp	r3, #3
 800cca2:	d02f      	beq.n	800cd04 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800cca4:	2202      	movs	r2, #2
 800cca6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800ccaa:	4628      	mov	r0, r5
 800ccac:	f002 fea6 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800ccb0:	4030      	ands	r0, r6
 800ccb2:	b2c0      	uxtb	r0, r0
 800ccb4:	bd70      	pop	{r4, r5, r6, pc}
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	bd70      	pop	{r4, r5, r6, pc}
 800ccba:	7909      	ldrb	r1, [r1, #4]
 800ccbc:	f7fd f900 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800ccc0:	4606      	mov	r6, r0
 800ccc2:	b158      	cbz	r0, 800ccdc <uxr_serialize_ObjectVariant.part.0+0x94>
 800ccc4:	7923      	ldrb	r3, [r4, #4]
 800ccc6:	2b02      	cmp	r3, #2
 800ccc8:	d003      	beq.n	800ccd2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800ccca:	2b03      	cmp	r3, #3
 800cccc:	d028      	beq.n	800cd20 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d104      	bne.n	800ccdc <uxr_serialize_ObjectVariant.part.0+0x94>
 800ccd2:	68a1      	ldr	r1, [r4, #8]
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	f002 ffb1 	bl	800fc3c <ucdr_serialize_string>
 800ccda:	4606      	mov	r6, r0
 800ccdc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800cce0:	4628      	mov	r0, r5
 800cce2:	f7fd fe29 	bl	800a938 <ucdr_serialize_int16_t>
 800cce6:	4030      	ands	r0, r6
 800cce8:	b2c0      	uxtb	r0, r0
 800ccea:	bd70      	pop	{r4, r5, r6, pc}
 800ccec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ccf0:	3104      	adds	r1, #4
 800ccf2:	f7ff be7b 	b.w	800c9ec <uxr_serialize_CLIENT_Representation>
 800ccf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ccfa:	3104      	adds	r1, #4
 800ccfc:	f7ff bf32 	b.w	800cb64 <uxr_serialize_AGENT_Representation>
 800cd00:	2001      	movs	r0, #1
 800cd02:	bd70      	pop	{r4, r5, r6, pc}
 800cd04:	68a2      	ldr	r2, [r4, #8]
 800cd06:	f104 010c 	add.w	r1, r4, #12
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	f002 ff6a 	bl	800fbe4 <ucdr_serialize_sequence_uint8_t>
 800cd10:	4606      	mov	r6, r0
 800cd12:	e7c7      	b.n	800cca4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800cd14:	68a1      	ldr	r1, [r4, #8]
 800cd16:	4628      	mov	r0, r5
 800cd18:	f002 ff90 	bl	800fc3c <ucdr_serialize_string>
 800cd1c:	4606      	mov	r6, r0
 800cd1e:	e7c1      	b.n	800cca4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800cd20:	68a2      	ldr	r2, [r4, #8]
 800cd22:	f104 010c 	add.w	r1, r4, #12
 800cd26:	4628      	mov	r0, r5
 800cd28:	f002 ff5c 	bl	800fbe4 <ucdr_serialize_sequence_uint8_t>
 800cd2c:	4606      	mov	r6, r0
 800cd2e:	e7d5      	b.n	800ccdc <uxr_serialize_ObjectVariant.part.0+0x94>

0800cd30 <uxr_deserialize_DATAWRITER_Representation>:
 800cd30:	b570      	push	{r4, r5, r6, lr}
 800cd32:	4606      	mov	r6, r0
 800cd34:	460d      	mov	r5, r1
 800cd36:	f7fd f8d9 	bl	8009eec <ucdr_deserialize_uint8_t>
 800cd3a:	4604      	mov	r4, r0
 800cd3c:	b130      	cbz	r0, 800cd4c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800cd3e:	782b      	ldrb	r3, [r5, #0]
 800cd40:	2b02      	cmp	r3, #2
 800cd42:	d00c      	beq.n	800cd5e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800cd44:	2b03      	cmp	r3, #3
 800cd46:	d012      	beq.n	800cd6e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d008      	beq.n	800cd5e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800cd4c:	2202      	movs	r2, #2
 800cd4e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800cd52:	4630      	mov	r0, r6
 800cd54:	f002 feb6 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800cd58:	4020      	ands	r0, r4
 800cd5a:	b2c0      	uxtb	r0, r0
 800cd5c:	bd70      	pop	{r4, r5, r6, pc}
 800cd5e:	6869      	ldr	r1, [r5, #4]
 800cd60:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd64:	4630      	mov	r0, r6
 800cd66:	f002 ff79 	bl	800fc5c <ucdr_deserialize_string>
 800cd6a:	4604      	mov	r4, r0
 800cd6c:	e7ee      	b.n	800cd4c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800cd6e:	1d2b      	adds	r3, r5, #4
 800cd70:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd74:	f105 0108 	add.w	r1, r5, #8
 800cd78:	4630      	mov	r0, r6
 800cd7a:	f002 ff45 	bl	800fc08 <ucdr_deserialize_sequence_uint8_t>
 800cd7e:	4604      	mov	r4, r0
 800cd80:	e7e4      	b.n	800cd4c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800cd82:	bf00      	nop

0800cd84 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800cd84:	b570      	push	{r4, r5, r6, lr}
 800cd86:	460d      	mov	r5, r1
 800cd88:	7809      	ldrb	r1, [r1, #0]
 800cd8a:	4606      	mov	r6, r0
 800cd8c:	f7fd f86a 	bl	8009e64 <ucdr_serialize_bool>
 800cd90:	782b      	ldrb	r3, [r5, #0]
 800cd92:	4604      	mov	r4, r0
 800cd94:	b94b      	cbnz	r3, 800cdaa <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800cd96:	7a29      	ldrb	r1, [r5, #8]
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f7fd f863 	bl	8009e64 <ucdr_serialize_bool>
 800cd9e:	7a2b      	ldrb	r3, [r5, #8]
 800cda0:	4004      	ands	r4, r0
 800cda2:	b2e4      	uxtb	r4, r4
 800cda4:	b943      	cbnz	r3, 800cdb8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800cda6:	4620      	mov	r0, r4
 800cda8:	bd70      	pop	{r4, r5, r6, pc}
 800cdaa:	6869      	ldr	r1, [r5, #4]
 800cdac:	4630      	mov	r0, r6
 800cdae:	f002 ff45 	bl	800fc3c <ucdr_serialize_string>
 800cdb2:	4004      	ands	r4, r0
 800cdb4:	b2e4      	uxtb	r4, r4
 800cdb6:	e7ee      	b.n	800cd96 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800cdb8:	68e9      	ldr	r1, [r5, #12]
 800cdba:	4630      	mov	r0, r6
 800cdbc:	f002 ff3e 	bl	800fc3c <ucdr_serialize_string>
 800cdc0:	4004      	ands	r4, r0
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	bd70      	pop	{r4, r5, r6, pc}
 800cdc6:	bf00      	nop

0800cdc8 <uxr_serialize_OBJK_Topic_Binary>:
 800cdc8:	b570      	push	{r4, r5, r6, lr}
 800cdca:	460d      	mov	r5, r1
 800cdcc:	6809      	ldr	r1, [r1, #0]
 800cdce:	4606      	mov	r6, r0
 800cdd0:	f002 ff34 	bl	800fc3c <ucdr_serialize_string>
 800cdd4:	7929      	ldrb	r1, [r5, #4]
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	4630      	mov	r0, r6
 800cdda:	f7fd f843 	bl	8009e64 <ucdr_serialize_bool>
 800cdde:	792b      	ldrb	r3, [r5, #4]
 800cde0:	4004      	ands	r4, r0
 800cde2:	b2e4      	uxtb	r4, r4
 800cde4:	b943      	cbnz	r3, 800cdf8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800cde6:	7b29      	ldrb	r1, [r5, #12]
 800cde8:	4630      	mov	r0, r6
 800cdea:	f7fd f83b 	bl	8009e64 <ucdr_serialize_bool>
 800cdee:	7b2b      	ldrb	r3, [r5, #12]
 800cdf0:	4004      	ands	r4, r0
 800cdf2:	b93b      	cbnz	r3, 800ce04 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	bd70      	pop	{r4, r5, r6, pc}
 800cdf8:	68a9      	ldr	r1, [r5, #8]
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	f002 ff1e 	bl	800fc3c <ucdr_serialize_string>
 800ce00:	4004      	ands	r4, r0
 800ce02:	e7f0      	b.n	800cde6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800ce04:	6929      	ldr	r1, [r5, #16]
 800ce06:	4630      	mov	r0, r6
 800ce08:	f002 ff18 	bl	800fc3c <ucdr_serialize_string>
 800ce0c:	4004      	ands	r4, r0
 800ce0e:	b2e4      	uxtb	r4, r4
 800ce10:	4620      	mov	r0, r4
 800ce12:	bd70      	pop	{r4, r5, r6, pc}

0800ce14 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800ce14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce18:	460c      	mov	r4, r1
 800ce1a:	7809      	ldrb	r1, [r1, #0]
 800ce1c:	4606      	mov	r6, r0
 800ce1e:	f7fd f821 	bl	8009e64 <ucdr_serialize_bool>
 800ce22:	7823      	ldrb	r3, [r4, #0]
 800ce24:	4605      	mov	r5, r0
 800ce26:	b96b      	cbnz	r3, 800ce44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800ce28:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800ce2c:	4630      	mov	r0, r6
 800ce2e:	f7fd f819 	bl	8009e64 <ucdr_serialize_bool>
 800ce32:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ce36:	4005      	ands	r5, r0
 800ce38:	b2ed      	uxtb	r5, r5
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d169      	bne.n	800cf12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800ce3e:	4628      	mov	r0, r5
 800ce40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce44:	6861      	ldr	r1, [r4, #4]
 800ce46:	4630      	mov	r0, r6
 800ce48:	f7fd fa50 	bl	800a2ec <ucdr_serialize_uint32_t>
 800ce4c:	6863      	ldr	r3, [r4, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d06b      	beq.n	800cf2a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800ce52:	2800      	cmp	r0, #0
 800ce54:	d067      	beq.n	800cf26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ce56:	68a1      	ldr	r1, [r4, #8]
 800ce58:	4630      	mov	r0, r6
 800ce5a:	f002 feef 	bl	800fc3c <ucdr_serialize_string>
 800ce5e:	6863      	ldr	r3, [r4, #4]
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d953      	bls.n	800cf0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ce64:	2800      	cmp	r0, #0
 800ce66:	d05e      	beq.n	800cf26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ce68:	68e1      	ldr	r1, [r4, #12]
 800ce6a:	4630      	mov	r0, r6
 800ce6c:	f002 fee6 	bl	800fc3c <ucdr_serialize_string>
 800ce70:	6863      	ldr	r3, [r4, #4]
 800ce72:	2b02      	cmp	r3, #2
 800ce74:	d94a      	bls.n	800cf0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ce76:	2800      	cmp	r0, #0
 800ce78:	d055      	beq.n	800cf26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ce7a:	6921      	ldr	r1, [r4, #16]
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	f002 fedd 	bl	800fc3c <ucdr_serialize_string>
 800ce82:	6863      	ldr	r3, [r4, #4]
 800ce84:	2b03      	cmp	r3, #3
 800ce86:	d941      	bls.n	800cf0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	d04c      	beq.n	800cf26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ce8c:	6961      	ldr	r1, [r4, #20]
 800ce8e:	4630      	mov	r0, r6
 800ce90:	f002 fed4 	bl	800fc3c <ucdr_serialize_string>
 800ce94:	6863      	ldr	r3, [r4, #4]
 800ce96:	2b04      	cmp	r3, #4
 800ce98:	d938      	bls.n	800cf0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	d043      	beq.n	800cf26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ce9e:	69a1      	ldr	r1, [r4, #24]
 800cea0:	4630      	mov	r0, r6
 800cea2:	f002 fecb 	bl	800fc3c <ucdr_serialize_string>
 800cea6:	6863      	ldr	r3, [r4, #4]
 800cea8:	2b05      	cmp	r3, #5
 800ceaa:	d92f      	bls.n	800cf0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ceac:	2800      	cmp	r0, #0
 800ceae:	d03a      	beq.n	800cf26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ceb0:	69e1      	ldr	r1, [r4, #28]
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	f002 fec2 	bl	800fc3c <ucdr_serialize_string>
 800ceb8:	6863      	ldr	r3, [r4, #4]
 800ceba:	2b06      	cmp	r3, #6
 800cebc:	d926      	bls.n	800cf0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800cebe:	b390      	cbz	r0, 800cf26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800cec0:	6a21      	ldr	r1, [r4, #32]
 800cec2:	4630      	mov	r0, r6
 800cec4:	f002 feba 	bl	800fc3c <ucdr_serialize_string>
 800cec8:	6863      	ldr	r3, [r4, #4]
 800ceca:	2b07      	cmp	r3, #7
 800cecc:	d91e      	bls.n	800cf0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800cece:	b350      	cbz	r0, 800cf26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ced0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ced2:	4630      	mov	r0, r6
 800ced4:	f002 feb2 	bl	800fc3c <ucdr_serialize_string>
 800ced8:	6863      	ldr	r3, [r4, #4]
 800ceda:	2b08      	cmp	r3, #8
 800cedc:	d916      	bls.n	800cf0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800cede:	b310      	cbz	r0, 800cf26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800cee0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800cee2:	4630      	mov	r0, r6
 800cee4:	f002 feaa 	bl	800fc3c <ucdr_serialize_string>
 800cee8:	6863      	ldr	r3, [r4, #4]
 800ceea:	2b09      	cmp	r3, #9
 800ceec:	d90e      	bls.n	800cf0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ceee:	b1d0      	cbz	r0, 800cf26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800cef0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800cef4:	2709      	movs	r7, #9
 800cef6:	e000      	b.n	800cefa <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800cef8:	b1a8      	cbz	r0, 800cf26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800cefa:	f858 1b04 	ldr.w	r1, [r8], #4
 800cefe:	4630      	mov	r0, r6
 800cf00:	f002 fe9c 	bl	800fc3c <ucdr_serialize_string>
 800cf04:	6862      	ldr	r2, [r4, #4]
 800cf06:	3701      	adds	r7, #1
 800cf08:	4297      	cmp	r7, r2
 800cf0a:	d3f5      	bcc.n	800cef8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800cf0c:	4005      	ands	r5, r0
 800cf0e:	b2ed      	uxtb	r5, r5
 800cf10:	e78a      	b.n	800ce28 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800cf12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cf14:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800cf18:	4630      	mov	r0, r6
 800cf1a:	f002 fe63 	bl	800fbe4 <ucdr_serialize_sequence_uint8_t>
 800cf1e:	4005      	ands	r5, r0
 800cf20:	4628      	mov	r0, r5
 800cf22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf26:	2500      	movs	r5, #0
 800cf28:	e77e      	b.n	800ce28 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800cf2a:	4028      	ands	r0, r5
 800cf2c:	b2c5      	uxtb	r5, r0
 800cf2e:	e77b      	b.n	800ce28 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800cf30 <uxr_serialize_OBJK_Publisher_Binary>:
 800cf30:	b570      	push	{r4, r5, r6, lr}
 800cf32:	460d      	mov	r5, r1
 800cf34:	7809      	ldrb	r1, [r1, #0]
 800cf36:	4606      	mov	r6, r0
 800cf38:	f7fc ff94 	bl	8009e64 <ucdr_serialize_bool>
 800cf3c:	782b      	ldrb	r3, [r5, #0]
 800cf3e:	4604      	mov	r4, r0
 800cf40:	b94b      	cbnz	r3, 800cf56 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800cf42:	7a29      	ldrb	r1, [r5, #8]
 800cf44:	4630      	mov	r0, r6
 800cf46:	f7fc ff8d 	bl	8009e64 <ucdr_serialize_bool>
 800cf4a:	7a2b      	ldrb	r3, [r5, #8]
 800cf4c:	4004      	ands	r4, r0
 800cf4e:	b2e4      	uxtb	r4, r4
 800cf50:	b943      	cbnz	r3, 800cf64 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800cf52:	4620      	mov	r0, r4
 800cf54:	bd70      	pop	{r4, r5, r6, pc}
 800cf56:	6869      	ldr	r1, [r5, #4]
 800cf58:	4630      	mov	r0, r6
 800cf5a:	f002 fe6f 	bl	800fc3c <ucdr_serialize_string>
 800cf5e:	4004      	ands	r4, r0
 800cf60:	b2e4      	uxtb	r4, r4
 800cf62:	e7ee      	b.n	800cf42 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800cf64:	f105 010c 	add.w	r1, r5, #12
 800cf68:	4630      	mov	r0, r6
 800cf6a:	f7ff ff53 	bl	800ce14 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800cf6e:	4004      	ands	r4, r0
 800cf70:	4620      	mov	r0, r4
 800cf72:	bd70      	pop	{r4, r5, r6, pc}

0800cf74 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800cf74:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800cf78:	4688      	mov	r8, r1
 800cf7a:	8809      	ldrh	r1, [r1, #0]
 800cf7c:	4681      	mov	r9, r0
 800cf7e:	f7fc ffcb 	bl	8009f18 <ucdr_serialize_uint16_t>
 800cf82:	f898 1002 	ldrb.w	r1, [r8, #2]
 800cf86:	4606      	mov	r6, r0
 800cf88:	4648      	mov	r0, r9
 800cf8a:	f7fc ff6b 	bl	8009e64 <ucdr_serialize_bool>
 800cf8e:	f898 3002 	ldrb.w	r3, [r8, #2]
 800cf92:	4006      	ands	r6, r0
 800cf94:	b2f5      	uxtb	r5, r6
 800cf96:	b9eb      	cbnz	r3, 800cfd4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800cf98:	f898 1006 	ldrb.w	r1, [r8, #6]
 800cf9c:	4648      	mov	r0, r9
 800cf9e:	f7fc ff61 	bl	8009e64 <ucdr_serialize_bool>
 800cfa2:	f898 3006 	ldrb.w	r3, [r8, #6]
 800cfa6:	4005      	ands	r5, r0
 800cfa8:	bb7b      	cbnz	r3, 800d00a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800cfaa:	f898 100c 	ldrb.w	r1, [r8, #12]
 800cfae:	4648      	mov	r0, r9
 800cfb0:	f7fc ff58 	bl	8009e64 <ucdr_serialize_bool>
 800cfb4:	f898 300c 	ldrb.w	r3, [r8, #12]
 800cfb8:	4005      	ands	r5, r0
 800cfba:	b9f3      	cbnz	r3, 800cffa <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800cfbc:	f898 1014 	ldrb.w	r1, [r8, #20]
 800cfc0:	4648      	mov	r0, r9
 800cfc2:	f7fc ff4f 	bl	8009e64 <ucdr_serialize_bool>
 800cfc6:	f898 3014 	ldrb.w	r3, [r8, #20]
 800cfca:	4005      	ands	r5, r0
 800cfcc:	b94b      	cbnz	r3, 800cfe2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800cfce:	4628      	mov	r0, r5
 800cfd0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800cfd4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800cfd8:	4648      	mov	r0, r9
 800cfda:	f7fc ff9d 	bl	8009f18 <ucdr_serialize_uint16_t>
 800cfde:	4005      	ands	r5, r0
 800cfe0:	e7da      	b.n	800cf98 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800cfe2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800cfe6:	f108 011c 	add.w	r1, r8, #28
 800cfea:	4648      	mov	r0, r9
 800cfec:	f002 fdfa 	bl	800fbe4 <ucdr_serialize_sequence_uint8_t>
 800cff0:	4028      	ands	r0, r5
 800cff2:	b2c5      	uxtb	r5, r0
 800cff4:	4628      	mov	r0, r5
 800cff6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800cffa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cffe:	4648      	mov	r0, r9
 800d000:	f7fd f974 	bl	800a2ec <ucdr_serialize_uint32_t>
 800d004:	4028      	ands	r0, r5
 800d006:	b2c5      	uxtb	r5, r0
 800d008:	e7d8      	b.n	800cfbc <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800d00a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800d00e:	4648      	mov	r0, r9
 800d010:	f7fd f96c 	bl	800a2ec <ucdr_serialize_uint32_t>
 800d014:	4028      	ands	r0, r5
 800d016:	b2c5      	uxtb	r5, r0
 800d018:	e7c7      	b.n	800cfaa <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800d01a:	bf00      	nop

0800d01c <uxr_serialize_OBJK_DataWriter_Binary>:
 800d01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d01e:	2202      	movs	r2, #2
 800d020:	460d      	mov	r5, r1
 800d022:	4606      	mov	r6, r0
 800d024:	f002 fcea 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800d028:	78a9      	ldrb	r1, [r5, #2]
 800d02a:	4604      	mov	r4, r0
 800d02c:	4630      	mov	r0, r6
 800d02e:	f7fc ff19 	bl	8009e64 <ucdr_serialize_bool>
 800d032:	78ab      	ldrb	r3, [r5, #2]
 800d034:	4004      	ands	r4, r0
 800d036:	b2e4      	uxtb	r4, r4
 800d038:	b90b      	cbnz	r3, 800d03e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800d03a:	4620      	mov	r0, r4
 800d03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d03e:	f105 0108 	add.w	r1, r5, #8
 800d042:	4630      	mov	r0, r6
 800d044:	f7ff ff96 	bl	800cf74 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800d048:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800d04c:	4607      	mov	r7, r0
 800d04e:	4630      	mov	r0, r6
 800d050:	f7fc ff08 	bl	8009e64 <ucdr_serialize_bool>
 800d054:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800d058:	4038      	ands	r0, r7
 800d05a:	b2c7      	uxtb	r7, r0
 800d05c:	b913      	cbnz	r3, 800d064 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800d05e:	403c      	ands	r4, r7
 800d060:	4620      	mov	r0, r4
 800d062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d064:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800d068:	4630      	mov	r0, r6
 800d06a:	f7fd fb95 	bl	800a798 <ucdr_serialize_uint64_t>
 800d06e:	4007      	ands	r7, r0
 800d070:	e7f5      	b.n	800d05e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800d072:	bf00      	nop

0800d074 <uxr_deserialize_ObjectVariant>:
 800d074:	b570      	push	{r4, r5, r6, lr}
 800d076:	4605      	mov	r5, r0
 800d078:	460e      	mov	r6, r1
 800d07a:	f7fc ff37 	bl	8009eec <ucdr_deserialize_uint8_t>
 800d07e:	b168      	cbz	r0, 800d09c <uxr_deserialize_ObjectVariant+0x28>
 800d080:	7833      	ldrb	r3, [r6, #0]
 800d082:	3b01      	subs	r3, #1
 800d084:	4604      	mov	r4, r0
 800d086:	2b0d      	cmp	r3, #13
 800d088:	d809      	bhi.n	800d09e <uxr_deserialize_ObjectVariant+0x2a>
 800d08a:	e8df f003 	tbb	[pc, r3]
 800d08e:	0a41      	.short	0x0a41
 800d090:	0a0a2323 	.word	0x0a0a2323
 800d094:	10080a0a 	.word	0x10080a0a
 800d098:	565c1010 	.word	0x565c1010
 800d09c:	2400      	movs	r4, #0
 800d09e:	4620      	mov	r0, r4
 800d0a0:	bd70      	pop	{r4, r5, r6, pc}
 800d0a2:	1d31      	adds	r1, r6, #4
 800d0a4:	4628      	mov	r0, r5
 800d0a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0aa:	f7ff be41 	b.w	800cd30 <uxr_deserialize_DATAWRITER_Representation>
 800d0ae:	1d31      	adds	r1, r6, #4
 800d0b0:	4628      	mov	r0, r5
 800d0b2:	f7fc ff1b 	bl	8009eec <ucdr_deserialize_uint8_t>
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	d0f0      	beq.n	800d09c <uxr_deserialize_ObjectVariant+0x28>
 800d0ba:	7933      	ldrb	r3, [r6, #4]
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d001      	beq.n	800d0c4 <uxr_deserialize_ObjectVariant+0x50>
 800d0c0:	2b02      	cmp	r3, #2
 800d0c2:	d1ec      	bne.n	800d09e <uxr_deserialize_ObjectVariant+0x2a>
 800d0c4:	68b1      	ldr	r1, [r6, #8]
 800d0c6:	4628      	mov	r0, r5
 800d0c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0d0:	f002 bdc4 	b.w	800fc5c <ucdr_deserialize_string>
 800d0d4:	1d31      	adds	r1, r6, #4
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	f7fc ff08 	bl	8009eec <ucdr_deserialize_uint8_t>
 800d0dc:	4604      	mov	r4, r0
 800d0de:	b170      	cbz	r0, 800d0fe <uxr_deserialize_ObjectVariant+0x8a>
 800d0e0:	7933      	ldrb	r3, [r6, #4]
 800d0e2:	2b02      	cmp	r3, #2
 800d0e4:	d04c      	beq.n	800d180 <uxr_deserialize_ObjectVariant+0x10c>
 800d0e6:	2b03      	cmp	r3, #3
 800d0e8:	d109      	bne.n	800d0fe <uxr_deserialize_ObjectVariant+0x8a>
 800d0ea:	f106 0308 	add.w	r3, r6, #8
 800d0ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0f2:	f106 010c 	add.w	r1, r6, #12
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	f002 fd86 	bl	800fc08 <ucdr_deserialize_sequence_uint8_t>
 800d0fc:	4604      	mov	r4, r0
 800d0fe:	2202      	movs	r2, #2
 800d100:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800d104:	4628      	mov	r0, r5
 800d106:	f002 fcdd 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800d10a:	4020      	ands	r0, r4
 800d10c:	b2c4      	uxtb	r4, r0
 800d10e:	e7c6      	b.n	800d09e <uxr_deserialize_ObjectVariant+0x2a>
 800d110:	1d31      	adds	r1, r6, #4
 800d112:	4628      	mov	r0, r5
 800d114:	f7fc feea 	bl	8009eec <ucdr_deserialize_uint8_t>
 800d118:	4604      	mov	r4, r0
 800d11a:	b130      	cbz	r0, 800d12a <uxr_deserialize_ObjectVariant+0xb6>
 800d11c:	7933      	ldrb	r3, [r6, #4]
 800d11e:	2b02      	cmp	r3, #2
 800d120:	d036      	beq.n	800d190 <uxr_deserialize_ObjectVariant+0x11c>
 800d122:	2b03      	cmp	r3, #3
 800d124:	d03c      	beq.n	800d1a0 <uxr_deserialize_ObjectVariant+0x12c>
 800d126:	2b01      	cmp	r3, #1
 800d128:	d032      	beq.n	800d190 <uxr_deserialize_ObjectVariant+0x11c>
 800d12a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800d12e:	4628      	mov	r0, r5
 800d130:	f7fd fc82 	bl	800aa38 <ucdr_deserialize_int16_t>
 800d134:	4020      	ands	r0, r4
 800d136:	b2c4      	uxtb	r4, r0
 800d138:	e7b1      	b.n	800d09e <uxr_deserialize_ObjectVariant+0x2a>
 800d13a:	1d31      	adds	r1, r6, #4
 800d13c:	4628      	mov	r0, r5
 800d13e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d142:	f7ff bcab 	b.w	800ca9c <uxr_deserialize_CLIENT_Representation>
 800d146:	2204      	movs	r2, #4
 800d148:	18b1      	adds	r1, r6, r2
 800d14a:	4628      	mov	r0, r5
 800d14c:	f002 fcba 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800d150:	2202      	movs	r2, #2
 800d152:	f106 0108 	add.w	r1, r6, #8
 800d156:	4604      	mov	r4, r0
 800d158:	4628      	mov	r0, r5
 800d15a:	f002 fcb3 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800d15e:	2202      	movs	r2, #2
 800d160:	4004      	ands	r4, r0
 800d162:	f106 010a 	add.w	r1, r6, #10
 800d166:	4628      	mov	r0, r5
 800d168:	f002 fcac 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800d16c:	b2e4      	uxtb	r4, r4
 800d16e:	4603      	mov	r3, r0
 800d170:	f106 010c 	add.w	r1, r6, #12
 800d174:	4628      	mov	r0, r5
 800d176:	401c      	ands	r4, r3
 800d178:	f7fc fe8a 	bl	8009e90 <ucdr_deserialize_bool>
 800d17c:	4004      	ands	r4, r0
 800d17e:	e78e      	b.n	800d09e <uxr_deserialize_ObjectVariant+0x2a>
 800d180:	68b1      	ldr	r1, [r6, #8]
 800d182:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d186:	4628      	mov	r0, r5
 800d188:	f002 fd68 	bl	800fc5c <ucdr_deserialize_string>
 800d18c:	4604      	mov	r4, r0
 800d18e:	e7b6      	b.n	800d0fe <uxr_deserialize_ObjectVariant+0x8a>
 800d190:	68b1      	ldr	r1, [r6, #8]
 800d192:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d196:	4628      	mov	r0, r5
 800d198:	f002 fd60 	bl	800fc5c <ucdr_deserialize_string>
 800d19c:	4604      	mov	r4, r0
 800d19e:	e7c4      	b.n	800d12a <uxr_deserialize_ObjectVariant+0xb6>
 800d1a0:	f106 0308 	add.w	r3, r6, #8
 800d1a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1a8:	f106 010c 	add.w	r1, r6, #12
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	f002 fd2b 	bl	800fc08 <ucdr_deserialize_sequence_uint8_t>
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	e7b9      	b.n	800d12a <uxr_deserialize_ObjectVariant+0xb6>
 800d1b6:	bf00      	nop

0800d1b8 <uxr_deserialize_BaseObjectRequest>:
 800d1b8:	b570      	push	{r4, r5, r6, lr}
 800d1ba:	2202      	movs	r2, #2
 800d1bc:	4605      	mov	r5, r0
 800d1be:	460e      	mov	r6, r1
 800d1c0:	f002 fc80 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800d1c4:	2202      	movs	r2, #2
 800d1c6:	4604      	mov	r4, r0
 800d1c8:	18b1      	adds	r1, r6, r2
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	f002 fc7a 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800d1d0:	4020      	ands	r0, r4
 800d1d2:	b2c0      	uxtb	r0, r0
 800d1d4:	bd70      	pop	{r4, r5, r6, pc}
 800d1d6:	bf00      	nop

0800d1d8 <uxr_serialize_ActivityInfoVariant>:
 800d1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1dc:	460d      	mov	r5, r1
 800d1de:	7809      	ldrb	r1, [r1, #0]
 800d1e0:	4607      	mov	r7, r0
 800d1e2:	f7fc fe6d 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800d1e6:	4681      	mov	r9, r0
 800d1e8:	b138      	cbz	r0, 800d1fa <uxr_serialize_ActivityInfoVariant+0x22>
 800d1ea:	782b      	ldrb	r3, [r5, #0]
 800d1ec:	2b06      	cmp	r3, #6
 800d1ee:	f000 8082 	beq.w	800d2f6 <uxr_serialize_ActivityInfoVariant+0x11e>
 800d1f2:	2b0d      	cmp	r3, #13
 800d1f4:	d016      	beq.n	800d224 <uxr_serialize_ActivityInfoVariant+0x4c>
 800d1f6:	2b05      	cmp	r3, #5
 800d1f8:	d002      	beq.n	800d200 <uxr_serialize_ActivityInfoVariant+0x28>
 800d1fa:	4648      	mov	r0, r9
 800d1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d200:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800d204:	4638      	mov	r0, r7
 800d206:	f7fd fb97 	bl	800a938 <ucdr_serialize_int16_t>
 800d20a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800d20e:	4681      	mov	r9, r0
 800d210:	4638      	mov	r0, r7
 800d212:	f7fd fac1 	bl	800a798 <ucdr_serialize_uint64_t>
 800d216:	ea09 0000 	and.w	r0, r9, r0
 800d21a:	fa5f f980 	uxtb.w	r9, r0
 800d21e:	4648      	mov	r0, r9
 800d220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d224:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800d228:	4638      	mov	r0, r7
 800d22a:	f7fd fb85 	bl	800a938 <ucdr_serialize_int16_t>
 800d22e:	68e9      	ldr	r1, [r5, #12]
 800d230:	4681      	mov	r9, r0
 800d232:	4638      	mov	r0, r7
 800d234:	f7fd f85a 	bl	800a2ec <ucdr_serialize_uint32_t>
 800d238:	68eb      	ldr	r3, [r5, #12]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d0eb      	beq.n	800d216 <uxr_serialize_ActivityInfoVariant+0x3e>
 800d23e:	b320      	cbz	r0, 800d28a <uxr_serialize_ActivityInfoVariant+0xb2>
 800d240:	f105 080c 	add.w	r8, r5, #12
 800d244:	2600      	movs	r6, #0
 800d246:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800d24a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800d24e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800d252:	4638      	mov	r0, r7
 800d254:	f7fc fe34 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800d258:	2800      	cmp	r0, #0
 800d25a:	d053      	beq.n	800d304 <uxr_serialize_ActivityInfoVariant+0x12c>
 800d25c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800d260:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800d264:	0074      	lsls	r4, r6, #1
 800d266:	00c9      	lsls	r1, r1, #3
 800d268:	2b03      	cmp	r3, #3
 800d26a:	d854      	bhi.n	800d316 <uxr_serialize_ActivityInfoVariant+0x13e>
 800d26c:	e8df f003 	tbb	[pc, r3]
 800d270:	02102132 	.word	0x02102132
 800d274:	4441      	add	r1, r8
 800d276:	4638      	mov	r0, r7
 800d278:	6889      	ldr	r1, [r1, #8]
 800d27a:	f002 fcdf 	bl	800fc3c <ucdr_serialize_string>
 800d27e:	68ea      	ldr	r2, [r5, #12]
 800d280:	3601      	adds	r6, #1
 800d282:	4296      	cmp	r6, r2
 800d284:	d242      	bcs.n	800d30c <uxr_serialize_ActivityInfoVariant+0x134>
 800d286:	2800      	cmp	r0, #0
 800d288:	d1dd      	bne.n	800d246 <uxr_serialize_ActivityInfoVariant+0x6e>
 800d28a:	f04f 0900 	mov.w	r9, #0
 800d28e:	e7b4      	b.n	800d1fa <uxr_serialize_ActivityInfoVariant+0x22>
 800d290:	3108      	adds	r1, #8
 800d292:	4441      	add	r1, r8
 800d294:	2210      	movs	r2, #16
 800d296:	4638      	mov	r0, r7
 800d298:	f002 fbb0 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800d29c:	4434      	add	r4, r6
 800d29e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800d2a2:	4604      	mov	r4, r0
 800d2a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d2a6:	4638      	mov	r0, r7
 800d2a8:	f7fd f820 	bl	800a2ec <ucdr_serialize_uint32_t>
 800d2ac:	4020      	ands	r0, r4
 800d2ae:	b2c0      	uxtb	r0, r0
 800d2b0:	e7e5      	b.n	800d27e <uxr_serialize_ActivityInfoVariant+0xa6>
 800d2b2:	3108      	adds	r1, #8
 800d2b4:	4441      	add	r1, r8
 800d2b6:	2204      	movs	r2, #4
 800d2b8:	4638      	mov	r0, r7
 800d2ba:	f002 fb9f 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800d2be:	4434      	add	r4, r6
 800d2c0:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800d2c4:	4604      	mov	r4, r0
 800d2c6:	8b19      	ldrh	r1, [r3, #24]
 800d2c8:	4638      	mov	r0, r7
 800d2ca:	f7fc fe25 	bl	8009f18 <ucdr_serialize_uint16_t>
 800d2ce:	4020      	ands	r0, r4
 800d2d0:	b2c0      	uxtb	r0, r0
 800d2d2:	e7d4      	b.n	800d27e <uxr_serialize_ActivityInfoVariant+0xa6>
 800d2d4:	3108      	adds	r1, #8
 800d2d6:	4441      	add	r1, r8
 800d2d8:	2202      	movs	r2, #2
 800d2da:	4638      	mov	r0, r7
 800d2dc:	f002 fb8e 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800d2e0:	4434      	add	r4, r6
 800d2e2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	7d99      	ldrb	r1, [r3, #22]
 800d2ea:	4638      	mov	r0, r7
 800d2ec:	f7fc fde8 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800d2f0:	4020      	ands	r0, r4
 800d2f2:	b2c0      	uxtb	r0, r0
 800d2f4:	e7c3      	b.n	800d27e <uxr_serialize_ActivityInfoVariant+0xa6>
 800d2f6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800d2fa:	4638      	mov	r0, r7
 800d2fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d300:	f7fd bb1a 	b.w	800a938 <ucdr_serialize_int16_t>
 800d304:	68ea      	ldr	r2, [r5, #12]
 800d306:	3601      	adds	r6, #1
 800d308:	42b2      	cmp	r2, r6
 800d30a:	d8be      	bhi.n	800d28a <uxr_serialize_ActivityInfoVariant+0xb2>
 800d30c:	ea09 0900 	and.w	r9, r9, r0
 800d310:	fa5f f989 	uxtb.w	r9, r9
 800d314:	e771      	b.n	800d1fa <uxr_serialize_ActivityInfoVariant+0x22>
 800d316:	68eb      	ldr	r3, [r5, #12]
 800d318:	3601      	adds	r6, #1
 800d31a:	429e      	cmp	r6, r3
 800d31c:	f10a 0a18 	add.w	sl, sl, #24
 800d320:	d395      	bcc.n	800d24e <uxr_serialize_ActivityInfoVariant+0x76>
 800d322:	e76a      	b.n	800d1fa <uxr_serialize_ActivityInfoVariant+0x22>

0800d324 <uxr_deserialize_BaseObjectReply>:
 800d324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d328:	2202      	movs	r2, #2
 800d32a:	4606      	mov	r6, r0
 800d32c:	460f      	mov	r7, r1
 800d32e:	f002 fbc9 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800d332:	2202      	movs	r2, #2
 800d334:	18b9      	adds	r1, r7, r2
 800d336:	4605      	mov	r5, r0
 800d338:	4630      	mov	r0, r6
 800d33a:	f002 fbc3 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800d33e:	1d39      	adds	r1, r7, #4
 800d340:	4680      	mov	r8, r0
 800d342:	4630      	mov	r0, r6
 800d344:	f7fc fdd2 	bl	8009eec <ucdr_deserialize_uint8_t>
 800d348:	1d79      	adds	r1, r7, #5
 800d34a:	4604      	mov	r4, r0
 800d34c:	4630      	mov	r0, r6
 800d34e:	f7fc fdcd 	bl	8009eec <ucdr_deserialize_uint8_t>
 800d352:	ea05 0508 	and.w	r5, r5, r8
 800d356:	402c      	ands	r4, r5
 800d358:	4020      	ands	r0, r4
 800d35a:	b2c0      	uxtb	r0, r0
 800d35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d360 <uxr_serialize_ReadSpecification>:
 800d360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d364:	460e      	mov	r6, r1
 800d366:	7809      	ldrb	r1, [r1, #0]
 800d368:	4607      	mov	r7, r0
 800d36a:	f7fc fda9 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800d36e:	7871      	ldrb	r1, [r6, #1]
 800d370:	4604      	mov	r4, r0
 800d372:	4638      	mov	r0, r7
 800d374:	f7fc fda4 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800d378:	78b1      	ldrb	r1, [r6, #2]
 800d37a:	4004      	ands	r4, r0
 800d37c:	4638      	mov	r0, r7
 800d37e:	f7fc fd71 	bl	8009e64 <ucdr_serialize_bool>
 800d382:	78b3      	ldrb	r3, [r6, #2]
 800d384:	b2e4      	uxtb	r4, r4
 800d386:	4004      	ands	r4, r0
 800d388:	b94b      	cbnz	r3, 800d39e <uxr_serialize_ReadSpecification+0x3e>
 800d38a:	7a31      	ldrb	r1, [r6, #8]
 800d38c:	4638      	mov	r0, r7
 800d38e:	f7fc fd69 	bl	8009e64 <ucdr_serialize_bool>
 800d392:	7a33      	ldrb	r3, [r6, #8]
 800d394:	4004      	ands	r4, r0
 800d396:	b943      	cbnz	r3, 800d3aa <uxr_serialize_ReadSpecification+0x4a>
 800d398:	4620      	mov	r0, r4
 800d39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d39e:	6871      	ldr	r1, [r6, #4]
 800d3a0:	4638      	mov	r0, r7
 800d3a2:	f002 fc4b 	bl	800fc3c <ucdr_serialize_string>
 800d3a6:	4004      	ands	r4, r0
 800d3a8:	e7ef      	b.n	800d38a <uxr_serialize_ReadSpecification+0x2a>
 800d3aa:	8971      	ldrh	r1, [r6, #10]
 800d3ac:	4638      	mov	r0, r7
 800d3ae:	f7fc fdb3 	bl	8009f18 <ucdr_serialize_uint16_t>
 800d3b2:	89b1      	ldrh	r1, [r6, #12]
 800d3b4:	4605      	mov	r5, r0
 800d3b6:	4638      	mov	r0, r7
 800d3b8:	f7fc fdae 	bl	8009f18 <ucdr_serialize_uint16_t>
 800d3bc:	89f1      	ldrh	r1, [r6, #14]
 800d3be:	4005      	ands	r5, r0
 800d3c0:	4638      	mov	r0, r7
 800d3c2:	f7fc fda9 	bl	8009f18 <ucdr_serialize_uint16_t>
 800d3c6:	8a31      	ldrh	r1, [r6, #16]
 800d3c8:	4680      	mov	r8, r0
 800d3ca:	4638      	mov	r0, r7
 800d3cc:	f7fc fda4 	bl	8009f18 <ucdr_serialize_uint16_t>
 800d3d0:	b2ed      	uxtb	r5, r5
 800d3d2:	4025      	ands	r5, r4
 800d3d4:	ea08 0505 	and.w	r5, r8, r5
 800d3d8:	ea00 0405 	and.w	r4, r0, r5
 800d3dc:	4620      	mov	r0, r4
 800d3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3e2:	bf00      	nop

0800d3e4 <uxr_serialize_CREATE_CLIENT_Payload>:
 800d3e4:	f7ff bb02 	b.w	800c9ec <uxr_serialize_CLIENT_Representation>

0800d3e8 <uxr_serialize_CREATE_Payload>:
 800d3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ea:	2202      	movs	r2, #2
 800d3ec:	4607      	mov	r7, r0
 800d3ee:	460e      	mov	r6, r1
 800d3f0:	f002 fb04 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800d3f4:	2202      	movs	r2, #2
 800d3f6:	18b1      	adds	r1, r6, r2
 800d3f8:	4605      	mov	r5, r0
 800d3fa:	4638      	mov	r0, r7
 800d3fc:	f002 fafe 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800d400:	7931      	ldrb	r1, [r6, #4]
 800d402:	4604      	mov	r4, r0
 800d404:	4638      	mov	r0, r7
 800d406:	f7fc fd5b 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800d40a:	b170      	cbz	r0, 800d42a <uxr_serialize_CREATE_Payload+0x42>
 800d40c:	7933      	ldrb	r3, [r6, #4]
 800d40e:	402c      	ands	r4, r5
 800d410:	3b01      	subs	r3, #1
 800d412:	b2e4      	uxtb	r4, r4
 800d414:	2b0d      	cmp	r3, #13
 800d416:	d809      	bhi.n	800d42c <uxr_serialize_CREATE_Payload+0x44>
 800d418:	e8df f003 	tbb	[pc, r3]
 800d41c:	23230a4c 	.word	0x23230a4c
 800d420:	0a0a0a0a 	.word	0x0a0a0a0a
 800d424:	12121208 	.word	0x12121208
 800d428:	3e45      	.short	0x3e45
 800d42a:	2400      	movs	r4, #0
 800d42c:	4620      	mov	r0, r4
 800d42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d430:	f106 0108 	add.w	r1, r6, #8
 800d434:	4638      	mov	r0, r7
 800d436:	f7ff fbdf 	bl	800cbf8 <uxr_serialize_DATAWRITER_Representation>
 800d43a:	4004      	ands	r4, r0
 800d43c:	4620      	mov	r0, r4
 800d43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d440:	7a31      	ldrb	r1, [r6, #8]
 800d442:	4638      	mov	r0, r7
 800d444:	f7fc fd3c 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800d448:	2800      	cmp	r0, #0
 800d44a:	d0ee      	beq.n	800d42a <uxr_serialize_CREATE_Payload+0x42>
 800d44c:	7a33      	ldrb	r3, [r6, #8]
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d001      	beq.n	800d456 <uxr_serialize_CREATE_Payload+0x6e>
 800d452:	2b02      	cmp	r3, #2
 800d454:	d1ea      	bne.n	800d42c <uxr_serialize_CREATE_Payload+0x44>
 800d456:	68f1      	ldr	r1, [r6, #12]
 800d458:	4638      	mov	r0, r7
 800d45a:	f002 fbef 	bl	800fc3c <ucdr_serialize_string>
 800d45e:	4004      	ands	r4, r0
 800d460:	e7e4      	b.n	800d42c <uxr_serialize_CREATE_Payload+0x44>
 800d462:	7a31      	ldrb	r1, [r6, #8]
 800d464:	4638      	mov	r0, r7
 800d466:	f7fc fd2b 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800d46a:	4605      	mov	r5, r0
 800d46c:	b158      	cbz	r0, 800d486 <uxr_serialize_CREATE_Payload+0x9e>
 800d46e:	7a33      	ldrb	r3, [r6, #8]
 800d470:	2b02      	cmp	r3, #2
 800d472:	d034      	beq.n	800d4de <uxr_serialize_CREATE_Payload+0xf6>
 800d474:	2b03      	cmp	r3, #3
 800d476:	d106      	bne.n	800d486 <uxr_serialize_CREATE_Payload+0x9e>
 800d478:	68f2      	ldr	r2, [r6, #12]
 800d47a:	f106 0110 	add.w	r1, r6, #16
 800d47e:	4638      	mov	r0, r7
 800d480:	f002 fbb0 	bl	800fbe4 <ucdr_serialize_sequence_uint8_t>
 800d484:	4605      	mov	r5, r0
 800d486:	2202      	movs	r2, #2
 800d488:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800d48c:	4638      	mov	r0, r7
 800d48e:	f002 fab5 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800d492:	4028      	ands	r0, r5
 800d494:	4004      	ands	r4, r0
 800d496:	e7c9      	b.n	800d42c <uxr_serialize_CREATE_Payload+0x44>
 800d498:	f106 0108 	add.w	r1, r6, #8
 800d49c:	4638      	mov	r0, r7
 800d49e:	f7ff faa5 	bl	800c9ec <uxr_serialize_CLIENT_Representation>
 800d4a2:	4004      	ands	r4, r0
 800d4a4:	e7c2      	b.n	800d42c <uxr_serialize_CREATE_Payload+0x44>
 800d4a6:	f106 0108 	add.w	r1, r6, #8
 800d4aa:	4638      	mov	r0, r7
 800d4ac:	f7ff fb5a 	bl	800cb64 <uxr_serialize_AGENT_Representation>
 800d4b0:	4004      	ands	r4, r0
 800d4b2:	e7bb      	b.n	800d42c <uxr_serialize_CREATE_Payload+0x44>
 800d4b4:	7a31      	ldrb	r1, [r6, #8]
 800d4b6:	4638      	mov	r0, r7
 800d4b8:	f7fc fd02 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800d4bc:	4605      	mov	r5, r0
 800d4be:	b130      	cbz	r0, 800d4ce <uxr_serialize_CREATE_Payload+0xe6>
 800d4c0:	7a33      	ldrb	r3, [r6, #8]
 800d4c2:	2b02      	cmp	r3, #2
 800d4c4:	d011      	beq.n	800d4ea <uxr_serialize_CREATE_Payload+0x102>
 800d4c6:	2b03      	cmp	r3, #3
 800d4c8:	d015      	beq.n	800d4f6 <uxr_serialize_CREATE_Payload+0x10e>
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d00d      	beq.n	800d4ea <uxr_serialize_CREATE_Payload+0x102>
 800d4ce:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800d4d2:	4638      	mov	r0, r7
 800d4d4:	f7fd fa30 	bl	800a938 <ucdr_serialize_int16_t>
 800d4d8:	4028      	ands	r0, r5
 800d4da:	4004      	ands	r4, r0
 800d4dc:	e7a6      	b.n	800d42c <uxr_serialize_CREATE_Payload+0x44>
 800d4de:	68f1      	ldr	r1, [r6, #12]
 800d4e0:	4638      	mov	r0, r7
 800d4e2:	f002 fbab 	bl	800fc3c <ucdr_serialize_string>
 800d4e6:	4605      	mov	r5, r0
 800d4e8:	e7cd      	b.n	800d486 <uxr_serialize_CREATE_Payload+0x9e>
 800d4ea:	68f1      	ldr	r1, [r6, #12]
 800d4ec:	4638      	mov	r0, r7
 800d4ee:	f002 fba5 	bl	800fc3c <ucdr_serialize_string>
 800d4f2:	4605      	mov	r5, r0
 800d4f4:	e7eb      	b.n	800d4ce <uxr_serialize_CREATE_Payload+0xe6>
 800d4f6:	68f2      	ldr	r2, [r6, #12]
 800d4f8:	f106 0110 	add.w	r1, r6, #16
 800d4fc:	4638      	mov	r0, r7
 800d4fe:	f002 fb71 	bl	800fbe4 <ucdr_serialize_sequence_uint8_t>
 800d502:	4605      	mov	r5, r0
 800d504:	e7e3      	b.n	800d4ce <uxr_serialize_CREATE_Payload+0xe6>
 800d506:	bf00      	nop

0800d508 <uxr_deserialize_GET_INFO_Payload>:
 800d508:	b570      	push	{r4, r5, r6, lr}
 800d50a:	2202      	movs	r2, #2
 800d50c:	4605      	mov	r5, r0
 800d50e:	460e      	mov	r6, r1
 800d510:	f002 fad8 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800d514:	2202      	movs	r2, #2
 800d516:	18b1      	adds	r1, r6, r2
 800d518:	4604      	mov	r4, r0
 800d51a:	4628      	mov	r0, r5
 800d51c:	f002 fad2 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800d520:	1d31      	adds	r1, r6, #4
 800d522:	4004      	ands	r4, r0
 800d524:	4628      	mov	r0, r5
 800d526:	f7fd f811 	bl	800a54c <ucdr_deserialize_uint32_t>
 800d52a:	b2e4      	uxtb	r4, r4
 800d52c:	4020      	ands	r0, r4
 800d52e:	bd70      	pop	{r4, r5, r6, pc}

0800d530 <uxr_serialize_DELETE_Payload>:
 800d530:	b570      	push	{r4, r5, r6, lr}
 800d532:	2202      	movs	r2, #2
 800d534:	4605      	mov	r5, r0
 800d536:	460e      	mov	r6, r1
 800d538:	f002 fa60 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800d53c:	2202      	movs	r2, #2
 800d53e:	4604      	mov	r4, r0
 800d540:	18b1      	adds	r1, r6, r2
 800d542:	4628      	mov	r0, r5
 800d544:	f002 fa5a 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800d548:	4020      	ands	r0, r4
 800d54a:	b2c0      	uxtb	r0, r0
 800d54c:	bd70      	pop	{r4, r5, r6, pc}
 800d54e:	bf00      	nop

0800d550 <uxr_deserialize_STATUS_AGENT_Payload>:
 800d550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d554:	4605      	mov	r5, r0
 800d556:	460e      	mov	r6, r1
 800d558:	f7fc fcc8 	bl	8009eec <ucdr_deserialize_uint8_t>
 800d55c:	1c71      	adds	r1, r6, #1
 800d55e:	4604      	mov	r4, r0
 800d560:	4628      	mov	r0, r5
 800d562:	f7fc fcc3 	bl	8009eec <ucdr_deserialize_uint8_t>
 800d566:	2204      	movs	r2, #4
 800d568:	18b1      	adds	r1, r6, r2
 800d56a:	4680      	mov	r8, r0
 800d56c:	4628      	mov	r0, r5
 800d56e:	f002 faa9 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800d572:	f106 0108 	add.w	r1, r6, #8
 800d576:	4607      	mov	r7, r0
 800d578:	2202      	movs	r2, #2
 800d57a:	4628      	mov	r0, r5
 800d57c:	f002 faa2 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800d580:	ea04 0308 	and.w	r3, r4, r8
 800d584:	b2db      	uxtb	r3, r3
 800d586:	ea03 0407 	and.w	r4, r3, r7
 800d58a:	2202      	movs	r2, #2
 800d58c:	4607      	mov	r7, r0
 800d58e:	f106 010a 	add.w	r1, r6, #10
 800d592:	4628      	mov	r0, r5
 800d594:	f002 fa96 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800d598:	f106 010c 	add.w	r1, r6, #12
 800d59c:	4603      	mov	r3, r0
 800d59e:	4628      	mov	r0, r5
 800d5a0:	461d      	mov	r5, r3
 800d5a2:	f7fc fc75 	bl	8009e90 <ucdr_deserialize_bool>
 800d5a6:	403c      	ands	r4, r7
 800d5a8:	4025      	ands	r5, r4
 800d5aa:	4028      	ands	r0, r5
 800d5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d5b0 <uxr_deserialize_STATUS_Payload>:
 800d5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b4:	2202      	movs	r2, #2
 800d5b6:	4606      	mov	r6, r0
 800d5b8:	460f      	mov	r7, r1
 800d5ba:	f002 fa83 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800d5be:	2202      	movs	r2, #2
 800d5c0:	18b9      	adds	r1, r7, r2
 800d5c2:	4605      	mov	r5, r0
 800d5c4:	4630      	mov	r0, r6
 800d5c6:	f002 fa7d 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800d5ca:	1d39      	adds	r1, r7, #4
 800d5cc:	4680      	mov	r8, r0
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	f7fc fc8c 	bl	8009eec <ucdr_deserialize_uint8_t>
 800d5d4:	1d79      	adds	r1, r7, #5
 800d5d6:	4604      	mov	r4, r0
 800d5d8:	4630      	mov	r0, r6
 800d5da:	f7fc fc87 	bl	8009eec <ucdr_deserialize_uint8_t>
 800d5de:	ea05 0508 	and.w	r5, r5, r8
 800d5e2:	402c      	ands	r4, r5
 800d5e4:	4020      	ands	r0, r4
 800d5e6:	b2c0      	uxtb	r0, r0
 800d5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d5ec <uxr_serialize_INFO_Payload>:
 800d5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5f0:	2202      	movs	r2, #2
 800d5f2:	460c      	mov	r4, r1
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	f002 fa01 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800d5fa:	2202      	movs	r2, #2
 800d5fc:	18a1      	adds	r1, r4, r2
 800d5fe:	4680      	mov	r8, r0
 800d600:	4628      	mov	r0, r5
 800d602:	f002 f9fb 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800d606:	7921      	ldrb	r1, [r4, #4]
 800d608:	4607      	mov	r7, r0
 800d60a:	4628      	mov	r0, r5
 800d60c:	f7fc fc58 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800d610:	7961      	ldrb	r1, [r4, #5]
 800d612:	4606      	mov	r6, r0
 800d614:	4628      	mov	r0, r5
 800d616:	f7fc fc53 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800d61a:	ea08 0807 	and.w	r8, r8, r7
 800d61e:	ea06 0608 	and.w	r6, r6, r8
 800d622:	4006      	ands	r6, r0
 800d624:	7a21      	ldrb	r1, [r4, #8]
 800d626:	4628      	mov	r0, r5
 800d628:	f7fc fc1c 	bl	8009e64 <ucdr_serialize_bool>
 800d62c:	7a23      	ldrb	r3, [r4, #8]
 800d62e:	b2f7      	uxtb	r7, r6
 800d630:	4606      	mov	r6, r0
 800d632:	b96b      	cbnz	r3, 800d650 <uxr_serialize_INFO_Payload+0x64>
 800d634:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800d638:	4628      	mov	r0, r5
 800d63a:	f7fc fc13 	bl	8009e64 <ucdr_serialize_bool>
 800d63e:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800d642:	4030      	ands	r0, r6
 800d644:	b2c6      	uxtb	r6, r0
 800d646:	b983      	cbnz	r3, 800d66a <uxr_serialize_INFO_Payload+0x7e>
 800d648:	ea06 0007 	and.w	r0, r6, r7
 800d64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d650:	7b21      	ldrb	r1, [r4, #12]
 800d652:	4628      	mov	r0, r5
 800d654:	f7fc fc34 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800d658:	b188      	cbz	r0, 800d67e <uxr_serialize_INFO_Payload+0x92>
 800d65a:	f104 010c 	add.w	r1, r4, #12
 800d65e:	4628      	mov	r0, r5
 800d660:	f7ff faf2 	bl	800cc48 <uxr_serialize_ObjectVariant.part.0>
 800d664:	4030      	ands	r0, r6
 800d666:	b2c6      	uxtb	r6, r0
 800d668:	e7e4      	b.n	800d634 <uxr_serialize_INFO_Payload+0x48>
 800d66a:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800d66e:	4628      	mov	r0, r5
 800d670:	f7ff fdb2 	bl	800d1d8 <uxr_serialize_ActivityInfoVariant>
 800d674:	4006      	ands	r6, r0
 800d676:	ea06 0007 	and.w	r0, r6, r7
 800d67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d67e:	4606      	mov	r6, r0
 800d680:	e7d8      	b.n	800d634 <uxr_serialize_INFO_Payload+0x48>
 800d682:	bf00      	nop

0800d684 <uxr_serialize_READ_DATA_Payload>:
 800d684:	b570      	push	{r4, r5, r6, lr}
 800d686:	2202      	movs	r2, #2
 800d688:	4605      	mov	r5, r0
 800d68a:	460e      	mov	r6, r1
 800d68c:	f002 f9b6 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800d690:	2202      	movs	r2, #2
 800d692:	18b1      	adds	r1, r6, r2
 800d694:	4604      	mov	r4, r0
 800d696:	4628      	mov	r0, r5
 800d698:	f002 f9b0 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800d69c:	1d31      	adds	r1, r6, #4
 800d69e:	4004      	ands	r4, r0
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	f7ff fe5d 	bl	800d360 <uxr_serialize_ReadSpecification>
 800d6a6:	b2e4      	uxtb	r4, r4
 800d6a8:	4020      	ands	r0, r4
 800d6aa:	bd70      	pop	{r4, r5, r6, pc}

0800d6ac <uxr_serialize_WRITE_DATA_Payload_Data>:
 800d6ac:	b570      	push	{r4, r5, r6, lr}
 800d6ae:	2202      	movs	r2, #2
 800d6b0:	4605      	mov	r5, r0
 800d6b2:	460e      	mov	r6, r1
 800d6b4:	f002 f9a2 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800d6b8:	2202      	movs	r2, #2
 800d6ba:	4604      	mov	r4, r0
 800d6bc:	18b1      	adds	r1, r6, r2
 800d6be:	4628      	mov	r0, r5
 800d6c0:	f002 f99c 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800d6c4:	4020      	ands	r0, r4
 800d6c6:	b2c0      	uxtb	r0, r0
 800d6c8:	bd70      	pop	{r4, r5, r6, pc}
 800d6ca:	bf00      	nop

0800d6cc <uxr_serialize_ACKNACK_Payload>:
 800d6cc:	b570      	push	{r4, r5, r6, lr}
 800d6ce:	460c      	mov	r4, r1
 800d6d0:	460e      	mov	r6, r1
 800d6d2:	f834 1b02 	ldrh.w	r1, [r4], #2
 800d6d6:	4605      	mov	r5, r0
 800d6d8:	f7fc fc1e 	bl	8009f18 <ucdr_serialize_uint16_t>
 800d6dc:	2202      	movs	r2, #2
 800d6de:	4621      	mov	r1, r4
 800d6e0:	4604      	mov	r4, r0
 800d6e2:	4628      	mov	r0, r5
 800d6e4:	f002 f98a 	bl	800f9fc <ucdr_serialize_array_uint8_t>
 800d6e8:	7931      	ldrb	r1, [r6, #4]
 800d6ea:	4004      	ands	r4, r0
 800d6ec:	4628      	mov	r0, r5
 800d6ee:	f7fc fbe7 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800d6f2:	b2e4      	uxtb	r4, r4
 800d6f4:	4020      	ands	r0, r4
 800d6f6:	bd70      	pop	{r4, r5, r6, pc}

0800d6f8 <uxr_deserialize_ACKNACK_Payload>:
 800d6f8:	b570      	push	{r4, r5, r6, lr}
 800d6fa:	4605      	mov	r5, r0
 800d6fc:	460e      	mov	r6, r1
 800d6fe:	f7fc fd0b 	bl	800a118 <ucdr_deserialize_uint16_t>
 800d702:	2202      	movs	r2, #2
 800d704:	18b1      	adds	r1, r6, r2
 800d706:	4604      	mov	r4, r0
 800d708:	4628      	mov	r0, r5
 800d70a:	f002 f9db 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800d70e:	1d31      	adds	r1, r6, #4
 800d710:	4004      	ands	r4, r0
 800d712:	4628      	mov	r0, r5
 800d714:	f7fc fbea 	bl	8009eec <ucdr_deserialize_uint8_t>
 800d718:	b2e4      	uxtb	r4, r4
 800d71a:	4020      	ands	r0, r4
 800d71c:	bd70      	pop	{r4, r5, r6, pc}
 800d71e:	bf00      	nop

0800d720 <uxr_serialize_HEARTBEAT_Payload>:
 800d720:	b570      	push	{r4, r5, r6, lr}
 800d722:	460d      	mov	r5, r1
 800d724:	8809      	ldrh	r1, [r1, #0]
 800d726:	4606      	mov	r6, r0
 800d728:	f7fc fbf6 	bl	8009f18 <ucdr_serialize_uint16_t>
 800d72c:	8869      	ldrh	r1, [r5, #2]
 800d72e:	4604      	mov	r4, r0
 800d730:	4630      	mov	r0, r6
 800d732:	f7fc fbf1 	bl	8009f18 <ucdr_serialize_uint16_t>
 800d736:	7929      	ldrb	r1, [r5, #4]
 800d738:	4004      	ands	r4, r0
 800d73a:	4630      	mov	r0, r6
 800d73c:	f7fc fbc0 	bl	8009ec0 <ucdr_serialize_uint8_t>
 800d740:	b2e4      	uxtb	r4, r4
 800d742:	4020      	ands	r0, r4
 800d744:	bd70      	pop	{r4, r5, r6, pc}
 800d746:	bf00      	nop

0800d748 <uxr_deserialize_HEARTBEAT_Payload>:
 800d748:	b570      	push	{r4, r5, r6, lr}
 800d74a:	4605      	mov	r5, r0
 800d74c:	460e      	mov	r6, r1
 800d74e:	f7fc fce3 	bl	800a118 <ucdr_deserialize_uint16_t>
 800d752:	1cb1      	adds	r1, r6, #2
 800d754:	4604      	mov	r4, r0
 800d756:	4628      	mov	r0, r5
 800d758:	f7fc fcde 	bl	800a118 <ucdr_deserialize_uint16_t>
 800d75c:	1d31      	adds	r1, r6, #4
 800d75e:	4004      	ands	r4, r0
 800d760:	4628      	mov	r0, r5
 800d762:	f7fc fbc3 	bl	8009eec <ucdr_deserialize_uint8_t>
 800d766:	b2e4      	uxtb	r4, r4
 800d768:	4020      	ands	r0, r4
 800d76a:	bd70      	pop	{r4, r5, r6, pc}

0800d76c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800d76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d770:	4605      	mov	r5, r0
 800d772:	460e      	mov	r6, r1
 800d774:	f7fd fa6c 	bl	800ac50 <ucdr_deserialize_int32_t>
 800d778:	1d31      	adds	r1, r6, #4
 800d77a:	4607      	mov	r7, r0
 800d77c:	4628      	mov	r0, r5
 800d77e:	f7fc fee5 	bl	800a54c <ucdr_deserialize_uint32_t>
 800d782:	f106 0108 	add.w	r1, r6, #8
 800d786:	4680      	mov	r8, r0
 800d788:	4628      	mov	r0, r5
 800d78a:	f7fd fa61 	bl	800ac50 <ucdr_deserialize_int32_t>
 800d78e:	f106 010c 	add.w	r1, r6, #12
 800d792:	4604      	mov	r4, r0
 800d794:	4628      	mov	r0, r5
 800d796:	f7fc fed9 	bl	800a54c <ucdr_deserialize_uint32_t>
 800d79a:	ea07 0708 	and.w	r7, r7, r8
 800d79e:	403c      	ands	r4, r7
 800d7a0:	f106 0110 	add.w	r1, r6, #16
 800d7a4:	4004      	ands	r4, r0
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	f7fd fa52 	bl	800ac50 <ucdr_deserialize_int32_t>
 800d7ac:	f106 0114 	add.w	r1, r6, #20
 800d7b0:	4607      	mov	r7, r0
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	f7fc feca 	bl	800a54c <ucdr_deserialize_uint32_t>
 800d7b8:	b2e4      	uxtb	r4, r4
 800d7ba:	403c      	ands	r4, r7
 800d7bc:	4020      	ands	r0, r4
 800d7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7c2:	bf00      	nop

0800d7c4 <uxr_deserialize_SampleIdentity>:
 800d7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c8:	220c      	movs	r2, #12
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	460d      	mov	r5, r1
 800d7ce:	f002 f979 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800d7d2:	2203      	movs	r2, #3
 800d7d4:	f105 010c 	add.w	r1, r5, #12
 800d7d8:	4607      	mov	r7, r0
 800d7da:	4620      	mov	r0, r4
 800d7dc:	f002 f972 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 800d7e0:	f105 010f 	add.w	r1, r5, #15
 800d7e4:	4680      	mov	r8, r0
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	f7fc fb80 	bl	8009eec <ucdr_deserialize_uint8_t>
 800d7ec:	f105 0110 	add.w	r1, r5, #16
 800d7f0:	4606      	mov	r6, r0
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	f7fd fa2c 	bl	800ac50 <ucdr_deserialize_int32_t>
 800d7f8:	f105 0114 	add.w	r1, r5, #20
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	4620      	mov	r0, r4
 800d800:	ea07 0708 	and.w	r7, r7, r8
 800d804:	461c      	mov	r4, r3
 800d806:	f7fc fea1 	bl	800a54c <ucdr_deserialize_uint32_t>
 800d80a:	403e      	ands	r6, r7
 800d80c:	4034      	ands	r4, r6
 800d80e:	4020      	ands	r0, r4
 800d810:	b2c0      	uxtb	r0, r0
 800d812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d816:	bf00      	nop

0800d818 <rcl_convert_rmw_ret_to_rcl_ret>:
 800d818:	280b      	cmp	r0, #11
 800d81a:	dc0d      	bgt.n	800d838 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800d81c:	2800      	cmp	r0, #0
 800d81e:	db09      	blt.n	800d834 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800d820:	280b      	cmp	r0, #11
 800d822:	d807      	bhi.n	800d834 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800d824:	e8df f000 	tbb	[pc, r0]
 800d828:	07060607 	.word	0x07060607
 800d82c:	06060606 	.word	0x06060606
 800d830:	07070606 	.word	0x07070606
 800d834:	2001      	movs	r0, #1
 800d836:	4770      	bx	lr
 800d838:	28cb      	cmp	r0, #203	; 0xcb
 800d83a:	bf18      	it	ne
 800d83c:	2001      	movne	r0, #1
 800d83e:	4770      	bx	lr

0800d840 <rcl_get_zero_initialized_context>:
 800d840:	4a03      	ldr	r2, [pc, #12]	; (800d850 <rcl_get_zero_initialized_context+0x10>)
 800d842:	4603      	mov	r3, r0
 800d844:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d848:	e883 0003 	stmia.w	r3, {r0, r1}
 800d84c:	4618      	mov	r0, r3
 800d84e:	4770      	bx	lr
 800d850:	080137ac 	.word	0x080137ac

0800d854 <rcl_context_is_valid>:
 800d854:	b118      	cbz	r0, 800d85e <rcl_context_is_valid+0xa>
 800d856:	6840      	ldr	r0, [r0, #4]
 800d858:	3800      	subs	r0, #0
 800d85a:	bf18      	it	ne
 800d85c:	2001      	movne	r0, #1
 800d85e:	4770      	bx	lr

0800d860 <__cleanup_context>:
 800d860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d864:	4606      	mov	r6, r0
 800d866:	6800      	ldr	r0, [r0, #0]
 800d868:	2300      	movs	r3, #0
 800d86a:	6073      	str	r3, [r6, #4]
 800d86c:	2800      	cmp	r0, #0
 800d86e:	d049      	beq.n	800d904 <__cleanup_context+0xa4>
 800d870:	6947      	ldr	r7, [r0, #20]
 800d872:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800d876:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800d87a:	b137      	cbz	r7, 800d88a <__cleanup_context+0x2a>
 800d87c:	3014      	adds	r0, #20
 800d87e:	f000 f9bb 	bl	800dbf8 <rcl_init_options_fini>
 800d882:	4607      	mov	r7, r0
 800d884:	2800      	cmp	r0, #0
 800d886:	d144      	bne.n	800d912 <__cleanup_context+0xb2>
 800d888:	6830      	ldr	r0, [r6, #0]
 800d88a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d88c:	b143      	cbz	r3, 800d8a0 <__cleanup_context+0x40>
 800d88e:	3028      	adds	r0, #40	; 0x28
 800d890:	f001 fd9a 	bl	800f3c8 <rmw_context_fini>
 800d894:	b118      	cbz	r0, 800d89e <__cleanup_context+0x3e>
 800d896:	2f00      	cmp	r7, #0
 800d898:	d03e      	beq.n	800d918 <__cleanup_context+0xb8>
 800d89a:	f7fb fde5 	bl	8009468 <rcutils_reset_error>
 800d89e:	6830      	ldr	r0, [r6, #0]
 800d8a0:	6a03      	ldr	r3, [r0, #32]
 800d8a2:	b1db      	cbz	r3, 800d8dc <__cleanup_context+0x7c>
 800d8a4:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800d8a8:	2a01      	cmp	r2, #1
 800d8aa:	f17c 0100 	sbcs.w	r1, ip, #0
 800d8ae:	db11      	blt.n	800d8d4 <__cleanup_context+0x74>
 800d8b0:	2400      	movs	r4, #0
 800d8b2:	4625      	mov	r5, r4
 800d8b4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d8b8:	4649      	mov	r1, r9
 800d8ba:	b1b8      	cbz	r0, 800d8ec <__cleanup_context+0x8c>
 800d8bc:	47c0      	blx	r8
 800d8be:	6833      	ldr	r3, [r6, #0]
 800d8c0:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800d8c4:	3401      	adds	r4, #1
 800d8c6:	f145 0500 	adc.w	r5, r5, #0
 800d8ca:	4294      	cmp	r4, r2
 800d8cc:	eb75 010c 	sbcs.w	r1, r5, ip
 800d8d0:	6a1b      	ldr	r3, [r3, #32]
 800d8d2:	dbef      	blt.n	800d8b4 <__cleanup_context+0x54>
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	4649      	mov	r1, r9
 800d8d8:	47c0      	blx	r8
 800d8da:	6830      	ldr	r0, [r6, #0]
 800d8dc:	4649      	mov	r1, r9
 800d8de:	47c0      	blx	r8
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	e9c6 3300 	strd	r3, r3, [r6]
 800d8e6:	4638      	mov	r0, r7
 800d8e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8ec:	3401      	adds	r4, #1
 800d8ee:	f145 0500 	adc.w	r5, r5, #0
 800d8f2:	4294      	cmp	r4, r2
 800d8f4:	eb75 010c 	sbcs.w	r1, r5, ip
 800d8f8:	dbdc      	blt.n	800d8b4 <__cleanup_context+0x54>
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	4649      	mov	r1, r9
 800d8fe:	47c0      	blx	r8
 800d900:	6830      	ldr	r0, [r6, #0]
 800d902:	e7eb      	b.n	800d8dc <__cleanup_context+0x7c>
 800d904:	4607      	mov	r7, r0
 800d906:	2300      	movs	r3, #0
 800d908:	e9c6 3300 	strd	r3, r3, [r6]
 800d90c:	4638      	mov	r0, r7
 800d90e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d912:	f7fb fda9 	bl	8009468 <rcutils_reset_error>
 800d916:	e7b7      	b.n	800d888 <__cleanup_context+0x28>
 800d918:	f7ff ff7e 	bl	800d818 <rcl_convert_rmw_ret_to_rcl_ret>
 800d91c:	4607      	mov	r7, r0
 800d91e:	e7bc      	b.n	800d89a <__cleanup_context+0x3a>

0800d920 <rcl_init>:
 800d920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d924:	1e05      	subs	r5, r0, #0
 800d926:	b09e      	sub	sp, #120	; 0x78
 800d928:	460e      	mov	r6, r1
 800d92a:	4690      	mov	r8, r2
 800d92c:	461f      	mov	r7, r3
 800d92e:	f340 809c 	ble.w	800da6a <rcl_init+0x14a>
 800d932:	2900      	cmp	r1, #0
 800d934:	f000 809c 	beq.w	800da70 <rcl_init+0x150>
 800d938:	f1a1 0e04 	sub.w	lr, r1, #4
 800d93c:	f04f 0c00 	mov.w	ip, #0
 800d940:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800d944:	f10c 0c01 	add.w	ip, ip, #1
 800d948:	2c00      	cmp	r4, #0
 800d94a:	f000 8091 	beq.w	800da70 <rcl_init+0x150>
 800d94e:	4565      	cmp	r5, ip
 800d950:	d1f6      	bne.n	800d940 <rcl_init+0x20>
 800d952:	f1b8 0f00 	cmp.w	r8, #0
 800d956:	f000 808b 	beq.w	800da70 <rcl_init+0x150>
 800d95a:	f8d8 4000 	ldr.w	r4, [r8]
 800d95e:	2c00      	cmp	r4, #0
 800d960:	f000 8086 	beq.w	800da70 <rcl_init+0x150>
 800d964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d966:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800d96a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d96e:	6823      	ldr	r3, [r4, #0]
 800d970:	f8cc 3000 	str.w	r3, [ip]
 800d974:	a819      	add	r0, sp, #100	; 0x64
 800d976:	f7fb fd53 	bl	8009420 <rcutils_allocator_is_valid>
 800d97a:	2800      	cmp	r0, #0
 800d97c:	d078      	beq.n	800da70 <rcl_init+0x150>
 800d97e:	2f00      	cmp	r7, #0
 800d980:	d076      	beq.n	800da70 <rcl_init+0x150>
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d178      	bne.n	800da7a <rcl_init+0x15a>
 800d988:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800d98c:	2178      	movs	r1, #120	; 0x78
 800d98e:	2001      	movs	r0, #1
 800d990:	4798      	blx	r3
 800d992:	4604      	mov	r4, r0
 800d994:	6038      	str	r0, [r7, #0]
 800d996:	2800      	cmp	r0, #0
 800d998:	f000 80b6 	beq.w	800db08 <rcl_init+0x1e8>
 800d99c:	a802      	add	r0, sp, #8
 800d99e:	f001 f957 	bl	800ec50 <rmw_get_zero_initialized_context>
 800d9a2:	a902      	add	r1, sp, #8
 800d9a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d9a8:	2250      	movs	r2, #80	; 0x50
 800d9aa:	ac19      	add	r4, sp, #100	; 0x64
 800d9ac:	f004 fe5f 	bl	801266e <memcpy>
 800d9b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9b2:	f8d7 e000 	ldr.w	lr, [r7]
 800d9b6:	46f4      	mov	ip, lr
 800d9b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d9bc:	6823      	ldr	r3, [r4, #0]
 800d9be:	f8cc 3000 	str.w	r3, [ip]
 800d9c2:	f10e 0114 	add.w	r1, lr, #20
 800d9c6:	4640      	mov	r0, r8
 800d9c8:	f000 f940 	bl	800dc4c <rcl_init_options_copy>
 800d9cc:	4604      	mov	r4, r0
 800d9ce:	2800      	cmp	r0, #0
 800d9d0:	d144      	bne.n	800da5c <rcl_init+0x13c>
 800d9d2:	f8d7 9000 	ldr.w	r9, [r7]
 800d9d6:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800d9da:	f8c9 0020 	str.w	r0, [r9, #32]
 800d9de:	f8c9 5018 	str.w	r5, [r9, #24]
 800d9e2:	f8c9 801c 	str.w	r8, [r9, #28]
 800d9e6:	2d00      	cmp	r5, #0
 800d9e8:	d04e      	beq.n	800da88 <rcl_init+0x168>
 800d9ea:	2e00      	cmp	r6, #0
 800d9ec:	d04c      	beq.n	800da88 <rcl_init+0x168>
 800d9ee:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800d9f2:	2104      	movs	r1, #4
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	4798      	blx	r3
 800d9f8:	f8c9 0020 	str.w	r0, [r9, #32]
 800d9fc:	f8d7 9000 	ldr.w	r9, [r7]
 800da00:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800da04:	46ca      	mov	sl, r9
 800da06:	b343      	cbz	r3, 800da5a <rcl_init+0x13a>
 800da08:	2d01      	cmp	r5, #1
 800da0a:	f178 0300 	sbcs.w	r3, r8, #0
 800da0e:	db3b      	blt.n	800da88 <rcl_init+0x168>
 800da10:	2400      	movs	r4, #0
 800da12:	3e04      	subs	r6, #4
 800da14:	46a1      	mov	r9, r4
 800da16:	e00b      	b.n	800da30 <rcl_init+0x110>
 800da18:	6831      	ldr	r1, [r6, #0]
 800da1a:	f004 fe28 	bl	801266e <memcpy>
 800da1e:	3401      	adds	r4, #1
 800da20:	f149 0900 	adc.w	r9, r9, #0
 800da24:	45c8      	cmp	r8, r9
 800da26:	bf08      	it	eq
 800da28:	42a5      	cmpeq	r5, r4
 800da2a:	d02b      	beq.n	800da84 <rcl_init+0x164>
 800da2c:	f8d7 a000 	ldr.w	sl, [r7]
 800da30:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800da34:	f7f2 fbde 	bl	80001f4 <strlen>
 800da38:	1c42      	adds	r2, r0, #1
 800da3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800da3c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800da3e:	f8da a020 	ldr.w	sl, [sl, #32]
 800da42:	9201      	str	r2, [sp, #4]
 800da44:	4610      	mov	r0, r2
 800da46:	4798      	blx	r3
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800da4e:	6a1b      	ldr	r3, [r3, #32]
 800da50:	9a01      	ldr	r2, [sp, #4]
 800da52:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800da56:	2800      	cmp	r0, #0
 800da58:	d1de      	bne.n	800da18 <rcl_init+0xf8>
 800da5a:	240a      	movs	r4, #10
 800da5c:	4638      	mov	r0, r7
 800da5e:	f7ff feff 	bl	800d860 <__cleanup_context>
 800da62:	4620      	mov	r0, r4
 800da64:	b01e      	add	sp, #120	; 0x78
 800da66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da6a:	2900      	cmp	r1, #0
 800da6c:	f43f af71 	beq.w	800d952 <rcl_init+0x32>
 800da70:	240b      	movs	r4, #11
 800da72:	4620      	mov	r0, r4
 800da74:	b01e      	add	sp, #120	; 0x78
 800da76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da7a:	2464      	movs	r4, #100	; 0x64
 800da7c:	4620      	mov	r0, r4
 800da7e:	b01e      	add	sp, #120	; 0x78
 800da80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da84:	f8d7 9000 	ldr.w	r9, [r7]
 800da88:	4926      	ldr	r1, [pc, #152]	; (800db24 <rcl_init+0x204>)
 800da8a:	680b      	ldr	r3, [r1, #0]
 800da8c:	3301      	adds	r3, #1
 800da8e:	d036      	beq.n	800dafe <rcl_init+0x1de>
 800da90:	600b      	str	r3, [r1, #0]
 800da92:	461a      	mov	r2, r3
 800da94:	2400      	movs	r4, #0
 800da96:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800da9a:	607b      	str	r3, [r7, #4]
 800da9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800da9e:	3301      	adds	r3, #1
 800daa0:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800daa4:	d034      	beq.n	800db10 <rcl_init+0x1f0>
 800daa6:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800daaa:	b93b      	cbnz	r3, 800dabc <rcl_init+0x19c>
 800daac:	3030      	adds	r0, #48	; 0x30
 800daae:	f000 f939 	bl	800dd24 <rcl_get_localhost_only>
 800dab2:	4604      	mov	r4, r0
 800dab4:	2800      	cmp	r0, #0
 800dab6:	d1d1      	bne.n	800da5c <rcl_init+0x13c>
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	6958      	ldr	r0, [r3, #20]
 800dabc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800dabe:	aa18      	add	r2, sp, #96	; 0x60
 800dac0:	a917      	add	r1, sp, #92	; 0x5c
 800dac2:	f000 fd81 	bl	800e5c8 <rcl_validate_enclave_name>
 800dac6:	4604      	mov	r4, r0
 800dac8:	2800      	cmp	r0, #0
 800daca:	d1c7      	bne.n	800da5c <rcl_init+0x13c>
 800dacc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dace:	b9eb      	cbnz	r3, 800db0c <rcl_init+0x1ec>
 800dad0:	6839      	ldr	r1, [r7, #0]
 800dad2:	694b      	ldr	r3, [r1, #20]
 800dad4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800dad6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800dada:	f000 fc3d 	bl	800e358 <rcl_get_security_options_from_environment>
 800dade:	4604      	mov	r4, r0
 800dae0:	2800      	cmp	r0, #0
 800dae2:	d1bb      	bne.n	800da5c <rcl_init+0x13c>
 800dae4:	6839      	ldr	r1, [r7, #0]
 800dae6:	6948      	ldr	r0, [r1, #20]
 800dae8:	3128      	adds	r1, #40	; 0x28
 800daea:	3018      	adds	r0, #24
 800daec:	f001 fb36 	bl	800f15c <rmw_init>
 800daf0:	4604      	mov	r4, r0
 800daf2:	2800      	cmp	r0, #0
 800daf4:	d0bd      	beq.n	800da72 <rcl_init+0x152>
 800daf6:	f7ff fe8f 	bl	800d818 <rcl_convert_rmw_ret_to_rcl_ret>
 800dafa:	4604      	mov	r4, r0
 800dafc:	e7ae      	b.n	800da5c <rcl_init+0x13c>
 800dafe:	2201      	movs	r2, #1
 800db00:	461c      	mov	r4, r3
 800db02:	600a      	str	r2, [r1, #0]
 800db04:	4613      	mov	r3, r2
 800db06:	e7c6      	b.n	800da96 <rcl_init+0x176>
 800db08:	240a      	movs	r4, #10
 800db0a:	e7b2      	b.n	800da72 <rcl_init+0x152>
 800db0c:	2401      	movs	r4, #1
 800db0e:	e7a5      	b.n	800da5c <rcl_init+0x13c>
 800db10:	3024      	adds	r0, #36	; 0x24
 800db12:	f003 fc5d 	bl	80113d0 <rcl_get_default_domain_id>
 800db16:	4604      	mov	r4, r0
 800db18:	2800      	cmp	r0, #0
 800db1a:	d19f      	bne.n	800da5c <rcl_init+0x13c>
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	6958      	ldr	r0, [r3, #20]
 800db20:	e7c1      	b.n	800daa6 <rcl_init+0x186>
 800db22:	bf00      	nop
 800db24:	20012444 	.word	0x20012444

0800db28 <rcl_get_zero_initialized_init_options>:
 800db28:	2000      	movs	r0, #0
 800db2a:	4770      	bx	lr

0800db2c <rcl_init_options_init>:
 800db2c:	b084      	sub	sp, #16
 800db2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db30:	b097      	sub	sp, #92	; 0x5c
 800db32:	ae1d      	add	r6, sp, #116	; 0x74
 800db34:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800db38:	2800      	cmp	r0, #0
 800db3a:	d058      	beq.n	800dbee <rcl_init_options_init+0xc2>
 800db3c:	6803      	ldr	r3, [r0, #0]
 800db3e:	4605      	mov	r5, r0
 800db40:	b133      	cbz	r3, 800db50 <rcl_init_options_init+0x24>
 800db42:	2464      	movs	r4, #100	; 0x64
 800db44:	4620      	mov	r0, r4
 800db46:	b017      	add	sp, #92	; 0x5c
 800db48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800db4c:	b004      	add	sp, #16
 800db4e:	4770      	bx	lr
 800db50:	4630      	mov	r0, r6
 800db52:	f7fb fc65 	bl	8009420 <rcutils_allocator_is_valid>
 800db56:	2800      	cmp	r0, #0
 800db58:	d049      	beq.n	800dbee <rcl_init_options_init+0xc2>
 800db5a:	46b4      	mov	ip, r6
 800db5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800db60:	ac11      	add	r4, sp, #68	; 0x44
 800db62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db64:	f8dc 3000 	ldr.w	r3, [ip]
 800db68:	6023      	str	r3, [r4, #0]
 800db6a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800db6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800db6e:	2050      	movs	r0, #80	; 0x50
 800db70:	4798      	blx	r3
 800db72:	4604      	mov	r4, r0
 800db74:	6028      	str	r0, [r5, #0]
 800db76:	2800      	cmp	r0, #0
 800db78:	d03b      	beq.n	800dbf2 <rcl_init_options_init+0xc6>
 800db7a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800db7e:	4686      	mov	lr, r0
 800db80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800db84:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800db88:	f8dc 3000 	ldr.w	r3, [ip]
 800db8c:	f8ce 3000 	str.w	r3, [lr]
 800db90:	a802      	add	r0, sp, #8
 800db92:	f001 f86d 	bl	800ec70 <rmw_get_zero_initialized_init_options>
 800db96:	f10d 0e08 	add.w	lr, sp, #8
 800db9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800db9e:	f104 0c18 	add.w	ip, r4, #24
 800dba2:	682f      	ldr	r7, [r5, #0]
 800dba4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dba8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dbac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dbb0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dbb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dbb8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800dbbc:	ac20      	add	r4, sp, #128	; 0x80
 800dbbe:	e88c 0003 	stmia.w	ip, {r0, r1}
 800dbc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dbc6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800dbca:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800dbce:	f107 0018 	add.w	r0, r7, #24
 800dbd2:	f001 f9cb 	bl	800ef6c <rmw_init_options_init>
 800dbd6:	4604      	mov	r4, r0
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	d0b3      	beq.n	800db44 <rcl_init_options_init+0x18>
 800dbdc:	9921      	ldr	r1, [sp, #132]	; 0x84
 800dbde:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dbe0:	6828      	ldr	r0, [r5, #0]
 800dbe2:	4798      	blx	r3
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	f7ff fe17 	bl	800d818 <rcl_convert_rmw_ret_to_rcl_ret>
 800dbea:	4604      	mov	r4, r0
 800dbec:	e7aa      	b.n	800db44 <rcl_init_options_init+0x18>
 800dbee:	240b      	movs	r4, #11
 800dbf0:	e7a8      	b.n	800db44 <rcl_init_options_init+0x18>
 800dbf2:	240a      	movs	r4, #10
 800dbf4:	e7a6      	b.n	800db44 <rcl_init_options_init+0x18>
 800dbf6:	bf00      	nop

0800dbf8 <rcl_init_options_fini>:
 800dbf8:	b530      	push	{r4, r5, lr}
 800dbfa:	b087      	sub	sp, #28
 800dbfc:	b1f0      	cbz	r0, 800dc3c <rcl_init_options_fini+0x44>
 800dbfe:	6803      	ldr	r3, [r0, #0]
 800dc00:	4604      	mov	r4, r0
 800dc02:	b1db      	cbz	r3, 800dc3c <rcl_init_options_fini+0x44>
 800dc04:	469c      	mov	ip, r3
 800dc06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dc0a:	f10d 0e04 	add.w	lr, sp, #4
 800dc0e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dc12:	f8dc 3000 	ldr.w	r3, [ip]
 800dc16:	f8ce 3000 	str.w	r3, [lr]
 800dc1a:	a801      	add	r0, sp, #4
 800dc1c:	f7fb fc00 	bl	8009420 <rcutils_allocator_is_valid>
 800dc20:	b160      	cbz	r0, 800dc3c <rcl_init_options_fini+0x44>
 800dc22:	6820      	ldr	r0, [r4, #0]
 800dc24:	3018      	adds	r0, #24
 800dc26:	f001 fa51 	bl	800f0cc <rmw_init_options_fini>
 800dc2a:	4605      	mov	r5, r0
 800dc2c:	b950      	cbnz	r0, 800dc44 <rcl_init_options_fini+0x4c>
 800dc2e:	6820      	ldr	r0, [r4, #0]
 800dc30:	9b02      	ldr	r3, [sp, #8]
 800dc32:	9905      	ldr	r1, [sp, #20]
 800dc34:	4798      	blx	r3
 800dc36:	4628      	mov	r0, r5
 800dc38:	b007      	add	sp, #28
 800dc3a:	bd30      	pop	{r4, r5, pc}
 800dc3c:	250b      	movs	r5, #11
 800dc3e:	4628      	mov	r0, r5
 800dc40:	b007      	add	sp, #28
 800dc42:	bd30      	pop	{r4, r5, pc}
 800dc44:	f7ff fde8 	bl	800d818 <rcl_convert_rmw_ret_to_rcl_ret>
 800dc48:	4605      	mov	r5, r0
 800dc4a:	e7f8      	b.n	800dc3e <rcl_init_options_fini+0x46>

0800dc4c <rcl_init_options_copy>:
 800dc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc50:	b094      	sub	sp, #80	; 0x50
 800dc52:	2800      	cmp	r0, #0
 800dc54:	d058      	beq.n	800dd08 <rcl_init_options_copy+0xbc>
 800dc56:	4604      	mov	r4, r0
 800dc58:	6800      	ldr	r0, [r0, #0]
 800dc5a:	2800      	cmp	r0, #0
 800dc5c:	d054      	beq.n	800dd08 <rcl_init_options_copy+0xbc>
 800dc5e:	460e      	mov	r6, r1
 800dc60:	f7fb fbde 	bl	8009420 <rcutils_allocator_is_valid>
 800dc64:	2800      	cmp	r0, #0
 800dc66:	d04f      	beq.n	800dd08 <rcl_init_options_copy+0xbc>
 800dc68:	2e00      	cmp	r6, #0
 800dc6a:	d04d      	beq.n	800dd08 <rcl_init_options_copy+0xbc>
 800dc6c:	6833      	ldr	r3, [r6, #0]
 800dc6e:	b123      	cbz	r3, 800dc7a <rcl_init_options_copy+0x2e>
 800dc70:	2464      	movs	r4, #100	; 0x64
 800dc72:	4620      	mov	r0, r4
 800dc74:	b014      	add	sp, #80	; 0x50
 800dc76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc7a:	6827      	ldr	r7, [r4, #0]
 800dc7c:	46bc      	mov	ip, r7
 800dc7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dc82:	ad0f      	add	r5, sp, #60	; 0x3c
 800dc84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dc86:	f8dc 3000 	ldr.w	r3, [ip]
 800dc8a:	f8d7 8000 	ldr.w	r8, [r7]
 800dc8e:	602b      	str	r3, [r5, #0]
 800dc90:	4619      	mov	r1, r3
 800dc92:	2050      	movs	r0, #80	; 0x50
 800dc94:	47c0      	blx	r8
 800dc96:	4605      	mov	r5, r0
 800dc98:	6030      	str	r0, [r6, #0]
 800dc9a:	b3d0      	cbz	r0, 800dd12 <rcl_init_options_copy+0xc6>
 800dc9c:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 800dca0:	4686      	mov	lr, r0
 800dca2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dca6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dcaa:	f8dc 3000 	ldr.w	r3, [ip]
 800dcae:	f8ce 3000 	str.w	r3, [lr]
 800dcb2:	4668      	mov	r0, sp
 800dcb4:	f000 ffdc 	bl	800ec70 <rmw_get_zero_initialized_init_options>
 800dcb8:	46ee      	mov	lr, sp
 800dcba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dcbe:	f105 0c18 	add.w	ip, r5, #24
 800dcc2:	6824      	ldr	r4, [r4, #0]
 800dcc4:	6835      	ldr	r5, [r6, #0]
 800dcc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dcca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dcce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dcd2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dcd6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dcda:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800dcde:	e88c 0003 	stmia.w	ip, {r0, r1}
 800dce2:	f104 0018 	add.w	r0, r4, #24
 800dce6:	f105 0118 	add.w	r1, r5, #24
 800dcea:	f001 f9a7 	bl	800f03c <rmw_init_options_copy>
 800dcee:	4604      	mov	r4, r0
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	d0be      	beq.n	800dc72 <rcl_init_options_copy+0x26>
 800dcf4:	f7fb fba2 	bl	800943c <rcutils_get_error_string>
 800dcf8:	f7fb fbb6 	bl	8009468 <rcutils_reset_error>
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	f7ff ff7b 	bl	800dbf8 <rcl_init_options_fini>
 800dd02:	b140      	cbz	r0, 800dd16 <rcl_init_options_copy+0xca>
 800dd04:	4604      	mov	r4, r0
 800dd06:	e7b4      	b.n	800dc72 <rcl_init_options_copy+0x26>
 800dd08:	240b      	movs	r4, #11
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	b014      	add	sp, #80	; 0x50
 800dd0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd12:	240a      	movs	r4, #10
 800dd14:	e7ad      	b.n	800dc72 <rcl_init_options_copy+0x26>
 800dd16:	4620      	mov	r0, r4
 800dd18:	b014      	add	sp, #80	; 0x50
 800dd1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd1e:	f7ff bd7b 	b.w	800d818 <rcl_convert_rmw_ret_to_rcl_ret>
 800dd22:	bf00      	nop

0800dd24 <rcl_get_localhost_only>:
 800dd24:	b510      	push	{r4, lr}
 800dd26:	b082      	sub	sp, #8
 800dd28:	2300      	movs	r3, #0
 800dd2a:	9301      	str	r3, [sp, #4]
 800dd2c:	b1b8      	cbz	r0, 800dd5e <rcl_get_localhost_only+0x3a>
 800dd2e:	4604      	mov	r4, r0
 800dd30:	a901      	add	r1, sp, #4
 800dd32:	480c      	ldr	r0, [pc, #48]	; (800dd64 <rcl_get_localhost_only+0x40>)
 800dd34:	f000 fc90 	bl	800e658 <rcutils_get_env>
 800dd38:	b110      	cbz	r0, 800dd40 <rcl_get_localhost_only+0x1c>
 800dd3a:	2001      	movs	r0, #1
 800dd3c:	b002      	add	sp, #8
 800dd3e:	bd10      	pop	{r4, pc}
 800dd40:	9b01      	ldr	r3, [sp, #4]
 800dd42:	b113      	cbz	r3, 800dd4a <rcl_get_localhost_only+0x26>
 800dd44:	781a      	ldrb	r2, [r3, #0]
 800dd46:	2a31      	cmp	r2, #49	; 0x31
 800dd48:	d004      	beq.n	800dd54 <rcl_get_localhost_only+0x30>
 800dd4a:	2302      	movs	r3, #2
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	7023      	strb	r3, [r4, #0]
 800dd50:	b002      	add	sp, #8
 800dd52:	bd10      	pop	{r4, pc}
 800dd54:	785b      	ldrb	r3, [r3, #1]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d1f7      	bne.n	800dd4a <rcl_get_localhost_only+0x26>
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	e7f6      	b.n	800dd4c <rcl_get_localhost_only+0x28>
 800dd5e:	200b      	movs	r0, #11
 800dd60:	b002      	add	sp, #8
 800dd62:	bd10      	pop	{r4, pc}
 800dd64:	080137b4 	.word	0x080137b4

0800dd68 <rcl_get_zero_initialized_node>:
 800dd68:	4a03      	ldr	r2, [pc, #12]	; (800dd78 <rcl_get_zero_initialized_node+0x10>)
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dd70:	e883 0003 	stmia.w	r3, {r0, r1}
 800dd74:	4618      	mov	r0, r3
 800dd76:	4770      	bx	lr
 800dd78:	080137dc 	.word	0x080137dc

0800dd7c <rcl_node_init>:
 800dd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd80:	b0a9      	sub	sp, #164	; 0xa4
 800dd82:	4604      	mov	r4, r0
 800dd84:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 800dd88:	a823      	add	r0, sp, #140	; 0x8c
 800dd8a:	460e      	mov	r6, r1
 800dd8c:	4615      	mov	r5, r2
 800dd8e:	461f      	mov	r7, r3
 800dd90:	f003 fd46 	bl	8011820 <rcl_guard_condition_get_default_options>
 800dd94:	f1b8 0f00 	cmp.w	r8, #0
 800dd98:	f000 80e6 	beq.w	800df68 <rcl_node_init+0x1ec>
 800dd9c:	4640      	mov	r0, r8
 800dd9e:	f7fb fb3f 	bl	8009420 <rcutils_allocator_is_valid>
 800dda2:	2800      	cmp	r0, #0
 800dda4:	f000 80e0 	beq.w	800df68 <rcl_node_init+0x1ec>
 800dda8:	2e00      	cmp	r6, #0
 800ddaa:	f000 80dd 	beq.w	800df68 <rcl_node_init+0x1ec>
 800ddae:	2d00      	cmp	r5, #0
 800ddb0:	f000 80da 	beq.w	800df68 <rcl_node_init+0x1ec>
 800ddb4:	2c00      	cmp	r4, #0
 800ddb6:	f000 80d7 	beq.w	800df68 <rcl_node_init+0x1ec>
 800ddba:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ddbe:	f1b9 0f00 	cmp.w	r9, #0
 800ddc2:	f040 80fd 	bne.w	800dfc0 <rcl_node_init+0x244>
 800ddc6:	2f00      	cmp	r7, #0
 800ddc8:	f000 80ce 	beq.w	800df68 <rcl_node_init+0x1ec>
 800ddcc:	4638      	mov	r0, r7
 800ddce:	f7ff fd41 	bl	800d854 <rcl_context_is_valid>
 800ddd2:	4682      	mov	sl, r0
 800ddd4:	2800      	cmp	r0, #0
 800ddd6:	f000 80cd 	beq.w	800df74 <rcl_node_init+0x1f8>
 800ddda:	464a      	mov	r2, r9
 800dddc:	a922      	add	r1, sp, #136	; 0x88
 800ddde:	4630      	mov	r0, r6
 800dde0:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 800dde4:	f001 f83a 	bl	800ee5c <rmw_validate_node_name>
 800dde8:	4681      	mov	r9, r0
 800ddea:	2800      	cmp	r0, #0
 800ddec:	f040 80be 	bne.w	800df6c <rcl_node_init+0x1f0>
 800ddf0:	9822      	ldr	r0, [sp, #136]	; 0x88
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	f040 80f0 	bne.w	800dfd8 <rcl_node_init+0x25c>
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	f7f2 f9fb 	bl	80001f4 <strlen>
 800ddfe:	2800      	cmp	r0, #0
 800de00:	f040 80bb 	bne.w	800df7a <rcl_node_init+0x1fe>
 800de04:	4d7c      	ldr	r5, [pc, #496]	; (800dff8 <rcl_node_init+0x27c>)
 800de06:	a922      	add	r1, sp, #136	; 0x88
 800de08:	2200      	movs	r2, #0
 800de0a:	4628      	mov	r0, r5
 800de0c:	f001 f808 	bl	800ee20 <rmw_validate_namespace>
 800de10:	4681      	mov	r9, r0
 800de12:	2800      	cmp	r0, #0
 800de14:	f040 80aa 	bne.w	800df6c <rcl_node_init+0x1f0>
 800de18:	4682      	mov	sl, r0
 800de1a:	9822      	ldr	r0, [sp, #136]	; 0x88
 800de1c:	2800      	cmp	r0, #0
 800de1e:	f040 80e0 	bne.w	800dfe2 <rcl_node_init+0x266>
 800de22:	f8d8 3000 	ldr.w	r3, [r8]
 800de26:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800de2a:	2078      	movs	r0, #120	; 0x78
 800de2c:	4798      	blx	r3
 800de2e:	4681      	mov	r9, r0
 800de30:	6060      	str	r0, [r4, #4]
 800de32:	2800      	cmp	r0, #0
 800de34:	f000 80ca 	beq.w	800dfcc <rcl_node_init+0x250>
 800de38:	2200      	movs	r2, #0
 800de3a:	2300      	movs	r3, #0
 800de3c:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 800de40:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 800de44:	a808      	add	r0, sp, #32
 800de46:	f000 f907 	bl	800e058 <rcl_node_get_default_options>
 800de4a:	a908      	add	r1, sp, #32
 800de4c:	4648      	mov	r0, r9
 800de4e:	2268      	movs	r2, #104	; 0x68
 800de50:	f004 fc0d 	bl	801266e <memcpy>
 800de54:	6861      	ldr	r1, [r4, #4]
 800de56:	6027      	str	r7, [r4, #0]
 800de58:	4640      	mov	r0, r8
 800de5a:	f000 f90b 	bl	800e074 <rcl_node_options_copy>
 800de5e:	2800      	cmp	r0, #0
 800de60:	d158      	bne.n	800df14 <rcl_node_init+0x198>
 800de62:	4628      	mov	r0, r5
 800de64:	f7f2 f9c6 	bl	80001f4 <strlen>
 800de68:	4428      	add	r0, r5
 800de6a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800de6e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800de72:	2b2f      	cmp	r3, #47	; 0x2f
 800de74:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800de78:	9300      	str	r3, [sp, #0]
 800de7a:	bf0c      	ite	eq
 800de7c:	4b5f      	ldreq	r3, [pc, #380]	; (800dffc <rcl_node_init+0x280>)
 800de7e:	4b60      	ldrne	r3, [pc, #384]	; (800e000 <rcl_node_init+0x284>)
 800de80:	9302      	str	r3, [sp, #8]
 800de82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de86:	9301      	str	r3, [sp, #4]
 800de88:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800de8c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800de90:	f000 fc0a 	bl	800e6a8 <rcutils_format_string_limit>
 800de94:	6823      	ldr	r3, [r4, #0]
 800de96:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 800de9a:	6818      	ldr	r0, [r3, #0]
 800de9c:	4631      	mov	r1, r6
 800de9e:	3028      	adds	r0, #40	; 0x28
 800dea0:	462a      	mov	r2, r5
 800dea2:	6866      	ldr	r6, [r4, #4]
 800dea4:	f001 fbae 	bl	800f604 <rmw_create_node>
 800dea8:	6863      	ldr	r3, [r4, #4]
 800deaa:	66b0      	str	r0, [r6, #104]	; 0x68
 800deac:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800deae:	2800      	cmp	r0, #0
 800deb0:	d032      	beq.n	800df18 <rcl_node_init+0x19c>
 800deb2:	f001 fc3b 	bl	800f72c <rmw_node_get_graph_guard_condition>
 800deb6:	4681      	mov	r9, r0
 800deb8:	b360      	cbz	r0, 800df14 <rcl_node_init+0x198>
 800deba:	f8d8 3000 	ldr.w	r3, [r8]
 800debe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dec2:	6866      	ldr	r6, [r4, #4]
 800dec4:	2008      	movs	r0, #8
 800dec6:	4798      	blx	r3
 800dec8:	6863      	ldr	r3, [r4, #4]
 800deca:	66f0      	str	r0, [r6, #108]	; 0x6c
 800decc:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 800ded0:	f1bb 0f00 	cmp.w	fp, #0
 800ded4:	d020      	beq.n	800df18 <rcl_node_init+0x19c>
 800ded6:	a806      	add	r0, sp, #24
 800ded8:	f003 fc12 	bl	8011700 <rcl_get_zero_initialized_guard_condition>
 800dedc:	a806      	add	r0, sp, #24
 800dede:	c803      	ldmia	r0, {r0, r1}
 800dee0:	6863      	ldr	r3, [r4, #4]
 800dee2:	46c4      	mov	ip, r8
 800dee4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 800dee8:	e88b 0003 	stmia.w	fp, {r0, r1}
 800deec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800def0:	ae23      	add	r6, sp, #140	; 0x8c
 800def2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800def4:	f8dc 3000 	ldr.w	r3, [ip]
 800def8:	6033      	str	r3, [r6, #0]
 800defa:	ab28      	add	r3, sp, #160	; 0xa0
 800defc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800df00:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800df04:	4649      	mov	r1, r9
 800df06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800df08:	463a      	mov	r2, r7
 800df0a:	4670      	mov	r0, lr
 800df0c:	f003 fc02 	bl	8011714 <rcl_guard_condition_init_from_rmw>
 800df10:	4681      	mov	r9, r0
 800df12:	b328      	cbz	r0, 800df60 <rcl_node_init+0x1e4>
 800df14:	6863      	ldr	r3, [r4, #4]
 800df16:	b1f3      	cbz	r3, 800df56 <rcl_node_init+0x1da>
 800df18:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800df1a:	b128      	cbz	r0, 800df28 <rcl_node_init+0x1ac>
 800df1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800df20:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800df24:	4798      	blx	r3
 800df26:	6863      	ldr	r3, [r4, #4]
 800df28:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800df2a:	b110      	cbz	r0, 800df32 <rcl_node_init+0x1b6>
 800df2c:	f001 fb82 	bl	800f634 <rmw_destroy_node>
 800df30:	6863      	ldr	r3, [r4, #4]
 800df32:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800df34:	b148      	cbz	r0, 800df4a <rcl_node_init+0x1ce>
 800df36:	f003 fc4d 	bl	80117d4 <rcl_guard_condition_fini>
 800df3a:	6863      	ldr	r3, [r4, #4]
 800df3c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800df40:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800df42:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800df46:	4798      	blx	r3
 800df48:	6863      	ldr	r3, [r4, #4]
 800df4a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800df4e:	4618      	mov	r0, r3
 800df50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800df54:	4798      	blx	r3
 800df56:	2300      	movs	r3, #0
 800df58:	e9c4 3300 	strd	r3, r3, [r4]
 800df5c:	f04f 0901 	mov.w	r9, #1
 800df60:	f1ba 0f00 	cmp.w	sl, #0
 800df64:	d125      	bne.n	800dfb2 <rcl_node_init+0x236>
 800df66:	e001      	b.n	800df6c <rcl_node_init+0x1f0>
 800df68:	f04f 090b 	mov.w	r9, #11
 800df6c:	4648      	mov	r0, r9
 800df6e:	b029      	add	sp, #164	; 0xa4
 800df70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df74:	f04f 0965 	mov.w	r9, #101	; 0x65
 800df78:	e7f8      	b.n	800df6c <rcl_node_init+0x1f0>
 800df7a:	782b      	ldrb	r3, [r5, #0]
 800df7c:	2b2f      	cmp	r3, #47	; 0x2f
 800df7e:	f43f af42 	beq.w	800de06 <rcl_node_init+0x8a>
 800df82:	9503      	str	r5, [sp, #12]
 800df84:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800df88:	9300      	str	r3, [sp, #0]
 800df8a:	4b1e      	ldr	r3, [pc, #120]	; (800e004 <rcl_node_init+0x288>)
 800df8c:	9302      	str	r3, [sp, #8]
 800df8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800df92:	9301      	str	r3, [sp, #4]
 800df94:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800df98:	f000 fb86 	bl	800e6a8 <rcutils_format_string_limit>
 800df9c:	4605      	mov	r5, r0
 800df9e:	b340      	cbz	r0, 800dff2 <rcl_node_init+0x276>
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	a922      	add	r1, sp, #136	; 0x88
 800dfa4:	9222      	str	r2, [sp, #136]	; 0x88
 800dfa6:	f000 ff3b 	bl	800ee20 <rmw_validate_namespace>
 800dfaa:	4681      	mov	r9, r0
 800dfac:	2800      	cmp	r0, #0
 800dfae:	f43f af34 	beq.w	800de1a <rcl_node_init+0x9e>
 800dfb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dfb6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dfba:	4628      	mov	r0, r5
 800dfbc:	4798      	blx	r3
 800dfbe:	e7d5      	b.n	800df6c <rcl_node_init+0x1f0>
 800dfc0:	f04f 0964 	mov.w	r9, #100	; 0x64
 800dfc4:	4648      	mov	r0, r9
 800dfc6:	b029      	add	sp, #164	; 0xa4
 800dfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfcc:	f04f 090a 	mov.w	r9, #10
 800dfd0:	f1ba 0f00 	cmp.w	sl, #0
 800dfd4:	d1ed      	bne.n	800dfb2 <rcl_node_init+0x236>
 800dfd6:	e7c9      	b.n	800df6c <rcl_node_init+0x1f0>
 800dfd8:	f000 ff92 	bl	800ef00 <rmw_node_name_validation_result_string>
 800dfdc:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800dfe0:	e7c4      	b.n	800df6c <rcl_node_init+0x1f0>
 800dfe2:	f000 ff2f 	bl	800ee44 <rmw_namespace_validation_result_string>
 800dfe6:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800dfea:	f1ba 0f00 	cmp.w	sl, #0
 800dfee:	d1e0      	bne.n	800dfb2 <rcl_node_init+0x236>
 800dff0:	e7bc      	b.n	800df6c <rcl_node_init+0x1f0>
 800dff2:	f04f 090a 	mov.w	r9, #10
 800dff6:	e7b9      	b.n	800df6c <rcl_node_init+0x1f0>
 800dff8:	080137cc 	.word	0x080137cc
 800dffc:	08013650 	.word	0x08013650
 800e000:	080137d4 	.word	0x080137d4
 800e004:	080137d0 	.word	0x080137d0

0800e008 <rcl_node_is_valid>:
 800e008:	b130      	cbz	r0, 800e018 <rcl_node_is_valid+0x10>
 800e00a:	6843      	ldr	r3, [r0, #4]
 800e00c:	b123      	cbz	r3, 800e018 <rcl_node_is_valid+0x10>
 800e00e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e010:	b113      	cbz	r3, 800e018 <rcl_node_is_valid+0x10>
 800e012:	6800      	ldr	r0, [r0, #0]
 800e014:	f7ff bc1e 	b.w	800d854 <rcl_context_is_valid>
 800e018:	2000      	movs	r0, #0
 800e01a:	4770      	bx	lr

0800e01c <rcl_node_get_name>:
 800e01c:	b120      	cbz	r0, 800e028 <rcl_node_get_name+0xc>
 800e01e:	6840      	ldr	r0, [r0, #4]
 800e020:	b110      	cbz	r0, 800e028 <rcl_node_get_name+0xc>
 800e022:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800e024:	b100      	cbz	r0, 800e028 <rcl_node_get_name+0xc>
 800e026:	6880      	ldr	r0, [r0, #8]
 800e028:	4770      	bx	lr
 800e02a:	bf00      	nop

0800e02c <rcl_node_get_namespace>:
 800e02c:	b120      	cbz	r0, 800e038 <rcl_node_get_namespace+0xc>
 800e02e:	6840      	ldr	r0, [r0, #4]
 800e030:	b110      	cbz	r0, 800e038 <rcl_node_get_namespace+0xc>
 800e032:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800e034:	b100      	cbz	r0, 800e038 <rcl_node_get_namespace+0xc>
 800e036:	68c0      	ldr	r0, [r0, #12]
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop

0800e03c <rcl_node_get_options>:
 800e03c:	b128      	cbz	r0, 800e04a <rcl_node_get_options+0xe>
 800e03e:	6840      	ldr	r0, [r0, #4]
 800e040:	b118      	cbz	r0, 800e04a <rcl_node_get_options+0xe>
 800e042:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800e044:	2b00      	cmp	r3, #0
 800e046:	bf08      	it	eq
 800e048:	2000      	moveq	r0, #0
 800e04a:	4770      	bx	lr

0800e04c <rcl_node_get_rmw_handle>:
 800e04c:	b110      	cbz	r0, 800e054 <rcl_node_get_rmw_handle+0x8>
 800e04e:	6840      	ldr	r0, [r0, #4]
 800e050:	b100      	cbz	r0, 800e054 <rcl_node_get_rmw_handle+0x8>
 800e052:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800e054:	4770      	bx	lr
 800e056:	bf00      	nop

0800e058 <rcl_node_get_default_options>:
 800e058:	b510      	push	{r4, lr}
 800e05a:	2268      	movs	r2, #104	; 0x68
 800e05c:	4604      	mov	r4, r0
 800e05e:	2100      	movs	r1, #0
 800e060:	f004 f9e6 	bl	8012430 <memset>
 800e064:	4620      	mov	r0, r4
 800e066:	f7fb f9cd 	bl	8009404 <rcutils_get_default_allocator>
 800e06a:	2301      	movs	r3, #1
 800e06c:	7523      	strb	r3, [r4, #20]
 800e06e:	4620      	mov	r0, r4
 800e070:	bd10      	pop	{r4, pc}
 800e072:	bf00      	nop

0800e074 <rcl_node_options_copy>:
 800e074:	b1d0      	cbz	r0, 800e0ac <rcl_node_options_copy+0x38>
 800e076:	b570      	push	{r4, r5, r6, lr}
 800e078:	460c      	mov	r4, r1
 800e07a:	b1a9      	cbz	r1, 800e0a8 <rcl_node_options_copy+0x34>
 800e07c:	4288      	cmp	r0, r1
 800e07e:	4684      	mov	ip, r0
 800e080:	d012      	beq.n	800e0a8 <rcl_node_options_copy+0x34>
 800e082:	4605      	mov	r5, r0
 800e084:	8a86      	ldrh	r6, [r0, #20]
 800e086:	468e      	mov	lr, r1
 800e088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e08a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e08e:	682b      	ldr	r3, [r5, #0]
 800e090:	f8ce 3000 	str.w	r3, [lr]
 800e094:	f10c 0118 	add.w	r1, ip, #24
 800e098:	2250      	movs	r2, #80	; 0x50
 800e09a:	82a6      	strh	r6, [r4, #20]
 800e09c:	f104 0018 	add.w	r0, r4, #24
 800e0a0:	f004 fae5 	bl	801266e <memcpy>
 800e0a4:	2000      	movs	r0, #0
 800e0a6:	bd70      	pop	{r4, r5, r6, pc}
 800e0a8:	200b      	movs	r0, #11
 800e0aa:	bd70      	pop	{r4, r5, r6, pc}
 800e0ac:	200b      	movs	r0, #11
 800e0ae:	4770      	bx	lr

0800e0b0 <rcl_node_resolve_name>:
 800e0b0:	b082      	sub	sp, #8
 800e0b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b6:	b091      	sub	sp, #68	; 0x44
 800e0b8:	ac1a      	add	r4, sp, #104	; 0x68
 800e0ba:	e884 000c 	stmia.w	r4, {r2, r3}
 800e0be:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	d03b      	beq.n	800e13e <rcl_node_resolve_name+0x8e>
 800e0c6:	460c      	mov	r4, r1
 800e0c8:	4605      	mov	r5, r0
 800e0ca:	f7ff ffb7 	bl	800e03c <rcl_node_get_options>
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	d037      	beq.n	800e142 <rcl_node_resolve_name+0x92>
 800e0d2:	4628      	mov	r0, r5
 800e0d4:	f7ff ffa2 	bl	800e01c <rcl_node_get_name>
 800e0d8:	4606      	mov	r6, r0
 800e0da:	4628      	mov	r0, r5
 800e0dc:	f7ff ffa6 	bl	800e02c <rcl_node_get_namespace>
 800e0e0:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800e0e4:	4681      	mov	r9, r0
 800e0e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e0ea:	ad0b      	add	r5, sp, #44	; 0x2c
 800e0ec:	46ac      	mov	ip, r5
 800e0ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e0f2:	f8de 3000 	ldr.w	r3, [lr]
 800e0f6:	f8cc 3000 	str.w	r3, [ip]
 800e0fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0fc:	b1fb      	cbz	r3, 800e13e <rcl_node_resolve_name+0x8e>
 800e0fe:	468a      	mov	sl, r1
 800e100:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800e104:	f000 fc28 	bl	800e958 <rcutils_get_zero_initialized_string_map>
 800e108:	ab10      	add	r3, sp, #64	; 0x40
 800e10a:	9008      	str	r0, [sp, #32]
 800e10c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800e110:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e114:	2100      	movs	r1, #0
 800e116:	e895 000c 	ldmia.w	r5, {r2, r3}
 800e11a:	a808      	add	r0, sp, #32
 800e11c:	f000 fc94 	bl	800ea48 <rcutils_string_map_init>
 800e120:	4607      	mov	r7, r0
 800e122:	b180      	cbz	r0, 800e146 <rcl_node_resolve_name+0x96>
 800e124:	f7fb f98a 	bl	800943c <rcutils_get_error_string>
 800e128:	f7fb f99e 	bl	8009468 <rcutils_reset_error>
 800e12c:	2f0a      	cmp	r7, #10
 800e12e:	bf18      	it	ne
 800e130:	2701      	movne	r7, #1
 800e132:	4638      	mov	r0, r7
 800e134:	b011      	add	sp, #68	; 0x44
 800e136:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e13a:	b002      	add	sp, #8
 800e13c:	4770      	bx	lr
 800e13e:	270b      	movs	r7, #11
 800e140:	e7f7      	b.n	800e132 <rcl_node_resolve_name+0x82>
 800e142:	2701      	movs	r7, #1
 800e144:	e7f5      	b.n	800e132 <rcl_node_resolve_name+0x82>
 800e146:	9009      	str	r0, [sp, #36]	; 0x24
 800e148:	9007      	str	r0, [sp, #28]
 800e14a:	a808      	add	r0, sp, #32
 800e14c:	f003 fad2 	bl	80116f4 <rcl_get_default_topic_name_substitutions>
 800e150:	4607      	mov	r7, r0
 800e152:	b1a8      	cbz	r0, 800e180 <rcl_node_resolve_name+0xd0>
 800e154:	280a      	cmp	r0, #10
 800e156:	9c07      	ldr	r4, [sp, #28]
 800e158:	d000      	beq.n	800e15c <rcl_node_resolve_name+0xac>
 800e15a:	2701      	movs	r7, #1
 800e15c:	a808      	add	r0, sp, #32
 800e15e:	f000 fcb3 	bl	800eac8 <rcutils_string_map_fini>
 800e162:	2800      	cmp	r0, #0
 800e164:	d13d      	bne.n	800e1e2 <rcl_node_resolve_name+0x132>
 800e166:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e168:	4659      	mov	r1, fp
 800e16a:	47d0      	blx	sl
 800e16c:	4659      	mov	r1, fp
 800e16e:	4620      	mov	r0, r4
 800e170:	47d0      	blx	sl
 800e172:	f1b8 0f00 	cmp.w	r8, #0
 800e176:	d0dc      	beq.n	800e132 <rcl_node_resolve_name+0x82>
 800e178:	2f67      	cmp	r7, #103	; 0x67
 800e17a:	bf08      	it	eq
 800e17c:	2768      	moveq	r7, #104	; 0x68
 800e17e:	e7d8      	b.n	800e132 <rcl_node_resolve_name+0x82>
 800e180:	ab09      	add	r3, sp, #36	; 0x24
 800e182:	9305      	str	r3, [sp, #20]
 800e184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e186:	46ec      	mov	ip, sp
 800e188:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e18c:	682b      	ldr	r3, [r5, #0]
 800e18e:	f8cc 3000 	str.w	r3, [ip]
 800e192:	464a      	mov	r2, r9
 800e194:	4631      	mov	r1, r6
 800e196:	4620      	mov	r0, r4
 800e198:	ab08      	add	r3, sp, #32
 800e19a:	f003 f94d 	bl	8011438 <rcl_expand_topic_name>
 800e19e:	4607      	mov	r7, r0
 800e1a0:	b9b8      	cbnz	r0, 800e1d2 <rcl_node_resolve_name+0x122>
 800e1a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e1a4:	9009      	str	r0, [sp, #36]	; 0x24
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	a90a      	add	r1, sp, #40	; 0x28
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	f000 fd74 	bl	800ec98 <rmw_validate_full_topic_name>
 800e1b0:	b988      	cbnz	r0, 800e1d6 <rcl_node_resolve_name+0x126>
 800e1b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e1b4:	b9d5      	cbnz	r5, 800e1ec <rcl_node_resolve_name+0x13c>
 800e1b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1b8:	a808      	add	r0, sp, #32
 800e1ba:	601c      	str	r4, [r3, #0]
 800e1bc:	f000 fc84 	bl	800eac8 <rcutils_string_map_fini>
 800e1c0:	4607      	mov	r7, r0
 800e1c2:	b1a8      	cbz	r0, 800e1f0 <rcl_node_resolve_name+0x140>
 800e1c4:	f7fb f93a 	bl	800943c <rcutils_get_error_string>
 800e1c8:	462c      	mov	r4, r5
 800e1ca:	f7fb f94d 	bl	8009468 <rcutils_reset_error>
 800e1ce:	2701      	movs	r7, #1
 800e1d0:	e7c9      	b.n	800e166 <rcl_node_resolve_name+0xb6>
 800e1d2:	9c07      	ldr	r4, [sp, #28]
 800e1d4:	e7c2      	b.n	800e15c <rcl_node_resolve_name+0xac>
 800e1d6:	f7fb f931 	bl	800943c <rcutils_get_error_string>
 800e1da:	2701      	movs	r7, #1
 800e1dc:	f7fb f944 	bl	8009468 <rcutils_reset_error>
 800e1e0:	e7bc      	b.n	800e15c <rcl_node_resolve_name+0xac>
 800e1e2:	f7fb f92b 	bl	800943c <rcutils_get_error_string>
 800e1e6:	f7fb f93f 	bl	8009468 <rcutils_reset_error>
 800e1ea:	e7bc      	b.n	800e166 <rcl_node_resolve_name+0xb6>
 800e1ec:	2767      	movs	r7, #103	; 0x67
 800e1ee:	e7b5      	b.n	800e15c <rcl_node_resolve_name+0xac>
 800e1f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1f2:	4659      	mov	r1, fp
 800e1f4:	47d0      	blx	sl
 800e1f6:	4659      	mov	r1, fp
 800e1f8:	4638      	mov	r0, r7
 800e1fa:	47d0      	blx	sl
 800e1fc:	e799      	b.n	800e132 <rcl_node_resolve_name+0x82>
 800e1fe:	bf00      	nop

0800e200 <exact_match_lookup>:
 800e200:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e202:	f102 0708 	add.w	r7, r2, #8
 800e206:	460b      	mov	r3, r1
 800e208:	4614      	mov	r4, r2
 800e20a:	4606      	mov	r6, r0
 800e20c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800e210:	b085      	sub	sp, #20
 800e212:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e216:	4618      	mov	r0, r3
 800e218:	4919      	ldr	r1, [pc, #100]	; (800e280 <exact_match_lookup+0x80>)
 800e21a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800e21e:	f000 fa35 	bl	800e68c <rcutils_join_path>
 800e222:	7833      	ldrb	r3, [r6, #0]
 800e224:	2b2f      	cmp	r3, #47	; 0x2f
 800e226:	4605      	mov	r5, r0
 800e228:	d023      	beq.n	800e272 <exact_match_lookup+0x72>
 800e22a:	f104 030c 	add.w	r3, r4, #12
 800e22e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e232:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e236:	1c70      	adds	r0, r6, #1
 800e238:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e23c:	f000 fa2c 	bl	800e698 <rcutils_to_native_path>
 800e240:	4606      	mov	r6, r0
 800e242:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800e246:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e24a:	4631      	mov	r1, r6
 800e24c:	e894 000c 	ldmia.w	r4, {r2, r3}
 800e250:	4628      	mov	r0, r5
 800e252:	f000 fa1b 	bl	800e68c <rcutils_join_path>
 800e256:	6862      	ldr	r2, [r4, #4]
 800e258:	6921      	ldr	r1, [r4, #16]
 800e25a:	4603      	mov	r3, r0
 800e25c:	4630      	mov	r0, r6
 800e25e:	461e      	mov	r6, r3
 800e260:	4790      	blx	r2
 800e262:	4628      	mov	r0, r5
 800e264:	6863      	ldr	r3, [r4, #4]
 800e266:	6921      	ldr	r1, [r4, #16]
 800e268:	4798      	blx	r3
 800e26a:	4635      	mov	r5, r6
 800e26c:	4628      	mov	r0, r5
 800e26e:	b005      	add	sp, #20
 800e270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e272:	7873      	ldrb	r3, [r6, #1]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d1d8      	bne.n	800e22a <exact_match_lookup+0x2a>
 800e278:	4628      	mov	r0, r5
 800e27a:	b005      	add	sp, #20
 800e27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e27e:	bf00      	nop
 800e280:	08013820 	.word	0x08013820

0800e284 <rcl_get_secure_root>:
 800e284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e288:	b085      	sub	sp, #20
 800e28a:	b168      	cbz	r0, 800e2a8 <rcl_get_secure_root+0x24>
 800e28c:	4607      	mov	r7, r0
 800e28e:	4608      	mov	r0, r1
 800e290:	460c      	mov	r4, r1
 800e292:	f7fb f8c5 	bl	8009420 <rcutils_allocator_is_valid>
 800e296:	b138      	cbz	r0, 800e2a8 <rcl_get_secure_root+0x24>
 800e298:	2300      	movs	r3, #0
 800e29a:	482d      	ldr	r0, [pc, #180]	; (800e350 <rcl_get_secure_root+0xcc>)
 800e29c:	9303      	str	r3, [sp, #12]
 800e29e:	a903      	add	r1, sp, #12
 800e2a0:	f000 f9da 	bl	800e658 <rcutils_get_env>
 800e2a4:	4605      	mov	r5, r0
 800e2a6:	b120      	cbz	r0, 800e2b2 <rcl_get_secure_root+0x2e>
 800e2a8:	2500      	movs	r5, #0
 800e2aa:	4628      	mov	r0, r5
 800e2ac:	b005      	add	sp, #20
 800e2ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2b2:	9b03      	ldr	r3, [sp, #12]
 800e2b4:	781a      	ldrb	r2, [r3, #0]
 800e2b6:	2a00      	cmp	r2, #0
 800e2b8:	d0f6      	beq.n	800e2a8 <rcl_get_secure_root+0x24>
 800e2ba:	f104 090c 	add.w	r9, r4, #12
 800e2be:	e899 0003 	ldmia.w	r9, {r0, r1}
 800e2c2:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e2cc:	f000 fb06 	bl	800e8dc <rcutils_strdup>
 800e2d0:	4680      	mov	r8, r0
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	d0e8      	beq.n	800e2a8 <rcl_get_secure_root+0x24>
 800e2d6:	481f      	ldr	r0, [pc, #124]	; (800e354 <rcl_get_secure_root+0xd0>)
 800e2d8:	9503      	str	r5, [sp, #12]
 800e2da:	a903      	add	r1, sp, #12
 800e2dc:	f000 f9bc 	bl	800e658 <rcutils_get_env>
 800e2e0:	b160      	cbz	r0, 800e2fc <rcl_get_secure_root+0x78>
 800e2e2:	2600      	movs	r6, #0
 800e2e4:	6863      	ldr	r3, [r4, #4]
 800e2e6:	6921      	ldr	r1, [r4, #16]
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	4798      	blx	r3
 800e2ec:	4640      	mov	r0, r8
 800e2ee:	6863      	ldr	r3, [r4, #4]
 800e2f0:	6921      	ldr	r1, [r4, #16]
 800e2f2:	4798      	blx	r3
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	b005      	add	sp, #20
 800e2f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2fc:	9b03      	ldr	r3, [sp, #12]
 800e2fe:	781e      	ldrb	r6, [r3, #0]
 800e300:	b1f6      	cbz	r6, 800e340 <rcl_get_secure_root+0xbc>
 800e302:	e899 0003 	ldmia.w	r9, {r0, r1}
 800e306:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e30a:	4618      	mov	r0, r3
 800e30c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e310:	f000 fae4 	bl	800e8dc <rcutils_strdup>
 800e314:	4606      	mov	r6, r0
 800e316:	2800      	cmp	r0, #0
 800e318:	d0e3      	beq.n	800e2e2 <rcl_get_secure_root+0x5e>
 800e31a:	4622      	mov	r2, r4
 800e31c:	4641      	mov	r1, r8
 800e31e:	f7ff ff6f 	bl	800e200 <exact_match_lookup>
 800e322:	4605      	mov	r5, r0
 800e324:	2d00      	cmp	r5, #0
 800e326:	d0dd      	beq.n	800e2e4 <rcl_get_secure_root+0x60>
 800e328:	4628      	mov	r0, r5
 800e32a:	f000 f9ad 	bl	800e688 <rcutils_is_directory>
 800e32e:	4603      	mov	r3, r0
 800e330:	2800      	cmp	r0, #0
 800e332:	d1d7      	bne.n	800e2e4 <rcl_get_secure_root+0x60>
 800e334:	4628      	mov	r0, r5
 800e336:	6921      	ldr	r1, [r4, #16]
 800e338:	461d      	mov	r5, r3
 800e33a:	6863      	ldr	r3, [r4, #4]
 800e33c:	4798      	blx	r3
 800e33e:	e7d1      	b.n	800e2e4 <rcl_get_secure_root+0x60>
 800e340:	4622      	mov	r2, r4
 800e342:	4638      	mov	r0, r7
 800e344:	4641      	mov	r1, r8
 800e346:	f7ff ff5b 	bl	800e200 <exact_match_lookup>
 800e34a:	4605      	mov	r5, r0
 800e34c:	e7ea      	b.n	800e324 <rcl_get_secure_root+0xa0>
 800e34e:	bf00      	nop
 800e350:	0801382c 	.word	0x0801382c
 800e354:	08013844 	.word	0x08013844

0800e358 <rcl_get_security_options_from_environment>:
 800e358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e35c:	b082      	sub	sp, #8
 800e35e:	2300      	movs	r3, #0
 800e360:	4606      	mov	r6, r0
 800e362:	460f      	mov	r7, r1
 800e364:	4820      	ldr	r0, [pc, #128]	; (800e3e8 <rcl_get_security_options_from_environment+0x90>)
 800e366:	9301      	str	r3, [sp, #4]
 800e368:	a901      	add	r1, sp, #4
 800e36a:	4690      	mov	r8, r2
 800e36c:	f000 f974 	bl	800e658 <rcutils_get_env>
 800e370:	b120      	cbz	r0, 800e37c <rcl_get_security_options_from_environment+0x24>
 800e372:	2501      	movs	r5, #1
 800e374:	4628      	mov	r0, r5
 800e376:	b002      	add	sp, #8
 800e378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e37c:	491b      	ldr	r1, [pc, #108]	; (800e3ec <rcl_get_security_options_from_environment+0x94>)
 800e37e:	4604      	mov	r4, r0
 800e380:	9801      	ldr	r0, [sp, #4]
 800e382:	f7f1 ff2d 	bl	80001e0 <strcmp>
 800e386:	4605      	mov	r5, r0
 800e388:	b9e8      	cbnz	r0, 800e3c6 <rcl_get_security_options_from_environment+0x6e>
 800e38a:	9001      	str	r0, [sp, #4]
 800e38c:	f1b8 0f00 	cmp.w	r8, #0
 800e390:	d020      	beq.n	800e3d4 <rcl_get_security_options_from_environment+0x7c>
 800e392:	4817      	ldr	r0, [pc, #92]	; (800e3f0 <rcl_get_security_options_from_environment+0x98>)
 800e394:	a901      	add	r1, sp, #4
 800e396:	f000 f95f 	bl	800e658 <rcutils_get_env>
 800e39a:	2800      	cmp	r0, #0
 800e39c:	d1e9      	bne.n	800e372 <rcl_get_security_options_from_environment+0x1a>
 800e39e:	4915      	ldr	r1, [pc, #84]	; (800e3f4 <rcl_get_security_options_from_environment+0x9c>)
 800e3a0:	9801      	ldr	r0, [sp, #4]
 800e3a2:	f7f1 ff1d 	bl	80001e0 <strcmp>
 800e3a6:	fab0 f080 	clz	r0, r0
 800e3aa:	0940      	lsrs	r0, r0, #5
 800e3ac:	f888 0000 	strb.w	r0, [r8]
 800e3b0:	4639      	mov	r1, r7
 800e3b2:	4630      	mov	r0, r6
 800e3b4:	f7ff ff66 	bl	800e284 <rcl_get_secure_root>
 800e3b8:	b170      	cbz	r0, 800e3d8 <rcl_get_security_options_from_environment+0x80>
 800e3ba:	f8c8 0004 	str.w	r0, [r8, #4]
 800e3be:	4628      	mov	r0, r5
 800e3c0:	b002      	add	sp, #8
 800e3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3c6:	4625      	mov	r5, r4
 800e3c8:	4628      	mov	r0, r5
 800e3ca:	f888 4000 	strb.w	r4, [r8]
 800e3ce:	b002      	add	sp, #8
 800e3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3d4:	250b      	movs	r5, #11
 800e3d6:	e7cd      	b.n	800e374 <rcl_get_security_options_from_environment+0x1c>
 800e3d8:	f898 5000 	ldrb.w	r5, [r8]
 800e3dc:	f1a5 0501 	sub.w	r5, r5, #1
 800e3e0:	fab5 f585 	clz	r5, r5
 800e3e4:	096d      	lsrs	r5, r5, #5
 800e3e6:	e7c5      	b.n	800e374 <rcl_get_security_options_from_environment+0x1c>
 800e3e8:	080137e4 	.word	0x080137e4
 800e3ec:	080137f8 	.word	0x080137f8
 800e3f0:	08013800 	.word	0x08013800
 800e3f4:	08013818 	.word	0x08013818

0800e3f8 <rcl_get_system_time>:
 800e3f8:	4608      	mov	r0, r1
 800e3fa:	f000 bbd9 	b.w	800ebb0 <rcutils_system_time_now>
 800e3fe:	bf00      	nop

0800e400 <rcl_get_steady_time>:
 800e400:	4608      	mov	r0, r1
 800e402:	f000 bbfd 	b.w	800ec00 <rcutils_steady_time_now>
 800e406:	bf00      	nop

0800e408 <rcl_get_ros_time>:
 800e408:	7a03      	ldrb	r3, [r0, #8]
 800e40a:	b510      	push	{r4, lr}
 800e40c:	460c      	mov	r4, r1
 800e40e:	b133      	cbz	r3, 800e41e <rcl_get_ros_time+0x16>
 800e410:	2105      	movs	r1, #5
 800e412:	f000 f8eb 	bl	800e5ec <__atomic_load_8>
 800e416:	e9c4 0100 	strd	r0, r1, [r4]
 800e41a:	2000      	movs	r0, #0
 800e41c:	bd10      	pop	{r4, pc}
 800e41e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e422:	4608      	mov	r0, r1
 800e424:	f000 bbc4 	b.w	800ebb0 <rcutils_system_time_now>

0800e428 <rcl_clock_init>:
 800e428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e42a:	4605      	mov	r5, r0
 800e42c:	4610      	mov	r0, r2
 800e42e:	4614      	mov	r4, r2
 800e430:	460e      	mov	r6, r1
 800e432:	f7fa fff5 	bl	8009420 <rcutils_allocator_is_valid>
 800e436:	b128      	cbz	r0, 800e444 <rcl_clock_init+0x1c>
 800e438:	2d03      	cmp	r5, #3
 800e43a:	d803      	bhi.n	800e444 <rcl_clock_init+0x1c>
 800e43c:	e8df f005 	tbb	[pc, r5]
 800e440:	06532e1d 	.word	0x06532e1d
 800e444:	f04f 0c0b 	mov.w	ip, #11
 800e448:	4660      	mov	r0, ip
 800e44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e44c:	2e00      	cmp	r6, #0
 800e44e:	d0f9      	beq.n	800e444 <rcl_clock_init+0x1c>
 800e450:	2c00      	cmp	r4, #0
 800e452:	d0f7      	beq.n	800e444 <rcl_clock_init+0x1c>
 800e454:	2300      	movs	r3, #0
 800e456:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800e45a:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800e510 <rcl_clock_init+0xe8>
 800e45e:	6133      	str	r3, [r6, #16]
 800e460:	f106 0514 	add.w	r5, r6, #20
 800e464:	469c      	mov	ip, r3
 800e466:	2703      	movs	r7, #3
 800e468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e46a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e46c:	6823      	ldr	r3, [r4, #0]
 800e46e:	602b      	str	r3, [r5, #0]
 800e470:	7037      	strb	r7, [r6, #0]
 800e472:	f8c6 e00c 	str.w	lr, [r6, #12]
 800e476:	4660      	mov	r0, ip
 800e478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e47a:	2e00      	cmp	r6, #0
 800e47c:	d0e2      	beq.n	800e444 <rcl_clock_init+0x1c>
 800e47e:	2300      	movs	r3, #0
 800e480:	7033      	strb	r3, [r6, #0]
 800e482:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800e486:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800e48a:	469c      	mov	ip, r3
 800e48c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e48e:	f106 0514 	add.w	r5, r6, #20
 800e492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e494:	6823      	ldr	r3, [r4, #0]
 800e496:	602b      	str	r3, [r5, #0]
 800e498:	4660      	mov	r0, ip
 800e49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e49c:	2e00      	cmp	r6, #0
 800e49e:	d0d1      	beq.n	800e444 <rcl_clock_init+0x1c>
 800e4a0:	2c00      	cmp	r4, #0
 800e4a2:	d0cf      	beq.n	800e444 <rcl_clock_init+0x1c>
 800e4a4:	2700      	movs	r7, #0
 800e4a6:	7037      	strb	r7, [r6, #0]
 800e4a8:	46a4      	mov	ip, r4
 800e4aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e4ae:	f106 0514 	add.w	r5, r6, #20
 800e4b2:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800e4b6:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800e4ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e4bc:	f8dc 3000 	ldr.w	r3, [ip]
 800e4c0:	602b      	str	r3, [r5, #0]
 800e4c2:	6921      	ldr	r1, [r4, #16]
 800e4c4:	6823      	ldr	r3, [r4, #0]
 800e4c6:	2010      	movs	r0, #16
 800e4c8:	4798      	blx	r3
 800e4ca:	6130      	str	r0, [r6, #16]
 800e4cc:	b1d0      	cbz	r0, 800e504 <rcl_clock_init+0xdc>
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	e9c0 2300 	strd	r2, r3, [r0]
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	7207      	strb	r7, [r0, #8]
 800e4da:	4a0c      	ldr	r2, [pc, #48]	; (800e50c <rcl_clock_init+0xe4>)
 800e4dc:	7033      	strb	r3, [r6, #0]
 800e4de:	46bc      	mov	ip, r7
 800e4e0:	60f2      	str	r2, [r6, #12]
 800e4e2:	4660      	mov	r0, ip
 800e4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4e6:	2e00      	cmp	r6, #0
 800e4e8:	d0ac      	beq.n	800e444 <rcl_clock_init+0x1c>
 800e4ea:	2c00      	cmp	r4, #0
 800e4ec:	d0aa      	beq.n	800e444 <rcl_clock_init+0x1c>
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800e4f4:	f8df e01c 	ldr.w	lr, [pc, #28]	; 800e514 <rcl_clock_init+0xec>
 800e4f8:	6133      	str	r3, [r6, #16]
 800e4fa:	f106 0514 	add.w	r5, r6, #20
 800e4fe:	469c      	mov	ip, r3
 800e500:	2702      	movs	r7, #2
 800e502:	e7b1      	b.n	800e468 <rcl_clock_init+0x40>
 800e504:	f04f 0c0a 	mov.w	ip, #10
 800e508:	e79e      	b.n	800e448 <rcl_clock_init+0x20>
 800e50a:	bf00      	nop
 800e50c:	0800e409 	.word	0x0800e409
 800e510:	0800e401 	.word	0x0800e401
 800e514:	0800e3f9 	.word	0x0800e3f9

0800e518 <rcl_validate_enclave_name_with_size>:
 800e518:	b378      	cbz	r0, 800e57a <rcl_validate_enclave_name_with_size+0x62>
 800e51a:	b570      	push	{r4, r5, r6, lr}
 800e51c:	4615      	mov	r5, r2
 800e51e:	b0c2      	sub	sp, #264	; 0x108
 800e520:	b302      	cbz	r2, 800e564 <rcl_validate_enclave_name_with_size+0x4c>
 800e522:	461e      	mov	r6, r3
 800e524:	466a      	mov	r2, sp
 800e526:	ab01      	add	r3, sp, #4
 800e528:	460c      	mov	r4, r1
 800e52a:	f000 fc2b 	bl	800ed84 <rmw_validate_namespace_with_size>
 800e52e:	4684      	mov	ip, r0
 800e530:	b9e8      	cbnz	r0, 800e56e <rcl_validate_enclave_name_with_size+0x56>
 800e532:	9b00      	ldr	r3, [sp, #0]
 800e534:	b923      	cbnz	r3, 800e540 <rcl_validate_enclave_name_with_size+0x28>
 800e536:	2300      	movs	r3, #0
 800e538:	602b      	str	r3, [r5, #0]
 800e53a:	4660      	mov	r0, ip
 800e53c:	b042      	add	sp, #264	; 0x108
 800e53e:	bd70      	pop	{r4, r5, r6, pc}
 800e540:	2b07      	cmp	r3, #7
 800e542:	d007      	beq.n	800e554 <rcl_validate_enclave_name_with_size+0x3c>
 800e544:	1e5a      	subs	r2, r3, #1
 800e546:	2a05      	cmp	r2, #5
 800e548:	d833      	bhi.n	800e5b2 <rcl_validate_enclave_name_with_size+0x9a>
 800e54a:	e8df f002 	tbb	[pc, r2]
 800e54e:	2c2f      	.short	0x2c2f
 800e550:	1a232629 	.word	0x1a232629
 800e554:	2cff      	cmp	r4, #255	; 0xff
 800e556:	d9ee      	bls.n	800e536 <rcl_validate_enclave_name_with_size+0x1e>
 800e558:	602b      	str	r3, [r5, #0]
 800e55a:	2e00      	cmp	r6, #0
 800e55c:	d0ed      	beq.n	800e53a <rcl_validate_enclave_name_with_size+0x22>
 800e55e:	23fe      	movs	r3, #254	; 0xfe
 800e560:	6033      	str	r3, [r6, #0]
 800e562:	e7ea      	b.n	800e53a <rcl_validate_enclave_name_with_size+0x22>
 800e564:	f04f 0c0b 	mov.w	ip, #11
 800e568:	4660      	mov	r0, ip
 800e56a:	b042      	add	sp, #264	; 0x108
 800e56c:	bd70      	pop	{r4, r5, r6, pc}
 800e56e:	f7ff f953 	bl	800d818 <rcl_convert_rmw_ret_to_rcl_ret>
 800e572:	4684      	mov	ip, r0
 800e574:	4660      	mov	r0, ip
 800e576:	b042      	add	sp, #264	; 0x108
 800e578:	bd70      	pop	{r4, r5, r6, pc}
 800e57a:	f04f 0c0b 	mov.w	ip, #11
 800e57e:	4660      	mov	r0, ip
 800e580:	4770      	bx	lr
 800e582:	2306      	movs	r3, #6
 800e584:	602b      	str	r3, [r5, #0]
 800e586:	2e00      	cmp	r6, #0
 800e588:	d0d7      	beq.n	800e53a <rcl_validate_enclave_name_with_size+0x22>
 800e58a:	9b01      	ldr	r3, [sp, #4]
 800e58c:	6033      	str	r3, [r6, #0]
 800e58e:	4660      	mov	r0, ip
 800e590:	b042      	add	sp, #264	; 0x108
 800e592:	bd70      	pop	{r4, r5, r6, pc}
 800e594:	2305      	movs	r3, #5
 800e596:	602b      	str	r3, [r5, #0]
 800e598:	e7f5      	b.n	800e586 <rcl_validate_enclave_name_with_size+0x6e>
 800e59a:	2304      	movs	r3, #4
 800e59c:	602b      	str	r3, [r5, #0]
 800e59e:	e7f2      	b.n	800e586 <rcl_validate_enclave_name_with_size+0x6e>
 800e5a0:	2303      	movs	r3, #3
 800e5a2:	602b      	str	r3, [r5, #0]
 800e5a4:	e7ef      	b.n	800e586 <rcl_validate_enclave_name_with_size+0x6e>
 800e5a6:	2302      	movs	r3, #2
 800e5a8:	602b      	str	r3, [r5, #0]
 800e5aa:	e7ec      	b.n	800e586 <rcl_validate_enclave_name_with_size+0x6e>
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	602b      	str	r3, [r5, #0]
 800e5b0:	e7e9      	b.n	800e586 <rcl_validate_enclave_name_with_size+0x6e>
 800e5b2:	4a04      	ldr	r2, [pc, #16]	; (800e5c4 <rcl_validate_enclave_name_with_size+0xac>)
 800e5b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e5b8:	a802      	add	r0, sp, #8
 800e5ba:	f000 f963 	bl	800e884 <rcutils_snprintf>
 800e5be:	f04f 0c01 	mov.w	ip, #1
 800e5c2:	e7ba      	b.n	800e53a <rcl_validate_enclave_name_with_size+0x22>
 800e5c4:	08013864 	.word	0x08013864

0800e5c8 <rcl_validate_enclave_name>:
 800e5c8:	b168      	cbz	r0, 800e5e6 <rcl_validate_enclave_name+0x1e>
 800e5ca:	b570      	push	{r4, r5, r6, lr}
 800e5cc:	460d      	mov	r5, r1
 800e5ce:	4616      	mov	r6, r2
 800e5d0:	4604      	mov	r4, r0
 800e5d2:	f7f1 fe0f 	bl	80001f4 <strlen>
 800e5d6:	4633      	mov	r3, r6
 800e5d8:	4601      	mov	r1, r0
 800e5da:	462a      	mov	r2, r5
 800e5dc:	4620      	mov	r0, r4
 800e5de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e5e2:	f7ff bf99 	b.w	800e518 <rcl_validate_enclave_name_with_size>
 800e5e6:	200b      	movs	r0, #11
 800e5e8:	4770      	bx	lr
 800e5ea:	bf00      	nop

0800e5ec <__atomic_load_8>:
 800e5ec:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800e5f0:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 800e5f4:	4a15      	ldr	r2, [pc, #84]	; (800e64c <__atomic_load_8+0x60>)
 800e5f6:	4b16      	ldr	r3, [pc, #88]	; (800e650 <__atomic_load_8+0x64>)
 800e5f8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800e5fc:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800e600:	fb02 f101 	mul.w	r1, r2, r1
 800e604:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800e608:	fba3 2301 	umull	r2, r3, r3, r1
 800e60c:	091b      	lsrs	r3, r3, #4
 800e60e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e612:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800e616:	b4d0      	push	{r4, r6, r7}
 800e618:	4c0e      	ldr	r4, [pc, #56]	; (800e654 <__atomic_load_8+0x68>)
 800e61a:	1ac9      	subs	r1, r1, r3
 800e61c:	1862      	adds	r2, r4, r1
 800e61e:	f04f 0c01 	mov.w	ip, #1
 800e622:	e8d2 3f4f 	ldrexb	r3, [r2]
 800e626:	e8c2 cf46 	strexb	r6, ip, [r2]
 800e62a:	2e00      	cmp	r6, #0
 800e62c:	d1f9      	bne.n	800e622 <__atomic_load_8+0x36>
 800e62e:	f3bf 8f5b 	dmb	ish
 800e632:	b2db      	uxtb	r3, r3
 800e634:	2b00      	cmp	r3, #0
 800e636:	d1f4      	bne.n	800e622 <__atomic_load_8+0x36>
 800e638:	e9d0 6700 	ldrd	r6, r7, [r0]
 800e63c:	f3bf 8f5b 	dmb	ish
 800e640:	5463      	strb	r3, [r4, r1]
 800e642:	4630      	mov	r0, r6
 800e644:	4639      	mov	r1, r7
 800e646:	bcd0      	pop	{r4, r6, r7}
 800e648:	4770      	bx	lr
 800e64a:	bf00      	nop
 800e64c:	27d4eb2d 	.word	0x27d4eb2d
 800e650:	b21642c9 	.word	0xb21642c9
 800e654:	20012448 	.word	0x20012448

0800e658 <rcutils_get_env>:
 800e658:	b168      	cbz	r0, 800e676 <rcutils_get_env+0x1e>
 800e65a:	b510      	push	{r4, lr}
 800e65c:	460c      	mov	r4, r1
 800e65e:	b129      	cbz	r1, 800e66c <rcutils_get_env+0x14>
 800e660:	f003 fb3e 	bl	8011ce0 <getenv>
 800e664:	b120      	cbz	r0, 800e670 <rcutils_get_env+0x18>
 800e666:	6020      	str	r0, [r4, #0]
 800e668:	2000      	movs	r0, #0
 800e66a:	bd10      	pop	{r4, pc}
 800e66c:	4803      	ldr	r0, [pc, #12]	; (800e67c <rcutils_get_env+0x24>)
 800e66e:	bd10      	pop	{r4, pc}
 800e670:	4b03      	ldr	r3, [pc, #12]	; (800e680 <rcutils_get_env+0x28>)
 800e672:	6023      	str	r3, [r4, #0]
 800e674:	bd10      	pop	{r4, pc}
 800e676:	4803      	ldr	r0, [pc, #12]	; (800e684 <rcutils_get_env+0x2c>)
 800e678:	4770      	bx	lr
 800e67a:	bf00      	nop
 800e67c:	080138e0 	.word	0x080138e0
 800e680:	08013a04 	.word	0x08013a04
 800e684:	080138c4 	.word	0x080138c4

0800e688 <rcutils_is_directory>:
 800e688:	2000      	movs	r0, #0
 800e68a:	4770      	bx	lr

0800e68c <rcutils_join_path>:
 800e68c:	b082      	sub	sp, #8
 800e68e:	e88d 000c 	stmia.w	sp, {r2, r3}
 800e692:	2000      	movs	r0, #0
 800e694:	b002      	add	sp, #8
 800e696:	4770      	bx	lr

0800e698 <rcutils_to_native_path>:
 800e698:	b084      	sub	sp, #16
 800e69a:	a801      	add	r0, sp, #4
 800e69c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800e6a0:	b004      	add	sp, #16
 800e6a2:	2000      	movs	r0, #0
 800e6a4:	4770      	bx	lr
 800e6a6:	bf00      	nop

0800e6a8 <rcutils_format_string_limit>:
 800e6a8:	b40f      	push	{r0, r1, r2, r3}
 800e6aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6ac:	b083      	sub	sp, #12
 800e6ae:	ac08      	add	r4, sp, #32
 800e6b0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800e6b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e6b6:	b34e      	cbz	r6, 800e70c <rcutils_format_string_limit+0x64>
 800e6b8:	a808      	add	r0, sp, #32
 800e6ba:	f7fa feb1 	bl	8009420 <rcutils_allocator_is_valid>
 800e6be:	b328      	cbz	r0, 800e70c <rcutils_format_string_limit+0x64>
 800e6c0:	2100      	movs	r1, #0
 800e6c2:	ab0f      	add	r3, sp, #60	; 0x3c
 800e6c4:	4632      	mov	r2, r6
 800e6c6:	4608      	mov	r0, r1
 800e6c8:	e9cd 3300 	strd	r3, r3, [sp]
 800e6cc:	f000 f8f4 	bl	800e8b8 <rcutils_vsnprintf>
 800e6d0:	1c43      	adds	r3, r0, #1
 800e6d2:	4605      	mov	r5, r0
 800e6d4:	d01a      	beq.n	800e70c <rcutils_format_string_limit+0x64>
 800e6d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e6da:	1c47      	adds	r7, r0, #1
 800e6dc:	429f      	cmp	r7, r3
 800e6de:	bf84      	itt	hi
 800e6e0:	461f      	movhi	r7, r3
 800e6e2:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 800e6e6:	4638      	mov	r0, r7
 800e6e8:	9b08      	ldr	r3, [sp, #32]
 800e6ea:	4798      	blx	r3
 800e6ec:	4604      	mov	r4, r0
 800e6ee:	b168      	cbz	r0, 800e70c <rcutils_format_string_limit+0x64>
 800e6f0:	9b01      	ldr	r3, [sp, #4]
 800e6f2:	4632      	mov	r2, r6
 800e6f4:	4639      	mov	r1, r7
 800e6f6:	f000 f8df 	bl	800e8b8 <rcutils_vsnprintf>
 800e6fa:	2800      	cmp	r0, #0
 800e6fc:	db02      	blt.n	800e704 <rcutils_format_string_limit+0x5c>
 800e6fe:	2300      	movs	r3, #0
 800e700:	5563      	strb	r3, [r4, r5]
 800e702:	e004      	b.n	800e70e <rcutils_format_string_limit+0x66>
 800e704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e706:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e708:	4620      	mov	r0, r4
 800e70a:	4798      	blx	r3
 800e70c:	2400      	movs	r4, #0
 800e70e:	4620      	mov	r0, r4
 800e710:	b003      	add	sp, #12
 800e712:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e716:	b004      	add	sp, #16
 800e718:	4770      	bx	lr
 800e71a:	bf00      	nop

0800e71c <rcutils_repl_str>:
 800e71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e720:	ed2d 8b02 	vpush	{d8}
 800e724:	b087      	sub	sp, #28
 800e726:	4680      	mov	r8, r0
 800e728:	4608      	mov	r0, r1
 800e72a:	f8cd 8004 	str.w	r8, [sp, #4]
 800e72e:	ee08 2a10 	vmov	s16, r2
 800e732:	468a      	mov	sl, r1
 800e734:	4699      	mov	r9, r3
 800e736:	f7f1 fd5d 	bl	80001f4 <strlen>
 800e73a:	2600      	movs	r6, #0
 800e73c:	4647      	mov	r7, r8
 800e73e:	9002      	str	r0, [sp, #8]
 800e740:	46b3      	mov	fp, r6
 800e742:	2510      	movs	r5, #16
 800e744:	46b0      	mov	r8, r6
 800e746:	e01d      	b.n	800e784 <rcutils_repl_str+0x68>
 800e748:	f10b 0b01 	add.w	fp, fp, #1
 800e74c:	455e      	cmp	r6, fp
 800e74e:	d211      	bcs.n	800e774 <rcutils_repl_str+0x58>
 800e750:	442e      	add	r6, r5
 800e752:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e756:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e75a:	00b1      	lsls	r1, r6, #2
 800e75c:	4798      	blx	r3
 800e75e:	2800      	cmp	r0, #0
 800e760:	f000 8088 	beq.w	800e874 <rcutils_repl_str+0x158>
 800e764:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e768:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800e76c:	4680      	mov	r8, r0
 800e76e:	bf28      	it	cs
 800e770:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 800e774:	9a01      	ldr	r2, [sp, #4]
 800e776:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800e77a:	1aa2      	subs	r2, r4, r2
 800e77c:	f843 2c04 	str.w	r2, [r3, #-4]
 800e780:	9b02      	ldr	r3, [sp, #8]
 800e782:	18e7      	adds	r7, r4, r3
 800e784:	4651      	mov	r1, sl
 800e786:	4638      	mov	r0, r7
 800e788:	f003 fe79 	bl	801247e <strstr>
 800e78c:	4604      	mov	r4, r0
 800e78e:	4640      	mov	r0, r8
 800e790:	2c00      	cmp	r4, #0
 800e792:	d1d9      	bne.n	800e748 <rcutils_repl_str+0x2c>
 800e794:	46b8      	mov	r8, r7
 800e796:	4607      	mov	r7, r0
 800e798:	4640      	mov	r0, r8
 800e79a:	f7f1 fd2b 	bl	80001f4 <strlen>
 800e79e:	9b01      	ldr	r3, [sp, #4]
 800e7a0:	eba8 0303 	sub.w	r3, r8, r3
 800e7a4:	181c      	adds	r4, r3, r0
 800e7a6:	9404      	str	r4, [sp, #16]
 800e7a8:	f1bb 0f00 	cmp.w	fp, #0
 800e7ac:	d04a      	beq.n	800e844 <rcutils_repl_str+0x128>
 800e7ae:	ee18 0a10 	vmov	r0, s16
 800e7b2:	f7f1 fd1f 	bl	80001f4 <strlen>
 800e7b6:	9b02      	ldr	r3, [sp, #8]
 800e7b8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e7bc:	1ac3      	subs	r3, r0, r3
 800e7be:	fb0b 4303 	mla	r3, fp, r3, r4
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	9305      	str	r3, [sp, #20]
 800e7c6:	4606      	mov	r6, r0
 800e7c8:	f8d9 3000 	ldr.w	r3, [r9]
 800e7cc:	1c50      	adds	r0, r2, #1
 800e7ce:	4798      	blx	r3
 800e7d0:	9003      	str	r0, [sp, #12]
 800e7d2:	2800      	cmp	r0, #0
 800e7d4:	d04f      	beq.n	800e876 <rcutils_repl_str+0x15a>
 800e7d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e7da:	683a      	ldr	r2, [r7, #0]
 800e7dc:	4641      	mov	r1, r8
 800e7de:	f003 ff46 	bl	801266e <memcpy>
 800e7e2:	683d      	ldr	r5, [r7, #0]
 800e7e4:	9b03      	ldr	r3, [sp, #12]
 800e7e6:	9701      	str	r7, [sp, #4]
 800e7e8:	46ba      	mov	sl, r7
 800e7ea:	441d      	add	r5, r3
 800e7ec:	9f02      	ldr	r7, [sp, #8]
 800e7ee:	f8cd 9008 	str.w	r9, [sp, #8]
 800e7f2:	2401      	movs	r4, #1
 800e7f4:	46d1      	mov	r9, sl
 800e7f6:	ee18 aa10 	vmov	sl, s16
 800e7fa:	e00a      	b.n	800e812 <rcutils_repl_str+0xf6>
 800e7fc:	f8d9 5000 	ldr.w	r5, [r9]
 800e800:	1aaa      	subs	r2, r5, r2
 800e802:	1885      	adds	r5, r0, r2
 800e804:	f003 ff33 	bl	801266e <memcpy>
 800e808:	45a3      	cmp	fp, r4
 800e80a:	f104 0201 	add.w	r2, r4, #1
 800e80e:	d935      	bls.n	800e87c <rcutils_repl_str+0x160>
 800e810:	4614      	mov	r4, r2
 800e812:	4632      	mov	r2, r6
 800e814:	4651      	mov	r1, sl
 800e816:	4628      	mov	r0, r5
 800e818:	f003 ff29 	bl	801266e <memcpy>
 800e81c:	f859 2b04 	ldr.w	r2, [r9], #4
 800e820:	45a3      	cmp	fp, r4
 800e822:	443a      	add	r2, r7
 800e824:	eb05 0006 	add.w	r0, r5, r6
 800e828:	eb08 0102 	add.w	r1, r8, r2
 800e82c:	d1e6      	bne.n	800e7fc <rcutils_repl_str+0xe0>
 800e82e:	9b04      	ldr	r3, [sp, #16]
 800e830:	1a9a      	subs	r2, r3, r2
 800e832:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800e836:	f003 ff1a 	bl	801266e <memcpy>
 800e83a:	9a03      	ldr	r2, [sp, #12]
 800e83c:	9905      	ldr	r1, [sp, #20]
 800e83e:	2300      	movs	r3, #0
 800e840:	5453      	strb	r3, [r2, r1]
 800e842:	e00b      	b.n	800e85c <rcutils_repl_str+0x140>
 800e844:	4620      	mov	r0, r4
 800e846:	f8d9 3000 	ldr.w	r3, [r9]
 800e84a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e84e:	3001      	adds	r0, #1
 800e850:	4798      	blx	r3
 800e852:	9003      	str	r0, [sp, #12]
 800e854:	b110      	cbz	r0, 800e85c <rcutils_repl_str+0x140>
 800e856:	9901      	ldr	r1, [sp, #4]
 800e858:	f003 ff01 	bl	801265e <strcpy>
 800e85c:	4638      	mov	r0, r7
 800e85e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e862:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e866:	4798      	blx	r3
 800e868:	9803      	ldr	r0, [sp, #12]
 800e86a:	b007      	add	sp, #28
 800e86c:	ecbd 8b02 	vpop	{d8}
 800e870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e874:	4647      	mov	r7, r8
 800e876:	2300      	movs	r3, #0
 800e878:	9303      	str	r3, [sp, #12]
 800e87a:	e7ef      	b.n	800e85c <rcutils_repl_str+0x140>
 800e87c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800e880:	e7db      	b.n	800e83a <rcutils_repl_str+0x11e>
 800e882:	bf00      	nop

0800e884 <rcutils_snprintf>:
 800e884:	b40c      	push	{r2, r3}
 800e886:	b530      	push	{r4, r5, lr}
 800e888:	b083      	sub	sp, #12
 800e88a:	ab06      	add	r3, sp, #24
 800e88c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e890:	9301      	str	r3, [sp, #4]
 800e892:	b152      	cbz	r2, 800e8aa <rcutils_snprintf+0x26>
 800e894:	b138      	cbz	r0, 800e8a6 <rcutils_snprintf+0x22>
 800e896:	b141      	cbz	r1, 800e8aa <rcutils_snprintf+0x26>
 800e898:	f003 fdbc 	bl	8012414 <vsniprintf>
 800e89c:	b003      	add	sp, #12
 800e89e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e8a2:	b002      	add	sp, #8
 800e8a4:	4770      	bx	lr
 800e8a6:	2900      	cmp	r1, #0
 800e8a8:	d0f6      	beq.n	800e898 <rcutils_snprintf+0x14>
 800e8aa:	f003 feab 	bl	8012604 <__errno>
 800e8ae:	2316      	movs	r3, #22
 800e8b0:	6003      	str	r3, [r0, #0]
 800e8b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8b6:	e7f1      	b.n	800e89c <rcutils_snprintf+0x18>

0800e8b8 <rcutils_vsnprintf>:
 800e8b8:	b570      	push	{r4, r5, r6, lr}
 800e8ba:	b13a      	cbz	r2, 800e8cc <rcutils_vsnprintf+0x14>
 800e8bc:	b120      	cbz	r0, 800e8c8 <rcutils_vsnprintf+0x10>
 800e8be:	b129      	cbz	r1, 800e8cc <rcutils_vsnprintf+0x14>
 800e8c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8c4:	f003 bda6 	b.w	8012414 <vsniprintf>
 800e8c8:	2900      	cmp	r1, #0
 800e8ca:	d0f9      	beq.n	800e8c0 <rcutils_vsnprintf+0x8>
 800e8cc:	f003 fe9a 	bl	8012604 <__errno>
 800e8d0:	2316      	movs	r3, #22
 800e8d2:	6003      	str	r3, [r0, #0]
 800e8d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8d8:	bd70      	pop	{r4, r5, r6, pc}
 800e8da:	bf00      	nop

0800e8dc <rcutils_strdup>:
 800e8dc:	b084      	sub	sp, #16
 800e8de:	b570      	push	{r4, r5, r6, lr}
 800e8e0:	b082      	sub	sp, #8
 800e8e2:	ac07      	add	r4, sp, #28
 800e8e4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800e8e8:	4605      	mov	r5, r0
 800e8ea:	b1b0      	cbz	r0, 800e91a <rcutils_strdup+0x3e>
 800e8ec:	f7f1 fc82 	bl	80001f4 <strlen>
 800e8f0:	1c42      	adds	r2, r0, #1
 800e8f2:	9b07      	ldr	r3, [sp, #28]
 800e8f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8f6:	9201      	str	r2, [sp, #4]
 800e8f8:	4606      	mov	r6, r0
 800e8fa:	4610      	mov	r0, r2
 800e8fc:	4798      	blx	r3
 800e8fe:	4604      	mov	r4, r0
 800e900:	b128      	cbz	r0, 800e90e <rcutils_strdup+0x32>
 800e902:	9a01      	ldr	r2, [sp, #4]
 800e904:	4629      	mov	r1, r5
 800e906:	f003 feb2 	bl	801266e <memcpy>
 800e90a:	2300      	movs	r3, #0
 800e90c:	55a3      	strb	r3, [r4, r6]
 800e90e:	4620      	mov	r0, r4
 800e910:	b002      	add	sp, #8
 800e912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e916:	b004      	add	sp, #16
 800e918:	4770      	bx	lr
 800e91a:	4604      	mov	r4, r0
 800e91c:	e7f7      	b.n	800e90e <rcutils_strdup+0x32>
 800e91e:	bf00      	nop

0800e920 <rcutils_strndup>:
 800e920:	b082      	sub	sp, #8
 800e922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e924:	ac06      	add	r4, sp, #24
 800e926:	e884 000c 	stmia.w	r4, {r2, r3}
 800e92a:	4605      	mov	r5, r0
 800e92c:	b188      	cbz	r0, 800e952 <rcutils_strndup+0x32>
 800e92e:	1c4f      	adds	r7, r1, #1
 800e930:	460e      	mov	r6, r1
 800e932:	4638      	mov	r0, r7
 800e934:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e936:	4790      	blx	r2
 800e938:	4604      	mov	r4, r0
 800e93a:	b128      	cbz	r0, 800e948 <rcutils_strndup+0x28>
 800e93c:	463a      	mov	r2, r7
 800e93e:	4629      	mov	r1, r5
 800e940:	f003 fe95 	bl	801266e <memcpy>
 800e944:	2300      	movs	r3, #0
 800e946:	55a3      	strb	r3, [r4, r6]
 800e948:	4620      	mov	r0, r4
 800e94a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e94e:	b002      	add	sp, #8
 800e950:	4770      	bx	lr
 800e952:	4604      	mov	r4, r0
 800e954:	e7f8      	b.n	800e948 <rcutils_strndup+0x28>
 800e956:	bf00      	nop

0800e958 <rcutils_get_zero_initialized_string_map>:
 800e958:	4b01      	ldr	r3, [pc, #4]	; (800e960 <rcutils_get_zero_initialized_string_map+0x8>)
 800e95a:	2000      	movs	r0, #0
 800e95c:	6018      	str	r0, [r3, #0]
 800e95e:	4770      	bx	lr
 800e960:	20012460 	.word	0x20012460

0800e964 <rcutils_string_map_reserve>:
 800e964:	2800      	cmp	r0, #0
 800e966:	d05f      	beq.n	800ea28 <rcutils_string_map_reserve+0xc4>
 800e968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e96c:	460c      	mov	r4, r1
 800e96e:	6801      	ldr	r1, [r0, #0]
 800e970:	b082      	sub	sp, #8
 800e972:	4605      	mov	r5, r0
 800e974:	b129      	cbz	r1, 800e982 <rcutils_string_map_reserve+0x1e>
 800e976:	68cb      	ldr	r3, [r1, #12]
 800e978:	42a3      	cmp	r3, r4
 800e97a:	d906      	bls.n	800e98a <rcutils_string_map_reserve+0x26>
 800e97c:	461c      	mov	r4, r3
 800e97e:	2900      	cmp	r1, #0
 800e980:	d1f9      	bne.n	800e976 <rcutils_string_map_reserve+0x12>
 800e982:	201f      	movs	r0, #31
 800e984:	b002      	add	sp, #8
 800e986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e98a:	688b      	ldr	r3, [r1, #8]
 800e98c:	42a3      	cmp	r3, r4
 800e98e:	d047      	beq.n	800ea20 <rcutils_string_map_reserve+0xbc>
 800e990:	6a0e      	ldr	r6, [r1, #32]
 800e992:	2c00      	cmp	r4, #0
 800e994:	d034      	beq.n	800ea00 <rcutils_string_map_reserve+0x9c>
 800e996:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800e99a:	d243      	bcs.n	800ea24 <rcutils_string_map_reserve+0xc0>
 800e99c:	00a7      	lsls	r7, r4, #2
 800e99e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800e9a2:	6808      	ldr	r0, [r1, #0]
 800e9a4:	4632      	mov	r2, r6
 800e9a6:	4639      	mov	r1, r7
 800e9a8:	47c0      	blx	r8
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	d03a      	beq.n	800ea24 <rcutils_string_map_reserve+0xc0>
 800e9ae:	682b      	ldr	r3, [r5, #0]
 800e9b0:	4632      	mov	r2, r6
 800e9b2:	6018      	str	r0, [r3, #0]
 800e9b4:	4639      	mov	r1, r7
 800e9b6:	6858      	ldr	r0, [r3, #4]
 800e9b8:	47c0      	blx	r8
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	d032      	beq.n	800ea24 <rcutils_string_map_reserve+0xc0>
 800e9be:	682d      	ldr	r5, [r5, #0]
 800e9c0:	68ab      	ldr	r3, [r5, #8]
 800e9c2:	6068      	str	r0, [r5, #4]
 800e9c4:	42a3      	cmp	r3, r4
 800e9c6:	d226      	bcs.n	800ea16 <rcutils_string_map_reserve+0xb2>
 800e9c8:	682a      	ldr	r2, [r5, #0]
 800e9ca:	eb00 0c07 	add.w	ip, r0, r7
 800e9ce:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800e9d2:	45e6      	cmp	lr, ip
 800e9d4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800e9d8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800e9dc:	d203      	bcs.n	800e9e6 <rcutils_string_map_reserve+0x82>
 800e9de:	eb02 0c07 	add.w	ip, r2, r7
 800e9e2:	4566      	cmp	r6, ip
 800e9e4:	d322      	bcc.n	800ea2c <rcutils_string_map_reserve+0xc8>
 800e9e6:	1ae3      	subs	r3, r4, r3
 800e9e8:	009a      	lsls	r2, r3, #2
 800e9ea:	4670      	mov	r0, lr
 800e9ec:	2100      	movs	r1, #0
 800e9ee:	9201      	str	r2, [sp, #4]
 800e9f0:	f003 fd1e 	bl	8012430 <memset>
 800e9f4:	9a01      	ldr	r2, [sp, #4]
 800e9f6:	2100      	movs	r1, #0
 800e9f8:	4630      	mov	r0, r6
 800e9fa:	f003 fd19 	bl	8012430 <memset>
 800e9fe:	e00a      	b.n	800ea16 <rcutils_string_map_reserve+0xb2>
 800ea00:	694f      	ldr	r7, [r1, #20]
 800ea02:	6808      	ldr	r0, [r1, #0]
 800ea04:	4631      	mov	r1, r6
 800ea06:	47b8      	blx	r7
 800ea08:	682b      	ldr	r3, [r5, #0]
 800ea0a:	4631      	mov	r1, r6
 800ea0c:	6858      	ldr	r0, [r3, #4]
 800ea0e:	601c      	str	r4, [r3, #0]
 800ea10:	47b8      	blx	r7
 800ea12:	682d      	ldr	r5, [r5, #0]
 800ea14:	606c      	str	r4, [r5, #4]
 800ea16:	2000      	movs	r0, #0
 800ea18:	60ac      	str	r4, [r5, #8]
 800ea1a:	b002      	add	sp, #8
 800ea1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea20:	2000      	movs	r0, #0
 800ea22:	e7af      	b.n	800e984 <rcutils_string_map_reserve+0x20>
 800ea24:	200a      	movs	r0, #10
 800ea26:	e7ad      	b.n	800e984 <rcutils_string_map_reserve+0x20>
 800ea28:	200b      	movs	r0, #11
 800ea2a:	4770      	bx	lr
 800ea2c:	1f0b      	subs	r3, r1, #4
 800ea2e:	4418      	add	r0, r3
 800ea30:	4413      	add	r3, r2
 800ea32:	3a04      	subs	r2, #4
 800ea34:	4417      	add	r7, r2
 800ea36:	2200      	movs	r2, #0
 800ea38:	f843 2f04 	str.w	r2, [r3, #4]!
 800ea3c:	42bb      	cmp	r3, r7
 800ea3e:	f840 2f04 	str.w	r2, [r0, #4]!
 800ea42:	d1f9      	bne.n	800ea38 <rcutils_string_map_reserve+0xd4>
 800ea44:	e7e7      	b.n	800ea16 <rcutils_string_map_reserve+0xb2>
 800ea46:	bf00      	nop

0800ea48 <rcutils_string_map_init>:
 800ea48:	b082      	sub	sp, #8
 800ea4a:	b570      	push	{r4, r5, r6, lr}
 800ea4c:	ac04      	add	r4, sp, #16
 800ea4e:	e884 000c 	stmia.w	r4, {r2, r3}
 800ea52:	b380      	cbz	r0, 800eab6 <rcutils_string_map_init+0x6e>
 800ea54:	6806      	ldr	r6, [r0, #0]
 800ea56:	4604      	mov	r4, r0
 800ea58:	b12e      	cbz	r6, 800ea66 <rcutils_string_map_init+0x1e>
 800ea5a:	251e      	movs	r5, #30
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea62:	b002      	add	sp, #8
 800ea64:	4770      	bx	lr
 800ea66:	a804      	add	r0, sp, #16
 800ea68:	460d      	mov	r5, r1
 800ea6a:	f7fa fcd9 	bl	8009420 <rcutils_allocator_is_valid>
 800ea6e:	b310      	cbz	r0, 800eab6 <rcutils_string_map_init+0x6e>
 800ea70:	9b04      	ldr	r3, [sp, #16]
 800ea72:	9908      	ldr	r1, [sp, #32]
 800ea74:	2024      	movs	r0, #36	; 0x24
 800ea76:	4798      	blx	r3
 800ea78:	6020      	str	r0, [r4, #0]
 800ea7a:	b310      	cbz	r0, 800eac2 <rcutils_string_map_init+0x7a>
 800ea7c:	f10d 0e10 	add.w	lr, sp, #16
 800ea80:	e9c0 6600 	strd	r6, r6, [r0]
 800ea84:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800ea88:	f100 0c10 	add.w	ip, r0, #16
 800ea8c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ea90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ea94:	f8de 3000 	ldr.w	r3, [lr]
 800ea98:	f8cc 3000 	str.w	r3, [ip]
 800ea9c:	4629      	mov	r1, r5
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	f7ff ff60 	bl	800e964 <rcutils_string_map_reserve>
 800eaa4:	4605      	mov	r5, r0
 800eaa6:	2800      	cmp	r0, #0
 800eaa8:	d0d8      	beq.n	800ea5c <rcutils_string_map_init+0x14>
 800eaaa:	9b05      	ldr	r3, [sp, #20]
 800eaac:	9908      	ldr	r1, [sp, #32]
 800eaae:	6820      	ldr	r0, [r4, #0]
 800eab0:	4798      	blx	r3
 800eab2:	6026      	str	r6, [r4, #0]
 800eab4:	e7d2      	b.n	800ea5c <rcutils_string_map_init+0x14>
 800eab6:	250b      	movs	r5, #11
 800eab8:	4628      	mov	r0, r5
 800eaba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eabe:	b002      	add	sp, #8
 800eac0:	4770      	bx	lr
 800eac2:	250a      	movs	r5, #10
 800eac4:	e7ca      	b.n	800ea5c <rcutils_string_map_init+0x14>
 800eac6:	bf00      	nop

0800eac8 <rcutils_string_map_fini>:
 800eac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eacc:	b082      	sub	sp, #8
 800eace:	2800      	cmp	r0, #0
 800ead0:	d03a      	beq.n	800eb48 <rcutils_string_map_fini+0x80>
 800ead2:	6804      	ldr	r4, [r0, #0]
 800ead4:	4606      	mov	r6, r0
 800ead6:	2c00      	cmp	r4, #0
 800ead8:	d032      	beq.n	800eb40 <rcutils_string_map_fini+0x78>
 800eada:	68a3      	ldr	r3, [r4, #8]
 800eadc:	b32b      	cbz	r3, 800eb2a <rcutils_string_map_fini+0x62>
 800eade:	2500      	movs	r5, #0
 800eae0:	6822      	ldr	r2, [r4, #0]
 800eae2:	462f      	mov	r7, r5
 800eae4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800eae8:	b1e0      	cbz	r0, 800eb24 <rcutils_string_map_fini+0x5c>
 800eaea:	6a21      	ldr	r1, [r4, #32]
 800eaec:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800eaf0:	9101      	str	r1, [sp, #4]
 800eaf2:	47c0      	blx	r8
 800eaf4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800eaf8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800eafc:	9901      	ldr	r1, [sp, #4]
 800eafe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eb02:	47c0      	blx	r8
 800eb04:	68e3      	ldr	r3, [r4, #12]
 800eb06:	6862      	ldr	r2, [r4, #4]
 800eb08:	3b01      	subs	r3, #1
 800eb0a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800eb0e:	60e3      	str	r3, [r4, #12]
 800eb10:	6834      	ldr	r4, [r6, #0]
 800eb12:	68a3      	ldr	r3, [r4, #8]
 800eb14:	3501      	adds	r5, #1
 800eb16:	429d      	cmp	r5, r3
 800eb18:	d207      	bcs.n	800eb2a <rcutils_string_map_fini+0x62>
 800eb1a:	6822      	ldr	r2, [r4, #0]
 800eb1c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800eb20:	2800      	cmp	r0, #0
 800eb22:	d1e2      	bne.n	800eaea <rcutils_string_map_fini+0x22>
 800eb24:	3501      	adds	r5, #1
 800eb26:	429d      	cmp	r5, r3
 800eb28:	d3dc      	bcc.n	800eae4 <rcutils_string_map_fini+0x1c>
 800eb2a:	2100      	movs	r1, #0
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	f7ff ff19 	bl	800e964 <rcutils_string_map_reserve>
 800eb32:	4604      	mov	r4, r0
 800eb34:	b920      	cbnz	r0, 800eb40 <rcutils_string_map_fini+0x78>
 800eb36:	6830      	ldr	r0, [r6, #0]
 800eb38:	6943      	ldr	r3, [r0, #20]
 800eb3a:	6a01      	ldr	r1, [r0, #32]
 800eb3c:	4798      	blx	r3
 800eb3e:	6034      	str	r4, [r6, #0]
 800eb40:	4620      	mov	r0, r4
 800eb42:	b002      	add	sp, #8
 800eb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb48:	240b      	movs	r4, #11
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	b002      	add	sp, #8
 800eb4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb52:	bf00      	nop

0800eb54 <rcutils_string_map_getn>:
 800eb54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb58:	b300      	cbz	r0, 800eb9c <rcutils_string_map_getn+0x48>
 800eb5a:	6807      	ldr	r7, [r0, #0]
 800eb5c:	b1ff      	cbz	r7, 800eb9e <rcutils_string_map_getn+0x4a>
 800eb5e:	4688      	mov	r8, r1
 800eb60:	b1e1      	cbz	r1, 800eb9c <rcutils_string_map_getn+0x48>
 800eb62:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800eb66:	683e      	ldr	r6, [r7, #0]
 800eb68:	f1ba 0f00 	cmp.w	sl, #0
 800eb6c:	d016      	beq.n	800eb9c <rcutils_string_map_getn+0x48>
 800eb6e:	4691      	mov	r9, r2
 800eb70:	3e04      	subs	r6, #4
 800eb72:	2400      	movs	r4, #0
 800eb74:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800eb78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	3401      	adds	r4, #1
 800eb80:	b155      	cbz	r5, 800eb98 <rcutils_string_map_getn+0x44>
 800eb82:	f7f1 fb37 	bl	80001f4 <strlen>
 800eb86:	4548      	cmp	r0, r9
 800eb88:	4602      	mov	r2, r0
 800eb8a:	4629      	mov	r1, r5
 800eb8c:	bf38      	it	cc
 800eb8e:	464a      	movcc	r2, r9
 800eb90:	4640      	mov	r0, r8
 800eb92:	f003 fc62 	bl	801245a <strncmp>
 800eb96:	b128      	cbz	r0, 800eba4 <rcutils_string_map_getn+0x50>
 800eb98:	45a2      	cmp	sl, r4
 800eb9a:	d1eb      	bne.n	800eb74 <rcutils_string_map_getn+0x20>
 800eb9c:	2700      	movs	r7, #0
 800eb9e:	4638      	mov	r0, r7
 800eba0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f853 700b 	ldr.w	r7, [r3, fp]
 800ebaa:	4638      	mov	r0, r7
 800ebac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ebb0 <rcutils_system_time_now>:
 800ebb0:	b308      	cbz	r0, 800ebf6 <rcutils_system_time_now+0x46>
 800ebb2:	b570      	push	{r4, r5, r6, lr}
 800ebb4:	b084      	sub	sp, #16
 800ebb6:	4604      	mov	r4, r0
 800ebb8:	4669      	mov	r1, sp
 800ebba:	2001      	movs	r0, #1
 800ebbc:	f7f3 f9e4 	bl	8001f88 <clock_gettime>
 800ebc0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800ebc4:	2d00      	cmp	r5, #0
 800ebc6:	db13      	blt.n	800ebf0 <rcutils_system_time_now+0x40>
 800ebc8:	9902      	ldr	r1, [sp, #8]
 800ebca:	2900      	cmp	r1, #0
 800ebcc:	db0d      	blt.n	800ebea <rcutils_system_time_now+0x3a>
 800ebce:	4e0b      	ldr	r6, [pc, #44]	; (800ebfc <rcutils_system_time_now+0x4c>)
 800ebd0:	fba3 3206 	umull	r3, r2, r3, r6
 800ebd4:	185b      	adds	r3, r3, r1
 800ebd6:	fb06 2205 	mla	r2, r6, r5, r2
 800ebda:	f04f 0000 	mov.w	r0, #0
 800ebde:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800ebe2:	e9c4 3200 	strd	r3, r2, [r4]
 800ebe6:	b004      	add	sp, #16
 800ebe8:	bd70      	pop	{r4, r5, r6, pc}
 800ebea:	ea53 0205 	orrs.w	r2, r3, r5
 800ebee:	d1ee      	bne.n	800ebce <rcutils_system_time_now+0x1e>
 800ebf0:	2002      	movs	r0, #2
 800ebf2:	b004      	add	sp, #16
 800ebf4:	bd70      	pop	{r4, r5, r6, pc}
 800ebf6:	200b      	movs	r0, #11
 800ebf8:	4770      	bx	lr
 800ebfa:	bf00      	nop
 800ebfc:	3b9aca00 	.word	0x3b9aca00

0800ec00 <rcutils_steady_time_now>:
 800ec00:	b308      	cbz	r0, 800ec46 <rcutils_steady_time_now+0x46>
 800ec02:	b570      	push	{r4, r5, r6, lr}
 800ec04:	b084      	sub	sp, #16
 800ec06:	4604      	mov	r4, r0
 800ec08:	4669      	mov	r1, sp
 800ec0a:	2000      	movs	r0, #0
 800ec0c:	f7f3 f9bc 	bl	8001f88 <clock_gettime>
 800ec10:	e9dd 3500 	ldrd	r3, r5, [sp]
 800ec14:	2d00      	cmp	r5, #0
 800ec16:	db13      	blt.n	800ec40 <rcutils_steady_time_now+0x40>
 800ec18:	9902      	ldr	r1, [sp, #8]
 800ec1a:	2900      	cmp	r1, #0
 800ec1c:	db0d      	blt.n	800ec3a <rcutils_steady_time_now+0x3a>
 800ec1e:	4e0b      	ldr	r6, [pc, #44]	; (800ec4c <rcutils_steady_time_now+0x4c>)
 800ec20:	fba3 3206 	umull	r3, r2, r3, r6
 800ec24:	185b      	adds	r3, r3, r1
 800ec26:	fb06 2205 	mla	r2, r6, r5, r2
 800ec2a:	f04f 0000 	mov.w	r0, #0
 800ec2e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800ec32:	e9c4 3200 	strd	r3, r2, [r4]
 800ec36:	b004      	add	sp, #16
 800ec38:	bd70      	pop	{r4, r5, r6, pc}
 800ec3a:	ea53 0205 	orrs.w	r2, r3, r5
 800ec3e:	d1ee      	bne.n	800ec1e <rcutils_steady_time_now+0x1e>
 800ec40:	2002      	movs	r0, #2
 800ec42:	b004      	add	sp, #16
 800ec44:	bd70      	pop	{r4, r5, r6, pc}
 800ec46:	200b      	movs	r0, #11
 800ec48:	4770      	bx	lr
 800ec4a:	bf00      	nop
 800ec4c:	3b9aca00 	.word	0x3b9aca00

0800ec50 <rmw_get_zero_initialized_context>:
 800ec50:	b510      	push	{r4, lr}
 800ec52:	4604      	mov	r4, r0
 800ec54:	3010      	adds	r0, #16
 800ec56:	f000 f80b 	bl	800ec70 <rmw_get_zero_initialized_init_options>
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	2000      	movs	r0, #0
 800ec5e:	2100      	movs	r1, #0
 800ec60:	e9c4 0100 	strd	r0, r1, [r4]
 800ec64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ec68:	60a3      	str	r3, [r4, #8]
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	bd10      	pop	{r4, pc}
 800ec6e:	bf00      	nop

0800ec70 <rmw_get_zero_initialized_init_options>:
 800ec70:	b510      	push	{r4, lr}
 800ec72:	2238      	movs	r2, #56	; 0x38
 800ec74:	4604      	mov	r4, r0
 800ec76:	2100      	movs	r1, #0
 800ec78:	f003 fbda 	bl	8012430 <memset>
 800ec7c:	f104 0010 	add.w	r0, r4, #16
 800ec80:	f000 f806 	bl	800ec90 <rmw_get_default_security_options>
 800ec84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec88:	60e3      	str	r3, [r4, #12]
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	bd10      	pop	{r4, pc}
 800ec8e:	bf00      	nop

0800ec90 <rmw_get_default_security_options>:
 800ec90:	2200      	movs	r2, #0
 800ec92:	7002      	strb	r2, [r0, #0]
 800ec94:	6042      	str	r2, [r0, #4]
 800ec96:	4770      	bx	lr

0800ec98 <rmw_validate_full_topic_name>:
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	d057      	beq.n	800ed4c <rmw_validate_full_topic_name+0xb4>
 800ec9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eca0:	460d      	mov	r5, r1
 800eca2:	2900      	cmp	r1, #0
 800eca4:	d054      	beq.n	800ed50 <rmw_validate_full_topic_name+0xb8>
 800eca6:	4616      	mov	r6, r2
 800eca8:	4604      	mov	r4, r0
 800ecaa:	f7f1 faa3 	bl	80001f4 <strlen>
 800ecae:	b148      	cbz	r0, 800ecc4 <rmw_validate_full_topic_name+0x2c>
 800ecb0:	7823      	ldrb	r3, [r4, #0]
 800ecb2:	2b2f      	cmp	r3, #47	; 0x2f
 800ecb4:	d00d      	beq.n	800ecd2 <rmw_validate_full_topic_name+0x3a>
 800ecb6:	2302      	movs	r3, #2
 800ecb8:	602b      	str	r3, [r5, #0]
 800ecba:	b13e      	cbz	r6, 800eccc <rmw_validate_full_topic_name+0x34>
 800ecbc:	2000      	movs	r0, #0
 800ecbe:	6030      	str	r0, [r6, #0]
 800ecc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	602b      	str	r3, [r5, #0]
 800ecc8:	2e00      	cmp	r6, #0
 800ecca:	d1f7      	bne.n	800ecbc <rmw_validate_full_topic_name+0x24>
 800eccc:	2000      	movs	r0, #0
 800ecce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecd2:	1e43      	subs	r3, r0, #1
 800ecd4:	5ce2      	ldrb	r2, [r4, r3]
 800ecd6:	2a2f      	cmp	r2, #47	; 0x2f
 800ecd8:	d03c      	beq.n	800ed54 <rmw_validate_full_topic_name+0xbc>
 800ecda:	1e63      	subs	r3, r4, #1
 800ecdc:	eb03 0800 	add.w	r8, r3, r0
 800ece0:	f1c4 0e01 	rsb	lr, r4, #1
 800ece4:	eb0e 0703 	add.w	r7, lr, r3
 800ece8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800ecec:	f021 0220 	bic.w	r2, r1, #32
 800ecf0:	3a41      	subs	r2, #65	; 0x41
 800ecf2:	2a19      	cmp	r2, #25
 800ecf4:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800ecf8:	d90b      	bls.n	800ed12 <rmw_validate_full_topic_name+0x7a>
 800ecfa:	295f      	cmp	r1, #95	; 0x5f
 800ecfc:	d009      	beq.n	800ed12 <rmw_validate_full_topic_name+0x7a>
 800ecfe:	f1bc 0f0a 	cmp.w	ip, #10
 800ed02:	d906      	bls.n	800ed12 <rmw_validate_full_topic_name+0x7a>
 800ed04:	2304      	movs	r3, #4
 800ed06:	602b      	str	r3, [r5, #0]
 800ed08:	2e00      	cmp	r6, #0
 800ed0a:	d0df      	beq.n	800eccc <rmw_validate_full_topic_name+0x34>
 800ed0c:	6037      	str	r7, [r6, #0]
 800ed0e:	2000      	movs	r0, #0
 800ed10:	e7d6      	b.n	800ecc0 <rmw_validate_full_topic_name+0x28>
 800ed12:	4543      	cmp	r3, r8
 800ed14:	d1e6      	bne.n	800ece4 <rmw_validate_full_topic_name+0x4c>
 800ed16:	4f1a      	ldr	r7, [pc, #104]	; (800ed80 <rmw_validate_full_topic_name+0xe8>)
 800ed18:	2301      	movs	r3, #1
 800ed1a:	e004      	b.n	800ed26 <rmw_validate_full_topic_name+0x8e>
 800ed1c:	4298      	cmp	r0, r3
 800ed1e:	f104 0401 	add.w	r4, r4, #1
 800ed22:	d91c      	bls.n	800ed5e <rmw_validate_full_topic_name+0xc6>
 800ed24:	4613      	mov	r3, r2
 800ed26:	4298      	cmp	r0, r3
 800ed28:	f103 0201 	add.w	r2, r3, #1
 800ed2c:	d0f6      	beq.n	800ed1c <rmw_validate_full_topic_name+0x84>
 800ed2e:	7821      	ldrb	r1, [r4, #0]
 800ed30:	292f      	cmp	r1, #47	; 0x2f
 800ed32:	d1f3      	bne.n	800ed1c <rmw_validate_full_topic_name+0x84>
 800ed34:	7861      	ldrb	r1, [r4, #1]
 800ed36:	292f      	cmp	r1, #47	; 0x2f
 800ed38:	d01c      	beq.n	800ed74 <rmw_validate_full_topic_name+0xdc>
 800ed3a:	5dc9      	ldrb	r1, [r1, r7]
 800ed3c:	0749      	lsls	r1, r1, #29
 800ed3e:	d5ed      	bpl.n	800ed1c <rmw_validate_full_topic_name+0x84>
 800ed40:	2206      	movs	r2, #6
 800ed42:	602a      	str	r2, [r5, #0]
 800ed44:	2e00      	cmp	r6, #0
 800ed46:	d0c1      	beq.n	800eccc <rmw_validate_full_topic_name+0x34>
 800ed48:	6033      	str	r3, [r6, #0]
 800ed4a:	e7bf      	b.n	800eccc <rmw_validate_full_topic_name+0x34>
 800ed4c:	200b      	movs	r0, #11
 800ed4e:	4770      	bx	lr
 800ed50:	200b      	movs	r0, #11
 800ed52:	e7b5      	b.n	800ecc0 <rmw_validate_full_topic_name+0x28>
 800ed54:	2203      	movs	r2, #3
 800ed56:	602a      	str	r2, [r5, #0]
 800ed58:	2e00      	cmp	r6, #0
 800ed5a:	d1f5      	bne.n	800ed48 <rmw_validate_full_topic_name+0xb0>
 800ed5c:	e7b6      	b.n	800eccc <rmw_validate_full_topic_name+0x34>
 800ed5e:	28f7      	cmp	r0, #247	; 0xf7
 800ed60:	d802      	bhi.n	800ed68 <rmw_validate_full_topic_name+0xd0>
 800ed62:	2000      	movs	r0, #0
 800ed64:	6028      	str	r0, [r5, #0]
 800ed66:	e7ab      	b.n	800ecc0 <rmw_validate_full_topic_name+0x28>
 800ed68:	2307      	movs	r3, #7
 800ed6a:	602b      	str	r3, [r5, #0]
 800ed6c:	2e00      	cmp	r6, #0
 800ed6e:	d0ad      	beq.n	800eccc <rmw_validate_full_topic_name+0x34>
 800ed70:	23f6      	movs	r3, #246	; 0xf6
 800ed72:	e7e9      	b.n	800ed48 <rmw_validate_full_topic_name+0xb0>
 800ed74:	2205      	movs	r2, #5
 800ed76:	602a      	str	r2, [r5, #0]
 800ed78:	2e00      	cmp	r6, #0
 800ed7a:	d1e5      	bne.n	800ed48 <rmw_validate_full_topic_name+0xb0>
 800ed7c:	e7a6      	b.n	800eccc <rmw_validate_full_topic_name+0x34>
 800ed7e:	bf00      	nop
 800ed80:	08013ef4 	.word	0x08013ef4

0800ed84 <rmw_validate_namespace_with_size>:
 800ed84:	b340      	cbz	r0, 800edd8 <rmw_validate_namespace_with_size+0x54>
 800ed86:	b570      	push	{r4, r5, r6, lr}
 800ed88:	4614      	mov	r4, r2
 800ed8a:	b0c2      	sub	sp, #264	; 0x108
 800ed8c:	b332      	cbz	r2, 800eddc <rmw_validate_namespace_with_size+0x58>
 800ed8e:	2901      	cmp	r1, #1
 800ed90:	460d      	mov	r5, r1
 800ed92:	461e      	mov	r6, r3
 800ed94:	d102      	bne.n	800ed9c <rmw_validate_namespace_with_size+0x18>
 800ed96:	7803      	ldrb	r3, [r0, #0]
 800ed98:	2b2f      	cmp	r3, #47	; 0x2f
 800ed9a:	d012      	beq.n	800edc2 <rmw_validate_namespace_with_size+0x3e>
 800ed9c:	aa01      	add	r2, sp, #4
 800ed9e:	4669      	mov	r1, sp
 800eda0:	f7ff ff7a 	bl	800ec98 <rmw_validate_full_topic_name>
 800eda4:	b978      	cbnz	r0, 800edc6 <rmw_validate_namespace_with_size+0x42>
 800eda6:	9b00      	ldr	r3, [sp, #0]
 800eda8:	b14b      	cbz	r3, 800edbe <rmw_validate_namespace_with_size+0x3a>
 800edaa:	2b07      	cmp	r3, #7
 800edac:	d007      	beq.n	800edbe <rmw_validate_namespace_with_size+0x3a>
 800edae:	1e5a      	subs	r2, r3, #1
 800edb0:	2a05      	cmp	r2, #5
 800edb2:	d82b      	bhi.n	800ee0c <rmw_validate_namespace_with_size+0x88>
 800edb4:	e8df f002 	tbb	[pc, r2]
 800edb8:	1e212427 	.word	0x1e212427
 800edbc:	141b      	.short	0x141b
 800edbe:	2df5      	cmp	r5, #245	; 0xf5
 800edc0:	d803      	bhi.n	800edca <rmw_validate_namespace_with_size+0x46>
 800edc2:	2000      	movs	r0, #0
 800edc4:	6020      	str	r0, [r4, #0]
 800edc6:	b042      	add	sp, #264	; 0x108
 800edc8:	bd70      	pop	{r4, r5, r6, pc}
 800edca:	2307      	movs	r3, #7
 800edcc:	6023      	str	r3, [r4, #0]
 800edce:	2e00      	cmp	r6, #0
 800edd0:	d0f9      	beq.n	800edc6 <rmw_validate_namespace_with_size+0x42>
 800edd2:	23f4      	movs	r3, #244	; 0xf4
 800edd4:	6033      	str	r3, [r6, #0]
 800edd6:	e7f6      	b.n	800edc6 <rmw_validate_namespace_with_size+0x42>
 800edd8:	200b      	movs	r0, #11
 800edda:	4770      	bx	lr
 800eddc:	200b      	movs	r0, #11
 800edde:	e7f2      	b.n	800edc6 <rmw_validate_namespace_with_size+0x42>
 800ede0:	2306      	movs	r3, #6
 800ede2:	6023      	str	r3, [r4, #0]
 800ede4:	2e00      	cmp	r6, #0
 800ede6:	d0ee      	beq.n	800edc6 <rmw_validate_namespace_with_size+0x42>
 800ede8:	9b01      	ldr	r3, [sp, #4]
 800edea:	6033      	str	r3, [r6, #0]
 800edec:	e7eb      	b.n	800edc6 <rmw_validate_namespace_with_size+0x42>
 800edee:	2305      	movs	r3, #5
 800edf0:	6023      	str	r3, [r4, #0]
 800edf2:	e7f7      	b.n	800ede4 <rmw_validate_namespace_with_size+0x60>
 800edf4:	2304      	movs	r3, #4
 800edf6:	6023      	str	r3, [r4, #0]
 800edf8:	e7f4      	b.n	800ede4 <rmw_validate_namespace_with_size+0x60>
 800edfa:	2303      	movs	r3, #3
 800edfc:	6023      	str	r3, [r4, #0]
 800edfe:	e7f1      	b.n	800ede4 <rmw_validate_namespace_with_size+0x60>
 800ee00:	2302      	movs	r3, #2
 800ee02:	6023      	str	r3, [r4, #0]
 800ee04:	e7ee      	b.n	800ede4 <rmw_validate_namespace_with_size+0x60>
 800ee06:	2301      	movs	r3, #1
 800ee08:	6023      	str	r3, [r4, #0]
 800ee0a:	e7eb      	b.n	800ede4 <rmw_validate_namespace_with_size+0x60>
 800ee0c:	4a03      	ldr	r2, [pc, #12]	; (800ee1c <rmw_validate_namespace_with_size+0x98>)
 800ee0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ee12:	a802      	add	r0, sp, #8
 800ee14:	f7ff fd36 	bl	800e884 <rcutils_snprintf>
 800ee18:	2001      	movs	r0, #1
 800ee1a:	e7d4      	b.n	800edc6 <rmw_validate_namespace_with_size+0x42>
 800ee1c:	080138fc 	.word	0x080138fc

0800ee20 <rmw_validate_namespace>:
 800ee20:	b168      	cbz	r0, 800ee3e <rmw_validate_namespace+0x1e>
 800ee22:	b570      	push	{r4, r5, r6, lr}
 800ee24:	460d      	mov	r5, r1
 800ee26:	4616      	mov	r6, r2
 800ee28:	4604      	mov	r4, r0
 800ee2a:	f7f1 f9e3 	bl	80001f4 <strlen>
 800ee2e:	4633      	mov	r3, r6
 800ee30:	4601      	mov	r1, r0
 800ee32:	462a      	mov	r2, r5
 800ee34:	4620      	mov	r0, r4
 800ee36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee3a:	f7ff bfa3 	b.w	800ed84 <rmw_validate_namespace_with_size>
 800ee3e:	200b      	movs	r0, #11
 800ee40:	4770      	bx	lr
 800ee42:	bf00      	nop

0800ee44 <rmw_namespace_validation_result_string>:
 800ee44:	2807      	cmp	r0, #7
 800ee46:	bf9a      	itte	ls
 800ee48:	4b02      	ldrls	r3, [pc, #8]	; (800ee54 <rmw_namespace_validation_result_string+0x10>)
 800ee4a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800ee4e:	4802      	ldrhi	r0, [pc, #8]	; (800ee58 <rmw_namespace_validation_result_string+0x14>)
 800ee50:	4770      	bx	lr
 800ee52:	bf00      	nop
 800ee54:	08013af4 	.word	0x08013af4
 800ee58:	0801394c 	.word	0x0801394c

0800ee5c <rmw_validate_node_name>:
 800ee5c:	2800      	cmp	r0, #0
 800ee5e:	d03b      	beq.n	800eed8 <rmw_validate_node_name+0x7c>
 800ee60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee64:	460d      	mov	r5, r1
 800ee66:	2900      	cmp	r1, #0
 800ee68:	d038      	beq.n	800eedc <rmw_validate_node_name+0x80>
 800ee6a:	4616      	mov	r6, r2
 800ee6c:	4604      	mov	r4, r0
 800ee6e:	f7f1 f9c1 	bl	80001f4 <strlen>
 800ee72:	b1e0      	cbz	r0, 800eeae <rmw_validate_node_name+0x52>
 800ee74:	1e63      	subs	r3, r4, #1
 800ee76:	eb03 0800 	add.w	r8, r3, r0
 800ee7a:	f1c4 0101 	rsb	r1, r4, #1
 800ee7e:	18cf      	adds	r7, r1, r3
 800ee80:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800ee84:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 800ee88:	f02e 0c20 	bic.w	ip, lr, #32
 800ee8c:	2a09      	cmp	r2, #9
 800ee8e:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 800ee92:	d914      	bls.n	800eebe <rmw_validate_node_name+0x62>
 800ee94:	f1bc 0f19 	cmp.w	ip, #25
 800ee98:	d911      	bls.n	800eebe <rmw_validate_node_name+0x62>
 800ee9a:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800ee9e:	d00e      	beq.n	800eebe <rmw_validate_node_name+0x62>
 800eea0:	2302      	movs	r3, #2
 800eea2:	602b      	str	r3, [r5, #0]
 800eea4:	b106      	cbz	r6, 800eea8 <rmw_validate_node_name+0x4c>
 800eea6:	6037      	str	r7, [r6, #0]
 800eea8:	2000      	movs	r0, #0
 800eeaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeae:	2301      	movs	r3, #1
 800eeb0:	602b      	str	r3, [r5, #0]
 800eeb2:	2e00      	cmp	r6, #0
 800eeb4:	d0f8      	beq.n	800eea8 <rmw_validate_node_name+0x4c>
 800eeb6:	2000      	movs	r0, #0
 800eeb8:	6030      	str	r0, [r6, #0]
 800eeba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eebe:	4543      	cmp	r3, r8
 800eec0:	d1dd      	bne.n	800ee7e <rmw_validate_node_name+0x22>
 800eec2:	7822      	ldrb	r2, [r4, #0]
 800eec4:	4b0d      	ldr	r3, [pc, #52]	; (800eefc <rmw_validate_node_name+0xa0>)
 800eec6:	5cd3      	ldrb	r3, [r2, r3]
 800eec8:	f013 0304 	ands.w	r3, r3, #4
 800eecc:	d110      	bne.n	800eef0 <rmw_validate_node_name+0x94>
 800eece:	28ff      	cmp	r0, #255	; 0xff
 800eed0:	d806      	bhi.n	800eee0 <rmw_validate_node_name+0x84>
 800eed2:	602b      	str	r3, [r5, #0]
 800eed4:	4618      	mov	r0, r3
 800eed6:	e7e8      	b.n	800eeaa <rmw_validate_node_name+0x4e>
 800eed8:	200b      	movs	r0, #11
 800eeda:	4770      	bx	lr
 800eedc:	200b      	movs	r0, #11
 800eede:	e7e4      	b.n	800eeaa <rmw_validate_node_name+0x4e>
 800eee0:	2204      	movs	r2, #4
 800eee2:	602a      	str	r2, [r5, #0]
 800eee4:	2e00      	cmp	r6, #0
 800eee6:	d0df      	beq.n	800eea8 <rmw_validate_node_name+0x4c>
 800eee8:	22fe      	movs	r2, #254	; 0xfe
 800eeea:	6032      	str	r2, [r6, #0]
 800eeec:	4618      	mov	r0, r3
 800eeee:	e7dc      	b.n	800eeaa <rmw_validate_node_name+0x4e>
 800eef0:	2303      	movs	r3, #3
 800eef2:	602b      	str	r3, [r5, #0]
 800eef4:	2e00      	cmp	r6, #0
 800eef6:	d1de      	bne.n	800eeb6 <rmw_validate_node_name+0x5a>
 800eef8:	e7d6      	b.n	800eea8 <rmw_validate_node_name+0x4c>
 800eefa:	bf00      	nop
 800eefc:	08013ef4 	.word	0x08013ef4

0800ef00 <rmw_node_name_validation_result_string>:
 800ef00:	2804      	cmp	r0, #4
 800ef02:	bf9a      	itte	ls
 800ef04:	4b02      	ldrls	r3, [pc, #8]	; (800ef10 <rmw_node_name_validation_result_string+0x10>)
 800ef06:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800ef0a:	4802      	ldrhi	r0, [pc, #8]	; (800ef14 <rmw_node_name_validation_result_string+0x14>)
 800ef0c:	4770      	bx	lr
 800ef0e:	bf00      	nop
 800ef10:	08013c00 	.word	0x08013c00
 800ef14:	08013b14 	.word	0x08013b14

0800ef18 <get_memory>:
 800ef18:	4603      	mov	r3, r0
 800ef1a:	6840      	ldr	r0, [r0, #4]
 800ef1c:	b158      	cbz	r0, 800ef36 <get_memory+0x1e>
 800ef1e:	6842      	ldr	r2, [r0, #4]
 800ef20:	605a      	str	r2, [r3, #4]
 800ef22:	b10a      	cbz	r2, 800ef28 <get_memory+0x10>
 800ef24:	2100      	movs	r1, #0
 800ef26:	6011      	str	r1, [r2, #0]
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	6042      	str	r2, [r0, #4]
 800ef2c:	b102      	cbz	r2, 800ef30 <get_memory+0x18>
 800ef2e:	6010      	str	r0, [r2, #0]
 800ef30:	2200      	movs	r2, #0
 800ef32:	6002      	str	r2, [r0, #0]
 800ef34:	6018      	str	r0, [r3, #0]
 800ef36:	4770      	bx	lr

0800ef38 <put_memory>:
 800ef38:	680b      	ldr	r3, [r1, #0]
 800ef3a:	b10b      	cbz	r3, 800ef40 <put_memory+0x8>
 800ef3c:	684a      	ldr	r2, [r1, #4]
 800ef3e:	605a      	str	r2, [r3, #4]
 800ef40:	684a      	ldr	r2, [r1, #4]
 800ef42:	b102      	cbz	r2, 800ef46 <put_memory+0xe>
 800ef44:	6013      	str	r3, [r2, #0]
 800ef46:	6803      	ldr	r3, [r0, #0]
 800ef48:	428b      	cmp	r3, r1
 800ef4a:	6843      	ldr	r3, [r0, #4]
 800ef4c:	bf08      	it	eq
 800ef4e:	6002      	streq	r2, [r0, #0]
 800ef50:	604b      	str	r3, [r1, #4]
 800ef52:	b103      	cbz	r3, 800ef56 <put_memory+0x1e>
 800ef54:	6019      	str	r1, [r3, #0]
 800ef56:	2300      	movs	r3, #0
 800ef58:	600b      	str	r3, [r1, #0]
 800ef5a:	6041      	str	r1, [r0, #4]
 800ef5c:	4770      	bx	lr
 800ef5e:	bf00      	nop

0800ef60 <rmw_get_implementation_identifier>:
 800ef60:	4b01      	ldr	r3, [pc, #4]	; (800ef68 <rmw_get_implementation_identifier+0x8>)
 800ef62:	6818      	ldr	r0, [r3, #0]
 800ef64:	4770      	bx	lr
 800ef66:	bf00      	nop
 800ef68:	08013c2c 	.word	0x08013c2c

0800ef6c <rmw_init_options_init>:
 800ef6c:	b084      	sub	sp, #16
 800ef6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef70:	b083      	sub	sp, #12
 800ef72:	ad09      	add	r5, sp, #36	; 0x24
 800ef74:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800ef78:	b130      	cbz	r0, 800ef88 <rmw_init_options_init+0x1c>
 800ef7a:	4604      	mov	r4, r0
 800ef7c:	4628      	mov	r0, r5
 800ef7e:	f7fa fa4f 	bl	8009420 <rcutils_allocator_is_valid>
 800ef82:	b108      	cbz	r0, 800ef88 <rmw_init_options_init+0x1c>
 800ef84:	68a6      	ldr	r6, [r4, #8]
 800ef86:	b12e      	cbz	r6, 800ef94 <rmw_init_options_init+0x28>
 800ef88:	200b      	movs	r0, #11
 800ef8a:	b003      	add	sp, #12
 800ef8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ef90:	b004      	add	sp, #16
 800ef92:	4770      	bx	lr
 800ef94:	2200      	movs	r2, #0
 800ef96:	2300      	movs	r3, #0
 800ef98:	e9c4 2300 	strd	r2, r3, [r4]
 800ef9c:	4b22      	ldr	r3, [pc, #136]	; (800f028 <rmw_init_options_init+0xbc>)
 800ef9e:	f8df e098 	ldr.w	lr, [pc, #152]	; 800f038 <rmw_init_options_init+0xcc>
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	60a3      	str	r3, [r4, #8]
 800efa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800efa8:	f104 0c20 	add.w	ip, r4, #32
 800efac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800efb0:	466f      	mov	r7, sp
 800efb2:	682b      	ldr	r3, [r5, #0]
 800efb4:	f8cc 3000 	str.w	r3, [ip]
 800efb8:	4638      	mov	r0, r7
 800efba:	f8c4 e01c 	str.w	lr, [r4, #28]
 800efbe:	60e6      	str	r6, [r4, #12]
 800efc0:	f7ff fe66 	bl	800ec90 <rmw_get_default_security_options>
 800efc4:	e897 0003 	ldmia.w	r7, {r0, r1}
 800efc8:	f104 0310 	add.w	r3, r4, #16
 800efcc:	e883 0003 	stmia.w	r3, {r0, r1}
 800efd0:	2203      	movs	r2, #3
 800efd2:	4816      	ldr	r0, [pc, #88]	; (800f02c <rmw_init_options_init+0xc0>)
 800efd4:	4916      	ldr	r1, [pc, #88]	; (800f030 <rmw_init_options_init+0xc4>)
 800efd6:	7626      	strb	r6, [r4, #24]
 800efd8:	f7fa fd20 	bl	8009a1c <rmw_uxrce_init_init_options_impl_memory>
 800efdc:	4813      	ldr	r0, [pc, #76]	; (800f02c <rmw_init_options_init+0xc0>)
 800efde:	f7ff ff9b 	bl	800ef18 <get_memory>
 800efe2:	b1f0      	cbz	r0, 800f022 <rmw_init_options_init+0xb6>
 800efe4:	4a13      	ldr	r2, [pc, #76]	; (800f034 <rmw_init_options_init+0xc8>)
 800efe6:	6883      	ldr	r3, [r0, #8]
 800efe8:	6851      	ldr	r1, [r2, #4]
 800efea:	7810      	ldrb	r0, [r2, #0]
 800efec:	6363      	str	r3, [r4, #52]	; 0x34
 800efee:	7418      	strb	r0, [r3, #16]
 800eff0:	6159      	str	r1, [r3, #20]
 800eff2:	68d1      	ldr	r1, [r2, #12]
 800eff4:	61d9      	str	r1, [r3, #28]
 800eff6:	6911      	ldr	r1, [r2, #16]
 800eff8:	6219      	str	r1, [r3, #32]
 800effa:	6951      	ldr	r1, [r2, #20]
 800effc:	6892      	ldr	r2, [r2, #8]
 800effe:	619a      	str	r2, [r3, #24]
 800f000:	6259      	str	r1, [r3, #36]	; 0x24
 800f002:	f7fd faf3 	bl	800c5ec <uxr_nanos>
 800f006:	f002 ff6f 	bl	8011ee8 <srand>
 800f00a:	f002 ff9b 	bl	8011f44 <rand>
 800f00e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f010:	6298      	str	r0, [r3, #40]	; 0x28
 800f012:	2800      	cmp	r0, #0
 800f014:	d0f9      	beq.n	800f00a <rmw_init_options_init+0x9e>
 800f016:	2000      	movs	r0, #0
 800f018:	b003      	add	sp, #12
 800f01a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f01e:	b004      	add	sp, #16
 800f020:	4770      	bx	lr
 800f022:	2001      	movs	r0, #1
 800f024:	e7b1      	b.n	800ef8a <rmw_init_options_init+0x1e>
 800f026:	bf00      	nop
 800f028:	08013c2c 	.word	0x08013c2c
 800f02c:	200123b4 	.word	0x200123b4
 800f030:	2000dc50 	.word	0x2000dc50
 800f034:	2000dadc 	.word	0x2000dadc
 800f038:	080137cc 	.word	0x080137cc

0800f03c <rmw_init_options_copy>:
 800f03c:	b570      	push	{r4, r5, r6, lr}
 800f03e:	b158      	cbz	r0, 800f058 <rmw_init_options_copy+0x1c>
 800f040:	460d      	mov	r5, r1
 800f042:	b149      	cbz	r1, 800f058 <rmw_init_options_copy+0x1c>
 800f044:	4604      	mov	r4, r0
 800f046:	6880      	ldr	r0, [r0, #8]
 800f048:	b120      	cbz	r0, 800f054 <rmw_init_options_copy+0x18>
 800f04a:	4b1e      	ldr	r3, [pc, #120]	; (800f0c4 <rmw_init_options_copy+0x88>)
 800f04c:	6819      	ldr	r1, [r3, #0]
 800f04e:	f7f1 f8c7 	bl	80001e0 <strcmp>
 800f052:	bb90      	cbnz	r0, 800f0ba <rmw_init_options_copy+0x7e>
 800f054:	68ab      	ldr	r3, [r5, #8]
 800f056:	b113      	cbz	r3, 800f05e <rmw_init_options_copy+0x22>
 800f058:	250b      	movs	r5, #11
 800f05a:	4628      	mov	r0, r5
 800f05c:	bd70      	pop	{r4, r5, r6, pc}
 800f05e:	4623      	mov	r3, r4
 800f060:	462a      	mov	r2, r5
 800f062:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800f066:	f8d3 c000 	ldr.w	ip, [r3]
 800f06a:	6858      	ldr	r0, [r3, #4]
 800f06c:	6899      	ldr	r1, [r3, #8]
 800f06e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800f072:	f8c2 e00c 	str.w	lr, [r2, #12]
 800f076:	3310      	adds	r3, #16
 800f078:	42b3      	cmp	r3, r6
 800f07a:	f8c2 c000 	str.w	ip, [r2]
 800f07e:	6050      	str	r0, [r2, #4]
 800f080:	6091      	str	r1, [r2, #8]
 800f082:	f102 0210 	add.w	r2, r2, #16
 800f086:	d1ee      	bne.n	800f066 <rmw_init_options_copy+0x2a>
 800f088:	6819      	ldr	r1, [r3, #0]
 800f08a:	685b      	ldr	r3, [r3, #4]
 800f08c:	480e      	ldr	r0, [pc, #56]	; (800f0c8 <rmw_init_options_copy+0x8c>)
 800f08e:	6053      	str	r3, [r2, #4]
 800f090:	6011      	str	r1, [r2, #0]
 800f092:	f7ff ff41 	bl	800ef18 <get_memory>
 800f096:	b198      	cbz	r0, 800f0c0 <rmw_init_options_copy+0x84>
 800f098:	6883      	ldr	r3, [r0, #8]
 800f09a:	636b      	str	r3, [r5, #52]	; 0x34
 800f09c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f09e:	f102 0c10 	add.w	ip, r2, #16
 800f0a2:	f103 0410 	add.w	r4, r3, #16
 800f0a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f0aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0ac:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800f0b0:	2500      	movs	r5, #0
 800f0b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f0b6:	4628      	mov	r0, r5
 800f0b8:	bd70      	pop	{r4, r5, r6, pc}
 800f0ba:	250c      	movs	r5, #12
 800f0bc:	4628      	mov	r0, r5
 800f0be:	bd70      	pop	{r4, r5, r6, pc}
 800f0c0:	2501      	movs	r5, #1
 800f0c2:	e7ca      	b.n	800f05a <rmw_init_options_copy+0x1e>
 800f0c4:	08013c2c 	.word	0x08013c2c
 800f0c8:	200123b4 	.word	0x200123b4

0800f0cc <rmw_init_options_fini>:
 800f0cc:	2800      	cmp	r0, #0
 800f0ce:	d03d      	beq.n	800f14c <rmw_init_options_fini+0x80>
 800f0d0:	b510      	push	{r4, lr}
 800f0d2:	4604      	mov	r4, r0
 800f0d4:	b08e      	sub	sp, #56	; 0x38
 800f0d6:	3020      	adds	r0, #32
 800f0d8:	f7fa f9a2 	bl	8009420 <rcutils_allocator_is_valid>
 800f0dc:	b360      	cbz	r0, 800f138 <rmw_init_options_fini+0x6c>
 800f0de:	68a0      	ldr	r0, [r4, #8]
 800f0e0:	b120      	cbz	r0, 800f0ec <rmw_init_options_fini+0x20>
 800f0e2:	4b1c      	ldr	r3, [pc, #112]	; (800f154 <rmw_init_options_fini+0x88>)
 800f0e4:	6819      	ldr	r1, [r3, #0]
 800f0e6:	f7f1 f87b 	bl	80001e0 <strcmp>
 800f0ea:	bb68      	cbnz	r0, 800f148 <rmw_init_options_fini+0x7c>
 800f0ec:	4b1a      	ldr	r3, [pc, #104]	; (800f158 <rmw_init_options_fini+0x8c>)
 800f0ee:	6819      	ldr	r1, [r3, #0]
 800f0f0:	b331      	cbz	r1, 800f140 <rmw_init_options_fini+0x74>
 800f0f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f0f4:	e001      	b.n	800f0fa <rmw_init_options_fini+0x2e>
 800f0f6:	6849      	ldr	r1, [r1, #4]
 800f0f8:	b311      	cbz	r1, 800f140 <rmw_init_options_fini+0x74>
 800f0fa:	688b      	ldr	r3, [r1, #8]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d1fa      	bne.n	800f0f6 <rmw_init_options_fini+0x2a>
 800f100:	4815      	ldr	r0, [pc, #84]	; (800f158 <rmw_init_options_fini+0x8c>)
 800f102:	f7ff ff19 	bl	800ef38 <put_memory>
 800f106:	4668      	mov	r0, sp
 800f108:	f7ff fdb2 	bl	800ec70 <rmw_get_zero_initialized_init_options>
 800f10c:	46ee      	mov	lr, sp
 800f10e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f112:	46a4      	mov	ip, r4
 800f114:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f118:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f11c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f120:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f124:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f128:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f12c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f130:	2300      	movs	r3, #0
 800f132:	4618      	mov	r0, r3
 800f134:	b00e      	add	sp, #56	; 0x38
 800f136:	bd10      	pop	{r4, pc}
 800f138:	230b      	movs	r3, #11
 800f13a:	4618      	mov	r0, r3
 800f13c:	b00e      	add	sp, #56	; 0x38
 800f13e:	bd10      	pop	{r4, pc}
 800f140:	2301      	movs	r3, #1
 800f142:	4618      	mov	r0, r3
 800f144:	b00e      	add	sp, #56	; 0x38
 800f146:	bd10      	pop	{r4, pc}
 800f148:	230c      	movs	r3, #12
 800f14a:	e7f2      	b.n	800f132 <rmw_init_options_fini+0x66>
 800f14c:	230b      	movs	r3, #11
 800f14e:	4618      	mov	r0, r3
 800f150:	4770      	bx	lr
 800f152:	bf00      	nop
 800f154:	08013c2c 	.word	0x08013c2c
 800f158:	200123b4 	.word	0x200123b4

0800f15c <rmw_init>:
 800f15c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f160:	b083      	sub	sp, #12
 800f162:	2800      	cmp	r0, #0
 800f164:	f000 80d3 	beq.w	800f30e <rmw_init+0x1b2>
 800f168:	460e      	mov	r6, r1
 800f16a:	2900      	cmp	r1, #0
 800f16c:	f000 80cf 	beq.w	800f30e <rmw_init+0x1b2>
 800f170:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f172:	4605      	mov	r5, r0
 800f174:	2b00      	cmp	r3, #0
 800f176:	f000 80ca 	beq.w	800f30e <rmw_init+0x1b2>
 800f17a:	4b78      	ldr	r3, [pc, #480]	; (800f35c <rmw_init+0x200>)
 800f17c:	6880      	ldr	r0, [r0, #8]
 800f17e:	681f      	ldr	r7, [r3, #0]
 800f180:	b128      	cbz	r0, 800f18e <rmw_init+0x32>
 800f182:	4639      	mov	r1, r7
 800f184:	f7f1 f82c 	bl	80001e0 <strcmp>
 800f188:	2800      	cmp	r0, #0
 800f18a:	f040 80ca 	bne.w	800f322 <rmw_init+0x1c6>
 800f18e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f192:	4c73      	ldr	r4, [pc, #460]	; (800f360 <rmw_init+0x204>)
 800f194:	4973      	ldr	r1, [pc, #460]	; (800f364 <rmw_init+0x208>)
 800f196:	4874      	ldr	r0, [pc, #464]	; (800f368 <rmw_init+0x20c>)
 800f198:	60b7      	str	r7, [r6, #8]
 800f19a:	e9c6 2300 	strd	r2, r3, [r6]
 800f19e:	68eb      	ldr	r3, [r5, #12]
 800f1a0:	64b3      	str	r3, [r6, #72]	; 0x48
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	f7fa fbda 	bl	800995c <rmw_uxrce_init_session_memory>
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	4970      	ldr	r1, [pc, #448]	; (800f36c <rmw_init+0x210>)
 800f1ac:	2204      	movs	r2, #4
 800f1ae:	f7fa fc15 	bl	80099dc <rmw_uxrce_init_static_input_buffer_memory>
 800f1b2:	f04f 0800 	mov.w	r8, #0
 800f1b6:	486c      	ldr	r0, [pc, #432]	; (800f368 <rmw_init+0x20c>)
 800f1b8:	f884 800d 	strb.w	r8, [r4, #13]
 800f1bc:	f7ff feac 	bl	800ef18 <get_memory>
 800f1c0:	2800      	cmp	r0, #0
 800f1c2:	f000 80a9 	beq.w	800f318 <rmw_init+0x1bc>
 800f1c6:	6884      	ldr	r4, [r0, #8]
 800f1c8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800f1ca:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800f1cc:	f890 c010 	ldrb.w	ip, [r0, #16]
 800f1d0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800f1d4:	9101      	str	r1, [sp, #4]
 800f1d6:	6a00      	ldr	r0, [r0, #32]
 800f1d8:	9000      	str	r0, [sp, #0]
 800f1da:	f104 0910 	add.w	r9, r4, #16
 800f1de:	4661      	mov	r1, ip
 800f1e0:	4648      	mov	r0, r9
 800f1e2:	f000 fdbf 	bl	800fd64 <uxr_set_custom_transport_callbacks>
 800f1e6:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800f1ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f1ee:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800f1f2:	f504 725e 	add.w	r2, r4, #888	; 0x378
 800f1f6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 800f1fa:	495d      	ldr	r1, [pc, #372]	; (800f370 <rmw_init+0x214>)
 800f1fc:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 800f200:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 800f204:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 800f208:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 800f20c:	4859      	ldr	r0, [pc, #356]	; (800f374 <rmw_init+0x218>)
 800f20e:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 800f212:	2201      	movs	r2, #1
 800f214:	64f4      	str	r4, [r6, #76]	; 0x4c
 800f216:	f7fa fb81 	bl	800991c <rmw_uxrce_init_node_memory>
 800f21a:	4957      	ldr	r1, [pc, #348]	; (800f378 <rmw_init+0x21c>)
 800f21c:	4857      	ldr	r0, [pc, #348]	; (800f37c <rmw_init+0x220>)
 800f21e:	2205      	movs	r2, #5
 800f220:	f7fa fb5c 	bl	80098dc <rmw_uxrce_init_subscription_memory>
 800f224:	4956      	ldr	r1, [pc, #344]	; (800f380 <rmw_init+0x224>)
 800f226:	4857      	ldr	r0, [pc, #348]	; (800f384 <rmw_init+0x228>)
 800f228:	220a      	movs	r2, #10
 800f22a:	f7fa fb37 	bl	800989c <rmw_uxrce_init_publisher_memory>
 800f22e:	4956      	ldr	r1, [pc, #344]	; (800f388 <rmw_init+0x22c>)
 800f230:	4856      	ldr	r0, [pc, #344]	; (800f38c <rmw_init+0x230>)
 800f232:	2201      	movs	r2, #1
 800f234:	f7fa faf2 	bl	800981c <rmw_uxrce_init_service_memory>
 800f238:	4955      	ldr	r1, [pc, #340]	; (800f390 <rmw_init+0x234>)
 800f23a:	4856      	ldr	r0, [pc, #344]	; (800f394 <rmw_init+0x238>)
 800f23c:	2201      	movs	r2, #1
 800f23e:	f7fa fb0d 	bl	800985c <rmw_uxrce_init_client_memory>
 800f242:	4955      	ldr	r1, [pc, #340]	; (800f398 <rmw_init+0x23c>)
 800f244:	4855      	ldr	r0, [pc, #340]	; (800f39c <rmw_init+0x240>)
 800f246:	220f      	movs	r2, #15
 800f248:	f7fa fba8 	bl	800999c <rmw_uxrce_init_topic_memory>
 800f24c:	4954      	ldr	r1, [pc, #336]	; (800f3a0 <rmw_init+0x244>)
 800f24e:	4855      	ldr	r0, [pc, #340]	; (800f3a4 <rmw_init+0x248>)
 800f250:	2203      	movs	r2, #3
 800f252:	f7fa fbe3 	bl	8009a1c <rmw_uxrce_init_init_options_impl_memory>
 800f256:	4954      	ldr	r1, [pc, #336]	; (800f3a8 <rmw_init+0x24c>)
 800f258:	4854      	ldr	r0, [pc, #336]	; (800f3ac <rmw_init+0x250>)
 800f25a:	2204      	movs	r2, #4
 800f25c:	f7fa fbfe 	bl	8009a5c <rmw_uxrce_init_wait_set_memory>
 800f260:	4953      	ldr	r1, [pc, #332]	; (800f3b0 <rmw_init+0x254>)
 800f262:	4854      	ldr	r0, [pc, #336]	; (800f3b4 <rmw_init+0x258>)
 800f264:	2204      	movs	r2, #4
 800f266:	f7fa fc19 	bl	8009a9c <rmw_uxrce_init_guard_condition_memory>
 800f26a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800f26c:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800f26e:	4642      	mov	r2, r8
 800f270:	f000 fb06 	bl	800f880 <rmw_uxrce_transport_init>
 800f274:	4607      	mov	r7, r0
 800f276:	2800      	cmp	r0, #0
 800f278:	d158      	bne.n	800f32c <rmw_init+0x1d0>
 800f27a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800f27c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800f280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f282:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800f286:	4628      	mov	r0, r5
 800f288:	f7fc f84e 	bl	800b328 <uxr_init_session>
 800f28c:	494a      	ldr	r1, [pc, #296]	; (800f3b8 <rmw_init+0x25c>)
 800f28e:	4622      	mov	r2, r4
 800f290:	4628      	mov	r0, r5
 800f292:	f7fc f86d 	bl	800b370 <uxr_set_topic_callback>
 800f296:	4949      	ldr	r1, [pc, #292]	; (800f3bc <rmw_init+0x260>)
 800f298:	463a      	mov	r2, r7
 800f29a:	4628      	mov	r0, r5
 800f29c:	f7fc f864 	bl	800b368 <uxr_set_status_callback>
 800f2a0:	4947      	ldr	r1, [pc, #284]	; (800f3c0 <rmw_init+0x264>)
 800f2a2:	463a      	mov	r2, r7
 800f2a4:	4628      	mov	r0, r5
 800f2a6:	f7fc f867 	bl	800b378 <uxr_set_request_callback>
 800f2aa:	4946      	ldr	r1, [pc, #280]	; (800f3c4 <rmw_init+0x268>)
 800f2ac:	463a      	mov	r2, r7
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	f7fc f866 	bl	800b380 <uxr_set_reply_callback>
 800f2b4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800f2b8:	2304      	movs	r3, #4
 800f2ba:	0092      	lsls	r2, r2, #2
 800f2bc:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800f2c0:	4628      	mov	r0, r5
 800f2c2:	f7fc f89b 	bl	800b3fc <uxr_create_input_reliable_stream>
 800f2c6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800f2ca:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800f2ce:	0092      	lsls	r2, r2, #2
 800f2d0:	2304      	movs	r3, #4
 800f2d2:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800f2d6:	4628      	mov	r0, r5
 800f2d8:	f7fc f868 	bl	800b3ac <uxr_create_output_reliable_stream>
 800f2dc:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	f7fc f885 	bl	800b3f0 <uxr_create_input_best_effort_stream>
 800f2e6:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 800f2ea:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800f2ee:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800f2f2:	3114      	adds	r1, #20
 800f2f4:	4628      	mov	r0, r5
 800f2f6:	f7fc f847 	bl	800b388 <uxr_create_output_best_effort_stream>
 800f2fa:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 800f2fe:	4628      	mov	r0, r5
 800f300:	f7fc fd98 	bl	800be34 <uxr_create_session>
 800f304:	b1f8      	cbz	r0, 800f346 <rmw_init+0x1ea>
 800f306:	4638      	mov	r0, r7
 800f308:	b003      	add	sp, #12
 800f30a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f30e:	270b      	movs	r7, #11
 800f310:	4638      	mov	r0, r7
 800f312:	b003      	add	sp, #12
 800f314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f318:	2701      	movs	r7, #1
 800f31a:	4638      	mov	r0, r7
 800f31c:	b003      	add	sp, #12
 800f31e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f322:	270c      	movs	r7, #12
 800f324:	4638      	mov	r0, r7
 800f326:	b003      	add	sp, #12
 800f328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f32c:	4648      	mov	r0, r9
 800f32e:	f000 fd5b 	bl	800fde8 <uxr_close_custom_transport>
 800f332:	480d      	ldr	r0, [pc, #52]	; (800f368 <rmw_init+0x20c>)
 800f334:	4621      	mov	r1, r4
 800f336:	f7ff fdff 	bl	800ef38 <put_memory>
 800f33a:	4638      	mov	r0, r7
 800f33c:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 800f340:	b003      	add	sp, #12
 800f342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f346:	4648      	mov	r0, r9
 800f348:	f000 fd4e 	bl	800fde8 <uxr_close_custom_transport>
 800f34c:	4806      	ldr	r0, [pc, #24]	; (800f368 <rmw_init+0x20c>)
 800f34e:	4621      	mov	r1, r4
 800f350:	f7ff fdf2 	bl	800ef38 <put_memory>
 800f354:	64f7      	str	r7, [r6, #76]	; 0x4c
 800f356:	2701      	movs	r7, #1
 800f358:	e7d5      	b.n	800f306 <rmw_init+0x1aa>
 800f35a:	bf00      	nop
 800f35c:	08013c2c 	.word	0x08013c2c
 800f360:	20012404 	.word	0x20012404
 800f364:	2000e6b0 	.word	0x2000e6b0
 800f368:	200123f4 	.word	0x200123f4
 800f36c:	2000fc58 	.word	0x2000fc58
 800f370:	2000dcd4 	.word	0x2000dcd4
 800f374:	200123c4 	.word	0x200123c4
 800f378:	20011d58 	.word	0x20011d58
 800f37c:	20012414 	.word	0x20012414
 800f380:	2000dd78 	.word	0x2000dd78
 800f384:	200123d4 	.word	0x200123d4
 800f388:	2000e5e8 	.word	0x2000e5e8
 800f38c:	200123e4 	.word	0x200123e4
 800f390:	2000db08 	.word	0x2000db08
 800f394:	2000daf8 	.word	0x2000daf8
 800f398:	20012190 	.word	0x20012190
 800f39c:	20012424 	.word	0x20012424
 800f3a0:	2000dc50 	.word	0x2000dc50
 800f3a4:	200123b4 	.word	0x200123b4
 800f3a8:	20012334 	.word	0x20012334
 800f3ac:	20012434 	.word	0x20012434
 800f3b0:	2000dbd0 	.word	0x2000dbd0
 800f3b4:	200123a4 	.word	0x200123a4
 800f3b8:	08011a05 	.word	0x08011a05
 800f3bc:	080119fd 	.word	0x080119fd
 800f3c0:	08011a9d 	.word	0x08011a9d
 800f3c4:	08011b39 	.word	0x08011b39

0800f3c8 <rmw_context_fini>:
 800f3c8:	4b17      	ldr	r3, [pc, #92]	; (800f428 <rmw_context_fini+0x60>)
 800f3ca:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800f3cc:	b570      	push	{r4, r5, r6, lr}
 800f3ce:	681c      	ldr	r4, [r3, #0]
 800f3d0:	4605      	mov	r5, r0
 800f3d2:	b334      	cbz	r4, 800f422 <rmw_context_fini+0x5a>
 800f3d4:	2600      	movs	r6, #0
 800f3d6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800f3da:	6902      	ldr	r2, [r0, #16]
 800f3dc:	428a      	cmp	r2, r1
 800f3de:	d018      	beq.n	800f412 <rmw_context_fini+0x4a>
 800f3e0:	2c00      	cmp	r4, #0
 800f3e2:	d1f8      	bne.n	800f3d6 <rmw_context_fini+0xe>
 800f3e4:	b189      	cbz	r1, 800f40a <rmw_context_fini+0x42>
 800f3e6:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 800f3ea:	789b      	ldrb	r3, [r3, #2]
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 800f3f2:	bf14      	ite	ne
 800f3f4:	210a      	movne	r1, #10
 800f3f6:	2100      	moveq	r1, #0
 800f3f8:	f7fc fcf4 	bl	800bde4 <uxr_delete_session_retries>
 800f3fc:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800f3fe:	f7fa fb6d 	bl	8009adc <rmw_uxrce_fini_session_memory>
 800f402:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800f404:	3010      	adds	r0, #16
 800f406:	f000 fcef 	bl	800fde8 <uxr_close_custom_transport>
 800f40a:	2300      	movs	r3, #0
 800f40c:	64eb      	str	r3, [r5, #76]	; 0x4c
 800f40e:	4630      	mov	r0, r6
 800f410:	bd70      	pop	{r4, r5, r6, pc}
 800f412:	3018      	adds	r0, #24
 800f414:	f000 f90e 	bl	800f634 <rmw_destroy_node>
 800f418:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800f41a:	4606      	mov	r6, r0
 800f41c:	2c00      	cmp	r4, #0
 800f41e:	d1da      	bne.n	800f3d6 <rmw_context_fini+0xe>
 800f420:	e7e0      	b.n	800f3e4 <rmw_context_fini+0x1c>
 800f422:	4626      	mov	r6, r4
 800f424:	e7de      	b.n	800f3e4 <rmw_context_fini+0x1c>
 800f426:	bf00      	nop
 800f428:	200123c4 	.word	0x200123c4

0800f42c <create_topic>:
 800f42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f430:	4605      	mov	r5, r0
 800f432:	b084      	sub	sp, #16
 800f434:	4822      	ldr	r0, [pc, #136]	; (800f4c0 <create_topic+0x94>)
 800f436:	460f      	mov	r7, r1
 800f438:	4616      	mov	r6, r2
 800f43a:	f7ff fd6d 	bl	800ef18 <get_memory>
 800f43e:	4604      	mov	r4, r0
 800f440:	2800      	cmp	r0, #0
 800f442:	d039      	beq.n	800f4b8 <create_topic+0x8c>
 800f444:	692b      	ldr	r3, [r5, #16]
 800f446:	6884      	ldr	r4, [r0, #8]
 800f448:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800f4c8 <create_topic+0x9c>
 800f44c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f450:	e9c4 6505 	strd	r6, r5, [r4, #20]
 800f454:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 800f458:	1c42      	adds	r2, r0, #1
 800f45a:	2102      	movs	r1, #2
 800f45c:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 800f460:	f7fb fea4 	bl	800b1ac <uxr_object_id>
 800f464:	223c      	movs	r2, #60	; 0x3c
 800f466:	6120      	str	r0, [r4, #16]
 800f468:	4641      	mov	r1, r8
 800f46a:	4638      	mov	r0, r7
 800f46c:	f7fa fc6e 	bl	8009d4c <generate_topic_name>
 800f470:	b1f0      	cbz	r0, 800f4b0 <create_topic+0x84>
 800f472:	4f14      	ldr	r7, [pc, #80]	; (800f4c4 <create_topic+0x98>)
 800f474:	4630      	mov	r0, r6
 800f476:	2264      	movs	r2, #100	; 0x64
 800f478:	4639      	mov	r1, r7
 800f47a:	f7fa fc37 	bl	8009cec <generate_type_name>
 800f47e:	b1b8      	cbz	r0, 800f4b0 <create_topic+0x84>
 800f480:	6928      	ldr	r0, [r5, #16]
 800f482:	2306      	movs	r3, #6
 800f484:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800f488:	f8cd 8000 	str.w	r8, [sp]
 800f48c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800f490:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f494:	6811      	ldr	r1, [r2, #0]
 800f496:	696b      	ldr	r3, [r5, #20]
 800f498:	6922      	ldr	r2, [r4, #16]
 800f49a:	f7fb fdab 	bl	800aff4 <uxr_buffer_create_topic_bin>
 800f49e:	4602      	mov	r2, r0
 800f4a0:	6928      	ldr	r0, [r5, #16]
 800f4a2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f4a6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f4aa:	f7fa fbe9 	bl	8009c80 <run_xrce_session>
 800f4ae:	b918      	cbnz	r0, 800f4b8 <create_topic+0x8c>
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	f7fa fb89 	bl	8009bc8 <rmw_uxrce_fini_topic_memory>
 800f4b6:	2400      	movs	r4, #0
 800f4b8:	4620      	mov	r0, r4
 800f4ba:	b004      	add	sp, #16
 800f4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4c0:	20012424 	.word	0x20012424
 800f4c4:	200124a0 	.word	0x200124a0
 800f4c8:	20012464 	.word	0x20012464

0800f4cc <destroy_topic>:
 800f4cc:	b538      	push	{r3, r4, r5, lr}
 800f4ce:	6985      	ldr	r5, [r0, #24]
 800f4d0:	b1d5      	cbz	r5, 800f508 <destroy_topic+0x3c>
 800f4d2:	4604      	mov	r4, r0
 800f4d4:	6928      	ldr	r0, [r5, #16]
 800f4d6:	6922      	ldr	r2, [r4, #16]
 800f4d8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f4dc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f4e0:	6819      	ldr	r1, [r3, #0]
 800f4e2:	f7fb fd09 	bl	800aef8 <uxr_buffer_delete_entity>
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	6928      	ldr	r0, [r5, #16]
 800f4ea:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f4ee:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f4f2:	f7fa fbc5 	bl	8009c80 <run_xrce_session>
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	bf14      	ite	ne
 800f4fc:	2400      	movne	r4, #0
 800f4fe:	2402      	moveq	r4, #2
 800f500:	f7fa fb62 	bl	8009bc8 <rmw_uxrce_fini_topic_memory>
 800f504:	4620      	mov	r0, r4
 800f506:	bd38      	pop	{r3, r4, r5, pc}
 800f508:	2401      	movs	r4, #1
 800f50a:	4620      	mov	r0, r4
 800f50c:	bd38      	pop	{r3, r4, r5, pc}
 800f50e:	bf00      	nop

0800f510 <create_node>:
 800f510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f514:	b083      	sub	sp, #12
 800f516:	2b00      	cmp	r3, #0
 800f518:	d05f      	beq.n	800f5da <create_node+0xca>
 800f51a:	4606      	mov	r6, r0
 800f51c:	4835      	ldr	r0, [pc, #212]	; (800f5f4 <create_node+0xe4>)
 800f51e:	460f      	mov	r7, r1
 800f520:	4690      	mov	r8, r2
 800f522:	461d      	mov	r5, r3
 800f524:	f7ff fcf8 	bl	800ef18 <get_memory>
 800f528:	2800      	cmp	r0, #0
 800f52a:	d056      	beq.n	800f5da <create_node+0xca>
 800f52c:	6884      	ldr	r4, [r0, #8]
 800f52e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f530:	6123      	str	r3, [r4, #16]
 800f532:	f7ff fd15 	bl	800ef60 <rmw_get_implementation_identifier>
 800f536:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800f53a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800f53e:	f8c4 9020 	str.w	r9, [r4, #32]
 800f542:	4630      	mov	r0, r6
 800f544:	f7f0 fe56 	bl	80001f4 <strlen>
 800f548:	1c42      	adds	r2, r0, #1
 800f54a:	2a3c      	cmp	r2, #60	; 0x3c
 800f54c:	f104 0518 	add.w	r5, r4, #24
 800f550:	d840      	bhi.n	800f5d4 <create_node+0xc4>
 800f552:	4648      	mov	r0, r9
 800f554:	4631      	mov	r1, r6
 800f556:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800f55a:	f003 f888 	bl	801266e <memcpy>
 800f55e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800f562:	4638      	mov	r0, r7
 800f564:	f7f0 fe46 	bl	80001f4 <strlen>
 800f568:	1c42      	adds	r2, r0, #1
 800f56a:	2a3c      	cmp	r2, #60	; 0x3c
 800f56c:	d832      	bhi.n	800f5d4 <create_node+0xc4>
 800f56e:	4639      	mov	r1, r7
 800f570:	4648      	mov	r0, r9
 800f572:	f003 f87c 	bl	801266e <memcpy>
 800f576:	6923      	ldr	r3, [r4, #16]
 800f578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f57c:	2101      	movs	r1, #1
 800f57e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 800f582:	1842      	adds	r2, r0, r1
 800f584:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 800f588:	f7fb fe10 	bl	800b1ac <uxr_object_id>
 800f58c:	6160      	str	r0, [r4, #20]
 800f58e:	783b      	ldrb	r3, [r7, #0]
 800f590:	2b2f      	cmp	r3, #47	; 0x2f
 800f592:	d127      	bne.n	800f5e4 <create_node+0xd4>
 800f594:	787b      	ldrb	r3, [r7, #1]
 800f596:	bb2b      	cbnz	r3, 800f5e4 <create_node+0xd4>
 800f598:	4a17      	ldr	r2, [pc, #92]	; (800f5f8 <create_node+0xe8>)
 800f59a:	4818      	ldr	r0, [pc, #96]	; (800f5fc <create_node+0xec>)
 800f59c:	4633      	mov	r3, r6
 800f59e:	213c      	movs	r1, #60	; 0x3c
 800f5a0:	f002 fe96 	bl	80122d0 <sniprintf>
 800f5a4:	6920      	ldr	r0, [r4, #16]
 800f5a6:	4915      	ldr	r1, [pc, #84]	; (800f5fc <create_node+0xec>)
 800f5a8:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800f5ac:	9100      	str	r1, [sp, #0]
 800f5ae:	2106      	movs	r1, #6
 800f5b0:	9101      	str	r1, [sp, #4]
 800f5b2:	6811      	ldr	r1, [r2, #0]
 800f5b4:	6962      	ldr	r2, [r4, #20]
 800f5b6:	fa1f f388 	uxth.w	r3, r8
 800f5ba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f5be:	f7fb fce7 	bl	800af90 <uxr_buffer_create_participant_bin>
 800f5c2:	4602      	mov	r2, r0
 800f5c4:	6920      	ldr	r0, [r4, #16]
 800f5c6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f5ca:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f5ce:	f7fa fb57 	bl	8009c80 <run_xrce_session>
 800f5d2:	b918      	cbnz	r0, 800f5dc <create_node+0xcc>
 800f5d4:	4628      	mov	r0, r5
 800f5d6:	f7fa fa87 	bl	8009ae8 <rmw_uxrce_fini_node_memory>
 800f5da:	2500      	movs	r5, #0
 800f5dc:	4628      	mov	r0, r5
 800f5de:	b003      	add	sp, #12
 800f5e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5e4:	4a06      	ldr	r2, [pc, #24]	; (800f600 <create_node+0xf0>)
 800f5e6:	9600      	str	r6, [sp, #0]
 800f5e8:	463b      	mov	r3, r7
 800f5ea:	213c      	movs	r1, #60	; 0x3c
 800f5ec:	4803      	ldr	r0, [pc, #12]	; (800f5fc <create_node+0xec>)
 800f5ee:	f002 fe6f 	bl	80122d0 <sniprintf>
 800f5f2:	e7d7      	b.n	800f5a4 <create_node+0x94>
 800f5f4:	200123c4 	.word	0x200123c4
 800f5f8:	08013644 	.word	0x08013644
 800f5fc:	20012504 	.word	0x20012504
 800f600:	080137d4 	.word	0x080137d4

0800f604 <rmw_create_node>:
 800f604:	b199      	cbz	r1, 800f62e <rmw_create_node+0x2a>
 800f606:	780b      	ldrb	r3, [r1, #0]
 800f608:	468c      	mov	ip, r1
 800f60a:	b183      	cbz	r3, 800f62e <rmw_create_node+0x2a>
 800f60c:	b410      	push	{r4}
 800f60e:	4614      	mov	r4, r2
 800f610:	b14a      	cbz	r2, 800f626 <rmw_create_node+0x22>
 800f612:	7813      	ldrb	r3, [r2, #0]
 800f614:	b13b      	cbz	r3, 800f626 <rmw_create_node+0x22>
 800f616:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800f618:	4603      	mov	r3, r0
 800f61a:	4621      	mov	r1, r4
 800f61c:	4660      	mov	r0, ip
 800f61e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f622:	f7ff bf75 	b.w	800f510 <create_node>
 800f626:	2000      	movs	r0, #0
 800f628:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f62c:	4770      	bx	lr
 800f62e:	2000      	movs	r0, #0
 800f630:	4770      	bx	lr
 800f632:	bf00      	nop

0800f634 <rmw_destroy_node>:
 800f634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f636:	b328      	cbz	r0, 800f684 <rmw_destroy_node+0x50>
 800f638:	4607      	mov	r7, r0
 800f63a:	6800      	ldr	r0, [r0, #0]
 800f63c:	b120      	cbz	r0, 800f648 <rmw_destroy_node+0x14>
 800f63e:	4b36      	ldr	r3, [pc, #216]	; (800f718 <rmw_destroy_node+0xe4>)
 800f640:	6819      	ldr	r1, [r3, #0]
 800f642:	f7f0 fdcd 	bl	80001e0 <strcmp>
 800f646:	b9e8      	cbnz	r0, 800f684 <rmw_destroy_node+0x50>
 800f648:	687d      	ldr	r5, [r7, #4]
 800f64a:	b1dd      	cbz	r5, 800f684 <rmw_destroy_node+0x50>
 800f64c:	4b33      	ldr	r3, [pc, #204]	; (800f71c <rmw_destroy_node+0xe8>)
 800f64e:	681c      	ldr	r4, [r3, #0]
 800f650:	2c00      	cmp	r4, #0
 800f652:	d05f      	beq.n	800f714 <rmw_destroy_node+0xe0>
 800f654:	2600      	movs	r6, #0
 800f656:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f65a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800f65e:	429d      	cmp	r5, r3
 800f660:	d013      	beq.n	800f68a <rmw_destroy_node+0x56>
 800f662:	2c00      	cmp	r4, #0
 800f664:	d1f7      	bne.n	800f656 <rmw_destroy_node+0x22>
 800f666:	4b2e      	ldr	r3, [pc, #184]	; (800f720 <rmw_destroy_node+0xec>)
 800f668:	681c      	ldr	r4, [r3, #0]
 800f66a:	b1c4      	cbz	r4, 800f69e <rmw_destroy_node+0x6a>
 800f66c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f670:	6a0b      	ldr	r3, [r1, #32]
 800f672:	429d      	cmp	r5, r3
 800f674:	d1f9      	bne.n	800f66a <rmw_destroy_node+0x36>
 800f676:	317c      	adds	r1, #124	; 0x7c
 800f678:	4638      	mov	r0, r7
 800f67a:	f000 f8a1 	bl	800f7c0 <rmw_destroy_subscription>
 800f67e:	2801      	cmp	r0, #1
 800f680:	4606      	mov	r6, r0
 800f682:	d1f2      	bne.n	800f66a <rmw_destroy_node+0x36>
 800f684:	2601      	movs	r6, #1
 800f686:	4630      	mov	r0, r6
 800f688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f68a:	3184      	adds	r1, #132	; 0x84
 800f68c:	4638      	mov	r0, r7
 800f68e:	f7fa f873 	bl	8009778 <rmw_destroy_publisher>
 800f692:	2801      	cmp	r0, #1
 800f694:	4606      	mov	r6, r0
 800f696:	d0f5      	beq.n	800f684 <rmw_destroy_node+0x50>
 800f698:	2c00      	cmp	r4, #0
 800f69a:	d1dc      	bne.n	800f656 <rmw_destroy_node+0x22>
 800f69c:	e7e3      	b.n	800f666 <rmw_destroy_node+0x32>
 800f69e:	4b21      	ldr	r3, [pc, #132]	; (800f724 <rmw_destroy_node+0xf0>)
 800f6a0:	681c      	ldr	r4, [r3, #0]
 800f6a2:	b16c      	cbz	r4, 800f6c0 <rmw_destroy_node+0x8c>
 800f6a4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f6a8:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800f6aa:	429d      	cmp	r5, r3
 800f6ac:	d1f9      	bne.n	800f6a2 <rmw_destroy_node+0x6e>
 800f6ae:	317c      	adds	r1, #124	; 0x7c
 800f6b0:	4638      	mov	r0, r7
 800f6b2:	f000 f841 	bl	800f738 <rmw_destroy_service>
 800f6b6:	2801      	cmp	r0, #1
 800f6b8:	4606      	mov	r6, r0
 800f6ba:	d0e3      	beq.n	800f684 <rmw_destroy_node+0x50>
 800f6bc:	2c00      	cmp	r4, #0
 800f6be:	d1f1      	bne.n	800f6a4 <rmw_destroy_node+0x70>
 800f6c0:	4b19      	ldr	r3, [pc, #100]	; (800f728 <rmw_destroy_node+0xf4>)
 800f6c2:	681c      	ldr	r4, [r3, #0]
 800f6c4:	b16c      	cbz	r4, 800f6e2 <rmw_destroy_node+0xae>
 800f6c6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f6ca:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800f6cc:	429d      	cmp	r5, r3
 800f6ce:	d1f9      	bne.n	800f6c4 <rmw_destroy_node+0x90>
 800f6d0:	317c      	adds	r1, #124	; 0x7c
 800f6d2:	4638      	mov	r0, r7
 800f6d4:	f002 fa7a 	bl	8011bcc <rmw_destroy_client>
 800f6d8:	2801      	cmp	r0, #1
 800f6da:	4606      	mov	r6, r0
 800f6dc:	d0d2      	beq.n	800f684 <rmw_destroy_node+0x50>
 800f6de:	2c00      	cmp	r4, #0
 800f6e0:	d1f1      	bne.n	800f6c6 <rmw_destroy_node+0x92>
 800f6e2:	6928      	ldr	r0, [r5, #16]
 800f6e4:	696a      	ldr	r2, [r5, #20]
 800f6e6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f6ea:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f6ee:	6819      	ldr	r1, [r3, #0]
 800f6f0:	f7fb fc02 	bl	800aef8 <uxr_buffer_delete_entity>
 800f6f4:	4602      	mov	r2, r0
 800f6f6:	6928      	ldr	r0, [r5, #16]
 800f6f8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f6fc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f700:	f7fa fabe 	bl	8009c80 <run_xrce_session>
 800f704:	2800      	cmp	r0, #0
 800f706:	bf08      	it	eq
 800f708:	2602      	moveq	r6, #2
 800f70a:	4638      	mov	r0, r7
 800f70c:	f7fa f9ec 	bl	8009ae8 <rmw_uxrce_fini_node_memory>
 800f710:	4630      	mov	r0, r6
 800f712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f714:	4626      	mov	r6, r4
 800f716:	e7a6      	b.n	800f666 <rmw_destroy_node+0x32>
 800f718:	08013c2c 	.word	0x08013c2c
 800f71c:	200123d4 	.word	0x200123d4
 800f720:	20012414 	.word	0x20012414
 800f724:	200123e4 	.word	0x200123e4
 800f728:	2000daf8 	.word	0x2000daf8

0800f72c <rmw_node_get_graph_guard_condition>:
 800f72c:	6843      	ldr	r3, [r0, #4]
 800f72e:	6918      	ldr	r0, [r3, #16]
 800f730:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800f734:	4770      	bx	lr
 800f736:	bf00      	nop

0800f738 <rmw_destroy_service>:
 800f738:	b570      	push	{r4, r5, r6, lr}
 800f73a:	b128      	cbz	r0, 800f748 <rmw_destroy_service+0x10>
 800f73c:	4604      	mov	r4, r0
 800f73e:	6800      	ldr	r0, [r0, #0]
 800f740:	460d      	mov	r5, r1
 800f742:	f7fa fb1d 	bl	8009d80 <is_uxrce_rmw_identifier_valid>
 800f746:	b910      	cbnz	r0, 800f74e <rmw_destroy_service+0x16>
 800f748:	2401      	movs	r4, #1
 800f74a:	4620      	mov	r0, r4
 800f74c:	bd70      	pop	{r4, r5, r6, pc}
 800f74e:	6863      	ldr	r3, [r4, #4]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d0f9      	beq.n	800f748 <rmw_destroy_service+0x10>
 800f754:	2d00      	cmp	r5, #0
 800f756:	d0f7      	beq.n	800f748 <rmw_destroy_service+0x10>
 800f758:	6828      	ldr	r0, [r5, #0]
 800f75a:	f7fa fb11 	bl	8009d80 <is_uxrce_rmw_identifier_valid>
 800f75e:	2800      	cmp	r0, #0
 800f760:	d0f2      	beq.n	800f748 <rmw_destroy_service+0x10>
 800f762:	686e      	ldr	r6, [r5, #4]
 800f764:	2e00      	cmp	r6, #0
 800f766:	d0ef      	beq.n	800f748 <rmw_destroy_service+0x10>
 800f768:	6864      	ldr	r4, [r4, #4]
 800f76a:	6932      	ldr	r2, [r6, #16]
 800f76c:	6920      	ldr	r0, [r4, #16]
 800f76e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f772:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f776:	6819      	ldr	r1, [r3, #0]
 800f778:	f001 f882 	bl	8010880 <uxr_buffer_cancel_data>
 800f77c:	4602      	mov	r2, r0
 800f77e:	6920      	ldr	r0, [r4, #16]
 800f780:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f784:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f788:	f7fa fa7a 	bl	8009c80 <run_xrce_session>
 800f78c:	6920      	ldr	r0, [r4, #16]
 800f78e:	6932      	ldr	r2, [r6, #16]
 800f790:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f794:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f798:	6819      	ldr	r1, [r3, #0]
 800f79a:	f7fb fbad 	bl	800aef8 <uxr_buffer_delete_entity>
 800f79e:	4602      	mov	r2, r0
 800f7a0:	6920      	ldr	r0, [r4, #16]
 800f7a2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f7a6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f7aa:	f7fa fa69 	bl	8009c80 <run_xrce_session>
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	4628      	mov	r0, r5
 800f7b2:	bf14      	ite	ne
 800f7b4:	2400      	movne	r4, #0
 800f7b6:	2402      	moveq	r4, #2
 800f7b8:	f7fa f9da 	bl	8009b70 <rmw_uxrce_fini_service_memory>
 800f7bc:	e7c5      	b.n	800f74a <rmw_destroy_service+0x12>
 800f7be:	bf00      	nop

0800f7c0 <rmw_destroy_subscription>:
 800f7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7c2:	b128      	cbz	r0, 800f7d0 <rmw_destroy_subscription+0x10>
 800f7c4:	4604      	mov	r4, r0
 800f7c6:	6800      	ldr	r0, [r0, #0]
 800f7c8:	460d      	mov	r5, r1
 800f7ca:	f7fa fad9 	bl	8009d80 <is_uxrce_rmw_identifier_valid>
 800f7ce:	b910      	cbnz	r0, 800f7d6 <rmw_destroy_subscription+0x16>
 800f7d0:	2401      	movs	r4, #1
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7d6:	6863      	ldr	r3, [r4, #4]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d0f9      	beq.n	800f7d0 <rmw_destroy_subscription+0x10>
 800f7dc:	2d00      	cmp	r5, #0
 800f7de:	d0f7      	beq.n	800f7d0 <rmw_destroy_subscription+0x10>
 800f7e0:	6828      	ldr	r0, [r5, #0]
 800f7e2:	f7fa facd 	bl	8009d80 <is_uxrce_rmw_identifier_valid>
 800f7e6:	2800      	cmp	r0, #0
 800f7e8:	d0f2      	beq.n	800f7d0 <rmw_destroy_subscription+0x10>
 800f7ea:	686c      	ldr	r4, [r5, #4]
 800f7ec:	2c00      	cmp	r4, #0
 800f7ee:	d0ef      	beq.n	800f7d0 <rmw_destroy_subscription+0x10>
 800f7f0:	6a26      	ldr	r6, [r4, #32]
 800f7f2:	6962      	ldr	r2, [r4, #20]
 800f7f4:	6930      	ldr	r0, [r6, #16]
 800f7f6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f7fa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f7fe:	6819      	ldr	r1, [r3, #0]
 800f800:	f001 f83e 	bl	8010880 <uxr_buffer_cancel_data>
 800f804:	4602      	mov	r2, r0
 800f806:	6930      	ldr	r0, [r6, #16]
 800f808:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f80c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f810:	f7fa fa36 	bl	8009c80 <run_xrce_session>
 800f814:	69e0      	ldr	r0, [r4, #28]
 800f816:	f7ff fe59 	bl	800f4cc <destroy_topic>
 800f81a:	6a23      	ldr	r3, [r4, #32]
 800f81c:	6962      	ldr	r2, [r4, #20]
 800f81e:	6918      	ldr	r0, [r3, #16]
 800f820:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f824:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f828:	6819      	ldr	r1, [r3, #0]
 800f82a:	f7fb fb65 	bl	800aef8 <uxr_buffer_delete_entity>
 800f82e:	6a23      	ldr	r3, [r4, #32]
 800f830:	6922      	ldr	r2, [r4, #16]
 800f832:	691b      	ldr	r3, [r3, #16]
 800f834:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800f838:	4604      	mov	r4, r0
 800f83a:	6809      	ldr	r1, [r1, #0]
 800f83c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800f840:	f7fb fb5a 	bl	800aef8 <uxr_buffer_delete_entity>
 800f844:	6937      	ldr	r7, [r6, #16]
 800f846:	4622      	mov	r2, r4
 800f848:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800f84c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800f850:	4604      	mov	r4, r0
 800f852:	4638      	mov	r0, r7
 800f854:	f7fa fa14 	bl	8009c80 <run_xrce_session>
 800f858:	6936      	ldr	r6, [r6, #16]
 800f85a:	4622      	mov	r2, r4
 800f85c:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800f860:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800f864:	4604      	mov	r4, r0
 800f866:	4630      	mov	r0, r6
 800f868:	f7fa fa0a 	bl	8009c80 <run_xrce_session>
 800f86c:	b12c      	cbz	r4, 800f87a <rmw_destroy_subscription+0xba>
 800f86e:	b120      	cbz	r0, 800f87a <rmw_destroy_subscription+0xba>
 800f870:	2400      	movs	r4, #0
 800f872:	4628      	mov	r0, r5
 800f874:	f7fa f966 	bl	8009b44 <rmw_uxrce_fini_subscription_memory>
 800f878:	e7ab      	b.n	800f7d2 <rmw_destroy_subscription+0x12>
 800f87a:	2402      	movs	r4, #2
 800f87c:	e7f9      	b.n	800f872 <rmw_destroy_subscription+0xb2>
 800f87e:	bf00      	nop

0800f880 <rmw_uxrce_transport_init>:
 800f880:	b508      	push	{r3, lr}
 800f882:	b108      	cbz	r0, 800f888 <rmw_uxrce_transport_init+0x8>
 800f884:	f100 0210 	add.w	r2, r0, #16
 800f888:	b139      	cbz	r1, 800f89a <rmw_uxrce_transport_init+0x1a>
 800f88a:	6949      	ldr	r1, [r1, #20]
 800f88c:	4610      	mov	r0, r2
 800f88e:	f000 fa77 	bl	800fd80 <uxr_init_custom_transport>
 800f892:	f080 0001 	eor.w	r0, r0, #1
 800f896:	b2c0      	uxtb	r0, r0
 800f898:	bd08      	pop	{r3, pc}
 800f89a:	4b04      	ldr	r3, [pc, #16]	; (800f8ac <rmw_uxrce_transport_init+0x2c>)
 800f89c:	4610      	mov	r0, r2
 800f89e:	6859      	ldr	r1, [r3, #4]
 800f8a0:	f000 fa6e 	bl	800fd80 <uxr_init_custom_transport>
 800f8a4:	f080 0001 	eor.w	r0, r0, #1
 800f8a8:	b2c0      	uxtb	r0, r0
 800f8aa:	bd08      	pop	{r3, pc}
 800f8ac:	2000dadc 	.word	0x2000dadc

0800f8b0 <rmw_uros_epoch_nanos>:
 800f8b0:	4b05      	ldr	r3, [pc, #20]	; (800f8c8 <rmw_uros_epoch_nanos+0x18>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	b123      	cbz	r3, 800f8c0 <rmw_uros_epoch_nanos+0x10>
 800f8b6:	6898      	ldr	r0, [r3, #8]
 800f8b8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f8bc:	f7fb bdba 	b.w	800b434 <uxr_epoch_nanos>
 800f8c0:	2000      	movs	r0, #0
 800f8c2:	2100      	movs	r1, #0
 800f8c4:	4770      	bx	lr
 800f8c6:	bf00      	nop
 800f8c8:	200123f4 	.word	0x200123f4

0800f8cc <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800f8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d0:	6805      	ldr	r5, [r0, #0]
 800f8d2:	4604      	mov	r4, r0
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	460e      	mov	r6, r1
 800f8d8:	f7f0 fc82 	bl	80001e0 <strcmp>
 800f8dc:	b1c8      	cbz	r0, 800f912 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800f8de:	4b11      	ldr	r3, [pc, #68]	; (800f924 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	429d      	cmp	r5, r3
 800f8e4:	d112      	bne.n	800f90c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f8e6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f8ea:	f8d8 4000 	ldr.w	r4, [r8]
 800f8ee:	b16c      	cbz	r4, 800f90c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f8f0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f8f4:	2700      	movs	r7, #0
 800f8f6:	3d04      	subs	r5, #4
 800f8f8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f8fc:	4631      	mov	r1, r6
 800f8fe:	f7f0 fc6f 	bl	80001e0 <strcmp>
 800f902:	00bb      	lsls	r3, r7, #2
 800f904:	b140      	cbz	r0, 800f918 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800f906:	3701      	adds	r7, #1
 800f908:	42bc      	cmp	r4, r7
 800f90a:	d1f5      	bne.n	800f8f8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800f90c:	2000      	movs	r0, #0
 800f90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f912:	4620      	mov	r0, r4
 800f914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f918:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f91c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f920:	58d3      	ldr	r3, [r2, r3]
 800f922:	4718      	bx	r3
 800f924:	200000ac 	.word	0x200000ac

0800f928 <std_msgs__msg__Int32__init>:
 800f928:	3800      	subs	r0, #0
 800f92a:	bf18      	it	ne
 800f92c:	2001      	movne	r0, #1
 800f92e:	4770      	bx	lr

0800f930 <std_msgs__msg__Int32__fini>:
 800f930:	4770      	bx	lr
 800f932:	bf00      	nop

0800f934 <ucdr_serialize_endian_array_char>:
 800f934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f938:	4619      	mov	r1, r3
 800f93a:	461f      	mov	r7, r3
 800f93c:	4605      	mov	r5, r0
 800f93e:	4690      	mov	r8, r2
 800f940:	f7fb fa16 	bl	800ad70 <ucdr_check_buffer_available_for>
 800f944:	b9e0      	cbnz	r0, 800f980 <ucdr_serialize_endian_array_char+0x4c>
 800f946:	463e      	mov	r6, r7
 800f948:	e009      	b.n	800f95e <ucdr_serialize_endian_array_char+0x2a>
 800f94a:	68a8      	ldr	r0, [r5, #8]
 800f94c:	f002 fe8f 	bl	801266e <memcpy>
 800f950:	68ab      	ldr	r3, [r5, #8]
 800f952:	6928      	ldr	r0, [r5, #16]
 800f954:	4423      	add	r3, r4
 800f956:	4420      	add	r0, r4
 800f958:	1b36      	subs	r6, r6, r4
 800f95a:	60ab      	str	r3, [r5, #8]
 800f95c:	6128      	str	r0, [r5, #16]
 800f95e:	4631      	mov	r1, r6
 800f960:	2201      	movs	r2, #1
 800f962:	4628      	mov	r0, r5
 800f964:	f7fb fa8c 	bl	800ae80 <ucdr_check_final_buffer_behavior_array>
 800f968:	1bb9      	subs	r1, r7, r6
 800f96a:	4441      	add	r1, r8
 800f96c:	4604      	mov	r4, r0
 800f96e:	4602      	mov	r2, r0
 800f970:	2800      	cmp	r0, #0
 800f972:	d1ea      	bne.n	800f94a <ucdr_serialize_endian_array_char+0x16>
 800f974:	2301      	movs	r3, #1
 800f976:	7da8      	ldrb	r0, [r5, #22]
 800f978:	756b      	strb	r3, [r5, #21]
 800f97a:	4058      	eors	r0, r3
 800f97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f980:	463a      	mov	r2, r7
 800f982:	68a8      	ldr	r0, [r5, #8]
 800f984:	4641      	mov	r1, r8
 800f986:	f002 fe72 	bl	801266e <memcpy>
 800f98a:	68aa      	ldr	r2, [r5, #8]
 800f98c:	692b      	ldr	r3, [r5, #16]
 800f98e:	443a      	add	r2, r7
 800f990:	443b      	add	r3, r7
 800f992:	60aa      	str	r2, [r5, #8]
 800f994:	612b      	str	r3, [r5, #16]
 800f996:	e7ed      	b.n	800f974 <ucdr_serialize_endian_array_char+0x40>

0800f998 <ucdr_deserialize_endian_array_char>:
 800f998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f99c:	4619      	mov	r1, r3
 800f99e:	461f      	mov	r7, r3
 800f9a0:	4605      	mov	r5, r0
 800f9a2:	4690      	mov	r8, r2
 800f9a4:	f7fb f9e4 	bl	800ad70 <ucdr_check_buffer_available_for>
 800f9a8:	b9e0      	cbnz	r0, 800f9e4 <ucdr_deserialize_endian_array_char+0x4c>
 800f9aa:	463e      	mov	r6, r7
 800f9ac:	e009      	b.n	800f9c2 <ucdr_deserialize_endian_array_char+0x2a>
 800f9ae:	68a9      	ldr	r1, [r5, #8]
 800f9b0:	f002 fe5d 	bl	801266e <memcpy>
 800f9b4:	68ab      	ldr	r3, [r5, #8]
 800f9b6:	6928      	ldr	r0, [r5, #16]
 800f9b8:	4423      	add	r3, r4
 800f9ba:	4420      	add	r0, r4
 800f9bc:	1b36      	subs	r6, r6, r4
 800f9be:	60ab      	str	r3, [r5, #8]
 800f9c0:	6128      	str	r0, [r5, #16]
 800f9c2:	2201      	movs	r2, #1
 800f9c4:	4631      	mov	r1, r6
 800f9c6:	4628      	mov	r0, r5
 800f9c8:	f7fb fa5a 	bl	800ae80 <ucdr_check_final_buffer_behavior_array>
 800f9cc:	4604      	mov	r4, r0
 800f9ce:	1bb8      	subs	r0, r7, r6
 800f9d0:	4440      	add	r0, r8
 800f9d2:	4622      	mov	r2, r4
 800f9d4:	2c00      	cmp	r4, #0
 800f9d6:	d1ea      	bne.n	800f9ae <ucdr_deserialize_endian_array_char+0x16>
 800f9d8:	2301      	movs	r3, #1
 800f9da:	7da8      	ldrb	r0, [r5, #22]
 800f9dc:	756b      	strb	r3, [r5, #21]
 800f9de:	4058      	eors	r0, r3
 800f9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9e4:	463a      	mov	r2, r7
 800f9e6:	68a9      	ldr	r1, [r5, #8]
 800f9e8:	4640      	mov	r0, r8
 800f9ea:	f002 fe40 	bl	801266e <memcpy>
 800f9ee:	68aa      	ldr	r2, [r5, #8]
 800f9f0:	692b      	ldr	r3, [r5, #16]
 800f9f2:	443a      	add	r2, r7
 800f9f4:	443b      	add	r3, r7
 800f9f6:	60aa      	str	r2, [r5, #8]
 800f9f8:	612b      	str	r3, [r5, #16]
 800f9fa:	e7ed      	b.n	800f9d8 <ucdr_deserialize_endian_array_char+0x40>

0800f9fc <ucdr_serialize_array_uint8_t>:
 800f9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa00:	4688      	mov	r8, r1
 800fa02:	4611      	mov	r1, r2
 800fa04:	4617      	mov	r7, r2
 800fa06:	4605      	mov	r5, r0
 800fa08:	f7fb f9b2 	bl	800ad70 <ucdr_check_buffer_available_for>
 800fa0c:	b9e0      	cbnz	r0, 800fa48 <ucdr_serialize_array_uint8_t+0x4c>
 800fa0e:	463e      	mov	r6, r7
 800fa10:	e009      	b.n	800fa26 <ucdr_serialize_array_uint8_t+0x2a>
 800fa12:	68a8      	ldr	r0, [r5, #8]
 800fa14:	f002 fe2b 	bl	801266e <memcpy>
 800fa18:	68aa      	ldr	r2, [r5, #8]
 800fa1a:	692b      	ldr	r3, [r5, #16]
 800fa1c:	4422      	add	r2, r4
 800fa1e:	4423      	add	r3, r4
 800fa20:	1b36      	subs	r6, r6, r4
 800fa22:	60aa      	str	r2, [r5, #8]
 800fa24:	612b      	str	r3, [r5, #16]
 800fa26:	4631      	mov	r1, r6
 800fa28:	2201      	movs	r2, #1
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	f7fb fa28 	bl	800ae80 <ucdr_check_final_buffer_behavior_array>
 800fa30:	1bb9      	subs	r1, r7, r6
 800fa32:	4441      	add	r1, r8
 800fa34:	4604      	mov	r4, r0
 800fa36:	4602      	mov	r2, r0
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	d1ea      	bne.n	800fa12 <ucdr_serialize_array_uint8_t+0x16>
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	7da8      	ldrb	r0, [r5, #22]
 800fa40:	756b      	strb	r3, [r5, #21]
 800fa42:	4058      	eors	r0, r3
 800fa44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa48:	463a      	mov	r2, r7
 800fa4a:	68a8      	ldr	r0, [r5, #8]
 800fa4c:	4641      	mov	r1, r8
 800fa4e:	f002 fe0e 	bl	801266e <memcpy>
 800fa52:	68aa      	ldr	r2, [r5, #8]
 800fa54:	692b      	ldr	r3, [r5, #16]
 800fa56:	443a      	add	r2, r7
 800fa58:	443b      	add	r3, r7
 800fa5a:	60aa      	str	r2, [r5, #8]
 800fa5c:	612b      	str	r3, [r5, #16]
 800fa5e:	e7ed      	b.n	800fa3c <ucdr_serialize_array_uint8_t+0x40>

0800fa60 <ucdr_serialize_endian_array_uint8_t>:
 800fa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa64:	4619      	mov	r1, r3
 800fa66:	461f      	mov	r7, r3
 800fa68:	4605      	mov	r5, r0
 800fa6a:	4690      	mov	r8, r2
 800fa6c:	f7fb f980 	bl	800ad70 <ucdr_check_buffer_available_for>
 800fa70:	b9e0      	cbnz	r0, 800faac <ucdr_serialize_endian_array_uint8_t+0x4c>
 800fa72:	463e      	mov	r6, r7
 800fa74:	e009      	b.n	800fa8a <ucdr_serialize_endian_array_uint8_t+0x2a>
 800fa76:	68a8      	ldr	r0, [r5, #8]
 800fa78:	f002 fdf9 	bl	801266e <memcpy>
 800fa7c:	68ab      	ldr	r3, [r5, #8]
 800fa7e:	6928      	ldr	r0, [r5, #16]
 800fa80:	4423      	add	r3, r4
 800fa82:	4420      	add	r0, r4
 800fa84:	1b36      	subs	r6, r6, r4
 800fa86:	60ab      	str	r3, [r5, #8]
 800fa88:	6128      	str	r0, [r5, #16]
 800fa8a:	4631      	mov	r1, r6
 800fa8c:	2201      	movs	r2, #1
 800fa8e:	4628      	mov	r0, r5
 800fa90:	f7fb f9f6 	bl	800ae80 <ucdr_check_final_buffer_behavior_array>
 800fa94:	1bb9      	subs	r1, r7, r6
 800fa96:	4441      	add	r1, r8
 800fa98:	4604      	mov	r4, r0
 800fa9a:	4602      	mov	r2, r0
 800fa9c:	2800      	cmp	r0, #0
 800fa9e:	d1ea      	bne.n	800fa76 <ucdr_serialize_endian_array_uint8_t+0x16>
 800faa0:	2301      	movs	r3, #1
 800faa2:	7da8      	ldrb	r0, [r5, #22]
 800faa4:	756b      	strb	r3, [r5, #21]
 800faa6:	4058      	eors	r0, r3
 800faa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faac:	463a      	mov	r2, r7
 800faae:	68a8      	ldr	r0, [r5, #8]
 800fab0:	4641      	mov	r1, r8
 800fab2:	f002 fddc 	bl	801266e <memcpy>
 800fab6:	68aa      	ldr	r2, [r5, #8]
 800fab8:	692b      	ldr	r3, [r5, #16]
 800faba:	443a      	add	r2, r7
 800fabc:	443b      	add	r3, r7
 800fabe:	60aa      	str	r2, [r5, #8]
 800fac0:	612b      	str	r3, [r5, #16]
 800fac2:	e7ed      	b.n	800faa0 <ucdr_serialize_endian_array_uint8_t+0x40>

0800fac4 <ucdr_deserialize_array_uint8_t>:
 800fac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fac8:	4688      	mov	r8, r1
 800faca:	4611      	mov	r1, r2
 800facc:	4617      	mov	r7, r2
 800face:	4605      	mov	r5, r0
 800fad0:	f7fb f94e 	bl	800ad70 <ucdr_check_buffer_available_for>
 800fad4:	b9e0      	cbnz	r0, 800fb10 <ucdr_deserialize_array_uint8_t+0x4c>
 800fad6:	463e      	mov	r6, r7
 800fad8:	e009      	b.n	800faee <ucdr_deserialize_array_uint8_t+0x2a>
 800fada:	68a9      	ldr	r1, [r5, #8]
 800fadc:	f002 fdc7 	bl	801266e <memcpy>
 800fae0:	68aa      	ldr	r2, [r5, #8]
 800fae2:	692b      	ldr	r3, [r5, #16]
 800fae4:	4422      	add	r2, r4
 800fae6:	4423      	add	r3, r4
 800fae8:	1b36      	subs	r6, r6, r4
 800faea:	60aa      	str	r2, [r5, #8]
 800faec:	612b      	str	r3, [r5, #16]
 800faee:	2201      	movs	r2, #1
 800faf0:	4631      	mov	r1, r6
 800faf2:	4628      	mov	r0, r5
 800faf4:	f7fb f9c4 	bl	800ae80 <ucdr_check_final_buffer_behavior_array>
 800faf8:	4604      	mov	r4, r0
 800fafa:	1bb8      	subs	r0, r7, r6
 800fafc:	4440      	add	r0, r8
 800fafe:	4622      	mov	r2, r4
 800fb00:	2c00      	cmp	r4, #0
 800fb02:	d1ea      	bne.n	800fada <ucdr_deserialize_array_uint8_t+0x16>
 800fb04:	2301      	movs	r3, #1
 800fb06:	7da8      	ldrb	r0, [r5, #22]
 800fb08:	756b      	strb	r3, [r5, #21]
 800fb0a:	4058      	eors	r0, r3
 800fb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb10:	463a      	mov	r2, r7
 800fb12:	68a9      	ldr	r1, [r5, #8]
 800fb14:	4640      	mov	r0, r8
 800fb16:	f002 fdaa 	bl	801266e <memcpy>
 800fb1a:	68aa      	ldr	r2, [r5, #8]
 800fb1c:	692b      	ldr	r3, [r5, #16]
 800fb1e:	443a      	add	r2, r7
 800fb20:	443b      	add	r3, r7
 800fb22:	60aa      	str	r2, [r5, #8]
 800fb24:	612b      	str	r3, [r5, #16]
 800fb26:	e7ed      	b.n	800fb04 <ucdr_deserialize_array_uint8_t+0x40>

0800fb28 <ucdr_deserialize_endian_array_uint8_t>:
 800fb28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	461f      	mov	r7, r3
 800fb30:	4605      	mov	r5, r0
 800fb32:	4690      	mov	r8, r2
 800fb34:	f7fb f91c 	bl	800ad70 <ucdr_check_buffer_available_for>
 800fb38:	b9e0      	cbnz	r0, 800fb74 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800fb3a:	463e      	mov	r6, r7
 800fb3c:	e009      	b.n	800fb52 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800fb3e:	68a9      	ldr	r1, [r5, #8]
 800fb40:	f002 fd95 	bl	801266e <memcpy>
 800fb44:	68ab      	ldr	r3, [r5, #8]
 800fb46:	6928      	ldr	r0, [r5, #16]
 800fb48:	4423      	add	r3, r4
 800fb4a:	4420      	add	r0, r4
 800fb4c:	1b36      	subs	r6, r6, r4
 800fb4e:	60ab      	str	r3, [r5, #8]
 800fb50:	6128      	str	r0, [r5, #16]
 800fb52:	2201      	movs	r2, #1
 800fb54:	4631      	mov	r1, r6
 800fb56:	4628      	mov	r0, r5
 800fb58:	f7fb f992 	bl	800ae80 <ucdr_check_final_buffer_behavior_array>
 800fb5c:	4604      	mov	r4, r0
 800fb5e:	1bb8      	subs	r0, r7, r6
 800fb60:	4440      	add	r0, r8
 800fb62:	4622      	mov	r2, r4
 800fb64:	2c00      	cmp	r4, #0
 800fb66:	d1ea      	bne.n	800fb3e <ucdr_deserialize_endian_array_uint8_t+0x16>
 800fb68:	2301      	movs	r3, #1
 800fb6a:	7da8      	ldrb	r0, [r5, #22]
 800fb6c:	756b      	strb	r3, [r5, #21]
 800fb6e:	4058      	eors	r0, r3
 800fb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb74:	463a      	mov	r2, r7
 800fb76:	68a9      	ldr	r1, [r5, #8]
 800fb78:	4640      	mov	r0, r8
 800fb7a:	f002 fd78 	bl	801266e <memcpy>
 800fb7e:	68aa      	ldr	r2, [r5, #8]
 800fb80:	692b      	ldr	r3, [r5, #16]
 800fb82:	443a      	add	r2, r7
 800fb84:	443b      	add	r3, r7
 800fb86:	60aa      	str	r2, [r5, #8]
 800fb88:	612b      	str	r3, [r5, #16]
 800fb8a:	e7ed      	b.n	800fb68 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800fb8c <ucdr_serialize_sequence_char>:
 800fb8c:	b570      	push	{r4, r5, r6, lr}
 800fb8e:	4615      	mov	r5, r2
 800fb90:	460e      	mov	r6, r1
 800fb92:	7d01      	ldrb	r1, [r0, #20]
 800fb94:	4604      	mov	r4, r0
 800fb96:	f7fa fc41 	bl	800a41c <ucdr_serialize_endian_uint32_t>
 800fb9a:	b90d      	cbnz	r5, 800fba0 <ucdr_serialize_sequence_char+0x14>
 800fb9c:	2001      	movs	r0, #1
 800fb9e:	bd70      	pop	{r4, r5, r6, pc}
 800fba0:	7d21      	ldrb	r1, [r4, #20]
 800fba2:	462b      	mov	r3, r5
 800fba4:	4632      	mov	r2, r6
 800fba6:	4620      	mov	r0, r4
 800fba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fbac:	f7ff bec2 	b.w	800f934 <ucdr_serialize_endian_array_char>

0800fbb0 <ucdr_deserialize_sequence_char>:
 800fbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbb4:	461d      	mov	r5, r3
 800fbb6:	4616      	mov	r6, r2
 800fbb8:	460f      	mov	r7, r1
 800fbba:	461a      	mov	r2, r3
 800fbbc:	7d01      	ldrb	r1, [r0, #20]
 800fbbe:	4604      	mov	r4, r0
 800fbc0:	f7fa fd54 	bl	800a66c <ucdr_deserialize_endian_uint32_t>
 800fbc4:	682b      	ldr	r3, [r5, #0]
 800fbc6:	429e      	cmp	r6, r3
 800fbc8:	bf3c      	itt	cc
 800fbca:	2201      	movcc	r2, #1
 800fbcc:	75a2      	strbcc	r2, [r4, #22]
 800fbce:	b913      	cbnz	r3, 800fbd6 <ucdr_deserialize_sequence_char+0x26>
 800fbd0:	2001      	movs	r0, #1
 800fbd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbd6:	7d21      	ldrb	r1, [r4, #20]
 800fbd8:	463a      	mov	r2, r7
 800fbda:	4620      	mov	r0, r4
 800fbdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbe0:	f7ff beda 	b.w	800f998 <ucdr_deserialize_endian_array_char>

0800fbe4 <ucdr_serialize_sequence_uint8_t>:
 800fbe4:	b570      	push	{r4, r5, r6, lr}
 800fbe6:	4615      	mov	r5, r2
 800fbe8:	460e      	mov	r6, r1
 800fbea:	7d01      	ldrb	r1, [r0, #20]
 800fbec:	4604      	mov	r4, r0
 800fbee:	f7fa fc15 	bl	800a41c <ucdr_serialize_endian_uint32_t>
 800fbf2:	b90d      	cbnz	r5, 800fbf8 <ucdr_serialize_sequence_uint8_t+0x14>
 800fbf4:	2001      	movs	r0, #1
 800fbf6:	bd70      	pop	{r4, r5, r6, pc}
 800fbf8:	7d21      	ldrb	r1, [r4, #20]
 800fbfa:	462b      	mov	r3, r5
 800fbfc:	4632      	mov	r2, r6
 800fbfe:	4620      	mov	r0, r4
 800fc00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc04:	f7ff bf2c 	b.w	800fa60 <ucdr_serialize_endian_array_uint8_t>

0800fc08 <ucdr_deserialize_sequence_uint8_t>:
 800fc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc0c:	461d      	mov	r5, r3
 800fc0e:	4616      	mov	r6, r2
 800fc10:	460f      	mov	r7, r1
 800fc12:	461a      	mov	r2, r3
 800fc14:	7d01      	ldrb	r1, [r0, #20]
 800fc16:	4604      	mov	r4, r0
 800fc18:	f7fa fd28 	bl	800a66c <ucdr_deserialize_endian_uint32_t>
 800fc1c:	682b      	ldr	r3, [r5, #0]
 800fc1e:	429e      	cmp	r6, r3
 800fc20:	bf3c      	itt	cc
 800fc22:	2201      	movcc	r2, #1
 800fc24:	75a2      	strbcc	r2, [r4, #22]
 800fc26:	b913      	cbnz	r3, 800fc2e <ucdr_deserialize_sequence_uint8_t+0x26>
 800fc28:	2001      	movs	r0, #1
 800fc2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc2e:	7d21      	ldrb	r1, [r4, #20]
 800fc30:	463a      	mov	r2, r7
 800fc32:	4620      	mov	r0, r4
 800fc34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc38:	f7ff bf76 	b.w	800fb28 <ucdr_deserialize_endian_array_uint8_t>

0800fc3c <ucdr_serialize_string>:
 800fc3c:	b510      	push	{r4, lr}
 800fc3e:	b082      	sub	sp, #8
 800fc40:	4604      	mov	r4, r0
 800fc42:	4608      	mov	r0, r1
 800fc44:	9101      	str	r1, [sp, #4]
 800fc46:	f7f0 fad5 	bl	80001f4 <strlen>
 800fc4a:	9901      	ldr	r1, [sp, #4]
 800fc4c:	1c42      	adds	r2, r0, #1
 800fc4e:	4620      	mov	r0, r4
 800fc50:	b002      	add	sp, #8
 800fc52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc56:	f7ff bf99 	b.w	800fb8c <ucdr_serialize_sequence_char>
 800fc5a:	bf00      	nop

0800fc5c <ucdr_deserialize_string>:
 800fc5c:	b500      	push	{lr}
 800fc5e:	b083      	sub	sp, #12
 800fc60:	ab01      	add	r3, sp, #4
 800fc62:	f7ff ffa5 	bl	800fbb0 <ucdr_deserialize_sequence_char>
 800fc66:	b003      	add	sp, #12
 800fc68:	f85d fb04 	ldr.w	pc, [sp], #4

0800fc6c <get_custom_error>:
 800fc6c:	4b01      	ldr	r3, [pc, #4]	; (800fc74 <get_custom_error+0x8>)
 800fc6e:	7818      	ldrb	r0, [r3, #0]
 800fc70:	4770      	bx	lr
 800fc72:	bf00      	nop
 800fc74:	20012540 	.word	0x20012540

0800fc78 <recv_custom_msg>:
 800fc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc7c:	4693      	mov	fp, r2
 800fc7e:	b089      	sub	sp, #36	; 0x24
 800fc80:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 800fc84:	9305      	str	r3, [sp, #20]
 800fc86:	468a      	mov	sl, r1
 800fc88:	2100      	movs	r1, #0
 800fc8a:	4604      	mov	r4, r0
 800fc8c:	f88d 101e 	strb.w	r1, [sp, #30]
 800fc90:	b322      	cbz	r2, 800fcdc <recv_custom_msg+0x64>
 800fc92:	f200 2902 	addw	r9, r0, #514	; 0x202
 800fc96:	f10d 081f 	add.w	r8, sp, #31
 800fc9a:	af05      	add	r7, sp, #20
 800fc9c:	f10d 061e 	add.w	r6, sp, #30
 800fca0:	f44f 7500 	mov.w	r5, #512	; 0x200
 800fca4:	e002      	b.n	800fcac <recv_custom_msg+0x34>
 800fca6:	9b05      	ldr	r3, [sp, #20]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	dd0f      	ble.n	800fccc <recv_custom_msg+0x54>
 800fcac:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 800fcb0:	4623      	mov	r3, r4
 800fcb2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800fcb6:	e9cd 5600 	strd	r5, r6, [sp]
 800fcba:	4622      	mov	r2, r4
 800fcbc:	4648      	mov	r0, r9
 800fcbe:	f001 f8f3 	bl	8010ea8 <uxr_read_framed_msg>
 800fcc2:	2800      	cmp	r0, #0
 800fcc4:	d0ef      	beq.n	800fca6 <recv_custom_msg+0x2e>
 800fcc6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fcca:	b1b3      	cbz	r3, 800fcfa <recv_custom_msg+0x82>
 800fccc:	4b0f      	ldr	r3, [pc, #60]	; (800fd0c <recv_custom_msg+0x94>)
 800fcce:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800fcd2:	701a      	strb	r2, [r3, #0]
 800fcd4:	2000      	movs	r0, #0
 800fcd6:	b009      	add	sp, #36	; 0x24
 800fcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcdc:	f10d 021f 	add.w	r2, sp, #31
 800fce0:	9200      	str	r2, [sp, #0]
 800fce2:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 800fce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fcea:	4601      	mov	r1, r0
 800fcec:	47a8      	blx	r5
 800fcee:	2800      	cmp	r0, #0
 800fcf0:	d0ec      	beq.n	800fccc <recv_custom_msg+0x54>
 800fcf2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d1e8      	bne.n	800fccc <recv_custom_msg+0x54>
 800fcfa:	f8cb 0000 	str.w	r0, [fp]
 800fcfe:	2001      	movs	r0, #1
 800fd00:	f8ca 4000 	str.w	r4, [sl]
 800fd04:	b009      	add	sp, #36	; 0x24
 800fd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd0a:	bf00      	nop
 800fd0c:	20012540 	.word	0x20012540

0800fd10 <send_custom_msg>:
 800fd10:	b530      	push	{r4, r5, lr}
 800fd12:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 800fd16:	b087      	sub	sp, #28
 800fd18:	4615      	mov	r5, r2
 800fd1a:	b974      	cbnz	r4, 800fd3a <send_custom_msg+0x2a>
 800fd1c:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 800fd20:	f10d 0317 	add.w	r3, sp, #23
 800fd24:	47a0      	blx	r4
 800fd26:	b108      	cbz	r0, 800fd2c <send_custom_msg+0x1c>
 800fd28:	42a8      	cmp	r0, r5
 800fd2a:	d015      	beq.n	800fd58 <send_custom_msg+0x48>
 800fd2c:	4b0c      	ldr	r3, [pc, #48]	; (800fd60 <send_custom_msg+0x50>)
 800fd2e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800fd32:	701a      	strb	r2, [r3, #0]
 800fd34:	2000      	movs	r0, #0
 800fd36:	b007      	add	sp, #28
 800fd38:	bd30      	pop	{r4, r5, pc}
 800fd3a:	460b      	mov	r3, r1
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	f10d 0117 	add.w	r1, sp, #23
 800fd42:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800fd46:	4602      	mov	r2, r0
 800fd48:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 800fd4c:	9500      	str	r5, [sp, #0]
 800fd4e:	f200 2002 	addw	r0, r0, #514	; 0x202
 800fd52:	f000 feb1 	bl	8010ab8 <uxr_write_framed_msg>
 800fd56:	e7e6      	b.n	800fd26 <send_custom_msg+0x16>
 800fd58:	2001      	movs	r0, #1
 800fd5a:	b007      	add	sp, #28
 800fd5c:	bd30      	pop	{r4, r5, pc}
 800fd5e:	bf00      	nop
 800fd60:	20012540 	.word	0x20012540

0800fd64 <uxr_set_custom_transport_callbacks>:
 800fd64:	b410      	push	{r4}
 800fd66:	9c01      	ldr	r4, [sp, #4]
 800fd68:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 800fd6c:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 800fd70:	9b02      	ldr	r3, [sp, #8]
 800fd72:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 800fd76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd7a:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 800fd7e:	4770      	bx	lr

0800fd80 <uxr_init_custom_transport>:
 800fd80:	b538      	push	{r3, r4, r5, lr}
 800fd82:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 800fd86:	b303      	cbz	r3, 800fdca <uxr_init_custom_transport+0x4a>
 800fd88:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800fd8c:	4604      	mov	r4, r0
 800fd8e:	b1e2      	cbz	r2, 800fdca <uxr_init_custom_transport+0x4a>
 800fd90:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800fd94:	b1ca      	cbz	r2, 800fdca <uxr_init_custom_transport+0x4a>
 800fd96:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 800fd9a:	b1b2      	cbz	r2, 800fdca <uxr_init_custom_transport+0x4a>
 800fd9c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 800fda0:	4798      	blx	r3
 800fda2:	4605      	mov	r5, r0
 800fda4:	b188      	cbz	r0, 800fdca <uxr_init_custom_transport+0x4a>
 800fda6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800fdaa:	b98b      	cbnz	r3, 800fdd0 <uxr_init_custom_transport+0x50>
 800fdac:	490b      	ldr	r1, [pc, #44]	; (800fddc <uxr_init_custom_transport+0x5c>)
 800fdae:	4b0c      	ldr	r3, [pc, #48]	; (800fde0 <uxr_init_custom_transport+0x60>)
 800fdb0:	4a0c      	ldr	r2, [pc, #48]	; (800fde4 <uxr_init_custom_transport+0x64>)
 800fdb2:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 800fdb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fdba:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 800fdbe:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 800fdc2:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	bd38      	pop	{r3, r4, r5, pc}
 800fdca:	2500      	movs	r5, #0
 800fdcc:	4628      	mov	r0, r5
 800fdce:	bd38      	pop	{r3, r4, r5, pc}
 800fdd0:	2100      	movs	r1, #0
 800fdd2:	f204 2002 	addw	r0, r4, #514	; 0x202
 800fdd6:	f000 fe69 	bl	8010aac <uxr_init_framing_io>
 800fdda:	e7e7      	b.n	800fdac <uxr_init_custom_transport+0x2c>
 800fddc:	0800fd11 	.word	0x0800fd11
 800fde0:	0800fc79 	.word	0x0800fc79
 800fde4:	0800fc6d 	.word	0x0800fc6d

0800fde8 <uxr_close_custom_transport>:
 800fde8:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800fdec:	4718      	bx	r3
 800fdee:	bf00      	nop

0800fdf0 <uxr_init_input_best_effort_stream>:
 800fdf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fdf4:	8003      	strh	r3, [r0, #0]
 800fdf6:	4770      	bx	lr

0800fdf8 <uxr_reset_input_best_effort_stream>:
 800fdf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fdfc:	8003      	strh	r3, [r0, #0]
 800fdfe:	4770      	bx	lr

0800fe00 <uxr_receive_best_effort_message>:
 800fe00:	b538      	push	{r3, r4, r5, lr}
 800fe02:	4604      	mov	r4, r0
 800fe04:	8800      	ldrh	r0, [r0, #0]
 800fe06:	460d      	mov	r5, r1
 800fe08:	f000 fe38 	bl	8010a7c <uxr_seq_num_cmp>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800fe14:	bfb8      	it	lt
 800fe16:	8025      	strhlt	r5, [r4, #0]
 800fe18:	bd38      	pop	{r3, r4, r5, pc}
 800fe1a:	bf00      	nop

0800fe1c <on_full_input_buffer>:
 800fe1c:	b570      	push	{r4, r5, r6, lr}
 800fe1e:	4605      	mov	r5, r0
 800fe20:	460c      	mov	r4, r1
 800fe22:	682b      	ldr	r3, [r5, #0]
 800fe24:	6809      	ldr	r1, [r1, #0]
 800fe26:	8920      	ldrh	r0, [r4, #8]
 800fe28:	6862      	ldr	r2, [r4, #4]
 800fe2a:	fbb2 f2f0 	udiv	r2, r2, r0
 800fe2e:	eba3 0c01 	sub.w	ip, r3, r1
 800fe32:	fbbc fcf2 	udiv	ip, ip, r2
 800fe36:	f10c 0c01 	add.w	ip, ip, #1
 800fe3a:	fa1f f38c 	uxth.w	r3, ip
 800fe3e:	fbb3 f6f0 	udiv	r6, r3, r0
 800fe42:	fb00 3316 	mls	r3, r0, r6, r3
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	fb02 f303 	mul.w	r3, r2, r3
 800fe4c:	1d18      	adds	r0, r3, #4
 800fe4e:	4408      	add	r0, r1
 800fe50:	7d26      	ldrb	r6, [r4, #20]
 800fe52:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800fe56:	b116      	cbz	r6, 800fe5e <on_full_input_buffer+0x42>
 800fe58:	2600      	movs	r6, #0
 800fe5a:	f840 6c04 	str.w	r6, [r0, #-4]
 800fe5e:	2a03      	cmp	r2, #3
 800fe60:	d801      	bhi.n	800fe66 <on_full_input_buffer+0x4a>
 800fe62:	2001      	movs	r0, #1
 800fe64:	bd70      	pop	{r4, r5, r6, pc}
 800fe66:	3308      	adds	r3, #8
 800fe68:	4419      	add	r1, r3
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	692b      	ldr	r3, [r5, #16]
 800fe6e:	3a04      	subs	r2, #4
 800fe70:	f7fa ffca 	bl	800ae08 <ucdr_init_buffer_origin>
 800fe74:	4628      	mov	r0, r5
 800fe76:	4903      	ldr	r1, [pc, #12]	; (800fe84 <on_full_input_buffer+0x68>)
 800fe78:	4622      	mov	r2, r4
 800fe7a:	f7fa ffa1 	bl	800adc0 <ucdr_set_on_full_buffer_callback>
 800fe7e:	2000      	movs	r0, #0
 800fe80:	bd70      	pop	{r4, r5, r6, pc}
 800fe82:	bf00      	nop
 800fe84:	0800fe1d 	.word	0x0800fe1d

0800fe88 <uxr_init_input_reliable_stream>:
 800fe88:	b500      	push	{lr}
 800fe8a:	e9c0 1200 	strd	r1, r2, [r0]
 800fe8e:	f04f 0e00 	mov.w	lr, #0
 800fe92:	9a01      	ldr	r2, [sp, #4]
 800fe94:	8103      	strh	r3, [r0, #8]
 800fe96:	6102      	str	r2, [r0, #16]
 800fe98:	f880 e014 	strb.w	lr, [r0, #20]
 800fe9c:	b1d3      	cbz	r3, 800fed4 <uxr_init_input_reliable_stream+0x4c>
 800fe9e:	f8c1 e000 	str.w	lr, [r1]
 800fea2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800fea6:	f1bc 0f01 	cmp.w	ip, #1
 800feaa:	d913      	bls.n	800fed4 <uxr_init_input_reliable_stream+0x4c>
 800feac:	2301      	movs	r3, #1
 800feae:	fbb3 f1fc 	udiv	r1, r3, ip
 800feb2:	fb0c 3111 	mls	r1, ip, r1, r3
 800feb6:	b289      	uxth	r1, r1
 800feb8:	6842      	ldr	r2, [r0, #4]
 800feba:	fbb2 f2fc 	udiv	r2, r2, ip
 800febe:	fb01 f202 	mul.w	r2, r1, r2
 800fec2:	6801      	ldr	r1, [r0, #0]
 800fec4:	f841 e002 	str.w	lr, [r1, r2]
 800fec8:	3301      	adds	r3, #1
 800feca:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800fece:	b29b      	uxth	r3, r3
 800fed0:	459c      	cmp	ip, r3
 800fed2:	d8ec      	bhi.n	800feae <uxr_init_input_reliable_stream+0x26>
 800fed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fed8:	60c3      	str	r3, [r0, #12]
 800feda:	f85d fb04 	ldr.w	pc, [sp], #4
 800fede:	bf00      	nop

0800fee0 <uxr_reset_input_reliable_stream>:
 800fee0:	8901      	ldrh	r1, [r0, #8]
 800fee2:	b1e9      	cbz	r1, 800ff20 <uxr_reset_input_reliable_stream+0x40>
 800fee4:	f04f 0c00 	mov.w	ip, #0
 800fee8:	b500      	push	{lr}
 800feea:	4663      	mov	r3, ip
 800feec:	46e6      	mov	lr, ip
 800feee:	fbb3 f2f1 	udiv	r2, r3, r1
 800fef2:	fb01 3312 	mls	r3, r1, r2, r3
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	6842      	ldr	r2, [r0, #4]
 800fefa:	fbb2 f2f1 	udiv	r2, r2, r1
 800fefe:	fb02 f303 	mul.w	r3, r2, r3
 800ff02:	6802      	ldr	r2, [r0, #0]
 800ff04:	f842 e003 	str.w	lr, [r2, r3]
 800ff08:	f10c 0c01 	add.w	ip, ip, #1
 800ff0c:	8901      	ldrh	r1, [r0, #8]
 800ff0e:	fa1f f38c 	uxth.w	r3, ip
 800ff12:	4299      	cmp	r1, r3
 800ff14:	d8eb      	bhi.n	800feee <uxr_reset_input_reliable_stream+0xe>
 800ff16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff1a:	60c3      	str	r3, [r0, #12]
 800ff1c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ff20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff24:	60c3      	str	r3, [r0, #12]
 800ff26:	4770      	bx	lr

0800ff28 <uxr_receive_reliable_message>:
 800ff28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff2c:	4604      	mov	r4, r0
 800ff2e:	460d      	mov	r5, r1
 800ff30:	8901      	ldrh	r1, [r0, #8]
 800ff32:	8980      	ldrh	r0, [r0, #12]
 800ff34:	4690      	mov	r8, r2
 800ff36:	461f      	mov	r7, r3
 800ff38:	f000 fd98 	bl	8010a6c <uxr_seq_num_add>
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	4606      	mov	r6, r0
 800ff40:	89a0      	ldrh	r0, [r4, #12]
 800ff42:	f000 fd9b 	bl	8010a7c <uxr_seq_num_cmp>
 800ff46:	2800      	cmp	r0, #0
 800ff48:	db0a      	blt.n	800ff60 <uxr_receive_reliable_message+0x38>
 800ff4a:	2600      	movs	r6, #0
 800ff4c:	89e0      	ldrh	r0, [r4, #14]
 800ff4e:	4629      	mov	r1, r5
 800ff50:	f000 fd94 	bl	8010a7c <uxr_seq_num_cmp>
 800ff54:	2800      	cmp	r0, #0
 800ff56:	da00      	bge.n	800ff5a <uxr_receive_reliable_message+0x32>
 800ff58:	81e5      	strh	r5, [r4, #14]
 800ff5a:	4630      	mov	r0, r6
 800ff5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff60:	4630      	mov	r0, r6
 800ff62:	4629      	mov	r1, r5
 800ff64:	f000 fd8a 	bl	8010a7c <uxr_seq_num_cmp>
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	dbee      	blt.n	800ff4a <uxr_receive_reliable_message+0x22>
 800ff6c:	6923      	ldr	r3, [r4, #16]
 800ff6e:	4640      	mov	r0, r8
 800ff70:	4798      	blx	r3
 800ff72:	2101      	movs	r1, #1
 800ff74:	4681      	mov	r9, r0
 800ff76:	89a0      	ldrh	r0, [r4, #12]
 800ff78:	f000 fd78 	bl	8010a6c <uxr_seq_num_add>
 800ff7c:	f1b9 0f00 	cmp.w	r9, #0
 800ff80:	d101      	bne.n	800ff86 <uxr_receive_reliable_message+0x5e>
 800ff82:	4285      	cmp	r5, r0
 800ff84:	d047      	beq.n	8010016 <uxr_receive_reliable_message+0xee>
 800ff86:	8922      	ldrh	r2, [r4, #8]
 800ff88:	fbb5 f0f2 	udiv	r0, r5, r2
 800ff8c:	fb02 5010 	mls	r0, r2, r0, r5
 800ff90:	b280      	uxth	r0, r0
 800ff92:	6863      	ldr	r3, [r4, #4]
 800ff94:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff98:	fb00 f303 	mul.w	r3, r0, r3
 800ff9c:	6820      	ldr	r0, [r4, #0]
 800ff9e:	3304      	adds	r3, #4
 800ffa0:	4418      	add	r0, r3
 800ffa2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d1cf      	bne.n	800ff4a <uxr_receive_reliable_message+0x22>
 800ffaa:	4641      	mov	r1, r8
 800ffac:	463a      	mov	r2, r7
 800ffae:	f002 fb5e 	bl	801266e <memcpy>
 800ffb2:	8921      	ldrh	r1, [r4, #8]
 800ffb4:	fbb5 f2f1 	udiv	r2, r5, r1
 800ffb8:	fb01 5212 	mls	r2, r1, r2, r5
 800ffbc:	b292      	uxth	r2, r2
 800ffbe:	6863      	ldr	r3, [r4, #4]
 800ffc0:	fbb3 f3f1 	udiv	r3, r3, r1
 800ffc4:	fb02 f303 	mul.w	r3, r2, r3
 800ffc8:	6822      	ldr	r2, [r4, #0]
 800ffca:	50d7      	str	r7, [r2, r3]
 800ffcc:	9a08      	ldr	r2, [sp, #32]
 800ffce:	2301      	movs	r3, #1
 800ffd0:	7013      	strb	r3, [r2, #0]
 800ffd2:	f1b9 0f00 	cmp.w	r9, #0
 800ffd6:	d0b8      	beq.n	800ff4a <uxr_receive_reliable_message+0x22>
 800ffd8:	89a6      	ldrh	r6, [r4, #12]
 800ffda:	4630      	mov	r0, r6
 800ffdc:	2101      	movs	r1, #1
 800ffde:	f000 fd45 	bl	8010a6c <uxr_seq_num_add>
 800ffe2:	8922      	ldrh	r2, [r4, #8]
 800ffe4:	6863      	ldr	r3, [r4, #4]
 800ffe6:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffea:	4606      	mov	r6, r0
 800ffec:	fbb0 f0f2 	udiv	r0, r0, r2
 800fff0:	fb02 6010 	mls	r0, r2, r0, r6
 800fff4:	b280      	uxth	r0, r0
 800fff6:	fb00 f303 	mul.w	r3, r0, r3
 800fffa:	6820      	ldr	r0, [r4, #0]
 800fffc:	3304      	adds	r3, #4
 800fffe:	4418      	add	r0, r3
 8010000:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d0a0      	beq.n	800ff4a <uxr_receive_reliable_message+0x22>
 8010008:	6923      	ldr	r3, [r4, #16]
 801000a:	4798      	blx	r3
 801000c:	2802      	cmp	r0, #2
 801000e:	d008      	beq.n	8010022 <uxr_receive_reliable_message+0xfa>
 8010010:	2801      	cmp	r0, #1
 8010012:	d0e2      	beq.n	800ffda <uxr_receive_reliable_message+0xb2>
 8010014:	e799      	b.n	800ff4a <uxr_receive_reliable_message+0x22>
 8010016:	9b08      	ldr	r3, [sp, #32]
 8010018:	81a5      	strh	r5, [r4, #12]
 801001a:	2601      	movs	r6, #1
 801001c:	f883 9000 	strb.w	r9, [r3]
 8010020:	e794      	b.n	800ff4c <uxr_receive_reliable_message+0x24>
 8010022:	2601      	movs	r6, #1
 8010024:	e792      	b.n	800ff4c <uxr_receive_reliable_message+0x24>
 8010026:	bf00      	nop

08010028 <uxr_next_input_reliable_buffer_available>:
 8010028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801002c:	4604      	mov	r4, r0
 801002e:	460f      	mov	r7, r1
 8010030:	8980      	ldrh	r0, [r0, #12]
 8010032:	2101      	movs	r1, #1
 8010034:	4690      	mov	r8, r2
 8010036:	f000 fd19 	bl	8010a6c <uxr_seq_num_add>
 801003a:	8922      	ldrh	r2, [r4, #8]
 801003c:	fbb0 f6f2 	udiv	r6, r0, r2
 8010040:	fb02 0616 	mls	r6, r2, r6, r0
 8010044:	b2b6      	uxth	r6, r6
 8010046:	6863      	ldr	r3, [r4, #4]
 8010048:	fbb3 f3f2 	udiv	r3, r3, r2
 801004c:	fb06 f303 	mul.w	r3, r6, r3
 8010050:	6826      	ldr	r6, [r4, #0]
 8010052:	3304      	adds	r3, #4
 8010054:	441e      	add	r6, r3
 8010056:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801005a:	f1b9 0f00 	cmp.w	r9, #0
 801005e:	d023      	beq.n	80100a8 <uxr_next_input_reliable_buffer_available+0x80>
 8010060:	6923      	ldr	r3, [r4, #16]
 8010062:	4605      	mov	r5, r0
 8010064:	4630      	mov	r0, r6
 8010066:	4798      	blx	r3
 8010068:	4682      	mov	sl, r0
 801006a:	b300      	cbz	r0, 80100ae <uxr_next_input_reliable_buffer_available+0x86>
 801006c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8010070:	2101      	movs	r1, #1
 8010072:	4650      	mov	r0, sl
 8010074:	f000 fcfa 	bl	8010a6c <uxr_seq_num_add>
 8010078:	8921      	ldrh	r1, [r4, #8]
 801007a:	fbb0 f2f1 	udiv	r2, r0, r1
 801007e:	4682      	mov	sl, r0
 8010080:	fb01 0212 	mls	r2, r1, r2, r0
 8010084:	e9d4 0300 	ldrd	r0, r3, [r4]
 8010088:	b292      	uxth	r2, r2
 801008a:	fbb3 f3f1 	udiv	r3, r3, r1
 801008e:	fb02 f303 	mul.w	r3, r2, r3
 8010092:	3304      	adds	r3, #4
 8010094:	4418      	add	r0, r3
 8010096:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801009a:	b12b      	cbz	r3, 80100a8 <uxr_next_input_reliable_buffer_available+0x80>
 801009c:	6923      	ldr	r3, [r4, #16]
 801009e:	4798      	blx	r3
 80100a0:	2802      	cmp	r0, #2
 80100a2:	d01b      	beq.n	80100dc <uxr_next_input_reliable_buffer_available+0xb4>
 80100a4:	2801      	cmp	r0, #1
 80100a6:	d0e3      	beq.n	8010070 <uxr_next_input_reliable_buffer_available+0x48>
 80100a8:	2000      	movs	r0, #0
 80100aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100ae:	464a      	mov	r2, r9
 80100b0:	4631      	mov	r1, r6
 80100b2:	4638      	mov	r0, r7
 80100b4:	f7fa feb0 	bl	800ae18 <ucdr_init_buffer>
 80100b8:	8921      	ldrh	r1, [r4, #8]
 80100ba:	fbb5 f2f1 	udiv	r2, r5, r1
 80100be:	fb01 5212 	mls	r2, r1, r2, r5
 80100c2:	b292      	uxth	r2, r2
 80100c4:	6863      	ldr	r3, [r4, #4]
 80100c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80100ca:	fb02 f303 	mul.w	r3, r2, r3
 80100ce:	6822      	ldr	r2, [r4, #0]
 80100d0:	f842 a003 	str.w	sl, [r2, r3]
 80100d4:	2001      	movs	r0, #1
 80100d6:	81a5      	strh	r5, [r4, #12]
 80100d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100dc:	8920      	ldrh	r0, [r4, #8]
 80100de:	fbb5 f3f0 	udiv	r3, r5, r0
 80100e2:	fb00 5513 	mls	r5, r0, r3, r5
 80100e6:	b2ad      	uxth	r5, r5
 80100e8:	6863      	ldr	r3, [r4, #4]
 80100ea:	fbb3 f3f0 	udiv	r3, r3, r0
 80100ee:	fb03 f505 	mul.w	r5, r3, r5
 80100f2:	6823      	ldr	r3, [r4, #0]
 80100f4:	2000      	movs	r0, #0
 80100f6:	5158      	str	r0, [r3, r5]
 80100f8:	eb06 0108 	add.w	r1, r6, r8
 80100fc:	eba9 0208 	sub.w	r2, r9, r8
 8010100:	4638      	mov	r0, r7
 8010102:	f7fa fe89 	bl	800ae18 <ucdr_init_buffer>
 8010106:	4638      	mov	r0, r7
 8010108:	4903      	ldr	r1, [pc, #12]	; (8010118 <uxr_next_input_reliable_buffer_available+0xf0>)
 801010a:	4622      	mov	r2, r4
 801010c:	f7fa fe58 	bl	800adc0 <ucdr_set_on_full_buffer_callback>
 8010110:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8010114:	2001      	movs	r0, #1
 8010116:	e7c8      	b.n	80100aa <uxr_next_input_reliable_buffer_available+0x82>
 8010118:	0800fe1d 	.word	0x0800fe1d

0801011c <uxr_process_heartbeat>:
 801011c:	b538      	push	{r3, r4, r5, lr}
 801011e:	4611      	mov	r1, r2
 8010120:	4604      	mov	r4, r0
 8010122:	89c0      	ldrh	r0, [r0, #14]
 8010124:	4615      	mov	r5, r2
 8010126:	f000 fca9 	bl	8010a7c <uxr_seq_num_cmp>
 801012a:	2800      	cmp	r0, #0
 801012c:	bfb8      	it	lt
 801012e:	81e5      	strhlt	r5, [r4, #14]
 8010130:	bd38      	pop	{r3, r4, r5, pc}
 8010132:	bf00      	nop

08010134 <uxr_compute_acknack>:
 8010134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010138:	8903      	ldrh	r3, [r0, #8]
 801013a:	8985      	ldrh	r5, [r0, #12]
 801013c:	4604      	mov	r4, r0
 801013e:	460e      	mov	r6, r1
 8010140:	b1d3      	cbz	r3, 8010178 <uxr_compute_acknack+0x44>
 8010142:	4628      	mov	r0, r5
 8010144:	2701      	movs	r7, #1
 8010146:	e003      	b.n	8010150 <uxr_compute_acknack+0x1c>
 8010148:	4567      	cmp	r7, ip
 801014a:	d215      	bcs.n	8010178 <uxr_compute_acknack+0x44>
 801014c:	89a0      	ldrh	r0, [r4, #12]
 801014e:	3701      	adds	r7, #1
 8010150:	b2b9      	uxth	r1, r7
 8010152:	f000 fc8b 	bl	8010a6c <uxr_seq_num_add>
 8010156:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801015a:	fbb0 f3fc 	udiv	r3, r0, ip
 801015e:	fb0c 0313 	mls	r3, ip, r3, r0
 8010162:	b29a      	uxth	r2, r3
 8010164:	e9d4 1300 	ldrd	r1, r3, [r4]
 8010168:	fbb3 f3fc 	udiv	r3, r3, ip
 801016c:	fb02 f303 	mul.w	r3, r2, r3
 8010170:	58cb      	ldr	r3, [r1, r3]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d1e8      	bne.n	8010148 <uxr_compute_acknack+0x14>
 8010176:	4605      	mov	r5, r0
 8010178:	8035      	strh	r5, [r6, #0]
 801017a:	2101      	movs	r1, #1
 801017c:	4628      	mov	r0, r5
 801017e:	89e7      	ldrh	r7, [r4, #14]
 8010180:	f000 fc78 	bl	8010a74 <uxr_seq_num_sub>
 8010184:	4601      	mov	r1, r0
 8010186:	4638      	mov	r0, r7
 8010188:	f000 fc74 	bl	8010a74 <uxr_seq_num_sub>
 801018c:	4605      	mov	r5, r0
 801018e:	b318      	cbz	r0, 80101d8 <uxr_compute_acknack+0xa4>
 8010190:	f04f 0900 	mov.w	r9, #0
 8010194:	464f      	mov	r7, r9
 8010196:	f04f 0801 	mov.w	r8, #1
 801019a:	fa1f f189 	uxth.w	r1, r9
 801019e:	8830      	ldrh	r0, [r6, #0]
 80101a0:	f000 fc64 	bl	8010a6c <uxr_seq_num_add>
 80101a4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80101a8:	fbb0 f3fc 	udiv	r3, r0, ip
 80101ac:	e9d4 1200 	ldrd	r1, r2, [r4]
 80101b0:	fb03 001c 	mls	r0, r3, ip, r0
 80101b4:	b283      	uxth	r3, r0
 80101b6:	fbb2 f2fc 	udiv	r2, r2, ip
 80101ba:	fb02 f303 	mul.w	r3, r2, r3
 80101be:	fa08 f209 	lsl.w	r2, r8, r9
 80101c2:	58cb      	ldr	r3, [r1, r3]
 80101c4:	f109 0901 	add.w	r9, r9, #1
 80101c8:	b90b      	cbnz	r3, 80101ce <uxr_compute_acknack+0x9a>
 80101ca:	4317      	orrs	r7, r2
 80101cc:	b2bf      	uxth	r7, r7
 80101ce:	454d      	cmp	r5, r9
 80101d0:	d1e3      	bne.n	801019a <uxr_compute_acknack+0x66>
 80101d2:	4638      	mov	r0, r7
 80101d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101d8:	4607      	mov	r7, r0
 80101da:	4638      	mov	r0, r7
 80101dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080101e0 <uxr_init_output_best_effort_stream>:
 80101e0:	f64f 7cff 	movw	ip, #65535	; 0xffff
 80101e4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80101e8:	6001      	str	r1, [r0, #0]
 80101ea:	7303      	strb	r3, [r0, #12]
 80101ec:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80101f0:	4770      	bx	lr
 80101f2:	bf00      	nop

080101f4 <uxr_reset_output_best_effort_stream>:
 80101f4:	7b02      	ldrb	r2, [r0, #12]
 80101f6:	6042      	str	r2, [r0, #4]
 80101f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80101fc:	81c3      	strh	r3, [r0, #14]
 80101fe:	4770      	bx	lr

08010200 <uxr_prepare_best_effort_buffer_to_write>:
 8010200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010202:	4604      	mov	r4, r0
 8010204:	b083      	sub	sp, #12
 8010206:	6840      	ldr	r0, [r0, #4]
 8010208:	460d      	mov	r5, r1
 801020a:	4616      	mov	r6, r2
 801020c:	f7fc f9ce 	bl	800c5ac <uxr_submessage_padding>
 8010210:	6863      	ldr	r3, [r4, #4]
 8010212:	4418      	add	r0, r3
 8010214:	68a3      	ldr	r3, [r4, #8]
 8010216:	1942      	adds	r2, r0, r5
 8010218:	4293      	cmp	r3, r2
 801021a:	bf2c      	ite	cs
 801021c:	2701      	movcs	r7, #1
 801021e:	2700      	movcc	r7, #0
 8010220:	d202      	bcs.n	8010228 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8010222:	4638      	mov	r0, r7
 8010224:	b003      	add	sp, #12
 8010226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010228:	9000      	str	r0, [sp, #0]
 801022a:	6821      	ldr	r1, [r4, #0]
 801022c:	4630      	mov	r0, r6
 801022e:	2300      	movs	r3, #0
 8010230:	f7fa fde0 	bl	800adf4 <ucdr_init_buffer_origin_offset>
 8010234:	6861      	ldr	r1, [r4, #4]
 8010236:	4638      	mov	r0, r7
 8010238:	4429      	add	r1, r5
 801023a:	6061      	str	r1, [r4, #4]
 801023c:	b003      	add	sp, #12
 801023e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010240 <uxr_prepare_best_effort_buffer_to_send>:
 8010240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010244:	4604      	mov	r4, r0
 8010246:	461d      	mov	r5, r3
 8010248:	6840      	ldr	r0, [r0, #4]
 801024a:	7b23      	ldrb	r3, [r4, #12]
 801024c:	4298      	cmp	r0, r3
 801024e:	bf8c      	ite	hi
 8010250:	2601      	movhi	r6, #1
 8010252:	2600      	movls	r6, #0
 8010254:	d802      	bhi.n	801025c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8010256:	4630      	mov	r0, r6
 8010258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801025c:	4688      	mov	r8, r1
 801025e:	89e0      	ldrh	r0, [r4, #14]
 8010260:	2101      	movs	r1, #1
 8010262:	4617      	mov	r7, r2
 8010264:	f000 fc02 	bl	8010a6c <uxr_seq_num_add>
 8010268:	6823      	ldr	r3, [r4, #0]
 801026a:	81e0      	strh	r0, [r4, #14]
 801026c:	8028      	strh	r0, [r5, #0]
 801026e:	f8c8 3000 	str.w	r3, [r8]
 8010272:	6863      	ldr	r3, [r4, #4]
 8010274:	603b      	str	r3, [r7, #0]
 8010276:	7b23      	ldrb	r3, [r4, #12]
 8010278:	6063      	str	r3, [r4, #4]
 801027a:	4630      	mov	r0, r6
 801027c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010280 <on_full_output_buffer>:
 8010280:	b538      	push	{r3, r4, r5, lr}
 8010282:	6802      	ldr	r2, [r0, #0]
 8010284:	460c      	mov	r4, r1
 8010286:	6809      	ldr	r1, [r1, #0]
 8010288:	8923      	ldrh	r3, [r4, #8]
 801028a:	eba2 0c01 	sub.w	ip, r2, r1
 801028e:	6862      	ldr	r2, [r4, #4]
 8010290:	fbb2 f2f3 	udiv	r2, r2, r3
 8010294:	fbbc fcf2 	udiv	ip, ip, r2
 8010298:	f10c 0c01 	add.w	ip, ip, #1
 801029c:	fa1f fc8c 	uxth.w	ip, ip
 80102a0:	fbbc fef3 	udiv	lr, ip, r3
 80102a4:	fb03 c31e 	mls	r3, r3, lr, ip
 80102a8:	b29b      	uxth	r3, r3
 80102aa:	fb02 f303 	mul.w	r3, r2, r3
 80102ae:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80102b2:	58ca      	ldr	r2, [r1, r3]
 80102b4:	4463      	add	r3, ip
 80102b6:	eba2 020c 	sub.w	r2, r2, ip
 80102ba:	3308      	adds	r3, #8
 80102bc:	4605      	mov	r5, r0
 80102be:	4419      	add	r1, r3
 80102c0:	3a04      	subs	r2, #4
 80102c2:	6903      	ldr	r3, [r0, #16]
 80102c4:	f7fa fda0 	bl	800ae08 <ucdr_init_buffer_origin>
 80102c8:	4628      	mov	r0, r5
 80102ca:	4903      	ldr	r1, [pc, #12]	; (80102d8 <on_full_output_buffer+0x58>)
 80102cc:	4622      	mov	r2, r4
 80102ce:	f7fa fd77 	bl	800adc0 <ucdr_set_on_full_buffer_callback>
 80102d2:	2000      	movs	r0, #0
 80102d4:	bd38      	pop	{r3, r4, r5, pc}
 80102d6:	bf00      	nop
 80102d8:	08010281 	.word	0x08010281

080102dc <uxr_init_output_reliable_stream>:
 80102dc:	b410      	push	{r4}
 80102de:	f89d c004 	ldrb.w	ip, [sp, #4]
 80102e2:	8103      	strh	r3, [r0, #8]
 80102e4:	e9c0 1200 	strd	r1, r2, [r0]
 80102e8:	f880 c00c 	strb.w	ip, [r0, #12]
 80102ec:	b1d3      	cbz	r3, 8010324 <uxr_init_output_reliable_stream+0x48>
 80102ee:	f8c1 c000 	str.w	ip, [r1]
 80102f2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80102f6:	f1bc 0f01 	cmp.w	ip, #1
 80102fa:	d913      	bls.n	8010324 <uxr_init_output_reliable_stream+0x48>
 80102fc:	2301      	movs	r3, #1
 80102fe:	fbb3 f1fc 	udiv	r1, r3, ip
 8010302:	fb0c 3111 	mls	r1, ip, r1, r3
 8010306:	b289      	uxth	r1, r1
 8010308:	6842      	ldr	r2, [r0, #4]
 801030a:	6804      	ldr	r4, [r0, #0]
 801030c:	fbb2 f2fc 	udiv	r2, r2, ip
 8010310:	fb01 f202 	mul.w	r2, r1, r2
 8010314:	7b01      	ldrb	r1, [r0, #12]
 8010316:	50a1      	str	r1, [r4, r2]
 8010318:	3301      	adds	r3, #1
 801031a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801031e:	b29b      	uxth	r3, r3
 8010320:	459c      	cmp	ip, r3
 8010322:	d8ec      	bhi.n	80102fe <uxr_init_output_reliable_stream+0x22>
 8010324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010328:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801032c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8010330:	4905      	ldr	r1, [pc, #20]	; (8010348 <uxr_init_output_reliable_stream+0x6c>)
 8010332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010336:	f8c0 100e 	str.w	r1, [r0, #14]
 801033a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801033e:	2300      	movs	r3, #0
 8010340:	8242      	strh	r2, [r0, #18]
 8010342:	8403      	strh	r3, [r0, #32]
 8010344:	4770      	bx	lr
 8010346:	bf00      	nop
 8010348:	ffff0000 	.word	0xffff0000

0801034c <uxr_reset_output_reliable_stream>:
 801034c:	8901      	ldrh	r1, [r0, #8]
 801034e:	b1b1      	cbz	r1, 801037e <uxr_reset_output_reliable_stream+0x32>
 8010350:	f04f 0c00 	mov.w	ip, #0
 8010354:	4663      	mov	r3, ip
 8010356:	fbb3 f2f1 	udiv	r2, r3, r1
 801035a:	fb01 3312 	mls	r3, r1, r2, r3
 801035e:	b29b      	uxth	r3, r3
 8010360:	6842      	ldr	r2, [r0, #4]
 8010362:	fbb2 f2f1 	udiv	r2, r2, r1
 8010366:	6801      	ldr	r1, [r0, #0]
 8010368:	fb02 f303 	mul.w	r3, r2, r3
 801036c:	7b02      	ldrb	r2, [r0, #12]
 801036e:	50ca      	str	r2, [r1, r3]
 8010370:	f10c 0c01 	add.w	ip, ip, #1
 8010374:	8901      	ldrh	r1, [r0, #8]
 8010376:	fa1f f38c 	uxth.w	r3, ip
 801037a:	4299      	cmp	r1, r3
 801037c:	d8eb      	bhi.n	8010356 <uxr_reset_output_reliable_stream+0xa>
 801037e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010382:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010386:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801038a:	4904      	ldr	r1, [pc, #16]	; (801039c <uxr_reset_output_reliable_stream+0x50>)
 801038c:	f8c0 100e 	str.w	r1, [r0, #14]
 8010390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010394:	2300      	movs	r3, #0
 8010396:	8242      	strh	r2, [r0, #18]
 8010398:	8403      	strh	r3, [r0, #32]
 801039a:	4770      	bx	lr
 801039c:	ffff0000 	.word	0xffff0000

080103a0 <uxr_prepare_reliable_buffer_to_write>:
 80103a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a4:	4604      	mov	r4, r0
 80103a6:	b091      	sub	sp, #68	; 0x44
 80103a8:	8900      	ldrh	r0, [r0, #8]
 80103aa:	89e6      	ldrh	r6, [r4, #14]
 80103ac:	6823      	ldr	r3, [r4, #0]
 80103ae:	9204      	str	r2, [sp, #16]
 80103b0:	fbb6 f2f0 	udiv	r2, r6, r0
 80103b4:	fb00 6212 	mls	r2, r0, r2, r6
 80103b8:	b292      	uxth	r2, r2
 80103ba:	6865      	ldr	r5, [r4, #4]
 80103bc:	fbb5 f5f0 	udiv	r5, r5, r0
 80103c0:	fb05 3202 	mla	r2, r5, r2, r3
 80103c4:	3204      	adds	r2, #4
 80103c6:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80103ca:	f894 900c 	ldrb.w	r9, [r4, #12]
 80103ce:	9203      	str	r2, [sp, #12]
 80103d0:	468b      	mov	fp, r1
 80103d2:	1f2f      	subs	r7, r5, #4
 80103d4:	2800      	cmp	r0, #0
 80103d6:	f000 814c 	beq.w	8010672 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80103da:	f04f 0c00 	mov.w	ip, #0
 80103de:	46e2      	mov	sl, ip
 80103e0:	4661      	mov	r1, ip
 80103e2:	fbb1 f2f0 	udiv	r2, r1, r0
 80103e6:	fb00 1212 	mls	r2, r0, r2, r1
 80103ea:	b292      	uxth	r2, r2
 80103ec:	fb05 f202 	mul.w	r2, r5, r2
 80103f0:	f10c 0c01 	add.w	ip, ip, #1
 80103f4:	589a      	ldr	r2, [r3, r2]
 80103f6:	454a      	cmp	r2, r9
 80103f8:	bf08      	it	eq
 80103fa:	f10a 0a01 	addeq.w	sl, sl, #1
 80103fe:	fa1f f18c 	uxth.w	r1, ip
 8010402:	bf08      	it	eq
 8010404:	fa1f fa8a 	uxtheq.w	sl, sl
 8010408:	4281      	cmp	r1, r0
 801040a:	d3ea      	bcc.n	80103e2 <uxr_prepare_reliable_buffer_to_write+0x42>
 801040c:	4640      	mov	r0, r8
 801040e:	2104      	movs	r1, #4
 8010410:	f8cd a014 	str.w	sl, [sp, #20]
 8010414:	f7fa fd04 	bl	800ae20 <ucdr_alignment>
 8010418:	4480      	add	r8, r0
 801041a:	eb08 020b 	add.w	r2, r8, fp
 801041e:	42ba      	cmp	r2, r7
 8010420:	f240 80cd 	bls.w	80105be <uxr_prepare_reliable_buffer_to_write+0x21e>
 8010424:	7b22      	ldrb	r2, [r4, #12]
 8010426:	445a      	add	r2, fp
 8010428:	42ba      	cmp	r2, r7
 801042a:	f240 80b5 	bls.w	8010598 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801042e:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 8010432:	33fc      	adds	r3, #252	; 0xfc
 8010434:	b2ba      	uxth	r2, r7
 8010436:	4413      	add	r3, r2
 8010438:	b29b      	uxth	r3, r3
 801043a:	fb0a f903 	mul.w	r9, sl, r3
 801043e:	45d9      	cmp	r9, fp
 8010440:	9305      	str	r3, [sp, #20]
 8010442:	9306      	str	r3, [sp, #24]
 8010444:	f0c0 80b7 	bcc.w	80105b6 <uxr_prepare_reliable_buffer_to_write+0x216>
 8010448:	f108 0304 	add.w	r3, r8, #4
 801044c:	42bb      	cmp	r3, r7
 801044e:	f080 80db 	bcs.w	8010608 <uxr_prepare_reliable_buffer_to_write+0x268>
 8010452:	f1a2 0904 	sub.w	r9, r2, #4
 8010456:	eba9 0908 	sub.w	r9, r9, r8
 801045a:	9b05      	ldr	r3, [sp, #20]
 801045c:	fa1f f989 	uxth.w	r9, r9
 8010460:	ebab 0b09 	sub.w	fp, fp, r9
 8010464:	fbbb f2f3 	udiv	r2, fp, r3
 8010468:	fb03 b312 	mls	r3, r3, r2, fp
 801046c:	2b00      	cmp	r3, #0
 801046e:	f000 80c8 	beq.w	8010602 <uxr_prepare_reliable_buffer_to_write+0x262>
 8010472:	3201      	adds	r2, #1
 8010474:	b292      	uxth	r2, r2
 8010476:	9306      	str	r3, [sp, #24]
 8010478:	4552      	cmp	r2, sl
 801047a:	f200 809c 	bhi.w	80105b6 <uxr_prepare_reliable_buffer_to_write+0x216>
 801047e:	f10d 0b20 	add.w	fp, sp, #32
 8010482:	2a00      	cmp	r2, #0
 8010484:	d042      	beq.n	801050c <uxr_prepare_reliable_buffer_to_write+0x16c>
 8010486:	f8cd 801c 	str.w	r8, [sp, #28]
 801048a:	f04f 0a00 	mov.w	sl, #0
 801048e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010492:	9505      	str	r5, [sp, #20]
 8010494:	f10d 0b20 	add.w	fp, sp, #32
 8010498:	4615      	mov	r5, r2
 801049a:	e000      	b.n	801049e <uxr_prepare_reliable_buffer_to_write+0xfe>
 801049c:	46c1      	mov	r9, r8
 801049e:	8920      	ldrh	r0, [r4, #8]
 80104a0:	fbb6 f2f0 	udiv	r2, r6, r0
 80104a4:	fb00 6112 	mls	r1, r0, r2, r6
 80104a8:	b28a      	uxth	r2, r1
 80104aa:	6863      	ldr	r3, [r4, #4]
 80104ac:	fbb3 f1f0 	udiv	r1, r3, r0
 80104b0:	6823      	ldr	r3, [r4, #0]
 80104b2:	fb02 f101 	mul.w	r1, r2, r1
 80104b6:	3104      	adds	r1, #4
 80104b8:	4419      	add	r1, r3
 80104ba:	4658      	mov	r0, fp
 80104bc:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80104c0:	9200      	str	r2, [sp, #0]
 80104c2:	2300      	movs	r3, #0
 80104c4:	463a      	mov	r2, r7
 80104c6:	f7fa fc95 	bl	800adf4 <ucdr_init_buffer_origin_offset>
 80104ca:	464a      	mov	r2, r9
 80104cc:	2300      	movs	r3, #0
 80104ce:	210d      	movs	r1, #13
 80104d0:	4658      	mov	r0, fp
 80104d2:	f7fc f82b 	bl	800c52c <uxr_buffer_submessage_header>
 80104d6:	8921      	ldrh	r1, [r4, #8]
 80104d8:	fbb6 f2f1 	udiv	r2, r6, r1
 80104dc:	fb01 6212 	mls	r2, r1, r2, r6
 80104e0:	b292      	uxth	r2, r2
 80104e2:	6863      	ldr	r3, [r4, #4]
 80104e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80104e8:	fb02 f303 	mul.w	r3, r2, r3
 80104ec:	6822      	ldr	r2, [r4, #0]
 80104ee:	4630      	mov	r0, r6
 80104f0:	50d7      	str	r7, [r2, r3]
 80104f2:	2101      	movs	r1, #1
 80104f4:	f000 faba 	bl	8010a6c <uxr_seq_num_add>
 80104f8:	f10a 0a01 	add.w	sl, sl, #1
 80104fc:	fa1f f38a 	uxth.w	r3, sl
 8010500:	429d      	cmp	r5, r3
 8010502:	4606      	mov	r6, r0
 8010504:	d8ca      	bhi.n	801049c <uxr_prepare_reliable_buffer_to_write+0xfc>
 8010506:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801050a:	9d05      	ldr	r5, [sp, #20]
 801050c:	8920      	ldrh	r0, [r4, #8]
 801050e:	fbb6 f3f0 	udiv	r3, r6, r0
 8010512:	fb00 6313 	mls	r3, r0, r3, r6
 8010516:	b299      	uxth	r1, r3
 8010518:	6863      	ldr	r3, [r4, #4]
 801051a:	fbb3 f3f0 	udiv	r3, r3, r0
 801051e:	fb01 f303 	mul.w	r3, r1, r3
 8010522:	6821      	ldr	r1, [r4, #0]
 8010524:	3304      	adds	r3, #4
 8010526:	4419      	add	r1, r3
 8010528:	463a      	mov	r2, r7
 801052a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801052e:	9000      	str	r0, [sp, #0]
 8010530:	2300      	movs	r3, #0
 8010532:	4658      	mov	r0, fp
 8010534:	f7fa fc5e 	bl	800adf4 <ucdr_init_buffer_origin_offset>
 8010538:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801053c:	4658      	mov	r0, fp
 801053e:	fa1f f289 	uxth.w	r2, r9
 8010542:	2302      	movs	r3, #2
 8010544:	210d      	movs	r1, #13
 8010546:	f7fb fff1 	bl	800c52c <uxr_buffer_submessage_header>
 801054a:	9b03      	ldr	r3, [sp, #12]
 801054c:	8927      	ldrh	r7, [r4, #8]
 801054e:	7b20      	ldrb	r0, [r4, #12]
 8010550:	f108 0104 	add.w	r1, r8, #4
 8010554:	440b      	add	r3, r1
 8010556:	4619      	mov	r1, r3
 8010558:	fbb6 f3f7 	udiv	r3, r6, r7
 801055c:	fb07 6313 	mls	r3, r7, r3, r6
 8010560:	f1a5 0208 	sub.w	r2, r5, #8
 8010564:	b29d      	uxth	r5, r3
 8010566:	3004      	adds	r0, #4
 8010568:	6863      	ldr	r3, [r4, #4]
 801056a:	fbb3 f3f7 	udiv	r3, r3, r7
 801056e:	fb05 f303 	mul.w	r3, r5, r3
 8010572:	6825      	ldr	r5, [r4, #0]
 8010574:	4448      	add	r0, r9
 8010576:	50e8      	str	r0, [r5, r3]
 8010578:	9d04      	ldr	r5, [sp, #16]
 801057a:	eba2 0208 	sub.w	r2, r2, r8
 801057e:	4628      	mov	r0, r5
 8010580:	f7fa fc4a 	bl	800ae18 <ucdr_init_buffer>
 8010584:	4628      	mov	r0, r5
 8010586:	493c      	ldr	r1, [pc, #240]	; (8010678 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8010588:	4622      	mov	r2, r4
 801058a:	f7fa fc19 	bl	800adc0 <ucdr_set_on_full_buffer_callback>
 801058e:	2001      	movs	r0, #1
 8010590:	81e6      	strh	r6, [r4, #14]
 8010592:	b011      	add	sp, #68	; 0x44
 8010594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010598:	2101      	movs	r1, #1
 801059a:	89e0      	ldrh	r0, [r4, #14]
 801059c:	f000 fa66 	bl	8010a6c <uxr_seq_num_add>
 80105a0:	8921      	ldrh	r1, [r4, #8]
 80105a2:	4605      	mov	r5, r0
 80105a4:	8a60      	ldrh	r0, [r4, #18]
 80105a6:	f000 fa61 	bl	8010a6c <uxr_seq_num_add>
 80105aa:	4601      	mov	r1, r0
 80105ac:	4628      	mov	r0, r5
 80105ae:	f000 fa65 	bl	8010a7c <uxr_seq_num_cmp>
 80105b2:	2800      	cmp	r0, #0
 80105b4:	dd42      	ble.n	801063c <uxr_prepare_reliable_buffer_to_write+0x29c>
 80105b6:	2000      	movs	r0, #0
 80105b8:	b011      	add	sp, #68	; 0x44
 80105ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105be:	8921      	ldrh	r1, [r4, #8]
 80105c0:	8a60      	ldrh	r0, [r4, #18]
 80105c2:	9205      	str	r2, [sp, #20]
 80105c4:	f000 fa52 	bl	8010a6c <uxr_seq_num_add>
 80105c8:	4601      	mov	r1, r0
 80105ca:	4630      	mov	r0, r6
 80105cc:	f000 fa56 	bl	8010a7c <uxr_seq_num_cmp>
 80105d0:	2800      	cmp	r0, #0
 80105d2:	9a05      	ldr	r2, [sp, #20]
 80105d4:	dcef      	bgt.n	80105b6 <uxr_prepare_reliable_buffer_to_write+0x216>
 80105d6:	8927      	ldrh	r7, [r4, #8]
 80105d8:	fbb6 f3f7 	udiv	r3, r6, r7
 80105dc:	fb07 6313 	mls	r3, r7, r3, r6
 80105e0:	b29d      	uxth	r5, r3
 80105e2:	6863      	ldr	r3, [r4, #4]
 80105e4:	6824      	ldr	r4, [r4, #0]
 80105e6:	fbb3 f3f7 	udiv	r3, r3, r7
 80105ea:	fb05 f303 	mul.w	r3, r5, r3
 80105ee:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80105f2:	50e2      	str	r2, [r4, r3]
 80105f4:	2300      	movs	r3, #0
 80105f6:	f8cd 8000 	str.w	r8, [sp]
 80105fa:	f7fa fbfb 	bl	800adf4 <ucdr_init_buffer_origin_offset>
 80105fe:	2001      	movs	r0, #1
 8010600:	e7da      	b.n	80105b8 <uxr_prepare_reliable_buffer_to_write+0x218>
 8010602:	b293      	uxth	r3, r2
 8010604:	461a      	mov	r2, r3
 8010606:	e737      	b.n	8010478 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8010608:	4630      	mov	r0, r6
 801060a:	2101      	movs	r1, #1
 801060c:	9207      	str	r2, [sp, #28]
 801060e:	f000 fa2d 	bl	8010a6c <uxr_seq_num_add>
 8010612:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8010616:	fbb0 f1fc 	udiv	r1, r0, ip
 801061a:	fb0c 0111 	mls	r1, ip, r1, r0
 801061e:	4606      	mov	r6, r0
 8010620:	b288      	uxth	r0, r1
 8010622:	6863      	ldr	r3, [r4, #4]
 8010624:	fbb3 f1fc 	udiv	r1, r3, ip
 8010628:	6823      	ldr	r3, [r4, #0]
 801062a:	9a07      	ldr	r2, [sp, #28]
 801062c:	fb00 f101 	mul.w	r1, r0, r1
 8010630:	3104      	adds	r1, #4
 8010632:	440b      	add	r3, r1
 8010634:	9303      	str	r3, [sp, #12]
 8010636:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801063a:	e70a      	b.n	8010452 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801063c:	8921      	ldrh	r1, [r4, #8]
 801063e:	fbb5 f3f1 	udiv	r3, r5, r1
 8010642:	fb01 5313 	mls	r3, r1, r3, r5
 8010646:	b29a      	uxth	r2, r3
 8010648:	6863      	ldr	r3, [r4, #4]
 801064a:	fbb3 f3f1 	udiv	r3, r3, r1
 801064e:	6821      	ldr	r1, [r4, #0]
 8010650:	9804      	ldr	r0, [sp, #16]
 8010652:	fb02 f303 	mul.w	r3, r2, r3
 8010656:	3304      	adds	r3, #4
 8010658:	7b22      	ldrb	r2, [r4, #12]
 801065a:	4419      	add	r1, r3
 801065c:	445a      	add	r2, fp
 801065e:	f841 2c04 	str.w	r2, [r1, #-4]
 8010662:	7b23      	ldrb	r3, [r4, #12]
 8010664:	9300      	str	r3, [sp, #0]
 8010666:	2300      	movs	r3, #0
 8010668:	f7fa fbc4 	bl	800adf4 <ucdr_init_buffer_origin_offset>
 801066c:	81e5      	strh	r5, [r4, #14]
 801066e:	2001      	movs	r0, #1
 8010670:	e7a2      	b.n	80105b8 <uxr_prepare_reliable_buffer_to_write+0x218>
 8010672:	4682      	mov	sl, r0
 8010674:	e6ca      	b.n	801040c <uxr_prepare_reliable_buffer_to_write+0x6c>
 8010676:	bf00      	nop
 8010678:	08010281 	.word	0x08010281

0801067c <uxr_prepare_next_reliable_buffer_to_send>:
 801067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801067e:	4604      	mov	r4, r0
 8010680:	460f      	mov	r7, r1
 8010682:	8a00      	ldrh	r0, [r0, #16]
 8010684:	2101      	movs	r1, #1
 8010686:	4616      	mov	r6, r2
 8010688:	461d      	mov	r5, r3
 801068a:	f000 f9ef 	bl	8010a6c <uxr_seq_num_add>
 801068e:	8028      	strh	r0, [r5, #0]
 8010690:	8922      	ldrh	r2, [r4, #8]
 8010692:	fbb0 f3f2 	udiv	r3, r0, r2
 8010696:	fb02 0c13 	mls	ip, r2, r3, r0
 801069a:	fa1f fc8c 	uxth.w	ip, ip
 801069e:	6863      	ldr	r3, [r4, #4]
 80106a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80106a4:	fb0c fc03 	mul.w	ip, ip, r3
 80106a8:	6823      	ldr	r3, [r4, #0]
 80106aa:	89e1      	ldrh	r1, [r4, #14]
 80106ac:	f10c 0c04 	add.w	ip, ip, #4
 80106b0:	4463      	add	r3, ip
 80106b2:	603b      	str	r3, [r7, #0]
 80106b4:	6823      	ldr	r3, [r4, #0]
 80106b6:	449c      	add	ip, r3
 80106b8:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80106bc:	6033      	str	r3, [r6, #0]
 80106be:	f000 f9dd 	bl	8010a7c <uxr_seq_num_cmp>
 80106c2:	2800      	cmp	r0, #0
 80106c4:	dd01      	ble.n	80106ca <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80106c6:	2000      	movs	r0, #0
 80106c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106ca:	7b23      	ldrb	r3, [r4, #12]
 80106cc:	6832      	ldr	r2, [r6, #0]
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d9f9      	bls.n	80106c6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80106d2:	8a61      	ldrh	r1, [r4, #18]
 80106d4:	8a20      	ldrh	r0, [r4, #16]
 80106d6:	f000 f9cd 	bl	8010a74 <uxr_seq_num_sub>
 80106da:	8923      	ldrh	r3, [r4, #8]
 80106dc:	4283      	cmp	r3, r0
 80106de:	d0f2      	beq.n	80106c6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80106e0:	8828      	ldrh	r0, [r5, #0]
 80106e2:	89e3      	ldrh	r3, [r4, #14]
 80106e4:	8220      	strh	r0, [r4, #16]
 80106e6:	4298      	cmp	r0, r3
 80106e8:	d001      	beq.n	80106ee <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80106ea:	2001      	movs	r0, #1
 80106ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106ee:	2101      	movs	r1, #1
 80106f0:	f000 f9bc 	bl	8010a6c <uxr_seq_num_add>
 80106f4:	81e0      	strh	r0, [r4, #14]
 80106f6:	2001      	movs	r0, #1
 80106f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106fa:	bf00      	nop

080106fc <uxr_update_output_stream_heartbeat_timestamp>:
 80106fc:	b570      	push	{r4, r5, r6, lr}
 80106fe:	8a01      	ldrh	r1, [r0, #16]
 8010700:	4604      	mov	r4, r0
 8010702:	8a40      	ldrh	r0, [r0, #18]
 8010704:	4615      	mov	r5, r2
 8010706:	461e      	mov	r6, r3
 8010708:	f000 f9b8 	bl	8010a7c <uxr_seq_num_cmp>
 801070c:	2800      	cmp	r0, #0
 801070e:	db07      	blt.n	8010720 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8010710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010714:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010718:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801071c:	2000      	movs	r0, #0
 801071e:	bd70      	pop	{r4, r5, r6, pc}
 8010720:	f894 0020 	ldrb.w	r0, [r4, #32]
 8010724:	b940      	cbnz	r0, 8010738 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8010726:	2301      	movs	r3, #1
 8010728:	f884 3020 	strb.w	r3, [r4, #32]
 801072c:	3564      	adds	r5, #100	; 0x64
 801072e:	f146 0600 	adc.w	r6, r6, #0
 8010732:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8010736:	bd70      	pop	{r4, r5, r6, pc}
 8010738:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801073c:	4295      	cmp	r5, r2
 801073e:	eb76 0303 	sbcs.w	r3, r6, r3
 8010742:	bfa5      	ittet	ge
 8010744:	3001      	addge	r0, #1
 8010746:	f884 0020 	strbge.w	r0, [r4, #32]
 801074a:	2000      	movlt	r0, #0
 801074c:	2001      	movge	r0, #1
 801074e:	e7ed      	b.n	801072c <uxr_update_output_stream_heartbeat_timestamp+0x30>

08010750 <uxr_begin_output_nack_buffer_it>:
 8010750:	8a40      	ldrh	r0, [r0, #18]
 8010752:	4770      	bx	lr

08010754 <uxr_next_reliable_nack_buffer_to_send>:
 8010754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010758:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 801075c:	b082      	sub	sp, #8
 801075e:	f1b8 0f00 	cmp.w	r8, #0
 8010762:	d011      	beq.n	8010788 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8010764:	4604      	mov	r4, r0
 8010766:	8818      	ldrh	r0, [r3, #0]
 8010768:	460e      	mov	r6, r1
 801076a:	4617      	mov	r7, r2
 801076c:	461d      	mov	r5, r3
 801076e:	2101      	movs	r1, #1
 8010770:	f000 f97c 	bl	8010a6c <uxr_seq_num_add>
 8010774:	8028      	strh	r0, [r5, #0]
 8010776:	8a21      	ldrh	r1, [r4, #16]
 8010778:	f000 f980 	bl	8010a7c <uxr_seq_num_cmp>
 801077c:	2800      	cmp	r0, #0
 801077e:	dd07      	ble.n	8010790 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8010780:	f04f 0800 	mov.w	r8, #0
 8010784:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 8010788:	4640      	mov	r0, r8
 801078a:	b002      	add	sp, #8
 801078c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010790:	8921      	ldrh	r1, [r4, #8]
 8010792:	8828      	ldrh	r0, [r5, #0]
 8010794:	6823      	ldr	r3, [r4, #0]
 8010796:	fbb0 f2f1 	udiv	r2, r0, r1
 801079a:	fb01 0c12 	mls	ip, r1, r2, r0
 801079e:	fa1f f28c 	uxth.w	r2, ip
 80107a2:	9301      	str	r3, [sp, #4]
 80107a4:	6863      	ldr	r3, [r4, #4]
 80107a6:	fbb3 fcf1 	udiv	ip, r3, r1
 80107aa:	9b01      	ldr	r3, [sp, #4]
 80107ac:	fb02 fc0c 	mul.w	ip, r2, ip
 80107b0:	f10c 0c04 	add.w	ip, ip, #4
 80107b4:	4463      	add	r3, ip
 80107b6:	6033      	str	r3, [r6, #0]
 80107b8:	6823      	ldr	r3, [r4, #0]
 80107ba:	4463      	add	r3, ip
 80107bc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80107c0:	603b      	str	r3, [r7, #0]
 80107c2:	7b22      	ldrb	r2, [r4, #12]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d0d2      	beq.n	801076e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80107c8:	4640      	mov	r0, r8
 80107ca:	b002      	add	sp, #8
 80107cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080107d0 <uxr_process_acknack>:
 80107d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107d2:	4604      	mov	r4, r0
 80107d4:	460e      	mov	r6, r1
 80107d6:	4610      	mov	r0, r2
 80107d8:	2101      	movs	r1, #1
 80107da:	f000 f94b 	bl	8010a74 <uxr_seq_num_sub>
 80107de:	8a61      	ldrh	r1, [r4, #18]
 80107e0:	f000 f948 	bl	8010a74 <uxr_seq_num_sub>
 80107e4:	b1c0      	cbz	r0, 8010818 <uxr_process_acknack+0x48>
 80107e6:	4605      	mov	r5, r0
 80107e8:	2700      	movs	r7, #0
 80107ea:	2101      	movs	r1, #1
 80107ec:	8a60      	ldrh	r0, [r4, #18]
 80107ee:	f000 f93d 	bl	8010a6c <uxr_seq_num_add>
 80107f2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80107f6:	fbb0 f1fc 	udiv	r1, r0, ip
 80107fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80107fe:	fb0c 0111 	mls	r1, ip, r1, r0
 8010802:	b289      	uxth	r1, r1
 8010804:	3701      	adds	r7, #1
 8010806:	fbb3 f3fc 	udiv	r3, r3, ip
 801080a:	fb01 f303 	mul.w	r3, r1, r3
 801080e:	42bd      	cmp	r5, r7
 8010810:	7b21      	ldrb	r1, [r4, #12]
 8010812:	8260      	strh	r0, [r4, #18]
 8010814:	50d1      	str	r1, [r2, r3]
 8010816:	d1e8      	bne.n	80107ea <uxr_process_acknack+0x1a>
 8010818:	3e00      	subs	r6, #0
 801081a:	f04f 0300 	mov.w	r3, #0
 801081e:	bf18      	it	ne
 8010820:	2601      	movne	r6, #1
 8010822:	f884 3020 	strb.w	r3, [r4, #32]
 8010826:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801082a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801082c <uxr_is_output_up_to_date>:
 801082c:	8a01      	ldrh	r1, [r0, #16]
 801082e:	8a40      	ldrh	r0, [r0, #18]
 8010830:	b508      	push	{r3, lr}
 8010832:	f000 f923 	bl	8010a7c <uxr_seq_num_cmp>
 8010836:	fab0 f080 	clz	r0, r0
 801083a:	0940      	lsrs	r0, r0, #5
 801083c:	bd08      	pop	{r3, pc}
 801083e:	bf00      	nop

08010840 <get_available_free_slots>:
 8010840:	8902      	ldrh	r2, [r0, #8]
 8010842:	b1da      	cbz	r2, 801087c <get_available_free_slots+0x3c>
 8010844:	b530      	push	{r4, r5, lr}
 8010846:	2100      	movs	r1, #0
 8010848:	6843      	ldr	r3, [r0, #4]
 801084a:	6805      	ldr	r5, [r0, #0]
 801084c:	7b04      	ldrb	r4, [r0, #12]
 801084e:	fbb3 fef2 	udiv	lr, r3, r2
 8010852:	4608      	mov	r0, r1
 8010854:	460b      	mov	r3, r1
 8010856:	fbb3 fcf2 	udiv	ip, r3, r2
 801085a:	fb02 331c 	mls	r3, r2, ip, r3
 801085e:	b29b      	uxth	r3, r3
 8010860:	fb0e f303 	mul.w	r3, lr, r3
 8010864:	3101      	adds	r1, #1
 8010866:	f855 c003 	ldr.w	ip, [r5, r3]
 801086a:	4564      	cmp	r4, ip
 801086c:	bf08      	it	eq
 801086e:	3001      	addeq	r0, #1
 8010870:	b28b      	uxth	r3, r1
 8010872:	bf08      	it	eq
 8010874:	b280      	uxtheq	r0, r0
 8010876:	4293      	cmp	r3, r2
 8010878:	d3ed      	bcc.n	8010856 <get_available_free_slots+0x16>
 801087a:	bd30      	pop	{r4, r5, pc}
 801087c:	4610      	mov	r0, r2
 801087e:	4770      	bx	lr

08010880 <uxr_buffer_cancel_data>:
 8010880:	b510      	push	{r4, lr}
 8010882:	b094      	sub	sp, #80	; 0x50
 8010884:	2300      	movs	r3, #0
 8010886:	9202      	str	r2, [sp, #8]
 8010888:	9205      	str	r2, [sp, #20]
 801088a:	9301      	str	r3, [sp, #4]
 801088c:	2201      	movs	r2, #1
 801088e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010892:	f88d 301e 	strb.w	r3, [sp, #30]
 8010896:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 801089a:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801089e:	2308      	movs	r3, #8
 80108a0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80108a4:	9300      	str	r3, [sp, #0]
 80108a6:	2210      	movs	r2, #16
 80108a8:	ab0c      	add	r3, sp, #48	; 0x30
 80108aa:	4604      	mov	r4, r0
 80108ac:	9103      	str	r1, [sp, #12]
 80108ae:	f7fb fb9f 	bl	800bff0 <uxr_prepare_stream_to_write_submessage>
 80108b2:	b918      	cbnz	r0, 80108bc <uxr_buffer_cancel_data+0x3c>
 80108b4:	4604      	mov	r4, r0
 80108b6:	4620      	mov	r0, r4
 80108b8:	b014      	add	sp, #80	; 0x50
 80108ba:	bd10      	pop	{r4, pc}
 80108bc:	9905      	ldr	r1, [sp, #20]
 80108be:	aa06      	add	r2, sp, #24
 80108c0:	4620      	mov	r0, r4
 80108c2:	f7fb fccb 	bl	800c25c <uxr_init_base_object_request>
 80108c6:	a906      	add	r1, sp, #24
 80108c8:	4604      	mov	r4, r0
 80108ca:	a80c      	add	r0, sp, #48	; 0x30
 80108cc:	f7fc feda 	bl	800d684 <uxr_serialize_READ_DATA_Payload>
 80108d0:	4620      	mov	r0, r4
 80108d2:	b014      	add	sp, #80	; 0x50
 80108d4:	bd10      	pop	{r4, pc}
 80108d6:	bf00      	nop

080108d8 <read_submessage_format>:
 80108d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108dc:	b095      	sub	sp, #84	; 0x54
 80108de:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 80108e2:	b113      	cbz	r3, 80108ea <read_submessage_format+0x12>
 80108e4:	b015      	add	sp, #84	; 0x54
 80108e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108ea:	460c      	mov	r4, r1
 80108ec:	4615      	mov	r5, r2
 80108ee:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80108f2:	4607      	mov	r7, r0
 80108f4:	981c      	ldr	r0, [sp, #112]	; 0x70
 80108f6:	9004      	str	r0, [sp, #16]
 80108f8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80108fa:	9005      	str	r0, [sp, #20]
 80108fc:	1a52      	subs	r2, r2, r1
 80108fe:	a80c      	add	r0, sp, #48	; 0x30
 8010900:	4699      	mov	r9, r3
 8010902:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8010906:	f7fa fa87 	bl	800ae18 <ucdr_init_buffer>
 801090a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801090e:	a80c      	add	r0, sp, #48	; 0x30
 8010910:	f7fa fa56 	bl	800adc0 <ucdr_set_on_full_buffer_callback>
 8010914:	69e2      	ldr	r2, [r4, #28]
 8010916:	b19a      	cbz	r2, 8010940 <read_submessage_format+0x68>
 8010918:	f1b8 0f07 	cmp.w	r8, #7
 801091c:	f882 9014 	strb.w	r9, [r2, #20]
 8010920:	d040      	beq.n	80109a4 <read_submessage_format+0xcc>
 8010922:	f1b8 0f08 	cmp.w	r8, #8
 8010926:	d02e      	beq.n	8010986 <read_submessage_format+0xae>
 8010928:	f1b8 0f06 	cmp.w	r8, #6
 801092c:	d011      	beq.n	8010952 <read_submessage_format+0x7a>
 801092e:	2301      	movs	r3, #1
 8010930:	7513      	strb	r3, [r2, #20]
 8010932:	4629      	mov	r1, r5
 8010934:	4620      	mov	r0, r4
 8010936:	f7fa fabf 	bl	800aeb8 <ucdr_advance_buffer>
 801093a:	b015      	add	sp, #84	; 0x54
 801093c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010940:	f1b8 0f07 	cmp.w	r8, #7
 8010944:	d02e      	beq.n	80109a4 <read_submessage_format+0xcc>
 8010946:	f1b8 0f08 	cmp.w	r8, #8
 801094a:	d01c      	beq.n	8010986 <read_submessage_format+0xae>
 801094c:	f1b8 0f06 	cmp.w	r8, #6
 8010950:	d1ef      	bne.n	8010932 <read_submessage_format+0x5a>
 8010952:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 8010956:	f1b8 0f00 	cmp.w	r8, #0
 801095a:	d011      	beq.n	8010980 <read_submessage_format+0xa8>
 801095c:	ab0c      	add	r3, sp, #48	; 0x30
 801095e:	e9cd 3500 	strd	r3, r5, [sp]
 8010962:	2306      	movs	r3, #6
 8010964:	f88d 3016 	strb.w	r3, [sp, #22]
 8010968:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801096c:	9302      	str	r3, [sp, #8]
 801096e:	4632      	mov	r2, r6
 8010970:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8010974:	4638      	mov	r0, r7
 8010976:	47c0      	blx	r8
 8010978:	2301      	movs	r3, #1
 801097a:	69e2      	ldr	r2, [r4, #28]
 801097c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8010980:	2a00      	cmp	r2, #0
 8010982:	d1d4      	bne.n	801092e <read_submessage_format+0x56>
 8010984:	e7d5      	b.n	8010932 <read_submessage_format+0x5a>
 8010986:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801098a:	2b00      	cmp	r3, #0
 801098c:	d0f8      	beq.n	8010980 <read_submessage_format+0xa8>
 801098e:	a906      	add	r1, sp, #24
 8010990:	a80c      	add	r0, sp, #48	; 0x30
 8010992:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8010996:	f7fc ff15 	bl	800d7c4 <uxr_deserialize_SampleIdentity>
 801099a:	b9a0      	cbnz	r0, 80109c6 <read_submessage_format+0xee>
 801099c:	69e2      	ldr	r2, [r4, #28]
 801099e:	2a00      	cmp	r2, #0
 80109a0:	d1c5      	bne.n	801092e <read_submessage_format+0x56>
 80109a2:	e7c6      	b.n	8010932 <read_submessage_format+0x5a>
 80109a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80109a8:	b13b      	cbz	r3, 80109ba <read_submessage_format+0xe2>
 80109aa:	a906      	add	r1, sp, #24
 80109ac:	a80c      	add	r0, sp, #48	; 0x30
 80109ae:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80109b2:	f7fc fc01 	bl	800d1b8 <uxr_deserialize_BaseObjectRequest>
 80109b6:	bb60      	cbnz	r0, 8010a12 <read_submessage_format+0x13a>
 80109b8:	69e2      	ldr	r2, [r4, #28]
 80109ba:	68a3      	ldr	r3, [r4, #8]
 80109bc:	442b      	add	r3, r5
 80109be:	60a3      	str	r3, [r4, #8]
 80109c0:	2a00      	cmp	r2, #0
 80109c2:	d1b4      	bne.n	801092e <read_submessage_format+0x56>
 80109c4:	e7b5      	b.n	8010932 <read_submessage_format+0x5a>
 80109c6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80109ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80109cc:	1a52      	subs	r2, r2, r1
 80109ce:	eba8 0803 	sub.w	r8, r8, r3
 80109d2:	a80c      	add	r0, sp, #48	; 0x30
 80109d4:	f7fa fa20 	bl	800ae18 <ucdr_init_buffer>
 80109d8:	44a8      	add	r8, r5
 80109da:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80109de:	a80c      	add	r0, sp, #48	; 0x30
 80109e0:	f7fa f9ee 	bl	800adc0 <ucdr_set_on_full_buffer_callback>
 80109e4:	fa1f f888 	uxth.w	r8, r8
 80109e8:	ab0c      	add	r3, sp, #48	; 0x30
 80109ea:	9300      	str	r3, [sp, #0]
 80109ec:	f8cd 8004 	str.w	r8, [sp, #4]
 80109f0:	2108      	movs	r1, #8
 80109f2:	f88d 1016 	strb.w	r1, [sp, #22]
 80109f6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80109fa:	9102      	str	r1, [sp, #8]
 80109fc:	ab06      	add	r3, sp, #24
 80109fe:	4632      	mov	r2, r6
 8010a00:	9905      	ldr	r1, [sp, #20]
 8010a02:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 8010a06:	4638      	mov	r0, r7
 8010a08:	47b0      	blx	r6
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8010a10:	e7c4      	b.n	801099c <read_submessage_format+0xc4>
 8010a12:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8010a16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010a18:	1a52      	subs	r2, r2, r1
 8010a1a:	a80c      	add	r0, sp, #48	; 0x30
 8010a1c:	eba8 0803 	sub.w	r8, r8, r3
 8010a20:	f7fa f9fa 	bl	800ae18 <ucdr_init_buffer>
 8010a24:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010a28:	a80c      	add	r0, sp, #48	; 0x30
 8010a2a:	f7fa f9c9 	bl	800adc0 <ucdr_set_on_full_buffer_callback>
 8010a2e:	ab0c      	add	r3, sp, #48	; 0x30
 8010a30:	9300      	str	r3, [sp, #0]
 8010a32:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010a36:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010a3a:	44a8      	add	r8, r5
 8010a3c:	fa1f f888 	uxth.w	r8, r8
 8010a40:	f8cd 8004 	str.w	r8, [sp, #4]
 8010a44:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010a48:	2107      	movs	r1, #7
 8010a4a:	f88d 1016 	strb.w	r1, [sp, #22]
 8010a4e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8010a52:	9102      	str	r1, [sp, #8]
 8010a54:	4632      	mov	r2, r6
 8010a56:	b29b      	uxth	r3, r3
 8010a58:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 8010a5c:	9905      	ldr	r1, [sp, #20]
 8010a5e:	4638      	mov	r0, r7
 8010a60:	47b0      	blx	r6
 8010a62:	2301      	movs	r3, #1
 8010a64:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8010a68:	e7a6      	b.n	80109b8 <read_submessage_format+0xe0>
 8010a6a:	bf00      	nop

08010a6c <uxr_seq_num_add>:
 8010a6c:	4408      	add	r0, r1
 8010a6e:	b280      	uxth	r0, r0
 8010a70:	4770      	bx	lr
 8010a72:	bf00      	nop

08010a74 <uxr_seq_num_sub>:
 8010a74:	1a40      	subs	r0, r0, r1
 8010a76:	b280      	uxth	r0, r0
 8010a78:	4770      	bx	lr
 8010a7a:	bf00      	nop

08010a7c <uxr_seq_num_cmp>:
 8010a7c:	4288      	cmp	r0, r1
 8010a7e:	d011      	beq.n	8010aa4 <uxr_seq_num_cmp+0x28>
 8010a80:	d309      	bcc.n	8010a96 <uxr_seq_num_cmp+0x1a>
 8010a82:	4288      	cmp	r0, r1
 8010a84:	d910      	bls.n	8010aa8 <uxr_seq_num_cmp+0x2c>
 8010a86:	1a40      	subs	r0, r0, r1
 8010a88:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010a8c:	bfd4      	ite	le
 8010a8e:	2001      	movle	r0, #1
 8010a90:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8010a94:	4770      	bx	lr
 8010a96:	1a0b      	subs	r3, r1, r0
 8010a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010a9c:	daf1      	bge.n	8010a82 <uxr_seq_num_cmp+0x6>
 8010a9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010aa2:	4770      	bx	lr
 8010aa4:	2000      	movs	r0, #0
 8010aa6:	4770      	bx	lr
 8010aa8:	2001      	movs	r0, #1
 8010aaa:	4770      	bx	lr

08010aac <uxr_init_framing_io>:
 8010aac:	2300      	movs	r3, #0
 8010aae:	7041      	strb	r1, [r0, #1]
 8010ab0:	7003      	strb	r3, [r0, #0]
 8010ab2:	8583      	strh	r3, [r0, #44]	; 0x2c
 8010ab4:	4770      	bx	lr
 8010ab6:	bf00      	nop

08010ab8 <uxr_write_framed_msg>:
 8010ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010abc:	4617      	mov	r7, r2
 8010abe:	7842      	ldrb	r2, [r0, #1]
 8010ac0:	b083      	sub	sp, #12
 8010ac2:	460e      	mov	r6, r1
 8010ac4:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8010ac8:	469a      	mov	sl, r3
 8010aca:	2901      	cmp	r1, #1
 8010acc:	f04f 037e 	mov.w	r3, #126	; 0x7e
 8010ad0:	4604      	mov	r4, r0
 8010ad2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8010ad6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8010ada:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8010ade:	f240 8137 	bls.w	8010d50 <uxr_write_framed_msg+0x298>
 8010ae2:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8010ae6:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8010aea:	2901      	cmp	r1, #1
 8010aec:	f04f 0202 	mov.w	r2, #2
 8010af0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010af4:	f240 808f 	bls.w	8010c16 <uxr_write_framed_msg+0x15e>
 8010af8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010afa:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8010afe:	b2dd      	uxtb	r5, r3
 8010b00:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8010b04:	2203      	movs	r2, #3
 8010b06:	2901      	cmp	r1, #1
 8010b08:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010b0c:	f240 809a 	bls.w	8010c44 <uxr_write_framed_msg+0x18c>
 8010b10:	18a1      	adds	r1, r4, r2
 8010b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b14:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 8010b18:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010b1c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8010b20:	3201      	adds	r2, #1
 8010b22:	2801      	cmp	r0, #1
 8010b24:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010b28:	f240 80a0 	bls.w	8010c6c <uxr_write_framed_msg+0x1b4>
 8010b2c:	18a0      	adds	r0, r4, r2
 8010b2e:	3201      	adds	r2, #1
 8010b30:	b2d2      	uxtb	r2, r2
 8010b32:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8010b36:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	f000 80a9 	beq.w	8010c92 <uxr_write_framed_msg+0x1da>
 8010b40:	f04f 0900 	mov.w	r9, #0
 8010b44:	46c8      	mov	r8, r9
 8010b46:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8010b4a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8010b4e:	2901      	cmp	r1, #1
 8010b50:	f240 80c3 	bls.w	8010cda <uxr_write_framed_msg+0x222>
 8010b54:	2a29      	cmp	r2, #41	; 0x29
 8010b56:	f200 809f 	bhi.w	8010c98 <uxr_write_framed_msg+0x1e0>
 8010b5a:	18a1      	adds	r1, r4, r2
 8010b5c:	3201      	adds	r2, #1
 8010b5e:	b2d2      	uxtb	r2, r2
 8010b60:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8010b64:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010b68:	ea89 0303 	eor.w	r3, r9, r3
 8010b6c:	498c      	ldr	r1, [pc, #560]	; (8010da0 <uxr_write_framed_msg+0x2e8>)
 8010b6e:	b2db      	uxtb	r3, r3
 8010b70:	f108 0801 	add.w	r8, r8, #1
 8010b74:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010b78:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8010b7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b7e:	4543      	cmp	r3, r8
 8010b80:	d8e1      	bhi.n	8010b46 <uxr_write_framed_msg+0x8e>
 8010b82:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8010b86:	fa5f f889 	uxtb.w	r8, r9
 8010b8a:	9301      	str	r3, [sp, #4]
 8010b8c:	f04f 0900 	mov.w	r9, #0
 8010b90:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 8010b94:	fa5f f18a 	uxtb.w	r1, sl
 8010b98:	2901      	cmp	r1, #1
 8010b9a:	d921      	bls.n	8010be0 <uxr_write_framed_msg+0x128>
 8010b9c:	2a29      	cmp	r2, #41	; 0x29
 8010b9e:	f240 80af 	bls.w	8010d00 <uxr_write_framed_msg+0x248>
 8010ba2:	2500      	movs	r5, #0
 8010ba4:	e000      	b.n	8010ba8 <uxr_write_framed_msg+0xf0>
 8010ba6:	b160      	cbz	r0, 8010bc2 <uxr_write_framed_msg+0x10a>
 8010ba8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8010bac:	1b52      	subs	r2, r2, r5
 8010bae:	465b      	mov	r3, fp
 8010bb0:	4421      	add	r1, r4
 8010bb2:	4638      	mov	r0, r7
 8010bb4:	47b0      	blx	r6
 8010bb6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8010bba:	4405      	add	r5, r0
 8010bbc:	4295      	cmp	r5, r2
 8010bbe:	d3f2      	bcc.n	8010ba6 <uxr_write_framed_msg+0xee>
 8010bc0:	d003      	beq.n	8010bca <uxr_write_framed_msg+0x112>
 8010bc2:	2000      	movs	r0, #0
 8010bc4:	b003      	add	sp, #12
 8010bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bca:	fa5f f18a 	uxtb.w	r1, sl
 8010bce:	f04f 0300 	mov.w	r3, #0
 8010bd2:	2901      	cmp	r1, #1
 8010bd4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8010bd8:	f04f 0200 	mov.w	r2, #0
 8010bdc:	f200 8090 	bhi.w	8010d00 <uxr_write_framed_msg+0x248>
 8010be0:	1c51      	adds	r1, r2, #1
 8010be2:	b2c9      	uxtb	r1, r1
 8010be4:	2929      	cmp	r1, #41	; 0x29
 8010be6:	d8dc      	bhi.n	8010ba2 <uxr_write_framed_msg+0xea>
 8010be8:	18a5      	adds	r5, r4, r2
 8010bea:	4421      	add	r1, r4
 8010bec:	3202      	adds	r2, #2
 8010bee:	f088 0820 	eor.w	r8, r8, #32
 8010bf2:	4648      	mov	r0, r9
 8010bf4:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8010bf8:	b2d2      	uxtb	r2, r2
 8010bfa:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 8010bfe:	f04f 0901 	mov.w	r9, #1
 8010c02:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8010c06:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010c0a:	2800      	cmp	r0, #0
 8010c0c:	f040 8085 	bne.w	8010d1a <uxr_write_framed_msg+0x262>
 8010c10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010c14:	e7bc      	b.n	8010b90 <uxr_write_framed_msg+0xd8>
 8010c16:	4611      	mov	r1, r2
 8010c18:	f04f 0c03 	mov.w	ip, #3
 8010c1c:	2204      	movs	r2, #4
 8010c1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c20:	4421      	add	r1, r4
 8010c22:	b2dd      	uxtb	r5, r3
 8010c24:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8010c28:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 8010c2c:	44a4      	add	ip, r4
 8010c2e:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8010c32:	f080 0020 	eor.w	r0, r0, #32
 8010c36:	2901      	cmp	r1, #1
 8010c38:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8010c3c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010c40:	f63f af66 	bhi.w	8010b10 <uxr_write_framed_msg+0x58>
 8010c44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c46:	18a0      	adds	r0, r4, r2
 8010c48:	f085 0520 	eor.w	r5, r5, #32
 8010c4c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8010c50:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010c54:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 8010c58:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8010c5c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8010c60:	3202      	adds	r2, #2
 8010c62:	2801      	cmp	r0, #1
 8010c64:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010c68:	f63f af60 	bhi.w	8010b2c <uxr_write_framed_msg+0x74>
 8010c6c:	1c50      	adds	r0, r2, #1
 8010c6e:	18a5      	adds	r5, r4, r2
 8010c70:	fa54 f080 	uxtab	r0, r4, r0
 8010c74:	3202      	adds	r2, #2
 8010c76:	f081 0120 	eor.w	r1, r1, #32
 8010c7a:	b2d2      	uxtb	r2, r2
 8010c7c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8010c80:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 8010c84:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8010c88:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	f47f af57 	bne.w	8010b40 <uxr_write_framed_msg+0x88>
 8010c92:	9301      	str	r3, [sp, #4]
 8010c94:	4698      	mov	r8, r3
 8010c96:	e779      	b.n	8010b8c <uxr_write_framed_msg+0xd4>
 8010c98:	2500      	movs	r5, #0
 8010c9a:	e001      	b.n	8010ca0 <uxr_write_framed_msg+0x1e8>
 8010c9c:	2800      	cmp	r0, #0
 8010c9e:	d090      	beq.n	8010bc2 <uxr_write_framed_msg+0x10a>
 8010ca0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8010ca4:	1b52      	subs	r2, r2, r5
 8010ca6:	465b      	mov	r3, fp
 8010ca8:	4421      	add	r1, r4
 8010caa:	4638      	mov	r0, r7
 8010cac:	47b0      	blx	r6
 8010cae:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8010cb2:	4405      	add	r5, r0
 8010cb4:	4295      	cmp	r5, r2
 8010cb6:	d3f1      	bcc.n	8010c9c <uxr_write_framed_msg+0x1e4>
 8010cb8:	d183      	bne.n	8010bc2 <uxr_write_framed_msg+0x10a>
 8010cba:	f04f 0300 	mov.w	r3, #0
 8010cbe:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8010cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010cc4:	4543      	cmp	r3, r8
 8010cc6:	d964      	bls.n	8010d92 <uxr_write_framed_msg+0x2da>
 8010cc8:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8010ccc:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8010cd0:	2901      	cmp	r1, #1
 8010cd2:	f04f 0200 	mov.w	r2, #0
 8010cd6:	f63f af3d 	bhi.w	8010b54 <uxr_write_framed_msg+0x9c>
 8010cda:	1c51      	adds	r1, r2, #1
 8010cdc:	b2c9      	uxtb	r1, r1
 8010cde:	2929      	cmp	r1, #41	; 0x29
 8010ce0:	d8da      	bhi.n	8010c98 <uxr_write_framed_msg+0x1e0>
 8010ce2:	18a0      	adds	r0, r4, r2
 8010ce4:	4421      	add	r1, r4
 8010ce6:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8010cea:	3202      	adds	r2, #2
 8010cec:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8010cf0:	b2d2      	uxtb	r2, r2
 8010cf2:	f083 0020 	eor.w	r0, r3, #32
 8010cf6:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8010cfa:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010cfe:	e733      	b.n	8010b68 <uxr_write_framed_msg+0xb0>
 8010d00:	18a1      	adds	r1, r4, r2
 8010d02:	3201      	adds	r2, #1
 8010d04:	4648      	mov	r0, r9
 8010d06:	b2d2      	uxtb	r2, r2
 8010d08:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8010d0c:	f04f 0901 	mov.w	r9, #1
 8010d10:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010d14:	2800      	cmp	r0, #0
 8010d16:	f43f af7b 	beq.w	8010c10 <uxr_write_framed_msg+0x158>
 8010d1a:	2500      	movs	r5, #0
 8010d1c:	e002      	b.n	8010d24 <uxr_write_framed_msg+0x26c>
 8010d1e:	2800      	cmp	r0, #0
 8010d20:	f43f af4f 	beq.w	8010bc2 <uxr_write_framed_msg+0x10a>
 8010d24:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8010d28:	1b52      	subs	r2, r2, r5
 8010d2a:	465b      	mov	r3, fp
 8010d2c:	4421      	add	r1, r4
 8010d2e:	4638      	mov	r0, r7
 8010d30:	47b0      	blx	r6
 8010d32:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8010d36:	4405      	add	r5, r0
 8010d38:	4295      	cmp	r5, r2
 8010d3a:	d3f0      	bcc.n	8010d1e <uxr_write_framed_msg+0x266>
 8010d3c:	f47f af41 	bne.w	8010bc2 <uxr_write_framed_msg+0x10a>
 8010d40:	2300      	movs	r3, #0
 8010d42:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8010d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d48:	b298      	uxth	r0, r3
 8010d4a:	b003      	add	sp, #12
 8010d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d50:	217d      	movs	r1, #125	; 0x7d
 8010d52:	f082 0220 	eor.w	r2, r2, #32
 8010d56:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8010d5a:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8010d5e:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8010d62:	2901      	cmp	r1, #1
 8010d64:	f04f 0203 	mov.w	r2, #3
 8010d68:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010d6c:	d804      	bhi.n	8010d78 <uxr_write_framed_msg+0x2c0>
 8010d6e:	4611      	mov	r1, r2
 8010d70:	f04f 0c04 	mov.w	ip, #4
 8010d74:	2205      	movs	r2, #5
 8010d76:	e752      	b.n	8010c1e <uxr_write_framed_msg+0x166>
 8010d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d7a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8010d7e:	b2dd      	uxtb	r5, r3
 8010d80:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8010d84:	2204      	movs	r2, #4
 8010d86:	2901      	cmp	r1, #1
 8010d88:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010d8c:	f63f aec0 	bhi.w	8010b10 <uxr_write_framed_msg+0x58>
 8010d90:	e758      	b.n	8010c44 <uxr_write_framed_msg+0x18c>
 8010d92:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8010d96:	fa5f f889 	uxtb.w	r8, r9
 8010d9a:	9301      	str	r3, [sp, #4]
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	e6f5      	b.n	8010b8c <uxr_write_framed_msg+0xd4>
 8010da0:	08013c48 	.word	0x08013c48

08010da4 <uxr_framing_read_transport>:
 8010da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010da8:	4604      	mov	r4, r0
 8010daa:	b083      	sub	sp, #12
 8010dac:	461f      	mov	r7, r3
 8010dae:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8010db2:	4689      	mov	r9, r1
 8010db4:	4692      	mov	sl, r2
 8010db6:	f7fb fbff 	bl	800c5b8 <uxr_millis>
 8010dba:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8010dbe:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8010dc2:	42b3      	cmp	r3, r6
 8010dc4:	4680      	mov	r8, r0
 8010dc6:	d061      	beq.n	8010e8c <uxr_framing_read_transport+0xe8>
 8010dc8:	d81c      	bhi.n	8010e04 <uxr_framing_read_transport+0x60>
 8010dca:	1e75      	subs	r5, r6, #1
 8010dcc:	1aed      	subs	r5, r5, r3
 8010dce:	b2ed      	uxtb	r5, r5
 8010dd0:	2600      	movs	r6, #0
 8010dd2:	455d      	cmp	r5, fp
 8010dd4:	d81f      	bhi.n	8010e16 <uxr_framing_read_transport+0x72>
 8010dd6:	19ab      	adds	r3, r5, r6
 8010dd8:	455b      	cmp	r3, fp
 8010dda:	bf84      	itt	hi
 8010ddc:	ebab 0605 	subhi.w	r6, fp, r5
 8010de0:	b2f6      	uxtbhi	r6, r6
 8010de2:	b9ed      	cbnz	r5, 8010e20 <uxr_framing_read_transport+0x7c>
 8010de4:	f04f 0b00 	mov.w	fp, #0
 8010de8:	f7fb fbe6 	bl	800c5b8 <uxr_millis>
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	eba0 0808 	sub.w	r8, r0, r8
 8010df2:	eba3 0308 	sub.w	r3, r3, r8
 8010df6:	4658      	mov	r0, fp
 8010df8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010dfc:	603b      	str	r3, [r7, #0]
 8010dfe:	b003      	add	sp, #12
 8010e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e04:	2e00      	cmp	r6, #0
 8010e06:	d049      	beq.n	8010e9c <uxr_framing_read_transport+0xf8>
 8010e08:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8010e0c:	b2ed      	uxtb	r5, r5
 8010e0e:	3e01      	subs	r6, #1
 8010e10:	455d      	cmp	r5, fp
 8010e12:	b2f6      	uxtb	r6, r6
 8010e14:	d9df      	bls.n	8010dd6 <uxr_framing_read_transport+0x32>
 8010e16:	fa5f f58b 	uxtb.w	r5, fp
 8010e1a:	2600      	movs	r6, #0
 8010e1c:	2d00      	cmp	r5, #0
 8010e1e:	d0e1      	beq.n	8010de4 <uxr_framing_read_transport+0x40>
 8010e20:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8010e24:	3102      	adds	r1, #2
 8010e26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e28:	9300      	str	r3, [sp, #0]
 8010e2a:	683b      	ldr	r3, [r7, #0]
 8010e2c:	4421      	add	r1, r4
 8010e2e:	462a      	mov	r2, r5
 8010e30:	4650      	mov	r0, sl
 8010e32:	47c8      	blx	r9
 8010e34:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8010e38:	4a1a      	ldr	r2, [pc, #104]	; (8010ea4 <uxr_framing_read_transport+0x100>)
 8010e3a:	4403      	add	r3, r0
 8010e3c:	0859      	lsrs	r1, r3, #1
 8010e3e:	fba2 2101 	umull	r2, r1, r2, r1
 8010e42:	0889      	lsrs	r1, r1, #2
 8010e44:	222a      	movs	r2, #42	; 0x2a
 8010e46:	fb02 3111 	mls	r1, r2, r1, r3
 8010e4a:	4683      	mov	fp, r0
 8010e4c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8010e50:	2800      	cmp	r0, #0
 8010e52:	d0c7      	beq.n	8010de4 <uxr_framing_read_transport+0x40>
 8010e54:	42a8      	cmp	r0, r5
 8010e56:	d1c7      	bne.n	8010de8 <uxr_framing_read_transport+0x44>
 8010e58:	2e00      	cmp	r6, #0
 8010e5a:	d0c5      	beq.n	8010de8 <uxr_framing_read_transport+0x44>
 8010e5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e5e:	9300      	str	r3, [sp, #0]
 8010e60:	3102      	adds	r1, #2
 8010e62:	4632      	mov	r2, r6
 8010e64:	4421      	add	r1, r4
 8010e66:	2300      	movs	r3, #0
 8010e68:	4650      	mov	r0, sl
 8010e6a:	47c8      	blx	r9
 8010e6c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8010e70:	4a0c      	ldr	r2, [pc, #48]	; (8010ea4 <uxr_framing_read_transport+0x100>)
 8010e72:	180b      	adds	r3, r1, r0
 8010e74:	0859      	lsrs	r1, r3, #1
 8010e76:	fba2 1201 	umull	r1, r2, r2, r1
 8010e7a:	0892      	lsrs	r2, r2, #2
 8010e7c:	212a      	movs	r1, #42	; 0x2a
 8010e7e:	fb01 3312 	mls	r3, r1, r2, r3
 8010e82:	eb00 0b05 	add.w	fp, r0, r5
 8010e86:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8010e8a:	e7ad      	b.n	8010de8 <uxr_framing_read_transport+0x44>
 8010e8c:	2600      	movs	r6, #0
 8010e8e:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8010e92:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8010e94:	d9bf      	bls.n	8010e16 <uxr_framing_read_transport+0x72>
 8010e96:	2102      	movs	r1, #2
 8010e98:	2529      	movs	r5, #41	; 0x29
 8010e9a:	e7c4      	b.n	8010e26 <uxr_framing_read_transport+0x82>
 8010e9c:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8010ea0:	b2ed      	uxtb	r5, r5
 8010ea2:	e796      	b.n	8010dd2 <uxr_framing_read_transport+0x2e>
 8010ea4:	30c30c31 	.word	0x30c30c31

08010ea8 <uxr_read_framed_msg>:
 8010ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eac:	461e      	mov	r6, r3
 8010eae:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8010eb2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8010eb6:	429d      	cmp	r5, r3
 8010eb8:	b083      	sub	sp, #12
 8010eba:	4604      	mov	r4, r0
 8010ebc:	4688      	mov	r8, r1
 8010ebe:	4691      	mov	r9, r2
 8010ec0:	f000 8188 	beq.w	80111d4 <uxr_read_framed_msg+0x32c>
 8010ec4:	7823      	ldrb	r3, [r4, #0]
 8010ec6:	4dc1      	ldr	r5, [pc, #772]	; (80111cc <uxr_read_framed_msg+0x324>)
 8010ec8:	4fc1      	ldr	r7, [pc, #772]	; (80111d0 <uxr_read_framed_msg+0x328>)
 8010eca:	2b07      	cmp	r3, #7
 8010ecc:	d8fd      	bhi.n	8010eca <uxr_read_framed_msg+0x22>
 8010ece:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010ed2:	0115      	.short	0x0115
 8010ed4:	00d600f6 	.word	0x00d600f6
 8010ed8:	009000b9 	.word	0x009000b9
 8010edc:	0030004d 	.word	0x0030004d
 8010ee0:	0008      	.short	0x0008
 8010ee2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8010ee6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8010eea:	4299      	cmp	r1, r3
 8010eec:	f000 814a 	beq.w	8011184 <uxr_read_framed_msg+0x2dc>
 8010ef0:	18e2      	adds	r2, r4, r3
 8010ef2:	7892      	ldrb	r2, [r2, #2]
 8010ef4:	2a7d      	cmp	r2, #125	; 0x7d
 8010ef6:	f000 8199 	beq.w	801122c <uxr_read_framed_msg+0x384>
 8010efa:	3301      	adds	r3, #1
 8010efc:	0858      	lsrs	r0, r3, #1
 8010efe:	fba5 1000 	umull	r1, r0, r5, r0
 8010f02:	0880      	lsrs	r0, r0, #2
 8010f04:	212a      	movs	r1, #42	; 0x2a
 8010f06:	fb01 3310 	mls	r3, r1, r0, r3
 8010f0a:	2a7e      	cmp	r2, #126	; 0x7e
 8010f0c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010f10:	f000 8252 	beq.w	80113b8 <uxr_read_framed_msg+0x510>
 8010f14:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010f16:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8010f18:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010f1c:	b29b      	uxth	r3, r3
 8010f1e:	2200      	movs	r2, #0
 8010f20:	4299      	cmp	r1, r3
 8010f22:	86a3      	strh	r3, [r4, #52]	; 0x34
 8010f24:	7022      	strb	r2, [r4, #0]
 8010f26:	f000 8179 	beq.w	801121c <uxr_read_framed_msg+0x374>
 8010f2a:	2000      	movs	r0, #0
 8010f2c:	b003      	add	sp, #12
 8010f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f32:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8010f36:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8010f3a:	4299      	cmp	r1, r3
 8010f3c:	f000 8131 	beq.w	80111a2 <uxr_read_framed_msg+0x2fa>
 8010f40:	18e2      	adds	r2, r4, r3
 8010f42:	7890      	ldrb	r0, [r2, #2]
 8010f44:	287d      	cmp	r0, #125	; 0x7d
 8010f46:	f000 8190 	beq.w	801126a <uxr_read_framed_msg+0x3c2>
 8010f4a:	3301      	adds	r3, #1
 8010f4c:	085a      	lsrs	r2, r3, #1
 8010f4e:	fba5 1202 	umull	r1, r2, r5, r2
 8010f52:	0892      	lsrs	r2, r2, #2
 8010f54:	212a      	movs	r1, #42	; 0x2a
 8010f56:	fb01 3312 	mls	r3, r1, r2, r3
 8010f5a:	287e      	cmp	r0, #126	; 0x7e
 8010f5c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010f60:	f000 821a 	beq.w	8011398 <uxr_read_framed_msg+0x4f0>
 8010f64:	2307      	movs	r3, #7
 8010f66:	86a0      	strh	r0, [r4, #52]	; 0x34
 8010f68:	7023      	strb	r3, [r4, #0]
 8010f6a:	e7ae      	b.n	8010eca <uxr_read_framed_msg+0x22>
 8010f6c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8010f6e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8010f72:	459e      	cmp	lr, r3
 8010f74:	d938      	bls.n	8010fe8 <uxr_read_framed_msg+0x140>
 8010f76:	ee07 8a90 	vmov	s15, r8
 8010f7a:	212a      	movs	r1, #42	; 0x2a
 8010f7c:	e020      	b.n	8010fc0 <uxr_read_framed_msg+0x118>
 8010f7e:	f89b c002 	ldrb.w	ip, [fp, #2]
 8010f82:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8010f86:	f000 80d4 	beq.w	8011132 <uxr_read_framed_msg+0x28a>
 8010f8a:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8010f8e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8010f92:	f000 8219 	beq.w	80113c8 <uxr_read_framed_msg+0x520>
 8010f96:	f806 c003 	strb.w	ip, [r6, r3]
 8010f9a:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 8010f9e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8010fa0:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8010fa4:	ea8a 000c 	eor.w	r0, sl, ip
 8010fa8:	b2c0      	uxtb	r0, r0
 8010faa:	3301      	adds	r3, #1
 8010fac:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8010fb0:	b29b      	uxth	r3, r3
 8010fb2:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8010fb6:	4573      	cmp	r3, lr
 8010fb8:	8663      	strh	r3, [r4, #50]	; 0x32
 8010fba:	86e2      	strh	r2, [r4, #54]	; 0x36
 8010fbc:	f080 8120 	bcs.w	8011200 <uxr_read_framed_msg+0x358>
 8010fc0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8010fc4:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8010fc8:	f100 0c01 	add.w	ip, r0, #1
 8010fcc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010fd0:	fba5 8202 	umull	r8, r2, r5, r2
 8010fd4:	0892      	lsrs	r2, r2, #2
 8010fd6:	4582      	cmp	sl, r0
 8010fd8:	eb04 0b00 	add.w	fp, r4, r0
 8010fdc:	fb01 c212 	mls	r2, r1, r2, ip
 8010fe0:	d1cd      	bne.n	8010f7e <uxr_read_framed_msg+0xd6>
 8010fe2:	ee17 8a90 	vmov	r8, s15
 8010fe6:	459e      	cmp	lr, r3
 8010fe8:	f040 8111 	bne.w	801120e <uxr_read_framed_msg+0x366>
 8010fec:	2306      	movs	r3, #6
 8010fee:	7023      	strb	r3, [r4, #0]
 8010ff0:	e76b      	b.n	8010eca <uxr_read_framed_msg+0x22>
 8010ff2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8010ff6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8010ffa:	4298      	cmp	r0, r3
 8010ffc:	f000 80c2 	beq.w	8011184 <uxr_read_framed_msg+0x2dc>
 8011000:	18e2      	adds	r2, r4, r3
 8011002:	7891      	ldrb	r1, [r2, #2]
 8011004:	297d      	cmp	r1, #125	; 0x7d
 8011006:	f000 814c 	beq.w	80112a2 <uxr_read_framed_msg+0x3fa>
 801100a:	3301      	adds	r3, #1
 801100c:	085a      	lsrs	r2, r3, #1
 801100e:	fba5 0202 	umull	r0, r2, r5, r2
 8011012:	0892      	lsrs	r2, r2, #2
 8011014:	202a      	movs	r0, #42	; 0x2a
 8011016:	fb00 3312 	mls	r3, r0, r2, r3
 801101a:	297e      	cmp	r1, #126	; 0x7e
 801101c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011020:	f000 81ca 	beq.w	80113b8 <uxr_read_framed_msg+0x510>
 8011024:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8011026:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801102a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801102c:	b29b      	uxth	r3, r3
 801102e:	2000      	movs	r0, #0
 8011030:	428b      	cmp	r3, r1
 8011032:	8623      	strh	r3, [r4, #48]	; 0x30
 8011034:	8660      	strh	r0, [r4, #50]	; 0x32
 8011036:	86e0      	strh	r0, [r4, #54]	; 0x36
 8011038:	f240 80df 	bls.w	80111fa <uxr_read_framed_msg+0x352>
 801103c:	7020      	strb	r0, [r4, #0]
 801103e:	b003      	add	sp, #12
 8011040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011044:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8011048:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801104c:	4299      	cmp	r1, r3
 801104e:	f000 80a8 	beq.w	80111a2 <uxr_read_framed_msg+0x2fa>
 8011052:	18e2      	adds	r2, r4, r3
 8011054:	7890      	ldrb	r0, [r2, #2]
 8011056:	287d      	cmp	r0, #125	; 0x7d
 8011058:	f000 8164 	beq.w	8011324 <uxr_read_framed_msg+0x47c>
 801105c:	3301      	adds	r3, #1
 801105e:	085a      	lsrs	r2, r3, #1
 8011060:	fba5 1202 	umull	r1, r2, r5, r2
 8011064:	0892      	lsrs	r2, r2, #2
 8011066:	212a      	movs	r1, #42	; 0x2a
 8011068:	fb01 3312 	mls	r3, r1, r2, r3
 801106c:	287e      	cmp	r0, #126	; 0x7e
 801106e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011072:	f000 8191 	beq.w	8011398 <uxr_read_framed_msg+0x4f0>
 8011076:	2304      	movs	r3, #4
 8011078:	8620      	strh	r0, [r4, #48]	; 0x30
 801107a:	7023      	strb	r3, [r4, #0]
 801107c:	e725      	b.n	8010eca <uxr_read_framed_msg+0x22>
 801107e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8011082:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8011086:	4290      	cmp	r0, r2
 8011088:	f000 80b3 	beq.w	80111f2 <uxr_read_framed_msg+0x34a>
 801108c:	18a3      	adds	r3, r4, r2
 801108e:	7899      	ldrb	r1, [r3, #2]
 8011090:	297d      	cmp	r1, #125	; 0x7d
 8011092:	f000 8164 	beq.w	801135e <uxr_read_framed_msg+0x4b6>
 8011096:	3201      	adds	r2, #1
 8011098:	0850      	lsrs	r0, r2, #1
 801109a:	fba5 3000 	umull	r3, r0, r5, r0
 801109e:	0880      	lsrs	r0, r0, #2
 80110a0:	232a      	movs	r3, #42	; 0x2a
 80110a2:	fb03 2210 	mls	r2, r3, r0, r2
 80110a6:	297e      	cmp	r1, #126	; 0x7e
 80110a8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80110ac:	f000 8188 	beq.w	80113c0 <uxr_read_framed_msg+0x518>
 80110b0:	7863      	ldrb	r3, [r4, #1]
 80110b2:	428b      	cmp	r3, r1
 80110b4:	bf0c      	ite	eq
 80110b6:	2303      	moveq	r3, #3
 80110b8:	2300      	movne	r3, #0
 80110ba:	7023      	strb	r3, [r4, #0]
 80110bc:	e705      	b.n	8010eca <uxr_read_framed_msg+0x22>
 80110be:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80110c2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80110c6:	2200      	movs	r2, #0
 80110c8:	4299      	cmp	r1, r3
 80110ca:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 80110ce:	d06c      	beq.n	80111aa <uxr_read_framed_msg+0x302>
 80110d0:	18e2      	adds	r2, r4, r3
 80110d2:	7890      	ldrb	r0, [r2, #2]
 80110d4:	287d      	cmp	r0, #125	; 0x7d
 80110d6:	f000 8101 	beq.w	80112dc <uxr_read_framed_msg+0x434>
 80110da:	3301      	adds	r3, #1
 80110dc:	085a      	lsrs	r2, r3, #1
 80110de:	fba5 1202 	umull	r1, r2, r5, r2
 80110e2:	0892      	lsrs	r2, r2, #2
 80110e4:	212a      	movs	r1, #42	; 0x2a
 80110e6:	fb01 3312 	mls	r3, r1, r2, r3
 80110ea:	287e      	cmp	r0, #126	; 0x7e
 80110ec:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 80110f0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80110f4:	d059      	beq.n	80111aa <uxr_read_framed_msg+0x302>
 80110f6:	2302      	movs	r3, #2
 80110f8:	7023      	strb	r3, [r4, #0]
 80110fa:	e6e6      	b.n	8010eca <uxr_read_framed_msg+0x22>
 80110fc:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8011100:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8011104:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8011108:	1c51      	adds	r1, r2, #1
 801110a:	084b      	lsrs	r3, r1, #1
 801110c:	fba5 c303 	umull	ip, r3, r5, r3
 8011110:	089b      	lsrs	r3, r3, #2
 8011112:	fb0e 1313 	mls	r3, lr, r3, r1
 8011116:	4592      	cmp	sl, r2
 8011118:	eb04 0002 	add.w	r0, r4, r2
 801111c:	b2da      	uxtb	r2, r3
 801111e:	f43f af04 	beq.w	8010f2a <uxr_read_framed_msg+0x82>
 8011122:	7883      	ldrb	r3, [r0, #2]
 8011124:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8011128:	2b7e      	cmp	r3, #126	; 0x7e
 801112a:	d1ed      	bne.n	8011108 <uxr_read_framed_msg+0x260>
 801112c:	2301      	movs	r3, #1
 801112e:	7023      	strb	r3, [r4, #0]
 8011130:	e6cb      	b.n	8010eca <uxr_read_framed_msg+0x22>
 8011132:	f100 0c01 	add.w	ip, r0, #1
 8011136:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801113a:	fba5 8202 	umull	r8, r2, r5, r2
 801113e:	0892      	lsrs	r2, r2, #2
 8011140:	fb01 c212 	mls	r2, r1, r2, ip
 8011144:	eb04 0c02 	add.w	ip, r4, r2
 8011148:	b2d2      	uxtb	r2, r2
 801114a:	4592      	cmp	sl, r2
 801114c:	f100 0002 	add.w	r0, r0, #2
 8011150:	f43f af47 	beq.w	8010fe2 <uxr_read_framed_msg+0x13a>
 8011154:	0842      	lsrs	r2, r0, #1
 8011156:	f89c a002 	ldrb.w	sl, [ip, #2]
 801115a:	fba5 8202 	umull	r8, r2, r5, r2
 801115e:	0892      	lsrs	r2, r2, #2
 8011160:	fb01 0012 	mls	r0, r1, r2, r0
 8011164:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 8011168:	f08a 0c20 	eor.w	ip, sl, #32
 801116c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8011170:	f47f af11 	bne.w	8010f96 <uxr_read_framed_msg+0xee>
 8011174:	459e      	cmp	lr, r3
 8011176:	ee17 8a90 	vmov	r8, s15
 801117a:	f43f af37 	beq.w	8010fec <uxr_read_framed_msg+0x144>
 801117e:	2301      	movs	r3, #1
 8011180:	7023      	strb	r3, [r4, #0]
 8011182:	e6a2      	b.n	8010eca <uxr_read_framed_msg+0x22>
 8011184:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011186:	9300      	str	r3, [sp, #0]
 8011188:	2301      	movs	r3, #1
 801118a:	9301      	str	r3, [sp, #4]
 801118c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801118e:	464a      	mov	r2, r9
 8011190:	4641      	mov	r1, r8
 8011192:	4620      	mov	r0, r4
 8011194:	f7ff fe06 	bl	8010da4 <uxr_framing_read_transport>
 8011198:	2800      	cmp	r0, #0
 801119a:	f43f aec6 	beq.w	8010f2a <uxr_read_framed_msg+0x82>
 801119e:	7823      	ldrb	r3, [r4, #0]
 80111a0:	e693      	b.n	8010eca <uxr_read_framed_msg+0x22>
 80111a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80111a4:	9300      	str	r3, [sp, #0]
 80111a6:	2302      	movs	r3, #2
 80111a8:	e7ef      	b.n	801118a <uxr_read_framed_msg+0x2e2>
 80111aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80111ac:	9300      	str	r3, [sp, #0]
 80111ae:	2304      	movs	r3, #4
 80111b0:	9301      	str	r3, [sp, #4]
 80111b2:	464a      	mov	r2, r9
 80111b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80111b6:	4641      	mov	r1, r8
 80111b8:	4620      	mov	r0, r4
 80111ba:	f7ff fdf3 	bl	8010da4 <uxr_framing_read_transport>
 80111be:	2800      	cmp	r0, #0
 80111c0:	d1ed      	bne.n	801119e <uxr_read_framed_msg+0x2f6>
 80111c2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80111c6:	2b7e      	cmp	r3, #126	; 0x7e
 80111c8:	d0e9      	beq.n	801119e <uxr_read_framed_msg+0x2f6>
 80111ca:	e6ae      	b.n	8010f2a <uxr_read_framed_msg+0x82>
 80111cc:	30c30c31 	.word	0x30c30c31
 80111d0:	08013c48 	.word	0x08013c48
 80111d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80111d6:	9300      	str	r3, [sp, #0]
 80111d8:	2305      	movs	r3, #5
 80111da:	9301      	str	r3, [sp, #4]
 80111dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80111de:	f7ff fde1 	bl	8010da4 <uxr_framing_read_transport>
 80111e2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80111e6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80111ea:	429a      	cmp	r2, r3
 80111ec:	f43f ae9d 	beq.w	8010f2a <uxr_read_framed_msg+0x82>
 80111f0:	e668      	b.n	8010ec4 <uxr_read_framed_msg+0x1c>
 80111f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80111f4:	9300      	str	r3, [sp, #0]
 80111f6:	2303      	movs	r3, #3
 80111f8:	e7c7      	b.n	801118a <uxr_read_framed_msg+0x2e2>
 80111fa:	2305      	movs	r3, #5
 80111fc:	7023      	strb	r3, [r4, #0]
 80111fe:	e664      	b.n	8010eca <uxr_read_framed_msg+0x22>
 8011200:	ee17 8a90 	vmov	r8, s15
 8011204:	f43f aef2 	beq.w	8010fec <uxr_read_framed_msg+0x144>
 8011208:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801120c:	d08e      	beq.n	801112c <uxr_read_framed_msg+0x284>
 801120e:	ebae 0303 	sub.w	r3, lr, r3
 8011212:	3302      	adds	r3, #2
 8011214:	9301      	str	r3, [sp, #4]
 8011216:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011218:	9300      	str	r3, [sp, #0]
 801121a:	e7b7      	b.n	801118c <uxr_read_framed_msg+0x2e4>
 801121c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801121e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8011222:	7013      	strb	r3, [r2, #0]
 8011224:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8011226:	b003      	add	sp, #12
 8011228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801122c:	f103 0c01 	add.w	ip, r3, #1
 8011230:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011234:	fba5 0202 	umull	r0, r2, r5, r2
 8011238:	0892      	lsrs	r2, r2, #2
 801123a:	202a      	movs	r0, #42	; 0x2a
 801123c:	fb00 c212 	mls	r2, r0, r2, ip
 8011240:	fa5f fc82 	uxtb.w	ip, r2
 8011244:	4561      	cmp	r1, ip
 8011246:	d09d      	beq.n	8011184 <uxr_read_framed_msg+0x2dc>
 8011248:	3302      	adds	r3, #2
 801124a:	4422      	add	r2, r4
 801124c:	0859      	lsrs	r1, r3, #1
 801124e:	7892      	ldrb	r2, [r2, #2]
 8011250:	fba5 c101 	umull	ip, r1, r5, r1
 8011254:	0889      	lsrs	r1, r1, #2
 8011256:	fb00 3311 	mls	r3, r0, r1, r3
 801125a:	2a7e      	cmp	r2, #126	; 0x7e
 801125c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011260:	f000 80aa 	beq.w	80113b8 <uxr_read_framed_msg+0x510>
 8011264:	f082 0220 	eor.w	r2, r2, #32
 8011268:	e654      	b.n	8010f14 <uxr_read_framed_msg+0x6c>
 801126a:	1c58      	adds	r0, r3, #1
 801126c:	0842      	lsrs	r2, r0, #1
 801126e:	fba5 c202 	umull	ip, r2, r5, r2
 8011272:	0892      	lsrs	r2, r2, #2
 8011274:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8011278:	fb0c 0212 	mls	r2, ip, r2, r0
 801127c:	b2d0      	uxtb	r0, r2
 801127e:	4281      	cmp	r1, r0
 8011280:	d08f      	beq.n	80111a2 <uxr_read_framed_msg+0x2fa>
 8011282:	4422      	add	r2, r4
 8011284:	3302      	adds	r3, #2
 8011286:	7890      	ldrb	r0, [r2, #2]
 8011288:	085a      	lsrs	r2, r3, #1
 801128a:	fba5 1202 	umull	r1, r2, r5, r2
 801128e:	0892      	lsrs	r2, r2, #2
 8011290:	fb0c 3312 	mls	r3, ip, r2, r3
 8011294:	287e      	cmp	r0, #126	; 0x7e
 8011296:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801129a:	d07d      	beq.n	8011398 <uxr_read_framed_msg+0x4f0>
 801129c:	f080 0020 	eor.w	r0, r0, #32
 80112a0:	e660      	b.n	8010f64 <uxr_read_framed_msg+0xbc>
 80112a2:	1c59      	adds	r1, r3, #1
 80112a4:	084a      	lsrs	r2, r1, #1
 80112a6:	fba5 c202 	umull	ip, r2, r5, r2
 80112aa:	0892      	lsrs	r2, r2, #2
 80112ac:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80112b0:	fb0c 1212 	mls	r2, ip, r2, r1
 80112b4:	b2d1      	uxtb	r1, r2
 80112b6:	4288      	cmp	r0, r1
 80112b8:	f43f af64 	beq.w	8011184 <uxr_read_framed_msg+0x2dc>
 80112bc:	4422      	add	r2, r4
 80112be:	3302      	adds	r3, #2
 80112c0:	7891      	ldrb	r1, [r2, #2]
 80112c2:	085a      	lsrs	r2, r3, #1
 80112c4:	fba5 0202 	umull	r0, r2, r5, r2
 80112c8:	0892      	lsrs	r2, r2, #2
 80112ca:	fb0c 3312 	mls	r3, ip, r2, r3
 80112ce:	297e      	cmp	r1, #126	; 0x7e
 80112d0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80112d4:	d070      	beq.n	80113b8 <uxr_read_framed_msg+0x510>
 80112d6:	f081 0120 	eor.w	r1, r1, #32
 80112da:	e6a3      	b.n	8011024 <uxr_read_framed_msg+0x17c>
 80112dc:	f103 0c01 	add.w	ip, r3, #1
 80112e0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80112e4:	fba5 0202 	umull	r0, r2, r5, r2
 80112e8:	0892      	lsrs	r2, r2, #2
 80112ea:	202a      	movs	r0, #42	; 0x2a
 80112ec:	fb00 c212 	mls	r2, r0, r2, ip
 80112f0:	fa5f fc82 	uxtb.w	ip, r2
 80112f4:	4561      	cmp	r1, ip
 80112f6:	f43f af58 	beq.w	80111aa <uxr_read_framed_msg+0x302>
 80112fa:	4422      	add	r2, r4
 80112fc:	3302      	adds	r3, #2
 80112fe:	7891      	ldrb	r1, [r2, #2]
 8011300:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8011304:	085a      	lsrs	r2, r3, #1
 8011306:	fba5 c202 	umull	ip, r2, r5, r2
 801130a:	0892      	lsrs	r2, r2, #2
 801130c:	fb00 3312 	mls	r3, r0, r2, r3
 8011310:	297e      	cmp	r1, #126	; 0x7e
 8011312:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011316:	f43f af48 	beq.w	80111aa <uxr_read_framed_msg+0x302>
 801131a:	f081 0120 	eor.w	r1, r1, #32
 801131e:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8011322:	e6e8      	b.n	80110f6 <uxr_read_framed_msg+0x24e>
 8011324:	1c58      	adds	r0, r3, #1
 8011326:	0842      	lsrs	r2, r0, #1
 8011328:	fba5 c202 	umull	ip, r2, r5, r2
 801132c:	0892      	lsrs	r2, r2, #2
 801132e:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8011332:	fb0c 0212 	mls	r2, ip, r2, r0
 8011336:	b2d0      	uxtb	r0, r2
 8011338:	4281      	cmp	r1, r0
 801133a:	f43f af32 	beq.w	80111a2 <uxr_read_framed_msg+0x2fa>
 801133e:	4422      	add	r2, r4
 8011340:	3302      	adds	r3, #2
 8011342:	7890      	ldrb	r0, [r2, #2]
 8011344:	085a      	lsrs	r2, r3, #1
 8011346:	fba5 1202 	umull	r1, r2, r5, r2
 801134a:	0892      	lsrs	r2, r2, #2
 801134c:	fb0c 3312 	mls	r3, ip, r2, r3
 8011350:	287e      	cmp	r0, #126	; 0x7e
 8011352:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011356:	d01f      	beq.n	8011398 <uxr_read_framed_msg+0x4f0>
 8011358:	f080 0020 	eor.w	r0, r0, #32
 801135c:	e68b      	b.n	8011076 <uxr_read_framed_msg+0x1ce>
 801135e:	1c51      	adds	r1, r2, #1
 8011360:	084b      	lsrs	r3, r1, #1
 8011362:	fba5 c303 	umull	ip, r3, r5, r3
 8011366:	089b      	lsrs	r3, r3, #2
 8011368:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801136c:	fb0c 1313 	mls	r3, ip, r3, r1
 8011370:	b2d9      	uxtb	r1, r3
 8011372:	4288      	cmp	r0, r1
 8011374:	f43f af3d 	beq.w	80111f2 <uxr_read_framed_msg+0x34a>
 8011378:	3202      	adds	r2, #2
 801137a:	4423      	add	r3, r4
 801137c:	0850      	lsrs	r0, r2, #1
 801137e:	789b      	ldrb	r3, [r3, #2]
 8011380:	fba5 1000 	umull	r1, r0, r5, r0
 8011384:	0880      	lsrs	r0, r0, #2
 8011386:	fb0c 2210 	mls	r2, ip, r0, r2
 801138a:	2b7e      	cmp	r3, #126	; 0x7e
 801138c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8011390:	d016      	beq.n	80113c0 <uxr_read_framed_msg+0x518>
 8011392:	f083 0120 	eor.w	r1, r3, #32
 8011396:	e68b      	b.n	80110b0 <uxr_read_framed_msg+0x208>
 8011398:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801139a:	9300      	str	r3, [sp, #0]
 801139c:	2302      	movs	r3, #2
 801139e:	9301      	str	r3, [sp, #4]
 80113a0:	464a      	mov	r2, r9
 80113a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80113a4:	4641      	mov	r1, r8
 80113a6:	4620      	mov	r0, r4
 80113a8:	f7ff fcfc 	bl	8010da4 <uxr_framing_read_transport>
 80113ac:	2800      	cmp	r0, #0
 80113ae:	f47f aef6 	bne.w	801119e <uxr_read_framed_msg+0x2f6>
 80113b2:	2301      	movs	r3, #1
 80113b4:	7023      	strb	r3, [r4, #0]
 80113b6:	e588      	b.n	8010eca <uxr_read_framed_msg+0x22>
 80113b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80113ba:	9300      	str	r3, [sp, #0]
 80113bc:	2301      	movs	r3, #1
 80113be:	e7ee      	b.n	801139e <uxr_read_framed_msg+0x4f6>
 80113c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80113c2:	9300      	str	r3, [sp, #0]
 80113c4:	2303      	movs	r3, #3
 80113c6:	e7ea      	b.n	801139e <uxr_read_framed_msg+0x4f6>
 80113c8:	ee17 8a90 	vmov	r8, s15
 80113cc:	e6ae      	b.n	801112c <uxr_read_framed_msg+0x284>
 80113ce:	bf00      	nop

080113d0 <rcl_get_default_domain_id>:
 80113d0:	b530      	push	{r4, r5, lr}
 80113d2:	b083      	sub	sp, #12
 80113d4:	2300      	movs	r3, #0
 80113d6:	9300      	str	r3, [sp, #0]
 80113d8:	b1d0      	cbz	r0, 8011410 <rcl_get_default_domain_id+0x40>
 80113da:	4604      	mov	r4, r0
 80113dc:	4669      	mov	r1, sp
 80113de:	4815      	ldr	r0, [pc, #84]	; (8011434 <rcl_get_default_domain_id+0x64>)
 80113e0:	f7fd f93a 	bl	800e658 <rcutils_get_env>
 80113e4:	4602      	mov	r2, r0
 80113e6:	b110      	cbz	r0, 80113ee <rcl_get_default_domain_id+0x1e>
 80113e8:	2001      	movs	r0, #1
 80113ea:	b003      	add	sp, #12
 80113ec:	bd30      	pop	{r4, r5, pc}
 80113ee:	9b00      	ldr	r3, [sp, #0]
 80113f0:	b18b      	cbz	r3, 8011416 <rcl_get_default_domain_id+0x46>
 80113f2:	7818      	ldrb	r0, [r3, #0]
 80113f4:	2800      	cmp	r0, #0
 80113f6:	d0f8      	beq.n	80113ea <rcl_get_default_domain_id+0x1a>
 80113f8:	a901      	add	r1, sp, #4
 80113fa:	4618      	mov	r0, r3
 80113fc:	9201      	str	r2, [sp, #4]
 80113fe:	f000 fe89 	bl	8012114 <strtoul>
 8011402:	4605      	mov	r5, r0
 8011404:	b150      	cbz	r0, 801141c <rcl_get_default_domain_id+0x4c>
 8011406:	1c43      	adds	r3, r0, #1
 8011408:	d00d      	beq.n	8011426 <rcl_get_default_domain_id+0x56>
 801140a:	6025      	str	r5, [r4, #0]
 801140c:	2000      	movs	r0, #0
 801140e:	e7ec      	b.n	80113ea <rcl_get_default_domain_id+0x1a>
 8011410:	200b      	movs	r0, #11
 8011412:	b003      	add	sp, #12
 8011414:	bd30      	pop	{r4, r5, pc}
 8011416:	4618      	mov	r0, r3
 8011418:	b003      	add	sp, #12
 801141a:	bd30      	pop	{r4, r5, pc}
 801141c:	9b01      	ldr	r3, [sp, #4]
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d0f2      	beq.n	801140a <rcl_get_default_domain_id+0x3a>
 8011424:	e7e0      	b.n	80113e8 <rcl_get_default_domain_id+0x18>
 8011426:	f001 f8ed 	bl	8012604 <__errno>
 801142a:	6803      	ldr	r3, [r0, #0]
 801142c:	2b22      	cmp	r3, #34	; 0x22
 801142e:	d1ec      	bne.n	801140a <rcl_get_default_domain_id+0x3a>
 8011430:	e7da      	b.n	80113e8 <rcl_get_default_domain_id+0x18>
 8011432:	bf00      	nop
 8011434:	08013e48 	.word	0x08013e48

08011438 <rcl_expand_topic_name>:
 8011438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801143c:	b08b      	sub	sp, #44	; 0x2c
 801143e:	9306      	str	r3, [sp, #24]
 8011440:	2800      	cmp	r0, #0
 8011442:	f000 80ad 	beq.w	80115a0 <rcl_expand_topic_name+0x168>
 8011446:	460e      	mov	r6, r1
 8011448:	2900      	cmp	r1, #0
 801144a:	f000 80a9 	beq.w	80115a0 <rcl_expand_topic_name+0x168>
 801144e:	4617      	mov	r7, r2
 8011450:	2a00      	cmp	r2, #0
 8011452:	f000 80a5 	beq.w	80115a0 <rcl_expand_topic_name+0x168>
 8011456:	2b00      	cmp	r3, #0
 8011458:	f000 80a2 	beq.w	80115a0 <rcl_expand_topic_name+0x168>
 801145c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801145e:	2b00      	cmp	r3, #0
 8011460:	f000 809e 	beq.w	80115a0 <rcl_expand_topic_name+0x168>
 8011464:	2200      	movs	r2, #0
 8011466:	a909      	add	r1, sp, #36	; 0x24
 8011468:	4680      	mov	r8, r0
 801146a:	f000 f9f5 	bl	8011858 <rcl_validate_topic_name>
 801146e:	4604      	mov	r4, r0
 8011470:	2800      	cmp	r0, #0
 8011472:	f040 8096 	bne.w	80115a2 <rcl_expand_topic_name+0x16a>
 8011476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011478:	2b00      	cmp	r3, #0
 801147a:	f040 809a 	bne.w	80115b2 <rcl_expand_topic_name+0x17a>
 801147e:	4602      	mov	r2, r0
 8011480:	a909      	add	r1, sp, #36	; 0x24
 8011482:	4630      	mov	r0, r6
 8011484:	f7fd fcea 	bl	800ee5c <rmw_validate_node_name>
 8011488:	2800      	cmp	r0, #0
 801148a:	f040 808e 	bne.w	80115aa <rcl_expand_topic_name+0x172>
 801148e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011490:	2a00      	cmp	r2, #0
 8011492:	f040 8093 	bne.w	80115bc <rcl_expand_topic_name+0x184>
 8011496:	a909      	add	r1, sp, #36	; 0x24
 8011498:	4638      	mov	r0, r7
 801149a:	f7fd fcc1 	bl	800ee20 <rmw_validate_namespace>
 801149e:	2800      	cmp	r0, #0
 80114a0:	f040 8083 	bne.w	80115aa <rcl_expand_topic_name+0x172>
 80114a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80114a6:	2c00      	cmp	r4, #0
 80114a8:	f040 80ed 	bne.w	8011686 <rcl_expand_topic_name+0x24e>
 80114ac:	217b      	movs	r1, #123	; 0x7b
 80114ae:	4640      	mov	r0, r8
 80114b0:	f000 ffc6 	bl	8012440 <strchr>
 80114b4:	f898 3000 	ldrb.w	r3, [r8]
 80114b8:	2b2f      	cmp	r3, #47	; 0x2f
 80114ba:	4605      	mov	r5, r0
 80114bc:	f000 809e 	beq.w	80115fc <rcl_expand_topic_name+0x1c4>
 80114c0:	2b7e      	cmp	r3, #126	; 0x7e
 80114c2:	f040 80a2 	bne.w	801160a <rcl_expand_topic_name+0x1d2>
 80114c6:	4638      	mov	r0, r7
 80114c8:	f7ee fe94 	bl	80001f4 <strlen>
 80114cc:	4a82      	ldr	r2, [pc, #520]	; (80116d8 <rcl_expand_topic_name+0x2a0>)
 80114ce:	4b83      	ldr	r3, [pc, #524]	; (80116dc <rcl_expand_topic_name+0x2a4>)
 80114d0:	2801      	cmp	r0, #1
 80114d2:	bf18      	it	ne
 80114d4:	4613      	movne	r3, r2
 80114d6:	9302      	str	r3, [sp, #8]
 80114d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80114da:	9300      	str	r3, [sp, #0]
 80114dc:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80114e0:	f108 0301 	add.w	r3, r8, #1
 80114e4:	9305      	str	r3, [sp, #20]
 80114e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80114ea:	9301      	str	r3, [sp, #4]
 80114ec:	ab14      	add	r3, sp, #80	; 0x50
 80114ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80114f0:	f7fd f8da 	bl	800e6a8 <rcutils_format_string_limit>
 80114f4:	4682      	mov	sl, r0
 80114f6:	2800      	cmp	r0, #0
 80114f8:	f000 80c7 	beq.w	801168a <rcl_expand_topic_name+0x252>
 80114fc:	2d00      	cmp	r5, #0
 80114fe:	f000 80a2 	beq.w	8011646 <rcl_expand_topic_name+0x20e>
 8011502:	217b      	movs	r1, #123	; 0x7b
 8011504:	f000 ff9c 	bl	8012440 <strchr>
 8011508:	46d1      	mov	r9, sl
 801150a:	4605      	mov	r5, r0
 801150c:	9407      	str	r4, [sp, #28]
 801150e:	46d3      	mov	fp, sl
 8011510:	464c      	mov	r4, r9
 8011512:	2d00      	cmp	r5, #0
 8011514:	f000 80be 	beq.w	8011694 <rcl_expand_topic_name+0x25c>
 8011518:	217d      	movs	r1, #125	; 0x7d
 801151a:	4620      	mov	r0, r4
 801151c:	f000 ff90 	bl	8012440 <strchr>
 8011520:	eba0 0905 	sub.w	r9, r0, r5
 8011524:	f109 0a01 	add.w	sl, r9, #1
 8011528:	486d      	ldr	r0, [pc, #436]	; (80116e0 <rcl_expand_topic_name+0x2a8>)
 801152a:	4652      	mov	r2, sl
 801152c:	4629      	mov	r1, r5
 801152e:	f000 ff94 	bl	801245a <strncmp>
 8011532:	2800      	cmp	r0, #0
 8011534:	d067      	beq.n	8011606 <rcl_expand_topic_name+0x1ce>
 8011536:	486b      	ldr	r0, [pc, #428]	; (80116e4 <rcl_expand_topic_name+0x2ac>)
 8011538:	4652      	mov	r2, sl
 801153a:	4629      	mov	r1, r5
 801153c:	f000 ff8d 	bl	801245a <strncmp>
 8011540:	b130      	cbz	r0, 8011550 <rcl_expand_topic_name+0x118>
 8011542:	4869      	ldr	r0, [pc, #420]	; (80116e8 <rcl_expand_topic_name+0x2b0>)
 8011544:	4652      	mov	r2, sl
 8011546:	4629      	mov	r1, r5
 8011548:	f000 ff87 	bl	801245a <strncmp>
 801154c:	2800      	cmp	r0, #0
 801154e:	d137      	bne.n	80115c0 <rcl_expand_topic_name+0x188>
 8011550:	46b9      	mov	r9, r7
 8011552:	ab16      	add	r3, sp, #88	; 0x58
 8011554:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011558:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801155c:	ab14      	add	r3, sp, #80	; 0x50
 801155e:	4628      	mov	r0, r5
 8011560:	cb0c      	ldmia	r3, {r2, r3}
 8011562:	4651      	mov	r1, sl
 8011564:	f7fd f9dc 	bl	800e920 <rcutils_strndup>
 8011568:	4605      	mov	r5, r0
 801156a:	2800      	cmp	r0, #0
 801156c:	f000 809c 	beq.w	80116a8 <rcl_expand_topic_name+0x270>
 8011570:	464a      	mov	r2, r9
 8011572:	4620      	mov	r0, r4
 8011574:	ab14      	add	r3, sp, #80	; 0x50
 8011576:	4629      	mov	r1, r5
 8011578:	f7fd f8d0 	bl	800e71c <rcutils_repl_str>
 801157c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801157e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011580:	4604      	mov	r4, r0
 8011582:	4628      	mov	r0, r5
 8011584:	4798      	blx	r3
 8011586:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011588:	9918      	ldr	r1, [sp, #96]	; 0x60
 801158a:	4658      	mov	r0, fp
 801158c:	4798      	blx	r3
 801158e:	2c00      	cmp	r4, #0
 8011590:	d07b      	beq.n	801168a <rcl_expand_topic_name+0x252>
 8011592:	217b      	movs	r1, #123	; 0x7b
 8011594:	4620      	mov	r0, r4
 8011596:	f000 ff53 	bl	8012440 <strchr>
 801159a:	46a3      	mov	fp, r4
 801159c:	4605      	mov	r5, r0
 801159e:	e7b8      	b.n	8011512 <rcl_expand_topic_name+0xda>
 80115a0:	240b      	movs	r4, #11
 80115a2:	4620      	mov	r0, r4
 80115a4:	b00b      	add	sp, #44	; 0x2c
 80115a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115aa:	f7fc f935 	bl	800d818 <rcl_convert_rmw_ret_to_rcl_ret>
 80115ae:	4604      	mov	r4, r0
 80115b0:	e7f7      	b.n	80115a2 <rcl_expand_topic_name+0x16a>
 80115b2:	2467      	movs	r4, #103	; 0x67
 80115b4:	4620      	mov	r0, r4
 80115b6:	b00b      	add	sp, #44	; 0x2c
 80115b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115bc:	24c9      	movs	r4, #201	; 0xc9
 80115be:	e7f0      	b.n	80115a2 <rcl_expand_topic_name+0x16a>
 80115c0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80115c4:	9806      	ldr	r0, [sp, #24]
 80115c6:	1c69      	adds	r1, r5, #1
 80115c8:	f7fd fac4 	bl	800eb54 <rcutils_string_map_getn>
 80115cc:	4681      	mov	r9, r0
 80115ce:	2800      	cmp	r0, #0
 80115d0:	d1bf      	bne.n	8011552 <rcl_expand_topic_name+0x11a>
 80115d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80115d4:	aa16      	add	r2, sp, #88	; 0x58
 80115d6:	6018      	str	r0, [r3, #0]
 80115d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80115da:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80115de:	ab14      	add	r3, sp, #80	; 0x50
 80115e0:	cb0c      	ldmia	r3, {r2, r3}
 80115e2:	4651      	mov	r1, sl
 80115e4:	4628      	mov	r0, r5
 80115e6:	f7fd f99b 	bl	800e920 <rcutils_strndup>
 80115ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 80115ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80115ee:	4798      	blx	r3
 80115f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80115f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80115f4:	4658      	mov	r0, fp
 80115f6:	2469      	movs	r4, #105	; 0x69
 80115f8:	4798      	blx	r3
 80115fa:	e7d2      	b.n	80115a2 <rcl_expand_topic_name+0x16a>
 80115fc:	2800      	cmp	r0, #0
 80115fe:	d05b      	beq.n	80116b8 <rcl_expand_topic_name+0x280>
 8011600:	46c1      	mov	r9, r8
 8011602:	46a2      	mov	sl, r4
 8011604:	e782      	b.n	801150c <rcl_expand_topic_name+0xd4>
 8011606:	46b1      	mov	r9, r6
 8011608:	e7a3      	b.n	8011552 <rcl_expand_topic_name+0x11a>
 801160a:	2800      	cmp	r0, #0
 801160c:	d1f8      	bne.n	8011600 <rcl_expand_topic_name+0x1c8>
 801160e:	4638      	mov	r0, r7
 8011610:	f7ee fdf0 	bl	80001f4 <strlen>
 8011614:	4a35      	ldr	r2, [pc, #212]	; (80116ec <rcl_expand_topic_name+0x2b4>)
 8011616:	4b36      	ldr	r3, [pc, #216]	; (80116f0 <rcl_expand_topic_name+0x2b8>)
 8011618:	f8cd 8010 	str.w	r8, [sp, #16]
 801161c:	2801      	cmp	r0, #1
 801161e:	bf18      	it	ne
 8011620:	4613      	movne	r3, r2
 8011622:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011626:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801162a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801162c:	9703      	str	r7, [sp, #12]
 801162e:	9200      	str	r2, [sp, #0]
 8011630:	ab14      	add	r3, sp, #80	; 0x50
 8011632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011634:	f7fd f838 	bl	800e6a8 <rcutils_format_string_limit>
 8011638:	4682      	mov	sl, r0
 801163a:	4653      	mov	r3, sl
 801163c:	b32b      	cbz	r3, 801168a <rcl_expand_topic_name+0x252>
 801163e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011640:	f8c3 a000 	str.w	sl, [r3]
 8011644:	e7ad      	b.n	80115a2 <rcl_expand_topic_name+0x16a>
 8011646:	f89a 3000 	ldrb.w	r3, [sl]
 801164a:	2b2f      	cmp	r3, #47	; 0x2f
 801164c:	d0f7      	beq.n	801163e <rcl_expand_topic_name+0x206>
 801164e:	4638      	mov	r0, r7
 8011650:	f7ee fdd0 	bl	80001f4 <strlen>
 8011654:	4a25      	ldr	r2, [pc, #148]	; (80116ec <rcl_expand_topic_name+0x2b4>)
 8011656:	4b26      	ldr	r3, [pc, #152]	; (80116f0 <rcl_expand_topic_name+0x2b8>)
 8011658:	f8cd a010 	str.w	sl, [sp, #16]
 801165c:	2801      	cmp	r0, #1
 801165e:	bf18      	it	ne
 8011660:	4613      	movne	r3, r2
 8011662:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011666:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801166a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801166c:	9703      	str	r7, [sp, #12]
 801166e:	9200      	str	r2, [sp, #0]
 8011670:	ab14      	add	r3, sp, #80	; 0x50
 8011672:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011674:	f7fd f818 	bl	800e6a8 <rcutils_format_string_limit>
 8011678:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801167a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801167c:	4605      	mov	r5, r0
 801167e:	4650      	mov	r0, sl
 8011680:	4798      	blx	r3
 8011682:	46aa      	mov	sl, r5
 8011684:	e7d9      	b.n	801163a <rcl_expand_topic_name+0x202>
 8011686:	24ca      	movs	r4, #202	; 0xca
 8011688:	e78b      	b.n	80115a2 <rcl_expand_topic_name+0x16a>
 801168a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801168c:	2300      	movs	r3, #0
 801168e:	6013      	str	r3, [r2, #0]
 8011690:	240a      	movs	r4, #10
 8011692:	e786      	b.n	80115a2 <rcl_expand_topic_name+0x16a>
 8011694:	465b      	mov	r3, fp
 8011696:	9c07      	ldr	r4, [sp, #28]
 8011698:	46da      	mov	sl, fp
 801169a:	2b00      	cmp	r3, #0
 801169c:	d1d3      	bne.n	8011646 <rcl_expand_topic_name+0x20e>
 801169e:	f898 3000 	ldrb.w	r3, [r8]
 80116a2:	2b2f      	cmp	r3, #47	; 0x2f
 80116a4:	d0cb      	beq.n	801163e <rcl_expand_topic_name+0x206>
 80116a6:	e7b2      	b.n	801160e <rcl_expand_topic_name+0x1d6>
 80116a8:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 80116ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80116ae:	6015      	str	r5, [r2, #0]
 80116b0:	4658      	mov	r0, fp
 80116b2:	4798      	blx	r3
 80116b4:	240a      	movs	r4, #10
 80116b6:	e774      	b.n	80115a2 <rcl_expand_topic_name+0x16a>
 80116b8:	ab17      	add	r3, sp, #92	; 0x5c
 80116ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80116be:	e88d 0003 	stmia.w	sp, {r0, r1}
 80116c2:	ab14      	add	r3, sp, #80	; 0x50
 80116c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80116c6:	4640      	mov	r0, r8
 80116c8:	f7fd f908 	bl	800e8dc <rcutils_strdup>
 80116cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80116ce:	2800      	cmp	r0, #0
 80116d0:	6018      	str	r0, [r3, #0]
 80116d2:	bf08      	it	eq
 80116d4:	240a      	moveq	r4, #10
 80116d6:	e764      	b.n	80115a2 <rcl_expand_topic_name+0x16a>
 80116d8:	08013e58 	.word	0x08013e58
 80116dc:	08013640 	.word	0x08013640
 80116e0:	08013e60 	.word	0x08013e60
 80116e4:	08013e68 	.word	0x08013e68
 80116e8:	08013e70 	.word	0x08013e70
 80116ec:	080137d4 	.word	0x080137d4
 80116f0:	08013650 	.word	0x08013650

080116f4 <rcl_get_default_topic_name_substitutions>:
 80116f4:	2800      	cmp	r0, #0
 80116f6:	bf0c      	ite	eq
 80116f8:	200b      	moveq	r0, #11
 80116fa:	2000      	movne	r0, #0
 80116fc:	4770      	bx	lr
 80116fe:	bf00      	nop

08011700 <rcl_get_zero_initialized_guard_condition>:
 8011700:	4a03      	ldr	r2, [pc, #12]	; (8011710 <rcl_get_zero_initialized_guard_condition+0x10>)
 8011702:	4603      	mov	r3, r0
 8011704:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011708:	e883 0003 	stmia.w	r3, {r0, r1}
 801170c:	4618      	mov	r0, r3
 801170e:	4770      	bx	lr
 8011710:	08013e7c 	.word	0x08013e7c

08011714 <rcl_guard_condition_init_from_rmw>:
 8011714:	b082      	sub	sp, #8
 8011716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801171a:	b086      	sub	sp, #24
 801171c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8011720:	4604      	mov	r4, r0
 8011722:	f84c 3f04 	str.w	r3, [ip, #4]!
 8011726:	460e      	mov	r6, r1
 8011728:	4617      	mov	r7, r2
 801172a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801172e:	f10d 0e04 	add.w	lr, sp, #4
 8011732:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011736:	f8dc 3000 	ldr.w	r3, [ip]
 801173a:	f8ce 3000 	str.w	r3, [lr]
 801173e:	a801      	add	r0, sp, #4
 8011740:	f7f7 fe6e 	bl	8009420 <rcutils_allocator_is_valid>
 8011744:	b350      	cbz	r0, 801179c <rcl_guard_condition_init_from_rmw+0x88>
 8011746:	b34c      	cbz	r4, 801179c <rcl_guard_condition_init_from_rmw+0x88>
 8011748:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801174c:	f1b8 0f00 	cmp.w	r8, #0
 8011750:	d11e      	bne.n	8011790 <rcl_guard_condition_init_from_rmw+0x7c>
 8011752:	b31f      	cbz	r7, 801179c <rcl_guard_condition_init_from_rmw+0x88>
 8011754:	4638      	mov	r0, r7
 8011756:	f7fc f87d 	bl	800d854 <rcl_context_is_valid>
 801175a:	b328      	cbz	r0, 80117a8 <rcl_guard_condition_init_from_rmw+0x94>
 801175c:	9b01      	ldr	r3, [sp, #4]
 801175e:	9905      	ldr	r1, [sp, #20]
 8011760:	201c      	movs	r0, #28
 8011762:	4798      	blx	r3
 8011764:	4605      	mov	r5, r0
 8011766:	6060      	str	r0, [r4, #4]
 8011768:	b358      	cbz	r0, 80117c2 <rcl_guard_condition_init_from_rmw+0xae>
 801176a:	b1fe      	cbz	r6, 80117ac <rcl_guard_condition_init_from_rmw+0x98>
 801176c:	6006      	str	r6, [r0, #0]
 801176e:	f880 8004 	strb.w	r8, [r0, #4]
 8011772:	ac01      	add	r4, sp, #4
 8011774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011776:	f105 0c08 	add.w	ip, r5, #8
 801177a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801177e:	6823      	ldr	r3, [r4, #0]
 8011780:	f8cc 3000 	str.w	r3, [ip]
 8011784:	2000      	movs	r0, #0
 8011786:	b006      	add	sp, #24
 8011788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801178c:	b002      	add	sp, #8
 801178e:	4770      	bx	lr
 8011790:	2064      	movs	r0, #100	; 0x64
 8011792:	b006      	add	sp, #24
 8011794:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011798:	b002      	add	sp, #8
 801179a:	4770      	bx	lr
 801179c:	200b      	movs	r0, #11
 801179e:	b006      	add	sp, #24
 80117a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117a4:	b002      	add	sp, #8
 80117a6:	4770      	bx	lr
 80117a8:	2065      	movs	r0, #101	; 0x65
 80117aa:	e7f2      	b.n	8011792 <rcl_guard_condition_init_from_rmw+0x7e>
 80117ac:	6838      	ldr	r0, [r7, #0]
 80117ae:	3028      	adds	r0, #40	; 0x28
 80117b0:	f000 fa50 	bl	8011c54 <rmw_create_guard_condition>
 80117b4:	6028      	str	r0, [r5, #0]
 80117b6:	6865      	ldr	r5, [r4, #4]
 80117b8:	682e      	ldr	r6, [r5, #0]
 80117ba:	b126      	cbz	r6, 80117c6 <rcl_guard_condition_init_from_rmw+0xb2>
 80117bc:	2301      	movs	r3, #1
 80117be:	712b      	strb	r3, [r5, #4]
 80117c0:	e7d7      	b.n	8011772 <rcl_guard_condition_init_from_rmw+0x5e>
 80117c2:	200a      	movs	r0, #10
 80117c4:	e7e5      	b.n	8011792 <rcl_guard_condition_init_from_rmw+0x7e>
 80117c6:	4628      	mov	r0, r5
 80117c8:	9b02      	ldr	r3, [sp, #8]
 80117ca:	9905      	ldr	r1, [sp, #20]
 80117cc:	4798      	blx	r3
 80117ce:	6066      	str	r6, [r4, #4]
 80117d0:	2001      	movs	r0, #1
 80117d2:	e7de      	b.n	8011792 <rcl_guard_condition_init_from_rmw+0x7e>

080117d4 <rcl_guard_condition_fini>:
 80117d4:	b570      	push	{r4, r5, r6, lr}
 80117d6:	b082      	sub	sp, #8
 80117d8:	b1f0      	cbz	r0, 8011818 <rcl_guard_condition_fini+0x44>
 80117da:	6843      	ldr	r3, [r0, #4]
 80117dc:	4604      	mov	r4, r0
 80117de:	b163      	cbz	r3, 80117fa <rcl_guard_condition_fini+0x26>
 80117e0:	6818      	ldr	r0, [r3, #0]
 80117e2:	68de      	ldr	r6, [r3, #12]
 80117e4:	6999      	ldr	r1, [r3, #24]
 80117e6:	b160      	cbz	r0, 8011802 <rcl_guard_condition_fini+0x2e>
 80117e8:	791d      	ldrb	r5, [r3, #4]
 80117ea:	b965      	cbnz	r5, 8011806 <rcl_guard_condition_fini+0x32>
 80117ec:	4618      	mov	r0, r3
 80117ee:	47b0      	blx	r6
 80117f0:	2300      	movs	r3, #0
 80117f2:	4628      	mov	r0, r5
 80117f4:	6063      	str	r3, [r4, #4]
 80117f6:	b002      	add	sp, #8
 80117f8:	bd70      	pop	{r4, r5, r6, pc}
 80117fa:	461d      	mov	r5, r3
 80117fc:	4628      	mov	r0, r5
 80117fe:	b002      	add	sp, #8
 8011800:	bd70      	pop	{r4, r5, r6, pc}
 8011802:	4605      	mov	r5, r0
 8011804:	e7f2      	b.n	80117ec <rcl_guard_condition_fini+0x18>
 8011806:	9101      	str	r1, [sp, #4]
 8011808:	f000 fa38 	bl	8011c7c <rmw_destroy_guard_condition>
 801180c:	1e05      	subs	r5, r0, #0
 801180e:	6863      	ldr	r3, [r4, #4]
 8011810:	9901      	ldr	r1, [sp, #4]
 8011812:	bf18      	it	ne
 8011814:	2501      	movne	r5, #1
 8011816:	e7e9      	b.n	80117ec <rcl_guard_condition_fini+0x18>
 8011818:	250b      	movs	r5, #11
 801181a:	4628      	mov	r0, r5
 801181c:	b002      	add	sp, #8
 801181e:	bd70      	pop	{r4, r5, r6, pc}

08011820 <rcl_guard_condition_get_default_options>:
 8011820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011822:	b087      	sub	sp, #28
 8011824:	4606      	mov	r6, r0
 8011826:	4668      	mov	r0, sp
 8011828:	f7f7 fdec 	bl	8009404 <rcutils_get_default_allocator>
 801182c:	4b09      	ldr	r3, [pc, #36]	; (8011854 <rcl_guard_condition_get_default_options+0x34>)
 801182e:	46ee      	mov	lr, sp
 8011830:	469c      	mov	ip, r3
 8011832:	461d      	mov	r5, r3
 8011834:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011838:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801183c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801183e:	4634      	mov	r4, r6
 8011840:	f8de 7000 	ldr.w	r7, [lr]
 8011844:	f8cc 7000 	str.w	r7, [ip]
 8011848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801184a:	4630      	mov	r0, r6
 801184c:	6027      	str	r7, [r4, #0]
 801184e:	b007      	add	sp, #28
 8011850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011852:	bf00      	nop
 8011854:	20012544 	.word	0x20012544

08011858 <rcl_validate_topic_name>:
 8011858:	2800      	cmp	r0, #0
 801185a:	d07a      	beq.n	8011952 <rcl_validate_topic_name+0xfa>
 801185c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011860:	460e      	mov	r6, r1
 8011862:	2900      	cmp	r1, #0
 8011864:	d07c      	beq.n	8011960 <rcl_validate_topic_name+0x108>
 8011866:	4617      	mov	r7, r2
 8011868:	4605      	mov	r5, r0
 801186a:	f7ee fcc3 	bl	80001f4 <strlen>
 801186e:	b1b0      	cbz	r0, 801189e <rcl_validate_topic_name+0x46>
 8011870:	f895 9000 	ldrb.w	r9, [r5]
 8011874:	f8df c180 	ldr.w	ip, [pc, #384]	; 80119f8 <rcl_validate_topic_name+0x1a0>
 8011878:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801187c:	f013 0304 	ands.w	r3, r3, #4
 8011880:	d169      	bne.n	8011956 <rcl_validate_topic_name+0xfe>
 8011882:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8011886:	f815 2008 	ldrb.w	r2, [r5, r8]
 801188a:	2a2f      	cmp	r2, #47	; 0x2f
 801188c:	d10e      	bne.n	80118ac <rcl_validate_topic_name+0x54>
 801188e:	2202      	movs	r2, #2
 8011890:	6032      	str	r2, [r6, #0]
 8011892:	b36f      	cbz	r7, 80118f0 <rcl_validate_topic_name+0x98>
 8011894:	f8c7 8000 	str.w	r8, [r7]
 8011898:	4618      	mov	r0, r3
 801189a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801189e:	2301      	movs	r3, #1
 80118a0:	6033      	str	r3, [r6, #0]
 80118a2:	b32f      	cbz	r7, 80118f0 <rcl_validate_topic_name+0x98>
 80118a4:	2000      	movs	r0, #0
 80118a6:	6038      	str	r0, [r7, #0]
 80118a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118ac:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 80118b0:	461c      	mov	r4, r3
 80118b2:	4619      	mov	r1, r3
 80118b4:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80118b8:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80118bc:	f1be 0f09 	cmp.w	lr, #9
 80118c0:	d919      	bls.n	80118f6 <rcl_validate_topic_name+0x9e>
 80118c2:	f022 0e20 	bic.w	lr, r2, #32
 80118c6:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 80118ca:	f1be 0f19 	cmp.w	lr, #25
 80118ce:	d912      	bls.n	80118f6 <rcl_validate_topic_name+0x9e>
 80118d0:	2a5f      	cmp	r2, #95	; 0x5f
 80118d2:	d019      	beq.n	8011908 <rcl_validate_topic_name+0xb0>
 80118d4:	2a2f      	cmp	r2, #47	; 0x2f
 80118d6:	d051      	beq.n	801197c <rcl_validate_topic_name+0x124>
 80118d8:	2a7e      	cmp	r2, #126	; 0x7e
 80118da:	d048      	beq.n	801196e <rcl_validate_topic_name+0x116>
 80118dc:	2a7b      	cmp	r2, #123	; 0x7b
 80118de:	d054      	beq.n	801198a <rcl_validate_topic_name+0x132>
 80118e0:	2a7d      	cmp	r2, #125	; 0x7d
 80118e2:	d161      	bne.n	80119a8 <rcl_validate_topic_name+0x150>
 80118e4:	2c00      	cmp	r4, #0
 80118e6:	d155      	bne.n	8011994 <rcl_validate_topic_name+0x13c>
 80118e8:	2305      	movs	r3, #5
 80118ea:	6033      	str	r3, [r6, #0]
 80118ec:	b107      	cbz	r7, 80118f0 <rcl_validate_topic_name+0x98>
 80118ee:	6039      	str	r1, [r7, #0]
 80118f0:	2000      	movs	r0, #0
 80118f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118f6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80118fa:	0752      	lsls	r2, r2, #29
 80118fc:	d504      	bpl.n	8011908 <rcl_validate_topic_name+0xb0>
 80118fe:	b11c      	cbz	r4, 8011908 <rcl_validate_topic_name+0xb0>
 8011900:	b111      	cbz	r1, 8011908 <rcl_validate_topic_name+0xb0>
 8011902:	1e4a      	subs	r2, r1, #1
 8011904:	429a      	cmp	r2, r3
 8011906:	d02d      	beq.n	8011964 <rcl_validate_topic_name+0x10c>
 8011908:	3101      	adds	r1, #1
 801190a:	4288      	cmp	r0, r1
 801190c:	d1d2      	bne.n	80118b4 <rcl_validate_topic_name+0x5c>
 801190e:	2c00      	cmp	r4, #0
 8011910:	d145      	bne.n	801199e <rcl_validate_topic_name+0x146>
 8011912:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8011916:	d04f      	beq.n	80119b8 <rcl_validate_topic_name+0x160>
 8011918:	4620      	mov	r0, r4
 801191a:	2301      	movs	r3, #1
 801191c:	e006      	b.n	801192c <rcl_validate_topic_name+0xd4>
 801191e:	428b      	cmp	r3, r1
 8011920:	f105 0501 	add.w	r5, r5, #1
 8011924:	f103 0201 	add.w	r2, r3, #1
 8011928:	d236      	bcs.n	8011998 <rcl_validate_topic_name+0x140>
 801192a:	4613      	mov	r3, r2
 801192c:	4580      	cmp	r8, r0
 801192e:	f100 0001 	add.w	r0, r0, #1
 8011932:	d0f4      	beq.n	801191e <rcl_validate_topic_name+0xc6>
 8011934:	782a      	ldrb	r2, [r5, #0]
 8011936:	2a2f      	cmp	r2, #47	; 0x2f
 8011938:	d1f1      	bne.n	801191e <rcl_validate_topic_name+0xc6>
 801193a:	786a      	ldrb	r2, [r5, #1]
 801193c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8011940:	0754      	lsls	r4, r2, #29
 8011942:	d5ec      	bpl.n	801191e <rcl_validate_topic_name+0xc6>
 8011944:	2204      	movs	r2, #4
 8011946:	6032      	str	r2, [r6, #0]
 8011948:	2f00      	cmp	r7, #0
 801194a:	d0d1      	beq.n	80118f0 <rcl_validate_topic_name+0x98>
 801194c:	603b      	str	r3, [r7, #0]
 801194e:	2000      	movs	r0, #0
 8011950:	e7aa      	b.n	80118a8 <rcl_validate_topic_name+0x50>
 8011952:	200b      	movs	r0, #11
 8011954:	4770      	bx	lr
 8011956:	2304      	movs	r3, #4
 8011958:	6033      	str	r3, [r6, #0]
 801195a:	2f00      	cmp	r7, #0
 801195c:	d1a2      	bne.n	80118a4 <rcl_validate_topic_name+0x4c>
 801195e:	e7c7      	b.n	80118f0 <rcl_validate_topic_name+0x98>
 8011960:	200b      	movs	r0, #11
 8011962:	e7a1      	b.n	80118a8 <rcl_validate_topic_name+0x50>
 8011964:	2309      	movs	r3, #9
 8011966:	6033      	str	r3, [r6, #0]
 8011968:	2f00      	cmp	r7, #0
 801196a:	d1c0      	bne.n	80118ee <rcl_validate_topic_name+0x96>
 801196c:	e7c0      	b.n	80118f0 <rcl_validate_topic_name+0x98>
 801196e:	2900      	cmp	r1, #0
 8011970:	d0ca      	beq.n	8011908 <rcl_validate_topic_name+0xb0>
 8011972:	2306      	movs	r3, #6
 8011974:	6033      	str	r3, [r6, #0]
 8011976:	2f00      	cmp	r7, #0
 8011978:	d1b9      	bne.n	80118ee <rcl_validate_topic_name+0x96>
 801197a:	e7b9      	b.n	80118f0 <rcl_validate_topic_name+0x98>
 801197c:	2c00      	cmp	r4, #0
 801197e:	d0c3      	beq.n	8011908 <rcl_validate_topic_name+0xb0>
 8011980:	2308      	movs	r3, #8
 8011982:	6033      	str	r3, [r6, #0]
 8011984:	2f00      	cmp	r7, #0
 8011986:	d1b2      	bne.n	80118ee <rcl_validate_topic_name+0x96>
 8011988:	e7b2      	b.n	80118f0 <rcl_validate_topic_name+0x98>
 801198a:	2c00      	cmp	r4, #0
 801198c:	d1f8      	bne.n	8011980 <rcl_validate_topic_name+0x128>
 801198e:	460b      	mov	r3, r1
 8011990:	2401      	movs	r4, #1
 8011992:	e7b9      	b.n	8011908 <rcl_validate_topic_name+0xb0>
 8011994:	2400      	movs	r4, #0
 8011996:	e7b7      	b.n	8011908 <rcl_validate_topic_name+0xb0>
 8011998:	2000      	movs	r0, #0
 801199a:	6030      	str	r0, [r6, #0]
 801199c:	e784      	b.n	80118a8 <rcl_validate_topic_name+0x50>
 801199e:	2205      	movs	r2, #5
 80119a0:	6032      	str	r2, [r6, #0]
 80119a2:	2f00      	cmp	r7, #0
 80119a4:	d1d2      	bne.n	801194c <rcl_validate_topic_name+0xf4>
 80119a6:	e7a3      	b.n	80118f0 <rcl_validate_topic_name+0x98>
 80119a8:	2c00      	cmp	r4, #0
 80119aa:	bf14      	ite	ne
 80119ac:	2308      	movne	r3, #8
 80119ae:	2303      	moveq	r3, #3
 80119b0:	6033      	str	r3, [r6, #0]
 80119b2:	2f00      	cmp	r7, #0
 80119b4:	d19b      	bne.n	80118ee <rcl_validate_topic_name+0x96>
 80119b6:	e79b      	b.n	80118f0 <rcl_validate_topic_name+0x98>
 80119b8:	2301      	movs	r3, #1
 80119ba:	e00a      	b.n	80119d2 <rcl_validate_topic_name+0x17a>
 80119bc:	2c01      	cmp	r4, #1
 80119be:	d013      	beq.n	80119e8 <rcl_validate_topic_name+0x190>
 80119c0:	4299      	cmp	r1, r3
 80119c2:	f104 0401 	add.w	r4, r4, #1
 80119c6:	f105 0501 	add.w	r5, r5, #1
 80119ca:	f103 0201 	add.w	r2, r3, #1
 80119ce:	d9e3      	bls.n	8011998 <rcl_validate_topic_name+0x140>
 80119d0:	4613      	mov	r3, r2
 80119d2:	45a0      	cmp	r8, r4
 80119d4:	d0f4      	beq.n	80119c0 <rcl_validate_topic_name+0x168>
 80119d6:	782a      	ldrb	r2, [r5, #0]
 80119d8:	2a2f      	cmp	r2, #47	; 0x2f
 80119da:	d1ef      	bne.n	80119bc <rcl_validate_topic_name+0x164>
 80119dc:	786a      	ldrb	r2, [r5, #1]
 80119de:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80119e2:	0752      	lsls	r2, r2, #29
 80119e4:	d5ec      	bpl.n	80119c0 <rcl_validate_topic_name+0x168>
 80119e6:	e7ad      	b.n	8011944 <rcl_validate_topic_name+0xec>
 80119e8:	2307      	movs	r3, #7
 80119ea:	6033      	str	r3, [r6, #0]
 80119ec:	2f00      	cmp	r7, #0
 80119ee:	f43f af7f 	beq.w	80118f0 <rcl_validate_topic_name+0x98>
 80119f2:	603c      	str	r4, [r7, #0]
 80119f4:	2000      	movs	r0, #0
 80119f6:	e757      	b.n	80118a8 <rcl_validate_topic_name+0x50>
 80119f8:	08013ef4 	.word	0x08013ef4

080119fc <on_status>:
 80119fc:	b082      	sub	sp, #8
 80119fe:	b002      	add	sp, #8
 8011a00:	4770      	bx	lr
 8011a02:	bf00      	nop

08011a04 <on_topic>:
 8011a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a08:	4a22      	ldr	r2, [pc, #136]	; (8011a94 <on_topic+0x90>)
 8011a0a:	b094      	sub	sp, #80	; 0x50
 8011a0c:	6812      	ldr	r2, [r2, #0]
 8011a0e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8011a10:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8011a14:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 8011a18:	b3c2      	cbz	r2, 8011a8c <on_topic+0x88>
 8011a1a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8011a1e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8011a22:	e001      	b.n	8011a28 <on_topic+0x24>
 8011a24:	6852      	ldr	r2, [r2, #4]
 8011a26:	b38a      	cbz	r2, 8011a8c <on_topic+0x88>
 8011a28:	6894      	ldr	r4, [r2, #8]
 8011a2a:	8aa3      	ldrh	r3, [r4, #20]
 8011a2c:	428b      	cmp	r3, r1
 8011a2e:	d1f9      	bne.n	8011a24 <on_topic+0x20>
 8011a30:	7da3      	ldrb	r3, [r4, #22]
 8011a32:	4283      	cmp	r3, r0
 8011a34:	d1f6      	bne.n	8011a24 <on_topic+0x20>
 8011a36:	2248      	movs	r2, #72	; 0x48
 8011a38:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011a3c:	4668      	mov	r0, sp
 8011a3e:	f000 fe16 	bl	801266e <memcpy>
 8011a42:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8011a46:	cb0c      	ldmia	r3, {r2, r3}
 8011a48:	4620      	mov	r0, r4
 8011a4a:	f7f8 f8c9 	bl	8009be0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8011a4e:	4607      	mov	r7, r0
 8011a50:	b1e0      	cbz	r0, 8011a8c <on_topic+0x88>
 8011a52:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8011a56:	4632      	mov	r2, r6
 8011a58:	4628      	mov	r0, r5
 8011a5a:	f108 0110 	add.w	r1, r8, #16
 8011a5e:	f7fe f831 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 8011a62:	b930      	cbnz	r0, 8011a72 <on_topic+0x6e>
 8011a64:	480c      	ldr	r0, [pc, #48]	; (8011a98 <on_topic+0x94>)
 8011a66:	4639      	mov	r1, r7
 8011a68:	b014      	add	sp, #80	; 0x50
 8011a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a6e:	f7fd ba63 	b.w	800ef38 <put_memory>
 8011a72:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8011a76:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 8011a7a:	f7fd ff19 	bl	800f8b0 <rmw_uros_epoch_nanos>
 8011a7e:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8011a82:	2305      	movs	r3, #5
 8011a84:	e942 0102 	strd	r0, r1, [r2, #-8]
 8011a88:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8011a8c:	b014      	add	sp, #80	; 0x50
 8011a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a92:	bf00      	nop
 8011a94:	20012414 	.word	0x20012414
 8011a98:	20012404 	.word	0x20012404

08011a9c <on_request>:
 8011a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aa0:	4823      	ldr	r0, [pc, #140]	; (8011b30 <on_request+0x94>)
 8011aa2:	b094      	sub	sp, #80	; 0x50
 8011aa4:	6800      	ldr	r0, [r0, #0]
 8011aa6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8011aa8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8011aac:	9113      	str	r1, [sp, #76]	; 0x4c
 8011aae:	2800      	cmp	r0, #0
 8011ab0:	d03b      	beq.n	8011b2a <on_request+0x8e>
 8011ab2:	461d      	mov	r5, r3
 8011ab4:	e001      	b.n	8011aba <on_request+0x1e>
 8011ab6:	6840      	ldr	r0, [r0, #4]
 8011ab8:	b3b8      	cbz	r0, 8011b2a <on_request+0x8e>
 8011aba:	6884      	ldr	r4, [r0, #8]
 8011abc:	8b21      	ldrh	r1, [r4, #24]
 8011abe:	4291      	cmp	r1, r2
 8011ac0:	d1f9      	bne.n	8011ab6 <on_request+0x1a>
 8011ac2:	2248      	movs	r2, #72	; 0x48
 8011ac4:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011ac8:	4668      	mov	r0, sp
 8011aca:	f000 fdd0 	bl	801266e <memcpy>
 8011ace:	f104 0320 	add.w	r3, r4, #32
 8011ad2:	cb0c      	ldmia	r3, {r2, r3}
 8011ad4:	4620      	mov	r0, r4
 8011ad6:	f7f8 f883 	bl	8009be0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8011ada:	4680      	mov	r8, r0
 8011adc:	b328      	cbz	r0, 8011b2a <on_request+0x8e>
 8011ade:	4638      	mov	r0, r7
 8011ae0:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8011ae4:	4632      	mov	r2, r6
 8011ae6:	f107 0110 	add.w	r1, r7, #16
 8011aea:	f7fd ffeb 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 8011aee:	b930      	cbnz	r0, 8011afe <on_request+0x62>
 8011af0:	4810      	ldr	r0, [pc, #64]	; (8011b34 <on_request+0x98>)
 8011af2:	4641      	mov	r1, r8
 8011af4:	b014      	add	sp, #80	; 0x50
 8011af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011afa:	f7fd ba1d 	b.w	800ef38 <put_memory>
 8011afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b00:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 8011b04:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8011b08:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8011b0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b10:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011b14:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011b18:	f7fd feca 	bl	800f8b0 <rmw_uros_epoch_nanos>
 8011b1c:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8011b20:	2303      	movs	r3, #3
 8011b22:	e942 0102 	strd	r0, r1, [r2, #-8]
 8011b26:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8011b2a:	b014      	add	sp, #80	; 0x50
 8011b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b30:	200123e4 	.word	0x200123e4
 8011b34:	20012404 	.word	0x20012404

08011b38 <on_reply>:
 8011b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b3c:	4821      	ldr	r0, [pc, #132]	; (8011bc4 <on_reply+0x8c>)
 8011b3e:	b094      	sub	sp, #80	; 0x50
 8011b40:	6800      	ldr	r0, [r0, #0]
 8011b42:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8011b44:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8011b48:	9113      	str	r1, [sp, #76]	; 0x4c
 8011b4a:	b3b8      	cbz	r0, 8011bbc <on_reply+0x84>
 8011b4c:	461d      	mov	r5, r3
 8011b4e:	e001      	b.n	8011b54 <on_reply+0x1c>
 8011b50:	6840      	ldr	r0, [r0, #4]
 8011b52:	b398      	cbz	r0, 8011bbc <on_reply+0x84>
 8011b54:	6884      	ldr	r4, [r0, #8]
 8011b56:	8b21      	ldrh	r1, [r4, #24]
 8011b58:	4291      	cmp	r1, r2
 8011b5a:	d1f9      	bne.n	8011b50 <on_reply+0x18>
 8011b5c:	2248      	movs	r2, #72	; 0x48
 8011b5e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011b62:	4668      	mov	r0, sp
 8011b64:	f000 fd83 	bl	801266e <memcpy>
 8011b68:	f104 0320 	add.w	r3, r4, #32
 8011b6c:	cb0c      	ldmia	r3, {r2, r3}
 8011b6e:	4620      	mov	r0, r4
 8011b70:	f7f8 f836 	bl	8009be0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8011b74:	4680      	mov	r8, r0
 8011b76:	b308      	cbz	r0, 8011bbc <on_reply+0x84>
 8011b78:	4638      	mov	r0, r7
 8011b7a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8011b7e:	4632      	mov	r2, r6
 8011b80:	f107 0110 	add.w	r1, r7, #16
 8011b84:	f7fd ff9e 	bl	800fac4 <ucdr_deserialize_array_uint8_t>
 8011b88:	b930      	cbnz	r0, 8011b98 <on_reply+0x60>
 8011b8a:	480f      	ldr	r0, [pc, #60]	; (8011bc8 <on_reply+0x90>)
 8011b8c:	4641      	mov	r1, r8
 8011b8e:	b014      	add	sp, #80	; 0x50
 8011b90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b94:	f7fd b9d0 	b.w	800ef38 <put_memory>
 8011b98:	2200      	movs	r2, #0
 8011b9a:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 8011b9e:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8011ba2:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8011ba6:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 8011baa:	f7fd fe81 	bl	800f8b0 <rmw_uros_epoch_nanos>
 8011bae:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8011bb2:	2304      	movs	r3, #4
 8011bb4:	e942 0102 	strd	r0, r1, [r2, #-8]
 8011bb8:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8011bbc:	b014      	add	sp, #80	; 0x50
 8011bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bc2:	bf00      	nop
 8011bc4:	2000daf8 	.word	0x2000daf8
 8011bc8:	20012404 	.word	0x20012404

08011bcc <rmw_destroy_client>:
 8011bcc:	b570      	push	{r4, r5, r6, lr}
 8011bce:	b128      	cbz	r0, 8011bdc <rmw_destroy_client+0x10>
 8011bd0:	4604      	mov	r4, r0
 8011bd2:	6800      	ldr	r0, [r0, #0]
 8011bd4:	460d      	mov	r5, r1
 8011bd6:	f7f8 f8d3 	bl	8009d80 <is_uxrce_rmw_identifier_valid>
 8011bda:	b910      	cbnz	r0, 8011be2 <rmw_destroy_client+0x16>
 8011bdc:	2401      	movs	r4, #1
 8011bde:	4620      	mov	r0, r4
 8011be0:	bd70      	pop	{r4, r5, r6, pc}
 8011be2:	6863      	ldr	r3, [r4, #4]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d0f9      	beq.n	8011bdc <rmw_destroy_client+0x10>
 8011be8:	2d00      	cmp	r5, #0
 8011bea:	d0f7      	beq.n	8011bdc <rmw_destroy_client+0x10>
 8011bec:	6828      	ldr	r0, [r5, #0]
 8011bee:	f7f8 f8c7 	bl	8009d80 <is_uxrce_rmw_identifier_valid>
 8011bf2:	2800      	cmp	r0, #0
 8011bf4:	d0f2      	beq.n	8011bdc <rmw_destroy_client+0x10>
 8011bf6:	686e      	ldr	r6, [r5, #4]
 8011bf8:	2e00      	cmp	r6, #0
 8011bfa:	d0ef      	beq.n	8011bdc <rmw_destroy_client+0x10>
 8011bfc:	6864      	ldr	r4, [r4, #4]
 8011bfe:	6932      	ldr	r2, [r6, #16]
 8011c00:	6920      	ldr	r0, [r4, #16]
 8011c02:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011c06:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011c0a:	6819      	ldr	r1, [r3, #0]
 8011c0c:	f7fe fe38 	bl	8010880 <uxr_buffer_cancel_data>
 8011c10:	4602      	mov	r2, r0
 8011c12:	6920      	ldr	r0, [r4, #16]
 8011c14:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011c18:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011c1c:	f7f8 f830 	bl	8009c80 <run_xrce_session>
 8011c20:	6920      	ldr	r0, [r4, #16]
 8011c22:	6932      	ldr	r2, [r6, #16]
 8011c24:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011c28:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011c2c:	6819      	ldr	r1, [r3, #0]
 8011c2e:	f7f9 f963 	bl	800aef8 <uxr_buffer_delete_entity>
 8011c32:	4602      	mov	r2, r0
 8011c34:	6920      	ldr	r0, [r4, #16]
 8011c36:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011c3a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011c3e:	f7f8 f81f 	bl	8009c80 <run_xrce_session>
 8011c42:	2800      	cmp	r0, #0
 8011c44:	4628      	mov	r0, r5
 8011c46:	bf14      	ite	ne
 8011c48:	2400      	movne	r4, #0
 8011c4a:	2402      	moveq	r4, #2
 8011c4c:	f7f7 ffa6 	bl	8009b9c <rmw_uxrce_fini_client_memory>
 8011c50:	e7c5      	b.n	8011bde <rmw_destroy_client+0x12>
 8011c52:	bf00      	nop

08011c54 <rmw_create_guard_condition>:
 8011c54:	b538      	push	{r3, r4, r5, lr}
 8011c56:	4605      	mov	r5, r0
 8011c58:	4807      	ldr	r0, [pc, #28]	; (8011c78 <rmw_create_guard_condition+0x24>)
 8011c5a:	f7fd f95d 	bl	800ef18 <get_memory>
 8011c5e:	b148      	cbz	r0, 8011c74 <rmw_create_guard_condition+0x20>
 8011c60:	6884      	ldr	r4, [r0, #8]
 8011c62:	2300      	movs	r3, #0
 8011c64:	7423      	strb	r3, [r4, #16]
 8011c66:	61e5      	str	r5, [r4, #28]
 8011c68:	f7fd f97a 	bl	800ef60 <rmw_get_implementation_identifier>
 8011c6c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8011c70:	f104 0014 	add.w	r0, r4, #20
 8011c74:	bd38      	pop	{r3, r4, r5, pc}
 8011c76:	bf00      	nop
 8011c78:	200123a4 	.word	0x200123a4

08011c7c <rmw_destroy_guard_condition>:
 8011c7c:	b508      	push	{r3, lr}
 8011c7e:	4b08      	ldr	r3, [pc, #32]	; (8011ca0 <rmw_destroy_guard_condition+0x24>)
 8011c80:	6819      	ldr	r1, [r3, #0]
 8011c82:	b911      	cbnz	r1, 8011c8a <rmw_destroy_guard_condition+0xe>
 8011c84:	e00a      	b.n	8011c9c <rmw_destroy_guard_condition+0x20>
 8011c86:	6849      	ldr	r1, [r1, #4]
 8011c88:	b141      	cbz	r1, 8011c9c <rmw_destroy_guard_condition+0x20>
 8011c8a:	688b      	ldr	r3, [r1, #8]
 8011c8c:	3314      	adds	r3, #20
 8011c8e:	4298      	cmp	r0, r3
 8011c90:	d1f9      	bne.n	8011c86 <rmw_destroy_guard_condition+0xa>
 8011c92:	4803      	ldr	r0, [pc, #12]	; (8011ca0 <rmw_destroy_guard_condition+0x24>)
 8011c94:	f7fd f950 	bl	800ef38 <put_memory>
 8011c98:	2000      	movs	r0, #0
 8011c9a:	bd08      	pop	{r3, pc}
 8011c9c:	2001      	movs	r0, #1
 8011c9e:	bd08      	pop	{r3, pc}
 8011ca0:	200123a4 	.word	0x200123a4

08011ca4 <calloc>:
 8011ca4:	4b02      	ldr	r3, [pc, #8]	; (8011cb0 <calloc+0xc>)
 8011ca6:	460a      	mov	r2, r1
 8011ca8:	4601      	mov	r1, r0
 8011caa:	6818      	ldr	r0, [r3, #0]
 8011cac:	f000 b802 	b.w	8011cb4 <_calloc_r>
 8011cb0:	2000010c 	.word	0x2000010c

08011cb4 <_calloc_r>:
 8011cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011cb6:	fba1 2402 	umull	r2, r4, r1, r2
 8011cba:	b94c      	cbnz	r4, 8011cd0 <_calloc_r+0x1c>
 8011cbc:	4611      	mov	r1, r2
 8011cbe:	9201      	str	r2, [sp, #4]
 8011cc0:	f000 f886 	bl	8011dd0 <_malloc_r>
 8011cc4:	9a01      	ldr	r2, [sp, #4]
 8011cc6:	4605      	mov	r5, r0
 8011cc8:	b930      	cbnz	r0, 8011cd8 <_calloc_r+0x24>
 8011cca:	4628      	mov	r0, r5
 8011ccc:	b003      	add	sp, #12
 8011cce:	bd30      	pop	{r4, r5, pc}
 8011cd0:	220c      	movs	r2, #12
 8011cd2:	6002      	str	r2, [r0, #0]
 8011cd4:	2500      	movs	r5, #0
 8011cd6:	e7f8      	b.n	8011cca <_calloc_r+0x16>
 8011cd8:	4621      	mov	r1, r4
 8011cda:	f000 fba9 	bl	8012430 <memset>
 8011cde:	e7f4      	b.n	8011cca <_calloc_r+0x16>

08011ce0 <getenv>:
 8011ce0:	b507      	push	{r0, r1, r2, lr}
 8011ce2:	4b04      	ldr	r3, [pc, #16]	; (8011cf4 <getenv+0x14>)
 8011ce4:	4601      	mov	r1, r0
 8011ce6:	aa01      	add	r2, sp, #4
 8011ce8:	6818      	ldr	r0, [r3, #0]
 8011cea:	f000 f805 	bl	8011cf8 <_findenv_r>
 8011cee:	b003      	add	sp, #12
 8011cf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8011cf4:	2000010c 	.word	0x2000010c

08011cf8 <_findenv_r>:
 8011cf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cfc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8011d6c <_findenv_r+0x74>
 8011d00:	4607      	mov	r7, r0
 8011d02:	4689      	mov	r9, r1
 8011d04:	4616      	mov	r6, r2
 8011d06:	f000 fcdf 	bl	80126c8 <__env_lock>
 8011d0a:	f8da 4000 	ldr.w	r4, [sl]
 8011d0e:	b134      	cbz	r4, 8011d1e <_findenv_r+0x26>
 8011d10:	464b      	mov	r3, r9
 8011d12:	4698      	mov	r8, r3
 8011d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d18:	b13a      	cbz	r2, 8011d2a <_findenv_r+0x32>
 8011d1a:	2a3d      	cmp	r2, #61	; 0x3d
 8011d1c:	d1f9      	bne.n	8011d12 <_findenv_r+0x1a>
 8011d1e:	4638      	mov	r0, r7
 8011d20:	f000 fcd8 	bl	80126d4 <__env_unlock>
 8011d24:	2000      	movs	r0, #0
 8011d26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d2a:	eba8 0809 	sub.w	r8, r8, r9
 8011d2e:	46a3      	mov	fp, r4
 8011d30:	f854 0b04 	ldr.w	r0, [r4], #4
 8011d34:	2800      	cmp	r0, #0
 8011d36:	d0f2      	beq.n	8011d1e <_findenv_r+0x26>
 8011d38:	4642      	mov	r2, r8
 8011d3a:	4649      	mov	r1, r9
 8011d3c:	f000 fb8d 	bl	801245a <strncmp>
 8011d40:	2800      	cmp	r0, #0
 8011d42:	d1f4      	bne.n	8011d2e <_findenv_r+0x36>
 8011d44:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011d48:	eb03 0508 	add.w	r5, r3, r8
 8011d4c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8011d50:	2b3d      	cmp	r3, #61	; 0x3d
 8011d52:	d1ec      	bne.n	8011d2e <_findenv_r+0x36>
 8011d54:	f8da 3000 	ldr.w	r3, [sl]
 8011d58:	ebab 0303 	sub.w	r3, fp, r3
 8011d5c:	109b      	asrs	r3, r3, #2
 8011d5e:	4638      	mov	r0, r7
 8011d60:	6033      	str	r3, [r6, #0]
 8011d62:	f000 fcb7 	bl	80126d4 <__env_unlock>
 8011d66:	1c68      	adds	r0, r5, #1
 8011d68:	e7dd      	b.n	8011d26 <_findenv_r+0x2e>
 8011d6a:	bf00      	nop
 8011d6c:	20000000 	.word	0x20000000

08011d70 <malloc>:
 8011d70:	4b02      	ldr	r3, [pc, #8]	; (8011d7c <malloc+0xc>)
 8011d72:	4601      	mov	r1, r0
 8011d74:	6818      	ldr	r0, [r3, #0]
 8011d76:	f000 b82b 	b.w	8011dd0 <_malloc_r>
 8011d7a:	bf00      	nop
 8011d7c:	2000010c 	.word	0x2000010c

08011d80 <free>:
 8011d80:	4b02      	ldr	r3, [pc, #8]	; (8011d8c <free+0xc>)
 8011d82:	4601      	mov	r1, r0
 8011d84:	6818      	ldr	r0, [r3, #0]
 8011d86:	f000 bcab 	b.w	80126e0 <_free_r>
 8011d8a:	bf00      	nop
 8011d8c:	2000010c 	.word	0x2000010c

08011d90 <sbrk_aligned>:
 8011d90:	b570      	push	{r4, r5, r6, lr}
 8011d92:	4e0e      	ldr	r6, [pc, #56]	; (8011dcc <sbrk_aligned+0x3c>)
 8011d94:	460c      	mov	r4, r1
 8011d96:	6831      	ldr	r1, [r6, #0]
 8011d98:	4605      	mov	r5, r0
 8011d9a:	b911      	cbnz	r1, 8011da2 <sbrk_aligned+0x12>
 8011d9c:	f000 fc10 	bl	80125c0 <_sbrk_r>
 8011da0:	6030      	str	r0, [r6, #0]
 8011da2:	4621      	mov	r1, r4
 8011da4:	4628      	mov	r0, r5
 8011da6:	f000 fc0b 	bl	80125c0 <_sbrk_r>
 8011daa:	1c43      	adds	r3, r0, #1
 8011dac:	d00a      	beq.n	8011dc4 <sbrk_aligned+0x34>
 8011dae:	1cc4      	adds	r4, r0, #3
 8011db0:	f024 0403 	bic.w	r4, r4, #3
 8011db4:	42a0      	cmp	r0, r4
 8011db6:	d007      	beq.n	8011dc8 <sbrk_aligned+0x38>
 8011db8:	1a21      	subs	r1, r4, r0
 8011dba:	4628      	mov	r0, r5
 8011dbc:	f000 fc00 	bl	80125c0 <_sbrk_r>
 8011dc0:	3001      	adds	r0, #1
 8011dc2:	d101      	bne.n	8011dc8 <sbrk_aligned+0x38>
 8011dc4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011dc8:	4620      	mov	r0, r4
 8011dca:	bd70      	pop	{r4, r5, r6, pc}
 8011dcc:	2001255c 	.word	0x2001255c

08011dd0 <_malloc_r>:
 8011dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011dd4:	1ccd      	adds	r5, r1, #3
 8011dd6:	f025 0503 	bic.w	r5, r5, #3
 8011dda:	3508      	adds	r5, #8
 8011ddc:	2d0c      	cmp	r5, #12
 8011dde:	bf38      	it	cc
 8011de0:	250c      	movcc	r5, #12
 8011de2:	2d00      	cmp	r5, #0
 8011de4:	4607      	mov	r7, r0
 8011de6:	db01      	blt.n	8011dec <_malloc_r+0x1c>
 8011de8:	42a9      	cmp	r1, r5
 8011dea:	d905      	bls.n	8011df8 <_malloc_r+0x28>
 8011dec:	230c      	movs	r3, #12
 8011dee:	603b      	str	r3, [r7, #0]
 8011df0:	2600      	movs	r6, #0
 8011df2:	4630      	mov	r0, r6
 8011df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011df8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011ecc <_malloc_r+0xfc>
 8011dfc:	f000 f868 	bl	8011ed0 <__malloc_lock>
 8011e00:	f8d8 3000 	ldr.w	r3, [r8]
 8011e04:	461c      	mov	r4, r3
 8011e06:	bb5c      	cbnz	r4, 8011e60 <_malloc_r+0x90>
 8011e08:	4629      	mov	r1, r5
 8011e0a:	4638      	mov	r0, r7
 8011e0c:	f7ff ffc0 	bl	8011d90 <sbrk_aligned>
 8011e10:	1c43      	adds	r3, r0, #1
 8011e12:	4604      	mov	r4, r0
 8011e14:	d155      	bne.n	8011ec2 <_malloc_r+0xf2>
 8011e16:	f8d8 4000 	ldr.w	r4, [r8]
 8011e1a:	4626      	mov	r6, r4
 8011e1c:	2e00      	cmp	r6, #0
 8011e1e:	d145      	bne.n	8011eac <_malloc_r+0xdc>
 8011e20:	2c00      	cmp	r4, #0
 8011e22:	d048      	beq.n	8011eb6 <_malloc_r+0xe6>
 8011e24:	6823      	ldr	r3, [r4, #0]
 8011e26:	4631      	mov	r1, r6
 8011e28:	4638      	mov	r0, r7
 8011e2a:	eb04 0903 	add.w	r9, r4, r3
 8011e2e:	f000 fbc7 	bl	80125c0 <_sbrk_r>
 8011e32:	4581      	cmp	r9, r0
 8011e34:	d13f      	bne.n	8011eb6 <_malloc_r+0xe6>
 8011e36:	6821      	ldr	r1, [r4, #0]
 8011e38:	1a6d      	subs	r5, r5, r1
 8011e3a:	4629      	mov	r1, r5
 8011e3c:	4638      	mov	r0, r7
 8011e3e:	f7ff ffa7 	bl	8011d90 <sbrk_aligned>
 8011e42:	3001      	adds	r0, #1
 8011e44:	d037      	beq.n	8011eb6 <_malloc_r+0xe6>
 8011e46:	6823      	ldr	r3, [r4, #0]
 8011e48:	442b      	add	r3, r5
 8011e4a:	6023      	str	r3, [r4, #0]
 8011e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d038      	beq.n	8011ec6 <_malloc_r+0xf6>
 8011e54:	685a      	ldr	r2, [r3, #4]
 8011e56:	42a2      	cmp	r2, r4
 8011e58:	d12b      	bne.n	8011eb2 <_malloc_r+0xe2>
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	605a      	str	r2, [r3, #4]
 8011e5e:	e00f      	b.n	8011e80 <_malloc_r+0xb0>
 8011e60:	6822      	ldr	r2, [r4, #0]
 8011e62:	1b52      	subs	r2, r2, r5
 8011e64:	d41f      	bmi.n	8011ea6 <_malloc_r+0xd6>
 8011e66:	2a0b      	cmp	r2, #11
 8011e68:	d917      	bls.n	8011e9a <_malloc_r+0xca>
 8011e6a:	1961      	adds	r1, r4, r5
 8011e6c:	42a3      	cmp	r3, r4
 8011e6e:	6025      	str	r5, [r4, #0]
 8011e70:	bf18      	it	ne
 8011e72:	6059      	strne	r1, [r3, #4]
 8011e74:	6863      	ldr	r3, [r4, #4]
 8011e76:	bf08      	it	eq
 8011e78:	f8c8 1000 	streq.w	r1, [r8]
 8011e7c:	5162      	str	r2, [r4, r5]
 8011e7e:	604b      	str	r3, [r1, #4]
 8011e80:	4638      	mov	r0, r7
 8011e82:	f104 060b 	add.w	r6, r4, #11
 8011e86:	f000 f829 	bl	8011edc <__malloc_unlock>
 8011e8a:	f026 0607 	bic.w	r6, r6, #7
 8011e8e:	1d23      	adds	r3, r4, #4
 8011e90:	1af2      	subs	r2, r6, r3
 8011e92:	d0ae      	beq.n	8011df2 <_malloc_r+0x22>
 8011e94:	1b9b      	subs	r3, r3, r6
 8011e96:	50a3      	str	r3, [r4, r2]
 8011e98:	e7ab      	b.n	8011df2 <_malloc_r+0x22>
 8011e9a:	42a3      	cmp	r3, r4
 8011e9c:	6862      	ldr	r2, [r4, #4]
 8011e9e:	d1dd      	bne.n	8011e5c <_malloc_r+0x8c>
 8011ea0:	f8c8 2000 	str.w	r2, [r8]
 8011ea4:	e7ec      	b.n	8011e80 <_malloc_r+0xb0>
 8011ea6:	4623      	mov	r3, r4
 8011ea8:	6864      	ldr	r4, [r4, #4]
 8011eaa:	e7ac      	b.n	8011e06 <_malloc_r+0x36>
 8011eac:	4634      	mov	r4, r6
 8011eae:	6876      	ldr	r6, [r6, #4]
 8011eb0:	e7b4      	b.n	8011e1c <_malloc_r+0x4c>
 8011eb2:	4613      	mov	r3, r2
 8011eb4:	e7cc      	b.n	8011e50 <_malloc_r+0x80>
 8011eb6:	230c      	movs	r3, #12
 8011eb8:	603b      	str	r3, [r7, #0]
 8011eba:	4638      	mov	r0, r7
 8011ebc:	f000 f80e 	bl	8011edc <__malloc_unlock>
 8011ec0:	e797      	b.n	8011df2 <_malloc_r+0x22>
 8011ec2:	6025      	str	r5, [r4, #0]
 8011ec4:	e7dc      	b.n	8011e80 <_malloc_r+0xb0>
 8011ec6:	605b      	str	r3, [r3, #4]
 8011ec8:	deff      	udf	#255	; 0xff
 8011eca:	bf00      	nop
 8011ecc:	20012558 	.word	0x20012558

08011ed0 <__malloc_lock>:
 8011ed0:	4801      	ldr	r0, [pc, #4]	; (8011ed8 <__malloc_lock+0x8>)
 8011ed2:	f000 bbc2 	b.w	801265a <__retarget_lock_acquire_recursive>
 8011ed6:	bf00      	nop
 8011ed8:	200126a1 	.word	0x200126a1

08011edc <__malloc_unlock>:
 8011edc:	4801      	ldr	r0, [pc, #4]	; (8011ee4 <__malloc_unlock+0x8>)
 8011ede:	f000 bbbd 	b.w	801265c <__retarget_lock_release_recursive>
 8011ee2:	bf00      	nop
 8011ee4:	200126a1 	.word	0x200126a1

08011ee8 <srand>:
 8011ee8:	b538      	push	{r3, r4, r5, lr}
 8011eea:	4b10      	ldr	r3, [pc, #64]	; (8011f2c <srand+0x44>)
 8011eec:	681d      	ldr	r5, [r3, #0]
 8011eee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011ef0:	4604      	mov	r4, r0
 8011ef2:	b9b3      	cbnz	r3, 8011f22 <srand+0x3a>
 8011ef4:	2018      	movs	r0, #24
 8011ef6:	f7ff ff3b 	bl	8011d70 <malloc>
 8011efa:	4602      	mov	r2, r0
 8011efc:	6328      	str	r0, [r5, #48]	; 0x30
 8011efe:	b920      	cbnz	r0, 8011f0a <srand+0x22>
 8011f00:	4b0b      	ldr	r3, [pc, #44]	; (8011f30 <srand+0x48>)
 8011f02:	480c      	ldr	r0, [pc, #48]	; (8011f34 <srand+0x4c>)
 8011f04:	2146      	movs	r1, #70	; 0x46
 8011f06:	f000 fbc1 	bl	801268c <__assert_func>
 8011f0a:	490b      	ldr	r1, [pc, #44]	; (8011f38 <srand+0x50>)
 8011f0c:	4b0b      	ldr	r3, [pc, #44]	; (8011f3c <srand+0x54>)
 8011f0e:	e9c0 1300 	strd	r1, r3, [r0]
 8011f12:	4b0b      	ldr	r3, [pc, #44]	; (8011f40 <srand+0x58>)
 8011f14:	6083      	str	r3, [r0, #8]
 8011f16:	230b      	movs	r3, #11
 8011f18:	8183      	strh	r3, [r0, #12]
 8011f1a:	2100      	movs	r1, #0
 8011f1c:	2001      	movs	r0, #1
 8011f1e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011f22:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011f24:	2200      	movs	r2, #0
 8011f26:	611c      	str	r4, [r3, #16]
 8011f28:	615a      	str	r2, [r3, #20]
 8011f2a:	bd38      	pop	{r3, r4, r5, pc}
 8011f2c:	2000010c 	.word	0x2000010c
 8011f30:	08013e84 	.word	0x08013e84
 8011f34:	08013e9b 	.word	0x08013e9b
 8011f38:	abcd330e 	.word	0xabcd330e
 8011f3c:	e66d1234 	.word	0xe66d1234
 8011f40:	0005deec 	.word	0x0005deec

08011f44 <rand>:
 8011f44:	4b16      	ldr	r3, [pc, #88]	; (8011fa0 <rand+0x5c>)
 8011f46:	b510      	push	{r4, lr}
 8011f48:	681c      	ldr	r4, [r3, #0]
 8011f4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011f4c:	b9b3      	cbnz	r3, 8011f7c <rand+0x38>
 8011f4e:	2018      	movs	r0, #24
 8011f50:	f7ff ff0e 	bl	8011d70 <malloc>
 8011f54:	4602      	mov	r2, r0
 8011f56:	6320      	str	r0, [r4, #48]	; 0x30
 8011f58:	b920      	cbnz	r0, 8011f64 <rand+0x20>
 8011f5a:	4b12      	ldr	r3, [pc, #72]	; (8011fa4 <rand+0x60>)
 8011f5c:	4812      	ldr	r0, [pc, #72]	; (8011fa8 <rand+0x64>)
 8011f5e:	2152      	movs	r1, #82	; 0x52
 8011f60:	f000 fb94 	bl	801268c <__assert_func>
 8011f64:	4911      	ldr	r1, [pc, #68]	; (8011fac <rand+0x68>)
 8011f66:	4b12      	ldr	r3, [pc, #72]	; (8011fb0 <rand+0x6c>)
 8011f68:	e9c0 1300 	strd	r1, r3, [r0]
 8011f6c:	4b11      	ldr	r3, [pc, #68]	; (8011fb4 <rand+0x70>)
 8011f6e:	6083      	str	r3, [r0, #8]
 8011f70:	230b      	movs	r3, #11
 8011f72:	8183      	strh	r3, [r0, #12]
 8011f74:	2100      	movs	r1, #0
 8011f76:	2001      	movs	r0, #1
 8011f78:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011f7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011f7e:	480e      	ldr	r0, [pc, #56]	; (8011fb8 <rand+0x74>)
 8011f80:	690b      	ldr	r3, [r1, #16]
 8011f82:	694c      	ldr	r4, [r1, #20]
 8011f84:	4a0d      	ldr	r2, [pc, #52]	; (8011fbc <rand+0x78>)
 8011f86:	4358      	muls	r0, r3
 8011f88:	fb02 0004 	mla	r0, r2, r4, r0
 8011f8c:	fba3 3202 	umull	r3, r2, r3, r2
 8011f90:	3301      	adds	r3, #1
 8011f92:	eb40 0002 	adc.w	r0, r0, r2
 8011f96:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011f9a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011f9e:	bd10      	pop	{r4, pc}
 8011fa0:	2000010c 	.word	0x2000010c
 8011fa4:	08013e84 	.word	0x08013e84
 8011fa8:	08013e9b 	.word	0x08013e9b
 8011fac:	abcd330e 	.word	0xabcd330e
 8011fb0:	e66d1234 	.word	0xe66d1234
 8011fb4:	0005deec 	.word	0x0005deec
 8011fb8:	5851f42d 	.word	0x5851f42d
 8011fbc:	4c957f2d 	.word	0x4c957f2d

08011fc0 <realloc>:
 8011fc0:	4b02      	ldr	r3, [pc, #8]	; (8011fcc <realloc+0xc>)
 8011fc2:	460a      	mov	r2, r1
 8011fc4:	4601      	mov	r1, r0
 8011fc6:	6818      	ldr	r0, [r3, #0]
 8011fc8:	f000 b802 	b.w	8011fd0 <_realloc_r>
 8011fcc:	2000010c 	.word	0x2000010c

08011fd0 <_realloc_r>:
 8011fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fd4:	4680      	mov	r8, r0
 8011fd6:	4614      	mov	r4, r2
 8011fd8:	460e      	mov	r6, r1
 8011fda:	b921      	cbnz	r1, 8011fe6 <_realloc_r+0x16>
 8011fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fe0:	4611      	mov	r1, r2
 8011fe2:	f7ff bef5 	b.w	8011dd0 <_malloc_r>
 8011fe6:	b92a      	cbnz	r2, 8011ff4 <_realloc_r+0x24>
 8011fe8:	f000 fb7a 	bl	80126e0 <_free_r>
 8011fec:	4625      	mov	r5, r4
 8011fee:	4628      	mov	r0, r5
 8011ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ff4:	f000 fbc0 	bl	8012778 <_malloc_usable_size_r>
 8011ff8:	4284      	cmp	r4, r0
 8011ffa:	4607      	mov	r7, r0
 8011ffc:	d802      	bhi.n	8012004 <_realloc_r+0x34>
 8011ffe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012002:	d812      	bhi.n	801202a <_realloc_r+0x5a>
 8012004:	4621      	mov	r1, r4
 8012006:	4640      	mov	r0, r8
 8012008:	f7ff fee2 	bl	8011dd0 <_malloc_r>
 801200c:	4605      	mov	r5, r0
 801200e:	2800      	cmp	r0, #0
 8012010:	d0ed      	beq.n	8011fee <_realloc_r+0x1e>
 8012012:	42bc      	cmp	r4, r7
 8012014:	4622      	mov	r2, r4
 8012016:	4631      	mov	r1, r6
 8012018:	bf28      	it	cs
 801201a:	463a      	movcs	r2, r7
 801201c:	f000 fb27 	bl	801266e <memcpy>
 8012020:	4631      	mov	r1, r6
 8012022:	4640      	mov	r0, r8
 8012024:	f000 fb5c 	bl	80126e0 <_free_r>
 8012028:	e7e1      	b.n	8011fee <_realloc_r+0x1e>
 801202a:	4635      	mov	r5, r6
 801202c:	e7df      	b.n	8011fee <_realloc_r+0x1e>
	...

08012030 <_strtoul_l.constprop.0>:
 8012030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012034:	4f36      	ldr	r7, [pc, #216]	; (8012110 <_strtoul_l.constprop.0+0xe0>)
 8012036:	4686      	mov	lr, r0
 8012038:	460d      	mov	r5, r1
 801203a:	4628      	mov	r0, r5
 801203c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012040:	5d3e      	ldrb	r6, [r7, r4]
 8012042:	f016 0608 	ands.w	r6, r6, #8
 8012046:	d1f8      	bne.n	801203a <_strtoul_l.constprop.0+0xa>
 8012048:	2c2d      	cmp	r4, #45	; 0x2d
 801204a:	d130      	bne.n	80120ae <_strtoul_l.constprop.0+0x7e>
 801204c:	782c      	ldrb	r4, [r5, #0]
 801204e:	2601      	movs	r6, #1
 8012050:	1c85      	adds	r5, r0, #2
 8012052:	2b00      	cmp	r3, #0
 8012054:	d057      	beq.n	8012106 <_strtoul_l.constprop.0+0xd6>
 8012056:	2b10      	cmp	r3, #16
 8012058:	d109      	bne.n	801206e <_strtoul_l.constprop.0+0x3e>
 801205a:	2c30      	cmp	r4, #48	; 0x30
 801205c:	d107      	bne.n	801206e <_strtoul_l.constprop.0+0x3e>
 801205e:	7828      	ldrb	r0, [r5, #0]
 8012060:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012064:	2858      	cmp	r0, #88	; 0x58
 8012066:	d149      	bne.n	80120fc <_strtoul_l.constprop.0+0xcc>
 8012068:	786c      	ldrb	r4, [r5, #1]
 801206a:	2310      	movs	r3, #16
 801206c:	3502      	adds	r5, #2
 801206e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8012072:	2700      	movs	r7, #0
 8012074:	fbb8 f8f3 	udiv	r8, r8, r3
 8012078:	fb03 f908 	mul.w	r9, r3, r8
 801207c:	ea6f 0909 	mvn.w	r9, r9
 8012080:	4638      	mov	r0, r7
 8012082:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012086:	f1bc 0f09 	cmp.w	ip, #9
 801208a:	d815      	bhi.n	80120b8 <_strtoul_l.constprop.0+0x88>
 801208c:	4664      	mov	r4, ip
 801208e:	42a3      	cmp	r3, r4
 8012090:	dd23      	ble.n	80120da <_strtoul_l.constprop.0+0xaa>
 8012092:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8012096:	d007      	beq.n	80120a8 <_strtoul_l.constprop.0+0x78>
 8012098:	4580      	cmp	r8, r0
 801209a:	d31b      	bcc.n	80120d4 <_strtoul_l.constprop.0+0xa4>
 801209c:	d101      	bne.n	80120a2 <_strtoul_l.constprop.0+0x72>
 801209e:	45a1      	cmp	r9, r4
 80120a0:	db18      	blt.n	80120d4 <_strtoul_l.constprop.0+0xa4>
 80120a2:	fb00 4003 	mla	r0, r0, r3, r4
 80120a6:	2701      	movs	r7, #1
 80120a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80120ac:	e7e9      	b.n	8012082 <_strtoul_l.constprop.0+0x52>
 80120ae:	2c2b      	cmp	r4, #43	; 0x2b
 80120b0:	bf04      	itt	eq
 80120b2:	782c      	ldrbeq	r4, [r5, #0]
 80120b4:	1c85      	addeq	r5, r0, #2
 80120b6:	e7cc      	b.n	8012052 <_strtoul_l.constprop.0+0x22>
 80120b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80120bc:	f1bc 0f19 	cmp.w	ip, #25
 80120c0:	d801      	bhi.n	80120c6 <_strtoul_l.constprop.0+0x96>
 80120c2:	3c37      	subs	r4, #55	; 0x37
 80120c4:	e7e3      	b.n	801208e <_strtoul_l.constprop.0+0x5e>
 80120c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80120ca:	f1bc 0f19 	cmp.w	ip, #25
 80120ce:	d804      	bhi.n	80120da <_strtoul_l.constprop.0+0xaa>
 80120d0:	3c57      	subs	r4, #87	; 0x57
 80120d2:	e7dc      	b.n	801208e <_strtoul_l.constprop.0+0x5e>
 80120d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80120d8:	e7e6      	b.n	80120a8 <_strtoul_l.constprop.0+0x78>
 80120da:	1c7b      	adds	r3, r7, #1
 80120dc:	d106      	bne.n	80120ec <_strtoul_l.constprop.0+0xbc>
 80120de:	2322      	movs	r3, #34	; 0x22
 80120e0:	f8ce 3000 	str.w	r3, [lr]
 80120e4:	4638      	mov	r0, r7
 80120e6:	b932      	cbnz	r2, 80120f6 <_strtoul_l.constprop.0+0xc6>
 80120e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120ec:	b106      	cbz	r6, 80120f0 <_strtoul_l.constprop.0+0xc0>
 80120ee:	4240      	negs	r0, r0
 80120f0:	2a00      	cmp	r2, #0
 80120f2:	d0f9      	beq.n	80120e8 <_strtoul_l.constprop.0+0xb8>
 80120f4:	b107      	cbz	r7, 80120f8 <_strtoul_l.constprop.0+0xc8>
 80120f6:	1e69      	subs	r1, r5, #1
 80120f8:	6011      	str	r1, [r2, #0]
 80120fa:	e7f5      	b.n	80120e8 <_strtoul_l.constprop.0+0xb8>
 80120fc:	2430      	movs	r4, #48	; 0x30
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d1b5      	bne.n	801206e <_strtoul_l.constprop.0+0x3e>
 8012102:	2308      	movs	r3, #8
 8012104:	e7b3      	b.n	801206e <_strtoul_l.constprop.0+0x3e>
 8012106:	2c30      	cmp	r4, #48	; 0x30
 8012108:	d0a9      	beq.n	801205e <_strtoul_l.constprop.0+0x2e>
 801210a:	230a      	movs	r3, #10
 801210c:	e7af      	b.n	801206e <_strtoul_l.constprop.0+0x3e>
 801210e:	bf00      	nop
 8012110:	08013ef4 	.word	0x08013ef4

08012114 <strtoul>:
 8012114:	4613      	mov	r3, r2
 8012116:	460a      	mov	r2, r1
 8012118:	4601      	mov	r1, r0
 801211a:	4802      	ldr	r0, [pc, #8]	; (8012124 <strtoul+0x10>)
 801211c:	6800      	ldr	r0, [r0, #0]
 801211e:	f7ff bf87 	b.w	8012030 <_strtoul_l.constprop.0>
 8012122:	bf00      	nop
 8012124:	2000010c 	.word	0x2000010c

08012128 <std>:
 8012128:	2300      	movs	r3, #0
 801212a:	b510      	push	{r4, lr}
 801212c:	4604      	mov	r4, r0
 801212e:	e9c0 3300 	strd	r3, r3, [r0]
 8012132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012136:	6083      	str	r3, [r0, #8]
 8012138:	8181      	strh	r1, [r0, #12]
 801213a:	6643      	str	r3, [r0, #100]	; 0x64
 801213c:	81c2      	strh	r2, [r0, #14]
 801213e:	6183      	str	r3, [r0, #24]
 8012140:	4619      	mov	r1, r3
 8012142:	2208      	movs	r2, #8
 8012144:	305c      	adds	r0, #92	; 0x5c
 8012146:	f000 f973 	bl	8012430 <memset>
 801214a:	4b0d      	ldr	r3, [pc, #52]	; (8012180 <std+0x58>)
 801214c:	6263      	str	r3, [r4, #36]	; 0x24
 801214e:	4b0d      	ldr	r3, [pc, #52]	; (8012184 <std+0x5c>)
 8012150:	62a3      	str	r3, [r4, #40]	; 0x28
 8012152:	4b0d      	ldr	r3, [pc, #52]	; (8012188 <std+0x60>)
 8012154:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012156:	4b0d      	ldr	r3, [pc, #52]	; (801218c <std+0x64>)
 8012158:	6323      	str	r3, [r4, #48]	; 0x30
 801215a:	4b0d      	ldr	r3, [pc, #52]	; (8012190 <std+0x68>)
 801215c:	6224      	str	r4, [r4, #32]
 801215e:	429c      	cmp	r4, r3
 8012160:	d006      	beq.n	8012170 <std+0x48>
 8012162:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012166:	4294      	cmp	r4, r2
 8012168:	d002      	beq.n	8012170 <std+0x48>
 801216a:	33d0      	adds	r3, #208	; 0xd0
 801216c:	429c      	cmp	r4, r3
 801216e:	d105      	bne.n	801217c <std+0x54>
 8012170:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012178:	f000 ba6e 	b.w	8012658 <__retarget_lock_init_recursive>
 801217c:	bd10      	pop	{r4, pc}
 801217e:	bf00      	nop
 8012180:	08012339 	.word	0x08012339
 8012184:	0801235b 	.word	0x0801235b
 8012188:	08012393 	.word	0x08012393
 801218c:	080123b7 	.word	0x080123b7
 8012190:	20012560 	.word	0x20012560

08012194 <stdio_exit_handler>:
 8012194:	4a02      	ldr	r2, [pc, #8]	; (80121a0 <stdio_exit_handler+0xc>)
 8012196:	4903      	ldr	r1, [pc, #12]	; (80121a4 <stdio_exit_handler+0x10>)
 8012198:	4803      	ldr	r0, [pc, #12]	; (80121a8 <stdio_exit_handler+0x14>)
 801219a:	f000 b869 	b.w	8012270 <_fwalk_sglue>
 801219e:	bf00      	nop
 80121a0:	200000b4 	.word	0x200000b4
 80121a4:	080130ed 	.word	0x080130ed
 80121a8:	200000c0 	.word	0x200000c0

080121ac <cleanup_stdio>:
 80121ac:	6841      	ldr	r1, [r0, #4]
 80121ae:	4b0c      	ldr	r3, [pc, #48]	; (80121e0 <cleanup_stdio+0x34>)
 80121b0:	4299      	cmp	r1, r3
 80121b2:	b510      	push	{r4, lr}
 80121b4:	4604      	mov	r4, r0
 80121b6:	d001      	beq.n	80121bc <cleanup_stdio+0x10>
 80121b8:	f000 ff98 	bl	80130ec <_fflush_r>
 80121bc:	68a1      	ldr	r1, [r4, #8]
 80121be:	4b09      	ldr	r3, [pc, #36]	; (80121e4 <cleanup_stdio+0x38>)
 80121c0:	4299      	cmp	r1, r3
 80121c2:	d002      	beq.n	80121ca <cleanup_stdio+0x1e>
 80121c4:	4620      	mov	r0, r4
 80121c6:	f000 ff91 	bl	80130ec <_fflush_r>
 80121ca:	68e1      	ldr	r1, [r4, #12]
 80121cc:	4b06      	ldr	r3, [pc, #24]	; (80121e8 <cleanup_stdio+0x3c>)
 80121ce:	4299      	cmp	r1, r3
 80121d0:	d004      	beq.n	80121dc <cleanup_stdio+0x30>
 80121d2:	4620      	mov	r0, r4
 80121d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121d8:	f000 bf88 	b.w	80130ec <_fflush_r>
 80121dc:	bd10      	pop	{r4, pc}
 80121de:	bf00      	nop
 80121e0:	20012560 	.word	0x20012560
 80121e4:	200125c8 	.word	0x200125c8
 80121e8:	20012630 	.word	0x20012630

080121ec <global_stdio_init.part.0>:
 80121ec:	b510      	push	{r4, lr}
 80121ee:	4b0b      	ldr	r3, [pc, #44]	; (801221c <global_stdio_init.part.0+0x30>)
 80121f0:	4c0b      	ldr	r4, [pc, #44]	; (8012220 <global_stdio_init.part.0+0x34>)
 80121f2:	4a0c      	ldr	r2, [pc, #48]	; (8012224 <global_stdio_init.part.0+0x38>)
 80121f4:	601a      	str	r2, [r3, #0]
 80121f6:	4620      	mov	r0, r4
 80121f8:	2200      	movs	r2, #0
 80121fa:	2104      	movs	r1, #4
 80121fc:	f7ff ff94 	bl	8012128 <std>
 8012200:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012204:	2201      	movs	r2, #1
 8012206:	2109      	movs	r1, #9
 8012208:	f7ff ff8e 	bl	8012128 <std>
 801220c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012210:	2202      	movs	r2, #2
 8012212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012216:	2112      	movs	r1, #18
 8012218:	f7ff bf86 	b.w	8012128 <std>
 801221c:	20012698 	.word	0x20012698
 8012220:	20012560 	.word	0x20012560
 8012224:	08012195 	.word	0x08012195

08012228 <__sfp_lock_acquire>:
 8012228:	4801      	ldr	r0, [pc, #4]	; (8012230 <__sfp_lock_acquire+0x8>)
 801222a:	f000 ba16 	b.w	801265a <__retarget_lock_acquire_recursive>
 801222e:	bf00      	nop
 8012230:	200126a2 	.word	0x200126a2

08012234 <__sfp_lock_release>:
 8012234:	4801      	ldr	r0, [pc, #4]	; (801223c <__sfp_lock_release+0x8>)
 8012236:	f000 ba11 	b.w	801265c <__retarget_lock_release_recursive>
 801223a:	bf00      	nop
 801223c:	200126a2 	.word	0x200126a2

08012240 <__sinit>:
 8012240:	b510      	push	{r4, lr}
 8012242:	4604      	mov	r4, r0
 8012244:	f7ff fff0 	bl	8012228 <__sfp_lock_acquire>
 8012248:	6a23      	ldr	r3, [r4, #32]
 801224a:	b11b      	cbz	r3, 8012254 <__sinit+0x14>
 801224c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012250:	f7ff bff0 	b.w	8012234 <__sfp_lock_release>
 8012254:	4b04      	ldr	r3, [pc, #16]	; (8012268 <__sinit+0x28>)
 8012256:	6223      	str	r3, [r4, #32]
 8012258:	4b04      	ldr	r3, [pc, #16]	; (801226c <__sinit+0x2c>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d1f5      	bne.n	801224c <__sinit+0xc>
 8012260:	f7ff ffc4 	bl	80121ec <global_stdio_init.part.0>
 8012264:	e7f2      	b.n	801224c <__sinit+0xc>
 8012266:	bf00      	nop
 8012268:	080121ad 	.word	0x080121ad
 801226c:	20012698 	.word	0x20012698

08012270 <_fwalk_sglue>:
 8012270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012274:	4607      	mov	r7, r0
 8012276:	4688      	mov	r8, r1
 8012278:	4614      	mov	r4, r2
 801227a:	2600      	movs	r6, #0
 801227c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012280:	f1b9 0901 	subs.w	r9, r9, #1
 8012284:	d505      	bpl.n	8012292 <_fwalk_sglue+0x22>
 8012286:	6824      	ldr	r4, [r4, #0]
 8012288:	2c00      	cmp	r4, #0
 801228a:	d1f7      	bne.n	801227c <_fwalk_sglue+0xc>
 801228c:	4630      	mov	r0, r6
 801228e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012292:	89ab      	ldrh	r3, [r5, #12]
 8012294:	2b01      	cmp	r3, #1
 8012296:	d907      	bls.n	80122a8 <_fwalk_sglue+0x38>
 8012298:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801229c:	3301      	adds	r3, #1
 801229e:	d003      	beq.n	80122a8 <_fwalk_sglue+0x38>
 80122a0:	4629      	mov	r1, r5
 80122a2:	4638      	mov	r0, r7
 80122a4:	47c0      	blx	r8
 80122a6:	4306      	orrs	r6, r0
 80122a8:	3568      	adds	r5, #104	; 0x68
 80122aa:	e7e9      	b.n	8012280 <_fwalk_sglue+0x10>

080122ac <iprintf>:
 80122ac:	b40f      	push	{r0, r1, r2, r3}
 80122ae:	b507      	push	{r0, r1, r2, lr}
 80122b0:	4906      	ldr	r1, [pc, #24]	; (80122cc <iprintf+0x20>)
 80122b2:	ab04      	add	r3, sp, #16
 80122b4:	6808      	ldr	r0, [r1, #0]
 80122b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80122ba:	6881      	ldr	r1, [r0, #8]
 80122bc:	9301      	str	r3, [sp, #4]
 80122be:	f000 fbe5 	bl	8012a8c <_vfiprintf_r>
 80122c2:	b003      	add	sp, #12
 80122c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80122c8:	b004      	add	sp, #16
 80122ca:	4770      	bx	lr
 80122cc:	2000010c 	.word	0x2000010c

080122d0 <sniprintf>:
 80122d0:	b40c      	push	{r2, r3}
 80122d2:	b530      	push	{r4, r5, lr}
 80122d4:	4b17      	ldr	r3, [pc, #92]	; (8012334 <sniprintf+0x64>)
 80122d6:	1e0c      	subs	r4, r1, #0
 80122d8:	681d      	ldr	r5, [r3, #0]
 80122da:	b09d      	sub	sp, #116	; 0x74
 80122dc:	da08      	bge.n	80122f0 <sniprintf+0x20>
 80122de:	238b      	movs	r3, #139	; 0x8b
 80122e0:	602b      	str	r3, [r5, #0]
 80122e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80122e6:	b01d      	add	sp, #116	; 0x74
 80122e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80122ec:	b002      	add	sp, #8
 80122ee:	4770      	bx	lr
 80122f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80122f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80122f8:	bf14      	ite	ne
 80122fa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80122fe:	4623      	moveq	r3, r4
 8012300:	9304      	str	r3, [sp, #16]
 8012302:	9307      	str	r3, [sp, #28]
 8012304:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012308:	9002      	str	r0, [sp, #8]
 801230a:	9006      	str	r0, [sp, #24]
 801230c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012310:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012312:	ab21      	add	r3, sp, #132	; 0x84
 8012314:	a902      	add	r1, sp, #8
 8012316:	4628      	mov	r0, r5
 8012318:	9301      	str	r3, [sp, #4]
 801231a:	f000 fa8f 	bl	801283c <_svfiprintf_r>
 801231e:	1c43      	adds	r3, r0, #1
 8012320:	bfbc      	itt	lt
 8012322:	238b      	movlt	r3, #139	; 0x8b
 8012324:	602b      	strlt	r3, [r5, #0]
 8012326:	2c00      	cmp	r4, #0
 8012328:	d0dd      	beq.n	80122e6 <sniprintf+0x16>
 801232a:	9b02      	ldr	r3, [sp, #8]
 801232c:	2200      	movs	r2, #0
 801232e:	701a      	strb	r2, [r3, #0]
 8012330:	e7d9      	b.n	80122e6 <sniprintf+0x16>
 8012332:	bf00      	nop
 8012334:	2000010c 	.word	0x2000010c

08012338 <__sread>:
 8012338:	b510      	push	{r4, lr}
 801233a:	460c      	mov	r4, r1
 801233c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012340:	f000 f92c 	bl	801259c <_read_r>
 8012344:	2800      	cmp	r0, #0
 8012346:	bfab      	itete	ge
 8012348:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801234a:	89a3      	ldrhlt	r3, [r4, #12]
 801234c:	181b      	addge	r3, r3, r0
 801234e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012352:	bfac      	ite	ge
 8012354:	6563      	strge	r3, [r4, #84]	; 0x54
 8012356:	81a3      	strhlt	r3, [r4, #12]
 8012358:	bd10      	pop	{r4, pc}

0801235a <__swrite>:
 801235a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801235e:	461f      	mov	r7, r3
 8012360:	898b      	ldrh	r3, [r1, #12]
 8012362:	05db      	lsls	r3, r3, #23
 8012364:	4605      	mov	r5, r0
 8012366:	460c      	mov	r4, r1
 8012368:	4616      	mov	r6, r2
 801236a:	d505      	bpl.n	8012378 <__swrite+0x1e>
 801236c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012370:	2302      	movs	r3, #2
 8012372:	2200      	movs	r2, #0
 8012374:	f000 f900 	bl	8012578 <_lseek_r>
 8012378:	89a3      	ldrh	r3, [r4, #12]
 801237a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801237e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012382:	81a3      	strh	r3, [r4, #12]
 8012384:	4632      	mov	r2, r6
 8012386:	463b      	mov	r3, r7
 8012388:	4628      	mov	r0, r5
 801238a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801238e:	f000 b927 	b.w	80125e0 <_write_r>

08012392 <__sseek>:
 8012392:	b510      	push	{r4, lr}
 8012394:	460c      	mov	r4, r1
 8012396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801239a:	f000 f8ed 	bl	8012578 <_lseek_r>
 801239e:	1c43      	adds	r3, r0, #1
 80123a0:	89a3      	ldrh	r3, [r4, #12]
 80123a2:	bf15      	itete	ne
 80123a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80123a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80123aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80123ae:	81a3      	strheq	r3, [r4, #12]
 80123b0:	bf18      	it	ne
 80123b2:	81a3      	strhne	r3, [r4, #12]
 80123b4:	bd10      	pop	{r4, pc}

080123b6 <__sclose>:
 80123b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123ba:	f000 b877 	b.w	80124ac <_close_r>

080123be <_vsniprintf_r>:
 80123be:	b530      	push	{r4, r5, lr}
 80123c0:	4614      	mov	r4, r2
 80123c2:	2c00      	cmp	r4, #0
 80123c4:	b09b      	sub	sp, #108	; 0x6c
 80123c6:	4605      	mov	r5, r0
 80123c8:	461a      	mov	r2, r3
 80123ca:	da05      	bge.n	80123d8 <_vsniprintf_r+0x1a>
 80123cc:	238b      	movs	r3, #139	; 0x8b
 80123ce:	6003      	str	r3, [r0, #0]
 80123d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80123d4:	b01b      	add	sp, #108	; 0x6c
 80123d6:	bd30      	pop	{r4, r5, pc}
 80123d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80123dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80123e0:	bf14      	ite	ne
 80123e2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80123e6:	4623      	moveq	r3, r4
 80123e8:	9302      	str	r3, [sp, #8]
 80123ea:	9305      	str	r3, [sp, #20]
 80123ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80123f0:	9100      	str	r1, [sp, #0]
 80123f2:	9104      	str	r1, [sp, #16]
 80123f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80123f8:	4669      	mov	r1, sp
 80123fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80123fc:	f000 fa1e 	bl	801283c <_svfiprintf_r>
 8012400:	1c43      	adds	r3, r0, #1
 8012402:	bfbc      	itt	lt
 8012404:	238b      	movlt	r3, #139	; 0x8b
 8012406:	602b      	strlt	r3, [r5, #0]
 8012408:	2c00      	cmp	r4, #0
 801240a:	d0e3      	beq.n	80123d4 <_vsniprintf_r+0x16>
 801240c:	9b00      	ldr	r3, [sp, #0]
 801240e:	2200      	movs	r2, #0
 8012410:	701a      	strb	r2, [r3, #0]
 8012412:	e7df      	b.n	80123d4 <_vsniprintf_r+0x16>

08012414 <vsniprintf>:
 8012414:	b507      	push	{r0, r1, r2, lr}
 8012416:	9300      	str	r3, [sp, #0]
 8012418:	4613      	mov	r3, r2
 801241a:	460a      	mov	r2, r1
 801241c:	4601      	mov	r1, r0
 801241e:	4803      	ldr	r0, [pc, #12]	; (801242c <vsniprintf+0x18>)
 8012420:	6800      	ldr	r0, [r0, #0]
 8012422:	f7ff ffcc 	bl	80123be <_vsniprintf_r>
 8012426:	b003      	add	sp, #12
 8012428:	f85d fb04 	ldr.w	pc, [sp], #4
 801242c:	2000010c 	.word	0x2000010c

08012430 <memset>:
 8012430:	4402      	add	r2, r0
 8012432:	4603      	mov	r3, r0
 8012434:	4293      	cmp	r3, r2
 8012436:	d100      	bne.n	801243a <memset+0xa>
 8012438:	4770      	bx	lr
 801243a:	f803 1b01 	strb.w	r1, [r3], #1
 801243e:	e7f9      	b.n	8012434 <memset+0x4>

08012440 <strchr>:
 8012440:	b2c9      	uxtb	r1, r1
 8012442:	4603      	mov	r3, r0
 8012444:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012448:	b11a      	cbz	r2, 8012452 <strchr+0x12>
 801244a:	428a      	cmp	r2, r1
 801244c:	d1f9      	bne.n	8012442 <strchr+0x2>
 801244e:	4618      	mov	r0, r3
 8012450:	4770      	bx	lr
 8012452:	2900      	cmp	r1, #0
 8012454:	bf18      	it	ne
 8012456:	2300      	movne	r3, #0
 8012458:	e7f9      	b.n	801244e <strchr+0xe>

0801245a <strncmp>:
 801245a:	b510      	push	{r4, lr}
 801245c:	b16a      	cbz	r2, 801247a <strncmp+0x20>
 801245e:	3901      	subs	r1, #1
 8012460:	1884      	adds	r4, r0, r2
 8012462:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012466:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801246a:	429a      	cmp	r2, r3
 801246c:	d103      	bne.n	8012476 <strncmp+0x1c>
 801246e:	42a0      	cmp	r0, r4
 8012470:	d001      	beq.n	8012476 <strncmp+0x1c>
 8012472:	2a00      	cmp	r2, #0
 8012474:	d1f5      	bne.n	8012462 <strncmp+0x8>
 8012476:	1ad0      	subs	r0, r2, r3
 8012478:	bd10      	pop	{r4, pc}
 801247a:	4610      	mov	r0, r2
 801247c:	e7fc      	b.n	8012478 <strncmp+0x1e>

0801247e <strstr>:
 801247e:	780a      	ldrb	r2, [r1, #0]
 8012480:	b570      	push	{r4, r5, r6, lr}
 8012482:	b96a      	cbnz	r2, 80124a0 <strstr+0x22>
 8012484:	bd70      	pop	{r4, r5, r6, pc}
 8012486:	429a      	cmp	r2, r3
 8012488:	d109      	bne.n	801249e <strstr+0x20>
 801248a:	460c      	mov	r4, r1
 801248c:	4605      	mov	r5, r0
 801248e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012492:	2b00      	cmp	r3, #0
 8012494:	d0f6      	beq.n	8012484 <strstr+0x6>
 8012496:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801249a:	429e      	cmp	r6, r3
 801249c:	d0f7      	beq.n	801248e <strstr+0x10>
 801249e:	3001      	adds	r0, #1
 80124a0:	7803      	ldrb	r3, [r0, #0]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d1ef      	bne.n	8012486 <strstr+0x8>
 80124a6:	4618      	mov	r0, r3
 80124a8:	e7ec      	b.n	8012484 <strstr+0x6>
	...

080124ac <_close_r>:
 80124ac:	b538      	push	{r3, r4, r5, lr}
 80124ae:	4d06      	ldr	r5, [pc, #24]	; (80124c8 <_close_r+0x1c>)
 80124b0:	2300      	movs	r3, #0
 80124b2:	4604      	mov	r4, r0
 80124b4:	4608      	mov	r0, r1
 80124b6:	602b      	str	r3, [r5, #0]
 80124b8:	f7f0 f845 	bl	8002546 <_close>
 80124bc:	1c43      	adds	r3, r0, #1
 80124be:	d102      	bne.n	80124c6 <_close_r+0x1a>
 80124c0:	682b      	ldr	r3, [r5, #0]
 80124c2:	b103      	cbz	r3, 80124c6 <_close_r+0x1a>
 80124c4:	6023      	str	r3, [r4, #0]
 80124c6:	bd38      	pop	{r3, r4, r5, pc}
 80124c8:	2001269c 	.word	0x2001269c

080124cc <_reclaim_reent>:
 80124cc:	4b29      	ldr	r3, [pc, #164]	; (8012574 <_reclaim_reent+0xa8>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	4283      	cmp	r3, r0
 80124d2:	b570      	push	{r4, r5, r6, lr}
 80124d4:	4604      	mov	r4, r0
 80124d6:	d04b      	beq.n	8012570 <_reclaim_reent+0xa4>
 80124d8:	69c3      	ldr	r3, [r0, #28]
 80124da:	b143      	cbz	r3, 80124ee <_reclaim_reent+0x22>
 80124dc:	68db      	ldr	r3, [r3, #12]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d144      	bne.n	801256c <_reclaim_reent+0xa0>
 80124e2:	69e3      	ldr	r3, [r4, #28]
 80124e4:	6819      	ldr	r1, [r3, #0]
 80124e6:	b111      	cbz	r1, 80124ee <_reclaim_reent+0x22>
 80124e8:	4620      	mov	r0, r4
 80124ea:	f000 f8f9 	bl	80126e0 <_free_r>
 80124ee:	6961      	ldr	r1, [r4, #20]
 80124f0:	b111      	cbz	r1, 80124f8 <_reclaim_reent+0x2c>
 80124f2:	4620      	mov	r0, r4
 80124f4:	f000 f8f4 	bl	80126e0 <_free_r>
 80124f8:	69e1      	ldr	r1, [r4, #28]
 80124fa:	b111      	cbz	r1, 8012502 <_reclaim_reent+0x36>
 80124fc:	4620      	mov	r0, r4
 80124fe:	f000 f8ef 	bl	80126e0 <_free_r>
 8012502:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012504:	b111      	cbz	r1, 801250c <_reclaim_reent+0x40>
 8012506:	4620      	mov	r0, r4
 8012508:	f000 f8ea 	bl	80126e0 <_free_r>
 801250c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801250e:	b111      	cbz	r1, 8012516 <_reclaim_reent+0x4a>
 8012510:	4620      	mov	r0, r4
 8012512:	f000 f8e5 	bl	80126e0 <_free_r>
 8012516:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012518:	b111      	cbz	r1, 8012520 <_reclaim_reent+0x54>
 801251a:	4620      	mov	r0, r4
 801251c:	f000 f8e0 	bl	80126e0 <_free_r>
 8012520:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012522:	b111      	cbz	r1, 801252a <_reclaim_reent+0x5e>
 8012524:	4620      	mov	r0, r4
 8012526:	f000 f8db 	bl	80126e0 <_free_r>
 801252a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801252c:	b111      	cbz	r1, 8012534 <_reclaim_reent+0x68>
 801252e:	4620      	mov	r0, r4
 8012530:	f000 f8d6 	bl	80126e0 <_free_r>
 8012534:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012536:	b111      	cbz	r1, 801253e <_reclaim_reent+0x72>
 8012538:	4620      	mov	r0, r4
 801253a:	f000 f8d1 	bl	80126e0 <_free_r>
 801253e:	6a23      	ldr	r3, [r4, #32]
 8012540:	b1b3      	cbz	r3, 8012570 <_reclaim_reent+0xa4>
 8012542:	4620      	mov	r0, r4
 8012544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012548:	4718      	bx	r3
 801254a:	5949      	ldr	r1, [r1, r5]
 801254c:	b941      	cbnz	r1, 8012560 <_reclaim_reent+0x94>
 801254e:	3504      	adds	r5, #4
 8012550:	69e3      	ldr	r3, [r4, #28]
 8012552:	2d80      	cmp	r5, #128	; 0x80
 8012554:	68d9      	ldr	r1, [r3, #12]
 8012556:	d1f8      	bne.n	801254a <_reclaim_reent+0x7e>
 8012558:	4620      	mov	r0, r4
 801255a:	f000 f8c1 	bl	80126e0 <_free_r>
 801255e:	e7c0      	b.n	80124e2 <_reclaim_reent+0x16>
 8012560:	680e      	ldr	r6, [r1, #0]
 8012562:	4620      	mov	r0, r4
 8012564:	f000 f8bc 	bl	80126e0 <_free_r>
 8012568:	4631      	mov	r1, r6
 801256a:	e7ef      	b.n	801254c <_reclaim_reent+0x80>
 801256c:	2500      	movs	r5, #0
 801256e:	e7ef      	b.n	8012550 <_reclaim_reent+0x84>
 8012570:	bd70      	pop	{r4, r5, r6, pc}
 8012572:	bf00      	nop
 8012574:	2000010c 	.word	0x2000010c

08012578 <_lseek_r>:
 8012578:	b538      	push	{r3, r4, r5, lr}
 801257a:	4d07      	ldr	r5, [pc, #28]	; (8012598 <_lseek_r+0x20>)
 801257c:	4604      	mov	r4, r0
 801257e:	4608      	mov	r0, r1
 8012580:	4611      	mov	r1, r2
 8012582:	2200      	movs	r2, #0
 8012584:	602a      	str	r2, [r5, #0]
 8012586:	461a      	mov	r2, r3
 8012588:	f7f0 f804 	bl	8002594 <_lseek>
 801258c:	1c43      	adds	r3, r0, #1
 801258e:	d102      	bne.n	8012596 <_lseek_r+0x1e>
 8012590:	682b      	ldr	r3, [r5, #0]
 8012592:	b103      	cbz	r3, 8012596 <_lseek_r+0x1e>
 8012594:	6023      	str	r3, [r4, #0]
 8012596:	bd38      	pop	{r3, r4, r5, pc}
 8012598:	2001269c 	.word	0x2001269c

0801259c <_read_r>:
 801259c:	b538      	push	{r3, r4, r5, lr}
 801259e:	4d07      	ldr	r5, [pc, #28]	; (80125bc <_read_r+0x20>)
 80125a0:	4604      	mov	r4, r0
 80125a2:	4608      	mov	r0, r1
 80125a4:	4611      	mov	r1, r2
 80125a6:	2200      	movs	r2, #0
 80125a8:	602a      	str	r2, [r5, #0]
 80125aa:	461a      	mov	r2, r3
 80125ac:	f7ef ff92 	bl	80024d4 <_read>
 80125b0:	1c43      	adds	r3, r0, #1
 80125b2:	d102      	bne.n	80125ba <_read_r+0x1e>
 80125b4:	682b      	ldr	r3, [r5, #0]
 80125b6:	b103      	cbz	r3, 80125ba <_read_r+0x1e>
 80125b8:	6023      	str	r3, [r4, #0]
 80125ba:	bd38      	pop	{r3, r4, r5, pc}
 80125bc:	2001269c 	.word	0x2001269c

080125c0 <_sbrk_r>:
 80125c0:	b538      	push	{r3, r4, r5, lr}
 80125c2:	4d06      	ldr	r5, [pc, #24]	; (80125dc <_sbrk_r+0x1c>)
 80125c4:	2300      	movs	r3, #0
 80125c6:	4604      	mov	r4, r0
 80125c8:	4608      	mov	r0, r1
 80125ca:	602b      	str	r3, [r5, #0]
 80125cc:	f7ef fff0 	bl	80025b0 <_sbrk>
 80125d0:	1c43      	adds	r3, r0, #1
 80125d2:	d102      	bne.n	80125da <_sbrk_r+0x1a>
 80125d4:	682b      	ldr	r3, [r5, #0]
 80125d6:	b103      	cbz	r3, 80125da <_sbrk_r+0x1a>
 80125d8:	6023      	str	r3, [r4, #0]
 80125da:	bd38      	pop	{r3, r4, r5, pc}
 80125dc:	2001269c 	.word	0x2001269c

080125e0 <_write_r>:
 80125e0:	b538      	push	{r3, r4, r5, lr}
 80125e2:	4d07      	ldr	r5, [pc, #28]	; (8012600 <_write_r+0x20>)
 80125e4:	4604      	mov	r4, r0
 80125e6:	4608      	mov	r0, r1
 80125e8:	4611      	mov	r1, r2
 80125ea:	2200      	movs	r2, #0
 80125ec:	602a      	str	r2, [r5, #0]
 80125ee:	461a      	mov	r2, r3
 80125f0:	f7ef ff8d 	bl	800250e <_write>
 80125f4:	1c43      	adds	r3, r0, #1
 80125f6:	d102      	bne.n	80125fe <_write_r+0x1e>
 80125f8:	682b      	ldr	r3, [r5, #0]
 80125fa:	b103      	cbz	r3, 80125fe <_write_r+0x1e>
 80125fc:	6023      	str	r3, [r4, #0]
 80125fe:	bd38      	pop	{r3, r4, r5, pc}
 8012600:	2001269c 	.word	0x2001269c

08012604 <__errno>:
 8012604:	4b01      	ldr	r3, [pc, #4]	; (801260c <__errno+0x8>)
 8012606:	6818      	ldr	r0, [r3, #0]
 8012608:	4770      	bx	lr
 801260a:	bf00      	nop
 801260c:	2000010c 	.word	0x2000010c

08012610 <__libc_init_array>:
 8012610:	b570      	push	{r4, r5, r6, lr}
 8012612:	4d0d      	ldr	r5, [pc, #52]	; (8012648 <__libc_init_array+0x38>)
 8012614:	4c0d      	ldr	r4, [pc, #52]	; (801264c <__libc_init_array+0x3c>)
 8012616:	1b64      	subs	r4, r4, r5
 8012618:	10a4      	asrs	r4, r4, #2
 801261a:	2600      	movs	r6, #0
 801261c:	42a6      	cmp	r6, r4
 801261e:	d109      	bne.n	8012634 <__libc_init_array+0x24>
 8012620:	4d0b      	ldr	r5, [pc, #44]	; (8012650 <__libc_init_array+0x40>)
 8012622:	4c0c      	ldr	r4, [pc, #48]	; (8012654 <__libc_init_array+0x44>)
 8012624:	f000 ff1c 	bl	8013460 <_init>
 8012628:	1b64      	subs	r4, r4, r5
 801262a:	10a4      	asrs	r4, r4, #2
 801262c:	2600      	movs	r6, #0
 801262e:	42a6      	cmp	r6, r4
 8012630:	d105      	bne.n	801263e <__libc_init_array+0x2e>
 8012632:	bd70      	pop	{r4, r5, r6, pc}
 8012634:	f855 3b04 	ldr.w	r3, [r5], #4
 8012638:	4798      	blx	r3
 801263a:	3601      	adds	r6, #1
 801263c:	e7ee      	b.n	801261c <__libc_init_array+0xc>
 801263e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012642:	4798      	blx	r3
 8012644:	3601      	adds	r6, #1
 8012646:	e7f2      	b.n	801262e <__libc_init_array+0x1e>
 8012648:	0801406c 	.word	0x0801406c
 801264c:	0801406c 	.word	0x0801406c
 8012650:	0801406c 	.word	0x0801406c
 8012654:	08014074 	.word	0x08014074

08012658 <__retarget_lock_init_recursive>:
 8012658:	4770      	bx	lr

0801265a <__retarget_lock_acquire_recursive>:
 801265a:	4770      	bx	lr

0801265c <__retarget_lock_release_recursive>:
 801265c:	4770      	bx	lr

0801265e <strcpy>:
 801265e:	4603      	mov	r3, r0
 8012660:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012664:	f803 2b01 	strb.w	r2, [r3], #1
 8012668:	2a00      	cmp	r2, #0
 801266a:	d1f9      	bne.n	8012660 <strcpy+0x2>
 801266c:	4770      	bx	lr

0801266e <memcpy>:
 801266e:	440a      	add	r2, r1
 8012670:	4291      	cmp	r1, r2
 8012672:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012676:	d100      	bne.n	801267a <memcpy+0xc>
 8012678:	4770      	bx	lr
 801267a:	b510      	push	{r4, lr}
 801267c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012680:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012684:	4291      	cmp	r1, r2
 8012686:	d1f9      	bne.n	801267c <memcpy+0xe>
 8012688:	bd10      	pop	{r4, pc}
	...

0801268c <__assert_func>:
 801268c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801268e:	4614      	mov	r4, r2
 8012690:	461a      	mov	r2, r3
 8012692:	4b09      	ldr	r3, [pc, #36]	; (80126b8 <__assert_func+0x2c>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	4605      	mov	r5, r0
 8012698:	68d8      	ldr	r0, [r3, #12]
 801269a:	b14c      	cbz	r4, 80126b0 <__assert_func+0x24>
 801269c:	4b07      	ldr	r3, [pc, #28]	; (80126bc <__assert_func+0x30>)
 801269e:	9100      	str	r1, [sp, #0]
 80126a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80126a4:	4906      	ldr	r1, [pc, #24]	; (80126c0 <__assert_func+0x34>)
 80126a6:	462b      	mov	r3, r5
 80126a8:	f000 fd48 	bl	801313c <fiprintf>
 80126ac:	f000 fe08 	bl	80132c0 <abort>
 80126b0:	4b04      	ldr	r3, [pc, #16]	; (80126c4 <__assert_func+0x38>)
 80126b2:	461c      	mov	r4, r3
 80126b4:	e7f3      	b.n	801269e <__assert_func+0x12>
 80126b6:	bf00      	nop
 80126b8:	2000010c 	.word	0x2000010c
 80126bc:	08013ff4 	.word	0x08013ff4
 80126c0:	08014001 	.word	0x08014001
 80126c4:	0801402f 	.word	0x0801402f

080126c8 <__env_lock>:
 80126c8:	4801      	ldr	r0, [pc, #4]	; (80126d0 <__env_lock+0x8>)
 80126ca:	f7ff bfc6 	b.w	801265a <__retarget_lock_acquire_recursive>
 80126ce:	bf00      	nop
 80126d0:	200126a0 	.word	0x200126a0

080126d4 <__env_unlock>:
 80126d4:	4801      	ldr	r0, [pc, #4]	; (80126dc <__env_unlock+0x8>)
 80126d6:	f7ff bfc1 	b.w	801265c <__retarget_lock_release_recursive>
 80126da:	bf00      	nop
 80126dc:	200126a0 	.word	0x200126a0

080126e0 <_free_r>:
 80126e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80126e2:	2900      	cmp	r1, #0
 80126e4:	d044      	beq.n	8012770 <_free_r+0x90>
 80126e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80126ea:	9001      	str	r0, [sp, #4]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	f1a1 0404 	sub.w	r4, r1, #4
 80126f2:	bfb8      	it	lt
 80126f4:	18e4      	addlt	r4, r4, r3
 80126f6:	f7ff fbeb 	bl	8011ed0 <__malloc_lock>
 80126fa:	4a1e      	ldr	r2, [pc, #120]	; (8012774 <_free_r+0x94>)
 80126fc:	9801      	ldr	r0, [sp, #4]
 80126fe:	6813      	ldr	r3, [r2, #0]
 8012700:	b933      	cbnz	r3, 8012710 <_free_r+0x30>
 8012702:	6063      	str	r3, [r4, #4]
 8012704:	6014      	str	r4, [r2, #0]
 8012706:	b003      	add	sp, #12
 8012708:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801270c:	f7ff bbe6 	b.w	8011edc <__malloc_unlock>
 8012710:	42a3      	cmp	r3, r4
 8012712:	d908      	bls.n	8012726 <_free_r+0x46>
 8012714:	6825      	ldr	r5, [r4, #0]
 8012716:	1961      	adds	r1, r4, r5
 8012718:	428b      	cmp	r3, r1
 801271a:	bf01      	itttt	eq
 801271c:	6819      	ldreq	r1, [r3, #0]
 801271e:	685b      	ldreq	r3, [r3, #4]
 8012720:	1949      	addeq	r1, r1, r5
 8012722:	6021      	streq	r1, [r4, #0]
 8012724:	e7ed      	b.n	8012702 <_free_r+0x22>
 8012726:	461a      	mov	r2, r3
 8012728:	685b      	ldr	r3, [r3, #4]
 801272a:	b10b      	cbz	r3, 8012730 <_free_r+0x50>
 801272c:	42a3      	cmp	r3, r4
 801272e:	d9fa      	bls.n	8012726 <_free_r+0x46>
 8012730:	6811      	ldr	r1, [r2, #0]
 8012732:	1855      	adds	r5, r2, r1
 8012734:	42a5      	cmp	r5, r4
 8012736:	d10b      	bne.n	8012750 <_free_r+0x70>
 8012738:	6824      	ldr	r4, [r4, #0]
 801273a:	4421      	add	r1, r4
 801273c:	1854      	adds	r4, r2, r1
 801273e:	42a3      	cmp	r3, r4
 8012740:	6011      	str	r1, [r2, #0]
 8012742:	d1e0      	bne.n	8012706 <_free_r+0x26>
 8012744:	681c      	ldr	r4, [r3, #0]
 8012746:	685b      	ldr	r3, [r3, #4]
 8012748:	6053      	str	r3, [r2, #4]
 801274a:	440c      	add	r4, r1
 801274c:	6014      	str	r4, [r2, #0]
 801274e:	e7da      	b.n	8012706 <_free_r+0x26>
 8012750:	d902      	bls.n	8012758 <_free_r+0x78>
 8012752:	230c      	movs	r3, #12
 8012754:	6003      	str	r3, [r0, #0]
 8012756:	e7d6      	b.n	8012706 <_free_r+0x26>
 8012758:	6825      	ldr	r5, [r4, #0]
 801275a:	1961      	adds	r1, r4, r5
 801275c:	428b      	cmp	r3, r1
 801275e:	bf04      	itt	eq
 8012760:	6819      	ldreq	r1, [r3, #0]
 8012762:	685b      	ldreq	r3, [r3, #4]
 8012764:	6063      	str	r3, [r4, #4]
 8012766:	bf04      	itt	eq
 8012768:	1949      	addeq	r1, r1, r5
 801276a:	6021      	streq	r1, [r4, #0]
 801276c:	6054      	str	r4, [r2, #4]
 801276e:	e7ca      	b.n	8012706 <_free_r+0x26>
 8012770:	b003      	add	sp, #12
 8012772:	bd30      	pop	{r4, r5, pc}
 8012774:	20012558 	.word	0x20012558

08012778 <_malloc_usable_size_r>:
 8012778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801277c:	1f18      	subs	r0, r3, #4
 801277e:	2b00      	cmp	r3, #0
 8012780:	bfbc      	itt	lt
 8012782:	580b      	ldrlt	r3, [r1, r0]
 8012784:	18c0      	addlt	r0, r0, r3
 8012786:	4770      	bx	lr

08012788 <__ssputs_r>:
 8012788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801278c:	688e      	ldr	r6, [r1, #8]
 801278e:	461f      	mov	r7, r3
 8012790:	42be      	cmp	r6, r7
 8012792:	680b      	ldr	r3, [r1, #0]
 8012794:	4682      	mov	sl, r0
 8012796:	460c      	mov	r4, r1
 8012798:	4690      	mov	r8, r2
 801279a:	d82c      	bhi.n	80127f6 <__ssputs_r+0x6e>
 801279c:	898a      	ldrh	r2, [r1, #12]
 801279e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80127a2:	d026      	beq.n	80127f2 <__ssputs_r+0x6a>
 80127a4:	6965      	ldr	r5, [r4, #20]
 80127a6:	6909      	ldr	r1, [r1, #16]
 80127a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80127ac:	eba3 0901 	sub.w	r9, r3, r1
 80127b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80127b4:	1c7b      	adds	r3, r7, #1
 80127b6:	444b      	add	r3, r9
 80127b8:	106d      	asrs	r5, r5, #1
 80127ba:	429d      	cmp	r5, r3
 80127bc:	bf38      	it	cc
 80127be:	461d      	movcc	r5, r3
 80127c0:	0553      	lsls	r3, r2, #21
 80127c2:	d527      	bpl.n	8012814 <__ssputs_r+0x8c>
 80127c4:	4629      	mov	r1, r5
 80127c6:	f7ff fb03 	bl	8011dd0 <_malloc_r>
 80127ca:	4606      	mov	r6, r0
 80127cc:	b360      	cbz	r0, 8012828 <__ssputs_r+0xa0>
 80127ce:	6921      	ldr	r1, [r4, #16]
 80127d0:	464a      	mov	r2, r9
 80127d2:	f7ff ff4c 	bl	801266e <memcpy>
 80127d6:	89a3      	ldrh	r3, [r4, #12]
 80127d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80127dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127e0:	81a3      	strh	r3, [r4, #12]
 80127e2:	6126      	str	r6, [r4, #16]
 80127e4:	6165      	str	r5, [r4, #20]
 80127e6:	444e      	add	r6, r9
 80127e8:	eba5 0509 	sub.w	r5, r5, r9
 80127ec:	6026      	str	r6, [r4, #0]
 80127ee:	60a5      	str	r5, [r4, #8]
 80127f0:	463e      	mov	r6, r7
 80127f2:	42be      	cmp	r6, r7
 80127f4:	d900      	bls.n	80127f8 <__ssputs_r+0x70>
 80127f6:	463e      	mov	r6, r7
 80127f8:	6820      	ldr	r0, [r4, #0]
 80127fa:	4632      	mov	r2, r6
 80127fc:	4641      	mov	r1, r8
 80127fe:	f000 fd45 	bl	801328c <memmove>
 8012802:	68a3      	ldr	r3, [r4, #8]
 8012804:	1b9b      	subs	r3, r3, r6
 8012806:	60a3      	str	r3, [r4, #8]
 8012808:	6823      	ldr	r3, [r4, #0]
 801280a:	4433      	add	r3, r6
 801280c:	6023      	str	r3, [r4, #0]
 801280e:	2000      	movs	r0, #0
 8012810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012814:	462a      	mov	r2, r5
 8012816:	f7ff fbdb 	bl	8011fd0 <_realloc_r>
 801281a:	4606      	mov	r6, r0
 801281c:	2800      	cmp	r0, #0
 801281e:	d1e0      	bne.n	80127e2 <__ssputs_r+0x5a>
 8012820:	6921      	ldr	r1, [r4, #16]
 8012822:	4650      	mov	r0, sl
 8012824:	f7ff ff5c 	bl	80126e0 <_free_r>
 8012828:	230c      	movs	r3, #12
 801282a:	f8ca 3000 	str.w	r3, [sl]
 801282e:	89a3      	ldrh	r3, [r4, #12]
 8012830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012834:	81a3      	strh	r3, [r4, #12]
 8012836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801283a:	e7e9      	b.n	8012810 <__ssputs_r+0x88>

0801283c <_svfiprintf_r>:
 801283c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012840:	4698      	mov	r8, r3
 8012842:	898b      	ldrh	r3, [r1, #12]
 8012844:	061b      	lsls	r3, r3, #24
 8012846:	b09d      	sub	sp, #116	; 0x74
 8012848:	4607      	mov	r7, r0
 801284a:	460d      	mov	r5, r1
 801284c:	4614      	mov	r4, r2
 801284e:	d50e      	bpl.n	801286e <_svfiprintf_r+0x32>
 8012850:	690b      	ldr	r3, [r1, #16]
 8012852:	b963      	cbnz	r3, 801286e <_svfiprintf_r+0x32>
 8012854:	2140      	movs	r1, #64	; 0x40
 8012856:	f7ff fabb 	bl	8011dd0 <_malloc_r>
 801285a:	6028      	str	r0, [r5, #0]
 801285c:	6128      	str	r0, [r5, #16]
 801285e:	b920      	cbnz	r0, 801286a <_svfiprintf_r+0x2e>
 8012860:	230c      	movs	r3, #12
 8012862:	603b      	str	r3, [r7, #0]
 8012864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012868:	e0d0      	b.n	8012a0c <_svfiprintf_r+0x1d0>
 801286a:	2340      	movs	r3, #64	; 0x40
 801286c:	616b      	str	r3, [r5, #20]
 801286e:	2300      	movs	r3, #0
 8012870:	9309      	str	r3, [sp, #36]	; 0x24
 8012872:	2320      	movs	r3, #32
 8012874:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012878:	f8cd 800c 	str.w	r8, [sp, #12]
 801287c:	2330      	movs	r3, #48	; 0x30
 801287e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012a24 <_svfiprintf_r+0x1e8>
 8012882:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012886:	f04f 0901 	mov.w	r9, #1
 801288a:	4623      	mov	r3, r4
 801288c:	469a      	mov	sl, r3
 801288e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012892:	b10a      	cbz	r2, 8012898 <_svfiprintf_r+0x5c>
 8012894:	2a25      	cmp	r2, #37	; 0x25
 8012896:	d1f9      	bne.n	801288c <_svfiprintf_r+0x50>
 8012898:	ebba 0b04 	subs.w	fp, sl, r4
 801289c:	d00b      	beq.n	80128b6 <_svfiprintf_r+0x7a>
 801289e:	465b      	mov	r3, fp
 80128a0:	4622      	mov	r2, r4
 80128a2:	4629      	mov	r1, r5
 80128a4:	4638      	mov	r0, r7
 80128a6:	f7ff ff6f 	bl	8012788 <__ssputs_r>
 80128aa:	3001      	adds	r0, #1
 80128ac:	f000 80a9 	beq.w	8012a02 <_svfiprintf_r+0x1c6>
 80128b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80128b2:	445a      	add	r2, fp
 80128b4:	9209      	str	r2, [sp, #36]	; 0x24
 80128b6:	f89a 3000 	ldrb.w	r3, [sl]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	f000 80a1 	beq.w	8012a02 <_svfiprintf_r+0x1c6>
 80128c0:	2300      	movs	r3, #0
 80128c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80128c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128ca:	f10a 0a01 	add.w	sl, sl, #1
 80128ce:	9304      	str	r3, [sp, #16]
 80128d0:	9307      	str	r3, [sp, #28]
 80128d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80128d6:	931a      	str	r3, [sp, #104]	; 0x68
 80128d8:	4654      	mov	r4, sl
 80128da:	2205      	movs	r2, #5
 80128dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128e0:	4850      	ldr	r0, [pc, #320]	; (8012a24 <_svfiprintf_r+0x1e8>)
 80128e2:	f7ed fc95 	bl	8000210 <memchr>
 80128e6:	9a04      	ldr	r2, [sp, #16]
 80128e8:	b9d8      	cbnz	r0, 8012922 <_svfiprintf_r+0xe6>
 80128ea:	06d0      	lsls	r0, r2, #27
 80128ec:	bf44      	itt	mi
 80128ee:	2320      	movmi	r3, #32
 80128f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128f4:	0711      	lsls	r1, r2, #28
 80128f6:	bf44      	itt	mi
 80128f8:	232b      	movmi	r3, #43	; 0x2b
 80128fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128fe:	f89a 3000 	ldrb.w	r3, [sl]
 8012902:	2b2a      	cmp	r3, #42	; 0x2a
 8012904:	d015      	beq.n	8012932 <_svfiprintf_r+0xf6>
 8012906:	9a07      	ldr	r2, [sp, #28]
 8012908:	4654      	mov	r4, sl
 801290a:	2000      	movs	r0, #0
 801290c:	f04f 0c0a 	mov.w	ip, #10
 8012910:	4621      	mov	r1, r4
 8012912:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012916:	3b30      	subs	r3, #48	; 0x30
 8012918:	2b09      	cmp	r3, #9
 801291a:	d94d      	bls.n	80129b8 <_svfiprintf_r+0x17c>
 801291c:	b1b0      	cbz	r0, 801294c <_svfiprintf_r+0x110>
 801291e:	9207      	str	r2, [sp, #28]
 8012920:	e014      	b.n	801294c <_svfiprintf_r+0x110>
 8012922:	eba0 0308 	sub.w	r3, r0, r8
 8012926:	fa09 f303 	lsl.w	r3, r9, r3
 801292a:	4313      	orrs	r3, r2
 801292c:	9304      	str	r3, [sp, #16]
 801292e:	46a2      	mov	sl, r4
 8012930:	e7d2      	b.n	80128d8 <_svfiprintf_r+0x9c>
 8012932:	9b03      	ldr	r3, [sp, #12]
 8012934:	1d19      	adds	r1, r3, #4
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	9103      	str	r1, [sp, #12]
 801293a:	2b00      	cmp	r3, #0
 801293c:	bfbb      	ittet	lt
 801293e:	425b      	neglt	r3, r3
 8012940:	f042 0202 	orrlt.w	r2, r2, #2
 8012944:	9307      	strge	r3, [sp, #28]
 8012946:	9307      	strlt	r3, [sp, #28]
 8012948:	bfb8      	it	lt
 801294a:	9204      	strlt	r2, [sp, #16]
 801294c:	7823      	ldrb	r3, [r4, #0]
 801294e:	2b2e      	cmp	r3, #46	; 0x2e
 8012950:	d10c      	bne.n	801296c <_svfiprintf_r+0x130>
 8012952:	7863      	ldrb	r3, [r4, #1]
 8012954:	2b2a      	cmp	r3, #42	; 0x2a
 8012956:	d134      	bne.n	80129c2 <_svfiprintf_r+0x186>
 8012958:	9b03      	ldr	r3, [sp, #12]
 801295a:	1d1a      	adds	r2, r3, #4
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	9203      	str	r2, [sp, #12]
 8012960:	2b00      	cmp	r3, #0
 8012962:	bfb8      	it	lt
 8012964:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012968:	3402      	adds	r4, #2
 801296a:	9305      	str	r3, [sp, #20]
 801296c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012a34 <_svfiprintf_r+0x1f8>
 8012970:	7821      	ldrb	r1, [r4, #0]
 8012972:	2203      	movs	r2, #3
 8012974:	4650      	mov	r0, sl
 8012976:	f7ed fc4b 	bl	8000210 <memchr>
 801297a:	b138      	cbz	r0, 801298c <_svfiprintf_r+0x150>
 801297c:	9b04      	ldr	r3, [sp, #16]
 801297e:	eba0 000a 	sub.w	r0, r0, sl
 8012982:	2240      	movs	r2, #64	; 0x40
 8012984:	4082      	lsls	r2, r0
 8012986:	4313      	orrs	r3, r2
 8012988:	3401      	adds	r4, #1
 801298a:	9304      	str	r3, [sp, #16]
 801298c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012990:	4825      	ldr	r0, [pc, #148]	; (8012a28 <_svfiprintf_r+0x1ec>)
 8012992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012996:	2206      	movs	r2, #6
 8012998:	f7ed fc3a 	bl	8000210 <memchr>
 801299c:	2800      	cmp	r0, #0
 801299e:	d038      	beq.n	8012a12 <_svfiprintf_r+0x1d6>
 80129a0:	4b22      	ldr	r3, [pc, #136]	; (8012a2c <_svfiprintf_r+0x1f0>)
 80129a2:	bb1b      	cbnz	r3, 80129ec <_svfiprintf_r+0x1b0>
 80129a4:	9b03      	ldr	r3, [sp, #12]
 80129a6:	3307      	adds	r3, #7
 80129a8:	f023 0307 	bic.w	r3, r3, #7
 80129ac:	3308      	adds	r3, #8
 80129ae:	9303      	str	r3, [sp, #12]
 80129b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129b2:	4433      	add	r3, r6
 80129b4:	9309      	str	r3, [sp, #36]	; 0x24
 80129b6:	e768      	b.n	801288a <_svfiprintf_r+0x4e>
 80129b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80129bc:	460c      	mov	r4, r1
 80129be:	2001      	movs	r0, #1
 80129c0:	e7a6      	b.n	8012910 <_svfiprintf_r+0xd4>
 80129c2:	2300      	movs	r3, #0
 80129c4:	3401      	adds	r4, #1
 80129c6:	9305      	str	r3, [sp, #20]
 80129c8:	4619      	mov	r1, r3
 80129ca:	f04f 0c0a 	mov.w	ip, #10
 80129ce:	4620      	mov	r0, r4
 80129d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129d4:	3a30      	subs	r2, #48	; 0x30
 80129d6:	2a09      	cmp	r2, #9
 80129d8:	d903      	bls.n	80129e2 <_svfiprintf_r+0x1a6>
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d0c6      	beq.n	801296c <_svfiprintf_r+0x130>
 80129de:	9105      	str	r1, [sp, #20]
 80129e0:	e7c4      	b.n	801296c <_svfiprintf_r+0x130>
 80129e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80129e6:	4604      	mov	r4, r0
 80129e8:	2301      	movs	r3, #1
 80129ea:	e7f0      	b.n	80129ce <_svfiprintf_r+0x192>
 80129ec:	ab03      	add	r3, sp, #12
 80129ee:	9300      	str	r3, [sp, #0]
 80129f0:	462a      	mov	r2, r5
 80129f2:	4b0f      	ldr	r3, [pc, #60]	; (8012a30 <_svfiprintf_r+0x1f4>)
 80129f4:	a904      	add	r1, sp, #16
 80129f6:	4638      	mov	r0, r7
 80129f8:	f3af 8000 	nop.w
 80129fc:	1c42      	adds	r2, r0, #1
 80129fe:	4606      	mov	r6, r0
 8012a00:	d1d6      	bne.n	80129b0 <_svfiprintf_r+0x174>
 8012a02:	89ab      	ldrh	r3, [r5, #12]
 8012a04:	065b      	lsls	r3, r3, #25
 8012a06:	f53f af2d 	bmi.w	8012864 <_svfiprintf_r+0x28>
 8012a0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a0c:	b01d      	add	sp, #116	; 0x74
 8012a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a12:	ab03      	add	r3, sp, #12
 8012a14:	9300      	str	r3, [sp, #0]
 8012a16:	462a      	mov	r2, r5
 8012a18:	4b05      	ldr	r3, [pc, #20]	; (8012a30 <_svfiprintf_r+0x1f4>)
 8012a1a:	a904      	add	r1, sp, #16
 8012a1c:	4638      	mov	r0, r7
 8012a1e:	f000 f9bd 	bl	8012d9c <_printf_i>
 8012a22:	e7eb      	b.n	80129fc <_svfiprintf_r+0x1c0>
 8012a24:	08014030 	.word	0x08014030
 8012a28:	0801403a 	.word	0x0801403a
 8012a2c:	00000000 	.word	0x00000000
 8012a30:	08012789 	.word	0x08012789
 8012a34:	08014036 	.word	0x08014036

08012a38 <__sfputc_r>:
 8012a38:	6893      	ldr	r3, [r2, #8]
 8012a3a:	3b01      	subs	r3, #1
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	b410      	push	{r4}
 8012a40:	6093      	str	r3, [r2, #8]
 8012a42:	da08      	bge.n	8012a56 <__sfputc_r+0x1e>
 8012a44:	6994      	ldr	r4, [r2, #24]
 8012a46:	42a3      	cmp	r3, r4
 8012a48:	db01      	blt.n	8012a4e <__sfputc_r+0x16>
 8012a4a:	290a      	cmp	r1, #10
 8012a4c:	d103      	bne.n	8012a56 <__sfputc_r+0x1e>
 8012a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a52:	f000 bb85 	b.w	8013160 <__swbuf_r>
 8012a56:	6813      	ldr	r3, [r2, #0]
 8012a58:	1c58      	adds	r0, r3, #1
 8012a5a:	6010      	str	r0, [r2, #0]
 8012a5c:	7019      	strb	r1, [r3, #0]
 8012a5e:	4608      	mov	r0, r1
 8012a60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a64:	4770      	bx	lr

08012a66 <__sfputs_r>:
 8012a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a68:	4606      	mov	r6, r0
 8012a6a:	460f      	mov	r7, r1
 8012a6c:	4614      	mov	r4, r2
 8012a6e:	18d5      	adds	r5, r2, r3
 8012a70:	42ac      	cmp	r4, r5
 8012a72:	d101      	bne.n	8012a78 <__sfputs_r+0x12>
 8012a74:	2000      	movs	r0, #0
 8012a76:	e007      	b.n	8012a88 <__sfputs_r+0x22>
 8012a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a7c:	463a      	mov	r2, r7
 8012a7e:	4630      	mov	r0, r6
 8012a80:	f7ff ffda 	bl	8012a38 <__sfputc_r>
 8012a84:	1c43      	adds	r3, r0, #1
 8012a86:	d1f3      	bne.n	8012a70 <__sfputs_r+0xa>
 8012a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012a8c <_vfiprintf_r>:
 8012a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a90:	460d      	mov	r5, r1
 8012a92:	b09d      	sub	sp, #116	; 0x74
 8012a94:	4614      	mov	r4, r2
 8012a96:	4698      	mov	r8, r3
 8012a98:	4606      	mov	r6, r0
 8012a9a:	b118      	cbz	r0, 8012aa4 <_vfiprintf_r+0x18>
 8012a9c:	6a03      	ldr	r3, [r0, #32]
 8012a9e:	b90b      	cbnz	r3, 8012aa4 <_vfiprintf_r+0x18>
 8012aa0:	f7ff fbce 	bl	8012240 <__sinit>
 8012aa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012aa6:	07d9      	lsls	r1, r3, #31
 8012aa8:	d405      	bmi.n	8012ab6 <_vfiprintf_r+0x2a>
 8012aaa:	89ab      	ldrh	r3, [r5, #12]
 8012aac:	059a      	lsls	r2, r3, #22
 8012aae:	d402      	bmi.n	8012ab6 <_vfiprintf_r+0x2a>
 8012ab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ab2:	f7ff fdd2 	bl	801265a <__retarget_lock_acquire_recursive>
 8012ab6:	89ab      	ldrh	r3, [r5, #12]
 8012ab8:	071b      	lsls	r3, r3, #28
 8012aba:	d501      	bpl.n	8012ac0 <_vfiprintf_r+0x34>
 8012abc:	692b      	ldr	r3, [r5, #16]
 8012abe:	b99b      	cbnz	r3, 8012ae8 <_vfiprintf_r+0x5c>
 8012ac0:	4629      	mov	r1, r5
 8012ac2:	4630      	mov	r0, r6
 8012ac4:	f000 fb8a 	bl	80131dc <__swsetup_r>
 8012ac8:	b170      	cbz	r0, 8012ae8 <_vfiprintf_r+0x5c>
 8012aca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012acc:	07dc      	lsls	r4, r3, #31
 8012ace:	d504      	bpl.n	8012ada <_vfiprintf_r+0x4e>
 8012ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ad4:	b01d      	add	sp, #116	; 0x74
 8012ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ada:	89ab      	ldrh	r3, [r5, #12]
 8012adc:	0598      	lsls	r0, r3, #22
 8012ade:	d4f7      	bmi.n	8012ad0 <_vfiprintf_r+0x44>
 8012ae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ae2:	f7ff fdbb 	bl	801265c <__retarget_lock_release_recursive>
 8012ae6:	e7f3      	b.n	8012ad0 <_vfiprintf_r+0x44>
 8012ae8:	2300      	movs	r3, #0
 8012aea:	9309      	str	r3, [sp, #36]	; 0x24
 8012aec:	2320      	movs	r3, #32
 8012aee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012af2:	f8cd 800c 	str.w	r8, [sp, #12]
 8012af6:	2330      	movs	r3, #48	; 0x30
 8012af8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012cac <_vfiprintf_r+0x220>
 8012afc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b00:	f04f 0901 	mov.w	r9, #1
 8012b04:	4623      	mov	r3, r4
 8012b06:	469a      	mov	sl, r3
 8012b08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b0c:	b10a      	cbz	r2, 8012b12 <_vfiprintf_r+0x86>
 8012b0e:	2a25      	cmp	r2, #37	; 0x25
 8012b10:	d1f9      	bne.n	8012b06 <_vfiprintf_r+0x7a>
 8012b12:	ebba 0b04 	subs.w	fp, sl, r4
 8012b16:	d00b      	beq.n	8012b30 <_vfiprintf_r+0xa4>
 8012b18:	465b      	mov	r3, fp
 8012b1a:	4622      	mov	r2, r4
 8012b1c:	4629      	mov	r1, r5
 8012b1e:	4630      	mov	r0, r6
 8012b20:	f7ff ffa1 	bl	8012a66 <__sfputs_r>
 8012b24:	3001      	adds	r0, #1
 8012b26:	f000 80a9 	beq.w	8012c7c <_vfiprintf_r+0x1f0>
 8012b2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b2c:	445a      	add	r2, fp
 8012b2e:	9209      	str	r2, [sp, #36]	; 0x24
 8012b30:	f89a 3000 	ldrb.w	r3, [sl]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	f000 80a1 	beq.w	8012c7c <_vfiprintf_r+0x1f0>
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012b40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b44:	f10a 0a01 	add.w	sl, sl, #1
 8012b48:	9304      	str	r3, [sp, #16]
 8012b4a:	9307      	str	r3, [sp, #28]
 8012b4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b50:	931a      	str	r3, [sp, #104]	; 0x68
 8012b52:	4654      	mov	r4, sl
 8012b54:	2205      	movs	r2, #5
 8012b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b5a:	4854      	ldr	r0, [pc, #336]	; (8012cac <_vfiprintf_r+0x220>)
 8012b5c:	f7ed fb58 	bl	8000210 <memchr>
 8012b60:	9a04      	ldr	r2, [sp, #16]
 8012b62:	b9d8      	cbnz	r0, 8012b9c <_vfiprintf_r+0x110>
 8012b64:	06d1      	lsls	r1, r2, #27
 8012b66:	bf44      	itt	mi
 8012b68:	2320      	movmi	r3, #32
 8012b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b6e:	0713      	lsls	r3, r2, #28
 8012b70:	bf44      	itt	mi
 8012b72:	232b      	movmi	r3, #43	; 0x2b
 8012b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b78:	f89a 3000 	ldrb.w	r3, [sl]
 8012b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8012b7e:	d015      	beq.n	8012bac <_vfiprintf_r+0x120>
 8012b80:	9a07      	ldr	r2, [sp, #28]
 8012b82:	4654      	mov	r4, sl
 8012b84:	2000      	movs	r0, #0
 8012b86:	f04f 0c0a 	mov.w	ip, #10
 8012b8a:	4621      	mov	r1, r4
 8012b8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b90:	3b30      	subs	r3, #48	; 0x30
 8012b92:	2b09      	cmp	r3, #9
 8012b94:	d94d      	bls.n	8012c32 <_vfiprintf_r+0x1a6>
 8012b96:	b1b0      	cbz	r0, 8012bc6 <_vfiprintf_r+0x13a>
 8012b98:	9207      	str	r2, [sp, #28]
 8012b9a:	e014      	b.n	8012bc6 <_vfiprintf_r+0x13a>
 8012b9c:	eba0 0308 	sub.w	r3, r0, r8
 8012ba0:	fa09 f303 	lsl.w	r3, r9, r3
 8012ba4:	4313      	orrs	r3, r2
 8012ba6:	9304      	str	r3, [sp, #16]
 8012ba8:	46a2      	mov	sl, r4
 8012baa:	e7d2      	b.n	8012b52 <_vfiprintf_r+0xc6>
 8012bac:	9b03      	ldr	r3, [sp, #12]
 8012bae:	1d19      	adds	r1, r3, #4
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	9103      	str	r1, [sp, #12]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	bfbb      	ittet	lt
 8012bb8:	425b      	neglt	r3, r3
 8012bba:	f042 0202 	orrlt.w	r2, r2, #2
 8012bbe:	9307      	strge	r3, [sp, #28]
 8012bc0:	9307      	strlt	r3, [sp, #28]
 8012bc2:	bfb8      	it	lt
 8012bc4:	9204      	strlt	r2, [sp, #16]
 8012bc6:	7823      	ldrb	r3, [r4, #0]
 8012bc8:	2b2e      	cmp	r3, #46	; 0x2e
 8012bca:	d10c      	bne.n	8012be6 <_vfiprintf_r+0x15a>
 8012bcc:	7863      	ldrb	r3, [r4, #1]
 8012bce:	2b2a      	cmp	r3, #42	; 0x2a
 8012bd0:	d134      	bne.n	8012c3c <_vfiprintf_r+0x1b0>
 8012bd2:	9b03      	ldr	r3, [sp, #12]
 8012bd4:	1d1a      	adds	r2, r3, #4
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	9203      	str	r2, [sp, #12]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	bfb8      	it	lt
 8012bde:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012be2:	3402      	adds	r4, #2
 8012be4:	9305      	str	r3, [sp, #20]
 8012be6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012cbc <_vfiprintf_r+0x230>
 8012bea:	7821      	ldrb	r1, [r4, #0]
 8012bec:	2203      	movs	r2, #3
 8012bee:	4650      	mov	r0, sl
 8012bf0:	f7ed fb0e 	bl	8000210 <memchr>
 8012bf4:	b138      	cbz	r0, 8012c06 <_vfiprintf_r+0x17a>
 8012bf6:	9b04      	ldr	r3, [sp, #16]
 8012bf8:	eba0 000a 	sub.w	r0, r0, sl
 8012bfc:	2240      	movs	r2, #64	; 0x40
 8012bfe:	4082      	lsls	r2, r0
 8012c00:	4313      	orrs	r3, r2
 8012c02:	3401      	adds	r4, #1
 8012c04:	9304      	str	r3, [sp, #16]
 8012c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c0a:	4829      	ldr	r0, [pc, #164]	; (8012cb0 <_vfiprintf_r+0x224>)
 8012c0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c10:	2206      	movs	r2, #6
 8012c12:	f7ed fafd 	bl	8000210 <memchr>
 8012c16:	2800      	cmp	r0, #0
 8012c18:	d03f      	beq.n	8012c9a <_vfiprintf_r+0x20e>
 8012c1a:	4b26      	ldr	r3, [pc, #152]	; (8012cb4 <_vfiprintf_r+0x228>)
 8012c1c:	bb1b      	cbnz	r3, 8012c66 <_vfiprintf_r+0x1da>
 8012c1e:	9b03      	ldr	r3, [sp, #12]
 8012c20:	3307      	adds	r3, #7
 8012c22:	f023 0307 	bic.w	r3, r3, #7
 8012c26:	3308      	adds	r3, #8
 8012c28:	9303      	str	r3, [sp, #12]
 8012c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c2c:	443b      	add	r3, r7
 8012c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8012c30:	e768      	b.n	8012b04 <_vfiprintf_r+0x78>
 8012c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c36:	460c      	mov	r4, r1
 8012c38:	2001      	movs	r0, #1
 8012c3a:	e7a6      	b.n	8012b8a <_vfiprintf_r+0xfe>
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	3401      	adds	r4, #1
 8012c40:	9305      	str	r3, [sp, #20]
 8012c42:	4619      	mov	r1, r3
 8012c44:	f04f 0c0a 	mov.w	ip, #10
 8012c48:	4620      	mov	r0, r4
 8012c4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c4e:	3a30      	subs	r2, #48	; 0x30
 8012c50:	2a09      	cmp	r2, #9
 8012c52:	d903      	bls.n	8012c5c <_vfiprintf_r+0x1d0>
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d0c6      	beq.n	8012be6 <_vfiprintf_r+0x15a>
 8012c58:	9105      	str	r1, [sp, #20]
 8012c5a:	e7c4      	b.n	8012be6 <_vfiprintf_r+0x15a>
 8012c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c60:	4604      	mov	r4, r0
 8012c62:	2301      	movs	r3, #1
 8012c64:	e7f0      	b.n	8012c48 <_vfiprintf_r+0x1bc>
 8012c66:	ab03      	add	r3, sp, #12
 8012c68:	9300      	str	r3, [sp, #0]
 8012c6a:	462a      	mov	r2, r5
 8012c6c:	4b12      	ldr	r3, [pc, #72]	; (8012cb8 <_vfiprintf_r+0x22c>)
 8012c6e:	a904      	add	r1, sp, #16
 8012c70:	4630      	mov	r0, r6
 8012c72:	f3af 8000 	nop.w
 8012c76:	4607      	mov	r7, r0
 8012c78:	1c78      	adds	r0, r7, #1
 8012c7a:	d1d6      	bne.n	8012c2a <_vfiprintf_r+0x19e>
 8012c7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c7e:	07d9      	lsls	r1, r3, #31
 8012c80:	d405      	bmi.n	8012c8e <_vfiprintf_r+0x202>
 8012c82:	89ab      	ldrh	r3, [r5, #12]
 8012c84:	059a      	lsls	r2, r3, #22
 8012c86:	d402      	bmi.n	8012c8e <_vfiprintf_r+0x202>
 8012c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c8a:	f7ff fce7 	bl	801265c <__retarget_lock_release_recursive>
 8012c8e:	89ab      	ldrh	r3, [r5, #12]
 8012c90:	065b      	lsls	r3, r3, #25
 8012c92:	f53f af1d 	bmi.w	8012ad0 <_vfiprintf_r+0x44>
 8012c96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c98:	e71c      	b.n	8012ad4 <_vfiprintf_r+0x48>
 8012c9a:	ab03      	add	r3, sp, #12
 8012c9c:	9300      	str	r3, [sp, #0]
 8012c9e:	462a      	mov	r2, r5
 8012ca0:	4b05      	ldr	r3, [pc, #20]	; (8012cb8 <_vfiprintf_r+0x22c>)
 8012ca2:	a904      	add	r1, sp, #16
 8012ca4:	4630      	mov	r0, r6
 8012ca6:	f000 f879 	bl	8012d9c <_printf_i>
 8012caa:	e7e4      	b.n	8012c76 <_vfiprintf_r+0x1ea>
 8012cac:	08014030 	.word	0x08014030
 8012cb0:	0801403a 	.word	0x0801403a
 8012cb4:	00000000 	.word	0x00000000
 8012cb8:	08012a67 	.word	0x08012a67
 8012cbc:	08014036 	.word	0x08014036

08012cc0 <_printf_common>:
 8012cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cc4:	4616      	mov	r6, r2
 8012cc6:	4699      	mov	r9, r3
 8012cc8:	688a      	ldr	r2, [r1, #8]
 8012cca:	690b      	ldr	r3, [r1, #16]
 8012ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012cd0:	4293      	cmp	r3, r2
 8012cd2:	bfb8      	it	lt
 8012cd4:	4613      	movlt	r3, r2
 8012cd6:	6033      	str	r3, [r6, #0]
 8012cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012cdc:	4607      	mov	r7, r0
 8012cde:	460c      	mov	r4, r1
 8012ce0:	b10a      	cbz	r2, 8012ce6 <_printf_common+0x26>
 8012ce2:	3301      	adds	r3, #1
 8012ce4:	6033      	str	r3, [r6, #0]
 8012ce6:	6823      	ldr	r3, [r4, #0]
 8012ce8:	0699      	lsls	r1, r3, #26
 8012cea:	bf42      	ittt	mi
 8012cec:	6833      	ldrmi	r3, [r6, #0]
 8012cee:	3302      	addmi	r3, #2
 8012cf0:	6033      	strmi	r3, [r6, #0]
 8012cf2:	6825      	ldr	r5, [r4, #0]
 8012cf4:	f015 0506 	ands.w	r5, r5, #6
 8012cf8:	d106      	bne.n	8012d08 <_printf_common+0x48>
 8012cfa:	f104 0a19 	add.w	sl, r4, #25
 8012cfe:	68e3      	ldr	r3, [r4, #12]
 8012d00:	6832      	ldr	r2, [r6, #0]
 8012d02:	1a9b      	subs	r3, r3, r2
 8012d04:	42ab      	cmp	r3, r5
 8012d06:	dc26      	bgt.n	8012d56 <_printf_common+0x96>
 8012d08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012d0c:	1e13      	subs	r3, r2, #0
 8012d0e:	6822      	ldr	r2, [r4, #0]
 8012d10:	bf18      	it	ne
 8012d12:	2301      	movne	r3, #1
 8012d14:	0692      	lsls	r2, r2, #26
 8012d16:	d42b      	bmi.n	8012d70 <_printf_common+0xb0>
 8012d18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012d1c:	4649      	mov	r1, r9
 8012d1e:	4638      	mov	r0, r7
 8012d20:	47c0      	blx	r8
 8012d22:	3001      	adds	r0, #1
 8012d24:	d01e      	beq.n	8012d64 <_printf_common+0xa4>
 8012d26:	6823      	ldr	r3, [r4, #0]
 8012d28:	6922      	ldr	r2, [r4, #16]
 8012d2a:	f003 0306 	and.w	r3, r3, #6
 8012d2e:	2b04      	cmp	r3, #4
 8012d30:	bf02      	ittt	eq
 8012d32:	68e5      	ldreq	r5, [r4, #12]
 8012d34:	6833      	ldreq	r3, [r6, #0]
 8012d36:	1aed      	subeq	r5, r5, r3
 8012d38:	68a3      	ldr	r3, [r4, #8]
 8012d3a:	bf0c      	ite	eq
 8012d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012d40:	2500      	movne	r5, #0
 8012d42:	4293      	cmp	r3, r2
 8012d44:	bfc4      	itt	gt
 8012d46:	1a9b      	subgt	r3, r3, r2
 8012d48:	18ed      	addgt	r5, r5, r3
 8012d4a:	2600      	movs	r6, #0
 8012d4c:	341a      	adds	r4, #26
 8012d4e:	42b5      	cmp	r5, r6
 8012d50:	d11a      	bne.n	8012d88 <_printf_common+0xc8>
 8012d52:	2000      	movs	r0, #0
 8012d54:	e008      	b.n	8012d68 <_printf_common+0xa8>
 8012d56:	2301      	movs	r3, #1
 8012d58:	4652      	mov	r2, sl
 8012d5a:	4649      	mov	r1, r9
 8012d5c:	4638      	mov	r0, r7
 8012d5e:	47c0      	blx	r8
 8012d60:	3001      	adds	r0, #1
 8012d62:	d103      	bne.n	8012d6c <_printf_common+0xac>
 8012d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d6c:	3501      	adds	r5, #1
 8012d6e:	e7c6      	b.n	8012cfe <_printf_common+0x3e>
 8012d70:	18e1      	adds	r1, r4, r3
 8012d72:	1c5a      	adds	r2, r3, #1
 8012d74:	2030      	movs	r0, #48	; 0x30
 8012d76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012d7a:	4422      	add	r2, r4
 8012d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012d80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012d84:	3302      	adds	r3, #2
 8012d86:	e7c7      	b.n	8012d18 <_printf_common+0x58>
 8012d88:	2301      	movs	r3, #1
 8012d8a:	4622      	mov	r2, r4
 8012d8c:	4649      	mov	r1, r9
 8012d8e:	4638      	mov	r0, r7
 8012d90:	47c0      	blx	r8
 8012d92:	3001      	adds	r0, #1
 8012d94:	d0e6      	beq.n	8012d64 <_printf_common+0xa4>
 8012d96:	3601      	adds	r6, #1
 8012d98:	e7d9      	b.n	8012d4e <_printf_common+0x8e>
	...

08012d9c <_printf_i>:
 8012d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012da0:	7e0f      	ldrb	r7, [r1, #24]
 8012da2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012da4:	2f78      	cmp	r7, #120	; 0x78
 8012da6:	4691      	mov	r9, r2
 8012da8:	4680      	mov	r8, r0
 8012daa:	460c      	mov	r4, r1
 8012dac:	469a      	mov	sl, r3
 8012dae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012db2:	d807      	bhi.n	8012dc4 <_printf_i+0x28>
 8012db4:	2f62      	cmp	r7, #98	; 0x62
 8012db6:	d80a      	bhi.n	8012dce <_printf_i+0x32>
 8012db8:	2f00      	cmp	r7, #0
 8012dba:	f000 80d4 	beq.w	8012f66 <_printf_i+0x1ca>
 8012dbe:	2f58      	cmp	r7, #88	; 0x58
 8012dc0:	f000 80c0 	beq.w	8012f44 <_printf_i+0x1a8>
 8012dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012dc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012dcc:	e03a      	b.n	8012e44 <_printf_i+0xa8>
 8012dce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012dd2:	2b15      	cmp	r3, #21
 8012dd4:	d8f6      	bhi.n	8012dc4 <_printf_i+0x28>
 8012dd6:	a101      	add	r1, pc, #4	; (adr r1, 8012ddc <_printf_i+0x40>)
 8012dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ddc:	08012e35 	.word	0x08012e35
 8012de0:	08012e49 	.word	0x08012e49
 8012de4:	08012dc5 	.word	0x08012dc5
 8012de8:	08012dc5 	.word	0x08012dc5
 8012dec:	08012dc5 	.word	0x08012dc5
 8012df0:	08012dc5 	.word	0x08012dc5
 8012df4:	08012e49 	.word	0x08012e49
 8012df8:	08012dc5 	.word	0x08012dc5
 8012dfc:	08012dc5 	.word	0x08012dc5
 8012e00:	08012dc5 	.word	0x08012dc5
 8012e04:	08012dc5 	.word	0x08012dc5
 8012e08:	08012f4d 	.word	0x08012f4d
 8012e0c:	08012e75 	.word	0x08012e75
 8012e10:	08012f07 	.word	0x08012f07
 8012e14:	08012dc5 	.word	0x08012dc5
 8012e18:	08012dc5 	.word	0x08012dc5
 8012e1c:	08012f6f 	.word	0x08012f6f
 8012e20:	08012dc5 	.word	0x08012dc5
 8012e24:	08012e75 	.word	0x08012e75
 8012e28:	08012dc5 	.word	0x08012dc5
 8012e2c:	08012dc5 	.word	0x08012dc5
 8012e30:	08012f0f 	.word	0x08012f0f
 8012e34:	682b      	ldr	r3, [r5, #0]
 8012e36:	1d1a      	adds	r2, r3, #4
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	602a      	str	r2, [r5, #0]
 8012e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012e44:	2301      	movs	r3, #1
 8012e46:	e09f      	b.n	8012f88 <_printf_i+0x1ec>
 8012e48:	6820      	ldr	r0, [r4, #0]
 8012e4a:	682b      	ldr	r3, [r5, #0]
 8012e4c:	0607      	lsls	r7, r0, #24
 8012e4e:	f103 0104 	add.w	r1, r3, #4
 8012e52:	6029      	str	r1, [r5, #0]
 8012e54:	d501      	bpl.n	8012e5a <_printf_i+0xbe>
 8012e56:	681e      	ldr	r6, [r3, #0]
 8012e58:	e003      	b.n	8012e62 <_printf_i+0xc6>
 8012e5a:	0646      	lsls	r6, r0, #25
 8012e5c:	d5fb      	bpl.n	8012e56 <_printf_i+0xba>
 8012e5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012e62:	2e00      	cmp	r6, #0
 8012e64:	da03      	bge.n	8012e6e <_printf_i+0xd2>
 8012e66:	232d      	movs	r3, #45	; 0x2d
 8012e68:	4276      	negs	r6, r6
 8012e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e6e:	485a      	ldr	r0, [pc, #360]	; (8012fd8 <_printf_i+0x23c>)
 8012e70:	230a      	movs	r3, #10
 8012e72:	e012      	b.n	8012e9a <_printf_i+0xfe>
 8012e74:	682b      	ldr	r3, [r5, #0]
 8012e76:	6820      	ldr	r0, [r4, #0]
 8012e78:	1d19      	adds	r1, r3, #4
 8012e7a:	6029      	str	r1, [r5, #0]
 8012e7c:	0605      	lsls	r5, r0, #24
 8012e7e:	d501      	bpl.n	8012e84 <_printf_i+0xe8>
 8012e80:	681e      	ldr	r6, [r3, #0]
 8012e82:	e002      	b.n	8012e8a <_printf_i+0xee>
 8012e84:	0641      	lsls	r1, r0, #25
 8012e86:	d5fb      	bpl.n	8012e80 <_printf_i+0xe4>
 8012e88:	881e      	ldrh	r6, [r3, #0]
 8012e8a:	4853      	ldr	r0, [pc, #332]	; (8012fd8 <_printf_i+0x23c>)
 8012e8c:	2f6f      	cmp	r7, #111	; 0x6f
 8012e8e:	bf0c      	ite	eq
 8012e90:	2308      	moveq	r3, #8
 8012e92:	230a      	movne	r3, #10
 8012e94:	2100      	movs	r1, #0
 8012e96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012e9a:	6865      	ldr	r5, [r4, #4]
 8012e9c:	60a5      	str	r5, [r4, #8]
 8012e9e:	2d00      	cmp	r5, #0
 8012ea0:	bfa2      	ittt	ge
 8012ea2:	6821      	ldrge	r1, [r4, #0]
 8012ea4:	f021 0104 	bicge.w	r1, r1, #4
 8012ea8:	6021      	strge	r1, [r4, #0]
 8012eaa:	b90e      	cbnz	r6, 8012eb0 <_printf_i+0x114>
 8012eac:	2d00      	cmp	r5, #0
 8012eae:	d04b      	beq.n	8012f48 <_printf_i+0x1ac>
 8012eb0:	4615      	mov	r5, r2
 8012eb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8012eb6:	fb03 6711 	mls	r7, r3, r1, r6
 8012eba:	5dc7      	ldrb	r7, [r0, r7]
 8012ebc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012ec0:	4637      	mov	r7, r6
 8012ec2:	42bb      	cmp	r3, r7
 8012ec4:	460e      	mov	r6, r1
 8012ec6:	d9f4      	bls.n	8012eb2 <_printf_i+0x116>
 8012ec8:	2b08      	cmp	r3, #8
 8012eca:	d10b      	bne.n	8012ee4 <_printf_i+0x148>
 8012ecc:	6823      	ldr	r3, [r4, #0]
 8012ece:	07de      	lsls	r6, r3, #31
 8012ed0:	d508      	bpl.n	8012ee4 <_printf_i+0x148>
 8012ed2:	6923      	ldr	r3, [r4, #16]
 8012ed4:	6861      	ldr	r1, [r4, #4]
 8012ed6:	4299      	cmp	r1, r3
 8012ed8:	bfde      	ittt	le
 8012eda:	2330      	movle	r3, #48	; 0x30
 8012edc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012ee0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012ee4:	1b52      	subs	r2, r2, r5
 8012ee6:	6122      	str	r2, [r4, #16]
 8012ee8:	f8cd a000 	str.w	sl, [sp]
 8012eec:	464b      	mov	r3, r9
 8012eee:	aa03      	add	r2, sp, #12
 8012ef0:	4621      	mov	r1, r4
 8012ef2:	4640      	mov	r0, r8
 8012ef4:	f7ff fee4 	bl	8012cc0 <_printf_common>
 8012ef8:	3001      	adds	r0, #1
 8012efa:	d14a      	bne.n	8012f92 <_printf_i+0x1f6>
 8012efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f00:	b004      	add	sp, #16
 8012f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f06:	6823      	ldr	r3, [r4, #0]
 8012f08:	f043 0320 	orr.w	r3, r3, #32
 8012f0c:	6023      	str	r3, [r4, #0]
 8012f0e:	4833      	ldr	r0, [pc, #204]	; (8012fdc <_printf_i+0x240>)
 8012f10:	2778      	movs	r7, #120	; 0x78
 8012f12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012f16:	6823      	ldr	r3, [r4, #0]
 8012f18:	6829      	ldr	r1, [r5, #0]
 8012f1a:	061f      	lsls	r7, r3, #24
 8012f1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8012f20:	d402      	bmi.n	8012f28 <_printf_i+0x18c>
 8012f22:	065f      	lsls	r7, r3, #25
 8012f24:	bf48      	it	mi
 8012f26:	b2b6      	uxthmi	r6, r6
 8012f28:	07df      	lsls	r7, r3, #31
 8012f2a:	bf48      	it	mi
 8012f2c:	f043 0320 	orrmi.w	r3, r3, #32
 8012f30:	6029      	str	r1, [r5, #0]
 8012f32:	bf48      	it	mi
 8012f34:	6023      	strmi	r3, [r4, #0]
 8012f36:	b91e      	cbnz	r6, 8012f40 <_printf_i+0x1a4>
 8012f38:	6823      	ldr	r3, [r4, #0]
 8012f3a:	f023 0320 	bic.w	r3, r3, #32
 8012f3e:	6023      	str	r3, [r4, #0]
 8012f40:	2310      	movs	r3, #16
 8012f42:	e7a7      	b.n	8012e94 <_printf_i+0xf8>
 8012f44:	4824      	ldr	r0, [pc, #144]	; (8012fd8 <_printf_i+0x23c>)
 8012f46:	e7e4      	b.n	8012f12 <_printf_i+0x176>
 8012f48:	4615      	mov	r5, r2
 8012f4a:	e7bd      	b.n	8012ec8 <_printf_i+0x12c>
 8012f4c:	682b      	ldr	r3, [r5, #0]
 8012f4e:	6826      	ldr	r6, [r4, #0]
 8012f50:	6961      	ldr	r1, [r4, #20]
 8012f52:	1d18      	adds	r0, r3, #4
 8012f54:	6028      	str	r0, [r5, #0]
 8012f56:	0635      	lsls	r5, r6, #24
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	d501      	bpl.n	8012f60 <_printf_i+0x1c4>
 8012f5c:	6019      	str	r1, [r3, #0]
 8012f5e:	e002      	b.n	8012f66 <_printf_i+0x1ca>
 8012f60:	0670      	lsls	r0, r6, #25
 8012f62:	d5fb      	bpl.n	8012f5c <_printf_i+0x1c0>
 8012f64:	8019      	strh	r1, [r3, #0]
 8012f66:	2300      	movs	r3, #0
 8012f68:	6123      	str	r3, [r4, #16]
 8012f6a:	4615      	mov	r5, r2
 8012f6c:	e7bc      	b.n	8012ee8 <_printf_i+0x14c>
 8012f6e:	682b      	ldr	r3, [r5, #0]
 8012f70:	1d1a      	adds	r2, r3, #4
 8012f72:	602a      	str	r2, [r5, #0]
 8012f74:	681d      	ldr	r5, [r3, #0]
 8012f76:	6862      	ldr	r2, [r4, #4]
 8012f78:	2100      	movs	r1, #0
 8012f7a:	4628      	mov	r0, r5
 8012f7c:	f7ed f948 	bl	8000210 <memchr>
 8012f80:	b108      	cbz	r0, 8012f86 <_printf_i+0x1ea>
 8012f82:	1b40      	subs	r0, r0, r5
 8012f84:	6060      	str	r0, [r4, #4]
 8012f86:	6863      	ldr	r3, [r4, #4]
 8012f88:	6123      	str	r3, [r4, #16]
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f90:	e7aa      	b.n	8012ee8 <_printf_i+0x14c>
 8012f92:	6923      	ldr	r3, [r4, #16]
 8012f94:	462a      	mov	r2, r5
 8012f96:	4649      	mov	r1, r9
 8012f98:	4640      	mov	r0, r8
 8012f9a:	47d0      	blx	sl
 8012f9c:	3001      	adds	r0, #1
 8012f9e:	d0ad      	beq.n	8012efc <_printf_i+0x160>
 8012fa0:	6823      	ldr	r3, [r4, #0]
 8012fa2:	079b      	lsls	r3, r3, #30
 8012fa4:	d413      	bmi.n	8012fce <_printf_i+0x232>
 8012fa6:	68e0      	ldr	r0, [r4, #12]
 8012fa8:	9b03      	ldr	r3, [sp, #12]
 8012faa:	4298      	cmp	r0, r3
 8012fac:	bfb8      	it	lt
 8012fae:	4618      	movlt	r0, r3
 8012fb0:	e7a6      	b.n	8012f00 <_printf_i+0x164>
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	4632      	mov	r2, r6
 8012fb6:	4649      	mov	r1, r9
 8012fb8:	4640      	mov	r0, r8
 8012fba:	47d0      	blx	sl
 8012fbc:	3001      	adds	r0, #1
 8012fbe:	d09d      	beq.n	8012efc <_printf_i+0x160>
 8012fc0:	3501      	adds	r5, #1
 8012fc2:	68e3      	ldr	r3, [r4, #12]
 8012fc4:	9903      	ldr	r1, [sp, #12]
 8012fc6:	1a5b      	subs	r3, r3, r1
 8012fc8:	42ab      	cmp	r3, r5
 8012fca:	dcf2      	bgt.n	8012fb2 <_printf_i+0x216>
 8012fcc:	e7eb      	b.n	8012fa6 <_printf_i+0x20a>
 8012fce:	2500      	movs	r5, #0
 8012fd0:	f104 0619 	add.w	r6, r4, #25
 8012fd4:	e7f5      	b.n	8012fc2 <_printf_i+0x226>
 8012fd6:	bf00      	nop
 8012fd8:	08014041 	.word	0x08014041
 8012fdc:	08014052 	.word	0x08014052

08012fe0 <__sflush_r>:
 8012fe0:	898a      	ldrh	r2, [r1, #12]
 8012fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fe6:	4605      	mov	r5, r0
 8012fe8:	0710      	lsls	r0, r2, #28
 8012fea:	460c      	mov	r4, r1
 8012fec:	d458      	bmi.n	80130a0 <__sflush_r+0xc0>
 8012fee:	684b      	ldr	r3, [r1, #4]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	dc05      	bgt.n	8013000 <__sflush_r+0x20>
 8012ff4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	dc02      	bgt.n	8013000 <__sflush_r+0x20>
 8012ffa:	2000      	movs	r0, #0
 8012ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013002:	2e00      	cmp	r6, #0
 8013004:	d0f9      	beq.n	8012ffa <__sflush_r+0x1a>
 8013006:	2300      	movs	r3, #0
 8013008:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801300c:	682f      	ldr	r7, [r5, #0]
 801300e:	6a21      	ldr	r1, [r4, #32]
 8013010:	602b      	str	r3, [r5, #0]
 8013012:	d032      	beq.n	801307a <__sflush_r+0x9a>
 8013014:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013016:	89a3      	ldrh	r3, [r4, #12]
 8013018:	075a      	lsls	r2, r3, #29
 801301a:	d505      	bpl.n	8013028 <__sflush_r+0x48>
 801301c:	6863      	ldr	r3, [r4, #4]
 801301e:	1ac0      	subs	r0, r0, r3
 8013020:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013022:	b10b      	cbz	r3, 8013028 <__sflush_r+0x48>
 8013024:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013026:	1ac0      	subs	r0, r0, r3
 8013028:	2300      	movs	r3, #0
 801302a:	4602      	mov	r2, r0
 801302c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801302e:	6a21      	ldr	r1, [r4, #32]
 8013030:	4628      	mov	r0, r5
 8013032:	47b0      	blx	r6
 8013034:	1c43      	adds	r3, r0, #1
 8013036:	89a3      	ldrh	r3, [r4, #12]
 8013038:	d106      	bne.n	8013048 <__sflush_r+0x68>
 801303a:	6829      	ldr	r1, [r5, #0]
 801303c:	291d      	cmp	r1, #29
 801303e:	d82b      	bhi.n	8013098 <__sflush_r+0xb8>
 8013040:	4a29      	ldr	r2, [pc, #164]	; (80130e8 <__sflush_r+0x108>)
 8013042:	410a      	asrs	r2, r1
 8013044:	07d6      	lsls	r6, r2, #31
 8013046:	d427      	bmi.n	8013098 <__sflush_r+0xb8>
 8013048:	2200      	movs	r2, #0
 801304a:	6062      	str	r2, [r4, #4]
 801304c:	04d9      	lsls	r1, r3, #19
 801304e:	6922      	ldr	r2, [r4, #16]
 8013050:	6022      	str	r2, [r4, #0]
 8013052:	d504      	bpl.n	801305e <__sflush_r+0x7e>
 8013054:	1c42      	adds	r2, r0, #1
 8013056:	d101      	bne.n	801305c <__sflush_r+0x7c>
 8013058:	682b      	ldr	r3, [r5, #0]
 801305a:	b903      	cbnz	r3, 801305e <__sflush_r+0x7e>
 801305c:	6560      	str	r0, [r4, #84]	; 0x54
 801305e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013060:	602f      	str	r7, [r5, #0]
 8013062:	2900      	cmp	r1, #0
 8013064:	d0c9      	beq.n	8012ffa <__sflush_r+0x1a>
 8013066:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801306a:	4299      	cmp	r1, r3
 801306c:	d002      	beq.n	8013074 <__sflush_r+0x94>
 801306e:	4628      	mov	r0, r5
 8013070:	f7ff fb36 	bl	80126e0 <_free_r>
 8013074:	2000      	movs	r0, #0
 8013076:	6360      	str	r0, [r4, #52]	; 0x34
 8013078:	e7c0      	b.n	8012ffc <__sflush_r+0x1c>
 801307a:	2301      	movs	r3, #1
 801307c:	4628      	mov	r0, r5
 801307e:	47b0      	blx	r6
 8013080:	1c41      	adds	r1, r0, #1
 8013082:	d1c8      	bne.n	8013016 <__sflush_r+0x36>
 8013084:	682b      	ldr	r3, [r5, #0]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d0c5      	beq.n	8013016 <__sflush_r+0x36>
 801308a:	2b1d      	cmp	r3, #29
 801308c:	d001      	beq.n	8013092 <__sflush_r+0xb2>
 801308e:	2b16      	cmp	r3, #22
 8013090:	d101      	bne.n	8013096 <__sflush_r+0xb6>
 8013092:	602f      	str	r7, [r5, #0]
 8013094:	e7b1      	b.n	8012ffa <__sflush_r+0x1a>
 8013096:	89a3      	ldrh	r3, [r4, #12]
 8013098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801309c:	81a3      	strh	r3, [r4, #12]
 801309e:	e7ad      	b.n	8012ffc <__sflush_r+0x1c>
 80130a0:	690f      	ldr	r7, [r1, #16]
 80130a2:	2f00      	cmp	r7, #0
 80130a4:	d0a9      	beq.n	8012ffa <__sflush_r+0x1a>
 80130a6:	0793      	lsls	r3, r2, #30
 80130a8:	680e      	ldr	r6, [r1, #0]
 80130aa:	bf08      	it	eq
 80130ac:	694b      	ldreq	r3, [r1, #20]
 80130ae:	600f      	str	r7, [r1, #0]
 80130b0:	bf18      	it	ne
 80130b2:	2300      	movne	r3, #0
 80130b4:	eba6 0807 	sub.w	r8, r6, r7
 80130b8:	608b      	str	r3, [r1, #8]
 80130ba:	f1b8 0f00 	cmp.w	r8, #0
 80130be:	dd9c      	ble.n	8012ffa <__sflush_r+0x1a>
 80130c0:	6a21      	ldr	r1, [r4, #32]
 80130c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80130c4:	4643      	mov	r3, r8
 80130c6:	463a      	mov	r2, r7
 80130c8:	4628      	mov	r0, r5
 80130ca:	47b0      	blx	r6
 80130cc:	2800      	cmp	r0, #0
 80130ce:	dc06      	bgt.n	80130de <__sflush_r+0xfe>
 80130d0:	89a3      	ldrh	r3, [r4, #12]
 80130d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130d6:	81a3      	strh	r3, [r4, #12]
 80130d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80130dc:	e78e      	b.n	8012ffc <__sflush_r+0x1c>
 80130de:	4407      	add	r7, r0
 80130e0:	eba8 0800 	sub.w	r8, r8, r0
 80130e4:	e7e9      	b.n	80130ba <__sflush_r+0xda>
 80130e6:	bf00      	nop
 80130e8:	dfbffffe 	.word	0xdfbffffe

080130ec <_fflush_r>:
 80130ec:	b538      	push	{r3, r4, r5, lr}
 80130ee:	690b      	ldr	r3, [r1, #16]
 80130f0:	4605      	mov	r5, r0
 80130f2:	460c      	mov	r4, r1
 80130f4:	b913      	cbnz	r3, 80130fc <_fflush_r+0x10>
 80130f6:	2500      	movs	r5, #0
 80130f8:	4628      	mov	r0, r5
 80130fa:	bd38      	pop	{r3, r4, r5, pc}
 80130fc:	b118      	cbz	r0, 8013106 <_fflush_r+0x1a>
 80130fe:	6a03      	ldr	r3, [r0, #32]
 8013100:	b90b      	cbnz	r3, 8013106 <_fflush_r+0x1a>
 8013102:	f7ff f89d 	bl	8012240 <__sinit>
 8013106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d0f3      	beq.n	80130f6 <_fflush_r+0xa>
 801310e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013110:	07d0      	lsls	r0, r2, #31
 8013112:	d404      	bmi.n	801311e <_fflush_r+0x32>
 8013114:	0599      	lsls	r1, r3, #22
 8013116:	d402      	bmi.n	801311e <_fflush_r+0x32>
 8013118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801311a:	f7ff fa9e 	bl	801265a <__retarget_lock_acquire_recursive>
 801311e:	4628      	mov	r0, r5
 8013120:	4621      	mov	r1, r4
 8013122:	f7ff ff5d 	bl	8012fe0 <__sflush_r>
 8013126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013128:	07da      	lsls	r2, r3, #31
 801312a:	4605      	mov	r5, r0
 801312c:	d4e4      	bmi.n	80130f8 <_fflush_r+0xc>
 801312e:	89a3      	ldrh	r3, [r4, #12]
 8013130:	059b      	lsls	r3, r3, #22
 8013132:	d4e1      	bmi.n	80130f8 <_fflush_r+0xc>
 8013134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013136:	f7ff fa91 	bl	801265c <__retarget_lock_release_recursive>
 801313a:	e7dd      	b.n	80130f8 <_fflush_r+0xc>

0801313c <fiprintf>:
 801313c:	b40e      	push	{r1, r2, r3}
 801313e:	b503      	push	{r0, r1, lr}
 8013140:	4601      	mov	r1, r0
 8013142:	ab03      	add	r3, sp, #12
 8013144:	4805      	ldr	r0, [pc, #20]	; (801315c <fiprintf+0x20>)
 8013146:	f853 2b04 	ldr.w	r2, [r3], #4
 801314a:	6800      	ldr	r0, [r0, #0]
 801314c:	9301      	str	r3, [sp, #4]
 801314e:	f7ff fc9d 	bl	8012a8c <_vfiprintf_r>
 8013152:	b002      	add	sp, #8
 8013154:	f85d eb04 	ldr.w	lr, [sp], #4
 8013158:	b003      	add	sp, #12
 801315a:	4770      	bx	lr
 801315c:	2000010c 	.word	0x2000010c

08013160 <__swbuf_r>:
 8013160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013162:	460e      	mov	r6, r1
 8013164:	4614      	mov	r4, r2
 8013166:	4605      	mov	r5, r0
 8013168:	b118      	cbz	r0, 8013172 <__swbuf_r+0x12>
 801316a:	6a03      	ldr	r3, [r0, #32]
 801316c:	b90b      	cbnz	r3, 8013172 <__swbuf_r+0x12>
 801316e:	f7ff f867 	bl	8012240 <__sinit>
 8013172:	69a3      	ldr	r3, [r4, #24]
 8013174:	60a3      	str	r3, [r4, #8]
 8013176:	89a3      	ldrh	r3, [r4, #12]
 8013178:	071a      	lsls	r2, r3, #28
 801317a:	d525      	bpl.n	80131c8 <__swbuf_r+0x68>
 801317c:	6923      	ldr	r3, [r4, #16]
 801317e:	b31b      	cbz	r3, 80131c8 <__swbuf_r+0x68>
 8013180:	6823      	ldr	r3, [r4, #0]
 8013182:	6922      	ldr	r2, [r4, #16]
 8013184:	1a98      	subs	r0, r3, r2
 8013186:	6963      	ldr	r3, [r4, #20]
 8013188:	b2f6      	uxtb	r6, r6
 801318a:	4283      	cmp	r3, r0
 801318c:	4637      	mov	r7, r6
 801318e:	dc04      	bgt.n	801319a <__swbuf_r+0x3a>
 8013190:	4621      	mov	r1, r4
 8013192:	4628      	mov	r0, r5
 8013194:	f7ff ffaa 	bl	80130ec <_fflush_r>
 8013198:	b9e0      	cbnz	r0, 80131d4 <__swbuf_r+0x74>
 801319a:	68a3      	ldr	r3, [r4, #8]
 801319c:	3b01      	subs	r3, #1
 801319e:	60a3      	str	r3, [r4, #8]
 80131a0:	6823      	ldr	r3, [r4, #0]
 80131a2:	1c5a      	adds	r2, r3, #1
 80131a4:	6022      	str	r2, [r4, #0]
 80131a6:	701e      	strb	r6, [r3, #0]
 80131a8:	6962      	ldr	r2, [r4, #20]
 80131aa:	1c43      	adds	r3, r0, #1
 80131ac:	429a      	cmp	r2, r3
 80131ae:	d004      	beq.n	80131ba <__swbuf_r+0x5a>
 80131b0:	89a3      	ldrh	r3, [r4, #12]
 80131b2:	07db      	lsls	r3, r3, #31
 80131b4:	d506      	bpl.n	80131c4 <__swbuf_r+0x64>
 80131b6:	2e0a      	cmp	r6, #10
 80131b8:	d104      	bne.n	80131c4 <__swbuf_r+0x64>
 80131ba:	4621      	mov	r1, r4
 80131bc:	4628      	mov	r0, r5
 80131be:	f7ff ff95 	bl	80130ec <_fflush_r>
 80131c2:	b938      	cbnz	r0, 80131d4 <__swbuf_r+0x74>
 80131c4:	4638      	mov	r0, r7
 80131c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131c8:	4621      	mov	r1, r4
 80131ca:	4628      	mov	r0, r5
 80131cc:	f000 f806 	bl	80131dc <__swsetup_r>
 80131d0:	2800      	cmp	r0, #0
 80131d2:	d0d5      	beq.n	8013180 <__swbuf_r+0x20>
 80131d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80131d8:	e7f4      	b.n	80131c4 <__swbuf_r+0x64>
	...

080131dc <__swsetup_r>:
 80131dc:	b538      	push	{r3, r4, r5, lr}
 80131de:	4b2a      	ldr	r3, [pc, #168]	; (8013288 <__swsetup_r+0xac>)
 80131e0:	4605      	mov	r5, r0
 80131e2:	6818      	ldr	r0, [r3, #0]
 80131e4:	460c      	mov	r4, r1
 80131e6:	b118      	cbz	r0, 80131f0 <__swsetup_r+0x14>
 80131e8:	6a03      	ldr	r3, [r0, #32]
 80131ea:	b90b      	cbnz	r3, 80131f0 <__swsetup_r+0x14>
 80131ec:	f7ff f828 	bl	8012240 <__sinit>
 80131f0:	89a3      	ldrh	r3, [r4, #12]
 80131f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80131f6:	0718      	lsls	r0, r3, #28
 80131f8:	d422      	bmi.n	8013240 <__swsetup_r+0x64>
 80131fa:	06d9      	lsls	r1, r3, #27
 80131fc:	d407      	bmi.n	801320e <__swsetup_r+0x32>
 80131fe:	2309      	movs	r3, #9
 8013200:	602b      	str	r3, [r5, #0]
 8013202:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013206:	81a3      	strh	r3, [r4, #12]
 8013208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801320c:	e034      	b.n	8013278 <__swsetup_r+0x9c>
 801320e:	0758      	lsls	r0, r3, #29
 8013210:	d512      	bpl.n	8013238 <__swsetup_r+0x5c>
 8013212:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013214:	b141      	cbz	r1, 8013228 <__swsetup_r+0x4c>
 8013216:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801321a:	4299      	cmp	r1, r3
 801321c:	d002      	beq.n	8013224 <__swsetup_r+0x48>
 801321e:	4628      	mov	r0, r5
 8013220:	f7ff fa5e 	bl	80126e0 <_free_r>
 8013224:	2300      	movs	r3, #0
 8013226:	6363      	str	r3, [r4, #52]	; 0x34
 8013228:	89a3      	ldrh	r3, [r4, #12]
 801322a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801322e:	81a3      	strh	r3, [r4, #12]
 8013230:	2300      	movs	r3, #0
 8013232:	6063      	str	r3, [r4, #4]
 8013234:	6923      	ldr	r3, [r4, #16]
 8013236:	6023      	str	r3, [r4, #0]
 8013238:	89a3      	ldrh	r3, [r4, #12]
 801323a:	f043 0308 	orr.w	r3, r3, #8
 801323e:	81a3      	strh	r3, [r4, #12]
 8013240:	6923      	ldr	r3, [r4, #16]
 8013242:	b94b      	cbnz	r3, 8013258 <__swsetup_r+0x7c>
 8013244:	89a3      	ldrh	r3, [r4, #12]
 8013246:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801324a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801324e:	d003      	beq.n	8013258 <__swsetup_r+0x7c>
 8013250:	4621      	mov	r1, r4
 8013252:	4628      	mov	r0, r5
 8013254:	f000 f861 	bl	801331a <__smakebuf_r>
 8013258:	89a0      	ldrh	r0, [r4, #12]
 801325a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801325e:	f010 0301 	ands.w	r3, r0, #1
 8013262:	d00a      	beq.n	801327a <__swsetup_r+0x9e>
 8013264:	2300      	movs	r3, #0
 8013266:	60a3      	str	r3, [r4, #8]
 8013268:	6963      	ldr	r3, [r4, #20]
 801326a:	425b      	negs	r3, r3
 801326c:	61a3      	str	r3, [r4, #24]
 801326e:	6923      	ldr	r3, [r4, #16]
 8013270:	b943      	cbnz	r3, 8013284 <__swsetup_r+0xa8>
 8013272:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013276:	d1c4      	bne.n	8013202 <__swsetup_r+0x26>
 8013278:	bd38      	pop	{r3, r4, r5, pc}
 801327a:	0781      	lsls	r1, r0, #30
 801327c:	bf58      	it	pl
 801327e:	6963      	ldrpl	r3, [r4, #20]
 8013280:	60a3      	str	r3, [r4, #8]
 8013282:	e7f4      	b.n	801326e <__swsetup_r+0x92>
 8013284:	2000      	movs	r0, #0
 8013286:	e7f7      	b.n	8013278 <__swsetup_r+0x9c>
 8013288:	2000010c 	.word	0x2000010c

0801328c <memmove>:
 801328c:	4288      	cmp	r0, r1
 801328e:	b510      	push	{r4, lr}
 8013290:	eb01 0402 	add.w	r4, r1, r2
 8013294:	d902      	bls.n	801329c <memmove+0x10>
 8013296:	4284      	cmp	r4, r0
 8013298:	4623      	mov	r3, r4
 801329a:	d807      	bhi.n	80132ac <memmove+0x20>
 801329c:	1e43      	subs	r3, r0, #1
 801329e:	42a1      	cmp	r1, r4
 80132a0:	d008      	beq.n	80132b4 <memmove+0x28>
 80132a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80132a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80132aa:	e7f8      	b.n	801329e <memmove+0x12>
 80132ac:	4402      	add	r2, r0
 80132ae:	4601      	mov	r1, r0
 80132b0:	428a      	cmp	r2, r1
 80132b2:	d100      	bne.n	80132b6 <memmove+0x2a>
 80132b4:	bd10      	pop	{r4, pc}
 80132b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80132ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80132be:	e7f7      	b.n	80132b0 <memmove+0x24>

080132c0 <abort>:
 80132c0:	b508      	push	{r3, lr}
 80132c2:	2006      	movs	r0, #6
 80132c4:	f000 f88e 	bl	80133e4 <raise>
 80132c8:	2001      	movs	r0, #1
 80132ca:	f7ef f8f9 	bl	80024c0 <_exit>

080132ce <__swhatbuf_r>:
 80132ce:	b570      	push	{r4, r5, r6, lr}
 80132d0:	460c      	mov	r4, r1
 80132d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132d6:	2900      	cmp	r1, #0
 80132d8:	b096      	sub	sp, #88	; 0x58
 80132da:	4615      	mov	r5, r2
 80132dc:	461e      	mov	r6, r3
 80132de:	da0d      	bge.n	80132fc <__swhatbuf_r+0x2e>
 80132e0:	89a3      	ldrh	r3, [r4, #12]
 80132e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80132e6:	f04f 0100 	mov.w	r1, #0
 80132ea:	bf0c      	ite	eq
 80132ec:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80132f0:	2340      	movne	r3, #64	; 0x40
 80132f2:	2000      	movs	r0, #0
 80132f4:	6031      	str	r1, [r6, #0]
 80132f6:	602b      	str	r3, [r5, #0]
 80132f8:	b016      	add	sp, #88	; 0x58
 80132fa:	bd70      	pop	{r4, r5, r6, pc}
 80132fc:	466a      	mov	r2, sp
 80132fe:	f000 f879 	bl	80133f4 <_fstat_r>
 8013302:	2800      	cmp	r0, #0
 8013304:	dbec      	blt.n	80132e0 <__swhatbuf_r+0x12>
 8013306:	9901      	ldr	r1, [sp, #4]
 8013308:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801330c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013310:	4259      	negs	r1, r3
 8013312:	4159      	adcs	r1, r3
 8013314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013318:	e7eb      	b.n	80132f2 <__swhatbuf_r+0x24>

0801331a <__smakebuf_r>:
 801331a:	898b      	ldrh	r3, [r1, #12]
 801331c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801331e:	079d      	lsls	r5, r3, #30
 8013320:	4606      	mov	r6, r0
 8013322:	460c      	mov	r4, r1
 8013324:	d507      	bpl.n	8013336 <__smakebuf_r+0x1c>
 8013326:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801332a:	6023      	str	r3, [r4, #0]
 801332c:	6123      	str	r3, [r4, #16]
 801332e:	2301      	movs	r3, #1
 8013330:	6163      	str	r3, [r4, #20]
 8013332:	b002      	add	sp, #8
 8013334:	bd70      	pop	{r4, r5, r6, pc}
 8013336:	ab01      	add	r3, sp, #4
 8013338:	466a      	mov	r2, sp
 801333a:	f7ff ffc8 	bl	80132ce <__swhatbuf_r>
 801333e:	9900      	ldr	r1, [sp, #0]
 8013340:	4605      	mov	r5, r0
 8013342:	4630      	mov	r0, r6
 8013344:	f7fe fd44 	bl	8011dd0 <_malloc_r>
 8013348:	b948      	cbnz	r0, 801335e <__smakebuf_r+0x44>
 801334a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801334e:	059a      	lsls	r2, r3, #22
 8013350:	d4ef      	bmi.n	8013332 <__smakebuf_r+0x18>
 8013352:	f023 0303 	bic.w	r3, r3, #3
 8013356:	f043 0302 	orr.w	r3, r3, #2
 801335a:	81a3      	strh	r3, [r4, #12]
 801335c:	e7e3      	b.n	8013326 <__smakebuf_r+0xc>
 801335e:	89a3      	ldrh	r3, [r4, #12]
 8013360:	6020      	str	r0, [r4, #0]
 8013362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013366:	81a3      	strh	r3, [r4, #12]
 8013368:	9b00      	ldr	r3, [sp, #0]
 801336a:	6163      	str	r3, [r4, #20]
 801336c:	9b01      	ldr	r3, [sp, #4]
 801336e:	6120      	str	r0, [r4, #16]
 8013370:	b15b      	cbz	r3, 801338a <__smakebuf_r+0x70>
 8013372:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013376:	4630      	mov	r0, r6
 8013378:	f000 f84e 	bl	8013418 <_isatty_r>
 801337c:	b128      	cbz	r0, 801338a <__smakebuf_r+0x70>
 801337e:	89a3      	ldrh	r3, [r4, #12]
 8013380:	f023 0303 	bic.w	r3, r3, #3
 8013384:	f043 0301 	orr.w	r3, r3, #1
 8013388:	81a3      	strh	r3, [r4, #12]
 801338a:	89a3      	ldrh	r3, [r4, #12]
 801338c:	431d      	orrs	r5, r3
 801338e:	81a5      	strh	r5, [r4, #12]
 8013390:	e7cf      	b.n	8013332 <__smakebuf_r+0x18>

08013392 <_raise_r>:
 8013392:	291f      	cmp	r1, #31
 8013394:	b538      	push	{r3, r4, r5, lr}
 8013396:	4604      	mov	r4, r0
 8013398:	460d      	mov	r5, r1
 801339a:	d904      	bls.n	80133a6 <_raise_r+0x14>
 801339c:	2316      	movs	r3, #22
 801339e:	6003      	str	r3, [r0, #0]
 80133a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80133a4:	bd38      	pop	{r3, r4, r5, pc}
 80133a6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80133a8:	b112      	cbz	r2, 80133b0 <_raise_r+0x1e>
 80133aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80133ae:	b94b      	cbnz	r3, 80133c4 <_raise_r+0x32>
 80133b0:	4620      	mov	r0, r4
 80133b2:	f000 f853 	bl	801345c <_getpid_r>
 80133b6:	462a      	mov	r2, r5
 80133b8:	4601      	mov	r1, r0
 80133ba:	4620      	mov	r0, r4
 80133bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80133c0:	f000 b83a 	b.w	8013438 <_kill_r>
 80133c4:	2b01      	cmp	r3, #1
 80133c6:	d00a      	beq.n	80133de <_raise_r+0x4c>
 80133c8:	1c59      	adds	r1, r3, #1
 80133ca:	d103      	bne.n	80133d4 <_raise_r+0x42>
 80133cc:	2316      	movs	r3, #22
 80133ce:	6003      	str	r3, [r0, #0]
 80133d0:	2001      	movs	r0, #1
 80133d2:	e7e7      	b.n	80133a4 <_raise_r+0x12>
 80133d4:	2400      	movs	r4, #0
 80133d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80133da:	4628      	mov	r0, r5
 80133dc:	4798      	blx	r3
 80133de:	2000      	movs	r0, #0
 80133e0:	e7e0      	b.n	80133a4 <_raise_r+0x12>
	...

080133e4 <raise>:
 80133e4:	4b02      	ldr	r3, [pc, #8]	; (80133f0 <raise+0xc>)
 80133e6:	4601      	mov	r1, r0
 80133e8:	6818      	ldr	r0, [r3, #0]
 80133ea:	f7ff bfd2 	b.w	8013392 <_raise_r>
 80133ee:	bf00      	nop
 80133f0:	2000010c 	.word	0x2000010c

080133f4 <_fstat_r>:
 80133f4:	b538      	push	{r3, r4, r5, lr}
 80133f6:	4d07      	ldr	r5, [pc, #28]	; (8013414 <_fstat_r+0x20>)
 80133f8:	2300      	movs	r3, #0
 80133fa:	4604      	mov	r4, r0
 80133fc:	4608      	mov	r0, r1
 80133fe:	4611      	mov	r1, r2
 8013400:	602b      	str	r3, [r5, #0]
 8013402:	f7ef f8ac 	bl	800255e <_fstat>
 8013406:	1c43      	adds	r3, r0, #1
 8013408:	d102      	bne.n	8013410 <_fstat_r+0x1c>
 801340a:	682b      	ldr	r3, [r5, #0]
 801340c:	b103      	cbz	r3, 8013410 <_fstat_r+0x1c>
 801340e:	6023      	str	r3, [r4, #0]
 8013410:	bd38      	pop	{r3, r4, r5, pc}
 8013412:	bf00      	nop
 8013414:	2001269c 	.word	0x2001269c

08013418 <_isatty_r>:
 8013418:	b538      	push	{r3, r4, r5, lr}
 801341a:	4d06      	ldr	r5, [pc, #24]	; (8013434 <_isatty_r+0x1c>)
 801341c:	2300      	movs	r3, #0
 801341e:	4604      	mov	r4, r0
 8013420:	4608      	mov	r0, r1
 8013422:	602b      	str	r3, [r5, #0]
 8013424:	f7ef f8ab 	bl	800257e <_isatty>
 8013428:	1c43      	adds	r3, r0, #1
 801342a:	d102      	bne.n	8013432 <_isatty_r+0x1a>
 801342c:	682b      	ldr	r3, [r5, #0]
 801342e:	b103      	cbz	r3, 8013432 <_isatty_r+0x1a>
 8013430:	6023      	str	r3, [r4, #0]
 8013432:	bd38      	pop	{r3, r4, r5, pc}
 8013434:	2001269c 	.word	0x2001269c

08013438 <_kill_r>:
 8013438:	b538      	push	{r3, r4, r5, lr}
 801343a:	4d07      	ldr	r5, [pc, #28]	; (8013458 <_kill_r+0x20>)
 801343c:	2300      	movs	r3, #0
 801343e:	4604      	mov	r4, r0
 8013440:	4608      	mov	r0, r1
 8013442:	4611      	mov	r1, r2
 8013444:	602b      	str	r3, [r5, #0]
 8013446:	f7ef f82b 	bl	80024a0 <_kill>
 801344a:	1c43      	adds	r3, r0, #1
 801344c:	d102      	bne.n	8013454 <_kill_r+0x1c>
 801344e:	682b      	ldr	r3, [r5, #0]
 8013450:	b103      	cbz	r3, 8013454 <_kill_r+0x1c>
 8013452:	6023      	str	r3, [r4, #0]
 8013454:	bd38      	pop	{r3, r4, r5, pc}
 8013456:	bf00      	nop
 8013458:	2001269c 	.word	0x2001269c

0801345c <_getpid_r>:
 801345c:	f7ef b818 	b.w	8002490 <_getpid>

08013460 <_init>:
 8013460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013462:	bf00      	nop
 8013464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013466:	bc08      	pop	{r3}
 8013468:	469e      	mov	lr, r3
 801346a:	4770      	bx	lr

0801346c <_fini>:
 801346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801346e:	bf00      	nop
 8013470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013472:	bc08      	pop	{r3}
 8013474:	469e      	mov	lr, r3
 8013476:	4770      	bx	lr
