
stmROS_pd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017dcc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e1c  08017f70  08017f70  00027f70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018d8c  08018d8c  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  08018d8c  08018d8c  00028d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018d94  08018d94  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018d94  08018d94  00028d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018d9c  08018d9c  00028d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08018da0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010d2c  20000110  08018eb0  00030110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20010e3c  08018eb0  00030e3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f76c  00000000  00000000  000301b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004116  00000000  00000000  0004f922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001910  00000000  00000000  00053a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000138b  00000000  00000000  00055348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c30d  00000000  00000000  000566d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dfd6  00000000  00000000  000729e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a62c3  00000000  00000000  000909b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000079a8  00000000  00000000  00136c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013e624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000110 	.word	0x20000110
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08017f54 	.word	0x08017f54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000114 	.word	0x20000114
 80001dc:	08017f54 	.word	0x08017f54

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_ldivmod>:
 8000d58:	b97b      	cbnz	r3, 8000d7a <__aeabi_ldivmod+0x22>
 8000d5a:	b972      	cbnz	r2, 8000d7a <__aeabi_ldivmod+0x22>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bfbe      	ittt	lt
 8000d60:	2000      	movlt	r0, #0
 8000d62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000d66:	e006      	blt.n	8000d76 <__aeabi_ldivmod+0x1e>
 8000d68:	bf08      	it	eq
 8000d6a:	2800      	cmpeq	r0, #0
 8000d6c:	bf1c      	itt	ne
 8000d6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000d72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d76:	f000 b9bb 	b.w	80010f0 <__aeabi_idiv0>
 8000d7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d82:	2900      	cmp	r1, #0
 8000d84:	db09      	blt.n	8000d9a <__aeabi_ldivmod+0x42>
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db1a      	blt.n	8000dc0 <__aeabi_ldivmod+0x68>
 8000d8a:	f000 f84d 	bl	8000e28 <__udivmoddi4>
 8000d8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d96:	b004      	add	sp, #16
 8000d98:	4770      	bx	lr
 8000d9a:	4240      	negs	r0, r0
 8000d9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db1b      	blt.n	8000ddc <__aeabi_ldivmod+0x84>
 8000da4:	f000 f840 	bl	8000e28 <__udivmoddi4>
 8000da8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db0:	b004      	add	sp, #16
 8000db2:	4240      	negs	r0, r0
 8000db4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db8:	4252      	negs	r2, r2
 8000dba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dbe:	4770      	bx	lr
 8000dc0:	4252      	negs	r2, r2
 8000dc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dc6:	f000 f82f 	bl	8000e28 <__udivmoddi4>
 8000dca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd2:	b004      	add	sp, #16
 8000dd4:	4240      	negs	r0, r0
 8000dd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dda:	4770      	bx	lr
 8000ddc:	4252      	negs	r2, r2
 8000dde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000de2:	f000 f821 	bl	8000e28 <__udivmoddi4>
 8000de6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dee:	b004      	add	sp, #16
 8000df0:	4252      	negs	r2, r2
 8000df2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000df6:	4770      	bx	lr

08000df8 <__aeabi_uldivmod>:
 8000df8:	b953      	cbnz	r3, 8000e10 <__aeabi_uldivmod+0x18>
 8000dfa:	b94a      	cbnz	r2, 8000e10 <__aeabi_uldivmod+0x18>
 8000dfc:	2900      	cmp	r1, #0
 8000dfe:	bf08      	it	eq
 8000e00:	2800      	cmpeq	r0, #0
 8000e02:	bf1c      	itt	ne
 8000e04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000e08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000e0c:	f000 b970 	b.w	80010f0 <__aeabi_idiv0>
 8000e10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e18:	f000 f806 	bl	8000e28 <__udivmoddi4>
 8000e1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e24:	b004      	add	sp, #16
 8000e26:	4770      	bx	lr

08000e28 <__udivmoddi4>:
 8000e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e2c:	9e08      	ldr	r6, [sp, #32]
 8000e2e:	460d      	mov	r5, r1
 8000e30:	4604      	mov	r4, r0
 8000e32:	460f      	mov	r7, r1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d14a      	bne.n	8000ece <__udivmoddi4+0xa6>
 8000e38:	428a      	cmp	r2, r1
 8000e3a:	4694      	mov	ip, r2
 8000e3c:	d965      	bls.n	8000f0a <__udivmoddi4+0xe2>
 8000e3e:	fab2 f382 	clz	r3, r2
 8000e42:	b143      	cbz	r3, 8000e56 <__udivmoddi4+0x2e>
 8000e44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e48:	f1c3 0220 	rsb	r2, r3, #32
 8000e4c:	409f      	lsls	r7, r3
 8000e4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000e52:	4317      	orrs	r7, r2
 8000e54:	409c      	lsls	r4, r3
 8000e56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e5a:	fa1f f58c 	uxth.w	r5, ip
 8000e5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e62:	0c22      	lsrs	r2, r4, #16
 8000e64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e6c:	fb01 f005 	mul.w	r0, r1, r5
 8000e70:	4290      	cmp	r0, r2
 8000e72:	d90a      	bls.n	8000e8a <__udivmoddi4+0x62>
 8000e74:	eb1c 0202 	adds.w	r2, ip, r2
 8000e78:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000e7c:	f080 811c 	bcs.w	80010b8 <__udivmoddi4+0x290>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f240 8119 	bls.w	80010b8 <__udivmoddi4+0x290>
 8000e86:	3902      	subs	r1, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a12      	subs	r2, r2, r0
 8000e8c:	b2a4      	uxth	r4, r4
 8000e8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e9a:	fb00 f505 	mul.w	r5, r0, r5
 8000e9e:	42a5      	cmp	r5, r4
 8000ea0:	d90a      	bls.n	8000eb8 <__udivmoddi4+0x90>
 8000ea2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000eaa:	f080 8107 	bcs.w	80010bc <__udivmoddi4+0x294>
 8000eae:	42a5      	cmp	r5, r4
 8000eb0:	f240 8104 	bls.w	80010bc <__udivmoddi4+0x294>
 8000eb4:	4464      	add	r4, ip
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ebc:	1b64      	subs	r4, r4, r5
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	b11e      	cbz	r6, 8000eca <__udivmoddi4+0xa2>
 8000ec2:	40dc      	lsrs	r4, r3
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	e9c6 4300 	strd	r4, r3, [r6]
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0xbc>
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	f000 80ed 	beq.w	80010b2 <__udivmoddi4+0x28a>
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e9c6 0500 	strd	r0, r5, [r6]
 8000ede:	4608      	mov	r0, r1
 8000ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee4:	fab3 f183 	clz	r1, r3
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	d149      	bne.n	8000f80 <__udivmoddi4+0x158>
 8000eec:	42ab      	cmp	r3, r5
 8000eee:	d302      	bcc.n	8000ef6 <__udivmoddi4+0xce>
 8000ef0:	4282      	cmp	r2, r0
 8000ef2:	f200 80f8 	bhi.w	80010e6 <__udivmoddi4+0x2be>
 8000ef6:	1a84      	subs	r4, r0, r2
 8000ef8:	eb65 0203 	sbc.w	r2, r5, r3
 8000efc:	2001      	movs	r0, #1
 8000efe:	4617      	mov	r7, r2
 8000f00:	2e00      	cmp	r6, #0
 8000f02:	d0e2      	beq.n	8000eca <__udivmoddi4+0xa2>
 8000f04:	e9c6 4700 	strd	r4, r7, [r6]
 8000f08:	e7df      	b.n	8000eca <__udivmoddi4+0xa2>
 8000f0a:	b902      	cbnz	r2, 8000f0e <__udivmoddi4+0xe6>
 8000f0c:	deff      	udf	#255	; 0xff
 8000f0e:	fab2 f382 	clz	r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f040 8090 	bne.w	8001038 <__udivmoddi4+0x210>
 8000f18:	1a8a      	subs	r2, r1, r2
 8000f1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1e:	fa1f fe8c 	uxth.w	lr, ip
 8000f22:	2101      	movs	r1, #1
 8000f24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f28:	fb07 2015 	mls	r0, r7, r5, r2
 8000f2c:	0c22      	lsrs	r2, r4, #16
 8000f2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f32:	fb0e f005 	mul.w	r0, lr, r5
 8000f36:	4290      	cmp	r0, r2
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x124>
 8000f3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x122>
 8000f44:	4290      	cmp	r0, r2
 8000f46:	f200 80cb 	bhi.w	80010e0 <__udivmoddi4+0x2b8>
 8000f4a:	4645      	mov	r5, r8
 8000f4c:	1a12      	subs	r2, r2, r0
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f54:	fb07 2210 	mls	r2, r7, r0, r2
 8000f58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000f60:	45a6      	cmp	lr, r4
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x14e>
 8000f64:	eb1c 0404 	adds.w	r4, ip, r4
 8000f68:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000f6c:	d202      	bcs.n	8000f74 <__udivmoddi4+0x14c>
 8000f6e:	45a6      	cmp	lr, r4
 8000f70:	f200 80bb 	bhi.w	80010ea <__udivmoddi4+0x2c2>
 8000f74:	4610      	mov	r0, r2
 8000f76:	eba4 040e 	sub.w	r4, r4, lr
 8000f7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f7e:	e79f      	b.n	8000ec0 <__udivmoddi4+0x98>
 8000f80:	f1c1 0720 	rsb	r7, r1, #32
 8000f84:	408b      	lsls	r3, r1
 8000f86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000f92:	fa20 f307 	lsr.w	r3, r0, r7
 8000f96:	40fd      	lsrs	r5, r7
 8000f98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f9c:	4323      	orrs	r3, r4
 8000f9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000fa2:	fa1f fe8c 	uxth.w	lr, ip
 8000fa6:	fb09 5518 	mls	r5, r9, r8, r5
 8000faa:	0c1c      	lsrs	r4, r3, #16
 8000fac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000fb0:	fb08 f50e 	mul.w	r5, r8, lr
 8000fb4:	42a5      	cmp	r5, r4
 8000fb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000fba:	fa00 f001 	lsl.w	r0, r0, r1
 8000fbe:	d90b      	bls.n	8000fd8 <__udivmoddi4+0x1b0>
 8000fc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000fc8:	f080 8088 	bcs.w	80010dc <__udivmoddi4+0x2b4>
 8000fcc:	42a5      	cmp	r5, r4
 8000fce:	f240 8085 	bls.w	80010dc <__udivmoddi4+0x2b4>
 8000fd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000fd6:	4464      	add	r4, ip
 8000fd8:	1b64      	subs	r4, r4, r5
 8000fda:	b29d      	uxth	r5, r3
 8000fdc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fe0:	fb09 4413 	mls	r4, r9, r3, r4
 8000fe4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fe8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fec:	45a6      	cmp	lr, r4
 8000fee:	d908      	bls.n	8001002 <__udivmoddi4+0x1da>
 8000ff0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ff8:	d26c      	bcs.n	80010d4 <__udivmoddi4+0x2ac>
 8000ffa:	45a6      	cmp	lr, r4
 8000ffc:	d96a      	bls.n	80010d4 <__udivmoddi4+0x2ac>
 8000ffe:	3b02      	subs	r3, #2
 8001000:	4464      	add	r4, ip
 8001002:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001006:	fba3 9502 	umull	r9, r5, r3, r2
 800100a:	eba4 040e 	sub.w	r4, r4, lr
 800100e:	42ac      	cmp	r4, r5
 8001010:	46c8      	mov	r8, r9
 8001012:	46ae      	mov	lr, r5
 8001014:	d356      	bcc.n	80010c4 <__udivmoddi4+0x29c>
 8001016:	d053      	beq.n	80010c0 <__udivmoddi4+0x298>
 8001018:	b156      	cbz	r6, 8001030 <__udivmoddi4+0x208>
 800101a:	ebb0 0208 	subs.w	r2, r0, r8
 800101e:	eb64 040e 	sbc.w	r4, r4, lr
 8001022:	fa04 f707 	lsl.w	r7, r4, r7
 8001026:	40ca      	lsrs	r2, r1
 8001028:	40cc      	lsrs	r4, r1
 800102a:	4317      	orrs	r7, r2
 800102c:	e9c6 7400 	strd	r7, r4, [r6]
 8001030:	4618      	mov	r0, r3
 8001032:	2100      	movs	r1, #0
 8001034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001038:	f1c3 0120 	rsb	r1, r3, #32
 800103c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001040:	fa20 f201 	lsr.w	r2, r0, r1
 8001044:	fa25 f101 	lsr.w	r1, r5, r1
 8001048:	409d      	lsls	r5, r3
 800104a:	432a      	orrs	r2, r5
 800104c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001050:	fa1f fe8c 	uxth.w	lr, ip
 8001054:	fbb1 f0f7 	udiv	r0, r1, r7
 8001058:	fb07 1510 	mls	r5, r7, r0, r1
 800105c:	0c11      	lsrs	r1, r2, #16
 800105e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001062:	fb00 f50e 	mul.w	r5, r0, lr
 8001066:	428d      	cmp	r5, r1
 8001068:	fa04 f403 	lsl.w	r4, r4, r3
 800106c:	d908      	bls.n	8001080 <__udivmoddi4+0x258>
 800106e:	eb1c 0101 	adds.w	r1, ip, r1
 8001072:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001076:	d22f      	bcs.n	80010d8 <__udivmoddi4+0x2b0>
 8001078:	428d      	cmp	r5, r1
 800107a:	d92d      	bls.n	80010d8 <__udivmoddi4+0x2b0>
 800107c:	3802      	subs	r0, #2
 800107e:	4461      	add	r1, ip
 8001080:	1b49      	subs	r1, r1, r5
 8001082:	b292      	uxth	r2, r2
 8001084:	fbb1 f5f7 	udiv	r5, r1, r7
 8001088:	fb07 1115 	mls	r1, r7, r5, r1
 800108c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001090:	fb05 f10e 	mul.w	r1, r5, lr
 8001094:	4291      	cmp	r1, r2
 8001096:	d908      	bls.n	80010aa <__udivmoddi4+0x282>
 8001098:	eb1c 0202 	adds.w	r2, ip, r2
 800109c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80010a0:	d216      	bcs.n	80010d0 <__udivmoddi4+0x2a8>
 80010a2:	4291      	cmp	r1, r2
 80010a4:	d914      	bls.n	80010d0 <__udivmoddi4+0x2a8>
 80010a6:	3d02      	subs	r5, #2
 80010a8:	4462      	add	r2, ip
 80010aa:	1a52      	subs	r2, r2, r1
 80010ac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80010b0:	e738      	b.n	8000f24 <__udivmoddi4+0xfc>
 80010b2:	4631      	mov	r1, r6
 80010b4:	4630      	mov	r0, r6
 80010b6:	e708      	b.n	8000eca <__udivmoddi4+0xa2>
 80010b8:	4639      	mov	r1, r7
 80010ba:	e6e6      	b.n	8000e8a <__udivmoddi4+0x62>
 80010bc:	4610      	mov	r0, r2
 80010be:	e6fb      	b.n	8000eb8 <__udivmoddi4+0x90>
 80010c0:	4548      	cmp	r0, r9
 80010c2:	d2a9      	bcs.n	8001018 <__udivmoddi4+0x1f0>
 80010c4:	ebb9 0802 	subs.w	r8, r9, r2
 80010c8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010cc:	3b01      	subs	r3, #1
 80010ce:	e7a3      	b.n	8001018 <__udivmoddi4+0x1f0>
 80010d0:	4645      	mov	r5, r8
 80010d2:	e7ea      	b.n	80010aa <__udivmoddi4+0x282>
 80010d4:	462b      	mov	r3, r5
 80010d6:	e794      	b.n	8001002 <__udivmoddi4+0x1da>
 80010d8:	4640      	mov	r0, r8
 80010da:	e7d1      	b.n	8001080 <__udivmoddi4+0x258>
 80010dc:	46d0      	mov	r8, sl
 80010de:	e77b      	b.n	8000fd8 <__udivmoddi4+0x1b0>
 80010e0:	3d02      	subs	r5, #2
 80010e2:	4462      	add	r2, ip
 80010e4:	e732      	b.n	8000f4c <__udivmoddi4+0x124>
 80010e6:	4608      	mov	r0, r1
 80010e8:	e70a      	b.n	8000f00 <__udivmoddi4+0xd8>
 80010ea:	4464      	add	r4, ip
 80010ec:	3802      	subs	r0, #2
 80010ee:	e742      	b.n	8000f76 <__udivmoddi4+0x14e>

080010f0 <__aeabi_idiv0>:
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001100:	f007 fb3e 	bl	8008780 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001104:	4b58      	ldr	r3, [pc, #352]	; (8001268 <pvPortMallocMicroROS+0x174>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 800110c:	f000 f980 	bl	8001410 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001110:	4b56      	ldr	r3, [pc, #344]	; (800126c <pvPortMallocMicroROS+0x178>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4013      	ands	r3, r2
 8001118:	2b00      	cmp	r3, #0
 800111a:	f040 808e 	bne.w	800123a <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d01d      	beq.n	8001160 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001124:	2208      	movs	r2, #8
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	2b00      	cmp	r3, #0
 8001134:	d014      	beq.n	8001160 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f023 0307 	bic.w	r3, r3, #7
 800113c:	3308      	adds	r3, #8
 800113e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00a      	beq.n	8001160 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800114a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800114e:	f383 8811 	msr	BASEPRI, r3
 8001152:	f3bf 8f6f 	isb	sy
 8001156:	f3bf 8f4f 	dsb	sy
 800115a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800115c:	bf00      	nop
 800115e:	e7fe      	b.n	800115e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d069      	beq.n	800123a <pvPortMallocMicroROS+0x146>
 8001166:	4b42      	ldr	r3, [pc, #264]	; (8001270 <pvPortMallocMicroROS+0x17c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	429a      	cmp	r2, r3
 800116e:	d864      	bhi.n	800123a <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001170:	4b40      	ldr	r3, [pc, #256]	; (8001274 <pvPortMallocMicroROS+0x180>)
 8001172:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001174:	4b3f      	ldr	r3, [pc, #252]	; (8001274 <pvPortMallocMicroROS+0x180>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800117a:	e004      	b.n	8001186 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	429a      	cmp	r2, r3
 800118e:	d903      	bls.n	8001198 <pvPortMallocMicroROS+0xa4>
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1f1      	bne.n	800117c <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001198:	4b33      	ldr	r3, [pc, #204]	; (8001268 <pvPortMallocMicroROS+0x174>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800119e:	429a      	cmp	r2, r3
 80011a0:	d04b      	beq.n	800123a <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2208      	movs	r2, #8
 80011a8:	4413      	add	r3, r2
 80011aa:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	6a3b      	ldr	r3, [r7, #32]
 80011b2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	1ad2      	subs	r2, r2, r3
 80011bc:	2308      	movs	r3, #8
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d91f      	bls.n	8001204 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80011c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00a      	beq.n	80011ec <pvPortMallocMicroROS+0xf8>
	__asm volatile
 80011d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011da:	f383 8811 	msr	BASEPRI, r3
 80011de:	f3bf 8f6f 	isb	sy
 80011e2:	f3bf 8f4f 	dsb	sy
 80011e6:	613b      	str	r3, [r7, #16]
}
 80011e8:	bf00      	nop
 80011ea:	e7fe      	b.n	80011ea <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	1ad2      	subs	r2, r2, r3
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80011fe:	69b8      	ldr	r0, [r7, #24]
 8001200:	f000 f968 	bl	80014d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <pvPortMallocMicroROS+0x17c>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	4a18      	ldr	r2, [pc, #96]	; (8001270 <pvPortMallocMicroROS+0x17c>)
 8001210:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <pvPortMallocMicroROS+0x17c>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4b18      	ldr	r3, [pc, #96]	; (8001278 <pvPortMallocMicroROS+0x184>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d203      	bcs.n	8001226 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <pvPortMallocMicroROS+0x17c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a15      	ldr	r2, [pc, #84]	; (8001278 <pvPortMallocMicroROS+0x184>)
 8001224:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <pvPortMallocMicroROS+0x178>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	431a      	orrs	r2, r3
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800123a:	f007 faaf 	bl	800879c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00a      	beq.n	800125e <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8001248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800124c:	f383 8811 	msr	BASEPRI, r3
 8001250:	f3bf 8f6f 	isb	sy
 8001254:	f3bf 8f4f 	dsb	sy
 8001258:	60fb      	str	r3, [r7, #12]
}
 800125a:	bf00      	nop
 800125c:	e7fe      	b.n	800125c <pvPortMallocMicroROS+0x168>
	return pvReturn;
 800125e:	69fb      	ldr	r3, [r7, #28]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20003d34 	.word	0x20003d34
 800126c:	20003d40 	.word	0x20003d40
 8001270:	20003d38 	.word	0x20003d38
 8001274:	20003d2c 	.word	0x20003d2c
 8001278:	20003d3c 	.word	0x20003d3c

0800127c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d048      	beq.n	8001320 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800128e:	2308      	movs	r3, #8
 8001290:	425b      	negs	r3, r3
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	4413      	add	r3, r2
 8001296:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <vPortFreeMicroROS+0xac>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10a      	bne.n	80012c0 <vPortFreeMicroROS+0x44>
	__asm volatile
 80012aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ae:	f383 8811 	msr	BASEPRI, r3
 80012b2:	f3bf 8f6f 	isb	sy
 80012b6:	f3bf 8f4f 	dsb	sy
 80012ba:	60fb      	str	r3, [r7, #12]
}
 80012bc:	bf00      	nop
 80012be:	e7fe      	b.n	80012be <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00a      	beq.n	80012de <vPortFreeMicroROS+0x62>
	__asm volatile
 80012c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012cc:	f383 8811 	msr	BASEPRI, r3
 80012d0:	f3bf 8f6f 	isb	sy
 80012d4:	f3bf 8f4f 	dsb	sy
 80012d8:	60bb      	str	r3, [r7, #8]
}
 80012da:	bf00      	nop
 80012dc:	e7fe      	b.n	80012dc <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <vPortFreeMicroROS+0xac>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d019      	beq.n	8001320 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d115      	bne.n	8001320 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <vPortFreeMicroROS+0xac>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	401a      	ands	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001304:	f007 fa3c 	bl	8008780 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <vPortFreeMicroROS+0xb0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4413      	add	r3, r2
 8001312:	4a06      	ldr	r2, [pc, #24]	; (800132c <vPortFreeMicroROS+0xb0>)
 8001314:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001316:	6938      	ldr	r0, [r7, #16]
 8001318:	f000 f8dc 	bl	80014d4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800131c:	f007 fa3e 	bl	800879c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001320:	bf00      	nop
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20003d40 	.word	0x20003d40
 800132c:	20003d38 	.word	0x20003d38

08001330 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800133c:	2308      	movs	r3, #8
 800133e:	425b      	negs	r3, r3
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	4413      	add	r3, r2
 8001344:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <getBlockSize+0x38>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	43db      	mvns	r3, r3
 8001354:	4013      	ands	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]

	return count;
 8001358:	68fb      	ldr	r3, [r7, #12]
}
 800135a:	4618      	mov	r0, r3
 800135c:	371c      	adds	r7, #28
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20003d40 	.word	0x20003d40

0800136c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001376:	f007 fa03 	bl	8008780 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800137a:	6838      	ldr	r0, [r7, #0]
 800137c:	f7ff feba 	bl	80010f4 <pvPortMallocMicroROS>
 8001380:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d017      	beq.n	80013b8 <pvPortReallocMicroROS+0x4c>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d014      	beq.n	80013b8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffce 	bl	8001330 <getBlockSize>
 8001394:	4603      	mov	r3, r0
 8001396:	2208      	movs	r2, #8
 8001398:	1a9b      	subs	r3, r3, r2
 800139a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d201      	bcs.n	80013a8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	68b8      	ldr	r0, [r7, #8]
 80013ae:	f015 fef2 	bl	8017196 <memcpy>

		vPortFreeMicroROS(pv);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ff62 	bl	800127c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80013b8:	f007 f9f0 	bl	800879c <xTaskResumeAll>

	return newmem;
 80013bc:	68bb      	ldr	r3, [r7, #8]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80013d0:	f007 f9d6 	bl	8008780 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	fb02 f303 	mul.w	r3, r2, r3
 80013dc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f7ff fe88 	bl	80010f4 <pvPortMallocMicroROS>
 80013e4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	613b      	str	r3, [r7, #16]

  	while(count--)
 80013ea:	e004      	b.n	80013f6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	613a      	str	r2, [r7, #16]
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	1e5a      	subs	r2, r3, #1
 80013fa:	617a      	str	r2, [r7, #20]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f5      	bne.n	80013ec <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001400:	f007 f9cc 	bl	800879c <xTaskResumeAll>
  	return mem;
 8001404:	68fb      	ldr	r3, [r7, #12]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001416:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800141a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800141c:	4b27      	ldr	r3, [pc, #156]	; (80014bc <prvHeapInit+0xac>)
 800141e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00c      	beq.n	8001444 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3307      	adds	r3, #7
 800142e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f023 0307 	bic.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <prvHeapInit+0xac>)
 8001440:	4413      	add	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001448:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <prvHeapInit+0xb0>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <prvHeapInit+0xb0>)
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	4413      	add	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800145c:	2208      	movs	r2, #8
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	1a9b      	subs	r3, r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f023 0307 	bic.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4a15      	ldr	r2, [pc, #84]	; (80014c4 <prvHeapInit+0xb4>)
 8001470:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <prvHeapInit+0xb4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2200      	movs	r2, #0
 8001478:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <prvHeapInit+0xb4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	1ad2      	subs	r2, r2, r3
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <prvHeapInit+0xb4>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <prvHeapInit+0xb8>)
 800149e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4a09      	ldr	r2, [pc, #36]	; (80014cc <prvHeapInit+0xbc>)
 80014a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <prvHeapInit+0xc0>)
 80014aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80014ae:	601a      	str	r2, [r3, #0]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	2000012c 	.word	0x2000012c
 80014c0:	20003d2c 	.word	0x20003d2c
 80014c4:	20003d34 	.word	0x20003d34
 80014c8:	20003d3c 	.word	0x20003d3c
 80014cc:	20003d38 	.word	0x20003d38
 80014d0:	20003d40 	.word	0x20003d40

080014d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80014dc:	4b28      	ldr	r3, [pc, #160]	; (8001580 <prvInsertBlockIntoFreeList+0xac>)
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	e002      	b.n	80014e8 <prvInsertBlockIntoFreeList+0x14>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d8f7      	bhi.n	80014e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	4413      	add	r3, r2
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	429a      	cmp	r2, r3
 8001502:	d108      	bne.n	8001516 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	441a      	add	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	441a      	add	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d118      	bne.n	800155c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <prvInsertBlockIntoFreeList+0xb0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d00d      	beq.n	8001552 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	441a      	add	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	e008      	b.n	8001564 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <prvInsertBlockIntoFreeList+0xb0>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	e003      	b.n	8001564 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	429a      	cmp	r2, r3
 800156a:	d002      	beq.n	8001572 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20003d2c 	.word	0x20003d2c
 8001584:	20003d34 	.word	0x20003d34

08001588 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001596:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800159c:	4904      	ldr	r1, [pc, #16]	; (80015b0 <cubemx_transport_open+0x28>)
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f004 fde0 	bl	8006164 <HAL_UART_Receive_DMA>
    return true;
 80015a4:	2301      	movs	r3, #1
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20003d44 	.word	0x20003d44

080015b4 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80015c2:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f004 fdf2 	bl	80061ae <HAL_UART_DMAStop>
    return true;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80015e8:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b20      	cmp	r3, #32
 80015f4:	d11c      	bne.n	8001630 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	461a      	mov	r2, r3
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	6978      	ldr	r0, [r7, #20]
 8001600:	f004 fd40 	bl	8006084 <HAL_UART_Transmit_DMA>
 8001604:	4603      	mov	r3, r0
 8001606:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001608:	e002      	b.n	8001610 <cubemx_transport_write+0x3c>
            osDelay(1);
 800160a:	2001      	movs	r0, #1
 800160c:	f006 f86c 	bl	80076e8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001610:	7cfb      	ldrb	r3, [r7, #19]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d105      	bne.n	8001622 <cubemx_transport_write+0x4e>
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b20      	cmp	r3, #32
 8001620:	d1f3      	bne.n	800160a <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001622:	7cfb      	ldrb	r3, [r7, #19]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <cubemx_transport_write+0x58>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	e002      	b.n	8001632 <cubemx_transport_write+0x5e>
 800162c:	2300      	movs	r3, #0
 800162e:	e000      	b.n	8001632 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001630:	2300      	movs	r3, #0
    }
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001650:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001656:	b672      	cpsid	i
}
 8001658:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001666:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <cubemx_transport_read+0x9c>)
 8001668:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800166a:	b662      	cpsie	i
}
 800166c:	bf00      	nop
        __enable_irq();
        ms_used++;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3301      	adds	r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001674:	2001      	movs	r0, #1
 8001676:	f006 f837 	bl	80076e8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <cubemx_transport_read+0xa0>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <cubemx_transport_read+0x9c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d103      	bne.n	800168e <cubemx_transport_read+0x52>
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	dbe3      	blt.n	8001656 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001692:	e011      	b.n	80016b8 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <cubemx_transport_read+0xa0>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	440b      	add	r3, r1
 800169e:	4910      	ldr	r1, [pc, #64]	; (80016e0 <cubemx_transport_read+0xa4>)
 80016a0:	5c8a      	ldrb	r2, [r1, r2]
 80016a2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <cubemx_transport_read+0xa0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3301      	adds	r3, #1
 80016aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <cubemx_transport_read+0xa0>)
 80016b0:	6013      	str	r3, [r2, #0]
        wrote++;
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	3301      	adds	r3, #1
 80016b6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <cubemx_transport_read+0xa0>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <cubemx_transport_read+0x9c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d003      	beq.n	80016cc <cubemx_transport_read+0x90>
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d3e3      	bcc.n	8001694 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80016cc:	69bb      	ldr	r3, [r7, #24]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3720      	adds	r7, #32
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20004548 	.word	0x20004548
 80016dc:	20004544 	.word	0x20004544
 80016e0:	20003d44 	.word	0x20003d44

080016e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	flag2 = 1;
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <main+0x60>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ee:	f001 fae7 	bl	8002cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f2:	f000 f833 	bl	800175c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f6:	f000 fa17 	bl	8001b28 <MX_GPIO_Init>
  MX_DMA_Init();
 80016fa:	f000 f9ed 	bl	8001ad8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016fe:	f000 f9c1 	bl	8001a84 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001702:	f000 f971 	bl	80019e8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001706:	f000 f893 	bl	8001830 <MX_I2C1_Init>
  MX_I2C3_Init();
 800170a:	f000 f8bf 	bl	800188c <MX_I2C3_Init>
  MX_TIM2_Init();
 800170e:	f000 f8eb 	bl	80018e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001712:	2100      	movs	r1, #0
 8001714:	480c      	ldr	r0, [pc, #48]	; (8001748 <main+0x64>)
 8001716:	f003 fdb9 	bl	800528c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800171a:	2104      	movs	r1, #4
 800171c:	480a      	ldr	r0, [pc, #40]	; (8001748 <main+0x64>)
 800171e:	f003 fdb5 	bl	800528c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001722:	480a      	ldr	r0, [pc, #40]	; (800174c <main+0x68>)
 8001724:	f003 fcf6 	bl	8005114 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001728:	f005 ff02 	bl	8007530 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800172c:	4a08      	ldr	r2, [pc, #32]	; (8001750 <main+0x6c>)
 800172e:	2100      	movs	r1, #0
 8001730:	4808      	ldr	r0, [pc, #32]	; (8001754 <main+0x70>)
 8001732:	f005 ff47 	bl	80075c4 <osThreadNew>
 8001736:	4603      	mov	r3, r0
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <main+0x74>)
 800173a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800173c:	f005 ff1c 	bl	8007578 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001740:	e7fe      	b.n	8001740 <main+0x5c>
 8001742:	bf00      	nop
 8001744:	20007719 	.word	0x20007719
 8001748:	200045f4 	.word	0x200045f4
 800174c:	2000463c 	.word	0x2000463c
 8001750:	08018028 	.word	0x08018028
 8001754:	08001c21 	.word	0x08001c21
 8001758:	2000478c 	.word	0x2000478c

0800175c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b094      	sub	sp, #80	; 0x50
 8001760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001762:	f107 0320 	add.w	r3, r7, #32
 8001766:	2230      	movs	r2, #48	; 0x30
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f015 fbf4 	bl	8016f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	4b28      	ldr	r3, [pc, #160]	; (8001828 <SystemClock_Config+0xcc>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	4a27      	ldr	r2, [pc, #156]	; (8001828 <SystemClock_Config+0xcc>)
 800178a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178e:	6413      	str	r3, [r2, #64]	; 0x40
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <SystemClock_Config+0xcc>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	4b22      	ldr	r3, [pc, #136]	; (800182c <SystemClock_Config+0xd0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017a8:	4a20      	ldr	r2, [pc, #128]	; (800182c <SystemClock_Config+0xd0>)
 80017aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <SystemClock_Config+0xd0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017bc:	2301      	movs	r3, #1
 80017be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c6:	2302      	movs	r3, #2
 80017c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017d0:	2304      	movs	r3, #4
 80017d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80017d4:	2354      	movs	r3, #84	; 0x54
 80017d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d8:	2302      	movs	r3, #2
 80017da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017dc:	2307      	movs	r3, #7
 80017de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e0:	f107 0320 	add.w	r3, r7, #32
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 ff7b 	bl	80046e0 <HAL_RCC_OscConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017f0:	f000 fd48 	bl	8002284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f4:	230f      	movs	r3, #15
 80017f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f8:	2302      	movs	r3, #2
 80017fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	2102      	movs	r1, #2
 8001810:	4618      	mov	r0, r3
 8001812:	f003 f9dd 	bl	8004bd0 <HAL_RCC_ClockConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800181c:	f000 fd32 	bl	8002284 <Error_Handler>
  }
}
 8001820:	bf00      	nop
 8001822:	3750      	adds	r7, #80	; 0x50
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40023800 	.word	0x40023800
 800182c:	40007000 	.word	0x40007000

08001830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <MX_I2C1_Init+0x50>)
 8001836:	4a13      	ldr	r2, [pc, #76]	; (8001884 <MX_I2C1_Init+0x54>)
 8001838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_I2C1_Init+0x50>)
 800183c:	4a12      	ldr	r2, [pc, #72]	; (8001888 <MX_I2C1_Init+0x58>)
 800183e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_I2C1_Init+0x50>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_I2C1_Init+0x50>)
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_I2C1_Init+0x50>)
 800184e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001852:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <MX_I2C1_Init+0x50>)
 8001856:	2200      	movs	r2, #0
 8001858:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_I2C1_Init+0x50>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <MX_I2C1_Init+0x50>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_I2C1_Init+0x50>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800186c:	4804      	ldr	r0, [pc, #16]	; (8001880 <MX_I2C1_Init+0x50>)
 800186e:	f002 f8eb 	bl	8003a48 <HAL_I2C_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001878:	f000 fd04 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	2000454c 	.word	0x2000454c
 8001884:	40005400 	.word	0x40005400
 8001888:	000186a0 	.word	0x000186a0

0800188c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <MX_I2C3_Init+0x50>)
 8001892:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <MX_I2C3_Init+0x54>)
 8001894:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_I2C3_Init+0x50>)
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <MX_I2C3_Init+0x58>)
 800189a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <MX_I2C3_Init+0x50>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <MX_I2C3_Init+0x50>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <MX_I2C3_Init+0x50>)
 80018aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ae:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <MX_I2C3_Init+0x50>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <MX_I2C3_Init+0x50>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <MX_I2C3_Init+0x50>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <MX_I2C3_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018c8:	4804      	ldr	r0, [pc, #16]	; (80018dc <MX_I2C3_Init+0x50>)
 80018ca:	f002 f8bd 	bl	8003a48 <HAL_I2C_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80018d4:	f000 fcd6 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200045a0 	.word	0x200045a0
 80018e0:	40005c00 	.word	0x40005c00
 80018e4:	000186a0 	.word	0x000186a0

080018e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08e      	sub	sp, #56	; 0x38
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	f107 0320 	add.w	r3, r7, #32
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
 8001914:	615a      	str	r2, [r3, #20]
 8001916:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001918:	4b32      	ldr	r3, [pc, #200]	; (80019e4 <MX_TIM2_Init+0xfc>)
 800191a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800191e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5;
 8001920:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <MX_TIM2_Init+0xfc>)
 8001922:	2205      	movs	r2, #5
 8001924:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001926:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <MX_TIM2_Init+0xfc>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800192c:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <MX_TIM2_Init+0xfc>)
 800192e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001932:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001934:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <MX_TIM2_Init+0xfc>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800193a:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <MX_TIM2_Init+0xfc>)
 800193c:	2280      	movs	r2, #128	; 0x80
 800193e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001940:	4828      	ldr	r0, [pc, #160]	; (80019e4 <MX_TIM2_Init+0xfc>)
 8001942:	f003 fb97 	bl	8005074 <HAL_TIM_Base_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800194c:	f000 fc9a 	bl	8002284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195a:	4619      	mov	r1, r3
 800195c:	4821      	ldr	r0, [pc, #132]	; (80019e4 <MX_TIM2_Init+0xfc>)
 800195e:	f003 fef7 	bl	8005750 <HAL_TIM_ConfigClockSource>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001968:	f000 fc8c 	bl	8002284 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800196c:	481d      	ldr	r0, [pc, #116]	; (80019e4 <MX_TIM2_Init+0xfc>)
 800196e:	f003 fc33 	bl	80051d8 <HAL_TIM_PWM_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001978:	f000 fc84 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001984:	f107 0320 	add.w	r3, r7, #32
 8001988:	4619      	mov	r1, r3
 800198a:	4816      	ldr	r0, [pc, #88]	; (80019e4 <MX_TIM2_Init+0xfc>)
 800198c:	f004 faa8 	bl	8005ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001996:	f000 fc75 	bl	8002284 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800199a:	2360      	movs	r3, #96	; 0x60
 800199c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	2200      	movs	r2, #0
 80019ae:	4619      	mov	r1, r3
 80019b0:	480c      	ldr	r0, [pc, #48]	; (80019e4 <MX_TIM2_Init+0xfc>)
 80019b2:	f003 fe0b 	bl	80055cc <HAL_TIM_PWM_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80019bc:	f000 fc62 	bl	8002284 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2204      	movs	r2, #4
 80019c4:	4619      	mov	r1, r3
 80019c6:	4807      	ldr	r0, [pc, #28]	; (80019e4 <MX_TIM2_Init+0xfc>)
 80019c8:	f003 fe00 	bl	80055cc <HAL_TIM_PWM_ConfigChannel>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80019d2:	f000 fc57 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019d6:	4803      	ldr	r0, [pc, #12]	; (80019e4 <MX_TIM2_Init+0xfc>)
 80019d8:	f000 fec6 	bl	8002768 <HAL_TIM_MspPostInit>

}
 80019dc:	bf00      	nop
 80019de:	3738      	adds	r7, #56	; 0x38
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	200045f4 	.word	0x200045f4

080019e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fc:	463b      	mov	r3, r7
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a04:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <MX_TIM3_Init+0x94>)
 8001a06:	4a1e      	ldr	r2, [pc, #120]	; (8001a80 <MX_TIM3_Init+0x98>)
 8001a08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MX_TIM3_Init+0x94>)
 8001a0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <MX_TIM3_Init+0x94>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4199;
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <MX_TIM3_Init+0x94>)
 8001a1a:	f241 0267 	movw	r2, #4199	; 0x1067
 8001a1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MX_TIM3_Init+0x94>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <MX_TIM3_Init+0x94>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a2c:	4813      	ldr	r0, [pc, #76]	; (8001a7c <MX_TIM3_Init+0x94>)
 8001a2e:	f003 fb21 	bl	8005074 <HAL_TIM_Base_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a38:	f000 fc24 	bl	8002284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a42:	f107 0308 	add.w	r3, r7, #8
 8001a46:	4619      	mov	r1, r3
 8001a48:	480c      	ldr	r0, [pc, #48]	; (8001a7c <MX_TIM3_Init+0x94>)
 8001a4a:	f003 fe81 	bl	8005750 <HAL_TIM_ConfigClockSource>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a54:	f000 fc16 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a60:	463b      	mov	r3, r7
 8001a62:	4619      	mov	r1, r3
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_TIM3_Init+0x94>)
 8001a66:	f004 fa3b 	bl	8005ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a70:	f000 fc08 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	2000463c 	.word	0x2000463c
 8001a80:	40000400 	.word	0x40000400

08001a84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <MX_USART2_UART_Init+0x50>)
 8001a8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001aaa:	220c      	movs	r2, #12
 8001aac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001abc:	f004 fa92 	bl	8005fe4 <HAL_UART_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ac6:	f000 fbdd 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20004684 	.word	0x20004684
 8001ad4:	40004400 	.word	0x40004400

08001ad8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <MX_DMA_Init+0x4c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <MX_DMA_Init+0x4c>)
 8001ae8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <MX_DMA_Init+0x4c>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2105      	movs	r1, #5
 8001afe:	2010      	movs	r0, #16
 8001b00:	f001 f9d8 	bl	8002eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b04:	2010      	movs	r0, #16
 8001b06:	f001 f9f1 	bl	8002eec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2105      	movs	r1, #5
 8001b0e:	2011      	movs	r0, #17
 8001b10:	f001 f9d0 	bl	8002eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001b14:	2011      	movs	r0, #17
 8001b16:	f001 f9e9 	bl	8002eec <HAL_NVIC_EnableIRQ>

}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800

08001b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a2c      	ldr	r2, [pc, #176]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a25      	ldr	r2, [pc, #148]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a1e      	ldr	r2, [pc, #120]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a17      	ldr	r2, [pc, #92]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2120      	movs	r1, #32
 8001bb2:	4812      	ldr	r0, [pc, #72]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001bb4:	f001 ff2e 	bl	8003a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bbe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480c      	ldr	r0, [pc, #48]	; (8001c00 <MX_GPIO_Init+0xd8>)
 8001bd0:	f001 fd9c 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	4804      	ldr	r0, [pc, #16]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001bec:	f001 fd8e 	bl	800370c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bf0:	bf00      	nop
 8001bf2:	3728      	adds	r7, #40	; 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	40020800 	.word	0x40020800

08001c04 <subscription_callback>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void subscription_callback(const void * msgin)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  // Cast received message to used type
  const std_msgs__msg__Int32 * msgSubscriber = (const std_msgs__msg__Int32 *)msgin;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	60fb      	str	r3, [r7, #12]
}
 8001c10:	bf00      	nop
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	0000      	movs	r0, r0
	...

08001c20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c24:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8001c28:	af04      	add	r7, sp, #16
 8001c2a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c2e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c32:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	  // micro-ROS configuration
	flag4 = 1;
 8001c34:	4bc9      	ldr	r3, [pc, #804]	; (8001f5c <StartDefaultTask+0x33c>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]

	  rmw_uros_set_custom_transport(
 8001c3a:	4bc9      	ldr	r3, [pc, #804]	; (8001f60 <StartDefaultTask+0x340>)
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	4bc9      	ldr	r3, [pc, #804]	; (8001f64 <StartDefaultTask+0x344>)
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	4bc9      	ldr	r3, [pc, #804]	; (8001f68 <StartDefaultTask+0x348>)
 8001c44:	4ac9      	ldr	r2, [pc, #804]	; (8001f6c <StartDefaultTask+0x34c>)
 8001c46:	49ca      	ldr	r1, [pc, #808]	; (8001f70 <StartDefaultTask+0x350>)
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f009 fafd 	bl	800b248 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001c4e:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001c52:	4618      	mov	r0, r3
 8001c54:	f009 fa2a 	bl	800b0ac <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001c58:	4bc6      	ldr	r3, [pc, #792]	; (8001f74 <StartDefaultTask+0x354>)
 8001c5a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001c5e:	4bc6      	ldr	r3, [pc, #792]	; (8001f78 <StartDefaultTask+0x358>)
 8001c60:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001c64:	4bc5      	ldr	r3, [pc, #788]	; (8001f7c <StartDefaultTask+0x35c>)
 8001c66:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001c6a:	4bc5      	ldr	r3, [pc, #788]	; (8001f80 <StartDefaultTask+0x360>)
 8001c6c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001c70:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001c74:	4618      	mov	r0, r3
 8001c76:	f009 fa27 	bl	800b0c8 <rcutils_set_default_allocator>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f083 0301 	eor.w	r3, r3, #1
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d004      	beq.n	8001c90 <StartDefaultTask+0x70>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8001c86:	f240 2137 	movw	r1, #567	; 0x237
 8001c8a:	48be      	ldr	r0, [pc, #760]	; (8001f84 <StartDefaultTask+0x364>)
 8001c8c:	f015 f878 	bl	8016d80 <iprintf>
	  rcl_subscription_t subscriber;

	  rclc_executor_t executor;


	  allocator = rcl_get_default_allocator();
 8001c90:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f009 fa35 	bl	800b104 <rcutils_get_default_allocator>
 8001c9a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c9e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ca2:	f507 74ae 	add.w	r4, r7, #348	; 0x15c
 8001ca6:	461d      	mov	r5, r3
 8001ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cac:	682b      	ldr	r3, [r5, #0]
 8001cae:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8001cb0:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001cb4:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2100      	movs	r1, #0
 8001cbc:	f009 f900 	bl	800aec0 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "pt_node", "", &support);
 8001cc0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001cc4:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 8001cc8:	4aaf      	ldr	r2, [pc, #700]	; (8001f88 <StartDefaultTask+0x368>)
 8001cca:	49b0      	ldr	r1, [pc, #704]	; (8001f8c <StartDefaultTask+0x36c>)
 8001ccc:	f009 f942 	bl	800af54 <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 8001cd0:	f009 ffe6 	bl	800bca0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8001cda:	f507 70d4 	add.w	r0, r7, #424	; 0x1a8
 8001cde:	4bac      	ldr	r3, [pc, #688]	; (8001f90 <StartDefaultTask+0x370>)
 8001ce0:	f009 f974 	bl	800afcc <rclc_publisher_init_default>
	    &publisher,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32), //std_msgs/msg/Int32
	    "pt_publisher");

	  msgPublisher.data = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

	  // Create subscriber
	  rclc_subscription_init_default(
 8001cea:	f009 ffd9 	bl	800bca0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8001cf4:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001cf8:	4ba6      	ldr	r3, [pc, #664]	; (8001f94 <StartDefaultTask+0x374>)
 8001cfa:	f009 f99b 	bl	800b034 <rclc_subscription_init_default>
	    &subscriber,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    "pt_subscriber");

	  msgSubscriber.data = 0;
 8001cfe:	4ba6      	ldr	r3, [pc, #664]	; (8001f98 <StartDefaultTask+0x378>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]


	  executor = rclc_executor_get_zero_initialized_executor();
 8001d04:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d08:	f5a3 74ac 	sub.w	r4, r3, #344	; 0x158
 8001d0c:	f107 0318 	add.w	r3, r7, #24
 8001d10:	4618      	mov	r0, r3
 8001d12:	f008 fe03 	bl	800a91c <rclc_executor_get_zero_initialized_executor>
 8001d16:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d1a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001d1e:	4620      	mov	r0, r4
 8001d20:	4619      	mov	r1, r3
 8001d22:	2388      	movs	r3, #136	; 0x88
 8001d24:	461a      	mov	r2, r3
 8001d26:	f015 fa36 	bl	8017196 <memcpy>
	  rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001d2a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001d2e:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8001d32:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8001d36:	2201      	movs	r2, #1
 8001d38:	f008 fdfa 	bl	800a930 <rclc_executor_init>
	  rclc_executor_add_subscription(
 8001d3c:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8001d40:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8001d44:	2300      	movs	r3, #0
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	4b94      	ldr	r3, [pc, #592]	; (8001f9c <StartDefaultTask+0x37c>)
 8001d4a:	4a93      	ldr	r2, [pc, #588]	; (8001f98 <StartDefaultTask+0x378>)
 8001d4c:	f008 fe60 	bl	800aa10 <rclc_executor_add_subscription>
	   &executor, &subscriber, &msgSubscriber,
	    &subscription_callback, ON_NEW_DATA);

	  // Spin executor to receive messages
	  rclc_executor_spin_some(&executor,1000*1000*40);
 8001d50:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001d54:	4a92      	ldr	r2, [pc, #584]	; (8001fa0 <StartDefaultTask+0x380>)
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	4608      	mov	r0, r1
 8001d5c:	f009 f878 	bl	800ae50 <rclc_executor_spin_some>
	  //rcl_subscription_fini(&subscriber, &node);
	  //rcl_node_fini(&node);

	  HAL_StatusTypeDef panStatus;
	  uint8_t as5600_panData[3] = {0};
 8001d60:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d64:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001d68:	4a8e      	ldr	r2, [pc, #568]	; (8001fa4 <StartDefaultTask+0x384>)
 8001d6a:	8812      	ldrh	r2, [r2, #0]
 8001d6c:	801a      	strh	r2, [r3, #0]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	709a      	strb	r2, [r3, #2]
	  uint16_t panLowbyte;
	  uint16_t panHighbyte;
	  uint16_t panRawAngle;
	  float panFloatAngle;
	  uint16_t panDegAngle;
	  int panFlag = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

	  HAL_StatusTypeDef tiltStatus;
	  uint8_t as5600_tiltData[3] = {0};
 8001d78:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d7c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001d80:	4a88      	ldr	r2, [pc, #544]	; (8001fa4 <StartDefaultTask+0x384>)
 8001d82:	8812      	ldrh	r2, [r2, #0]
 8001d84:	801a      	strh	r2, [r3, #0]
 8001d86:	2200      	movs	r2, #0
 8001d88:	709a      	strb	r2, [r3, #2]
	  uint16_t tiltLowbyte;
	  uint16_t tiltHighbyte;
	  uint16_t tiltRawAngle;
	  float tiltFloatAngle;
	  uint16_t tiltDegAngle;
	  int tiltFlag = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200


	  int64_t newPanTarget = 0;
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	e9c7 237e 	strd	r2, r3, [r7, #504]	; 0x1f8
	  int64_t newTiltTarget = 0;
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	e9c7 237c 	strd	r2, r3, [r7, #496]	; 0x1f0
	  int64_t oldPanTarget = 0;
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
	  int64_t oldTiltTarget = 0;
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	e9c7 2382 	strd	r2, r3, [r7, #520]	; 0x208

	  const float panKp = 300;
 8001dc0:	4b79      	ldr	r3, [pc, #484]	; (8001fa8 <StartDefaultTask+0x388>)
 8001dc2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	  const float panKd = 120;
 8001dc6:	4b79      	ldr	r3, [pc, #484]	; (8001fac <StartDefaultTask+0x38c>)
 8001dc8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
	  const float tiltKp = 100;
 8001dcc:	4b78      	ldr	r3, [pc, #480]	; (8001fb0 <StartDefaultTask+0x390>)
 8001dce:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	  const float tiltKd = 40;
 8001dd2:	4b78      	ldr	r3, [pc, #480]	; (8001fb4 <StartDefaultTask+0x394>)
 8001dd4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

	  uint32_t panAndTilt = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

	  while(1)
	  {
		  flag5 = 1;
 8001dde:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <StartDefaultTask+0x398>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]
		  if(flag == 1)
 8001de4:	4b75      	ldr	r3, [pc, #468]	; (8001fbc <StartDefaultTask+0x39c>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d1f8      	bne.n	8001dde <StartDefaultTask+0x1be>
		  	{
		  		flag = 0;
 8001dec:	4b73      	ldr	r3, [pc, #460]	; (8001fbc <StartDefaultTask+0x39c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
		  		flag6 = 1;
 8001df2:	4b73      	ldr	r3, [pc, #460]	; (8001fc0 <StartDefaultTask+0x3a0>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]

		  		tiltTarget = msgSubscriber.data >> 9;
 8001df8:	4b67      	ldr	r3, [pc, #412]	; (8001f98 <StartDefaultTask+0x378>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	125b      	asrs	r3, r3, #9
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	4b70      	ldr	r3, [pc, #448]	; (8001fc4 <StartDefaultTask+0x3a4>)
 8001e02:	801a      	strh	r2, [r3, #0]
		  		panTarget = msgSubscriber.data & 511;
 8001e04:	4b64      	ldr	r3, [pc, #400]	; (8001f98 <StartDefaultTask+0x378>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	4b6d      	ldr	r3, [pc, #436]	; (8001fc8 <StartDefaultTask+0x3a8>)
 8001e12:	801a      	strh	r2, [r3, #0]

		  		panStatus = HAL_I2C_Mem_Read(&hi2c1, AS5600_ADDR_PAN, 0x0B, 1, as5600_panData, 3, HAL_MAX_DELAY);
 8001e14:	236c      	movs	r3, #108	; 0x6c
 8001e16:	b299      	uxth	r1, r3
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e1c:	9302      	str	r3, [sp, #8]
 8001e1e:	2303      	movs	r3, #3
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	220b      	movs	r2, #11
 8001e2c:	4867      	ldr	r0, [pc, #412]	; (8001fcc <StartDefaultTask+0x3ac>)
 8001e2e:	f001 ff4f 	bl	8003cd0 <HAL_I2C_Mem_Read>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f887 31db 	strb.w	r3, [r7, #475]	; 0x1db

		  		panHighbyte = as5600_panData[1];
 8001e38:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001e3c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001e40:	785b      	ldrb	r3, [r3, #1]
 8001e42:	f8a7 31d8 	strh.w	r3, [r7, #472]	; 0x1d8
		  		panLowbyte = as5600_panData[2];
 8001e46:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001e4a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001e4e:	789b      	ldrb	r3, [r3, #2]
 8001e50:	f8a7 31d6 	strh.w	r3, [r7, #470]	; 0x1d6
		  		panRawAngle = panHighbyte << 8 | panLowbyte;
 8001e54:	f8b7 31d8 	ldrh.w	r3, [r7, #472]	; 0x1d8
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	b21a      	sxth	r2, r3
 8001e5c:	f9b7 31d6 	ldrsh.w	r3, [r7, #470]	; 0x1d6
 8001e60:	4313      	orrs	r3, r2
 8001e62:	b21b      	sxth	r3, r3
 8001e64:	f8a7 31d4 	strh.w	r3, [r7, #468]	; 0x1d4
		  		panFloatAngle = panRawAngle * 0.087890625;
 8001e68:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fb71 	bl	8000554 <__aeabi_i2d>
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	4b56      	ldr	r3, [pc, #344]	; (8001fd0 <StartDefaultTask+0x3b0>)
 8001e78:	f7fe fbd6 	bl	8000628 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	f7fe fe0a 	bl	8000a9c <__aeabi_d2f>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
		  		panDegAngle = (int)panFloatAngle;
 8001e8e:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 8001e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e96:	ee17 3a90 	vmov	r3, s15
 8001e9a:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
		  		if(panDegAngle < 156)
 8001e9e:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 8001ea2:	2b9b      	cmp	r3, #155	; 0x9b
 8001ea4:	d805      	bhi.n	8001eb2 <StartDefaultTask+0x292>
		  		{
		  		  panDegAngle = 360 -156 + panDegAngle;
 8001ea6:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 8001eaa:	33cc      	adds	r3, #204	; 0xcc
 8001eac:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
 8001eb0:	e004      	b.n	8001ebc <StartDefaultTask+0x29c>
		  		}
		  		else
		  		{
		  		  panDegAngle = panDegAngle - 156;
 8001eb2:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 8001eb6:	3b9c      	subs	r3, #156	; 0x9c
 8001eb8:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
		  		}

		  		tiltStatus = HAL_I2C_Mem_Read(&hi2c3, AS5600_ADDR_TILT, 0x0B, 1, as5600_tiltData, 3, HAL_MAX_DELAY);
 8001ebc:	236c      	movs	r3, #108	; 0x6c
 8001ebe:	b299      	uxth	r1, r3
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ec4:	9302      	str	r3, [sp, #8]
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	220b      	movs	r2, #11
 8001ed4:	483f      	ldr	r0, [pc, #252]	; (8001fd4 <StartDefaultTask+0x3b4>)
 8001ed6:	f001 fefb 	bl	8003cd0 <HAL_I2C_Mem_Read>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf

		  		tiltHighbyte = as5600_tiltData[1];
 8001ee0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001ee4:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ee8:	785b      	ldrb	r3, [r3, #1]
 8001eea:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc
		  		tiltLowbyte = as5600_tiltData[2];
 8001eee:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001ef2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ef6:	789b      	ldrb	r3, [r3, #2]
 8001ef8:	f8a7 31ca 	strh.w	r3, [r7, #458]	; 0x1ca
		  		tiltRawAngle = tiltHighbyte << 8 | tiltLowbyte;
 8001efc:	f8b7 31cc 	ldrh.w	r3, [r7, #460]	; 0x1cc
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	b21a      	sxth	r2, r3
 8001f04:	f9b7 31ca 	ldrsh.w	r3, [r7, #458]	; 0x1ca
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	f8a7 31c8 	strh.w	r3, [r7, #456]	; 0x1c8
		  		tiltFloatAngle = tiltRawAngle * 0.087890625;
 8001f10:	f8b7 31c8 	ldrh.w	r3, [r7, #456]	; 0x1c8
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fb1d 	bl	8000554 <__aeabi_i2d>
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <StartDefaultTask+0x3b0>)
 8001f20:	f7fe fb82 	bl	8000628 <__aeabi_dmul>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f7fe fdb6 	bl	8000a9c <__aeabi_d2f>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
		  		tiltDegAngle = (int)tiltFloatAngle;
 8001f36:	edd7 7a71 	vldr	s15, [r7, #452]	; 0x1c4
 8001f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f3e:	ee17 3a90 	vmov	r3, s15
 8001f42:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		  		if(tiltDegAngle < 104)
 8001f46:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 8001f4a:	2b67      	cmp	r3, #103	; 0x67
 8001f4c:	d844      	bhi.n	8001fd8 <StartDefaultTask+0x3b8>
		  		{
		  		  tiltDegAngle = 360 -104 + tiltDegAngle;
 8001f4e:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 8001f52:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f56:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
 8001f5a:	e042      	b.n	8001fe2 <StartDefaultTask+0x3c2>
 8001f5c:	2000771b 	.word	0x2000771b
 8001f60:	0800163d 	.word	0x0800163d
 8001f64:	080015d5 	.word	0x080015d5
 8001f68:	080015b5 	.word	0x080015b5
 8001f6c:	08001589 	.word	0x08001589
 8001f70:	20004684 	.word	0x20004684
 8001f74:	08002291 	.word	0x08002291
 8001f78:	080022d5 	.word	0x080022d5
 8001f7c:	0800230d 	.word	0x0800230d
 8001f80:	08002379 	.word	0x08002379
 8001f84:	08017f7c 	.word	0x08017f7c
 8001f88:	08017fa4 	.word	0x08017fa4
 8001f8c:	08017fa8 	.word	0x08017fa8
 8001f90:	08017fb0 	.word	0x08017fb0
 8001f94:	08017fc0 	.word	0x08017fc0
 8001f98:	20007720 	.word	0x20007720
 8001f9c:	08001c05 	.word	0x08001c05
 8001fa0:	02625a00 	.word	0x02625a00
 8001fa4:	08017fec 	.word	0x08017fec
 8001fa8:	43960000 	.word	0x43960000
 8001fac:	42f00000 	.word	0x42f00000
 8001fb0:	42c80000 	.word	0x42c80000
 8001fb4:	42200000 	.word	0x42200000
 8001fb8:	2000771c 	.word	0x2000771c
 8001fbc:	20007718 	.word	0x20007718
 8001fc0:	2000771d 	.word	0x2000771d
 8001fc4:	20007726 	.word	0x20007726
 8001fc8:	20007724 	.word	0x20007724
 8001fcc:	2000454c 	.word	0x2000454c
 8001fd0:	3fb68000 	.word	0x3fb68000
 8001fd4:	200045a0 	.word	0x200045a0
		  		}
		  		else
		  		{
		  		  tiltDegAngle = tiltDegAngle - 104;
 8001fd8:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 8001fdc:	3b68      	subs	r3, #104	; 0x68
 8001fde:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		  		}

				//Setting Pan Position
				if(panTarget == panDegAngle)
 8001fe2:	4b91      	ldr	r3, [pc, #580]	; (8002228 <StartDefaultTask+0x608>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	f8b7 221e 	ldrh.w	r2, [r7, #542]	; 0x21e
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d108      	bne.n	8002000 <StartDefaultTask+0x3e0>
				{
				  panFlag = 1;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

				  TIM2->CCR1 = PAN_TURNING_NO;
 8001ff4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ff8:	f641 0238 	movw	r2, #6200	; 0x1838
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ffe:	e069      	b.n	80020d4 <StartDefaultTask+0x4b4>
				}
				else
				{
				  panFlag = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

				  newPanTarget = panTarget - panDegAngle;
 8002006:	4b88      	ldr	r3, [pc, #544]	; (8002228 <StartDefaultTask+0x608>)
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	17da      	asrs	r2, r3, #31
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	60fa      	str	r2, [r7, #12]
 8002018:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800201c:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
				  panDutyPWM = PAN_TURNING_NO + panKp*newPanTarget + panKd*((newPanTarget - oldPanTarget)/ENCODER_SAMPLE_TIME);
 8002020:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8002024:	f7fe fe5a 	bl	8000cdc <__aeabi_l2f>
 8002028:	ee07 0a10 	vmov	s14, r0
 800202c:	edd7 7a7b 	vldr	s15, [r7, #492]	; 0x1ec
 8002030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002034:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800222c <StartDefaultTask+0x60c>
 8002038:	ee77 7a87 	vadd.f32	s15, s15, s14
 800203c:	ee17 0a90 	vmov	r0, s15
 8002040:	f7fe fa9a 	bl	8000578 <__aeabi_f2d>
 8002044:	4680      	mov	r8, r0
 8002046:	4689      	mov	r9, r1
 8002048:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 800204c:	f7fe fa94 	bl	8000578 <__aeabi_f2d>
 8002050:	4604      	mov	r4, r0
 8002052:	460d      	mov	r5, r1
 8002054:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8002058:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 800205c:	ebb0 0a02 	subs.w	sl, r0, r2
 8002060:	eb61 0b03 	sbc.w	fp, r1, r3
 8002064:	4650      	mov	r0, sl
 8002066:	4659      	mov	r1, fp
 8002068:	f7fe fab0 	bl	80005cc <__aeabi_l2d>
 800206c:	a36c      	add	r3, pc, #432	; (adr r3, 8002220 <StartDefaultTask+0x600>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	f7fe fc03 	bl	800087c <__aeabi_ddiv>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4620      	mov	r0, r4
 800207c:	4629      	mov	r1, r5
 800207e:	f7fe fad3 	bl	8000628 <__aeabi_dmul>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4640      	mov	r0, r8
 8002088:	4649      	mov	r1, r9
 800208a:	f7fe f917 	bl	80002bc <__adddf3>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	f7fe fcd9 	bl	8000a4c <__aeabi_d2iz>
 800209a:	4603      	mov	r3, r0
 800209c:	4a64      	ldr	r2, [pc, #400]	; (8002230 <StartDefaultTask+0x610>)
 800209e:	6013      	str	r3, [r2, #0]
				  oldPanTarget = newPanTarget;
 80020a0:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 80020a4:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210

				  if(panDutyPWM < PAN_TURNING_MIN)
 80020a8:	4b61      	ldr	r3, [pc, #388]	; (8002230 <StartDefaultTask+0x610>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	da02      	bge.n	80020b6 <StartDefaultTask+0x496>
					panDutyPWM = PAN_TURNING_MIN;
 80020b0:	4b5f      	ldr	r3, [pc, #380]	; (8002230 <StartDefaultTask+0x610>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
				  if(panDutyPWM > PAN_TURNING_MAX)
 80020b6:	4b5e      	ldr	r3, [pc, #376]	; (8002230 <StartDefaultTask+0x610>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80020be:	4293      	cmp	r3, r2
 80020c0:	dd03      	ble.n	80020ca <StartDefaultTask+0x4aa>
					panDutyPWM = PAN_TURNING_MAX;
 80020c2:	4b5b      	ldr	r3, [pc, #364]	; (8002230 <StartDefaultTask+0x610>)
 80020c4:	f242 7210 	movw	r2, #10000	; 0x2710
 80020c8:	601a      	str	r2, [r3, #0]

				  TIM2->CCR1 = panDutyPWM;
 80020ca:	4b59      	ldr	r3, [pc, #356]	; (8002230 <StartDefaultTask+0x610>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020d2:	635a      	str	r2, [r3, #52]	; 0x34
				}

				//Setting Tilt Position
				if(tiltTarget == tiltDegAngle)
 80020d4:	4b57      	ldr	r3, [pc, #348]	; (8002234 <StartDefaultTask+0x614>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	f8b7 221c 	ldrh.w	r2, [r7, #540]	; 0x21c
 80020dc:	429a      	cmp	r2, r3
 80020de:	d108      	bne.n	80020f2 <StartDefaultTask+0x4d2>
				{
				  tiltFlag = 1;
 80020e0:	2301      	movs	r3, #1
 80020e2:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

				  TIM2->CCR2 = TILT_TURNING_NO;
 80020e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ee:	639a      	str	r2, [r3, #56]	; 0x38
 80020f0:	e06a      	b.n	80021c8 <StartDefaultTask+0x5a8>
				}
				else
				{
				  tiltFlag = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

				  newTiltTarget = tiltTarget - tiltDegAngle;
 80020f8:	4b4e      	ldr	r3, [pc, #312]	; (8002234 <StartDefaultTask+0x614>)
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	17da      	asrs	r2, r3, #31
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800210e:	e9c7 347c 	strd	r3, r4, [r7, #496]	; 0x1f0
				  tiltDutyPWM = TILT_TURNING_NO + tiltKp*newTiltTarget + tiltKd*((newTiltTarget - oldTiltTarget)/ENCODER_SAMPLE_TIME);
 8002112:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8002116:	f7fe fde1 	bl	8000cdc <__aeabi_l2f>
 800211a:	ee07 0a10 	vmov	s14, r0
 800211e:	edd7 7a79 	vldr	s15, [r7, #484]	; 0x1e4
 8002122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002126:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002238 <StartDefaultTask+0x618>
 800212a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800212e:	ee17 0a90 	vmov	r0, s15
 8002132:	f7fe fa21 	bl	8000578 <__aeabi_f2d>
 8002136:	4680      	mov	r8, r0
 8002138:	4689      	mov	r9, r1
 800213a:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 800213e:	f7fe fa1b 	bl	8000578 <__aeabi_f2d>
 8002142:	4604      	mov	r4, r0
 8002144:	460d      	mov	r5, r1
 8002146:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 800214a:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	; 0x208
 800214e:	1a86      	subs	r6, r0, r2
 8002150:	613e      	str	r6, [r7, #16]
 8002152:	eb61 0303 	sbc.w	r3, r1, r3
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800215c:	f7fe fa36 	bl	80005cc <__aeabi_l2d>
 8002160:	a32f      	add	r3, pc, #188	; (adr r3, 8002220 <StartDefaultTask+0x600>)
 8002162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002166:	f7fe fb89 	bl	800087c <__aeabi_ddiv>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4620      	mov	r0, r4
 8002170:	4629      	mov	r1, r5
 8002172:	f7fe fa59 	bl	8000628 <__aeabi_dmul>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4640      	mov	r0, r8
 800217c:	4649      	mov	r1, r9
 800217e:	f7fe f89d 	bl	80002bc <__adddf3>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	f7fe fc5f 	bl	8000a4c <__aeabi_d2iz>
 800218e:	4603      	mov	r3, r0
 8002190:	4a2a      	ldr	r2, [pc, #168]	; (800223c <StartDefaultTask+0x61c>)
 8002192:	6013      	str	r3, [r2, #0]
				  oldTiltTarget = newTiltTarget;
 8002194:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8002198:	e9c7 2382 	strd	r2, r3, [r7, #520]	; 0x208

				  if(tiltDutyPWM < TILT_TURNING_MIN)
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <StartDefaultTask+0x61c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	da02      	bge.n	80021aa <StartDefaultTask+0x58a>
					tiltDutyPWM = TILT_TURNING_MIN;
 80021a4:	4b25      	ldr	r3, [pc, #148]	; (800223c <StartDefaultTask+0x61c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
				  if(tiltDutyPWM > TILT_TURNING_MAX)
 80021aa:	4b24      	ldr	r3, [pc, #144]	; (800223c <StartDefaultTask+0x61c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80021b2:	4293      	cmp	r3, r2
 80021b4:	dd03      	ble.n	80021be <StartDefaultTask+0x59e>
					tiltDutyPWM = TILT_TURNING_MAX;
 80021b6:	4b21      	ldr	r3, [pc, #132]	; (800223c <StartDefaultTask+0x61c>)
 80021b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80021bc:	601a      	str	r2, [r3, #0]

				  TIM2->CCR2 = tiltDutyPWM;
 80021be:	4b1f      	ldr	r3, [pc, #124]	; (800223c <StartDefaultTask+0x61c>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021c6:	639a      	str	r2, [r3, #56]	; 0x38
				}

				//Send Data
				panAndTilt = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
				panAndTilt = (panDegAngle) | ((tiltDegAngle) << 9);
 80021ce:	f8b7 221e 	ldrh.w	r2, [r7, #542]	; 0x21e
 80021d2:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 80021d6:	025b      	lsls	r3, r3, #9
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
				msgPublisher.data = panAndTilt;
 80021de:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80021e2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

			    rcl_ret_t ret = rcl_publish(&publisher, &msgPublisher, NULL);
 80021e6:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 80021ea:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80021ee:	2200      	movs	r2, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f008 f805 	bl	800a200 <rcl_publish>
 80021f6:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
			    flag7 = 1;
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <StartDefaultTask+0x620>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
			    if (ret != RCL_RET_OK)
 8002200:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002204:	2b00      	cmp	r3, #0
 8002206:	f43f adea 	beq.w	8001dde <StartDefaultTask+0x1be>
			    {
			    	flag8 = 1;
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <StartDefaultTask+0x624>)
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
			      printf("Error publishing (line %d)\n", __LINE__);
 8002210:	f240 21ef 	movw	r1, #751	; 0x2ef
 8002214:	480c      	ldr	r0, [pc, #48]	; (8002248 <StartDefaultTask+0x628>)
 8002216:	f014 fdb3 	bl	8016d80 <iprintf>
		  flag5 = 1;
 800221a:	e5e0      	b.n	8001dde <StartDefaultTask+0x1be>
 800221c:	f3af 8000 	nop.w
 8002220:	9999999a 	.word	0x9999999a
 8002224:	3fa99999 	.word	0x3fa99999
 8002228:	20007724 	.word	0x20007724
 800222c:	45c1c000 	.word	0x45c1c000
 8002230:	20007728 	.word	0x20007728
 8002234:	20007726 	.word	0x20007726
 8002238:	459c4000 	.word	0x459c4000
 800223c:	2000772c 	.word	0x2000772c
 8002240:	2000771e 	.word	0x2000771e
 8002244:	2000771f 	.word	0x2000771f
 8002248:	08017fd0 	.word	0x08017fd0

0800224c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a07      	ldr	r2, [pc, #28]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d102      	bne.n	8002264 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800225e:	f000 fd51 	bl	8002d04 <HAL_IncTick>
  {
	  flag = 1;
	  flag3 = 1;
  }
  /* USER CODE END Callback 1 */
}
 8002262:	e005      	b.n	8002270 <HAL_TIM_PeriodElapsedCallback+0x24>
	  flag = 1;
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
	  flag3 = 1;
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40010000 	.word	0x40010000
 800227c:	20007718 	.word	0x20007718
 8002280:	2000771a 	.word	0x2000771a

08002284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002288:	b672      	cpsid	i
}
 800228a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800228c:	e7fe      	b.n	800228c <Error_Handler+0x8>
	...

08002290 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <microros_allocate+0x3c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4413      	add	r3, r2
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <microros_allocate+0x3c>)
 80022a8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <microros_allocate+0x40>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <microros_allocate+0x40>)
 80022b8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe ff1a 	bl	80010f4 <pvPortMallocMicroROS>
 80022c0:	4603      	mov	r3, r0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20007730 	.word	0x20007730
 80022d0:	20007734 	.word	0x20007734

080022d4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00c      	beq.n	80022fe <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff f823 	bl	8001330 <getBlockSize>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4a06      	ldr	r2, [pc, #24]	; (8002308 <microros_deallocate+0x34>)
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <microros_deallocate+0x34>)
 80022f6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7fe ffbf 	bl	800127c <vPortFreeMicroROS>
  }
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20007734 	.word	0x20007734

0800230c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002318:	4b15      	ldr	r3, [pc, #84]	; (8002370 <microros_reallocate+0x64>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	4413      	add	r3, r2
 8002322:	461a      	mov	r2, r3
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <microros_reallocate+0x64>)
 8002326:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <microros_reallocate+0x68>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	4413      	add	r3, r2
 8002332:	461a      	mov	r2, r3
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <microros_reallocate+0x68>)
 8002336:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d104      	bne.n	8002348 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800233e:	68b8      	ldr	r0, [r7, #8]
 8002340:	f7fe fed8 	bl	80010f4 <pvPortMallocMicroROS>
 8002344:	4603      	mov	r3, r0
 8002346:	e00e      	b.n	8002366 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f7fe fff1 	bl	8001330 <getBlockSize>
 800234e:	4603      	mov	r3, r0
 8002350:	4a08      	ldr	r2, [pc, #32]	; (8002374 <microros_reallocate+0x68>)
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	461a      	mov	r2, r3
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <microros_reallocate+0x68>)
 800235a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f7ff f804 	bl	800136c <pvPortReallocMicroROS>
 8002364:	4603      	mov	r3, r0
  }
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20007730 	.word	0x20007730
 8002374:	20007734 	.word	0x20007734

08002378 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	fb02 f303 	mul.w	r3, r2, r3
 800238c:	4a0c      	ldr	r2, [pc, #48]	; (80023c0 <microros_zero_allocate+0x48>)
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	4413      	add	r3, r2
 8002392:	461a      	mov	r2, r3
 8002394:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <microros_zero_allocate+0x48>)
 8002396:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	fb02 f303 	mul.w	r3, r2, r3
 80023a0:	4a08      	ldr	r2, [pc, #32]	; (80023c4 <microros_zero_allocate+0x4c>)
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	4413      	add	r3, r2
 80023a6:	461a      	mov	r2, r3
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <microros_zero_allocate+0x4c>)
 80023aa:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f7ff f809 	bl	80013c6 <pvPortCallocMicroROS>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20007730 	.word	0x20007730
 80023c4:	20007734 	.word	0x20007734

080023c8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80023c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023cc:	b086      	sub	sp, #24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80023da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023de:	a320      	add	r3, pc, #128	; (adr r3, 8002460 <UTILS_NanosecondsToTimespec+0x98>)
 80023e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e4:	f7fe fcb8 	bl	8000d58 <__aeabi_ldivmod>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80023f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023f6:	a31a      	add	r3, pc, #104	; (adr r3, 8002460 <UTILS_NanosecondsToTimespec+0x98>)
 80023f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fc:	f7fe fcac 	bl	8000d58 <__aeabi_ldivmod>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	da20      	bge.n	800244e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4a11      	ldr	r2, [pc, #68]	; (8002458 <UTILS_NanosecondsToTimespec+0x90>)
 8002412:	fb82 1203 	smull	r1, r2, r2, r3
 8002416:	1712      	asrs	r2, r2, #28
 8002418:	17db      	asrs	r3, r3, #31
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	3301      	adds	r3, #1
 800241e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002426:	6979      	ldr	r1, [r7, #20]
 8002428:	17c8      	asrs	r0, r1, #31
 800242a:	460c      	mov	r4, r1
 800242c:	4605      	mov	r5, r0
 800242e:	ebb2 0804 	subs.w	r8, r2, r4
 8002432:	eb63 0905 	sbc.w	r9, r3, r5
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	4906      	ldr	r1, [pc, #24]	; (800245c <UTILS_NanosecondsToTimespec+0x94>)
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	441a      	add	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	609a      	str	r2, [r3, #8]
    }
}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002458:	44b82fa1 	.word	0x44b82fa1
 800245c:	3b9aca00 	.word	0x3b9aca00
 8002460:	3b9aca00 	.word	0x3b9aca00
 8002464:	00000000 	.word	0x00000000

08002468 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800246c:	b08e      	sub	sp, #56	; 0x38
 800246e:	af00      	add	r7, sp, #0
 8002470:	6278      	str	r0, [r7, #36]	; 0x24
 8002472:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002474:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002478:	2300      	movs	r3, #0
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800248a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800248e:	4618      	mov	r0, r3
 8002490:	f006 fc04 	bl	8008c9c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002496:	17da      	asrs	r2, r3, #31
 8002498:	61bb      	str	r3, [r7, #24]
 800249a:	61fa      	str	r2, [r7, #28]
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	69b9      	ldr	r1, [r7, #24]
 80024a6:	000b      	movs	r3, r1
 80024a8:	2200      	movs	r2, #0
 80024aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80024ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b0:	2200      	movs	r2, #0
 80024b2:	461c      	mov	r4, r3
 80024b4:	4615      	mov	r5, r2
 80024b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024ba:	1911      	adds	r1, r2, r4
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	416b      	adcs	r3, r5
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80024c6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80024ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	f04f 0400 	mov.w	r4, #0
 80024d6:	f04f 0500 	mov.w	r5, #0
 80024da:	015d      	lsls	r5, r3, #5
 80024dc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80024e0:	0154      	lsls	r4, r2, #5
 80024e2:	4622      	mov	r2, r4
 80024e4:	462b      	mov	r3, r5
 80024e6:	ebb2 0800 	subs.w	r8, r2, r0
 80024ea:	eb63 0901 	sbc.w	r9, r3, r1
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80024fa:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80024fe:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002502:	4690      	mov	r8, r2
 8002504:	4699      	mov	r9, r3
 8002506:	eb18 0a00 	adds.w	sl, r8, r0
 800250a:	eb49 0b01 	adc.w	fp, r9, r1
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800251a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800251e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002522:	ebb2 040a 	subs.w	r4, r2, sl
 8002526:	603c      	str	r4, [r7, #0]
 8002528:	eb63 030b 	sbc.w	r3, r3, fp
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002532:	4623      	mov	r3, r4
 8002534:	181b      	adds	r3, r3, r0
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	462b      	mov	r3, r5
 800253a:	eb41 0303 	adc.w	r3, r1, r3
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	6a3a      	ldr	r2, [r7, #32]
 8002542:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002546:	f7ff ff3f 	bl	80023c8 <UTILS_NanosecondsToTimespec>

    return 0;
 800254a:	2300      	movs	r3, #0
 800254c:	4618      	mov	r0, r3
 800254e:	3738      	adds	r7, #56	; 0x38
 8002550:	46bd      	mov	sp, r7
 8002552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002558 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_MspInit+0x54>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	4a11      	ldr	r2, [pc, #68]	; (80025ac <HAL_MspInit+0x54>)
 8002568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800256c:	6453      	str	r3, [r2, #68]	; 0x44
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <HAL_MspInit+0x54>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	603b      	str	r3, [r7, #0]
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_MspInit+0x54>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <HAL_MspInit+0x54>)
 8002584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_MspInit+0x54>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	210f      	movs	r1, #15
 800259a:	f06f 0001 	mvn.w	r0, #1
 800259e:	f000 fc89 	bl	8002eb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800

080025b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08c      	sub	sp, #48	; 0x30
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 031c 	add.w	r3, r7, #28
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a42      	ldr	r2, [pc, #264]	; (80026d8 <HAL_I2C_MspInit+0x128>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d12c      	bne.n	800262c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	4b41      	ldr	r3, [pc, #260]	; (80026dc <HAL_I2C_MspInit+0x12c>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a40      	ldr	r2, [pc, #256]	; (80026dc <HAL_I2C_MspInit+0x12c>)
 80025dc:	f043 0302 	orr.w	r3, r3, #2
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b3e      	ldr	r3, [pc, #248]	; (80026dc <HAL_I2C_MspInit+0x12c>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025ee:	23c0      	movs	r3, #192	; 0xc0
 80025f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025f2:	2312      	movs	r3, #18
 80025f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fa:	2303      	movs	r3, #3
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025fe:	2304      	movs	r3, #4
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002602:	f107 031c 	add.w	r3, r7, #28
 8002606:	4619      	mov	r1, r3
 8002608:	4835      	ldr	r0, [pc, #212]	; (80026e0 <HAL_I2C_MspInit+0x130>)
 800260a:	f001 f87f 	bl	800370c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	4b32      	ldr	r3, [pc, #200]	; (80026dc <HAL_I2C_MspInit+0x12c>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	4a31      	ldr	r2, [pc, #196]	; (80026dc <HAL_I2C_MspInit+0x12c>)
 8002618:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800261c:	6413      	str	r3, [r2, #64]	; 0x40
 800261e:	4b2f      	ldr	r3, [pc, #188]	; (80026dc <HAL_I2C_MspInit+0x12c>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800262a:	e050      	b.n	80026ce <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a2c      	ldr	r2, [pc, #176]	; (80026e4 <HAL_I2C_MspInit+0x134>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d14b      	bne.n	80026ce <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	4b28      	ldr	r3, [pc, #160]	; (80026dc <HAL_I2C_MspInit+0x12c>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	4a27      	ldr	r2, [pc, #156]	; (80026dc <HAL_I2C_MspInit+0x12c>)
 8002640:	f043 0304 	orr.w	r3, r3, #4
 8002644:	6313      	str	r3, [r2, #48]	; 0x30
 8002646:	4b25      	ldr	r3, [pc, #148]	; (80026dc <HAL_I2C_MspInit+0x12c>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b21      	ldr	r3, [pc, #132]	; (80026dc <HAL_I2C_MspInit+0x12c>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a20      	ldr	r2, [pc, #128]	; (80026dc <HAL_I2C_MspInit+0x12c>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <HAL_I2C_MspInit+0x12c>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800266e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002674:	2312      	movs	r3, #18
 8002676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002680:	2304      	movs	r3, #4
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002684:	f107 031c 	add.w	r3, r7, #28
 8002688:	4619      	mov	r1, r3
 800268a:	4817      	ldr	r0, [pc, #92]	; (80026e8 <HAL_I2C_MspInit+0x138>)
 800268c:	f001 f83e 	bl	800370c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002696:	2312      	movs	r3, #18
 8002698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269e:	2303      	movs	r3, #3
 80026a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026a2:	2304      	movs	r3, #4
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a6:	f107 031c 	add.w	r3, r7, #28
 80026aa:	4619      	mov	r1, r3
 80026ac:	480f      	ldr	r0, [pc, #60]	; (80026ec <HAL_I2C_MspInit+0x13c>)
 80026ae:	f001 f82d 	bl	800370c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_I2C_MspInit+0x12c>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	4a08      	ldr	r2, [pc, #32]	; (80026dc <HAL_I2C_MspInit+0x12c>)
 80026bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026c0:	6413      	str	r3, [r2, #64]	; 0x40
 80026c2:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_I2C_MspInit+0x12c>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
}
 80026ce:	bf00      	nop
 80026d0:	3730      	adds	r7, #48	; 0x30
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40005400 	.word	0x40005400
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40020400 	.word	0x40020400
 80026e4:	40005c00 	.word	0x40005c00
 80026e8:	40020800 	.word	0x40020800
 80026ec:	40020000 	.word	0x40020000

080026f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002700:	d10e      	bne.n	8002720 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	4b16      	ldr	r3, [pc, #88]	; (8002760 <HAL_TIM_Base_MspInit+0x70>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	4a15      	ldr	r2, [pc, #84]	; (8002760 <HAL_TIM_Base_MspInit+0x70>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6413      	str	r3, [r2, #64]	; 0x40
 8002712:	4b13      	ldr	r3, [pc, #76]	; (8002760 <HAL_TIM_Base_MspInit+0x70>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800271e:	e01a      	b.n	8002756 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0f      	ldr	r2, [pc, #60]	; (8002764 <HAL_TIM_Base_MspInit+0x74>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d115      	bne.n	8002756 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <HAL_TIM_Base_MspInit+0x70>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <HAL_TIM_Base_MspInit+0x70>)
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <HAL_TIM_Base_MspInit+0x70>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2105      	movs	r1, #5
 800274a:	201d      	movs	r0, #29
 800274c:	f000 fbb2 	bl	8002eb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002750:	201d      	movs	r0, #29
 8002752:	f000 fbcb 	bl	8002eec <HAL_NVIC_EnableIRQ>
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	40000400 	.word	0x40000400

08002768 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 030c 	add.w	r3, r7, #12
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002788:	d11d      	bne.n	80027c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <HAL_TIM_MspPostInit+0x68>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4a0f      	ldr	r2, [pc, #60]	; (80027d0 <HAL_TIM_MspPostInit+0x68>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6313      	str	r3, [r2, #48]	; 0x30
 800279a:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <HAL_TIM_MspPostInit+0x68>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027a6:	2303      	movs	r3, #3
 80027a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	2302      	movs	r3, #2
 80027ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027b6:	2301      	movs	r3, #1
 80027b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ba:	f107 030c 	add.w	r3, r7, #12
 80027be:	4619      	mov	r1, r3
 80027c0:	4804      	ldr	r0, [pc, #16]	; (80027d4 <HAL_TIM_MspPostInit+0x6c>)
 80027c2:	f000 ffa3 	bl	800370c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80027c6:	bf00      	nop
 80027c8:	3720      	adds	r7, #32
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40020000 	.word	0x40020000

080027d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	; 0x28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a4d      	ldr	r2, [pc, #308]	; (800292c <HAL_UART_MspInit+0x154>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	f040 8093 	bne.w	8002922 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	4b4b      	ldr	r3, [pc, #300]	; (8002930 <HAL_UART_MspInit+0x158>)
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	4a4a      	ldr	r2, [pc, #296]	; (8002930 <HAL_UART_MspInit+0x158>)
 8002806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280a:	6413      	str	r3, [r2, #64]	; 0x40
 800280c:	4b48      	ldr	r3, [pc, #288]	; (8002930 <HAL_UART_MspInit+0x158>)
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	4b44      	ldr	r3, [pc, #272]	; (8002930 <HAL_UART_MspInit+0x158>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	4a43      	ldr	r2, [pc, #268]	; (8002930 <HAL_UART_MspInit+0x158>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6313      	str	r3, [r2, #48]	; 0x30
 8002828:	4b41      	ldr	r3, [pc, #260]	; (8002930 <HAL_UART_MspInit+0x158>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002834:	230c      	movs	r3, #12
 8002836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002840:	2300      	movs	r3, #0
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002844:	2307      	movs	r3, #7
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	4839      	ldr	r0, [pc, #228]	; (8002934 <HAL_UART_MspInit+0x15c>)
 8002850:	f000 ff5c 	bl	800370c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002854:	4b38      	ldr	r3, [pc, #224]	; (8002938 <HAL_UART_MspInit+0x160>)
 8002856:	4a39      	ldr	r2, [pc, #228]	; (800293c <HAL_UART_MspInit+0x164>)
 8002858:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800285a:	4b37      	ldr	r3, [pc, #220]	; (8002938 <HAL_UART_MspInit+0x160>)
 800285c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002860:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002862:	4b35      	ldr	r3, [pc, #212]	; (8002938 <HAL_UART_MspInit+0x160>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002868:	4b33      	ldr	r3, [pc, #204]	; (8002938 <HAL_UART_MspInit+0x160>)
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800286e:	4b32      	ldr	r3, [pc, #200]	; (8002938 <HAL_UART_MspInit+0x160>)
 8002870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002874:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002876:	4b30      	ldr	r3, [pc, #192]	; (8002938 <HAL_UART_MspInit+0x160>)
 8002878:	2200      	movs	r2, #0
 800287a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800287c:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <HAL_UART_MspInit+0x160>)
 800287e:	2200      	movs	r2, #0
 8002880:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002882:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <HAL_UART_MspInit+0x160>)
 8002884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002888:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800288a:	4b2b      	ldr	r3, [pc, #172]	; (8002938 <HAL_UART_MspInit+0x160>)
 800288c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002890:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002892:	4b29      	ldr	r3, [pc, #164]	; (8002938 <HAL_UART_MspInit+0x160>)
 8002894:	2200      	movs	r2, #0
 8002896:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002898:	4827      	ldr	r0, [pc, #156]	; (8002938 <HAL_UART_MspInit+0x160>)
 800289a:	f000 fb35 	bl	8002f08 <HAL_DMA_Init>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80028a4:	f7ff fcee 	bl	8002284 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a23      	ldr	r2, [pc, #140]	; (8002938 <HAL_UART_MspInit+0x160>)
 80028ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80028ae:	4a22      	ldr	r2, [pc, #136]	; (8002938 <HAL_UART_MspInit+0x160>)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80028b4:	4b22      	ldr	r3, [pc, #136]	; (8002940 <HAL_UART_MspInit+0x168>)
 80028b6:	4a23      	ldr	r2, [pc, #140]	; (8002944 <HAL_UART_MspInit+0x16c>)
 80028b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80028ba:	4b21      	ldr	r3, [pc, #132]	; (8002940 <HAL_UART_MspInit+0x168>)
 80028bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028c0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028c2:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <HAL_UART_MspInit+0x168>)
 80028c4:	2240      	movs	r2, #64	; 0x40
 80028c6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <HAL_UART_MspInit+0x168>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028ce:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <HAL_UART_MspInit+0x168>)
 80028d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028d6:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <HAL_UART_MspInit+0x168>)
 80028d8:	2200      	movs	r2, #0
 80028da:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028dc:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_UART_MspInit+0x168>)
 80028de:	2200      	movs	r2, #0
 80028e0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80028e2:	4b17      	ldr	r3, [pc, #92]	; (8002940 <HAL_UART_MspInit+0x168>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028e8:	4b15      	ldr	r3, [pc, #84]	; (8002940 <HAL_UART_MspInit+0x168>)
 80028ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80028ee:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028f0:	4b13      	ldr	r3, [pc, #76]	; (8002940 <HAL_UART_MspInit+0x168>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80028f6:	4812      	ldr	r0, [pc, #72]	; (8002940 <HAL_UART_MspInit+0x168>)
 80028f8:	f000 fb06 	bl	8002f08 <HAL_DMA_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002902:	f7ff fcbf 	bl	8002284 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a0d      	ldr	r2, [pc, #52]	; (8002940 <HAL_UART_MspInit+0x168>)
 800290a:	639a      	str	r2, [r3, #56]	; 0x38
 800290c:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <HAL_UART_MspInit+0x168>)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	2105      	movs	r1, #5
 8002916:	2026      	movs	r0, #38	; 0x26
 8002918:	f000 facc 	bl	8002eb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800291c:	2026      	movs	r0, #38	; 0x26
 800291e:	f000 fae5 	bl	8002eec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002922:	bf00      	nop
 8002924:	3728      	adds	r7, #40	; 0x28
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40004400 	.word	0x40004400
 8002930:	40023800 	.word	0x40023800
 8002934:	40020000 	.word	0x40020000
 8002938:	200046cc 	.word	0x200046cc
 800293c:	40026088 	.word	0x40026088
 8002940:	2000472c 	.word	0x2000472c
 8002944:	400260a0 	.word	0x400260a0

08002948 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08c      	sub	sp, #48	; 0x30
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002958:	2300      	movs	r3, #0
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	4b2e      	ldr	r3, [pc, #184]	; (8002a18 <HAL_InitTick+0xd0>)
 800295e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002960:	4a2d      	ldr	r2, [pc, #180]	; (8002a18 <HAL_InitTick+0xd0>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6453      	str	r3, [r2, #68]	; 0x44
 8002968:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <HAL_InitTick+0xd0>)
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002974:	f107 020c 	add.w	r2, r7, #12
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	4611      	mov	r1, r2
 800297e:	4618      	mov	r0, r3
 8002980:	f002 fb46 	bl	8005010 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002984:	f002 fb30 	bl	8004fe8 <HAL_RCC_GetPCLK2Freq>
 8002988:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	4a23      	ldr	r2, [pc, #140]	; (8002a1c <HAL_InitTick+0xd4>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	0c9b      	lsrs	r3, r3, #18
 8002994:	3b01      	subs	r3, #1
 8002996:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002998:	4b21      	ldr	r3, [pc, #132]	; (8002a20 <HAL_InitTick+0xd8>)
 800299a:	4a22      	ldr	r2, [pc, #136]	; (8002a24 <HAL_InitTick+0xdc>)
 800299c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <HAL_InitTick+0xd8>)
 80029a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029a4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80029a6:	4a1e      	ldr	r2, [pc, #120]	; (8002a20 <HAL_InitTick+0xd8>)
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80029ac:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <HAL_InitTick+0xd8>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b2:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <HAL_InitTick+0xd8>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_InitTick+0xd8>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80029be:	4818      	ldr	r0, [pc, #96]	; (8002a20 <HAL_InitTick+0xd8>)
 80029c0:	f002 fb58 	bl	8005074 <HAL_TIM_Base_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80029ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d11b      	bne.n	8002a0a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80029d2:	4813      	ldr	r0, [pc, #76]	; (8002a20 <HAL_InitTick+0xd8>)
 80029d4:	f002 fb9e 	bl	8005114 <HAL_TIM_Base_Start_IT>
 80029d8:	4603      	mov	r3, r0
 80029da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80029de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d111      	bne.n	8002a0a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80029e6:	2019      	movs	r0, #25
 80029e8:	f000 fa80 	bl	8002eec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b0f      	cmp	r3, #15
 80029f0:	d808      	bhi.n	8002a04 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80029f2:	2200      	movs	r2, #0
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	2019      	movs	r0, #25
 80029f8:	f000 fa5c 	bl	8002eb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029fc:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <HAL_InitTick+0xe0>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e002      	b.n	8002a0a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002a0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3730      	adds	r7, #48	; 0x30
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	431bde83 	.word	0x431bde83
 8002a20:	20007738 	.word	0x20007738
 8002a24:	40010000 	.word	0x40010000
 8002a28:	20000008 	.word	0x20000008

08002a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a30:	e7fe      	b.n	8002a30 <NMI_Handler+0x4>

08002a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a36:	e7fe      	b.n	8002a36 <HardFault_Handler+0x4>

08002a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a3c:	e7fe      	b.n	8002a3c <MemManage_Handler+0x4>

08002a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a42:	e7fe      	b.n	8002a42 <BusFault_Handler+0x4>

08002a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a48:	e7fe      	b.n	8002a48 <UsageFault_Handler+0x4>

08002a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002a5c:	4802      	ldr	r0, [pc, #8]	; (8002a68 <DMA1_Stream5_IRQHandler+0x10>)
 8002a5e:	f000 fbeb 	bl	8003238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200046cc 	.word	0x200046cc

08002a6c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002a70:	4802      	ldr	r0, [pc, #8]	; (8002a7c <DMA1_Stream6_IRQHandler+0x10>)
 8002a72:	f000 fbe1 	bl	8003238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	2000472c 	.word	0x2000472c

08002a80 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a84:	4802      	ldr	r0, [pc, #8]	; (8002a90 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002a86:	f002 fcb1 	bl	80053ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20007738 	.word	0x20007738

08002a94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a98:	4802      	ldr	r0, [pc, #8]	; (8002aa4 <TIM3_IRQHandler+0x10>)
 8002a9a:	f002 fca7 	bl	80053ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	2000463c 	.word	0x2000463c

08002aa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002aac:	4802      	ldr	r0, [pc, #8]	; (8002ab8 <USART2_IRQHandler+0x10>)
 8002aae:	f003 fbfd 	bl	80062ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20004684 	.word	0x20004684

08002abc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return 1;
 8002ac0:	2301      	movs	r3, #1
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <_kill>:

int _kill(int pid, int sig)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ad6:	f014 fb29 	bl	801712c <__errno>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2216      	movs	r2, #22
 8002ade:	601a      	str	r2, [r3, #0]
  return -1;
 8002ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <_exit>:

void _exit (int status)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002af4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ffe7 	bl	8002acc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002afe:	e7fe      	b.n	8002afe <_exit+0x12>

08002b00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	e00a      	b.n	8002b28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b12:	f3af 8000 	nop.w
 8002b16:	4601      	mov	r1, r0
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	60ba      	str	r2, [r7, #8]
 8002b1e:	b2ca      	uxtb	r2, r1
 8002b20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	3301      	adds	r3, #1
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	dbf0      	blt.n	8002b12 <_read+0x12>
  }

  return len;
 8002b30:	687b      	ldr	r3, [r7, #4]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	e009      	b.n	8002b60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	60ba      	str	r2, [r7, #8]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	dbf1      	blt.n	8002b4c <_write+0x12>
  }
  return len;
 8002b68:	687b      	ldr	r3, [r7, #4]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <_close>:

int _close(int file)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b9a:	605a      	str	r2, [r3, #4]
  return 0;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <_isatty>:

int _isatty(int file)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bb2:	2301      	movs	r3, #1
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002be4:	4a14      	ldr	r2, [pc, #80]	; (8002c38 <_sbrk+0x5c>)
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <_sbrk+0x60>)
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bf0:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <_sbrk+0x64>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d102      	bne.n	8002bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <_sbrk+0x64>)
 8002bfa:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <_sbrk+0x68>)
 8002bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <_sbrk+0x64>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4413      	add	r3, r2
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d207      	bcs.n	8002c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c0c:	f014 fa8e 	bl	801712c <__errno>
 8002c10:	4603      	mov	r3, r0
 8002c12:	220c      	movs	r2, #12
 8002c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c1a:	e009      	b.n	8002c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c1c:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <_sbrk+0x64>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c22:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <_sbrk+0x64>)
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4413      	add	r3, r2
 8002c2a:	4a05      	ldr	r2, [pc, #20]	; (8002c40 <_sbrk+0x64>)
 8002c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20018000 	.word	0x20018000
 8002c3c:	00000400 	.word	0x00000400
 8002c40:	20007784 	.word	0x20007784
 8002c44:	20010e40 	.word	0x20010e40

08002c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <SystemInit+0x20>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c52:	4a05      	ldr	r2, [pc, #20]	; (8002c68 <SystemInit+0x20>)
 8002c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ca4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c70:	f7ff ffea 	bl	8002c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c74:	480c      	ldr	r0, [pc, #48]	; (8002ca8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c76:	490d      	ldr	r1, [pc, #52]	; (8002cac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c78:	4a0d      	ldr	r2, [pc, #52]	; (8002cb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c7c:	e002      	b.n	8002c84 <LoopCopyDataInit>

08002c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c82:	3304      	adds	r3, #4

08002c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c88:	d3f9      	bcc.n	8002c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c8c:	4c0a      	ldr	r4, [pc, #40]	; (8002cb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c90:	e001      	b.n	8002c96 <LoopFillZerobss>

08002c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c94:	3204      	adds	r2, #4

08002c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c98:	d3fb      	bcc.n	8002c92 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002c9a:	f014 fa4d 	bl	8017138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c9e:	f7fe fd21 	bl	80016e4 <main>
  bx  lr    
 8002ca2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ca4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cac:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8002cb0:	08018da0 	.word	0x08018da0
  ldr r2, =_sbss
 8002cb4:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8002cb8:	20010e3c 	.word	0x20010e3c

08002cbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cbc:	e7fe      	b.n	8002cbc <ADC_IRQHandler>
	...

08002cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cc4:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <HAL_Init+0x40>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a0d      	ldr	r2, [pc, #52]	; (8002d00 <HAL_Init+0x40>)
 8002cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_Init+0x40>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <HAL_Init+0x40>)
 8002cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cdc:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <HAL_Init+0x40>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <HAL_Init+0x40>)
 8002ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce8:	2003      	movs	r0, #3
 8002cea:	f000 f8d8 	bl	8002e9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cee:	200f      	movs	r0, #15
 8002cf0:	f7ff fe2a 	bl	8002948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cf4:	f7ff fc30 	bl	8002558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023c00 	.word	0x40023c00

08002d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_IncTick+0x20>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_IncTick+0x24>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4413      	add	r3, r2
 8002d14:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <HAL_IncTick+0x24>)
 8002d16:	6013      	str	r3, [r2, #0]
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	2000000c 	.word	0x2000000c
 8002d28:	20007788 	.word	0x20007788

08002d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d30:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <HAL_GetTick+0x14>)
 8002d32:	681b      	ldr	r3, [r3, #0]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	20007788 	.word	0x20007788

08002d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d60:	4013      	ands	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d76:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	60d3      	str	r3, [r2, #12]
}
 8002d7c:	bf00      	nop
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d90:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <__NVIC_GetPriorityGrouping+0x18>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	f003 0307 	and.w	r3, r3, #7
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	db0b      	blt.n	8002dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	4907      	ldr	r1, [pc, #28]	; (8002de0 <__NVIC_EnableIRQ+0x38>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2001      	movs	r0, #1
 8002dca:	fa00 f202 	lsl.w	r2, r0, r2
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000e100 	.word	0xe000e100

08002de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	6039      	str	r1, [r7, #0]
 8002dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	db0a      	blt.n	8002e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	490c      	ldr	r1, [pc, #48]	; (8002e30 <__NVIC_SetPriority+0x4c>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	0112      	lsls	r2, r2, #4
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	440b      	add	r3, r1
 8002e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e0c:	e00a      	b.n	8002e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4908      	ldr	r1, [pc, #32]	; (8002e34 <__NVIC_SetPriority+0x50>)
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	440b      	add	r3, r1
 8002e22:	761a      	strb	r2, [r3, #24]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000e100 	.word	0xe000e100
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f1c3 0307 	rsb	r3, r3, #7
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	bf28      	it	cs
 8002e56:	2304      	movcs	r3, #4
 8002e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d902      	bls.n	8002e68 <NVIC_EncodePriority+0x30>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3b03      	subs	r3, #3
 8002e66:	e000      	b.n	8002e6a <NVIC_EncodePriority+0x32>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43d9      	mvns	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	4313      	orrs	r3, r2
         );
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ff4c 	bl	8002d44 <__NVIC_SetPriorityGrouping>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec6:	f7ff ff61 	bl	8002d8c <__NVIC_GetPriorityGrouping>
 8002eca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	6978      	ldr	r0, [r7, #20]
 8002ed2:	f7ff ffb1 	bl	8002e38 <NVIC_EncodePriority>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff ff80 	bl	8002de4 <__NVIC_SetPriority>
}
 8002ee4:	bf00      	nop
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff ff54 	bl	8002da8 <__NVIC_EnableIRQ>
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f14:	f7ff ff0a 	bl	8002d2c <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e099      	b.n	8003058 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f44:	e00f      	b.n	8002f66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f46:	f7ff fef1 	bl	8002d2c <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b05      	cmp	r3, #5
 8002f52:	d908      	bls.n	8002f66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e078      	b.n	8003058 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1e8      	bne.n	8002f46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4b38      	ldr	r3, [pc, #224]	; (8003060 <HAL_DMA_Init+0x158>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002faa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d107      	bne.n	8002fd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f023 0307 	bic.w	r3, r3, #7
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d117      	bne.n	800302a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00e      	beq.n	800302a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fb01 	bl	8003614 <DMA_CheckFifoParam>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2240      	movs	r2, #64	; 0x40
 800301c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003026:	2301      	movs	r3, #1
 8003028:	e016      	b.n	8003058 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fab8 	bl	80035a8 <DMA_CalcBaseAndBitshift>
 8003038:	4603      	mov	r3, r0
 800303a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003040:	223f      	movs	r2, #63	; 0x3f
 8003042:	409a      	lsls	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	f010803f 	.word	0xf010803f

08003064 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <HAL_DMA_Start_IT+0x26>
 8003086:	2302      	movs	r3, #2
 8003088:	e040      	b.n	800310c <HAL_DMA_Start_IT+0xa8>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b01      	cmp	r3, #1
 800309c:	d12f      	bne.n	80030fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2202      	movs	r2, #2
 80030a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fa4a 	bl	800354c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030bc:	223f      	movs	r2, #63	; 0x3f
 80030be:	409a      	lsls	r2, r3
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0216 	orr.w	r2, r2, #22
 80030d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0208 	orr.w	r2, r2, #8
 80030ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	e005      	b.n	800310a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003106:	2302      	movs	r3, #2
 8003108:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800310a:	7dfb      	ldrb	r3, [r7, #23]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003120:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003122:	f7ff fe03 	bl	8002d2c <HAL_GetTick>
 8003126:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d008      	beq.n	8003146 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2280      	movs	r2, #128	; 0x80
 8003138:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e052      	b.n	80031ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0216 	bic.w	r2, r2, #22
 8003154:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003164:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <HAL_DMA_Abort+0x62>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003172:	2b00      	cmp	r3, #0
 8003174:	d007      	beq.n	8003186 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0208 	bic.w	r2, r2, #8
 8003184:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003196:	e013      	b.n	80031c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003198:	f7ff fdc8 	bl	8002d2c <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d90c      	bls.n	80031c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2220      	movs	r2, #32
 80031aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2203      	movs	r2, #3
 80031b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e015      	b.n	80031ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e4      	bne.n	8003198 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d2:	223f      	movs	r2, #63	; 0x3f
 80031d4:	409a      	lsls	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d004      	beq.n	8003212 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2280      	movs	r2, #128	; 0x80
 800320c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e00c      	b.n	800322c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2205      	movs	r2, #5
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0201 	bic.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003244:	4b8e      	ldr	r3, [pc, #568]	; (8003480 <HAL_DMA_IRQHandler+0x248>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a8e      	ldr	r2, [pc, #568]	; (8003484 <HAL_DMA_IRQHandler+0x24c>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	0a9b      	lsrs	r3, r3, #10
 8003250:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003262:	2208      	movs	r2, #8
 8003264:	409a      	lsls	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d01a      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d013      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0204 	bic.w	r2, r2, #4
 800328a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003290:	2208      	movs	r2, #8
 8003292:	409a      	lsls	r2, r3
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329c:	f043 0201 	orr.w	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a8:	2201      	movs	r2, #1
 80032aa:	409a      	lsls	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d012      	beq.n	80032da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c6:	2201      	movs	r2, #1
 80032c8:	409a      	lsls	r2, r3
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d2:	f043 0202 	orr.w	r2, r3, #2
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032de:	2204      	movs	r2, #4
 80032e0:	409a      	lsls	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d012      	beq.n	8003310 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00b      	beq.n	8003310 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fc:	2204      	movs	r2, #4
 80032fe:	409a      	lsls	r2, r3
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003308:	f043 0204 	orr.w	r2, r3, #4
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003314:	2210      	movs	r2, #16
 8003316:	409a      	lsls	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d043      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d03c      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003332:	2210      	movs	r2, #16
 8003334:	409a      	lsls	r2, r3
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d018      	beq.n	800337a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d108      	bne.n	8003368 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	d024      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
 8003366:	e01f      	b.n	80033a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01b      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
 8003378:	e016      	b.n	80033a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d107      	bne.n	8003398 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0208 	bic.w	r2, r2, #8
 8003396:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ac:	2220      	movs	r2, #32
 80033ae:	409a      	lsls	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 808f 	beq.w	80034d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8087 	beq.w	80034d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ce:	2220      	movs	r2, #32
 80033d0:	409a      	lsls	r2, r3
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b05      	cmp	r3, #5
 80033e0:	d136      	bne.n	8003450 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0216 	bic.w	r2, r2, #22
 80033f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695a      	ldr	r2, [r3, #20]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003400:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d103      	bne.n	8003412 <HAL_DMA_IRQHandler+0x1da>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0208 	bic.w	r2, r2, #8
 8003420:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003426:	223f      	movs	r2, #63	; 0x3f
 8003428:	409a      	lsls	r2, r3
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003442:	2b00      	cmp	r3, #0
 8003444:	d07e      	beq.n	8003544 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	4798      	blx	r3
        }
        return;
 800344e:	e079      	b.n	8003544 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01d      	beq.n	800349a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10d      	bne.n	8003488 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	2b00      	cmp	r3, #0
 8003472:	d031      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4798      	blx	r3
 800347c:	e02c      	b.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
 800347e:	bf00      	nop
 8003480:	20000004 	.word	0x20000004
 8003484:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348c:	2b00      	cmp	r3, #0
 800348e:	d023      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
 8003498:	e01e      	b.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10f      	bne.n	80034c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0210 	bic.w	r2, r2, #16
 80034b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d032      	beq.n	8003546 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d022      	beq.n	8003532 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2205      	movs	r2, #5
 80034f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	3301      	adds	r3, #1
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	429a      	cmp	r2, r3
 800350e:	d307      	bcc.n	8003520 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f2      	bne.n	8003504 <HAL_DMA_IRQHandler+0x2cc>
 800351e:	e000      	b.n	8003522 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003520:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
 8003542:	e000      	b.n	8003546 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003544:	bf00      	nop
    }
  }
}
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003568:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b40      	cmp	r3, #64	; 0x40
 8003578:	d108      	bne.n	800358c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800358a:	e007      	b.n	800359c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	60da      	str	r2, [r3, #12]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	3b10      	subs	r3, #16
 80035b8:	4a14      	ldr	r2, [pc, #80]	; (800360c <DMA_CalcBaseAndBitshift+0x64>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	091b      	lsrs	r3, r3, #4
 80035c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035c2:	4a13      	ldr	r2, [pc, #76]	; (8003610 <DMA_CalcBaseAndBitshift+0x68>)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4413      	add	r3, r2
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d909      	bls.n	80035ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035de:	f023 0303 	bic.w	r3, r3, #3
 80035e2:	1d1a      	adds	r2, r3, #4
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	659a      	str	r2, [r3, #88]	; 0x58
 80035e8:	e007      	b.n	80035fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035f2:	f023 0303 	bic.w	r3, r3, #3
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	aaaaaaab 	.word	0xaaaaaaab
 8003610:	08018064 	.word	0x08018064

08003614 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d11f      	bne.n	800366e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d856      	bhi.n	80036e2 <DMA_CheckFifoParam+0xce>
 8003634:	a201      	add	r2, pc, #4	; (adr r2, 800363c <DMA_CheckFifoParam+0x28>)
 8003636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363a:	bf00      	nop
 800363c:	0800364d 	.word	0x0800364d
 8003640:	0800365f 	.word	0x0800365f
 8003644:	0800364d 	.word	0x0800364d
 8003648:	080036e3 	.word	0x080036e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d046      	beq.n	80036e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800365c:	e043      	b.n	80036e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003666:	d140      	bne.n	80036ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366c:	e03d      	b.n	80036ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003676:	d121      	bne.n	80036bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b03      	cmp	r3, #3
 800367c:	d837      	bhi.n	80036ee <DMA_CheckFifoParam+0xda>
 800367e:	a201      	add	r2, pc, #4	; (adr r2, 8003684 <DMA_CheckFifoParam+0x70>)
 8003680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003684:	08003695 	.word	0x08003695
 8003688:	0800369b 	.word	0x0800369b
 800368c:	08003695 	.word	0x08003695
 8003690:	080036ad 	.word	0x080036ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
      break;
 8003698:	e030      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d025      	beq.n	80036f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036aa:	e022      	b.n	80036f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036b4:	d11f      	bne.n	80036f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036ba:	e01c      	b.n	80036f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d903      	bls.n	80036ca <DMA_CheckFifoParam+0xb6>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d003      	beq.n	80036d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036c8:	e018      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	73fb      	strb	r3, [r7, #15]
      break;
 80036ce:	e015      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00e      	beq.n	80036fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
      break;
 80036e0:	e00b      	b.n	80036fa <DMA_CheckFifoParam+0xe6>
      break;
 80036e2:	bf00      	nop
 80036e4:	e00a      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      break;
 80036e6:	bf00      	nop
 80036e8:	e008      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      break;
 80036ea:	bf00      	nop
 80036ec:	e006      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      break;
 80036ee:	bf00      	nop
 80036f0:	e004      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      break;
 80036f2:	bf00      	nop
 80036f4:	e002      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      break;   
 80036f6:	bf00      	nop
 80036f8:	e000      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      break;
 80036fa:	bf00      	nop
    }
  } 
  
  return status; 
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop

0800370c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800370c:	b480      	push	{r7}
 800370e:	b089      	sub	sp, #36	; 0x24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	e159      	b.n	80039dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003728:	2201      	movs	r2, #1
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4013      	ands	r3, r2
 800373a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	429a      	cmp	r2, r3
 8003742:	f040 8148 	bne.w	80039d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	2b01      	cmp	r3, #1
 8003750:	d005      	beq.n	800375e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800375a:	2b02      	cmp	r3, #2
 800375c:	d130      	bne.n	80037c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	2203      	movs	r2, #3
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4313      	orrs	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003794:	2201      	movs	r2, #1
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f003 0201 	and.w	r2, r3, #1
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d017      	beq.n	80037fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	2203      	movs	r2, #3
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d123      	bne.n	8003850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	08da      	lsrs	r2, r3, #3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3208      	adds	r2, #8
 8003810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	220f      	movs	r2, #15
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	08da      	lsrs	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3208      	adds	r2, #8
 800384a:	69b9      	ldr	r1, [r7, #24]
 800384c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	2203      	movs	r2, #3
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0203 	and.w	r2, r3, #3
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4313      	orrs	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80a2 	beq.w	80039d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	4b57      	ldr	r3, [pc, #348]	; (80039f4 <HAL_GPIO_Init+0x2e8>)
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	4a56      	ldr	r2, [pc, #344]	; (80039f4 <HAL_GPIO_Init+0x2e8>)
 800389c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038a0:	6453      	str	r3, [r2, #68]	; 0x44
 80038a2:	4b54      	ldr	r3, [pc, #336]	; (80039f4 <HAL_GPIO_Init+0x2e8>)
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038ae:	4a52      	ldr	r2, [pc, #328]	; (80039f8 <HAL_GPIO_Init+0x2ec>)
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	089b      	lsrs	r3, r3, #2
 80038b4:	3302      	adds	r3, #2
 80038b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	220f      	movs	r2, #15
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a49      	ldr	r2, [pc, #292]	; (80039fc <HAL_GPIO_Init+0x2f0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d019      	beq.n	800390e <HAL_GPIO_Init+0x202>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a48      	ldr	r2, [pc, #288]	; (8003a00 <HAL_GPIO_Init+0x2f4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d013      	beq.n	800390a <HAL_GPIO_Init+0x1fe>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a47      	ldr	r2, [pc, #284]	; (8003a04 <HAL_GPIO_Init+0x2f8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00d      	beq.n	8003906 <HAL_GPIO_Init+0x1fa>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a46      	ldr	r2, [pc, #280]	; (8003a08 <HAL_GPIO_Init+0x2fc>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d007      	beq.n	8003902 <HAL_GPIO_Init+0x1f6>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a45      	ldr	r2, [pc, #276]	; (8003a0c <HAL_GPIO_Init+0x300>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <HAL_GPIO_Init+0x1f2>
 80038fa:	2304      	movs	r3, #4
 80038fc:	e008      	b.n	8003910 <HAL_GPIO_Init+0x204>
 80038fe:	2307      	movs	r3, #7
 8003900:	e006      	b.n	8003910 <HAL_GPIO_Init+0x204>
 8003902:	2303      	movs	r3, #3
 8003904:	e004      	b.n	8003910 <HAL_GPIO_Init+0x204>
 8003906:	2302      	movs	r3, #2
 8003908:	e002      	b.n	8003910 <HAL_GPIO_Init+0x204>
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <HAL_GPIO_Init+0x204>
 800390e:	2300      	movs	r3, #0
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	f002 0203 	and.w	r2, r2, #3
 8003916:	0092      	lsls	r2, r2, #2
 8003918:	4093      	lsls	r3, r2
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4313      	orrs	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003920:	4935      	ldr	r1, [pc, #212]	; (80039f8 <HAL_GPIO_Init+0x2ec>)
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	3302      	adds	r3, #2
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800392e:	4b38      	ldr	r3, [pc, #224]	; (8003a10 <HAL_GPIO_Init+0x304>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	43db      	mvns	r3, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4013      	ands	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003952:	4a2f      	ldr	r2, [pc, #188]	; (8003a10 <HAL_GPIO_Init+0x304>)
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003958:	4b2d      	ldr	r3, [pc, #180]	; (8003a10 <HAL_GPIO_Init+0x304>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800397c:	4a24      	ldr	r2, [pc, #144]	; (8003a10 <HAL_GPIO_Init+0x304>)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003982:	4b23      	ldr	r3, [pc, #140]	; (8003a10 <HAL_GPIO_Init+0x304>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	43db      	mvns	r3, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4013      	ands	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039a6:	4a1a      	ldr	r2, [pc, #104]	; (8003a10 <HAL_GPIO_Init+0x304>)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039ac:	4b18      	ldr	r3, [pc, #96]	; (8003a10 <HAL_GPIO_Init+0x304>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039d0:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <HAL_GPIO_Init+0x304>)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3301      	adds	r3, #1
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	2b0f      	cmp	r3, #15
 80039e0:	f67f aea2 	bls.w	8003728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop
 80039e8:	3724      	adds	r7, #36	; 0x24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40013800 	.word	0x40013800
 80039fc:	40020000 	.word	0x40020000
 8003a00:	40020400 	.word	0x40020400
 8003a04:	40020800 	.word	0x40020800
 8003a08:	40020c00 	.word	0x40020c00
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40013c00 	.word	0x40013c00

08003a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	807b      	strh	r3, [r7, #2]
 8003a20:	4613      	mov	r3, r2
 8003a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a24:	787b      	ldrb	r3, [r7, #1]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a2a:	887a      	ldrh	r2, [r7, #2]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a30:	e003      	b.n	8003a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a32:	887b      	ldrh	r3, [r7, #2]
 8003a34:	041a      	lsls	r2, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	619a      	str	r2, [r3, #24]
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e12b      	b.n	8003cb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7fe fd9e 	bl	80025b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2224      	movs	r2, #36	; 0x24
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0201 	bic.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003aac:	f001 fa88 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8003ab0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4a81      	ldr	r2, [pc, #516]	; (8003cbc <HAL_I2C_Init+0x274>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d807      	bhi.n	8003acc <HAL_I2C_Init+0x84>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a80      	ldr	r2, [pc, #512]	; (8003cc0 <HAL_I2C_Init+0x278>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	bf94      	ite	ls
 8003ac4:	2301      	movls	r3, #1
 8003ac6:	2300      	movhi	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	e006      	b.n	8003ada <HAL_I2C_Init+0x92>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4a7d      	ldr	r2, [pc, #500]	; (8003cc4 <HAL_I2C_Init+0x27c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	bf94      	ite	ls
 8003ad4:	2301      	movls	r3, #1
 8003ad6:	2300      	movhi	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e0e7      	b.n	8003cb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4a78      	ldr	r2, [pc, #480]	; (8003cc8 <HAL_I2C_Init+0x280>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	0c9b      	lsrs	r3, r3, #18
 8003aec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4a6a      	ldr	r2, [pc, #424]	; (8003cbc <HAL_I2C_Init+0x274>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d802      	bhi.n	8003b1c <HAL_I2C_Init+0xd4>
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	e009      	b.n	8003b30 <HAL_I2C_Init+0xe8>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	4a69      	ldr	r2, [pc, #420]	; (8003ccc <HAL_I2C_Init+0x284>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	099b      	lsrs	r3, r3, #6
 8003b2e:	3301      	adds	r3, #1
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	495c      	ldr	r1, [pc, #368]	; (8003cbc <HAL_I2C_Init+0x274>)
 8003b4c:	428b      	cmp	r3, r1
 8003b4e:	d819      	bhi.n	8003b84 <HAL_I2C_Init+0x13c>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1e59      	subs	r1, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b5e:	1c59      	adds	r1, r3, #1
 8003b60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b64:	400b      	ands	r3, r1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_I2C_Init+0x138>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1e59      	subs	r1, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b78:	3301      	adds	r3, #1
 8003b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b7e:	e051      	b.n	8003c24 <HAL_I2C_Init+0x1dc>
 8003b80:	2304      	movs	r3, #4
 8003b82:	e04f      	b.n	8003c24 <HAL_I2C_Init+0x1dc>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d111      	bne.n	8003bb0 <HAL_I2C_Init+0x168>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1e58      	subs	r0, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6859      	ldr	r1, [r3, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	440b      	add	r3, r1
 8003b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	e012      	b.n	8003bd6 <HAL_I2C_Init+0x18e>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1e58      	subs	r0, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	0099      	lsls	r1, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf0c      	ite	eq
 8003bd0:	2301      	moveq	r3, #1
 8003bd2:	2300      	movne	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_I2C_Init+0x196>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e022      	b.n	8003c24 <HAL_I2C_Init+0x1dc>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10e      	bne.n	8003c04 <HAL_I2C_Init+0x1bc>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1e58      	subs	r0, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6859      	ldr	r1, [r3, #4]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	440b      	add	r3, r1
 8003bf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c02:	e00f      	b.n	8003c24 <HAL_I2C_Init+0x1dc>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1e58      	subs	r0, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	0099      	lsls	r1, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	6809      	ldr	r1, [r1, #0]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69da      	ldr	r2, [r3, #28]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6911      	ldr	r1, [r2, #16]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68d2      	ldr	r2, [r2, #12]
 8003c5e:	4311      	orrs	r1, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	430b      	orrs	r3, r1
 8003c66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	000186a0 	.word	0x000186a0
 8003cc0:	001e847f 	.word	0x001e847f
 8003cc4:	003d08ff 	.word	0x003d08ff
 8003cc8:	431bde83 	.word	0x431bde83
 8003ccc:	10624dd3 	.word	0x10624dd3

08003cd0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08c      	sub	sp, #48	; 0x30
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	4608      	mov	r0, r1
 8003cda:	4611      	mov	r1, r2
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4603      	mov	r3, r0
 8003ce0:	817b      	strh	r3, [r7, #10]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	813b      	strh	r3, [r7, #8]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cea:	f7ff f81f 	bl	8002d2c <HAL_GetTick>
 8003cee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	f040 8214 	bne.w	8004126 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	2319      	movs	r3, #25
 8003d04:	2201      	movs	r2, #1
 8003d06:	497b      	ldr	r1, [pc, #492]	; (8003ef4 <HAL_I2C_Mem_Read+0x224>)
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 fafb 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d14:	2302      	movs	r3, #2
 8003d16:	e207      	b.n	8004128 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_I2C_Mem_Read+0x56>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e200      	b.n	8004128 <HAL_I2C_Mem_Read+0x458>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d007      	beq.n	8003d4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2222      	movs	r2, #34	; 0x22
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2240      	movs	r2, #64	; 0x40
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4a5b      	ldr	r2, [pc, #364]	; (8003ef8 <HAL_I2C_Mem_Read+0x228>)
 8003d8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d8e:	88f8      	ldrh	r0, [r7, #6]
 8003d90:	893a      	ldrh	r2, [r7, #8]
 8003d92:	8979      	ldrh	r1, [r7, #10]
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	9301      	str	r3, [sp, #4]
 8003d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f9c8 	bl	8004134 <I2C_RequestMemoryRead>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e1bc      	b.n	8004128 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d113      	bne.n	8003dde <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db6:	2300      	movs	r3, #0
 8003db8:	623b      	str	r3, [r7, #32]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	623b      	str	r3, [r7, #32]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	623b      	str	r3, [r7, #32]
 8003dca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	e190      	b.n	8004100 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d11b      	bne.n	8003e1e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df6:	2300      	movs	r3, #0
 8003df8:	61fb      	str	r3, [r7, #28]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	61fb      	str	r3, [r7, #28]
 8003e0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	e170      	b.n	8004100 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d11b      	bne.n	8003e5e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e46:	2300      	movs	r3, #0
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	61bb      	str	r3, [r7, #24]
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	e150      	b.n	8004100 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e74:	e144      	b.n	8004100 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	f200 80f1 	bhi.w	8004062 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d123      	bne.n	8003ed0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 fb9b 	bl	80045c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e145      	b.n	8004128 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ece:	e117      	b.n	8004100 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d14e      	bne.n	8003f76 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ede:	2200      	movs	r2, #0
 8003ee0:	4906      	ldr	r1, [pc, #24]	; (8003efc <HAL_I2C_Mem_Read+0x22c>)
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fa0e 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d008      	beq.n	8003f00 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e11a      	b.n	8004128 <HAL_I2C_Mem_Read+0x458>
 8003ef2:	bf00      	nop
 8003ef4:	00100002 	.word	0x00100002
 8003ef8:	ffff0000 	.word	0xffff0000
 8003efc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f74:	e0c4      	b.n	8004100 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	496c      	ldr	r1, [pc, #432]	; (8004130 <HAL_I2C_Mem_Read+0x460>)
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f9bf 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0cb      	b.n	8004128 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd8:	2200      	movs	r2, #0
 8003fda:	4955      	ldr	r1, [pc, #340]	; (8004130 <HAL_I2C_Mem_Read+0x460>)
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f991 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e09d      	b.n	8004128 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004060:	e04e      	b.n	8004100 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004064:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 faae 	bl	80045c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e058      	b.n	8004128 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d124      	bne.n	8004100 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d107      	bne.n	80040ce <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040cc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	f47f aeb6 	bne.w	8003e76 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	e000      	b.n	8004128 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004126:	2302      	movs	r3, #2
  }
}
 8004128:	4618      	mov	r0, r3
 800412a:	3728      	adds	r7, #40	; 0x28
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	00010004 	.word	0x00010004

08004134 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	4608      	mov	r0, r1
 800413e:	4611      	mov	r1, r2
 8004140:	461a      	mov	r2, r3
 8004142:	4603      	mov	r3, r0
 8004144:	817b      	strh	r3, [r7, #10]
 8004146:	460b      	mov	r3, r1
 8004148:	813b      	strh	r3, [r7, #8]
 800414a:	4613      	mov	r3, r2
 800414c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800415c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800416c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	2200      	movs	r2, #0
 8004176:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f8c2 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00d      	beq.n	80041a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004194:	d103      	bne.n	800419e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800419c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e0aa      	b.n	80042f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041a2:	897b      	ldrh	r3, [r7, #10]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	461a      	mov	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	6a3a      	ldr	r2, [r7, #32]
 80041b6:	4952      	ldr	r1, [pc, #328]	; (8004300 <I2C_RequestMemoryRead+0x1cc>)
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f91d 	bl	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e097      	b.n	80042f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e0:	6a39      	ldr	r1, [r7, #32]
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f9a8 	bl	8004538 <I2C_WaitOnTXEFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00d      	beq.n	800420a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d107      	bne.n	8004206 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004204:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e076      	b.n	80042f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800420a:	88fb      	ldrh	r3, [r7, #6]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d105      	bne.n	800421c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004210:	893b      	ldrh	r3, [r7, #8]
 8004212:	b2da      	uxtb	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	611a      	str	r2, [r3, #16]
 800421a:	e021      	b.n	8004260 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800421c:	893b      	ldrh	r3, [r7, #8]
 800421e:	0a1b      	lsrs	r3, r3, #8
 8004220:	b29b      	uxth	r3, r3
 8004222:	b2da      	uxtb	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800422a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422c:	6a39      	ldr	r1, [r7, #32]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f982 	bl	8004538 <I2C_WaitOnTXEFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00d      	beq.n	8004256 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	2b04      	cmp	r3, #4
 8004240:	d107      	bne.n	8004252 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004250:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e050      	b.n	80042f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004256:	893b      	ldrh	r3, [r7, #8]
 8004258:	b2da      	uxtb	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004262:	6a39      	ldr	r1, [r7, #32]
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f967 	bl	8004538 <I2C_WaitOnTXEFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00d      	beq.n	800428c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	2b04      	cmp	r3, #4
 8004276:	d107      	bne.n	8004288 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004286:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e035      	b.n	80042f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800429a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 f82b 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00d      	beq.n	80042d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c2:	d103      	bne.n	80042cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e013      	b.n	80042f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042d0:	897b      	ldrh	r3, [r7, #10]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	6a3a      	ldr	r2, [r7, #32]
 80042e4:	4906      	ldr	r1, [pc, #24]	; (8004300 <I2C_RequestMemoryRead+0x1cc>)
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f886 	bl	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	00010002 	.word	0x00010002

08004304 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004314:	e048      	b.n	80043a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800431c:	d044      	beq.n	80043a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431e:	f7fe fd05 	bl	8002d2c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d302      	bcc.n	8004334 <I2C_WaitOnFlagUntilTimeout+0x30>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d139      	bne.n	80043a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	0c1b      	lsrs	r3, r3, #16
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b01      	cmp	r3, #1
 800433c:	d10d      	bne.n	800435a <I2C_WaitOnFlagUntilTimeout+0x56>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	43da      	mvns	r2, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4013      	ands	r3, r2
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	bf0c      	ite	eq
 8004350:	2301      	moveq	r3, #1
 8004352:	2300      	movne	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	e00c      	b.n	8004374 <I2C_WaitOnFlagUntilTimeout+0x70>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	43da      	mvns	r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	4013      	ands	r3, r2
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	429a      	cmp	r2, r3
 8004378:	d116      	bne.n	80043a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	f043 0220 	orr.w	r2, r3, #32
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e023      	b.n	80043f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	0c1b      	lsrs	r3, r3, #16
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d10d      	bne.n	80043ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	43da      	mvns	r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4013      	ands	r3, r2
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	bf0c      	ite	eq
 80043c4:	2301      	moveq	r3, #1
 80043c6:	2300      	movne	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	461a      	mov	r2, r3
 80043cc:	e00c      	b.n	80043e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	43da      	mvns	r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	4013      	ands	r3, r2
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	bf0c      	ite	eq
 80043e0:	2301      	moveq	r3, #1
 80043e2:	2300      	movne	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d093      	beq.n	8004316 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004406:	e071      	b.n	80044ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004416:	d123      	bne.n	8004460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004426:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004430:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	f043 0204 	orr.w	r2, r3, #4
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e067      	b.n	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004466:	d041      	beq.n	80044ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004468:	f7fe fc60 	bl	8002d2c <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	429a      	cmp	r2, r3
 8004476:	d302      	bcc.n	800447e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d136      	bne.n	80044ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	0c1b      	lsrs	r3, r3, #16
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	d10c      	bne.n	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	43da      	mvns	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4013      	ands	r3, r2
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	bf14      	ite	ne
 800449a:	2301      	movne	r3, #1
 800449c:	2300      	moveq	r3, #0
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	e00b      	b.n	80044ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	43da      	mvns	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4013      	ands	r3, r2
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bf14      	ite	ne
 80044b4:	2301      	movne	r3, #1
 80044b6:	2300      	moveq	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d016      	beq.n	80044ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f043 0220 	orr.w	r2, r3, #32
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e021      	b.n	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	0c1b      	lsrs	r3, r3, #16
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d10c      	bne.n	8004510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	43da      	mvns	r2, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	4013      	ands	r3, r2
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	bf14      	ite	ne
 8004508:	2301      	movne	r3, #1
 800450a:	2300      	moveq	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	e00b      	b.n	8004528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	43da      	mvns	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	bf14      	ite	ne
 8004522:	2301      	movne	r3, #1
 8004524:	2300      	moveq	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	f47f af6d 	bne.w	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004544:	e034      	b.n	80045b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 f89b 	bl	8004682 <I2C_IsAcknowledgeFailed>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e034      	b.n	80045c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800455c:	d028      	beq.n	80045b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455e:	f7fe fbe5 	bl	8002d2c <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	429a      	cmp	r2, r3
 800456c:	d302      	bcc.n	8004574 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d11d      	bne.n	80045b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457e:	2b80      	cmp	r3, #128	; 0x80
 8004580:	d016      	beq.n	80045b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e007      	b.n	80045c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ba:	2b80      	cmp	r3, #128	; 0x80
 80045bc:	d1c3      	bne.n	8004546 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045d4:	e049      	b.n	800466a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d119      	bne.n	8004618 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0210 	mvn.w	r2, #16
 80045ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e030      	b.n	800467a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004618:	f7fe fb88 	bl	8002d2c <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	429a      	cmp	r2, r3
 8004626:	d302      	bcc.n	800462e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d11d      	bne.n	800466a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004638:	2b40      	cmp	r3, #64	; 0x40
 800463a:	d016      	beq.n	800466a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	f043 0220 	orr.w	r2, r3, #32
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e007      	b.n	800467a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	d1ae      	bne.n	80045d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004698:	d11b      	bne.n	80046d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f043 0204 	orr.w	r2, r3, #4
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e267      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d075      	beq.n	80047ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046fe:	4b88      	ldr	r3, [pc, #544]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	2b04      	cmp	r3, #4
 8004708:	d00c      	beq.n	8004724 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800470a:	4b85      	ldr	r3, [pc, #532]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004712:	2b08      	cmp	r3, #8
 8004714:	d112      	bne.n	800473c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004716:	4b82      	ldr	r3, [pc, #520]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004722:	d10b      	bne.n	800473c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004724:	4b7e      	ldr	r3, [pc, #504]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d05b      	beq.n	80047e8 <HAL_RCC_OscConfig+0x108>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d157      	bne.n	80047e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e242      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004744:	d106      	bne.n	8004754 <HAL_RCC_OscConfig+0x74>
 8004746:	4b76      	ldr	r3, [pc, #472]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a75      	ldr	r2, [pc, #468]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 800474c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	e01d      	b.n	8004790 <HAL_RCC_OscConfig+0xb0>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800475c:	d10c      	bne.n	8004778 <HAL_RCC_OscConfig+0x98>
 800475e:	4b70      	ldr	r3, [pc, #448]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a6f      	ldr	r2, [pc, #444]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 8004764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	4b6d      	ldr	r3, [pc, #436]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a6c      	ldr	r2, [pc, #432]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 8004770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	e00b      	b.n	8004790 <HAL_RCC_OscConfig+0xb0>
 8004778:	4b69      	ldr	r3, [pc, #420]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a68      	ldr	r2, [pc, #416]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 800477e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	4b66      	ldr	r3, [pc, #408]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a65      	ldr	r2, [pc, #404]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 800478a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800478e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d013      	beq.n	80047c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004798:	f7fe fac8 	bl	8002d2c <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047a0:	f7fe fac4 	bl	8002d2c <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b64      	cmp	r3, #100	; 0x64
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e207      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b2:	4b5b      	ldr	r3, [pc, #364]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f0      	beq.n	80047a0 <HAL_RCC_OscConfig+0xc0>
 80047be:	e014      	b.n	80047ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c0:	f7fe fab4 	bl	8002d2c <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047c8:	f7fe fab0 	bl	8002d2c <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b64      	cmp	r3, #100	; 0x64
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e1f3      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047da:	4b51      	ldr	r3, [pc, #324]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f0      	bne.n	80047c8 <HAL_RCC_OscConfig+0xe8>
 80047e6:	e000      	b.n	80047ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d063      	beq.n	80048be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047f6:	4b4a      	ldr	r3, [pc, #296]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 030c 	and.w	r3, r3, #12
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00b      	beq.n	800481a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004802:	4b47      	ldr	r3, [pc, #284]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800480a:	2b08      	cmp	r3, #8
 800480c:	d11c      	bne.n	8004848 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800480e:	4b44      	ldr	r3, [pc, #272]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d116      	bne.n	8004848 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800481a:	4b41      	ldr	r3, [pc, #260]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <HAL_RCC_OscConfig+0x152>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d001      	beq.n	8004832 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e1c7      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004832:	4b3b      	ldr	r3, [pc, #236]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	4937      	ldr	r1, [pc, #220]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 8004842:	4313      	orrs	r3, r2
 8004844:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004846:	e03a      	b.n	80048be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d020      	beq.n	8004892 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004850:	4b34      	ldr	r3, [pc, #208]	; (8004924 <HAL_RCC_OscConfig+0x244>)
 8004852:	2201      	movs	r2, #1
 8004854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004856:	f7fe fa69 	bl	8002d2c <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800485e:	f7fe fa65 	bl	8002d2c <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e1a8      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004870:	4b2b      	ldr	r3, [pc, #172]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0f0      	beq.n	800485e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487c:	4b28      	ldr	r3, [pc, #160]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	4925      	ldr	r1, [pc, #148]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 800488c:	4313      	orrs	r3, r2
 800488e:	600b      	str	r3, [r1, #0]
 8004890:	e015      	b.n	80048be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004892:	4b24      	ldr	r3, [pc, #144]	; (8004924 <HAL_RCC_OscConfig+0x244>)
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fe fa48 	bl	8002d2c <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048a0:	f7fe fa44 	bl	8002d2c <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e187      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b2:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d036      	beq.n	8004938 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d016      	beq.n	8004900 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <HAL_RCC_OscConfig+0x248>)
 80048d4:	2201      	movs	r2, #1
 80048d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d8:	f7fe fa28 	bl	8002d2c <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048e0:	f7fe fa24 	bl	8002d2c <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e167      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f2:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <HAL_RCC_OscConfig+0x240>)
 80048f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0f0      	beq.n	80048e0 <HAL_RCC_OscConfig+0x200>
 80048fe:	e01b      	b.n	8004938 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004900:	4b09      	ldr	r3, [pc, #36]	; (8004928 <HAL_RCC_OscConfig+0x248>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004906:	f7fe fa11 	bl	8002d2c <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800490c:	e00e      	b.n	800492c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800490e:	f7fe fa0d 	bl	8002d2c <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d907      	bls.n	800492c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e150      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4e2>
 8004920:	40023800 	.word	0x40023800
 8004924:	42470000 	.word	0x42470000
 8004928:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800492c:	4b88      	ldr	r3, [pc, #544]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 800492e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1ea      	bne.n	800490e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 8097 	beq.w	8004a74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004946:	2300      	movs	r3, #0
 8004948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800494a:	4b81      	ldr	r3, [pc, #516]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10f      	bne.n	8004976 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004956:	2300      	movs	r3, #0
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	4b7d      	ldr	r3, [pc, #500]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	4a7c      	ldr	r2, [pc, #496]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 8004960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004964:	6413      	str	r3, [r2, #64]	; 0x40
 8004966:	4b7a      	ldr	r3, [pc, #488]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496e:	60bb      	str	r3, [r7, #8]
 8004970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004972:	2301      	movs	r3, #1
 8004974:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004976:	4b77      	ldr	r3, [pc, #476]	; (8004b54 <HAL_RCC_OscConfig+0x474>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497e:	2b00      	cmp	r3, #0
 8004980:	d118      	bne.n	80049b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004982:	4b74      	ldr	r3, [pc, #464]	; (8004b54 <HAL_RCC_OscConfig+0x474>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a73      	ldr	r2, [pc, #460]	; (8004b54 <HAL_RCC_OscConfig+0x474>)
 8004988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800498c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800498e:	f7fe f9cd 	bl	8002d2c <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004996:	f7fe f9c9 	bl	8002d2c <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e10c      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a8:	4b6a      	ldr	r3, [pc, #424]	; (8004b54 <HAL_RCC_OscConfig+0x474>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0f0      	beq.n	8004996 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d106      	bne.n	80049ca <HAL_RCC_OscConfig+0x2ea>
 80049bc:	4b64      	ldr	r3, [pc, #400]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 80049be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c0:	4a63      	ldr	r2, [pc, #396]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	6713      	str	r3, [r2, #112]	; 0x70
 80049c8:	e01c      	b.n	8004a04 <HAL_RCC_OscConfig+0x324>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b05      	cmp	r3, #5
 80049d0:	d10c      	bne.n	80049ec <HAL_RCC_OscConfig+0x30c>
 80049d2:	4b5f      	ldr	r3, [pc, #380]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 80049d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d6:	4a5e      	ldr	r2, [pc, #376]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 80049d8:	f043 0304 	orr.w	r3, r3, #4
 80049dc:	6713      	str	r3, [r2, #112]	; 0x70
 80049de:	4b5c      	ldr	r3, [pc, #368]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	4a5b      	ldr	r2, [pc, #364]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 80049e4:	f043 0301 	orr.w	r3, r3, #1
 80049e8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ea:	e00b      	b.n	8004a04 <HAL_RCC_OscConfig+0x324>
 80049ec:	4b58      	ldr	r3, [pc, #352]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 80049ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f0:	4a57      	ldr	r2, [pc, #348]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 80049f2:	f023 0301 	bic.w	r3, r3, #1
 80049f6:	6713      	str	r3, [r2, #112]	; 0x70
 80049f8:	4b55      	ldr	r3, [pc, #340]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 80049fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fc:	4a54      	ldr	r2, [pc, #336]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 80049fe:	f023 0304 	bic.w	r3, r3, #4
 8004a02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d015      	beq.n	8004a38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0c:	f7fe f98e 	bl	8002d2c <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a12:	e00a      	b.n	8004a2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a14:	f7fe f98a 	bl	8002d2c <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e0cb      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2a:	4b49      	ldr	r3, [pc, #292]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 8004a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0ee      	beq.n	8004a14 <HAL_RCC_OscConfig+0x334>
 8004a36:	e014      	b.n	8004a62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a38:	f7fe f978 	bl	8002d2c <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a3e:	e00a      	b.n	8004a56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a40:	f7fe f974 	bl	8002d2c <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e0b5      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a56:	4b3e      	ldr	r3, [pc, #248]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1ee      	bne.n	8004a40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a62:	7dfb      	ldrb	r3, [r7, #23]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d105      	bne.n	8004a74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a68:	4b39      	ldr	r3, [pc, #228]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	4a38      	ldr	r2, [pc, #224]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 8004a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 80a1 	beq.w	8004bc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a7e:	4b34      	ldr	r3, [pc, #208]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 030c 	and.w	r3, r3, #12
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d05c      	beq.n	8004b44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d141      	bne.n	8004b16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a92:	4b31      	ldr	r3, [pc, #196]	; (8004b58 <HAL_RCC_OscConfig+0x478>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a98:	f7fe f948 	bl	8002d2c <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa0:	f7fe f944 	bl	8002d2c <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e087      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab2:	4b27      	ldr	r3, [pc, #156]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f0      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69da      	ldr	r2, [r3, #28]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	019b      	lsls	r3, r3, #6
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	085b      	lsrs	r3, r3, #1
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	041b      	lsls	r3, r3, #16
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	061b      	lsls	r3, r3, #24
 8004ae2:	491b      	ldr	r1, [pc, #108]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ae8:	4b1b      	ldr	r3, [pc, #108]	; (8004b58 <HAL_RCC_OscConfig+0x478>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aee:	f7fe f91d 	bl	8002d2c <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af4:	e008      	b.n	8004b08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af6:	f7fe f919 	bl	8002d2c <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e05c      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b08:	4b11      	ldr	r3, [pc, #68]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0f0      	beq.n	8004af6 <HAL_RCC_OscConfig+0x416>
 8004b14:	e054      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b16:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <HAL_RCC_OscConfig+0x478>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b1c:	f7fe f906 	bl	8002d2c <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b24:	f7fe f902 	bl	8002d2c <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e045      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b36:	4b06      	ldr	r3, [pc, #24]	; (8004b50 <HAL_RCC_OscConfig+0x470>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f0      	bne.n	8004b24 <HAL_RCC_OscConfig+0x444>
 8004b42:	e03d      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d107      	bne.n	8004b5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e038      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4e2>
 8004b50:	40023800 	.word	0x40023800
 8004b54:	40007000 	.word	0x40007000
 8004b58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b5c:	4b1b      	ldr	r3, [pc, #108]	; (8004bcc <HAL_RCC_OscConfig+0x4ec>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d028      	beq.n	8004bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d121      	bne.n	8004bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d11a      	bne.n	8004bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d111      	bne.n	8004bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	085b      	lsrs	r3, r3, #1
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d107      	bne.n	8004bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d001      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40023800 	.word	0x40023800

08004bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0cc      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004be4:	4b68      	ldr	r3, [pc, #416]	; (8004d88 <HAL_RCC_ClockConfig+0x1b8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d90c      	bls.n	8004c0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf2:	4b65      	ldr	r3, [pc, #404]	; (8004d88 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfa:	4b63      	ldr	r3, [pc, #396]	; (8004d88 <HAL_RCC_ClockConfig+0x1b8>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d001      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0b8      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d020      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c24:	4b59      	ldr	r3, [pc, #356]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	4a58      	ldr	r2, [pc, #352]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c3c:	4b53      	ldr	r3, [pc, #332]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	4a52      	ldr	r2, [pc, #328]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c48:	4b50      	ldr	r3, [pc, #320]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	494d      	ldr	r1, [pc, #308]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d044      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d107      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6e:	4b47      	ldr	r3, [pc, #284]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d119      	bne.n	8004cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e07f      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d003      	beq.n	8004c8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d107      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8e:	4b3f      	ldr	r3, [pc, #252]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d109      	bne.n	8004cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e06f      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9e:	4b3b      	ldr	r3, [pc, #236]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e067      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cae:	4b37      	ldr	r3, [pc, #220]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f023 0203 	bic.w	r2, r3, #3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	4934      	ldr	r1, [pc, #208]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cc0:	f7fe f834 	bl	8002d2c <HAL_GetTick>
 8004cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc6:	e00a      	b.n	8004cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc8:	f7fe f830 	bl	8002d2c <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e04f      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cde:	4b2b      	ldr	r3, [pc, #172]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 020c 	and.w	r2, r3, #12
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d1eb      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf0:	4b25      	ldr	r3, [pc, #148]	; (8004d88 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d20c      	bcs.n	8004d18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfe:	4b22      	ldr	r3, [pc, #136]	; (8004d88 <HAL_RCC_ClockConfig+0x1b8>)
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d06:	4b20      	ldr	r3, [pc, #128]	; (8004d88 <HAL_RCC_ClockConfig+0x1b8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d001      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e032      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d008      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d24:	4b19      	ldr	r3, [pc, #100]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4916      	ldr	r1, [pc, #88]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d42:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	490e      	ldr	r1, [pc, #56]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d56:	f000 f821 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	091b      	lsrs	r3, r3, #4
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	490a      	ldr	r1, [pc, #40]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004d68:	5ccb      	ldrb	r3, [r1, r3]
 8004d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6e:	4a09      	ldr	r2, [pc, #36]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d72:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <HAL_RCC_ClockConfig+0x1c8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fd fde6 	bl	8002948 <HAL_InitTick>

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40023c00 	.word	0x40023c00
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	0801804c 	.word	0x0801804c
 8004d94:	20000004 	.word	0x20000004
 8004d98:	20000008 	.word	0x20000008

08004d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004da0:	b094      	sub	sp, #80	; 0x50
 8004da2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	647b      	str	r3, [r7, #68]	; 0x44
 8004da8:	2300      	movs	r3, #0
 8004daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dac:	2300      	movs	r3, #0
 8004dae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004db4:	4b79      	ldr	r3, [pc, #484]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 030c 	and.w	r3, r3, #12
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d00d      	beq.n	8004ddc <HAL_RCC_GetSysClockFreq+0x40>
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	f200 80e1 	bhi.w	8004f88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d003      	beq.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dce:	e0db      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dd0:	4b73      	ldr	r3, [pc, #460]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dd2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004dd4:	e0db      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dd6:	4b73      	ldr	r3, [pc, #460]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004dd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dda:	e0d8      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ddc:	4b6f      	ldr	r3, [pc, #444]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004de6:	4b6d      	ldr	r3, [pc, #436]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d063      	beq.n	8004eba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df2:	4b6a      	ldr	r3, [pc, #424]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	099b      	lsrs	r3, r3, #6
 8004df8:	2200      	movs	r2, #0
 8004dfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dfc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e04:	633b      	str	r3, [r7, #48]	; 0x30
 8004e06:	2300      	movs	r3, #0
 8004e08:	637b      	str	r3, [r7, #52]	; 0x34
 8004e0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e0e:	4622      	mov	r2, r4
 8004e10:	462b      	mov	r3, r5
 8004e12:	f04f 0000 	mov.w	r0, #0
 8004e16:	f04f 0100 	mov.w	r1, #0
 8004e1a:	0159      	lsls	r1, r3, #5
 8004e1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e20:	0150      	lsls	r0, r2, #5
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	4621      	mov	r1, r4
 8004e28:	1a51      	subs	r1, r2, r1
 8004e2a:	6139      	str	r1, [r7, #16]
 8004e2c:	4629      	mov	r1, r5
 8004e2e:	eb63 0301 	sbc.w	r3, r3, r1
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e40:	4659      	mov	r1, fp
 8004e42:	018b      	lsls	r3, r1, #6
 8004e44:	4651      	mov	r1, sl
 8004e46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e4a:	4651      	mov	r1, sl
 8004e4c:	018a      	lsls	r2, r1, #6
 8004e4e:	4651      	mov	r1, sl
 8004e50:	ebb2 0801 	subs.w	r8, r2, r1
 8004e54:	4659      	mov	r1, fp
 8004e56:	eb63 0901 	sbc.w	r9, r3, r1
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e6e:	4690      	mov	r8, r2
 8004e70:	4699      	mov	r9, r3
 8004e72:	4623      	mov	r3, r4
 8004e74:	eb18 0303 	adds.w	r3, r8, r3
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	462b      	mov	r3, r5
 8004e7c:	eb49 0303 	adc.w	r3, r9, r3
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e8e:	4629      	mov	r1, r5
 8004e90:	024b      	lsls	r3, r1, #9
 8004e92:	4621      	mov	r1, r4
 8004e94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e98:	4621      	mov	r1, r4
 8004e9a:	024a      	lsls	r2, r1, #9
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ea8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eac:	f7fb ffa4 	bl	8000df8 <__aeabi_uldivmod>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eb8:	e058      	b.n	8004f6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eba:	4b38      	ldr	r3, [pc, #224]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	099b      	lsrs	r3, r3, #6
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004eca:	623b      	str	r3, [r7, #32]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	464b      	mov	r3, r9
 8004ed8:	f04f 0000 	mov.w	r0, #0
 8004edc:	f04f 0100 	mov.w	r1, #0
 8004ee0:	0159      	lsls	r1, r3, #5
 8004ee2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ee6:	0150      	lsls	r0, r2, #5
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4641      	mov	r1, r8
 8004eee:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f0c:	ebb2 040a 	subs.w	r4, r2, sl
 8004f10:	eb63 050b 	sbc.w	r5, r3, fp
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	00eb      	lsls	r3, r5, #3
 8004f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f22:	00e2      	lsls	r2, r4, #3
 8004f24:	4614      	mov	r4, r2
 8004f26:	461d      	mov	r5, r3
 8004f28:	4643      	mov	r3, r8
 8004f2a:	18e3      	adds	r3, r4, r3
 8004f2c:	603b      	str	r3, [r7, #0]
 8004f2e:	464b      	mov	r3, r9
 8004f30:	eb45 0303 	adc.w	r3, r5, r3
 8004f34:	607b      	str	r3, [r7, #4]
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f42:	4629      	mov	r1, r5
 8004f44:	028b      	lsls	r3, r1, #10
 8004f46:	4621      	mov	r1, r4
 8004f48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	028a      	lsls	r2, r1, #10
 8004f50:	4610      	mov	r0, r2
 8004f52:	4619      	mov	r1, r3
 8004f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f56:	2200      	movs	r2, #0
 8004f58:	61bb      	str	r3, [r7, #24]
 8004f5a:	61fa      	str	r2, [r7, #28]
 8004f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f60:	f7fb ff4a 	bl	8000df8 <__aeabi_uldivmod>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4613      	mov	r3, r2
 8004f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	0c1b      	lsrs	r3, r3, #16
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	3301      	adds	r3, #1
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f86:	e002      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f88:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3750      	adds	r7, #80	; 0x50
 8004f94:	46bd      	mov	sp, r7
 8004f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	00f42400 	.word	0x00f42400
 8004fa4:	007a1200 	.word	0x007a1200

08004fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fac:	4b03      	ldr	r3, [pc, #12]	; (8004fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fae:	681b      	ldr	r3, [r3, #0]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20000004 	.word	0x20000004

08004fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fc4:	f7ff fff0 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	0a9b      	lsrs	r3, r3, #10
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	4903      	ldr	r1, [pc, #12]	; (8004fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fd6:	5ccb      	ldrb	r3, [r1, r3]
 8004fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	0801805c 	.word	0x0801805c

08004fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fec:	f7ff ffdc 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	4b05      	ldr	r3, [pc, #20]	; (8005008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	0b5b      	lsrs	r3, r3, #13
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	4903      	ldr	r1, [pc, #12]	; (800500c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ffe:	5ccb      	ldrb	r3, [r1, r3]
 8005000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005004:	4618      	mov	r0, r3
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40023800 	.word	0x40023800
 800500c:	0801805c 	.word	0x0801805c

08005010 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	220f      	movs	r2, #15
 800501e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005020:	4b12      	ldr	r3, [pc, #72]	; (800506c <HAL_RCC_GetClockConfig+0x5c>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f003 0203 	and.w	r2, r3, #3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800502c:	4b0f      	ldr	r3, [pc, #60]	; (800506c <HAL_RCC_GetClockConfig+0x5c>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005038:	4b0c      	ldr	r3, [pc, #48]	; (800506c <HAL_RCC_GetClockConfig+0x5c>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005044:	4b09      	ldr	r3, [pc, #36]	; (800506c <HAL_RCC_GetClockConfig+0x5c>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	08db      	lsrs	r3, r3, #3
 800504a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005052:	4b07      	ldr	r3, [pc, #28]	; (8005070 <HAL_RCC_GetClockConfig+0x60>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0207 	and.w	r2, r3, #7
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	601a      	str	r2, [r3, #0]
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40023800 	.word	0x40023800
 8005070:	40023c00 	.word	0x40023c00

08005074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e041      	b.n	800510a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fd fb28 	bl	80026f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3304      	adds	r3, #4
 80050b0:	4619      	mov	r1, r3
 80050b2:	4610      	mov	r0, r2
 80050b4:	f000 fc3c 	bl	8005930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b01      	cmp	r3, #1
 8005126:	d001      	beq.n	800512c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e044      	b.n	80051b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1e      	ldr	r2, [pc, #120]	; (80051c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d018      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x6c>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005156:	d013      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x6c>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1a      	ldr	r2, [pc, #104]	; (80051c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00e      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x6c>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a19      	ldr	r2, [pc, #100]	; (80051cc <HAL_TIM_Base_Start_IT+0xb8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d009      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x6c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a17      	ldr	r2, [pc, #92]	; (80051d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d004      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x6c>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a16      	ldr	r2, [pc, #88]	; (80051d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d111      	bne.n	80051a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b06      	cmp	r3, #6
 8005190:	d010      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0201 	orr.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a2:	e007      	b.n	80051b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40010000 	.word	0x40010000
 80051c8:	40000400 	.word	0x40000400
 80051cc:	40000800 	.word	0x40000800
 80051d0:	40000c00 	.word	0x40000c00
 80051d4:	40014000 	.word	0x40014000

080051d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e041      	b.n	800526e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f839 	bl	8005276 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3304      	adds	r3, #4
 8005214:	4619      	mov	r1, r3
 8005216:	4610      	mov	r0, r2
 8005218:	f000 fb8a 	bl	8005930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
	...

0800528c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d109      	bne.n	80052b0 <HAL_TIM_PWM_Start+0x24>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	bf14      	ite	ne
 80052a8:	2301      	movne	r3, #1
 80052aa:	2300      	moveq	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	e022      	b.n	80052f6 <HAL_TIM_PWM_Start+0x6a>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d109      	bne.n	80052ca <HAL_TIM_PWM_Start+0x3e>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b01      	cmp	r3, #1
 80052c0:	bf14      	ite	ne
 80052c2:	2301      	movne	r3, #1
 80052c4:	2300      	moveq	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	e015      	b.n	80052f6 <HAL_TIM_PWM_Start+0x6a>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d109      	bne.n	80052e4 <HAL_TIM_PWM_Start+0x58>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	bf14      	ite	ne
 80052dc:	2301      	movne	r3, #1
 80052de:	2300      	moveq	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	e008      	b.n	80052f6 <HAL_TIM_PWM_Start+0x6a>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	bf14      	ite	ne
 80052f0:	2301      	movne	r3, #1
 80052f2:	2300      	moveq	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e068      	b.n	80053d0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d104      	bne.n	800530e <HAL_TIM_PWM_Start+0x82>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800530c:	e013      	b.n	8005336 <HAL_TIM_PWM_Start+0xaa>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b04      	cmp	r3, #4
 8005312:	d104      	bne.n	800531e <HAL_TIM_PWM_Start+0x92>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800531c:	e00b      	b.n	8005336 <HAL_TIM_PWM_Start+0xaa>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d104      	bne.n	800532e <HAL_TIM_PWM_Start+0xa2>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800532c:	e003      	b.n	8005336 <HAL_TIM_PWM_Start+0xaa>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2202      	movs	r2, #2
 8005332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2201      	movs	r2, #1
 800533c:	6839      	ldr	r1, [r7, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fda8 	bl	8005e94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a23      	ldr	r2, [pc, #140]	; (80053d8 <HAL_TIM_PWM_Start+0x14c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d107      	bne.n	800535e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800535c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1d      	ldr	r2, [pc, #116]	; (80053d8 <HAL_TIM_PWM_Start+0x14c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d018      	beq.n	800539a <HAL_TIM_PWM_Start+0x10e>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005370:	d013      	beq.n	800539a <HAL_TIM_PWM_Start+0x10e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a19      	ldr	r2, [pc, #100]	; (80053dc <HAL_TIM_PWM_Start+0x150>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d00e      	beq.n	800539a <HAL_TIM_PWM_Start+0x10e>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a17      	ldr	r2, [pc, #92]	; (80053e0 <HAL_TIM_PWM_Start+0x154>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d009      	beq.n	800539a <HAL_TIM_PWM_Start+0x10e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a16      	ldr	r2, [pc, #88]	; (80053e4 <HAL_TIM_PWM_Start+0x158>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d004      	beq.n	800539a <HAL_TIM_PWM_Start+0x10e>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a14      	ldr	r2, [pc, #80]	; (80053e8 <HAL_TIM_PWM_Start+0x15c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d111      	bne.n	80053be <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b06      	cmp	r3, #6
 80053aa:	d010      	beq.n	80053ce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0201 	orr.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053bc:	e007      	b.n	80053ce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0201 	orr.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40014000 	.word	0x40014000

080053ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d020      	beq.n	8005450 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01b      	beq.n	8005450 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0202 	mvn.w	r2, #2
 8005420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fa5b 	bl	80058f2 <HAL_TIM_IC_CaptureCallback>
 800543c:	e005      	b.n	800544a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fa4d 	bl	80058de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fa5e 	bl	8005906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b00      	cmp	r3, #0
 8005458:	d020      	beq.n	800549c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d01b      	beq.n	800549c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0204 	mvn.w	r2, #4
 800546c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2202      	movs	r2, #2
 8005472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fa35 	bl	80058f2 <HAL_TIM_IC_CaptureCallback>
 8005488:	e005      	b.n	8005496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fa27 	bl	80058de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fa38 	bl	8005906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d020      	beq.n	80054e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f003 0308 	and.w	r3, r3, #8
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01b      	beq.n	80054e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0208 	mvn.w	r2, #8
 80054b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2204      	movs	r2, #4
 80054be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fa0f 	bl	80058f2 <HAL_TIM_IC_CaptureCallback>
 80054d4:	e005      	b.n	80054e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fa01 	bl	80058de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fa12 	bl	8005906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f003 0310 	and.w	r3, r3, #16
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d020      	beq.n	8005534 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f003 0310 	and.w	r3, r3, #16
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01b      	beq.n	8005534 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f06f 0210 	mvn.w	r2, #16
 8005504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2208      	movs	r2, #8
 800550a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f9e9 	bl	80058f2 <HAL_TIM_IC_CaptureCallback>
 8005520:	e005      	b.n	800552e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f9db 	bl	80058de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f9ec 	bl	8005906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00c      	beq.n	8005558 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d007      	beq.n	8005558 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0201 	mvn.w	r2, #1
 8005550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7fc fe7a 	bl	800224c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00c      	beq.n	800557c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005568:	2b00      	cmp	r3, #0
 800556a:	d007      	beq.n	800557c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fd2a 	bl	8005fd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00c      	beq.n	80055a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b00      	cmp	r3, #0
 800558e:	d007      	beq.n	80055a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f9bd 	bl	800591a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00c      	beq.n	80055c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0220 	mvn.w	r2, #32
 80055bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fcfc 	bl	8005fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d101      	bne.n	80055ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055e6:	2302      	movs	r3, #2
 80055e8:	e0ae      	b.n	8005748 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b0c      	cmp	r3, #12
 80055f6:	f200 809f 	bhi.w	8005738 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055fa:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	08005635 	.word	0x08005635
 8005604:	08005739 	.word	0x08005739
 8005608:	08005739 	.word	0x08005739
 800560c:	08005739 	.word	0x08005739
 8005610:	08005675 	.word	0x08005675
 8005614:	08005739 	.word	0x08005739
 8005618:	08005739 	.word	0x08005739
 800561c:	08005739 	.word	0x08005739
 8005620:	080056b7 	.word	0x080056b7
 8005624:	08005739 	.word	0x08005739
 8005628:	08005739 	.word	0x08005739
 800562c:	08005739 	.word	0x08005739
 8005630:	080056f7 	.word	0x080056f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fa04 	bl	8005a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699a      	ldr	r2, [r3, #24]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0208 	orr.w	r2, r2, #8
 800564e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699a      	ldr	r2, [r3, #24]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0204 	bic.w	r2, r2, #4
 800565e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6999      	ldr	r1, [r3, #24]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	619a      	str	r2, [r3, #24]
      break;
 8005672:	e064      	b.n	800573e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fa4a 	bl	8005b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699a      	ldr	r2, [r3, #24]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800568e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699a      	ldr	r2, [r3, #24]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800569e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6999      	ldr	r1, [r3, #24]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	021a      	lsls	r2, r3, #8
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	619a      	str	r2, [r3, #24]
      break;
 80056b4:	e043      	b.n	800573e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68b9      	ldr	r1, [r7, #8]
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fa95 	bl	8005bec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69da      	ldr	r2, [r3, #28]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 0208 	orr.w	r2, r2, #8
 80056d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69da      	ldr	r2, [r3, #28]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0204 	bic.w	r2, r2, #4
 80056e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69d9      	ldr	r1, [r3, #28]
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	61da      	str	r2, [r3, #28]
      break;
 80056f4:	e023      	b.n	800573e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fadf 	bl	8005cc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69da      	ldr	r2, [r3, #28]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69da      	ldr	r2, [r3, #28]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69d9      	ldr	r1, [r3, #28]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	021a      	lsls	r2, r3, #8
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	61da      	str	r2, [r3, #28]
      break;
 8005736:	e002      	b.n	800573e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	75fb      	strb	r3, [r7, #23]
      break;
 800573c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005746:	7dfb      	ldrb	r3, [r7, #23]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_TIM_ConfigClockSource+0x1c>
 8005768:	2302      	movs	r3, #2
 800576a:	e0b4      	b.n	80058d6 <HAL_TIM_ConfigClockSource+0x186>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800578a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005792:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a4:	d03e      	beq.n	8005824 <HAL_TIM_ConfigClockSource+0xd4>
 80057a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057aa:	f200 8087 	bhi.w	80058bc <HAL_TIM_ConfigClockSource+0x16c>
 80057ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b2:	f000 8086 	beq.w	80058c2 <HAL_TIM_ConfigClockSource+0x172>
 80057b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ba:	d87f      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x16c>
 80057bc:	2b70      	cmp	r3, #112	; 0x70
 80057be:	d01a      	beq.n	80057f6 <HAL_TIM_ConfigClockSource+0xa6>
 80057c0:	2b70      	cmp	r3, #112	; 0x70
 80057c2:	d87b      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x16c>
 80057c4:	2b60      	cmp	r3, #96	; 0x60
 80057c6:	d050      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x11a>
 80057c8:	2b60      	cmp	r3, #96	; 0x60
 80057ca:	d877      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x16c>
 80057cc:	2b50      	cmp	r3, #80	; 0x50
 80057ce:	d03c      	beq.n	800584a <HAL_TIM_ConfigClockSource+0xfa>
 80057d0:	2b50      	cmp	r3, #80	; 0x50
 80057d2:	d873      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x16c>
 80057d4:	2b40      	cmp	r3, #64	; 0x40
 80057d6:	d058      	beq.n	800588a <HAL_TIM_ConfigClockSource+0x13a>
 80057d8:	2b40      	cmp	r3, #64	; 0x40
 80057da:	d86f      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x16c>
 80057dc:	2b30      	cmp	r3, #48	; 0x30
 80057de:	d064      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0x15a>
 80057e0:	2b30      	cmp	r3, #48	; 0x30
 80057e2:	d86b      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x16c>
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d060      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0x15a>
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d867      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x16c>
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d05c      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0x15a>
 80057f0:	2b10      	cmp	r3, #16
 80057f2:	d05a      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0x15a>
 80057f4:	e062      	b.n	80058bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005806:	f000 fb25 	bl	8005e54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005818:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	609a      	str	r2, [r3, #8]
      break;
 8005822:	e04f      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005834:	f000 fb0e 	bl	8005e54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005846:	609a      	str	r2, [r3, #8]
      break;
 8005848:	e03c      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005856:	461a      	mov	r2, r3
 8005858:	f000 fa82 	bl	8005d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2150      	movs	r1, #80	; 0x50
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fadb 	bl	8005e1e <TIM_ITRx_SetConfig>
      break;
 8005868:	e02c      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005876:	461a      	mov	r2, r3
 8005878:	f000 faa1 	bl	8005dbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2160      	movs	r1, #96	; 0x60
 8005882:	4618      	mov	r0, r3
 8005884:	f000 facb 	bl	8005e1e <TIM_ITRx_SetConfig>
      break;
 8005888:	e01c      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005896:	461a      	mov	r2, r3
 8005898:	f000 fa62 	bl	8005d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2140      	movs	r1, #64	; 0x40
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fabb 	bl	8005e1e <TIM_ITRx_SetConfig>
      break;
 80058a8:	e00c      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4619      	mov	r1, r3
 80058b4:	4610      	mov	r0, r2
 80058b6:	f000 fab2 	bl	8005e1e <TIM_ITRx_SetConfig>
      break;
 80058ba:	e003      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	73fb      	strb	r3, [r7, #15]
      break;
 80058c0:	e000      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
	...

08005930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a3a      	ldr	r2, [pc, #232]	; (8005a2c <TIM_Base_SetConfig+0xfc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d00f      	beq.n	8005968 <TIM_Base_SetConfig+0x38>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594e:	d00b      	beq.n	8005968 <TIM_Base_SetConfig+0x38>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a37      	ldr	r2, [pc, #220]	; (8005a30 <TIM_Base_SetConfig+0x100>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d007      	beq.n	8005968 <TIM_Base_SetConfig+0x38>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a36      	ldr	r2, [pc, #216]	; (8005a34 <TIM_Base_SetConfig+0x104>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d003      	beq.n	8005968 <TIM_Base_SetConfig+0x38>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a35      	ldr	r2, [pc, #212]	; (8005a38 <TIM_Base_SetConfig+0x108>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d108      	bne.n	800597a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a2b      	ldr	r2, [pc, #172]	; (8005a2c <TIM_Base_SetConfig+0xfc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d01b      	beq.n	80059ba <TIM_Base_SetConfig+0x8a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005988:	d017      	beq.n	80059ba <TIM_Base_SetConfig+0x8a>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a28      	ldr	r2, [pc, #160]	; (8005a30 <TIM_Base_SetConfig+0x100>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <TIM_Base_SetConfig+0x8a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a27      	ldr	r2, [pc, #156]	; (8005a34 <TIM_Base_SetConfig+0x104>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00f      	beq.n	80059ba <TIM_Base_SetConfig+0x8a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a26      	ldr	r2, [pc, #152]	; (8005a38 <TIM_Base_SetConfig+0x108>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00b      	beq.n	80059ba <TIM_Base_SetConfig+0x8a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a25      	ldr	r2, [pc, #148]	; (8005a3c <TIM_Base_SetConfig+0x10c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d007      	beq.n	80059ba <TIM_Base_SetConfig+0x8a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a24      	ldr	r2, [pc, #144]	; (8005a40 <TIM_Base_SetConfig+0x110>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d003      	beq.n	80059ba <TIM_Base_SetConfig+0x8a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a23      	ldr	r2, [pc, #140]	; (8005a44 <TIM_Base_SetConfig+0x114>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d108      	bne.n	80059cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a0e      	ldr	r2, [pc, #56]	; (8005a2c <TIM_Base_SetConfig+0xfc>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d103      	bne.n	8005a00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	691a      	ldr	r2, [r3, #16]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d105      	bne.n	8005a1e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f023 0201 	bic.w	r2, r3, #1
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	611a      	str	r2, [r3, #16]
  }
}
 8005a1e:	bf00      	nop
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	40010000 	.word	0x40010000
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40000800 	.word	0x40000800
 8005a38:	40000c00 	.word	0x40000c00
 8005a3c:	40014000 	.word	0x40014000
 8005a40:	40014400 	.word	0x40014400
 8005a44:	40014800 	.word	0x40014800

08005a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	f023 0201 	bic.w	r2, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0303 	bic.w	r3, r3, #3
 8005a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f023 0302 	bic.w	r3, r3, #2
 8005a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a1c      	ldr	r2, [pc, #112]	; (8005b10 <TIM_OC1_SetConfig+0xc8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d10c      	bne.n	8005abe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0308 	bic.w	r3, r3, #8
 8005aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f023 0304 	bic.w	r3, r3, #4
 8005abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a13      	ldr	r2, [pc, #76]	; (8005b10 <TIM_OC1_SetConfig+0xc8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d111      	bne.n	8005aea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	621a      	str	r2, [r3, #32]
}
 8005b04:	bf00      	nop
 8005b06:	371c      	adds	r7, #28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	40010000 	.word	0x40010000

08005b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f023 0210 	bic.w	r2, r3, #16
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	021b      	lsls	r3, r3, #8
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f023 0320 	bic.w	r3, r3, #32
 8005b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a1e      	ldr	r2, [pc, #120]	; (8005be8 <TIM_OC2_SetConfig+0xd4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d10d      	bne.n	8005b90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a15      	ldr	r2, [pc, #84]	; (8005be8 <TIM_OC2_SetConfig+0xd4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d113      	bne.n	8005bc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	621a      	str	r2, [r3, #32]
}
 8005bda:	bf00      	nop
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	40010000 	.word	0x40010000

08005bec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0303 	bic.w	r3, r3, #3
 8005c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	021b      	lsls	r3, r3, #8
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a1d      	ldr	r2, [pc, #116]	; (8005cbc <TIM_OC3_SetConfig+0xd0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d10d      	bne.n	8005c66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a14      	ldr	r2, [pc, #80]	; (8005cbc <TIM_OC3_SetConfig+0xd0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d113      	bne.n	8005c96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	621a      	str	r2, [r3, #32]
}
 8005cb0:	bf00      	nop
 8005cb2:	371c      	adds	r7, #28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	40010000 	.word	0x40010000

08005cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	021b      	lsls	r3, r3, #8
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	031b      	lsls	r3, r3, #12
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a10      	ldr	r2, [pc, #64]	; (8005d5c <TIM_OC4_SetConfig+0x9c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d109      	bne.n	8005d34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	019b      	lsls	r3, r3, #6
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40010000 	.word	0x40010000

08005d60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	f023 0201 	bic.w	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f023 030a 	bic.w	r3, r3, #10
 8005d9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	621a      	str	r2, [r3, #32]
}
 8005db2:	bf00      	nop
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b087      	sub	sp, #28
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	f023 0210 	bic.w	r2, r3, #16
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005de8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	031b      	lsls	r3, r3, #12
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	bf00      	nop
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b085      	sub	sp, #20
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f043 0307 	orr.w	r3, r3, #7
 8005e40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	609a      	str	r2, [r3, #8]
}
 8005e48:	bf00      	nop
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	021a      	lsls	r2, r3, #8
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	431a      	orrs	r2, r3
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	609a      	str	r2, [r3, #8]
}
 8005e88:	bf00      	nop
 8005e8a:	371c      	adds	r7, #28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f003 031f 	and.w	r3, r3, #31
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a1a      	ldr	r2, [r3, #32]
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	43db      	mvns	r3, r3
 8005eb6:	401a      	ands	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a1a      	ldr	r2, [r3, #32]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 031f 	and.w	r3, r3, #31
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
	...

08005ee0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e050      	b.n	8005f9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a1c      	ldr	r2, [pc, #112]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d018      	beq.n	8005f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f44:	d013      	beq.n	8005f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a18      	ldr	r2, [pc, #96]	; (8005fac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d00e      	beq.n	8005f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a16      	ldr	r2, [pc, #88]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d009      	beq.n	8005f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a15      	ldr	r2, [pc, #84]	; (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d004      	beq.n	8005f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a13      	ldr	r2, [pc, #76]	; (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d10c      	bne.n	8005f88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	40010000 	.word	0x40010000
 8005fac:	40000400 	.word	0x40000400
 8005fb0:	40000800 	.word	0x40000800
 8005fb4:	40000c00 	.word	0x40000c00
 8005fb8:	40014000 	.word	0x40014000

08005fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e042      	b.n	800607c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fc fbe4 	bl	80027d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2224      	movs	r2, #36	; 0x24
 8006014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 ffc9 	bl	8006fc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800603c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695a      	ldr	r2, [r3, #20]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800604c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800605c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2220      	movs	r2, #32
 8006068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2220      	movs	r2, #32
 8006070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08c      	sub	sp, #48	; 0x30
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	4613      	mov	r3, r2
 8006090:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b20      	cmp	r3, #32
 800609c:	d156      	bne.n	800614c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <HAL_UART_Transmit_DMA+0x26>
 80060a4:	88fb      	ldrh	r3, [r7, #6]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e04f      	b.n	800614e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	88fa      	ldrh	r2, [r7, #6]
 80060b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	88fa      	ldrh	r2, [r7, #6]
 80060be:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2221      	movs	r2, #33	; 0x21
 80060ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	4a21      	ldr	r2, [pc, #132]	; (8006158 <HAL_UART_Transmit_DMA+0xd4>)
 80060d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060da:	4a20      	ldr	r2, [pc, #128]	; (800615c <HAL_UART_Transmit_DMA+0xd8>)
 80060dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	4a1f      	ldr	r2, [pc, #124]	; (8006160 <HAL_UART_Transmit_DMA+0xdc>)
 80060e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	2200      	movs	r2, #0
 80060ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80060ee:	f107 0308 	add.w	r3, r7, #8
 80060f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80060f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fa:	6819      	ldr	r1, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3304      	adds	r3, #4
 8006102:	461a      	mov	r2, r3
 8006104:	88fb      	ldrh	r3, [r7, #6]
 8006106:	f7fc ffad 	bl	8003064 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006112:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3314      	adds	r3, #20
 800611a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	e853 3f00 	ldrex	r3, [r3]
 8006122:	617b      	str	r3, [r7, #20]
   return(result);
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612a:	62bb      	str	r3, [r7, #40]	; 0x28
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3314      	adds	r3, #20
 8006132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006134:	627a      	str	r2, [r7, #36]	; 0x24
 8006136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006138:	6a39      	ldr	r1, [r7, #32]
 800613a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800613c:	e841 2300 	strex	r3, r2, [r1]
 8006140:	61fb      	str	r3, [r7, #28]
   return(result);
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1e5      	bne.n	8006114 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	e000      	b.n	800614e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800614c:	2302      	movs	r3, #2
  }
}
 800614e:	4618      	mov	r0, r3
 8006150:	3730      	adds	r7, #48	; 0x30
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	0800684d 	.word	0x0800684d
 800615c:	080068e7 	.word	0x080068e7
 8006160:	08006a6b 	.word	0x08006a6b

08006164 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	4613      	mov	r3, r2
 8006170:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b20      	cmp	r3, #32
 800617c:	d112      	bne.n	80061a4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <HAL_UART_Receive_DMA+0x26>
 8006184:	88fb      	ldrh	r3, [r7, #6]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e00b      	b.n	80061a6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006194:	88fb      	ldrh	r3, [r7, #6]
 8006196:	461a      	mov	r2, r3
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 fcb0 	bl	8006b00 <UART_Start_Receive_DMA>
 80061a0:	4603      	mov	r3, r0
 80061a2:	e000      	b.n	80061a6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80061a4:	2302      	movs	r3, #2
  }
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b090      	sub	sp, #64	; 0x40
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c4:	2b80      	cmp	r3, #128	; 0x80
 80061c6:	bf0c      	ite	eq
 80061c8:	2301      	moveq	r3, #1
 80061ca:	2300      	movne	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b21      	cmp	r3, #33	; 0x21
 80061da:	d128      	bne.n	800622e <HAL_UART_DMAStop+0x80>
 80061dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d025      	beq.n	800622e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3314      	adds	r3, #20
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	623b      	str	r3, [r7, #32]
   return(result);
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3314      	adds	r3, #20
 8006200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006202:	633a      	str	r2, [r7, #48]	; 0x30
 8006204:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e5      	bne.n	80061e2 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	2b00      	cmp	r3, #0
 800621c:	d004      	beq.n	8006228 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	4618      	mov	r0, r3
 8006224:	f7fc ff76 	bl	8003114 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fd03 	bl	8006c34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006238:	2b40      	cmp	r3, #64	; 0x40
 800623a:	bf0c      	ite	eq
 800623c:	2301      	moveq	r3, #1
 800623e:	2300      	movne	r3, #0
 8006240:	b2db      	uxtb	r3, r3
 8006242:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b22      	cmp	r3, #34	; 0x22
 800624e:	d128      	bne.n	80062a2 <HAL_UART_DMAStop+0xf4>
 8006250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006252:	2b00      	cmp	r3, #0
 8006254:	d025      	beq.n	80062a2 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3314      	adds	r3, #20
 800625c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	e853 3f00 	ldrex	r3, [r3]
 8006264:	60fb      	str	r3, [r7, #12]
   return(result);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800626c:	637b      	str	r3, [r7, #52]	; 0x34
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3314      	adds	r3, #20
 8006274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006276:	61fa      	str	r2, [r7, #28]
 8006278:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627a:	69b9      	ldr	r1, [r7, #24]
 800627c:	69fa      	ldr	r2, [r7, #28]
 800627e:	e841 2300 	strex	r3, r2, [r1]
 8006282:	617b      	str	r3, [r7, #20]
   return(result);
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1e5      	bne.n	8006256 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800628e:	2b00      	cmp	r3, #0
 8006290:	d004      	beq.n	800629c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006296:	4618      	mov	r0, r3
 8006298:	f7fc ff3c 	bl	8003114 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fcf1 	bl	8006c84 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3740      	adds	r7, #64	; 0x40
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b0ba      	sub	sp, #232	; 0xe8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80062d8:	2300      	movs	r3, #0
 80062da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80062ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10f      	bne.n	8006312 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d009      	beq.n	8006312 <HAL_UART_IRQHandler+0x66>
 80062fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006302:	f003 0320 	and.w	r3, r3, #32
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fd99 	bl	8006e42 <UART_Receive_IT>
      return;
 8006310:	e25b      	b.n	80067ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 80de 	beq.w	80064d8 <HAL_UART_IRQHandler+0x22c>
 800631c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d106      	bne.n	8006336 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800632c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 80d1 	beq.w	80064d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00b      	beq.n	800635a <HAL_UART_IRQHandler+0xae>
 8006342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800634a:	2b00      	cmp	r3, #0
 800634c:	d005      	beq.n	800635a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006352:	f043 0201 	orr.w	r2, r3, #1
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800635a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00b      	beq.n	800637e <HAL_UART_IRQHandler+0xd2>
 8006366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d005      	beq.n	800637e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006376:	f043 0202 	orr.w	r2, r3, #2
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800637e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00b      	beq.n	80063a2 <HAL_UART_IRQHandler+0xf6>
 800638a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639a:	f043 0204 	orr.w	r2, r3, #4
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80063a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d011      	beq.n	80063d2 <HAL_UART_IRQHandler+0x126>
 80063ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d105      	bne.n	80063c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d005      	beq.n	80063d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ca:	f043 0208 	orr.w	r2, r3, #8
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 81f2 	beq.w	80067c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e0:	f003 0320 	and.w	r3, r3, #32
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d008      	beq.n	80063fa <HAL_UART_IRQHandler+0x14e>
 80063e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fd24 	bl	8006e42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006404:	2b40      	cmp	r3, #64	; 0x40
 8006406:	bf0c      	ite	eq
 8006408:	2301      	moveq	r3, #1
 800640a:	2300      	movne	r3, #0
 800640c:	b2db      	uxtb	r3, r3
 800640e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006416:	f003 0308 	and.w	r3, r3, #8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d103      	bne.n	8006426 <HAL_UART_IRQHandler+0x17a>
 800641e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006422:	2b00      	cmp	r3, #0
 8006424:	d04f      	beq.n	80064c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fc2c 	bl	8006c84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006436:	2b40      	cmp	r3, #64	; 0x40
 8006438:	d141      	bne.n	80064be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3314      	adds	r3, #20
 8006440:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006450:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006458:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3314      	adds	r3, #20
 8006462:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006466:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800646a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006472:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006476:	e841 2300 	strex	r3, r2, [r1]
 800647a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800647e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1d9      	bne.n	800643a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648a:	2b00      	cmp	r3, #0
 800648c:	d013      	beq.n	80064b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006492:	4a7e      	ldr	r2, [pc, #504]	; (800668c <HAL_UART_IRQHandler+0x3e0>)
 8006494:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649a:	4618      	mov	r0, r3
 800649c:	f7fc feaa 	bl	80031f4 <HAL_DMA_Abort_IT>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d016      	beq.n	80064d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80064b0:	4610      	mov	r0, r2
 80064b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b4:	e00e      	b.n	80064d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f9b2 	bl	8006820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064bc:	e00a      	b.n	80064d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f9ae 	bl	8006820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c4:	e006      	b.n	80064d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f9aa 	bl	8006820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80064d2:	e175      	b.n	80067c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d4:	bf00      	nop
    return;
 80064d6:	e173      	b.n	80067c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064dc:	2b01      	cmp	r3, #1
 80064de:	f040 814f 	bne.w	8006780 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 8148 	beq.w	8006780 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80064f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f4:	f003 0310 	and.w	r3, r3, #16
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 8141 	beq.w	8006780 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064fe:	2300      	movs	r3, #0
 8006500:	60bb      	str	r3, [r7, #8]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60bb      	str	r3, [r7, #8]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	60bb      	str	r3, [r7, #8]
 8006512:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651e:	2b40      	cmp	r3, #64	; 0x40
 8006520:	f040 80b6 	bne.w	8006690 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006530:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 8145 	beq.w	80067c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800653e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006542:	429a      	cmp	r2, r3
 8006544:	f080 813e 	bcs.w	80067c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800654e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800655a:	f000 8088 	beq.w	800666e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	330c      	adds	r3, #12
 8006564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006568:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800656c:	e853 3f00 	ldrex	r3, [r3]
 8006570:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006574:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800657c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	330c      	adds	r3, #12
 8006586:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800658a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800658e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006596:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80065a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1d9      	bne.n	800655e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3314      	adds	r3, #20
 80065b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065b4:	e853 3f00 	ldrex	r3, [r3]
 80065b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065bc:	f023 0301 	bic.w	r3, r3, #1
 80065c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3314      	adds	r3, #20
 80065ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e1      	bne.n	80065aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3314      	adds	r3, #20
 80065ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3314      	adds	r3, #20
 8006606:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800660a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800660c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006610:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e3      	bne.n	80065e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2220      	movs	r2, #32
 8006622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	330c      	adds	r3, #12
 8006632:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006636:	e853 3f00 	ldrex	r3, [r3]
 800663a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800663c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800663e:	f023 0310 	bic.w	r3, r3, #16
 8006642:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	330c      	adds	r3, #12
 800664c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006650:	65ba      	str	r2, [r7, #88]	; 0x58
 8006652:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006654:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006656:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006658:	e841 2300 	strex	r3, r2, [r1]
 800665c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800665e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e3      	bne.n	800662c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006668:	4618      	mov	r0, r3
 800666a:	f7fc fd53 	bl	8003114 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2202      	movs	r2, #2
 8006672:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800667c:	b29b      	uxth	r3, r3
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	b29b      	uxth	r3, r3
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f8d5 	bl	8006834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800668a:	e09b      	b.n	80067c4 <HAL_UART_IRQHandler+0x518>
 800668c:	08006d4b 	.word	0x08006d4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006698:	b29b      	uxth	r3, r3
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 808e 	beq.w	80067c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80066ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 8089 	beq.w	80067c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	330c      	adds	r3, #12
 80066bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c0:	e853 3f00 	ldrex	r3, [r3]
 80066c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	330c      	adds	r3, #12
 80066d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80066da:	647a      	str	r2, [r7, #68]	; 0x44
 80066dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1e3      	bne.n	80066b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3314      	adds	r3, #20
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	623b      	str	r3, [r7, #32]
   return(result);
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	f023 0301 	bic.w	r3, r3, #1
 8006704:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3314      	adds	r3, #20
 800670e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006712:	633a      	str	r2, [r7, #48]	; 0x30
 8006714:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e3      	bne.n	80066ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	330c      	adds	r3, #12
 800673a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	e853 3f00 	ldrex	r3, [r3]
 8006742:	60fb      	str	r3, [r7, #12]
   return(result);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0310 	bic.w	r3, r3, #16
 800674a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	330c      	adds	r3, #12
 8006754:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006758:	61fa      	str	r2, [r7, #28]
 800675a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	69b9      	ldr	r1, [r7, #24]
 800675e:	69fa      	ldr	r2, [r7, #28]
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	617b      	str	r3, [r7, #20]
   return(result);
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e3      	bne.n	8006734 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006772:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f85b 	bl	8006834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800677e:	e023      	b.n	80067c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006788:	2b00      	cmp	r3, #0
 800678a:	d009      	beq.n	80067a0 <HAL_UART_IRQHandler+0x4f4>
 800678c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 faea 	bl	8006d72 <UART_Transmit_IT>
    return;
 800679e:	e014      	b.n	80067ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00e      	beq.n	80067ca <HAL_UART_IRQHandler+0x51e>
 80067ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d008      	beq.n	80067ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fb2a 	bl	8006e12 <UART_EndTransmit_IT>
    return;
 80067be:	e004      	b.n	80067ca <HAL_UART_IRQHandler+0x51e>
    return;
 80067c0:	bf00      	nop
 80067c2:	e002      	b.n	80067ca <HAL_UART_IRQHandler+0x51e>
      return;
 80067c4:	bf00      	nop
 80067c6:	e000      	b.n	80067ca <HAL_UART_IRQHandler+0x51e>
      return;
 80067c8:	bf00      	nop
  }
}
 80067ca:	37e8      	adds	r7, #232	; 0xe8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b090      	sub	sp, #64	; 0x40
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006858:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006864:	2b00      	cmp	r3, #0
 8006866:	d137      	bne.n	80068d8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800686a:	2200      	movs	r2, #0
 800686c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800686e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3314      	adds	r3, #20
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	e853 3f00 	ldrex	r3, [r3]
 800687c:	623b      	str	r3, [r7, #32]
   return(result);
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006884:	63bb      	str	r3, [r7, #56]	; 0x38
 8006886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3314      	adds	r3, #20
 800688c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800688e:	633a      	str	r2, [r7, #48]	; 0x30
 8006890:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006896:	e841 2300 	strex	r3, r2, [r1]
 800689a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800689c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1e5      	bne.n	800686e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	330c      	adds	r3, #12
 80068a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068b8:	637b      	str	r3, [r7, #52]	; 0x34
 80068ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	330c      	adds	r3, #12
 80068c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068c2:	61fa      	str	r2, [r7, #28]
 80068c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c6:	69b9      	ldr	r1, [r7, #24]
 80068c8:	69fa      	ldr	r2, [r7, #28]
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	617b      	str	r3, [r7, #20]
   return(result);
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e5      	bne.n	80068a2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068d6:	e002      	b.n	80068de <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80068d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80068da:	f7ff ff79 	bl	80067d0 <HAL_UART_TxCpltCallback>
}
 80068de:	bf00      	nop
 80068e0:	3740      	adds	r7, #64	; 0x40
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f7ff ff75 	bl	80067e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068fa:	bf00      	nop
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b09c      	sub	sp, #112	; 0x70
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691a:	2b00      	cmp	r3, #0
 800691c:	d172      	bne.n	8006a04 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800691e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006920:	2200      	movs	r2, #0
 8006922:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	330c      	adds	r3, #12
 800692a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800692e:	e853 3f00 	ldrex	r3, [r3]
 8006932:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006936:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800693a:	66bb      	str	r3, [r7, #104]	; 0x68
 800693c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	330c      	adds	r3, #12
 8006942:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006944:	65ba      	str	r2, [r7, #88]	; 0x58
 8006946:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006948:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800694a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800694c:	e841 2300 	strex	r3, r2, [r1]
 8006950:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e5      	bne.n	8006924 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3314      	adds	r3, #20
 800695e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696a:	f023 0301 	bic.w	r3, r3, #1
 800696e:	667b      	str	r3, [r7, #100]	; 0x64
 8006970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3314      	adds	r3, #20
 8006976:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006978:	647a      	str	r2, [r7, #68]	; 0x44
 800697a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800697e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006980:	e841 2300 	strex	r3, r2, [r1]
 8006984:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e5      	bne.n	8006958 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800698c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3314      	adds	r3, #20
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	e853 3f00 	ldrex	r3, [r3]
 800699a:	623b      	str	r3, [r7, #32]
   return(result);
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a2:	663b      	str	r3, [r7, #96]	; 0x60
 80069a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3314      	adds	r3, #20
 80069aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069ac:	633a      	str	r2, [r7, #48]	; 0x30
 80069ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b4:	e841 2300 	strex	r3, r2, [r1]
 80069b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e5      	bne.n	800698c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069c2:	2220      	movs	r2, #32
 80069c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d119      	bne.n	8006a04 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	330c      	adds	r3, #12
 80069d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	60fb      	str	r3, [r7, #12]
   return(result);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0310 	bic.w	r3, r3, #16
 80069e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	330c      	adds	r3, #12
 80069ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069f0:	61fa      	str	r2, [r7, #28]
 80069f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	69b9      	ldr	r1, [r7, #24]
 80069f6:	69fa      	ldr	r2, [r7, #28]
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	617b      	str	r3, [r7, #20]
   return(result);
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e5      	bne.n	80069d0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a06:	2200      	movs	r2, #0
 8006a08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d106      	bne.n	8006a20 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a16:	4619      	mov	r1, r3
 8006a18:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006a1a:	f7ff ff0b 	bl	8006834 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a1e:	e002      	b.n	8006a26 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006a20:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006a22:	f7ff fee9 	bl	80067f8 <HAL_UART_RxCpltCallback>
}
 8006a26:	bf00      	nop
 8006a28:	3770      	adds	r7, #112	; 0x70
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d108      	bne.n	8006a5c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a4e:	085b      	lsrs	r3, r3, #1
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	4619      	mov	r1, r3
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f7ff feed 	bl	8006834 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a5a:	e002      	b.n	8006a62 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f7ff fed5 	bl	800680c <HAL_UART_RxHalfCpltCallback>
}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a86:	2b80      	cmp	r3, #128	; 0x80
 8006a88:	bf0c      	ite	eq
 8006a8a:	2301      	moveq	r3, #1
 8006a8c:	2300      	movne	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b21      	cmp	r3, #33	; 0x21
 8006a9c:	d108      	bne.n	8006ab0 <UART_DMAError+0x46>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d005      	beq.n	8006ab0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006aaa:	68b8      	ldr	r0, [r7, #8]
 8006aac:	f000 f8c2 	bl	8006c34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aba:	2b40      	cmp	r3, #64	; 0x40
 8006abc:	bf0c      	ite	eq
 8006abe:	2301      	moveq	r3, #1
 8006ac0:	2300      	movne	r3, #0
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b22      	cmp	r3, #34	; 0x22
 8006ad0:	d108      	bne.n	8006ae4 <UART_DMAError+0x7a>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2200      	movs	r2, #0
 8006adc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006ade:	68b8      	ldr	r0, [r7, #8]
 8006ae0:	f000 f8d0 	bl	8006c84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae8:	f043 0210 	orr.w	r2, r3, #16
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006af0:	68b8      	ldr	r0, [r7, #8]
 8006af2:	f7ff fe95 	bl	8006820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006af6:	bf00      	nop
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b098      	sub	sp, #96	; 0x60
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	88fa      	ldrh	r2, [r7, #6]
 8006b18:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2222      	movs	r2, #34	; 0x22
 8006b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2c:	4a3e      	ldr	r2, [pc, #248]	; (8006c28 <UART_Start_Receive_DMA+0x128>)
 8006b2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b34:	4a3d      	ldr	r2, [pc, #244]	; (8006c2c <UART_Start_Receive_DMA+0x12c>)
 8006b36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3c:	4a3c      	ldr	r2, [pc, #240]	; (8006c30 <UART_Start_Receive_DMA+0x130>)
 8006b3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b44:	2200      	movs	r2, #0
 8006b46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006b48:	f107 0308 	add.w	r3, r7, #8
 8006b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3304      	adds	r3, #4
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	88fb      	ldrh	r3, [r7, #6]
 8006b60:	f7fc fa80 	bl	8003064 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006b64:	2300      	movs	r3, #0
 8006b66:	613b      	str	r3, [r7, #16]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	613b      	str	r3, [r7, #16]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	613b      	str	r3, [r7, #16]
 8006b78:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d019      	beq.n	8006bb6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	330c      	adds	r3, #12
 8006b88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b8c:	e853 3f00 	ldrex	r3, [r3]
 8006b90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b98:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	330c      	adds	r3, #12
 8006ba0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ba2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006ba4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006ba8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e5      	bne.n	8006b82 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3314      	adds	r3, #20
 8006bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	f043 0301 	orr.w	r3, r3, #1
 8006bcc:	657b      	str	r3, [r7, #84]	; 0x54
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3314      	adds	r3, #20
 8006bd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006bd6:	63ba      	str	r2, [r7, #56]	; 0x38
 8006bd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bde:	e841 2300 	strex	r3, r2, [r1]
 8006be2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e5      	bne.n	8006bb6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3314      	adds	r3, #20
 8006bf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c00:	653b      	str	r3, [r7, #80]	; 0x50
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3314      	adds	r3, #20
 8006c08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c0a:	627a      	str	r2, [r7, #36]	; 0x24
 8006c0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	6a39      	ldr	r1, [r7, #32]
 8006c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e5      	bne.n	8006bea <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3760      	adds	r7, #96	; 0x60
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	08006903 	.word	0x08006903
 8006c2c:	08006a2f 	.word	0x08006a2f
 8006c30:	08006a6b 	.word	0x08006a6b

08006c34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b089      	sub	sp, #36	; 0x24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	330c      	adds	r3, #12
 8006c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006c52:	61fb      	str	r3, [r7, #28]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	330c      	adds	r3, #12
 8006c5a:	69fa      	ldr	r2, [r7, #28]
 8006c5c:	61ba      	str	r2, [r7, #24]
 8006c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	6979      	ldr	r1, [r7, #20]
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	613b      	str	r3, [r7, #16]
   return(result);
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e5      	bne.n	8006c3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2220      	movs	r2, #32
 8006c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006c78:	bf00      	nop
 8006c7a:	3724      	adds	r7, #36	; 0x24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b095      	sub	sp, #84	; 0x54
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	330c      	adds	r3, #12
 8006c92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c96:	e853 3f00 	ldrex	r3, [r3]
 8006c9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	330c      	adds	r3, #12
 8006caa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cac:	643a      	str	r2, [r7, #64]	; 0x40
 8006cae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cb4:	e841 2300 	strex	r3, r2, [r1]
 8006cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e5      	bne.n	8006c8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3314      	adds	r3, #20
 8006cc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	f023 0301 	bic.w	r3, r3, #1
 8006cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3314      	adds	r3, #20
 8006cde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ce0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ce8:	e841 2300 	strex	r3, r2, [r1]
 8006cec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e5      	bne.n	8006cc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d119      	bne.n	8006d30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	330c      	adds	r3, #12
 8006d02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f023 0310 	bic.w	r3, r3, #16
 8006d12:	647b      	str	r3, [r7, #68]	; 0x44
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	330c      	adds	r3, #12
 8006d1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d1c:	61ba      	str	r2, [r7, #24]
 8006d1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	6979      	ldr	r1, [r7, #20]
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	613b      	str	r3, [r7, #16]
   return(result);
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e5      	bne.n	8006cfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2220      	movs	r2, #32
 8006d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d3e:	bf00      	nop
 8006d40:	3754      	adds	r7, #84	; 0x54
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7ff fd5b 	bl	8006820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d6a:	bf00      	nop
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b085      	sub	sp, #20
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b21      	cmp	r3, #33	; 0x21
 8006d84:	d13e      	bne.n	8006e04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d8e:	d114      	bne.n	8006dba <UART_Transmit_IT+0x48>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d110      	bne.n	8006dba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	1c9a      	adds	r2, r3, #2
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	621a      	str	r2, [r3, #32]
 8006db8:	e008      	b.n	8006dcc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	1c59      	adds	r1, r3, #1
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	6211      	str	r1, [r2, #32]
 8006dc4:	781a      	ldrb	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10f      	bne.n	8006e00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dfe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	e000      	b.n	8006e06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e04:	2302      	movs	r3, #2
  }
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b082      	sub	sp, #8
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68da      	ldr	r2, [r3, #12]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7ff fccc 	bl	80067d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b08c      	sub	sp, #48	; 0x30
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b22      	cmp	r3, #34	; 0x22
 8006e54:	f040 80ae 	bne.w	8006fb4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e60:	d117      	bne.n	8006e92 <UART_Receive_IT+0x50>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d113      	bne.n	8006e92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8a:	1c9a      	adds	r2, r3, #2
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	629a      	str	r2, [r3, #40]	; 0x28
 8006e90:	e026      	b.n	8006ee0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ea4:	d007      	beq.n	8006eb6 <UART_Receive_IT+0x74>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10a      	bne.n	8006ec4 <UART_Receive_IT+0x82>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d106      	bne.n	8006ec4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	701a      	strb	r2, [r3, #0]
 8006ec2:	e008      	b.n	8006ed6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eda:	1c5a      	adds	r2, r3, #1
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	4619      	mov	r1, r3
 8006eee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d15d      	bne.n	8006fb0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0220 	bic.w	r2, r2, #32
 8006f02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68da      	ldr	r2, [r3, #12]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	695a      	ldr	r2, [r3, #20]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0201 	bic.w	r2, r2, #1
 8006f22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d135      	bne.n	8006fa6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	330c      	adds	r3, #12
 8006f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	e853 3f00 	ldrex	r3, [r3]
 8006f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	f023 0310 	bic.w	r3, r3, #16
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	330c      	adds	r3, #12
 8006f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f60:	623a      	str	r2, [r7, #32]
 8006f62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	69f9      	ldr	r1, [r7, #28]
 8006f66:	6a3a      	ldr	r2, [r7, #32]
 8006f68:	e841 2300 	strex	r3, r2, [r1]
 8006f6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e5      	bne.n	8006f40 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0310 	and.w	r3, r3, #16
 8006f7e:	2b10      	cmp	r3, #16
 8006f80:	d10a      	bne.n	8006f98 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff fc48 	bl	8006834 <HAL_UARTEx_RxEventCallback>
 8006fa4:	e002      	b.n	8006fac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7ff fc26 	bl	80067f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	e002      	b.n	8006fb6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	e000      	b.n	8006fb6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006fb4:	2302      	movs	r3, #2
  }
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3730      	adds	r7, #48	; 0x30
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
	...

08006fc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fc4:	b0c0      	sub	sp, #256	; 0x100
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fdc:	68d9      	ldr	r1, [r3, #12]
 8006fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	ea40 0301 	orr.w	r3, r0, r1
 8006fe8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	431a      	orrs	r2, r3
 8007000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	4313      	orrs	r3, r2
 8007008:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800700c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007018:	f021 010c 	bic.w	r1, r1, #12
 800701c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007026:	430b      	orrs	r3, r1
 8007028:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800702a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800703a:	6999      	ldr	r1, [r3, #24]
 800703c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	ea40 0301 	orr.w	r3, r0, r1
 8007046:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	4b8f      	ldr	r3, [pc, #572]	; (800728c <UART_SetConfig+0x2cc>)
 8007050:	429a      	cmp	r2, r3
 8007052:	d005      	beq.n	8007060 <UART_SetConfig+0xa0>
 8007054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	4b8d      	ldr	r3, [pc, #564]	; (8007290 <UART_SetConfig+0x2d0>)
 800705c:	429a      	cmp	r2, r3
 800705e:	d104      	bne.n	800706a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007060:	f7fd ffc2 	bl	8004fe8 <HAL_RCC_GetPCLK2Freq>
 8007064:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007068:	e003      	b.n	8007072 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800706a:	f7fd ffa9 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 800706e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800707c:	f040 810c 	bne.w	8007298 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007084:	2200      	movs	r2, #0
 8007086:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800708a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800708e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007092:	4622      	mov	r2, r4
 8007094:	462b      	mov	r3, r5
 8007096:	1891      	adds	r1, r2, r2
 8007098:	65b9      	str	r1, [r7, #88]	; 0x58
 800709a:	415b      	adcs	r3, r3
 800709c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800709e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80070a2:	4621      	mov	r1, r4
 80070a4:	eb12 0801 	adds.w	r8, r2, r1
 80070a8:	4629      	mov	r1, r5
 80070aa:	eb43 0901 	adc.w	r9, r3, r1
 80070ae:	f04f 0200 	mov.w	r2, #0
 80070b2:	f04f 0300 	mov.w	r3, #0
 80070b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070c2:	4690      	mov	r8, r2
 80070c4:	4699      	mov	r9, r3
 80070c6:	4623      	mov	r3, r4
 80070c8:	eb18 0303 	adds.w	r3, r8, r3
 80070cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070d0:	462b      	mov	r3, r5
 80070d2:	eb49 0303 	adc.w	r3, r9, r3
 80070d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80070ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80070ee:	460b      	mov	r3, r1
 80070f0:	18db      	adds	r3, r3, r3
 80070f2:	653b      	str	r3, [r7, #80]	; 0x50
 80070f4:	4613      	mov	r3, r2
 80070f6:	eb42 0303 	adc.w	r3, r2, r3
 80070fa:	657b      	str	r3, [r7, #84]	; 0x54
 80070fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007100:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007104:	f7f9 fe78 	bl	8000df8 <__aeabi_uldivmod>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4b61      	ldr	r3, [pc, #388]	; (8007294 <UART_SetConfig+0x2d4>)
 800710e:	fba3 2302 	umull	r2, r3, r3, r2
 8007112:	095b      	lsrs	r3, r3, #5
 8007114:	011c      	lsls	r4, r3, #4
 8007116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800711a:	2200      	movs	r2, #0
 800711c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007120:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007124:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007128:	4642      	mov	r2, r8
 800712a:	464b      	mov	r3, r9
 800712c:	1891      	adds	r1, r2, r2
 800712e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007130:	415b      	adcs	r3, r3
 8007132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007134:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007138:	4641      	mov	r1, r8
 800713a:	eb12 0a01 	adds.w	sl, r2, r1
 800713e:	4649      	mov	r1, r9
 8007140:	eb43 0b01 	adc.w	fp, r3, r1
 8007144:	f04f 0200 	mov.w	r2, #0
 8007148:	f04f 0300 	mov.w	r3, #0
 800714c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007150:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007154:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007158:	4692      	mov	sl, r2
 800715a:	469b      	mov	fp, r3
 800715c:	4643      	mov	r3, r8
 800715e:	eb1a 0303 	adds.w	r3, sl, r3
 8007162:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007166:	464b      	mov	r3, r9
 8007168:	eb4b 0303 	adc.w	r3, fp, r3
 800716c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800717c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007180:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007184:	460b      	mov	r3, r1
 8007186:	18db      	adds	r3, r3, r3
 8007188:	643b      	str	r3, [r7, #64]	; 0x40
 800718a:	4613      	mov	r3, r2
 800718c:	eb42 0303 	adc.w	r3, r2, r3
 8007190:	647b      	str	r3, [r7, #68]	; 0x44
 8007192:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007196:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800719a:	f7f9 fe2d 	bl	8000df8 <__aeabi_uldivmod>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	4611      	mov	r1, r2
 80071a4:	4b3b      	ldr	r3, [pc, #236]	; (8007294 <UART_SetConfig+0x2d4>)
 80071a6:	fba3 2301 	umull	r2, r3, r3, r1
 80071aa:	095b      	lsrs	r3, r3, #5
 80071ac:	2264      	movs	r2, #100	; 0x64
 80071ae:	fb02 f303 	mul.w	r3, r2, r3
 80071b2:	1acb      	subs	r3, r1, r3
 80071b4:	00db      	lsls	r3, r3, #3
 80071b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80071ba:	4b36      	ldr	r3, [pc, #216]	; (8007294 <UART_SetConfig+0x2d4>)
 80071bc:	fba3 2302 	umull	r2, r3, r3, r2
 80071c0:	095b      	lsrs	r3, r3, #5
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071c8:	441c      	add	r4, r3
 80071ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071ce:	2200      	movs	r2, #0
 80071d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80071d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80071dc:	4642      	mov	r2, r8
 80071de:	464b      	mov	r3, r9
 80071e0:	1891      	adds	r1, r2, r2
 80071e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80071e4:	415b      	adcs	r3, r3
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071ec:	4641      	mov	r1, r8
 80071ee:	1851      	adds	r1, r2, r1
 80071f0:	6339      	str	r1, [r7, #48]	; 0x30
 80071f2:	4649      	mov	r1, r9
 80071f4:	414b      	adcs	r3, r1
 80071f6:	637b      	str	r3, [r7, #52]	; 0x34
 80071f8:	f04f 0200 	mov.w	r2, #0
 80071fc:	f04f 0300 	mov.w	r3, #0
 8007200:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007204:	4659      	mov	r1, fp
 8007206:	00cb      	lsls	r3, r1, #3
 8007208:	4651      	mov	r1, sl
 800720a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800720e:	4651      	mov	r1, sl
 8007210:	00ca      	lsls	r2, r1, #3
 8007212:	4610      	mov	r0, r2
 8007214:	4619      	mov	r1, r3
 8007216:	4603      	mov	r3, r0
 8007218:	4642      	mov	r2, r8
 800721a:	189b      	adds	r3, r3, r2
 800721c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007220:	464b      	mov	r3, r9
 8007222:	460a      	mov	r2, r1
 8007224:	eb42 0303 	adc.w	r3, r2, r3
 8007228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800722c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007238:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800723c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007240:	460b      	mov	r3, r1
 8007242:	18db      	adds	r3, r3, r3
 8007244:	62bb      	str	r3, [r7, #40]	; 0x28
 8007246:	4613      	mov	r3, r2
 8007248:	eb42 0303 	adc.w	r3, r2, r3
 800724c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800724e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007252:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007256:	f7f9 fdcf 	bl	8000df8 <__aeabi_uldivmod>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	4b0d      	ldr	r3, [pc, #52]	; (8007294 <UART_SetConfig+0x2d4>)
 8007260:	fba3 1302 	umull	r1, r3, r3, r2
 8007264:	095b      	lsrs	r3, r3, #5
 8007266:	2164      	movs	r1, #100	; 0x64
 8007268:	fb01 f303 	mul.w	r3, r1, r3
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	3332      	adds	r3, #50	; 0x32
 8007272:	4a08      	ldr	r2, [pc, #32]	; (8007294 <UART_SetConfig+0x2d4>)
 8007274:	fba2 2303 	umull	r2, r3, r2, r3
 8007278:	095b      	lsrs	r3, r3, #5
 800727a:	f003 0207 	and.w	r2, r3, #7
 800727e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4422      	add	r2, r4
 8007286:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007288:	e106      	b.n	8007498 <UART_SetConfig+0x4d8>
 800728a:	bf00      	nop
 800728c:	40011000 	.word	0x40011000
 8007290:	40011400 	.word	0x40011400
 8007294:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800729c:	2200      	movs	r2, #0
 800729e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80072a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80072a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80072aa:	4642      	mov	r2, r8
 80072ac:	464b      	mov	r3, r9
 80072ae:	1891      	adds	r1, r2, r2
 80072b0:	6239      	str	r1, [r7, #32]
 80072b2:	415b      	adcs	r3, r3
 80072b4:	627b      	str	r3, [r7, #36]	; 0x24
 80072b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072ba:	4641      	mov	r1, r8
 80072bc:	1854      	adds	r4, r2, r1
 80072be:	4649      	mov	r1, r9
 80072c0:	eb43 0501 	adc.w	r5, r3, r1
 80072c4:	f04f 0200 	mov.w	r2, #0
 80072c8:	f04f 0300 	mov.w	r3, #0
 80072cc:	00eb      	lsls	r3, r5, #3
 80072ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072d2:	00e2      	lsls	r2, r4, #3
 80072d4:	4614      	mov	r4, r2
 80072d6:	461d      	mov	r5, r3
 80072d8:	4643      	mov	r3, r8
 80072da:	18e3      	adds	r3, r4, r3
 80072dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80072e0:	464b      	mov	r3, r9
 80072e2:	eb45 0303 	adc.w	r3, r5, r3
 80072e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80072ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072fa:	f04f 0200 	mov.w	r2, #0
 80072fe:	f04f 0300 	mov.w	r3, #0
 8007302:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007306:	4629      	mov	r1, r5
 8007308:	008b      	lsls	r3, r1, #2
 800730a:	4621      	mov	r1, r4
 800730c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007310:	4621      	mov	r1, r4
 8007312:	008a      	lsls	r2, r1, #2
 8007314:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007318:	f7f9 fd6e 	bl	8000df8 <__aeabi_uldivmod>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	4b60      	ldr	r3, [pc, #384]	; (80074a4 <UART_SetConfig+0x4e4>)
 8007322:	fba3 2302 	umull	r2, r3, r3, r2
 8007326:	095b      	lsrs	r3, r3, #5
 8007328:	011c      	lsls	r4, r3, #4
 800732a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800732e:	2200      	movs	r2, #0
 8007330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007334:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007338:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800733c:	4642      	mov	r2, r8
 800733e:	464b      	mov	r3, r9
 8007340:	1891      	adds	r1, r2, r2
 8007342:	61b9      	str	r1, [r7, #24]
 8007344:	415b      	adcs	r3, r3
 8007346:	61fb      	str	r3, [r7, #28]
 8007348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800734c:	4641      	mov	r1, r8
 800734e:	1851      	adds	r1, r2, r1
 8007350:	6139      	str	r1, [r7, #16]
 8007352:	4649      	mov	r1, r9
 8007354:	414b      	adcs	r3, r1
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	f04f 0200 	mov.w	r2, #0
 800735c:	f04f 0300 	mov.w	r3, #0
 8007360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007364:	4659      	mov	r1, fp
 8007366:	00cb      	lsls	r3, r1, #3
 8007368:	4651      	mov	r1, sl
 800736a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800736e:	4651      	mov	r1, sl
 8007370:	00ca      	lsls	r2, r1, #3
 8007372:	4610      	mov	r0, r2
 8007374:	4619      	mov	r1, r3
 8007376:	4603      	mov	r3, r0
 8007378:	4642      	mov	r2, r8
 800737a:	189b      	adds	r3, r3, r2
 800737c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007380:	464b      	mov	r3, r9
 8007382:	460a      	mov	r2, r1
 8007384:	eb42 0303 	adc.w	r3, r2, r3
 8007388:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800738c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	67bb      	str	r3, [r7, #120]	; 0x78
 8007396:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007398:	f04f 0200 	mov.w	r2, #0
 800739c:	f04f 0300 	mov.w	r3, #0
 80073a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80073a4:	4649      	mov	r1, r9
 80073a6:	008b      	lsls	r3, r1, #2
 80073a8:	4641      	mov	r1, r8
 80073aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073ae:	4641      	mov	r1, r8
 80073b0:	008a      	lsls	r2, r1, #2
 80073b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80073b6:	f7f9 fd1f 	bl	8000df8 <__aeabi_uldivmod>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	4611      	mov	r1, r2
 80073c0:	4b38      	ldr	r3, [pc, #224]	; (80074a4 <UART_SetConfig+0x4e4>)
 80073c2:	fba3 2301 	umull	r2, r3, r3, r1
 80073c6:	095b      	lsrs	r3, r3, #5
 80073c8:	2264      	movs	r2, #100	; 0x64
 80073ca:	fb02 f303 	mul.w	r3, r2, r3
 80073ce:	1acb      	subs	r3, r1, r3
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	3332      	adds	r3, #50	; 0x32
 80073d4:	4a33      	ldr	r2, [pc, #204]	; (80074a4 <UART_SetConfig+0x4e4>)
 80073d6:	fba2 2303 	umull	r2, r3, r2, r3
 80073da:	095b      	lsrs	r3, r3, #5
 80073dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073e0:	441c      	add	r4, r3
 80073e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073e6:	2200      	movs	r2, #0
 80073e8:	673b      	str	r3, [r7, #112]	; 0x70
 80073ea:	677a      	str	r2, [r7, #116]	; 0x74
 80073ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80073f0:	4642      	mov	r2, r8
 80073f2:	464b      	mov	r3, r9
 80073f4:	1891      	adds	r1, r2, r2
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	415b      	adcs	r3, r3
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007400:	4641      	mov	r1, r8
 8007402:	1851      	adds	r1, r2, r1
 8007404:	6039      	str	r1, [r7, #0]
 8007406:	4649      	mov	r1, r9
 8007408:	414b      	adcs	r3, r1
 800740a:	607b      	str	r3, [r7, #4]
 800740c:	f04f 0200 	mov.w	r2, #0
 8007410:	f04f 0300 	mov.w	r3, #0
 8007414:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007418:	4659      	mov	r1, fp
 800741a:	00cb      	lsls	r3, r1, #3
 800741c:	4651      	mov	r1, sl
 800741e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007422:	4651      	mov	r1, sl
 8007424:	00ca      	lsls	r2, r1, #3
 8007426:	4610      	mov	r0, r2
 8007428:	4619      	mov	r1, r3
 800742a:	4603      	mov	r3, r0
 800742c:	4642      	mov	r2, r8
 800742e:	189b      	adds	r3, r3, r2
 8007430:	66bb      	str	r3, [r7, #104]	; 0x68
 8007432:	464b      	mov	r3, r9
 8007434:	460a      	mov	r2, r1
 8007436:	eb42 0303 	adc.w	r3, r2, r3
 800743a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800743c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	663b      	str	r3, [r7, #96]	; 0x60
 8007446:	667a      	str	r2, [r7, #100]	; 0x64
 8007448:	f04f 0200 	mov.w	r2, #0
 800744c:	f04f 0300 	mov.w	r3, #0
 8007450:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007454:	4649      	mov	r1, r9
 8007456:	008b      	lsls	r3, r1, #2
 8007458:	4641      	mov	r1, r8
 800745a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800745e:	4641      	mov	r1, r8
 8007460:	008a      	lsls	r2, r1, #2
 8007462:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007466:	f7f9 fcc7 	bl	8000df8 <__aeabi_uldivmod>
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	4b0d      	ldr	r3, [pc, #52]	; (80074a4 <UART_SetConfig+0x4e4>)
 8007470:	fba3 1302 	umull	r1, r3, r3, r2
 8007474:	095b      	lsrs	r3, r3, #5
 8007476:	2164      	movs	r1, #100	; 0x64
 8007478:	fb01 f303 	mul.w	r3, r1, r3
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	3332      	adds	r3, #50	; 0x32
 8007482:	4a08      	ldr	r2, [pc, #32]	; (80074a4 <UART_SetConfig+0x4e4>)
 8007484:	fba2 2303 	umull	r2, r3, r2, r3
 8007488:	095b      	lsrs	r3, r3, #5
 800748a:	f003 020f 	and.w	r2, r3, #15
 800748e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4422      	add	r2, r4
 8007496:	609a      	str	r2, [r3, #8]
}
 8007498:	bf00      	nop
 800749a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800749e:	46bd      	mov	sp, r7
 80074a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074a4:	51eb851f 	.word	0x51eb851f

080074a8 <__NVIC_SetPriority>:
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	6039      	str	r1, [r7, #0]
 80074b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	db0a      	blt.n	80074d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	490c      	ldr	r1, [pc, #48]	; (80074f4 <__NVIC_SetPriority+0x4c>)
 80074c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074c6:	0112      	lsls	r2, r2, #4
 80074c8:	b2d2      	uxtb	r2, r2
 80074ca:	440b      	add	r3, r1
 80074cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80074d0:	e00a      	b.n	80074e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	4908      	ldr	r1, [pc, #32]	; (80074f8 <__NVIC_SetPriority+0x50>)
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	3b04      	subs	r3, #4
 80074e0:	0112      	lsls	r2, r2, #4
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	440b      	add	r3, r1
 80074e6:	761a      	strb	r2, [r3, #24]
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	e000e100 	.word	0xe000e100
 80074f8:	e000ed00 	.word	0xe000ed00

080074fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007500:	4b05      	ldr	r3, [pc, #20]	; (8007518 <SysTick_Handler+0x1c>)
 8007502:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007504:	f001 fd4e 	bl	8008fa4 <xTaskGetSchedulerState>
 8007508:	4603      	mov	r3, r0
 800750a:	2b01      	cmp	r3, #1
 800750c:	d001      	beq.n	8007512 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800750e:	f002 fb33 	bl	8009b78 <xPortSysTickHandler>
  }
}
 8007512:	bf00      	nop
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	e000e010 	.word	0xe000e010

0800751c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800751c:	b580      	push	{r7, lr}
 800751e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007520:	2100      	movs	r1, #0
 8007522:	f06f 0004 	mvn.w	r0, #4
 8007526:	f7ff ffbf 	bl	80074a8 <__NVIC_SetPriority>
#endif
}
 800752a:	bf00      	nop
 800752c:	bd80      	pop	{r7, pc}
	...

08007530 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007536:	f3ef 8305 	mrs	r3, IPSR
 800753a:	603b      	str	r3, [r7, #0]
  return(result);
 800753c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007542:	f06f 0305 	mvn.w	r3, #5
 8007546:	607b      	str	r3, [r7, #4]
 8007548:	e00c      	b.n	8007564 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800754a:	4b0a      	ldr	r3, [pc, #40]	; (8007574 <osKernelInitialize+0x44>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d105      	bne.n	800755e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007552:	4b08      	ldr	r3, [pc, #32]	; (8007574 <osKernelInitialize+0x44>)
 8007554:	2201      	movs	r2, #1
 8007556:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007558:	2300      	movs	r3, #0
 800755a:	607b      	str	r3, [r7, #4]
 800755c:	e002      	b.n	8007564 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800755e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007562:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007564:	687b      	ldr	r3, [r7, #4]
}
 8007566:	4618      	mov	r0, r3
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	2000778c 	.word	0x2000778c

08007578 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800757e:	f3ef 8305 	mrs	r3, IPSR
 8007582:	603b      	str	r3, [r7, #0]
  return(result);
 8007584:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007586:	2b00      	cmp	r3, #0
 8007588:	d003      	beq.n	8007592 <osKernelStart+0x1a>
    stat = osErrorISR;
 800758a:	f06f 0305 	mvn.w	r3, #5
 800758e:	607b      	str	r3, [r7, #4]
 8007590:	e010      	b.n	80075b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007592:	4b0b      	ldr	r3, [pc, #44]	; (80075c0 <osKernelStart+0x48>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d109      	bne.n	80075ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800759a:	f7ff ffbf 	bl	800751c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800759e:	4b08      	ldr	r3, [pc, #32]	; (80075c0 <osKernelStart+0x48>)
 80075a0:	2202      	movs	r2, #2
 80075a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80075a4:	f001 f87c 	bl	80086a0 <vTaskStartScheduler>
      stat = osOK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	607b      	str	r3, [r7, #4]
 80075ac:	e002      	b.n	80075b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80075ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80075b4:	687b      	ldr	r3, [r7, #4]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	2000778c 	.word	0x2000778c

080075c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08e      	sub	sp, #56	; 0x38
 80075c8:	af04      	add	r7, sp, #16
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80075d0:	2300      	movs	r3, #0
 80075d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075d4:	f3ef 8305 	mrs	r3, IPSR
 80075d8:	617b      	str	r3, [r7, #20]
  return(result);
 80075da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d17e      	bne.n	80076de <osThreadNew+0x11a>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d07b      	beq.n	80076de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80075e6:	2380      	movs	r3, #128	; 0x80
 80075e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80075ea:	2318      	movs	r3, #24
 80075ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80075f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d045      	beq.n	800768a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <osThreadNew+0x48>
        name = attr->name;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d008      	beq.n	8007632 <osThreadNew+0x6e>
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	2b38      	cmp	r3, #56	; 0x38
 8007624:	d805      	bhi.n	8007632 <osThreadNew+0x6e>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <osThreadNew+0x72>
        return (NULL);
 8007632:	2300      	movs	r3, #0
 8007634:	e054      	b.n	80076e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	089b      	lsrs	r3, r3, #2
 8007644:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00e      	beq.n	800766c <osThreadNew+0xa8>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	2ba7      	cmp	r3, #167	; 0xa7
 8007654:	d90a      	bls.n	800766c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800765a:	2b00      	cmp	r3, #0
 800765c:	d006      	beq.n	800766c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d002      	beq.n	800766c <osThreadNew+0xa8>
        mem = 1;
 8007666:	2301      	movs	r3, #1
 8007668:	61bb      	str	r3, [r7, #24]
 800766a:	e010      	b.n	800768e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10c      	bne.n	800768e <osThreadNew+0xca>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d108      	bne.n	800768e <osThreadNew+0xca>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d104      	bne.n	800768e <osThreadNew+0xca>
          mem = 0;
 8007684:	2300      	movs	r3, #0
 8007686:	61bb      	str	r3, [r7, #24]
 8007688:	e001      	b.n	800768e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800768a:	2300      	movs	r3, #0
 800768c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d110      	bne.n	80076b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800769c:	9202      	str	r2, [sp, #8]
 800769e:	9301      	str	r3, [sp, #4]
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	6a3a      	ldr	r2, [r7, #32]
 80076a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f000 fe0c 	bl	80082c8 <xTaskCreateStatic>
 80076b0:	4603      	mov	r3, r0
 80076b2:	613b      	str	r3, [r7, #16]
 80076b4:	e013      	b.n	80076de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d110      	bne.n	80076de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	b29a      	uxth	r2, r3
 80076c0:	f107 0310 	add.w	r3, r7, #16
 80076c4:	9301      	str	r3, [sp, #4]
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 fe57 	bl	8008382 <xTaskCreate>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d001      	beq.n	80076de <osThreadNew+0x11a>
            hTask = NULL;
 80076da:	2300      	movs	r3, #0
 80076dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80076de:	693b      	ldr	r3, [r7, #16]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3728      	adds	r7, #40	; 0x28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076f0:	f3ef 8305 	mrs	r3, IPSR
 80076f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80076f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <osDelay+0x1c>
    stat = osErrorISR;
 80076fc:	f06f 0305 	mvn.w	r3, #5
 8007700:	60fb      	str	r3, [r7, #12]
 8007702:	e007      	b.n	8007714 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007704:	2300      	movs	r3, #0
 8007706:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d002      	beq.n	8007714 <osDelay+0x2c>
      vTaskDelay(ticks);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 ff92 	bl	8008638 <vTaskDelay>
    }
  }

  return (stat);
 8007714:	68fb      	ldr	r3, [r7, #12]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4a07      	ldr	r2, [pc, #28]	; (800774c <vApplicationGetIdleTaskMemory+0x2c>)
 8007730:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	4a06      	ldr	r2, [pc, #24]	; (8007750 <vApplicationGetIdleTaskMemory+0x30>)
 8007736:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2280      	movs	r2, #128	; 0x80
 800773c:	601a      	str	r2, [r3, #0]
}
 800773e:	bf00      	nop
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	20007790 	.word	0x20007790
 8007750:	20007838 	.word	0x20007838

08007754 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4a07      	ldr	r2, [pc, #28]	; (8007780 <vApplicationGetTimerTaskMemory+0x2c>)
 8007764:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	4a06      	ldr	r2, [pc, #24]	; (8007784 <vApplicationGetTimerTaskMemory+0x30>)
 800776a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007772:	601a      	str	r2, [r3, #0]
}
 8007774:	bf00      	nop
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	20007a38 	.word	0x20007a38
 8007784:	20007ae0 	.word	0x20007ae0

08007788 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f103 0208 	add.w	r2, r3, #8
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f103 0208 	add.w	r2, r3, #8
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f103 0208 	add.w	r2, r3, #8
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077d6:	bf00      	nop
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077e2:	b480      	push	{r7}
 80077e4:	b085      	sub	sp, #20
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	689a      	ldr	r2, [r3, #8]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	1c5a      	adds	r2, r3, #1
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	601a      	str	r2, [r3, #0]
}
 800781e:	bf00      	nop
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800782a:	b480      	push	{r7}
 800782c:	b085      	sub	sp, #20
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007840:	d103      	bne.n	800784a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	e00c      	b.n	8007864 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	3308      	adds	r3, #8
 800784e:	60fb      	str	r3, [r7, #12]
 8007850:	e002      	b.n	8007858 <vListInsert+0x2e>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	429a      	cmp	r2, r3
 8007862:	d2f6      	bcs.n	8007852 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	601a      	str	r2, [r3, #0]
}
 8007890:	bf00      	nop
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	6892      	ldr	r2, [r2, #8]
 80078b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	6852      	ldr	r2, [r2, #4]
 80078bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d103      	bne.n	80078d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	1e5a      	subs	r2, r3, #1
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10a      	bne.n	800791a <xQueueGenericReset+0x2a>
	__asm volatile
 8007904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	60bb      	str	r3, [r7, #8]
}
 8007916:	bf00      	nop
 8007918:	e7fe      	b.n	8007918 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800791a:	f002 f89b 	bl	8009a54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007926:	68f9      	ldr	r1, [r7, #12]
 8007928:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800792a:	fb01 f303 	mul.w	r3, r1, r3
 800792e:	441a      	add	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794a:	3b01      	subs	r3, #1
 800794c:	68f9      	ldr	r1, [r7, #12]
 800794e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007950:	fb01 f303 	mul.w	r3, r1, r3
 8007954:	441a      	add	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	22ff      	movs	r2, #255	; 0xff
 800795e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	22ff      	movs	r2, #255	; 0xff
 8007966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d114      	bne.n	800799a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d01a      	beq.n	80079ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	3310      	adds	r3, #16
 800797c:	4618      	mov	r0, r3
 800797e:	f001 f929 	bl	8008bd4 <xTaskRemoveFromEventList>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d012      	beq.n	80079ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007988:	4b0c      	ldr	r3, [pc, #48]	; (80079bc <xQueueGenericReset+0xcc>)
 800798a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	e009      	b.n	80079ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3310      	adds	r3, #16
 800799e:	4618      	mov	r0, r3
 80079a0:	f7ff fef2 	bl	8007788 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	3324      	adds	r3, #36	; 0x24
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7ff feed 	bl	8007788 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079ae:	f002 f881 	bl	8009ab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079b2:	2301      	movs	r3, #1
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	e000ed04 	.word	0xe000ed04

080079c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08e      	sub	sp, #56	; 0x38
 80079c4:	af02      	add	r7, sp, #8
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10a      	bne.n	80079ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80079d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d8:	f383 8811 	msr	BASEPRI, r3
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079e6:	bf00      	nop
 80079e8:	e7fe      	b.n	80079e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10a      	bne.n	8007a06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80079f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a02:	bf00      	nop
 8007a04:	e7fe      	b.n	8007a04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <xQueueGenericCreateStatic+0x52>
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <xQueueGenericCreateStatic+0x56>
 8007a12:	2301      	movs	r3, #1
 8007a14:	e000      	b.n	8007a18 <xQueueGenericCreateStatic+0x58>
 8007a16:	2300      	movs	r3, #0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10a      	bne.n	8007a32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	623b      	str	r3, [r7, #32]
}
 8007a2e:	bf00      	nop
 8007a30:	e7fe      	b.n	8007a30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d102      	bne.n	8007a3e <xQueueGenericCreateStatic+0x7e>
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d101      	bne.n	8007a42 <xQueueGenericCreateStatic+0x82>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e000      	b.n	8007a44 <xQueueGenericCreateStatic+0x84>
 8007a42:	2300      	movs	r3, #0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10a      	bne.n	8007a5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	61fb      	str	r3, [r7, #28]
}
 8007a5a:	bf00      	nop
 8007a5c:	e7fe      	b.n	8007a5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a5e:	2350      	movs	r3, #80	; 0x50
 8007a60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b50      	cmp	r3, #80	; 0x50
 8007a66:	d00a      	beq.n	8007a7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	61bb      	str	r3, [r7, #24]
}
 8007a7a:	bf00      	nop
 8007a7c:	e7fe      	b.n	8007a7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00d      	beq.n	8007aa6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	68b9      	ldr	r1, [r7, #8]
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 f805 	bl	8007ab0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3730      	adds	r7, #48	; 0x30
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
 8007abc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d103      	bne.n	8007acc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	e002      	b.n	8007ad2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ade:	2101      	movs	r1, #1
 8007ae0:	69b8      	ldr	r0, [r7, #24]
 8007ae2:	f7ff ff05 	bl	80078f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	78fa      	ldrb	r2, [r7, #3]
 8007aea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007aee:	bf00      	nop
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
	...

08007af8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08e      	sub	sp, #56	; 0x38
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
 8007b04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007b06:	2300      	movs	r3, #0
 8007b08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10a      	bne.n	8007b2a <xQueueGenericSend+0x32>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b26:	bf00      	nop
 8007b28:	e7fe      	b.n	8007b28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d103      	bne.n	8007b38 <xQueueGenericSend+0x40>
 8007b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <xQueueGenericSend+0x44>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e000      	b.n	8007b3e <xQueueGenericSend+0x46>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10a      	bne.n	8007b58 <xQueueGenericSend+0x60>
	__asm volatile
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b54:	bf00      	nop
 8007b56:	e7fe      	b.n	8007b56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d103      	bne.n	8007b66 <xQueueGenericSend+0x6e>
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d101      	bne.n	8007b6a <xQueueGenericSend+0x72>
 8007b66:	2301      	movs	r3, #1
 8007b68:	e000      	b.n	8007b6c <xQueueGenericSend+0x74>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10a      	bne.n	8007b86 <xQueueGenericSend+0x8e>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	623b      	str	r3, [r7, #32]
}
 8007b82:	bf00      	nop
 8007b84:	e7fe      	b.n	8007b84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b86:	f001 fa0d 	bl	8008fa4 <xTaskGetSchedulerState>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d102      	bne.n	8007b96 <xQueueGenericSend+0x9e>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <xQueueGenericSend+0xa2>
 8007b96:	2301      	movs	r3, #1
 8007b98:	e000      	b.n	8007b9c <xQueueGenericSend+0xa4>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10a      	bne.n	8007bb6 <xQueueGenericSend+0xbe>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	61fb      	str	r3, [r7, #28]
}
 8007bb2:	bf00      	nop
 8007bb4:	e7fe      	b.n	8007bb4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bb6:	f001 ff4d 	bl	8009a54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d302      	bcc.n	8007bcc <xQueueGenericSend+0xd4>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d129      	bne.n	8007c20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007bcc:	683a      	ldr	r2, [r7, #0]
 8007bce:	68b9      	ldr	r1, [r7, #8]
 8007bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bd2:	f000 fa0b 	bl	8007fec <prvCopyDataToQueue>
 8007bd6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d010      	beq.n	8007c02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be2:	3324      	adds	r3, #36	; 0x24
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 fff5 	bl	8008bd4 <xTaskRemoveFromEventList>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d013      	beq.n	8007c18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007bf0:	4b3f      	ldr	r3, [pc, #252]	; (8007cf0 <xQueueGenericSend+0x1f8>)
 8007bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf6:	601a      	str	r2, [r3, #0]
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	e00a      	b.n	8007c18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d007      	beq.n	8007c18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007c08:	4b39      	ldr	r3, [pc, #228]	; (8007cf0 <xQueueGenericSend+0x1f8>)
 8007c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c0e:	601a      	str	r2, [r3, #0]
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007c18:	f001 ff4c 	bl	8009ab4 <vPortExitCritical>
				return pdPASS;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e063      	b.n	8007ce8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d103      	bne.n	8007c2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c26:	f001 ff45 	bl	8009ab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	e05c      	b.n	8007ce8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d106      	bne.n	8007c42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c34:	f107 0314 	add.w	r3, r7, #20
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f001 f855 	bl	8008ce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c42:	f001 ff37 	bl	8009ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c46:	f000 fd9b 	bl	8008780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c4a:	f001 ff03 	bl	8009a54 <vPortEnterCritical>
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c54:	b25b      	sxtb	r3, r3
 8007c56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c5a:	d103      	bne.n	8007c64 <xQueueGenericSend+0x16c>
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c6a:	b25b      	sxtb	r3, r3
 8007c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c70:	d103      	bne.n	8007c7a <xQueueGenericSend+0x182>
 8007c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c7a:	f001 ff1b 	bl	8009ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c7e:	1d3a      	adds	r2, r7, #4
 8007c80:	f107 0314 	add.w	r3, r7, #20
 8007c84:	4611      	mov	r1, r2
 8007c86:	4618      	mov	r0, r3
 8007c88:	f001 f844 	bl	8008d14 <xTaskCheckForTimeOut>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d124      	bne.n	8007cdc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c94:	f000 faa2 	bl	80081dc <prvIsQueueFull>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d018      	beq.n	8007cd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca0:	3310      	adds	r3, #16
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 ff44 	bl	8008b34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cae:	f000 fa2d 	bl	800810c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007cb2:	f000 fd73 	bl	800879c <xTaskResumeAll>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f47f af7c 	bne.w	8007bb6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007cbe:	4b0c      	ldr	r3, [pc, #48]	; (8007cf0 <xQueueGenericSend+0x1f8>)
 8007cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	e772      	b.n	8007bb6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cd2:	f000 fa1b 	bl	800810c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cd6:	f000 fd61 	bl	800879c <xTaskResumeAll>
 8007cda:	e76c      	b.n	8007bb6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cde:	f000 fa15 	bl	800810c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ce2:	f000 fd5b 	bl	800879c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ce6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3738      	adds	r7, #56	; 0x38
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	e000ed04 	.word	0xe000ed04

08007cf4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b090      	sub	sp, #64	; 0x40
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
 8007d00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10a      	bne.n	8007d22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d10:	f383 8811 	msr	BASEPRI, r3
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d1e:	bf00      	nop
 8007d20:	e7fe      	b.n	8007d20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d103      	bne.n	8007d30 <xQueueGenericSendFromISR+0x3c>
 8007d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d101      	bne.n	8007d34 <xQueueGenericSendFromISR+0x40>
 8007d30:	2301      	movs	r3, #1
 8007d32:	e000      	b.n	8007d36 <xQueueGenericSendFromISR+0x42>
 8007d34:	2300      	movs	r3, #0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10a      	bne.n	8007d50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d4c:	bf00      	nop
 8007d4e:	e7fe      	b.n	8007d4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d103      	bne.n	8007d5e <xQueueGenericSendFromISR+0x6a>
 8007d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d101      	bne.n	8007d62 <xQueueGenericSendFromISR+0x6e>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e000      	b.n	8007d64 <xQueueGenericSendFromISR+0x70>
 8007d62:	2300      	movs	r3, #0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10a      	bne.n	8007d7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	623b      	str	r3, [r7, #32]
}
 8007d7a:	bf00      	nop
 8007d7c:	e7fe      	b.n	8007d7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d7e:	f001 ff4b 	bl	8009c18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d82:	f3ef 8211 	mrs	r2, BASEPRI
 8007d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	61fa      	str	r2, [r7, #28]
 8007d98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d302      	bcc.n	8007db0 <xQueueGenericSendFromISR+0xbc>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d12f      	bne.n	8007e10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007dc0:	683a      	ldr	r2, [r7, #0]
 8007dc2:	68b9      	ldr	r1, [r7, #8]
 8007dc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007dc6:	f000 f911 	bl	8007fec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007dca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dd2:	d112      	bne.n	8007dfa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d016      	beq.n	8007e0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dde:	3324      	adds	r3, #36	; 0x24
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 fef7 	bl	8008bd4 <xTaskRemoveFromEventList>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00e      	beq.n	8007e0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00b      	beq.n	8007e0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	e007      	b.n	8007e0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007dfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007dfe:	3301      	adds	r3, #1
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	b25a      	sxtb	r2, r3
 8007e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007e0e:	e001      	b.n	8007e14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e10:	2300      	movs	r3, #0
 8007e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e16:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3740      	adds	r7, #64	; 0x40
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
	...

08007e2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08c      	sub	sp, #48	; 0x30
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10a      	bne.n	8007e5c <xQueueReceive+0x30>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	623b      	str	r3, [r7, #32]
}
 8007e58:	bf00      	nop
 8007e5a:	e7fe      	b.n	8007e5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d103      	bne.n	8007e6a <xQueueReceive+0x3e>
 8007e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <xQueueReceive+0x42>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e000      	b.n	8007e70 <xQueueReceive+0x44>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10a      	bne.n	8007e8a <xQueueReceive+0x5e>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	61fb      	str	r3, [r7, #28]
}
 8007e86:	bf00      	nop
 8007e88:	e7fe      	b.n	8007e88 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e8a:	f001 f88b 	bl	8008fa4 <xTaskGetSchedulerState>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d102      	bne.n	8007e9a <xQueueReceive+0x6e>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d101      	bne.n	8007e9e <xQueueReceive+0x72>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e000      	b.n	8007ea0 <xQueueReceive+0x74>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10a      	bne.n	8007eba <xQueueReceive+0x8e>
	__asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	61bb      	str	r3, [r7, #24]
}
 8007eb6:	bf00      	nop
 8007eb8:	e7fe      	b.n	8007eb8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007eba:	f001 fdcb 	bl	8009a54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d01f      	beq.n	8007f0a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ece:	f000 f8f7 	bl	80080c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	1e5a      	subs	r2, r3, #1
 8007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00f      	beq.n	8007f02 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee4:	3310      	adds	r3, #16
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 fe74 	bl	8008bd4 <xTaskRemoveFromEventList>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d007      	beq.n	8007f02 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ef2:	4b3d      	ldr	r3, [pc, #244]	; (8007fe8 <xQueueReceive+0x1bc>)
 8007ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f02:	f001 fdd7 	bl	8009ab4 <vPortExitCritical>
				return pdPASS;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e069      	b.n	8007fde <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d103      	bne.n	8007f18 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f10:	f001 fdd0 	bl	8009ab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f14:	2300      	movs	r3, #0
 8007f16:	e062      	b.n	8007fde <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d106      	bne.n	8007f2c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f1e:	f107 0310 	add.w	r3, r7, #16
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 fee0 	bl	8008ce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f2c:	f001 fdc2 	bl	8009ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f30:	f000 fc26 	bl	8008780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f34:	f001 fd8e 	bl	8009a54 <vPortEnterCritical>
 8007f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f3e:	b25b      	sxtb	r3, r3
 8007f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f44:	d103      	bne.n	8007f4e <xQueueReceive+0x122>
 8007f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f54:	b25b      	sxtb	r3, r3
 8007f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f5a:	d103      	bne.n	8007f64 <xQueueReceive+0x138>
 8007f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f64:	f001 fda6 	bl	8009ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f68:	1d3a      	adds	r2, r7, #4
 8007f6a:	f107 0310 	add.w	r3, r7, #16
 8007f6e:	4611      	mov	r1, r2
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 fecf 	bl	8008d14 <xTaskCheckForTimeOut>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d123      	bne.n	8007fc4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f7e:	f000 f917 	bl	80081b0 <prvIsQueueEmpty>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d017      	beq.n	8007fb8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8a:	3324      	adds	r3, #36	; 0x24
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	4611      	mov	r1, r2
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 fdcf 	bl	8008b34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f98:	f000 f8b8 	bl	800810c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f9c:	f000 fbfe 	bl	800879c <xTaskResumeAll>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d189      	bne.n	8007eba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007fa6:	4b10      	ldr	r3, [pc, #64]	; (8007fe8 <xQueueReceive+0x1bc>)
 8007fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	e780      	b.n	8007eba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fba:	f000 f8a7 	bl	800810c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fbe:	f000 fbed 	bl	800879c <xTaskResumeAll>
 8007fc2:	e77a      	b.n	8007eba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fc6:	f000 f8a1 	bl	800810c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fca:	f000 fbe7 	bl	800879c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fd0:	f000 f8ee 	bl	80081b0 <prvIsQueueEmpty>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f43f af6f 	beq.w	8007eba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007fdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3730      	adds	r7, #48	; 0x30
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	e000ed04 	.word	0xe000ed04

08007fec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008000:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10d      	bne.n	8008026 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d14d      	bne.n	80080ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	4618      	mov	r0, r3
 8008018:	f000 ffe2 	bl	8008fe0 <xTaskPriorityDisinherit>
 800801c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	609a      	str	r2, [r3, #8]
 8008024:	e043      	b.n	80080ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d119      	bne.n	8008060 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6858      	ldr	r0, [r3, #4]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008034:	461a      	mov	r2, r3
 8008036:	68b9      	ldr	r1, [r7, #8]
 8008038:	f00f f8ad 	bl	8017196 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008044:	441a      	add	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	429a      	cmp	r2, r3
 8008054:	d32b      	bcc.n	80080ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	605a      	str	r2, [r3, #4]
 800805e:	e026      	b.n	80080ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	68d8      	ldr	r0, [r3, #12]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008068:	461a      	mov	r2, r3
 800806a:	68b9      	ldr	r1, [r7, #8]
 800806c:	f00f f893 	bl	8017196 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	68da      	ldr	r2, [r3, #12]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008078:	425b      	negs	r3, r3
 800807a:	441a      	add	r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	68da      	ldr	r2, [r3, #12]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	429a      	cmp	r2, r3
 800808a:	d207      	bcs.n	800809c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	689a      	ldr	r2, [r3, #8]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008094:	425b      	negs	r3, r3
 8008096:	441a      	add	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d105      	bne.n	80080ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d002      	beq.n	80080ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	3b01      	subs	r3, #1
 80080ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	1c5a      	adds	r2, r3, #1
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80080b6:	697b      	ldr	r3, [r7, #20]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d018      	beq.n	8008104 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	441a      	add	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68da      	ldr	r2, [r3, #12]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d303      	bcc.n	80080f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68d9      	ldr	r1, [r3, #12]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fc:	461a      	mov	r2, r3
 80080fe:	6838      	ldr	r0, [r7, #0]
 8008100:	f00f f849 	bl	8017196 <memcpy>
	}
}
 8008104:	bf00      	nop
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008114:	f001 fc9e 	bl	8009a54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800811e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008120:	e011      	b.n	8008146 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	2b00      	cmp	r3, #0
 8008128:	d012      	beq.n	8008150 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	3324      	adds	r3, #36	; 0x24
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fd50 	bl	8008bd4 <xTaskRemoveFromEventList>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800813a:	f000 fe4d 	bl	8008dd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800813e:	7bfb      	ldrb	r3, [r7, #15]
 8008140:	3b01      	subs	r3, #1
 8008142:	b2db      	uxtb	r3, r3
 8008144:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800814a:	2b00      	cmp	r3, #0
 800814c:	dce9      	bgt.n	8008122 <prvUnlockQueue+0x16>
 800814e:	e000      	b.n	8008152 <prvUnlockQueue+0x46>
					break;
 8008150:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	22ff      	movs	r2, #255	; 0xff
 8008156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800815a:	f001 fcab 	bl	8009ab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800815e:	f001 fc79 	bl	8009a54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008168:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800816a:	e011      	b.n	8008190 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d012      	beq.n	800819a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	3310      	adds	r3, #16
 8008178:	4618      	mov	r0, r3
 800817a:	f000 fd2b 	bl	8008bd4 <xTaskRemoveFromEventList>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008184:	f000 fe28 	bl	8008dd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008188:	7bbb      	ldrb	r3, [r7, #14]
 800818a:	3b01      	subs	r3, #1
 800818c:	b2db      	uxtb	r3, r3
 800818e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008194:	2b00      	cmp	r3, #0
 8008196:	dce9      	bgt.n	800816c <prvUnlockQueue+0x60>
 8008198:	e000      	b.n	800819c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800819a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	22ff      	movs	r2, #255	; 0xff
 80081a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80081a4:	f001 fc86 	bl	8009ab4 <vPortExitCritical>
}
 80081a8:	bf00      	nop
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081b8:	f001 fc4c 	bl	8009a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d102      	bne.n	80081ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80081c4:	2301      	movs	r3, #1
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	e001      	b.n	80081ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80081ca:	2300      	movs	r3, #0
 80081cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081ce:	f001 fc71 	bl	8009ab4 <vPortExitCritical>

	return xReturn;
 80081d2:	68fb      	ldr	r3, [r7, #12]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081e4:	f001 fc36 	bl	8009a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d102      	bne.n	80081fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80081f4:	2301      	movs	r3, #1
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	e001      	b.n	80081fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80081fa:	2300      	movs	r3, #0
 80081fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081fe:	f001 fc59 	bl	8009ab4 <vPortExitCritical>

	return xReturn;
 8008202:	68fb      	ldr	r3, [r7, #12]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008216:	2300      	movs	r3, #0
 8008218:	60fb      	str	r3, [r7, #12]
 800821a:	e014      	b.n	8008246 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800821c:	4a0f      	ldr	r2, [pc, #60]	; (800825c <vQueueAddToRegistry+0x50>)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10b      	bne.n	8008240 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008228:	490c      	ldr	r1, [pc, #48]	; (800825c <vQueueAddToRegistry+0x50>)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008232:	4a0a      	ldr	r2, [pc, #40]	; (800825c <vQueueAddToRegistry+0x50>)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	4413      	add	r3, r2
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800823e:	e006      	b.n	800824e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3301      	adds	r3, #1
 8008244:	60fb      	str	r3, [r7, #12]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2b07      	cmp	r3, #7
 800824a:	d9e7      	bls.n	800821c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800824c:	bf00      	nop
 800824e:	bf00      	nop
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	20007ee0 	.word	0x20007ee0

08008260 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008270:	f001 fbf0 	bl	8009a54 <vPortEnterCritical>
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800827a:	b25b      	sxtb	r3, r3
 800827c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008280:	d103      	bne.n	800828a <vQueueWaitForMessageRestricted+0x2a>
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008290:	b25b      	sxtb	r3, r3
 8008292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008296:	d103      	bne.n	80082a0 <vQueueWaitForMessageRestricted+0x40>
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	2200      	movs	r2, #0
 800829c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082a0:	f001 fc08 	bl	8009ab4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d106      	bne.n	80082ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	3324      	adds	r3, #36	; 0x24
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	68b9      	ldr	r1, [r7, #8]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 fc61 	bl	8008b7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80082ba:	6978      	ldr	r0, [r7, #20]
 80082bc:	f7ff ff26 	bl	800810c <prvUnlockQueue>
	}
 80082c0:	bf00      	nop
 80082c2:	3718      	adds	r7, #24
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08e      	sub	sp, #56	; 0x38
 80082cc:	af04      	add	r7, sp, #16
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80082d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10a      	bne.n	80082f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80082dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e0:	f383 8811 	msr	BASEPRI, r3
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	623b      	str	r3, [r7, #32]
}
 80082ee:	bf00      	nop
 80082f0:	e7fe      	b.n	80082f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80082f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d10a      	bne.n	800830e <xTaskCreateStatic+0x46>
	__asm volatile
 80082f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fc:	f383 8811 	msr	BASEPRI, r3
 8008300:	f3bf 8f6f 	isb	sy
 8008304:	f3bf 8f4f 	dsb	sy
 8008308:	61fb      	str	r3, [r7, #28]
}
 800830a:	bf00      	nop
 800830c:	e7fe      	b.n	800830c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800830e:	23a8      	movs	r3, #168	; 0xa8
 8008310:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	2ba8      	cmp	r3, #168	; 0xa8
 8008316:	d00a      	beq.n	800832e <xTaskCreateStatic+0x66>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831c:	f383 8811 	msr	BASEPRI, r3
 8008320:	f3bf 8f6f 	isb	sy
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	61bb      	str	r3, [r7, #24]
}
 800832a:	bf00      	nop
 800832c:	e7fe      	b.n	800832c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800832e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008332:	2b00      	cmp	r3, #0
 8008334:	d01e      	beq.n	8008374 <xTaskCreateStatic+0xac>
 8008336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008338:	2b00      	cmp	r3, #0
 800833a:	d01b      	beq.n	8008374 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800833c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008344:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008348:	2202      	movs	r2, #2
 800834a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800834e:	2300      	movs	r3, #0
 8008350:	9303      	str	r3, [sp, #12]
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	9302      	str	r3, [sp, #8]
 8008356:	f107 0314 	add.w	r3, r7, #20
 800835a:	9301      	str	r3, [sp, #4]
 800835c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	68b9      	ldr	r1, [r7, #8]
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f000 f850 	bl	800840c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800836c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800836e:	f000 f8f3 	bl	8008558 <prvAddNewTaskToReadyList>
 8008372:	e001      	b.n	8008378 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008374:	2300      	movs	r3, #0
 8008376:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008378:	697b      	ldr	r3, [r7, #20]
	}
 800837a:	4618      	mov	r0, r3
 800837c:	3728      	adds	r7, #40	; 0x28
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008382:	b580      	push	{r7, lr}
 8008384:	b08c      	sub	sp, #48	; 0x30
 8008386:	af04      	add	r7, sp, #16
 8008388:	60f8      	str	r0, [r7, #12]
 800838a:	60b9      	str	r1, [r7, #8]
 800838c:	603b      	str	r3, [r7, #0]
 800838e:	4613      	mov	r3, r2
 8008390:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008392:	88fb      	ldrh	r3, [r7, #6]
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4618      	mov	r0, r3
 8008398:	f001 fc7e 	bl	8009c98 <pvPortMalloc>
 800839c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00e      	beq.n	80083c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80083a4:	20a8      	movs	r0, #168	; 0xa8
 80083a6:	f001 fc77 	bl	8009c98 <pvPortMalloc>
 80083aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	631a      	str	r2, [r3, #48]	; 0x30
 80083b8:	e005      	b.n	80083c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80083ba:	6978      	ldr	r0, [r7, #20]
 80083bc:	f001 fd38 	bl	8009e30 <vPortFree>
 80083c0:	e001      	b.n	80083c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80083c2:	2300      	movs	r3, #0
 80083c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d017      	beq.n	80083fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80083d4:	88fa      	ldrh	r2, [r7, #6]
 80083d6:	2300      	movs	r3, #0
 80083d8:	9303      	str	r3, [sp, #12]
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	9302      	str	r3, [sp, #8]
 80083de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e0:	9301      	str	r3, [sp, #4]
 80083e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	68b9      	ldr	r1, [r7, #8]
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f000 f80e 	bl	800840c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083f0:	69f8      	ldr	r0, [r7, #28]
 80083f2:	f000 f8b1 	bl	8008558 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80083f6:	2301      	movs	r3, #1
 80083f8:	61bb      	str	r3, [r7, #24]
 80083fa:	e002      	b.n	8008402 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008400:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008402:	69bb      	ldr	r3, [r7, #24]
	}
 8008404:	4618      	mov	r0, r3
 8008406:	3720      	adds	r7, #32
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b088      	sub	sp, #32
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800841a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	461a      	mov	r2, r3
 8008424:	21a5      	movs	r1, #165	; 0xa5
 8008426:	f00e fd97 	bl	8016f58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800842a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008434:	3b01      	subs	r3, #1
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	f023 0307 	bic.w	r3, r3, #7
 8008442:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00a      	beq.n	8008464 <prvInitialiseNewTask+0x58>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	617b      	str	r3, [r7, #20]
}
 8008460:	bf00      	nop
 8008462:	e7fe      	b.n	8008462 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d01f      	beq.n	80084aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800846a:	2300      	movs	r3, #0
 800846c:	61fb      	str	r3, [r7, #28]
 800846e:	e012      	b.n	8008496 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	4413      	add	r3, r2
 8008476:	7819      	ldrb	r1, [r3, #0]
 8008478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	4413      	add	r3, r2
 800847e:	3334      	adds	r3, #52	; 0x34
 8008480:	460a      	mov	r2, r1
 8008482:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	4413      	add	r3, r2
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d006      	beq.n	800849e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	3301      	adds	r3, #1
 8008494:	61fb      	str	r3, [r7, #28]
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	2b0f      	cmp	r3, #15
 800849a:	d9e9      	bls.n	8008470 <prvInitialiseNewTask+0x64>
 800849c:	e000      	b.n	80084a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800849e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084a8:	e003      	b.n	80084b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80084aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b4:	2b37      	cmp	r3, #55	; 0x37
 80084b6:	d901      	bls.n	80084bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80084b8:	2337      	movs	r3, #55	; 0x37
 80084ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80084bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80084c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	2200      	movs	r2, #0
 80084cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	3304      	adds	r3, #4
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7ff f978 	bl	80077c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	3318      	adds	r3, #24
 80084dc:	4618      	mov	r0, r3
 80084de:	f7ff f973 	bl	80077c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80084e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80084ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80084f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fa:	2200      	movs	r2, #0
 80084fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008502:	2200      	movs	r2, #0
 8008504:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850a:	3354      	adds	r3, #84	; 0x54
 800850c:	224c      	movs	r2, #76	; 0x4c
 800850e:	2100      	movs	r1, #0
 8008510:	4618      	mov	r0, r3
 8008512:	f00e fd21 	bl	8016f58 <memset>
 8008516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008518:	4a0c      	ldr	r2, [pc, #48]	; (800854c <prvInitialiseNewTask+0x140>)
 800851a:	659a      	str	r2, [r3, #88]	; 0x58
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	4a0c      	ldr	r2, [pc, #48]	; (8008550 <prvInitialiseNewTask+0x144>)
 8008520:	65da      	str	r2, [r3, #92]	; 0x5c
 8008522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008524:	4a0b      	ldr	r2, [pc, #44]	; (8008554 <prvInitialiseNewTask+0x148>)
 8008526:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	68f9      	ldr	r1, [r7, #12]
 800852c:	69b8      	ldr	r0, [r7, #24]
 800852e:	f001 f967 	bl	8009800 <pxPortInitialiseStack>
 8008532:	4602      	mov	r2, r0
 8008534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008536:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853a:	2b00      	cmp	r3, #0
 800853c:	d002      	beq.n	8008544 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800853e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008542:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008544:	bf00      	nop
 8008546:	3720      	adds	r7, #32
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	20010cf8 	.word	0x20010cf8
 8008550:	20010d60 	.word	0x20010d60
 8008554:	20010dc8 	.word	0x20010dc8

08008558 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008560:	f001 fa78 	bl	8009a54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008564:	4b2d      	ldr	r3, [pc, #180]	; (800861c <prvAddNewTaskToReadyList+0xc4>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3301      	adds	r3, #1
 800856a:	4a2c      	ldr	r2, [pc, #176]	; (800861c <prvAddNewTaskToReadyList+0xc4>)
 800856c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800856e:	4b2c      	ldr	r3, [pc, #176]	; (8008620 <prvAddNewTaskToReadyList+0xc8>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d109      	bne.n	800858a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008576:	4a2a      	ldr	r2, [pc, #168]	; (8008620 <prvAddNewTaskToReadyList+0xc8>)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800857c:	4b27      	ldr	r3, [pc, #156]	; (800861c <prvAddNewTaskToReadyList+0xc4>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d110      	bne.n	80085a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008584:	f000 fc4c 	bl	8008e20 <prvInitialiseTaskLists>
 8008588:	e00d      	b.n	80085a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800858a:	4b26      	ldr	r3, [pc, #152]	; (8008624 <prvAddNewTaskToReadyList+0xcc>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d109      	bne.n	80085a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008592:	4b23      	ldr	r3, [pc, #140]	; (8008620 <prvAddNewTaskToReadyList+0xc8>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	429a      	cmp	r2, r3
 800859e:	d802      	bhi.n	80085a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80085a0:	4a1f      	ldr	r2, [pc, #124]	; (8008620 <prvAddNewTaskToReadyList+0xc8>)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80085a6:	4b20      	ldr	r3, [pc, #128]	; (8008628 <prvAddNewTaskToReadyList+0xd0>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3301      	adds	r3, #1
 80085ac:	4a1e      	ldr	r2, [pc, #120]	; (8008628 <prvAddNewTaskToReadyList+0xd0>)
 80085ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80085b0:	4b1d      	ldr	r3, [pc, #116]	; (8008628 <prvAddNewTaskToReadyList+0xd0>)
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085bc:	4b1b      	ldr	r3, [pc, #108]	; (800862c <prvAddNewTaskToReadyList+0xd4>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d903      	bls.n	80085cc <prvAddNewTaskToReadyList+0x74>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c8:	4a18      	ldr	r2, [pc, #96]	; (800862c <prvAddNewTaskToReadyList+0xd4>)
 80085ca:	6013      	str	r3, [r2, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d0:	4613      	mov	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	4413      	add	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4a15      	ldr	r2, [pc, #84]	; (8008630 <prvAddNewTaskToReadyList+0xd8>)
 80085da:	441a      	add	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3304      	adds	r3, #4
 80085e0:	4619      	mov	r1, r3
 80085e2:	4610      	mov	r0, r2
 80085e4:	f7ff f8fd 	bl	80077e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80085e8:	f001 fa64 	bl	8009ab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80085ec:	4b0d      	ldr	r3, [pc, #52]	; (8008624 <prvAddNewTaskToReadyList+0xcc>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00e      	beq.n	8008612 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085f4:	4b0a      	ldr	r3, [pc, #40]	; (8008620 <prvAddNewTaskToReadyList+0xc8>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fe:	429a      	cmp	r2, r3
 8008600:	d207      	bcs.n	8008612 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008602:	4b0c      	ldr	r3, [pc, #48]	; (8008634 <prvAddNewTaskToReadyList+0xdc>)
 8008604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008612:	bf00      	nop
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	200083f4 	.word	0x200083f4
 8008620:	20007f20 	.word	0x20007f20
 8008624:	20008400 	.word	0x20008400
 8008628:	20008410 	.word	0x20008410
 800862c:	200083fc 	.word	0x200083fc
 8008630:	20007f24 	.word	0x20007f24
 8008634:	e000ed04 	.word	0xe000ed04

08008638 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008640:	2300      	movs	r3, #0
 8008642:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d017      	beq.n	800867a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800864a:	4b13      	ldr	r3, [pc, #76]	; (8008698 <vTaskDelay+0x60>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00a      	beq.n	8008668 <vTaskDelay+0x30>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	60bb      	str	r3, [r7, #8]
}
 8008664:	bf00      	nop
 8008666:	e7fe      	b.n	8008666 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008668:	f000 f88a 	bl	8008780 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800866c:	2100      	movs	r1, #0
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fd24 	bl	80090bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008674:	f000 f892 	bl	800879c <xTaskResumeAll>
 8008678:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d107      	bne.n	8008690 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008680:	4b06      	ldr	r3, [pc, #24]	; (800869c <vTaskDelay+0x64>)
 8008682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008686:	601a      	str	r2, [r3, #0]
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008690:	bf00      	nop
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	2000841c 	.word	0x2000841c
 800869c:	e000ed04 	.word	0xe000ed04

080086a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b08a      	sub	sp, #40	; 0x28
 80086a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80086a6:	2300      	movs	r3, #0
 80086a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80086aa:	2300      	movs	r3, #0
 80086ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80086ae:	463a      	mov	r2, r7
 80086b0:	1d39      	adds	r1, r7, #4
 80086b2:	f107 0308 	add.w	r3, r7, #8
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff f832 	bl	8007720 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	9202      	str	r2, [sp, #8]
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	2300      	movs	r3, #0
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	2300      	movs	r3, #0
 80086cc:	460a      	mov	r2, r1
 80086ce:	4924      	ldr	r1, [pc, #144]	; (8008760 <vTaskStartScheduler+0xc0>)
 80086d0:	4824      	ldr	r0, [pc, #144]	; (8008764 <vTaskStartScheduler+0xc4>)
 80086d2:	f7ff fdf9 	bl	80082c8 <xTaskCreateStatic>
 80086d6:	4603      	mov	r3, r0
 80086d8:	4a23      	ldr	r2, [pc, #140]	; (8008768 <vTaskStartScheduler+0xc8>)
 80086da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80086dc:	4b22      	ldr	r3, [pc, #136]	; (8008768 <vTaskStartScheduler+0xc8>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086e4:	2301      	movs	r3, #1
 80086e6:	617b      	str	r3, [r7, #20]
 80086e8:	e001      	b.n	80086ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086ea:	2300      	movs	r3, #0
 80086ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d102      	bne.n	80086fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80086f4:	f000 fd36 	bl	8009164 <xTimerCreateTimerTask>
 80086f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d11b      	bne.n	8008738 <vTaskStartScheduler+0x98>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	613b      	str	r3, [r7, #16]
}
 8008712:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008714:	4b15      	ldr	r3, [pc, #84]	; (800876c <vTaskStartScheduler+0xcc>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3354      	adds	r3, #84	; 0x54
 800871a:	4a15      	ldr	r2, [pc, #84]	; (8008770 <vTaskStartScheduler+0xd0>)
 800871c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800871e:	4b15      	ldr	r3, [pc, #84]	; (8008774 <vTaskStartScheduler+0xd4>)
 8008720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008724:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008726:	4b14      	ldr	r3, [pc, #80]	; (8008778 <vTaskStartScheduler+0xd8>)
 8008728:	2201      	movs	r2, #1
 800872a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800872c:	4b13      	ldr	r3, [pc, #76]	; (800877c <vTaskStartScheduler+0xdc>)
 800872e:	2200      	movs	r2, #0
 8008730:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008732:	f001 f8ed 	bl	8009910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008736:	e00e      	b.n	8008756 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800873e:	d10a      	bne.n	8008756 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	60fb      	str	r3, [r7, #12]
}
 8008752:	bf00      	nop
 8008754:	e7fe      	b.n	8008754 <vTaskStartScheduler+0xb4>
}
 8008756:	bf00      	nop
 8008758:	3718      	adds	r7, #24
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	08017ff0 	.word	0x08017ff0
 8008764:	08008df1 	.word	0x08008df1
 8008768:	20008418 	.word	0x20008418
 800876c:	20007f20 	.word	0x20007f20
 8008770:	2000010c 	.word	0x2000010c
 8008774:	20008414 	.word	0x20008414
 8008778:	20008400 	.word	0x20008400
 800877c:	200083f8 	.word	0x200083f8

08008780 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008780:	b480      	push	{r7}
 8008782:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008784:	4b04      	ldr	r3, [pc, #16]	; (8008798 <vTaskSuspendAll+0x18>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	3301      	adds	r3, #1
 800878a:	4a03      	ldr	r2, [pc, #12]	; (8008798 <vTaskSuspendAll+0x18>)
 800878c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800878e:	bf00      	nop
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	2000841c 	.word	0x2000841c

0800879c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80087a2:	2300      	movs	r3, #0
 80087a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80087a6:	2300      	movs	r3, #0
 80087a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80087aa:	4b42      	ldr	r3, [pc, #264]	; (80088b4 <xTaskResumeAll+0x118>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10a      	bne.n	80087c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80087b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	603b      	str	r3, [r7, #0]
}
 80087c4:	bf00      	nop
 80087c6:	e7fe      	b.n	80087c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80087c8:	f001 f944 	bl	8009a54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80087cc:	4b39      	ldr	r3, [pc, #228]	; (80088b4 <xTaskResumeAll+0x118>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3b01      	subs	r3, #1
 80087d2:	4a38      	ldr	r2, [pc, #224]	; (80088b4 <xTaskResumeAll+0x118>)
 80087d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087d6:	4b37      	ldr	r3, [pc, #220]	; (80088b4 <xTaskResumeAll+0x118>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d162      	bne.n	80088a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087de:	4b36      	ldr	r3, [pc, #216]	; (80088b8 <xTaskResumeAll+0x11c>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d05e      	beq.n	80088a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087e6:	e02f      	b.n	8008848 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087e8:	4b34      	ldr	r3, [pc, #208]	; (80088bc <xTaskResumeAll+0x120>)
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3318      	adds	r3, #24
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7ff f851 	bl	800789c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3304      	adds	r3, #4
 80087fe:	4618      	mov	r0, r3
 8008800:	f7ff f84c 	bl	800789c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008808:	4b2d      	ldr	r3, [pc, #180]	; (80088c0 <xTaskResumeAll+0x124>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	429a      	cmp	r2, r3
 800880e:	d903      	bls.n	8008818 <xTaskResumeAll+0x7c>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008814:	4a2a      	ldr	r2, [pc, #168]	; (80088c0 <xTaskResumeAll+0x124>)
 8008816:	6013      	str	r3, [r2, #0]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800881c:	4613      	mov	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4a27      	ldr	r2, [pc, #156]	; (80088c4 <xTaskResumeAll+0x128>)
 8008826:	441a      	add	r2, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	3304      	adds	r3, #4
 800882c:	4619      	mov	r1, r3
 800882e:	4610      	mov	r0, r2
 8008830:	f7fe ffd7 	bl	80077e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008838:	4b23      	ldr	r3, [pc, #140]	; (80088c8 <xTaskResumeAll+0x12c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883e:	429a      	cmp	r2, r3
 8008840:	d302      	bcc.n	8008848 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008842:	4b22      	ldr	r3, [pc, #136]	; (80088cc <xTaskResumeAll+0x130>)
 8008844:	2201      	movs	r2, #1
 8008846:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008848:	4b1c      	ldr	r3, [pc, #112]	; (80088bc <xTaskResumeAll+0x120>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1cb      	bne.n	80087e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d001      	beq.n	800885a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008856:	f000 fb85 	bl	8008f64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800885a:	4b1d      	ldr	r3, [pc, #116]	; (80088d0 <xTaskResumeAll+0x134>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d010      	beq.n	8008888 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008866:	f000 f847 	bl	80088f8 <xTaskIncrementTick>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008870:	4b16      	ldr	r3, [pc, #88]	; (80088cc <xTaskResumeAll+0x130>)
 8008872:	2201      	movs	r2, #1
 8008874:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	3b01      	subs	r3, #1
 800887a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1f1      	bne.n	8008866 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008882:	4b13      	ldr	r3, [pc, #76]	; (80088d0 <xTaskResumeAll+0x134>)
 8008884:	2200      	movs	r2, #0
 8008886:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008888:	4b10      	ldr	r3, [pc, #64]	; (80088cc <xTaskResumeAll+0x130>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d009      	beq.n	80088a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008890:	2301      	movs	r3, #1
 8008892:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008894:	4b0f      	ldr	r3, [pc, #60]	; (80088d4 <xTaskResumeAll+0x138>)
 8008896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088a4:	f001 f906 	bl	8009ab4 <vPortExitCritical>

	return xAlreadyYielded;
 80088a8:	68bb      	ldr	r3, [r7, #8]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	2000841c 	.word	0x2000841c
 80088b8:	200083f4 	.word	0x200083f4
 80088bc:	200083b4 	.word	0x200083b4
 80088c0:	200083fc 	.word	0x200083fc
 80088c4:	20007f24 	.word	0x20007f24
 80088c8:	20007f20 	.word	0x20007f20
 80088cc:	20008408 	.word	0x20008408
 80088d0:	20008404 	.word	0x20008404
 80088d4:	e000ed04 	.word	0xe000ed04

080088d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80088de:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <xTaskGetTickCount+0x1c>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088e4:	687b      	ldr	r3, [r7, #4]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	200083f8 	.word	0x200083f8

080088f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088fe:	2300      	movs	r3, #0
 8008900:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008902:	4b4f      	ldr	r3, [pc, #316]	; (8008a40 <xTaskIncrementTick+0x148>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	f040 808f 	bne.w	8008a2a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800890c:	4b4d      	ldr	r3, [pc, #308]	; (8008a44 <xTaskIncrementTick+0x14c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3301      	adds	r3, #1
 8008912:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008914:	4a4b      	ldr	r2, [pc, #300]	; (8008a44 <xTaskIncrementTick+0x14c>)
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d120      	bne.n	8008962 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008920:	4b49      	ldr	r3, [pc, #292]	; (8008a48 <xTaskIncrementTick+0x150>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00a      	beq.n	8008940 <xTaskIncrementTick+0x48>
	__asm volatile
 800892a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	603b      	str	r3, [r7, #0]
}
 800893c:	bf00      	nop
 800893e:	e7fe      	b.n	800893e <xTaskIncrementTick+0x46>
 8008940:	4b41      	ldr	r3, [pc, #260]	; (8008a48 <xTaskIncrementTick+0x150>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	60fb      	str	r3, [r7, #12]
 8008946:	4b41      	ldr	r3, [pc, #260]	; (8008a4c <xTaskIncrementTick+0x154>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a3f      	ldr	r2, [pc, #252]	; (8008a48 <xTaskIncrementTick+0x150>)
 800894c:	6013      	str	r3, [r2, #0]
 800894e:	4a3f      	ldr	r2, [pc, #252]	; (8008a4c <xTaskIncrementTick+0x154>)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	4b3e      	ldr	r3, [pc, #248]	; (8008a50 <xTaskIncrementTick+0x158>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3301      	adds	r3, #1
 800895a:	4a3d      	ldr	r2, [pc, #244]	; (8008a50 <xTaskIncrementTick+0x158>)
 800895c:	6013      	str	r3, [r2, #0]
 800895e:	f000 fb01 	bl	8008f64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008962:	4b3c      	ldr	r3, [pc, #240]	; (8008a54 <xTaskIncrementTick+0x15c>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	429a      	cmp	r2, r3
 800896a:	d349      	bcc.n	8008a00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800896c:	4b36      	ldr	r3, [pc, #216]	; (8008a48 <xTaskIncrementTick+0x150>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d104      	bne.n	8008980 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008976:	4b37      	ldr	r3, [pc, #220]	; (8008a54 <xTaskIncrementTick+0x15c>)
 8008978:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800897c:	601a      	str	r2, [r3, #0]
					break;
 800897e:	e03f      	b.n	8008a00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008980:	4b31      	ldr	r3, [pc, #196]	; (8008a48 <xTaskIncrementTick+0x150>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	429a      	cmp	r2, r3
 8008996:	d203      	bcs.n	80089a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008998:	4a2e      	ldr	r2, [pc, #184]	; (8008a54 <xTaskIncrementTick+0x15c>)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800899e:	e02f      	b.n	8008a00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	3304      	adds	r3, #4
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fe ff79 	bl	800789c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d004      	beq.n	80089bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	3318      	adds	r3, #24
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fe ff70 	bl	800789c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c0:	4b25      	ldr	r3, [pc, #148]	; (8008a58 <xTaskIncrementTick+0x160>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d903      	bls.n	80089d0 <xTaskIncrementTick+0xd8>
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	4a22      	ldr	r2, [pc, #136]	; (8008a58 <xTaskIncrementTick+0x160>)
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d4:	4613      	mov	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4413      	add	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4a1f      	ldr	r2, [pc, #124]	; (8008a5c <xTaskIncrementTick+0x164>)
 80089de:	441a      	add	r2, r3
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	3304      	adds	r3, #4
 80089e4:	4619      	mov	r1, r3
 80089e6:	4610      	mov	r0, r2
 80089e8:	f7fe fefb 	bl	80077e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f0:	4b1b      	ldr	r3, [pc, #108]	; (8008a60 <xTaskIncrementTick+0x168>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d3b8      	bcc.n	800896c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80089fa:	2301      	movs	r3, #1
 80089fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089fe:	e7b5      	b.n	800896c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a00:	4b17      	ldr	r3, [pc, #92]	; (8008a60 <xTaskIncrementTick+0x168>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a06:	4915      	ldr	r1, [pc, #84]	; (8008a5c <xTaskIncrementTick+0x164>)
 8008a08:	4613      	mov	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	440b      	add	r3, r1
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d901      	bls.n	8008a1c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008a1c:	4b11      	ldr	r3, [pc, #68]	; (8008a64 <xTaskIncrementTick+0x16c>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d007      	beq.n	8008a34 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008a24:	2301      	movs	r3, #1
 8008a26:	617b      	str	r3, [r7, #20]
 8008a28:	e004      	b.n	8008a34 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a2a:	4b0f      	ldr	r3, [pc, #60]	; (8008a68 <xTaskIncrementTick+0x170>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	4a0d      	ldr	r2, [pc, #52]	; (8008a68 <xTaskIncrementTick+0x170>)
 8008a32:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008a34:	697b      	ldr	r3, [r7, #20]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	2000841c 	.word	0x2000841c
 8008a44:	200083f8 	.word	0x200083f8
 8008a48:	200083ac 	.word	0x200083ac
 8008a4c:	200083b0 	.word	0x200083b0
 8008a50:	2000840c 	.word	0x2000840c
 8008a54:	20008414 	.word	0x20008414
 8008a58:	200083fc 	.word	0x200083fc
 8008a5c:	20007f24 	.word	0x20007f24
 8008a60:	20007f20 	.word	0x20007f20
 8008a64:	20008408 	.word	0x20008408
 8008a68:	20008404 	.word	0x20008404

08008a6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a72:	4b2a      	ldr	r3, [pc, #168]	; (8008b1c <vTaskSwitchContext+0xb0>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a7a:	4b29      	ldr	r3, [pc, #164]	; (8008b20 <vTaskSwitchContext+0xb4>)
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a80:	e046      	b.n	8008b10 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008a82:	4b27      	ldr	r3, [pc, #156]	; (8008b20 <vTaskSwitchContext+0xb4>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a88:	4b26      	ldr	r3, [pc, #152]	; (8008b24 <vTaskSwitchContext+0xb8>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	60fb      	str	r3, [r7, #12]
 8008a8e:	e010      	b.n	8008ab2 <vTaskSwitchContext+0x46>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10a      	bne.n	8008aac <vTaskSwitchContext+0x40>
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	607b      	str	r3, [r7, #4]
}
 8008aa8:	bf00      	nop
 8008aaa:	e7fe      	b.n	8008aaa <vTaskSwitchContext+0x3e>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	491d      	ldr	r1, [pc, #116]	; (8008b28 <vTaskSwitchContext+0xbc>)
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	440b      	add	r3, r1
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d0e4      	beq.n	8008a90 <vTaskSwitchContext+0x24>
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4413      	add	r3, r2
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4a15      	ldr	r2, [pc, #84]	; (8008b28 <vTaskSwitchContext+0xbc>)
 8008ad2:	4413      	add	r3, r2
 8008ad4:	60bb      	str	r3, [r7, #8]
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	605a      	str	r2, [r3, #4]
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	685a      	ldr	r2, [r3, #4]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d104      	bne.n	8008af6 <vTaskSwitchContext+0x8a>
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	605a      	str	r2, [r3, #4]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	4a0b      	ldr	r2, [pc, #44]	; (8008b2c <vTaskSwitchContext+0xc0>)
 8008afe:	6013      	str	r3, [r2, #0]
 8008b00:	4a08      	ldr	r2, [pc, #32]	; (8008b24 <vTaskSwitchContext+0xb8>)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b06:	4b09      	ldr	r3, [pc, #36]	; (8008b2c <vTaskSwitchContext+0xc0>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3354      	adds	r3, #84	; 0x54
 8008b0c:	4a08      	ldr	r2, [pc, #32]	; (8008b30 <vTaskSwitchContext+0xc4>)
 8008b0e:	6013      	str	r3, [r2, #0]
}
 8008b10:	bf00      	nop
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	2000841c 	.word	0x2000841c
 8008b20:	20008408 	.word	0x20008408
 8008b24:	200083fc 	.word	0x200083fc
 8008b28:	20007f24 	.word	0x20007f24
 8008b2c:	20007f20 	.word	0x20007f20
 8008b30:	2000010c 	.word	0x2000010c

08008b34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10a      	bne.n	8008b5a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	60fb      	str	r3, [r7, #12]
}
 8008b56:	bf00      	nop
 8008b58:	e7fe      	b.n	8008b58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b5a:	4b07      	ldr	r3, [pc, #28]	; (8008b78 <vTaskPlaceOnEventList+0x44>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3318      	adds	r3, #24
 8008b60:	4619      	mov	r1, r3
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f7fe fe61 	bl	800782a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b68:	2101      	movs	r1, #1
 8008b6a:	6838      	ldr	r0, [r7, #0]
 8008b6c:	f000 faa6 	bl	80090bc <prvAddCurrentTaskToDelayedList>
}
 8008b70:	bf00      	nop
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	20007f20 	.word	0x20007f20

08008b7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b086      	sub	sp, #24
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d10a      	bne.n	8008ba4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	617b      	str	r3, [r7, #20]
}
 8008ba0:	bf00      	nop
 8008ba2:	e7fe      	b.n	8008ba2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ba4:	4b0a      	ldr	r3, [pc, #40]	; (8008bd0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	3318      	adds	r3, #24
 8008baa:	4619      	mov	r1, r3
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f7fe fe18 	bl	80077e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d002      	beq.n	8008bbe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bbc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008bbe:	6879      	ldr	r1, [r7, #4]
 8008bc0:	68b8      	ldr	r0, [r7, #8]
 8008bc2:	f000 fa7b 	bl	80090bc <prvAddCurrentTaskToDelayedList>
	}
 8008bc6:	bf00      	nop
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	20007f20 	.word	0x20007f20

08008bd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10a      	bne.n	8008c00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	60fb      	str	r3, [r7, #12]
}
 8008bfc:	bf00      	nop
 8008bfe:	e7fe      	b.n	8008bfe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	3318      	adds	r3, #24
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fe fe49 	bl	800789c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c0a:	4b1e      	ldr	r3, [pc, #120]	; (8008c84 <xTaskRemoveFromEventList+0xb0>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d11d      	bne.n	8008c4e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	3304      	adds	r3, #4
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7fe fe40 	bl	800789c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c20:	4b19      	ldr	r3, [pc, #100]	; (8008c88 <xTaskRemoveFromEventList+0xb4>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d903      	bls.n	8008c30 <xTaskRemoveFromEventList+0x5c>
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2c:	4a16      	ldr	r2, [pc, #88]	; (8008c88 <xTaskRemoveFromEventList+0xb4>)
 8008c2e:	6013      	str	r3, [r2, #0]
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c34:	4613      	mov	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4a13      	ldr	r2, [pc, #76]	; (8008c8c <xTaskRemoveFromEventList+0xb8>)
 8008c3e:	441a      	add	r2, r3
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	3304      	adds	r3, #4
 8008c44:	4619      	mov	r1, r3
 8008c46:	4610      	mov	r0, r2
 8008c48:	f7fe fdcb 	bl	80077e2 <vListInsertEnd>
 8008c4c:	e005      	b.n	8008c5a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	3318      	adds	r3, #24
 8008c52:	4619      	mov	r1, r3
 8008c54:	480e      	ldr	r0, [pc, #56]	; (8008c90 <xTaskRemoveFromEventList+0xbc>)
 8008c56:	f7fe fdc4 	bl	80077e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c5e:	4b0d      	ldr	r3, [pc, #52]	; (8008c94 <xTaskRemoveFromEventList+0xc0>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d905      	bls.n	8008c74 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c6c:	4b0a      	ldr	r3, [pc, #40]	; (8008c98 <xTaskRemoveFromEventList+0xc4>)
 8008c6e:	2201      	movs	r2, #1
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	e001      	b.n	8008c78 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008c74:	2300      	movs	r3, #0
 8008c76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c78:	697b      	ldr	r3, [r7, #20]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	2000841c 	.word	0x2000841c
 8008c88:	200083fc 	.word	0x200083fc
 8008c8c:	20007f24 	.word	0x20007f24
 8008c90:	200083b4 	.word	0x200083b4
 8008c94:	20007f20 	.word	0x20007f20
 8008c98:	20008408 	.word	0x20008408

08008c9c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10a      	bne.n	8008cc0 <vTaskSetTimeOutState+0x24>
	__asm volatile
 8008caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	60fb      	str	r3, [r7, #12]
}
 8008cbc:	bf00      	nop
 8008cbe:	e7fe      	b.n	8008cbe <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008cc0:	f000 fec8 	bl	8009a54 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cc4:	4b06      	ldr	r3, [pc, #24]	; (8008ce0 <vTaskSetTimeOutState+0x44>)
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008ccc:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <vTaskSetTimeOutState+0x48>)
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008cd4:	f000 feee 	bl	8009ab4 <vPortExitCritical>
}
 8008cd8:	bf00      	nop
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	2000840c 	.word	0x2000840c
 8008ce4:	200083f8 	.word	0x200083f8

08008ce8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cf0:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <vTaskInternalSetTimeOutState+0x24>)
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008cf8:	4b05      	ldr	r3, [pc, #20]	; (8008d10 <vTaskInternalSetTimeOutState+0x28>)
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	605a      	str	r2, [r3, #4]
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	2000840c 	.word	0x2000840c
 8008d10:	200083f8 	.word	0x200083f8

08008d14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b088      	sub	sp, #32
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10a      	bne.n	8008d3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	613b      	str	r3, [r7, #16]
}
 8008d36:	bf00      	nop
 8008d38:	e7fe      	b.n	8008d38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10a      	bne.n	8008d56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	60fb      	str	r3, [r7, #12]
}
 8008d52:	bf00      	nop
 8008d54:	e7fe      	b.n	8008d54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008d56:	f000 fe7d 	bl	8009a54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d5a:	4b1d      	ldr	r3, [pc, #116]	; (8008dd0 <xTaskCheckForTimeOut+0xbc>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	69ba      	ldr	r2, [r7, #24]
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d72:	d102      	bne.n	8008d7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d74:	2300      	movs	r3, #0
 8008d76:	61fb      	str	r3, [r7, #28]
 8008d78:	e023      	b.n	8008dc2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	4b15      	ldr	r3, [pc, #84]	; (8008dd4 <xTaskCheckForTimeOut+0xc0>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d007      	beq.n	8008d96 <xTaskCheckForTimeOut+0x82>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	69ba      	ldr	r2, [r7, #24]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d302      	bcc.n	8008d96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d90:	2301      	movs	r3, #1
 8008d92:	61fb      	str	r3, [r7, #28]
 8008d94:	e015      	b.n	8008dc2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	697a      	ldr	r2, [r7, #20]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d20b      	bcs.n	8008db8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	1ad2      	subs	r2, r2, r3
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7ff ff9b 	bl	8008ce8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008db2:	2300      	movs	r3, #0
 8008db4:	61fb      	str	r3, [r7, #28]
 8008db6:	e004      	b.n	8008dc2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008dc2:	f000 fe77 	bl	8009ab4 <vPortExitCritical>

	return xReturn;
 8008dc6:	69fb      	ldr	r3, [r7, #28]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3720      	adds	r7, #32
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	200083f8 	.word	0x200083f8
 8008dd4:	2000840c 	.word	0x2000840c

08008dd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008dd8:	b480      	push	{r7}
 8008dda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ddc:	4b03      	ldr	r3, [pc, #12]	; (8008dec <vTaskMissedYield+0x14>)
 8008dde:	2201      	movs	r2, #1
 8008de0:	601a      	str	r2, [r3, #0]
}
 8008de2:	bf00      	nop
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	20008408 	.word	0x20008408

08008df0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008df8:	f000 f852 	bl	8008ea0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008dfc:	4b06      	ldr	r3, [pc, #24]	; (8008e18 <prvIdleTask+0x28>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d9f9      	bls.n	8008df8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e04:	4b05      	ldr	r3, [pc, #20]	; (8008e1c <prvIdleTask+0x2c>)
 8008e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e14:	e7f0      	b.n	8008df8 <prvIdleTask+0x8>
 8008e16:	bf00      	nop
 8008e18:	20007f24 	.word	0x20007f24
 8008e1c:	e000ed04 	.word	0xe000ed04

08008e20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e26:	2300      	movs	r3, #0
 8008e28:	607b      	str	r3, [r7, #4]
 8008e2a:	e00c      	b.n	8008e46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4413      	add	r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4a12      	ldr	r2, [pc, #72]	; (8008e80 <prvInitialiseTaskLists+0x60>)
 8008e38:	4413      	add	r3, r2
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fe fca4 	bl	8007788 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	3301      	adds	r3, #1
 8008e44:	607b      	str	r3, [r7, #4]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b37      	cmp	r3, #55	; 0x37
 8008e4a:	d9ef      	bls.n	8008e2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e4c:	480d      	ldr	r0, [pc, #52]	; (8008e84 <prvInitialiseTaskLists+0x64>)
 8008e4e:	f7fe fc9b 	bl	8007788 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e52:	480d      	ldr	r0, [pc, #52]	; (8008e88 <prvInitialiseTaskLists+0x68>)
 8008e54:	f7fe fc98 	bl	8007788 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e58:	480c      	ldr	r0, [pc, #48]	; (8008e8c <prvInitialiseTaskLists+0x6c>)
 8008e5a:	f7fe fc95 	bl	8007788 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e5e:	480c      	ldr	r0, [pc, #48]	; (8008e90 <prvInitialiseTaskLists+0x70>)
 8008e60:	f7fe fc92 	bl	8007788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e64:	480b      	ldr	r0, [pc, #44]	; (8008e94 <prvInitialiseTaskLists+0x74>)
 8008e66:	f7fe fc8f 	bl	8007788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e6a:	4b0b      	ldr	r3, [pc, #44]	; (8008e98 <prvInitialiseTaskLists+0x78>)
 8008e6c:	4a05      	ldr	r2, [pc, #20]	; (8008e84 <prvInitialiseTaskLists+0x64>)
 8008e6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e70:	4b0a      	ldr	r3, [pc, #40]	; (8008e9c <prvInitialiseTaskLists+0x7c>)
 8008e72:	4a05      	ldr	r2, [pc, #20]	; (8008e88 <prvInitialiseTaskLists+0x68>)
 8008e74:	601a      	str	r2, [r3, #0]
}
 8008e76:	bf00      	nop
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	20007f24 	.word	0x20007f24
 8008e84:	20008384 	.word	0x20008384
 8008e88:	20008398 	.word	0x20008398
 8008e8c:	200083b4 	.word	0x200083b4
 8008e90:	200083c8 	.word	0x200083c8
 8008e94:	200083e0 	.word	0x200083e0
 8008e98:	200083ac 	.word	0x200083ac
 8008e9c:	200083b0 	.word	0x200083b0

08008ea0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ea6:	e019      	b.n	8008edc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ea8:	f000 fdd4 	bl	8009a54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eac:	4b10      	ldr	r3, [pc, #64]	; (8008ef0 <prvCheckTasksWaitingTermination+0x50>)
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7fe fcef 	bl	800789c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ebe:	4b0d      	ldr	r3, [pc, #52]	; (8008ef4 <prvCheckTasksWaitingTermination+0x54>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	4a0b      	ldr	r2, [pc, #44]	; (8008ef4 <prvCheckTasksWaitingTermination+0x54>)
 8008ec6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ec8:	4b0b      	ldr	r3, [pc, #44]	; (8008ef8 <prvCheckTasksWaitingTermination+0x58>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	4a0a      	ldr	r2, [pc, #40]	; (8008ef8 <prvCheckTasksWaitingTermination+0x58>)
 8008ed0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ed2:	f000 fdef 	bl	8009ab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f810 	bl	8008efc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008edc:	4b06      	ldr	r3, [pc, #24]	; (8008ef8 <prvCheckTasksWaitingTermination+0x58>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1e1      	bne.n	8008ea8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ee4:	bf00      	nop
 8008ee6:	bf00      	nop
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	200083c8 	.word	0x200083c8
 8008ef4:	200083f4 	.word	0x200083f4
 8008ef8:	200083dc 	.word	0x200083dc

08008efc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	3354      	adds	r3, #84	; 0x54
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f00e f873 	bl	8016ff4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d108      	bne.n	8008f2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 ff87 	bl	8009e30 <vPortFree>
				vPortFree( pxTCB );
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 ff84 	bl	8009e30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f28:	e018      	b.n	8008f5c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d103      	bne.n	8008f3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 ff7b 	bl	8009e30 <vPortFree>
	}
 8008f3a:	e00f      	b.n	8008f5c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d00a      	beq.n	8008f5c <prvDeleteTCB+0x60>
	__asm volatile
 8008f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	60fb      	str	r3, [r7, #12]
}
 8008f58:	bf00      	nop
 8008f5a:	e7fe      	b.n	8008f5a <prvDeleteTCB+0x5e>
	}
 8008f5c:	bf00      	nop
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f6a:	4b0c      	ldr	r3, [pc, #48]	; (8008f9c <prvResetNextTaskUnblockTime+0x38>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d104      	bne.n	8008f7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f74:	4b0a      	ldr	r3, [pc, #40]	; (8008fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8008f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f7c:	e008      	b.n	8008f90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f7e:	4b07      	ldr	r3, [pc, #28]	; (8008f9c <prvResetNextTaskUnblockTime+0x38>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	4a04      	ldr	r2, [pc, #16]	; (8008fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8008f8e:	6013      	str	r3, [r2, #0]
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	200083ac 	.word	0x200083ac
 8008fa0:	20008414 	.word	0x20008414

08008fa4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008faa:	4b0b      	ldr	r3, [pc, #44]	; (8008fd8 <xTaskGetSchedulerState+0x34>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d102      	bne.n	8008fb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	607b      	str	r3, [r7, #4]
 8008fb6:	e008      	b.n	8008fca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fb8:	4b08      	ldr	r3, [pc, #32]	; (8008fdc <xTaskGetSchedulerState+0x38>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d102      	bne.n	8008fc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	607b      	str	r3, [r7, #4]
 8008fc4:	e001      	b.n	8008fca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008fca:	687b      	ldr	r3, [r7, #4]
	}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	20008400 	.word	0x20008400
 8008fdc:	2000841c 	.word	0x2000841c

08008fe0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008fec:	2300      	movs	r3, #0
 8008fee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d056      	beq.n	80090a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ff6:	4b2e      	ldr	r3, [pc, #184]	; (80090b0 <xTaskPriorityDisinherit+0xd0>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d00a      	beq.n	8009016 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	60fb      	str	r3, [r7, #12]
}
 8009012:	bf00      	nop
 8009014:	e7fe      	b.n	8009014 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10a      	bne.n	8009034 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	60bb      	str	r3, [r7, #8]
}
 8009030:	bf00      	nop
 8009032:	e7fe      	b.n	8009032 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009038:	1e5a      	subs	r2, r3, #1
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009046:	429a      	cmp	r2, r3
 8009048:	d02c      	beq.n	80090a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800904e:	2b00      	cmp	r3, #0
 8009050:	d128      	bne.n	80090a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	3304      	adds	r3, #4
 8009056:	4618      	mov	r0, r3
 8009058:	f7fe fc20 	bl	800789c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009068:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009074:	4b0f      	ldr	r3, [pc, #60]	; (80090b4 <xTaskPriorityDisinherit+0xd4>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	429a      	cmp	r2, r3
 800907a:	d903      	bls.n	8009084 <xTaskPriorityDisinherit+0xa4>
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009080:	4a0c      	ldr	r2, [pc, #48]	; (80090b4 <xTaskPriorityDisinherit+0xd4>)
 8009082:	6013      	str	r3, [r2, #0]
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009088:	4613      	mov	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	4413      	add	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4a09      	ldr	r2, [pc, #36]	; (80090b8 <xTaskPriorityDisinherit+0xd8>)
 8009092:	441a      	add	r2, r3
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	3304      	adds	r3, #4
 8009098:	4619      	mov	r1, r3
 800909a:	4610      	mov	r0, r2
 800909c:	f7fe fba1 	bl	80077e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80090a0:	2301      	movs	r3, #1
 80090a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090a4:	697b      	ldr	r3, [r7, #20]
	}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20007f20 	.word	0x20007f20
 80090b4:	200083fc 	.word	0x200083fc
 80090b8:	20007f24 	.word	0x20007f24

080090bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090c6:	4b21      	ldr	r3, [pc, #132]	; (800914c <prvAddCurrentTaskToDelayedList+0x90>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090cc:	4b20      	ldr	r3, [pc, #128]	; (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe fbe2 	bl	800789c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090de:	d10a      	bne.n	80090f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d007      	beq.n	80090f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090e6:	4b1a      	ldr	r3, [pc, #104]	; (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3304      	adds	r3, #4
 80090ec:	4619      	mov	r1, r3
 80090ee:	4819      	ldr	r0, [pc, #100]	; (8009154 <prvAddCurrentTaskToDelayedList+0x98>)
 80090f0:	f7fe fb77 	bl	80077e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090f4:	e026      	b.n	8009144 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4413      	add	r3, r2
 80090fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090fe:	4b14      	ldr	r3, [pc, #80]	; (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	429a      	cmp	r2, r3
 800910c:	d209      	bcs.n	8009122 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800910e:	4b12      	ldr	r3, [pc, #72]	; (8009158 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	4b0f      	ldr	r3, [pc, #60]	; (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3304      	adds	r3, #4
 8009118:	4619      	mov	r1, r3
 800911a:	4610      	mov	r0, r2
 800911c:	f7fe fb85 	bl	800782a <vListInsert>
}
 8009120:	e010      	b.n	8009144 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009122:	4b0e      	ldr	r3, [pc, #56]	; (800915c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	4b0a      	ldr	r3, [pc, #40]	; (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3304      	adds	r3, #4
 800912c:	4619      	mov	r1, r3
 800912e:	4610      	mov	r0, r2
 8009130:	f7fe fb7b 	bl	800782a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009134:	4b0a      	ldr	r3, [pc, #40]	; (8009160 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	429a      	cmp	r2, r3
 800913c:	d202      	bcs.n	8009144 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800913e:	4a08      	ldr	r2, [pc, #32]	; (8009160 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	6013      	str	r3, [r2, #0]
}
 8009144:	bf00      	nop
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	200083f8 	.word	0x200083f8
 8009150:	20007f20 	.word	0x20007f20
 8009154:	200083e0 	.word	0x200083e0
 8009158:	200083b0 	.word	0x200083b0
 800915c:	200083ac 	.word	0x200083ac
 8009160:	20008414 	.word	0x20008414

08009164 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b08a      	sub	sp, #40	; 0x28
 8009168:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800916a:	2300      	movs	r3, #0
 800916c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800916e:	f000 fb07 	bl	8009780 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009172:	4b1c      	ldr	r3, [pc, #112]	; (80091e4 <xTimerCreateTimerTask+0x80>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d021      	beq.n	80091be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800917a:	2300      	movs	r3, #0
 800917c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800917e:	2300      	movs	r3, #0
 8009180:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009182:	1d3a      	adds	r2, r7, #4
 8009184:	f107 0108 	add.w	r1, r7, #8
 8009188:	f107 030c 	add.w	r3, r7, #12
 800918c:	4618      	mov	r0, r3
 800918e:	f7fe fae1 	bl	8007754 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009192:	6879      	ldr	r1, [r7, #4]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	9202      	str	r2, [sp, #8]
 800919a:	9301      	str	r3, [sp, #4]
 800919c:	2302      	movs	r3, #2
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	2300      	movs	r3, #0
 80091a2:	460a      	mov	r2, r1
 80091a4:	4910      	ldr	r1, [pc, #64]	; (80091e8 <xTimerCreateTimerTask+0x84>)
 80091a6:	4811      	ldr	r0, [pc, #68]	; (80091ec <xTimerCreateTimerTask+0x88>)
 80091a8:	f7ff f88e 	bl	80082c8 <xTaskCreateStatic>
 80091ac:	4603      	mov	r3, r0
 80091ae:	4a10      	ldr	r2, [pc, #64]	; (80091f0 <xTimerCreateTimerTask+0x8c>)
 80091b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091b2:	4b0f      	ldr	r3, [pc, #60]	; (80091f0 <xTimerCreateTimerTask+0x8c>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80091ba:	2301      	movs	r3, #1
 80091bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10a      	bne.n	80091da <xTimerCreateTimerTask+0x76>
	__asm volatile
 80091c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c8:	f383 8811 	msr	BASEPRI, r3
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	f3bf 8f4f 	dsb	sy
 80091d4:	613b      	str	r3, [r7, #16]
}
 80091d6:	bf00      	nop
 80091d8:	e7fe      	b.n	80091d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80091da:	697b      	ldr	r3, [r7, #20]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3718      	adds	r7, #24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	20008450 	.word	0x20008450
 80091e8:	08017ff8 	.word	0x08017ff8
 80091ec:	08009329 	.word	0x08009329
 80091f0:	20008454 	.word	0x20008454

080091f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08a      	sub	sp, #40	; 0x28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009202:	2300      	movs	r3, #0
 8009204:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10a      	bne.n	8009222 <xTimerGenericCommand+0x2e>
	__asm volatile
 800920c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	623b      	str	r3, [r7, #32]
}
 800921e:	bf00      	nop
 8009220:	e7fe      	b.n	8009220 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009222:	4b1a      	ldr	r3, [pc, #104]	; (800928c <xTimerGenericCommand+0x98>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d02a      	beq.n	8009280 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	2b05      	cmp	r3, #5
 800923a:	dc18      	bgt.n	800926e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800923c:	f7ff feb2 	bl	8008fa4 <xTaskGetSchedulerState>
 8009240:	4603      	mov	r3, r0
 8009242:	2b02      	cmp	r3, #2
 8009244:	d109      	bne.n	800925a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009246:	4b11      	ldr	r3, [pc, #68]	; (800928c <xTimerGenericCommand+0x98>)
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	f107 0110 	add.w	r1, r7, #16
 800924e:	2300      	movs	r3, #0
 8009250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009252:	f7fe fc51 	bl	8007af8 <xQueueGenericSend>
 8009256:	6278      	str	r0, [r7, #36]	; 0x24
 8009258:	e012      	b.n	8009280 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800925a:	4b0c      	ldr	r3, [pc, #48]	; (800928c <xTimerGenericCommand+0x98>)
 800925c:	6818      	ldr	r0, [r3, #0]
 800925e:	f107 0110 	add.w	r1, r7, #16
 8009262:	2300      	movs	r3, #0
 8009264:	2200      	movs	r2, #0
 8009266:	f7fe fc47 	bl	8007af8 <xQueueGenericSend>
 800926a:	6278      	str	r0, [r7, #36]	; 0x24
 800926c:	e008      	b.n	8009280 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800926e:	4b07      	ldr	r3, [pc, #28]	; (800928c <xTimerGenericCommand+0x98>)
 8009270:	6818      	ldr	r0, [r3, #0]
 8009272:	f107 0110 	add.w	r1, r7, #16
 8009276:	2300      	movs	r3, #0
 8009278:	683a      	ldr	r2, [r7, #0]
 800927a:	f7fe fd3b 	bl	8007cf4 <xQueueGenericSendFromISR>
 800927e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009282:	4618      	mov	r0, r3
 8009284:	3728      	adds	r7, #40	; 0x28
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	20008450 	.word	0x20008450

08009290 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b088      	sub	sp, #32
 8009294:	af02      	add	r7, sp, #8
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800929a:	4b22      	ldr	r3, [pc, #136]	; (8009324 <prvProcessExpiredTimer+0x94>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	3304      	adds	r3, #4
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fe faf7 	bl	800789c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092b4:	f003 0304 	and.w	r3, r3, #4
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d022      	beq.n	8009302 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	699a      	ldr	r2, [r3, #24]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	18d1      	adds	r1, r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	6978      	ldr	r0, [r7, #20]
 80092ca:	f000 f8d1 	bl	8009470 <prvInsertTimerInActiveList>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d01f      	beq.n	8009314 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092d4:	2300      	movs	r3, #0
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	2300      	movs	r3, #0
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	2100      	movs	r1, #0
 80092de:	6978      	ldr	r0, [r7, #20]
 80092e0:	f7ff ff88 	bl	80091f4 <xTimerGenericCommand>
 80092e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d113      	bne.n	8009314 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80092ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f0:	f383 8811 	msr	BASEPRI, r3
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	60fb      	str	r3, [r7, #12]
}
 80092fe:	bf00      	nop
 8009300:	e7fe      	b.n	8009300 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009308:	f023 0301 	bic.w	r3, r3, #1
 800930c:	b2da      	uxtb	r2, r3
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	6a1b      	ldr	r3, [r3, #32]
 8009318:	6978      	ldr	r0, [r7, #20]
 800931a:	4798      	blx	r3
}
 800931c:	bf00      	nop
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	20008448 	.word	0x20008448

08009328 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009330:	f107 0308 	add.w	r3, r7, #8
 8009334:	4618      	mov	r0, r3
 8009336:	f000 f857 	bl	80093e8 <prvGetNextExpireTime>
 800933a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	4619      	mov	r1, r3
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f000 f803 	bl	800934c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009346:	f000 f8d5 	bl	80094f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800934a:	e7f1      	b.n	8009330 <prvTimerTask+0x8>

0800934c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009356:	f7ff fa13 	bl	8008780 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800935a:	f107 0308 	add.w	r3, r7, #8
 800935e:	4618      	mov	r0, r3
 8009360:	f000 f866 	bl	8009430 <prvSampleTimeNow>
 8009364:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d130      	bne.n	80093ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10a      	bne.n	8009388 <prvProcessTimerOrBlockTask+0x3c>
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	429a      	cmp	r2, r3
 8009378:	d806      	bhi.n	8009388 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800937a:	f7ff fa0f 	bl	800879c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800937e:	68f9      	ldr	r1, [r7, #12]
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f7ff ff85 	bl	8009290 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009386:	e024      	b.n	80093d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d008      	beq.n	80093a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800938e:	4b13      	ldr	r3, [pc, #76]	; (80093dc <prvProcessTimerOrBlockTask+0x90>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d101      	bne.n	800939c <prvProcessTimerOrBlockTask+0x50>
 8009398:	2301      	movs	r3, #1
 800939a:	e000      	b.n	800939e <prvProcessTimerOrBlockTask+0x52>
 800939c:	2300      	movs	r3, #0
 800939e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80093a0:	4b0f      	ldr	r3, [pc, #60]	; (80093e0 <prvProcessTimerOrBlockTask+0x94>)
 80093a2:	6818      	ldr	r0, [r3, #0]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	4619      	mov	r1, r3
 80093ae:	f7fe ff57 	bl	8008260 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80093b2:	f7ff f9f3 	bl	800879c <xTaskResumeAll>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10a      	bne.n	80093d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80093bc:	4b09      	ldr	r3, [pc, #36]	; (80093e4 <prvProcessTimerOrBlockTask+0x98>)
 80093be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093c2:	601a      	str	r2, [r3, #0]
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	f3bf 8f6f 	isb	sy
}
 80093cc:	e001      	b.n	80093d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80093ce:	f7ff f9e5 	bl	800879c <xTaskResumeAll>
}
 80093d2:	bf00      	nop
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	2000844c 	.word	0x2000844c
 80093e0:	20008450 	.word	0x20008450
 80093e4:	e000ed04 	.word	0xe000ed04

080093e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80093f0:	4b0e      	ldr	r3, [pc, #56]	; (800942c <prvGetNextExpireTime+0x44>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <prvGetNextExpireTime+0x16>
 80093fa:	2201      	movs	r2, #1
 80093fc:	e000      	b.n	8009400 <prvGetNextExpireTime+0x18>
 80093fe:	2200      	movs	r2, #0
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d105      	bne.n	8009418 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800940c:	4b07      	ldr	r3, [pc, #28]	; (800942c <prvGetNextExpireTime+0x44>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	60fb      	str	r3, [r7, #12]
 8009416:	e001      	b.n	800941c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009418:	2300      	movs	r3, #0
 800941a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800941c:	68fb      	ldr	r3, [r7, #12]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	20008448 	.word	0x20008448

08009430 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009438:	f7ff fa4e 	bl	80088d8 <xTaskGetTickCount>
 800943c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800943e:	4b0b      	ldr	r3, [pc, #44]	; (800946c <prvSampleTimeNow+0x3c>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	429a      	cmp	r2, r3
 8009446:	d205      	bcs.n	8009454 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009448:	f000 f936 	bl	80096b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	601a      	str	r2, [r3, #0]
 8009452:	e002      	b.n	800945a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800945a:	4a04      	ldr	r2, [pc, #16]	; (800946c <prvSampleTimeNow+0x3c>)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009460:	68fb      	ldr	r3, [r7, #12]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	20008458 	.word	0x20008458

08009470 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
 800947c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800947e:	2300      	movs	r3, #0
 8009480:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	429a      	cmp	r2, r3
 8009494:	d812      	bhi.n	80094bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	1ad2      	subs	r2, r2, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d302      	bcc.n	80094aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80094a4:	2301      	movs	r3, #1
 80094a6:	617b      	str	r3, [r7, #20]
 80094a8:	e01b      	b.n	80094e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80094aa:	4b10      	ldr	r3, [pc, #64]	; (80094ec <prvInsertTimerInActiveList+0x7c>)
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3304      	adds	r3, #4
 80094b2:	4619      	mov	r1, r3
 80094b4:	4610      	mov	r0, r2
 80094b6:	f7fe f9b8 	bl	800782a <vListInsert>
 80094ba:	e012      	b.n	80094e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d206      	bcs.n	80094d2 <prvInsertTimerInActiveList+0x62>
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d302      	bcc.n	80094d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80094cc:	2301      	movs	r3, #1
 80094ce:	617b      	str	r3, [r7, #20]
 80094d0:	e007      	b.n	80094e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094d2:	4b07      	ldr	r3, [pc, #28]	; (80094f0 <prvInsertTimerInActiveList+0x80>)
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	3304      	adds	r3, #4
 80094da:	4619      	mov	r1, r3
 80094dc:	4610      	mov	r0, r2
 80094de:	f7fe f9a4 	bl	800782a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80094e2:	697b      	ldr	r3, [r7, #20]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	2000844c 	.word	0x2000844c
 80094f0:	20008448 	.word	0x20008448

080094f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b08e      	sub	sp, #56	; 0x38
 80094f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094fa:	e0ca      	b.n	8009692 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	da18      	bge.n	8009534 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009502:	1d3b      	adds	r3, r7, #4
 8009504:	3304      	adds	r3, #4
 8009506:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10a      	bne.n	8009524 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	61fb      	str	r3, [r7, #28]
}
 8009520:	bf00      	nop
 8009522:	e7fe      	b.n	8009522 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800952a:	6850      	ldr	r0, [r2, #4]
 800952c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800952e:	6892      	ldr	r2, [r2, #8]
 8009530:	4611      	mov	r1, r2
 8009532:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	f2c0 80ab 	blt.w	8009692 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d004      	beq.n	8009552 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954a:	3304      	adds	r3, #4
 800954c:	4618      	mov	r0, r3
 800954e:	f7fe f9a5 	bl	800789c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009552:	463b      	mov	r3, r7
 8009554:	4618      	mov	r0, r3
 8009556:	f7ff ff6b 	bl	8009430 <prvSampleTimeNow>
 800955a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b09      	cmp	r3, #9
 8009560:	f200 8096 	bhi.w	8009690 <prvProcessReceivedCommands+0x19c>
 8009564:	a201      	add	r2, pc, #4	; (adr r2, 800956c <prvProcessReceivedCommands+0x78>)
 8009566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956a:	bf00      	nop
 800956c:	08009595 	.word	0x08009595
 8009570:	08009595 	.word	0x08009595
 8009574:	08009595 	.word	0x08009595
 8009578:	08009609 	.word	0x08009609
 800957c:	0800961d 	.word	0x0800961d
 8009580:	08009667 	.word	0x08009667
 8009584:	08009595 	.word	0x08009595
 8009588:	08009595 	.word	0x08009595
 800958c:	08009609 	.word	0x08009609
 8009590:	0800961d 	.word	0x0800961d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800959a:	f043 0301 	orr.w	r3, r3, #1
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	18d1      	adds	r1, r2, r3
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095b4:	f7ff ff5c 	bl	8009470 <prvInsertTimerInActiveList>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d069      	beq.n	8009692 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c0:	6a1b      	ldr	r3, [r3, #32]
 80095c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095cc:	f003 0304 	and.w	r3, r3, #4
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d05e      	beq.n	8009692 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	441a      	add	r2, r3
 80095dc:	2300      	movs	r3, #0
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	2300      	movs	r3, #0
 80095e2:	2100      	movs	r1, #0
 80095e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095e6:	f7ff fe05 	bl	80091f4 <xTimerGenericCommand>
 80095ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d14f      	bne.n	8009692 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80095f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	61bb      	str	r3, [r7, #24]
}
 8009604:	bf00      	nop
 8009606:	e7fe      	b.n	8009606 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800960e:	f023 0301 	bic.w	r3, r3, #1
 8009612:	b2da      	uxtb	r2, r3
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800961a:	e03a      	b.n	8009692 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009622:	f043 0301 	orr.w	r3, r3, #1
 8009626:	b2da      	uxtb	r2, r3
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009632:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10a      	bne.n	8009652 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	617b      	str	r3, [r7, #20]
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009654:	699a      	ldr	r2, [r3, #24]
 8009656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009658:	18d1      	adds	r1, r2, r3
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800965e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009660:	f7ff ff06 	bl	8009470 <prvInsertTimerInActiveList>
					break;
 8009664:	e015      	b.n	8009692 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800966c:	f003 0302 	and.w	r3, r3, #2
 8009670:	2b00      	cmp	r3, #0
 8009672:	d103      	bne.n	800967c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009676:	f000 fbdb 	bl	8009e30 <vPortFree>
 800967a:	e00a      	b.n	8009692 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009682:	f023 0301 	bic.w	r3, r3, #1
 8009686:	b2da      	uxtb	r2, r3
 8009688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800968e:	e000      	b.n	8009692 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009690:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009692:	4b08      	ldr	r3, [pc, #32]	; (80096b4 <prvProcessReceivedCommands+0x1c0>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	1d39      	adds	r1, r7, #4
 8009698:	2200      	movs	r2, #0
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe fbc6 	bl	8007e2c <xQueueReceive>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f47f af2a 	bne.w	80094fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80096a8:	bf00      	nop
 80096aa:	bf00      	nop
 80096ac:	3730      	adds	r7, #48	; 0x30
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	20008450 	.word	0x20008450

080096b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b088      	sub	sp, #32
 80096bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096be:	e048      	b.n	8009752 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096c0:	4b2d      	ldr	r3, [pc, #180]	; (8009778 <prvSwitchTimerLists+0xc0>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096ca:	4b2b      	ldr	r3, [pc, #172]	; (8009778 <prvSwitchTimerLists+0xc0>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	3304      	adds	r3, #4
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fe f8df 	bl	800789c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6a1b      	ldr	r3, [r3, #32]
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096ec:	f003 0304 	and.w	r3, r3, #4
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d02e      	beq.n	8009752 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	693a      	ldr	r2, [r7, #16]
 80096fa:	4413      	add	r3, r2
 80096fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	429a      	cmp	r2, r3
 8009704:	d90e      	bls.n	8009724 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009712:	4b19      	ldr	r3, [pc, #100]	; (8009778 <prvSwitchTimerLists+0xc0>)
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	3304      	adds	r3, #4
 800971a:	4619      	mov	r1, r3
 800971c:	4610      	mov	r0, r2
 800971e:	f7fe f884 	bl	800782a <vListInsert>
 8009722:	e016      	b.n	8009752 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009724:	2300      	movs	r3, #0
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	2300      	movs	r3, #0
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	2100      	movs	r1, #0
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f7ff fd60 	bl	80091f4 <xTimerGenericCommand>
 8009734:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10a      	bne.n	8009752 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	603b      	str	r3, [r7, #0]
}
 800974e:	bf00      	nop
 8009750:	e7fe      	b.n	8009750 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009752:	4b09      	ldr	r3, [pc, #36]	; (8009778 <prvSwitchTimerLists+0xc0>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1b1      	bne.n	80096c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800975c:	4b06      	ldr	r3, [pc, #24]	; (8009778 <prvSwitchTimerLists+0xc0>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009762:	4b06      	ldr	r3, [pc, #24]	; (800977c <prvSwitchTimerLists+0xc4>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a04      	ldr	r2, [pc, #16]	; (8009778 <prvSwitchTimerLists+0xc0>)
 8009768:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800976a:	4a04      	ldr	r2, [pc, #16]	; (800977c <prvSwitchTimerLists+0xc4>)
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	6013      	str	r3, [r2, #0]
}
 8009770:	bf00      	nop
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	20008448 	.word	0x20008448
 800977c:	2000844c 	.word	0x2000844c

08009780 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009786:	f000 f965 	bl	8009a54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800978a:	4b15      	ldr	r3, [pc, #84]	; (80097e0 <prvCheckForValidListAndQueue+0x60>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d120      	bne.n	80097d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009792:	4814      	ldr	r0, [pc, #80]	; (80097e4 <prvCheckForValidListAndQueue+0x64>)
 8009794:	f7fd fff8 	bl	8007788 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009798:	4813      	ldr	r0, [pc, #76]	; (80097e8 <prvCheckForValidListAndQueue+0x68>)
 800979a:	f7fd fff5 	bl	8007788 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800979e:	4b13      	ldr	r3, [pc, #76]	; (80097ec <prvCheckForValidListAndQueue+0x6c>)
 80097a0:	4a10      	ldr	r2, [pc, #64]	; (80097e4 <prvCheckForValidListAndQueue+0x64>)
 80097a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80097a4:	4b12      	ldr	r3, [pc, #72]	; (80097f0 <prvCheckForValidListAndQueue+0x70>)
 80097a6:	4a10      	ldr	r2, [pc, #64]	; (80097e8 <prvCheckForValidListAndQueue+0x68>)
 80097a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80097aa:	2300      	movs	r3, #0
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	4b11      	ldr	r3, [pc, #68]	; (80097f4 <prvCheckForValidListAndQueue+0x74>)
 80097b0:	4a11      	ldr	r2, [pc, #68]	; (80097f8 <prvCheckForValidListAndQueue+0x78>)
 80097b2:	2110      	movs	r1, #16
 80097b4:	200a      	movs	r0, #10
 80097b6:	f7fe f903 	bl	80079c0 <xQueueGenericCreateStatic>
 80097ba:	4603      	mov	r3, r0
 80097bc:	4a08      	ldr	r2, [pc, #32]	; (80097e0 <prvCheckForValidListAndQueue+0x60>)
 80097be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80097c0:	4b07      	ldr	r3, [pc, #28]	; (80097e0 <prvCheckForValidListAndQueue+0x60>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d005      	beq.n	80097d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80097c8:	4b05      	ldr	r3, [pc, #20]	; (80097e0 <prvCheckForValidListAndQueue+0x60>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	490b      	ldr	r1, [pc, #44]	; (80097fc <prvCheckForValidListAndQueue+0x7c>)
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fe fd1c 	bl	800820c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097d4:	f000 f96e 	bl	8009ab4 <vPortExitCritical>
}
 80097d8:	bf00      	nop
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20008450 	.word	0x20008450
 80097e4:	20008420 	.word	0x20008420
 80097e8:	20008434 	.word	0x20008434
 80097ec:	20008448 	.word	0x20008448
 80097f0:	2000844c 	.word	0x2000844c
 80097f4:	200084fc 	.word	0x200084fc
 80097f8:	2000845c 	.word	0x2000845c
 80097fc:	08018000 	.word	0x08018000

08009800 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	3b04      	subs	r3, #4
 8009810:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	3b04      	subs	r3, #4
 800981e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	f023 0201 	bic.w	r2, r3, #1
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3b04      	subs	r3, #4
 800982e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009830:	4a0c      	ldr	r2, [pc, #48]	; (8009864 <pxPortInitialiseStack+0x64>)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	3b14      	subs	r3, #20
 800983a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	3b04      	subs	r3, #4
 8009846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f06f 0202 	mvn.w	r2, #2
 800984e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	3b20      	subs	r3, #32
 8009854:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009856:	68fb      	ldr	r3, [r7, #12]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3714      	adds	r7, #20
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	08009869 	.word	0x08009869

08009868 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800986e:	2300      	movs	r3, #0
 8009870:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009872:	4b12      	ldr	r3, [pc, #72]	; (80098bc <prvTaskExitError+0x54>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800987a:	d00a      	beq.n	8009892 <prvTaskExitError+0x2a>
	__asm volatile
 800987c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009880:	f383 8811 	msr	BASEPRI, r3
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	60fb      	str	r3, [r7, #12]
}
 800988e:	bf00      	nop
 8009890:	e7fe      	b.n	8009890 <prvTaskExitError+0x28>
	__asm volatile
 8009892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009896:	f383 8811 	msr	BASEPRI, r3
 800989a:	f3bf 8f6f 	isb	sy
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	60bb      	str	r3, [r7, #8]
}
 80098a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80098a6:	bf00      	nop
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d0fc      	beq.n	80098a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80098ae:	bf00      	nop
 80098b0:	bf00      	nop
 80098b2:	3714      	adds	r7, #20
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr
 80098bc:	20000010 	.word	0x20000010

080098c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80098c0:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <pxCurrentTCBConst2>)
 80098c2:	6819      	ldr	r1, [r3, #0]
 80098c4:	6808      	ldr	r0, [r1, #0]
 80098c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ca:	f380 8809 	msr	PSP, r0
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f04f 0000 	mov.w	r0, #0
 80098d6:	f380 8811 	msr	BASEPRI, r0
 80098da:	4770      	bx	lr
 80098dc:	f3af 8000 	nop.w

080098e0 <pxCurrentTCBConst2>:
 80098e0:	20007f20 	.word	0x20007f20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80098e4:	bf00      	nop
 80098e6:	bf00      	nop

080098e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80098e8:	4808      	ldr	r0, [pc, #32]	; (800990c <prvPortStartFirstTask+0x24>)
 80098ea:	6800      	ldr	r0, [r0, #0]
 80098ec:	6800      	ldr	r0, [r0, #0]
 80098ee:	f380 8808 	msr	MSP, r0
 80098f2:	f04f 0000 	mov.w	r0, #0
 80098f6:	f380 8814 	msr	CONTROL, r0
 80098fa:	b662      	cpsie	i
 80098fc:	b661      	cpsie	f
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	df00      	svc	0
 8009908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800990a:	bf00      	nop
 800990c:	e000ed08 	.word	0xe000ed08

08009910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b086      	sub	sp, #24
 8009914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009916:	4b46      	ldr	r3, [pc, #280]	; (8009a30 <xPortStartScheduler+0x120>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a46      	ldr	r2, [pc, #280]	; (8009a34 <xPortStartScheduler+0x124>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d10a      	bne.n	8009936 <xPortStartScheduler+0x26>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	613b      	str	r3, [r7, #16]
}
 8009932:	bf00      	nop
 8009934:	e7fe      	b.n	8009934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009936:	4b3e      	ldr	r3, [pc, #248]	; (8009a30 <xPortStartScheduler+0x120>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a3f      	ldr	r2, [pc, #252]	; (8009a38 <xPortStartScheduler+0x128>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d10a      	bne.n	8009956 <xPortStartScheduler+0x46>
	__asm volatile
 8009940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	60fb      	str	r3, [r7, #12]
}
 8009952:	bf00      	nop
 8009954:	e7fe      	b.n	8009954 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009956:	4b39      	ldr	r3, [pc, #228]	; (8009a3c <xPortStartScheduler+0x12c>)
 8009958:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	b2db      	uxtb	r3, r3
 8009960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	22ff      	movs	r2, #255	; 0xff
 8009966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	b2db      	uxtb	r3, r3
 800996e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009970:	78fb      	ldrb	r3, [r7, #3]
 8009972:	b2db      	uxtb	r3, r3
 8009974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009978:	b2da      	uxtb	r2, r3
 800997a:	4b31      	ldr	r3, [pc, #196]	; (8009a40 <xPortStartScheduler+0x130>)
 800997c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800997e:	4b31      	ldr	r3, [pc, #196]	; (8009a44 <xPortStartScheduler+0x134>)
 8009980:	2207      	movs	r2, #7
 8009982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009984:	e009      	b.n	800999a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009986:	4b2f      	ldr	r3, [pc, #188]	; (8009a44 <xPortStartScheduler+0x134>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	3b01      	subs	r3, #1
 800998c:	4a2d      	ldr	r2, [pc, #180]	; (8009a44 <xPortStartScheduler+0x134>)
 800998e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	b2db      	uxtb	r3, r3
 8009994:	005b      	lsls	r3, r3, #1
 8009996:	b2db      	uxtb	r3, r3
 8009998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800999a:	78fb      	ldrb	r3, [r7, #3]
 800999c:	b2db      	uxtb	r3, r3
 800999e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099a2:	2b80      	cmp	r3, #128	; 0x80
 80099a4:	d0ef      	beq.n	8009986 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099a6:	4b27      	ldr	r3, [pc, #156]	; (8009a44 <xPortStartScheduler+0x134>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f1c3 0307 	rsb	r3, r3, #7
 80099ae:	2b04      	cmp	r3, #4
 80099b0:	d00a      	beq.n	80099c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	60bb      	str	r3, [r7, #8]
}
 80099c4:	bf00      	nop
 80099c6:	e7fe      	b.n	80099c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099c8:	4b1e      	ldr	r3, [pc, #120]	; (8009a44 <xPortStartScheduler+0x134>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	021b      	lsls	r3, r3, #8
 80099ce:	4a1d      	ldr	r2, [pc, #116]	; (8009a44 <xPortStartScheduler+0x134>)
 80099d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099d2:	4b1c      	ldr	r3, [pc, #112]	; (8009a44 <xPortStartScheduler+0x134>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099da:	4a1a      	ldr	r2, [pc, #104]	; (8009a44 <xPortStartScheduler+0x134>)
 80099dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80099e6:	4b18      	ldr	r3, [pc, #96]	; (8009a48 <xPortStartScheduler+0x138>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a17      	ldr	r2, [pc, #92]	; (8009a48 <xPortStartScheduler+0x138>)
 80099ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80099f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80099f2:	4b15      	ldr	r3, [pc, #84]	; (8009a48 <xPortStartScheduler+0x138>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a14      	ldr	r2, [pc, #80]	; (8009a48 <xPortStartScheduler+0x138>)
 80099f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80099fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80099fe:	f000 f8dd 	bl	8009bbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a02:	4b12      	ldr	r3, [pc, #72]	; (8009a4c <xPortStartScheduler+0x13c>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a08:	f000 f8fc 	bl	8009c04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a0c:	4b10      	ldr	r3, [pc, #64]	; (8009a50 <xPortStartScheduler+0x140>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a0f      	ldr	r2, [pc, #60]	; (8009a50 <xPortStartScheduler+0x140>)
 8009a12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009a16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a18:	f7ff ff66 	bl	80098e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a1c:	f7ff f826 	bl	8008a6c <vTaskSwitchContext>
	prvTaskExitError();
 8009a20:	f7ff ff22 	bl	8009868 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3718      	adds	r7, #24
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	e000ed00 	.word	0xe000ed00
 8009a34:	410fc271 	.word	0x410fc271
 8009a38:	410fc270 	.word	0x410fc270
 8009a3c:	e000e400 	.word	0xe000e400
 8009a40:	2000854c 	.word	0x2000854c
 8009a44:	20008550 	.word	0x20008550
 8009a48:	e000ed20 	.word	0xe000ed20
 8009a4c:	20000010 	.word	0x20000010
 8009a50:	e000ef34 	.word	0xe000ef34

08009a54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
	__asm volatile
 8009a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5e:	f383 8811 	msr	BASEPRI, r3
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	607b      	str	r3, [r7, #4]
}
 8009a6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a6e:	4b0f      	ldr	r3, [pc, #60]	; (8009aac <vPortEnterCritical+0x58>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	3301      	adds	r3, #1
 8009a74:	4a0d      	ldr	r2, [pc, #52]	; (8009aac <vPortEnterCritical+0x58>)
 8009a76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a78:	4b0c      	ldr	r3, [pc, #48]	; (8009aac <vPortEnterCritical+0x58>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d10f      	bne.n	8009aa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a80:	4b0b      	ldr	r3, [pc, #44]	; (8009ab0 <vPortEnterCritical+0x5c>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00a      	beq.n	8009aa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8e:	f383 8811 	msr	BASEPRI, r3
 8009a92:	f3bf 8f6f 	isb	sy
 8009a96:	f3bf 8f4f 	dsb	sy
 8009a9a:	603b      	str	r3, [r7, #0]
}
 8009a9c:	bf00      	nop
 8009a9e:	e7fe      	b.n	8009a9e <vPortEnterCritical+0x4a>
	}
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	20000010 	.word	0x20000010
 8009ab0:	e000ed04 	.word	0xe000ed04

08009ab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009aba:	4b12      	ldr	r3, [pc, #72]	; (8009b04 <vPortExitCritical+0x50>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10a      	bne.n	8009ad8 <vPortExitCritical+0x24>
	__asm volatile
 8009ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac6:	f383 8811 	msr	BASEPRI, r3
 8009aca:	f3bf 8f6f 	isb	sy
 8009ace:	f3bf 8f4f 	dsb	sy
 8009ad2:	607b      	str	r3, [r7, #4]
}
 8009ad4:	bf00      	nop
 8009ad6:	e7fe      	b.n	8009ad6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ad8:	4b0a      	ldr	r3, [pc, #40]	; (8009b04 <vPortExitCritical+0x50>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	3b01      	subs	r3, #1
 8009ade:	4a09      	ldr	r2, [pc, #36]	; (8009b04 <vPortExitCritical+0x50>)
 8009ae0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ae2:	4b08      	ldr	r3, [pc, #32]	; (8009b04 <vPortExitCritical+0x50>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d105      	bne.n	8009af6 <vPortExitCritical+0x42>
 8009aea:	2300      	movs	r3, #0
 8009aec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	f383 8811 	msr	BASEPRI, r3
}
 8009af4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009af6:	bf00      	nop
 8009af8:	370c      	adds	r7, #12
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	20000010 	.word	0x20000010
	...

08009b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b10:	f3ef 8009 	mrs	r0, PSP
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	4b15      	ldr	r3, [pc, #84]	; (8009b70 <pxCurrentTCBConst>)
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	f01e 0f10 	tst.w	lr, #16
 8009b20:	bf08      	it	eq
 8009b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2a:	6010      	str	r0, [r2, #0]
 8009b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b34:	f380 8811 	msr	BASEPRI, r0
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	f7fe ff94 	bl	8008a6c <vTaskSwitchContext>
 8009b44:	f04f 0000 	mov.w	r0, #0
 8009b48:	f380 8811 	msr	BASEPRI, r0
 8009b4c:	bc09      	pop	{r0, r3}
 8009b4e:	6819      	ldr	r1, [r3, #0]
 8009b50:	6808      	ldr	r0, [r1, #0]
 8009b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b56:	f01e 0f10 	tst.w	lr, #16
 8009b5a:	bf08      	it	eq
 8009b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b60:	f380 8809 	msr	PSP, r0
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	f3af 8000 	nop.w

08009b70 <pxCurrentTCBConst>:
 8009b70:	20007f20 	.word	0x20007f20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b74:	bf00      	nop
 8009b76:	bf00      	nop

08009b78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	607b      	str	r3, [r7, #4]
}
 8009b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b92:	f7fe feb1 	bl	80088f8 <xTaskIncrementTick>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d003      	beq.n	8009ba4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b9c:	4b06      	ldr	r3, [pc, #24]	; (8009bb8 <xPortSysTickHandler+0x40>)
 8009b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ba2:	601a      	str	r2, [r3, #0]
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	f383 8811 	msr	BASEPRI, r3
}
 8009bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009bb0:	bf00      	nop
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	e000ed04 	.word	0xe000ed04

08009bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009bc0:	4b0b      	ldr	r3, [pc, #44]	; (8009bf0 <vPortSetupTimerInterrupt+0x34>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009bc6:	4b0b      	ldr	r3, [pc, #44]	; (8009bf4 <vPortSetupTimerInterrupt+0x38>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009bcc:	4b0a      	ldr	r3, [pc, #40]	; (8009bf8 <vPortSetupTimerInterrupt+0x3c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a0a      	ldr	r2, [pc, #40]	; (8009bfc <vPortSetupTimerInterrupt+0x40>)
 8009bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd6:	099b      	lsrs	r3, r3, #6
 8009bd8:	4a09      	ldr	r2, [pc, #36]	; (8009c00 <vPortSetupTimerInterrupt+0x44>)
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009bde:	4b04      	ldr	r3, [pc, #16]	; (8009bf0 <vPortSetupTimerInterrupt+0x34>)
 8009be0:	2207      	movs	r2, #7
 8009be2:	601a      	str	r2, [r3, #0]
}
 8009be4:	bf00      	nop
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	e000e010 	.word	0xe000e010
 8009bf4:	e000e018 	.word	0xe000e018
 8009bf8:	20000004 	.word	0x20000004
 8009bfc:	10624dd3 	.word	0x10624dd3
 8009c00:	e000e014 	.word	0xe000e014

08009c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009c14 <vPortEnableVFP+0x10>
 8009c08:	6801      	ldr	r1, [r0, #0]
 8009c0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009c0e:	6001      	str	r1, [r0, #0]
 8009c10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c12:	bf00      	nop
 8009c14:	e000ed88 	.word	0xe000ed88

08009c18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c1e:	f3ef 8305 	mrs	r3, IPSR
 8009c22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2b0f      	cmp	r3, #15
 8009c28:	d914      	bls.n	8009c54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c2a:	4a17      	ldr	r2, [pc, #92]	; (8009c88 <vPortValidateInterruptPriority+0x70>)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	4413      	add	r3, r2
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c34:	4b15      	ldr	r3, [pc, #84]	; (8009c8c <vPortValidateInterruptPriority+0x74>)
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	7afa      	ldrb	r2, [r7, #11]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d20a      	bcs.n	8009c54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	607b      	str	r3, [r7, #4]
}
 8009c50:	bf00      	nop
 8009c52:	e7fe      	b.n	8009c52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c54:	4b0e      	ldr	r3, [pc, #56]	; (8009c90 <vPortValidateInterruptPriority+0x78>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c5c:	4b0d      	ldr	r3, [pc, #52]	; (8009c94 <vPortValidateInterruptPriority+0x7c>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d90a      	bls.n	8009c7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	603b      	str	r3, [r7, #0]
}
 8009c76:	bf00      	nop
 8009c78:	e7fe      	b.n	8009c78 <vPortValidateInterruptPriority+0x60>
	}
 8009c7a:	bf00      	nop
 8009c7c:	3714      	adds	r7, #20
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	e000e3f0 	.word	0xe000e3f0
 8009c8c:	2000854c 	.word	0x2000854c
 8009c90:	e000ed0c 	.word	0xe000ed0c
 8009c94:	20008550 	.word	0x20008550

08009c98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b08a      	sub	sp, #40	; 0x28
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ca4:	f7fe fd6c 	bl	8008780 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ca8:	4b5b      	ldr	r3, [pc, #364]	; (8009e18 <pvPortMalloc+0x180>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d101      	bne.n	8009cb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009cb0:	f000 f920 	bl	8009ef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009cb4:	4b59      	ldr	r3, [pc, #356]	; (8009e1c <pvPortMalloc+0x184>)
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4013      	ands	r3, r2
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f040 8093 	bne.w	8009de8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d01d      	beq.n	8009d04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009cc8:	2208      	movs	r2, #8
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4413      	add	r3, r2
 8009cce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f003 0307 	and.w	r3, r3, #7
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d014      	beq.n	8009d04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f023 0307 	bic.w	r3, r3, #7
 8009ce0:	3308      	adds	r3, #8
 8009ce2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f003 0307 	and.w	r3, r3, #7
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00a      	beq.n	8009d04 <pvPortMalloc+0x6c>
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	617b      	str	r3, [r7, #20]
}
 8009d00:	bf00      	nop
 8009d02:	e7fe      	b.n	8009d02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d06e      	beq.n	8009de8 <pvPortMalloc+0x150>
 8009d0a:	4b45      	ldr	r3, [pc, #276]	; (8009e20 <pvPortMalloc+0x188>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d869      	bhi.n	8009de8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d14:	4b43      	ldr	r3, [pc, #268]	; (8009e24 <pvPortMalloc+0x18c>)
 8009d16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d18:	4b42      	ldr	r3, [pc, #264]	; (8009e24 <pvPortMalloc+0x18c>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d1e:	e004      	b.n	8009d2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d903      	bls.n	8009d3c <pvPortMalloc+0xa4>
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1f1      	bne.n	8009d20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d3c:	4b36      	ldr	r3, [pc, #216]	; (8009e18 <pvPortMalloc+0x180>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d050      	beq.n	8009de8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d46:	6a3b      	ldr	r3, [r7, #32]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2208      	movs	r2, #8
 8009d4c:	4413      	add	r3, r2
 8009d4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	6a3b      	ldr	r3, [r7, #32]
 8009d56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5a:	685a      	ldr	r2, [r3, #4]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	1ad2      	subs	r2, r2, r3
 8009d60:	2308      	movs	r3, #8
 8009d62:	005b      	lsls	r3, r3, #1
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d91f      	bls.n	8009da8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	f003 0307 	and.w	r3, r3, #7
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00a      	beq.n	8009d90 <pvPortMalloc+0xf8>
	__asm volatile
 8009d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7e:	f383 8811 	msr	BASEPRI, r3
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	f3bf 8f4f 	dsb	sy
 8009d8a:	613b      	str	r3, [r7, #16]
}
 8009d8c:	bf00      	nop
 8009d8e:	e7fe      	b.n	8009d8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	685a      	ldr	r2, [r3, #4]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	1ad2      	subs	r2, r2, r3
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009da2:	69b8      	ldr	r0, [r7, #24]
 8009da4:	f000 f908 	bl	8009fb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009da8:	4b1d      	ldr	r3, [pc, #116]	; (8009e20 <pvPortMalloc+0x188>)
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	4a1b      	ldr	r2, [pc, #108]	; (8009e20 <pvPortMalloc+0x188>)
 8009db4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009db6:	4b1a      	ldr	r3, [pc, #104]	; (8009e20 <pvPortMalloc+0x188>)
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	4b1b      	ldr	r3, [pc, #108]	; (8009e28 <pvPortMalloc+0x190>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d203      	bcs.n	8009dca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009dc2:	4b17      	ldr	r3, [pc, #92]	; (8009e20 <pvPortMalloc+0x188>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a18      	ldr	r2, [pc, #96]	; (8009e28 <pvPortMalloc+0x190>)
 8009dc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	4b13      	ldr	r3, [pc, #76]	; (8009e1c <pvPortMalloc+0x184>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	431a      	orrs	r2, r3
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dda:	2200      	movs	r2, #0
 8009ddc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009dde:	4b13      	ldr	r3, [pc, #76]	; (8009e2c <pvPortMalloc+0x194>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	3301      	adds	r3, #1
 8009de4:	4a11      	ldr	r2, [pc, #68]	; (8009e2c <pvPortMalloc+0x194>)
 8009de6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009de8:	f7fe fcd8 	bl	800879c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	f003 0307 	and.w	r3, r3, #7
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d00a      	beq.n	8009e0c <pvPortMalloc+0x174>
	__asm volatile
 8009df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfa:	f383 8811 	msr	BASEPRI, r3
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f3bf 8f4f 	dsb	sy
 8009e06:	60fb      	str	r3, [r7, #12]
}
 8009e08:	bf00      	nop
 8009e0a:	e7fe      	b.n	8009e0a <pvPortMalloc+0x172>
	return pvReturn;
 8009e0c:	69fb      	ldr	r3, [r7, #28]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3728      	adds	r7, #40	; 0x28
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	2000c15c 	.word	0x2000c15c
 8009e1c:	2000c170 	.word	0x2000c170
 8009e20:	2000c160 	.word	0x2000c160
 8009e24:	2000c154 	.word	0x2000c154
 8009e28:	2000c164 	.word	0x2000c164
 8009e2c:	2000c168 	.word	0x2000c168

08009e30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d04d      	beq.n	8009ede <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e42:	2308      	movs	r3, #8
 8009e44:	425b      	negs	r3, r3
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	4413      	add	r3, r2
 8009e4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	685a      	ldr	r2, [r3, #4]
 8009e54:	4b24      	ldr	r3, [pc, #144]	; (8009ee8 <vPortFree+0xb8>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4013      	ands	r3, r2
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10a      	bne.n	8009e74 <vPortFree+0x44>
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	60fb      	str	r3, [r7, #12]
}
 8009e70:	bf00      	nop
 8009e72:	e7fe      	b.n	8009e72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00a      	beq.n	8009e92 <vPortFree+0x62>
	__asm volatile
 8009e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e80:	f383 8811 	msr	BASEPRI, r3
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	60bb      	str	r3, [r7, #8]
}
 8009e8e:	bf00      	nop
 8009e90:	e7fe      	b.n	8009e90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	685a      	ldr	r2, [r3, #4]
 8009e96:	4b14      	ldr	r3, [pc, #80]	; (8009ee8 <vPortFree+0xb8>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4013      	ands	r3, r2
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d01e      	beq.n	8009ede <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d11a      	bne.n	8009ede <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	685a      	ldr	r2, [r3, #4]
 8009eac:	4b0e      	ldr	r3, [pc, #56]	; (8009ee8 <vPortFree+0xb8>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	43db      	mvns	r3, r3
 8009eb2:	401a      	ands	r2, r3
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009eb8:	f7fe fc62 	bl	8008780 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	685a      	ldr	r2, [r3, #4]
 8009ec0:	4b0a      	ldr	r3, [pc, #40]	; (8009eec <vPortFree+0xbc>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	4a09      	ldr	r2, [pc, #36]	; (8009eec <vPortFree+0xbc>)
 8009ec8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009eca:	6938      	ldr	r0, [r7, #16]
 8009ecc:	f000 f874 	bl	8009fb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ed0:	4b07      	ldr	r3, [pc, #28]	; (8009ef0 <vPortFree+0xc0>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	4a06      	ldr	r2, [pc, #24]	; (8009ef0 <vPortFree+0xc0>)
 8009ed8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009eda:	f7fe fc5f 	bl	800879c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ede:	bf00      	nop
 8009ee0:	3718      	adds	r7, #24
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	2000c170 	.word	0x2000c170
 8009eec:	2000c160 	.word	0x2000c160
 8009ef0:	2000c16c 	.word	0x2000c16c

08009ef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009efa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009efe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f00:	4b27      	ldr	r3, [pc, #156]	; (8009fa0 <prvHeapInit+0xac>)
 8009f02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f003 0307 	and.w	r3, r3, #7
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00c      	beq.n	8009f28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	3307      	adds	r3, #7
 8009f12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f023 0307 	bic.w	r3, r3, #7
 8009f1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f1c:	68ba      	ldr	r2, [r7, #8]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	4a1f      	ldr	r2, [pc, #124]	; (8009fa0 <prvHeapInit+0xac>)
 8009f24:	4413      	add	r3, r2
 8009f26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f2c:	4a1d      	ldr	r2, [pc, #116]	; (8009fa4 <prvHeapInit+0xb0>)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f32:	4b1c      	ldr	r3, [pc, #112]	; (8009fa4 <prvHeapInit+0xb0>)
 8009f34:	2200      	movs	r2, #0
 8009f36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f40:	2208      	movs	r2, #8
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	1a9b      	subs	r3, r3, r2
 8009f46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f023 0307 	bic.w	r3, r3, #7
 8009f4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	4a15      	ldr	r2, [pc, #84]	; (8009fa8 <prvHeapInit+0xb4>)
 8009f54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f56:	4b14      	ldr	r3, [pc, #80]	; (8009fa8 <prvHeapInit+0xb4>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f5e:	4b12      	ldr	r3, [pc, #72]	; (8009fa8 <prvHeapInit+0xb4>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2200      	movs	r2, #0
 8009f64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	1ad2      	subs	r2, r2, r3
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f74:	4b0c      	ldr	r3, [pc, #48]	; (8009fa8 <prvHeapInit+0xb4>)
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	4a0a      	ldr	r2, [pc, #40]	; (8009fac <prvHeapInit+0xb8>)
 8009f82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	4a09      	ldr	r2, [pc, #36]	; (8009fb0 <prvHeapInit+0xbc>)
 8009f8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f8c:	4b09      	ldr	r3, [pc, #36]	; (8009fb4 <prvHeapInit+0xc0>)
 8009f8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f92:	601a      	str	r2, [r3, #0]
}
 8009f94:	bf00      	nop
 8009f96:	3714      	adds	r7, #20
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	20008554 	.word	0x20008554
 8009fa4:	2000c154 	.word	0x2000c154
 8009fa8:	2000c15c 	.word	0x2000c15c
 8009fac:	2000c164 	.word	0x2000c164
 8009fb0:	2000c160 	.word	0x2000c160
 8009fb4:	2000c170 	.word	0x2000c170

08009fb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009fc0:	4b28      	ldr	r3, [pc, #160]	; (800a064 <prvInsertBlockIntoFreeList+0xac>)
 8009fc2:	60fb      	str	r3, [r7, #12]
 8009fc4:	e002      	b.n	8009fcc <prvInsertBlockIntoFreeList+0x14>
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	60fb      	str	r3, [r7, #12]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d8f7      	bhi.n	8009fc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	68ba      	ldr	r2, [r7, #8]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d108      	bne.n	8009ffa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	685a      	ldr	r2, [r3, #4]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	441a      	add	r2, r3
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	68ba      	ldr	r2, [r7, #8]
 800a004:	441a      	add	r2, r3
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d118      	bne.n	800a040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	4b15      	ldr	r3, [pc, #84]	; (800a068 <prvInsertBlockIntoFreeList+0xb0>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	429a      	cmp	r2, r3
 800a018:	d00d      	beq.n	800a036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	685a      	ldr	r2, [r3, #4]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	441a      	add	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	601a      	str	r2, [r3, #0]
 800a034:	e008      	b.n	800a048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a036:	4b0c      	ldr	r3, [pc, #48]	; (800a068 <prvInsertBlockIntoFreeList+0xb0>)
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	601a      	str	r2, [r3, #0]
 800a03e:	e003      	b.n	800a048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d002      	beq.n	800a056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a056:	bf00      	nop
 800a058:	3714      	adds	r7, #20
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	2000c154 	.word	0x2000c154
 800a068:	2000c15c 	.word	0x2000c15c

0800a06c <rcl_get_zero_initialized_publisher>:
 800a06c:	4b01      	ldr	r3, [pc, #4]	; (800a074 <rcl_get_zero_initialized_publisher+0x8>)
 800a06e:	6818      	ldr	r0, [r3, #0]
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	0801806c 	.word	0x0801806c

0800a078 <rcl_publisher_init>:
 800a078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a07c:	b088      	sub	sp, #32
 800a07e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a080:	2d00      	cmp	r5, #0
 800a082:	d069      	beq.n	800a158 <rcl_publisher_init+0xe0>
 800a084:	f105 0950 	add.w	r9, r5, #80	; 0x50
 800a088:	4604      	mov	r4, r0
 800a08a:	4648      	mov	r0, r9
 800a08c:	460e      	mov	r6, r1
 800a08e:	4690      	mov	r8, r2
 800a090:	461f      	mov	r7, r3
 800a092:	f001 f845 	bl	800b120 <rcutils_allocator_is_valid>
 800a096:	2800      	cmp	r0, #0
 800a098:	d05e      	beq.n	800a158 <rcl_publisher_init+0xe0>
 800a09a:	2c00      	cmp	r4, #0
 800a09c:	d05c      	beq.n	800a158 <rcl_publisher_init+0xe0>
 800a09e:	f8d4 a000 	ldr.w	sl, [r4]
 800a0a2:	f1ba 0f00 	cmp.w	sl, #0
 800a0a6:	d004      	beq.n	800a0b2 <rcl_publisher_init+0x3a>
 800a0a8:	2764      	movs	r7, #100	; 0x64
 800a0aa:	4638      	mov	r0, r7
 800a0ac:	b008      	add	sp, #32
 800a0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	f006 f9a2 	bl	80103fc <rcl_node_is_valid>
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d052      	beq.n	800a162 <rcl_publisher_init+0xea>
 800a0bc:	f1b8 0f00 	cmp.w	r8, #0
 800a0c0:	d04a      	beq.n	800a158 <rcl_publisher_init+0xe0>
 800a0c2:	2f00      	cmp	r7, #0
 800a0c4:	d048      	beq.n	800a158 <rcl_publisher_init+0xe0>
 800a0c6:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a0ca:	aa07      	add	r2, sp, #28
 800a0cc:	9205      	str	r2, [sp, #20]
 800a0ce:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800a0d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0d6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a0da:	f8cd a01c 	str.w	sl, [sp, #28]
 800a0de:	4639      	mov	r1, r7
 800a0e0:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	f006 f9dd 	bl	80104a4 <rcl_node_resolve_name>
 800a0ea:	4607      	mov	r7, r0
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d14f      	bne.n	800a190 <rcl_publisher_init+0x118>
 800a0f0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a0f2:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800a0f4:	20c8      	movs	r0, #200	; 0xc8
 800a0f6:	4798      	blx	r3
 800a0f8:	6020      	str	r0, [r4, #0]
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d04e      	beq.n	800a19c <rcl_publisher_init+0x124>
 800a0fe:	4630      	mov	r0, r6
 800a100:	f006 f99e 	bl	8010440 <rcl_node_get_rmw_handle>
 800a104:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	9a07      	ldr	r2, [sp, #28]
 800a10c:	6827      	ldr	r7, [r4, #0]
 800a10e:	462b      	mov	r3, r5
 800a110:	4641      	mov	r1, r8
 800a112:	f001 f913 	bl	800b33c <rmw_create_publisher>
 800a116:	6823      	ldr	r3, [r4, #0]
 800a118:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800a11c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800a120:	b370      	cbz	r0, 800a180 <rcl_publisher_init+0x108>
 800a122:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800a126:	f001 f9e7 	bl	800b4f8 <rmw_publisher_get_actual_qos>
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	4607      	mov	r7, r0
 800a12e:	b9d0      	cbnz	r0, 800a166 <rcl_publisher_init+0xee>
 800a130:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 800a134:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800a138:	4629      	mov	r1, r5
 800a13a:	2270      	movs	r2, #112	; 0x70
 800a13c:	4618      	mov	r0, r3
 800a13e:	f00d f82a 	bl	8017196 <memcpy>
 800a142:	6832      	ldr	r2, [r6, #0]
 800a144:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800a148:	9807      	ldr	r0, [sp, #28]
 800a14a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800a14c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800a14e:	4798      	blx	r3
 800a150:	4638      	mov	r0, r7
 800a152:	b008      	add	sp, #32
 800a154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a158:	270b      	movs	r7, #11
 800a15a:	4638      	mov	r0, r7
 800a15c:	b008      	add	sp, #32
 800a15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a162:	27c8      	movs	r7, #200	; 0xc8
 800a164:	e7a1      	b.n	800a0aa <rcl_publisher_init+0x32>
 800a166:	b18b      	cbz	r3, 800a18c <rcl_publisher_init+0x114>
 800a168:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a16c:	b142      	cbz	r2, 800a180 <rcl_publisher_init+0x108>
 800a16e:	4630      	mov	r0, r6
 800a170:	f006 f966 	bl	8010440 <rcl_node_get_rmw_handle>
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800a17a:	f001 f9cd 	bl	800b518 <rmw_destroy_publisher>
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800a182:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800a184:	4618      	mov	r0, r3
 800a186:	4790      	blx	r2
 800a188:	2300      	movs	r3, #0
 800a18a:	6023      	str	r3, [r4, #0]
 800a18c:	2701      	movs	r7, #1
 800a18e:	e7db      	b.n	800a148 <rcl_publisher_init+0xd0>
 800a190:	2867      	cmp	r0, #103	; 0x67
 800a192:	d0d9      	beq.n	800a148 <rcl_publisher_init+0xd0>
 800a194:	2869      	cmp	r0, #105	; 0x69
 800a196:	d003      	beq.n	800a1a0 <rcl_publisher_init+0x128>
 800a198:	280a      	cmp	r0, #10
 800a19a:	d1f7      	bne.n	800a18c <rcl_publisher_init+0x114>
 800a19c:	270a      	movs	r7, #10
 800a19e:	e7d3      	b.n	800a148 <rcl_publisher_init+0xd0>
 800a1a0:	2767      	movs	r7, #103	; 0x67
 800a1a2:	e7d1      	b.n	800a148 <rcl_publisher_init+0xd0>

0800a1a4 <rcl_publisher_get_default_options>:
 800a1a4:	b570      	push	{r4, r5, r6, lr}
 800a1a6:	4d14      	ldr	r5, [pc, #80]	; (800a1f8 <rcl_publisher_get_default_options+0x54>)
 800a1a8:	4914      	ldr	r1, [pc, #80]	; (800a1fc <rcl_publisher_get_default_options+0x58>)
 800a1aa:	b088      	sub	sp, #32
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	2250      	movs	r2, #80	; 0x50
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	f00c fff0 	bl	8017196 <memcpy>
 800a1b6:	a802      	add	r0, sp, #8
 800a1b8:	f000 ffa4 	bl	800b104 <rcutils_get_default_allocator>
 800a1bc:	f10d 0c08 	add.w	ip, sp, #8
 800a1c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a1c4:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800a1c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a1cc:	466e      	mov	r6, sp
 800a1ce:	f8dc 3000 	ldr.w	r3, [ip]
 800a1d2:	f8ce 3000 	str.w	r3, [lr]
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	f001 f832 	bl	800b240 <rmw_get_default_publisher_options>
 800a1dc:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a1e0:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800a1e4:	e883 0003 	stmia.w	r3, {r0, r1}
 800a1e8:	2270      	movs	r2, #112	; 0x70
 800a1ea:	4629      	mov	r1, r5
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f00c ffd2 	bl	8017196 <memcpy>
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	b008      	add	sp, #32
 800a1f6:	bd70      	pop	{r4, r5, r6, pc}
 800a1f8:	2000c178 	.word	0x2000c178
 800a1fc:	08018070 	.word	0x08018070

0800a200 <rcl_publish>:
 800a200:	b1f8      	cbz	r0, 800a242 <rcl_publish+0x42>
 800a202:	6803      	ldr	r3, [r0, #0]
 800a204:	b570      	push	{r4, r5, r6, lr}
 800a206:	4604      	mov	r4, r0
 800a208:	b1b3      	cbz	r3, 800a238 <rcl_publish+0x38>
 800a20a:	4616      	mov	r6, r2
 800a20c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a210:	b192      	cbz	r2, 800a238 <rcl_publish+0x38>
 800a212:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800a216:	460d      	mov	r5, r1
 800a218:	f005 fd16 	bl	800fc48 <rcl_context_is_valid>
 800a21c:	b160      	cbz	r0, 800a238 <rcl_publish+0x38>
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800a224:	b140      	cbz	r0, 800a238 <rcl_publish+0x38>
 800a226:	b155      	cbz	r5, 800a23e <rcl_publish+0x3e>
 800a228:	4632      	mov	r2, r6
 800a22a:	4629      	mov	r1, r5
 800a22c:	f001 f826 	bl	800b27c <rmw_publish>
 800a230:	3800      	subs	r0, #0
 800a232:	bf18      	it	ne
 800a234:	2001      	movne	r0, #1
 800a236:	bd70      	pop	{r4, r5, r6, pc}
 800a238:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a23c:	bd70      	pop	{r4, r5, r6, pc}
 800a23e:	200b      	movs	r0, #11
 800a240:	bd70      	pop	{r4, r5, r6, pc}
 800a242:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a246:	4770      	bx	lr

0800a248 <rcl_publisher_is_valid>:
 800a248:	b1a0      	cbz	r0, 800a274 <rcl_publisher_is_valid+0x2c>
 800a24a:	6803      	ldr	r3, [r0, #0]
 800a24c:	b510      	push	{r4, lr}
 800a24e:	4604      	mov	r4, r0
 800a250:	b173      	cbz	r3, 800a270 <rcl_publisher_is_valid+0x28>
 800a252:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a256:	b15a      	cbz	r2, 800a270 <rcl_publisher_is_valid+0x28>
 800a258:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800a25c:	f005 fcf4 	bl	800fc48 <rcl_context_is_valid>
 800a260:	b130      	cbz	r0, 800a270 <rcl_publisher_is_valid+0x28>
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800a268:	3800      	subs	r0, #0
 800a26a:	bf18      	it	ne
 800a26c:	2001      	movne	r0, #1
 800a26e:	bd10      	pop	{r4, pc}
 800a270:	2000      	movs	r0, #0
 800a272:	bd10      	pop	{r4, pc}
 800a274:	2000      	movs	r0, #0
 800a276:	4770      	bx	lr

0800a278 <rcl_publisher_is_valid_except_context>:
 800a278:	b130      	cbz	r0, 800a288 <rcl_publisher_is_valid_except_context+0x10>
 800a27a:	6800      	ldr	r0, [r0, #0]
 800a27c:	b120      	cbz	r0, 800a288 <rcl_publisher_is_valid_except_context+0x10>
 800a27e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 800a282:	3800      	subs	r0, #0
 800a284:	bf18      	it	ne
 800a286:	2001      	movne	r0, #1
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop

0800a28c <_rclc_check_for_new_data>:
 800a28c:	2800      	cmp	r0, #0
 800a28e:	d046      	beq.n	800a31e <_rclc_check_for_new_data+0x92>
 800a290:	b510      	push	{r4, lr}
 800a292:	7802      	ldrb	r2, [r0, #0]
 800a294:	b084      	sub	sp, #16
 800a296:	4603      	mov	r3, r0
 800a298:	2a0a      	cmp	r2, #10
 800a29a:	d842      	bhi.n	800a322 <_rclc_check_for_new_data+0x96>
 800a29c:	e8df f002 	tbb	[pc, r2]
 800a2a0:	14181212 	.word	0x14181212
 800a2a4:	06060614 	.word	0x06060614
 800a2a8:	2e1a      	.short	0x2e1a
 800a2aa:	16          	.byte	0x16
 800a2ab:	00          	.byte	0x00
 800a2ac:	6a0a      	ldr	r2, [r1, #32]
 800a2ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a2b0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a2b4:	2000      	movs	r0, #0
 800a2b6:	1a12      	subs	r2, r2, r0
 800a2b8:	bf18      	it	ne
 800a2ba:	2201      	movne	r2, #1
 800a2bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800a2c0:	b004      	add	sp, #16
 800a2c2:	bd10      	pop	{r4, pc}
 800a2c4:	680a      	ldr	r2, [r1, #0]
 800a2c6:	e7f2      	b.n	800a2ae <_rclc_check_for_new_data+0x22>
 800a2c8:	698a      	ldr	r2, [r1, #24]
 800a2ca:	e7f0      	b.n	800a2ae <_rclc_check_for_new_data+0x22>
 800a2cc:	688a      	ldr	r2, [r1, #8]
 800a2ce:	e7ee      	b.n	800a2ae <_rclc_check_for_new_data+0x22>
 800a2d0:	690a      	ldr	r2, [r1, #16]
 800a2d2:	e7ec      	b.n	800a2ae <_rclc_check_for_new_data+0x22>
 800a2d4:	685c      	ldr	r4, [r3, #4]
 800a2d6:	4608      	mov	r0, r1
 800a2d8:	f104 0244 	add.w	r2, r4, #68	; 0x44
 800a2dc:	f104 0143 	add.w	r1, r4, #67	; 0x43
 800a2e0:	f104 0342 	add.w	r3, r4, #66	; 0x42
 800a2e4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a2e8:	9300      	str	r3, [sp, #0]
 800a2ea:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800a2ee:	f104 0341 	add.w	r3, r4, #65	; 0x41
 800a2f2:	f104 0110 	add.w	r1, r4, #16
 800a2f6:	f007 fda3 	bl	8011e40 <rcl_action_client_wait_set_get_entities_ready>
 800a2fa:	e7e1      	b.n	800a2c0 <_rclc_check_for_new_data+0x34>
 800a2fc:	685c      	ldr	r4, [r3, #4]
 800a2fe:	f104 0223 	add.w	r2, r4, #35	; 0x23
 800a302:	f104 0322 	add.w	r3, r4, #34	; 0x22
 800a306:	e9cd 3200 	strd	r3, r2, [sp]
 800a30a:	4608      	mov	r0, r1
 800a30c:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800a310:	f104 0220 	add.w	r2, r4, #32
 800a314:	f104 0110 	add.w	r1, r4, #16
 800a318:	f007 ffa8 	bl	801226c <rcl_action_server_wait_set_get_entities_ready>
 800a31c:	e7d0      	b.n	800a2c0 <_rclc_check_for_new_data+0x34>
 800a31e:	200b      	movs	r0, #11
 800a320:	4770      	bx	lr
 800a322:	2001      	movs	r0, #1
 800a324:	e7cc      	b.n	800a2c0 <_rclc_check_for_new_data+0x34>
 800a326:	bf00      	nop

0800a328 <_rclc_take_new_data>:
 800a328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a32a:	b09b      	sub	sp, #108	; 0x6c
 800a32c:	2800      	cmp	r0, #0
 800a32e:	f000 8088 	beq.w	800a442 <_rclc_take_new_data+0x11a>
 800a332:	7803      	ldrb	r3, [r0, #0]
 800a334:	4604      	mov	r4, r0
 800a336:	2b0a      	cmp	r3, #10
 800a338:	f200 8167 	bhi.w	800a60a <_rclc_take_new_data+0x2e2>
 800a33c:	e8df f003 	tbb	[pc, r3]
 800a340:	44152d2d 	.word	0x44152d2d
 800a344:	19191944 	.word	0x19191944
 800a348:	065a      	.short	0x065a
 800a34a:	15          	.byte	0x15
 800a34b:	00          	.byte	0x00
 800a34c:	6840      	ldr	r0, [r0, #4]
 800a34e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a352:	2b00      	cmp	r3, #0
 800a354:	f040 80b2 	bne.w	800a4bc <_rclc_take_new_data+0x194>
 800a358:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f040 80e4 	bne.w	800a52a <_rclc_take_new_data+0x202>
 800a362:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800a366:	2b00      	cmp	r3, #0
 800a368:	d16f      	bne.n	800a44a <_rclc_take_new_data+0x122>
 800a36a:	2500      	movs	r5, #0
 800a36c:	4628      	mov	r0, r5
 800a36e:	b01b      	add	sp, #108	; 0x6c
 800a370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a372:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a374:	6a0b      	ldr	r3, [r1, #32]
 800a376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d0f5      	beq.n	800a36a <_rclc_take_new_data+0x42>
 800a37e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a382:	f104 0110 	add.w	r1, r4, #16
 800a386:	f006 fa37 	bl	80107f8 <rcl_take_request>
 800a38a:	4605      	mov	r5, r0
 800a38c:	2800      	cmp	r0, #0
 800a38e:	d0ec      	beq.n	800a36a <_rclc_take_new_data+0x42>
 800a390:	f240 2359 	movw	r3, #601	; 0x259
 800a394:	4298      	cmp	r0, r3
 800a396:	d013      	beq.n	800a3c0 <_rclc_take_new_data+0x98>
 800a398:	e029      	b.n	800a3ee <_rclc_take_new_data+0xc6>
 800a39a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a39c:	680b      	ldr	r3, [r1, #0]
 800a39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d0e1      	beq.n	800a36a <_rclc_take_new_data+0x42>
 800a3a6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	aa0a      	add	r2, sp, #40	; 0x28
 800a3ae:	f006 fb61 	bl	8010a74 <rcl_take>
 800a3b2:	4605      	mov	r5, r0
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d0d9      	beq.n	800a36c <_rclc_take_new_data+0x44>
 800a3b8:	f240 1391 	movw	r3, #401	; 0x191
 800a3bc:	4298      	cmp	r0, r3
 800a3be:	d116      	bne.n	800a3ee <_rclc_take_new_data+0xc6>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800a3c6:	e7d1      	b.n	800a36c <_rclc_take_new_data+0x44>
 800a3c8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a3ca:	698b      	ldr	r3, [r1, #24]
 800a3cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d0ca      	beq.n	800a36a <_rclc_take_new_data+0x42>
 800a3d4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a3d8:	f104 0110 	add.w	r1, r4, #16
 800a3dc:	f005 fbc4 	bl	800fb68 <rcl_take_response>
 800a3e0:	4605      	mov	r5, r0
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	d0c1      	beq.n	800a36a <_rclc_take_new_data+0x42>
 800a3e6:	f240 13f5 	movw	r3, #501	; 0x1f5
 800a3ea:	4298      	cmp	r0, r3
 800a3ec:	d0be      	beq.n	800a36c <_rclc_take_new_data+0x44>
 800a3ee:	f000 febb 	bl	800b168 <rcutils_reset_error>
 800a3f2:	e7bb      	b.n	800a36c <_rclc_take_new_data+0x44>
 800a3f4:	6840      	ldr	r0, [r0, #4]
 800a3f6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d17d      	bne.n	800a4fa <_rclc_take_new_data+0x1d2>
 800a3fe:	69c3      	ldr	r3, [r0, #28]
 800a400:	b11b      	cbz	r3, 800a40a <_rclc_take_new_data+0xe2>
 800a402:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a406:	2b00      	cmp	r3, #0
 800a408:	d144      	bne.n	800a494 <_rclc_take_new_data+0x16c>
 800a40a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f040 80ac 	bne.w	800a56c <_rclc_take_new_data+0x244>
 800a414:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d0a6      	beq.n	800a36a <_rclc_take_new_data+0x42>
 800a41c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800a41e:	a90a      	add	r1, sp, #40	; 0x28
 800a420:	3010      	adds	r0, #16
 800a422:	f007 fbe5 	bl	8011bf0 <rcl_action_take_result_response>
 800a426:	4605      	mov	r5, r0
 800a428:	2800      	cmp	r0, #0
 800a42a:	d1e0      	bne.n	800a3ee <_rclc_take_new_data+0xc6>
 800a42c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a430:	6860      	ldr	r0, [r4, #4]
 800a432:	f008 f83f 	bl	80124b4 <rclc_action_find_handle_by_result_request_sequence_number>
 800a436:	2800      	cmp	r0, #0
 800a438:	d098      	beq.n	800a36c <_rclc_take_new_data+0x44>
 800a43a:	2301      	movs	r3, #1
 800a43c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 800a440:	e794      	b.n	800a36c <_rclc_take_new_data+0x44>
 800a442:	250b      	movs	r5, #11
 800a444:	4628      	mov	r0, r5
 800a446:	b01b      	add	sp, #108	; 0x6c
 800a448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a44a:	ae04      	add	r6, sp, #16
 800a44c:	aa0a      	add	r2, sp, #40	; 0x28
 800a44e:	3010      	adds	r0, #16
 800a450:	4631      	mov	r1, r6
 800a452:	f007 fe3f 	bl	80120d4 <rcl_action_take_cancel_request>
 800a456:	4605      	mov	r5, r0
 800a458:	2800      	cmp	r0, #0
 800a45a:	d1c8      	bne.n	800a3ee <_rclc_take_new_data+0xc6>
 800a45c:	6860      	ldr	r0, [r4, #4]
 800a45e:	a90a      	add	r1, sp, #40	; 0x28
 800a460:	f007 ffe6 	bl	8012430 <rclc_action_find_goal_handle_by_uuid>
 800a464:	4607      	mov	r7, r0
 800a466:	2800      	cmp	r0, #0
 800a468:	f000 80bb 	beq.w	800a5e2 <_rclc_take_new_data+0x2ba>
 800a46c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800a470:	2101      	movs	r1, #1
 800a472:	f007 ff67 	bl	8012344 <rcl_action_transition_goal_state>
 800a476:	2803      	cmp	r0, #3
 800a478:	4684      	mov	ip, r0
 800a47a:	f040 80a7 	bne.w	800a5cc <_rclc_take_new_data+0x2a4>
 800a47e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a480:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800a484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a486:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a48a:	e884 0003 	stmia.w	r4, {r0, r1}
 800a48e:	f887 c008 	strb.w	ip, [r7, #8]
 800a492:	e76b      	b.n	800a36c <_rclc_take_new_data+0x44>
 800a494:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a496:	3010      	adds	r0, #16
 800a498:	f007 fc2a 	bl	8011cf0 <rcl_action_take_feedback>
 800a49c:	4605      	mov	r5, r0
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	d1a5      	bne.n	800a3ee <_rclc_take_new_data+0xc6>
 800a4a2:	6860      	ldr	r0, [r4, #4]
 800a4a4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a4a6:	f007 ffc3 	bl	8012430 <rclc_action_find_goal_handle_by_uuid>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	f000 80a3 	beq.w	800a5f8 <_rclc_take_new_data+0x2d0>
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	6860      	ldr	r0, [r4, #4]
 800a4b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800a4ba:	e7a6      	b.n	800a40a <_rclc_take_new_data+0xe2>
 800a4bc:	f007 ff92 	bl	80123e4 <rclc_action_take_goal_handle>
 800a4c0:	4606      	mov	r6, r0
 800a4c2:	6860      	ldr	r0, [r4, #4]
 800a4c4:	2e00      	cmp	r6, #0
 800a4c6:	f43f af47 	beq.w	800a358 <_rclc_take_new_data+0x30>
 800a4ca:	6070      	str	r0, [r6, #4]
 800a4cc:	69f2      	ldr	r2, [r6, #28]
 800a4ce:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800a4d2:	3010      	adds	r0, #16
 800a4d4:	f007 fd48 	bl	8011f68 <rcl_action_take_goal_request>
 800a4d8:	4605      	mov	r5, r0
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	f040 808e 	bne.w	800a5fc <_rclc_take_new_data+0x2d4>
 800a4e0:	69f7      	ldr	r7, [r6, #28]
 800a4e2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a4e4:	7235      	strb	r5, [r6, #8]
 800a4e6:	f8c6 0009 	str.w	r0, [r6, #9]
 800a4ea:	f8c6 100d 	str.w	r1, [r6, #13]
 800a4ee:	6860      	ldr	r0, [r4, #4]
 800a4f0:	f8c6 2011 	str.w	r2, [r6, #17]
 800a4f4:	f8c6 3015 	str.w	r3, [r6, #21]
 800a4f8:	e72e      	b.n	800a358 <_rclc_take_new_data+0x30>
 800a4fa:	aa04      	add	r2, sp, #16
 800a4fc:	a90a      	add	r1, sp, #40	; 0x28
 800a4fe:	3010      	adds	r0, #16
 800a500:	f007 fafe 	bl	8011b00 <rcl_action_take_goal_response>
 800a504:	4605      	mov	r5, r0
 800a506:	2800      	cmp	r0, #0
 800a508:	f47f af71 	bne.w	800a3ee <_rclc_take_new_data+0xc6>
 800a50c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a510:	6860      	ldr	r0, [r4, #4]
 800a512:	f007 ffbd 	bl	8012490 <rclc_action_find_handle_by_goal_request_sequence_number>
 800a516:	b130      	cbz	r0, 800a526 <_rclc_take_new_data+0x1fe>
 800a518:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a51c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800a520:	2201      	movs	r2, #1
 800a522:	f880 2020 	strb.w	r2, [r0, #32]
 800a526:	6860      	ldr	r0, [r4, #4]
 800a528:	e769      	b.n	800a3fe <_rclc_take_new_data+0xd6>
 800a52a:	aa04      	add	r2, sp, #16
 800a52c:	3010      	adds	r0, #16
 800a52e:	a90a      	add	r1, sp, #40	; 0x28
 800a530:	f007 fd90 	bl	8012054 <rcl_action_take_result_request>
 800a534:	4605      	mov	r5, r0
 800a536:	2800      	cmp	r0, #0
 800a538:	f47f af59 	bne.w	800a3ee <_rclc_take_new_data+0xc6>
 800a53c:	6860      	ldr	r0, [r4, #4]
 800a53e:	a904      	add	r1, sp, #16
 800a540:	f007 ff76 	bl	8012430 <rclc_action_find_goal_handle_by_uuid>
 800a544:	4607      	mov	r7, r0
 800a546:	b160      	cbz	r0, 800a562 <_rclc_take_new_data+0x23a>
 800a548:	ad0a      	add	r5, sp, #40	; 0x28
 800a54a:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800a54e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a550:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a552:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a556:	f04f 0c02 	mov.w	ip, #2
 800a55a:	e886 0003 	stmia.w	r6, {r0, r1}
 800a55e:	f887 c008 	strb.w	ip, [r7, #8]
 800a562:	6860      	ldr	r0, [r4, #4]
 800a564:	2300      	movs	r3, #0
 800a566:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800a56a:	e6fa      	b.n	800a362 <_rclc_take_new_data+0x3a>
 800a56c:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800a570:	a90a      	add	r1, sp, #40	; 0x28
 800a572:	3010      	adds	r0, #16
 800a574:	f007 fb7c 	bl	8011c70 <rcl_action_take_cancel_response>
 800a578:	4605      	mov	r5, r0
 800a57a:	2800      	cmp	r0, #0
 800a57c:	f47f af37 	bne.w	800a3ee <_rclc_take_new_data+0xc6>
 800a580:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a584:	6860      	ldr	r0, [r4, #4]
 800a586:	f007 ffa7 	bl	80124d8 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800a58a:	4606      	mov	r6, r0
 800a58c:	6860      	ldr	r0, [r4, #4]
 800a58e:	2e00      	cmp	r6, #0
 800a590:	f43f af40 	beq.w	800a414 <_rclc_take_new_data+0xec>
 800a594:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a596:	2701      	movs	r7, #1
 800a598:	84b7      	strh	r7, [r6, #36]	; 0x24
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f43f af3a 	beq.w	800a414 <_rclc_take_new_data+0xec>
 800a5a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a5a2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a5a6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a5aa:	f007 ff41 	bl	8012430 <rclc_action_find_goal_handle_by_uuid>
 800a5ae:	b138      	cbz	r0, 800a5c0 <_rclc_take_new_data+0x298>
 800a5b0:	6860      	ldr	r0, [r4, #4]
 800a5b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a5b4:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800a5b8:	3501      	adds	r5, #1
 800a5ba:	42ab      	cmp	r3, r5
 800a5bc:	d8f0      	bhi.n	800a5a0 <_rclc_take_new_data+0x278>
 800a5be:	e729      	b.n	800a414 <_rclc_take_new_data+0xec>
 800a5c0:	6860      	ldr	r0, [r4, #4]
 800a5c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a5c4:	3501      	adds	r5, #1
 800a5c6:	42ab      	cmp	r3, r5
 800a5c8:	d8ea      	bhi.n	800a5a0 <_rclc_take_new_data+0x278>
 800a5ca:	e723      	b.n	800a414 <_rclc_take_new_data+0xec>
 800a5cc:	ab06      	add	r3, sp, #24
 800a5ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a5d0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a5d4:	2103      	movs	r1, #3
 800a5d6:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a5da:	6860      	ldr	r0, [r4, #4]
 800a5dc:	f007 fff0 	bl	80125c0 <rclc_action_server_goal_cancel_reject>
 800a5e0:	e6c4      	b.n	800a36c <_rclc_take_new_data+0x44>
 800a5e2:	ab06      	add	r3, sp, #24
 800a5e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a5e6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a5ea:	2102      	movs	r1, #2
 800a5ec:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a5f0:	6860      	ldr	r0, [r4, #4]
 800a5f2:	f007 ffe5 	bl	80125c0 <rclc_action_server_goal_cancel_reject>
 800a5f6:	e6b9      	b.n	800a36c <_rclc_take_new_data+0x44>
 800a5f8:	6860      	ldr	r0, [r4, #4]
 800a5fa:	e706      	b.n	800a40a <_rclc_take_new_data+0xe2>
 800a5fc:	6860      	ldr	r0, [r4, #4]
 800a5fe:	4631      	mov	r1, r6
 800a600:	f007 ff00 	bl	8012404 <rclc_action_remove_used_goal_handle>
 800a604:	f000 fdb0 	bl	800b168 <rcutils_reset_error>
 800a608:	e6b0      	b.n	800a36c <_rclc_take_new_data+0x44>
 800a60a:	2501      	movs	r5, #1
 800a60c:	e6ae      	b.n	800a36c <_rclc_take_new_data+0x44>
 800a60e:	bf00      	nop

0800a610 <_rclc_execute.part.0>:
 800a610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a612:	7803      	ldrb	r3, [r0, #0]
 800a614:	b087      	sub	sp, #28
 800a616:	4604      	mov	r4, r0
 800a618:	2b0a      	cmp	r3, #10
 800a61a:	f200 8136 	bhi.w	800a88a <_rclc_execute.part.0+0x27a>
 800a61e:	e8df f003 	tbb	[pc, r3]
 800a622:	435e      	.short	0x435e
 800a624:	06a1664f 	.word	0x06a1664f
 800a628:	6c1e0606 	.word	0x6c1e0606
 800a62c:	59          	.byte	0x59
 800a62d:	00          	.byte	0x00
 800a62e:	2b06      	cmp	r3, #6
 800a630:	f000 8122 	beq.w	800a878 <_rclc_execute.part.0+0x268>
 800a634:	2b07      	cmp	r3, #7
 800a636:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a638:	f040 8118 	bne.w	800a86c <_rclc_execute.part.0+0x25c>
 800a63c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800a640:	6880      	ldr	r0, [r0, #8]
 800a642:	4798      	blx	r3
 800a644:	f104 0110 	add.w	r1, r4, #16
 800a648:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a64a:	6860      	ldr	r0, [r4, #4]
 800a64c:	f006 f914 	bl	8010878 <rcl_send_response>
 800a650:	2800      	cmp	r0, #0
 800a652:	d033      	beq.n	800a6bc <_rclc_execute.part.0+0xac>
 800a654:	9005      	str	r0, [sp, #20]
 800a656:	f000 fd87 	bl	800b168 <rcutils_reset_error>
 800a65a:	9805      	ldr	r0, [sp, #20]
 800a65c:	e02e      	b.n	800a6bc <_rclc_execute.part.0+0xac>
 800a65e:	6840      	ldr	r0, [r0, #4]
 800a660:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800a664:	2b00      	cmp	r3, #0
 800a666:	f000 8086 	beq.w	800a776 <_rclc_execute.part.0+0x166>
 800a66a:	2600      	movs	r6, #0
 800a66c:	2701      	movs	r7, #1
 800a66e:	e004      	b.n	800a67a <_rclc_execute.part.0+0x6a>
 800a670:	f007 fe92 	bl	8012398 <rclc_action_send_result_request>
 800a674:	b998      	cbnz	r0, 800a69e <_rclc_execute.part.0+0x8e>
 800a676:	722f      	strb	r7, [r5, #8]
 800a678:	6860      	ldr	r0, [r4, #4]
 800a67a:	f007 ff3f 	bl	80124fc <rclc_action_find_first_handle_with_goal_response>
 800a67e:	4605      	mov	r5, r0
 800a680:	2800      	cmp	r0, #0
 800a682:	d077      	beq.n	800a774 <_rclc_execute.part.0+0x164>
 800a684:	6863      	ldr	r3, [r4, #4]
 800a686:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800a68e:	f885 6020 	strb.w	r6, [r5, #32]
 800a692:	4798      	blx	r3
 800a694:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800a698:	4628      	mov	r0, r5
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1e8      	bne.n	800a670 <_rclc_execute.part.0+0x60>
 800a69e:	6860      	ldr	r0, [r4, #4]
 800a6a0:	4629      	mov	r1, r5
 800a6a2:	f007 feaf 	bl	8012404 <rclc_action_remove_used_goal_handle>
 800a6a6:	e7e7      	b.n	800a678 <_rclc_execute.part.0+0x68>
 800a6a8:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800a6ac:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800a6b0:	2d00      	cmp	r5, #0
 800a6b2:	f000 80c9 	beq.w	800a848 <_rclc_execute.part.0+0x238>
 800a6b6:	6880      	ldr	r0, [r0, #8]
 800a6b8:	4798      	blx	r3
 800a6ba:	2000      	movs	r0, #0
 800a6bc:	b007      	add	sp, #28
 800a6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6c0:	6840      	ldr	r0, [r0, #4]
 800a6c2:	f006 fadb 	bl	8010c7c <rcl_timer_call>
 800a6c6:	f240 3321 	movw	r3, #801	; 0x321
 800a6ca:	4298      	cmp	r0, r3
 800a6cc:	d004      	beq.n	800a6d8 <_rclc_execute.part.0+0xc8>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d0f4      	beq.n	800a6bc <_rclc_execute.part.0+0xac>
 800a6d2:	e7bf      	b.n	800a654 <_rclc_execute.part.0+0x44>
 800a6d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a6d6:	4798      	blx	r3
 800a6d8:	2000      	movs	r0, #0
 800a6da:	b007      	add	sp, #28
 800a6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6de:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800a6e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a6e4:	b925      	cbnz	r5, 800a6f0 <_rclc_execute.part.0+0xe0>
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	4798      	blx	r3
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	e7e6      	b.n	800a6bc <_rclc_execute.part.0+0xac>
 800a6ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a6f0:	68a0      	ldr	r0, [r4, #8]
 800a6f2:	4798      	blx	r3
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	b007      	add	sp, #28
 800a6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6fa:	6840      	ldr	r0, [r0, #4]
 800a6fc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800a700:	bb3b      	cbnz	r3, 800a752 <_rclc_execute.part.0+0x142>
 800a702:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d07b      	beq.n	800a802 <_rclc_execute.part.0+0x1f2>
 800a70a:	f640 0634 	movw	r6, #2100	; 0x834
 800a70e:	2701      	movs	r7, #1
 800a710:	e007      	b.n	800a722 <_rclc_execute.part.0+0x112>
 800a712:	4628      	mov	r0, r5
 800a714:	f007 ff0a 	bl	801252c <rclc_action_server_response_goal_request>
 800a718:	6860      	ldr	r0, [r4, #4]
 800a71a:	4629      	mov	r1, r5
 800a71c:	f007 fe72 	bl	8012404 <rclc_action_remove_used_goal_handle>
 800a720:	6860      	ldr	r0, [r4, #4]
 800a722:	2100      	movs	r1, #0
 800a724:	f007 fe9c 	bl	8012460 <rclc_action_find_first_handle_by_status>
 800a728:	4605      	mov	r5, r0
 800a72a:	2800      	cmp	r0, #0
 800a72c:	d066      	beq.n	800a7fc <_rclc_execute.part.0+0x1ec>
 800a72e:	6863      	ldr	r3, [r4, #4]
 800a730:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a732:	699b      	ldr	r3, [r3, #24]
 800a734:	4798      	blx	r3
 800a736:	42b0      	cmp	r0, r6
 800a738:	f04f 0100 	mov.w	r1, #0
 800a73c:	d1e9      	bne.n	800a712 <_rclc_execute.part.0+0x102>
 800a73e:	2101      	movs	r1, #1
 800a740:	4628      	mov	r0, r5
 800a742:	f007 fef3 	bl	801252c <rclc_action_server_response_goal_request>
 800a746:	722f      	strb	r7, [r5, #8]
 800a748:	e7ea      	b.n	800a720 <_rclc_execute.part.0+0x110>
 800a74a:	6848      	ldr	r0, [r1, #4]
 800a74c:	f007 fe5a 	bl	8012404 <rclc_action_remove_used_goal_handle>
 800a750:	6860      	ldr	r0, [r4, #4]
 800a752:	f007 fe91 	bl	8012478 <rclc_action_find_first_terminated_handle>
 800a756:	4601      	mov	r1, r0
 800a758:	2800      	cmp	r0, #0
 800a75a:	d1f6      	bne.n	800a74a <_rclc_execute.part.0+0x13a>
 800a75c:	6860      	ldr	r0, [r4, #4]
 800a75e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800a762:	e7ce      	b.n	800a702 <_rclc_execute.part.0+0xf2>
 800a764:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a766:	6880      	ldr	r0, [r0, #8]
 800a768:	f104 0110 	add.w	r1, r4, #16
 800a76c:	4798      	blx	r3
 800a76e:	2000      	movs	r0, #0
 800a770:	b007      	add	sp, #28
 800a772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a774:	6860      	ldr	r0, [r4, #4]
 800a776:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a77a:	b18b      	cbz	r3, 800a7a0 <_rclc_execute.part.0+0x190>
 800a77c:	68c5      	ldr	r5, [r0, #12]
 800a77e:	b32d      	cbz	r5, 800a7cc <_rclc_execute.part.0+0x1bc>
 800a780:	2600      	movs	r6, #0
 800a782:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800a786:	b143      	cbz	r3, 800a79a <_rclc_execute.part.0+0x18a>
 800a788:	69c3      	ldr	r3, [r0, #28]
 800a78a:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800a78e:	b123      	cbz	r3, 800a79a <_rclc_execute.part.0+0x18a>
 800a790:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a792:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a794:	4628      	mov	r0, r5
 800a796:	4798      	blx	r3
 800a798:	6860      	ldr	r0, [r4, #4]
 800a79a:	682d      	ldr	r5, [r5, #0]
 800a79c:	2d00      	cmp	r5, #0
 800a79e:	d1f0      	bne.n	800a782 <_rclc_execute.part.0+0x172>
 800a7a0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800a7a4:	b193      	cbz	r3, 800a7cc <_rclc_execute.part.0+0x1bc>
 800a7a6:	68c5      	ldr	r5, [r0, #12]
 800a7a8:	b185      	cbz	r5, 800a7cc <_rclc_execute.part.0+0x1bc>
 800a7aa:	2600      	movs	r6, #0
 800a7ac:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800a7b0:	b14b      	cbz	r3, 800a7c6 <_rclc_execute.part.0+0x1b6>
 800a7b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a7b4:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800a7b8:	b12b      	cbz	r3, 800a7c6 <_rclc_execute.part.0+0x1b6>
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800a7c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a7c2:	4798      	blx	r3
 800a7c4:	6860      	ldr	r0, [r4, #4]
 800a7c6:	682d      	ldr	r5, [r5, #0]
 800a7c8:	2d00      	cmp	r5, #0
 800a7ca:	d1ef      	bne.n	800a7ac <_rclc_execute.part.0+0x19c>
 800a7cc:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d081      	beq.n	800a6d8 <_rclc_execute.part.0+0xc8>
 800a7d4:	2700      	movs	r7, #0
 800a7d6:	e00b      	b.n	800a7f0 <_rclc_execute.part.0+0x1e0>
 800a7d8:	6863      	ldr	r3, [r4, #4]
 800a7da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a7dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a7de:	6a1e      	ldr	r6, [r3, #32]
 800a7e0:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800a7e4:	47b0      	blx	r6
 800a7e6:	6860      	ldr	r0, [r4, #4]
 800a7e8:	4629      	mov	r1, r5
 800a7ea:	f007 fe0b 	bl	8012404 <rclc_action_remove_used_goal_handle>
 800a7ee:	6860      	ldr	r0, [r4, #4]
 800a7f0:	f007 fe90 	bl	8012514 <rclc_action_find_first_handle_with_result_response>
 800a7f4:	4605      	mov	r5, r0
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d1ee      	bne.n	800a7d8 <_rclc_execute.part.0+0x1c8>
 800a7fa:	e76d      	b.n	800a6d8 <_rclc_execute.part.0+0xc8>
 800a7fc:	6860      	ldr	r0, [r4, #4]
 800a7fe:	f880 5020 	strb.w	r5, [r0, #32]
 800a802:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800a806:	2b00      	cmp	r3, #0
 800a808:	f43f af66 	beq.w	800a6d8 <_rclc_execute.part.0+0xc8>
 800a80c:	68c5      	ldr	r5, [r0, #12]
 800a80e:	b1b5      	cbz	r5, 800a83e <_rclc_execute.part.0+0x22e>
 800a810:	2602      	movs	r6, #2
 800a812:	e001      	b.n	800a818 <_rclc_execute.part.0+0x208>
 800a814:	682d      	ldr	r5, [r5, #0]
 800a816:	b195      	cbz	r5, 800a83e <_rclc_execute.part.0+0x22e>
 800a818:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800a81c:	2b03      	cmp	r3, #3
 800a81e:	d1f9      	bne.n	800a814 <_rclc_execute.part.0+0x204>
 800a820:	69c3      	ldr	r3, [r0, #28]
 800a822:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a824:	4628      	mov	r0, r5
 800a826:	4798      	blx	r3
 800a828:	4603      	mov	r3, r0
 800a82a:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800a82e:	4628      	mov	r0, r5
 800a830:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800a834:	b163      	cbz	r3, 800a850 <_rclc_execute.part.0+0x240>
 800a836:	f007 fe97 	bl	8012568 <rclc_action_server_goal_cancel_accept>
 800a83a:	6860      	ldr	r0, [r4, #4]
 800a83c:	e7ea      	b.n	800a814 <_rclc_execute.part.0+0x204>
 800a83e:	2300      	movs	r3, #0
 800a840:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800a844:	4618      	mov	r0, r3
 800a846:	e739      	b.n	800a6bc <_rclc_execute.part.0+0xac>
 800a848:	4628      	mov	r0, r5
 800a84a:	4798      	blx	r3
 800a84c:	4628      	mov	r0, r5
 800a84e:	e735      	b.n	800a6bc <_rclc_execute.part.0+0xac>
 800a850:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a852:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a856:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800a85a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a85e:	6860      	ldr	r0, [r4, #4]
 800a860:	2101      	movs	r1, #1
 800a862:	f007 fead 	bl	80125c0 <rclc_action_server_goal_cancel_reject>
 800a866:	722e      	strb	r6, [r5, #8]
 800a868:	6860      	ldr	r0, [r4, #4]
 800a86a:	e7d3      	b.n	800a814 <_rclc_execute.part.0+0x204>
 800a86c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a86e:	6880      	ldr	r0, [r0, #8]
 800a870:	4798      	blx	r3
 800a872:	f104 0110 	add.w	r1, r4, #16
 800a876:	e6e7      	b.n	800a648 <_rclc_execute.part.0+0x38>
 800a878:	f100 0110 	add.w	r1, r0, #16
 800a87c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a87e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a880:	6880      	ldr	r0, [r0, #8]
 800a882:	9105      	str	r1, [sp, #20]
 800a884:	4798      	blx	r3
 800a886:	9905      	ldr	r1, [sp, #20]
 800a888:	e6de      	b.n	800a648 <_rclc_execute.part.0+0x38>
 800a88a:	2001      	movs	r0, #1
 800a88c:	e716      	b.n	800a6bc <_rclc_execute.part.0+0xac>
 800a88e:	bf00      	nop

0800a890 <rclc_executor_trigger_any>:
 800a890:	2800      	cmp	r0, #0
 800a892:	d03f      	beq.n	800a914 <rclc_executor_trigger_any+0x84>
 800a894:	2900      	cmp	r1, #0
 800a896:	d03e      	beq.n	800a916 <rclc_executor_trigger_any+0x86>
 800a898:	4603      	mov	r3, r0
 800a89a:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800a89e:	2200      	movs	r2, #0
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	d037      	beq.n	800a914 <rclc_executor_trigger_any+0x84>
 800a8a4:	b430      	push	{r4, r5}
 800a8a6:	f893 c000 	ldrb.w	ip, [r3]
 800a8aa:	f1bc 0f08 	cmp.w	ip, #8
 800a8ae:	d11e      	bne.n	800a8ee <rclc_executor_trigger_any+0x5e>
 800a8b0:	685c      	ldr	r4, [r3, #4]
 800a8b2:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800a8b4:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800a8b8:	d105      	bne.n	800a8c6 <rclc_executor_trigger_any+0x36>
 800a8ba:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800a8be:	b910      	cbnz	r0, 800a8c6 <rclc_executor_trigger_any+0x36>
 800a8c0:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800a8c4:	b128      	cbz	r0, 800a8d2 <rclc_executor_trigger_any+0x42>
 800a8c6:	bc30      	pop	{r4, r5}
 800a8c8:	4770      	bx	lr
 800a8ca:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d1f9      	bne.n	800a8c6 <rclc_executor_trigger_any+0x36>
 800a8d2:	3201      	adds	r2, #1
 800a8d4:	4291      	cmp	r1, r2
 800a8d6:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800a8da:	d018      	beq.n	800a90e <rclc_executor_trigger_any+0x7e>
 800a8dc:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	d0f0      	beq.n	800a8c6 <rclc_executor_trigger_any+0x36>
 800a8e4:	f893 c000 	ldrb.w	ip, [r3]
 800a8e8:	f1bc 0f08 	cmp.w	ip, #8
 800a8ec:	d0e0      	beq.n	800a8b0 <rclc_executor_trigger_any+0x20>
 800a8ee:	f1bc 0f09 	cmp.w	ip, #9
 800a8f2:	d1ea      	bne.n	800a8ca <rclc_executor_trigger_any+0x3a>
 800a8f4:	685c      	ldr	r4, [r3, #4]
 800a8f6:	6a25      	ldr	r5, [r4, #32]
 800a8f8:	2d00      	cmp	r5, #0
 800a8fa:	d1e4      	bne.n	800a8c6 <rclc_executor_trigger_any+0x36>
 800a8fc:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800a900:	2800      	cmp	r0, #0
 800a902:	d1e0      	bne.n	800a8c6 <rclc_executor_trigger_any+0x36>
 800a904:	3201      	adds	r2, #1
 800a906:	4291      	cmp	r1, r2
 800a908:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800a90c:	d1e6      	bne.n	800a8dc <rclc_executor_trigger_any+0x4c>
 800a90e:	2000      	movs	r0, #0
 800a910:	bc30      	pop	{r4, r5}
 800a912:	4770      	bx	lr
 800a914:	4770      	bx	lr
 800a916:	4608      	mov	r0, r1
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop

0800a91c <rclc_executor_get_zero_initialized_executor>:
 800a91c:	b510      	push	{r4, lr}
 800a91e:	4903      	ldr	r1, [pc, #12]	; (800a92c <rclc_executor_get_zero_initialized_executor+0x10>)
 800a920:	4604      	mov	r4, r0
 800a922:	2288      	movs	r2, #136	; 0x88
 800a924:	f00c fc37 	bl	8017196 <memcpy>
 800a928:	4620      	mov	r0, r4
 800a92a:	bd10      	pop	{r4, pc}
 800a92c:	080180c0 	.word	0x080180c0

0800a930 <rclc_executor_init>:
 800a930:	2800      	cmp	r0, #0
 800a932:	d05f      	beq.n	800a9f4 <rclc_executor_init+0xc4>
 800a934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a938:	460c      	mov	r4, r1
 800a93a:	b0b0      	sub	sp, #192	; 0xc0
 800a93c:	2900      	cmp	r1, #0
 800a93e:	d051      	beq.n	800a9e4 <rclc_executor_init+0xb4>
 800a940:	4605      	mov	r5, r0
 800a942:	4618      	mov	r0, r3
 800a944:	4616      	mov	r6, r2
 800a946:	461f      	mov	r7, r3
 800a948:	f000 fbea 	bl	800b120 <rcutils_allocator_is_valid>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	d049      	beq.n	800a9e4 <rclc_executor_init+0xb4>
 800a950:	2e00      	cmp	r6, #0
 800a952:	d047      	beq.n	800a9e4 <rclc_executor_init+0xb4>
 800a954:	492c      	ldr	r1, [pc, #176]	; (800aa08 <rclc_executor_init+0xd8>)
 800a956:	2288      	movs	r2, #136	; 0x88
 800a958:	a80e      	add	r0, sp, #56	; 0x38
 800a95a:	f00c fc1c 	bl	8017196 <memcpy>
 800a95e:	a90e      	add	r1, sp, #56	; 0x38
 800a960:	2288      	movs	r2, #136	; 0x88
 800a962:	4628      	mov	r0, r5
 800a964:	f00c fc17 	bl	8017196 <memcpy>
 800a968:	602c      	str	r4, [r5, #0]
 800a96a:	4668      	mov	r0, sp
 800a96c:	60ae      	str	r6, [r5, #8]
 800a96e:	466c      	mov	r4, sp
 800a970:	f006 faf6 	bl	8010f60 <rcl_get_zero_initialized_wait_set>
 800a974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a976:	f105 0c14 	add.w	ip, r5, #20
 800a97a:	f8d7 8000 	ldr.w	r8, [r7]
 800a97e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a984:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a98a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a98e:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 800aa00 <rclc_executor_init+0xd0>
 800a992:	6823      	ldr	r3, [r4, #0]
 800a994:	f8cc 3000 	str.w	r3, [ip]
 800a998:	6939      	ldr	r1, [r7, #16]
 800a99a:	612f      	str	r7, [r5, #16]
 800a99c:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 800a9a0:	01b0      	lsls	r0, r6, #6
 800a9a2:	47c0      	blx	r8
 800a9a4:	6068      	str	r0, [r5, #4]
 800a9a6:	b338      	cbz	r0, 800a9f8 <rclc_executor_init+0xc8>
 800a9a8:	2400      	movs	r4, #0
 800a9aa:	e000      	b.n	800a9ae <rclc_executor_init+0x7e>
 800a9ac:	6868      	ldr	r0, [r5, #4]
 800a9ae:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800a9b2:	4631      	mov	r1, r6
 800a9b4:	3401      	adds	r4, #1
 800a9b6:	f000 fa6b 	bl	800ae90 <rclc_executor_handle_init>
 800a9ba:	42a6      	cmp	r6, r4
 800a9bc:	d1f6      	bne.n	800a9ac <rclc_executor_init+0x7c>
 800a9be:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800a9c2:	f000 fa5b 	bl	800ae7c <rclc_executor_handle_counters_zero_init>
 800a9c6:	4a11      	ldr	r2, [pc, #68]	; (800aa0c <rclc_executor_init+0xdc>)
 800a9c8:	686b      	ldr	r3, [r5, #4]
 800a9ca:	2000      	movs	r0, #0
 800a9cc:	e9c5 201e 	strd	r2, r0, [r5, #120]	; 0x78
 800a9d0:	b163      	cbz	r3, 800a9ec <rclc_executor_init+0xbc>
 800a9d2:	692b      	ldr	r3, [r5, #16]
 800a9d4:	b153      	cbz	r3, 800a9ec <rclc_executor_init+0xbc>
 800a9d6:	68ab      	ldr	r3, [r5, #8]
 800a9d8:	b143      	cbz	r3, 800a9ec <rclc_executor_init+0xbc>
 800a9da:	f885 0080 	strb.w	r0, [r5, #128]	; 0x80
 800a9de:	b030      	add	sp, #192	; 0xc0
 800a9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9e4:	200b      	movs	r0, #11
 800a9e6:	b030      	add	sp, #192	; 0xc0
 800a9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	b030      	add	sp, #192	; 0xc0
 800a9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f4:	200b      	movs	r0, #11
 800a9f6:	4770      	bx	lr
 800a9f8:	200a      	movs	r0, #10
 800a9fa:	e7f4      	b.n	800a9e6 <rclc_executor_init+0xb6>
 800a9fc:	f3af 8000 	nop.w
 800aa00:	3b9aca00 	.word	0x3b9aca00
 800aa04:	00000000 	.word	0x00000000
 800aa08:	080180c0 	.word	0x080180c0
 800aa0c:	0800a891 	.word	0x0800a891

0800aa10 <rclc_executor_add_subscription>:
 800aa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa12:	f89d e018 	ldrb.w	lr, [sp, #24]
 800aa16:	b338      	cbz	r0, 800aa68 <rclc_executor_add_subscription+0x58>
 800aa18:	b331      	cbz	r1, 800aa68 <rclc_executor_add_subscription+0x58>
 800aa1a:	b32a      	cbz	r2, 800aa68 <rclc_executor_add_subscription+0x58>
 800aa1c:	b323      	cbz	r3, 800aa68 <rclc_executor_add_subscription+0x58>
 800aa1e:	4604      	mov	r4, r0
 800aa20:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800aa24:	42a8      	cmp	r0, r5
 800aa26:	d301      	bcc.n	800aa2c <rclc_executor_add_subscription+0x1c>
 800aa28:	2001      	movs	r0, #1
 800aa2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa2c:	6866      	ldr	r6, [r4, #4]
 800aa2e:	0187      	lsls	r7, r0, #6
 800aa30:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800aa34:	2500      	movs	r5, #0
 800aa36:	55f5      	strb	r5, [r6, r7]
 800aa38:	3001      	adds	r0, #1
 800aa3a:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
 800aa3e:	f8cc 502c 	str.w	r5, [ip, #44]	; 0x2c
 800aa42:	2301      	movs	r3, #1
 800aa44:	f104 0514 	add.w	r5, r4, #20
 800aa48:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800aa4c:	f88c e001 	strb.w	lr, [ip, #1]
 800aa50:	f8ac 3038 	strh.w	r3, [ip, #56]	; 0x38
 800aa54:	60e0      	str	r0, [r4, #12]
 800aa56:	4628      	mov	r0, r5
 800aa58:	f006 fa96 	bl	8010f88 <rcl_wait_set_is_valid>
 800aa5c:	b930      	cbnz	r0, 800aa6c <rclc_executor_add_subscription+0x5c>
 800aa5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800aa60:	3301      	adds	r3, #1
 800aa62:	2000      	movs	r0, #0
 800aa64:	64a3      	str	r3, [r4, #72]	; 0x48
 800aa66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa68:	200b      	movs	r0, #11
 800aa6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	f006 fa91 	bl	8010f94 <rcl_wait_set_fini>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d0f3      	beq.n	800aa5e <rclc_executor_add_subscription+0x4e>
 800aa76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa78 <rclc_executor_prepare>:
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	d044      	beq.n	800ab06 <rclc_executor_prepare+0x8e>
 800aa7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa7e:	f100 0514 	add.w	r5, r0, #20
 800aa82:	b09b      	sub	sp, #108	; 0x6c
 800aa84:	4604      	mov	r4, r0
 800aa86:	4628      	mov	r0, r5
 800aa88:	f006 fa7e 	bl	8010f88 <rcl_wait_set_is_valid>
 800aa8c:	b110      	cbz	r0, 800aa94 <rclc_executor_prepare+0x1c>
 800aa8e:	2000      	movs	r0, #0
 800aa90:	b01b      	add	sp, #108	; 0x6c
 800aa92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa94:	4628      	mov	r0, r5
 800aa96:	f006 fa7d 	bl	8010f94 <rcl_wait_set_fini>
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	d130      	bne.n	800ab00 <rclc_executor_prepare+0x88>
 800aa9e:	a80c      	add	r0, sp, #48	; 0x30
 800aaa0:	f006 fa5e 	bl	8010f60 <rcl_get_zero_initialized_wait_set>
 800aaa4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800aaa8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aaac:	46ae      	mov	lr, r5
 800aaae:	6927      	ldr	r7, [r4, #16]
 800aab0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aab4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aab8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aabc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aac0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aac4:	f8dc 3000 	ldr.w	r3, [ip]
 800aac8:	f8ce 3000 	str.w	r3, [lr]
 800aacc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800aace:	ae04      	add	r6, sp, #16
 800aad0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	6822      	ldr	r2, [r4, #0]
 800aad6:	6033      	str	r3, [r6, #0]
 800aad8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aada:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800aadc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800aae0:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 800aae4:	e9cd 2100 	strd	r2, r1, [sp]
 800aae8:	4628      	mov	r0, r5
 800aaea:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800aaec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aaee:	f006 fd4f 	bl	8011590 <rcl_wait_set_init>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	d0cc      	beq.n	800aa90 <rclc_executor_prepare+0x18>
 800aaf6:	900b      	str	r0, [sp, #44]	; 0x2c
 800aaf8:	f000 fb36 	bl	800b168 <rcutils_reset_error>
 800aafc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aafe:	e7c7      	b.n	800aa90 <rclc_executor_prepare+0x18>
 800ab00:	f000 fb32 	bl	800b168 <rcutils_reset_error>
 800ab04:	e7cb      	b.n	800aa9e <rclc_executor_prepare+0x26>
 800ab06:	200b      	movs	r0, #11
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop

0800ab0c <rclc_executor_spin_some.part.0>:
 800ab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab10:	f100 0614 	add.w	r6, r0, #20
 800ab14:	b083      	sub	sp, #12
 800ab16:	4691      	mov	r9, r2
 800ab18:	4698      	mov	r8, r3
 800ab1a:	4605      	mov	r5, r0
 800ab1c:	f7ff ffac 	bl	800aa78 <rclc_executor_prepare>
 800ab20:	4630      	mov	r0, r6
 800ab22:	f006 fb03 	bl	801112c <rcl_wait_set_clear>
 800ab26:	4607      	mov	r7, r0
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	f040 80ed 	bne.w	800ad08 <rclc_executor_spin_some.part.0+0x1fc>
 800ab2e:	68ab      	ldr	r3, [r5, #8]
 800ab30:	4604      	mov	r4, r0
 800ab32:	b303      	cbz	r3, 800ab76 <rclc_executor_spin_some.part.0+0x6a>
 800ab34:	6869      	ldr	r1, [r5, #4]
 800ab36:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800ab3a:	01a2      	lsls	r2, r4, #6
 800ab3c:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800ab40:	b1cb      	cbz	r3, 800ab76 <rclc_executor_spin_some.part.0+0x6a>
 800ab42:	5c8b      	ldrb	r3, [r1, r2]
 800ab44:	2b0a      	cmp	r3, #10
 800ab46:	f200 80d8 	bhi.w	800acfa <rclc_executor_spin_some.part.0+0x1ee>
 800ab4a:	e8df f003 	tbb	[pc, r3]
 800ab4e:	9c9c      	.short	0x9c9c
 800ab50:	068c8ca7 	.word	0x068c8ca7
 800ab54:	bdc90606 	.word	0xbdc90606
 800ab58:	b2          	.byte	0xb2
 800ab59:	00          	.byte	0x00
 800ab5a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ab5e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800ab62:	4630      	mov	r0, r6
 800ab64:	f006 fe2a 	bl	80117bc <rcl_wait_set_add_service>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	f040 8086 	bne.w	800ac7a <rclc_executor_spin_some.part.0+0x16e>
 800ab6e:	68ab      	ldr	r3, [r5, #8]
 800ab70:	3401      	adds	r4, #1
 800ab72:	429c      	cmp	r4, r3
 800ab74:	d3de      	bcc.n	800ab34 <rclc_executor_spin_some.part.0+0x28>
 800ab76:	4643      	mov	r3, r8
 800ab78:	464a      	mov	r2, r9
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	f006 fe4c 	bl	8011818 <rcl_wait>
 800ab80:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 80c7 	beq.w	800ad18 <rclc_executor_spin_some.part.0+0x20c>
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	f040 80b5 	bne.w	800acfa <rclc_executor_spin_some.part.0+0x1ee>
 800ab90:	68ab      	ldr	r3, [r5, #8]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f000 8159 	beq.w	800ae4a <rclc_executor_spin_some.part.0+0x33e>
 800ab98:	2400      	movs	r4, #0
 800ab9a:	46a0      	mov	r8, r4
 800ab9c:	f240 1991 	movw	r9, #401	; 0x191
 800aba0:	e00a      	b.n	800abb8 <rclc_executor_spin_some.part.0+0xac>
 800aba2:	f7ff fb73 	bl	800a28c <_rclc_check_for_new_data>
 800aba6:	4604      	mov	r4, r0
 800aba8:	b110      	cbz	r0, 800abb0 <rclc_executor_spin_some.part.0+0xa4>
 800abaa:	4548      	cmp	r0, r9
 800abac:	f040 80b2 	bne.w	800ad14 <rclc_executor_spin_some.part.0+0x208>
 800abb0:	68ab      	ldr	r3, [r5, #8]
 800abb2:	4598      	cmp	r8, r3
 800abb4:	f080 8126 	bcs.w	800ae04 <rclc_executor_spin_some.part.0+0x2f8>
 800abb8:	686a      	ldr	r2, [r5, #4]
 800abba:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800abbe:	4631      	mov	r1, r6
 800abc0:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800abc4:	f108 0801 	add.w	r8, r8, #1
 800abc8:	f1bc 0f00 	cmp.w	ip, #0
 800abcc:	d1e9      	bne.n	800aba2 <rclc_executor_spin_some.part.0+0x96>
 800abce:	4619      	mov	r1, r3
 800abd0:	4610      	mov	r0, r2
 800abd2:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800abd6:	4798      	blx	r3
 800abd8:	2800      	cmp	r0, #0
 800abda:	f000 809b 	beq.w	800ad14 <rclc_executor_spin_some.part.0+0x208>
 800abde:	68ab      	ldr	r3, [r5, #8]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f000 8097 	beq.w	800ad14 <rclc_executor_spin_some.part.0+0x208>
 800abe6:	f04f 0800 	mov.w	r8, #0
 800abea:	f240 1991 	movw	r9, #401	; 0x191
 800abee:	e009      	b.n	800ac04 <rclc_executor_spin_some.part.0+0xf8>
 800abf0:	f7ff fb9a 	bl	800a328 <_rclc_take_new_data>
 800abf4:	4604      	mov	r4, r0
 800abf6:	b110      	cbz	r0, 800abfe <rclc_executor_spin_some.part.0+0xf2>
 800abf8:	4548      	cmp	r0, r9
 800abfa:	f040 808b 	bne.w	800ad14 <rclc_executor_spin_some.part.0+0x208>
 800abfe:	68ab      	ldr	r3, [r5, #8]
 800ac00:	4598      	cmp	r8, r3
 800ac02:	d209      	bcs.n	800ac18 <rclc_executor_spin_some.part.0+0x10c>
 800ac04:	6868      	ldr	r0, [r5, #4]
 800ac06:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800ac0a:	4631      	mov	r1, r6
 800ac0c:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800ac10:	f108 0801 	add.w	r8, r8, #1
 800ac14:	2a00      	cmp	r2, #0
 800ac16:	d1eb      	bne.n	800abf0 <rclc_executor_spin_some.part.0+0xe4>
 800ac18:	2600      	movs	r6, #0
 800ac1a:	b97b      	cbnz	r3, 800ac3c <rclc_executor_spin_some.part.0+0x130>
 800ac1c:	e07a      	b.n	800ad14 <rclc_executor_spin_some.part.0+0x208>
 800ac1e:	f812 200c 	ldrb.w	r2, [r2, ip]
 800ac22:	2a08      	cmp	r2, #8
 800ac24:	f000 80fd 	beq.w	800ae22 <rclc_executor_spin_some.part.0+0x316>
 800ac28:	2a09      	cmp	r2, #9
 800ac2a:	f000 80ef 	beq.w	800ae0c <rclc_executor_spin_some.part.0+0x300>
 800ac2e:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800ac32:	b98a      	cbnz	r2, 800ac58 <rclc_executor_spin_some.part.0+0x14c>
 800ac34:	3601      	adds	r6, #1
 800ac36:	429e      	cmp	r6, r3
 800ac38:	d262      	bcs.n	800ad00 <rclc_executor_spin_some.part.0+0x1f4>
 800ac3a:	2400      	movs	r4, #0
 800ac3c:	686a      	ldr	r2, [r5, #4]
 800ac3e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800ac42:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800ac46:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800ac4a:	2900      	cmp	r1, #0
 800ac4c:	d062      	beq.n	800ad14 <rclc_executor_spin_some.part.0+0x208>
 800ac4e:	7841      	ldrb	r1, [r0, #1]
 800ac50:	2900      	cmp	r1, #0
 800ac52:	d0e4      	beq.n	800ac1e <rclc_executor_spin_some.part.0+0x112>
 800ac54:	2901      	cmp	r1, #1
 800ac56:	d1ed      	bne.n	800ac34 <rclc_executor_spin_some.part.0+0x128>
 800ac58:	f7ff fcda 	bl	800a610 <_rclc_execute.part.0>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	f040 80b6 	bne.w	800adce <rclc_executor_spin_some.part.0+0x2c2>
 800ac62:	68ab      	ldr	r3, [r5, #8]
 800ac64:	e7e6      	b.n	800ac34 <rclc_executor_spin_some.part.0+0x128>
 800ac66:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ac6a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800ac6e:	4630      	mov	r0, r6
 800ac70:	f006 fd78 	bl	8011764 <rcl_wait_set_add_client>
 800ac74:	2800      	cmp	r0, #0
 800ac76:	f43f af7a 	beq.w	800ab6e <rclc_executor_spin_some.part.0+0x62>
 800ac7a:	9001      	str	r0, [sp, #4]
 800ac7c:	f000 fa74 	bl	800b168 <rcutils_reset_error>
 800ac80:	9801      	ldr	r0, [sp, #4]
 800ac82:	4607      	mov	r7, r0
 800ac84:	e03c      	b.n	800ad00 <rclc_executor_spin_some.part.0+0x1f4>
 800ac86:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ac8a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800ac8e:	4630      	mov	r0, r6
 800ac90:	f006 fa20 	bl	80110d4 <rcl_wait_set_add_subscription>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	f43f af6a 	beq.w	800ab6e <rclc_executor_spin_some.part.0+0x62>
 800ac9a:	e7ee      	b.n	800ac7a <rclc_executor_spin_some.part.0+0x16e>
 800ac9c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800aca0:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800aca4:	4630      	mov	r0, r6
 800aca6:	f006 fd2d 	bl	8011704 <rcl_wait_set_add_timer>
 800acaa:	2800      	cmp	r0, #0
 800acac:	f43f af5f 	beq.w	800ab6e <rclc_executor_spin_some.part.0+0x62>
 800acb0:	e7e3      	b.n	800ac7a <rclc_executor_spin_some.part.0+0x16e>
 800acb2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800acb6:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800acba:	4630      	mov	r0, r6
 800acbc:	f006 fcf6 	bl	80116ac <rcl_wait_set_add_guard_condition>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	f43f af54 	beq.w	800ab6e <rclc_executor_spin_some.part.0+0x62>
 800acc6:	e7d8      	b.n	800ac7a <rclc_executor_spin_some.part.0+0x16e>
 800acc8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800accc:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800acd0:	3110      	adds	r1, #16
 800acd2:	4630      	mov	r0, r6
 800acd4:	f007 fa76 	bl	80121c4 <rcl_action_wait_set_add_action_server>
 800acd8:	2800      	cmp	r0, #0
 800acda:	f43f af48 	beq.w	800ab6e <rclc_executor_spin_some.part.0+0x62>
 800acde:	e7cc      	b.n	800ac7a <rclc_executor_spin_some.part.0+0x16e>
 800ace0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ace4:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800ace8:	3110      	adds	r1, #16
 800acea:	2300      	movs	r3, #0
 800acec:	4630      	mov	r0, r6
 800acee:	f007 f843 	bl	8011d78 <rcl_action_wait_set_add_action_client>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	f43f af3b 	beq.w	800ab6e <rclc_executor_spin_some.part.0+0x62>
 800acf8:	e7bf      	b.n	800ac7a <rclc_executor_spin_some.part.0+0x16e>
 800acfa:	f000 fa35 	bl	800b168 <rcutils_reset_error>
 800acfe:	2701      	movs	r7, #1
 800ad00:	4638      	mov	r0, r7
 800ad02:	b003      	add	sp, #12
 800ad04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad08:	f000 fa2e 	bl	800b168 <rcutils_reset_error>
 800ad0c:	4638      	mov	r0, r7
 800ad0e:	b003      	add	sp, #12
 800ad10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad14:	4627      	mov	r7, r4
 800ad16:	e7f3      	b.n	800ad00 <rclc_executor_spin_some.part.0+0x1f4>
 800ad18:	68ab      	ldr	r3, [r5, #8]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f000 8092 	beq.w	800ae44 <rclc_executor_spin_some.part.0+0x338>
 800ad20:	2400      	movs	r4, #0
 800ad22:	46a0      	mov	r8, r4
 800ad24:	f240 1991 	movw	r9, #401	; 0x191
 800ad28:	e008      	b.n	800ad3c <rclc_executor_spin_some.part.0+0x230>
 800ad2a:	f7ff faaf 	bl	800a28c <_rclc_check_for_new_data>
 800ad2e:	4604      	mov	r4, r0
 800ad30:	b108      	cbz	r0, 800ad36 <rclc_executor_spin_some.part.0+0x22a>
 800ad32:	4548      	cmp	r0, r9
 800ad34:	d1ee      	bne.n	800ad14 <rclc_executor_spin_some.part.0+0x208>
 800ad36:	68ab      	ldr	r3, [r5, #8]
 800ad38:	4598      	cmp	r8, r3
 800ad3a:	d265      	bcs.n	800ae08 <rclc_executor_spin_some.part.0+0x2fc>
 800ad3c:	686a      	ldr	r2, [r5, #4]
 800ad3e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ad42:	4631      	mov	r1, r6
 800ad44:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800ad48:	f108 0801 	add.w	r8, r8, #1
 800ad4c:	f1bc 0f00 	cmp.w	ip, #0
 800ad50:	d1eb      	bne.n	800ad2a <rclc_executor_spin_some.part.0+0x21e>
 800ad52:	4619      	mov	r1, r3
 800ad54:	4610      	mov	r0, r2
 800ad56:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800ad5a:	4798      	blx	r3
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d0d9      	beq.n	800ad14 <rclc_executor_spin_some.part.0+0x208>
 800ad60:	68ab      	ldr	r3, [r5, #8]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d0d6      	beq.n	800ad14 <rclc_executor_spin_some.part.0+0x208>
 800ad66:	f04f 0800 	mov.w	r8, #0
 800ad6a:	f240 1991 	movw	r9, #401	; 0x191
 800ad6e:	f240 2a59 	movw	sl, #601	; 0x259
 800ad72:	e00e      	b.n	800ad92 <rclc_executor_spin_some.part.0+0x286>
 800ad74:	f813 300b 	ldrb.w	r3, [r3, fp]
 800ad78:	2b08      	cmp	r3, #8
 800ad7a:	d033      	beq.n	800ade4 <rclc_executor_spin_some.part.0+0x2d8>
 800ad7c:	2b09      	cmp	r3, #9
 800ad7e:	d028      	beq.n	800add2 <rclc_executor_spin_some.part.0+0x2c6>
 800ad80:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800ad84:	b9fb      	cbnz	r3, 800adc6 <rclc_executor_spin_some.part.0+0x2ba>
 800ad86:	68ab      	ldr	r3, [r5, #8]
 800ad88:	f108 0801 	add.w	r8, r8, #1
 800ad8c:	4598      	cmp	r8, r3
 800ad8e:	d2b7      	bcs.n	800ad00 <rclc_executor_spin_some.part.0+0x1f4>
 800ad90:	2400      	movs	r4, #0
 800ad92:	6868      	ldr	r0, [r5, #4]
 800ad94:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800ad98:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800ad9c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d0b7      	beq.n	800ad14 <rclc_executor_spin_some.part.0+0x208>
 800ada4:	4631      	mov	r1, r6
 800ada6:	f7ff fabf 	bl	800a328 <_rclc_take_new_data>
 800adaa:	b118      	cbz	r0, 800adb4 <rclc_executor_spin_some.part.0+0x2a8>
 800adac:	4548      	cmp	r0, r9
 800adae:	d001      	beq.n	800adb4 <rclc_executor_spin_some.part.0+0x2a8>
 800adb0:	4550      	cmp	r0, sl
 800adb2:	d10c      	bne.n	800adce <rclc_executor_spin_some.part.0+0x2c2>
 800adb4:	686b      	ldr	r3, [r5, #4]
 800adb6:	eb13 000b 	adds.w	r0, r3, fp
 800adba:	d021      	beq.n	800ae00 <rclc_executor_spin_some.part.0+0x2f4>
 800adbc:	7842      	ldrb	r2, [r0, #1]
 800adbe:	2a00      	cmp	r2, #0
 800adc0:	d0d8      	beq.n	800ad74 <rclc_executor_spin_some.part.0+0x268>
 800adc2:	2a01      	cmp	r2, #1
 800adc4:	d1df      	bne.n	800ad86 <rclc_executor_spin_some.part.0+0x27a>
 800adc6:	f7ff fc23 	bl	800a610 <_rclc_execute.part.0>
 800adca:	2800      	cmp	r0, #0
 800adcc:	d0db      	beq.n	800ad86 <rclc_executor_spin_some.part.0+0x27a>
 800adce:	4607      	mov	r7, r0
 800add0:	e796      	b.n	800ad00 <rclc_executor_spin_some.part.0+0x1f4>
 800add2:	6843      	ldr	r3, [r0, #4]
 800add4:	6a1a      	ldr	r2, [r3, #32]
 800add6:	2a00      	cmp	r2, #0
 800add8:	d1f5      	bne.n	800adc6 <rclc_executor_spin_some.part.0+0x2ba>
 800adda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d0d1      	beq.n	800ad86 <rclc_executor_spin_some.part.0+0x27a>
 800ade2:	e7f0      	b.n	800adc6 <rclc_executor_spin_some.part.0+0x2ba>
 800ade4:	6843      	ldr	r3, [r0, #4]
 800ade6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ade8:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800adec:	d1eb      	bne.n	800adc6 <rclc_executor_spin_some.part.0+0x2ba>
 800adee:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800adf2:	2a00      	cmp	r2, #0
 800adf4:	d1e7      	bne.n	800adc6 <rclc_executor_spin_some.part.0+0x2ba>
 800adf6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d0c3      	beq.n	800ad86 <rclc_executor_spin_some.part.0+0x27a>
 800adfe:	e7e2      	b.n	800adc6 <rclc_executor_spin_some.part.0+0x2ba>
 800ae00:	270b      	movs	r7, #11
 800ae02:	e77d      	b.n	800ad00 <rclc_executor_spin_some.part.0+0x1f4>
 800ae04:	686a      	ldr	r2, [r5, #4]
 800ae06:	e6e2      	b.n	800abce <rclc_executor_spin_some.part.0+0xc2>
 800ae08:	686a      	ldr	r2, [r5, #4]
 800ae0a:	e7a2      	b.n	800ad52 <rclc_executor_spin_some.part.0+0x246>
 800ae0c:	6842      	ldr	r2, [r0, #4]
 800ae0e:	6a11      	ldr	r1, [r2, #32]
 800ae10:	2900      	cmp	r1, #0
 800ae12:	f47f af21 	bne.w	800ac58 <rclc_executor_spin_some.part.0+0x14c>
 800ae16:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800ae1a:	2a00      	cmp	r2, #0
 800ae1c:	f43f af0a 	beq.w	800ac34 <rclc_executor_spin_some.part.0+0x128>
 800ae20:	e71a      	b.n	800ac58 <rclc_executor_spin_some.part.0+0x14c>
 800ae22:	6842      	ldr	r2, [r0, #4]
 800ae24:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ae26:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800ae2a:	f47f af15 	bne.w	800ac58 <rclc_executor_spin_some.part.0+0x14c>
 800ae2e:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800ae32:	2900      	cmp	r1, #0
 800ae34:	f47f af10 	bne.w	800ac58 <rclc_executor_spin_some.part.0+0x14c>
 800ae38:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800ae3c:	2a00      	cmp	r2, #0
 800ae3e:	f43f aef9 	beq.w	800ac34 <rclc_executor_spin_some.part.0+0x128>
 800ae42:	e709      	b.n	800ac58 <rclc_executor_spin_some.part.0+0x14c>
 800ae44:	686a      	ldr	r2, [r5, #4]
 800ae46:	461c      	mov	r4, r3
 800ae48:	e783      	b.n	800ad52 <rclc_executor_spin_some.part.0+0x246>
 800ae4a:	686a      	ldr	r2, [r5, #4]
 800ae4c:	461c      	mov	r4, r3
 800ae4e:	e6be      	b.n	800abce <rclc_executor_spin_some.part.0+0xc2>

0800ae50 <rclc_executor_spin_some>:
 800ae50:	b190      	cbz	r0, 800ae78 <rclc_executor_spin_some+0x28>
 800ae52:	b570      	push	{r4, r5, r6, lr}
 800ae54:	4604      	mov	r4, r0
 800ae56:	6800      	ldr	r0, [r0, #0]
 800ae58:	4616      	mov	r6, r2
 800ae5a:	461d      	mov	r5, r3
 800ae5c:	f004 fef4 	bl	800fc48 <rcl_context_is_valid>
 800ae60:	b130      	cbz	r0, 800ae70 <rclc_executor_spin_some+0x20>
 800ae62:	4632      	mov	r2, r6
 800ae64:	462b      	mov	r3, r5
 800ae66:	4620      	mov	r0, r4
 800ae68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae6c:	f7ff be4e 	b.w	800ab0c <rclc_executor_spin_some.part.0>
 800ae70:	f000 f97a 	bl	800b168 <rcutils_reset_error>
 800ae74:	2001      	movs	r0, #1
 800ae76:	bd70      	pop	{r4, r5, r6, pc}
 800ae78:	200b      	movs	r0, #11
 800ae7a:	4770      	bx	lr

0800ae7c <rclc_executor_handle_counters_zero_init>:
 800ae7c:	b130      	cbz	r0, 800ae8c <rclc_executor_handle_counters_zero_init+0x10>
 800ae7e:	b508      	push	{r3, lr}
 800ae80:	2220      	movs	r2, #32
 800ae82:	2100      	movs	r1, #0
 800ae84:	f00c f868 	bl	8016f58 <memset>
 800ae88:	2000      	movs	r0, #0
 800ae8a:	bd08      	pop	{r3, pc}
 800ae8c:	200b      	movs	r0, #11
 800ae8e:	4770      	bx	lr

0800ae90 <rclc_executor_handle_init>:
 800ae90:	b168      	cbz	r0, 800aeae <rclc_executor_handle_init+0x1e>
 800ae92:	ed9f 7b09 	vldr	d7, [pc, #36]	; 800aeb8 <rclc_executor_handle_init+0x28>
 800ae96:	2300      	movs	r3, #0
 800ae98:	220b      	movs	r2, #11
 800ae9a:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
 800ae9e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800aea2:	e9c0 310c 	strd	r3, r1, [r0, #48]	; 0x30
 800aea6:	8002      	strh	r2, [r0, #0]
 800aea8:	8703      	strh	r3, [r0, #56]	; 0x38
 800aeaa:	4618      	mov	r0, r3
 800aeac:	4770      	bx	lr
 800aeae:	200b      	movs	r0, #11
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	f3af 8000 	nop.w
	...

0800aec0 <rclc_support_init>:
 800aec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec4:	b086      	sub	sp, #24
 800aec6:	b3b8      	cbz	r0, 800af38 <rclc_support_init+0x78>
 800aec8:	461c      	mov	r4, r3
 800aeca:	b3ab      	cbz	r3, 800af38 <rclc_support_init+0x78>
 800aecc:	460f      	mov	r7, r1
 800aece:	4690      	mov	r8, r2
 800aed0:	4606      	mov	r6, r0
 800aed2:	f005 f823 	bl	800ff1c <rcl_get_zero_initialized_init_options>
 800aed6:	f104 030c 	add.w	r3, r4, #12
 800aeda:	9005      	str	r0, [sp, #20]
 800aedc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aee0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800aee4:	a805      	add	r0, sp, #20
 800aee6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800aeea:	f005 f819 	bl	800ff20 <rcl_init_options_init>
 800aeee:	4605      	mov	r5, r0
 800aef0:	b9e0      	cbnz	r0, 800af2c <rclc_support_init+0x6c>
 800aef2:	ad02      	add	r5, sp, #8
 800aef4:	4628      	mov	r0, r5
 800aef6:	f004 fe9d 	bl	800fc34 <rcl_get_zero_initialized_context>
 800aefa:	e895 0003 	ldmia.w	r5, {r0, r1}
 800aefe:	4633      	mov	r3, r6
 800af00:	e886 0003 	stmia.w	r6, {r0, r1}
 800af04:	aa05      	add	r2, sp, #20
 800af06:	4641      	mov	r1, r8
 800af08:	4638      	mov	r0, r7
 800af0a:	f004 ff03 	bl	800fd14 <rcl_init>
 800af0e:	4605      	mov	r5, r0
 800af10:	b9b8      	cbnz	r0, 800af42 <rclc_support_init+0x82>
 800af12:	60b4      	str	r4, [r6, #8]
 800af14:	4622      	mov	r2, r4
 800af16:	f106 010c 	add.w	r1, r6, #12
 800af1a:	2003      	movs	r0, #3
 800af1c:	f005 fe2a 	bl	8010b74 <rcl_clock_init>
 800af20:	4605      	mov	r5, r0
 800af22:	b970      	cbnz	r0, 800af42 <rclc_support_init+0x82>
 800af24:	a805      	add	r0, sp, #20
 800af26:	f005 f861 	bl	800ffec <rcl_init_options_fini>
 800af2a:	b108      	cbz	r0, 800af30 <rclc_support_init+0x70>
 800af2c:	f000 f91c 	bl	800b168 <rcutils_reset_error>
 800af30:	4628      	mov	r0, r5
 800af32:	b006      	add	sp, #24
 800af34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af38:	250b      	movs	r5, #11
 800af3a:	4628      	mov	r0, r5
 800af3c:	b006      	add	sp, #24
 800af3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af42:	f000 f911 	bl	800b168 <rcutils_reset_error>
 800af46:	a805      	add	r0, sp, #20
 800af48:	f005 f850 	bl	800ffec <rcl_init_options_fini>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	d0ef      	beq.n	800af30 <rclc_support_init+0x70>
 800af50:	e7ec      	b.n	800af2c <rclc_support_init+0x6c>
 800af52:	bf00      	nop

0800af54 <rclc_node_init_default>:
 800af54:	b3b8      	cbz	r0, 800afc6 <rclc_node_init_default+0x72>
 800af56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af5a:	460d      	mov	r5, r1
 800af5c:	b0a1      	sub	sp, #132	; 0x84
 800af5e:	b329      	cbz	r1, 800afac <rclc_node_init_default+0x58>
 800af60:	4616      	mov	r6, r2
 800af62:	b31a      	cbz	r2, 800afac <rclc_node_init_default+0x58>
 800af64:	461f      	mov	r7, r3
 800af66:	b30b      	cbz	r3, 800afac <rclc_node_init_default+0x58>
 800af68:	f10d 0810 	add.w	r8, sp, #16
 800af6c:	4604      	mov	r4, r0
 800af6e:	4640      	mov	r0, r8
 800af70:	f005 f8f4 	bl	801015c <rcl_get_zero_initialized_node>
 800af74:	e898 0003 	ldmia.w	r8, {r0, r1}
 800af78:	f10d 0918 	add.w	r9, sp, #24
 800af7c:	e884 0003 	stmia.w	r4, {r0, r1}
 800af80:	4648      	mov	r0, r9
 800af82:	f005 fa63 	bl	801044c <rcl_node_get_default_options>
 800af86:	4640      	mov	r0, r8
 800af88:	f005 f8e8 	bl	801015c <rcl_get_zero_initialized_node>
 800af8c:	f8cd 9000 	str.w	r9, [sp]
 800af90:	e898 0003 	ldmia.w	r8, {r0, r1}
 800af94:	463b      	mov	r3, r7
 800af96:	e884 0003 	stmia.w	r4, {r0, r1}
 800af9a:	4632      	mov	r2, r6
 800af9c:	4629      	mov	r1, r5
 800af9e:	4620      	mov	r0, r4
 800afa0:	f005 f8e6 	bl	8010170 <rcl_node_init>
 800afa4:	b930      	cbnz	r0, 800afb4 <rclc_node_init_default+0x60>
 800afa6:	b021      	add	sp, #132	; 0x84
 800afa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afac:	200b      	movs	r0, #11
 800afae:	b021      	add	sp, #132	; 0x84
 800afb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afb4:	9003      	str	r0, [sp, #12]
 800afb6:	f000 f8d7 	bl	800b168 <rcutils_reset_error>
 800afba:	f000 f8d5 	bl	800b168 <rcutils_reset_error>
 800afbe:	9803      	ldr	r0, [sp, #12]
 800afc0:	b021      	add	sp, #132	; 0x84
 800afc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afc6:	200b      	movs	r0, #11
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop

0800afcc <rclc_publisher_init_default>:
 800afcc:	b368      	cbz	r0, 800b02a <rclc_publisher_init_default+0x5e>
 800afce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afd2:	460d      	mov	r5, r1
 800afd4:	b0a0      	sub	sp, #128	; 0x80
 800afd6:	b321      	cbz	r1, 800b022 <rclc_publisher_init_default+0x56>
 800afd8:	4616      	mov	r6, r2
 800afda:	b312      	cbz	r2, 800b022 <rclc_publisher_init_default+0x56>
 800afdc:	461f      	mov	r7, r3
 800afde:	b303      	cbz	r3, 800b022 <rclc_publisher_init_default+0x56>
 800afe0:	4604      	mov	r4, r0
 800afe2:	f7ff f843 	bl	800a06c <rcl_get_zero_initialized_publisher>
 800afe6:	f10d 0810 	add.w	r8, sp, #16
 800afea:	6020      	str	r0, [r4, #0]
 800afec:	4640      	mov	r0, r8
 800afee:	f7ff f8d9 	bl	800a1a4 <rcl_publisher_get_default_options>
 800aff2:	490f      	ldr	r1, [pc, #60]	; (800b030 <rclc_publisher_init_default+0x64>)
 800aff4:	2250      	movs	r2, #80	; 0x50
 800aff6:	4640      	mov	r0, r8
 800aff8:	f00c f8cd 	bl	8017196 <memcpy>
 800affc:	f8cd 8000 	str.w	r8, [sp]
 800b000:	463b      	mov	r3, r7
 800b002:	4632      	mov	r2, r6
 800b004:	4629      	mov	r1, r5
 800b006:	4620      	mov	r0, r4
 800b008:	f7ff f836 	bl	800a078 <rcl_publisher_init>
 800b00c:	b910      	cbnz	r0, 800b014 <rclc_publisher_init_default+0x48>
 800b00e:	b020      	add	sp, #128	; 0x80
 800b010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b014:	9003      	str	r0, [sp, #12]
 800b016:	f000 f8a7 	bl	800b168 <rcutils_reset_error>
 800b01a:	9803      	ldr	r0, [sp, #12]
 800b01c:	b020      	add	sp, #128	; 0x80
 800b01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b022:	200b      	movs	r0, #11
 800b024:	b020      	add	sp, #128	; 0x80
 800b026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b02a:	200b      	movs	r0, #11
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	08018148 	.word	0x08018148

0800b034 <rclc_subscription_init_default>:
 800b034:	b368      	cbz	r0, 800b092 <rclc_subscription_init_default+0x5e>
 800b036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b03a:	460d      	mov	r5, r1
 800b03c:	b0a0      	sub	sp, #128	; 0x80
 800b03e:	b321      	cbz	r1, 800b08a <rclc_subscription_init_default+0x56>
 800b040:	4616      	mov	r6, r2
 800b042:	b312      	cbz	r2, 800b08a <rclc_subscription_init_default+0x56>
 800b044:	461f      	mov	r7, r3
 800b046:	b303      	cbz	r3, 800b08a <rclc_subscription_init_default+0x56>
 800b048:	4604      	mov	r4, r0
 800b04a:	f005 fc37 	bl	80108bc <rcl_get_zero_initialized_subscription>
 800b04e:	f10d 0810 	add.w	r8, sp, #16
 800b052:	6020      	str	r0, [r4, #0]
 800b054:	4640      	mov	r0, r8
 800b056:	f005 fcdf 	bl	8010a18 <rcl_subscription_get_default_options>
 800b05a:	490f      	ldr	r1, [pc, #60]	; (800b098 <rclc_subscription_init_default+0x64>)
 800b05c:	2250      	movs	r2, #80	; 0x50
 800b05e:	4640      	mov	r0, r8
 800b060:	f00c f899 	bl	8017196 <memcpy>
 800b064:	f8cd 8000 	str.w	r8, [sp]
 800b068:	463b      	mov	r3, r7
 800b06a:	4632      	mov	r2, r6
 800b06c:	4629      	mov	r1, r5
 800b06e:	4620      	mov	r0, r4
 800b070:	f005 fc2a 	bl	80108c8 <rcl_subscription_init>
 800b074:	b910      	cbnz	r0, 800b07c <rclc_subscription_init_default+0x48>
 800b076:	b020      	add	sp, #128	; 0x80
 800b078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b07c:	9003      	str	r0, [sp, #12]
 800b07e:	f000 f873 	bl	800b168 <rcutils_reset_error>
 800b082:	9803      	ldr	r0, [sp, #12]
 800b084:	b020      	add	sp, #128	; 0x80
 800b086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b08a:	200b      	movs	r0, #11
 800b08c:	b020      	add	sp, #128	; 0x80
 800b08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b092:	200b      	movs	r0, #11
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	08018198 	.word	0x08018198

0800b09c <__default_zero_allocate>:
 800b09c:	f00b bb6c 	b.w	8016778 <calloc>

0800b0a0 <__default_reallocate>:
 800b0a0:	f00b bcf8 	b.w	8016a94 <realloc>

0800b0a4 <__default_deallocate>:
 800b0a4:	f00b bbd6 	b.w	8016854 <free>

0800b0a8 <__default_allocate>:
 800b0a8:	f00b bbcc 	b.w	8016844 <malloc>

0800b0ac <rcutils_get_zero_initialized_allocator>:
 800b0ac:	b510      	push	{r4, lr}
 800b0ae:	4c05      	ldr	r4, [pc, #20]	; (800b0c4 <rcutils_get_zero_initialized_allocator+0x18>)
 800b0b0:	4686      	mov	lr, r0
 800b0b2:	4684      	mov	ip, r0
 800b0b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b0b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b0ba:	6823      	ldr	r3, [r4, #0]
 800b0bc:	f8cc 3000 	str.w	r3, [ip]
 800b0c0:	4670      	mov	r0, lr
 800b0c2:	bd10      	pop	{r4, pc}
 800b0c4:	080181e8 	.word	0x080181e8

0800b0c8 <rcutils_set_default_allocator>:
 800b0c8:	b1a8      	cbz	r0, 800b0f6 <rcutils_set_default_allocator+0x2e>
 800b0ca:	6802      	ldr	r2, [r0, #0]
 800b0cc:	b1a2      	cbz	r2, 800b0f8 <rcutils_set_default_allocator+0x30>
 800b0ce:	6841      	ldr	r1, [r0, #4]
 800b0d0:	b1a1      	cbz	r1, 800b0fc <rcutils_set_default_allocator+0x34>
 800b0d2:	b410      	push	{r4}
 800b0d4:	68c4      	ldr	r4, [r0, #12]
 800b0d6:	b164      	cbz	r4, 800b0f2 <rcutils_set_default_allocator+0x2a>
 800b0d8:	6880      	ldr	r0, [r0, #8]
 800b0da:	b138      	cbz	r0, 800b0ec <rcutils_set_default_allocator+0x24>
 800b0dc:	4b08      	ldr	r3, [pc, #32]	; (800b100 <rcutils_set_default_allocator+0x38>)
 800b0de:	601a      	str	r2, [r3, #0]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b0e6:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b0ea:	2001      	movs	r0, #1
 800b0ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	e7fa      	b.n	800b0ec <rcutils_set_default_allocator+0x24>
 800b0f6:	4770      	bx	lr
 800b0f8:	4610      	mov	r0, r2
 800b0fa:	4770      	bx	lr
 800b0fc:	4608      	mov	r0, r1
 800b0fe:	4770      	bx	lr
 800b100:	20000014 	.word	0x20000014

0800b104 <rcutils_get_default_allocator>:
 800b104:	b510      	push	{r4, lr}
 800b106:	4c05      	ldr	r4, [pc, #20]	; (800b11c <rcutils_get_default_allocator+0x18>)
 800b108:	4686      	mov	lr, r0
 800b10a:	4684      	mov	ip, r0
 800b10c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b10e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b112:	6823      	ldr	r3, [r4, #0]
 800b114:	f8cc 3000 	str.w	r3, [ip]
 800b118:	4670      	mov	r0, lr
 800b11a:	bd10      	pop	{r4, pc}
 800b11c:	20000014 	.word	0x20000014

0800b120 <rcutils_allocator_is_valid>:
 800b120:	b158      	cbz	r0, 800b13a <rcutils_allocator_is_valid+0x1a>
 800b122:	6803      	ldr	r3, [r0, #0]
 800b124:	b143      	cbz	r3, 800b138 <rcutils_allocator_is_valid+0x18>
 800b126:	6843      	ldr	r3, [r0, #4]
 800b128:	b133      	cbz	r3, 800b138 <rcutils_allocator_is_valid+0x18>
 800b12a:	68c3      	ldr	r3, [r0, #12]
 800b12c:	b123      	cbz	r3, 800b138 <rcutils_allocator_is_valid+0x18>
 800b12e:	6880      	ldr	r0, [r0, #8]
 800b130:	3800      	subs	r0, #0
 800b132:	bf18      	it	ne
 800b134:	2001      	movne	r0, #1
 800b136:	4770      	bx	lr
 800b138:	4618      	mov	r0, r3
 800b13a:	4770      	bx	lr

0800b13c <rcutils_get_error_string>:
 800b13c:	4b06      	ldr	r3, [pc, #24]	; (800b158 <rcutils_get_error_string+0x1c>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	b13b      	cbz	r3, 800b152 <rcutils_get_error_string+0x16>
 800b142:	4b06      	ldr	r3, [pc, #24]	; (800b15c <rcutils_get_error_string+0x20>)
 800b144:	781a      	ldrb	r2, [r3, #0]
 800b146:	b90a      	cbnz	r2, 800b14c <rcutils_get_error_string+0x10>
 800b148:	2201      	movs	r2, #1
 800b14a:	701a      	strb	r2, [r3, #0]
 800b14c:	4b04      	ldr	r3, [pc, #16]	; (800b160 <rcutils_get_error_string+0x24>)
 800b14e:	7818      	ldrb	r0, [r3, #0]
 800b150:	4770      	bx	lr
 800b152:	4b04      	ldr	r3, [pc, #16]	; (800b164 <rcutils_get_error_string+0x28>)
 800b154:	7818      	ldrb	r0, [r3, #0]
 800b156:	4770      	bx	lr
 800b158:	2000c1e8 	.word	0x2000c1e8
 800b15c:	2000c201 	.word	0x2000c201
 800b160:	2000c200 	.word	0x2000c200
 800b164:	080181fc 	.word	0x080181fc

0800b168 <rcutils_reset_error>:
 800b168:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800b188 <rcutils_reset_error+0x20>
 800b16c:	4a08      	ldr	r2, [pc, #32]	; (800b190 <rcutils_reset_error+0x28>)
 800b16e:	4809      	ldr	r0, [pc, #36]	; (800b194 <rcutils_reset_error+0x2c>)
 800b170:	4909      	ldr	r1, [pc, #36]	; (800b198 <rcutils_reset_error+0x30>)
 800b172:	2300      	movs	r3, #0
 800b174:	8013      	strh	r3, [r2, #0]
 800b176:	ed82 7b02 	vstr	d7, [r2, #8]
 800b17a:	4a08      	ldr	r2, [pc, #32]	; (800b19c <rcutils_reset_error+0x34>)
 800b17c:	7003      	strb	r3, [r0, #0]
 800b17e:	700b      	strb	r3, [r1, #0]
 800b180:	7013      	strb	r3, [r2, #0]
 800b182:	4770      	bx	lr
 800b184:	f3af 8000 	nop.w
	...
 800b190:	2000c1f0 	.word	0x2000c1f0
 800b194:	2000c201 	.word	0x2000c201
 800b198:	2000c200 	.word	0x2000c200
 800b19c:	2000c1e8 	.word	0x2000c1e8

0800b1a0 <rcutils_system_time_now>:
 800b1a0:	b308      	cbz	r0, 800b1e6 <rcutils_system_time_now+0x46>
 800b1a2:	b570      	push	{r4, r5, r6, lr}
 800b1a4:	b084      	sub	sp, #16
 800b1a6:	4604      	mov	r4, r0
 800b1a8:	4669      	mov	r1, sp
 800b1aa:	2001      	movs	r0, #1
 800b1ac:	f7f7 f95c 	bl	8002468 <clock_gettime>
 800b1b0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b1b4:	2d00      	cmp	r5, #0
 800b1b6:	db13      	blt.n	800b1e0 <rcutils_system_time_now+0x40>
 800b1b8:	9902      	ldr	r1, [sp, #8]
 800b1ba:	2900      	cmp	r1, #0
 800b1bc:	db0d      	blt.n	800b1da <rcutils_system_time_now+0x3a>
 800b1be:	4e0b      	ldr	r6, [pc, #44]	; (800b1ec <rcutils_system_time_now+0x4c>)
 800b1c0:	fba3 3206 	umull	r3, r2, r3, r6
 800b1c4:	185b      	adds	r3, r3, r1
 800b1c6:	fb06 2205 	mla	r2, r6, r5, r2
 800b1ca:	f04f 0000 	mov.w	r0, #0
 800b1ce:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b1d2:	e9c4 3200 	strd	r3, r2, [r4]
 800b1d6:	b004      	add	sp, #16
 800b1d8:	bd70      	pop	{r4, r5, r6, pc}
 800b1da:	ea53 0205 	orrs.w	r2, r3, r5
 800b1de:	d1ee      	bne.n	800b1be <rcutils_system_time_now+0x1e>
 800b1e0:	2002      	movs	r0, #2
 800b1e2:	b004      	add	sp, #16
 800b1e4:	bd70      	pop	{r4, r5, r6, pc}
 800b1e6:	200b      	movs	r0, #11
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	3b9aca00 	.word	0x3b9aca00

0800b1f0 <rcutils_steady_time_now>:
 800b1f0:	b308      	cbz	r0, 800b236 <rcutils_steady_time_now+0x46>
 800b1f2:	b570      	push	{r4, r5, r6, lr}
 800b1f4:	b084      	sub	sp, #16
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	4669      	mov	r1, sp
 800b1fa:	2000      	movs	r0, #0
 800b1fc:	f7f7 f934 	bl	8002468 <clock_gettime>
 800b200:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b204:	2d00      	cmp	r5, #0
 800b206:	db13      	blt.n	800b230 <rcutils_steady_time_now+0x40>
 800b208:	9902      	ldr	r1, [sp, #8]
 800b20a:	2900      	cmp	r1, #0
 800b20c:	db0d      	blt.n	800b22a <rcutils_steady_time_now+0x3a>
 800b20e:	4e0b      	ldr	r6, [pc, #44]	; (800b23c <rcutils_steady_time_now+0x4c>)
 800b210:	fba3 3206 	umull	r3, r2, r3, r6
 800b214:	185b      	adds	r3, r3, r1
 800b216:	fb06 2205 	mla	r2, r6, r5, r2
 800b21a:	f04f 0000 	mov.w	r0, #0
 800b21e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b222:	e9c4 3200 	strd	r3, r2, [r4]
 800b226:	b004      	add	sp, #16
 800b228:	bd70      	pop	{r4, r5, r6, pc}
 800b22a:	ea53 0205 	orrs.w	r2, r3, r5
 800b22e:	d1ee      	bne.n	800b20e <rcutils_steady_time_now+0x1e>
 800b230:	2002      	movs	r0, #2
 800b232:	b004      	add	sp, #16
 800b234:	bd70      	pop	{r4, r5, r6, pc}
 800b236:	200b      	movs	r0, #11
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	3b9aca00 	.word	0x3b9aca00

0800b240 <rmw_get_default_publisher_options>:
 800b240:	2200      	movs	r2, #0
 800b242:	6002      	str	r2, [r0, #0]
 800b244:	7102      	strb	r2, [r0, #4]
 800b246:	4770      	bx	lr

0800b248 <rmw_uros_set_custom_transport>:
 800b248:	b470      	push	{r4, r5, r6}
 800b24a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b24e:	b162      	cbz	r2, 800b26a <rmw_uros_set_custom_transport+0x22>
 800b250:	b15b      	cbz	r3, 800b26a <rmw_uros_set_custom_transport+0x22>
 800b252:	b155      	cbz	r5, 800b26a <rmw_uros_set_custom_transport+0x22>
 800b254:	b14e      	cbz	r6, 800b26a <rmw_uros_set_custom_transport+0x22>
 800b256:	4c06      	ldr	r4, [pc, #24]	; (800b270 <rmw_uros_set_custom_transport+0x28>)
 800b258:	7020      	strb	r0, [r4, #0]
 800b25a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b25e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b262:	6166      	str	r6, [r4, #20]
 800b264:	2000      	movs	r0, #0
 800b266:	bc70      	pop	{r4, r5, r6}
 800b268:	4770      	bx	lr
 800b26a:	200b      	movs	r0, #11
 800b26c:	bc70      	pop	{r4, r5, r6}
 800b26e:	4770      	bx	lr
 800b270:	2000c204 	.word	0x2000c204

0800b274 <flush_session>:
 800b274:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800b276:	f002 bcc7 	b.w	800dc08 <uxr_run_session_until_confirm_delivery>
 800b27a:	bf00      	nop

0800b27c <rmw_publish>:
 800b27c:	2800      	cmp	r0, #0
 800b27e:	d053      	beq.n	800b328 <rmw_publish+0xac>
 800b280:	b570      	push	{r4, r5, r6, lr}
 800b282:	460d      	mov	r5, r1
 800b284:	b08e      	sub	sp, #56	; 0x38
 800b286:	2900      	cmp	r1, #0
 800b288:	d04b      	beq.n	800b322 <rmw_publish+0xa6>
 800b28a:	4604      	mov	r4, r0
 800b28c:	6800      	ldr	r0, [r0, #0]
 800b28e:	f000 fced 	bl	800bc6c <is_uxrce_rmw_identifier_valid>
 800b292:	2800      	cmp	r0, #0
 800b294:	d045      	beq.n	800b322 <rmw_publish+0xa6>
 800b296:	6866      	ldr	r6, [r4, #4]
 800b298:	2e00      	cmp	r6, #0
 800b29a:	d042      	beq.n	800b322 <rmw_publish+0xa6>
 800b29c:	69b4      	ldr	r4, [r6, #24]
 800b29e:	4628      	mov	r0, r5
 800b2a0:	6923      	ldr	r3, [r4, #16]
 800b2a2:	4798      	blx	r3
 800b2a4:	69f3      	ldr	r3, [r6, #28]
 800b2a6:	9005      	str	r0, [sp, #20]
 800b2a8:	b113      	cbz	r3, 800b2b0 <rmw_publish+0x34>
 800b2aa:	a805      	add	r0, sp, #20
 800b2ac:	4798      	blx	r3
 800b2ae:	9805      	ldr	r0, [sp, #20]
 800b2b0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	9000      	str	r0, [sp, #0]
 800b2b8:	6972      	ldr	r2, [r6, #20]
 800b2ba:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800b2bc:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800b2c0:	ab06      	add	r3, sp, #24
 800b2c2:	f003 fa8d 	bl	800e7e0 <uxr_prepare_output_stream>
 800b2c6:	b1d8      	cbz	r0, 800b300 <rmw_publish+0x84>
 800b2c8:	68a3      	ldr	r3, [r4, #8]
 800b2ca:	a906      	add	r1, sp, #24
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	4798      	blx	r3
 800b2d0:	6a33      	ldr	r3, [r6, #32]
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	b10b      	cbz	r3, 800b2da <rmw_publish+0x5e>
 800b2d6:	a806      	add	r0, sp, #24
 800b2d8:	4798      	blx	r3
 800b2da:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800b2e4:	d022      	beq.n	800b32c <rmw_publish+0xb0>
 800b2e6:	6918      	ldr	r0, [r3, #16]
 800b2e8:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800b2ea:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b2ee:	f002 fc8b 	bl	800dc08 <uxr_run_session_until_confirm_delivery>
 800b2f2:	4020      	ands	r0, r4
 800b2f4:	b2c4      	uxtb	r4, r0
 800b2f6:	f084 0001 	eor.w	r0, r4, #1
 800b2fa:	b2c0      	uxtb	r0, r0
 800b2fc:	b00e      	add	sp, #56	; 0x38
 800b2fe:	bd70      	pop	{r4, r5, r6, pc}
 800b300:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800b304:	6918      	ldr	r0, [r3, #16]
 800b306:	9b05      	ldr	r3, [sp, #20]
 800b308:	9300      	str	r3, [sp, #0]
 800b30a:	4b0b      	ldr	r3, [pc, #44]	; (800b338 <rmw_publish+0xbc>)
 800b30c:	9301      	str	r3, [sp, #4]
 800b30e:	9602      	str	r6, [sp, #8]
 800b310:	6972      	ldr	r2, [r6, #20]
 800b312:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800b314:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b318:	ab06      	add	r3, sp, #24
 800b31a:	f003 fa91 	bl	800e840 <uxr_prepare_output_stream_fragmented>
 800b31e:	2800      	cmp	r0, #0
 800b320:	d1d2      	bne.n	800b2c8 <rmw_publish+0x4c>
 800b322:	2001      	movs	r0, #1
 800b324:	b00e      	add	sp, #56	; 0x38
 800b326:	bd70      	pop	{r4, r5, r6, pc}
 800b328:	2001      	movs	r0, #1
 800b32a:	4770      	bx	lr
 800b32c:	6918      	ldr	r0, [r3, #16]
 800b32e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b332:	f002 f8a9 	bl	800d488 <uxr_flash_output_streams>
 800b336:	e7de      	b.n	800b2f6 <rmw_publish+0x7a>
 800b338:	0800b275 	.word	0x0800b275

0800b33c <rmw_create_publisher>:
 800b33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b340:	b087      	sub	sp, #28
 800b342:	2800      	cmp	r0, #0
 800b344:	f000 80cc 	beq.w	800b4e0 <rmw_create_publisher+0x1a4>
 800b348:	460e      	mov	r6, r1
 800b34a:	2900      	cmp	r1, #0
 800b34c:	f000 80c8 	beq.w	800b4e0 <rmw_create_publisher+0x1a4>
 800b350:	4604      	mov	r4, r0
 800b352:	6800      	ldr	r0, [r0, #0]
 800b354:	4615      	mov	r5, r2
 800b356:	4698      	mov	r8, r3
 800b358:	f000 fc88 	bl	800bc6c <is_uxrce_rmw_identifier_valid>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	f000 80bf 	beq.w	800b4e0 <rmw_create_publisher+0x1a4>
 800b362:	2d00      	cmp	r5, #0
 800b364:	f000 80bc 	beq.w	800b4e0 <rmw_create_publisher+0x1a4>
 800b368:	782b      	ldrb	r3, [r5, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	f000 80b8 	beq.w	800b4e0 <rmw_create_publisher+0x1a4>
 800b370:	f1b8 0f00 	cmp.w	r8, #0
 800b374:	f000 80b4 	beq.w	800b4e0 <rmw_create_publisher+0x1a4>
 800b378:	485c      	ldr	r0, [pc, #368]	; (800b4ec <rmw_create_publisher+0x1b0>)
 800b37a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b37e:	f007 fe9f 	bl	80130c0 <get_memory>
 800b382:	2800      	cmp	r0, #0
 800b384:	f000 80ac 	beq.w	800b4e0 <rmw_create_publisher+0x1a4>
 800b388:	6884      	ldr	r4, [r0, #8]
 800b38a:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800b38e:	f007 feff 	bl	8013190 <rmw_get_implementation_identifier>
 800b392:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800b396:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800b39a:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800b39e:	4628      	mov	r0, r5
 800b3a0:	f7f4 ff28 	bl	80001f4 <strlen>
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	283c      	cmp	r0, #60	; 0x3c
 800b3a8:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800b3ac:	f200 8091 	bhi.w	800b4d2 <rmw_create_publisher+0x196>
 800b3b0:	4a4f      	ldr	r2, [pc, #316]	; (800b4f0 <rmw_create_publisher+0x1b4>)
 800b3b2:	462b      	mov	r3, r5
 800b3b4:	213c      	movs	r1, #60	; 0x3c
 800b3b6:	4650      	mov	r0, sl
 800b3b8:	f00b fcf4 	bl	8016da4 <sniprintf>
 800b3bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b3c0:	67e3      	str	r3, [r4, #124]	; 0x7c
 800b3c2:	4641      	mov	r1, r8
 800b3c4:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800b3c8:	2250      	movs	r2, #80	; 0x50
 800b3ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b3ce:	f00b fee2 	bl	8017196 <memcpy>
 800b3d2:	f898 3008 	ldrb.w	r3, [r8, #8]
 800b3d6:	4947      	ldr	r1, [pc, #284]	; (800b4f4 <rmw_create_publisher+0x1b8>)
 800b3d8:	2b02      	cmp	r3, #2
 800b3da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3de:	bf0c      	ite	eq
 800b3e0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800b3e4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800b3e8:	67a3      	str	r3, [r4, #120]	; 0x78
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	f000 fc49 	bl	800bc88 <get_message_typesupport_handle>
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	d06b      	beq.n	800b4d2 <rmw_create_publisher+0x196>
 800b3fa:	6842      	ldr	r2, [r0, #4]
 800b3fc:	61a2      	str	r2, [r4, #24]
 800b3fe:	2a00      	cmp	r2, #0
 800b400:	d067      	beq.n	800b4d2 <rmw_create_publisher+0x196>
 800b402:	4629      	mov	r1, r5
 800b404:	4643      	mov	r3, r8
 800b406:	4648      	mov	r0, r9
 800b408:	f008 f928 	bl	801365c <create_topic>
 800b40c:	6260      	str	r0, [r4, #36]	; 0x24
 800b40e:	2800      	cmp	r0, #0
 800b410:	d063      	beq.n	800b4da <rmw_create_publisher+0x19e>
 800b412:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b41a:	2103      	movs	r1, #3
 800b41c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800b420:	1c42      	adds	r2, r0, #1
 800b422:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800b426:	f001 fedf 	bl	800d1e8 <uxr_object_id>
 800b42a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800b42e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b432:	6120      	str	r0, [r4, #16]
 800b434:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800b438:	6910      	ldr	r0, [r2, #16]
 800b43a:	2506      	movs	r5, #6
 800b43c:	9500      	str	r5, [sp, #0]
 800b43e:	6819      	ldr	r1, [r3, #0]
 800b440:	6922      	ldr	r2, [r4, #16]
 800b442:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b446:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b44a:	f001 fd7f 	bl	800cf4c <uxr_buffer_create_publisher_bin>
 800b44e:	4602      	mov	r2, r0
 800b450:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b454:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800b458:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800b45c:	f000 fb86 	bl	800bb6c <run_xrce_session>
 800b460:	b3b8      	cbz	r0, 800b4d2 <rmw_create_publisher+0x196>
 800b462:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b46a:	2105      	movs	r1, #5
 800b46c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800b470:	1c42      	adds	r2, r0, #1
 800b472:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800b476:	f001 feb7 	bl	800d1e8 <uxr_object_id>
 800b47a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b47e:	6160      	str	r0, [r4, #20]
 800b480:	691e      	ldr	r6, [r3, #16]
 800b482:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b486:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800b48a:	f10d 0a10 	add.w	sl, sp, #16
 800b48e:	4641      	mov	r1, r8
 800b490:	4650      	mov	r0, sl
 800b492:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800b496:	f000 fb85 	bl	800bba4 <convert_qos_profile>
 800b49a:	9503      	str	r5, [sp, #12]
 800b49c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800b4a0:	9001      	str	r0, [sp, #4]
 800b4a2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800b4a6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b4aa:	9300      	str	r3, [sp, #0]
 800b4ac:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800b4b0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800b4b4:	f8d8 1000 	ldr.w	r1, [r8]
 800b4b8:	4630      	mov	r0, r6
 800b4ba:	f001 fda7 	bl	800d00c <uxr_buffer_create_datawriter_bin>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b4c4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800b4c8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800b4cc:	f000 fb4e 	bl	800bb6c <run_xrce_session>
 800b4d0:	b938      	cbnz	r0, 800b4e2 <rmw_create_publisher+0x1a6>
 800b4d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b4d4:	b108      	cbz	r0, 800b4da <rmw_create_publisher+0x19e>
 800b4d6:	f000 fa47 	bl	800b968 <rmw_uxrce_fini_topic_memory>
 800b4da:	4638      	mov	r0, r7
 800b4dc:	f000 f9ec 	bl	800b8b8 <rmw_uxrce_fini_publisher_memory>
 800b4e0:	2700      	movs	r7, #0
 800b4e2:	4638      	mov	r0, r7
 800b4e4:	b007      	add	sp, #28
 800b4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ea:	bf00      	nop
 800b4ec:	20010afc 	.word	0x20010afc
 800b4f0:	08018234 	.word	0x08018234
 800b4f4:	08018200 	.word	0x08018200

0800b4f8 <rmw_publisher_get_actual_qos>:
 800b4f8:	b150      	cbz	r0, 800b510 <rmw_publisher_get_actual_qos+0x18>
 800b4fa:	b508      	push	{r3, lr}
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	b149      	cbz	r1, 800b514 <rmw_publisher_get_actual_qos+0x1c>
 800b500:	6841      	ldr	r1, [r0, #4]
 800b502:	2250      	movs	r2, #80	; 0x50
 800b504:	3128      	adds	r1, #40	; 0x28
 800b506:	4618      	mov	r0, r3
 800b508:	f00b fe45 	bl	8017196 <memcpy>
 800b50c:	2000      	movs	r0, #0
 800b50e:	bd08      	pop	{r3, pc}
 800b510:	200b      	movs	r0, #11
 800b512:	4770      	bx	lr
 800b514:	200b      	movs	r0, #11
 800b516:	bd08      	pop	{r3, pc}

0800b518 <rmw_destroy_publisher>:
 800b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51a:	b128      	cbz	r0, 800b528 <rmw_destroy_publisher+0x10>
 800b51c:	4604      	mov	r4, r0
 800b51e:	6800      	ldr	r0, [r0, #0]
 800b520:	460d      	mov	r5, r1
 800b522:	f000 fba3 	bl	800bc6c <is_uxrce_rmw_identifier_valid>
 800b526:	b910      	cbnz	r0, 800b52e <rmw_destroy_publisher+0x16>
 800b528:	2401      	movs	r4, #1
 800b52a:	4620      	mov	r0, r4
 800b52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b52e:	6863      	ldr	r3, [r4, #4]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d0f9      	beq.n	800b528 <rmw_destroy_publisher+0x10>
 800b534:	2d00      	cmp	r5, #0
 800b536:	d0f7      	beq.n	800b528 <rmw_destroy_publisher+0x10>
 800b538:	6828      	ldr	r0, [r5, #0]
 800b53a:	f000 fb97 	bl	800bc6c <is_uxrce_rmw_identifier_valid>
 800b53e:	2800      	cmp	r0, #0
 800b540:	d0f2      	beq.n	800b528 <rmw_destroy_publisher+0x10>
 800b542:	686c      	ldr	r4, [r5, #4]
 800b544:	2c00      	cmp	r4, #0
 800b546:	d0ef      	beq.n	800b528 <rmw_destroy_publisher+0x10>
 800b548:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b54a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800b54e:	f008 f8d5 	bl	80136fc <destroy_topic>
 800b552:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b556:	6962      	ldr	r2, [r4, #20]
 800b558:	6918      	ldr	r0, [r3, #16]
 800b55a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b55e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b562:	6819      	ldr	r1, [r3, #0]
 800b564:	f001 fc3e 	bl	800cde4 <uxr_buffer_delete_entity>
 800b568:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b56c:	6922      	ldr	r2, [r4, #16]
 800b56e:	691b      	ldr	r3, [r3, #16]
 800b570:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800b574:	4604      	mov	r4, r0
 800b576:	6809      	ldr	r1, [r1, #0]
 800b578:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800b57c:	f001 fc32 	bl	800cde4 <uxr_buffer_delete_entity>
 800b580:	693e      	ldr	r6, [r7, #16]
 800b582:	4622      	mov	r2, r4
 800b584:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800b588:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800b58c:	4604      	mov	r4, r0
 800b58e:	4630      	mov	r0, r6
 800b590:	f000 faec 	bl	800bb6c <run_xrce_session>
 800b594:	693e      	ldr	r6, [r7, #16]
 800b596:	4622      	mov	r2, r4
 800b598:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800b59c:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f000 fae2 	bl	800bb6c <run_xrce_session>
 800b5a8:	b12c      	cbz	r4, 800b5b6 <rmw_destroy_publisher+0x9e>
 800b5aa:	b120      	cbz	r0, 800b5b6 <rmw_destroy_publisher+0x9e>
 800b5ac:	2400      	movs	r4, #0
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	f000 f982 	bl	800b8b8 <rmw_uxrce_fini_publisher_memory>
 800b5b4:	e7b9      	b.n	800b52a <rmw_destroy_publisher+0x12>
 800b5b6:	2402      	movs	r4, #2
 800b5b8:	e7f9      	b.n	800b5ae <rmw_destroy_publisher+0x96>
 800b5ba:	bf00      	nop

0800b5bc <rmw_uxrce_init_service_memory>:
 800b5bc:	b1e2      	cbz	r2, 800b5f8 <rmw_uxrce_init_service_memory+0x3c>
 800b5be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c2:	7b05      	ldrb	r5, [r0, #12]
 800b5c4:	4606      	mov	r6, r0
 800b5c6:	b9ad      	cbnz	r5, 800b5f4 <rmw_uxrce_init_service_memory+0x38>
 800b5c8:	23c8      	movs	r3, #200	; 0xc8
 800b5ca:	e9c0 5500 	strd	r5, r5, [r0]
 800b5ce:	6083      	str	r3, [r0, #8]
 800b5d0:	f240 1301 	movw	r3, #257	; 0x101
 800b5d4:	4617      	mov	r7, r2
 800b5d6:	8183      	strh	r3, [r0, #12]
 800b5d8:	460c      	mov	r4, r1
 800b5da:	46a8      	mov	r8, r5
 800b5dc:	4621      	mov	r1, r4
 800b5de:	4630      	mov	r0, r6
 800b5e0:	3501      	adds	r5, #1
 800b5e2:	f007 fd7d 	bl	80130e0 <put_memory>
 800b5e6:	42af      	cmp	r7, r5
 800b5e8:	60a4      	str	r4, [r4, #8]
 800b5ea:	f884 800c 	strb.w	r8, [r4, #12]
 800b5ee:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800b5f2:	d1f3      	bne.n	800b5dc <rmw_uxrce_init_service_memory+0x20>
 800b5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop

0800b5fc <rmw_uxrce_init_client_memory>:
 800b5fc:	b1e2      	cbz	r2, 800b638 <rmw_uxrce_init_client_memory+0x3c>
 800b5fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b602:	7b05      	ldrb	r5, [r0, #12]
 800b604:	4606      	mov	r6, r0
 800b606:	b9ad      	cbnz	r5, 800b634 <rmw_uxrce_init_client_memory+0x38>
 800b608:	23c8      	movs	r3, #200	; 0xc8
 800b60a:	e9c0 5500 	strd	r5, r5, [r0]
 800b60e:	6083      	str	r3, [r0, #8]
 800b610:	f240 1301 	movw	r3, #257	; 0x101
 800b614:	4617      	mov	r7, r2
 800b616:	8183      	strh	r3, [r0, #12]
 800b618:	460c      	mov	r4, r1
 800b61a:	46a8      	mov	r8, r5
 800b61c:	4621      	mov	r1, r4
 800b61e:	4630      	mov	r0, r6
 800b620:	3501      	adds	r5, #1
 800b622:	f007 fd5d 	bl	80130e0 <put_memory>
 800b626:	42af      	cmp	r7, r5
 800b628:	60a4      	str	r4, [r4, #8]
 800b62a:	f884 800c 	strb.w	r8, [r4, #12]
 800b62e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800b632:	d1f3      	bne.n	800b61c <rmw_uxrce_init_client_memory+0x20>
 800b634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop

0800b63c <rmw_uxrce_init_publisher_memory>:
 800b63c:	b1e2      	cbz	r2, 800b678 <rmw_uxrce_init_publisher_memory+0x3c>
 800b63e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b642:	7b05      	ldrb	r5, [r0, #12]
 800b644:	4606      	mov	r6, r0
 800b646:	b9ad      	cbnz	r5, 800b674 <rmw_uxrce_init_publisher_memory+0x38>
 800b648:	23d8      	movs	r3, #216	; 0xd8
 800b64a:	e9c0 5500 	strd	r5, r5, [r0]
 800b64e:	6083      	str	r3, [r0, #8]
 800b650:	f240 1301 	movw	r3, #257	; 0x101
 800b654:	4617      	mov	r7, r2
 800b656:	8183      	strh	r3, [r0, #12]
 800b658:	460c      	mov	r4, r1
 800b65a:	46a8      	mov	r8, r5
 800b65c:	4621      	mov	r1, r4
 800b65e:	4630      	mov	r0, r6
 800b660:	3501      	adds	r5, #1
 800b662:	f007 fd3d 	bl	80130e0 <put_memory>
 800b666:	42af      	cmp	r7, r5
 800b668:	60a4      	str	r4, [r4, #8]
 800b66a:	f884 800c 	strb.w	r8, [r4, #12]
 800b66e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800b672:	d1f3      	bne.n	800b65c <rmw_uxrce_init_publisher_memory+0x20>
 800b674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop

0800b67c <rmw_uxrce_init_subscription_memory>:
 800b67c:	b1e2      	cbz	r2, 800b6b8 <rmw_uxrce_init_subscription_memory+0x3c>
 800b67e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b682:	7b05      	ldrb	r5, [r0, #12]
 800b684:	4606      	mov	r6, r0
 800b686:	b9ad      	cbnz	r5, 800b6b4 <rmw_uxrce_init_subscription_memory+0x38>
 800b688:	23d8      	movs	r3, #216	; 0xd8
 800b68a:	e9c0 5500 	strd	r5, r5, [r0]
 800b68e:	6083      	str	r3, [r0, #8]
 800b690:	f240 1301 	movw	r3, #257	; 0x101
 800b694:	4617      	mov	r7, r2
 800b696:	8183      	strh	r3, [r0, #12]
 800b698:	460c      	mov	r4, r1
 800b69a:	46a8      	mov	r8, r5
 800b69c:	4621      	mov	r1, r4
 800b69e:	4630      	mov	r0, r6
 800b6a0:	3501      	adds	r5, #1
 800b6a2:	f007 fd1d 	bl	80130e0 <put_memory>
 800b6a6:	42af      	cmp	r7, r5
 800b6a8:	60a4      	str	r4, [r4, #8]
 800b6aa:	f884 800c 	strb.w	r8, [r4, #12]
 800b6ae:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800b6b2:	d1f3      	bne.n	800b69c <rmw_uxrce_init_subscription_memory+0x20>
 800b6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop

0800b6bc <rmw_uxrce_init_node_memory>:
 800b6bc:	b1e2      	cbz	r2, 800b6f8 <rmw_uxrce_init_node_memory+0x3c>
 800b6be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c2:	7b05      	ldrb	r5, [r0, #12]
 800b6c4:	4606      	mov	r6, r0
 800b6c6:	b9ad      	cbnz	r5, 800b6f4 <rmw_uxrce_init_node_memory+0x38>
 800b6c8:	23a4      	movs	r3, #164	; 0xa4
 800b6ca:	e9c0 5500 	strd	r5, r5, [r0]
 800b6ce:	6083      	str	r3, [r0, #8]
 800b6d0:	f240 1301 	movw	r3, #257	; 0x101
 800b6d4:	4617      	mov	r7, r2
 800b6d6:	8183      	strh	r3, [r0, #12]
 800b6d8:	460c      	mov	r4, r1
 800b6da:	46a8      	mov	r8, r5
 800b6dc:	4621      	mov	r1, r4
 800b6de:	4630      	mov	r0, r6
 800b6e0:	3501      	adds	r5, #1
 800b6e2:	f007 fcfd 	bl	80130e0 <put_memory>
 800b6e6:	42af      	cmp	r7, r5
 800b6e8:	60a4      	str	r4, [r4, #8]
 800b6ea:	f884 800c 	strb.w	r8, [r4, #12]
 800b6ee:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800b6f2:	d1f3      	bne.n	800b6dc <rmw_uxrce_init_node_memory+0x20>
 800b6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop

0800b6fc <rmw_uxrce_init_session_memory>:
 800b6fc:	b1ea      	cbz	r2, 800b73a <rmw_uxrce_init_session_memory+0x3e>
 800b6fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b702:	7b05      	ldrb	r5, [r0, #12]
 800b704:	4606      	mov	r6, r0
 800b706:	b9b5      	cbnz	r5, 800b736 <rmw_uxrce_init_session_memory+0x3a>
 800b708:	e9c0 5500 	strd	r5, r5, [r0]
 800b70c:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800b710:	f240 1301 	movw	r3, #257	; 0x101
 800b714:	4617      	mov	r7, r2
 800b716:	f8c0 8008 	str.w	r8, [r0, #8]
 800b71a:	460c      	mov	r4, r1
 800b71c:	8183      	strh	r3, [r0, #12]
 800b71e:	46a9      	mov	r9, r5
 800b720:	4621      	mov	r1, r4
 800b722:	4630      	mov	r0, r6
 800b724:	3501      	adds	r5, #1
 800b726:	f007 fcdb 	bl	80130e0 <put_memory>
 800b72a:	42af      	cmp	r7, r5
 800b72c:	60a4      	str	r4, [r4, #8]
 800b72e:	f884 900c 	strb.w	r9, [r4, #12]
 800b732:	4444      	add	r4, r8
 800b734:	d1f4      	bne.n	800b720 <rmw_uxrce_init_session_memory+0x24>
 800b736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b73a:	4770      	bx	lr

0800b73c <rmw_uxrce_init_topic_memory>:
 800b73c:	b1e2      	cbz	r2, 800b778 <rmw_uxrce_init_topic_memory+0x3c>
 800b73e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b742:	7b05      	ldrb	r5, [r0, #12]
 800b744:	4606      	mov	r6, r0
 800b746:	b9ad      	cbnz	r5, 800b774 <rmw_uxrce_init_topic_memory+0x38>
 800b748:	231c      	movs	r3, #28
 800b74a:	e9c0 5500 	strd	r5, r5, [r0]
 800b74e:	6083      	str	r3, [r0, #8]
 800b750:	f240 1301 	movw	r3, #257	; 0x101
 800b754:	4617      	mov	r7, r2
 800b756:	8183      	strh	r3, [r0, #12]
 800b758:	460c      	mov	r4, r1
 800b75a:	46a8      	mov	r8, r5
 800b75c:	4621      	mov	r1, r4
 800b75e:	4630      	mov	r0, r6
 800b760:	3501      	adds	r5, #1
 800b762:	f007 fcbd 	bl	80130e0 <put_memory>
 800b766:	42af      	cmp	r7, r5
 800b768:	60a4      	str	r4, [r4, #8]
 800b76a:	f884 800c 	strb.w	r8, [r4, #12]
 800b76e:	f104 041c 	add.w	r4, r4, #28
 800b772:	d1f3      	bne.n	800b75c <rmw_uxrce_init_topic_memory+0x20>
 800b774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop

0800b77c <rmw_uxrce_init_static_input_buffer_memory>:
 800b77c:	b1ea      	cbz	r2, 800b7ba <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800b77e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b782:	7b05      	ldrb	r5, [r0, #12]
 800b784:	4606      	mov	r6, r0
 800b786:	b9b5      	cbnz	r5, 800b7b6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800b788:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800b78c:	e9c0 5500 	strd	r5, r5, [r0]
 800b790:	6083      	str	r3, [r0, #8]
 800b792:	f240 1301 	movw	r3, #257	; 0x101
 800b796:	4617      	mov	r7, r2
 800b798:	8183      	strh	r3, [r0, #12]
 800b79a:	460c      	mov	r4, r1
 800b79c:	46a8      	mov	r8, r5
 800b79e:	4621      	mov	r1, r4
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	3501      	adds	r5, #1
 800b7a4:	f007 fc9c 	bl	80130e0 <put_memory>
 800b7a8:	42af      	cmp	r7, r5
 800b7aa:	60a4      	str	r4, [r4, #8]
 800b7ac:	f884 800c 	strb.w	r8, [r4, #12]
 800b7b0:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800b7b4:	d1f3      	bne.n	800b79e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800b7b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7ba:	4770      	bx	lr

0800b7bc <rmw_uxrce_init_init_options_impl_memory>:
 800b7bc:	b1e2      	cbz	r2, 800b7f8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800b7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c2:	7b05      	ldrb	r5, [r0, #12]
 800b7c4:	4606      	mov	r6, r0
 800b7c6:	b9ad      	cbnz	r5, 800b7f4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800b7c8:	232c      	movs	r3, #44	; 0x2c
 800b7ca:	e9c0 5500 	strd	r5, r5, [r0]
 800b7ce:	6083      	str	r3, [r0, #8]
 800b7d0:	f240 1301 	movw	r3, #257	; 0x101
 800b7d4:	4617      	mov	r7, r2
 800b7d6:	8183      	strh	r3, [r0, #12]
 800b7d8:	460c      	mov	r4, r1
 800b7da:	46a8      	mov	r8, r5
 800b7dc:	4621      	mov	r1, r4
 800b7de:	4630      	mov	r0, r6
 800b7e0:	3501      	adds	r5, #1
 800b7e2:	f007 fc7d 	bl	80130e0 <put_memory>
 800b7e6:	42af      	cmp	r7, r5
 800b7e8:	60a4      	str	r4, [r4, #8]
 800b7ea:	f884 800c 	strb.w	r8, [r4, #12]
 800b7ee:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800b7f2:	d1f3      	bne.n	800b7dc <rmw_uxrce_init_init_options_impl_memory+0x20>
 800b7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop

0800b7fc <rmw_uxrce_init_wait_set_memory>:
 800b7fc:	b1e2      	cbz	r2, 800b838 <rmw_uxrce_init_wait_set_memory+0x3c>
 800b7fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b802:	7b05      	ldrb	r5, [r0, #12]
 800b804:	4606      	mov	r6, r0
 800b806:	b9ad      	cbnz	r5, 800b834 <rmw_uxrce_init_wait_set_memory+0x38>
 800b808:	231c      	movs	r3, #28
 800b80a:	e9c0 5500 	strd	r5, r5, [r0]
 800b80e:	6083      	str	r3, [r0, #8]
 800b810:	f240 1301 	movw	r3, #257	; 0x101
 800b814:	4617      	mov	r7, r2
 800b816:	8183      	strh	r3, [r0, #12]
 800b818:	460c      	mov	r4, r1
 800b81a:	46a8      	mov	r8, r5
 800b81c:	4621      	mov	r1, r4
 800b81e:	4630      	mov	r0, r6
 800b820:	3501      	adds	r5, #1
 800b822:	f007 fc5d 	bl	80130e0 <put_memory>
 800b826:	42af      	cmp	r7, r5
 800b828:	60a4      	str	r4, [r4, #8]
 800b82a:	f884 800c 	strb.w	r8, [r4, #12]
 800b82e:	f104 041c 	add.w	r4, r4, #28
 800b832:	d1f3      	bne.n	800b81c <rmw_uxrce_init_wait_set_memory+0x20>
 800b834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b838:	4770      	bx	lr
 800b83a:	bf00      	nop

0800b83c <rmw_uxrce_init_guard_condition_memory>:
 800b83c:	b1e2      	cbz	r2, 800b878 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800b83e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b842:	7b05      	ldrb	r5, [r0, #12]
 800b844:	4606      	mov	r6, r0
 800b846:	b9ad      	cbnz	r5, 800b874 <rmw_uxrce_init_guard_condition_memory+0x38>
 800b848:	2320      	movs	r3, #32
 800b84a:	e9c0 5500 	strd	r5, r5, [r0]
 800b84e:	6083      	str	r3, [r0, #8]
 800b850:	f240 1301 	movw	r3, #257	; 0x101
 800b854:	4617      	mov	r7, r2
 800b856:	8183      	strh	r3, [r0, #12]
 800b858:	460c      	mov	r4, r1
 800b85a:	46a8      	mov	r8, r5
 800b85c:	4621      	mov	r1, r4
 800b85e:	4630      	mov	r0, r6
 800b860:	3501      	adds	r5, #1
 800b862:	f007 fc3d 	bl	80130e0 <put_memory>
 800b866:	42af      	cmp	r7, r5
 800b868:	60a4      	str	r4, [r4, #8]
 800b86a:	f884 800c 	strb.w	r8, [r4, #12]
 800b86e:	f104 0420 	add.w	r4, r4, #32
 800b872:	d1f3      	bne.n	800b85c <rmw_uxrce_init_guard_condition_memory+0x20>
 800b874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop

0800b87c <rmw_uxrce_fini_session_memory>:
 800b87c:	4601      	mov	r1, r0
 800b87e:	4801      	ldr	r0, [pc, #4]	; (800b884 <rmw_uxrce_fini_session_memory+0x8>)
 800b880:	f007 bc2e 	b.w	80130e0 <put_memory>
 800b884:	20010b1c 	.word	0x20010b1c

0800b888 <rmw_uxrce_fini_node_memory>:
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	4604      	mov	r4, r0
 800b88c:	6800      	ldr	r0, [r0, #0]
 800b88e:	b128      	cbz	r0, 800b89c <rmw_uxrce_fini_node_memory+0x14>
 800b890:	4b07      	ldr	r3, [pc, #28]	; (800b8b0 <rmw_uxrce_fini_node_memory+0x28>)
 800b892:	6819      	ldr	r1, [r3, #0]
 800b894:	f7f4 fca4 	bl	80001e0 <strcmp>
 800b898:	b940      	cbnz	r0, 800b8ac <rmw_uxrce_fini_node_memory+0x24>
 800b89a:	6020      	str	r0, [r4, #0]
 800b89c:	6861      	ldr	r1, [r4, #4]
 800b89e:	b129      	cbz	r1, 800b8ac <rmw_uxrce_fini_node_memory+0x24>
 800b8a0:	2500      	movs	r5, #0
 800b8a2:	4804      	ldr	r0, [pc, #16]	; (800b8b4 <rmw_uxrce_fini_node_memory+0x2c>)
 800b8a4:	610d      	str	r5, [r1, #16]
 800b8a6:	f007 fc1b 	bl	80130e0 <put_memory>
 800b8aa:	6065      	str	r5, [r4, #4]
 800b8ac:	bd38      	pop	{r3, r4, r5, pc}
 800b8ae:	bf00      	nop
 800b8b0:	08018954 	.word	0x08018954
 800b8b4:	20010aec 	.word	0x20010aec

0800b8b8 <rmw_uxrce_fini_publisher_memory>:
 800b8b8:	b510      	push	{r4, lr}
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	6800      	ldr	r0, [r0, #0]
 800b8be:	b128      	cbz	r0, 800b8cc <rmw_uxrce_fini_publisher_memory+0x14>
 800b8c0:	4b06      	ldr	r3, [pc, #24]	; (800b8dc <rmw_uxrce_fini_publisher_memory+0x24>)
 800b8c2:	6819      	ldr	r1, [r3, #0]
 800b8c4:	f7f4 fc8c 	bl	80001e0 <strcmp>
 800b8c8:	b938      	cbnz	r0, 800b8da <rmw_uxrce_fini_publisher_memory+0x22>
 800b8ca:	6020      	str	r0, [r4, #0]
 800b8cc:	6861      	ldr	r1, [r4, #4]
 800b8ce:	b121      	cbz	r1, 800b8da <rmw_uxrce_fini_publisher_memory+0x22>
 800b8d0:	4803      	ldr	r0, [pc, #12]	; (800b8e0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800b8d2:	f007 fc05 	bl	80130e0 <put_memory>
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	6063      	str	r3, [r4, #4]
 800b8da:	bd10      	pop	{r4, pc}
 800b8dc:	08018954 	.word	0x08018954
 800b8e0:	20010afc 	.word	0x20010afc

0800b8e4 <rmw_uxrce_fini_subscription_memory>:
 800b8e4:	b510      	push	{r4, lr}
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	6800      	ldr	r0, [r0, #0]
 800b8ea:	b128      	cbz	r0, 800b8f8 <rmw_uxrce_fini_subscription_memory+0x14>
 800b8ec:	4b06      	ldr	r3, [pc, #24]	; (800b908 <rmw_uxrce_fini_subscription_memory+0x24>)
 800b8ee:	6819      	ldr	r1, [r3, #0]
 800b8f0:	f7f4 fc76 	bl	80001e0 <strcmp>
 800b8f4:	b938      	cbnz	r0, 800b906 <rmw_uxrce_fini_subscription_memory+0x22>
 800b8f6:	6020      	str	r0, [r4, #0]
 800b8f8:	6861      	ldr	r1, [r4, #4]
 800b8fa:	b121      	cbz	r1, 800b906 <rmw_uxrce_fini_subscription_memory+0x22>
 800b8fc:	4803      	ldr	r0, [pc, #12]	; (800b90c <rmw_uxrce_fini_subscription_memory+0x28>)
 800b8fe:	f007 fbef 	bl	80130e0 <put_memory>
 800b902:	2300      	movs	r3, #0
 800b904:	6063      	str	r3, [r4, #4]
 800b906:	bd10      	pop	{r4, pc}
 800b908:	08018954 	.word	0x08018954
 800b90c:	20010b3c 	.word	0x20010b3c

0800b910 <rmw_uxrce_fini_service_memory>:
 800b910:	b510      	push	{r4, lr}
 800b912:	4604      	mov	r4, r0
 800b914:	6800      	ldr	r0, [r0, #0]
 800b916:	b128      	cbz	r0, 800b924 <rmw_uxrce_fini_service_memory+0x14>
 800b918:	4b06      	ldr	r3, [pc, #24]	; (800b934 <rmw_uxrce_fini_service_memory+0x24>)
 800b91a:	6819      	ldr	r1, [r3, #0]
 800b91c:	f7f4 fc60 	bl	80001e0 <strcmp>
 800b920:	b938      	cbnz	r0, 800b932 <rmw_uxrce_fini_service_memory+0x22>
 800b922:	6020      	str	r0, [r4, #0]
 800b924:	6861      	ldr	r1, [r4, #4]
 800b926:	b121      	cbz	r1, 800b932 <rmw_uxrce_fini_service_memory+0x22>
 800b928:	4803      	ldr	r0, [pc, #12]	; (800b938 <rmw_uxrce_fini_service_memory+0x28>)
 800b92a:	f007 fbd9 	bl	80130e0 <put_memory>
 800b92e:	2300      	movs	r3, #0
 800b930:	6063      	str	r3, [r4, #4]
 800b932:	bd10      	pop	{r4, pc}
 800b934:	08018954 	.word	0x08018954
 800b938:	20010b0c 	.word	0x20010b0c

0800b93c <rmw_uxrce_fini_client_memory>:
 800b93c:	b510      	push	{r4, lr}
 800b93e:	4604      	mov	r4, r0
 800b940:	6800      	ldr	r0, [r0, #0]
 800b942:	b128      	cbz	r0, 800b950 <rmw_uxrce_fini_client_memory+0x14>
 800b944:	4b06      	ldr	r3, [pc, #24]	; (800b960 <rmw_uxrce_fini_client_memory+0x24>)
 800b946:	6819      	ldr	r1, [r3, #0]
 800b948:	f7f4 fc4a 	bl	80001e0 <strcmp>
 800b94c:	b938      	cbnz	r0, 800b95e <rmw_uxrce_fini_client_memory+0x22>
 800b94e:	6020      	str	r0, [r4, #0]
 800b950:	6861      	ldr	r1, [r4, #4]
 800b952:	b121      	cbz	r1, 800b95e <rmw_uxrce_fini_client_memory+0x22>
 800b954:	4803      	ldr	r0, [pc, #12]	; (800b964 <rmw_uxrce_fini_client_memory+0x28>)
 800b956:	f007 fbc3 	bl	80130e0 <put_memory>
 800b95a:	2300      	movs	r3, #0
 800b95c:	6063      	str	r3, [r4, #4]
 800b95e:	bd10      	pop	{r4, pc}
 800b960:	08018954 	.word	0x08018954
 800b964:	2000c220 	.word	0x2000c220

0800b968 <rmw_uxrce_fini_topic_memory>:
 800b968:	b510      	push	{r4, lr}
 800b96a:	4604      	mov	r4, r0
 800b96c:	4621      	mov	r1, r4
 800b96e:	4803      	ldr	r0, [pc, #12]	; (800b97c <rmw_uxrce_fini_topic_memory+0x14>)
 800b970:	f007 fbb6 	bl	80130e0 <put_memory>
 800b974:	2300      	movs	r3, #0
 800b976:	61a3      	str	r3, [r4, #24]
 800b978:	bd10      	pop	{r4, pc}
 800b97a:	bf00      	nop
 800b97c:	20010b4c 	.word	0x20010b4c

0800b980 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800b980:	b082      	sub	sp, #8
 800b982:	b530      	push	{r4, r5, lr}
 800b984:	4925      	ldr	r1, [pc, #148]	; (800ba1c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800b986:	680d      	ldr	r5, [r1, #0]
 800b988:	ac03      	add	r4, sp, #12
 800b98a:	e884 000c 	stmia.w	r4, {r2, r3}
 800b98e:	461c      	mov	r4, r3
 800b990:	2d00      	cmp	r5, #0
 800b992:	d041      	beq.n	800ba18 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800b994:	462b      	mov	r3, r5
 800b996:	2100      	movs	r1, #0
 800b998:	689a      	ldr	r2, [r3, #8]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800b9a0:	4290      	cmp	r0, r2
 800b9a2:	bf08      	it	eq
 800b9a4:	3101      	addeq	r1, #1
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d1f6      	bne.n	800b998 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800b9aa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800b9ae:	2b02      	cmp	r3, #2
 800b9b0:	d029      	beq.n	800ba06 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b9b2:	d907      	bls.n	800b9c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	d005      	beq.n	800b9c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9be:	4608      	mov	r0, r1
 800b9c0:	b002      	add	sp, #8
 800b9c2:	4770      	bx	lr
 800b9c4:	b314      	cbz	r4, 800ba0c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b9c6:	428c      	cmp	r4, r1
 800b9c8:	d820      	bhi.n	800ba0c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b9ca:	2d00      	cmp	r5, #0
 800b9cc:	d0f4      	beq.n	800b9b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b9ce:	2100      	movs	r1, #0
 800b9d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b9d4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800b9d8:	e002      	b.n	800b9e0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800b9da:	686d      	ldr	r5, [r5, #4]
 800b9dc:	2d00      	cmp	r5, #0
 800b9de:	d0ec      	beq.n	800b9ba <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800b9e0:	68ab      	ldr	r3, [r5, #8]
 800b9e2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800b9e6:	4290      	cmp	r0, r2
 800b9e8:	d1f7      	bne.n	800b9da <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b9ea:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800b9ee:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800b9f2:	4562      	cmp	r2, ip
 800b9f4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b9f8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800b9fc:	daed      	bge.n	800b9da <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b9fe:	4694      	mov	ip, r2
 800ba00:	461c      	mov	r4, r3
 800ba02:	4629      	mov	r1, r5
 800ba04:	e7e9      	b.n	800b9da <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ba06:	b10c      	cbz	r4, 800ba0c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ba08:	428c      	cmp	r4, r1
 800ba0a:	d9d5      	bls.n	800b9b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ba0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba10:	4802      	ldr	r0, [pc, #8]	; (800ba1c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ba12:	b002      	add	sp, #8
 800ba14:	f007 bb54 	b.w	80130c0 <get_memory>
 800ba18:	4629      	mov	r1, r5
 800ba1a:	e7c6      	b.n	800b9aa <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800ba1c:	20010b2c 	.word	0x20010b2c

0800ba20 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800ba20:	4b11      	ldr	r3, [pc, #68]	; (800ba68 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	b530      	push	{r4, r5, lr}
 800ba26:	b1e3      	cbz	r3, 800ba62 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800ba28:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800ba2c:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800ba30:	2400      	movs	r4, #0
 800ba32:	e001      	b.n	800ba38 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	b193      	cbz	r3, 800ba5e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800ba38:	689a      	ldr	r2, [r3, #8]
 800ba3a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800ba3e:	4288      	cmp	r0, r1
 800ba40:	d1f8      	bne.n	800ba34 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ba42:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800ba46:	f8d2 281c 	ldr.w	r2, [r2, #2076]	; 0x81c
 800ba4a:	4571      	cmp	r1, lr
 800ba4c:	eb72 050c 	sbcs.w	r5, r2, ip
 800ba50:	daf0      	bge.n	800ba34 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ba52:	461c      	mov	r4, r3
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	468e      	mov	lr, r1
 800ba58:	4694      	mov	ip, r2
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1ec      	bne.n	800ba38 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ba5e:	4620      	mov	r0, r4
 800ba60:	bd30      	pop	{r4, r5, pc}
 800ba62:	461c      	mov	r4, r3
 800ba64:	4620      	mov	r0, r4
 800ba66:	bd30      	pop	{r4, r5, pc}
 800ba68:	20010b2c 	.word	0x20010b2c
 800ba6c:	00000000 	.word	0x00000000

0800ba70 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ba70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba74:	4b3c      	ldr	r3, [pc, #240]	; (800bb68 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ba76:	ed2d 8b06 	vpush	{d8-d10}
 800ba7a:	681f      	ldr	r7, [r3, #0]
 800ba7c:	b08d      	sub	sp, #52	; 0x34
 800ba7e:	f008 fc5d 	bl	801433c <rmw_uros_epoch_nanos>
 800ba82:	2f00      	cmp	r7, #0
 800ba84:	d05d      	beq.n	800bb42 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800ba86:	46b8      	mov	r8, r7
 800ba88:	ed9f 8b31 	vldr	d8, [pc, #196]	; 800bb50 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800ba8c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ba90:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800ba94:	2b04      	cmp	r3, #4
 800ba96:	ed9f ab30 	vldr	d10, [pc, #192]	; 800bb58 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800ba9a:	ed9f 9b31 	vldr	d9, [pc, #196]	; 800bb60 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800ba9e:	4681      	mov	r9, r0
 800baa0:	468a      	mov	sl, r1
 800baa2:	ac04      	add	r4, sp, #16
 800baa4:	d03f      	beq.n	800bb26 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800baa6:	2b05      	cmp	r3, #5
 800baa8:	d044      	beq.n	800bb34 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800baaa:	2b03      	cmp	r3, #3
 800baac:	d03b      	beq.n	800bb26 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800baae:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bab2:	ed8d ab06 	vstr	d10, [sp, #24]
 800bab6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800baba:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800babe:	ab08      	add	r3, sp, #32
 800bac0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bac2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bac6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800baca:	f007 f92d 	bl	8012d28 <rmw_time_equal>
 800bace:	b118      	cbz	r0, 800bad8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800bad0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800bad4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800bad8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800badc:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800bae0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	; 0x81c
 800bae4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800bae8:	f007 f972 	bl	8012dd0 <rmw_time_total_nsec>
 800baec:	1830      	adds	r0, r6, r0
 800baee:	eb47 0101 	adc.w	r1, r7, r1
 800baf2:	4548      	cmp	r0, r9
 800baf4:	eb71 030a 	sbcs.w	r3, r1, sl
 800baf8:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800bafc:	db05      	blt.n	800bb0a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800bafe:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800bb02:	4591      	cmp	r9, r2
 800bb04:	eb7a 0303 	sbcs.w	r3, sl, r3
 800bb08:	da03      	bge.n	800bb12 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800bb0a:	4817      	ldr	r0, [pc, #92]	; (800bb68 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800bb0c:	4641      	mov	r1, r8
 800bb0e:	f007 fae7 	bl	80130e0 <put_memory>
 800bb12:	f1bb 0f00 	cmp.w	fp, #0
 800bb16:	d014      	beq.n	800bb42 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800bb18:	46d8      	mov	r8, fp
 800bb1a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800bb1e:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800bb22:	2b04      	cmp	r3, #4
 800bb24:	d1bf      	bne.n	800baa6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800bb26:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800bb2a:	3340      	adds	r3, #64	; 0x40
 800bb2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bb2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bb32:	e7c0      	b.n	800bab6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800bb34:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800bb38:	3348      	adds	r3, #72	; 0x48
 800bb3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bb3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bb40:	e7b9      	b.n	800bab6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800bb42:	b00d      	add	sp, #52	; 0x34
 800bb44:	ecbd 8b06 	vpop	{d8-d10}
 800bb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb4c:	f3af 8000 	nop.w
	...
 800bb58:	00000001 	.word	0x00000001
 800bb5c:	00000000 	.word	0x00000000
 800bb60:	0000001e 	.word	0x0000001e
 800bb64:	00000000 	.word	0x00000000
 800bb68:	20010b2c 	.word	0x20010b2c

0800bb6c <run_xrce_session>:
 800bb6c:	b510      	push	{r4, lr}
 800bb6e:	788c      	ldrb	r4, [r1, #2]
 800bb70:	b086      	sub	sp, #24
 800bb72:	2c01      	cmp	r4, #1
 800bb74:	f8ad 200e 	strh.w	r2, [sp, #14]
 800bb78:	d00c      	beq.n	800bb94 <run_xrce_session+0x28>
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	f10d 020e 	add.w	r2, sp, #14
 800bb84:	f10d 0317 	add.w	r3, sp, #23
 800bb88:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bb8c:	f002 f862 	bl	800dc54 <uxr_run_session_until_all_status>
 800bb90:	b006      	add	sp, #24
 800bb92:	bd10      	pop	{r4, pc}
 800bb94:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bb98:	f001 fc76 	bl	800d488 <uxr_flash_output_streams>
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	b006      	add	sp, #24
 800bba0:	bd10      	pop	{r4, pc}
 800bba2:	bf00      	nop

0800bba4 <convert_qos_profile>:
 800bba4:	7a4a      	ldrb	r2, [r1, #9]
 800bba6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800bbaa:	2a02      	cmp	r2, #2
 800bbac:	bf18      	it	ne
 800bbae:	2200      	movne	r2, #0
 800bbb0:	7002      	strb	r2, [r0, #0]
 800bbb2:	780a      	ldrb	r2, [r1, #0]
 800bbb4:	8889      	ldrh	r1, [r1, #4]
 800bbb6:	8081      	strh	r1, [r0, #4]
 800bbb8:	f1ac 0c02 	sub.w	ip, ip, #2
 800bbbc:	f1a2 0202 	sub.w	r2, r2, #2
 800bbc0:	fabc fc8c 	clz	ip, ip
 800bbc4:	fab2 f282 	clz	r2, r2
 800bbc8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800bbcc:	0952      	lsrs	r2, r2, #5
 800bbce:	f880 c001 	strb.w	ip, [r0, #1]
 800bbd2:	7082      	strb	r2, [r0, #2]
 800bbd4:	4770      	bx	lr
 800bbd6:	bf00      	nop

0800bbd8 <generate_type_name>:
 800bbd8:	b530      	push	{r4, r5, lr}
 800bbda:	2300      	movs	r3, #0
 800bbdc:	700b      	strb	r3, [r1, #0]
 800bbde:	6803      	ldr	r3, [r0, #0]
 800bbe0:	b087      	sub	sp, #28
 800bbe2:	4614      	mov	r4, r2
 800bbe4:	b1d3      	cbz	r3, 800bc1c <generate_type_name+0x44>
 800bbe6:	4a0f      	ldr	r2, [pc, #60]	; (800bc24 <generate_type_name+0x4c>)
 800bbe8:	4615      	mov	r5, r2
 800bbea:	9203      	str	r2, [sp, #12]
 800bbec:	9500      	str	r5, [sp, #0]
 800bbee:	6842      	ldr	r2, [r0, #4]
 800bbf0:	480d      	ldr	r0, [pc, #52]	; (800bc28 <generate_type_name+0x50>)
 800bbf2:	9001      	str	r0, [sp, #4]
 800bbf4:	4608      	mov	r0, r1
 800bbf6:	490d      	ldr	r1, [pc, #52]	; (800bc2c <generate_type_name+0x54>)
 800bbf8:	9204      	str	r2, [sp, #16]
 800bbfa:	9105      	str	r1, [sp, #20]
 800bbfc:	9102      	str	r1, [sp, #8]
 800bbfe:	4a0c      	ldr	r2, [pc, #48]	; (800bc30 <generate_type_name+0x58>)
 800bc00:	4621      	mov	r1, r4
 800bc02:	f00b f8cf 	bl	8016da4 <sniprintf>
 800bc06:	2800      	cmp	r0, #0
 800bc08:	db05      	blt.n	800bc16 <generate_type_name+0x3e>
 800bc0a:	4284      	cmp	r4, r0
 800bc0c:	bfd4      	ite	le
 800bc0e:	2000      	movle	r0, #0
 800bc10:	2001      	movgt	r0, #1
 800bc12:	b007      	add	sp, #28
 800bc14:	bd30      	pop	{r4, r5, pc}
 800bc16:	2000      	movs	r0, #0
 800bc18:	b007      	add	sp, #28
 800bc1a:	bd30      	pop	{r4, r5, pc}
 800bc1c:	4b05      	ldr	r3, [pc, #20]	; (800bc34 <generate_type_name+0x5c>)
 800bc1e:	4a01      	ldr	r2, [pc, #4]	; (800bc24 <generate_type_name+0x4c>)
 800bc20:	461d      	mov	r5, r3
 800bc22:	e7e2      	b.n	800bbea <generate_type_name+0x12>
 800bc24:	08018224 	.word	0x08018224
 800bc28:	0801823c 	.word	0x0801823c
 800bc2c:	08018238 	.word	0x08018238
 800bc30:	08018228 	.word	0x08018228
 800bc34:	0801872c 	.word	0x0801872c

0800bc38 <generate_topic_name>:
 800bc38:	b510      	push	{r4, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	4614      	mov	r4, r2
 800bc3e:	9000      	str	r0, [sp, #0]
 800bc40:	4b08      	ldr	r3, [pc, #32]	; (800bc64 <generate_topic_name+0x2c>)
 800bc42:	4a09      	ldr	r2, [pc, #36]	; (800bc68 <generate_topic_name+0x30>)
 800bc44:	4608      	mov	r0, r1
 800bc46:	4621      	mov	r1, r4
 800bc48:	f00b f8ac 	bl	8016da4 <sniprintf>
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	db05      	blt.n	800bc5c <generate_topic_name+0x24>
 800bc50:	4284      	cmp	r4, r0
 800bc52:	bfd4      	ite	le
 800bc54:	2000      	movle	r0, #0
 800bc56:	2001      	movgt	r0, #1
 800bc58:	b002      	add	sp, #8
 800bc5a:	bd10      	pop	{r4, pc}
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	b002      	add	sp, #8
 800bc60:	bd10      	pop	{r4, pc}
 800bc62:	bf00      	nop
 800bc64:	08018248 	.word	0x08018248
 800bc68:	08018240 	.word	0x08018240

0800bc6c <is_uxrce_rmw_identifier_valid>:
 800bc6c:	b510      	push	{r4, lr}
 800bc6e:	4604      	mov	r4, r0
 800bc70:	b140      	cbz	r0, 800bc84 <is_uxrce_rmw_identifier_valid+0x18>
 800bc72:	f007 fa8d 	bl	8013190 <rmw_get_implementation_identifier>
 800bc76:	4601      	mov	r1, r0
 800bc78:	4620      	mov	r0, r4
 800bc7a:	f7f4 fab1 	bl	80001e0 <strcmp>
 800bc7e:	fab0 f080 	clz	r0, r0
 800bc82:	0940      	lsrs	r0, r0, #5
 800bc84:	bd10      	pop	{r4, pc}
 800bc86:	bf00      	nop

0800bc88 <get_message_typesupport_handle>:
 800bc88:	6883      	ldr	r3, [r0, #8]
 800bc8a:	4718      	bx	r3

0800bc8c <get_message_typesupport_handle_function>:
 800bc8c:	b510      	push	{r4, lr}
 800bc8e:	4604      	mov	r4, r0
 800bc90:	6800      	ldr	r0, [r0, #0]
 800bc92:	f7f4 faa5 	bl	80001e0 <strcmp>
 800bc96:	2800      	cmp	r0, #0
 800bc98:	bf0c      	ite	eq
 800bc9a:	4620      	moveq	r0, r4
 800bc9c:	2000      	movne	r0, #0
 800bc9e:	bd10      	pop	{r4, pc}

0800bca0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800bca0:	4b04      	ldr	r3, [pc, #16]	; (800bcb4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	b10a      	cbz	r2, 800bcaa <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800bca6:	4803      	ldr	r0, [pc, #12]	; (800bcb4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800bca8:	4770      	bx	lr
 800bcaa:	4a03      	ldr	r2, [pc, #12]	; (800bcb8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800bcac:	4801      	ldr	r0, [pc, #4]	; (800bcb4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800bcae:	6812      	ldr	r2, [r2, #0]
 800bcb0:	601a      	str	r2, [r3, #0]
 800bcb2:	4770      	bx	lr
 800bcb4:	20000030 	.word	0x20000030
 800bcb8:	200000ac 	.word	0x200000ac

0800bcbc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800bcbc:	4a02      	ldr	r2, [pc, #8]	; (800bcc8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800bcbe:	4b03      	ldr	r3, [pc, #12]	; (800bccc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800bcc0:	6812      	ldr	r2, [r2, #0]
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	4770      	bx	lr
 800bcc6:	bf00      	nop
 800bcc8:	200000ac 	.word	0x200000ac
 800bccc:	20000030 	.word	0x20000030

0800bcd0 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800bcd0:	f008 bb70 	b.w	80143b4 <std_msgs__msg__Int32__init>

0800bcd4 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800bcd4:	f008 bb72 	b.w	80143bc <std_msgs__msg__Int32__fini>

0800bcd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800bcd8:	4b04      	ldr	r3, [pc, #16]	; (800bcec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	b10a      	cbz	r2, 800bce2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800bcde:	4803      	ldr	r0, [pc, #12]	; (800bcec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800bce0:	4770      	bx	lr
 800bce2:	4a03      	ldr	r2, [pc, #12]	; (800bcf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800bce4:	4801      	ldr	r0, [pc, #4]	; (800bcec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800bce6:	6812      	ldr	r2, [r2, #0]
 800bce8:	601a      	str	r2, [r3, #0]
 800bcea:	4770      	bx	lr
 800bcec:	20000078 	.word	0x20000078
 800bcf0:	200000b0 	.word	0x200000b0

0800bcf4 <_Int32__max_serialized_size>:
 800bcf4:	b508      	push	{r3, lr}
 800bcf6:	2104      	movs	r1, #4
 800bcf8:	2000      	movs	r0, #0
 800bcfa:	f001 f807 	bl	800cd0c <ucdr_alignment>
 800bcfe:	3004      	adds	r0, #4
 800bd00:	bd08      	pop	{r3, pc}
 800bd02:	bf00      	nop

0800bd04 <_Int32__cdr_deserialize>:
 800bd04:	b109      	cbz	r1, 800bd0a <_Int32__cdr_deserialize+0x6>
 800bd06:	f000 bf19 	b.w	800cb3c <ucdr_deserialize_int32_t>
 800bd0a:	4608      	mov	r0, r1
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop

0800bd10 <get_serialized_size_std_msgs__msg__Int32>:
 800bd10:	b138      	cbz	r0, 800bd22 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800bd12:	b508      	push	{r3, lr}
 800bd14:	460b      	mov	r3, r1
 800bd16:	4618      	mov	r0, r3
 800bd18:	2104      	movs	r1, #4
 800bd1a:	f000 fff7 	bl	800cd0c <ucdr_alignment>
 800bd1e:	3004      	adds	r0, #4
 800bd20:	bd08      	pop	{r3, pc}
 800bd22:	4770      	bx	lr

0800bd24 <_Int32__cdr_serialize>:
 800bd24:	460a      	mov	r2, r1
 800bd26:	b118      	cbz	r0, 800bd30 <_Int32__cdr_serialize+0xc>
 800bd28:	6801      	ldr	r1, [r0, #0]
 800bd2a:	4610      	mov	r0, r2
 800bd2c:	f000 be6e 	b.w	800ca0c <ucdr_serialize_int32_t>
 800bd30:	4770      	bx	lr
 800bd32:	bf00      	nop

0800bd34 <_Int32__get_serialized_size>:
 800bd34:	b130      	cbz	r0, 800bd44 <_Int32__get_serialized_size+0x10>
 800bd36:	b508      	push	{r3, lr}
 800bd38:	2104      	movs	r1, #4
 800bd3a:	2000      	movs	r0, #0
 800bd3c:	f000 ffe6 	bl	800cd0c <ucdr_alignment>
 800bd40:	3004      	adds	r0, #4
 800bd42:	bd08      	pop	{r3, pc}
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop

0800bd48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800bd48:	4800      	ldr	r0, [pc, #0]	; (800bd4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800bd4a:	4770      	bx	lr
 800bd4c:	20000084 	.word	0x20000084

0800bd50 <ucdr_serialize_bool>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	460d      	mov	r5, r1
 800bd54:	2101      	movs	r1, #1
 800bd56:	4604      	mov	r4, r0
 800bd58:	f000 ff8c 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800bd5c:	b148      	cbz	r0, 800bd72 <ucdr_serialize_bool+0x22>
 800bd5e:	68a3      	ldr	r3, [r4, #8]
 800bd60:	701d      	strb	r5, [r3, #0]
 800bd62:	68a2      	ldr	r2, [r4, #8]
 800bd64:	6923      	ldr	r3, [r4, #16]
 800bd66:	2101      	movs	r1, #1
 800bd68:	440a      	add	r2, r1
 800bd6a:	440b      	add	r3, r1
 800bd6c:	60a2      	str	r2, [r4, #8]
 800bd6e:	6123      	str	r3, [r4, #16]
 800bd70:	7561      	strb	r1, [r4, #21]
 800bd72:	7da0      	ldrb	r0, [r4, #22]
 800bd74:	f080 0001 	eor.w	r0, r0, #1
 800bd78:	bd38      	pop	{r3, r4, r5, pc}
 800bd7a:	bf00      	nop

0800bd7c <ucdr_deserialize_bool>:
 800bd7c:	b538      	push	{r3, r4, r5, lr}
 800bd7e:	460d      	mov	r5, r1
 800bd80:	2101      	movs	r1, #1
 800bd82:	4604      	mov	r4, r0
 800bd84:	f000 ff76 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800bd88:	b160      	cbz	r0, 800bda4 <ucdr_deserialize_bool+0x28>
 800bd8a:	68a2      	ldr	r2, [r4, #8]
 800bd8c:	6923      	ldr	r3, [r4, #16]
 800bd8e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800bd92:	3900      	subs	r1, #0
 800bd94:	bf18      	it	ne
 800bd96:	2101      	movne	r1, #1
 800bd98:	7029      	strb	r1, [r5, #0]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	2101      	movs	r1, #1
 800bd9e:	60a2      	str	r2, [r4, #8]
 800bda0:	6123      	str	r3, [r4, #16]
 800bda2:	7561      	strb	r1, [r4, #21]
 800bda4:	7da0      	ldrb	r0, [r4, #22]
 800bda6:	f080 0001 	eor.w	r0, r0, #1
 800bdaa:	bd38      	pop	{r3, r4, r5, pc}

0800bdac <ucdr_serialize_uint8_t>:
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	460d      	mov	r5, r1
 800bdb0:	2101      	movs	r1, #1
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	f000 ff5e 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800bdb8:	b148      	cbz	r0, 800bdce <ucdr_serialize_uint8_t+0x22>
 800bdba:	68a3      	ldr	r3, [r4, #8]
 800bdbc:	701d      	strb	r5, [r3, #0]
 800bdbe:	68a2      	ldr	r2, [r4, #8]
 800bdc0:	6923      	ldr	r3, [r4, #16]
 800bdc2:	2101      	movs	r1, #1
 800bdc4:	440a      	add	r2, r1
 800bdc6:	440b      	add	r3, r1
 800bdc8:	60a2      	str	r2, [r4, #8]
 800bdca:	6123      	str	r3, [r4, #16]
 800bdcc:	7561      	strb	r1, [r4, #21]
 800bdce:	7da0      	ldrb	r0, [r4, #22]
 800bdd0:	f080 0001 	eor.w	r0, r0, #1
 800bdd4:	bd38      	pop	{r3, r4, r5, pc}
 800bdd6:	bf00      	nop

0800bdd8 <ucdr_deserialize_uint8_t>:
 800bdd8:	b538      	push	{r3, r4, r5, lr}
 800bdda:	460d      	mov	r5, r1
 800bddc:	2101      	movs	r1, #1
 800bdde:	4604      	mov	r4, r0
 800bde0:	f000 ff48 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800bde4:	b150      	cbz	r0, 800bdfc <ucdr_deserialize_uint8_t+0x24>
 800bde6:	68a3      	ldr	r3, [r4, #8]
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	702b      	strb	r3, [r5, #0]
 800bdec:	68a2      	ldr	r2, [r4, #8]
 800bdee:	6923      	ldr	r3, [r4, #16]
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	440a      	add	r2, r1
 800bdf4:	440b      	add	r3, r1
 800bdf6:	60a2      	str	r2, [r4, #8]
 800bdf8:	6123      	str	r3, [r4, #16]
 800bdfa:	7561      	strb	r1, [r4, #21]
 800bdfc:	7da0      	ldrb	r0, [r4, #22]
 800bdfe:	f080 0001 	eor.w	r0, r0, #1
 800be02:	bd38      	pop	{r3, r4, r5, pc}

0800be04 <ucdr_serialize_uint16_t>:
 800be04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be08:	b082      	sub	sp, #8
 800be0a:	460b      	mov	r3, r1
 800be0c:	2102      	movs	r1, #2
 800be0e:	4604      	mov	r4, r0
 800be10:	f8ad 3006 	strh.w	r3, [sp, #6]
 800be14:	f000 ff82 	bl	800cd1c <ucdr_buffer_alignment>
 800be18:	4601      	mov	r1, r0
 800be1a:	4620      	mov	r0, r4
 800be1c:	7d67      	ldrb	r7, [r4, #21]
 800be1e:	f000 ffc1 	bl	800cda4 <ucdr_advance_buffer>
 800be22:	2102      	movs	r1, #2
 800be24:	4620      	mov	r0, r4
 800be26:	f000 ff19 	bl	800cc5c <ucdr_check_buffer_available_for>
 800be2a:	bb78      	cbnz	r0, 800be8c <ucdr_serialize_uint16_t+0x88>
 800be2c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800be30:	42ab      	cmp	r3, r5
 800be32:	d926      	bls.n	800be82 <ucdr_serialize_uint16_t+0x7e>
 800be34:	1b5e      	subs	r6, r3, r5
 800be36:	60a3      	str	r3, [r4, #8]
 800be38:	6923      	ldr	r3, [r4, #16]
 800be3a:	f1c6 0802 	rsb	r8, r6, #2
 800be3e:	4433      	add	r3, r6
 800be40:	6123      	str	r3, [r4, #16]
 800be42:	4641      	mov	r1, r8
 800be44:	4620      	mov	r0, r4
 800be46:	f000 ff15 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800be4a:	2800      	cmp	r0, #0
 800be4c:	d03b      	beq.n	800bec6 <ucdr_serialize_uint16_t+0xc2>
 800be4e:	7d23      	ldrb	r3, [r4, #20]
 800be50:	2b01      	cmp	r3, #1
 800be52:	d04a      	beq.n	800beea <ucdr_serialize_uint16_t+0xe6>
 800be54:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800be58:	702b      	strb	r3, [r5, #0]
 800be5a:	2e00      	cmp	r6, #0
 800be5c:	d040      	beq.n	800bee0 <ucdr_serialize_uint16_t+0xdc>
 800be5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800be62:	706b      	strb	r3, [r5, #1]
 800be64:	6923      	ldr	r3, [r4, #16]
 800be66:	68a2      	ldr	r2, [r4, #8]
 800be68:	7da0      	ldrb	r0, [r4, #22]
 800be6a:	3302      	adds	r3, #2
 800be6c:	1b9e      	subs	r6, r3, r6
 800be6e:	4442      	add	r2, r8
 800be70:	2302      	movs	r3, #2
 800be72:	f080 0001 	eor.w	r0, r0, #1
 800be76:	60a2      	str	r2, [r4, #8]
 800be78:	6126      	str	r6, [r4, #16]
 800be7a:	7563      	strb	r3, [r4, #21]
 800be7c:	b002      	add	sp, #8
 800be7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be82:	2102      	movs	r1, #2
 800be84:	4620      	mov	r0, r4
 800be86:	f000 fef5 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800be8a:	b190      	cbz	r0, 800beb2 <ucdr_serialize_uint16_t+0xae>
 800be8c:	7d23      	ldrb	r3, [r4, #20]
 800be8e:	2b01      	cmp	r3, #1
 800be90:	68a3      	ldr	r3, [r4, #8]
 800be92:	d014      	beq.n	800bebe <ucdr_serialize_uint16_t+0xba>
 800be94:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800be98:	701a      	strb	r2, [r3, #0]
 800be9a:	68a3      	ldr	r3, [r4, #8]
 800be9c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bea0:	705a      	strb	r2, [r3, #1]
 800bea2:	68a2      	ldr	r2, [r4, #8]
 800bea4:	6923      	ldr	r3, [r4, #16]
 800bea6:	3202      	adds	r2, #2
 800bea8:	3302      	adds	r3, #2
 800beaa:	2102      	movs	r1, #2
 800beac:	60a2      	str	r2, [r4, #8]
 800beae:	6123      	str	r3, [r4, #16]
 800beb0:	7561      	strb	r1, [r4, #21]
 800beb2:	7da0      	ldrb	r0, [r4, #22]
 800beb4:	f080 0001 	eor.w	r0, r0, #1
 800beb8:	b002      	add	sp, #8
 800beba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bebe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bec2:	801a      	strh	r2, [r3, #0]
 800bec4:	e7ed      	b.n	800bea2 <ucdr_serialize_uint16_t+0x9e>
 800bec6:	68a2      	ldr	r2, [r4, #8]
 800bec8:	6923      	ldr	r3, [r4, #16]
 800beca:	7da0      	ldrb	r0, [r4, #22]
 800becc:	7567      	strb	r7, [r4, #21]
 800bece:	1b92      	subs	r2, r2, r6
 800bed0:	1b9b      	subs	r3, r3, r6
 800bed2:	f080 0001 	eor.w	r0, r0, #1
 800bed6:	60a2      	str	r2, [r4, #8]
 800bed8:	6123      	str	r3, [r4, #16]
 800beda:	b002      	add	sp, #8
 800bedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bee0:	68a3      	ldr	r3, [r4, #8]
 800bee2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bee6:	701a      	strb	r2, [r3, #0]
 800bee8:	e7bc      	b.n	800be64 <ucdr_serialize_uint16_t+0x60>
 800beea:	4628      	mov	r0, r5
 800beec:	f10d 0506 	add.w	r5, sp, #6
 800bef0:	4629      	mov	r1, r5
 800bef2:	4632      	mov	r2, r6
 800bef4:	f00b f94f 	bl	8017196 <memcpy>
 800bef8:	68a0      	ldr	r0, [r4, #8]
 800befa:	4642      	mov	r2, r8
 800befc:	19a9      	adds	r1, r5, r6
 800befe:	f00b f94a 	bl	8017196 <memcpy>
 800bf02:	e7af      	b.n	800be64 <ucdr_serialize_uint16_t+0x60>

0800bf04 <ucdr_serialize_endian_uint16_t>:
 800bf04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf08:	b083      	sub	sp, #12
 800bf0a:	460d      	mov	r5, r1
 800bf0c:	2102      	movs	r1, #2
 800bf0e:	4604      	mov	r4, r0
 800bf10:	f8ad 2006 	strh.w	r2, [sp, #6]
 800bf14:	f000 ff02 	bl	800cd1c <ucdr_buffer_alignment>
 800bf18:	4601      	mov	r1, r0
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bf20:	f000 ff40 	bl	800cda4 <ucdr_advance_buffer>
 800bf24:	2102      	movs	r1, #2
 800bf26:	4620      	mov	r0, r4
 800bf28:	f000 fe98 	bl	800cc5c <ucdr_check_buffer_available_for>
 800bf2c:	bb70      	cbnz	r0, 800bf8c <ucdr_serialize_endian_uint16_t+0x88>
 800bf2e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bf32:	42be      	cmp	r6, r7
 800bf34:	d925      	bls.n	800bf82 <ucdr_serialize_endian_uint16_t+0x7e>
 800bf36:	6923      	ldr	r3, [r4, #16]
 800bf38:	60a6      	str	r6, [r4, #8]
 800bf3a:	1bf6      	subs	r6, r6, r7
 800bf3c:	4433      	add	r3, r6
 800bf3e:	f1c6 0902 	rsb	r9, r6, #2
 800bf42:	6123      	str	r3, [r4, #16]
 800bf44:	4649      	mov	r1, r9
 800bf46:	4620      	mov	r0, r4
 800bf48:	f000 fe94 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d039      	beq.n	800bfc4 <ucdr_serialize_endian_uint16_t+0xc0>
 800bf50:	2d01      	cmp	r5, #1
 800bf52:	d04a      	beq.n	800bfea <ucdr_serialize_endian_uint16_t+0xe6>
 800bf54:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bf58:	703b      	strb	r3, [r7, #0]
 800bf5a:	2e00      	cmp	r6, #0
 800bf5c:	d040      	beq.n	800bfe0 <ucdr_serialize_endian_uint16_t+0xdc>
 800bf5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bf62:	707b      	strb	r3, [r7, #1]
 800bf64:	6923      	ldr	r3, [r4, #16]
 800bf66:	68a2      	ldr	r2, [r4, #8]
 800bf68:	7da0      	ldrb	r0, [r4, #22]
 800bf6a:	3302      	adds	r3, #2
 800bf6c:	444a      	add	r2, r9
 800bf6e:	1b9b      	subs	r3, r3, r6
 800bf70:	2102      	movs	r1, #2
 800bf72:	f080 0001 	eor.w	r0, r0, #1
 800bf76:	60a2      	str	r2, [r4, #8]
 800bf78:	6123      	str	r3, [r4, #16]
 800bf7a:	7561      	strb	r1, [r4, #21]
 800bf7c:	b003      	add	sp, #12
 800bf7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf82:	2102      	movs	r1, #2
 800bf84:	4620      	mov	r0, r4
 800bf86:	f000 fe75 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800bf8a:	b188      	cbz	r0, 800bfb0 <ucdr_serialize_endian_uint16_t+0xac>
 800bf8c:	2d01      	cmp	r5, #1
 800bf8e:	68a3      	ldr	r3, [r4, #8]
 800bf90:	d014      	beq.n	800bfbc <ucdr_serialize_endian_uint16_t+0xb8>
 800bf92:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bf96:	701a      	strb	r2, [r3, #0]
 800bf98:	68a3      	ldr	r3, [r4, #8]
 800bf9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf9e:	705a      	strb	r2, [r3, #1]
 800bfa0:	68a2      	ldr	r2, [r4, #8]
 800bfa2:	6923      	ldr	r3, [r4, #16]
 800bfa4:	3202      	adds	r2, #2
 800bfa6:	3302      	adds	r3, #2
 800bfa8:	2102      	movs	r1, #2
 800bfaa:	60a2      	str	r2, [r4, #8]
 800bfac:	6123      	str	r3, [r4, #16]
 800bfae:	7561      	strb	r1, [r4, #21]
 800bfb0:	7da0      	ldrb	r0, [r4, #22]
 800bfb2:	f080 0001 	eor.w	r0, r0, #1
 800bfb6:	b003      	add	sp, #12
 800bfb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfbc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bfc0:	801a      	strh	r2, [r3, #0]
 800bfc2:	e7ed      	b.n	800bfa0 <ucdr_serialize_endian_uint16_t+0x9c>
 800bfc4:	68a2      	ldr	r2, [r4, #8]
 800bfc6:	6923      	ldr	r3, [r4, #16]
 800bfc8:	7da0      	ldrb	r0, [r4, #22]
 800bfca:	f884 8015 	strb.w	r8, [r4, #21]
 800bfce:	1b92      	subs	r2, r2, r6
 800bfd0:	1b9b      	subs	r3, r3, r6
 800bfd2:	f080 0001 	eor.w	r0, r0, #1
 800bfd6:	60a2      	str	r2, [r4, #8]
 800bfd8:	6123      	str	r3, [r4, #16]
 800bfda:	b003      	add	sp, #12
 800bfdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfe0:	68a3      	ldr	r3, [r4, #8]
 800bfe2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bfe6:	701a      	strb	r2, [r3, #0]
 800bfe8:	e7bc      	b.n	800bf64 <ucdr_serialize_endian_uint16_t+0x60>
 800bfea:	f10d 0506 	add.w	r5, sp, #6
 800bfee:	4629      	mov	r1, r5
 800bff0:	4632      	mov	r2, r6
 800bff2:	4638      	mov	r0, r7
 800bff4:	f00b f8cf 	bl	8017196 <memcpy>
 800bff8:	68a0      	ldr	r0, [r4, #8]
 800bffa:	464a      	mov	r2, r9
 800bffc:	19a9      	adds	r1, r5, r6
 800bffe:	f00b f8ca 	bl	8017196 <memcpy>
 800c002:	e7af      	b.n	800bf64 <ucdr_serialize_endian_uint16_t+0x60>

0800c004 <ucdr_deserialize_uint16_t>:
 800c004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c008:	460d      	mov	r5, r1
 800c00a:	2102      	movs	r1, #2
 800c00c:	4604      	mov	r4, r0
 800c00e:	f000 fe85 	bl	800cd1c <ucdr_buffer_alignment>
 800c012:	4601      	mov	r1, r0
 800c014:	4620      	mov	r0, r4
 800c016:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c01a:	f000 fec3 	bl	800cda4 <ucdr_advance_buffer>
 800c01e:	2102      	movs	r1, #2
 800c020:	4620      	mov	r0, r4
 800c022:	f000 fe1b 	bl	800cc5c <ucdr_check_buffer_available_for>
 800c026:	bb60      	cbnz	r0, 800c082 <ucdr_deserialize_uint16_t+0x7e>
 800c028:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c02c:	42be      	cmp	r6, r7
 800c02e:	d923      	bls.n	800c078 <ucdr_deserialize_uint16_t+0x74>
 800c030:	6923      	ldr	r3, [r4, #16]
 800c032:	60a6      	str	r6, [r4, #8]
 800c034:	1bf6      	subs	r6, r6, r7
 800c036:	4433      	add	r3, r6
 800c038:	f1c6 0902 	rsb	r9, r6, #2
 800c03c:	6123      	str	r3, [r4, #16]
 800c03e:	4649      	mov	r1, r9
 800c040:	4620      	mov	r0, r4
 800c042:	f000 fe17 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800c046:	2800      	cmp	r0, #0
 800c048:	d034      	beq.n	800c0b4 <ucdr_deserialize_uint16_t+0xb0>
 800c04a:	7d23      	ldrb	r3, [r4, #20]
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d042      	beq.n	800c0d6 <ucdr_deserialize_uint16_t+0xd2>
 800c050:	787b      	ldrb	r3, [r7, #1]
 800c052:	702b      	strb	r3, [r5, #0]
 800c054:	2e00      	cmp	r6, #0
 800c056:	d03a      	beq.n	800c0ce <ucdr_deserialize_uint16_t+0xca>
 800c058:	783b      	ldrb	r3, [r7, #0]
 800c05a:	706b      	strb	r3, [r5, #1]
 800c05c:	6923      	ldr	r3, [r4, #16]
 800c05e:	68a2      	ldr	r2, [r4, #8]
 800c060:	7da0      	ldrb	r0, [r4, #22]
 800c062:	2102      	movs	r1, #2
 800c064:	3302      	adds	r3, #2
 800c066:	444a      	add	r2, r9
 800c068:	1b9b      	subs	r3, r3, r6
 800c06a:	7561      	strb	r1, [r4, #21]
 800c06c:	60a2      	str	r2, [r4, #8]
 800c06e:	6123      	str	r3, [r4, #16]
 800c070:	f080 0001 	eor.w	r0, r0, #1
 800c074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c078:	2102      	movs	r1, #2
 800c07a:	4620      	mov	r0, r4
 800c07c:	f000 fdfa 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800c080:	b180      	cbz	r0, 800c0a4 <ucdr_deserialize_uint16_t+0xa0>
 800c082:	7d23      	ldrb	r3, [r4, #20]
 800c084:	2b01      	cmp	r3, #1
 800c086:	68a3      	ldr	r3, [r4, #8]
 800c088:	d011      	beq.n	800c0ae <ucdr_deserialize_uint16_t+0xaa>
 800c08a:	785b      	ldrb	r3, [r3, #1]
 800c08c:	702b      	strb	r3, [r5, #0]
 800c08e:	68a3      	ldr	r3, [r4, #8]
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	706b      	strb	r3, [r5, #1]
 800c094:	68a2      	ldr	r2, [r4, #8]
 800c096:	6923      	ldr	r3, [r4, #16]
 800c098:	3202      	adds	r2, #2
 800c09a:	3302      	adds	r3, #2
 800c09c:	2102      	movs	r1, #2
 800c09e:	60a2      	str	r2, [r4, #8]
 800c0a0:	6123      	str	r3, [r4, #16]
 800c0a2:	7561      	strb	r1, [r4, #21]
 800c0a4:	7da0      	ldrb	r0, [r4, #22]
 800c0a6:	f080 0001 	eor.w	r0, r0, #1
 800c0aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ae:	881b      	ldrh	r3, [r3, #0]
 800c0b0:	802b      	strh	r3, [r5, #0]
 800c0b2:	e7ef      	b.n	800c094 <ucdr_deserialize_uint16_t+0x90>
 800c0b4:	68a2      	ldr	r2, [r4, #8]
 800c0b6:	6923      	ldr	r3, [r4, #16]
 800c0b8:	7da0      	ldrb	r0, [r4, #22]
 800c0ba:	f884 8015 	strb.w	r8, [r4, #21]
 800c0be:	1b92      	subs	r2, r2, r6
 800c0c0:	1b9b      	subs	r3, r3, r6
 800c0c2:	60a2      	str	r2, [r4, #8]
 800c0c4:	6123      	str	r3, [r4, #16]
 800c0c6:	f080 0001 	eor.w	r0, r0, #1
 800c0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ce:	68a3      	ldr	r3, [r4, #8]
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	706b      	strb	r3, [r5, #1]
 800c0d4:	e7c2      	b.n	800c05c <ucdr_deserialize_uint16_t+0x58>
 800c0d6:	4639      	mov	r1, r7
 800c0d8:	4632      	mov	r2, r6
 800c0da:	4628      	mov	r0, r5
 800c0dc:	f00b f85b 	bl	8017196 <memcpy>
 800c0e0:	68a1      	ldr	r1, [r4, #8]
 800c0e2:	464a      	mov	r2, r9
 800c0e4:	19a8      	adds	r0, r5, r6
 800c0e6:	f00b f856 	bl	8017196 <memcpy>
 800c0ea:	e7b7      	b.n	800c05c <ucdr_deserialize_uint16_t+0x58>

0800c0ec <ucdr_deserialize_endian_uint16_t>:
 800c0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0f0:	460e      	mov	r6, r1
 800c0f2:	2102      	movs	r1, #2
 800c0f4:	4604      	mov	r4, r0
 800c0f6:	4615      	mov	r5, r2
 800c0f8:	f000 fe10 	bl	800cd1c <ucdr_buffer_alignment>
 800c0fc:	4601      	mov	r1, r0
 800c0fe:	4620      	mov	r0, r4
 800c100:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c104:	f000 fe4e 	bl	800cda4 <ucdr_advance_buffer>
 800c108:	2102      	movs	r1, #2
 800c10a:	4620      	mov	r0, r4
 800c10c:	f000 fda6 	bl	800cc5c <ucdr_check_buffer_available_for>
 800c110:	bb70      	cbnz	r0, 800c170 <ucdr_deserialize_endian_uint16_t+0x84>
 800c112:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800c116:	4547      	cmp	r7, r8
 800c118:	d925      	bls.n	800c166 <ucdr_deserialize_endian_uint16_t+0x7a>
 800c11a:	6923      	ldr	r3, [r4, #16]
 800c11c:	60a7      	str	r7, [r4, #8]
 800c11e:	eba7 0708 	sub.w	r7, r7, r8
 800c122:	443b      	add	r3, r7
 800c124:	f1c7 0a02 	rsb	sl, r7, #2
 800c128:	6123      	str	r3, [r4, #16]
 800c12a:	4651      	mov	r1, sl
 800c12c:	4620      	mov	r0, r4
 800c12e:	f000 fda1 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800c132:	2800      	cmp	r0, #0
 800c134:	d034      	beq.n	800c1a0 <ucdr_deserialize_endian_uint16_t+0xb4>
 800c136:	2e01      	cmp	r6, #1
 800c138:	d043      	beq.n	800c1c2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800c13a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c13e:	702b      	strb	r3, [r5, #0]
 800c140:	2f00      	cmp	r7, #0
 800c142:	d03a      	beq.n	800c1ba <ucdr_deserialize_endian_uint16_t+0xce>
 800c144:	f898 3000 	ldrb.w	r3, [r8]
 800c148:	706b      	strb	r3, [r5, #1]
 800c14a:	6923      	ldr	r3, [r4, #16]
 800c14c:	68a2      	ldr	r2, [r4, #8]
 800c14e:	7da0      	ldrb	r0, [r4, #22]
 800c150:	2102      	movs	r1, #2
 800c152:	3302      	adds	r3, #2
 800c154:	4452      	add	r2, sl
 800c156:	1bdb      	subs	r3, r3, r7
 800c158:	7561      	strb	r1, [r4, #21]
 800c15a:	60a2      	str	r2, [r4, #8]
 800c15c:	6123      	str	r3, [r4, #16]
 800c15e:	f080 0001 	eor.w	r0, r0, #1
 800c162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c166:	2102      	movs	r1, #2
 800c168:	4620      	mov	r0, r4
 800c16a:	f000 fd83 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800c16e:	b178      	cbz	r0, 800c190 <ucdr_deserialize_endian_uint16_t+0xa4>
 800c170:	2e01      	cmp	r6, #1
 800c172:	68a3      	ldr	r3, [r4, #8]
 800c174:	d011      	beq.n	800c19a <ucdr_deserialize_endian_uint16_t+0xae>
 800c176:	785b      	ldrb	r3, [r3, #1]
 800c178:	702b      	strb	r3, [r5, #0]
 800c17a:	68a3      	ldr	r3, [r4, #8]
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	706b      	strb	r3, [r5, #1]
 800c180:	68a2      	ldr	r2, [r4, #8]
 800c182:	6923      	ldr	r3, [r4, #16]
 800c184:	3202      	adds	r2, #2
 800c186:	3302      	adds	r3, #2
 800c188:	2102      	movs	r1, #2
 800c18a:	60a2      	str	r2, [r4, #8]
 800c18c:	6123      	str	r3, [r4, #16]
 800c18e:	7561      	strb	r1, [r4, #21]
 800c190:	7da0      	ldrb	r0, [r4, #22]
 800c192:	f080 0001 	eor.w	r0, r0, #1
 800c196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c19a:	881b      	ldrh	r3, [r3, #0]
 800c19c:	802b      	strh	r3, [r5, #0]
 800c19e:	e7ef      	b.n	800c180 <ucdr_deserialize_endian_uint16_t+0x94>
 800c1a0:	68a2      	ldr	r2, [r4, #8]
 800c1a2:	6923      	ldr	r3, [r4, #16]
 800c1a4:	7da0      	ldrb	r0, [r4, #22]
 800c1a6:	f884 9015 	strb.w	r9, [r4, #21]
 800c1aa:	1bd2      	subs	r2, r2, r7
 800c1ac:	1bdb      	subs	r3, r3, r7
 800c1ae:	60a2      	str	r2, [r4, #8]
 800c1b0:	6123      	str	r3, [r4, #16]
 800c1b2:	f080 0001 	eor.w	r0, r0, #1
 800c1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ba:	68a3      	ldr	r3, [r4, #8]
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	706b      	strb	r3, [r5, #1]
 800c1c0:	e7c3      	b.n	800c14a <ucdr_deserialize_endian_uint16_t+0x5e>
 800c1c2:	4641      	mov	r1, r8
 800c1c4:	463a      	mov	r2, r7
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	f00a ffe5 	bl	8017196 <memcpy>
 800c1cc:	68a1      	ldr	r1, [r4, #8]
 800c1ce:	4652      	mov	r2, sl
 800c1d0:	19e8      	adds	r0, r5, r7
 800c1d2:	f00a ffe0 	bl	8017196 <memcpy>
 800c1d6:	e7b8      	b.n	800c14a <ucdr_deserialize_endian_uint16_t+0x5e>

0800c1d8 <ucdr_serialize_uint32_t>:
 800c1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1dc:	b082      	sub	sp, #8
 800c1de:	4604      	mov	r4, r0
 800c1e0:	9101      	str	r1, [sp, #4]
 800c1e2:	2104      	movs	r1, #4
 800c1e4:	f000 fd9a 	bl	800cd1c <ucdr_buffer_alignment>
 800c1e8:	4601      	mov	r1, r0
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	7d67      	ldrb	r7, [r4, #21]
 800c1ee:	f000 fdd9 	bl	800cda4 <ucdr_advance_buffer>
 800c1f2:	2104      	movs	r1, #4
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	f000 fd31 	bl	800cc5c <ucdr_check_buffer_available_for>
 800c1fa:	2800      	cmp	r0, #0
 800c1fc:	d139      	bne.n	800c272 <ucdr_serialize_uint32_t+0x9a>
 800c1fe:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c202:	42ab      	cmp	r3, r5
 800c204:	d930      	bls.n	800c268 <ucdr_serialize_uint32_t+0x90>
 800c206:	1b5e      	subs	r6, r3, r5
 800c208:	60a3      	str	r3, [r4, #8]
 800c20a:	6923      	ldr	r3, [r4, #16]
 800c20c:	f1c6 0804 	rsb	r8, r6, #4
 800c210:	4433      	add	r3, r6
 800c212:	6123      	str	r3, [r4, #16]
 800c214:	4641      	mov	r1, r8
 800c216:	4620      	mov	r0, r4
 800c218:	f000 fd2c 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800c21c:	2800      	cmp	r0, #0
 800c21e:	d04c      	beq.n	800c2ba <ucdr_serialize_uint32_t+0xe2>
 800c220:	7d23      	ldrb	r3, [r4, #20]
 800c222:	2b01      	cmp	r3, #1
 800c224:	d063      	beq.n	800c2ee <ucdr_serialize_uint32_t+0x116>
 800c226:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c22a:	702b      	strb	r3, [r5, #0]
 800c22c:	2e00      	cmp	r6, #0
 800c22e:	d051      	beq.n	800c2d4 <ucdr_serialize_uint32_t+0xfc>
 800c230:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c234:	706b      	strb	r3, [r5, #1]
 800c236:	2e01      	cmp	r6, #1
 800c238:	d050      	beq.n	800c2dc <ucdr_serialize_uint32_t+0x104>
 800c23a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c23e:	70ab      	strb	r3, [r5, #2]
 800c240:	2e02      	cmp	r6, #2
 800c242:	d04f      	beq.n	800c2e4 <ucdr_serialize_uint32_t+0x10c>
 800c244:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c248:	70eb      	strb	r3, [r5, #3]
 800c24a:	6923      	ldr	r3, [r4, #16]
 800c24c:	68a2      	ldr	r2, [r4, #8]
 800c24e:	7da0      	ldrb	r0, [r4, #22]
 800c250:	3304      	adds	r3, #4
 800c252:	1b9e      	subs	r6, r3, r6
 800c254:	4442      	add	r2, r8
 800c256:	2304      	movs	r3, #4
 800c258:	f080 0001 	eor.w	r0, r0, #1
 800c25c:	60a2      	str	r2, [r4, #8]
 800c25e:	6126      	str	r6, [r4, #16]
 800c260:	7563      	strb	r3, [r4, #21]
 800c262:	b002      	add	sp, #8
 800c264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c268:	2104      	movs	r1, #4
 800c26a:	4620      	mov	r0, r4
 800c26c:	f000 fd02 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800c270:	b1d0      	cbz	r0, 800c2a8 <ucdr_serialize_uint32_t+0xd0>
 800c272:	7d23      	ldrb	r3, [r4, #20]
 800c274:	2b01      	cmp	r3, #1
 800c276:	68a3      	ldr	r3, [r4, #8]
 800c278:	d01c      	beq.n	800c2b4 <ucdr_serialize_uint32_t+0xdc>
 800c27a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c27e:	701a      	strb	r2, [r3, #0]
 800c280:	68a3      	ldr	r3, [r4, #8]
 800c282:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c286:	705a      	strb	r2, [r3, #1]
 800c288:	68a3      	ldr	r3, [r4, #8]
 800c28a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c28e:	709a      	strb	r2, [r3, #2]
 800c290:	68a3      	ldr	r3, [r4, #8]
 800c292:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c296:	70da      	strb	r2, [r3, #3]
 800c298:	68a2      	ldr	r2, [r4, #8]
 800c29a:	6923      	ldr	r3, [r4, #16]
 800c29c:	3204      	adds	r2, #4
 800c29e:	3304      	adds	r3, #4
 800c2a0:	2104      	movs	r1, #4
 800c2a2:	60a2      	str	r2, [r4, #8]
 800c2a4:	6123      	str	r3, [r4, #16]
 800c2a6:	7561      	strb	r1, [r4, #21]
 800c2a8:	7da0      	ldrb	r0, [r4, #22]
 800c2aa:	f080 0001 	eor.w	r0, r0, #1
 800c2ae:	b002      	add	sp, #8
 800c2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2b4:	9a01      	ldr	r2, [sp, #4]
 800c2b6:	601a      	str	r2, [r3, #0]
 800c2b8:	e7ee      	b.n	800c298 <ucdr_serialize_uint32_t+0xc0>
 800c2ba:	68a2      	ldr	r2, [r4, #8]
 800c2bc:	6923      	ldr	r3, [r4, #16]
 800c2be:	7da0      	ldrb	r0, [r4, #22]
 800c2c0:	7567      	strb	r7, [r4, #21]
 800c2c2:	1b92      	subs	r2, r2, r6
 800c2c4:	1b9b      	subs	r3, r3, r6
 800c2c6:	f080 0001 	eor.w	r0, r0, #1
 800c2ca:	60a2      	str	r2, [r4, #8]
 800c2cc:	6123      	str	r3, [r4, #16]
 800c2ce:	b002      	add	sp, #8
 800c2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2d4:	68a3      	ldr	r3, [r4, #8]
 800c2d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c2da:	701a      	strb	r2, [r3, #0]
 800c2dc:	68a3      	ldr	r3, [r4, #8]
 800c2de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c2e2:	701a      	strb	r2, [r3, #0]
 800c2e4:	68a3      	ldr	r3, [r4, #8]
 800c2e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c2ea:	701a      	strb	r2, [r3, #0]
 800c2ec:	e7ad      	b.n	800c24a <ucdr_serialize_uint32_t+0x72>
 800c2ee:	4628      	mov	r0, r5
 800c2f0:	ad01      	add	r5, sp, #4
 800c2f2:	4629      	mov	r1, r5
 800c2f4:	4632      	mov	r2, r6
 800c2f6:	f00a ff4e 	bl	8017196 <memcpy>
 800c2fa:	68a0      	ldr	r0, [r4, #8]
 800c2fc:	4642      	mov	r2, r8
 800c2fe:	19a9      	adds	r1, r5, r6
 800c300:	f00a ff49 	bl	8017196 <memcpy>
 800c304:	e7a1      	b.n	800c24a <ucdr_serialize_uint32_t+0x72>
 800c306:	bf00      	nop

0800c308 <ucdr_serialize_endian_uint32_t>:
 800c308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c30c:	b083      	sub	sp, #12
 800c30e:	460d      	mov	r5, r1
 800c310:	2104      	movs	r1, #4
 800c312:	4604      	mov	r4, r0
 800c314:	9201      	str	r2, [sp, #4]
 800c316:	f000 fd01 	bl	800cd1c <ucdr_buffer_alignment>
 800c31a:	4601      	mov	r1, r0
 800c31c:	4620      	mov	r0, r4
 800c31e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c322:	f000 fd3f 	bl	800cda4 <ucdr_advance_buffer>
 800c326:	2104      	movs	r1, #4
 800c328:	4620      	mov	r0, r4
 800c32a:	f000 fc97 	bl	800cc5c <ucdr_check_buffer_available_for>
 800c32e:	2800      	cmp	r0, #0
 800c330:	d138      	bne.n	800c3a4 <ucdr_serialize_endian_uint32_t+0x9c>
 800c332:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c336:	42b7      	cmp	r7, r6
 800c338:	d92f      	bls.n	800c39a <ucdr_serialize_endian_uint32_t+0x92>
 800c33a:	6923      	ldr	r3, [r4, #16]
 800c33c:	60a7      	str	r7, [r4, #8]
 800c33e:	1bbf      	subs	r7, r7, r6
 800c340:	443b      	add	r3, r7
 800c342:	f1c7 0904 	rsb	r9, r7, #4
 800c346:	6123      	str	r3, [r4, #16]
 800c348:	4649      	mov	r1, r9
 800c34a:	4620      	mov	r0, r4
 800c34c:	f000 fc92 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800c350:	2800      	cmp	r0, #0
 800c352:	d04a      	beq.n	800c3ea <ucdr_serialize_endian_uint32_t+0xe2>
 800c354:	2d01      	cmp	r5, #1
 800c356:	d063      	beq.n	800c420 <ucdr_serialize_endian_uint32_t+0x118>
 800c358:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c35c:	7033      	strb	r3, [r6, #0]
 800c35e:	2f00      	cmp	r7, #0
 800c360:	d051      	beq.n	800c406 <ucdr_serialize_endian_uint32_t+0xfe>
 800c362:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c366:	7073      	strb	r3, [r6, #1]
 800c368:	2f01      	cmp	r7, #1
 800c36a:	d050      	beq.n	800c40e <ucdr_serialize_endian_uint32_t+0x106>
 800c36c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c370:	70b3      	strb	r3, [r6, #2]
 800c372:	2f02      	cmp	r7, #2
 800c374:	d04f      	beq.n	800c416 <ucdr_serialize_endian_uint32_t+0x10e>
 800c376:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c37a:	70f3      	strb	r3, [r6, #3]
 800c37c:	6923      	ldr	r3, [r4, #16]
 800c37e:	68a2      	ldr	r2, [r4, #8]
 800c380:	7da0      	ldrb	r0, [r4, #22]
 800c382:	3304      	adds	r3, #4
 800c384:	444a      	add	r2, r9
 800c386:	1bdb      	subs	r3, r3, r7
 800c388:	2104      	movs	r1, #4
 800c38a:	f080 0001 	eor.w	r0, r0, #1
 800c38e:	60a2      	str	r2, [r4, #8]
 800c390:	6123      	str	r3, [r4, #16]
 800c392:	7561      	strb	r1, [r4, #21]
 800c394:	b003      	add	sp, #12
 800c396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c39a:	2104      	movs	r1, #4
 800c39c:	4620      	mov	r0, r4
 800c39e:	f000 fc69 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800c3a2:	b1c8      	cbz	r0, 800c3d8 <ucdr_serialize_endian_uint32_t+0xd0>
 800c3a4:	2d01      	cmp	r5, #1
 800c3a6:	68a3      	ldr	r3, [r4, #8]
 800c3a8:	d01c      	beq.n	800c3e4 <ucdr_serialize_endian_uint32_t+0xdc>
 800c3aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c3ae:	701a      	strb	r2, [r3, #0]
 800c3b0:	68a3      	ldr	r3, [r4, #8]
 800c3b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c3b6:	705a      	strb	r2, [r3, #1]
 800c3b8:	68a3      	ldr	r3, [r4, #8]
 800c3ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c3be:	709a      	strb	r2, [r3, #2]
 800c3c0:	68a3      	ldr	r3, [r4, #8]
 800c3c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c3c6:	70da      	strb	r2, [r3, #3]
 800c3c8:	68a2      	ldr	r2, [r4, #8]
 800c3ca:	6923      	ldr	r3, [r4, #16]
 800c3cc:	3204      	adds	r2, #4
 800c3ce:	3304      	adds	r3, #4
 800c3d0:	2104      	movs	r1, #4
 800c3d2:	60a2      	str	r2, [r4, #8]
 800c3d4:	6123      	str	r3, [r4, #16]
 800c3d6:	7561      	strb	r1, [r4, #21]
 800c3d8:	7da0      	ldrb	r0, [r4, #22]
 800c3da:	f080 0001 	eor.w	r0, r0, #1
 800c3de:	b003      	add	sp, #12
 800c3e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3e4:	9a01      	ldr	r2, [sp, #4]
 800c3e6:	601a      	str	r2, [r3, #0]
 800c3e8:	e7ee      	b.n	800c3c8 <ucdr_serialize_endian_uint32_t+0xc0>
 800c3ea:	68a2      	ldr	r2, [r4, #8]
 800c3ec:	6923      	ldr	r3, [r4, #16]
 800c3ee:	7da0      	ldrb	r0, [r4, #22]
 800c3f0:	f884 8015 	strb.w	r8, [r4, #21]
 800c3f4:	1bd2      	subs	r2, r2, r7
 800c3f6:	1bdb      	subs	r3, r3, r7
 800c3f8:	f080 0001 	eor.w	r0, r0, #1
 800c3fc:	60a2      	str	r2, [r4, #8]
 800c3fe:	6123      	str	r3, [r4, #16]
 800c400:	b003      	add	sp, #12
 800c402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c406:	68a3      	ldr	r3, [r4, #8]
 800c408:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c40c:	701a      	strb	r2, [r3, #0]
 800c40e:	68a3      	ldr	r3, [r4, #8]
 800c410:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c414:	701a      	strb	r2, [r3, #0]
 800c416:	68a3      	ldr	r3, [r4, #8]
 800c418:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c41c:	701a      	strb	r2, [r3, #0]
 800c41e:	e7ad      	b.n	800c37c <ucdr_serialize_endian_uint32_t+0x74>
 800c420:	ad01      	add	r5, sp, #4
 800c422:	4629      	mov	r1, r5
 800c424:	463a      	mov	r2, r7
 800c426:	4630      	mov	r0, r6
 800c428:	f00a feb5 	bl	8017196 <memcpy>
 800c42c:	68a0      	ldr	r0, [r4, #8]
 800c42e:	464a      	mov	r2, r9
 800c430:	19e9      	adds	r1, r5, r7
 800c432:	f00a feb0 	bl	8017196 <memcpy>
 800c436:	e7a1      	b.n	800c37c <ucdr_serialize_endian_uint32_t+0x74>

0800c438 <ucdr_deserialize_uint32_t>:
 800c438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c43c:	460d      	mov	r5, r1
 800c43e:	2104      	movs	r1, #4
 800c440:	4604      	mov	r4, r0
 800c442:	f000 fc6b 	bl	800cd1c <ucdr_buffer_alignment>
 800c446:	4601      	mov	r1, r0
 800c448:	4620      	mov	r0, r4
 800c44a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c44e:	f000 fca9 	bl	800cda4 <ucdr_advance_buffer>
 800c452:	2104      	movs	r1, #4
 800c454:	4620      	mov	r0, r4
 800c456:	f000 fc01 	bl	800cc5c <ucdr_check_buffer_available_for>
 800c45a:	2800      	cmp	r0, #0
 800c45c:	d138      	bne.n	800c4d0 <ucdr_deserialize_uint32_t+0x98>
 800c45e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c462:	42b7      	cmp	r7, r6
 800c464:	d92f      	bls.n	800c4c6 <ucdr_deserialize_uint32_t+0x8e>
 800c466:	6923      	ldr	r3, [r4, #16]
 800c468:	60a7      	str	r7, [r4, #8]
 800c46a:	1bbf      	subs	r7, r7, r6
 800c46c:	443b      	add	r3, r7
 800c46e:	f1c7 0904 	rsb	r9, r7, #4
 800c472:	6123      	str	r3, [r4, #16]
 800c474:	4649      	mov	r1, r9
 800c476:	4620      	mov	r0, r4
 800c478:	f000 fbfc 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	d046      	beq.n	800c50e <ucdr_deserialize_uint32_t+0xd6>
 800c480:	7d23      	ldrb	r3, [r4, #20]
 800c482:	2b01      	cmp	r3, #1
 800c484:	d05c      	beq.n	800c540 <ucdr_deserialize_uint32_t+0x108>
 800c486:	78f3      	ldrb	r3, [r6, #3]
 800c488:	702b      	strb	r3, [r5, #0]
 800c48a:	2f00      	cmp	r7, #0
 800c48c:	d04c      	beq.n	800c528 <ucdr_deserialize_uint32_t+0xf0>
 800c48e:	78b3      	ldrb	r3, [r6, #2]
 800c490:	706b      	strb	r3, [r5, #1]
 800c492:	2f01      	cmp	r7, #1
 800c494:	f105 0302 	add.w	r3, r5, #2
 800c498:	d04a      	beq.n	800c530 <ucdr_deserialize_uint32_t+0xf8>
 800c49a:	7873      	ldrb	r3, [r6, #1]
 800c49c:	70ab      	strb	r3, [r5, #2]
 800c49e:	2f02      	cmp	r7, #2
 800c4a0:	f105 0303 	add.w	r3, r5, #3
 800c4a4:	d048      	beq.n	800c538 <ucdr_deserialize_uint32_t+0x100>
 800c4a6:	7833      	ldrb	r3, [r6, #0]
 800c4a8:	70eb      	strb	r3, [r5, #3]
 800c4aa:	6923      	ldr	r3, [r4, #16]
 800c4ac:	68a2      	ldr	r2, [r4, #8]
 800c4ae:	7da0      	ldrb	r0, [r4, #22]
 800c4b0:	2104      	movs	r1, #4
 800c4b2:	3304      	adds	r3, #4
 800c4b4:	444a      	add	r2, r9
 800c4b6:	1bdb      	subs	r3, r3, r7
 800c4b8:	7561      	strb	r1, [r4, #21]
 800c4ba:	60a2      	str	r2, [r4, #8]
 800c4bc:	6123      	str	r3, [r4, #16]
 800c4be:	f080 0001 	eor.w	r0, r0, #1
 800c4c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4c6:	2104      	movs	r1, #4
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	f000 fbd3 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800c4ce:	b1b0      	cbz	r0, 800c4fe <ucdr_deserialize_uint32_t+0xc6>
 800c4d0:	7d23      	ldrb	r3, [r4, #20]
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	68a3      	ldr	r3, [r4, #8]
 800c4d6:	d017      	beq.n	800c508 <ucdr_deserialize_uint32_t+0xd0>
 800c4d8:	78db      	ldrb	r3, [r3, #3]
 800c4da:	702b      	strb	r3, [r5, #0]
 800c4dc:	68a3      	ldr	r3, [r4, #8]
 800c4de:	789b      	ldrb	r3, [r3, #2]
 800c4e0:	706b      	strb	r3, [r5, #1]
 800c4e2:	68a3      	ldr	r3, [r4, #8]
 800c4e4:	785b      	ldrb	r3, [r3, #1]
 800c4e6:	70ab      	strb	r3, [r5, #2]
 800c4e8:	68a3      	ldr	r3, [r4, #8]
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	70eb      	strb	r3, [r5, #3]
 800c4ee:	68a2      	ldr	r2, [r4, #8]
 800c4f0:	6923      	ldr	r3, [r4, #16]
 800c4f2:	3204      	adds	r2, #4
 800c4f4:	3304      	adds	r3, #4
 800c4f6:	2104      	movs	r1, #4
 800c4f8:	60a2      	str	r2, [r4, #8]
 800c4fa:	6123      	str	r3, [r4, #16]
 800c4fc:	7561      	strb	r1, [r4, #21]
 800c4fe:	7da0      	ldrb	r0, [r4, #22]
 800c500:	f080 0001 	eor.w	r0, r0, #1
 800c504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	602b      	str	r3, [r5, #0]
 800c50c:	e7ef      	b.n	800c4ee <ucdr_deserialize_uint32_t+0xb6>
 800c50e:	68a2      	ldr	r2, [r4, #8]
 800c510:	6923      	ldr	r3, [r4, #16]
 800c512:	7da0      	ldrb	r0, [r4, #22]
 800c514:	f884 8015 	strb.w	r8, [r4, #21]
 800c518:	1bd2      	subs	r2, r2, r7
 800c51a:	1bdb      	subs	r3, r3, r7
 800c51c:	60a2      	str	r2, [r4, #8]
 800c51e:	6123      	str	r3, [r4, #16]
 800c520:	f080 0001 	eor.w	r0, r0, #1
 800c524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c528:	68a3      	ldr	r3, [r4, #8]
 800c52a:	789b      	ldrb	r3, [r3, #2]
 800c52c:	706b      	strb	r3, [r5, #1]
 800c52e:	1cab      	adds	r3, r5, #2
 800c530:	68a2      	ldr	r2, [r4, #8]
 800c532:	7852      	ldrb	r2, [r2, #1]
 800c534:	f803 2b01 	strb.w	r2, [r3], #1
 800c538:	68a2      	ldr	r2, [r4, #8]
 800c53a:	7812      	ldrb	r2, [r2, #0]
 800c53c:	701a      	strb	r2, [r3, #0]
 800c53e:	e7b4      	b.n	800c4aa <ucdr_deserialize_uint32_t+0x72>
 800c540:	4631      	mov	r1, r6
 800c542:	463a      	mov	r2, r7
 800c544:	4628      	mov	r0, r5
 800c546:	f00a fe26 	bl	8017196 <memcpy>
 800c54a:	68a1      	ldr	r1, [r4, #8]
 800c54c:	464a      	mov	r2, r9
 800c54e:	19e8      	adds	r0, r5, r7
 800c550:	f00a fe21 	bl	8017196 <memcpy>
 800c554:	e7a9      	b.n	800c4aa <ucdr_deserialize_uint32_t+0x72>
 800c556:	bf00      	nop

0800c558 <ucdr_deserialize_endian_uint32_t>:
 800c558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c55c:	460e      	mov	r6, r1
 800c55e:	2104      	movs	r1, #4
 800c560:	4604      	mov	r4, r0
 800c562:	4615      	mov	r5, r2
 800c564:	f000 fbda 	bl	800cd1c <ucdr_buffer_alignment>
 800c568:	4601      	mov	r1, r0
 800c56a:	4620      	mov	r0, r4
 800c56c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c570:	f000 fc18 	bl	800cda4 <ucdr_advance_buffer>
 800c574:	2104      	movs	r1, #4
 800c576:	4620      	mov	r0, r4
 800c578:	f000 fb70 	bl	800cc5c <ucdr_check_buffer_available_for>
 800c57c:	2800      	cmp	r0, #0
 800c57e:	d13c      	bne.n	800c5fa <ucdr_deserialize_endian_uint32_t+0xa2>
 800c580:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800c584:	42bb      	cmp	r3, r7
 800c586:	d933      	bls.n	800c5f0 <ucdr_deserialize_endian_uint32_t+0x98>
 800c588:	eba3 0807 	sub.w	r8, r3, r7
 800c58c:	60a3      	str	r3, [r4, #8]
 800c58e:	6923      	ldr	r3, [r4, #16]
 800c590:	f1c8 0a04 	rsb	sl, r8, #4
 800c594:	4443      	add	r3, r8
 800c596:	6123      	str	r3, [r4, #16]
 800c598:	4651      	mov	r1, sl
 800c59a:	4620      	mov	r0, r4
 800c59c:	f000 fb6a 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d048      	beq.n	800c636 <ucdr_deserialize_endian_uint32_t+0xde>
 800c5a4:	2e01      	cmp	r6, #1
 800c5a6:	d061      	beq.n	800c66c <ucdr_deserialize_endian_uint32_t+0x114>
 800c5a8:	78fb      	ldrb	r3, [r7, #3]
 800c5aa:	702b      	strb	r3, [r5, #0]
 800c5ac:	f1b8 0f00 	cmp.w	r8, #0
 800c5b0:	d050      	beq.n	800c654 <ucdr_deserialize_endian_uint32_t+0xfc>
 800c5b2:	78bb      	ldrb	r3, [r7, #2]
 800c5b4:	706b      	strb	r3, [r5, #1]
 800c5b6:	f1b8 0f01 	cmp.w	r8, #1
 800c5ba:	f105 0302 	add.w	r3, r5, #2
 800c5be:	d04d      	beq.n	800c65c <ucdr_deserialize_endian_uint32_t+0x104>
 800c5c0:	787b      	ldrb	r3, [r7, #1]
 800c5c2:	70ab      	strb	r3, [r5, #2]
 800c5c4:	f1b8 0f02 	cmp.w	r8, #2
 800c5c8:	f105 0303 	add.w	r3, r5, #3
 800c5cc:	d04a      	beq.n	800c664 <ucdr_deserialize_endian_uint32_t+0x10c>
 800c5ce:	783b      	ldrb	r3, [r7, #0]
 800c5d0:	70eb      	strb	r3, [r5, #3]
 800c5d2:	6923      	ldr	r3, [r4, #16]
 800c5d4:	68a2      	ldr	r2, [r4, #8]
 800c5d6:	7da0      	ldrb	r0, [r4, #22]
 800c5d8:	2104      	movs	r1, #4
 800c5da:	3304      	adds	r3, #4
 800c5dc:	4452      	add	r2, sl
 800c5de:	eba3 0308 	sub.w	r3, r3, r8
 800c5e2:	7561      	strb	r1, [r4, #21]
 800c5e4:	60a2      	str	r2, [r4, #8]
 800c5e6:	6123      	str	r3, [r4, #16]
 800c5e8:	f080 0001 	eor.w	r0, r0, #1
 800c5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5f0:	2104      	movs	r1, #4
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f000 fb3e 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800c5f8:	b1a8      	cbz	r0, 800c626 <ucdr_deserialize_endian_uint32_t+0xce>
 800c5fa:	2e01      	cmp	r6, #1
 800c5fc:	68a3      	ldr	r3, [r4, #8]
 800c5fe:	d017      	beq.n	800c630 <ucdr_deserialize_endian_uint32_t+0xd8>
 800c600:	78db      	ldrb	r3, [r3, #3]
 800c602:	702b      	strb	r3, [r5, #0]
 800c604:	68a3      	ldr	r3, [r4, #8]
 800c606:	789b      	ldrb	r3, [r3, #2]
 800c608:	706b      	strb	r3, [r5, #1]
 800c60a:	68a3      	ldr	r3, [r4, #8]
 800c60c:	785b      	ldrb	r3, [r3, #1]
 800c60e:	70ab      	strb	r3, [r5, #2]
 800c610:	68a3      	ldr	r3, [r4, #8]
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	70eb      	strb	r3, [r5, #3]
 800c616:	68a2      	ldr	r2, [r4, #8]
 800c618:	6923      	ldr	r3, [r4, #16]
 800c61a:	3204      	adds	r2, #4
 800c61c:	3304      	adds	r3, #4
 800c61e:	2104      	movs	r1, #4
 800c620:	60a2      	str	r2, [r4, #8]
 800c622:	6123      	str	r3, [r4, #16]
 800c624:	7561      	strb	r1, [r4, #21]
 800c626:	7da0      	ldrb	r0, [r4, #22]
 800c628:	f080 0001 	eor.w	r0, r0, #1
 800c62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	602b      	str	r3, [r5, #0]
 800c634:	e7ef      	b.n	800c616 <ucdr_deserialize_endian_uint32_t+0xbe>
 800c636:	68a2      	ldr	r2, [r4, #8]
 800c638:	6923      	ldr	r3, [r4, #16]
 800c63a:	7da0      	ldrb	r0, [r4, #22]
 800c63c:	f884 9015 	strb.w	r9, [r4, #21]
 800c640:	eba2 0208 	sub.w	r2, r2, r8
 800c644:	eba3 0308 	sub.w	r3, r3, r8
 800c648:	60a2      	str	r2, [r4, #8]
 800c64a:	6123      	str	r3, [r4, #16]
 800c64c:	f080 0001 	eor.w	r0, r0, #1
 800c650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c654:	68a3      	ldr	r3, [r4, #8]
 800c656:	789b      	ldrb	r3, [r3, #2]
 800c658:	706b      	strb	r3, [r5, #1]
 800c65a:	1cab      	adds	r3, r5, #2
 800c65c:	68a2      	ldr	r2, [r4, #8]
 800c65e:	7852      	ldrb	r2, [r2, #1]
 800c660:	f803 2b01 	strb.w	r2, [r3], #1
 800c664:	68a2      	ldr	r2, [r4, #8]
 800c666:	7812      	ldrb	r2, [r2, #0]
 800c668:	701a      	strb	r2, [r3, #0]
 800c66a:	e7b2      	b.n	800c5d2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800c66c:	4639      	mov	r1, r7
 800c66e:	4642      	mov	r2, r8
 800c670:	4628      	mov	r0, r5
 800c672:	f00a fd90 	bl	8017196 <memcpy>
 800c676:	68a1      	ldr	r1, [r4, #8]
 800c678:	4652      	mov	r2, sl
 800c67a:	eb05 0008 	add.w	r0, r5, r8
 800c67e:	f00a fd8a 	bl	8017196 <memcpy>
 800c682:	e7a6      	b.n	800c5d2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800c684 <ucdr_serialize_uint64_t>:
 800c684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c688:	2108      	movs	r1, #8
 800c68a:	b082      	sub	sp, #8
 800c68c:	4604      	mov	r4, r0
 800c68e:	e9cd 2300 	strd	r2, r3, [sp]
 800c692:	f000 fb43 	bl	800cd1c <ucdr_buffer_alignment>
 800c696:	4601      	mov	r1, r0
 800c698:	4620      	mov	r0, r4
 800c69a:	7d67      	ldrb	r7, [r4, #21]
 800c69c:	f000 fb82 	bl	800cda4 <ucdr_advance_buffer>
 800c6a0:	2108      	movs	r1, #8
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	f000 fada 	bl	800cc5c <ucdr_check_buffer_available_for>
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d14e      	bne.n	800c74a <ucdr_serialize_uint64_t+0xc6>
 800c6ac:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c6b0:	42ab      	cmp	r3, r5
 800c6b2:	d945      	bls.n	800c740 <ucdr_serialize_uint64_t+0xbc>
 800c6b4:	1b5e      	subs	r6, r3, r5
 800c6b6:	60a3      	str	r3, [r4, #8]
 800c6b8:	6923      	ldr	r3, [r4, #16]
 800c6ba:	f1c6 0808 	rsb	r8, r6, #8
 800c6be:	4433      	add	r3, r6
 800c6c0:	6123      	str	r3, [r4, #16]
 800c6c2:	4641      	mov	r1, r8
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	f000 fad5 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	d074      	beq.n	800c7b8 <ucdr_serialize_uint64_t+0x134>
 800c6ce:	7d23      	ldrb	r3, [r4, #20]
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	f000 809b 	beq.w	800c80c <ucdr_serialize_uint64_t+0x188>
 800c6d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c6da:	702b      	strb	r3, [r5, #0]
 800c6dc:	2e00      	cmp	r6, #0
 800c6de:	d078      	beq.n	800c7d2 <ucdr_serialize_uint64_t+0x14e>
 800c6e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c6e4:	706b      	strb	r3, [r5, #1]
 800c6e6:	2e01      	cmp	r6, #1
 800c6e8:	d077      	beq.n	800c7da <ucdr_serialize_uint64_t+0x156>
 800c6ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c6ee:	70ab      	strb	r3, [r5, #2]
 800c6f0:	2e02      	cmp	r6, #2
 800c6f2:	d076      	beq.n	800c7e2 <ucdr_serialize_uint64_t+0x15e>
 800c6f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c6f8:	70eb      	strb	r3, [r5, #3]
 800c6fa:	2e03      	cmp	r6, #3
 800c6fc:	d075      	beq.n	800c7ea <ucdr_serialize_uint64_t+0x166>
 800c6fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c702:	712b      	strb	r3, [r5, #4]
 800c704:	2e04      	cmp	r6, #4
 800c706:	d074      	beq.n	800c7f2 <ucdr_serialize_uint64_t+0x16e>
 800c708:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c70c:	716b      	strb	r3, [r5, #5]
 800c70e:	2e05      	cmp	r6, #5
 800c710:	d073      	beq.n	800c7fa <ucdr_serialize_uint64_t+0x176>
 800c712:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c716:	71ab      	strb	r3, [r5, #6]
 800c718:	2e06      	cmp	r6, #6
 800c71a:	d072      	beq.n	800c802 <ucdr_serialize_uint64_t+0x17e>
 800c71c:	f89d 3000 	ldrb.w	r3, [sp]
 800c720:	71eb      	strb	r3, [r5, #7]
 800c722:	6923      	ldr	r3, [r4, #16]
 800c724:	68a2      	ldr	r2, [r4, #8]
 800c726:	7da0      	ldrb	r0, [r4, #22]
 800c728:	3308      	adds	r3, #8
 800c72a:	1b9e      	subs	r6, r3, r6
 800c72c:	4442      	add	r2, r8
 800c72e:	2308      	movs	r3, #8
 800c730:	f080 0001 	eor.w	r0, r0, #1
 800c734:	60a2      	str	r2, [r4, #8]
 800c736:	6126      	str	r6, [r4, #16]
 800c738:	7563      	strb	r3, [r4, #21]
 800c73a:	b002      	add	sp, #8
 800c73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c740:	2108      	movs	r1, #8
 800c742:	4620      	mov	r0, r4
 800c744:	f000 fa96 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800c748:	b350      	cbz	r0, 800c7a0 <ucdr_serialize_uint64_t+0x11c>
 800c74a:	7d23      	ldrb	r3, [r4, #20]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d02d      	beq.n	800c7ac <ucdr_serialize_uint64_t+0x128>
 800c750:	68a3      	ldr	r3, [r4, #8]
 800c752:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c756:	701a      	strb	r2, [r3, #0]
 800c758:	68a3      	ldr	r3, [r4, #8]
 800c75a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c75e:	705a      	strb	r2, [r3, #1]
 800c760:	68a3      	ldr	r3, [r4, #8]
 800c762:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c766:	709a      	strb	r2, [r3, #2]
 800c768:	68a3      	ldr	r3, [r4, #8]
 800c76a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c76e:	70da      	strb	r2, [r3, #3]
 800c770:	68a3      	ldr	r3, [r4, #8]
 800c772:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c776:	711a      	strb	r2, [r3, #4]
 800c778:	68a3      	ldr	r3, [r4, #8]
 800c77a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c77e:	715a      	strb	r2, [r3, #5]
 800c780:	68a3      	ldr	r3, [r4, #8]
 800c782:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c786:	719a      	strb	r2, [r3, #6]
 800c788:	68a3      	ldr	r3, [r4, #8]
 800c78a:	f89d 2000 	ldrb.w	r2, [sp]
 800c78e:	71da      	strb	r2, [r3, #7]
 800c790:	68a2      	ldr	r2, [r4, #8]
 800c792:	6923      	ldr	r3, [r4, #16]
 800c794:	3208      	adds	r2, #8
 800c796:	3308      	adds	r3, #8
 800c798:	2108      	movs	r1, #8
 800c79a:	60a2      	str	r2, [r4, #8]
 800c79c:	6123      	str	r3, [r4, #16]
 800c79e:	7561      	strb	r1, [r4, #21]
 800c7a0:	7da0      	ldrb	r0, [r4, #22]
 800c7a2:	f080 0001 	eor.w	r0, r0, #1
 800c7a6:	b002      	add	sp, #8
 800c7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7ac:	466b      	mov	r3, sp
 800c7ae:	cb03      	ldmia	r3!, {r0, r1}
 800c7b0:	68a3      	ldr	r3, [r4, #8]
 800c7b2:	6018      	str	r0, [r3, #0]
 800c7b4:	6059      	str	r1, [r3, #4]
 800c7b6:	e7eb      	b.n	800c790 <ucdr_serialize_uint64_t+0x10c>
 800c7b8:	68a2      	ldr	r2, [r4, #8]
 800c7ba:	6923      	ldr	r3, [r4, #16]
 800c7bc:	7da0      	ldrb	r0, [r4, #22]
 800c7be:	7567      	strb	r7, [r4, #21]
 800c7c0:	1b92      	subs	r2, r2, r6
 800c7c2:	1b9b      	subs	r3, r3, r6
 800c7c4:	f080 0001 	eor.w	r0, r0, #1
 800c7c8:	60a2      	str	r2, [r4, #8]
 800c7ca:	6123      	str	r3, [r4, #16]
 800c7cc:	b002      	add	sp, #8
 800c7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7d2:	68a3      	ldr	r3, [r4, #8]
 800c7d4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c7d8:	701a      	strb	r2, [r3, #0]
 800c7da:	68a3      	ldr	r3, [r4, #8]
 800c7dc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c7e0:	701a      	strb	r2, [r3, #0]
 800c7e2:	68a3      	ldr	r3, [r4, #8]
 800c7e4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c7e8:	701a      	strb	r2, [r3, #0]
 800c7ea:	68a3      	ldr	r3, [r4, #8]
 800c7ec:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c7f0:	701a      	strb	r2, [r3, #0]
 800c7f2:	68a3      	ldr	r3, [r4, #8]
 800c7f4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c7f8:	701a      	strb	r2, [r3, #0]
 800c7fa:	68a3      	ldr	r3, [r4, #8]
 800c7fc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c800:	701a      	strb	r2, [r3, #0]
 800c802:	68a3      	ldr	r3, [r4, #8]
 800c804:	f89d 2000 	ldrb.w	r2, [sp]
 800c808:	701a      	strb	r2, [r3, #0]
 800c80a:	e78a      	b.n	800c722 <ucdr_serialize_uint64_t+0x9e>
 800c80c:	4628      	mov	r0, r5
 800c80e:	466d      	mov	r5, sp
 800c810:	4629      	mov	r1, r5
 800c812:	4632      	mov	r2, r6
 800c814:	f00a fcbf 	bl	8017196 <memcpy>
 800c818:	68a0      	ldr	r0, [r4, #8]
 800c81a:	4642      	mov	r2, r8
 800c81c:	19a9      	adds	r1, r5, r6
 800c81e:	f00a fcba 	bl	8017196 <memcpy>
 800c822:	e77e      	b.n	800c722 <ucdr_serialize_uint64_t+0x9e>

0800c824 <ucdr_serialize_int16_t>:
 800c824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c828:	b082      	sub	sp, #8
 800c82a:	460b      	mov	r3, r1
 800c82c:	2102      	movs	r1, #2
 800c82e:	4604      	mov	r4, r0
 800c830:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c834:	f000 fa72 	bl	800cd1c <ucdr_buffer_alignment>
 800c838:	4601      	mov	r1, r0
 800c83a:	4620      	mov	r0, r4
 800c83c:	7d67      	ldrb	r7, [r4, #21]
 800c83e:	f000 fab1 	bl	800cda4 <ucdr_advance_buffer>
 800c842:	2102      	movs	r1, #2
 800c844:	4620      	mov	r0, r4
 800c846:	f000 fa09 	bl	800cc5c <ucdr_check_buffer_available_for>
 800c84a:	bb78      	cbnz	r0, 800c8ac <ucdr_serialize_int16_t+0x88>
 800c84c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c850:	42ab      	cmp	r3, r5
 800c852:	d926      	bls.n	800c8a2 <ucdr_serialize_int16_t+0x7e>
 800c854:	1b5e      	subs	r6, r3, r5
 800c856:	60a3      	str	r3, [r4, #8]
 800c858:	6923      	ldr	r3, [r4, #16]
 800c85a:	f1c6 0802 	rsb	r8, r6, #2
 800c85e:	4433      	add	r3, r6
 800c860:	6123      	str	r3, [r4, #16]
 800c862:	4641      	mov	r1, r8
 800c864:	4620      	mov	r0, r4
 800c866:	f000 fa05 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800c86a:	2800      	cmp	r0, #0
 800c86c:	d03b      	beq.n	800c8e6 <ucdr_serialize_int16_t+0xc2>
 800c86e:	7d23      	ldrb	r3, [r4, #20]
 800c870:	2b01      	cmp	r3, #1
 800c872:	d04a      	beq.n	800c90a <ucdr_serialize_int16_t+0xe6>
 800c874:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c878:	702b      	strb	r3, [r5, #0]
 800c87a:	2e00      	cmp	r6, #0
 800c87c:	d040      	beq.n	800c900 <ucdr_serialize_int16_t+0xdc>
 800c87e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c882:	706b      	strb	r3, [r5, #1]
 800c884:	6923      	ldr	r3, [r4, #16]
 800c886:	68a2      	ldr	r2, [r4, #8]
 800c888:	7da0      	ldrb	r0, [r4, #22]
 800c88a:	3302      	adds	r3, #2
 800c88c:	1b9e      	subs	r6, r3, r6
 800c88e:	4442      	add	r2, r8
 800c890:	2302      	movs	r3, #2
 800c892:	f080 0001 	eor.w	r0, r0, #1
 800c896:	60a2      	str	r2, [r4, #8]
 800c898:	6126      	str	r6, [r4, #16]
 800c89a:	7563      	strb	r3, [r4, #21]
 800c89c:	b002      	add	sp, #8
 800c89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a2:	2102      	movs	r1, #2
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	f000 f9e5 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800c8aa:	b190      	cbz	r0, 800c8d2 <ucdr_serialize_int16_t+0xae>
 800c8ac:	7d23      	ldrb	r3, [r4, #20]
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	68a3      	ldr	r3, [r4, #8]
 800c8b2:	d014      	beq.n	800c8de <ucdr_serialize_int16_t+0xba>
 800c8b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c8b8:	701a      	strb	r2, [r3, #0]
 800c8ba:	68a3      	ldr	r3, [r4, #8]
 800c8bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c8c0:	705a      	strb	r2, [r3, #1]
 800c8c2:	68a2      	ldr	r2, [r4, #8]
 800c8c4:	6923      	ldr	r3, [r4, #16]
 800c8c6:	3202      	adds	r2, #2
 800c8c8:	3302      	adds	r3, #2
 800c8ca:	2102      	movs	r1, #2
 800c8cc:	60a2      	str	r2, [r4, #8]
 800c8ce:	6123      	str	r3, [r4, #16]
 800c8d0:	7561      	strb	r1, [r4, #21]
 800c8d2:	7da0      	ldrb	r0, [r4, #22]
 800c8d4:	f080 0001 	eor.w	r0, r0, #1
 800c8d8:	b002      	add	sp, #8
 800c8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c8e2:	801a      	strh	r2, [r3, #0]
 800c8e4:	e7ed      	b.n	800c8c2 <ucdr_serialize_int16_t+0x9e>
 800c8e6:	68a2      	ldr	r2, [r4, #8]
 800c8e8:	6923      	ldr	r3, [r4, #16]
 800c8ea:	7da0      	ldrb	r0, [r4, #22]
 800c8ec:	7567      	strb	r7, [r4, #21]
 800c8ee:	1b92      	subs	r2, r2, r6
 800c8f0:	1b9b      	subs	r3, r3, r6
 800c8f2:	f080 0001 	eor.w	r0, r0, #1
 800c8f6:	60a2      	str	r2, [r4, #8]
 800c8f8:	6123      	str	r3, [r4, #16]
 800c8fa:	b002      	add	sp, #8
 800c8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c900:	68a3      	ldr	r3, [r4, #8]
 800c902:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c906:	701a      	strb	r2, [r3, #0]
 800c908:	e7bc      	b.n	800c884 <ucdr_serialize_int16_t+0x60>
 800c90a:	4628      	mov	r0, r5
 800c90c:	f10d 0506 	add.w	r5, sp, #6
 800c910:	4629      	mov	r1, r5
 800c912:	4632      	mov	r2, r6
 800c914:	f00a fc3f 	bl	8017196 <memcpy>
 800c918:	68a0      	ldr	r0, [r4, #8]
 800c91a:	4642      	mov	r2, r8
 800c91c:	19a9      	adds	r1, r5, r6
 800c91e:	f00a fc3a 	bl	8017196 <memcpy>
 800c922:	e7af      	b.n	800c884 <ucdr_serialize_int16_t+0x60>

0800c924 <ucdr_deserialize_int16_t>:
 800c924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c928:	460d      	mov	r5, r1
 800c92a:	2102      	movs	r1, #2
 800c92c:	4604      	mov	r4, r0
 800c92e:	f000 f9f5 	bl	800cd1c <ucdr_buffer_alignment>
 800c932:	4601      	mov	r1, r0
 800c934:	4620      	mov	r0, r4
 800c936:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c93a:	f000 fa33 	bl	800cda4 <ucdr_advance_buffer>
 800c93e:	2102      	movs	r1, #2
 800c940:	4620      	mov	r0, r4
 800c942:	f000 f98b 	bl	800cc5c <ucdr_check_buffer_available_for>
 800c946:	bb60      	cbnz	r0, 800c9a2 <ucdr_deserialize_int16_t+0x7e>
 800c948:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c94c:	42be      	cmp	r6, r7
 800c94e:	d923      	bls.n	800c998 <ucdr_deserialize_int16_t+0x74>
 800c950:	6923      	ldr	r3, [r4, #16]
 800c952:	60a6      	str	r6, [r4, #8]
 800c954:	1bf6      	subs	r6, r6, r7
 800c956:	4433      	add	r3, r6
 800c958:	f1c6 0902 	rsb	r9, r6, #2
 800c95c:	6123      	str	r3, [r4, #16]
 800c95e:	4649      	mov	r1, r9
 800c960:	4620      	mov	r0, r4
 800c962:	f000 f987 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800c966:	2800      	cmp	r0, #0
 800c968:	d034      	beq.n	800c9d4 <ucdr_deserialize_int16_t+0xb0>
 800c96a:	7d23      	ldrb	r3, [r4, #20]
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d042      	beq.n	800c9f6 <ucdr_deserialize_int16_t+0xd2>
 800c970:	787b      	ldrb	r3, [r7, #1]
 800c972:	702b      	strb	r3, [r5, #0]
 800c974:	2e00      	cmp	r6, #0
 800c976:	d03a      	beq.n	800c9ee <ucdr_deserialize_int16_t+0xca>
 800c978:	783b      	ldrb	r3, [r7, #0]
 800c97a:	706b      	strb	r3, [r5, #1]
 800c97c:	6923      	ldr	r3, [r4, #16]
 800c97e:	68a2      	ldr	r2, [r4, #8]
 800c980:	7da0      	ldrb	r0, [r4, #22]
 800c982:	2102      	movs	r1, #2
 800c984:	3302      	adds	r3, #2
 800c986:	444a      	add	r2, r9
 800c988:	1b9b      	subs	r3, r3, r6
 800c98a:	7561      	strb	r1, [r4, #21]
 800c98c:	60a2      	str	r2, [r4, #8]
 800c98e:	6123      	str	r3, [r4, #16]
 800c990:	f080 0001 	eor.w	r0, r0, #1
 800c994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c998:	2102      	movs	r1, #2
 800c99a:	4620      	mov	r0, r4
 800c99c:	f000 f96a 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800c9a0:	b180      	cbz	r0, 800c9c4 <ucdr_deserialize_int16_t+0xa0>
 800c9a2:	7d23      	ldrb	r3, [r4, #20]
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	68a3      	ldr	r3, [r4, #8]
 800c9a8:	d011      	beq.n	800c9ce <ucdr_deserialize_int16_t+0xaa>
 800c9aa:	785b      	ldrb	r3, [r3, #1]
 800c9ac:	702b      	strb	r3, [r5, #0]
 800c9ae:	68a3      	ldr	r3, [r4, #8]
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	706b      	strb	r3, [r5, #1]
 800c9b4:	68a2      	ldr	r2, [r4, #8]
 800c9b6:	6923      	ldr	r3, [r4, #16]
 800c9b8:	3202      	adds	r2, #2
 800c9ba:	3302      	adds	r3, #2
 800c9bc:	2102      	movs	r1, #2
 800c9be:	60a2      	str	r2, [r4, #8]
 800c9c0:	6123      	str	r3, [r4, #16]
 800c9c2:	7561      	strb	r1, [r4, #21]
 800c9c4:	7da0      	ldrb	r0, [r4, #22]
 800c9c6:	f080 0001 	eor.w	r0, r0, #1
 800c9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9ce:	881b      	ldrh	r3, [r3, #0]
 800c9d0:	802b      	strh	r3, [r5, #0]
 800c9d2:	e7ef      	b.n	800c9b4 <ucdr_deserialize_int16_t+0x90>
 800c9d4:	68a2      	ldr	r2, [r4, #8]
 800c9d6:	6923      	ldr	r3, [r4, #16]
 800c9d8:	7da0      	ldrb	r0, [r4, #22]
 800c9da:	f884 8015 	strb.w	r8, [r4, #21]
 800c9de:	1b92      	subs	r2, r2, r6
 800c9e0:	1b9b      	subs	r3, r3, r6
 800c9e2:	60a2      	str	r2, [r4, #8]
 800c9e4:	6123      	str	r3, [r4, #16]
 800c9e6:	f080 0001 	eor.w	r0, r0, #1
 800c9ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9ee:	68a3      	ldr	r3, [r4, #8]
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	706b      	strb	r3, [r5, #1]
 800c9f4:	e7c2      	b.n	800c97c <ucdr_deserialize_int16_t+0x58>
 800c9f6:	4639      	mov	r1, r7
 800c9f8:	4632      	mov	r2, r6
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	f00a fbcb 	bl	8017196 <memcpy>
 800ca00:	68a1      	ldr	r1, [r4, #8]
 800ca02:	464a      	mov	r2, r9
 800ca04:	19a8      	adds	r0, r5, r6
 800ca06:	f00a fbc6 	bl	8017196 <memcpy>
 800ca0a:	e7b7      	b.n	800c97c <ucdr_deserialize_int16_t+0x58>

0800ca0c <ucdr_serialize_int32_t>:
 800ca0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca10:	b082      	sub	sp, #8
 800ca12:	4604      	mov	r4, r0
 800ca14:	9101      	str	r1, [sp, #4]
 800ca16:	2104      	movs	r1, #4
 800ca18:	f000 f980 	bl	800cd1c <ucdr_buffer_alignment>
 800ca1c:	4601      	mov	r1, r0
 800ca1e:	4620      	mov	r0, r4
 800ca20:	7d67      	ldrb	r7, [r4, #21]
 800ca22:	f000 f9bf 	bl	800cda4 <ucdr_advance_buffer>
 800ca26:	2104      	movs	r1, #4
 800ca28:	4620      	mov	r0, r4
 800ca2a:	f000 f917 	bl	800cc5c <ucdr_check_buffer_available_for>
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	d139      	bne.n	800caa6 <ucdr_serialize_int32_t+0x9a>
 800ca32:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ca36:	42ab      	cmp	r3, r5
 800ca38:	d930      	bls.n	800ca9c <ucdr_serialize_int32_t+0x90>
 800ca3a:	1b5e      	subs	r6, r3, r5
 800ca3c:	60a3      	str	r3, [r4, #8]
 800ca3e:	6923      	ldr	r3, [r4, #16]
 800ca40:	f1c6 0804 	rsb	r8, r6, #4
 800ca44:	4433      	add	r3, r6
 800ca46:	6123      	str	r3, [r4, #16]
 800ca48:	4641      	mov	r1, r8
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f000 f912 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800ca50:	2800      	cmp	r0, #0
 800ca52:	d04c      	beq.n	800caee <ucdr_serialize_int32_t+0xe2>
 800ca54:	7d23      	ldrb	r3, [r4, #20]
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d063      	beq.n	800cb22 <ucdr_serialize_int32_t+0x116>
 800ca5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca5e:	702b      	strb	r3, [r5, #0]
 800ca60:	2e00      	cmp	r6, #0
 800ca62:	d051      	beq.n	800cb08 <ucdr_serialize_int32_t+0xfc>
 800ca64:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ca68:	706b      	strb	r3, [r5, #1]
 800ca6a:	2e01      	cmp	r6, #1
 800ca6c:	d050      	beq.n	800cb10 <ucdr_serialize_int32_t+0x104>
 800ca6e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ca72:	70ab      	strb	r3, [r5, #2]
 800ca74:	2e02      	cmp	r6, #2
 800ca76:	d04f      	beq.n	800cb18 <ucdr_serialize_int32_t+0x10c>
 800ca78:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ca7c:	70eb      	strb	r3, [r5, #3]
 800ca7e:	6923      	ldr	r3, [r4, #16]
 800ca80:	68a2      	ldr	r2, [r4, #8]
 800ca82:	7da0      	ldrb	r0, [r4, #22]
 800ca84:	3304      	adds	r3, #4
 800ca86:	1b9e      	subs	r6, r3, r6
 800ca88:	4442      	add	r2, r8
 800ca8a:	2304      	movs	r3, #4
 800ca8c:	f080 0001 	eor.w	r0, r0, #1
 800ca90:	60a2      	str	r2, [r4, #8]
 800ca92:	6126      	str	r6, [r4, #16]
 800ca94:	7563      	strb	r3, [r4, #21]
 800ca96:	b002      	add	sp, #8
 800ca98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca9c:	2104      	movs	r1, #4
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f000 f8e8 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800caa4:	b1d0      	cbz	r0, 800cadc <ucdr_serialize_int32_t+0xd0>
 800caa6:	7d23      	ldrb	r3, [r4, #20]
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	68a3      	ldr	r3, [r4, #8]
 800caac:	d01c      	beq.n	800cae8 <ucdr_serialize_int32_t+0xdc>
 800caae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cab2:	701a      	strb	r2, [r3, #0]
 800cab4:	68a3      	ldr	r3, [r4, #8]
 800cab6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800caba:	705a      	strb	r2, [r3, #1]
 800cabc:	68a3      	ldr	r3, [r4, #8]
 800cabe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cac2:	709a      	strb	r2, [r3, #2]
 800cac4:	68a3      	ldr	r3, [r4, #8]
 800cac6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800caca:	70da      	strb	r2, [r3, #3]
 800cacc:	68a2      	ldr	r2, [r4, #8]
 800cace:	6923      	ldr	r3, [r4, #16]
 800cad0:	3204      	adds	r2, #4
 800cad2:	3304      	adds	r3, #4
 800cad4:	2104      	movs	r1, #4
 800cad6:	60a2      	str	r2, [r4, #8]
 800cad8:	6123      	str	r3, [r4, #16]
 800cada:	7561      	strb	r1, [r4, #21]
 800cadc:	7da0      	ldrb	r0, [r4, #22]
 800cade:	f080 0001 	eor.w	r0, r0, #1
 800cae2:	b002      	add	sp, #8
 800cae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cae8:	9a01      	ldr	r2, [sp, #4]
 800caea:	601a      	str	r2, [r3, #0]
 800caec:	e7ee      	b.n	800cacc <ucdr_serialize_int32_t+0xc0>
 800caee:	68a2      	ldr	r2, [r4, #8]
 800caf0:	6923      	ldr	r3, [r4, #16]
 800caf2:	7da0      	ldrb	r0, [r4, #22]
 800caf4:	7567      	strb	r7, [r4, #21]
 800caf6:	1b92      	subs	r2, r2, r6
 800caf8:	1b9b      	subs	r3, r3, r6
 800cafa:	f080 0001 	eor.w	r0, r0, #1
 800cafe:	60a2      	str	r2, [r4, #8]
 800cb00:	6123      	str	r3, [r4, #16]
 800cb02:	b002      	add	sp, #8
 800cb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb08:	68a3      	ldr	r3, [r4, #8]
 800cb0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cb0e:	701a      	strb	r2, [r3, #0]
 800cb10:	68a3      	ldr	r3, [r4, #8]
 800cb12:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cb16:	701a      	strb	r2, [r3, #0]
 800cb18:	68a3      	ldr	r3, [r4, #8]
 800cb1a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cb1e:	701a      	strb	r2, [r3, #0]
 800cb20:	e7ad      	b.n	800ca7e <ucdr_serialize_int32_t+0x72>
 800cb22:	4628      	mov	r0, r5
 800cb24:	ad01      	add	r5, sp, #4
 800cb26:	4629      	mov	r1, r5
 800cb28:	4632      	mov	r2, r6
 800cb2a:	f00a fb34 	bl	8017196 <memcpy>
 800cb2e:	68a0      	ldr	r0, [r4, #8]
 800cb30:	4642      	mov	r2, r8
 800cb32:	19a9      	adds	r1, r5, r6
 800cb34:	f00a fb2f 	bl	8017196 <memcpy>
 800cb38:	e7a1      	b.n	800ca7e <ucdr_serialize_int32_t+0x72>
 800cb3a:	bf00      	nop

0800cb3c <ucdr_deserialize_int32_t>:
 800cb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb40:	460d      	mov	r5, r1
 800cb42:	2104      	movs	r1, #4
 800cb44:	4604      	mov	r4, r0
 800cb46:	f000 f8e9 	bl	800cd1c <ucdr_buffer_alignment>
 800cb4a:	4601      	mov	r1, r0
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cb52:	f000 f927 	bl	800cda4 <ucdr_advance_buffer>
 800cb56:	2104      	movs	r1, #4
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f000 f87f 	bl	800cc5c <ucdr_check_buffer_available_for>
 800cb5e:	2800      	cmp	r0, #0
 800cb60:	d138      	bne.n	800cbd4 <ucdr_deserialize_int32_t+0x98>
 800cb62:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cb66:	42b7      	cmp	r7, r6
 800cb68:	d92f      	bls.n	800cbca <ucdr_deserialize_int32_t+0x8e>
 800cb6a:	6923      	ldr	r3, [r4, #16]
 800cb6c:	60a7      	str	r7, [r4, #8]
 800cb6e:	1bbf      	subs	r7, r7, r6
 800cb70:	443b      	add	r3, r7
 800cb72:	f1c7 0904 	rsb	r9, r7, #4
 800cb76:	6123      	str	r3, [r4, #16]
 800cb78:	4649      	mov	r1, r9
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	f000 f87a 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800cb80:	2800      	cmp	r0, #0
 800cb82:	d046      	beq.n	800cc12 <ucdr_deserialize_int32_t+0xd6>
 800cb84:	7d23      	ldrb	r3, [r4, #20]
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d05c      	beq.n	800cc44 <ucdr_deserialize_int32_t+0x108>
 800cb8a:	78f3      	ldrb	r3, [r6, #3]
 800cb8c:	702b      	strb	r3, [r5, #0]
 800cb8e:	2f00      	cmp	r7, #0
 800cb90:	d04c      	beq.n	800cc2c <ucdr_deserialize_int32_t+0xf0>
 800cb92:	78b3      	ldrb	r3, [r6, #2]
 800cb94:	706b      	strb	r3, [r5, #1]
 800cb96:	2f01      	cmp	r7, #1
 800cb98:	f105 0302 	add.w	r3, r5, #2
 800cb9c:	d04a      	beq.n	800cc34 <ucdr_deserialize_int32_t+0xf8>
 800cb9e:	7873      	ldrb	r3, [r6, #1]
 800cba0:	70ab      	strb	r3, [r5, #2]
 800cba2:	2f02      	cmp	r7, #2
 800cba4:	f105 0303 	add.w	r3, r5, #3
 800cba8:	d048      	beq.n	800cc3c <ucdr_deserialize_int32_t+0x100>
 800cbaa:	7833      	ldrb	r3, [r6, #0]
 800cbac:	70eb      	strb	r3, [r5, #3]
 800cbae:	6923      	ldr	r3, [r4, #16]
 800cbb0:	68a2      	ldr	r2, [r4, #8]
 800cbb2:	7da0      	ldrb	r0, [r4, #22]
 800cbb4:	2104      	movs	r1, #4
 800cbb6:	3304      	adds	r3, #4
 800cbb8:	444a      	add	r2, r9
 800cbba:	1bdb      	subs	r3, r3, r7
 800cbbc:	7561      	strb	r1, [r4, #21]
 800cbbe:	60a2      	str	r2, [r4, #8]
 800cbc0:	6123      	str	r3, [r4, #16]
 800cbc2:	f080 0001 	eor.w	r0, r0, #1
 800cbc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbca:	2104      	movs	r1, #4
 800cbcc:	4620      	mov	r0, r4
 800cbce:	f000 f851 	bl	800cc74 <ucdr_check_final_buffer_behavior>
 800cbd2:	b1b0      	cbz	r0, 800cc02 <ucdr_deserialize_int32_t+0xc6>
 800cbd4:	7d23      	ldrb	r3, [r4, #20]
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	68a3      	ldr	r3, [r4, #8]
 800cbda:	d017      	beq.n	800cc0c <ucdr_deserialize_int32_t+0xd0>
 800cbdc:	78db      	ldrb	r3, [r3, #3]
 800cbde:	702b      	strb	r3, [r5, #0]
 800cbe0:	68a3      	ldr	r3, [r4, #8]
 800cbe2:	789b      	ldrb	r3, [r3, #2]
 800cbe4:	706b      	strb	r3, [r5, #1]
 800cbe6:	68a3      	ldr	r3, [r4, #8]
 800cbe8:	785b      	ldrb	r3, [r3, #1]
 800cbea:	70ab      	strb	r3, [r5, #2]
 800cbec:	68a3      	ldr	r3, [r4, #8]
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	70eb      	strb	r3, [r5, #3]
 800cbf2:	68a2      	ldr	r2, [r4, #8]
 800cbf4:	6923      	ldr	r3, [r4, #16]
 800cbf6:	3204      	adds	r2, #4
 800cbf8:	3304      	adds	r3, #4
 800cbfa:	2104      	movs	r1, #4
 800cbfc:	60a2      	str	r2, [r4, #8]
 800cbfe:	6123      	str	r3, [r4, #16]
 800cc00:	7561      	strb	r1, [r4, #21]
 800cc02:	7da0      	ldrb	r0, [r4, #22]
 800cc04:	f080 0001 	eor.w	r0, r0, #1
 800cc08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	602b      	str	r3, [r5, #0]
 800cc10:	e7ef      	b.n	800cbf2 <ucdr_deserialize_int32_t+0xb6>
 800cc12:	68a2      	ldr	r2, [r4, #8]
 800cc14:	6923      	ldr	r3, [r4, #16]
 800cc16:	7da0      	ldrb	r0, [r4, #22]
 800cc18:	f884 8015 	strb.w	r8, [r4, #21]
 800cc1c:	1bd2      	subs	r2, r2, r7
 800cc1e:	1bdb      	subs	r3, r3, r7
 800cc20:	60a2      	str	r2, [r4, #8]
 800cc22:	6123      	str	r3, [r4, #16]
 800cc24:	f080 0001 	eor.w	r0, r0, #1
 800cc28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc2c:	68a3      	ldr	r3, [r4, #8]
 800cc2e:	789b      	ldrb	r3, [r3, #2]
 800cc30:	706b      	strb	r3, [r5, #1]
 800cc32:	1cab      	adds	r3, r5, #2
 800cc34:	68a2      	ldr	r2, [r4, #8]
 800cc36:	7852      	ldrb	r2, [r2, #1]
 800cc38:	f803 2b01 	strb.w	r2, [r3], #1
 800cc3c:	68a2      	ldr	r2, [r4, #8]
 800cc3e:	7812      	ldrb	r2, [r2, #0]
 800cc40:	701a      	strb	r2, [r3, #0]
 800cc42:	e7b4      	b.n	800cbae <ucdr_deserialize_int32_t+0x72>
 800cc44:	4631      	mov	r1, r6
 800cc46:	463a      	mov	r2, r7
 800cc48:	4628      	mov	r0, r5
 800cc4a:	f00a faa4 	bl	8017196 <memcpy>
 800cc4e:	68a1      	ldr	r1, [r4, #8]
 800cc50:	464a      	mov	r2, r9
 800cc52:	19e8      	adds	r0, r5, r7
 800cc54:	f00a fa9f 	bl	8017196 <memcpy>
 800cc58:	e7a9      	b.n	800cbae <ucdr_deserialize_int32_t+0x72>
 800cc5a:	bf00      	nop

0800cc5c <ucdr_check_buffer_available_for>:
 800cc5c:	7d83      	ldrb	r3, [r0, #22]
 800cc5e:	b93b      	cbnz	r3, 800cc70 <ucdr_check_buffer_available_for+0x14>
 800cc60:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800cc64:	4419      	add	r1, r3
 800cc66:	4288      	cmp	r0, r1
 800cc68:	bf34      	ite	cc
 800cc6a:	2000      	movcc	r0, #0
 800cc6c:	2001      	movcs	r0, #1
 800cc6e:	4770      	bx	lr
 800cc70:	2000      	movs	r0, #0
 800cc72:	4770      	bx	lr

0800cc74 <ucdr_check_final_buffer_behavior>:
 800cc74:	7d83      	ldrb	r3, [r0, #22]
 800cc76:	b943      	cbnz	r3, 800cc8a <ucdr_check_final_buffer_behavior+0x16>
 800cc78:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800cc7c:	4291      	cmp	r1, r2
 800cc7e:	b510      	push	{r4, lr}
 800cc80:	4604      	mov	r4, r0
 800cc82:	d205      	bcs.n	800cc90 <ucdr_check_final_buffer_behavior+0x1c>
 800cc84:	2301      	movs	r3, #1
 800cc86:	4618      	mov	r0, r3
 800cc88:	bd10      	pop	{r4, pc}
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	4770      	bx	lr
 800cc90:	6982      	ldr	r2, [r0, #24]
 800cc92:	b13a      	cbz	r2, 800cca4 <ucdr_check_final_buffer_behavior+0x30>
 800cc94:	69c1      	ldr	r1, [r0, #28]
 800cc96:	4790      	blx	r2
 800cc98:	f080 0301 	eor.w	r3, r0, #1
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	75a0      	strb	r0, [r4, #22]
 800cca0:	4618      	mov	r0, r3
 800cca2:	bd10      	pop	{r4, pc}
 800cca4:	2001      	movs	r0, #1
 800cca6:	75a0      	strb	r0, [r4, #22]
 800cca8:	e7fa      	b.n	800cca0 <ucdr_check_final_buffer_behavior+0x2c>
 800ccaa:	bf00      	nop

0800ccac <ucdr_set_on_full_buffer_callback>:
 800ccac:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800ccb0:	4770      	bx	lr
 800ccb2:	bf00      	nop

0800ccb4 <ucdr_init_buffer_origin_offset_endian>:
 800ccb4:	b410      	push	{r4}
 800ccb6:	9c01      	ldr	r4, [sp, #4]
 800ccb8:	6001      	str	r1, [r0, #0]
 800ccba:	440a      	add	r2, r1
 800ccbc:	6042      	str	r2, [r0, #4]
 800ccbe:	190a      	adds	r2, r1, r4
 800ccc0:	441c      	add	r4, r3
 800ccc2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800ccc6:	6082      	str	r2, [r0, #8]
 800ccc8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cccc:	7503      	strb	r3, [r0, #20]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800ccd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccd8:	7542      	strb	r2, [r0, #21]
 800ccda:	7582      	strb	r2, [r0, #22]
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop

0800cce0 <ucdr_init_buffer_origin_offset>:
 800cce0:	b510      	push	{r4, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	9c04      	ldr	r4, [sp, #16]
 800cce6:	9400      	str	r4, [sp, #0]
 800cce8:	2401      	movs	r4, #1
 800ccea:	9401      	str	r4, [sp, #4]
 800ccec:	f7ff ffe2 	bl	800ccb4 <ucdr_init_buffer_origin_offset_endian>
 800ccf0:	b002      	add	sp, #8
 800ccf2:	bd10      	pop	{r4, pc}

0800ccf4 <ucdr_init_buffer_origin>:
 800ccf4:	b510      	push	{r4, lr}
 800ccf6:	b082      	sub	sp, #8
 800ccf8:	2400      	movs	r4, #0
 800ccfa:	9400      	str	r4, [sp, #0]
 800ccfc:	f7ff fff0 	bl	800cce0 <ucdr_init_buffer_origin_offset>
 800cd00:	b002      	add	sp, #8
 800cd02:	bd10      	pop	{r4, pc}

0800cd04 <ucdr_init_buffer>:
 800cd04:	2300      	movs	r3, #0
 800cd06:	f7ff bff5 	b.w	800ccf4 <ucdr_init_buffer_origin>
 800cd0a:	bf00      	nop

0800cd0c <ucdr_alignment>:
 800cd0c:	fbb0 f3f1 	udiv	r3, r0, r1
 800cd10:	fb03 0011 	mls	r0, r3, r1, r0
 800cd14:	1a08      	subs	r0, r1, r0
 800cd16:	3901      	subs	r1, #1
 800cd18:	4008      	ands	r0, r1
 800cd1a:	4770      	bx	lr

0800cd1c <ucdr_buffer_alignment>:
 800cd1c:	7d43      	ldrb	r3, [r0, #21]
 800cd1e:	428b      	cmp	r3, r1
 800cd20:	d208      	bcs.n	800cd34 <ucdr_buffer_alignment+0x18>
 800cd22:	6900      	ldr	r0, [r0, #16]
 800cd24:	fbb0 f3f1 	udiv	r3, r0, r1
 800cd28:	fb01 0013 	mls	r0, r1, r3, r0
 800cd2c:	1a08      	subs	r0, r1, r0
 800cd2e:	3901      	subs	r1, #1
 800cd30:	4008      	ands	r0, r1
 800cd32:	4770      	bx	lr
 800cd34:	2000      	movs	r0, #0
 800cd36:	4770      	bx	lr

0800cd38 <ucdr_align_to>:
 800cd38:	b538      	push	{r3, r4, r5, lr}
 800cd3a:	4604      	mov	r4, r0
 800cd3c:	460d      	mov	r5, r1
 800cd3e:	f7ff ffed 	bl	800cd1c <ucdr_buffer_alignment>
 800cd42:	68a3      	ldr	r3, [r4, #8]
 800cd44:	6921      	ldr	r1, [r4, #16]
 800cd46:	7565      	strb	r5, [r4, #21]
 800cd48:	181a      	adds	r2, r3, r0
 800cd4a:	6863      	ldr	r3, [r4, #4]
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	4408      	add	r0, r1
 800cd50:	bf28      	it	cs
 800cd52:	4613      	movcs	r3, r2
 800cd54:	6120      	str	r0, [r4, #16]
 800cd56:	60a3      	str	r3, [r4, #8]
 800cd58:	bd38      	pop	{r3, r4, r5, pc}
 800cd5a:	bf00      	nop

0800cd5c <ucdr_buffer_length>:
 800cd5c:	6882      	ldr	r2, [r0, #8]
 800cd5e:	6800      	ldr	r0, [r0, #0]
 800cd60:	1a10      	subs	r0, r2, r0
 800cd62:	4770      	bx	lr

0800cd64 <ucdr_buffer_remaining>:
 800cd64:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800cd68:	1a10      	subs	r0, r2, r0
 800cd6a:	4770      	bx	lr

0800cd6c <ucdr_check_final_buffer_behavior_array>:
 800cd6c:	b538      	push	{r3, r4, r5, lr}
 800cd6e:	7d83      	ldrb	r3, [r0, #22]
 800cd70:	b963      	cbnz	r3, 800cd8c <ucdr_check_final_buffer_behavior_array+0x20>
 800cd72:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	4604      	mov	r4, r0
 800cd7a:	460d      	mov	r5, r1
 800cd7c:	d308      	bcc.n	800cd90 <ucdr_check_final_buffer_behavior_array+0x24>
 800cd7e:	b139      	cbz	r1, 800cd90 <ucdr_check_final_buffer_behavior_array+0x24>
 800cd80:	6983      	ldr	r3, [r0, #24]
 800cd82:	b163      	cbz	r3, 800cd9e <ucdr_check_final_buffer_behavior_array+0x32>
 800cd84:	69c1      	ldr	r1, [r0, #28]
 800cd86:	4798      	blx	r3
 800cd88:	75a0      	strb	r0, [r4, #22]
 800cd8a:	b108      	cbz	r0, 800cd90 <ucdr_check_final_buffer_behavior_array+0x24>
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	bd38      	pop	{r3, r4, r5, pc}
 800cd90:	4620      	mov	r0, r4
 800cd92:	f7ff ffe7 	bl	800cd64 <ucdr_buffer_remaining>
 800cd96:	42a8      	cmp	r0, r5
 800cd98:	bf28      	it	cs
 800cd9a:	4628      	movcs	r0, r5
 800cd9c:	bd38      	pop	{r3, r4, r5, pc}
 800cd9e:	2301      	movs	r3, #1
 800cda0:	7583      	strb	r3, [r0, #22]
 800cda2:	e7f3      	b.n	800cd8c <ucdr_check_final_buffer_behavior_array+0x20>

0800cda4 <ucdr_advance_buffer>:
 800cda4:	b538      	push	{r3, r4, r5, lr}
 800cda6:	4604      	mov	r4, r0
 800cda8:	460d      	mov	r5, r1
 800cdaa:	f7ff ff57 	bl	800cc5c <ucdr_check_buffer_available_for>
 800cdae:	b178      	cbz	r0, 800cdd0 <ucdr_advance_buffer+0x2c>
 800cdb0:	6923      	ldr	r3, [r4, #16]
 800cdb2:	68a2      	ldr	r2, [r4, #8]
 800cdb4:	442b      	add	r3, r5
 800cdb6:	6123      	str	r3, [r4, #16]
 800cdb8:	2301      	movs	r3, #1
 800cdba:	442a      	add	r2, r5
 800cdbc:	7563      	strb	r3, [r4, #21]
 800cdbe:	60a2      	str	r2, [r4, #8]
 800cdc0:	bd38      	pop	{r3, r4, r5, pc}
 800cdc2:	68a2      	ldr	r2, [r4, #8]
 800cdc4:	6923      	ldr	r3, [r4, #16]
 800cdc6:	4402      	add	r2, r0
 800cdc8:	4403      	add	r3, r0
 800cdca:	1a2d      	subs	r5, r5, r0
 800cdcc:	60a2      	str	r2, [r4, #8]
 800cdce:	6123      	str	r3, [r4, #16]
 800cdd0:	4629      	mov	r1, r5
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	f7ff ffc9 	bl	800cd6c <ucdr_check_final_buffer_behavior_array>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d1f1      	bne.n	800cdc2 <ucdr_advance_buffer+0x1e>
 800cdde:	2301      	movs	r3, #1
 800cde0:	7563      	strb	r3, [r4, #21]
 800cde2:	bd38      	pop	{r3, r4, r5, pc}

0800cde4 <uxr_buffer_delete_entity>:
 800cde4:	b510      	push	{r4, lr}
 800cde6:	2300      	movs	r3, #0
 800cde8:	b08e      	sub	sp, #56	; 0x38
 800cdea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cdee:	2303      	movs	r3, #3
 800cdf0:	9300      	str	r3, [sp, #0]
 800cdf2:	2204      	movs	r2, #4
 800cdf4:	ab06      	add	r3, sp, #24
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	9103      	str	r1, [sp, #12]
 800cdfa:	f001 f953 	bl	800e0a4 <uxr_prepare_stream_to_write_submessage>
 800cdfe:	b918      	cbnz	r0, 800ce08 <uxr_buffer_delete_entity+0x24>
 800ce00:	4604      	mov	r4, r0
 800ce02:	4620      	mov	r0, r4
 800ce04:	b00e      	add	sp, #56	; 0x38
 800ce06:	bd10      	pop	{r4, pc}
 800ce08:	9902      	ldr	r1, [sp, #8]
 800ce0a:	aa05      	add	r2, sp, #20
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	f001 fa7f 	bl	800e310 <uxr_init_base_object_request>
 800ce12:	a905      	add	r1, sp, #20
 800ce14:	4604      	mov	r4, r0
 800ce16:	a806      	add	r0, sp, #24
 800ce18:	f002 fcd0 	bl	800f7bc <uxr_serialize_DELETE_Payload>
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	b00e      	add	sp, #56	; 0x38
 800ce20:	bd10      	pop	{r4, pc}
 800ce22:	bf00      	nop

0800ce24 <uxr_common_create_entity>:
 800ce24:	b510      	push	{r4, lr}
 800ce26:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800ce2a:	b08c      	sub	sp, #48	; 0x30
 800ce2c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800ce30:	f1bc 0f01 	cmp.w	ip, #1
 800ce34:	bf0c      	ite	eq
 800ce36:	f003 0201 	andeq.w	r2, r3, #1
 800ce3a:	2200      	movne	r2, #0
 800ce3c:	330e      	adds	r3, #14
 800ce3e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800ce42:	9101      	str	r1, [sp, #4]
 800ce44:	441a      	add	r2, r3
 800ce46:	2301      	movs	r3, #1
 800ce48:	9300      	str	r3, [sp, #0]
 800ce4a:	9903      	ldr	r1, [sp, #12]
 800ce4c:	ab04      	add	r3, sp, #16
 800ce4e:	b292      	uxth	r2, r2
 800ce50:	4604      	mov	r4, r0
 800ce52:	f001 f927 	bl	800e0a4 <uxr_prepare_stream_to_write_submessage>
 800ce56:	b918      	cbnz	r0, 800ce60 <uxr_common_create_entity+0x3c>
 800ce58:	4604      	mov	r4, r0
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	b00c      	add	sp, #48	; 0x30
 800ce5e:	bd10      	pop	{r4, pc}
 800ce60:	9902      	ldr	r1, [sp, #8]
 800ce62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ce64:	4620      	mov	r0, r4
 800ce66:	f001 fa53 	bl	800e310 <uxr_init_base_object_request>
 800ce6a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ce6c:	4604      	mov	r4, r0
 800ce6e:	a804      	add	r0, sp, #16
 800ce70:	f002 fc00 	bl	800f674 <uxr_serialize_CREATE_Payload>
 800ce74:	4620      	mov	r0, r4
 800ce76:	b00c      	add	sp, #48	; 0x30
 800ce78:	bd10      	pop	{r4, pc}
 800ce7a:	bf00      	nop

0800ce7c <uxr_buffer_create_participant_bin>:
 800ce7c:	b570      	push	{r4, r5, r6, lr}
 800ce7e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800ce82:	ac11      	add	r4, sp, #68	; 0x44
 800ce84:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800ce88:	2303      	movs	r3, #3
 800ce8a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800ce8e:	7223      	strb	r3, [r4, #8]
 800ce90:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800ce92:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800ce96:	2201      	movs	r2, #1
 800ce98:	2100      	movs	r1, #0
 800ce9a:	4605      	mov	r5, r0
 800ce9c:	7122      	strb	r2, [r4, #4]
 800ce9e:	f88d 1014 	strb.w	r1, [sp, #20]
 800cea2:	b1cb      	cbz	r3, 800ced8 <uxr_buffer_create_participant_bin+0x5c>
 800cea4:	f88d 201c 	strb.w	r2, [sp, #28]
 800cea8:	9308      	str	r3, [sp, #32]
 800ceaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ceae:	a915      	add	r1, sp, #84	; 0x54
 800ceb0:	a809      	add	r0, sp, #36	; 0x24
 800ceb2:	f7ff ff27 	bl	800cd04 <ucdr_init_buffer>
 800ceb6:	a905      	add	r1, sp, #20
 800ceb8:	a809      	add	r0, sp, #36	; 0x24
 800ceba:	f001 ffbd 	bl	800ee38 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800cebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cec0:	9600      	str	r6, [sp, #0]
 800cec2:	9401      	str	r4, [sp, #4]
 800cec4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cec8:	60e3      	str	r3, [r4, #12]
 800ceca:	4628      	mov	r0, r5
 800cecc:	b29b      	uxth	r3, r3
 800cece:	f7ff ffa9 	bl	800ce24 <uxr_common_create_entity>
 800ced2:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800ced6:	bd70      	pop	{r4, r5, r6, pc}
 800ced8:	f88d 301c 	strb.w	r3, [sp, #28]
 800cedc:	e7e5      	b.n	800ceaa <uxr_buffer_create_participant_bin+0x2e>
 800cede:	bf00      	nop

0800cee0 <uxr_buffer_create_topic_bin>:
 800cee0:	b570      	push	{r4, r5, r6, lr}
 800cee2:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800cee6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ceea:	9105      	str	r1, [sp, #20]
 800ceec:	4605      	mov	r5, r0
 800ceee:	a997      	add	r1, sp, #604	; 0x25c
 800cef0:	4618      	mov	r0, r3
 800cef2:	2302      	movs	r3, #2
 800cef4:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800cef8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800cefc:	f000 f996 	bl	800d22c <uxr_object_id_to_raw>
 800cf00:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800cf02:	9306      	str	r3, [sp, #24]
 800cf04:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800cf06:	930a      	str	r3, [sp, #40]	; 0x28
 800cf08:	2303      	movs	r3, #3
 800cf0a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800cf0e:	2301      	movs	r3, #1
 800cf10:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf14:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800cf18:	a917      	add	r1, sp, #92	; 0x5c
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	a80b      	add	r0, sp, #44	; 0x2c
 800cf1e:	f88d 301c 	strb.w	r3, [sp, #28]
 800cf22:	f7ff feef 	bl	800cd04 <ucdr_init_buffer>
 800cf26:	a906      	add	r1, sp, #24
 800cf28:	a80b      	add	r0, sp, #44	; 0x2c
 800cf2a:	f001 ffa7 	bl	800ee7c <uxr_serialize_OBJK_Topic_Binary>
 800cf2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf30:	9316      	str	r3, [sp, #88]	; 0x58
 800cf32:	ac13      	add	r4, sp, #76	; 0x4c
 800cf34:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cf38:	9600      	str	r6, [sp, #0]
 800cf3a:	9401      	str	r4, [sp, #4]
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	4628      	mov	r0, r5
 800cf40:	f7ff ff70 	bl	800ce24 <uxr_common_create_entity>
 800cf44:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800cf48:	bd70      	pop	{r4, r5, r6, pc}
 800cf4a:	bf00      	nop

0800cf4c <uxr_buffer_create_publisher_bin>:
 800cf4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf4e:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800cf52:	4605      	mov	r5, r0
 800cf54:	9105      	str	r1, [sp, #20]
 800cf56:	4618      	mov	r0, r3
 800cf58:	2603      	movs	r6, #3
 800cf5a:	a992      	add	r1, sp, #584	; 0x248
 800cf5c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cf60:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800cf64:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800cf68:	f000 f960 	bl	800d22c <uxr_object_id_to_raw>
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf72:	a912      	add	r1, sp, #72	; 0x48
 800cf74:	a806      	add	r0, sp, #24
 800cf76:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800cf7a:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800cf7e:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800cf82:	f7ff febf 	bl	800cd04 <ucdr_init_buffer>
 800cf86:	a993      	add	r1, sp, #588	; 0x24c
 800cf88:	a806      	add	r0, sp, #24
 800cf8a:	f002 f82b 	bl	800efe4 <uxr_serialize_OBJK_Publisher_Binary>
 800cf8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf90:	9311      	str	r3, [sp, #68]	; 0x44
 800cf92:	ac0e      	add	r4, sp, #56	; 0x38
 800cf94:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cf98:	9700      	str	r7, [sp, #0]
 800cf9a:	9401      	str	r4, [sp, #4]
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	f7ff ff40 	bl	800ce24 <uxr_common_create_entity>
 800cfa4:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800cfa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfaa:	bf00      	nop

0800cfac <uxr_buffer_create_subscriber_bin>:
 800cfac:	b570      	push	{r4, r5, r6, lr}
 800cfae:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 800cfb2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cfb6:	9105      	str	r1, [sp, #20]
 800cfb8:	4605      	mov	r5, r0
 800cfba:	a992      	add	r1, sp, #584	; 0x248
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	2304      	movs	r3, #4
 800cfc0:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 800cfc4:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800cfc8:	f000 f930 	bl	800d22c <uxr_object_id_to_raw>
 800cfcc:	2300      	movs	r3, #0
 800cfce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfd2:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800cfd6:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800cfda:	a912      	add	r1, sp, #72	; 0x48
 800cfdc:	2303      	movs	r3, #3
 800cfde:	a806      	add	r0, sp, #24
 800cfe0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800cfe4:	f7ff fe8e 	bl	800cd04 <ucdr_init_buffer>
 800cfe8:	a993      	add	r1, sp, #588	; 0x24c
 800cfea:	a806      	add	r0, sp, #24
 800cfec:	f002 f8aa 	bl	800f144 <uxr_serialize_OBJK_Subscriber_Binary>
 800cff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cff2:	9311      	str	r3, [sp, #68]	; 0x44
 800cff4:	ac0e      	add	r4, sp, #56	; 0x38
 800cff6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cffa:	9600      	str	r6, [sp, #0]
 800cffc:	9401      	str	r4, [sp, #4]
 800cffe:	b29b      	uxth	r3, r3
 800d000:	4628      	mov	r0, r5
 800d002:	f7ff ff0f 	bl	800ce24 <uxr_common_create_entity>
 800d006:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 800d00a:	bd70      	pop	{r4, r5, r6, pc}

0800d00c <uxr_buffer_create_datawriter_bin>:
 800d00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d010:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d014:	ac1d      	add	r4, sp, #116	; 0x74
 800d016:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d01a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800d01e:	9105      	str	r1, [sp, #20]
 800d020:	4606      	mov	r6, r0
 800d022:	a9a1      	add	r1, sp, #644	; 0x284
 800d024:	4618      	mov	r0, r3
 800d026:	2305      	movs	r3, #5
 800d028:	7123      	strb	r3, [r4, #4]
 800d02a:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800d02e:	2703      	movs	r7, #3
 800d030:	f000 f8fc 	bl	800d22c <uxr_object_id_to_raw>
 800d034:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800d036:	7227      	strb	r7, [r4, #8]
 800d038:	a90e      	add	r1, sp, #56	; 0x38
 800d03a:	f000 f8f7 	bl	800d22c <uxr_object_id_to_raw>
 800d03e:	2300      	movs	r3, #0
 800d040:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800d044:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800d048:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800d04c:	3d00      	subs	r5, #0
 800d04e:	bf18      	it	ne
 800d050:	2501      	movne	r5, #1
 800d052:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800d056:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800d05a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800d05e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800d062:	2301      	movs	r3, #1
 800d064:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800d068:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800d06c:	bb8a      	cbnz	r2, 800d0d2 <uxr_buffer_create_datawriter_bin+0xc6>
 800d06e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800d072:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800d076:	f04f 0c13 	mov.w	ip, #19
 800d07a:	250b      	movs	r5, #11
 800d07c:	2221      	movs	r2, #33	; 0x21
 800d07e:	2111      	movs	r1, #17
 800d080:	2009      	movs	r0, #9
 800d082:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800d086:	b923      	cbnz	r3, 800d092 <uxr_buffer_create_datawriter_bin+0x86>
 800d088:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800d08c:	4672      	mov	r2, lr
 800d08e:	4661      	mov	r1, ip
 800d090:	4628      	mov	r0, r5
 800d092:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800d096:	2b01      	cmp	r3, #1
 800d098:	d025      	beq.n	800d0e6 <uxr_buffer_create_datawriter_bin+0xda>
 800d09a:	2b03      	cmp	r3, #3
 800d09c:	d029      	beq.n	800d0f2 <uxr_buffer_create_datawriter_bin+0xe6>
 800d09e:	b32b      	cbz	r3, 800d0ec <uxr_buffer_create_datawriter_bin+0xe0>
 800d0a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0a4:	a921      	add	r1, sp, #132	; 0x84
 800d0a6:	a806      	add	r0, sp, #24
 800d0a8:	f7ff fe2c 	bl	800cd04 <ucdr_init_buffer>
 800d0ac:	a90e      	add	r1, sp, #56	; 0x38
 800d0ae:	a806      	add	r0, sp, #24
 800d0b0:	f002 f8fa 	bl	800f2a8 <uxr_serialize_OBJK_DataWriter_Binary>
 800d0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0b6:	f8cd 8000 	str.w	r8, [sp]
 800d0ba:	9401      	str	r4, [sp, #4]
 800d0bc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d0c0:	60e3      	str	r3, [r4, #12]
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	f7ff fead 	bl	800ce24 <uxr_common_create_entity>
 800d0ca:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d0ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0d2:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800d0d6:	f04f 0c12 	mov.w	ip, #18
 800d0da:	250a      	movs	r5, #10
 800d0dc:	2220      	movs	r2, #32
 800d0de:	2110      	movs	r1, #16
 800d0e0:	2008      	movs	r0, #8
 800d0e2:	2702      	movs	r7, #2
 800d0e4:	e7cd      	b.n	800d082 <uxr_buffer_create_datawriter_bin+0x76>
 800d0e6:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800d0ea:	e7d9      	b.n	800d0a0 <uxr_buffer_create_datawriter_bin+0x94>
 800d0ec:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800d0f0:	e7d6      	b.n	800d0a0 <uxr_buffer_create_datawriter_bin+0x94>
 800d0f2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800d0f6:	e7d3      	b.n	800d0a0 <uxr_buffer_create_datawriter_bin+0x94>

0800d0f8 <uxr_buffer_create_datareader_bin>:
 800d0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0fc:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800d100:	ac1f      	add	r4, sp, #124	; 0x7c
 800d102:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d106:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800d10a:	9105      	str	r1, [sp, #20]
 800d10c:	4606      	mov	r6, r0
 800d10e:	a9a3      	add	r1, sp, #652	; 0x28c
 800d110:	4618      	mov	r0, r3
 800d112:	2306      	movs	r3, #6
 800d114:	7123      	strb	r3, [r4, #4]
 800d116:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800d11a:	2703      	movs	r7, #3
 800d11c:	f000 f886 	bl	800d22c <uxr_object_id_to_raw>
 800d120:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800d122:	7227      	strb	r7, [r4, #8]
 800d124:	a90e      	add	r1, sp, #56	; 0x38
 800d126:	f000 f881 	bl	800d22c <uxr_object_id_to_raw>
 800d12a:	2300      	movs	r3, #0
 800d12c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800d130:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 800d134:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800d138:	3d00      	subs	r5, #0
 800d13a:	bf18      	it	ne
 800d13c:	2501      	movne	r5, #1
 800d13e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800d142:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800d146:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800d14a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800d14e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800d152:	2301      	movs	r3, #1
 800d154:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800d158:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800d15c:	bb8a      	cbnz	r2, 800d1c2 <uxr_buffer_create_datareader_bin+0xca>
 800d15e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800d162:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800d166:	f04f 0c13 	mov.w	ip, #19
 800d16a:	250b      	movs	r5, #11
 800d16c:	2221      	movs	r2, #33	; 0x21
 800d16e:	2111      	movs	r1, #17
 800d170:	2009      	movs	r0, #9
 800d172:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800d176:	b923      	cbnz	r3, 800d182 <uxr_buffer_create_datareader_bin+0x8a>
 800d178:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800d17c:	4672      	mov	r2, lr
 800d17e:	4661      	mov	r1, ip
 800d180:	4628      	mov	r0, r5
 800d182:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800d186:	2b01      	cmp	r3, #1
 800d188:	d025      	beq.n	800d1d6 <uxr_buffer_create_datareader_bin+0xde>
 800d18a:	2b03      	cmp	r3, #3
 800d18c:	d029      	beq.n	800d1e2 <uxr_buffer_create_datareader_bin+0xea>
 800d18e:	b32b      	cbz	r3, 800d1dc <uxr_buffer_create_datareader_bin+0xe4>
 800d190:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d194:	a923      	add	r1, sp, #140	; 0x8c
 800d196:	a806      	add	r0, sp, #24
 800d198:	f7ff fdb4 	bl	800cd04 <ucdr_init_buffer>
 800d19c:	a90e      	add	r1, sp, #56	; 0x38
 800d19e:	a806      	add	r0, sp, #24
 800d1a0:	f002 f846 	bl	800f230 <uxr_serialize_OBJK_DataReader_Binary>
 800d1a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1a6:	f8cd 8000 	str.w	r8, [sp]
 800d1aa:	9401      	str	r4, [sp, #4]
 800d1ac:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d1b0:	60e3      	str	r3, [r4, #12]
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	f7ff fe35 	bl	800ce24 <uxr_common_create_entity>
 800d1ba:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800d1be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1c2:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800d1c6:	f04f 0c12 	mov.w	ip, #18
 800d1ca:	250a      	movs	r5, #10
 800d1cc:	2220      	movs	r2, #32
 800d1ce:	2110      	movs	r1, #16
 800d1d0:	2008      	movs	r0, #8
 800d1d2:	2702      	movs	r7, #2
 800d1d4:	e7cd      	b.n	800d172 <uxr_buffer_create_datareader_bin+0x7a>
 800d1d6:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800d1da:	e7d9      	b.n	800d190 <uxr_buffer_create_datareader_bin+0x98>
 800d1dc:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800d1e0:	e7d6      	b.n	800d190 <uxr_buffer_create_datareader_bin+0x98>
 800d1e2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800d1e6:	e7d3      	b.n	800d190 <uxr_buffer_create_datareader_bin+0x98>

0800d1e8 <uxr_object_id>:
 800d1e8:	b082      	sub	sp, #8
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	f88d 1006 	strb.w	r1, [sp, #6]
 800d1f0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d1f4:	f360 030f 	bfi	r3, r0, #0, #16
 800d1f8:	f362 431f 	bfi	r3, r2, #16, #16
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	b002      	add	sp, #8
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop

0800d204 <uxr_object_id_from_raw>:
 800d204:	7843      	ldrb	r3, [r0, #1]
 800d206:	7801      	ldrb	r1, [r0, #0]
 800d208:	b082      	sub	sp, #8
 800d20a:	f003 020f 	and.w	r2, r3, #15
 800d20e:	f88d 2006 	strb.w	r2, [sp, #6]
 800d212:	091b      	lsrs	r3, r3, #4
 800d214:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d218:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d21c:	2000      	movs	r0, #0
 800d21e:	f363 000f 	bfi	r0, r3, #0, #16
 800d222:	f362 401f 	bfi	r0, r2, #16, #16
 800d226:	b002      	add	sp, #8
 800d228:	4770      	bx	lr
 800d22a:	bf00      	nop

0800d22c <uxr_object_id_to_raw>:
 800d22c:	4602      	mov	r2, r0
 800d22e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800d232:	b082      	sub	sp, #8
 800d234:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800d238:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800d23c:	f881 c000 	strb.w	ip, [r1]
 800d240:	7048      	strb	r0, [r1, #1]
 800d242:	b002      	add	sp, #8
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop

0800d248 <on_get_fragmentation_info>:
 800d248:	b500      	push	{lr}
 800d24a:	b08b      	sub	sp, #44	; 0x2c
 800d24c:	4601      	mov	r1, r0
 800d24e:	2204      	movs	r2, #4
 800d250:	a802      	add	r0, sp, #8
 800d252:	f7ff fd57 	bl	800cd04 <ucdr_init_buffer>
 800d256:	f10d 0305 	add.w	r3, sp, #5
 800d25a:	f10d 0206 	add.w	r2, sp, #6
 800d25e:	a901      	add	r1, sp, #4
 800d260:	a802      	add	r0, sp, #8
 800d262:	f001 f9d7 	bl	800e614 <uxr_read_submessage_header>
 800d266:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d26a:	2b0d      	cmp	r3, #13
 800d26c:	d003      	beq.n	800d276 <on_get_fragmentation_info+0x2e>
 800d26e:	2000      	movs	r0, #0
 800d270:	b00b      	add	sp, #44	; 0x2c
 800d272:	f85d fb04 	ldr.w	pc, [sp], #4
 800d276:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d27a:	f013 0f02 	tst.w	r3, #2
 800d27e:	bf14      	ite	ne
 800d280:	2002      	movne	r0, #2
 800d282:	2001      	moveq	r0, #1
 800d284:	b00b      	add	sp, #44	; 0x2c
 800d286:	f85d fb04 	ldr.w	pc, [sp], #4
 800d28a:	bf00      	nop

0800d28c <read_submessage_get_info>:
 800d28c:	b570      	push	{r4, r5, r6, lr}
 800d28e:	2500      	movs	r5, #0
 800d290:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800d294:	4604      	mov	r4, r0
 800d296:	f44f 7224 	mov.w	r2, #656	; 0x290
 800d29a:	460e      	mov	r6, r1
 800d29c:	a810      	add	r0, sp, #64	; 0x40
 800d29e:	4629      	mov	r1, r5
 800d2a0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800d2a4:	f009 fe58 	bl	8016f58 <memset>
 800d2a8:	a903      	add	r1, sp, #12
 800d2aa:	4630      	mov	r0, r6
 800d2ac:	f002 fa72 	bl	800f794 <uxr_deserialize_GET_INFO_Payload>
 800d2b0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d2b4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	f001 f821 	bl	800e300 <uxr_session_header_offset>
 800d2be:	462b      	mov	r3, r5
 800d2c0:	9000      	str	r0, [sp, #0]
 800d2c2:	220c      	movs	r2, #12
 800d2c4:	a905      	add	r1, sp, #20
 800d2c6:	a808      	add	r0, sp, #32
 800d2c8:	f7ff fd0a 	bl	800cce0 <ucdr_init_buffer_origin_offset>
 800d2cc:	a910      	add	r1, sp, #64	; 0x40
 800d2ce:	a808      	add	r0, sp, #32
 800d2d0:	f002 fad2 	bl	800f878 <uxr_serialize_INFO_Payload>
 800d2d4:	9b08      	ldr	r3, [sp, #32]
 800d2d6:	462a      	mov	r2, r5
 800d2d8:	4629      	mov	r1, r5
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f000 ffba 	bl	800e254 <uxr_stamp_session_header>
 800d2e0:	a808      	add	r0, sp, #32
 800d2e2:	f7ff fd3b 	bl	800cd5c <ucdr_buffer_length>
 800d2e6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	a905      	add	r1, sp, #20
 800d2ec:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d2f0:	47a0      	blx	r4
 800d2f2:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800d2f6:	bd70      	pop	{r4, r5, r6, pc}

0800d2f8 <write_submessage_acknack.isra.0>:
 800d2f8:	b570      	push	{r4, r5, r6, lr}
 800d2fa:	b092      	sub	sp, #72	; 0x48
 800d2fc:	4605      	mov	r5, r0
 800d2fe:	460e      	mov	r6, r1
 800d300:	4614      	mov	r4, r2
 800d302:	f000 fffd 	bl	800e300 <uxr_session_header_offset>
 800d306:	a905      	add	r1, sp, #20
 800d308:	9000      	str	r0, [sp, #0]
 800d30a:	2300      	movs	r3, #0
 800d30c:	a80a      	add	r0, sp, #40	; 0x28
 800d30e:	2211      	movs	r2, #17
 800d310:	f7ff fce6 	bl	800cce0 <ucdr_init_buffer_origin_offset>
 800d314:	2218      	movs	r2, #24
 800d316:	fb02 5404 	mla	r4, r2, r4, r5
 800d31a:	2300      	movs	r3, #0
 800d31c:	2205      	movs	r2, #5
 800d31e:	3450      	adds	r4, #80	; 0x50
 800d320:	210a      	movs	r1, #10
 800d322:	a80a      	add	r0, sp, #40	; 0x28
 800d324:	f001 f95c 	bl	800e5e0 <uxr_buffer_submessage_header>
 800d328:	a903      	add	r1, sp, #12
 800d32a:	4620      	mov	r0, r4
 800d32c:	f007 fc48 	bl	8014bc0 <uxr_compute_acknack>
 800d330:	ba40      	rev16	r0, r0
 800d332:	f8ad 000e 	strh.w	r0, [sp, #14]
 800d336:	a903      	add	r1, sp, #12
 800d338:	a80a      	add	r0, sp, #40	; 0x28
 800d33a:	f88d 6010 	strb.w	r6, [sp, #16]
 800d33e:	f002 fb0b 	bl	800f958 <uxr_serialize_ACKNACK_Payload>
 800d342:	2200      	movs	r2, #0
 800d344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d346:	4611      	mov	r1, r2
 800d348:	4628      	mov	r0, r5
 800d34a:	f000 ff83 	bl	800e254 <uxr_stamp_session_header>
 800d34e:	a80a      	add	r0, sp, #40	; 0x28
 800d350:	f7ff fd04 	bl	800cd5c <ucdr_buffer_length>
 800d354:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d356:	4602      	mov	r2, r0
 800d358:	a905      	add	r1, sp, #20
 800d35a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d35e:	47a0      	blx	r4
 800d360:	b012      	add	sp, #72	; 0x48
 800d362:	bd70      	pop	{r4, r5, r6, pc}
 800d364:	0000      	movs	r0, r0
	...

0800d368 <uxr_init_session>:
 800d368:	b510      	push	{r4, lr}
 800d36a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800d3a0 <uxr_init_session+0x38>
 800d36e:	2300      	movs	r3, #0
 800d370:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800d374:	4604      	mov	r4, r0
 800d376:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800d37a:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800d37e:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800d382:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800d386:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800d38a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800d38e:	2181      	movs	r1, #129	; 0x81
 800d390:	f000 fecc 	bl	800e12c <uxr_init_session_info>
 800d394:	f104 0008 	add.w	r0, r4, #8
 800d398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d39c:	f001 b83c 	b.w	800e418 <uxr_init_stream_storage>
	...

0800d3a8 <uxr_set_status_callback>:
 800d3a8:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop

0800d3b0 <uxr_set_topic_callback>:
 800d3b0:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800d3b4:	4770      	bx	lr
 800d3b6:	bf00      	nop

0800d3b8 <uxr_set_request_callback>:
 800d3b8:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800d3bc:	4770      	bx	lr
 800d3be:	bf00      	nop

0800d3c0 <uxr_set_reply_callback>:
 800d3c0:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800d3c4:	4770      	bx	lr
 800d3c6:	bf00      	nop

0800d3c8 <uxr_create_output_best_effort_stream>:
 800d3c8:	b510      	push	{r4, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	e9cd 2100 	strd	r2, r1, [sp]
 800d3d0:	4604      	mov	r4, r0
 800d3d2:	f000 ff95 	bl	800e300 <uxr_session_header_offset>
 800d3d6:	e9dd 2100 	ldrd	r2, r1, [sp]
 800d3da:	4603      	mov	r3, r0
 800d3dc:	f104 0008 	add.w	r0, r4, #8
 800d3e0:	b004      	add	sp, #16
 800d3e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3e6:	f001 b861 	b.w	800e4ac <uxr_add_output_best_effort_buffer>
 800d3ea:	bf00      	nop

0800d3ec <uxr_create_output_reliable_stream>:
 800d3ec:	b510      	push	{r4, lr}
 800d3ee:	b088      	sub	sp, #32
 800d3f0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800d3f4:	4604      	mov	r4, r0
 800d3f6:	9303      	str	r3, [sp, #12]
 800d3f8:	f000 ff82 	bl	800e300 <uxr_session_header_offset>
 800d3fc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d400:	9000      	str	r0, [sp, #0]
 800d402:	9905      	ldr	r1, [sp, #20]
 800d404:	f104 0008 	add.w	r0, r4, #8
 800d408:	f001 f864 	bl	800e4d4 <uxr_add_output_reliable_buffer>
 800d40c:	2200      	movs	r2, #0
 800d40e:	b2c3      	uxtb	r3, r0
 800d410:	f363 0207 	bfi	r2, r3, #0, #8
 800d414:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d418:	f363 220f 	bfi	r2, r3, #8, #8
 800d41c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d420:	f363 4217 	bfi	r2, r3, #16, #8
 800d424:	0e03      	lsrs	r3, r0, #24
 800d426:	f363 621f 	bfi	r2, r3, #24, #8
 800d42a:	4610      	mov	r0, r2
 800d42c:	b008      	add	sp, #32
 800d42e:	bd10      	pop	{r4, pc}

0800d430 <uxr_create_input_best_effort_stream>:
 800d430:	b082      	sub	sp, #8
 800d432:	3008      	adds	r0, #8
 800d434:	b002      	add	sp, #8
 800d436:	f001 b867 	b.w	800e508 <uxr_add_input_best_effort_buffer>
 800d43a:	bf00      	nop

0800d43c <uxr_create_input_reliable_stream>:
 800d43c:	b510      	push	{r4, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	4c0b      	ldr	r4, [pc, #44]	; (800d470 <uxr_create_input_reliable_stream+0x34>)
 800d442:	9400      	str	r4, [sp, #0]
 800d444:	3008      	adds	r0, #8
 800d446:	f001 f875 	bl	800e534 <uxr_add_input_reliable_buffer>
 800d44a:	2200      	movs	r2, #0
 800d44c:	b2c3      	uxtb	r3, r0
 800d44e:	f363 0207 	bfi	r2, r3, #0, #8
 800d452:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d456:	f363 220f 	bfi	r2, r3, #8, #8
 800d45a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d45e:	f363 4217 	bfi	r2, r3, #16, #8
 800d462:	0e03      	lsrs	r3, r0, #24
 800d464:	f363 621f 	bfi	r2, r3, #24, #8
 800d468:	4610      	mov	r0, r2
 800d46a:	b004      	add	sp, #16
 800d46c:	bd10      	pop	{r4, pc}
 800d46e:	bf00      	nop
 800d470:	0800d249 	.word	0x0800d249

0800d474 <uxr_epoch_nanos>:
 800d474:	b510      	push	{r4, lr}
 800d476:	4604      	mov	r4, r0
 800d478:	f001 f912 	bl	800e6a0 <uxr_nanos>
 800d47c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800d480:	1ac0      	subs	r0, r0, r3
 800d482:	eb61 0102 	sbc.w	r1, r1, r2
 800d486:	bd10      	pop	{r4, pc}

0800d488 <uxr_flash_output_streams>:
 800d488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d48c:	7e03      	ldrb	r3, [r0, #24]
 800d48e:	b084      	sub	sp, #16
 800d490:	4604      	mov	r4, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d035      	beq.n	800d502 <uxr_flash_output_streams+0x7a>
 800d496:	f04f 0900 	mov.w	r9, #0
 800d49a:	4648      	mov	r0, r9
 800d49c:	f10d 0802 	add.w	r8, sp, #2
 800d4a0:	af03      	add	r7, sp, #12
 800d4a2:	ae02      	add	r6, sp, #8
 800d4a4:	e006      	b.n	800d4b4 <uxr_flash_output_streams+0x2c>
 800d4a6:	7e23      	ldrb	r3, [r4, #24]
 800d4a8:	f109 0901 	add.w	r9, r9, #1
 800d4ac:	fa5f f089 	uxtb.w	r0, r9
 800d4b0:	4283      	cmp	r3, r0
 800d4b2:	d926      	bls.n	800d502 <uxr_flash_output_streams+0x7a>
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	4611      	mov	r1, r2
 800d4b8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800d4bc:	f000 ff58 	bl	800e370 <uxr_stream_id>
 800d4c0:	3508      	adds	r5, #8
 800d4c2:	4684      	mov	ip, r0
 800d4c4:	4643      	mov	r3, r8
 800d4c6:	463a      	mov	r2, r7
 800d4c8:	4631      	mov	r1, r6
 800d4ca:	4628      	mov	r0, r5
 800d4cc:	f8cd c004 	str.w	ip, [sp, #4]
 800d4d0:	f007 fbfc 	bl	8014ccc <uxr_prepare_best_effort_buffer_to_send>
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	d0e6      	beq.n	800d4a6 <uxr_flash_output_streams+0x1e>
 800d4d8:	9b02      	ldr	r3, [sp, #8]
 800d4da:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d4de:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	f000 feb6 	bl	800e254 <uxr_stamp_session_header>
 800d4e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d4ea:	9a03      	ldr	r2, [sp, #12]
 800d4ec:	685d      	ldr	r5, [r3, #4]
 800d4ee:	6818      	ldr	r0, [r3, #0]
 800d4f0:	9902      	ldr	r1, [sp, #8]
 800d4f2:	47a8      	blx	r5
 800d4f4:	f109 0901 	add.w	r9, r9, #1
 800d4f8:	7e23      	ldrb	r3, [r4, #24]
 800d4fa:	fa5f f089 	uxtb.w	r0, r9
 800d4fe:	4283      	cmp	r3, r0
 800d500:	d8d8      	bhi.n	800d4b4 <uxr_flash_output_streams+0x2c>
 800d502:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800d506:	b38b      	cbz	r3, 800d56c <uxr_flash_output_streams+0xe4>
 800d508:	f04f 0900 	mov.w	r9, #0
 800d50c:	f10d 0802 	add.w	r8, sp, #2
 800d510:	af03      	add	r7, sp, #12
 800d512:	ae02      	add	r6, sp, #8
 800d514:	4648      	mov	r0, r9
 800d516:	2201      	movs	r2, #1
 800d518:	2102      	movs	r1, #2
 800d51a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800d51e:	f000 ff27 	bl	800e370 <uxr_stream_id>
 800d522:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800d526:	3520      	adds	r5, #32
 800d528:	9001      	str	r0, [sp, #4]
 800d52a:	e00d      	b.n	800d548 <uxr_flash_output_streams+0xc0>
 800d52c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d530:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d534:	9b02      	ldr	r3, [sp, #8]
 800d536:	f000 fe8d 	bl	800e254 <uxr_stamp_session_header>
 800d53a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d53c:	9a03      	ldr	r2, [sp, #12]
 800d53e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800d542:	9902      	ldr	r1, [sp, #8]
 800d544:	6818      	ldr	r0, [r3, #0]
 800d546:	47d0      	blx	sl
 800d548:	4643      	mov	r3, r8
 800d54a:	463a      	mov	r2, r7
 800d54c:	4631      	mov	r1, r6
 800d54e:	4628      	mov	r0, r5
 800d550:	f007 fdda 	bl	8015108 <uxr_prepare_next_reliable_buffer_to_send>
 800d554:	4603      	mov	r3, r0
 800d556:	4620      	mov	r0, r4
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1e7      	bne.n	800d52c <uxr_flash_output_streams+0xa4>
 800d55c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800d560:	f109 0901 	add.w	r9, r9, #1
 800d564:	fa5f f089 	uxtb.w	r0, r9
 800d568:	4283      	cmp	r3, r0
 800d56a:	d8d4      	bhi.n	800d516 <uxr_flash_output_streams+0x8e>
 800d56c:	b004      	add	sp, #16
 800d56e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d572:	bf00      	nop

0800d574 <read_submessage_info>:
 800d574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d578:	460d      	mov	r5, r1
 800d57a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800d57e:	4669      	mov	r1, sp
 800d580:	4607      	mov	r7, r0
 800d582:	4628      	mov	r0, r5
 800d584:	f002 f814 	bl	800f5b0 <uxr_deserialize_BaseObjectReply>
 800d588:	a902      	add	r1, sp, #8
 800d58a:	4604      	mov	r4, r0
 800d58c:	4628      	mov	r0, r5
 800d58e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800d592:	f7fe fbf3 	bl	800bd7c <ucdr_deserialize_bool>
 800d596:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d59a:	4004      	ands	r4, r0
 800d59c:	b2e4      	uxtb	r4, r4
 800d59e:	b95b      	cbnz	r3, 800d5b8 <read_submessage_info+0x44>
 800d5a0:	a987      	add	r1, sp, #540	; 0x21c
 800d5a2:	4628      	mov	r0, r5
 800d5a4:	f7fe fbea 	bl	800bd7c <ucdr_deserialize_bool>
 800d5a8:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800d5ac:	4606      	mov	r6, r0
 800d5ae:	b94b      	cbnz	r3, 800d5c4 <read_submessage_info+0x50>
 800d5b0:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800d5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b8:	a903      	add	r1, sp, #12
 800d5ba:	4628      	mov	r0, r5
 800d5bc:	f001 fea0 	bl	800f300 <uxr_deserialize_ObjectVariant>
 800d5c0:	4004      	ands	r4, r0
 800d5c2:	e7ed      	b.n	800d5a0 <read_submessage_info+0x2c>
 800d5c4:	a988      	add	r1, sp, #544	; 0x220
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	f7fe fc06 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800d5cc:	4234      	tst	r4, r6
 800d5ce:	d0ef      	beq.n	800d5b0 <read_submessage_info+0x3c>
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	d0ed      	beq.n	800d5b0 <read_submessage_info+0x3c>
 800d5d4:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800d5d8:	2b0d      	cmp	r3, #13
 800d5da:	d1e9      	bne.n	800d5b0 <read_submessage_info+0x3c>
 800d5dc:	a98a      	add	r1, sp, #552	; 0x228
 800d5de:	4628      	mov	r0, r5
 800d5e0:	f7ff f9a0 	bl	800c924 <ucdr_deserialize_int16_t>
 800d5e4:	b140      	cbz	r0, 800d5f8 <read_submessage_info+0x84>
 800d5e6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	dd07      	ble.n	800d5fe <read_submessage_info+0x8a>
 800d5ee:	f1b8 0f00 	cmp.w	r8, #0
 800d5f2:	bf14      	ite	ne
 800d5f4:	2001      	movne	r0, #1
 800d5f6:	2002      	moveq	r0, #2
 800d5f8:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800d5fc:	e7d8      	b.n	800d5b0 <read_submessage_info+0x3c>
 800d5fe:	2000      	movs	r0, #0
 800d600:	e7fa      	b.n	800d5f8 <read_submessage_info+0x84>
 800d602:	bf00      	nop

0800d604 <read_submessage_list>:
 800d604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d608:	b097      	sub	sp, #92	; 0x5c
 800d60a:	4ec1      	ldr	r6, [pc, #772]	; (800d910 <read_submessage_list+0x30c>)
 800d60c:	9209      	str	r2, [sp, #36]	; 0x24
 800d60e:	4604      	mov	r4, r0
 800d610:	460d      	mov	r5, r1
 800d612:	f04f 0801 	mov.w	r8, #1
 800d616:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800d61a:	aa0c      	add	r2, sp, #48	; 0x30
 800d61c:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800d620:	4628      	mov	r0, r5
 800d622:	f000 fff7 	bl	800e614 <uxr_read_submessage_header>
 800d626:	2800      	cmp	r0, #0
 800d628:	f000 813e 	beq.w	800d8a8 <read_submessage_list+0x2a4>
 800d62c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800d630:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800d634:	3b02      	subs	r3, #2
 800d636:	2b0d      	cmp	r3, #13
 800d638:	d8ed      	bhi.n	800d616 <read_submessage_list+0x12>
 800d63a:	a101      	add	r1, pc, #4	; (adr r1, 800d640 <read_submessage_list+0x3c>)
 800d63c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d640:	0800d89f 	.word	0x0800d89f
 800d644:	0800d617 	.word	0x0800d617
 800d648:	0800d88f 	.word	0x0800d88f
 800d64c:	0800d82d 	.word	0x0800d82d
 800d650:	0800d823 	.word	0x0800d823
 800d654:	0800d617 	.word	0x0800d617
 800d658:	0800d617 	.word	0x0800d617
 800d65c:	0800d783 	.word	0x0800d783
 800d660:	0800d713 	.word	0x0800d713
 800d664:	0800d6d3 	.word	0x0800d6d3
 800d668:	0800d617 	.word	0x0800d617
 800d66c:	0800d617 	.word	0x0800d617
 800d670:	0800d617 	.word	0x0800d617
 800d674:	0800d679 	.word	0x0800d679
 800d678:	a910      	add	r1, sp, #64	; 0x40
 800d67a:	4628      	mov	r0, r5
 800d67c:	f002 f9bc 	bl	800f9f8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800d680:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 800d684:	f1b9 0f00 	cmp.w	r9, #0
 800d688:	f000 8116 	beq.w	800d8b8 <read_submessage_list+0x2b4>
 800d68c:	f001 f808 	bl	800e6a0 <uxr_nanos>
 800d690:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800d692:	4602      	mov	r2, r0
 800d694:	460b      	mov	r3, r1
 800d696:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d698:	2100      	movs	r1, #0
 800d69a:	468c      	mov	ip, r1
 800d69c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d6a0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800d6a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d6a6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800d6a8:	468c      	mov	ip, r1
 800d6aa:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d6ae:	46e2      	mov	sl, ip
 800d6b0:	46bc      	mov	ip, r7
 800d6b2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 800d6b6:	fbc0 7106 	smlal	r7, r1, r0, r6
 800d6ba:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800d6be:	e9cd 7100 	strd	r7, r1, [sp]
 800d6c2:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800d6c6:	9106      	str	r1, [sp, #24]
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	47c8      	blx	r9
 800d6cc:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 800d6d0:	e7a1      	b.n	800d616 <read_submessage_list+0x12>
 800d6d2:	a910      	add	r1, sp, #64	; 0x40
 800d6d4:	4628      	mov	r0, r5
 800d6d6:	f002 f97d 	bl	800f9d4 <uxr_deserialize_HEARTBEAT_Payload>
 800d6da:	2100      	movs	r1, #0
 800d6dc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800d6e0:	f000 fe70 	bl	800e3c4 <uxr_stream_id_from_raw>
 800d6e4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d6e8:	900f      	str	r0, [sp, #60]	; 0x3c
 800d6ea:	4639      	mov	r1, r7
 800d6ec:	f104 0008 	add.w	r0, r4, #8
 800d6f0:	f000 ff56 	bl	800e5a0 <uxr_get_input_reliable_stream>
 800d6f4:	2800      	cmp	r0, #0
 800d6f6:	d08e      	beq.n	800d616 <read_submessage_list+0x12>
 800d6f8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800d6fc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800d700:	f007 fa52 	bl	8014ba8 <uxr_process_heartbeat>
 800d704:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800d708:	463a      	mov	r2, r7
 800d70a:	4620      	mov	r0, r4
 800d70c:	f7ff fdf4 	bl	800d2f8 <write_submessage_acknack.isra.0>
 800d710:	e781      	b.n	800d616 <read_submessage_list+0x12>
 800d712:	a910      	add	r1, sp, #64	; 0x40
 800d714:	4628      	mov	r0, r5
 800d716:	f002 f935 	bl	800f984 <uxr_deserialize_ACKNACK_Payload>
 800d71a:	2100      	movs	r1, #0
 800d71c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800d720:	f000 fe50 	bl	800e3c4 <uxr_stream_id_from_raw>
 800d724:	900d      	str	r0, [sp, #52]	; 0x34
 800d726:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d72a:	f104 0008 	add.w	r0, r4, #8
 800d72e:	f000 ff23 	bl	800e578 <uxr_get_output_reliable_stream>
 800d732:	4607      	mov	r7, r0
 800d734:	2800      	cmp	r0, #0
 800d736:	f43f af6e 	beq.w	800d616 <read_submessage_list+0x12>
 800d73a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800d73e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800d742:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800d746:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800d74a:	b289      	uxth	r1, r1
 800d74c:	f007 fd86 	bl	801525c <uxr_process_acknack>
 800d750:	4638      	mov	r0, r7
 800d752:	f007 fd43 	bl	80151dc <uxr_begin_output_nack_buffer_it>
 800d756:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800d75a:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800d75e:	e006      	b.n	800d76e <read_submessage_list+0x16a>
 800d760:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d762:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d764:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d768:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d76a:	6818      	ldr	r0, [r3, #0]
 800d76c:	47c8      	blx	r9
 800d76e:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800d772:	aa0f      	add	r2, sp, #60	; 0x3c
 800d774:	4651      	mov	r1, sl
 800d776:	4638      	mov	r0, r7
 800d778:	f007 fd32 	bl	80151e0 <uxr_next_reliable_nack_buffer_to_send>
 800d77c:	2800      	cmp	r0, #0
 800d77e:	d1ef      	bne.n	800d760 <read_submessage_list+0x15c>
 800d780:	e749      	b.n	800d616 <read_submessage_list+0x12>
 800d782:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800d786:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800d78a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800d78e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800d792:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800d796:	4651      	mov	r1, sl
 800d798:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d79c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 800d7a0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800d7a4:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800d7a8:	4628      	mov	r0, r5
 800d7aa:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800d7ae:	f001 fe49 	bl	800f444 <uxr_deserialize_BaseObjectRequest>
 800d7b2:	4650      	mov	r0, sl
 800d7b4:	a90f      	add	r1, sp, #60	; 0x3c
 800d7b6:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800d7ba:	f000 fdc7 	bl	800e34c <uxr_parse_base_object_request>
 800d7be:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800d7c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d7c4:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800d7c8:	9110      	str	r1, [sp, #64]	; 0x40
 800d7ca:	3f04      	subs	r7, #4
 800d7cc:	f009 090e 	and.w	r9, r9, #14
 800d7d0:	b2bf      	uxth	r7, r7
 800d7d2:	f1bb 0f00 	cmp.w	fp, #0
 800d7d6:	d006      	beq.n	800d7e6 <read_submessage_list+0x1e2>
 800d7d8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d7dc:	9300      	str	r3, [sp, #0]
 800d7de:	4652      	mov	r2, sl
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	47d8      	blx	fp
 800d7e6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d7e8:	b16a      	cbz	r2, 800d806 <read_submessage_list+0x202>
 800d7ea:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d7ec:	2100      	movs	r1, #0
 800d7ee:	3802      	subs	r0, #2
 800d7f0:	e002      	b.n	800d7f8 <read_submessage_list+0x1f4>
 800d7f2:	3101      	adds	r1, #1
 800d7f4:	4291      	cmp	r1, r2
 800d7f6:	d006      	beq.n	800d806 <read_submessage_list+0x202>
 800d7f8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d7fc:	4553      	cmp	r3, sl
 800d7fe:	d1f8      	bne.n	800d7f2 <read_submessage_list+0x1ee>
 800d800:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d802:	2200      	movs	r2, #0
 800d804:	545a      	strb	r2, [r3, r1]
 800d806:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800d80a:	9102      	str	r1, [sp, #8]
 800d80c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d80e:	9101      	str	r1, [sp, #4]
 800d810:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d812:	9100      	str	r1, [sp, #0]
 800d814:	464b      	mov	r3, r9
 800d816:	463a      	mov	r2, r7
 800d818:	4629      	mov	r1, r5
 800d81a:	4620      	mov	r0, r4
 800d81c:	f007 fddc 	bl	80153d8 <read_submessage_format>
 800d820:	e6f9      	b.n	800d616 <read_submessage_list+0x12>
 800d822:	4629      	mov	r1, r5
 800d824:	4620      	mov	r0, r4
 800d826:	f7ff fea5 	bl	800d574 <read_submessage_info>
 800d82a:	e6f4      	b.n	800d616 <read_submessage_list+0x12>
 800d82c:	2a00      	cmp	r2, #0
 800d82e:	d03e      	beq.n	800d8ae <read_submessage_list+0x2aa>
 800d830:	a910      	add	r1, sp, #64	; 0x40
 800d832:	4628      	mov	r0, r5
 800d834:	f002 f802 	bl	800f83c <uxr_deserialize_STATUS_Payload>
 800d838:	a90e      	add	r1, sp, #56	; 0x38
 800d83a:	aa0d      	add	r2, sp, #52	; 0x34
 800d83c:	a810      	add	r0, sp, #64	; 0x40
 800d83e:	f000 fd85 	bl	800e34c <uxr_parse_base_object_request>
 800d842:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800d846:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d848:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800d84c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 800d850:	910f      	str	r1, [sp, #60]	; 0x3c
 800d852:	f1ba 0f00 	cmp.w	sl, #0
 800d856:	d006      	beq.n	800d866 <read_submessage_list+0x262>
 800d858:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d85c:	9300      	str	r3, [sp, #0]
 800d85e:	463a      	mov	r2, r7
 800d860:	464b      	mov	r3, r9
 800d862:	4620      	mov	r0, r4
 800d864:	47d0      	blx	sl
 800d866:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d868:	2a00      	cmp	r2, #0
 800d86a:	f43f aed4 	beq.w	800d616 <read_submessage_list+0x12>
 800d86e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d870:	2100      	movs	r1, #0
 800d872:	3802      	subs	r0, #2
 800d874:	e003      	b.n	800d87e <read_submessage_list+0x27a>
 800d876:	3101      	adds	r1, #1
 800d878:	4291      	cmp	r1, r2
 800d87a:	f43f aecc 	beq.w	800d616 <read_submessage_list+0x12>
 800d87e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d882:	42bb      	cmp	r3, r7
 800d884:	d1f7      	bne.n	800d876 <read_submessage_list+0x272>
 800d886:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d888:	f803 9001 	strb.w	r9, [r3, r1]
 800d88c:	e6c3      	b.n	800d616 <read_submessage_list+0x12>
 800d88e:	2a00      	cmp	r2, #0
 800d890:	f47f aec1 	bne.w	800d616 <read_submessage_list+0x12>
 800d894:	4629      	mov	r1, r5
 800d896:	4620      	mov	r0, r4
 800d898:	f000 fc9e 	bl	800e1d8 <uxr_read_create_session_status>
 800d89c:	e6bb      	b.n	800d616 <read_submessage_list+0x12>
 800d89e:	4629      	mov	r1, r5
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	f7ff fcf3 	bl	800d28c <read_submessage_get_info>
 800d8a6:	e6b6      	b.n	800d616 <read_submessage_list+0x12>
 800d8a8:	b017      	add	sp, #92	; 0x5c
 800d8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ae:	4629      	mov	r1, r5
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	f000 fc9d 	bl	800e1f0 <uxr_read_delete_session_status>
 800d8b6:	e6ae      	b.n	800d616 <read_submessage_list+0x12>
 800d8b8:	f000 fef2 	bl	800e6a0 <uxr_nanos>
 800d8bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d8be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d8c0:	464f      	mov	r7, r9
 800d8c2:	fbc3 2706 	smlal	r2, r7, r3, r6
 800d8c6:	1812      	adds	r2, r2, r0
 800d8c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d8ca:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800d8cc:	eb47 0101 	adc.w	r1, r7, r1
 800d8d0:	464f      	mov	r7, r9
 800d8d2:	fbc3 0706 	smlal	r0, r7, r3, r6
 800d8d6:	463b      	mov	r3, r7
 800d8d8:	4684      	mov	ip, r0
 800d8da:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 800d8de:	fbc7 0906 	smlal	r0, r9, r7, r6
 800d8e2:	eb1c 0c00 	adds.w	ip, ip, r0
 800d8e6:	464f      	mov	r7, r9
 800d8e8:	eb43 0307 	adc.w	r3, r3, r7
 800d8ec:	ebb2 0c0c 	subs.w	ip, r2, ip
 800d8f0:	eb61 0303 	sbc.w	r3, r1, r3
 800d8f4:	0fda      	lsrs	r2, r3, #31
 800d8f6:	eb12 020c 	adds.w	r2, r2, ip
 800d8fa:	f143 0300 	adc.w	r3, r3, #0
 800d8fe:	0852      	lsrs	r2, r2, #1
 800d900:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800d904:	105b      	asrs	r3, r3, #1
 800d906:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 800d90a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800d90e:	e6dd      	b.n	800d6cc <read_submessage_list+0xc8>
 800d910:	3b9aca00 	.word	0x3b9aca00

0800d914 <listen_message_reliably>:
 800d914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d918:	1e0b      	subs	r3, r1, #0
 800d91a:	b09d      	sub	sp, #116	; 0x74
 800d91c:	bfb8      	it	lt
 800d91e:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800d922:	4680      	mov	r8, r0
 800d924:	9305      	str	r3, [sp, #20]
 800d926:	f000 fea1 	bl	800e66c <uxr_millis>
 800d92a:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800d92e:	4681      	mov	r9, r0
 800d930:	2a00      	cmp	r2, #0
 800d932:	f000 80a1 	beq.w	800da78 <listen_message_reliably+0x164>
 800d936:	2600      	movs	r6, #0
 800d938:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d93c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800d940:	9303      	str	r3, [sp, #12]
 800d942:	4630      	mov	r0, r6
 800d944:	460f      	mov	r7, r1
 800d946:	e00f      	b.n	800d968 <listen_message_reliably+0x54>
 800d948:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d94c:	9903      	ldr	r1, [sp, #12]
 800d94e:	455a      	cmp	r2, fp
 800d950:	f106 0601 	add.w	r6, r6, #1
 800d954:	eb73 0101 	sbcs.w	r1, r3, r1
 800d958:	b2f0      	uxtb	r0, r6
 800d95a:	da01      	bge.n	800d960 <listen_message_reliably+0x4c>
 800d95c:	4693      	mov	fp, r2
 800d95e:	9303      	str	r3, [sp, #12]
 800d960:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800d964:	4283      	cmp	r3, r0
 800d966:	d960      	bls.n	800da2a <listen_message_reliably+0x116>
 800d968:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800d96c:	2102      	movs	r1, #2
 800d96e:	2201      	movs	r2, #1
 800d970:	f000 fcfe 	bl	800e370 <uxr_stream_id>
 800d974:	00e4      	lsls	r4, r4, #3
 800d976:	f104 0520 	add.w	r5, r4, #32
 800d97a:	4445      	add	r5, r8
 800d97c:	4601      	mov	r1, r0
 800d97e:	463b      	mov	r3, r7
 800d980:	464a      	mov	r2, r9
 800d982:	4628      	mov	r0, r5
 800d984:	9109      	str	r1, [sp, #36]	; 0x24
 800d986:	f007 fbff 	bl	8015188 <uxr_update_output_stream_heartbeat_timestamp>
 800d98a:	eb08 0304 	add.w	r3, r8, r4
 800d98e:	2800      	cmp	r0, #0
 800d990:	d0da      	beq.n	800d948 <listen_message_reliably+0x34>
 800d992:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d996:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800d99a:	9304      	str	r3, [sp, #16]
 800d99c:	4640      	mov	r0, r8
 800d99e:	f000 fcaf 	bl	800e300 <uxr_session_header_offset>
 800d9a2:	3501      	adds	r5, #1
 800d9a4:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800d9a8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d9ac:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	2211      	movs	r2, #17
 800d9b4:	9000      	str	r0, [sp, #0]
 800d9b6:	a90c      	add	r1, sp, #48	; 0x30
 800d9b8:	4650      	mov	r0, sl
 800d9ba:	f7ff f991 	bl	800cce0 <ucdr_init_buffer_origin_offset>
 800d9be:	2300      	movs	r3, #0
 800d9c0:	2205      	movs	r2, #5
 800d9c2:	210b      	movs	r1, #11
 800d9c4:	4650      	mov	r0, sl
 800d9c6:	f000 fe0b 	bl	800e5e0 <uxr_buffer_submessage_header>
 800d9ca:	8968      	ldrh	r0, [r5, #10]
 800d9cc:	2101      	movs	r1, #1
 800d9ce:	f007 fdcd 	bl	801556c <uxr_seq_num_add>
 800d9d2:	892b      	ldrh	r3, [r5, #8]
 800d9d4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800d9d8:	4602      	mov	r2, r0
 800d9da:	9b04      	ldr	r3, [sp, #16]
 800d9dc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800d9e0:	a90a      	add	r1, sp, #40	; 0x28
 800d9e2:	4650      	mov	r0, sl
 800d9e4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800d9e8:	f001 ffe0 	bl	800f9ac <uxr_serialize_HEARTBEAT_Payload>
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	4611      	mov	r1, r2
 800d9f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d9f2:	4640      	mov	r0, r8
 800d9f4:	f000 fc2e 	bl	800e254 <uxr_stamp_session_header>
 800d9f8:	4650      	mov	r0, sl
 800d9fa:	f7ff f9af 	bl	800cd5c <ucdr_buffer_length>
 800d9fe:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800da02:	4602      	mov	r2, r0
 800da04:	a90c      	add	r1, sp, #48	; 0x30
 800da06:	e9d3 0500 	ldrd	r0, r5, [r3]
 800da0a:	4444      	add	r4, r8
 800da0c:	47a8      	blx	r5
 800da0e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800da12:	9903      	ldr	r1, [sp, #12]
 800da14:	455a      	cmp	r2, fp
 800da16:	f106 0601 	add.w	r6, r6, #1
 800da1a:	eb73 0101 	sbcs.w	r1, r3, r1
 800da1e:	b2f0      	uxtb	r0, r6
 800da20:	db9c      	blt.n	800d95c <listen_message_reliably+0x48>
 800da22:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800da26:	4283      	cmp	r3, r0
 800da28:	d89e      	bhi.n	800d968 <listen_message_reliably+0x54>
 800da2a:	9a03      	ldr	r2, [sp, #12]
 800da2c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800da30:	429a      	cmp	r2, r3
 800da32:	bf08      	it	eq
 800da34:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800da38:	d01e      	beq.n	800da78 <listen_message_reliably+0x164>
 800da3a:	ebab 0309 	sub.w	r3, fp, r9
 800da3e:	9905      	ldr	r1, [sp, #20]
 800da40:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 800da44:	2b00      	cmp	r3, #0
 800da46:	bf08      	it	eq
 800da48:	2301      	moveq	r3, #1
 800da4a:	4299      	cmp	r1, r3
 800da4c:	bfa8      	it	ge
 800da4e:	4619      	movge	r1, r3
 800da50:	6894      	ldr	r4, [r2, #8]
 800da52:	6810      	ldr	r0, [r2, #0]
 800da54:	4689      	mov	r9, r1
 800da56:	460b      	mov	r3, r1
 800da58:	aa08      	add	r2, sp, #32
 800da5a:	a907      	add	r1, sp, #28
 800da5c:	47a0      	blx	r4
 800da5e:	b968      	cbnz	r0, 800da7c <listen_message_reliably+0x168>
 800da60:	9b05      	ldr	r3, [sp, #20]
 800da62:	eba3 0309 	sub.w	r3, r3, r9
 800da66:	2b00      	cmp	r3, #0
 800da68:	9305      	str	r3, [sp, #20]
 800da6a:	f73f af5c 	bgt.w	800d926 <listen_message_reliably+0x12>
 800da6e:	4604      	mov	r4, r0
 800da70:	4620      	mov	r0, r4
 800da72:	b01d      	add	sp, #116	; 0x74
 800da74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da78:	9b05      	ldr	r3, [sp, #20]
 800da7a:	e7e0      	b.n	800da3e <listen_message_reliably+0x12a>
 800da7c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800da80:	4604      	mov	r4, r0
 800da82:	a80c      	add	r0, sp, #48	; 0x30
 800da84:	f7ff f93e 	bl	800cd04 <ucdr_init_buffer>
 800da88:	2500      	movs	r5, #0
 800da8a:	f10d 031a 	add.w	r3, sp, #26
 800da8e:	aa06      	add	r2, sp, #24
 800da90:	a90c      	add	r1, sp, #48	; 0x30
 800da92:	4640      	mov	r0, r8
 800da94:	f88d 5018 	strb.w	r5, [sp, #24]
 800da98:	f000 fbf0 	bl	800e27c <uxr_read_session_header>
 800da9c:	b918      	cbnz	r0, 800daa6 <listen_message_reliably+0x192>
 800da9e:	4620      	mov	r0, r4
 800daa0:	b01d      	add	sp, #116	; 0x74
 800daa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daa6:	4629      	mov	r1, r5
 800daa8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800daac:	f000 fc8a 	bl	800e3c4 <uxr_stream_id_from_raw>
 800dab0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800dab4:	2d01      	cmp	r5, #1
 800dab6:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800daba:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800dabe:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800dac2:	d04b      	beq.n	800db5c <listen_message_reliably+0x248>
 800dac4:	2d02      	cmp	r5, #2
 800dac6:	d00f      	beq.n	800dae8 <listen_message_reliably+0x1d4>
 800dac8:	2d00      	cmp	r5, #0
 800daca:	d1e8      	bne.n	800da9e <listen_message_reliably+0x18a>
 800dacc:	4629      	mov	r1, r5
 800dace:	4628      	mov	r0, r5
 800dad0:	f000 fc78 	bl	800e3c4 <uxr_stream_id_from_raw>
 800dad4:	a90c      	add	r1, sp, #48	; 0x30
 800dad6:	4602      	mov	r2, r0
 800dad8:	4640      	mov	r0, r8
 800dada:	920a      	str	r2, [sp, #40]	; 0x28
 800dadc:	f7ff fd92 	bl	800d604 <read_submessage_list>
 800dae0:	4620      	mov	r0, r4
 800dae2:	b01d      	add	sp, #116	; 0x74
 800dae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae8:	4631      	mov	r1, r6
 800daea:	f108 0008 	add.w	r0, r8, #8
 800daee:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800daf2:	f000 fd55 	bl	800e5a0 <uxr_get_input_reliable_stream>
 800daf6:	4607      	mov	r7, r0
 800daf8:	b338      	cbz	r0, 800db4a <listen_message_reliably+0x236>
 800dafa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dafc:	9203      	str	r2, [sp, #12]
 800dafe:	a80c      	add	r0, sp, #48	; 0x30
 800db00:	f7ff f930 	bl	800cd64 <ucdr_buffer_remaining>
 800db04:	4603      	mov	r3, r0
 800db06:	f10d 0019 	add.w	r0, sp, #25
 800db0a:	9000      	str	r0, [sp, #0]
 800db0c:	9a03      	ldr	r2, [sp, #12]
 800db0e:	4651      	mov	r1, sl
 800db10:	4638      	mov	r0, r7
 800db12:	f006 ff4f 	bl	80149b4 <uxr_receive_reliable_message>
 800db16:	b1c0      	cbz	r0, 800db4a <listen_message_reliably+0x236>
 800db18:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800db1c:	b393      	cbz	r3, 800db84 <listen_message_reliably+0x270>
 800db1e:	ad14      	add	r5, sp, #80	; 0x50
 800db20:	f04f 0a02 	mov.w	sl, #2
 800db24:	e00a      	b.n	800db3c <listen_message_reliably+0x228>
 800db26:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800db2a:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800db2e:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800db32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db34:	4629      	mov	r1, r5
 800db36:	4640      	mov	r0, r8
 800db38:	f7ff fd64 	bl	800d604 <read_submessage_list>
 800db3c:	2204      	movs	r2, #4
 800db3e:	4629      	mov	r1, r5
 800db40:	4638      	mov	r0, r7
 800db42:	f006 ffb7 	bl	8014ab4 <uxr_next_input_reliable_buffer_available>
 800db46:	2800      	cmp	r0, #0
 800db48:	d1ed      	bne.n	800db26 <listen_message_reliably+0x212>
 800db4a:	4640      	mov	r0, r8
 800db4c:	4632      	mov	r2, r6
 800db4e:	4649      	mov	r1, r9
 800db50:	f7ff fbd2 	bl	800d2f8 <write_submessage_acknack.isra.0>
 800db54:	4620      	mov	r0, r4
 800db56:	b01d      	add	sp, #116	; 0x74
 800db58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5c:	4631      	mov	r1, r6
 800db5e:	f108 0008 	add.w	r0, r8, #8
 800db62:	f000 fd13 	bl	800e58c <uxr_get_input_best_effort_stream>
 800db66:	2800      	cmp	r0, #0
 800db68:	d099      	beq.n	800da9e <listen_message_reliably+0x18a>
 800db6a:	4651      	mov	r1, sl
 800db6c:	f006 fe8e 	bl	801488c <uxr_receive_best_effort_message>
 800db70:	2800      	cmp	r0, #0
 800db72:	d094      	beq.n	800da9e <listen_message_reliably+0x18a>
 800db74:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800db78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db7a:	a90c      	add	r1, sp, #48	; 0x30
 800db7c:	4640      	mov	r0, r8
 800db7e:	f7ff fd41 	bl	800d604 <read_submessage_list>
 800db82:	e78c      	b.n	800da9e <listen_message_reliably+0x18a>
 800db84:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800db88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db8a:	a90c      	add	r1, sp, #48	; 0x30
 800db8c:	4640      	mov	r0, r8
 800db8e:	f7ff fd39 	bl	800d604 <read_submessage_list>
 800db92:	e7c4      	b.n	800db1e <listen_message_reliably+0x20a>

0800db94 <uxr_run_session_timeout>:
 800db94:	b570      	push	{r4, r5, r6, lr}
 800db96:	4604      	mov	r4, r0
 800db98:	460d      	mov	r5, r1
 800db9a:	f000 fd67 	bl	800e66c <uxr_millis>
 800db9e:	4606      	mov	r6, r0
 800dba0:	4620      	mov	r0, r4
 800dba2:	f7ff fc71 	bl	800d488 <uxr_flash_output_streams>
 800dba6:	4629      	mov	r1, r5
 800dba8:	4620      	mov	r0, r4
 800dbaa:	f7ff feb3 	bl	800d914 <listen_message_reliably>
 800dbae:	f000 fd5d 	bl	800e66c <uxr_millis>
 800dbb2:	1b83      	subs	r3, r0, r6
 800dbb4:	1ae9      	subs	r1, r5, r3
 800dbb6:	2900      	cmp	r1, #0
 800dbb8:	dcf6      	bgt.n	800dba8 <uxr_run_session_timeout+0x14>
 800dbba:	f104 0008 	add.w	r0, r4, #8
 800dbbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dbc2:	f000 bcf7 	b.w	800e5b4 <uxr_output_streams_confirmed>
 800dbc6:	bf00      	nop

0800dbc8 <uxr_run_session_until_data>:
 800dbc8:	b570      	push	{r4, r5, r6, lr}
 800dbca:	4604      	mov	r4, r0
 800dbcc:	460d      	mov	r5, r1
 800dbce:	f000 fd4d 	bl	800e66c <uxr_millis>
 800dbd2:	4606      	mov	r6, r0
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	f7ff fc57 	bl	800d488 <uxr_flash_output_streams>
 800dbda:	2300      	movs	r3, #0
 800dbdc:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800dbe0:	4629      	mov	r1, r5
 800dbe2:	e005      	b.n	800dbf0 <uxr_run_session_until_data+0x28>
 800dbe4:	f000 fd42 	bl	800e66c <uxr_millis>
 800dbe8:	1b83      	subs	r3, r0, r6
 800dbea:	1ae9      	subs	r1, r5, r3
 800dbec:	2900      	cmp	r1, #0
 800dbee:	dd07      	ble.n	800dc00 <uxr_run_session_until_data+0x38>
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	f7ff fe8f 	bl	800d914 <listen_message_reliably>
 800dbf6:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	d0f2      	beq.n	800dbe4 <uxr_run_session_until_data+0x1c>
 800dbfe:	bd70      	pop	{r4, r5, r6, pc}
 800dc00:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800dc04:	bd70      	pop	{r4, r5, r6, pc}
 800dc06:	bf00      	nop

0800dc08 <uxr_run_session_until_confirm_delivery>:
 800dc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc0c:	4606      	mov	r6, r0
 800dc0e:	460d      	mov	r5, r1
 800dc10:	f000 fd2c 	bl	800e66c <uxr_millis>
 800dc14:	4607      	mov	r7, r0
 800dc16:	4630      	mov	r0, r6
 800dc18:	f7ff fc36 	bl	800d488 <uxr_flash_output_streams>
 800dc1c:	2d00      	cmp	r5, #0
 800dc1e:	f106 0808 	add.w	r8, r6, #8
 800dc22:	bfa8      	it	ge
 800dc24:	462c      	movge	r4, r5
 800dc26:	da07      	bge.n	800dc38 <uxr_run_session_until_confirm_delivery+0x30>
 800dc28:	e00e      	b.n	800dc48 <uxr_run_session_until_confirm_delivery+0x40>
 800dc2a:	f7ff fe73 	bl	800d914 <listen_message_reliably>
 800dc2e:	f000 fd1d 	bl	800e66c <uxr_millis>
 800dc32:	1bc3      	subs	r3, r0, r7
 800dc34:	1aec      	subs	r4, r5, r3
 800dc36:	d407      	bmi.n	800dc48 <uxr_run_session_until_confirm_delivery+0x40>
 800dc38:	4640      	mov	r0, r8
 800dc3a:	f000 fcbb 	bl	800e5b4 <uxr_output_streams_confirmed>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	4621      	mov	r1, r4
 800dc42:	4630      	mov	r0, r6
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d0f0      	beq.n	800dc2a <uxr_run_session_until_confirm_delivery+0x22>
 800dc48:	4640      	mov	r0, r8
 800dc4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc4e:	f000 bcb1 	b.w	800e5b4 <uxr_output_streams_confirmed>
 800dc52:	bf00      	nop

0800dc54 <uxr_run_session_until_all_status>:
 800dc54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc58:	9c08      	ldr	r4, [sp, #32]
 800dc5a:	4606      	mov	r6, r0
 800dc5c:	460f      	mov	r7, r1
 800dc5e:	4691      	mov	r9, r2
 800dc60:	461d      	mov	r5, r3
 800dc62:	f7ff fc11 	bl	800d488 <uxr_flash_output_streams>
 800dc66:	b124      	cbz	r4, 800dc72 <uxr_run_session_until_all_status+0x1e>
 800dc68:	4622      	mov	r2, r4
 800dc6a:	21ff      	movs	r1, #255	; 0xff
 800dc6c:	4628      	mov	r0, r5
 800dc6e:	f009 f973 	bl	8016f58 <memset>
 800dc72:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 800dc76:	67f4      	str	r4, [r6, #124]	; 0x7c
 800dc78:	f000 fcf8 	bl	800e66c <uxr_millis>
 800dc7c:	3d01      	subs	r5, #1
 800dc7e:	f1a9 0902 	sub.w	r9, r9, #2
 800dc82:	4680      	mov	r8, r0
 800dc84:	4639      	mov	r1, r7
 800dc86:	4630      	mov	r0, r6
 800dc88:	f7ff fe44 	bl	800d914 <listen_message_reliably>
 800dc8c:	f000 fcee 	bl	800e66c <uxr_millis>
 800dc90:	eba0 0008 	sub.w	r0, r0, r8
 800dc94:	1a39      	subs	r1, r7, r0
 800dc96:	b344      	cbz	r4, 800dcea <uxr_run_session_until_all_status+0x96>
 800dc98:	4628      	mov	r0, r5
 800dc9a:	46ac      	mov	ip, r5
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	e002      	b.n	800dca6 <uxr_run_session_until_all_status+0x52>
 800dca0:	42a3      	cmp	r3, r4
 800dca2:	d20d      	bcs.n	800dcc0 <uxr_run_session_until_all_status+0x6c>
 800dca4:	3301      	adds	r3, #1
 800dca6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800dcaa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800dcae:	d1f7      	bne.n	800dca0 <uxr_run_session_until_all_status+0x4c>
 800dcb0:	42a3      	cmp	r3, r4
 800dcb2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800dcb6:	d213      	bcs.n	800dce0 <uxr_run_session_until_all_status+0x8c>
 800dcb8:	2a00      	cmp	r2, #0
 800dcba:	d0f3      	beq.n	800dca4 <uxr_run_session_until_all_status+0x50>
 800dcbc:	2900      	cmp	r1, #0
 800dcbe:	dce2      	bgt.n	800dc86 <uxr_run_session_until_all_status+0x32>
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	67f3      	str	r3, [r6, #124]	; 0x7c
 800dcc4:	442c      	add	r4, r5
 800dcc6:	e001      	b.n	800dccc <uxr_run_session_until_all_status+0x78>
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d812      	bhi.n	800dcf2 <uxr_run_session_until_all_status+0x9e>
 800dccc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800dcd0:	4284      	cmp	r4, r0
 800dcd2:	d1f9      	bne.n	800dcc8 <uxr_run_session_until_all_status+0x74>
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	bf8c      	ite	hi
 800dcd8:	2000      	movhi	r0, #0
 800dcda:	2001      	movls	r0, #1
 800dcdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dce0:	2900      	cmp	r1, #0
 800dce2:	dded      	ble.n	800dcc0 <uxr_run_session_until_all_status+0x6c>
 800dce4:	2a00      	cmp	r2, #0
 800dce6:	d1ce      	bne.n	800dc86 <uxr_run_session_until_all_status+0x32>
 800dce8:	e7ea      	b.n	800dcc0 <uxr_run_session_until_all_status+0x6c>
 800dcea:	67f4      	str	r4, [r6, #124]	; 0x7c
 800dcec:	2001      	movs	r0, #1
 800dcee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcf2:	2000      	movs	r0, #0
 800dcf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800dcf8 <wait_session_status>:
 800dcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcfc:	4604      	mov	r4, r0
 800dcfe:	b09d      	sub	sp, #116	; 0x74
 800dd00:	20ff      	movs	r0, #255	; 0xff
 800dd02:	7160      	strb	r0, [r4, #5]
 800dd04:	9303      	str	r3, [sp, #12]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	f000 80b6 	beq.w	800de78 <wait_session_status+0x180>
 800dd0c:	468a      	mov	sl, r1
 800dd0e:	4691      	mov	r9, r2
 800dd10:	f04f 0b00 	mov.w	fp, #0
 800dd14:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dd16:	464a      	mov	r2, r9
 800dd18:	e9d3 0500 	ldrd	r0, r5, [r3]
 800dd1c:	4651      	mov	r1, sl
 800dd1e:	47a8      	blx	r5
 800dd20:	f000 fca4 	bl	800e66c <uxr_millis>
 800dd24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dd28:	4605      	mov	r5, r0
 800dd2a:	e009      	b.n	800dd40 <wait_session_status+0x48>
 800dd2c:	f000 fc9e 	bl	800e66c <uxr_millis>
 800dd30:	1b40      	subs	r0, r0, r5
 800dd32:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	dd40      	ble.n	800ddbc <wait_session_status+0xc4>
 800dd3a:	7960      	ldrb	r0, [r4, #5]
 800dd3c:	28ff      	cmp	r0, #255	; 0xff
 800dd3e:	d145      	bne.n	800ddcc <wait_session_status+0xd4>
 800dd40:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800dd42:	a908      	add	r1, sp, #32
 800dd44:	6896      	ldr	r6, [r2, #8]
 800dd46:	6810      	ldr	r0, [r2, #0]
 800dd48:	aa09      	add	r2, sp, #36	; 0x24
 800dd4a:	47b0      	blx	r6
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	d0ed      	beq.n	800dd2c <wait_session_status+0x34>
 800dd50:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800dd54:	a80c      	add	r0, sp, #48	; 0x30
 800dd56:	f7fe ffd5 	bl	800cd04 <ucdr_init_buffer>
 800dd5a:	2600      	movs	r6, #0
 800dd5c:	f10d 031e 	add.w	r3, sp, #30
 800dd60:	aa07      	add	r2, sp, #28
 800dd62:	a90c      	add	r1, sp, #48	; 0x30
 800dd64:	4620      	mov	r0, r4
 800dd66:	f88d 601c 	strb.w	r6, [sp, #28]
 800dd6a:	f000 fa87 	bl	800e27c <uxr_read_session_header>
 800dd6e:	2800      	cmp	r0, #0
 800dd70:	d0dc      	beq.n	800dd2c <wait_session_status+0x34>
 800dd72:	4631      	mov	r1, r6
 800dd74:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800dd78:	f000 fb24 	bl	800e3c4 <uxr_stream_id_from_raw>
 800dd7c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800dd80:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800dd84:	9302      	str	r3, [sp, #8]
 800dd86:	2f01      	cmp	r7, #1
 800dd88:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800dd8c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800dd90:	d05c      	beq.n	800de4c <wait_session_status+0x154>
 800dd92:	2f02      	cmp	r7, #2
 800dd94:	d020      	beq.n	800ddd8 <wait_session_status+0xe0>
 800dd96:	2f00      	cmp	r7, #0
 800dd98:	d1c8      	bne.n	800dd2c <wait_session_status+0x34>
 800dd9a:	4639      	mov	r1, r7
 800dd9c:	4638      	mov	r0, r7
 800dd9e:	f000 fb11 	bl	800e3c4 <uxr_stream_id_from_raw>
 800dda2:	a90c      	add	r1, sp, #48	; 0x30
 800dda4:	4602      	mov	r2, r0
 800dda6:	900b      	str	r0, [sp, #44]	; 0x2c
 800dda8:	4620      	mov	r0, r4
 800ddaa:	f7ff fc2b 	bl	800d604 <read_submessage_list>
 800ddae:	f000 fc5d 	bl	800e66c <uxr_millis>
 800ddb2:	1b40      	subs	r0, r0, r5
 800ddb4:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	dcbe      	bgt.n	800dd3a <wait_session_status+0x42>
 800ddbc:	9b03      	ldr	r3, [sp, #12]
 800ddbe:	7960      	ldrb	r0, [r4, #5]
 800ddc0:	f10b 0b01 	add.w	fp, fp, #1
 800ddc4:	455b      	cmp	r3, fp
 800ddc6:	d001      	beq.n	800ddcc <wait_session_status+0xd4>
 800ddc8:	28ff      	cmp	r0, #255	; 0xff
 800ddca:	d0a3      	beq.n	800dd14 <wait_session_status+0x1c>
 800ddcc:	38ff      	subs	r0, #255	; 0xff
 800ddce:	bf18      	it	ne
 800ddd0:	2001      	movne	r0, #1
 800ddd2:	b01d      	add	sp, #116	; 0x74
 800ddd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800dddc:	9304      	str	r3, [sp, #16]
 800ddde:	4631      	mov	r1, r6
 800dde0:	f104 0008 	add.w	r0, r4, #8
 800dde4:	f000 fbdc 	bl	800e5a0 <uxr_get_input_reliable_stream>
 800dde8:	4680      	mov	r8, r0
 800ddea:	b348      	cbz	r0, 800de40 <wait_session_status+0x148>
 800ddec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ddee:	9205      	str	r2, [sp, #20]
 800ddf0:	a80c      	add	r0, sp, #48	; 0x30
 800ddf2:	f7fe ffb7 	bl	800cd64 <ucdr_buffer_remaining>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	f10d 001d 	add.w	r0, sp, #29
 800ddfc:	9000      	str	r0, [sp, #0]
 800ddfe:	9a05      	ldr	r2, [sp, #20]
 800de00:	9902      	ldr	r1, [sp, #8]
 800de02:	4640      	mov	r0, r8
 800de04:	f006 fdd6 	bl	80149b4 <uxr_receive_reliable_message>
 800de08:	b1d0      	cbz	r0, 800de40 <wait_session_status+0x148>
 800de0a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d03a      	beq.n	800de88 <wait_session_status+0x190>
 800de12:	9f04      	ldr	r7, [sp, #16]
 800de14:	e00a      	b.n	800de2c <wait_session_status+0x134>
 800de16:	f04f 0302 	mov.w	r3, #2
 800de1a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800de1e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800de22:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800de26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de28:	f7ff fbec 	bl	800d604 <read_submessage_list>
 800de2c:	a914      	add	r1, sp, #80	; 0x50
 800de2e:	2204      	movs	r2, #4
 800de30:	4640      	mov	r0, r8
 800de32:	f006 fe3f 	bl	8014ab4 <uxr_next_input_reliable_buffer_available>
 800de36:	4603      	mov	r3, r0
 800de38:	a914      	add	r1, sp, #80	; 0x50
 800de3a:	4620      	mov	r0, r4
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d1ea      	bne.n	800de16 <wait_session_status+0x11e>
 800de40:	9904      	ldr	r1, [sp, #16]
 800de42:	4632      	mov	r2, r6
 800de44:	4620      	mov	r0, r4
 800de46:	f7ff fa57 	bl	800d2f8 <write_submessage_acknack.isra.0>
 800de4a:	e76f      	b.n	800dd2c <wait_session_status+0x34>
 800de4c:	4631      	mov	r1, r6
 800de4e:	f104 0008 	add.w	r0, r4, #8
 800de52:	f000 fb9b 	bl	800e58c <uxr_get_input_best_effort_stream>
 800de56:	2800      	cmp	r0, #0
 800de58:	f43f af68 	beq.w	800dd2c <wait_session_status+0x34>
 800de5c:	9902      	ldr	r1, [sp, #8]
 800de5e:	f006 fd15 	bl	801488c <uxr_receive_best_effort_message>
 800de62:	2800      	cmp	r0, #0
 800de64:	f43f af62 	beq.w	800dd2c <wait_session_status+0x34>
 800de68:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800de6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de6e:	a90c      	add	r1, sp, #48	; 0x30
 800de70:	4620      	mov	r0, r4
 800de72:	f7ff fbc7 	bl	800d604 <read_submessage_list>
 800de76:	e759      	b.n	800dd2c <wait_session_status+0x34>
 800de78:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800de7a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800de7e:	47a0      	blx	r4
 800de80:	2001      	movs	r0, #1
 800de82:	b01d      	add	sp, #116	; 0x74
 800de84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de88:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800de8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de8e:	a90c      	add	r1, sp, #48	; 0x30
 800de90:	4620      	mov	r0, r4
 800de92:	f7ff fbb7 	bl	800d604 <read_submessage_list>
 800de96:	e7bc      	b.n	800de12 <wait_session_status+0x11a>

0800de98 <uxr_delete_session_retries>:
 800de98:	b530      	push	{r4, r5, lr}
 800de9a:	b08f      	sub	sp, #60	; 0x3c
 800de9c:	4604      	mov	r4, r0
 800de9e:	460d      	mov	r5, r1
 800dea0:	f000 fa2e 	bl	800e300 <uxr_session_header_offset>
 800dea4:	2300      	movs	r3, #0
 800dea6:	2210      	movs	r2, #16
 800dea8:	9000      	str	r0, [sp, #0]
 800deaa:	a902      	add	r1, sp, #8
 800deac:	a806      	add	r0, sp, #24
 800deae:	f7fe ff17 	bl	800cce0 <ucdr_init_buffer_origin_offset>
 800deb2:	a906      	add	r1, sp, #24
 800deb4:	4620      	mov	r0, r4
 800deb6:	f000 f973 	bl	800e1a0 <uxr_buffer_delete_session>
 800deba:	2200      	movs	r2, #0
 800debc:	4611      	mov	r1, r2
 800debe:	9b06      	ldr	r3, [sp, #24]
 800dec0:	4620      	mov	r0, r4
 800dec2:	f000 f9c7 	bl	800e254 <uxr_stamp_session_header>
 800dec6:	a806      	add	r0, sp, #24
 800dec8:	f7fe ff48 	bl	800cd5c <ucdr_buffer_length>
 800decc:	462b      	mov	r3, r5
 800dece:	4602      	mov	r2, r0
 800ded0:	a902      	add	r1, sp, #8
 800ded2:	4620      	mov	r0, r4
 800ded4:	f7ff ff10 	bl	800dcf8 <wait_session_status>
 800ded8:	b118      	cbz	r0, 800dee2 <uxr_delete_session_retries+0x4a>
 800deda:	7960      	ldrb	r0, [r4, #5]
 800dedc:	fab0 f080 	clz	r0, r0
 800dee0:	0940      	lsrs	r0, r0, #5
 800dee2:	b00f      	add	sp, #60	; 0x3c
 800dee4:	bd30      	pop	{r4, r5, pc}
 800dee6:	bf00      	nop

0800dee8 <uxr_create_session>:
 800dee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deec:	f100 0b08 	add.w	fp, r0, #8
 800def0:	b0ab      	sub	sp, #172	; 0xac
 800def2:	4604      	mov	r4, r0
 800def4:	4658      	mov	r0, fp
 800def6:	f000 fa99 	bl	800e42c <uxr_reset_stream_storage>
 800defa:	4620      	mov	r0, r4
 800defc:	f000 fa00 	bl	800e300 <uxr_session_header_offset>
 800df00:	2300      	movs	r3, #0
 800df02:	9000      	str	r0, [sp, #0]
 800df04:	221c      	movs	r2, #28
 800df06:	a90b      	add	r1, sp, #44	; 0x2c
 800df08:	a812      	add	r0, sp, #72	; 0x48
 800df0a:	f7fe fee9 	bl	800cce0 <ucdr_init_buffer_origin_offset>
 800df0e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800df10:	8a1a      	ldrh	r2, [r3, #16]
 800df12:	3a04      	subs	r2, #4
 800df14:	b292      	uxth	r2, r2
 800df16:	a912      	add	r1, sp, #72	; 0x48
 800df18:	4620      	mov	r0, r4
 800df1a:	f000 f917 	bl	800e14c <uxr_buffer_create_session>
 800df1e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800df20:	4620      	mov	r0, r4
 800df22:	f000 f983 	bl	800e22c <uxr_stamp_create_session_header>
 800df26:	a812      	add	r0, sp, #72	; 0x48
 800df28:	f7fe ff18 	bl	800cd5c <ucdr_buffer_length>
 800df2c:	23ff      	movs	r3, #255	; 0xff
 800df2e:	7163      	strb	r3, [r4, #5]
 800df30:	230a      	movs	r3, #10
 800df32:	46da      	mov	sl, fp
 800df34:	9303      	str	r3, [sp, #12]
 800df36:	4683      	mov	fp, r0
 800df38:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800df3a:	465a      	mov	r2, fp
 800df3c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800df40:	a90b      	add	r1, sp, #44	; 0x2c
 800df42:	47a8      	blx	r5
 800df44:	f000 fb92 	bl	800e66c <uxr_millis>
 800df48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800df4c:	4605      	mov	r5, r0
 800df4e:	e009      	b.n	800df64 <uxr_create_session+0x7c>
 800df50:	f000 fb8c 	bl	800e66c <uxr_millis>
 800df54:	1b40      	subs	r0, r0, r5
 800df56:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	7962      	ldrb	r2, [r4, #5]
 800df5e:	dd38      	ble.n	800dfd2 <uxr_create_session+0xea>
 800df60:	2aff      	cmp	r2, #255	; 0xff
 800df62:	d13c      	bne.n	800dfde <uxr_create_session+0xf6>
 800df64:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800df66:	a907      	add	r1, sp, #28
 800df68:	6896      	ldr	r6, [r2, #8]
 800df6a:	6810      	ldr	r0, [r2, #0]
 800df6c:	aa08      	add	r2, sp, #32
 800df6e:	47b0      	blx	r6
 800df70:	2800      	cmp	r0, #0
 800df72:	d0ed      	beq.n	800df50 <uxr_create_session+0x68>
 800df74:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800df78:	a81a      	add	r0, sp, #104	; 0x68
 800df7a:	f7fe fec3 	bl	800cd04 <ucdr_init_buffer>
 800df7e:	2600      	movs	r6, #0
 800df80:	f10d 031a 	add.w	r3, sp, #26
 800df84:	aa06      	add	r2, sp, #24
 800df86:	a91a      	add	r1, sp, #104	; 0x68
 800df88:	4620      	mov	r0, r4
 800df8a:	f88d 6018 	strb.w	r6, [sp, #24]
 800df8e:	f000 f975 	bl	800e27c <uxr_read_session_header>
 800df92:	2800      	cmp	r0, #0
 800df94:	d0dc      	beq.n	800df50 <uxr_create_session+0x68>
 800df96:	4631      	mov	r1, r6
 800df98:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800df9c:	f000 fa12 	bl	800e3c4 <uxr_stream_id_from_raw>
 800dfa0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800dfa4:	2e01      	cmp	r6, #1
 800dfa6:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800dfaa:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800dfae:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800dfb2:	d053      	beq.n	800e05c <uxr_create_session+0x174>
 800dfb4:	2e02      	cmp	r6, #2
 800dfb6:	d018      	beq.n	800dfea <uxr_create_session+0x102>
 800dfb8:	2e00      	cmp	r6, #0
 800dfba:	d1c9      	bne.n	800df50 <uxr_create_session+0x68>
 800dfbc:	4631      	mov	r1, r6
 800dfbe:	4630      	mov	r0, r6
 800dfc0:	f000 fa00 	bl	800e3c4 <uxr_stream_id_from_raw>
 800dfc4:	a91a      	add	r1, sp, #104	; 0x68
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	900a      	str	r0, [sp, #40]	; 0x28
 800dfca:	4620      	mov	r0, r4
 800dfcc:	f7ff fb1a 	bl	800d604 <read_submessage_list>
 800dfd0:	e7be      	b.n	800df50 <uxr_create_session+0x68>
 800dfd2:	9b03      	ldr	r3, [sp, #12]
 800dfd4:	3b01      	subs	r3, #1
 800dfd6:	9303      	str	r3, [sp, #12]
 800dfd8:	d001      	beq.n	800dfde <uxr_create_session+0xf6>
 800dfda:	2aff      	cmp	r2, #255	; 0xff
 800dfdc:	d0ac      	beq.n	800df38 <uxr_create_session+0x50>
 800dfde:	2a00      	cmp	r2, #0
 800dfe0:	d051      	beq.n	800e086 <uxr_create_session+0x19e>
 800dfe2:	2000      	movs	r0, #0
 800dfe4:	b02b      	add	sp, #172	; 0xac
 800dfe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfea:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800dfee:	9304      	str	r3, [sp, #16]
 800dff0:	4639      	mov	r1, r7
 800dff2:	4650      	mov	r0, sl
 800dff4:	f000 fad4 	bl	800e5a0 <uxr_get_input_reliable_stream>
 800dff8:	4680      	mov	r8, r0
 800dffa:	b348      	cbz	r0, 800e050 <uxr_create_session+0x168>
 800dffc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800dffe:	9205      	str	r2, [sp, #20]
 800e000:	a81a      	add	r0, sp, #104	; 0x68
 800e002:	f7fe feaf 	bl	800cd64 <ucdr_buffer_remaining>
 800e006:	4603      	mov	r3, r0
 800e008:	f10d 0019 	add.w	r0, sp, #25
 800e00c:	9000      	str	r0, [sp, #0]
 800e00e:	9a05      	ldr	r2, [sp, #20]
 800e010:	4649      	mov	r1, r9
 800e012:	4640      	mov	r0, r8
 800e014:	f006 fcce 	bl	80149b4 <uxr_receive_reliable_message>
 800e018:	b1d0      	cbz	r0, 800e050 <uxr_create_session+0x168>
 800e01a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d038      	beq.n	800e094 <uxr_create_session+0x1ac>
 800e022:	9e04      	ldr	r6, [sp, #16]
 800e024:	e00a      	b.n	800e03c <uxr_create_session+0x154>
 800e026:	f04f 0302 	mov.w	r3, #2
 800e02a:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 800e02e:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800e032:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e036:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e038:	f7ff fae4 	bl	800d604 <read_submessage_list>
 800e03c:	a922      	add	r1, sp, #136	; 0x88
 800e03e:	2204      	movs	r2, #4
 800e040:	4640      	mov	r0, r8
 800e042:	f006 fd37 	bl	8014ab4 <uxr_next_input_reliable_buffer_available>
 800e046:	4603      	mov	r3, r0
 800e048:	a922      	add	r1, sp, #136	; 0x88
 800e04a:	4620      	mov	r0, r4
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d1ea      	bne.n	800e026 <uxr_create_session+0x13e>
 800e050:	9904      	ldr	r1, [sp, #16]
 800e052:	463a      	mov	r2, r7
 800e054:	4620      	mov	r0, r4
 800e056:	f7ff f94f 	bl	800d2f8 <write_submessage_acknack.isra.0>
 800e05a:	e779      	b.n	800df50 <uxr_create_session+0x68>
 800e05c:	4639      	mov	r1, r7
 800e05e:	4650      	mov	r0, sl
 800e060:	f000 fa94 	bl	800e58c <uxr_get_input_best_effort_stream>
 800e064:	2800      	cmp	r0, #0
 800e066:	f43f af73 	beq.w	800df50 <uxr_create_session+0x68>
 800e06a:	4649      	mov	r1, r9
 800e06c:	f006 fc0e 	bl	801488c <uxr_receive_best_effort_message>
 800e070:	2800      	cmp	r0, #0
 800e072:	f43f af6d 	beq.w	800df50 <uxr_create_session+0x68>
 800e076:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800e07a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e07c:	a91a      	add	r1, sp, #104	; 0x68
 800e07e:	4620      	mov	r0, r4
 800e080:	f7ff fac0 	bl	800d604 <read_submessage_list>
 800e084:	e764      	b.n	800df50 <uxr_create_session+0x68>
 800e086:	4650      	mov	r0, sl
 800e088:	f000 f9d0 	bl	800e42c <uxr_reset_stream_storage>
 800e08c:	2001      	movs	r0, #1
 800e08e:	b02b      	add	sp, #172	; 0xac
 800e090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e094:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800e098:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e09a:	a91a      	add	r1, sp, #104	; 0x68
 800e09c:	4620      	mov	r0, r4
 800e09e:	f7ff fab1 	bl	800d604 <read_submessage_list>
 800e0a2:	e7be      	b.n	800e022 <uxr_create_session+0x13a>

0800e0a4 <uxr_prepare_stream_to_write_submessage>:
 800e0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0a8:	b082      	sub	sp, #8
 800e0aa:	4682      	mov	sl, r0
 800e0ac:	4610      	mov	r0, r2
 800e0ae:	4615      	mov	r5, r2
 800e0b0:	461e      	mov	r6, r3
 800e0b2:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800e0b6:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800e0ba:	9101      	str	r1, [sp, #4]
 800e0bc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800e0c0:	f000 face 	bl	800e660 <uxr_submessage_padding>
 800e0c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e0c8:	f105 0904 	add.w	r9, r5, #4
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	4481      	add	r9, r0
 800e0d0:	d01d      	beq.n	800e10e <uxr_prepare_stream_to_write_submessage+0x6a>
 800e0d2:	2b02      	cmp	r3, #2
 800e0d4:	d116      	bne.n	800e104 <uxr_prepare_stream_to_write_submessage+0x60>
 800e0d6:	4621      	mov	r1, r4
 800e0d8:	f10a 0008 	add.w	r0, sl, #8
 800e0dc:	f000 fa4c 	bl	800e578 <uxr_get_output_reliable_stream>
 800e0e0:	4604      	mov	r4, r0
 800e0e2:	b158      	cbz	r0, 800e0fc <uxr_prepare_stream_to_write_submessage+0x58>
 800e0e4:	4649      	mov	r1, r9
 800e0e6:	4632      	mov	r2, r6
 800e0e8:	f006 fea0 	bl	8014e2c <uxr_prepare_reliable_buffer_to_write>
 800e0ec:	4604      	mov	r4, r0
 800e0ee:	b12c      	cbz	r4, 800e0fc <uxr_prepare_stream_to_write_submessage+0x58>
 800e0f0:	4643      	mov	r3, r8
 800e0f2:	b2aa      	uxth	r2, r5
 800e0f4:	4639      	mov	r1, r7
 800e0f6:	4630      	mov	r0, r6
 800e0f8:	f000 fa72 	bl	800e5e0 <uxr_buffer_submessage_header>
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	b002      	add	sp, #8
 800e100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e104:	2400      	movs	r4, #0
 800e106:	4620      	mov	r0, r4
 800e108:	b002      	add	sp, #8
 800e10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e10e:	4621      	mov	r1, r4
 800e110:	f10a 0008 	add.w	r0, sl, #8
 800e114:	f000 fa28 	bl	800e568 <uxr_get_output_best_effort_stream>
 800e118:	4604      	mov	r4, r0
 800e11a:	2800      	cmp	r0, #0
 800e11c:	d0ee      	beq.n	800e0fc <uxr_prepare_stream_to_write_submessage+0x58>
 800e11e:	4649      	mov	r1, r9
 800e120:	4632      	mov	r2, r6
 800e122:	f006 fdb3 	bl	8014c8c <uxr_prepare_best_effort_buffer_to_write>
 800e126:	4604      	mov	r4, r0
 800e128:	e7e1      	b.n	800e0ee <uxr_prepare_stream_to_write_submessage+0x4a>
 800e12a:	bf00      	nop

0800e12c <uxr_init_session_info>:
 800e12c:	0e13      	lsrs	r3, r2, #24
 800e12e:	7043      	strb	r3, [r0, #1]
 800e130:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800e134:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e138:	7001      	strb	r1, [r0, #0]
 800e13a:	70c3      	strb	r3, [r0, #3]
 800e13c:	2109      	movs	r1, #9
 800e13e:	23ff      	movs	r3, #255	; 0xff
 800e140:	f880 c002 	strb.w	ip, [r0, #2]
 800e144:	7102      	strb	r2, [r0, #4]
 800e146:	80c1      	strh	r1, [r0, #6]
 800e148:	7143      	strb	r3, [r0, #5]
 800e14a:	4770      	bx	lr

0800e14c <uxr_buffer_create_session>:
 800e14c:	b530      	push	{r4, r5, lr}
 800e14e:	b089      	sub	sp, #36	; 0x24
 800e150:	2300      	movs	r3, #0
 800e152:	4d12      	ldr	r5, [pc, #72]	; (800e19c <uxr_buffer_create_session+0x50>)
 800e154:	9307      	str	r3, [sp, #28]
 800e156:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e15a:	2201      	movs	r2, #1
 800e15c:	9301      	str	r3, [sp, #4]
 800e15e:	80c2      	strh	r2, [r0, #6]
 800e160:	f88d 2004 	strb.w	r2, [sp, #4]
 800e164:	682a      	ldr	r2, [r5, #0]
 800e166:	9200      	str	r2, [sp, #0]
 800e168:	88aa      	ldrh	r2, [r5, #4]
 800e16a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e16e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800e172:	9202      	str	r2, [sp, #8]
 800e174:	460c      	mov	r4, r1
 800e176:	7802      	ldrb	r2, [r0, #0]
 800e178:	9303      	str	r3, [sp, #12]
 800e17a:	4619      	mov	r1, r3
 800e17c:	f88d 200c 	strb.w	r2, [sp, #12]
 800e180:	4620      	mov	r0, r4
 800e182:	2210      	movs	r2, #16
 800e184:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800e188:	9306      	str	r3, [sp, #24]
 800e18a:	f000 fa29 	bl	800e5e0 <uxr_buffer_submessage_header>
 800e18e:	4669      	mov	r1, sp
 800e190:	4620      	mov	r0, r4
 800e192:	f001 fa6d 	bl	800f670 <uxr_serialize_CREATE_CLIENT_Payload>
 800e196:	b009      	add	sp, #36	; 0x24
 800e198:	bd30      	pop	{r4, r5, pc}
 800e19a:	bf00      	nop
 800e19c:	08018008 	.word	0x08018008

0800e1a0 <uxr_buffer_delete_session>:
 800e1a0:	b510      	push	{r4, lr}
 800e1a2:	4b0c      	ldr	r3, [pc, #48]	; (800e1d4 <uxr_buffer_delete_session+0x34>)
 800e1a4:	b082      	sub	sp, #8
 800e1a6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800e1aa:	f8ad c006 	strh.w	ip, [sp, #6]
 800e1ae:	460c      	mov	r4, r1
 800e1b0:	2202      	movs	r2, #2
 800e1b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e1b6:	80c2      	strh	r2, [r0, #6]
 800e1b8:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e1bc:	2204      	movs	r2, #4
 800e1be:	2300      	movs	r3, #0
 800e1c0:	2103      	movs	r1, #3
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	f000 fa0c 	bl	800e5e0 <uxr_buffer_submessage_header>
 800e1c8:	a901      	add	r1, sp, #4
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	f001 faf6 	bl	800f7bc <uxr_serialize_DELETE_Payload>
 800e1d0:	b002      	add	sp, #8
 800e1d2:	bd10      	pop	{r4, pc}
 800e1d4:	08018008 	.word	0x08018008

0800e1d8 <uxr_read_create_session_status>:
 800e1d8:	b510      	push	{r4, lr}
 800e1da:	b088      	sub	sp, #32
 800e1dc:	4604      	mov	r4, r0
 800e1de:	4608      	mov	r0, r1
 800e1e0:	a901      	add	r1, sp, #4
 800e1e2:	f001 fafb 	bl	800f7dc <uxr_deserialize_STATUS_AGENT_Payload>
 800e1e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e1ea:	7163      	strb	r3, [r4, #5]
 800e1ec:	b008      	add	sp, #32
 800e1ee:	bd10      	pop	{r4, pc}

0800e1f0 <uxr_read_delete_session_status>:
 800e1f0:	b510      	push	{r4, lr}
 800e1f2:	4604      	mov	r4, r0
 800e1f4:	b084      	sub	sp, #16
 800e1f6:	4608      	mov	r0, r1
 800e1f8:	a902      	add	r1, sp, #8
 800e1fa:	f001 fb1f 	bl	800f83c <uxr_deserialize_STATUS_Payload>
 800e1fe:	88e3      	ldrh	r3, [r4, #6]
 800e200:	2b02      	cmp	r3, #2
 800e202:	d001      	beq.n	800e208 <uxr_read_delete_session_status+0x18>
 800e204:	b004      	add	sp, #16
 800e206:	bd10      	pop	{r4, pc}
 800e208:	f10d 000a 	add.w	r0, sp, #10
 800e20c:	f7fe fffa 	bl	800d204 <uxr_object_id_from_raw>
 800e210:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800e214:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800e218:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	2b02      	cmp	r3, #2
 800e220:	bf04      	itt	eq
 800e222:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800e226:	7163      	strbeq	r3, [r4, #5]
 800e228:	b004      	add	sp, #16
 800e22a:	bd10      	pop	{r4, pc}

0800e22c <uxr_stamp_create_session_header>:
 800e22c:	b510      	push	{r4, lr}
 800e22e:	2208      	movs	r2, #8
 800e230:	b08a      	sub	sp, #40	; 0x28
 800e232:	4604      	mov	r4, r0
 800e234:	eb0d 0002 	add.w	r0, sp, r2
 800e238:	f7fe fd64 	bl	800cd04 <ucdr_init_buffer>
 800e23c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e240:	9400      	str	r4, [sp, #0]
 800e242:	2300      	movs	r3, #0
 800e244:	461a      	mov	r2, r3
 800e246:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800e24a:	a802      	add	r0, sp, #8
 800e24c:	f000 fbc2 	bl	800e9d4 <uxr_serialize_message_header>
 800e250:	b00a      	add	sp, #40	; 0x28
 800e252:	bd10      	pop	{r4, pc}

0800e254 <uxr_stamp_session_header>:
 800e254:	b530      	push	{r4, r5, lr}
 800e256:	b08d      	sub	sp, #52	; 0x34
 800e258:	4604      	mov	r4, r0
 800e25a:	460d      	mov	r5, r1
 800e25c:	9203      	str	r2, [sp, #12]
 800e25e:	4619      	mov	r1, r3
 800e260:	a804      	add	r0, sp, #16
 800e262:	2208      	movs	r2, #8
 800e264:	f7fe fd4e 	bl	800cd04 <ucdr_init_buffer>
 800e268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e26c:	9b03      	ldr	r3, [sp, #12]
 800e26e:	9400      	str	r4, [sp, #0]
 800e270:	462a      	mov	r2, r5
 800e272:	a804      	add	r0, sp, #16
 800e274:	f000 fbae 	bl	800e9d4 <uxr_serialize_message_header>
 800e278:	b00d      	add	sp, #52	; 0x34
 800e27a:	bd30      	pop	{r4, r5, pc}

0800e27c <uxr_read_session_header>:
 800e27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e280:	4607      	mov	r7, r0
 800e282:	b084      	sub	sp, #16
 800e284:	4608      	mov	r0, r1
 800e286:	460c      	mov	r4, r1
 800e288:	4615      	mov	r5, r2
 800e28a:	461e      	mov	r6, r3
 800e28c:	f7fe fd6a 	bl	800cd64 <ucdr_buffer_remaining>
 800e290:	2808      	cmp	r0, #8
 800e292:	d803      	bhi.n	800e29c <uxr_read_session_header+0x20>
 800e294:	2000      	movs	r0, #0
 800e296:	b004      	add	sp, #16
 800e298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e29c:	f10d 080c 	add.w	r8, sp, #12
 800e2a0:	4633      	mov	r3, r6
 800e2a2:	462a      	mov	r2, r5
 800e2a4:	f8cd 8000 	str.w	r8, [sp]
 800e2a8:	4620      	mov	r0, r4
 800e2aa:	f10d 010b 	add.w	r1, sp, #11
 800e2ae:	f000 fbaf 	bl	800ea10 <uxr_deserialize_message_header>
 800e2b2:	783a      	ldrb	r2, [r7, #0]
 800e2b4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	d1eb      	bne.n	800e294 <uxr_read_session_header+0x18>
 800e2bc:	061b      	lsls	r3, r3, #24
 800e2be:	d41c      	bmi.n	800e2fa <uxr_read_session_header+0x7e>
 800e2c0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800e2c4:	787b      	ldrb	r3, [r7, #1]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d003      	beq.n	800e2d2 <uxr_read_session_header+0x56>
 800e2ca:	2001      	movs	r0, #1
 800e2cc:	f080 0001 	eor.w	r0, r0, #1
 800e2d0:	e7e1      	b.n	800e296 <uxr_read_session_header+0x1a>
 800e2d2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800e2d6:	78bb      	ldrb	r3, [r7, #2]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	f107 0102 	add.w	r1, r7, #2
 800e2de:	d1f4      	bne.n	800e2ca <uxr_read_session_header+0x4e>
 800e2e0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800e2e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d1ee      	bne.n	800e2ca <uxr_read_session_header+0x4e>
 800e2ec:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800e2f0:	784b      	ldrb	r3, [r1, #1]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d1e9      	bne.n	800e2ca <uxr_read_session_header+0x4e>
 800e2f6:	2000      	movs	r0, #0
 800e2f8:	e7e8      	b.n	800e2cc <uxr_read_session_header+0x50>
 800e2fa:	2001      	movs	r0, #1
 800e2fc:	e7cb      	b.n	800e296 <uxr_read_session_header+0x1a>
 800e2fe:	bf00      	nop

0800e300 <uxr_session_header_offset>:
 800e300:	f990 3000 	ldrsb.w	r3, [r0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	bfac      	ite	ge
 800e308:	2008      	movge	r0, #8
 800e30a:	2004      	movlt	r0, #4
 800e30c:	4770      	bx	lr
 800e30e:	bf00      	nop

0800e310 <uxr_init_base_object_request>:
 800e310:	b510      	push	{r4, lr}
 800e312:	88c3      	ldrh	r3, [r0, #6]
 800e314:	b082      	sub	sp, #8
 800e316:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800e31a:	9101      	str	r1, [sp, #4]
 800e31c:	f1a3 010a 	sub.w	r1, r3, #10
 800e320:	b289      	uxth	r1, r1
 800e322:	42a1      	cmp	r1, r4
 800e324:	d80e      	bhi.n	800e344 <uxr_init_base_object_request+0x34>
 800e326:	3301      	adds	r3, #1
 800e328:	b29c      	uxth	r4, r3
 800e32a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e32e:	b2db      	uxtb	r3, r3
 800e330:	80c4      	strh	r4, [r0, #6]
 800e332:	9801      	ldr	r0, [sp, #4]
 800e334:	7011      	strb	r1, [r2, #0]
 800e336:	7053      	strb	r3, [r2, #1]
 800e338:	1c91      	adds	r1, r2, #2
 800e33a:	f7fe ff77 	bl	800d22c <uxr_object_id_to_raw>
 800e33e:	4620      	mov	r0, r4
 800e340:	b002      	add	sp, #8
 800e342:	bd10      	pop	{r4, pc}
 800e344:	230a      	movs	r3, #10
 800e346:	2100      	movs	r1, #0
 800e348:	461c      	mov	r4, r3
 800e34a:	e7f1      	b.n	800e330 <uxr_init_base_object_request+0x20>

0800e34c <uxr_parse_base_object_request>:
 800e34c:	b570      	push	{r4, r5, r6, lr}
 800e34e:	4604      	mov	r4, r0
 800e350:	3002      	adds	r0, #2
 800e352:	460d      	mov	r5, r1
 800e354:	4616      	mov	r6, r2
 800e356:	f7fe ff55 	bl	800d204 <uxr_object_id_from_raw>
 800e35a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800e35e:	8028      	strh	r0, [r5, #0]
 800e360:	806b      	strh	r3, [r5, #2]
 800e362:	7822      	ldrb	r2, [r4, #0]
 800e364:	7863      	ldrb	r3, [r4, #1]
 800e366:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e36a:	8033      	strh	r3, [r6, #0]
 800e36c:	bd70      	pop	{r4, r5, r6, pc}
 800e36e:	bf00      	nop

0800e370 <uxr_stream_id>:
 800e370:	2901      	cmp	r1, #1
 800e372:	b082      	sub	sp, #8
 800e374:	d01d      	beq.n	800e3b2 <uxr_stream_id+0x42>
 800e376:	2902      	cmp	r1, #2
 800e378:	f04f 0c00 	mov.w	ip, #0
 800e37c:	d01e      	beq.n	800e3bc <uxr_stream_id+0x4c>
 800e37e:	2300      	movs	r3, #0
 800e380:	f36c 0307 	bfi	r3, ip, #0, #8
 800e384:	f360 230f 	bfi	r3, r0, #8, #8
 800e388:	f361 4317 	bfi	r3, r1, #16, #8
 800e38c:	f362 631f 	bfi	r3, r2, #24, #8
 800e390:	b2da      	uxtb	r2, r3
 800e392:	2000      	movs	r0, #0
 800e394:	f362 0007 	bfi	r0, r2, #0, #8
 800e398:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e39c:	f362 200f 	bfi	r0, r2, #8, #8
 800e3a0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e3a4:	f362 4017 	bfi	r0, r2, #16, #8
 800e3a8:	0e1b      	lsrs	r3, r3, #24
 800e3aa:	f363 601f 	bfi	r0, r3, #24, #8
 800e3ae:	b002      	add	sp, #8
 800e3b0:	4770      	bx	lr
 800e3b2:	f100 0c01 	add.w	ip, r0, #1
 800e3b6:	fa5f fc8c 	uxtb.w	ip, ip
 800e3ba:	e7e0      	b.n	800e37e <uxr_stream_id+0xe>
 800e3bc:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 800e3c0:	e7dd      	b.n	800e37e <uxr_stream_id+0xe>
 800e3c2:	bf00      	nop

0800e3c4 <uxr_stream_id_from_raw>:
 800e3c4:	b082      	sub	sp, #8
 800e3c6:	b130      	cbz	r0, 800e3d6 <uxr_stream_id_from_raw+0x12>
 800e3c8:	0603      	lsls	r3, r0, #24
 800e3ca:	d420      	bmi.n	800e40e <uxr_stream_id_from_raw+0x4a>
 800e3cc:	1e42      	subs	r2, r0, #1
 800e3ce:	b2d2      	uxtb	r2, r2
 800e3d0:	f04f 0c01 	mov.w	ip, #1
 800e3d4:	e001      	b.n	800e3da <uxr_stream_id_from_raw+0x16>
 800e3d6:	4684      	mov	ip, r0
 800e3d8:	4602      	mov	r2, r0
 800e3da:	2300      	movs	r3, #0
 800e3dc:	f360 0307 	bfi	r3, r0, #0, #8
 800e3e0:	f362 230f 	bfi	r3, r2, #8, #8
 800e3e4:	f36c 4317 	bfi	r3, ip, #16, #8
 800e3e8:	f361 631f 	bfi	r3, r1, #24, #8
 800e3ec:	b2da      	uxtb	r2, r3
 800e3ee:	2000      	movs	r0, #0
 800e3f0:	f362 0007 	bfi	r0, r2, #0, #8
 800e3f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e3f8:	f362 200f 	bfi	r0, r2, #8, #8
 800e3fc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e400:	f362 4017 	bfi	r0, r2, #16, #8
 800e404:	0e1b      	lsrs	r3, r3, #24
 800e406:	f363 601f 	bfi	r0, r3, #24, #8
 800e40a:	b002      	add	sp, #8
 800e40c:	4770      	bx	lr
 800e40e:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800e412:	f04f 0c02 	mov.w	ip, #2
 800e416:	e7e0      	b.n	800e3da <uxr_stream_id_from_raw+0x16>

0800e418 <uxr_init_stream_storage>:
 800e418:	2300      	movs	r3, #0
 800e41a:	7403      	strb	r3, [r0, #16]
 800e41c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800e420:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800e424:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800e428:	4770      	bx	lr
 800e42a:	bf00      	nop

0800e42c <uxr_reset_stream_storage>:
 800e42c:	b570      	push	{r4, r5, r6, lr}
 800e42e:	7c03      	ldrb	r3, [r0, #16]
 800e430:	4604      	mov	r4, r0
 800e432:	b153      	cbz	r3, 800e44a <uxr_reset_stream_storage+0x1e>
 800e434:	4606      	mov	r6, r0
 800e436:	2500      	movs	r5, #0
 800e438:	4630      	mov	r0, r6
 800e43a:	f006 fc21 	bl	8014c80 <uxr_reset_output_best_effort_stream>
 800e43e:	7c23      	ldrb	r3, [r4, #16]
 800e440:	3501      	adds	r5, #1
 800e442:	42ab      	cmp	r3, r5
 800e444:	f106 0610 	add.w	r6, r6, #16
 800e448:	d8f6      	bhi.n	800e438 <uxr_reset_stream_storage+0xc>
 800e44a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e44e:	b163      	cbz	r3, 800e46a <uxr_reset_stream_storage+0x3e>
 800e450:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e454:	2500      	movs	r5, #0
 800e456:	4630      	mov	r0, r6
 800e458:	f006 fa14 	bl	8014884 <uxr_reset_input_best_effort_stream>
 800e45c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e460:	3501      	adds	r5, #1
 800e462:	42ab      	cmp	r3, r5
 800e464:	f106 0602 	add.w	r6, r6, #2
 800e468:	d8f5      	bhi.n	800e456 <uxr_reset_stream_storage+0x2a>
 800e46a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e46e:	b163      	cbz	r3, 800e48a <uxr_reset_stream_storage+0x5e>
 800e470:	f104 0618 	add.w	r6, r4, #24
 800e474:	2500      	movs	r5, #0
 800e476:	4630      	mov	r0, r6
 800e478:	f006 fcae 	bl	8014dd8 <uxr_reset_output_reliable_stream>
 800e47c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e480:	3501      	adds	r5, #1
 800e482:	42ab      	cmp	r3, r5
 800e484:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800e488:	d8f5      	bhi.n	800e476 <uxr_reset_stream_storage+0x4a>
 800e48a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800e48e:	b163      	cbz	r3, 800e4aa <uxr_reset_stream_storage+0x7e>
 800e490:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800e494:	2500      	movs	r5, #0
 800e496:	4630      	mov	r0, r6
 800e498:	f006 fa68 	bl	801496c <uxr_reset_input_reliable_stream>
 800e49c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800e4a0:	3501      	adds	r5, #1
 800e4a2:	42ab      	cmp	r3, r5
 800e4a4:	f106 0618 	add.w	r6, r6, #24
 800e4a8:	d8f5      	bhi.n	800e496 <uxr_reset_stream_storage+0x6a>
 800e4aa:	bd70      	pop	{r4, r5, r6, pc}

0800e4ac <uxr_add_output_best_effort_buffer>:
 800e4ac:	b510      	push	{r4, lr}
 800e4ae:	7c04      	ldrb	r4, [r0, #16]
 800e4b0:	f104 0c01 	add.w	ip, r4, #1
 800e4b4:	b082      	sub	sp, #8
 800e4b6:	f880 c010 	strb.w	ip, [r0, #16]
 800e4ba:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800e4be:	f006 fbd5 	bl	8014c6c <uxr_init_output_best_effort_stream>
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	4611      	mov	r1, r2
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	b002      	add	sp, #8
 800e4ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4ce:	f7ff bf4f 	b.w	800e370 <uxr_stream_id>
 800e4d2:	bf00      	nop

0800e4d4 <uxr_add_output_reliable_buffer>:
 800e4d4:	b510      	push	{r4, lr}
 800e4d6:	b084      	sub	sp, #16
 800e4d8:	4684      	mov	ip, r0
 800e4da:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e4de:	9000      	str	r0, [sp, #0]
 800e4e0:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800e4e4:	2028      	movs	r0, #40	; 0x28
 800e4e6:	fb00 c004 	mla	r0, r0, r4, ip
 800e4ea:	f104 0e01 	add.w	lr, r4, #1
 800e4ee:	3018      	adds	r0, #24
 800e4f0:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800e4f4:	f006 fc38 	bl	8014d68 <uxr_init_output_reliable_stream>
 800e4f8:	2201      	movs	r2, #1
 800e4fa:	2102      	movs	r1, #2
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	b004      	add	sp, #16
 800e500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e504:	f7ff bf34 	b.w	800e370 <uxr_stream_id>

0800e508 <uxr_add_input_best_effort_buffer>:
 800e508:	b510      	push	{r4, lr}
 800e50a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800e50e:	4603      	mov	r3, r0
 800e510:	1c62      	adds	r2, r4, #1
 800e512:	f104 0021 	add.w	r0, r4, #33	; 0x21
 800e516:	b082      	sub	sp, #8
 800e518:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800e51c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e520:	f006 f9ac 	bl	801487c <uxr_init_input_best_effort_stream>
 800e524:	2200      	movs	r2, #0
 800e526:	2101      	movs	r1, #1
 800e528:	4620      	mov	r0, r4
 800e52a:	b002      	add	sp, #8
 800e52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e530:	f7ff bf1e 	b.w	800e370 <uxr_stream_id>

0800e534 <uxr_add_input_reliable_buffer>:
 800e534:	b510      	push	{r4, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	4684      	mov	ip, r0
 800e53a:	9806      	ldr	r0, [sp, #24]
 800e53c:	9000      	str	r0, [sp, #0]
 800e53e:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800e542:	2018      	movs	r0, #24
 800e544:	fb00 c004 	mla	r0, r0, r4, ip
 800e548:	f104 0e01 	add.w	lr, r4, #1
 800e54c:	3048      	adds	r0, #72	; 0x48
 800e54e:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800e552:	f006 f9df 	bl	8014914 <uxr_init_input_reliable_stream>
 800e556:	2200      	movs	r2, #0
 800e558:	2102      	movs	r1, #2
 800e55a:	4620      	mov	r0, r4
 800e55c:	b004      	add	sp, #16
 800e55e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e562:	f7ff bf05 	b.w	800e370 <uxr_stream_id>
 800e566:	bf00      	nop

0800e568 <uxr_get_output_best_effort_stream>:
 800e568:	7c03      	ldrb	r3, [r0, #16]
 800e56a:	428b      	cmp	r3, r1
 800e56c:	bf8c      	ite	hi
 800e56e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800e572:	2000      	movls	r0, #0
 800e574:	4770      	bx	lr
 800e576:	bf00      	nop

0800e578 <uxr_get_output_reliable_stream>:
 800e578:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800e57c:	428b      	cmp	r3, r1
 800e57e:	bf83      	ittte	hi
 800e580:	2328      	movhi	r3, #40	; 0x28
 800e582:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e586:	3018      	addhi	r0, #24
 800e588:	2000      	movls	r0, #0
 800e58a:	4770      	bx	lr

0800e58c <uxr_get_input_best_effort_stream>:
 800e58c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800e590:	428b      	cmp	r3, r1
 800e592:	bf86      	itte	hi
 800e594:	3121      	addhi	r1, #33	; 0x21
 800e596:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800e59a:	2000      	movls	r0, #0
 800e59c:	4770      	bx	lr
 800e59e:	bf00      	nop

0800e5a0 <uxr_get_input_reliable_stream>:
 800e5a0:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800e5a4:	428b      	cmp	r3, r1
 800e5a6:	bf83      	ittte	hi
 800e5a8:	2318      	movhi	r3, #24
 800e5aa:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e5ae:	3048      	addhi	r0, #72	; 0x48
 800e5b0:	2000      	movls	r0, #0
 800e5b2:	4770      	bx	lr

0800e5b4 <uxr_output_streams_confirmed>:
 800e5b4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800e5b8:	b183      	cbz	r3, 800e5dc <uxr_output_streams_confirmed+0x28>
 800e5ba:	b570      	push	{r4, r5, r6, lr}
 800e5bc:	4606      	mov	r6, r0
 800e5be:	f100 0518 	add.w	r5, r0, #24
 800e5c2:	2400      	movs	r4, #0
 800e5c4:	e001      	b.n	800e5ca <uxr_output_streams_confirmed+0x16>
 800e5c6:	3528      	adds	r5, #40	; 0x28
 800e5c8:	b138      	cbz	r0, 800e5da <uxr_output_streams_confirmed+0x26>
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	f006 fe74 	bl	80152b8 <uxr_is_output_up_to_date>
 800e5d0:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800e5d4:	3401      	adds	r4, #1
 800e5d6:	42a3      	cmp	r3, r4
 800e5d8:	d8f5      	bhi.n	800e5c6 <uxr_output_streams_confirmed+0x12>
 800e5da:	bd70      	pop	{r4, r5, r6, pc}
 800e5dc:	2001      	movs	r0, #1
 800e5de:	4770      	bx	lr

0800e5e0 <uxr_buffer_submessage_header>:
 800e5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5e2:	4604      	mov	r4, r0
 800e5e4:	460e      	mov	r6, r1
 800e5e6:	2104      	movs	r1, #4
 800e5e8:	4615      	mov	r5, r2
 800e5ea:	461f      	mov	r7, r3
 800e5ec:	f7fe fba4 	bl	800cd38 <ucdr_align_to>
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	ea47 0203 	orr.w	r2, r7, r3
 800e5f6:	4631      	mov	r1, r6
 800e5f8:	7523      	strb	r3, [r4, #20]
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	462b      	mov	r3, r5
 800e5fe:	f000 fa27 	bl	800ea50 <uxr_serialize_submessage_header>
 800e602:	4620      	mov	r0, r4
 800e604:	f7fe fbae 	bl	800cd64 <ucdr_buffer_remaining>
 800e608:	42a8      	cmp	r0, r5
 800e60a:	bf34      	ite	cc
 800e60c:	2000      	movcc	r0, #0
 800e60e:	2001      	movcs	r0, #1
 800e610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e612:	bf00      	nop

0800e614 <uxr_read_submessage_header>:
 800e614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e618:	4604      	mov	r4, r0
 800e61a:	460d      	mov	r5, r1
 800e61c:	2104      	movs	r1, #4
 800e61e:	4616      	mov	r6, r2
 800e620:	4698      	mov	r8, r3
 800e622:	f7fe fb89 	bl	800cd38 <ucdr_align_to>
 800e626:	4620      	mov	r0, r4
 800e628:	f7fe fb9c 	bl	800cd64 <ucdr_buffer_remaining>
 800e62c:	2803      	cmp	r0, #3
 800e62e:	bf8c      	ite	hi
 800e630:	2701      	movhi	r7, #1
 800e632:	2700      	movls	r7, #0
 800e634:	d802      	bhi.n	800e63c <uxr_read_submessage_header+0x28>
 800e636:	4638      	mov	r0, r7
 800e638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e63c:	4633      	mov	r3, r6
 800e63e:	4642      	mov	r2, r8
 800e640:	4620      	mov	r0, r4
 800e642:	4629      	mov	r1, r5
 800e644:	f000 fa18 	bl	800ea78 <uxr_deserialize_submessage_header>
 800e648:	f898 3000 	ldrb.w	r3, [r8]
 800e64c:	f003 0201 	and.w	r2, r3, #1
 800e650:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e654:	f888 3000 	strb.w	r3, [r8]
 800e658:	7522      	strb	r2, [r4, #20]
 800e65a:	4638      	mov	r0, r7
 800e65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e660 <uxr_submessage_padding>:
 800e660:	f010 0003 	ands.w	r0, r0, #3
 800e664:	bf18      	it	ne
 800e666:	f1c0 0004 	rsbne	r0, r0, #4
 800e66a:	4770      	bx	lr

0800e66c <uxr_millis>:
 800e66c:	b510      	push	{r4, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	4669      	mov	r1, sp
 800e672:	2001      	movs	r0, #1
 800e674:	f7f3 fef8 	bl	8002468 <clock_gettime>
 800e678:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800e67c:	4906      	ldr	r1, [pc, #24]	; (800e698 <uxr_millis+0x2c>)
 800e67e:	fba0 0301 	umull	r0, r3, r0, r1
 800e682:	1900      	adds	r0, r0, r4
 800e684:	fb01 3102 	mla	r1, r1, r2, r3
 800e688:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e68c:	4a03      	ldr	r2, [pc, #12]	; (800e69c <uxr_millis+0x30>)
 800e68e:	2300      	movs	r3, #0
 800e690:	f7f2 fb62 	bl	8000d58 <__aeabi_ldivmod>
 800e694:	b004      	add	sp, #16
 800e696:	bd10      	pop	{r4, pc}
 800e698:	3b9aca00 	.word	0x3b9aca00
 800e69c:	000f4240 	.word	0x000f4240

0800e6a0 <uxr_nanos>:
 800e6a0:	b510      	push	{r4, lr}
 800e6a2:	b084      	sub	sp, #16
 800e6a4:	4669      	mov	r1, sp
 800e6a6:	2001      	movs	r0, #1
 800e6a8:	f7f3 fede 	bl	8002468 <clock_gettime>
 800e6ac:	4a06      	ldr	r2, [pc, #24]	; (800e6c8 <uxr_nanos+0x28>)
 800e6ae:	9800      	ldr	r0, [sp, #0]
 800e6b0:	9902      	ldr	r1, [sp, #8]
 800e6b2:	9c01      	ldr	r4, [sp, #4]
 800e6b4:	fba0 0302 	umull	r0, r3, r0, r2
 800e6b8:	1840      	adds	r0, r0, r1
 800e6ba:	fb02 3304 	mla	r3, r2, r4, r3
 800e6be:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800e6c2:	b004      	add	sp, #16
 800e6c4:	bd10      	pop	{r4, pc}
 800e6c6:	bf00      	nop
 800e6c8:	3b9aca00 	.word	0x3b9aca00

0800e6cc <on_full_output_buffer_fragmented>:
 800e6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6d0:	460c      	mov	r4, r1
 800e6d2:	b08a      	sub	sp, #40	; 0x28
 800e6d4:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800e6d8:	4606      	mov	r6, r0
 800e6da:	f104 0008 	add.w	r0, r4, #8
 800e6de:	f7ff ff4b 	bl	800e578 <uxr_get_output_reliable_stream>
 800e6e2:	4605      	mov	r5, r0
 800e6e4:	f006 fdf2 	bl	80152cc <get_available_free_slots>
 800e6e8:	b968      	cbnz	r0, 800e706 <on_full_output_buffer_fragmented+0x3a>
 800e6ea:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800e6ee:	4620      	mov	r0, r4
 800e6f0:	4798      	blx	r3
 800e6f2:	b918      	cbnz	r0, 800e6fc <on_full_output_buffer_fragmented+0x30>
 800e6f4:	2001      	movs	r0, #1
 800e6f6:	b00a      	add	sp, #40	; 0x28
 800e6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	f006 fde5 	bl	80152cc <get_available_free_slots>
 800e702:	2800      	cmp	r0, #0
 800e704:	d0f6      	beq.n	800e6f4 <on_full_output_buffer_fragmented+0x28>
 800e706:	8929      	ldrh	r1, [r5, #8]
 800e708:	89eb      	ldrh	r3, [r5, #14]
 800e70a:	7b28      	ldrb	r0, [r5, #12]
 800e70c:	686a      	ldr	r2, [r5, #4]
 800e70e:	fbb2 f8f1 	udiv	r8, r2, r1
 800e712:	fbb3 f2f1 	udiv	r2, r3, r1
 800e716:	fb01 3112 	mls	r1, r1, r2, r3
 800e71a:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 800e71e:	b289      	uxth	r1, r1
 800e720:	fb08 f101 	mul.w	r1, r8, r1
 800e724:	30fc      	adds	r0, #252	; 0xfc
 800e726:	f1a8 0804 	sub.w	r8, r8, #4
 800e72a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800e72e:	4440      	add	r0, r8
 800e730:	b287      	uxth	r7, r0
 800e732:	1bdb      	subs	r3, r3, r7
 800e734:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800e738:	682b      	ldr	r3, [r5, #0]
 800e73a:	3104      	adds	r1, #4
 800e73c:	4419      	add	r1, r3
 800e73e:	4642      	mov	r2, r8
 800e740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e744:	9300      	str	r3, [sp, #0]
 800e746:	a802      	add	r0, sp, #8
 800e748:	2300      	movs	r3, #0
 800e74a:	f7fe fac9 	bl	800cce0 <ucdr_init_buffer_origin_offset>
 800e74e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800e752:	f102 0308 	add.w	r3, r2, #8
 800e756:	4543      	cmp	r3, r8
 800e758:	d928      	bls.n	800e7ac <on_full_output_buffer_fragmented+0xe0>
 800e75a:	463a      	mov	r2, r7
 800e75c:	2300      	movs	r3, #0
 800e75e:	210d      	movs	r1, #13
 800e760:	a802      	add	r0, sp, #8
 800e762:	f7ff ff3d 	bl	800e5e0 <uxr_buffer_submessage_header>
 800e766:	8929      	ldrh	r1, [r5, #8]
 800e768:	89eb      	ldrh	r3, [r5, #14]
 800e76a:	fbb3 f2f1 	udiv	r2, r3, r1
 800e76e:	fb01 3312 	mls	r3, r1, r2, r3
 800e772:	b29b      	uxth	r3, r3
 800e774:	686a      	ldr	r2, [r5, #4]
 800e776:	fbb2 f2f1 	udiv	r2, r2, r1
 800e77a:	fb02 f303 	mul.w	r3, r2, r3
 800e77e:	682a      	ldr	r2, [r5, #0]
 800e780:	f842 8003 	str.w	r8, [r2, r3]
 800e784:	89e8      	ldrh	r0, [r5, #14]
 800e786:	2101      	movs	r1, #1
 800e788:	f006 fef0 	bl	801556c <uxr_seq_num_add>
 800e78c:	9904      	ldr	r1, [sp, #16]
 800e78e:	9a03      	ldr	r2, [sp, #12]
 800e790:	81e8      	strh	r0, [r5, #14]
 800e792:	1a52      	subs	r2, r2, r1
 800e794:	4630      	mov	r0, r6
 800e796:	f7fe fab5 	bl	800cd04 <ucdr_init_buffer>
 800e79a:	4630      	mov	r0, r6
 800e79c:	490f      	ldr	r1, [pc, #60]	; (800e7dc <on_full_output_buffer_fragmented+0x110>)
 800e79e:	4622      	mov	r2, r4
 800e7a0:	f7fe fa84 	bl	800ccac <ucdr_set_on_full_buffer_callback>
 800e7a4:	2000      	movs	r0, #0
 800e7a6:	b00a      	add	sp, #40	; 0x28
 800e7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7ac:	b292      	uxth	r2, r2
 800e7ae:	2302      	movs	r3, #2
 800e7b0:	210d      	movs	r1, #13
 800e7b2:	a802      	add	r0, sp, #8
 800e7b4:	f7ff ff14 	bl	800e5e0 <uxr_buffer_submessage_header>
 800e7b8:	8928      	ldrh	r0, [r5, #8]
 800e7ba:	89eb      	ldrh	r3, [r5, #14]
 800e7bc:	fbb3 f1f0 	udiv	r1, r3, r0
 800e7c0:	fb00 3311 	mls	r3, r0, r1, r3
 800e7c4:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800e7c8:	6869      	ldr	r1, [r5, #4]
 800e7ca:	fbb1 f1f0 	udiv	r1, r1, r0
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	fb01 f303 	mul.w	r3, r1, r3
 800e7d4:	6829      	ldr	r1, [r5, #0]
 800e7d6:	3208      	adds	r2, #8
 800e7d8:	50ca      	str	r2, [r1, r3]
 800e7da:	e7d3      	b.n	800e784 <on_full_output_buffer_fragmented+0xb8>
 800e7dc:	0800e6cd 	.word	0x0800e6cd

0800e7e0 <uxr_prepare_output_stream>:
 800e7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7e2:	b087      	sub	sp, #28
 800e7e4:	2707      	movs	r7, #7
 800e7e6:	9202      	str	r2, [sp, #8]
 800e7e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e7ea:	9103      	str	r1, [sp, #12]
 800e7ec:	2500      	movs	r5, #0
 800e7ee:	3204      	adds	r2, #4
 800e7f0:	e9cd 7500 	strd	r7, r5, [sp]
 800e7f4:	461c      	mov	r4, r3
 800e7f6:	4606      	mov	r6, r0
 800e7f8:	f7ff fc54 	bl	800e0a4 <uxr_prepare_stream_to_write_submessage>
 800e7fc:	f080 0201 	eor.w	r2, r0, #1
 800e800:	b2d2      	uxtb	r2, r2
 800e802:	75a2      	strb	r2, [r4, #22]
 800e804:	b112      	cbz	r2, 800e80c <uxr_prepare_output_stream+0x2c>
 800e806:	4628      	mov	r0, r5
 800e808:	b007      	add	sp, #28
 800e80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e80c:	aa05      	add	r2, sp, #20
 800e80e:	9902      	ldr	r1, [sp, #8]
 800e810:	4630      	mov	r0, r6
 800e812:	f7ff fd7d 	bl	800e310 <uxr_init_base_object_request>
 800e816:	a905      	add	r1, sp, #20
 800e818:	4605      	mov	r5, r0
 800e81a:	4620      	mov	r0, r4
 800e81c:	f001 f88c 	bl	800f938 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e820:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800e824:	69a6      	ldr	r6, [r4, #24]
 800e826:	69e7      	ldr	r7, [r4, #28]
 800e828:	1a52      	subs	r2, r2, r1
 800e82a:	4620      	mov	r0, r4
 800e82c:	f7fe fa6a 	bl	800cd04 <ucdr_init_buffer>
 800e830:	4620      	mov	r0, r4
 800e832:	463a      	mov	r2, r7
 800e834:	4631      	mov	r1, r6
 800e836:	f7fe fa39 	bl	800ccac <ucdr_set_on_full_buffer_callback>
 800e83a:	4628      	mov	r0, r5
 800e83c:	b007      	add	sp, #28
 800e83e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e840 <uxr_prepare_output_stream_fragmented>:
 800e840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e844:	b091      	sub	sp, #68	; 0x44
 800e846:	4605      	mov	r5, r0
 800e848:	9105      	str	r1, [sp, #20]
 800e84a:	3008      	adds	r0, #8
 800e84c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800e850:	461e      	mov	r6, r3
 800e852:	9204      	str	r2, [sp, #16]
 800e854:	f7ff fe90 	bl	800e578 <uxr_get_output_reliable_stream>
 800e858:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e85c:	2b01      	cmp	r3, #1
 800e85e:	f000 8091 	beq.w	800e984 <uxr_prepare_output_stream_fragmented+0x144>
 800e862:	4604      	mov	r4, r0
 800e864:	2800      	cmp	r0, #0
 800e866:	f000 808d 	beq.w	800e984 <uxr_prepare_output_stream_fragmented+0x144>
 800e86a:	f006 fd2f 	bl	80152cc <get_available_free_slots>
 800e86e:	2800      	cmp	r0, #0
 800e870:	f000 8083 	beq.w	800e97a <uxr_prepare_output_stream_fragmented+0x13a>
 800e874:	8922      	ldrh	r2, [r4, #8]
 800e876:	89e7      	ldrh	r7, [r4, #14]
 800e878:	fbb7 f9f2 	udiv	r9, r7, r2
 800e87c:	fb02 7919 	mls	r9, r2, r9, r7
 800e880:	fa1f f989 	uxth.w	r9, r9
 800e884:	6863      	ldr	r3, [r4, #4]
 800e886:	fbb3 f2f2 	udiv	r2, r3, r2
 800e88a:	6823      	ldr	r3, [r4, #0]
 800e88c:	9203      	str	r2, [sp, #12]
 800e88e:	fb02 f909 	mul.w	r9, r2, r9
 800e892:	f109 0904 	add.w	r9, r9, #4
 800e896:	4499      	add	r9, r3
 800e898:	7b23      	ldrb	r3, [r4, #12]
 800e89a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e89e:	4543      	cmp	r3, r8
 800e8a0:	f1a2 0b04 	sub.w	fp, r2, #4
 800e8a4:	d37a      	bcc.n	800e99c <uxr_prepare_output_stream_fragmented+0x15c>
 800e8a6:	f1ab 0a04 	sub.w	sl, fp, #4
 800e8aa:	ebaa 0a03 	sub.w	sl, sl, r3
 800e8ae:	465a      	mov	r2, fp
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	4649      	mov	r1, r9
 800e8b4:	a808      	add	r0, sp, #32
 800e8b6:	f8cd 8000 	str.w	r8, [sp]
 800e8ba:	f7fe fa11 	bl	800cce0 <ucdr_init_buffer_origin_offset>
 800e8be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e8c0:	fa1f fa8a 	uxth.w	sl, sl
 800e8c4:	4652      	mov	r2, sl
 800e8c6:	f103 0a08 	add.w	sl, r3, #8
 800e8ca:	45da      	cmp	sl, fp
 800e8cc:	bf34      	ite	cc
 800e8ce:	2302      	movcc	r3, #2
 800e8d0:	2300      	movcs	r3, #0
 800e8d2:	210d      	movs	r1, #13
 800e8d4:	a808      	add	r0, sp, #32
 800e8d6:	f7ff fe83 	bl	800e5e0 <uxr_buffer_submessage_header>
 800e8da:	8921      	ldrh	r1, [r4, #8]
 800e8dc:	fbb7 f2f1 	udiv	r2, r7, r1
 800e8e0:	fb01 7212 	mls	r2, r1, r2, r7
 800e8e4:	b292      	uxth	r2, r2
 800e8e6:	6863      	ldr	r3, [r4, #4]
 800e8e8:	fbb3 f3f1 	udiv	r3, r3, r1
 800e8ec:	fb02 f303 	mul.w	r3, r2, r3
 800e8f0:	6822      	ldr	r2, [r4, #0]
 800e8f2:	4638      	mov	r0, r7
 800e8f4:	f842 b003 	str.w	fp, [r2, r3]
 800e8f8:	2101      	movs	r1, #1
 800e8fa:	f006 fe37 	bl	801556c <uxr_seq_num_add>
 800e8fe:	9b03      	ldr	r3, [sp, #12]
 800e900:	f108 0104 	add.w	r1, r8, #4
 800e904:	f1a3 0208 	sub.w	r2, r3, #8
 800e908:	eba2 0208 	sub.w	r2, r2, r8
 800e90c:	4449      	add	r1, r9
 800e90e:	4607      	mov	r7, r0
 800e910:	4630      	mov	r0, r6
 800e912:	f7fe f9f7 	bl	800cd04 <ucdr_init_buffer>
 800e916:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e918:	81e7      	strh	r7, [r4, #14]
 800e91a:	1d1a      	adds	r2, r3, #4
 800e91c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800e920:	bf28      	it	cs
 800e922:	2200      	movcs	r2, #0
 800e924:	2300      	movs	r3, #0
 800e926:	b292      	uxth	r2, r2
 800e928:	2107      	movs	r1, #7
 800e92a:	4630      	mov	r0, r6
 800e92c:	f7ff fe58 	bl	800e5e0 <uxr_buffer_submessage_header>
 800e930:	9904      	ldr	r1, [sp, #16]
 800e932:	aa07      	add	r2, sp, #28
 800e934:	4628      	mov	r0, r5
 800e936:	f7ff fceb 	bl	800e310 <uxr_init_base_object_request>
 800e93a:	4604      	mov	r4, r0
 800e93c:	b318      	cbz	r0, 800e986 <uxr_prepare_output_stream_fragmented+0x146>
 800e93e:	a907      	add	r1, sp, #28
 800e940:	4630      	mov	r0, r6
 800e942:	f000 fff9 	bl	800f938 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e946:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800e94a:	4630      	mov	r0, r6
 800e94c:	1a52      	subs	r2, r2, r1
 800e94e:	f7fe f9d9 	bl	800cd04 <ucdr_init_buffer>
 800e952:	9b05      	ldr	r3, [sp, #20]
 800e954:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800e958:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e95a:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800e95e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e960:	491b      	ldr	r1, [pc, #108]	; (800e9d0 <uxr_prepare_output_stream_fragmented+0x190>)
 800e962:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 800e966:	4630      	mov	r0, r6
 800e968:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800e96c:	462a      	mov	r2, r5
 800e96e:	f7fe f99d 	bl	800ccac <ucdr_set_on_full_buffer_callback>
 800e972:	4620      	mov	r0, r4
 800e974:	b011      	add	sp, #68	; 0x44
 800e976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e97a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e97c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e97e:	4628      	mov	r0, r5
 800e980:	4798      	blx	r3
 800e982:	b920      	cbnz	r0, 800e98e <uxr_prepare_output_stream_fragmented+0x14e>
 800e984:	2400      	movs	r4, #0
 800e986:	4620      	mov	r0, r4
 800e988:	b011      	add	sp, #68	; 0x44
 800e98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e98e:	4620      	mov	r0, r4
 800e990:	f006 fc9c 	bl	80152cc <get_available_free_slots>
 800e994:	2800      	cmp	r0, #0
 800e996:	f47f af6d 	bne.w	800e874 <uxr_prepare_output_stream_fragmented+0x34>
 800e99a:	e7f3      	b.n	800e984 <uxr_prepare_output_stream_fragmented+0x144>
 800e99c:	4638      	mov	r0, r7
 800e99e:	2101      	movs	r1, #1
 800e9a0:	f006 fde4 	bl	801556c <uxr_seq_num_add>
 800e9a4:	8921      	ldrh	r1, [r4, #8]
 800e9a6:	fbb0 f2f1 	udiv	r2, r0, r1
 800e9aa:	fb01 0912 	mls	r9, r1, r2, r0
 800e9ae:	fa1f f289 	uxth.w	r2, r9
 800e9b2:	6863      	ldr	r3, [r4, #4]
 800e9b4:	fbb3 f9f1 	udiv	r9, r3, r1
 800e9b8:	6823      	ldr	r3, [r4, #0]
 800e9ba:	fb02 f909 	mul.w	r9, r2, r9
 800e9be:	f109 0904 	add.w	r9, r9, #4
 800e9c2:	4499      	add	r9, r3
 800e9c4:	4607      	mov	r7, r0
 800e9c6:	7b23      	ldrb	r3, [r4, #12]
 800e9c8:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e9cc:	e76b      	b.n	800e8a6 <uxr_prepare_output_stream_fragmented+0x66>
 800e9ce:	bf00      	nop
 800e9d0:	0800e6cd 	.word	0x0800e6cd

0800e9d4 <uxr_serialize_message_header>:
 800e9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	4616      	mov	r6, r2
 800e9da:	4604      	mov	r4, r0
 800e9dc:	9301      	str	r3, [sp, #4]
 800e9de:	460d      	mov	r5, r1
 800e9e0:	9f08      	ldr	r7, [sp, #32]
 800e9e2:	f7fd f9e3 	bl	800bdac <ucdr_serialize_uint8_t>
 800e9e6:	4631      	mov	r1, r6
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	f7fd f9df 	bl	800bdac <ucdr_serialize_uint8_t>
 800e9ee:	9a01      	ldr	r2, [sp, #4]
 800e9f0:	2101      	movs	r1, #1
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	f7fd fa86 	bl	800bf04 <ucdr_serialize_endian_uint16_t>
 800e9f8:	062b      	lsls	r3, r5, #24
 800e9fa:	d501      	bpl.n	800ea00 <uxr_serialize_message_header+0x2c>
 800e9fc:	b003      	add	sp, #12
 800e9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea00:	2204      	movs	r2, #4
 800ea02:	4639      	mov	r1, r7
 800ea04:	4620      	mov	r0, r4
 800ea06:	b003      	add	sp, #12
 800ea08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ea0c:	f005 bd3c 	b.w	8014488 <ucdr_serialize_array_uint8_t>

0800ea10 <uxr_deserialize_message_header>:
 800ea10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea12:	b083      	sub	sp, #12
 800ea14:	4616      	mov	r6, r2
 800ea16:	4604      	mov	r4, r0
 800ea18:	9301      	str	r3, [sp, #4]
 800ea1a:	460d      	mov	r5, r1
 800ea1c:	9f08      	ldr	r7, [sp, #32]
 800ea1e:	f7fd f9db 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800ea22:	4631      	mov	r1, r6
 800ea24:	4620      	mov	r0, r4
 800ea26:	f7fd f9d7 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800ea2a:	9a01      	ldr	r2, [sp, #4]
 800ea2c:	2101      	movs	r1, #1
 800ea2e:	4620      	mov	r0, r4
 800ea30:	f7fd fb5c 	bl	800c0ec <ucdr_deserialize_endian_uint16_t>
 800ea34:	f995 3000 	ldrsb.w	r3, [r5]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	da01      	bge.n	800ea40 <uxr_deserialize_message_header+0x30>
 800ea3c:	b003      	add	sp, #12
 800ea3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea40:	2204      	movs	r2, #4
 800ea42:	4639      	mov	r1, r7
 800ea44:	4620      	mov	r0, r4
 800ea46:	b003      	add	sp, #12
 800ea48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ea4c:	f005 bd80 	b.w	8014550 <ucdr_deserialize_array_uint8_t>

0800ea50 <uxr_serialize_submessage_header>:
 800ea50:	b530      	push	{r4, r5, lr}
 800ea52:	b083      	sub	sp, #12
 800ea54:	4615      	mov	r5, r2
 800ea56:	4604      	mov	r4, r0
 800ea58:	9301      	str	r3, [sp, #4]
 800ea5a:	f7fd f9a7 	bl	800bdac <ucdr_serialize_uint8_t>
 800ea5e:	4629      	mov	r1, r5
 800ea60:	4620      	mov	r0, r4
 800ea62:	f7fd f9a3 	bl	800bdac <ucdr_serialize_uint8_t>
 800ea66:	9a01      	ldr	r2, [sp, #4]
 800ea68:	2101      	movs	r1, #1
 800ea6a:	4620      	mov	r0, r4
 800ea6c:	b003      	add	sp, #12
 800ea6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea72:	f7fd ba47 	b.w	800bf04 <ucdr_serialize_endian_uint16_t>
 800ea76:	bf00      	nop

0800ea78 <uxr_deserialize_submessage_header>:
 800ea78:	b530      	push	{r4, r5, lr}
 800ea7a:	b083      	sub	sp, #12
 800ea7c:	4615      	mov	r5, r2
 800ea7e:	4604      	mov	r4, r0
 800ea80:	9301      	str	r3, [sp, #4]
 800ea82:	f7fd f9a9 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800ea86:	4629      	mov	r1, r5
 800ea88:	4620      	mov	r0, r4
 800ea8a:	f7fd f9a5 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800ea8e:	9a01      	ldr	r2, [sp, #4]
 800ea90:	2101      	movs	r1, #1
 800ea92:	4620      	mov	r0, r4
 800ea94:	b003      	add	sp, #12
 800ea96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea9a:	f7fd bb27 	b.w	800c0ec <ucdr_deserialize_endian_uint16_t>
 800ea9e:	bf00      	nop

0800eaa0 <uxr_serialize_CLIENT_Representation>:
 800eaa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaa4:	2204      	movs	r2, #4
 800eaa6:	460e      	mov	r6, r1
 800eaa8:	4605      	mov	r5, r0
 800eaaa:	f005 fced 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800eaae:	2202      	movs	r2, #2
 800eab0:	4607      	mov	r7, r0
 800eab2:	1d31      	adds	r1, r6, #4
 800eab4:	4628      	mov	r0, r5
 800eab6:	f005 fce7 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800eaba:	4038      	ands	r0, r7
 800eabc:	2202      	movs	r2, #2
 800eabe:	1db1      	adds	r1, r6, #6
 800eac0:	b2c7      	uxtb	r7, r0
 800eac2:	4628      	mov	r0, r5
 800eac4:	f005 fce0 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800eac8:	2204      	movs	r2, #4
 800eaca:	4007      	ands	r7, r0
 800eacc:	f106 0108 	add.w	r1, r6, #8
 800ead0:	4628      	mov	r0, r5
 800ead2:	f005 fcd9 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800ead6:	7b31      	ldrb	r1, [r6, #12]
 800ead8:	4007      	ands	r7, r0
 800eada:	4628      	mov	r0, r5
 800eadc:	f7fd f966 	bl	800bdac <ucdr_serialize_uint8_t>
 800eae0:	7b71      	ldrb	r1, [r6, #13]
 800eae2:	4007      	ands	r7, r0
 800eae4:	4628      	mov	r0, r5
 800eae6:	f7fd f933 	bl	800bd50 <ucdr_serialize_bool>
 800eaea:	7b73      	ldrb	r3, [r6, #13]
 800eaec:	ea07 0800 	and.w	r8, r7, r0
 800eaf0:	b93b      	cbnz	r3, 800eb02 <uxr_serialize_CLIENT_Representation+0x62>
 800eaf2:	8bb1      	ldrh	r1, [r6, #28]
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	f7fd f985 	bl	800be04 <ucdr_serialize_uint16_t>
 800eafa:	ea08 0000 	and.w	r0, r8, r0
 800eafe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb02:	6931      	ldr	r1, [r6, #16]
 800eb04:	4628      	mov	r0, r5
 800eb06:	f7fd fb67 	bl	800c1d8 <ucdr_serialize_uint32_t>
 800eb0a:	6933      	ldr	r3, [r6, #16]
 800eb0c:	b1e3      	cbz	r3, 800eb48 <uxr_serialize_CLIENT_Representation+0xa8>
 800eb0e:	b1c0      	cbz	r0, 800eb42 <uxr_serialize_CLIENT_Representation+0xa2>
 800eb10:	4637      	mov	r7, r6
 800eb12:	f04f 0900 	mov.w	r9, #0
 800eb16:	e001      	b.n	800eb1c <uxr_serialize_CLIENT_Representation+0x7c>
 800eb18:	3708      	adds	r7, #8
 800eb1a:	b194      	cbz	r4, 800eb42 <uxr_serialize_CLIENT_Representation+0xa2>
 800eb1c:	6979      	ldr	r1, [r7, #20]
 800eb1e:	4628      	mov	r0, r5
 800eb20:	f005 fdd2 	bl	80146c8 <ucdr_serialize_string>
 800eb24:	69b9      	ldr	r1, [r7, #24]
 800eb26:	4604      	mov	r4, r0
 800eb28:	4628      	mov	r0, r5
 800eb2a:	f005 fdcd 	bl	80146c8 <ucdr_serialize_string>
 800eb2e:	6933      	ldr	r3, [r6, #16]
 800eb30:	f109 0901 	add.w	r9, r9, #1
 800eb34:	4004      	ands	r4, r0
 800eb36:	4599      	cmp	r9, r3
 800eb38:	b2e4      	uxtb	r4, r4
 800eb3a:	d3ed      	bcc.n	800eb18 <uxr_serialize_CLIENT_Representation+0x78>
 800eb3c:	ea08 0804 	and.w	r8, r8, r4
 800eb40:	e7d7      	b.n	800eaf2 <uxr_serialize_CLIENT_Representation+0x52>
 800eb42:	f04f 0800 	mov.w	r8, #0
 800eb46:	e7d4      	b.n	800eaf2 <uxr_serialize_CLIENT_Representation+0x52>
 800eb48:	ea08 0800 	and.w	r8, r8, r0
 800eb4c:	e7d1      	b.n	800eaf2 <uxr_serialize_CLIENT_Representation+0x52>
 800eb4e:	bf00      	nop

0800eb50 <uxr_deserialize_CLIENT_Representation>:
 800eb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb54:	2204      	movs	r2, #4
 800eb56:	460c      	mov	r4, r1
 800eb58:	4605      	mov	r5, r0
 800eb5a:	f005 fcf9 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800eb5e:	2202      	movs	r2, #2
 800eb60:	4607      	mov	r7, r0
 800eb62:	1d21      	adds	r1, r4, #4
 800eb64:	4628      	mov	r0, r5
 800eb66:	f005 fcf3 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800eb6a:	4038      	ands	r0, r7
 800eb6c:	2202      	movs	r2, #2
 800eb6e:	1da1      	adds	r1, r4, #6
 800eb70:	b2c6      	uxtb	r6, r0
 800eb72:	4628      	mov	r0, r5
 800eb74:	f005 fcec 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800eb78:	2204      	movs	r2, #4
 800eb7a:	4006      	ands	r6, r0
 800eb7c:	f104 0108 	add.w	r1, r4, #8
 800eb80:	4628      	mov	r0, r5
 800eb82:	f005 fce5 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800eb86:	f104 010c 	add.w	r1, r4, #12
 800eb8a:	4006      	ands	r6, r0
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	f7fd f923 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800eb92:	f104 010d 	add.w	r1, r4, #13
 800eb96:	ea06 0700 	and.w	r7, r6, r0
 800eb9a:	4628      	mov	r0, r5
 800eb9c:	f7fd f8ee 	bl	800bd7c <ucdr_deserialize_bool>
 800eba0:	7b63      	ldrb	r3, [r4, #13]
 800eba2:	4007      	ands	r7, r0
 800eba4:	b93b      	cbnz	r3, 800ebb6 <uxr_deserialize_CLIENT_Representation+0x66>
 800eba6:	f104 011c 	add.w	r1, r4, #28
 800ebaa:	4628      	mov	r0, r5
 800ebac:	f7fd fa2a 	bl	800c004 <ucdr_deserialize_uint16_t>
 800ebb0:	4038      	ands	r0, r7
 800ebb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebb6:	f104 0110 	add.w	r1, r4, #16
 800ebba:	4628      	mov	r0, r5
 800ebbc:	f7fd fc3c 	bl	800c438 <ucdr_deserialize_uint32_t>
 800ebc0:	6923      	ldr	r3, [r4, #16]
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	d903      	bls.n	800ebce <uxr_deserialize_CLIENT_Representation+0x7e>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	75ab      	strb	r3, [r5, #22]
 800ebca:	2700      	movs	r7, #0
 800ebcc:	e7eb      	b.n	800eba6 <uxr_deserialize_CLIENT_Representation+0x56>
 800ebce:	b30b      	cbz	r3, 800ec14 <uxr_deserialize_CLIENT_Representation+0xc4>
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	d0fa      	beq.n	800ebca <uxr_deserialize_CLIENT_Representation+0x7a>
 800ebd4:	46a0      	mov	r8, r4
 800ebd6:	f04f 0900 	mov.w	r9, #0
 800ebda:	e001      	b.n	800ebe0 <uxr_deserialize_CLIENT_Representation+0x90>
 800ebdc:	2e00      	cmp	r6, #0
 800ebde:	d0f4      	beq.n	800ebca <uxr_deserialize_CLIENT_Representation+0x7a>
 800ebe0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ebe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ebe8:	4628      	mov	r0, r5
 800ebea:	f005 fd7d 	bl	80146e8 <ucdr_deserialize_string>
 800ebee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ebf2:	4606      	mov	r6, r0
 800ebf4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	f005 fd75 	bl	80146e8 <ucdr_deserialize_string>
 800ebfe:	6923      	ldr	r3, [r4, #16]
 800ec00:	f109 0901 	add.w	r9, r9, #1
 800ec04:	4006      	ands	r6, r0
 800ec06:	4599      	cmp	r9, r3
 800ec08:	f108 0808 	add.w	r8, r8, #8
 800ec0c:	b2f6      	uxtb	r6, r6
 800ec0e:	d3e5      	bcc.n	800ebdc <uxr_deserialize_CLIENT_Representation+0x8c>
 800ec10:	4037      	ands	r7, r6
 800ec12:	e7c8      	b.n	800eba6 <uxr_deserialize_CLIENT_Representation+0x56>
 800ec14:	4007      	ands	r7, r0
 800ec16:	e7c6      	b.n	800eba6 <uxr_deserialize_CLIENT_Representation+0x56>

0800ec18 <uxr_serialize_AGENT_Representation>:
 800ec18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec1c:	2204      	movs	r2, #4
 800ec1e:	460f      	mov	r7, r1
 800ec20:	4605      	mov	r5, r0
 800ec22:	f005 fc31 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800ec26:	2202      	movs	r2, #2
 800ec28:	4604      	mov	r4, r0
 800ec2a:	1d39      	adds	r1, r7, #4
 800ec2c:	4628      	mov	r0, r5
 800ec2e:	f005 fc2b 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800ec32:	4020      	ands	r0, r4
 800ec34:	2202      	movs	r2, #2
 800ec36:	1db9      	adds	r1, r7, #6
 800ec38:	b2c4      	uxtb	r4, r0
 800ec3a:	4628      	mov	r0, r5
 800ec3c:	f005 fc24 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800ec40:	7a39      	ldrb	r1, [r7, #8]
 800ec42:	4004      	ands	r4, r0
 800ec44:	4628      	mov	r0, r5
 800ec46:	f7fd f883 	bl	800bd50 <ucdr_serialize_bool>
 800ec4a:	7a3b      	ldrb	r3, [r7, #8]
 800ec4c:	ea00 0804 	and.w	r8, r0, r4
 800ec50:	b913      	cbnz	r3, 800ec58 <uxr_serialize_AGENT_Representation+0x40>
 800ec52:	4640      	mov	r0, r8
 800ec54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec58:	68f9      	ldr	r1, [r7, #12]
 800ec5a:	4628      	mov	r0, r5
 800ec5c:	f7fd fabc 	bl	800c1d8 <ucdr_serialize_uint32_t>
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	b303      	cbz	r3, 800eca6 <uxr_serialize_AGENT_Representation+0x8e>
 800ec64:	b1d0      	cbz	r0, 800ec9c <uxr_serialize_AGENT_Representation+0x84>
 800ec66:	463e      	mov	r6, r7
 800ec68:	f04f 0900 	mov.w	r9, #0
 800ec6c:	e001      	b.n	800ec72 <uxr_serialize_AGENT_Representation+0x5a>
 800ec6e:	3608      	adds	r6, #8
 800ec70:	b1a4      	cbz	r4, 800ec9c <uxr_serialize_AGENT_Representation+0x84>
 800ec72:	6931      	ldr	r1, [r6, #16]
 800ec74:	4628      	mov	r0, r5
 800ec76:	f005 fd27 	bl	80146c8 <ucdr_serialize_string>
 800ec7a:	6971      	ldr	r1, [r6, #20]
 800ec7c:	4604      	mov	r4, r0
 800ec7e:	4628      	mov	r0, r5
 800ec80:	f005 fd22 	bl	80146c8 <ucdr_serialize_string>
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f109 0901 	add.w	r9, r9, #1
 800ec8a:	4004      	ands	r4, r0
 800ec8c:	4599      	cmp	r9, r3
 800ec8e:	b2e4      	uxtb	r4, r4
 800ec90:	d3ed      	bcc.n	800ec6e <uxr_serialize_AGENT_Representation+0x56>
 800ec92:	ea08 0804 	and.w	r8, r8, r4
 800ec96:	4640      	mov	r0, r8
 800ec98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec9c:	f04f 0800 	mov.w	r8, #0
 800eca0:	4640      	mov	r0, r8
 800eca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eca6:	ea08 0800 	and.w	r8, r8, r0
 800ecaa:	e7d2      	b.n	800ec52 <uxr_serialize_AGENT_Representation+0x3a>

0800ecac <uxr_serialize_DATAWRITER_Representation>:
 800ecac:	b570      	push	{r4, r5, r6, lr}
 800ecae:	460d      	mov	r5, r1
 800ecb0:	7809      	ldrb	r1, [r1, #0]
 800ecb2:	4606      	mov	r6, r0
 800ecb4:	f7fd f87a 	bl	800bdac <ucdr_serialize_uint8_t>
 800ecb8:	4604      	mov	r4, r0
 800ecba:	b130      	cbz	r0, 800ecca <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ecbc:	782b      	ldrb	r3, [r5, #0]
 800ecbe:	2b02      	cmp	r3, #2
 800ecc0:	d00c      	beq.n	800ecdc <uxr_serialize_DATAWRITER_Representation+0x30>
 800ecc2:	2b03      	cmp	r3, #3
 800ecc4:	d010      	beq.n	800ece8 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d008      	beq.n	800ecdc <uxr_serialize_DATAWRITER_Representation+0x30>
 800ecca:	2202      	movs	r2, #2
 800eccc:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800ecd0:	4630      	mov	r0, r6
 800ecd2:	f005 fbd9 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800ecd6:	4020      	ands	r0, r4
 800ecd8:	b2c0      	uxtb	r0, r0
 800ecda:	bd70      	pop	{r4, r5, r6, pc}
 800ecdc:	6869      	ldr	r1, [r5, #4]
 800ecde:	4630      	mov	r0, r6
 800ece0:	f005 fcf2 	bl	80146c8 <ucdr_serialize_string>
 800ece4:	4604      	mov	r4, r0
 800ece6:	e7f0      	b.n	800ecca <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ece8:	4629      	mov	r1, r5
 800ecea:	4630      	mov	r0, r6
 800ecec:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800ecf0:	3104      	adds	r1, #4
 800ecf2:	f005 fcbd 	bl	8014670 <ucdr_serialize_sequence_uint8_t>
 800ecf6:	4604      	mov	r4, r0
 800ecf8:	e7e7      	b.n	800ecca <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ecfa:	bf00      	nop

0800ecfc <uxr_serialize_ObjectVariant.part.0>:
 800ecfc:	b570      	push	{r4, r5, r6, lr}
 800ecfe:	780b      	ldrb	r3, [r1, #0]
 800ed00:	3b01      	subs	r3, #1
 800ed02:	460c      	mov	r4, r1
 800ed04:	4605      	mov	r5, r0
 800ed06:	2b0d      	cmp	r3, #13
 800ed08:	d854      	bhi.n	800edb4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800ed0a:	e8df f003 	tbb	[pc, r3]
 800ed0e:	0730      	.short	0x0730
 800ed10:	07071b1b 	.word	0x07071b1b
 800ed14:	0c530707 	.word	0x0c530707
 800ed18:	494e0c0c 	.word	0x494e0c0c
 800ed1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed20:	3104      	adds	r1, #4
 800ed22:	f7ff bfc3 	b.w	800ecac <uxr_serialize_DATAWRITER_Representation>
 800ed26:	7909      	ldrb	r1, [r1, #4]
 800ed28:	f7fd f840 	bl	800bdac <ucdr_serialize_uint8_t>
 800ed2c:	b1e8      	cbz	r0, 800ed6a <uxr_serialize_ObjectVariant.part.0+0x6e>
 800ed2e:	7923      	ldrb	r3, [r4, #4]
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d001      	beq.n	800ed38 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	d13d      	bne.n	800edb4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800ed38:	68a1      	ldr	r1, [r4, #8]
 800ed3a:	4628      	mov	r0, r5
 800ed3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed40:	f005 bcc2 	b.w	80146c8 <ucdr_serialize_string>
 800ed44:	7909      	ldrb	r1, [r1, #4]
 800ed46:	f7fd f831 	bl	800bdac <ucdr_serialize_uint8_t>
 800ed4a:	4606      	mov	r6, r0
 800ed4c:	b120      	cbz	r0, 800ed58 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800ed4e:	7923      	ldrb	r3, [r4, #4]
 800ed50:	2b02      	cmp	r3, #2
 800ed52:	d039      	beq.n	800edc8 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800ed54:	2b03      	cmp	r3, #3
 800ed56:	d02f      	beq.n	800edb8 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800ed58:	2202      	movs	r2, #2
 800ed5a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800ed5e:	4628      	mov	r0, r5
 800ed60:	f005 fb92 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800ed64:	4030      	ands	r0, r6
 800ed66:	b2c0      	uxtb	r0, r0
 800ed68:	bd70      	pop	{r4, r5, r6, pc}
 800ed6a:	2000      	movs	r0, #0
 800ed6c:	bd70      	pop	{r4, r5, r6, pc}
 800ed6e:	7909      	ldrb	r1, [r1, #4]
 800ed70:	f7fd f81c 	bl	800bdac <ucdr_serialize_uint8_t>
 800ed74:	4606      	mov	r6, r0
 800ed76:	b158      	cbz	r0, 800ed90 <uxr_serialize_ObjectVariant.part.0+0x94>
 800ed78:	7923      	ldrb	r3, [r4, #4]
 800ed7a:	2b02      	cmp	r3, #2
 800ed7c:	d003      	beq.n	800ed86 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800ed7e:	2b03      	cmp	r3, #3
 800ed80:	d028      	beq.n	800edd4 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800ed82:	2b01      	cmp	r3, #1
 800ed84:	d104      	bne.n	800ed90 <uxr_serialize_ObjectVariant.part.0+0x94>
 800ed86:	68a1      	ldr	r1, [r4, #8]
 800ed88:	4628      	mov	r0, r5
 800ed8a:	f005 fc9d 	bl	80146c8 <ucdr_serialize_string>
 800ed8e:	4606      	mov	r6, r0
 800ed90:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800ed94:	4628      	mov	r0, r5
 800ed96:	f7fd fd45 	bl	800c824 <ucdr_serialize_int16_t>
 800ed9a:	4030      	ands	r0, r6
 800ed9c:	b2c0      	uxtb	r0, r0
 800ed9e:	bd70      	pop	{r4, r5, r6, pc}
 800eda0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eda4:	3104      	adds	r1, #4
 800eda6:	f7ff be7b 	b.w	800eaa0 <uxr_serialize_CLIENT_Representation>
 800edaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800edae:	3104      	adds	r1, #4
 800edb0:	f7ff bf32 	b.w	800ec18 <uxr_serialize_AGENT_Representation>
 800edb4:	2001      	movs	r0, #1
 800edb6:	bd70      	pop	{r4, r5, r6, pc}
 800edb8:	68a2      	ldr	r2, [r4, #8]
 800edba:	f104 010c 	add.w	r1, r4, #12
 800edbe:	4628      	mov	r0, r5
 800edc0:	f005 fc56 	bl	8014670 <ucdr_serialize_sequence_uint8_t>
 800edc4:	4606      	mov	r6, r0
 800edc6:	e7c7      	b.n	800ed58 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800edc8:	68a1      	ldr	r1, [r4, #8]
 800edca:	4628      	mov	r0, r5
 800edcc:	f005 fc7c 	bl	80146c8 <ucdr_serialize_string>
 800edd0:	4606      	mov	r6, r0
 800edd2:	e7c1      	b.n	800ed58 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800edd4:	68a2      	ldr	r2, [r4, #8]
 800edd6:	f104 010c 	add.w	r1, r4, #12
 800edda:	4628      	mov	r0, r5
 800eddc:	f005 fc48 	bl	8014670 <ucdr_serialize_sequence_uint8_t>
 800ede0:	4606      	mov	r6, r0
 800ede2:	e7d5      	b.n	800ed90 <uxr_serialize_ObjectVariant.part.0+0x94>

0800ede4 <uxr_deserialize_DATAWRITER_Representation>:
 800ede4:	b570      	push	{r4, r5, r6, lr}
 800ede6:	4606      	mov	r6, r0
 800ede8:	460d      	mov	r5, r1
 800edea:	f7fc fff5 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800edee:	4604      	mov	r4, r0
 800edf0:	b130      	cbz	r0, 800ee00 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800edf2:	782b      	ldrb	r3, [r5, #0]
 800edf4:	2b02      	cmp	r3, #2
 800edf6:	d00c      	beq.n	800ee12 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800edf8:	2b03      	cmp	r3, #3
 800edfa:	d012      	beq.n	800ee22 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d008      	beq.n	800ee12 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800ee00:	2202      	movs	r2, #2
 800ee02:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800ee06:	4630      	mov	r0, r6
 800ee08:	f005 fba2 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800ee0c:	4020      	ands	r0, r4
 800ee0e:	b2c0      	uxtb	r0, r0
 800ee10:	bd70      	pop	{r4, r5, r6, pc}
 800ee12:	6869      	ldr	r1, [r5, #4]
 800ee14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee18:	4630      	mov	r0, r6
 800ee1a:	f005 fc65 	bl	80146e8 <ucdr_deserialize_string>
 800ee1e:	4604      	mov	r4, r0
 800ee20:	e7ee      	b.n	800ee00 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ee22:	1d2b      	adds	r3, r5, #4
 800ee24:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee28:	f105 0108 	add.w	r1, r5, #8
 800ee2c:	4630      	mov	r0, r6
 800ee2e:	f005 fc31 	bl	8014694 <ucdr_deserialize_sequence_uint8_t>
 800ee32:	4604      	mov	r4, r0
 800ee34:	e7e4      	b.n	800ee00 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ee36:	bf00      	nop

0800ee38 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800ee38:	b570      	push	{r4, r5, r6, lr}
 800ee3a:	460d      	mov	r5, r1
 800ee3c:	7809      	ldrb	r1, [r1, #0]
 800ee3e:	4606      	mov	r6, r0
 800ee40:	f7fc ff86 	bl	800bd50 <ucdr_serialize_bool>
 800ee44:	782b      	ldrb	r3, [r5, #0]
 800ee46:	4604      	mov	r4, r0
 800ee48:	b94b      	cbnz	r3, 800ee5e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800ee4a:	7a29      	ldrb	r1, [r5, #8]
 800ee4c:	4630      	mov	r0, r6
 800ee4e:	f7fc ff7f 	bl	800bd50 <ucdr_serialize_bool>
 800ee52:	7a2b      	ldrb	r3, [r5, #8]
 800ee54:	4004      	ands	r4, r0
 800ee56:	b2e4      	uxtb	r4, r4
 800ee58:	b943      	cbnz	r3, 800ee6c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	bd70      	pop	{r4, r5, r6, pc}
 800ee5e:	6869      	ldr	r1, [r5, #4]
 800ee60:	4630      	mov	r0, r6
 800ee62:	f005 fc31 	bl	80146c8 <ucdr_serialize_string>
 800ee66:	4004      	ands	r4, r0
 800ee68:	b2e4      	uxtb	r4, r4
 800ee6a:	e7ee      	b.n	800ee4a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800ee6c:	68e9      	ldr	r1, [r5, #12]
 800ee6e:	4630      	mov	r0, r6
 800ee70:	f005 fc2a 	bl	80146c8 <ucdr_serialize_string>
 800ee74:	4004      	ands	r4, r0
 800ee76:	4620      	mov	r0, r4
 800ee78:	bd70      	pop	{r4, r5, r6, pc}
 800ee7a:	bf00      	nop

0800ee7c <uxr_serialize_OBJK_Topic_Binary>:
 800ee7c:	b570      	push	{r4, r5, r6, lr}
 800ee7e:	460d      	mov	r5, r1
 800ee80:	6809      	ldr	r1, [r1, #0]
 800ee82:	4606      	mov	r6, r0
 800ee84:	f005 fc20 	bl	80146c8 <ucdr_serialize_string>
 800ee88:	7929      	ldrb	r1, [r5, #4]
 800ee8a:	4604      	mov	r4, r0
 800ee8c:	4630      	mov	r0, r6
 800ee8e:	f7fc ff5f 	bl	800bd50 <ucdr_serialize_bool>
 800ee92:	792b      	ldrb	r3, [r5, #4]
 800ee94:	4004      	ands	r4, r0
 800ee96:	b2e4      	uxtb	r4, r4
 800ee98:	b943      	cbnz	r3, 800eeac <uxr_serialize_OBJK_Topic_Binary+0x30>
 800ee9a:	7b29      	ldrb	r1, [r5, #12]
 800ee9c:	4630      	mov	r0, r6
 800ee9e:	f7fc ff57 	bl	800bd50 <ucdr_serialize_bool>
 800eea2:	7b2b      	ldrb	r3, [r5, #12]
 800eea4:	4004      	ands	r4, r0
 800eea6:	b93b      	cbnz	r3, 800eeb8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800eea8:	4620      	mov	r0, r4
 800eeaa:	bd70      	pop	{r4, r5, r6, pc}
 800eeac:	68a9      	ldr	r1, [r5, #8]
 800eeae:	4630      	mov	r0, r6
 800eeb0:	f005 fc0a 	bl	80146c8 <ucdr_serialize_string>
 800eeb4:	4004      	ands	r4, r0
 800eeb6:	e7f0      	b.n	800ee9a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800eeb8:	6929      	ldr	r1, [r5, #16]
 800eeba:	4630      	mov	r0, r6
 800eebc:	f005 fc04 	bl	80146c8 <ucdr_serialize_string>
 800eec0:	4004      	ands	r4, r0
 800eec2:	b2e4      	uxtb	r4, r4
 800eec4:	4620      	mov	r0, r4
 800eec6:	bd70      	pop	{r4, r5, r6, pc}

0800eec8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800eec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eecc:	460c      	mov	r4, r1
 800eece:	7809      	ldrb	r1, [r1, #0]
 800eed0:	4606      	mov	r6, r0
 800eed2:	f7fc ff3d 	bl	800bd50 <ucdr_serialize_bool>
 800eed6:	7823      	ldrb	r3, [r4, #0]
 800eed8:	4605      	mov	r5, r0
 800eeda:	b96b      	cbnz	r3, 800eef8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800eedc:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800eee0:	4630      	mov	r0, r6
 800eee2:	f7fc ff35 	bl	800bd50 <ucdr_serialize_bool>
 800eee6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800eeea:	4005      	ands	r5, r0
 800eeec:	b2ed      	uxtb	r5, r5
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d169      	bne.n	800efc6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800eef2:	4628      	mov	r0, r5
 800eef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eef8:	6861      	ldr	r1, [r4, #4]
 800eefa:	4630      	mov	r0, r6
 800eefc:	f7fd f96c 	bl	800c1d8 <ucdr_serialize_uint32_t>
 800ef00:	6863      	ldr	r3, [r4, #4]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d06b      	beq.n	800efde <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800ef06:	2800      	cmp	r0, #0
 800ef08:	d067      	beq.n	800efda <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ef0a:	68a1      	ldr	r1, [r4, #8]
 800ef0c:	4630      	mov	r0, r6
 800ef0e:	f005 fbdb 	bl	80146c8 <ucdr_serialize_string>
 800ef12:	6863      	ldr	r3, [r4, #4]
 800ef14:	2b01      	cmp	r3, #1
 800ef16:	d953      	bls.n	800efc0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	d05e      	beq.n	800efda <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ef1c:	68e1      	ldr	r1, [r4, #12]
 800ef1e:	4630      	mov	r0, r6
 800ef20:	f005 fbd2 	bl	80146c8 <ucdr_serialize_string>
 800ef24:	6863      	ldr	r3, [r4, #4]
 800ef26:	2b02      	cmp	r3, #2
 800ef28:	d94a      	bls.n	800efc0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ef2a:	2800      	cmp	r0, #0
 800ef2c:	d055      	beq.n	800efda <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ef2e:	6921      	ldr	r1, [r4, #16]
 800ef30:	4630      	mov	r0, r6
 800ef32:	f005 fbc9 	bl	80146c8 <ucdr_serialize_string>
 800ef36:	6863      	ldr	r3, [r4, #4]
 800ef38:	2b03      	cmp	r3, #3
 800ef3a:	d941      	bls.n	800efc0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ef3c:	2800      	cmp	r0, #0
 800ef3e:	d04c      	beq.n	800efda <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ef40:	6961      	ldr	r1, [r4, #20]
 800ef42:	4630      	mov	r0, r6
 800ef44:	f005 fbc0 	bl	80146c8 <ucdr_serialize_string>
 800ef48:	6863      	ldr	r3, [r4, #4]
 800ef4a:	2b04      	cmp	r3, #4
 800ef4c:	d938      	bls.n	800efc0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	d043      	beq.n	800efda <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ef52:	69a1      	ldr	r1, [r4, #24]
 800ef54:	4630      	mov	r0, r6
 800ef56:	f005 fbb7 	bl	80146c8 <ucdr_serialize_string>
 800ef5a:	6863      	ldr	r3, [r4, #4]
 800ef5c:	2b05      	cmp	r3, #5
 800ef5e:	d92f      	bls.n	800efc0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ef60:	2800      	cmp	r0, #0
 800ef62:	d03a      	beq.n	800efda <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ef64:	69e1      	ldr	r1, [r4, #28]
 800ef66:	4630      	mov	r0, r6
 800ef68:	f005 fbae 	bl	80146c8 <ucdr_serialize_string>
 800ef6c:	6863      	ldr	r3, [r4, #4]
 800ef6e:	2b06      	cmp	r3, #6
 800ef70:	d926      	bls.n	800efc0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ef72:	b390      	cbz	r0, 800efda <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ef74:	6a21      	ldr	r1, [r4, #32]
 800ef76:	4630      	mov	r0, r6
 800ef78:	f005 fba6 	bl	80146c8 <ucdr_serialize_string>
 800ef7c:	6863      	ldr	r3, [r4, #4]
 800ef7e:	2b07      	cmp	r3, #7
 800ef80:	d91e      	bls.n	800efc0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ef82:	b350      	cbz	r0, 800efda <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ef84:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ef86:	4630      	mov	r0, r6
 800ef88:	f005 fb9e 	bl	80146c8 <ucdr_serialize_string>
 800ef8c:	6863      	ldr	r3, [r4, #4]
 800ef8e:	2b08      	cmp	r3, #8
 800ef90:	d916      	bls.n	800efc0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ef92:	b310      	cbz	r0, 800efda <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ef94:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ef96:	4630      	mov	r0, r6
 800ef98:	f005 fb96 	bl	80146c8 <ucdr_serialize_string>
 800ef9c:	6863      	ldr	r3, [r4, #4]
 800ef9e:	2b09      	cmp	r3, #9
 800efa0:	d90e      	bls.n	800efc0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800efa2:	b1d0      	cbz	r0, 800efda <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800efa4:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800efa8:	2709      	movs	r7, #9
 800efaa:	e000      	b.n	800efae <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800efac:	b1a8      	cbz	r0, 800efda <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800efae:	f858 1b04 	ldr.w	r1, [r8], #4
 800efb2:	4630      	mov	r0, r6
 800efb4:	f005 fb88 	bl	80146c8 <ucdr_serialize_string>
 800efb8:	6862      	ldr	r2, [r4, #4]
 800efba:	3701      	adds	r7, #1
 800efbc:	4297      	cmp	r7, r2
 800efbe:	d3f5      	bcc.n	800efac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800efc0:	4005      	ands	r5, r0
 800efc2:	b2ed      	uxtb	r5, r5
 800efc4:	e78a      	b.n	800eedc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800efc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800efc8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800efcc:	4630      	mov	r0, r6
 800efce:	f005 fb4f 	bl	8014670 <ucdr_serialize_sequence_uint8_t>
 800efd2:	4005      	ands	r5, r0
 800efd4:	4628      	mov	r0, r5
 800efd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efda:	2500      	movs	r5, #0
 800efdc:	e77e      	b.n	800eedc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800efde:	4028      	ands	r0, r5
 800efe0:	b2c5      	uxtb	r5, r0
 800efe2:	e77b      	b.n	800eedc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800efe4 <uxr_serialize_OBJK_Publisher_Binary>:
 800efe4:	b570      	push	{r4, r5, r6, lr}
 800efe6:	460d      	mov	r5, r1
 800efe8:	7809      	ldrb	r1, [r1, #0]
 800efea:	4606      	mov	r6, r0
 800efec:	f7fc feb0 	bl	800bd50 <ucdr_serialize_bool>
 800eff0:	782b      	ldrb	r3, [r5, #0]
 800eff2:	4604      	mov	r4, r0
 800eff4:	b94b      	cbnz	r3, 800f00a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800eff6:	7a29      	ldrb	r1, [r5, #8]
 800eff8:	4630      	mov	r0, r6
 800effa:	f7fc fea9 	bl	800bd50 <ucdr_serialize_bool>
 800effe:	7a2b      	ldrb	r3, [r5, #8]
 800f000:	4004      	ands	r4, r0
 800f002:	b2e4      	uxtb	r4, r4
 800f004:	b943      	cbnz	r3, 800f018 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800f006:	4620      	mov	r0, r4
 800f008:	bd70      	pop	{r4, r5, r6, pc}
 800f00a:	6869      	ldr	r1, [r5, #4]
 800f00c:	4630      	mov	r0, r6
 800f00e:	f005 fb5b 	bl	80146c8 <ucdr_serialize_string>
 800f012:	4004      	ands	r4, r0
 800f014:	b2e4      	uxtb	r4, r4
 800f016:	e7ee      	b.n	800eff6 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800f018:	f105 010c 	add.w	r1, r5, #12
 800f01c:	4630      	mov	r0, r6
 800f01e:	f7ff ff53 	bl	800eec8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800f022:	4004      	ands	r4, r0
 800f024:	4620      	mov	r0, r4
 800f026:	bd70      	pop	{r4, r5, r6, pc}

0800f028 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800f028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f02c:	460c      	mov	r4, r1
 800f02e:	7809      	ldrb	r1, [r1, #0]
 800f030:	4606      	mov	r6, r0
 800f032:	f7fc fe8d 	bl	800bd50 <ucdr_serialize_bool>
 800f036:	7823      	ldrb	r3, [r4, #0]
 800f038:	4605      	mov	r5, r0
 800f03a:	b96b      	cbnz	r3, 800f058 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800f03c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800f040:	4630      	mov	r0, r6
 800f042:	f7fc fe85 	bl	800bd50 <ucdr_serialize_bool>
 800f046:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f04a:	4005      	ands	r5, r0
 800f04c:	b2ed      	uxtb	r5, r5
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d169      	bne.n	800f126 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800f052:	4628      	mov	r0, r5
 800f054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f058:	6861      	ldr	r1, [r4, #4]
 800f05a:	4630      	mov	r0, r6
 800f05c:	f7fd f8bc 	bl	800c1d8 <ucdr_serialize_uint32_t>
 800f060:	6863      	ldr	r3, [r4, #4]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d06b      	beq.n	800f13e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800f066:	2800      	cmp	r0, #0
 800f068:	d067      	beq.n	800f13a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f06a:	68a1      	ldr	r1, [r4, #8]
 800f06c:	4630      	mov	r0, r6
 800f06e:	f005 fb2b 	bl	80146c8 <ucdr_serialize_string>
 800f072:	6863      	ldr	r3, [r4, #4]
 800f074:	2b01      	cmp	r3, #1
 800f076:	d953      	bls.n	800f120 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f078:	2800      	cmp	r0, #0
 800f07a:	d05e      	beq.n	800f13a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f07c:	68e1      	ldr	r1, [r4, #12]
 800f07e:	4630      	mov	r0, r6
 800f080:	f005 fb22 	bl	80146c8 <ucdr_serialize_string>
 800f084:	6863      	ldr	r3, [r4, #4]
 800f086:	2b02      	cmp	r3, #2
 800f088:	d94a      	bls.n	800f120 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f08a:	2800      	cmp	r0, #0
 800f08c:	d055      	beq.n	800f13a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f08e:	6921      	ldr	r1, [r4, #16]
 800f090:	4630      	mov	r0, r6
 800f092:	f005 fb19 	bl	80146c8 <ucdr_serialize_string>
 800f096:	6863      	ldr	r3, [r4, #4]
 800f098:	2b03      	cmp	r3, #3
 800f09a:	d941      	bls.n	800f120 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f09c:	2800      	cmp	r0, #0
 800f09e:	d04c      	beq.n	800f13a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f0a0:	6961      	ldr	r1, [r4, #20]
 800f0a2:	4630      	mov	r0, r6
 800f0a4:	f005 fb10 	bl	80146c8 <ucdr_serialize_string>
 800f0a8:	6863      	ldr	r3, [r4, #4]
 800f0aa:	2b04      	cmp	r3, #4
 800f0ac:	d938      	bls.n	800f120 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f0ae:	2800      	cmp	r0, #0
 800f0b0:	d043      	beq.n	800f13a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f0b2:	69a1      	ldr	r1, [r4, #24]
 800f0b4:	4630      	mov	r0, r6
 800f0b6:	f005 fb07 	bl	80146c8 <ucdr_serialize_string>
 800f0ba:	6863      	ldr	r3, [r4, #4]
 800f0bc:	2b05      	cmp	r3, #5
 800f0be:	d92f      	bls.n	800f120 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	d03a      	beq.n	800f13a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f0c4:	69e1      	ldr	r1, [r4, #28]
 800f0c6:	4630      	mov	r0, r6
 800f0c8:	f005 fafe 	bl	80146c8 <ucdr_serialize_string>
 800f0cc:	6863      	ldr	r3, [r4, #4]
 800f0ce:	2b06      	cmp	r3, #6
 800f0d0:	d926      	bls.n	800f120 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f0d2:	b390      	cbz	r0, 800f13a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f0d4:	6a21      	ldr	r1, [r4, #32]
 800f0d6:	4630      	mov	r0, r6
 800f0d8:	f005 faf6 	bl	80146c8 <ucdr_serialize_string>
 800f0dc:	6863      	ldr	r3, [r4, #4]
 800f0de:	2b07      	cmp	r3, #7
 800f0e0:	d91e      	bls.n	800f120 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f0e2:	b350      	cbz	r0, 800f13a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f0e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f0e6:	4630      	mov	r0, r6
 800f0e8:	f005 faee 	bl	80146c8 <ucdr_serialize_string>
 800f0ec:	6863      	ldr	r3, [r4, #4]
 800f0ee:	2b08      	cmp	r3, #8
 800f0f0:	d916      	bls.n	800f120 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f0f2:	b310      	cbz	r0, 800f13a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f0f4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f0f6:	4630      	mov	r0, r6
 800f0f8:	f005 fae6 	bl	80146c8 <ucdr_serialize_string>
 800f0fc:	6863      	ldr	r3, [r4, #4]
 800f0fe:	2b09      	cmp	r3, #9
 800f100:	d90e      	bls.n	800f120 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f102:	b1d0      	cbz	r0, 800f13a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f104:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800f108:	2709      	movs	r7, #9
 800f10a:	e000      	b.n	800f10e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800f10c:	b1a8      	cbz	r0, 800f13a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f10e:	f858 1b04 	ldr.w	r1, [r8], #4
 800f112:	4630      	mov	r0, r6
 800f114:	f005 fad8 	bl	80146c8 <ucdr_serialize_string>
 800f118:	6862      	ldr	r2, [r4, #4]
 800f11a:	3701      	adds	r7, #1
 800f11c:	4297      	cmp	r7, r2
 800f11e:	d3f5      	bcc.n	800f10c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800f120:	4005      	ands	r5, r0
 800f122:	b2ed      	uxtb	r5, r5
 800f124:	e78a      	b.n	800f03c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f126:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f128:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800f12c:	4630      	mov	r0, r6
 800f12e:	f005 fa9f 	bl	8014670 <ucdr_serialize_sequence_uint8_t>
 800f132:	4005      	ands	r5, r0
 800f134:	4628      	mov	r0, r5
 800f136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f13a:	2500      	movs	r5, #0
 800f13c:	e77e      	b.n	800f03c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f13e:	4028      	ands	r0, r5
 800f140:	b2c5      	uxtb	r5, r0
 800f142:	e77b      	b.n	800f03c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800f144 <uxr_serialize_OBJK_Subscriber_Binary>:
 800f144:	b570      	push	{r4, r5, r6, lr}
 800f146:	460d      	mov	r5, r1
 800f148:	7809      	ldrb	r1, [r1, #0]
 800f14a:	4606      	mov	r6, r0
 800f14c:	f7fc fe00 	bl	800bd50 <ucdr_serialize_bool>
 800f150:	782b      	ldrb	r3, [r5, #0]
 800f152:	4604      	mov	r4, r0
 800f154:	b94b      	cbnz	r3, 800f16a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800f156:	7a29      	ldrb	r1, [r5, #8]
 800f158:	4630      	mov	r0, r6
 800f15a:	f7fc fdf9 	bl	800bd50 <ucdr_serialize_bool>
 800f15e:	7a2b      	ldrb	r3, [r5, #8]
 800f160:	4004      	ands	r4, r0
 800f162:	b2e4      	uxtb	r4, r4
 800f164:	b943      	cbnz	r3, 800f178 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800f166:	4620      	mov	r0, r4
 800f168:	bd70      	pop	{r4, r5, r6, pc}
 800f16a:	6869      	ldr	r1, [r5, #4]
 800f16c:	4630      	mov	r0, r6
 800f16e:	f005 faab 	bl	80146c8 <ucdr_serialize_string>
 800f172:	4004      	ands	r4, r0
 800f174:	b2e4      	uxtb	r4, r4
 800f176:	e7ee      	b.n	800f156 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800f178:	f105 010c 	add.w	r1, r5, #12
 800f17c:	4630      	mov	r0, r6
 800f17e:	f7ff ff53 	bl	800f028 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800f182:	4004      	ands	r4, r0
 800f184:	4620      	mov	r0, r4
 800f186:	bd70      	pop	{r4, r5, r6, pc}

0800f188 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800f188:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800f18c:	4688      	mov	r8, r1
 800f18e:	8809      	ldrh	r1, [r1, #0]
 800f190:	4681      	mov	r9, r0
 800f192:	f7fc fe37 	bl	800be04 <ucdr_serialize_uint16_t>
 800f196:	f898 1002 	ldrb.w	r1, [r8, #2]
 800f19a:	4606      	mov	r6, r0
 800f19c:	4648      	mov	r0, r9
 800f19e:	f7fc fdd7 	bl	800bd50 <ucdr_serialize_bool>
 800f1a2:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f1a6:	4006      	ands	r6, r0
 800f1a8:	b2f5      	uxtb	r5, r6
 800f1aa:	b9eb      	cbnz	r3, 800f1e8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800f1ac:	f898 1006 	ldrb.w	r1, [r8, #6]
 800f1b0:	4648      	mov	r0, r9
 800f1b2:	f7fc fdcd 	bl	800bd50 <ucdr_serialize_bool>
 800f1b6:	f898 3006 	ldrb.w	r3, [r8, #6]
 800f1ba:	4005      	ands	r5, r0
 800f1bc:	bb7b      	cbnz	r3, 800f21e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800f1be:	f898 100c 	ldrb.w	r1, [r8, #12]
 800f1c2:	4648      	mov	r0, r9
 800f1c4:	f7fc fdc4 	bl	800bd50 <ucdr_serialize_bool>
 800f1c8:	f898 300c 	ldrb.w	r3, [r8, #12]
 800f1cc:	4005      	ands	r5, r0
 800f1ce:	b9f3      	cbnz	r3, 800f20e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800f1d0:	f898 1014 	ldrb.w	r1, [r8, #20]
 800f1d4:	4648      	mov	r0, r9
 800f1d6:	f7fc fdbb 	bl	800bd50 <ucdr_serialize_bool>
 800f1da:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f1de:	4005      	ands	r5, r0
 800f1e0:	b94b      	cbnz	r3, 800f1f6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800f1e2:	4628      	mov	r0, r5
 800f1e4:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f1e8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800f1ec:	4648      	mov	r0, r9
 800f1ee:	f7fc fe09 	bl	800be04 <ucdr_serialize_uint16_t>
 800f1f2:	4005      	ands	r5, r0
 800f1f4:	e7da      	b.n	800f1ac <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800f1f6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800f1fa:	f108 011c 	add.w	r1, r8, #28
 800f1fe:	4648      	mov	r0, r9
 800f200:	f005 fa36 	bl	8014670 <ucdr_serialize_sequence_uint8_t>
 800f204:	4028      	ands	r0, r5
 800f206:	b2c5      	uxtb	r5, r0
 800f208:	4628      	mov	r0, r5
 800f20a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f20e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f212:	4648      	mov	r0, r9
 800f214:	f7fc ffe0 	bl	800c1d8 <ucdr_serialize_uint32_t>
 800f218:	4028      	ands	r0, r5
 800f21a:	b2c5      	uxtb	r5, r0
 800f21c:	e7d8      	b.n	800f1d0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800f21e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800f222:	4648      	mov	r0, r9
 800f224:	f7fc ffd8 	bl	800c1d8 <ucdr_serialize_uint32_t>
 800f228:	4028      	ands	r0, r5
 800f22a:	b2c5      	uxtb	r5, r0
 800f22c:	e7c7      	b.n	800f1be <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800f22e:	bf00      	nop

0800f230 <uxr_serialize_OBJK_DataReader_Binary>:
 800f230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f232:	2202      	movs	r2, #2
 800f234:	460c      	mov	r4, r1
 800f236:	4606      	mov	r6, r0
 800f238:	f005 f926 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800f23c:	78a1      	ldrb	r1, [r4, #2]
 800f23e:	4605      	mov	r5, r0
 800f240:	4630      	mov	r0, r6
 800f242:	f7fc fd85 	bl	800bd50 <ucdr_serialize_bool>
 800f246:	78a3      	ldrb	r3, [r4, #2]
 800f248:	4005      	ands	r5, r0
 800f24a:	b2ed      	uxtb	r5, r5
 800f24c:	b90b      	cbnz	r3, 800f252 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800f24e:	4628      	mov	r0, r5
 800f250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f252:	f104 0108 	add.w	r1, r4, #8
 800f256:	4630      	mov	r0, r6
 800f258:	f7ff ff96 	bl	800f188 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f25c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800f260:	4607      	mov	r7, r0
 800f262:	4630      	mov	r0, r6
 800f264:	f7fc fd74 	bl	800bd50 <ucdr_serialize_bool>
 800f268:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800f26c:	4038      	ands	r0, r7
 800f26e:	b2c7      	uxtb	r7, r0
 800f270:	b95b      	cbnz	r3, 800f28a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800f272:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800f276:	4630      	mov	r0, r6
 800f278:	f7fc fd6a 	bl	800bd50 <ucdr_serialize_bool>
 800f27c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f280:	4007      	ands	r7, r0
 800f282:	b94b      	cbnz	r3, 800f298 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800f284:	403d      	ands	r5, r7
 800f286:	4628      	mov	r0, r5
 800f288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f28a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800f28e:	4630      	mov	r0, r6
 800f290:	f7fd f9f8 	bl	800c684 <ucdr_serialize_uint64_t>
 800f294:	4007      	ands	r7, r0
 800f296:	e7ec      	b.n	800f272 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800f298:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f29a:	4630      	mov	r0, r6
 800f29c:	f005 fa14 	bl	80146c8 <ucdr_serialize_string>
 800f2a0:	4007      	ands	r7, r0
 800f2a2:	b2ff      	uxtb	r7, r7
 800f2a4:	e7ee      	b.n	800f284 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800f2a6:	bf00      	nop

0800f2a8 <uxr_serialize_OBJK_DataWriter_Binary>:
 800f2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2aa:	2202      	movs	r2, #2
 800f2ac:	460d      	mov	r5, r1
 800f2ae:	4606      	mov	r6, r0
 800f2b0:	f005 f8ea 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800f2b4:	78a9      	ldrb	r1, [r5, #2]
 800f2b6:	4604      	mov	r4, r0
 800f2b8:	4630      	mov	r0, r6
 800f2ba:	f7fc fd49 	bl	800bd50 <ucdr_serialize_bool>
 800f2be:	78ab      	ldrb	r3, [r5, #2]
 800f2c0:	4004      	ands	r4, r0
 800f2c2:	b2e4      	uxtb	r4, r4
 800f2c4:	b90b      	cbnz	r3, 800f2ca <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2ca:	f105 0108 	add.w	r1, r5, #8
 800f2ce:	4630      	mov	r0, r6
 800f2d0:	f7ff ff5a 	bl	800f188 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f2d4:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800f2d8:	4607      	mov	r7, r0
 800f2da:	4630      	mov	r0, r6
 800f2dc:	f7fc fd38 	bl	800bd50 <ucdr_serialize_bool>
 800f2e0:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800f2e4:	4038      	ands	r0, r7
 800f2e6:	b2c7      	uxtb	r7, r0
 800f2e8:	b913      	cbnz	r3, 800f2f0 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800f2ea:	403c      	ands	r4, r7
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2f0:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800f2f4:	4630      	mov	r0, r6
 800f2f6:	f7fd f9c5 	bl	800c684 <ucdr_serialize_uint64_t>
 800f2fa:	4007      	ands	r7, r0
 800f2fc:	e7f5      	b.n	800f2ea <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800f2fe:	bf00      	nop

0800f300 <uxr_deserialize_ObjectVariant>:
 800f300:	b570      	push	{r4, r5, r6, lr}
 800f302:	4605      	mov	r5, r0
 800f304:	460e      	mov	r6, r1
 800f306:	f7fc fd67 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800f30a:	b168      	cbz	r0, 800f328 <uxr_deserialize_ObjectVariant+0x28>
 800f30c:	7833      	ldrb	r3, [r6, #0]
 800f30e:	3b01      	subs	r3, #1
 800f310:	4604      	mov	r4, r0
 800f312:	2b0d      	cmp	r3, #13
 800f314:	d809      	bhi.n	800f32a <uxr_deserialize_ObjectVariant+0x2a>
 800f316:	e8df f003 	tbb	[pc, r3]
 800f31a:	0a41      	.short	0x0a41
 800f31c:	0a0a2323 	.word	0x0a0a2323
 800f320:	10080a0a 	.word	0x10080a0a
 800f324:	565c1010 	.word	0x565c1010
 800f328:	2400      	movs	r4, #0
 800f32a:	4620      	mov	r0, r4
 800f32c:	bd70      	pop	{r4, r5, r6, pc}
 800f32e:	1d31      	adds	r1, r6, #4
 800f330:	4628      	mov	r0, r5
 800f332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f336:	f7ff bd55 	b.w	800ede4 <uxr_deserialize_DATAWRITER_Representation>
 800f33a:	1d31      	adds	r1, r6, #4
 800f33c:	4628      	mov	r0, r5
 800f33e:	f7fc fd4b 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800f342:	2800      	cmp	r0, #0
 800f344:	d0f0      	beq.n	800f328 <uxr_deserialize_ObjectVariant+0x28>
 800f346:	7933      	ldrb	r3, [r6, #4]
 800f348:	2b01      	cmp	r3, #1
 800f34a:	d001      	beq.n	800f350 <uxr_deserialize_ObjectVariant+0x50>
 800f34c:	2b02      	cmp	r3, #2
 800f34e:	d1ec      	bne.n	800f32a <uxr_deserialize_ObjectVariant+0x2a>
 800f350:	68b1      	ldr	r1, [r6, #8]
 800f352:	4628      	mov	r0, r5
 800f354:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f35c:	f005 b9c4 	b.w	80146e8 <ucdr_deserialize_string>
 800f360:	1d31      	adds	r1, r6, #4
 800f362:	4628      	mov	r0, r5
 800f364:	f7fc fd38 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800f368:	4604      	mov	r4, r0
 800f36a:	b170      	cbz	r0, 800f38a <uxr_deserialize_ObjectVariant+0x8a>
 800f36c:	7933      	ldrb	r3, [r6, #4]
 800f36e:	2b02      	cmp	r3, #2
 800f370:	d04c      	beq.n	800f40c <uxr_deserialize_ObjectVariant+0x10c>
 800f372:	2b03      	cmp	r3, #3
 800f374:	d109      	bne.n	800f38a <uxr_deserialize_ObjectVariant+0x8a>
 800f376:	f106 0308 	add.w	r3, r6, #8
 800f37a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f37e:	f106 010c 	add.w	r1, r6, #12
 800f382:	4628      	mov	r0, r5
 800f384:	f005 f986 	bl	8014694 <ucdr_deserialize_sequence_uint8_t>
 800f388:	4604      	mov	r4, r0
 800f38a:	2202      	movs	r2, #2
 800f38c:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800f390:	4628      	mov	r0, r5
 800f392:	f005 f8dd 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800f396:	4020      	ands	r0, r4
 800f398:	b2c4      	uxtb	r4, r0
 800f39a:	e7c6      	b.n	800f32a <uxr_deserialize_ObjectVariant+0x2a>
 800f39c:	1d31      	adds	r1, r6, #4
 800f39e:	4628      	mov	r0, r5
 800f3a0:	f7fc fd1a 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	b130      	cbz	r0, 800f3b6 <uxr_deserialize_ObjectVariant+0xb6>
 800f3a8:	7933      	ldrb	r3, [r6, #4]
 800f3aa:	2b02      	cmp	r3, #2
 800f3ac:	d036      	beq.n	800f41c <uxr_deserialize_ObjectVariant+0x11c>
 800f3ae:	2b03      	cmp	r3, #3
 800f3b0:	d03c      	beq.n	800f42c <uxr_deserialize_ObjectVariant+0x12c>
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d032      	beq.n	800f41c <uxr_deserialize_ObjectVariant+0x11c>
 800f3b6:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800f3ba:	4628      	mov	r0, r5
 800f3bc:	f7fd fab2 	bl	800c924 <ucdr_deserialize_int16_t>
 800f3c0:	4020      	ands	r0, r4
 800f3c2:	b2c4      	uxtb	r4, r0
 800f3c4:	e7b1      	b.n	800f32a <uxr_deserialize_ObjectVariant+0x2a>
 800f3c6:	1d31      	adds	r1, r6, #4
 800f3c8:	4628      	mov	r0, r5
 800f3ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3ce:	f7ff bbbf 	b.w	800eb50 <uxr_deserialize_CLIENT_Representation>
 800f3d2:	2204      	movs	r2, #4
 800f3d4:	18b1      	adds	r1, r6, r2
 800f3d6:	4628      	mov	r0, r5
 800f3d8:	f005 f8ba 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800f3dc:	2202      	movs	r2, #2
 800f3de:	f106 0108 	add.w	r1, r6, #8
 800f3e2:	4604      	mov	r4, r0
 800f3e4:	4628      	mov	r0, r5
 800f3e6:	f005 f8b3 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800f3ea:	2202      	movs	r2, #2
 800f3ec:	4004      	ands	r4, r0
 800f3ee:	f106 010a 	add.w	r1, r6, #10
 800f3f2:	4628      	mov	r0, r5
 800f3f4:	f005 f8ac 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800f3f8:	b2e4      	uxtb	r4, r4
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	f106 010c 	add.w	r1, r6, #12
 800f400:	4628      	mov	r0, r5
 800f402:	401c      	ands	r4, r3
 800f404:	f7fc fcba 	bl	800bd7c <ucdr_deserialize_bool>
 800f408:	4004      	ands	r4, r0
 800f40a:	e78e      	b.n	800f32a <uxr_deserialize_ObjectVariant+0x2a>
 800f40c:	68b1      	ldr	r1, [r6, #8]
 800f40e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f412:	4628      	mov	r0, r5
 800f414:	f005 f968 	bl	80146e8 <ucdr_deserialize_string>
 800f418:	4604      	mov	r4, r0
 800f41a:	e7b6      	b.n	800f38a <uxr_deserialize_ObjectVariant+0x8a>
 800f41c:	68b1      	ldr	r1, [r6, #8]
 800f41e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f422:	4628      	mov	r0, r5
 800f424:	f005 f960 	bl	80146e8 <ucdr_deserialize_string>
 800f428:	4604      	mov	r4, r0
 800f42a:	e7c4      	b.n	800f3b6 <uxr_deserialize_ObjectVariant+0xb6>
 800f42c:	f106 0308 	add.w	r3, r6, #8
 800f430:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f434:	f106 010c 	add.w	r1, r6, #12
 800f438:	4628      	mov	r0, r5
 800f43a:	f005 f92b 	bl	8014694 <ucdr_deserialize_sequence_uint8_t>
 800f43e:	4604      	mov	r4, r0
 800f440:	e7b9      	b.n	800f3b6 <uxr_deserialize_ObjectVariant+0xb6>
 800f442:	bf00      	nop

0800f444 <uxr_deserialize_BaseObjectRequest>:
 800f444:	b570      	push	{r4, r5, r6, lr}
 800f446:	2202      	movs	r2, #2
 800f448:	4605      	mov	r5, r0
 800f44a:	460e      	mov	r6, r1
 800f44c:	f005 f880 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800f450:	2202      	movs	r2, #2
 800f452:	4604      	mov	r4, r0
 800f454:	18b1      	adds	r1, r6, r2
 800f456:	4628      	mov	r0, r5
 800f458:	f005 f87a 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800f45c:	4020      	ands	r0, r4
 800f45e:	b2c0      	uxtb	r0, r0
 800f460:	bd70      	pop	{r4, r5, r6, pc}
 800f462:	bf00      	nop

0800f464 <uxr_serialize_ActivityInfoVariant>:
 800f464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f468:	460d      	mov	r5, r1
 800f46a:	7809      	ldrb	r1, [r1, #0]
 800f46c:	4607      	mov	r7, r0
 800f46e:	f7fc fc9d 	bl	800bdac <ucdr_serialize_uint8_t>
 800f472:	4681      	mov	r9, r0
 800f474:	b138      	cbz	r0, 800f486 <uxr_serialize_ActivityInfoVariant+0x22>
 800f476:	782b      	ldrb	r3, [r5, #0]
 800f478:	2b06      	cmp	r3, #6
 800f47a:	f000 8082 	beq.w	800f582 <uxr_serialize_ActivityInfoVariant+0x11e>
 800f47e:	2b0d      	cmp	r3, #13
 800f480:	d016      	beq.n	800f4b0 <uxr_serialize_ActivityInfoVariant+0x4c>
 800f482:	2b05      	cmp	r3, #5
 800f484:	d002      	beq.n	800f48c <uxr_serialize_ActivityInfoVariant+0x28>
 800f486:	4648      	mov	r0, r9
 800f488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f48c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f490:	4638      	mov	r0, r7
 800f492:	f7fd f9c7 	bl	800c824 <ucdr_serialize_int16_t>
 800f496:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800f49a:	4681      	mov	r9, r0
 800f49c:	4638      	mov	r0, r7
 800f49e:	f7fd f8f1 	bl	800c684 <ucdr_serialize_uint64_t>
 800f4a2:	ea09 0000 	and.w	r0, r9, r0
 800f4a6:	fa5f f980 	uxtb.w	r9, r0
 800f4aa:	4648      	mov	r0, r9
 800f4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4b0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f4b4:	4638      	mov	r0, r7
 800f4b6:	f7fd f9b5 	bl	800c824 <ucdr_serialize_int16_t>
 800f4ba:	68e9      	ldr	r1, [r5, #12]
 800f4bc:	4681      	mov	r9, r0
 800f4be:	4638      	mov	r0, r7
 800f4c0:	f7fc fe8a 	bl	800c1d8 <ucdr_serialize_uint32_t>
 800f4c4:	68eb      	ldr	r3, [r5, #12]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d0eb      	beq.n	800f4a2 <uxr_serialize_ActivityInfoVariant+0x3e>
 800f4ca:	b320      	cbz	r0, 800f516 <uxr_serialize_ActivityInfoVariant+0xb2>
 800f4cc:	f105 080c 	add.w	r8, r5, #12
 800f4d0:	2600      	movs	r6, #0
 800f4d2:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800f4d6:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800f4da:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800f4de:	4638      	mov	r0, r7
 800f4e0:	f7fc fc64 	bl	800bdac <ucdr_serialize_uint8_t>
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	d053      	beq.n	800f590 <uxr_serialize_ActivityInfoVariant+0x12c>
 800f4e8:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800f4ec:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800f4f0:	0074      	lsls	r4, r6, #1
 800f4f2:	00c9      	lsls	r1, r1, #3
 800f4f4:	2b03      	cmp	r3, #3
 800f4f6:	d854      	bhi.n	800f5a2 <uxr_serialize_ActivityInfoVariant+0x13e>
 800f4f8:	e8df f003 	tbb	[pc, r3]
 800f4fc:	02102132 	.word	0x02102132
 800f500:	4441      	add	r1, r8
 800f502:	4638      	mov	r0, r7
 800f504:	6889      	ldr	r1, [r1, #8]
 800f506:	f005 f8df 	bl	80146c8 <ucdr_serialize_string>
 800f50a:	68ea      	ldr	r2, [r5, #12]
 800f50c:	3601      	adds	r6, #1
 800f50e:	4296      	cmp	r6, r2
 800f510:	d242      	bcs.n	800f598 <uxr_serialize_ActivityInfoVariant+0x134>
 800f512:	2800      	cmp	r0, #0
 800f514:	d1dd      	bne.n	800f4d2 <uxr_serialize_ActivityInfoVariant+0x6e>
 800f516:	f04f 0900 	mov.w	r9, #0
 800f51a:	e7b4      	b.n	800f486 <uxr_serialize_ActivityInfoVariant+0x22>
 800f51c:	3108      	adds	r1, #8
 800f51e:	4441      	add	r1, r8
 800f520:	2210      	movs	r2, #16
 800f522:	4638      	mov	r0, r7
 800f524:	f004 ffb0 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800f528:	4434      	add	r4, r6
 800f52a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f52e:	4604      	mov	r4, r0
 800f530:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f532:	4638      	mov	r0, r7
 800f534:	f7fc fe50 	bl	800c1d8 <ucdr_serialize_uint32_t>
 800f538:	4020      	ands	r0, r4
 800f53a:	b2c0      	uxtb	r0, r0
 800f53c:	e7e5      	b.n	800f50a <uxr_serialize_ActivityInfoVariant+0xa6>
 800f53e:	3108      	adds	r1, #8
 800f540:	4441      	add	r1, r8
 800f542:	2204      	movs	r2, #4
 800f544:	4638      	mov	r0, r7
 800f546:	f004 ff9f 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800f54a:	4434      	add	r4, r6
 800f54c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f550:	4604      	mov	r4, r0
 800f552:	8b19      	ldrh	r1, [r3, #24]
 800f554:	4638      	mov	r0, r7
 800f556:	f7fc fc55 	bl	800be04 <ucdr_serialize_uint16_t>
 800f55a:	4020      	ands	r0, r4
 800f55c:	b2c0      	uxtb	r0, r0
 800f55e:	e7d4      	b.n	800f50a <uxr_serialize_ActivityInfoVariant+0xa6>
 800f560:	3108      	adds	r1, #8
 800f562:	4441      	add	r1, r8
 800f564:	2202      	movs	r2, #2
 800f566:	4638      	mov	r0, r7
 800f568:	f004 ff8e 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800f56c:	4434      	add	r4, r6
 800f56e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f572:	4604      	mov	r4, r0
 800f574:	7d99      	ldrb	r1, [r3, #22]
 800f576:	4638      	mov	r0, r7
 800f578:	f7fc fc18 	bl	800bdac <ucdr_serialize_uint8_t>
 800f57c:	4020      	ands	r0, r4
 800f57e:	b2c0      	uxtb	r0, r0
 800f580:	e7c3      	b.n	800f50a <uxr_serialize_ActivityInfoVariant+0xa6>
 800f582:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f586:	4638      	mov	r0, r7
 800f588:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f58c:	f7fd b94a 	b.w	800c824 <ucdr_serialize_int16_t>
 800f590:	68ea      	ldr	r2, [r5, #12]
 800f592:	3601      	adds	r6, #1
 800f594:	42b2      	cmp	r2, r6
 800f596:	d8be      	bhi.n	800f516 <uxr_serialize_ActivityInfoVariant+0xb2>
 800f598:	ea09 0900 	and.w	r9, r9, r0
 800f59c:	fa5f f989 	uxtb.w	r9, r9
 800f5a0:	e771      	b.n	800f486 <uxr_serialize_ActivityInfoVariant+0x22>
 800f5a2:	68eb      	ldr	r3, [r5, #12]
 800f5a4:	3601      	adds	r6, #1
 800f5a6:	429e      	cmp	r6, r3
 800f5a8:	f10a 0a18 	add.w	sl, sl, #24
 800f5ac:	d395      	bcc.n	800f4da <uxr_serialize_ActivityInfoVariant+0x76>
 800f5ae:	e76a      	b.n	800f486 <uxr_serialize_ActivityInfoVariant+0x22>

0800f5b0 <uxr_deserialize_BaseObjectReply>:
 800f5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5b4:	2202      	movs	r2, #2
 800f5b6:	4606      	mov	r6, r0
 800f5b8:	460f      	mov	r7, r1
 800f5ba:	f004 ffc9 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800f5be:	2202      	movs	r2, #2
 800f5c0:	18b9      	adds	r1, r7, r2
 800f5c2:	4605      	mov	r5, r0
 800f5c4:	4630      	mov	r0, r6
 800f5c6:	f004 ffc3 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800f5ca:	1d39      	adds	r1, r7, #4
 800f5cc:	4680      	mov	r8, r0
 800f5ce:	4630      	mov	r0, r6
 800f5d0:	f7fc fc02 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800f5d4:	1d79      	adds	r1, r7, #5
 800f5d6:	4604      	mov	r4, r0
 800f5d8:	4630      	mov	r0, r6
 800f5da:	f7fc fbfd 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800f5de:	ea05 0508 	and.w	r5, r5, r8
 800f5e2:	402c      	ands	r4, r5
 800f5e4:	4020      	ands	r0, r4
 800f5e6:	b2c0      	uxtb	r0, r0
 800f5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f5ec <uxr_serialize_ReadSpecification>:
 800f5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5f0:	460e      	mov	r6, r1
 800f5f2:	7809      	ldrb	r1, [r1, #0]
 800f5f4:	4607      	mov	r7, r0
 800f5f6:	f7fc fbd9 	bl	800bdac <ucdr_serialize_uint8_t>
 800f5fa:	7871      	ldrb	r1, [r6, #1]
 800f5fc:	4604      	mov	r4, r0
 800f5fe:	4638      	mov	r0, r7
 800f600:	f7fc fbd4 	bl	800bdac <ucdr_serialize_uint8_t>
 800f604:	78b1      	ldrb	r1, [r6, #2]
 800f606:	4004      	ands	r4, r0
 800f608:	4638      	mov	r0, r7
 800f60a:	f7fc fba1 	bl	800bd50 <ucdr_serialize_bool>
 800f60e:	78b3      	ldrb	r3, [r6, #2]
 800f610:	b2e4      	uxtb	r4, r4
 800f612:	4004      	ands	r4, r0
 800f614:	b94b      	cbnz	r3, 800f62a <uxr_serialize_ReadSpecification+0x3e>
 800f616:	7a31      	ldrb	r1, [r6, #8]
 800f618:	4638      	mov	r0, r7
 800f61a:	f7fc fb99 	bl	800bd50 <ucdr_serialize_bool>
 800f61e:	7a33      	ldrb	r3, [r6, #8]
 800f620:	4004      	ands	r4, r0
 800f622:	b943      	cbnz	r3, 800f636 <uxr_serialize_ReadSpecification+0x4a>
 800f624:	4620      	mov	r0, r4
 800f626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f62a:	6871      	ldr	r1, [r6, #4]
 800f62c:	4638      	mov	r0, r7
 800f62e:	f005 f84b 	bl	80146c8 <ucdr_serialize_string>
 800f632:	4004      	ands	r4, r0
 800f634:	e7ef      	b.n	800f616 <uxr_serialize_ReadSpecification+0x2a>
 800f636:	8971      	ldrh	r1, [r6, #10]
 800f638:	4638      	mov	r0, r7
 800f63a:	f7fc fbe3 	bl	800be04 <ucdr_serialize_uint16_t>
 800f63e:	89b1      	ldrh	r1, [r6, #12]
 800f640:	4605      	mov	r5, r0
 800f642:	4638      	mov	r0, r7
 800f644:	f7fc fbde 	bl	800be04 <ucdr_serialize_uint16_t>
 800f648:	89f1      	ldrh	r1, [r6, #14]
 800f64a:	4005      	ands	r5, r0
 800f64c:	4638      	mov	r0, r7
 800f64e:	f7fc fbd9 	bl	800be04 <ucdr_serialize_uint16_t>
 800f652:	8a31      	ldrh	r1, [r6, #16]
 800f654:	4680      	mov	r8, r0
 800f656:	4638      	mov	r0, r7
 800f658:	f7fc fbd4 	bl	800be04 <ucdr_serialize_uint16_t>
 800f65c:	b2ed      	uxtb	r5, r5
 800f65e:	4025      	ands	r5, r4
 800f660:	ea08 0505 	and.w	r5, r8, r5
 800f664:	ea00 0405 	and.w	r4, r0, r5
 800f668:	4620      	mov	r0, r4
 800f66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f66e:	bf00      	nop

0800f670 <uxr_serialize_CREATE_CLIENT_Payload>:
 800f670:	f7ff ba16 	b.w	800eaa0 <uxr_serialize_CLIENT_Representation>

0800f674 <uxr_serialize_CREATE_Payload>:
 800f674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f676:	2202      	movs	r2, #2
 800f678:	4607      	mov	r7, r0
 800f67a:	460e      	mov	r6, r1
 800f67c:	f004 ff04 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800f680:	2202      	movs	r2, #2
 800f682:	18b1      	adds	r1, r6, r2
 800f684:	4605      	mov	r5, r0
 800f686:	4638      	mov	r0, r7
 800f688:	f004 fefe 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800f68c:	7931      	ldrb	r1, [r6, #4]
 800f68e:	4604      	mov	r4, r0
 800f690:	4638      	mov	r0, r7
 800f692:	f7fc fb8b 	bl	800bdac <ucdr_serialize_uint8_t>
 800f696:	b170      	cbz	r0, 800f6b6 <uxr_serialize_CREATE_Payload+0x42>
 800f698:	7933      	ldrb	r3, [r6, #4]
 800f69a:	402c      	ands	r4, r5
 800f69c:	3b01      	subs	r3, #1
 800f69e:	b2e4      	uxtb	r4, r4
 800f6a0:	2b0d      	cmp	r3, #13
 800f6a2:	d809      	bhi.n	800f6b8 <uxr_serialize_CREATE_Payload+0x44>
 800f6a4:	e8df f003 	tbb	[pc, r3]
 800f6a8:	23230a4c 	.word	0x23230a4c
 800f6ac:	0a0a0a0a 	.word	0x0a0a0a0a
 800f6b0:	12121208 	.word	0x12121208
 800f6b4:	3e45      	.short	0x3e45
 800f6b6:	2400      	movs	r4, #0
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6bc:	f106 0108 	add.w	r1, r6, #8
 800f6c0:	4638      	mov	r0, r7
 800f6c2:	f7ff faf3 	bl	800ecac <uxr_serialize_DATAWRITER_Representation>
 800f6c6:	4004      	ands	r4, r0
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6cc:	7a31      	ldrb	r1, [r6, #8]
 800f6ce:	4638      	mov	r0, r7
 800f6d0:	f7fc fb6c 	bl	800bdac <ucdr_serialize_uint8_t>
 800f6d4:	2800      	cmp	r0, #0
 800f6d6:	d0ee      	beq.n	800f6b6 <uxr_serialize_CREATE_Payload+0x42>
 800f6d8:	7a33      	ldrb	r3, [r6, #8]
 800f6da:	2b01      	cmp	r3, #1
 800f6dc:	d001      	beq.n	800f6e2 <uxr_serialize_CREATE_Payload+0x6e>
 800f6de:	2b02      	cmp	r3, #2
 800f6e0:	d1ea      	bne.n	800f6b8 <uxr_serialize_CREATE_Payload+0x44>
 800f6e2:	68f1      	ldr	r1, [r6, #12]
 800f6e4:	4638      	mov	r0, r7
 800f6e6:	f004 ffef 	bl	80146c8 <ucdr_serialize_string>
 800f6ea:	4004      	ands	r4, r0
 800f6ec:	e7e4      	b.n	800f6b8 <uxr_serialize_CREATE_Payload+0x44>
 800f6ee:	7a31      	ldrb	r1, [r6, #8]
 800f6f0:	4638      	mov	r0, r7
 800f6f2:	f7fc fb5b 	bl	800bdac <ucdr_serialize_uint8_t>
 800f6f6:	4605      	mov	r5, r0
 800f6f8:	b158      	cbz	r0, 800f712 <uxr_serialize_CREATE_Payload+0x9e>
 800f6fa:	7a33      	ldrb	r3, [r6, #8]
 800f6fc:	2b02      	cmp	r3, #2
 800f6fe:	d034      	beq.n	800f76a <uxr_serialize_CREATE_Payload+0xf6>
 800f700:	2b03      	cmp	r3, #3
 800f702:	d106      	bne.n	800f712 <uxr_serialize_CREATE_Payload+0x9e>
 800f704:	68f2      	ldr	r2, [r6, #12]
 800f706:	f106 0110 	add.w	r1, r6, #16
 800f70a:	4638      	mov	r0, r7
 800f70c:	f004 ffb0 	bl	8014670 <ucdr_serialize_sequence_uint8_t>
 800f710:	4605      	mov	r5, r0
 800f712:	2202      	movs	r2, #2
 800f714:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800f718:	4638      	mov	r0, r7
 800f71a:	f004 feb5 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800f71e:	4028      	ands	r0, r5
 800f720:	4004      	ands	r4, r0
 800f722:	e7c9      	b.n	800f6b8 <uxr_serialize_CREATE_Payload+0x44>
 800f724:	f106 0108 	add.w	r1, r6, #8
 800f728:	4638      	mov	r0, r7
 800f72a:	f7ff f9b9 	bl	800eaa0 <uxr_serialize_CLIENT_Representation>
 800f72e:	4004      	ands	r4, r0
 800f730:	e7c2      	b.n	800f6b8 <uxr_serialize_CREATE_Payload+0x44>
 800f732:	f106 0108 	add.w	r1, r6, #8
 800f736:	4638      	mov	r0, r7
 800f738:	f7ff fa6e 	bl	800ec18 <uxr_serialize_AGENT_Representation>
 800f73c:	4004      	ands	r4, r0
 800f73e:	e7bb      	b.n	800f6b8 <uxr_serialize_CREATE_Payload+0x44>
 800f740:	7a31      	ldrb	r1, [r6, #8]
 800f742:	4638      	mov	r0, r7
 800f744:	f7fc fb32 	bl	800bdac <ucdr_serialize_uint8_t>
 800f748:	4605      	mov	r5, r0
 800f74a:	b130      	cbz	r0, 800f75a <uxr_serialize_CREATE_Payload+0xe6>
 800f74c:	7a33      	ldrb	r3, [r6, #8]
 800f74e:	2b02      	cmp	r3, #2
 800f750:	d011      	beq.n	800f776 <uxr_serialize_CREATE_Payload+0x102>
 800f752:	2b03      	cmp	r3, #3
 800f754:	d015      	beq.n	800f782 <uxr_serialize_CREATE_Payload+0x10e>
 800f756:	2b01      	cmp	r3, #1
 800f758:	d00d      	beq.n	800f776 <uxr_serialize_CREATE_Payload+0x102>
 800f75a:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800f75e:	4638      	mov	r0, r7
 800f760:	f7fd f860 	bl	800c824 <ucdr_serialize_int16_t>
 800f764:	4028      	ands	r0, r5
 800f766:	4004      	ands	r4, r0
 800f768:	e7a6      	b.n	800f6b8 <uxr_serialize_CREATE_Payload+0x44>
 800f76a:	68f1      	ldr	r1, [r6, #12]
 800f76c:	4638      	mov	r0, r7
 800f76e:	f004 ffab 	bl	80146c8 <ucdr_serialize_string>
 800f772:	4605      	mov	r5, r0
 800f774:	e7cd      	b.n	800f712 <uxr_serialize_CREATE_Payload+0x9e>
 800f776:	68f1      	ldr	r1, [r6, #12]
 800f778:	4638      	mov	r0, r7
 800f77a:	f004 ffa5 	bl	80146c8 <ucdr_serialize_string>
 800f77e:	4605      	mov	r5, r0
 800f780:	e7eb      	b.n	800f75a <uxr_serialize_CREATE_Payload+0xe6>
 800f782:	68f2      	ldr	r2, [r6, #12]
 800f784:	f106 0110 	add.w	r1, r6, #16
 800f788:	4638      	mov	r0, r7
 800f78a:	f004 ff71 	bl	8014670 <ucdr_serialize_sequence_uint8_t>
 800f78e:	4605      	mov	r5, r0
 800f790:	e7e3      	b.n	800f75a <uxr_serialize_CREATE_Payload+0xe6>
 800f792:	bf00      	nop

0800f794 <uxr_deserialize_GET_INFO_Payload>:
 800f794:	b570      	push	{r4, r5, r6, lr}
 800f796:	2202      	movs	r2, #2
 800f798:	4605      	mov	r5, r0
 800f79a:	460e      	mov	r6, r1
 800f79c:	f004 fed8 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800f7a0:	2202      	movs	r2, #2
 800f7a2:	18b1      	adds	r1, r6, r2
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	f004 fed2 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800f7ac:	1d31      	adds	r1, r6, #4
 800f7ae:	4004      	ands	r4, r0
 800f7b0:	4628      	mov	r0, r5
 800f7b2:	f7fc fe41 	bl	800c438 <ucdr_deserialize_uint32_t>
 800f7b6:	b2e4      	uxtb	r4, r4
 800f7b8:	4020      	ands	r0, r4
 800f7ba:	bd70      	pop	{r4, r5, r6, pc}

0800f7bc <uxr_serialize_DELETE_Payload>:
 800f7bc:	b570      	push	{r4, r5, r6, lr}
 800f7be:	2202      	movs	r2, #2
 800f7c0:	4605      	mov	r5, r0
 800f7c2:	460e      	mov	r6, r1
 800f7c4:	f004 fe60 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800f7c8:	2202      	movs	r2, #2
 800f7ca:	4604      	mov	r4, r0
 800f7cc:	18b1      	adds	r1, r6, r2
 800f7ce:	4628      	mov	r0, r5
 800f7d0:	f004 fe5a 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800f7d4:	4020      	ands	r0, r4
 800f7d6:	b2c0      	uxtb	r0, r0
 800f7d8:	bd70      	pop	{r4, r5, r6, pc}
 800f7da:	bf00      	nop

0800f7dc <uxr_deserialize_STATUS_AGENT_Payload>:
 800f7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7e0:	4605      	mov	r5, r0
 800f7e2:	460e      	mov	r6, r1
 800f7e4:	f7fc faf8 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800f7e8:	1c71      	adds	r1, r6, #1
 800f7ea:	4604      	mov	r4, r0
 800f7ec:	4628      	mov	r0, r5
 800f7ee:	f7fc faf3 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800f7f2:	2204      	movs	r2, #4
 800f7f4:	18b1      	adds	r1, r6, r2
 800f7f6:	4680      	mov	r8, r0
 800f7f8:	4628      	mov	r0, r5
 800f7fa:	f004 fea9 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800f7fe:	f106 0108 	add.w	r1, r6, #8
 800f802:	4607      	mov	r7, r0
 800f804:	2202      	movs	r2, #2
 800f806:	4628      	mov	r0, r5
 800f808:	f004 fea2 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800f80c:	ea04 0308 	and.w	r3, r4, r8
 800f810:	b2db      	uxtb	r3, r3
 800f812:	ea03 0407 	and.w	r4, r3, r7
 800f816:	2202      	movs	r2, #2
 800f818:	4607      	mov	r7, r0
 800f81a:	f106 010a 	add.w	r1, r6, #10
 800f81e:	4628      	mov	r0, r5
 800f820:	f004 fe96 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800f824:	f106 010c 	add.w	r1, r6, #12
 800f828:	4603      	mov	r3, r0
 800f82a:	4628      	mov	r0, r5
 800f82c:	461d      	mov	r5, r3
 800f82e:	f7fc faa5 	bl	800bd7c <ucdr_deserialize_bool>
 800f832:	403c      	ands	r4, r7
 800f834:	4025      	ands	r5, r4
 800f836:	4028      	ands	r0, r5
 800f838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f83c <uxr_deserialize_STATUS_Payload>:
 800f83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f840:	2202      	movs	r2, #2
 800f842:	4606      	mov	r6, r0
 800f844:	460f      	mov	r7, r1
 800f846:	f004 fe83 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800f84a:	2202      	movs	r2, #2
 800f84c:	18b9      	adds	r1, r7, r2
 800f84e:	4605      	mov	r5, r0
 800f850:	4630      	mov	r0, r6
 800f852:	f004 fe7d 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800f856:	1d39      	adds	r1, r7, #4
 800f858:	4680      	mov	r8, r0
 800f85a:	4630      	mov	r0, r6
 800f85c:	f7fc fabc 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800f860:	1d79      	adds	r1, r7, #5
 800f862:	4604      	mov	r4, r0
 800f864:	4630      	mov	r0, r6
 800f866:	f7fc fab7 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800f86a:	ea05 0508 	and.w	r5, r5, r8
 800f86e:	402c      	ands	r4, r5
 800f870:	4020      	ands	r0, r4
 800f872:	b2c0      	uxtb	r0, r0
 800f874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f878 <uxr_serialize_INFO_Payload>:
 800f878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f87c:	2202      	movs	r2, #2
 800f87e:	460c      	mov	r4, r1
 800f880:	4605      	mov	r5, r0
 800f882:	f004 fe01 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800f886:	2202      	movs	r2, #2
 800f888:	18a1      	adds	r1, r4, r2
 800f88a:	4680      	mov	r8, r0
 800f88c:	4628      	mov	r0, r5
 800f88e:	f004 fdfb 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800f892:	7921      	ldrb	r1, [r4, #4]
 800f894:	4607      	mov	r7, r0
 800f896:	4628      	mov	r0, r5
 800f898:	f7fc fa88 	bl	800bdac <ucdr_serialize_uint8_t>
 800f89c:	7961      	ldrb	r1, [r4, #5]
 800f89e:	4606      	mov	r6, r0
 800f8a0:	4628      	mov	r0, r5
 800f8a2:	f7fc fa83 	bl	800bdac <ucdr_serialize_uint8_t>
 800f8a6:	ea08 0807 	and.w	r8, r8, r7
 800f8aa:	ea06 0608 	and.w	r6, r6, r8
 800f8ae:	4006      	ands	r6, r0
 800f8b0:	7a21      	ldrb	r1, [r4, #8]
 800f8b2:	4628      	mov	r0, r5
 800f8b4:	f7fc fa4c 	bl	800bd50 <ucdr_serialize_bool>
 800f8b8:	7a23      	ldrb	r3, [r4, #8]
 800f8ba:	b2f7      	uxtb	r7, r6
 800f8bc:	4606      	mov	r6, r0
 800f8be:	b96b      	cbnz	r3, 800f8dc <uxr_serialize_INFO_Payload+0x64>
 800f8c0:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800f8c4:	4628      	mov	r0, r5
 800f8c6:	f7fc fa43 	bl	800bd50 <ucdr_serialize_bool>
 800f8ca:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800f8ce:	4030      	ands	r0, r6
 800f8d0:	b2c6      	uxtb	r6, r0
 800f8d2:	b983      	cbnz	r3, 800f8f6 <uxr_serialize_INFO_Payload+0x7e>
 800f8d4:	ea06 0007 	and.w	r0, r6, r7
 800f8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8dc:	7b21      	ldrb	r1, [r4, #12]
 800f8de:	4628      	mov	r0, r5
 800f8e0:	f7fc fa64 	bl	800bdac <ucdr_serialize_uint8_t>
 800f8e4:	b188      	cbz	r0, 800f90a <uxr_serialize_INFO_Payload+0x92>
 800f8e6:	f104 010c 	add.w	r1, r4, #12
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	f7ff fa06 	bl	800ecfc <uxr_serialize_ObjectVariant.part.0>
 800f8f0:	4030      	ands	r0, r6
 800f8f2:	b2c6      	uxtb	r6, r0
 800f8f4:	e7e4      	b.n	800f8c0 <uxr_serialize_INFO_Payload+0x48>
 800f8f6:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	f7ff fdb2 	bl	800f464 <uxr_serialize_ActivityInfoVariant>
 800f900:	4006      	ands	r6, r0
 800f902:	ea06 0007 	and.w	r0, r6, r7
 800f906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f90a:	4606      	mov	r6, r0
 800f90c:	e7d8      	b.n	800f8c0 <uxr_serialize_INFO_Payload+0x48>
 800f90e:	bf00      	nop

0800f910 <uxr_serialize_READ_DATA_Payload>:
 800f910:	b570      	push	{r4, r5, r6, lr}
 800f912:	2202      	movs	r2, #2
 800f914:	4605      	mov	r5, r0
 800f916:	460e      	mov	r6, r1
 800f918:	f004 fdb6 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800f91c:	2202      	movs	r2, #2
 800f91e:	18b1      	adds	r1, r6, r2
 800f920:	4604      	mov	r4, r0
 800f922:	4628      	mov	r0, r5
 800f924:	f004 fdb0 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800f928:	1d31      	adds	r1, r6, #4
 800f92a:	4004      	ands	r4, r0
 800f92c:	4628      	mov	r0, r5
 800f92e:	f7ff fe5d 	bl	800f5ec <uxr_serialize_ReadSpecification>
 800f932:	b2e4      	uxtb	r4, r4
 800f934:	4020      	ands	r0, r4
 800f936:	bd70      	pop	{r4, r5, r6, pc}

0800f938 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800f938:	b570      	push	{r4, r5, r6, lr}
 800f93a:	2202      	movs	r2, #2
 800f93c:	4605      	mov	r5, r0
 800f93e:	460e      	mov	r6, r1
 800f940:	f004 fda2 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800f944:	2202      	movs	r2, #2
 800f946:	4604      	mov	r4, r0
 800f948:	18b1      	adds	r1, r6, r2
 800f94a:	4628      	mov	r0, r5
 800f94c:	f004 fd9c 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800f950:	4020      	ands	r0, r4
 800f952:	b2c0      	uxtb	r0, r0
 800f954:	bd70      	pop	{r4, r5, r6, pc}
 800f956:	bf00      	nop

0800f958 <uxr_serialize_ACKNACK_Payload>:
 800f958:	b570      	push	{r4, r5, r6, lr}
 800f95a:	460c      	mov	r4, r1
 800f95c:	460e      	mov	r6, r1
 800f95e:	f834 1b02 	ldrh.w	r1, [r4], #2
 800f962:	4605      	mov	r5, r0
 800f964:	f7fc fa4e 	bl	800be04 <ucdr_serialize_uint16_t>
 800f968:	2202      	movs	r2, #2
 800f96a:	4621      	mov	r1, r4
 800f96c:	4604      	mov	r4, r0
 800f96e:	4628      	mov	r0, r5
 800f970:	f004 fd8a 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800f974:	7931      	ldrb	r1, [r6, #4]
 800f976:	4004      	ands	r4, r0
 800f978:	4628      	mov	r0, r5
 800f97a:	f7fc fa17 	bl	800bdac <ucdr_serialize_uint8_t>
 800f97e:	b2e4      	uxtb	r4, r4
 800f980:	4020      	ands	r0, r4
 800f982:	bd70      	pop	{r4, r5, r6, pc}

0800f984 <uxr_deserialize_ACKNACK_Payload>:
 800f984:	b570      	push	{r4, r5, r6, lr}
 800f986:	4605      	mov	r5, r0
 800f988:	460e      	mov	r6, r1
 800f98a:	f7fc fb3b 	bl	800c004 <ucdr_deserialize_uint16_t>
 800f98e:	2202      	movs	r2, #2
 800f990:	18b1      	adds	r1, r6, r2
 800f992:	4604      	mov	r4, r0
 800f994:	4628      	mov	r0, r5
 800f996:	f004 fddb 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800f99a:	1d31      	adds	r1, r6, #4
 800f99c:	4004      	ands	r4, r0
 800f99e:	4628      	mov	r0, r5
 800f9a0:	f7fc fa1a 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800f9a4:	b2e4      	uxtb	r4, r4
 800f9a6:	4020      	ands	r0, r4
 800f9a8:	bd70      	pop	{r4, r5, r6, pc}
 800f9aa:	bf00      	nop

0800f9ac <uxr_serialize_HEARTBEAT_Payload>:
 800f9ac:	b570      	push	{r4, r5, r6, lr}
 800f9ae:	460d      	mov	r5, r1
 800f9b0:	8809      	ldrh	r1, [r1, #0]
 800f9b2:	4606      	mov	r6, r0
 800f9b4:	f7fc fa26 	bl	800be04 <ucdr_serialize_uint16_t>
 800f9b8:	8869      	ldrh	r1, [r5, #2]
 800f9ba:	4604      	mov	r4, r0
 800f9bc:	4630      	mov	r0, r6
 800f9be:	f7fc fa21 	bl	800be04 <ucdr_serialize_uint16_t>
 800f9c2:	7929      	ldrb	r1, [r5, #4]
 800f9c4:	4004      	ands	r4, r0
 800f9c6:	4630      	mov	r0, r6
 800f9c8:	f7fc f9f0 	bl	800bdac <ucdr_serialize_uint8_t>
 800f9cc:	b2e4      	uxtb	r4, r4
 800f9ce:	4020      	ands	r0, r4
 800f9d0:	bd70      	pop	{r4, r5, r6, pc}
 800f9d2:	bf00      	nop

0800f9d4 <uxr_deserialize_HEARTBEAT_Payload>:
 800f9d4:	b570      	push	{r4, r5, r6, lr}
 800f9d6:	4605      	mov	r5, r0
 800f9d8:	460e      	mov	r6, r1
 800f9da:	f7fc fb13 	bl	800c004 <ucdr_deserialize_uint16_t>
 800f9de:	1cb1      	adds	r1, r6, #2
 800f9e0:	4604      	mov	r4, r0
 800f9e2:	4628      	mov	r0, r5
 800f9e4:	f7fc fb0e 	bl	800c004 <ucdr_deserialize_uint16_t>
 800f9e8:	1d31      	adds	r1, r6, #4
 800f9ea:	4004      	ands	r4, r0
 800f9ec:	4628      	mov	r0, r5
 800f9ee:	f7fc f9f3 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800f9f2:	b2e4      	uxtb	r4, r4
 800f9f4:	4020      	ands	r0, r4
 800f9f6:	bd70      	pop	{r4, r5, r6, pc}

0800f9f8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800f9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9fc:	4605      	mov	r5, r0
 800f9fe:	460e      	mov	r6, r1
 800fa00:	f7fd f89c 	bl	800cb3c <ucdr_deserialize_int32_t>
 800fa04:	1d31      	adds	r1, r6, #4
 800fa06:	4607      	mov	r7, r0
 800fa08:	4628      	mov	r0, r5
 800fa0a:	f7fc fd15 	bl	800c438 <ucdr_deserialize_uint32_t>
 800fa0e:	f106 0108 	add.w	r1, r6, #8
 800fa12:	4680      	mov	r8, r0
 800fa14:	4628      	mov	r0, r5
 800fa16:	f7fd f891 	bl	800cb3c <ucdr_deserialize_int32_t>
 800fa1a:	f106 010c 	add.w	r1, r6, #12
 800fa1e:	4604      	mov	r4, r0
 800fa20:	4628      	mov	r0, r5
 800fa22:	f7fc fd09 	bl	800c438 <ucdr_deserialize_uint32_t>
 800fa26:	ea07 0708 	and.w	r7, r7, r8
 800fa2a:	403c      	ands	r4, r7
 800fa2c:	f106 0110 	add.w	r1, r6, #16
 800fa30:	4004      	ands	r4, r0
 800fa32:	4628      	mov	r0, r5
 800fa34:	f7fd f882 	bl	800cb3c <ucdr_deserialize_int32_t>
 800fa38:	f106 0114 	add.w	r1, r6, #20
 800fa3c:	4607      	mov	r7, r0
 800fa3e:	4628      	mov	r0, r5
 800fa40:	f7fc fcfa 	bl	800c438 <ucdr_deserialize_uint32_t>
 800fa44:	b2e4      	uxtb	r4, r4
 800fa46:	403c      	ands	r4, r7
 800fa48:	4020      	ands	r0, r4
 800fa4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa4e:	bf00      	nop

0800fa50 <uxr_serialize_SampleIdentity>:
 800fa50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa54:	220c      	movs	r2, #12
 800fa56:	4604      	mov	r4, r0
 800fa58:	460d      	mov	r5, r1
 800fa5a:	f004 fd15 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800fa5e:	2203      	movs	r2, #3
 800fa60:	f105 010c 	add.w	r1, r5, #12
 800fa64:	4607      	mov	r7, r0
 800fa66:	4620      	mov	r0, r4
 800fa68:	f004 fd0e 	bl	8014488 <ucdr_serialize_array_uint8_t>
 800fa6c:	7be9      	ldrb	r1, [r5, #15]
 800fa6e:	4680      	mov	r8, r0
 800fa70:	4620      	mov	r0, r4
 800fa72:	f7fc f99b 	bl	800bdac <ucdr_serialize_uint8_t>
 800fa76:	6929      	ldr	r1, [r5, #16]
 800fa78:	4606      	mov	r6, r0
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	f7fc ffc6 	bl	800ca0c <ucdr_serialize_int32_t>
 800fa80:	6969      	ldr	r1, [r5, #20]
 800fa82:	4603      	mov	r3, r0
 800fa84:	4620      	mov	r0, r4
 800fa86:	ea07 0708 	and.w	r7, r7, r8
 800fa8a:	461c      	mov	r4, r3
 800fa8c:	f7fc fba4 	bl	800c1d8 <ucdr_serialize_uint32_t>
 800fa90:	403e      	ands	r6, r7
 800fa92:	4034      	ands	r4, r6
 800fa94:	4020      	ands	r0, r4
 800fa96:	b2c0      	uxtb	r0, r0
 800fa98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fa9c <uxr_deserialize_SampleIdentity>:
 800fa9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faa0:	220c      	movs	r2, #12
 800faa2:	4604      	mov	r4, r0
 800faa4:	460d      	mov	r5, r1
 800faa6:	f004 fd53 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800faaa:	2203      	movs	r2, #3
 800faac:	f105 010c 	add.w	r1, r5, #12
 800fab0:	4607      	mov	r7, r0
 800fab2:	4620      	mov	r0, r4
 800fab4:	f004 fd4c 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 800fab8:	f105 010f 	add.w	r1, r5, #15
 800fabc:	4680      	mov	r8, r0
 800fabe:	4620      	mov	r0, r4
 800fac0:	f7fc f98a 	bl	800bdd8 <ucdr_deserialize_uint8_t>
 800fac4:	f105 0110 	add.w	r1, r5, #16
 800fac8:	4606      	mov	r6, r0
 800faca:	4620      	mov	r0, r4
 800facc:	f7fd f836 	bl	800cb3c <ucdr_deserialize_int32_t>
 800fad0:	f105 0114 	add.w	r1, r5, #20
 800fad4:	4603      	mov	r3, r0
 800fad6:	4620      	mov	r0, r4
 800fad8:	ea07 0708 	and.w	r7, r7, r8
 800fadc:	461c      	mov	r4, r3
 800fade:	f7fc fcab 	bl	800c438 <ucdr_deserialize_uint32_t>
 800fae2:	403e      	ands	r6, r7
 800fae4:	4034      	ands	r4, r6
 800fae6:	4020      	ands	r0, r4
 800fae8:	b2c0      	uxtb	r0, r0
 800faea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faee:	bf00      	nop

0800faf0 <rcl_client_get_rmw_handle>:
 800faf0:	b118      	cbz	r0, 800fafa <rcl_client_get_rmw_handle+0xa>
 800faf2:	6800      	ldr	r0, [r0, #0]
 800faf4:	b108      	cbz	r0, 800fafa <rcl_client_get_rmw_handle+0xa>
 800faf6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800fafa:	4770      	bx	lr

0800fafc <rcl_send_request>:
 800fafc:	b570      	push	{r4, r5, r6, lr}
 800fafe:	b082      	sub	sp, #8
 800fb00:	b1e8      	cbz	r0, 800fb3e <rcl_send_request+0x42>
 800fb02:	4604      	mov	r4, r0
 800fb04:	6800      	ldr	r0, [r0, #0]
 800fb06:	b1d0      	cbz	r0, 800fb3e <rcl_send_request+0x42>
 800fb08:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800fb0c:	b1bb      	cbz	r3, 800fb3e <rcl_send_request+0x42>
 800fb0e:	460e      	mov	r6, r1
 800fb10:	b1d1      	cbz	r1, 800fb48 <rcl_send_request+0x4c>
 800fb12:	4615      	mov	r5, r2
 800fb14:	b1c2      	cbz	r2, 800fb48 <rcl_send_request+0x4c>
 800fb16:	2105      	movs	r1, #5
 800fb18:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800fb1c:	f002 fd70 	bl	8012600 <__atomic_load_8>
 800fb20:	6823      	ldr	r3, [r4, #0]
 800fb22:	e9c5 0100 	strd	r0, r1, [r5]
 800fb26:	462a      	mov	r2, r5
 800fb28:	4631      	mov	r1, r6
 800fb2a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800fb2e:	f003 ff1b 	bl	8013968 <rmw_send_request>
 800fb32:	4606      	mov	r6, r0
 800fb34:	b160      	cbz	r0, 800fb50 <rcl_send_request+0x54>
 800fb36:	2601      	movs	r6, #1
 800fb38:	4630      	mov	r0, r6
 800fb3a:	b002      	add	sp, #8
 800fb3c:	bd70      	pop	{r4, r5, r6, pc}
 800fb3e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 800fb42:	4630      	mov	r0, r6
 800fb44:	b002      	add	sp, #8
 800fb46:	bd70      	pop	{r4, r5, r6, pc}
 800fb48:	260b      	movs	r6, #11
 800fb4a:	4630      	mov	r0, r6
 800fb4c:	b002      	add	sp, #8
 800fb4e:	bd70      	pop	{r4, r5, r6, pc}
 800fb50:	6820      	ldr	r0, [r4, #0]
 800fb52:	2105      	movs	r1, #5
 800fb54:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fb58:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800fb5c:	9100      	str	r1, [sp, #0]
 800fb5e:	f002 fdbb 	bl	80126d8 <__atomic_exchange_8>
 800fb62:	4630      	mov	r0, r6
 800fb64:	b002      	add	sp, #8
 800fb66:	bd70      	pop	{r4, r5, r6, pc}

0800fb68 <rcl_take_response>:
 800fb68:	b570      	push	{r4, r5, r6, lr}
 800fb6a:	468e      	mov	lr, r1
 800fb6c:	460c      	mov	r4, r1
 800fb6e:	4616      	mov	r6, r2
 800fb70:	4605      	mov	r5, r0
 800fb72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fb76:	b08c      	sub	sp, #48	; 0x30
 800fb78:	f10d 0c18 	add.w	ip, sp, #24
 800fb7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb80:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fb84:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fb88:	b35d      	cbz	r5, 800fbe2 <rcl_take_response+0x7a>
 800fb8a:	682b      	ldr	r3, [r5, #0]
 800fb8c:	b34b      	cbz	r3, 800fbe2 <rcl_take_response+0x7a>
 800fb8e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800fb92:	b330      	cbz	r0, 800fbe2 <rcl_take_response+0x7a>
 800fb94:	b346      	cbz	r6, 800fbe8 <rcl_take_response+0x80>
 800fb96:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800fbf0 <rcl_take_response+0x88>
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	f88d 3007 	strb.w	r3, [sp, #7]
 800fba0:	4632      	mov	r2, r6
 800fba2:	f10d 0307 	add.w	r3, sp, #7
 800fba6:	a902      	add	r1, sp, #8
 800fba8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fbac:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fbb0:	f003 ffe2 	bl	8013b78 <rmw_take_response>
 800fbb4:	4605      	mov	r5, r0
 800fbb6:	b9c8      	cbnz	r0, 800fbec <rcl_take_response+0x84>
 800fbb8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fbbc:	f240 13f5 	movw	r3, #501	; 0x1f5
 800fbc0:	2a00      	cmp	r2, #0
 800fbc2:	bf08      	it	eq
 800fbc4:	461d      	moveq	r5, r3
 800fbc6:	f10d 0e18 	add.w	lr, sp, #24
 800fbca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fbce:	46a4      	mov	ip, r4
 800fbd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fbd4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fbd8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fbdc:	4628      	mov	r0, r5
 800fbde:	b00c      	add	sp, #48	; 0x30
 800fbe0:	bd70      	pop	{r4, r5, r6, pc}
 800fbe2:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 800fbe6:	e7ee      	b.n	800fbc6 <rcl_take_response+0x5e>
 800fbe8:	250b      	movs	r5, #11
 800fbea:	e7ec      	b.n	800fbc6 <rcl_take_response+0x5e>
 800fbec:	2501      	movs	r5, #1
 800fbee:	e7ea      	b.n	800fbc6 <rcl_take_response+0x5e>
	...

0800fbf8 <rcl_client_is_valid>:
 800fbf8:	b130      	cbz	r0, 800fc08 <rcl_client_is_valid+0x10>
 800fbfa:	6800      	ldr	r0, [r0, #0]
 800fbfc:	b120      	cbz	r0, 800fc08 <rcl_client_is_valid+0x10>
 800fbfe:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800fc02:	3800      	subs	r0, #0
 800fc04:	bf18      	it	ne
 800fc06:	2001      	movne	r0, #1
 800fc08:	4770      	bx	lr
 800fc0a:	bf00      	nop

0800fc0c <rcl_convert_rmw_ret_to_rcl_ret>:
 800fc0c:	280b      	cmp	r0, #11
 800fc0e:	dc0d      	bgt.n	800fc2c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800fc10:	2800      	cmp	r0, #0
 800fc12:	db09      	blt.n	800fc28 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800fc14:	280b      	cmp	r0, #11
 800fc16:	d807      	bhi.n	800fc28 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800fc18:	e8df f000 	tbb	[pc, r0]
 800fc1c:	07060607 	.word	0x07060607
 800fc20:	06060606 	.word	0x06060606
 800fc24:	07070606 	.word	0x07070606
 800fc28:	2001      	movs	r0, #1
 800fc2a:	4770      	bx	lr
 800fc2c:	28cb      	cmp	r0, #203	; 0xcb
 800fc2e:	bf18      	it	ne
 800fc30:	2001      	movne	r0, #1
 800fc32:	4770      	bx	lr

0800fc34 <rcl_get_zero_initialized_context>:
 800fc34:	4a03      	ldr	r2, [pc, #12]	; (800fc44 <rcl_get_zero_initialized_context+0x10>)
 800fc36:	4603      	mov	r3, r0
 800fc38:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fc3c:	e883 0003 	stmia.w	r3, {r0, r1}
 800fc40:	4618      	mov	r0, r3
 800fc42:	4770      	bx	lr
 800fc44:	0801839c 	.word	0x0801839c

0800fc48 <rcl_context_is_valid>:
 800fc48:	b118      	cbz	r0, 800fc52 <rcl_context_is_valid+0xa>
 800fc4a:	6840      	ldr	r0, [r0, #4]
 800fc4c:	3800      	subs	r0, #0
 800fc4e:	bf18      	it	ne
 800fc50:	2001      	movne	r0, #1
 800fc52:	4770      	bx	lr

0800fc54 <__cleanup_context>:
 800fc54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc58:	4606      	mov	r6, r0
 800fc5a:	6800      	ldr	r0, [r0, #0]
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	6073      	str	r3, [r6, #4]
 800fc60:	2800      	cmp	r0, #0
 800fc62:	d049      	beq.n	800fcf8 <__cleanup_context+0xa4>
 800fc64:	6947      	ldr	r7, [r0, #20]
 800fc66:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800fc6a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800fc6e:	b137      	cbz	r7, 800fc7e <__cleanup_context+0x2a>
 800fc70:	3014      	adds	r0, #20
 800fc72:	f000 f9bb 	bl	800ffec <rcl_init_options_fini>
 800fc76:	4607      	mov	r7, r0
 800fc78:	2800      	cmp	r0, #0
 800fc7a:	d144      	bne.n	800fd06 <__cleanup_context+0xb2>
 800fc7c:	6830      	ldr	r0, [r6, #0]
 800fc7e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fc80:	b143      	cbz	r3, 800fc94 <__cleanup_context+0x40>
 800fc82:	3028      	adds	r0, #40	; 0x28
 800fc84:	f003 fcb8 	bl	80135f8 <rmw_context_fini>
 800fc88:	b118      	cbz	r0, 800fc92 <__cleanup_context+0x3e>
 800fc8a:	2f00      	cmp	r7, #0
 800fc8c:	d03e      	beq.n	800fd0c <__cleanup_context+0xb8>
 800fc8e:	f7fb fa6b 	bl	800b168 <rcutils_reset_error>
 800fc92:	6830      	ldr	r0, [r6, #0]
 800fc94:	6a03      	ldr	r3, [r0, #32]
 800fc96:	b1db      	cbz	r3, 800fcd0 <__cleanup_context+0x7c>
 800fc98:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800fc9c:	2a01      	cmp	r2, #1
 800fc9e:	f17c 0100 	sbcs.w	r1, ip, #0
 800fca2:	db11      	blt.n	800fcc8 <__cleanup_context+0x74>
 800fca4:	2400      	movs	r4, #0
 800fca6:	4625      	mov	r5, r4
 800fca8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fcac:	4649      	mov	r1, r9
 800fcae:	b1b8      	cbz	r0, 800fce0 <__cleanup_context+0x8c>
 800fcb0:	47c0      	blx	r8
 800fcb2:	6833      	ldr	r3, [r6, #0]
 800fcb4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800fcb8:	3401      	adds	r4, #1
 800fcba:	f145 0500 	adc.w	r5, r5, #0
 800fcbe:	4294      	cmp	r4, r2
 800fcc0:	eb75 010c 	sbcs.w	r1, r5, ip
 800fcc4:	6a1b      	ldr	r3, [r3, #32]
 800fcc6:	dbef      	blt.n	800fca8 <__cleanup_context+0x54>
 800fcc8:	4618      	mov	r0, r3
 800fcca:	4649      	mov	r1, r9
 800fccc:	47c0      	blx	r8
 800fcce:	6830      	ldr	r0, [r6, #0]
 800fcd0:	4649      	mov	r1, r9
 800fcd2:	47c0      	blx	r8
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	e9c6 3300 	strd	r3, r3, [r6]
 800fcda:	4638      	mov	r0, r7
 800fcdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fce0:	3401      	adds	r4, #1
 800fce2:	f145 0500 	adc.w	r5, r5, #0
 800fce6:	4294      	cmp	r4, r2
 800fce8:	eb75 010c 	sbcs.w	r1, r5, ip
 800fcec:	dbdc      	blt.n	800fca8 <__cleanup_context+0x54>
 800fcee:	4618      	mov	r0, r3
 800fcf0:	4649      	mov	r1, r9
 800fcf2:	47c0      	blx	r8
 800fcf4:	6830      	ldr	r0, [r6, #0]
 800fcf6:	e7eb      	b.n	800fcd0 <__cleanup_context+0x7c>
 800fcf8:	4607      	mov	r7, r0
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	e9c6 3300 	strd	r3, r3, [r6]
 800fd00:	4638      	mov	r0, r7
 800fd02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd06:	f7fb fa2f 	bl	800b168 <rcutils_reset_error>
 800fd0a:	e7b7      	b.n	800fc7c <__cleanup_context+0x28>
 800fd0c:	f7ff ff7e 	bl	800fc0c <rcl_convert_rmw_ret_to_rcl_ret>
 800fd10:	4607      	mov	r7, r0
 800fd12:	e7bc      	b.n	800fc8e <__cleanup_context+0x3a>

0800fd14 <rcl_init>:
 800fd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd18:	1e05      	subs	r5, r0, #0
 800fd1a:	b09e      	sub	sp, #120	; 0x78
 800fd1c:	460e      	mov	r6, r1
 800fd1e:	4690      	mov	r8, r2
 800fd20:	461f      	mov	r7, r3
 800fd22:	f340 809c 	ble.w	800fe5e <rcl_init+0x14a>
 800fd26:	2900      	cmp	r1, #0
 800fd28:	f000 809c 	beq.w	800fe64 <rcl_init+0x150>
 800fd2c:	f1a1 0e04 	sub.w	lr, r1, #4
 800fd30:	f04f 0c00 	mov.w	ip, #0
 800fd34:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800fd38:	f10c 0c01 	add.w	ip, ip, #1
 800fd3c:	2c00      	cmp	r4, #0
 800fd3e:	f000 8091 	beq.w	800fe64 <rcl_init+0x150>
 800fd42:	4565      	cmp	r5, ip
 800fd44:	d1f6      	bne.n	800fd34 <rcl_init+0x20>
 800fd46:	f1b8 0f00 	cmp.w	r8, #0
 800fd4a:	f000 808b 	beq.w	800fe64 <rcl_init+0x150>
 800fd4e:	f8d8 4000 	ldr.w	r4, [r8]
 800fd52:	2c00      	cmp	r4, #0
 800fd54:	f000 8086 	beq.w	800fe64 <rcl_init+0x150>
 800fd58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd5a:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800fd5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd62:	6823      	ldr	r3, [r4, #0]
 800fd64:	f8cc 3000 	str.w	r3, [ip]
 800fd68:	a819      	add	r0, sp, #100	; 0x64
 800fd6a:	f7fb f9d9 	bl	800b120 <rcutils_allocator_is_valid>
 800fd6e:	2800      	cmp	r0, #0
 800fd70:	d078      	beq.n	800fe64 <rcl_init+0x150>
 800fd72:	2f00      	cmp	r7, #0
 800fd74:	d076      	beq.n	800fe64 <rcl_init+0x150>
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d178      	bne.n	800fe6e <rcl_init+0x15a>
 800fd7c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800fd80:	2178      	movs	r1, #120	; 0x78
 800fd82:	2001      	movs	r0, #1
 800fd84:	4798      	blx	r3
 800fd86:	4604      	mov	r4, r0
 800fd88:	6038      	str	r0, [r7, #0]
 800fd8a:	2800      	cmp	r0, #0
 800fd8c:	f000 80b6 	beq.w	800fefc <rcl_init+0x1e8>
 800fd90:	a802      	add	r0, sp, #8
 800fd92:	f002 ff85 	bl	8012ca0 <rmw_get_zero_initialized_context>
 800fd96:	a902      	add	r1, sp, #8
 800fd98:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800fd9c:	2250      	movs	r2, #80	; 0x50
 800fd9e:	ac19      	add	r4, sp, #100	; 0x64
 800fda0:	f007 f9f9 	bl	8017196 <memcpy>
 800fda4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fda6:	f8d7 e000 	ldr.w	lr, [r7]
 800fdaa:	46f4      	mov	ip, lr
 800fdac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fdb0:	6823      	ldr	r3, [r4, #0]
 800fdb2:	f8cc 3000 	str.w	r3, [ip]
 800fdb6:	f10e 0114 	add.w	r1, lr, #20
 800fdba:	4640      	mov	r0, r8
 800fdbc:	f000 f940 	bl	8010040 <rcl_init_options_copy>
 800fdc0:	4604      	mov	r4, r0
 800fdc2:	2800      	cmp	r0, #0
 800fdc4:	d144      	bne.n	800fe50 <rcl_init+0x13c>
 800fdc6:	f8d7 9000 	ldr.w	r9, [r7]
 800fdca:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800fdce:	f8c9 0020 	str.w	r0, [r9, #32]
 800fdd2:	f8c9 5018 	str.w	r5, [r9, #24]
 800fdd6:	f8c9 801c 	str.w	r8, [r9, #28]
 800fdda:	2d00      	cmp	r5, #0
 800fddc:	d04e      	beq.n	800fe7c <rcl_init+0x168>
 800fdde:	2e00      	cmp	r6, #0
 800fde0:	d04c      	beq.n	800fe7c <rcl_init+0x168>
 800fde2:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800fde6:	2104      	movs	r1, #4
 800fde8:	4628      	mov	r0, r5
 800fdea:	4798      	blx	r3
 800fdec:	f8c9 0020 	str.w	r0, [r9, #32]
 800fdf0:	f8d7 9000 	ldr.w	r9, [r7]
 800fdf4:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800fdf8:	46ca      	mov	sl, r9
 800fdfa:	b343      	cbz	r3, 800fe4e <rcl_init+0x13a>
 800fdfc:	2d01      	cmp	r5, #1
 800fdfe:	f178 0300 	sbcs.w	r3, r8, #0
 800fe02:	db3b      	blt.n	800fe7c <rcl_init+0x168>
 800fe04:	2400      	movs	r4, #0
 800fe06:	3e04      	subs	r6, #4
 800fe08:	46a1      	mov	r9, r4
 800fe0a:	e00b      	b.n	800fe24 <rcl_init+0x110>
 800fe0c:	6831      	ldr	r1, [r6, #0]
 800fe0e:	f007 f9c2 	bl	8017196 <memcpy>
 800fe12:	3401      	adds	r4, #1
 800fe14:	f149 0900 	adc.w	r9, r9, #0
 800fe18:	45c8      	cmp	r8, r9
 800fe1a:	bf08      	it	eq
 800fe1c:	42a5      	cmpeq	r5, r4
 800fe1e:	d02b      	beq.n	800fe78 <rcl_init+0x164>
 800fe20:	f8d7 a000 	ldr.w	sl, [r7]
 800fe24:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800fe28:	f7f0 f9e4 	bl	80001f4 <strlen>
 800fe2c:	1c42      	adds	r2, r0, #1
 800fe2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fe30:	991d      	ldr	r1, [sp, #116]	; 0x74
 800fe32:	f8da a020 	ldr.w	sl, [sl, #32]
 800fe36:	9201      	str	r2, [sp, #4]
 800fe38:	4610      	mov	r0, r2
 800fe3a:	4798      	blx	r3
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800fe42:	6a1b      	ldr	r3, [r3, #32]
 800fe44:	9a01      	ldr	r2, [sp, #4]
 800fe46:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fe4a:	2800      	cmp	r0, #0
 800fe4c:	d1de      	bne.n	800fe0c <rcl_init+0xf8>
 800fe4e:	240a      	movs	r4, #10
 800fe50:	4638      	mov	r0, r7
 800fe52:	f7ff feff 	bl	800fc54 <__cleanup_context>
 800fe56:	4620      	mov	r0, r4
 800fe58:	b01e      	add	sp, #120	; 0x78
 800fe5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe5e:	2900      	cmp	r1, #0
 800fe60:	f43f af71 	beq.w	800fd46 <rcl_init+0x32>
 800fe64:	240b      	movs	r4, #11
 800fe66:	4620      	mov	r0, r4
 800fe68:	b01e      	add	sp, #120	; 0x78
 800fe6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe6e:	2464      	movs	r4, #100	; 0x64
 800fe70:	4620      	mov	r0, r4
 800fe72:	b01e      	add	sp, #120	; 0x78
 800fe74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe78:	f8d7 9000 	ldr.w	r9, [r7]
 800fe7c:	4926      	ldr	r1, [pc, #152]	; (800ff18 <rcl_init+0x204>)
 800fe7e:	680b      	ldr	r3, [r1, #0]
 800fe80:	3301      	adds	r3, #1
 800fe82:	d036      	beq.n	800fef2 <rcl_init+0x1de>
 800fe84:	600b      	str	r3, [r1, #0]
 800fe86:	461a      	mov	r2, r3
 800fe88:	2400      	movs	r4, #0
 800fe8a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800fe8e:	607b      	str	r3, [r7, #4]
 800fe90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fe92:	3301      	adds	r3, #1
 800fe94:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800fe98:	d034      	beq.n	800ff04 <rcl_init+0x1f0>
 800fe9a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800fe9e:	b93b      	cbnz	r3, 800feb0 <rcl_init+0x19c>
 800fea0:	3030      	adds	r0, #48	; 0x30
 800fea2:	f000 f939 	bl	8010118 <rcl_get_localhost_only>
 800fea6:	4604      	mov	r4, r0
 800fea8:	2800      	cmp	r0, #0
 800feaa:	d1d1      	bne.n	800fe50 <rcl_init+0x13c>
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	6958      	ldr	r0, [r3, #20]
 800feb0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800feb2:	aa18      	add	r2, sp, #96	; 0x60
 800feb4:	a917      	add	r1, sp, #92	; 0x5c
 800feb6:	f001 f841 	bl	8010f3c <rcl_validate_enclave_name>
 800feba:	4604      	mov	r4, r0
 800febc:	2800      	cmp	r0, #0
 800febe:	d1c7      	bne.n	800fe50 <rcl_init+0x13c>
 800fec0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fec2:	b9eb      	cbnz	r3, 800ff00 <rcl_init+0x1ec>
 800fec4:	6839      	ldr	r1, [r7, #0]
 800fec6:	694b      	ldr	r3, [r1, #20]
 800fec8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800feca:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800fece:	f000 fc3d 	bl	801074c <rcl_get_security_options_from_environment>
 800fed2:	4604      	mov	r4, r0
 800fed4:	2800      	cmp	r0, #0
 800fed6:	d1bb      	bne.n	800fe50 <rcl_init+0x13c>
 800fed8:	6839      	ldr	r1, [r7, #0]
 800feda:	6948      	ldr	r0, [r1, #20]
 800fedc:	3128      	adds	r1, #40	; 0x28
 800fede:	3018      	adds	r0, #24
 800fee0:	f003 fa54 	bl	801338c <rmw_init>
 800fee4:	4604      	mov	r4, r0
 800fee6:	2800      	cmp	r0, #0
 800fee8:	d0bd      	beq.n	800fe66 <rcl_init+0x152>
 800feea:	f7ff fe8f 	bl	800fc0c <rcl_convert_rmw_ret_to_rcl_ret>
 800feee:	4604      	mov	r4, r0
 800fef0:	e7ae      	b.n	800fe50 <rcl_init+0x13c>
 800fef2:	2201      	movs	r2, #1
 800fef4:	461c      	mov	r4, r3
 800fef6:	600a      	str	r2, [r1, #0]
 800fef8:	4613      	mov	r3, r2
 800fefa:	e7c6      	b.n	800fe8a <rcl_init+0x176>
 800fefc:	240a      	movs	r4, #10
 800fefe:	e7b2      	b.n	800fe66 <rcl_init+0x152>
 800ff00:	2401      	movs	r4, #1
 800ff02:	e7a5      	b.n	800fe50 <rcl_init+0x13c>
 800ff04:	3024      	adds	r0, #36	; 0x24
 800ff06:	f005 ffe3 	bl	8015ed0 <rcl_get_default_domain_id>
 800ff0a:	4604      	mov	r4, r0
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	d19f      	bne.n	800fe50 <rcl_init+0x13c>
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	6958      	ldr	r0, [r3, #20]
 800ff14:	e7c1      	b.n	800fe9a <rcl_init+0x186>
 800ff16:	bf00      	nop
 800ff18:	20010b6c 	.word	0x20010b6c

0800ff1c <rcl_get_zero_initialized_init_options>:
 800ff1c:	2000      	movs	r0, #0
 800ff1e:	4770      	bx	lr

0800ff20 <rcl_init_options_init>:
 800ff20:	b084      	sub	sp, #16
 800ff22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff24:	b097      	sub	sp, #92	; 0x5c
 800ff26:	ae1d      	add	r6, sp, #116	; 0x74
 800ff28:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800ff2c:	2800      	cmp	r0, #0
 800ff2e:	d058      	beq.n	800ffe2 <rcl_init_options_init+0xc2>
 800ff30:	6803      	ldr	r3, [r0, #0]
 800ff32:	4605      	mov	r5, r0
 800ff34:	b133      	cbz	r3, 800ff44 <rcl_init_options_init+0x24>
 800ff36:	2464      	movs	r4, #100	; 0x64
 800ff38:	4620      	mov	r0, r4
 800ff3a:	b017      	add	sp, #92	; 0x5c
 800ff3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ff40:	b004      	add	sp, #16
 800ff42:	4770      	bx	lr
 800ff44:	4630      	mov	r0, r6
 800ff46:	f7fb f8eb 	bl	800b120 <rcutils_allocator_is_valid>
 800ff4a:	2800      	cmp	r0, #0
 800ff4c:	d049      	beq.n	800ffe2 <rcl_init_options_init+0xc2>
 800ff4e:	46b4      	mov	ip, r6
 800ff50:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ff54:	ac11      	add	r4, sp, #68	; 0x44
 800ff56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff58:	f8dc 3000 	ldr.w	r3, [ip]
 800ff5c:	6023      	str	r3, [r4, #0]
 800ff5e:	9921      	ldr	r1, [sp, #132]	; 0x84
 800ff60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ff62:	2050      	movs	r0, #80	; 0x50
 800ff64:	4798      	blx	r3
 800ff66:	4604      	mov	r4, r0
 800ff68:	6028      	str	r0, [r5, #0]
 800ff6a:	2800      	cmp	r0, #0
 800ff6c:	d03b      	beq.n	800ffe6 <rcl_init_options_init+0xc6>
 800ff6e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800ff72:	4686      	mov	lr, r0
 800ff74:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ff78:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ff7c:	f8dc 3000 	ldr.w	r3, [ip]
 800ff80:	f8ce 3000 	str.w	r3, [lr]
 800ff84:	a802      	add	r0, sp, #8
 800ff86:	f002 fe9b 	bl	8012cc0 <rmw_get_zero_initialized_init_options>
 800ff8a:	f10d 0e08 	add.w	lr, sp, #8
 800ff8e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ff92:	f104 0c18 	add.w	ip, r4, #24
 800ff96:	682f      	ldr	r7, [r5, #0]
 800ff98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ff9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ffa0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ffa4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ffa8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ffac:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ffb0:	ac20      	add	r4, sp, #128	; 0x80
 800ffb2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ffb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ffba:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ffbe:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800ffc2:	f107 0018 	add.w	r0, r7, #24
 800ffc6:	f003 f8e9 	bl	801319c <rmw_init_options_init>
 800ffca:	4604      	mov	r4, r0
 800ffcc:	2800      	cmp	r0, #0
 800ffce:	d0b3      	beq.n	800ff38 <rcl_init_options_init+0x18>
 800ffd0:	9921      	ldr	r1, [sp, #132]	; 0x84
 800ffd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ffd4:	6828      	ldr	r0, [r5, #0]
 800ffd6:	4798      	blx	r3
 800ffd8:	4620      	mov	r0, r4
 800ffda:	f7ff fe17 	bl	800fc0c <rcl_convert_rmw_ret_to_rcl_ret>
 800ffde:	4604      	mov	r4, r0
 800ffe0:	e7aa      	b.n	800ff38 <rcl_init_options_init+0x18>
 800ffe2:	240b      	movs	r4, #11
 800ffe4:	e7a8      	b.n	800ff38 <rcl_init_options_init+0x18>
 800ffe6:	240a      	movs	r4, #10
 800ffe8:	e7a6      	b.n	800ff38 <rcl_init_options_init+0x18>
 800ffea:	bf00      	nop

0800ffec <rcl_init_options_fini>:
 800ffec:	b530      	push	{r4, r5, lr}
 800ffee:	b087      	sub	sp, #28
 800fff0:	b1f0      	cbz	r0, 8010030 <rcl_init_options_fini+0x44>
 800fff2:	6803      	ldr	r3, [r0, #0]
 800fff4:	4604      	mov	r4, r0
 800fff6:	b1db      	cbz	r3, 8010030 <rcl_init_options_fini+0x44>
 800fff8:	469c      	mov	ip, r3
 800fffa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fffe:	f10d 0e04 	add.w	lr, sp, #4
 8010002:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010006:	f8dc 3000 	ldr.w	r3, [ip]
 801000a:	f8ce 3000 	str.w	r3, [lr]
 801000e:	a801      	add	r0, sp, #4
 8010010:	f7fb f886 	bl	800b120 <rcutils_allocator_is_valid>
 8010014:	b160      	cbz	r0, 8010030 <rcl_init_options_fini+0x44>
 8010016:	6820      	ldr	r0, [r4, #0]
 8010018:	3018      	adds	r0, #24
 801001a:	f003 f96f 	bl	80132fc <rmw_init_options_fini>
 801001e:	4605      	mov	r5, r0
 8010020:	b950      	cbnz	r0, 8010038 <rcl_init_options_fini+0x4c>
 8010022:	6820      	ldr	r0, [r4, #0]
 8010024:	9b02      	ldr	r3, [sp, #8]
 8010026:	9905      	ldr	r1, [sp, #20]
 8010028:	4798      	blx	r3
 801002a:	4628      	mov	r0, r5
 801002c:	b007      	add	sp, #28
 801002e:	bd30      	pop	{r4, r5, pc}
 8010030:	250b      	movs	r5, #11
 8010032:	4628      	mov	r0, r5
 8010034:	b007      	add	sp, #28
 8010036:	bd30      	pop	{r4, r5, pc}
 8010038:	f7ff fde8 	bl	800fc0c <rcl_convert_rmw_ret_to_rcl_ret>
 801003c:	4605      	mov	r5, r0
 801003e:	e7f8      	b.n	8010032 <rcl_init_options_fini+0x46>

08010040 <rcl_init_options_copy>:
 8010040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010044:	b094      	sub	sp, #80	; 0x50
 8010046:	2800      	cmp	r0, #0
 8010048:	d058      	beq.n	80100fc <rcl_init_options_copy+0xbc>
 801004a:	4604      	mov	r4, r0
 801004c:	6800      	ldr	r0, [r0, #0]
 801004e:	2800      	cmp	r0, #0
 8010050:	d054      	beq.n	80100fc <rcl_init_options_copy+0xbc>
 8010052:	460e      	mov	r6, r1
 8010054:	f7fb f864 	bl	800b120 <rcutils_allocator_is_valid>
 8010058:	2800      	cmp	r0, #0
 801005a:	d04f      	beq.n	80100fc <rcl_init_options_copy+0xbc>
 801005c:	2e00      	cmp	r6, #0
 801005e:	d04d      	beq.n	80100fc <rcl_init_options_copy+0xbc>
 8010060:	6833      	ldr	r3, [r6, #0]
 8010062:	b123      	cbz	r3, 801006e <rcl_init_options_copy+0x2e>
 8010064:	2464      	movs	r4, #100	; 0x64
 8010066:	4620      	mov	r0, r4
 8010068:	b014      	add	sp, #80	; 0x50
 801006a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801006e:	6827      	ldr	r7, [r4, #0]
 8010070:	46bc      	mov	ip, r7
 8010072:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010076:	ad0f      	add	r5, sp, #60	; 0x3c
 8010078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801007a:	f8dc 3000 	ldr.w	r3, [ip]
 801007e:	f8d7 8000 	ldr.w	r8, [r7]
 8010082:	602b      	str	r3, [r5, #0]
 8010084:	4619      	mov	r1, r3
 8010086:	2050      	movs	r0, #80	; 0x50
 8010088:	47c0      	blx	r8
 801008a:	4605      	mov	r5, r0
 801008c:	6030      	str	r0, [r6, #0]
 801008e:	b3d0      	cbz	r0, 8010106 <rcl_init_options_copy+0xc6>
 8010090:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8010094:	4686      	mov	lr, r0
 8010096:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801009a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801009e:	f8dc 3000 	ldr.w	r3, [ip]
 80100a2:	f8ce 3000 	str.w	r3, [lr]
 80100a6:	4668      	mov	r0, sp
 80100a8:	f002 fe0a 	bl	8012cc0 <rmw_get_zero_initialized_init_options>
 80100ac:	46ee      	mov	lr, sp
 80100ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80100b2:	f105 0c18 	add.w	ip, r5, #24
 80100b6:	6824      	ldr	r4, [r4, #0]
 80100b8:	6835      	ldr	r5, [r6, #0]
 80100ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80100be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80100c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80100c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80100ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80100ce:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80100d2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80100d6:	f104 0018 	add.w	r0, r4, #24
 80100da:	f105 0118 	add.w	r1, r5, #24
 80100de:	f003 f8c5 	bl	801326c <rmw_init_options_copy>
 80100e2:	4604      	mov	r4, r0
 80100e4:	2800      	cmp	r0, #0
 80100e6:	d0be      	beq.n	8010066 <rcl_init_options_copy+0x26>
 80100e8:	f7fb f828 	bl	800b13c <rcutils_get_error_string>
 80100ec:	f7fb f83c 	bl	800b168 <rcutils_reset_error>
 80100f0:	4630      	mov	r0, r6
 80100f2:	f7ff ff7b 	bl	800ffec <rcl_init_options_fini>
 80100f6:	b140      	cbz	r0, 801010a <rcl_init_options_copy+0xca>
 80100f8:	4604      	mov	r4, r0
 80100fa:	e7b4      	b.n	8010066 <rcl_init_options_copy+0x26>
 80100fc:	240b      	movs	r4, #11
 80100fe:	4620      	mov	r0, r4
 8010100:	b014      	add	sp, #80	; 0x50
 8010102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010106:	240a      	movs	r4, #10
 8010108:	e7ad      	b.n	8010066 <rcl_init_options_copy+0x26>
 801010a:	4620      	mov	r0, r4
 801010c:	b014      	add	sp, #80	; 0x50
 801010e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010112:	f7ff bd7b 	b.w	800fc0c <rcl_convert_rmw_ret_to_rcl_ret>
 8010116:	bf00      	nop

08010118 <rcl_get_localhost_only>:
 8010118:	b510      	push	{r4, lr}
 801011a:	b082      	sub	sp, #8
 801011c:	2300      	movs	r3, #0
 801011e:	9301      	str	r3, [sp, #4]
 8010120:	b1b8      	cbz	r0, 8010152 <rcl_get_localhost_only+0x3a>
 8010122:	4604      	mov	r4, r0
 8010124:	a901      	add	r1, sp, #4
 8010126:	480c      	ldr	r0, [pc, #48]	; (8010158 <rcl_get_localhost_only+0x40>)
 8010128:	f002 fb0e 	bl	8012748 <rcutils_get_env>
 801012c:	b110      	cbz	r0, 8010134 <rcl_get_localhost_only+0x1c>
 801012e:	2001      	movs	r0, #1
 8010130:	b002      	add	sp, #8
 8010132:	bd10      	pop	{r4, pc}
 8010134:	9b01      	ldr	r3, [sp, #4]
 8010136:	b113      	cbz	r3, 801013e <rcl_get_localhost_only+0x26>
 8010138:	781a      	ldrb	r2, [r3, #0]
 801013a:	2a31      	cmp	r2, #49	; 0x31
 801013c:	d004      	beq.n	8010148 <rcl_get_localhost_only+0x30>
 801013e:	2302      	movs	r3, #2
 8010140:	2000      	movs	r0, #0
 8010142:	7023      	strb	r3, [r4, #0]
 8010144:	b002      	add	sp, #8
 8010146:	bd10      	pop	{r4, pc}
 8010148:	785b      	ldrb	r3, [r3, #1]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d1f7      	bne.n	801013e <rcl_get_localhost_only+0x26>
 801014e:	2301      	movs	r3, #1
 8010150:	e7f6      	b.n	8010140 <rcl_get_localhost_only+0x28>
 8010152:	200b      	movs	r0, #11
 8010154:	b002      	add	sp, #8
 8010156:	bd10      	pop	{r4, pc}
 8010158:	080183a4 	.word	0x080183a4

0801015c <rcl_get_zero_initialized_node>:
 801015c:	4a03      	ldr	r2, [pc, #12]	; (801016c <rcl_get_zero_initialized_node+0x10>)
 801015e:	4603      	mov	r3, r0
 8010160:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010164:	e883 0003 	stmia.w	r3, {r0, r1}
 8010168:	4618      	mov	r0, r3
 801016a:	4770      	bx	lr
 801016c:	080183cc 	.word	0x080183cc

08010170 <rcl_node_init>:
 8010170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010174:	b0a9      	sub	sp, #164	; 0xa4
 8010176:	4604      	mov	r4, r0
 8010178:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 801017c:	a823      	add	r0, sp, #140	; 0x8c
 801017e:	460e      	mov	r6, r1
 8010180:	4615      	mov	r5, r2
 8010182:	461f      	mov	r7, r3
 8010184:	f006 f8cc 	bl	8016320 <rcl_guard_condition_get_default_options>
 8010188:	f1b8 0f00 	cmp.w	r8, #0
 801018c:	f000 80e6 	beq.w	801035c <rcl_node_init+0x1ec>
 8010190:	4640      	mov	r0, r8
 8010192:	f7fa ffc5 	bl	800b120 <rcutils_allocator_is_valid>
 8010196:	2800      	cmp	r0, #0
 8010198:	f000 80e0 	beq.w	801035c <rcl_node_init+0x1ec>
 801019c:	2e00      	cmp	r6, #0
 801019e:	f000 80dd 	beq.w	801035c <rcl_node_init+0x1ec>
 80101a2:	2d00      	cmp	r5, #0
 80101a4:	f000 80da 	beq.w	801035c <rcl_node_init+0x1ec>
 80101a8:	2c00      	cmp	r4, #0
 80101aa:	f000 80d7 	beq.w	801035c <rcl_node_init+0x1ec>
 80101ae:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80101b2:	f1b9 0f00 	cmp.w	r9, #0
 80101b6:	f040 80fd 	bne.w	80103b4 <rcl_node_init+0x244>
 80101ba:	2f00      	cmp	r7, #0
 80101bc:	f000 80ce 	beq.w	801035c <rcl_node_init+0x1ec>
 80101c0:	4638      	mov	r0, r7
 80101c2:	f7ff fd41 	bl	800fc48 <rcl_context_is_valid>
 80101c6:	4682      	mov	sl, r0
 80101c8:	2800      	cmp	r0, #0
 80101ca:	f000 80cd 	beq.w	8010368 <rcl_node_init+0x1f8>
 80101ce:	464a      	mov	r2, r9
 80101d0:	a922      	add	r1, sp, #136	; 0x88
 80101d2:	4630      	mov	r0, r6
 80101d4:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 80101d8:	f002 ff14 	bl	8013004 <rmw_validate_node_name>
 80101dc:	4681      	mov	r9, r0
 80101de:	2800      	cmp	r0, #0
 80101e0:	f040 80be 	bne.w	8010360 <rcl_node_init+0x1f0>
 80101e4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80101e6:	2800      	cmp	r0, #0
 80101e8:	f040 80f0 	bne.w	80103cc <rcl_node_init+0x25c>
 80101ec:	4628      	mov	r0, r5
 80101ee:	f7f0 f801 	bl	80001f4 <strlen>
 80101f2:	2800      	cmp	r0, #0
 80101f4:	f040 80bb 	bne.w	801036e <rcl_node_init+0x1fe>
 80101f8:	4d7c      	ldr	r5, [pc, #496]	; (80103ec <rcl_node_init+0x27c>)
 80101fa:	a922      	add	r1, sp, #136	; 0x88
 80101fc:	2200      	movs	r2, #0
 80101fe:	4628      	mov	r0, r5
 8010200:	f002 fee2 	bl	8012fc8 <rmw_validate_namespace>
 8010204:	4681      	mov	r9, r0
 8010206:	2800      	cmp	r0, #0
 8010208:	f040 80aa 	bne.w	8010360 <rcl_node_init+0x1f0>
 801020c:	4682      	mov	sl, r0
 801020e:	9822      	ldr	r0, [sp, #136]	; 0x88
 8010210:	2800      	cmp	r0, #0
 8010212:	f040 80e0 	bne.w	80103d6 <rcl_node_init+0x266>
 8010216:	f8d8 3000 	ldr.w	r3, [r8]
 801021a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801021e:	2078      	movs	r0, #120	; 0x78
 8010220:	4798      	blx	r3
 8010222:	4681      	mov	r9, r0
 8010224:	6060      	str	r0, [r4, #4]
 8010226:	2800      	cmp	r0, #0
 8010228:	f000 80ca 	beq.w	80103c0 <rcl_node_init+0x250>
 801022c:	2200      	movs	r2, #0
 801022e:	2300      	movs	r3, #0
 8010230:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 8010234:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 8010238:	a808      	add	r0, sp, #32
 801023a:	f000 f907 	bl	801044c <rcl_node_get_default_options>
 801023e:	a908      	add	r1, sp, #32
 8010240:	4648      	mov	r0, r9
 8010242:	2268      	movs	r2, #104	; 0x68
 8010244:	f006 ffa7 	bl	8017196 <memcpy>
 8010248:	6861      	ldr	r1, [r4, #4]
 801024a:	6027      	str	r7, [r4, #0]
 801024c:	4640      	mov	r0, r8
 801024e:	f000 f90b 	bl	8010468 <rcl_node_options_copy>
 8010252:	2800      	cmp	r0, #0
 8010254:	d158      	bne.n	8010308 <rcl_node_init+0x198>
 8010256:	4628      	mov	r0, r5
 8010258:	f7ef ffcc 	bl	80001f4 <strlen>
 801025c:	4428      	add	r0, r5
 801025e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8010262:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8010266:	2b2f      	cmp	r3, #47	; 0x2f
 8010268:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801026c:	9300      	str	r3, [sp, #0]
 801026e:	bf0c      	ite	eq
 8010270:	4b5f      	ldreq	r3, [pc, #380]	; (80103f0 <rcl_node_init+0x280>)
 8010272:	4b60      	ldrne	r3, [pc, #384]	; (80103f4 <rcl_node_init+0x284>)
 8010274:	9302      	str	r3, [sp, #8]
 8010276:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801027a:	9301      	str	r3, [sp, #4]
 801027c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8010280:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010284:	f002 fa88 	bl	8012798 <rcutils_format_string_limit>
 8010288:	6823      	ldr	r3, [r4, #0]
 801028a:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 801028e:	6818      	ldr	r0, [r3, #0]
 8010290:	4631      	mov	r1, r6
 8010292:	3028      	adds	r0, #40	; 0x28
 8010294:	462a      	mov	r2, r5
 8010296:	6866      	ldr	r6, [r4, #4]
 8010298:	f003 facc 	bl	8013834 <rmw_create_node>
 801029c:	6863      	ldr	r3, [r4, #4]
 801029e:	66b0      	str	r0, [r6, #104]	; 0x68
 80102a0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80102a2:	2800      	cmp	r0, #0
 80102a4:	d032      	beq.n	801030c <rcl_node_init+0x19c>
 80102a6:	f003 fb59 	bl	801395c <rmw_node_get_graph_guard_condition>
 80102aa:	4681      	mov	r9, r0
 80102ac:	b360      	cbz	r0, 8010308 <rcl_node_init+0x198>
 80102ae:	f8d8 3000 	ldr.w	r3, [r8]
 80102b2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80102b6:	6866      	ldr	r6, [r4, #4]
 80102b8:	2008      	movs	r0, #8
 80102ba:	4798      	blx	r3
 80102bc:	6863      	ldr	r3, [r4, #4]
 80102be:	66f0      	str	r0, [r6, #108]	; 0x6c
 80102c0:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 80102c4:	f1bb 0f00 	cmp.w	fp, #0
 80102c8:	d020      	beq.n	801030c <rcl_node_init+0x19c>
 80102ca:	a806      	add	r0, sp, #24
 80102cc:	f005 ff98 	bl	8016200 <rcl_get_zero_initialized_guard_condition>
 80102d0:	a806      	add	r0, sp, #24
 80102d2:	c803      	ldmia	r0, {r0, r1}
 80102d4:	6863      	ldr	r3, [r4, #4]
 80102d6:	46c4      	mov	ip, r8
 80102d8:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 80102dc:	e88b 0003 	stmia.w	fp, {r0, r1}
 80102e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80102e4:	ae23      	add	r6, sp, #140	; 0x8c
 80102e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80102e8:	f8dc 3000 	ldr.w	r3, [ip]
 80102ec:	6033      	str	r3, [r6, #0]
 80102ee:	ab28      	add	r3, sp, #160	; 0xa0
 80102f0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80102f4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80102f8:	4649      	mov	r1, r9
 80102fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80102fc:	463a      	mov	r2, r7
 80102fe:	4670      	mov	r0, lr
 8010300:	f005 ff88 	bl	8016214 <rcl_guard_condition_init_from_rmw>
 8010304:	4681      	mov	r9, r0
 8010306:	b328      	cbz	r0, 8010354 <rcl_node_init+0x1e4>
 8010308:	6863      	ldr	r3, [r4, #4]
 801030a:	b1f3      	cbz	r3, 801034a <rcl_node_init+0x1da>
 801030c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 801030e:	b128      	cbz	r0, 801031c <rcl_node_init+0x1ac>
 8010310:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010314:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010318:	4798      	blx	r3
 801031a:	6863      	ldr	r3, [r4, #4]
 801031c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801031e:	b110      	cbz	r0, 8010326 <rcl_node_init+0x1b6>
 8010320:	f003 faa0 	bl	8013864 <rmw_destroy_node>
 8010324:	6863      	ldr	r3, [r4, #4]
 8010326:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8010328:	b148      	cbz	r0, 801033e <rcl_node_init+0x1ce>
 801032a:	f005 ffd3 	bl	80162d4 <rcl_guard_condition_fini>
 801032e:	6863      	ldr	r3, [r4, #4]
 8010330:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010334:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8010336:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801033a:	4798      	blx	r3
 801033c:	6863      	ldr	r3, [r4, #4]
 801033e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010342:	4618      	mov	r0, r3
 8010344:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010348:	4798      	blx	r3
 801034a:	2300      	movs	r3, #0
 801034c:	e9c4 3300 	strd	r3, r3, [r4]
 8010350:	f04f 0901 	mov.w	r9, #1
 8010354:	f1ba 0f00 	cmp.w	sl, #0
 8010358:	d125      	bne.n	80103a6 <rcl_node_init+0x236>
 801035a:	e001      	b.n	8010360 <rcl_node_init+0x1f0>
 801035c:	f04f 090b 	mov.w	r9, #11
 8010360:	4648      	mov	r0, r9
 8010362:	b029      	add	sp, #164	; 0xa4
 8010364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010368:	f04f 0965 	mov.w	r9, #101	; 0x65
 801036c:	e7f8      	b.n	8010360 <rcl_node_init+0x1f0>
 801036e:	782b      	ldrb	r3, [r5, #0]
 8010370:	2b2f      	cmp	r3, #47	; 0x2f
 8010372:	f43f af42 	beq.w	80101fa <rcl_node_init+0x8a>
 8010376:	9503      	str	r5, [sp, #12]
 8010378:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801037c:	9300      	str	r3, [sp, #0]
 801037e:	4b1e      	ldr	r3, [pc, #120]	; (80103f8 <rcl_node_init+0x288>)
 8010380:	9302      	str	r3, [sp, #8]
 8010382:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010386:	9301      	str	r3, [sp, #4]
 8010388:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801038c:	f002 fa04 	bl	8012798 <rcutils_format_string_limit>
 8010390:	4605      	mov	r5, r0
 8010392:	b340      	cbz	r0, 80103e6 <rcl_node_init+0x276>
 8010394:	2200      	movs	r2, #0
 8010396:	a922      	add	r1, sp, #136	; 0x88
 8010398:	9222      	str	r2, [sp, #136]	; 0x88
 801039a:	f002 fe15 	bl	8012fc8 <rmw_validate_namespace>
 801039e:	4681      	mov	r9, r0
 80103a0:	2800      	cmp	r0, #0
 80103a2:	f43f af34 	beq.w	801020e <rcl_node_init+0x9e>
 80103a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80103aa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80103ae:	4628      	mov	r0, r5
 80103b0:	4798      	blx	r3
 80103b2:	e7d5      	b.n	8010360 <rcl_node_init+0x1f0>
 80103b4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80103b8:	4648      	mov	r0, r9
 80103ba:	b029      	add	sp, #164	; 0xa4
 80103bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103c0:	f04f 090a 	mov.w	r9, #10
 80103c4:	f1ba 0f00 	cmp.w	sl, #0
 80103c8:	d1ed      	bne.n	80103a6 <rcl_node_init+0x236>
 80103ca:	e7c9      	b.n	8010360 <rcl_node_init+0x1f0>
 80103cc:	f002 fe6c 	bl	80130a8 <rmw_node_name_validation_result_string>
 80103d0:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 80103d4:	e7c4      	b.n	8010360 <rcl_node_init+0x1f0>
 80103d6:	f002 fe09 	bl	8012fec <rmw_namespace_validation_result_string>
 80103da:	f04f 09ca 	mov.w	r9, #202	; 0xca
 80103de:	f1ba 0f00 	cmp.w	sl, #0
 80103e2:	d1e0      	bne.n	80103a6 <rcl_node_init+0x236>
 80103e4:	e7bc      	b.n	8010360 <rcl_node_init+0x1f0>
 80103e6:	f04f 090a 	mov.w	r9, #10
 80103ea:	e7b9      	b.n	8010360 <rcl_node_init+0x1f0>
 80103ec:	080183bc 	.word	0x080183bc
 80103f0:	08018240 	.word	0x08018240
 80103f4:	080183c4 	.word	0x080183c4
 80103f8:	080183c0 	.word	0x080183c0

080103fc <rcl_node_is_valid>:
 80103fc:	b130      	cbz	r0, 801040c <rcl_node_is_valid+0x10>
 80103fe:	6843      	ldr	r3, [r0, #4]
 8010400:	b123      	cbz	r3, 801040c <rcl_node_is_valid+0x10>
 8010402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010404:	b113      	cbz	r3, 801040c <rcl_node_is_valid+0x10>
 8010406:	6800      	ldr	r0, [r0, #0]
 8010408:	f7ff bc1e 	b.w	800fc48 <rcl_context_is_valid>
 801040c:	2000      	movs	r0, #0
 801040e:	4770      	bx	lr

08010410 <rcl_node_get_name>:
 8010410:	b120      	cbz	r0, 801041c <rcl_node_get_name+0xc>
 8010412:	6840      	ldr	r0, [r0, #4]
 8010414:	b110      	cbz	r0, 801041c <rcl_node_get_name+0xc>
 8010416:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8010418:	b100      	cbz	r0, 801041c <rcl_node_get_name+0xc>
 801041a:	6880      	ldr	r0, [r0, #8]
 801041c:	4770      	bx	lr
 801041e:	bf00      	nop

08010420 <rcl_node_get_namespace>:
 8010420:	b120      	cbz	r0, 801042c <rcl_node_get_namespace+0xc>
 8010422:	6840      	ldr	r0, [r0, #4]
 8010424:	b110      	cbz	r0, 801042c <rcl_node_get_namespace+0xc>
 8010426:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8010428:	b100      	cbz	r0, 801042c <rcl_node_get_namespace+0xc>
 801042a:	68c0      	ldr	r0, [r0, #12]
 801042c:	4770      	bx	lr
 801042e:	bf00      	nop

08010430 <rcl_node_get_options>:
 8010430:	b128      	cbz	r0, 801043e <rcl_node_get_options+0xe>
 8010432:	6840      	ldr	r0, [r0, #4]
 8010434:	b118      	cbz	r0, 801043e <rcl_node_get_options+0xe>
 8010436:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8010438:	2b00      	cmp	r3, #0
 801043a:	bf08      	it	eq
 801043c:	2000      	moveq	r0, #0
 801043e:	4770      	bx	lr

08010440 <rcl_node_get_rmw_handle>:
 8010440:	b110      	cbz	r0, 8010448 <rcl_node_get_rmw_handle+0x8>
 8010442:	6840      	ldr	r0, [r0, #4]
 8010444:	b100      	cbz	r0, 8010448 <rcl_node_get_rmw_handle+0x8>
 8010446:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8010448:	4770      	bx	lr
 801044a:	bf00      	nop

0801044c <rcl_node_get_default_options>:
 801044c:	b510      	push	{r4, lr}
 801044e:	2268      	movs	r2, #104	; 0x68
 8010450:	4604      	mov	r4, r0
 8010452:	2100      	movs	r1, #0
 8010454:	f006 fd80 	bl	8016f58 <memset>
 8010458:	4620      	mov	r0, r4
 801045a:	f7fa fe53 	bl	800b104 <rcutils_get_default_allocator>
 801045e:	2301      	movs	r3, #1
 8010460:	7523      	strb	r3, [r4, #20]
 8010462:	4620      	mov	r0, r4
 8010464:	bd10      	pop	{r4, pc}
 8010466:	bf00      	nop

08010468 <rcl_node_options_copy>:
 8010468:	b1d0      	cbz	r0, 80104a0 <rcl_node_options_copy+0x38>
 801046a:	b570      	push	{r4, r5, r6, lr}
 801046c:	460c      	mov	r4, r1
 801046e:	b1a9      	cbz	r1, 801049c <rcl_node_options_copy+0x34>
 8010470:	4288      	cmp	r0, r1
 8010472:	4684      	mov	ip, r0
 8010474:	d012      	beq.n	801049c <rcl_node_options_copy+0x34>
 8010476:	4605      	mov	r5, r0
 8010478:	8a86      	ldrh	r6, [r0, #20]
 801047a:	468e      	mov	lr, r1
 801047c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801047e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010482:	682b      	ldr	r3, [r5, #0]
 8010484:	f8ce 3000 	str.w	r3, [lr]
 8010488:	f10c 0118 	add.w	r1, ip, #24
 801048c:	2250      	movs	r2, #80	; 0x50
 801048e:	82a6      	strh	r6, [r4, #20]
 8010490:	f104 0018 	add.w	r0, r4, #24
 8010494:	f006 fe7f 	bl	8017196 <memcpy>
 8010498:	2000      	movs	r0, #0
 801049a:	bd70      	pop	{r4, r5, r6, pc}
 801049c:	200b      	movs	r0, #11
 801049e:	bd70      	pop	{r4, r5, r6, pc}
 80104a0:	200b      	movs	r0, #11
 80104a2:	4770      	bx	lr

080104a4 <rcl_node_resolve_name>:
 80104a4:	b082      	sub	sp, #8
 80104a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104aa:	b091      	sub	sp, #68	; 0x44
 80104ac:	ac1a      	add	r4, sp, #104	; 0x68
 80104ae:	e884 000c 	stmia.w	r4, {r2, r3}
 80104b2:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 80104b6:	2800      	cmp	r0, #0
 80104b8:	d03b      	beq.n	8010532 <rcl_node_resolve_name+0x8e>
 80104ba:	460c      	mov	r4, r1
 80104bc:	4605      	mov	r5, r0
 80104be:	f7ff ffb7 	bl	8010430 <rcl_node_get_options>
 80104c2:	2800      	cmp	r0, #0
 80104c4:	d037      	beq.n	8010536 <rcl_node_resolve_name+0x92>
 80104c6:	4628      	mov	r0, r5
 80104c8:	f7ff ffa2 	bl	8010410 <rcl_node_get_name>
 80104cc:	4606      	mov	r6, r0
 80104ce:	4628      	mov	r0, r5
 80104d0:	f7ff ffa6 	bl	8010420 <rcl_node_get_namespace>
 80104d4:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 80104d8:	4681      	mov	r9, r0
 80104da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80104de:	ad0b      	add	r5, sp, #44	; 0x2c
 80104e0:	46ac      	mov	ip, r5
 80104e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80104e6:	f8de 3000 	ldr.w	r3, [lr]
 80104ea:	f8cc 3000 	str.w	r3, [ip]
 80104ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80104f0:	b1fb      	cbz	r3, 8010532 <rcl_node_resolve_name+0x8e>
 80104f2:	468a      	mov	sl, r1
 80104f4:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 80104f8:	f002 faa6 	bl	8012a48 <rcutils_get_zero_initialized_string_map>
 80104fc:	ab10      	add	r3, sp, #64	; 0x40
 80104fe:	9008      	str	r0, [sp, #32]
 8010500:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8010504:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010508:	2100      	movs	r1, #0
 801050a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801050e:	a808      	add	r0, sp, #32
 8010510:	f002 fb12 	bl	8012b38 <rcutils_string_map_init>
 8010514:	4607      	mov	r7, r0
 8010516:	b180      	cbz	r0, 801053a <rcl_node_resolve_name+0x96>
 8010518:	f7fa fe10 	bl	800b13c <rcutils_get_error_string>
 801051c:	f7fa fe24 	bl	800b168 <rcutils_reset_error>
 8010520:	2f0a      	cmp	r7, #10
 8010522:	bf18      	it	ne
 8010524:	2701      	movne	r7, #1
 8010526:	4638      	mov	r0, r7
 8010528:	b011      	add	sp, #68	; 0x44
 801052a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801052e:	b002      	add	sp, #8
 8010530:	4770      	bx	lr
 8010532:	270b      	movs	r7, #11
 8010534:	e7f7      	b.n	8010526 <rcl_node_resolve_name+0x82>
 8010536:	2701      	movs	r7, #1
 8010538:	e7f5      	b.n	8010526 <rcl_node_resolve_name+0x82>
 801053a:	9009      	str	r0, [sp, #36]	; 0x24
 801053c:	9007      	str	r0, [sp, #28]
 801053e:	a808      	add	r0, sp, #32
 8010540:	f005 fe58 	bl	80161f4 <rcl_get_default_topic_name_substitutions>
 8010544:	4607      	mov	r7, r0
 8010546:	b1a8      	cbz	r0, 8010574 <rcl_node_resolve_name+0xd0>
 8010548:	280a      	cmp	r0, #10
 801054a:	9c07      	ldr	r4, [sp, #28]
 801054c:	d000      	beq.n	8010550 <rcl_node_resolve_name+0xac>
 801054e:	2701      	movs	r7, #1
 8010550:	a808      	add	r0, sp, #32
 8010552:	f002 fb31 	bl	8012bb8 <rcutils_string_map_fini>
 8010556:	2800      	cmp	r0, #0
 8010558:	d13d      	bne.n	80105d6 <rcl_node_resolve_name+0x132>
 801055a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801055c:	4659      	mov	r1, fp
 801055e:	47d0      	blx	sl
 8010560:	4659      	mov	r1, fp
 8010562:	4620      	mov	r0, r4
 8010564:	47d0      	blx	sl
 8010566:	f1b8 0f00 	cmp.w	r8, #0
 801056a:	d0dc      	beq.n	8010526 <rcl_node_resolve_name+0x82>
 801056c:	2f67      	cmp	r7, #103	; 0x67
 801056e:	bf08      	it	eq
 8010570:	2768      	moveq	r7, #104	; 0x68
 8010572:	e7d8      	b.n	8010526 <rcl_node_resolve_name+0x82>
 8010574:	ab09      	add	r3, sp, #36	; 0x24
 8010576:	9305      	str	r3, [sp, #20]
 8010578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801057a:	46ec      	mov	ip, sp
 801057c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010580:	682b      	ldr	r3, [r5, #0]
 8010582:	f8cc 3000 	str.w	r3, [ip]
 8010586:	464a      	mov	r2, r9
 8010588:	4631      	mov	r1, r6
 801058a:	4620      	mov	r0, r4
 801058c:	ab08      	add	r3, sp, #32
 801058e:	f005 fcd3 	bl	8015f38 <rcl_expand_topic_name>
 8010592:	4607      	mov	r7, r0
 8010594:	b9b8      	cbnz	r0, 80105c6 <rcl_node_resolve_name+0x122>
 8010596:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010598:	9009      	str	r0, [sp, #36]	; 0x24
 801059a:	4602      	mov	r2, r0
 801059c:	a90a      	add	r1, sp, #40	; 0x28
 801059e:	4620      	mov	r0, r4
 80105a0:	f002 fc4e 	bl	8012e40 <rmw_validate_full_topic_name>
 80105a4:	b988      	cbnz	r0, 80105ca <rcl_node_resolve_name+0x126>
 80105a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80105a8:	b9d5      	cbnz	r5, 80105e0 <rcl_node_resolve_name+0x13c>
 80105aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80105ac:	a808      	add	r0, sp, #32
 80105ae:	601c      	str	r4, [r3, #0]
 80105b0:	f002 fb02 	bl	8012bb8 <rcutils_string_map_fini>
 80105b4:	4607      	mov	r7, r0
 80105b6:	b1a8      	cbz	r0, 80105e4 <rcl_node_resolve_name+0x140>
 80105b8:	f7fa fdc0 	bl	800b13c <rcutils_get_error_string>
 80105bc:	462c      	mov	r4, r5
 80105be:	f7fa fdd3 	bl	800b168 <rcutils_reset_error>
 80105c2:	2701      	movs	r7, #1
 80105c4:	e7c9      	b.n	801055a <rcl_node_resolve_name+0xb6>
 80105c6:	9c07      	ldr	r4, [sp, #28]
 80105c8:	e7c2      	b.n	8010550 <rcl_node_resolve_name+0xac>
 80105ca:	f7fa fdb7 	bl	800b13c <rcutils_get_error_string>
 80105ce:	2701      	movs	r7, #1
 80105d0:	f7fa fdca 	bl	800b168 <rcutils_reset_error>
 80105d4:	e7bc      	b.n	8010550 <rcl_node_resolve_name+0xac>
 80105d6:	f7fa fdb1 	bl	800b13c <rcutils_get_error_string>
 80105da:	f7fa fdc5 	bl	800b168 <rcutils_reset_error>
 80105de:	e7bc      	b.n	801055a <rcl_node_resolve_name+0xb6>
 80105e0:	2767      	movs	r7, #103	; 0x67
 80105e2:	e7b5      	b.n	8010550 <rcl_node_resolve_name+0xac>
 80105e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80105e6:	4659      	mov	r1, fp
 80105e8:	47d0      	blx	sl
 80105ea:	4659      	mov	r1, fp
 80105ec:	4638      	mov	r0, r7
 80105ee:	47d0      	blx	sl
 80105f0:	e799      	b.n	8010526 <rcl_node_resolve_name+0x82>
 80105f2:	bf00      	nop

080105f4 <exact_match_lookup>:
 80105f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105f6:	f102 0708 	add.w	r7, r2, #8
 80105fa:	460b      	mov	r3, r1
 80105fc:	4614      	mov	r4, r2
 80105fe:	4606      	mov	r6, r0
 8010600:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010604:	b085      	sub	sp, #20
 8010606:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801060a:	4618      	mov	r0, r3
 801060c:	4919      	ldr	r1, [pc, #100]	; (8010674 <exact_match_lookup+0x80>)
 801060e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010612:	f002 f8b3 	bl	801277c <rcutils_join_path>
 8010616:	7833      	ldrb	r3, [r6, #0]
 8010618:	2b2f      	cmp	r3, #47	; 0x2f
 801061a:	4605      	mov	r5, r0
 801061c:	d023      	beq.n	8010666 <exact_match_lookup+0x72>
 801061e:	f104 030c 	add.w	r3, r4, #12
 8010622:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010626:	e88d 0003 	stmia.w	sp, {r0, r1}
 801062a:	1c70      	adds	r0, r6, #1
 801062c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010630:	f002 f8aa 	bl	8012788 <rcutils_to_native_path>
 8010634:	4606      	mov	r6, r0
 8010636:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801063a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801063e:	4631      	mov	r1, r6
 8010640:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010644:	4628      	mov	r0, r5
 8010646:	f002 f899 	bl	801277c <rcutils_join_path>
 801064a:	6862      	ldr	r2, [r4, #4]
 801064c:	6921      	ldr	r1, [r4, #16]
 801064e:	4603      	mov	r3, r0
 8010650:	4630      	mov	r0, r6
 8010652:	461e      	mov	r6, r3
 8010654:	4790      	blx	r2
 8010656:	4628      	mov	r0, r5
 8010658:	6863      	ldr	r3, [r4, #4]
 801065a:	6921      	ldr	r1, [r4, #16]
 801065c:	4798      	blx	r3
 801065e:	4635      	mov	r5, r6
 8010660:	4628      	mov	r0, r5
 8010662:	b005      	add	sp, #20
 8010664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010666:	7873      	ldrb	r3, [r6, #1]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d1d8      	bne.n	801061e <exact_match_lookup+0x2a>
 801066c:	4628      	mov	r0, r5
 801066e:	b005      	add	sp, #20
 8010670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010672:	bf00      	nop
 8010674:	08018410 	.word	0x08018410

08010678 <rcl_get_secure_root>:
 8010678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801067c:	b085      	sub	sp, #20
 801067e:	b168      	cbz	r0, 801069c <rcl_get_secure_root+0x24>
 8010680:	4607      	mov	r7, r0
 8010682:	4608      	mov	r0, r1
 8010684:	460c      	mov	r4, r1
 8010686:	f7fa fd4b 	bl	800b120 <rcutils_allocator_is_valid>
 801068a:	b138      	cbz	r0, 801069c <rcl_get_secure_root+0x24>
 801068c:	2300      	movs	r3, #0
 801068e:	482d      	ldr	r0, [pc, #180]	; (8010744 <rcl_get_secure_root+0xcc>)
 8010690:	9303      	str	r3, [sp, #12]
 8010692:	a903      	add	r1, sp, #12
 8010694:	f002 f858 	bl	8012748 <rcutils_get_env>
 8010698:	4605      	mov	r5, r0
 801069a:	b120      	cbz	r0, 80106a6 <rcl_get_secure_root+0x2e>
 801069c:	2500      	movs	r5, #0
 801069e:	4628      	mov	r0, r5
 80106a0:	b005      	add	sp, #20
 80106a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106a6:	9b03      	ldr	r3, [sp, #12]
 80106a8:	781a      	ldrb	r2, [r3, #0]
 80106aa:	2a00      	cmp	r2, #0
 80106ac:	d0f6      	beq.n	801069c <rcl_get_secure_root+0x24>
 80106ae:	f104 090c 	add.w	r9, r4, #12
 80106b2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80106b6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80106ba:	4618      	mov	r0, r3
 80106bc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80106c0:	f002 f984 	bl	80129cc <rcutils_strdup>
 80106c4:	4680      	mov	r8, r0
 80106c6:	2800      	cmp	r0, #0
 80106c8:	d0e8      	beq.n	801069c <rcl_get_secure_root+0x24>
 80106ca:	481f      	ldr	r0, [pc, #124]	; (8010748 <rcl_get_secure_root+0xd0>)
 80106cc:	9503      	str	r5, [sp, #12]
 80106ce:	a903      	add	r1, sp, #12
 80106d0:	f002 f83a 	bl	8012748 <rcutils_get_env>
 80106d4:	b160      	cbz	r0, 80106f0 <rcl_get_secure_root+0x78>
 80106d6:	2600      	movs	r6, #0
 80106d8:	6863      	ldr	r3, [r4, #4]
 80106da:	6921      	ldr	r1, [r4, #16]
 80106dc:	4630      	mov	r0, r6
 80106de:	4798      	blx	r3
 80106e0:	4640      	mov	r0, r8
 80106e2:	6863      	ldr	r3, [r4, #4]
 80106e4:	6921      	ldr	r1, [r4, #16]
 80106e6:	4798      	blx	r3
 80106e8:	4628      	mov	r0, r5
 80106ea:	b005      	add	sp, #20
 80106ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106f0:	9b03      	ldr	r3, [sp, #12]
 80106f2:	781e      	ldrb	r6, [r3, #0]
 80106f4:	b1f6      	cbz	r6, 8010734 <rcl_get_secure_root+0xbc>
 80106f6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80106fa:	e88d 0003 	stmia.w	sp, {r0, r1}
 80106fe:	4618      	mov	r0, r3
 8010700:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010704:	f002 f962 	bl	80129cc <rcutils_strdup>
 8010708:	4606      	mov	r6, r0
 801070a:	2800      	cmp	r0, #0
 801070c:	d0e3      	beq.n	80106d6 <rcl_get_secure_root+0x5e>
 801070e:	4622      	mov	r2, r4
 8010710:	4641      	mov	r1, r8
 8010712:	f7ff ff6f 	bl	80105f4 <exact_match_lookup>
 8010716:	4605      	mov	r5, r0
 8010718:	2d00      	cmp	r5, #0
 801071a:	d0dd      	beq.n	80106d8 <rcl_get_secure_root+0x60>
 801071c:	4628      	mov	r0, r5
 801071e:	f002 f82b 	bl	8012778 <rcutils_is_directory>
 8010722:	4603      	mov	r3, r0
 8010724:	2800      	cmp	r0, #0
 8010726:	d1d7      	bne.n	80106d8 <rcl_get_secure_root+0x60>
 8010728:	4628      	mov	r0, r5
 801072a:	6921      	ldr	r1, [r4, #16]
 801072c:	461d      	mov	r5, r3
 801072e:	6863      	ldr	r3, [r4, #4]
 8010730:	4798      	blx	r3
 8010732:	e7d1      	b.n	80106d8 <rcl_get_secure_root+0x60>
 8010734:	4622      	mov	r2, r4
 8010736:	4638      	mov	r0, r7
 8010738:	4641      	mov	r1, r8
 801073a:	f7ff ff5b 	bl	80105f4 <exact_match_lookup>
 801073e:	4605      	mov	r5, r0
 8010740:	e7ea      	b.n	8010718 <rcl_get_secure_root+0xa0>
 8010742:	bf00      	nop
 8010744:	0801841c 	.word	0x0801841c
 8010748:	08018434 	.word	0x08018434

0801074c <rcl_get_security_options_from_environment>:
 801074c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010750:	b082      	sub	sp, #8
 8010752:	2300      	movs	r3, #0
 8010754:	4606      	mov	r6, r0
 8010756:	460f      	mov	r7, r1
 8010758:	4820      	ldr	r0, [pc, #128]	; (80107dc <rcl_get_security_options_from_environment+0x90>)
 801075a:	9301      	str	r3, [sp, #4]
 801075c:	a901      	add	r1, sp, #4
 801075e:	4690      	mov	r8, r2
 8010760:	f001 fff2 	bl	8012748 <rcutils_get_env>
 8010764:	b120      	cbz	r0, 8010770 <rcl_get_security_options_from_environment+0x24>
 8010766:	2501      	movs	r5, #1
 8010768:	4628      	mov	r0, r5
 801076a:	b002      	add	sp, #8
 801076c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010770:	491b      	ldr	r1, [pc, #108]	; (80107e0 <rcl_get_security_options_from_environment+0x94>)
 8010772:	4604      	mov	r4, r0
 8010774:	9801      	ldr	r0, [sp, #4]
 8010776:	f7ef fd33 	bl	80001e0 <strcmp>
 801077a:	4605      	mov	r5, r0
 801077c:	b9e8      	cbnz	r0, 80107ba <rcl_get_security_options_from_environment+0x6e>
 801077e:	9001      	str	r0, [sp, #4]
 8010780:	f1b8 0f00 	cmp.w	r8, #0
 8010784:	d020      	beq.n	80107c8 <rcl_get_security_options_from_environment+0x7c>
 8010786:	4817      	ldr	r0, [pc, #92]	; (80107e4 <rcl_get_security_options_from_environment+0x98>)
 8010788:	a901      	add	r1, sp, #4
 801078a:	f001 ffdd 	bl	8012748 <rcutils_get_env>
 801078e:	2800      	cmp	r0, #0
 8010790:	d1e9      	bne.n	8010766 <rcl_get_security_options_from_environment+0x1a>
 8010792:	4915      	ldr	r1, [pc, #84]	; (80107e8 <rcl_get_security_options_from_environment+0x9c>)
 8010794:	9801      	ldr	r0, [sp, #4]
 8010796:	f7ef fd23 	bl	80001e0 <strcmp>
 801079a:	fab0 f080 	clz	r0, r0
 801079e:	0940      	lsrs	r0, r0, #5
 80107a0:	f888 0000 	strb.w	r0, [r8]
 80107a4:	4639      	mov	r1, r7
 80107a6:	4630      	mov	r0, r6
 80107a8:	f7ff ff66 	bl	8010678 <rcl_get_secure_root>
 80107ac:	b170      	cbz	r0, 80107cc <rcl_get_security_options_from_environment+0x80>
 80107ae:	f8c8 0004 	str.w	r0, [r8, #4]
 80107b2:	4628      	mov	r0, r5
 80107b4:	b002      	add	sp, #8
 80107b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107ba:	4625      	mov	r5, r4
 80107bc:	4628      	mov	r0, r5
 80107be:	f888 4000 	strb.w	r4, [r8]
 80107c2:	b002      	add	sp, #8
 80107c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107c8:	250b      	movs	r5, #11
 80107ca:	e7cd      	b.n	8010768 <rcl_get_security_options_from_environment+0x1c>
 80107cc:	f898 5000 	ldrb.w	r5, [r8]
 80107d0:	f1a5 0501 	sub.w	r5, r5, #1
 80107d4:	fab5 f585 	clz	r5, r5
 80107d8:	096d      	lsrs	r5, r5, #5
 80107da:	e7c5      	b.n	8010768 <rcl_get_security_options_from_environment+0x1c>
 80107dc:	080183d4 	.word	0x080183d4
 80107e0:	080183e8 	.word	0x080183e8
 80107e4:	080183f0 	.word	0x080183f0
 80107e8:	08018408 	.word	0x08018408

080107ec <rcl_service_get_rmw_handle>:
 80107ec:	b118      	cbz	r0, 80107f6 <rcl_service_get_rmw_handle+0xa>
 80107ee:	6800      	ldr	r0, [r0, #0]
 80107f0:	b108      	cbz	r0, 80107f6 <rcl_service_get_rmw_handle+0xa>
 80107f2:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80107f6:	4770      	bx	lr

080107f8 <rcl_take_request>:
 80107f8:	b570      	push	{r4, r5, r6, lr}
 80107fa:	468e      	mov	lr, r1
 80107fc:	460c      	mov	r4, r1
 80107fe:	4616      	mov	r6, r2
 8010800:	4605      	mov	r5, r0
 8010802:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010806:	b08c      	sub	sp, #48	; 0x30
 8010808:	f10d 0c18 	add.w	ip, sp, #24
 801080c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010810:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010814:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010818:	b30d      	cbz	r5, 801085e <rcl_take_request+0x66>
 801081a:	682b      	ldr	r3, [r5, #0]
 801081c:	b1fb      	cbz	r3, 801085e <rcl_take_request+0x66>
 801081e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8010822:	b1e0      	cbz	r0, 801085e <rcl_take_request+0x66>
 8010824:	b336      	cbz	r6, 8010874 <rcl_take_request+0x7c>
 8010826:	2300      	movs	r3, #0
 8010828:	f88d 3007 	strb.w	r3, [sp, #7]
 801082c:	4632      	mov	r2, r6
 801082e:	f10d 0307 	add.w	r3, sp, #7
 8010832:	a902      	add	r1, sp, #8
 8010834:	f003 f8e6 	bl	8013a04 <rmw_take_request>
 8010838:	4605      	mov	r5, r0
 801083a:	b198      	cbz	r0, 8010864 <rcl_take_request+0x6c>
 801083c:	280a      	cmp	r0, #10
 801083e:	bf18      	it	ne
 8010840:	2501      	movne	r5, #1
 8010842:	f10d 0e18 	add.w	lr, sp, #24
 8010846:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801084a:	46a4      	mov	ip, r4
 801084c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010850:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010854:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010858:	4628      	mov	r0, r5
 801085a:	b00c      	add	sp, #48	; 0x30
 801085c:	bd70      	pop	{r4, r5, r6, pc}
 801085e:	f44f 7516 	mov.w	r5, #600	; 0x258
 8010862:	e7ee      	b.n	8010842 <rcl_take_request+0x4a>
 8010864:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010868:	f240 2359 	movw	r3, #601	; 0x259
 801086c:	2a00      	cmp	r2, #0
 801086e:	bf08      	it	eq
 8010870:	461d      	moveq	r5, r3
 8010872:	e7e6      	b.n	8010842 <rcl_take_request+0x4a>
 8010874:	250b      	movs	r5, #11
 8010876:	e7e4      	b.n	8010842 <rcl_take_request+0x4a>

08010878 <rcl_send_response>:
 8010878:	b170      	cbz	r0, 8010898 <rcl_send_response+0x20>
 801087a:	6800      	ldr	r0, [r0, #0]
 801087c:	b160      	cbz	r0, 8010898 <rcl_send_response+0x20>
 801087e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8010882:	b148      	cbz	r0, 8010898 <rcl_send_response+0x20>
 8010884:	b159      	cbz	r1, 801089e <rcl_send_response+0x26>
 8010886:	b510      	push	{r4, lr}
 8010888:	b15a      	cbz	r2, 80108a2 <rcl_send_response+0x2a>
 801088a:	f003 f919 	bl	8013ac0 <rmw_send_response>
 801088e:	b110      	cbz	r0, 8010896 <rcl_send_response+0x1e>
 8010890:	2802      	cmp	r0, #2
 8010892:	bf18      	it	ne
 8010894:	2001      	movne	r0, #1
 8010896:	bd10      	pop	{r4, pc}
 8010898:	f44f 7016 	mov.w	r0, #600	; 0x258
 801089c:	4770      	bx	lr
 801089e:	200b      	movs	r0, #11
 80108a0:	4770      	bx	lr
 80108a2:	200b      	movs	r0, #11
 80108a4:	bd10      	pop	{r4, pc}
 80108a6:	bf00      	nop

080108a8 <rcl_service_is_valid>:
 80108a8:	b130      	cbz	r0, 80108b8 <rcl_service_is_valid+0x10>
 80108aa:	6800      	ldr	r0, [r0, #0]
 80108ac:	b120      	cbz	r0, 80108b8 <rcl_service_is_valid+0x10>
 80108ae:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80108b2:	3800      	subs	r0, #0
 80108b4:	bf18      	it	ne
 80108b6:	2001      	movne	r0, #1
 80108b8:	4770      	bx	lr
 80108ba:	bf00      	nop

080108bc <rcl_get_zero_initialized_subscription>:
 80108bc:	4b01      	ldr	r3, [pc, #4]	; (80108c4 <rcl_get_zero_initialized_subscription+0x8>)
 80108be:	6818      	ldr	r0, [r3, #0]
 80108c0:	4770      	bx	lr
 80108c2:	bf00      	nop
 80108c4:	08018454 	.word	0x08018454

080108c8 <rcl_subscription_init>:
 80108c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108cc:	b089      	sub	sp, #36	; 0x24
 80108ce:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80108d0:	b1d6      	cbz	r6, 8010908 <rcl_subscription_init+0x40>
 80108d2:	f106 0950 	add.w	r9, r6, #80	; 0x50
 80108d6:	4604      	mov	r4, r0
 80108d8:	4648      	mov	r0, r9
 80108da:	460d      	mov	r5, r1
 80108dc:	4690      	mov	r8, r2
 80108de:	461f      	mov	r7, r3
 80108e0:	f7fa fc1e 	bl	800b120 <rcutils_allocator_is_valid>
 80108e4:	b180      	cbz	r0, 8010908 <rcl_subscription_init+0x40>
 80108e6:	b17c      	cbz	r4, 8010908 <rcl_subscription_init+0x40>
 80108e8:	4628      	mov	r0, r5
 80108ea:	f7ff fd87 	bl	80103fc <rcl_node_is_valid>
 80108ee:	2800      	cmp	r0, #0
 80108f0:	d054      	beq.n	801099c <rcl_subscription_init+0xd4>
 80108f2:	f1b8 0f00 	cmp.w	r8, #0
 80108f6:	d007      	beq.n	8010908 <rcl_subscription_init+0x40>
 80108f8:	b137      	cbz	r7, 8010908 <rcl_subscription_init+0x40>
 80108fa:	6823      	ldr	r3, [r4, #0]
 80108fc:	b14b      	cbz	r3, 8010912 <rcl_subscription_init+0x4a>
 80108fe:	2764      	movs	r7, #100	; 0x64
 8010900:	4638      	mov	r0, r7
 8010902:	b009      	add	sp, #36	; 0x24
 8010904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010908:	270b      	movs	r7, #11
 801090a:	4638      	mov	r0, r7
 801090c:	b009      	add	sp, #36	; 0x24
 801090e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010912:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8010916:	aa07      	add	r2, sp, #28
 8010918:	9205      	str	r2, [sp, #20]
 801091a:	9307      	str	r3, [sp, #28]
 801091c:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8010920:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010924:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010928:	4639      	mov	r1, r7
 801092a:	e899 000c 	ldmia.w	r9, {r2, r3}
 801092e:	4628      	mov	r0, r5
 8010930:	f7ff fdb8 	bl	80104a4 <rcl_node_resolve_name>
 8010934:	4607      	mov	r7, r0
 8010936:	2800      	cmp	r0, #0
 8010938:	d15f      	bne.n	80109fa <rcl_subscription_init+0x132>
 801093a:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 801093e:	21c8      	movs	r1, #200	; 0xc8
 8010940:	2001      	movs	r0, #1
 8010942:	4798      	blx	r3
 8010944:	6020      	str	r0, [r4, #0]
 8010946:	2800      	cmp	r0, #0
 8010948:	d05d      	beq.n	8010a06 <rcl_subscription_init+0x13e>
 801094a:	4628      	mov	r0, r5
 801094c:	f7ff fd78 	bl	8010440 <rcl_node_get_rmw_handle>
 8010950:	f106 0364 	add.w	r3, r6, #100	; 0x64
 8010954:	9300      	str	r3, [sp, #0]
 8010956:	9a07      	ldr	r2, [sp, #28]
 8010958:	6827      	ldr	r7, [r4, #0]
 801095a:	4641      	mov	r1, r8
 801095c:	4633      	mov	r3, r6
 801095e:	f003 f999 	bl	8013c94 <rmw_create_subscription>
 8010962:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8010966:	6827      	ldr	r7, [r4, #0]
 8010968:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801096c:	b348      	cbz	r0, 80109c2 <rcl_subscription_init+0xfa>
 801096e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8010972:	f003 fa71 	bl	8013e58 <rmw_subscription_get_actual_qos>
 8010976:	4607      	mov	r7, r0
 8010978:	b9a8      	cbnz	r0, 80109a6 <rcl_subscription_init+0xde>
 801097a:	6820      	ldr	r0, [r4, #0]
 801097c:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 8010980:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 8010984:	2270      	movs	r2, #112	; 0x70
 8010986:	4631      	mov	r1, r6
 8010988:	f006 fc05 	bl	8017196 <memcpy>
 801098c:	9807      	ldr	r0, [sp, #28]
 801098e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8010990:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8010992:	4798      	blx	r3
 8010994:	4638      	mov	r0, r7
 8010996:	b009      	add	sp, #36	; 0x24
 8010998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801099c:	27c8      	movs	r7, #200	; 0xc8
 801099e:	4638      	mov	r0, r7
 80109a0:	b009      	add	sp, #36	; 0x24
 80109a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109a6:	6827      	ldr	r7, [r4, #0]
 80109a8:	b32f      	cbz	r7, 80109f6 <rcl_subscription_init+0x12e>
 80109aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80109ae:	b14b      	cbz	r3, 80109c4 <rcl_subscription_init+0xfc>
 80109b0:	4628      	mov	r0, r5
 80109b2:	f7ff fd45 	bl	8010440 <rcl_node_get_rmw_handle>
 80109b6:	6823      	ldr	r3, [r4, #0]
 80109b8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80109bc:	f003 fa5c 	bl	8013e78 <rmw_destroy_subscription>
 80109c0:	6827      	ldr	r7, [r4, #0]
 80109c2:	b197      	cbz	r7, 80109ea <rcl_subscription_init+0x122>
 80109c4:	f107 0550 	add.w	r5, r7, #80	; 0x50
 80109c8:	4628      	mov	r0, r5
 80109ca:	f7fa fba9 	bl	800b120 <rcutils_allocator_is_valid>
 80109ce:	b158      	cbz	r0, 80109e8 <rcl_subscription_init+0x120>
 80109d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80109d2:	b148      	cbz	r0, 80109e8 <rcl_subscription_init+0x120>
 80109d4:	4629      	mov	r1, r5
 80109d6:	f002 f987 	bl	8012ce8 <rmw_subscription_content_filter_options_fini>
 80109da:	4605      	mov	r5, r0
 80109dc:	b9b8      	cbnz	r0, 8010a0e <rcl_subscription_init+0x146>
 80109de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109e0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80109e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80109e4:	4798      	blx	r3
 80109e6:	66fd      	str	r5, [r7, #108]	; 0x6c
 80109e8:	6827      	ldr	r7, [r4, #0]
 80109ea:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80109ec:	6e31      	ldr	r1, [r6, #96]	; 0x60
 80109ee:	4638      	mov	r0, r7
 80109f0:	4798      	blx	r3
 80109f2:	2300      	movs	r3, #0
 80109f4:	6023      	str	r3, [r4, #0]
 80109f6:	2701      	movs	r7, #1
 80109f8:	e7c8      	b.n	801098c <rcl_subscription_init+0xc4>
 80109fa:	2867      	cmp	r0, #103	; 0x67
 80109fc:	d0c6      	beq.n	801098c <rcl_subscription_init+0xc4>
 80109fe:	2869      	cmp	r0, #105	; 0x69
 8010a00:	d003      	beq.n	8010a0a <rcl_subscription_init+0x142>
 8010a02:	280a      	cmp	r0, #10
 8010a04:	d1f7      	bne.n	80109f6 <rcl_subscription_init+0x12e>
 8010a06:	270a      	movs	r7, #10
 8010a08:	e7c0      	b.n	801098c <rcl_subscription_init+0xc4>
 8010a0a:	2767      	movs	r7, #103	; 0x67
 8010a0c:	e7be      	b.n	801098c <rcl_subscription_init+0xc4>
 8010a0e:	f7ff f8fd 	bl	800fc0c <rcl_convert_rmw_ret_to_rcl_ret>
 8010a12:	6827      	ldr	r7, [r4, #0]
 8010a14:	e7e9      	b.n	80109ea <rcl_subscription_init+0x122>
 8010a16:	bf00      	nop

08010a18 <rcl_subscription_get_default_options>:
 8010a18:	b570      	push	{r4, r5, r6, lr}
 8010a1a:	4d14      	ldr	r5, [pc, #80]	; (8010a6c <rcl_subscription_get_default_options+0x54>)
 8010a1c:	4914      	ldr	r1, [pc, #80]	; (8010a70 <rcl_subscription_get_default_options+0x58>)
 8010a1e:	b08a      	sub	sp, #40	; 0x28
 8010a20:	4604      	mov	r4, r0
 8010a22:	2250      	movs	r2, #80	; 0x50
 8010a24:	4628      	mov	r0, r5
 8010a26:	f006 fbb6 	bl	8017196 <memcpy>
 8010a2a:	a804      	add	r0, sp, #16
 8010a2c:	f7fa fb6a 	bl	800b104 <rcutils_get_default_allocator>
 8010a30:	f10d 0c10 	add.w	ip, sp, #16
 8010a34:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010a38:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8010a3c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010a40:	466e      	mov	r6, sp
 8010a42:	f8dc 3000 	ldr.w	r3, [ip]
 8010a46:	f8ce 3000 	str.w	r3, [lr]
 8010a4a:	4630      	mov	r0, r6
 8010a4c:	f002 f966 	bl	8012d1c <rmw_get_default_subscription_options>
 8010a50:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8010a54:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8010a58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010a5c:	2270      	movs	r2, #112	; 0x70
 8010a5e:	4629      	mov	r1, r5
 8010a60:	4620      	mov	r0, r4
 8010a62:	f006 fb98 	bl	8017196 <memcpy>
 8010a66:	4620      	mov	r0, r4
 8010a68:	b00a      	add	sp, #40	; 0x28
 8010a6a:	bd70      	pop	{r4, r5, r6, pc}
 8010a6c:	20010b70 	.word	0x20010b70
 8010a70:	08018458 	.word	0x08018458

08010a74 <rcl_take>:
 8010a74:	2800      	cmp	r0, #0
 8010a76:	d04a      	beq.n	8010b0e <rcl_take+0x9a>
 8010a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a7c:	4604      	mov	r4, r0
 8010a7e:	6800      	ldr	r0, [r0, #0]
 8010a80:	b0a4      	sub	sp, #144	; 0x90
 8010a82:	2800      	cmp	r0, #0
 8010a84:	d03b      	beq.n	8010afe <rcl_take+0x8a>
 8010a86:	461f      	mov	r7, r3
 8010a88:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d036      	beq.n	8010afe <rcl_take+0x8a>
 8010a90:	460e      	mov	r6, r1
 8010a92:	2900      	cmp	r1, #0
 8010a94:	d039      	beq.n	8010b0a <rcl_take+0x96>
 8010a96:	4615      	mov	r5, r2
 8010a98:	2a00      	cmp	r2, #0
 8010a9a:	d03c      	beq.n	8010b16 <rcl_take+0xa2>
 8010a9c:	a802      	add	r0, sp, #8
 8010a9e:	f002 f9c7 	bl	8012e30 <rmw_get_zero_initialized_message_info>
 8010aa2:	f10d 0c08 	add.w	ip, sp, #8
 8010aa6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010aaa:	46ae      	mov	lr, r5
 8010aac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010ab0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010ab4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010ab8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010abc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010ac0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8010ac4:	f04f 0800 	mov.w	r8, #0
 8010ac8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8010acc:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 8010ad0:	6822      	ldr	r2, [r4, #0]
 8010ad2:	462b      	mov	r3, r5
 8010ad4:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
 8010ad8:	9700      	str	r7, [sp, #0]
 8010ada:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 8010ade:	4631      	mov	r1, r6
 8010ae0:	f003 fa2a 	bl	8013f38 <rmw_take_with_info>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	b9c0      	cbnz	r0, 8010b1a <rcl_take+0xa6>
 8010ae8:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 8010aec:	f240 1291 	movw	r2, #401	; 0x191
 8010af0:	2900      	cmp	r1, #0
 8010af2:	bf08      	it	eq
 8010af4:	4613      	moveq	r3, r2
 8010af6:	4618      	mov	r0, r3
 8010af8:	b024      	add	sp, #144	; 0x90
 8010afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010afe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8010b02:	4618      	mov	r0, r3
 8010b04:	b024      	add	sp, #144	; 0x90
 8010b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b0a:	230b      	movs	r3, #11
 8010b0c:	e7f3      	b.n	8010af6 <rcl_take+0x82>
 8010b0e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8010b12:	4618      	mov	r0, r3
 8010b14:	4770      	bx	lr
 8010b16:	ad14      	add	r5, sp, #80	; 0x50
 8010b18:	e7c0      	b.n	8010a9c <rcl_take+0x28>
 8010b1a:	f7ff f877 	bl	800fc0c <rcl_convert_rmw_ret_to_rcl_ret>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	e7e9      	b.n	8010af6 <rcl_take+0x82>
 8010b22:	bf00      	nop

08010b24 <rcl_subscription_get_rmw_handle>:
 8010b24:	b118      	cbz	r0, 8010b2e <rcl_subscription_get_rmw_handle+0xa>
 8010b26:	6800      	ldr	r0, [r0, #0]
 8010b28:	b108      	cbz	r0, 8010b2e <rcl_subscription_get_rmw_handle+0xa>
 8010b2a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8010b2e:	4770      	bx	lr

08010b30 <rcl_subscription_is_valid>:
 8010b30:	b130      	cbz	r0, 8010b40 <rcl_subscription_is_valid+0x10>
 8010b32:	6800      	ldr	r0, [r0, #0]
 8010b34:	b120      	cbz	r0, 8010b40 <rcl_subscription_is_valid+0x10>
 8010b36:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8010b3a:	3800      	subs	r0, #0
 8010b3c:	bf18      	it	ne
 8010b3e:	2001      	movne	r0, #1
 8010b40:	4770      	bx	lr
 8010b42:	bf00      	nop

08010b44 <rcl_get_system_time>:
 8010b44:	4608      	mov	r0, r1
 8010b46:	f7fa bb2b 	b.w	800b1a0 <rcutils_system_time_now>
 8010b4a:	bf00      	nop

08010b4c <rcl_get_steady_time>:
 8010b4c:	4608      	mov	r0, r1
 8010b4e:	f7fa bb4f 	b.w	800b1f0 <rcutils_steady_time_now>
 8010b52:	bf00      	nop

08010b54 <rcl_get_ros_time>:
 8010b54:	7a03      	ldrb	r3, [r0, #8]
 8010b56:	b510      	push	{r4, lr}
 8010b58:	460c      	mov	r4, r1
 8010b5a:	b133      	cbz	r3, 8010b6a <rcl_get_ros_time+0x16>
 8010b5c:	2105      	movs	r1, #5
 8010b5e:	f001 fd4f 	bl	8012600 <__atomic_load_8>
 8010b62:	e9c4 0100 	strd	r0, r1, [r4]
 8010b66:	2000      	movs	r0, #0
 8010b68:	bd10      	pop	{r4, pc}
 8010b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b6e:	4608      	mov	r0, r1
 8010b70:	f7fa bb16 	b.w	800b1a0 <rcutils_system_time_now>

08010b74 <rcl_clock_init>:
 8010b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b76:	4605      	mov	r5, r0
 8010b78:	4610      	mov	r0, r2
 8010b7a:	4614      	mov	r4, r2
 8010b7c:	460e      	mov	r6, r1
 8010b7e:	f7fa facf 	bl	800b120 <rcutils_allocator_is_valid>
 8010b82:	b128      	cbz	r0, 8010b90 <rcl_clock_init+0x1c>
 8010b84:	2d03      	cmp	r5, #3
 8010b86:	d803      	bhi.n	8010b90 <rcl_clock_init+0x1c>
 8010b88:	e8df f005 	tbb	[pc, r5]
 8010b8c:	06532e1d 	.word	0x06532e1d
 8010b90:	f04f 0c0b 	mov.w	ip, #11
 8010b94:	4660      	mov	r0, ip
 8010b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b98:	2e00      	cmp	r6, #0
 8010b9a:	d0f9      	beq.n	8010b90 <rcl_clock_init+0x1c>
 8010b9c:	2c00      	cmp	r4, #0
 8010b9e:	d0f7      	beq.n	8010b90 <rcl_clock_init+0x1c>
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010ba6:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8010c5c <rcl_clock_init+0xe8>
 8010baa:	6133      	str	r3, [r6, #16]
 8010bac:	f106 0514 	add.w	r5, r6, #20
 8010bb0:	469c      	mov	ip, r3
 8010bb2:	2703      	movs	r7, #3
 8010bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010bb8:	6823      	ldr	r3, [r4, #0]
 8010bba:	602b      	str	r3, [r5, #0]
 8010bbc:	7037      	strb	r7, [r6, #0]
 8010bbe:	f8c6 e00c 	str.w	lr, [r6, #12]
 8010bc2:	4660      	mov	r0, ip
 8010bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bc6:	2e00      	cmp	r6, #0
 8010bc8:	d0e2      	beq.n	8010b90 <rcl_clock_init+0x1c>
 8010bca:	2300      	movs	r3, #0
 8010bcc:	7033      	strb	r3, [r6, #0]
 8010bce:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010bd2:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8010bd6:	469c      	mov	ip, r3
 8010bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010bda:	f106 0514 	add.w	r5, r6, #20
 8010bde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010be0:	6823      	ldr	r3, [r4, #0]
 8010be2:	602b      	str	r3, [r5, #0]
 8010be4:	4660      	mov	r0, ip
 8010be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010be8:	2e00      	cmp	r6, #0
 8010bea:	d0d1      	beq.n	8010b90 <rcl_clock_init+0x1c>
 8010bec:	2c00      	cmp	r4, #0
 8010bee:	d0cf      	beq.n	8010b90 <rcl_clock_init+0x1c>
 8010bf0:	2700      	movs	r7, #0
 8010bf2:	7037      	strb	r7, [r6, #0]
 8010bf4:	46a4      	mov	ip, r4
 8010bf6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010bfa:	f106 0514 	add.w	r5, r6, #20
 8010bfe:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010c02:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8010c06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010c08:	f8dc 3000 	ldr.w	r3, [ip]
 8010c0c:	602b      	str	r3, [r5, #0]
 8010c0e:	6921      	ldr	r1, [r4, #16]
 8010c10:	6823      	ldr	r3, [r4, #0]
 8010c12:	2010      	movs	r0, #16
 8010c14:	4798      	blx	r3
 8010c16:	6130      	str	r0, [r6, #16]
 8010c18:	b1d0      	cbz	r0, 8010c50 <rcl_clock_init+0xdc>
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	e9c0 2300 	strd	r2, r3, [r0]
 8010c22:	2301      	movs	r3, #1
 8010c24:	7207      	strb	r7, [r0, #8]
 8010c26:	4a0c      	ldr	r2, [pc, #48]	; (8010c58 <rcl_clock_init+0xe4>)
 8010c28:	7033      	strb	r3, [r6, #0]
 8010c2a:	46bc      	mov	ip, r7
 8010c2c:	60f2      	str	r2, [r6, #12]
 8010c2e:	4660      	mov	r0, ip
 8010c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c32:	2e00      	cmp	r6, #0
 8010c34:	d0ac      	beq.n	8010b90 <rcl_clock_init+0x1c>
 8010c36:	2c00      	cmp	r4, #0
 8010c38:	d0aa      	beq.n	8010b90 <rcl_clock_init+0x1c>
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010c40:	f8df e01c 	ldr.w	lr, [pc, #28]	; 8010c60 <rcl_clock_init+0xec>
 8010c44:	6133      	str	r3, [r6, #16]
 8010c46:	f106 0514 	add.w	r5, r6, #20
 8010c4a:	469c      	mov	ip, r3
 8010c4c:	2702      	movs	r7, #2
 8010c4e:	e7b1      	b.n	8010bb4 <rcl_clock_init+0x40>
 8010c50:	f04f 0c0a 	mov.w	ip, #10
 8010c54:	e79e      	b.n	8010b94 <rcl_clock_init+0x20>
 8010c56:	bf00      	nop
 8010c58:	08010b55 	.word	0x08010b55
 8010c5c:	08010b4d 	.word	0x08010b4d
 8010c60:	08010b45 	.word	0x08010b45

08010c64 <rcl_clock_get_now>:
 8010c64:	b140      	cbz	r0, 8010c78 <rcl_clock_get_now+0x14>
 8010c66:	b139      	cbz	r1, 8010c78 <rcl_clock_get_now+0x14>
 8010c68:	7803      	ldrb	r3, [r0, #0]
 8010c6a:	b11b      	cbz	r3, 8010c74 <rcl_clock_get_now+0x10>
 8010c6c:	68c3      	ldr	r3, [r0, #12]
 8010c6e:	b10b      	cbz	r3, 8010c74 <rcl_clock_get_now+0x10>
 8010c70:	6900      	ldr	r0, [r0, #16]
 8010c72:	4718      	bx	r3
 8010c74:	2001      	movs	r0, #1
 8010c76:	4770      	bx	lr
 8010c78:	200b      	movs	r0, #11
 8010c7a:	4770      	bx	lr

08010c7c <rcl_timer_call>:
 8010c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c80:	b087      	sub	sp, #28
 8010c82:	2800      	cmp	r0, #0
 8010c84:	d06d      	beq.n	8010d62 <rcl_timer_call+0xe6>
 8010c86:	6803      	ldr	r3, [r0, #0]
 8010c88:	4604      	mov	r4, r0
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d063      	beq.n	8010d56 <rcl_timer_call+0xda>
 8010c8e:	f3bf 8f5b 	dmb	ish
 8010c92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010c96:	f3bf 8f5b 	dmb	ish
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d150      	bne.n	8010d40 <rcl_timer_call+0xc4>
 8010c9e:	6803      	ldr	r3, [r0, #0]
 8010ca0:	a904      	add	r1, sp, #16
 8010ca2:	6818      	ldr	r0, [r3, #0]
 8010ca4:	f7ff ffde 	bl	8010c64 <rcl_clock_get_now>
 8010ca8:	4605      	mov	r5, r0
 8010caa:	2800      	cmp	r0, #0
 8010cac:	d14a      	bne.n	8010d44 <rcl_timer_call+0xc8>
 8010cae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	db4a      	blt.n	8010d4c <rcl_timer_call+0xd0>
 8010cb6:	6820      	ldr	r0, [r4, #0]
 8010cb8:	f04f 0a05 	mov.w	sl, #5
 8010cbc:	f8cd a000 	str.w	sl, [sp]
 8010cc0:	3020      	adds	r0, #32
 8010cc2:	f001 fd09 	bl	80126d8 <__atomic_exchange_8>
 8010cc6:	6823      	ldr	r3, [r4, #0]
 8010cc8:	f3bf 8f5b 	dmb	ish
 8010ccc:	4680      	mov	r8, r0
 8010cce:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8010cd2:	f3bf 8f5b 	dmb	ish
 8010cd6:	6820      	ldr	r0, [r4, #0]
 8010cd8:	4689      	mov	r9, r1
 8010cda:	3028      	adds	r0, #40	; 0x28
 8010cdc:	4651      	mov	r1, sl
 8010cde:	f001 fc8f 	bl	8012600 <__atomic_load_8>
 8010ce2:	4606      	mov	r6, r0
 8010ce4:	6820      	ldr	r0, [r4, #0]
 8010ce6:	460f      	mov	r7, r1
 8010ce8:	3018      	adds	r0, #24
 8010cea:	4651      	mov	r1, sl
 8010cec:	f001 fc88 	bl	8012600 <__atomic_load_8>
 8010cf0:	1836      	adds	r6, r6, r0
 8010cf2:	4602      	mov	r2, r0
 8010cf4:	4682      	mov	sl, r0
 8010cf6:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8010cfa:	eb47 0701 	adc.w	r7, r7, r1
 8010cfe:	4286      	cmp	r6, r0
 8010d00:	460b      	mov	r3, r1
 8010d02:	eb77 010c 	sbcs.w	r1, r7, ip
 8010d06:	da04      	bge.n	8010d12 <rcl_timer_call+0x96>
 8010d08:	ea53 0102 	orrs.w	r1, r3, r2
 8010d0c:	d12e      	bne.n	8010d6c <rcl_timer_call+0xf0>
 8010d0e:	4606      	mov	r6, r0
 8010d10:	4667      	mov	r7, ip
 8010d12:	6820      	ldr	r0, [r4, #0]
 8010d14:	2105      	movs	r1, #5
 8010d16:	4632      	mov	r2, r6
 8010d18:	463b      	mov	r3, r7
 8010d1a:	3028      	adds	r0, #40	; 0x28
 8010d1c:	9100      	str	r1, [sp, #0]
 8010d1e:	f001 fca5 	bl	801266c <__atomic_store_8>
 8010d22:	f1bb 0f00 	cmp.w	fp, #0
 8010d26:	d00d      	beq.n	8010d44 <rcl_timer_call+0xc8>
 8010d28:	9a04      	ldr	r2, [sp, #16]
 8010d2a:	9b05      	ldr	r3, [sp, #20]
 8010d2c:	ebb2 0208 	subs.w	r2, r2, r8
 8010d30:	4620      	mov	r0, r4
 8010d32:	eb63 0309 	sbc.w	r3, r3, r9
 8010d36:	47d8      	blx	fp
 8010d38:	4628      	mov	r0, r5
 8010d3a:	b007      	add	sp, #28
 8010d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d40:	f240 3521 	movw	r5, #801	; 0x321
 8010d44:	4628      	mov	r0, r5
 8010d46:	b007      	add	sp, #28
 8010d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d4c:	2501      	movs	r5, #1
 8010d4e:	4628      	mov	r0, r5
 8010d50:	b007      	add	sp, #28
 8010d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d56:	f44f 7548 	mov.w	r5, #800	; 0x320
 8010d5a:	4628      	mov	r0, r5
 8010d5c:	b007      	add	sp, #28
 8010d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d62:	250b      	movs	r5, #11
 8010d64:	4628      	mov	r0, r5
 8010d66:	b007      	add	sp, #28
 8010d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d6c:	1b80      	subs	r0, r0, r6
 8010d6e:	eb6c 0107 	sbc.w	r1, ip, r7
 8010d72:	3801      	subs	r0, #1
 8010d74:	f161 0100 	sbc.w	r1, r1, #0
 8010d78:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010d7c:	f7ef ffec 	bl	8000d58 <__aeabi_ldivmod>
 8010d80:	9b02      	ldr	r3, [sp, #8]
 8010d82:	3001      	adds	r0, #1
 8010d84:	f141 0100 	adc.w	r1, r1, #0
 8010d88:	fb00 f303 	mul.w	r3, r0, r3
 8010d8c:	fb01 330a 	mla	r3, r1, sl, r3
 8010d90:	fba0 0a0a 	umull	r0, sl, r0, sl
 8010d94:	1986      	adds	r6, r0, r6
 8010d96:	4453      	add	r3, sl
 8010d98:	eb43 0707 	adc.w	r7, r3, r7
 8010d9c:	e7b9      	b.n	8010d12 <rcl_timer_call+0x96>
 8010d9e:	bf00      	nop

08010da0 <rcl_timer_is_ready>:
 8010da0:	b570      	push	{r4, r5, r6, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	b378      	cbz	r0, 8010e06 <rcl_timer_is_ready+0x66>
 8010da6:	6803      	ldr	r3, [r0, #0]
 8010da8:	4604      	mov	r4, r0
 8010daa:	b383      	cbz	r3, 8010e0e <rcl_timer_is_ready+0x6e>
 8010dac:	460d      	mov	r5, r1
 8010dae:	b351      	cbz	r1, 8010e06 <rcl_timer_is_ready+0x66>
 8010db0:	f3bf 8f5b 	dmb	ish
 8010db4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010db8:	f3bf 8f5b 	dmb	ish
 8010dbc:	b953      	cbnz	r3, 8010dd4 <rcl_timer_is_ready+0x34>
 8010dbe:	6803      	ldr	r3, [r0, #0]
 8010dc0:	4669      	mov	r1, sp
 8010dc2:	6818      	ldr	r0, [r3, #0]
 8010dc4:	f7ff ff4e 	bl	8010c64 <rcl_clock_get_now>
 8010dc8:	4606      	mov	r6, r0
 8010dca:	b140      	cbz	r0, 8010dde <rcl_timer_is_ready+0x3e>
 8010dcc:	f240 3321 	movw	r3, #801	; 0x321
 8010dd0:	4298      	cmp	r0, r3
 8010dd2:	d101      	bne.n	8010dd8 <rcl_timer_is_ready+0x38>
 8010dd4:	2600      	movs	r6, #0
 8010dd6:	702e      	strb	r6, [r5, #0]
 8010dd8:	4630      	mov	r0, r6
 8010dda:	b002      	add	sp, #8
 8010ddc:	bd70      	pop	{r4, r5, r6, pc}
 8010dde:	6820      	ldr	r0, [r4, #0]
 8010de0:	2105      	movs	r1, #5
 8010de2:	3028      	adds	r0, #40	; 0x28
 8010de4:	f001 fc0c 	bl	8012600 <__atomic_load_8>
 8010de8:	9b00      	ldr	r3, [sp, #0]
 8010dea:	1ac0      	subs	r0, r0, r3
 8010dec:	9b01      	ldr	r3, [sp, #4]
 8010dee:	eb61 0103 	sbc.w	r1, r1, r3
 8010df2:	2801      	cmp	r0, #1
 8010df4:	f171 0300 	sbcs.w	r3, r1, #0
 8010df8:	bfb4      	ite	lt
 8010dfa:	2301      	movlt	r3, #1
 8010dfc:	2300      	movge	r3, #0
 8010dfe:	4630      	mov	r0, r6
 8010e00:	702b      	strb	r3, [r5, #0]
 8010e02:	b002      	add	sp, #8
 8010e04:	bd70      	pop	{r4, r5, r6, pc}
 8010e06:	260b      	movs	r6, #11
 8010e08:	4630      	mov	r0, r6
 8010e0a:	b002      	add	sp, #8
 8010e0c:	bd70      	pop	{r4, r5, r6, pc}
 8010e0e:	f44f 7648 	mov.w	r6, #800	; 0x320
 8010e12:	e7e1      	b.n	8010dd8 <rcl_timer_is_ready+0x38>

08010e14 <rcl_timer_get_time_until_next_call>:
 8010e14:	b570      	push	{r4, r5, r6, lr}
 8010e16:	b082      	sub	sp, #8
 8010e18:	b330      	cbz	r0, 8010e68 <rcl_timer_get_time_until_next_call+0x54>
 8010e1a:	6803      	ldr	r3, [r0, #0]
 8010e1c:	4604      	mov	r4, r0
 8010e1e:	b33b      	cbz	r3, 8010e70 <rcl_timer_get_time_until_next_call+0x5c>
 8010e20:	460d      	mov	r5, r1
 8010e22:	b309      	cbz	r1, 8010e68 <rcl_timer_get_time_until_next_call+0x54>
 8010e24:	f3bf 8f5b 	dmb	ish
 8010e28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010e2c:	f3bf 8f5b 	dmb	ish
 8010e30:	b9ab      	cbnz	r3, 8010e5e <rcl_timer_get_time_until_next_call+0x4a>
 8010e32:	6803      	ldr	r3, [r0, #0]
 8010e34:	4669      	mov	r1, sp
 8010e36:	6818      	ldr	r0, [r3, #0]
 8010e38:	f7ff ff14 	bl	8010c64 <rcl_clock_get_now>
 8010e3c:	4606      	mov	r6, r0
 8010e3e:	b958      	cbnz	r0, 8010e58 <rcl_timer_get_time_until_next_call+0x44>
 8010e40:	6820      	ldr	r0, [r4, #0]
 8010e42:	2105      	movs	r1, #5
 8010e44:	3028      	adds	r0, #40	; 0x28
 8010e46:	f001 fbdb 	bl	8012600 <__atomic_load_8>
 8010e4a:	9b00      	ldr	r3, [sp, #0]
 8010e4c:	1ac0      	subs	r0, r0, r3
 8010e4e:	9b01      	ldr	r3, [sp, #4]
 8010e50:	6028      	str	r0, [r5, #0]
 8010e52:	eb61 0103 	sbc.w	r1, r1, r3
 8010e56:	6069      	str	r1, [r5, #4]
 8010e58:	4630      	mov	r0, r6
 8010e5a:	b002      	add	sp, #8
 8010e5c:	bd70      	pop	{r4, r5, r6, pc}
 8010e5e:	f240 3621 	movw	r6, #801	; 0x321
 8010e62:	4630      	mov	r0, r6
 8010e64:	b002      	add	sp, #8
 8010e66:	bd70      	pop	{r4, r5, r6, pc}
 8010e68:	260b      	movs	r6, #11
 8010e6a:	4630      	mov	r0, r6
 8010e6c:	b002      	add	sp, #8
 8010e6e:	bd70      	pop	{r4, r5, r6, pc}
 8010e70:	f44f 7648 	mov.w	r6, #800	; 0x320
 8010e74:	e7f0      	b.n	8010e58 <rcl_timer_get_time_until_next_call+0x44>
 8010e76:	bf00      	nop

08010e78 <rcl_timer_get_guard_condition>:
 8010e78:	b130      	cbz	r0, 8010e88 <rcl_timer_get_guard_condition+0x10>
 8010e7a:	6800      	ldr	r0, [r0, #0]
 8010e7c:	b120      	cbz	r0, 8010e88 <rcl_timer_get_guard_condition+0x10>
 8010e7e:	68c3      	ldr	r3, [r0, #12]
 8010e80:	b10b      	cbz	r3, 8010e86 <rcl_timer_get_guard_condition+0xe>
 8010e82:	3008      	adds	r0, #8
 8010e84:	4770      	bx	lr
 8010e86:	4618      	mov	r0, r3
 8010e88:	4770      	bx	lr
 8010e8a:	bf00      	nop

08010e8c <rcl_validate_enclave_name_with_size>:
 8010e8c:	b378      	cbz	r0, 8010eee <rcl_validate_enclave_name_with_size+0x62>
 8010e8e:	b570      	push	{r4, r5, r6, lr}
 8010e90:	4615      	mov	r5, r2
 8010e92:	b0c2      	sub	sp, #264	; 0x108
 8010e94:	b302      	cbz	r2, 8010ed8 <rcl_validate_enclave_name_with_size+0x4c>
 8010e96:	461e      	mov	r6, r3
 8010e98:	466a      	mov	r2, sp
 8010e9a:	ab01      	add	r3, sp, #4
 8010e9c:	460c      	mov	r4, r1
 8010e9e:	f002 f845 	bl	8012f2c <rmw_validate_namespace_with_size>
 8010ea2:	4684      	mov	ip, r0
 8010ea4:	b9e8      	cbnz	r0, 8010ee2 <rcl_validate_enclave_name_with_size+0x56>
 8010ea6:	9b00      	ldr	r3, [sp, #0]
 8010ea8:	b923      	cbnz	r3, 8010eb4 <rcl_validate_enclave_name_with_size+0x28>
 8010eaa:	2300      	movs	r3, #0
 8010eac:	602b      	str	r3, [r5, #0]
 8010eae:	4660      	mov	r0, ip
 8010eb0:	b042      	add	sp, #264	; 0x108
 8010eb2:	bd70      	pop	{r4, r5, r6, pc}
 8010eb4:	2b07      	cmp	r3, #7
 8010eb6:	d007      	beq.n	8010ec8 <rcl_validate_enclave_name_with_size+0x3c>
 8010eb8:	1e5a      	subs	r2, r3, #1
 8010eba:	2a05      	cmp	r2, #5
 8010ebc:	d833      	bhi.n	8010f26 <rcl_validate_enclave_name_with_size+0x9a>
 8010ebe:	e8df f002 	tbb	[pc, r2]
 8010ec2:	2c2f      	.short	0x2c2f
 8010ec4:	1a232629 	.word	0x1a232629
 8010ec8:	2cff      	cmp	r4, #255	; 0xff
 8010eca:	d9ee      	bls.n	8010eaa <rcl_validate_enclave_name_with_size+0x1e>
 8010ecc:	602b      	str	r3, [r5, #0]
 8010ece:	2e00      	cmp	r6, #0
 8010ed0:	d0ed      	beq.n	8010eae <rcl_validate_enclave_name_with_size+0x22>
 8010ed2:	23fe      	movs	r3, #254	; 0xfe
 8010ed4:	6033      	str	r3, [r6, #0]
 8010ed6:	e7ea      	b.n	8010eae <rcl_validate_enclave_name_with_size+0x22>
 8010ed8:	f04f 0c0b 	mov.w	ip, #11
 8010edc:	4660      	mov	r0, ip
 8010ede:	b042      	add	sp, #264	; 0x108
 8010ee0:	bd70      	pop	{r4, r5, r6, pc}
 8010ee2:	f7fe fe93 	bl	800fc0c <rcl_convert_rmw_ret_to_rcl_ret>
 8010ee6:	4684      	mov	ip, r0
 8010ee8:	4660      	mov	r0, ip
 8010eea:	b042      	add	sp, #264	; 0x108
 8010eec:	bd70      	pop	{r4, r5, r6, pc}
 8010eee:	f04f 0c0b 	mov.w	ip, #11
 8010ef2:	4660      	mov	r0, ip
 8010ef4:	4770      	bx	lr
 8010ef6:	2306      	movs	r3, #6
 8010ef8:	602b      	str	r3, [r5, #0]
 8010efa:	2e00      	cmp	r6, #0
 8010efc:	d0d7      	beq.n	8010eae <rcl_validate_enclave_name_with_size+0x22>
 8010efe:	9b01      	ldr	r3, [sp, #4]
 8010f00:	6033      	str	r3, [r6, #0]
 8010f02:	4660      	mov	r0, ip
 8010f04:	b042      	add	sp, #264	; 0x108
 8010f06:	bd70      	pop	{r4, r5, r6, pc}
 8010f08:	2305      	movs	r3, #5
 8010f0a:	602b      	str	r3, [r5, #0]
 8010f0c:	e7f5      	b.n	8010efa <rcl_validate_enclave_name_with_size+0x6e>
 8010f0e:	2304      	movs	r3, #4
 8010f10:	602b      	str	r3, [r5, #0]
 8010f12:	e7f2      	b.n	8010efa <rcl_validate_enclave_name_with_size+0x6e>
 8010f14:	2303      	movs	r3, #3
 8010f16:	602b      	str	r3, [r5, #0]
 8010f18:	e7ef      	b.n	8010efa <rcl_validate_enclave_name_with_size+0x6e>
 8010f1a:	2302      	movs	r3, #2
 8010f1c:	602b      	str	r3, [r5, #0]
 8010f1e:	e7ec      	b.n	8010efa <rcl_validate_enclave_name_with_size+0x6e>
 8010f20:	2301      	movs	r3, #1
 8010f22:	602b      	str	r3, [r5, #0]
 8010f24:	e7e9      	b.n	8010efa <rcl_validate_enclave_name_with_size+0x6e>
 8010f26:	4a04      	ldr	r2, [pc, #16]	; (8010f38 <rcl_validate_enclave_name_with_size+0xac>)
 8010f28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010f2c:	a802      	add	r0, sp, #8
 8010f2e:	f001 fd21 	bl	8012974 <rcutils_snprintf>
 8010f32:	f04f 0c01 	mov.w	ip, #1
 8010f36:	e7ba      	b.n	8010eae <rcl_validate_enclave_name_with_size+0x22>
 8010f38:	080184a8 	.word	0x080184a8

08010f3c <rcl_validate_enclave_name>:
 8010f3c:	b168      	cbz	r0, 8010f5a <rcl_validate_enclave_name+0x1e>
 8010f3e:	b570      	push	{r4, r5, r6, lr}
 8010f40:	460d      	mov	r5, r1
 8010f42:	4616      	mov	r6, r2
 8010f44:	4604      	mov	r4, r0
 8010f46:	f7ef f955 	bl	80001f4 <strlen>
 8010f4a:	4633      	mov	r3, r6
 8010f4c:	4601      	mov	r1, r0
 8010f4e:	462a      	mov	r2, r5
 8010f50:	4620      	mov	r0, r4
 8010f52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f56:	f7ff bf99 	b.w	8010e8c <rcl_validate_enclave_name_with_size>
 8010f5a:	200b      	movs	r0, #11
 8010f5c:	4770      	bx	lr
 8010f5e:	bf00      	nop

08010f60 <rcl_get_zero_initialized_wait_set>:
 8010f60:	b510      	push	{r4, lr}
 8010f62:	4c08      	ldr	r4, [pc, #32]	; (8010f84 <rcl_get_zero_initialized_wait_set+0x24>)
 8010f64:	4686      	mov	lr, r0
 8010f66:	4684      	mov	ip, r0
 8010f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f7a:	6823      	ldr	r3, [r4, #0]
 8010f7c:	f8cc 3000 	str.w	r3, [ip]
 8010f80:	4670      	mov	r0, lr
 8010f82:	bd10      	pop	{r4, pc}
 8010f84:	08018508 	.word	0x08018508

08010f88 <rcl_wait_set_is_valid>:
 8010f88:	b118      	cbz	r0, 8010f92 <rcl_wait_set_is_valid+0xa>
 8010f8a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8010f8c:	3800      	subs	r0, #0
 8010f8e:	bf18      	it	ne
 8010f90:	2001      	movne	r0, #1
 8010f92:	4770      	bx	lr

08010f94 <rcl_wait_set_fini>:
 8010f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f98:	b082      	sub	sp, #8
 8010f9a:	2800      	cmp	r0, #0
 8010f9c:	f000 8095 	beq.w	80110ca <rcl_wait_set_fini+0x136>
 8010fa0:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8010fa2:	4604      	mov	r4, r0
 8010fa4:	2e00      	cmp	r6, #0
 8010fa6:	f000 808c 	beq.w	80110c2 <rcl_wait_set_fini+0x12e>
 8010faa:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8010fac:	f003 f9b2 	bl	8014314 <rmw_destroy_wait_set>
 8010fb0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010fb2:	1e06      	subs	r6, r0, #0
 8010fb4:	bf18      	it	ne
 8010fb6:	f44f 7661 	movne.w	r6, #900	; 0x384
 8010fba:	2d00      	cmp	r5, #0
 8010fbc:	f000 8081 	beq.w	80110c2 <rcl_wait_set_fini+0x12e>
 8010fc0:	6820      	ldr	r0, [r4, #0]
 8010fc2:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8010fc6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010fc8:	2700      	movs	r7, #0
 8010fca:	6067      	str	r7, [r4, #4]
 8010fcc:	602f      	str	r7, [r5, #0]
 8010fce:	b120      	cbz	r0, 8010fda <rcl_wait_set_fini+0x46>
 8010fd0:	9101      	str	r1, [sp, #4]
 8010fd2:	47c0      	blx	r8
 8010fd4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010fd6:	9901      	ldr	r1, [sp, #4]
 8010fd8:	6027      	str	r7, [r4, #0]
 8010fda:	68a8      	ldr	r0, [r5, #8]
 8010fdc:	b120      	cbz	r0, 8010fe8 <rcl_wait_set_fini+0x54>
 8010fde:	47c0      	blx	r8
 8010fe0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8010fe8:	68a0      	ldr	r0, [r4, #8]
 8010fea:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8010fec:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010fee:	f04f 0800 	mov.w	r8, #0
 8010ff2:	f8c4 800c 	str.w	r8, [r4, #12]
 8010ff6:	f8c5 800c 	str.w	r8, [r5, #12]
 8010ffa:	b128      	cbz	r0, 8011008 <rcl_wait_set_fini+0x74>
 8010ffc:	47b8      	blx	r7
 8010ffe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011000:	f8c4 8008 	str.w	r8, [r4, #8]
 8011004:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011006:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011008:	6968      	ldr	r0, [r5, #20]
 801100a:	f04f 0800 	mov.w	r8, #0
 801100e:	f8c5 8010 	str.w	r8, [r5, #16]
 8011012:	b128      	cbz	r0, 8011020 <rcl_wait_set_fini+0x8c>
 8011014:	47b8      	blx	r7
 8011016:	f8c5 8014 	str.w	r8, [r5, #20]
 801101a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801101c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801101e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011020:	6920      	ldr	r0, [r4, #16]
 8011022:	f04f 0800 	mov.w	r8, #0
 8011026:	f8c4 8014 	str.w	r8, [r4, #20]
 801102a:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 801102e:	b128      	cbz	r0, 801103c <rcl_wait_set_fini+0xa8>
 8011030:	47b8      	blx	r7
 8011032:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011034:	f8c4 8010 	str.w	r8, [r4, #16]
 8011038:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801103a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801103c:	69a0      	ldr	r0, [r4, #24]
 801103e:	f04f 0800 	mov.w	r8, #0
 8011042:	f8c4 801c 	str.w	r8, [r4, #28]
 8011046:	f8c5 8018 	str.w	r8, [r5, #24]
 801104a:	b128      	cbz	r0, 8011058 <rcl_wait_set_fini+0xc4>
 801104c:	9101      	str	r1, [sp, #4]
 801104e:	47b8      	blx	r7
 8011050:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011052:	9901      	ldr	r1, [sp, #4]
 8011054:	f8c4 8018 	str.w	r8, [r4, #24]
 8011058:	6a28      	ldr	r0, [r5, #32]
 801105a:	b120      	cbz	r0, 8011066 <rcl_wait_set_fini+0xd2>
 801105c:	47b8      	blx	r7
 801105e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011060:	2300      	movs	r3, #0
 8011062:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8011066:	6a20      	ldr	r0, [r4, #32]
 8011068:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801106c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801106e:	2700      	movs	r7, #0
 8011070:	6267      	str	r7, [r4, #36]	; 0x24
 8011072:	626f      	str	r7, [r5, #36]	; 0x24
 8011074:	b120      	cbz	r0, 8011080 <rcl_wait_set_fini+0xec>
 8011076:	9101      	str	r1, [sp, #4]
 8011078:	47c0      	blx	r8
 801107a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801107c:	9901      	ldr	r1, [sp, #4]
 801107e:	6227      	str	r7, [r4, #32]
 8011080:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8011082:	b120      	cbz	r0, 801108e <rcl_wait_set_fini+0xfa>
 8011084:	47c0      	blx	r8
 8011086:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011088:	2300      	movs	r3, #0
 801108a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801108e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011090:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8011094:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011096:	2700      	movs	r7, #0
 8011098:	62e7      	str	r7, [r4, #44]	; 0x2c
 801109a:	632f      	str	r7, [r5, #48]	; 0x30
 801109c:	b120      	cbz	r0, 80110a8 <rcl_wait_set_fini+0x114>
 801109e:	9101      	str	r1, [sp, #4]
 80110a0:	47c0      	blx	r8
 80110a2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80110a4:	9901      	ldr	r1, [sp, #4]
 80110a6:	62a7      	str	r7, [r4, #40]	; 0x28
 80110a8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80110aa:	b120      	cbz	r0, 80110b6 <rcl_wait_set_fini+0x122>
 80110ac:	47c0      	blx	r8
 80110ae:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80110b0:	2300      	movs	r3, #0
 80110b2:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 80110b6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80110b8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80110ba:	4628      	mov	r0, r5
 80110bc:	4798      	blx	r3
 80110be:	2300      	movs	r3, #0
 80110c0:	6323      	str	r3, [r4, #48]	; 0x30
 80110c2:	4630      	mov	r0, r6
 80110c4:	b002      	add	sp, #8
 80110c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110ca:	260b      	movs	r6, #11
 80110cc:	4630      	mov	r0, r6
 80110ce:	b002      	add	sp, #8
 80110d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080110d4 <rcl_wait_set_add_subscription>:
 80110d4:	b318      	cbz	r0, 801111e <rcl_wait_set_add_subscription+0x4a>
 80110d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80110d8:	b570      	push	{r4, r5, r6, lr}
 80110da:	4604      	mov	r4, r0
 80110dc:	b30b      	cbz	r3, 8011122 <rcl_wait_set_add_subscription+0x4e>
 80110de:	b319      	cbz	r1, 8011128 <rcl_wait_set_add_subscription+0x54>
 80110e0:	681d      	ldr	r5, [r3, #0]
 80110e2:	6840      	ldr	r0, [r0, #4]
 80110e4:	4285      	cmp	r5, r0
 80110e6:	d217      	bcs.n	8011118 <rcl_wait_set_add_subscription+0x44>
 80110e8:	6820      	ldr	r0, [r4, #0]
 80110ea:	1c6e      	adds	r6, r5, #1
 80110ec:	601e      	str	r6, [r3, #0]
 80110ee:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80110f2:	b102      	cbz	r2, 80110f6 <rcl_wait_set_add_subscription+0x22>
 80110f4:	6015      	str	r5, [r2, #0]
 80110f6:	4608      	mov	r0, r1
 80110f8:	f7ff fd14 	bl	8010b24 <rcl_subscription_get_rmw_handle>
 80110fc:	b150      	cbz	r0, 8011114 <rcl_wait_set_add_subscription+0x40>
 80110fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011100:	6842      	ldr	r2, [r0, #4]
 8011102:	689b      	ldr	r3, [r3, #8]
 8011104:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011108:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801110a:	6853      	ldr	r3, [r2, #4]
 801110c:	3301      	adds	r3, #1
 801110e:	2000      	movs	r0, #0
 8011110:	6053      	str	r3, [r2, #4]
 8011112:	bd70      	pop	{r4, r5, r6, pc}
 8011114:	2001      	movs	r0, #1
 8011116:	bd70      	pop	{r4, r5, r6, pc}
 8011118:	f240 3086 	movw	r0, #902	; 0x386
 801111c:	bd70      	pop	{r4, r5, r6, pc}
 801111e:	200b      	movs	r0, #11
 8011120:	4770      	bx	lr
 8011122:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011126:	bd70      	pop	{r4, r5, r6, pc}
 8011128:	200b      	movs	r0, #11
 801112a:	bd70      	pop	{r4, r5, r6, pc}

0801112c <rcl_wait_set_clear>:
 801112c:	2800      	cmp	r0, #0
 801112e:	d073      	beq.n	8011218 <rcl_wait_set_clear+0xec>
 8011130:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011132:	b510      	push	{r4, lr}
 8011134:	4604      	mov	r4, r0
 8011136:	2b00      	cmp	r3, #0
 8011138:	d070      	beq.n	801121c <rcl_wait_set_clear+0xf0>
 801113a:	6800      	ldr	r0, [r0, #0]
 801113c:	b138      	cbz	r0, 801114e <rcl_wait_set_clear+0x22>
 801113e:	6862      	ldr	r2, [r4, #4]
 8011140:	2100      	movs	r1, #0
 8011142:	0092      	lsls	r2, r2, #2
 8011144:	f005 ff08 	bl	8016f58 <memset>
 8011148:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801114a:	2200      	movs	r2, #0
 801114c:	601a      	str	r2, [r3, #0]
 801114e:	68a0      	ldr	r0, [r4, #8]
 8011150:	b138      	cbz	r0, 8011162 <rcl_wait_set_clear+0x36>
 8011152:	68e2      	ldr	r2, [r4, #12]
 8011154:	2100      	movs	r1, #0
 8011156:	0092      	lsls	r2, r2, #2
 8011158:	f005 fefe 	bl	8016f58 <memset>
 801115c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801115e:	2200      	movs	r2, #0
 8011160:	60da      	str	r2, [r3, #12]
 8011162:	69a0      	ldr	r0, [r4, #24]
 8011164:	b138      	cbz	r0, 8011176 <rcl_wait_set_clear+0x4a>
 8011166:	69e2      	ldr	r2, [r4, #28]
 8011168:	2100      	movs	r1, #0
 801116a:	0092      	lsls	r2, r2, #2
 801116c:	f005 fef4 	bl	8016f58 <memset>
 8011170:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011172:	2200      	movs	r2, #0
 8011174:	619a      	str	r2, [r3, #24]
 8011176:	6a20      	ldr	r0, [r4, #32]
 8011178:	b138      	cbz	r0, 801118a <rcl_wait_set_clear+0x5e>
 801117a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801117c:	2100      	movs	r1, #0
 801117e:	0092      	lsls	r2, r2, #2
 8011180:	f005 feea 	bl	8016f58 <memset>
 8011184:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011186:	2200      	movs	r2, #0
 8011188:	625a      	str	r2, [r3, #36]	; 0x24
 801118a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801118c:	b138      	cbz	r0, 801119e <rcl_wait_set_clear+0x72>
 801118e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011190:	2100      	movs	r1, #0
 8011192:	0092      	lsls	r2, r2, #2
 8011194:	f005 fee0 	bl	8016f58 <memset>
 8011198:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801119a:	2200      	movs	r2, #0
 801119c:	631a      	str	r2, [r3, #48]	; 0x30
 801119e:	6920      	ldr	r0, [r4, #16]
 80111a0:	b138      	cbz	r0, 80111b2 <rcl_wait_set_clear+0x86>
 80111a2:	6962      	ldr	r2, [r4, #20]
 80111a4:	2100      	movs	r1, #0
 80111a6:	0092      	lsls	r2, r2, #2
 80111a8:	f005 fed6 	bl	8016f58 <memset>
 80111ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80111ae:	2200      	movs	r2, #0
 80111b0:	641a      	str	r2, [r3, #64]	; 0x40
 80111b2:	6898      	ldr	r0, [r3, #8]
 80111b4:	b138      	cbz	r0, 80111c6 <rcl_wait_set_clear+0x9a>
 80111b6:	685a      	ldr	r2, [r3, #4]
 80111b8:	2100      	movs	r1, #0
 80111ba:	0092      	lsls	r2, r2, #2
 80111bc:	f005 fecc 	bl	8016f58 <memset>
 80111c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80111c2:	2200      	movs	r2, #0
 80111c4:	605a      	str	r2, [r3, #4]
 80111c6:	6958      	ldr	r0, [r3, #20]
 80111c8:	b138      	cbz	r0, 80111da <rcl_wait_set_clear+0xae>
 80111ca:	691a      	ldr	r2, [r3, #16]
 80111cc:	2100      	movs	r1, #0
 80111ce:	0092      	lsls	r2, r2, #2
 80111d0:	f005 fec2 	bl	8016f58 <memset>
 80111d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80111d6:	2200      	movs	r2, #0
 80111d8:	611a      	str	r2, [r3, #16]
 80111da:	6a18      	ldr	r0, [r3, #32]
 80111dc:	b138      	cbz	r0, 80111ee <rcl_wait_set_clear+0xc2>
 80111de:	69da      	ldr	r2, [r3, #28]
 80111e0:	2100      	movs	r1, #0
 80111e2:	0092      	lsls	r2, r2, #2
 80111e4:	f005 feb8 	bl	8016f58 <memset>
 80111e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80111ea:	2200      	movs	r2, #0
 80111ec:	61da      	str	r2, [r3, #28]
 80111ee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80111f0:	b138      	cbz	r0, 8011202 <rcl_wait_set_clear+0xd6>
 80111f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80111f4:	2100      	movs	r1, #0
 80111f6:	0092      	lsls	r2, r2, #2
 80111f8:	f005 feae 	bl	8016f58 <memset>
 80111fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80111fe:	2200      	movs	r2, #0
 8011200:	629a      	str	r2, [r3, #40]	; 0x28
 8011202:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011204:	b138      	cbz	r0, 8011216 <rcl_wait_set_clear+0xea>
 8011206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011208:	2100      	movs	r1, #0
 801120a:	0092      	lsls	r2, r2, #2
 801120c:	f005 fea4 	bl	8016f58 <memset>
 8011210:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011212:	2000      	movs	r0, #0
 8011214:	6358      	str	r0, [r3, #52]	; 0x34
 8011216:	bd10      	pop	{r4, pc}
 8011218:	200b      	movs	r0, #11
 801121a:	4770      	bx	lr
 801121c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011220:	bd10      	pop	{r4, pc}
 8011222:	bf00      	nop

08011224 <rcl_wait_set_resize>:
 8011224:	2800      	cmp	r0, #0
 8011226:	f000 8185 	beq.w	8011534 <rcl_wait_set_resize+0x310>
 801122a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801122e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8011230:	b083      	sub	sp, #12
 8011232:	4605      	mov	r5, r0
 8011234:	2c00      	cmp	r4, #0
 8011236:	f000 817f 	beq.w	8011538 <rcl_wait_set_resize+0x314>
 801123a:	f04f 0900 	mov.w	r9, #0
 801123e:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011242:	461f      	mov	r7, r3
 8011244:	4688      	mov	r8, r1
 8011246:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 801124a:	4616      	mov	r6, r2
 801124c:	f8c0 9004 	str.w	r9, [r0, #4]
 8011250:	f8c4 9000 	str.w	r9, [r4]
 8011254:	2900      	cmp	r1, #0
 8011256:	f000 80bd 	beq.w	80113d4 <rcl_wait_set_resize+0x1b0>
 801125a:	008c      	lsls	r4, r1, #2
 801125c:	6800      	ldr	r0, [r0, #0]
 801125e:	9301      	str	r3, [sp, #4]
 8011260:	4652      	mov	r2, sl
 8011262:	4621      	mov	r1, r4
 8011264:	4798      	blx	r3
 8011266:	9b01      	ldr	r3, [sp, #4]
 8011268:	6028      	str	r0, [r5, #0]
 801126a:	2800      	cmp	r0, #0
 801126c:	f000 80cb 	beq.w	8011406 <rcl_wait_set_resize+0x1e2>
 8011270:	4622      	mov	r2, r4
 8011272:	4649      	mov	r1, r9
 8011274:	9301      	str	r3, [sp, #4]
 8011276:	f005 fe6f 	bl	8016f58 <memset>
 801127a:	f8c5 8004 	str.w	r8, [r5, #4]
 801127e:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8011282:	9b01      	ldr	r3, [sp, #4]
 8011284:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8011288:	f8c8 9004 	str.w	r9, [r8, #4]
 801128c:	4652      	mov	r2, sl
 801128e:	4621      	mov	r1, r4
 8011290:	4798      	blx	r3
 8011292:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011294:	f8c8 0008 	str.w	r0, [r8, #8]
 8011298:	689b      	ldr	r3, [r3, #8]
 801129a:	2b00      	cmp	r3, #0
 801129c:	f000 80ac 	beq.w	80113f8 <rcl_wait_set_resize+0x1d4>
 80112a0:	4622      	mov	r2, r4
 80112a2:	4649      	mov	r1, r9
 80112a4:	4618      	mov	r0, r3
 80112a6:	f005 fe57 	bl	8016f58 <memset>
 80112aa:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80112ac:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80112b0:	f04f 0800 	mov.w	r8, #0
 80112b4:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 80112b8:	f8c5 800c 	str.w	r8, [r5, #12]
 80112bc:	f8c4 800c 	str.w	r8, [r4, #12]
 80112c0:	2e00      	cmp	r6, #0
 80112c2:	f040 80a4 	bne.w	801140e <rcl_wait_set_resize+0x1ea>
 80112c6:	68a8      	ldr	r0, [r5, #8]
 80112c8:	b128      	cbz	r0, 80112d6 <rcl_wait_set_resize+0xb2>
 80112ca:	4649      	mov	r1, r9
 80112cc:	4790      	blx	r2
 80112ce:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80112d0:	60ae      	str	r6, [r5, #8]
 80112d2:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80112d6:	f04f 0800 	mov.w	r8, #0
 80112da:	19f6      	adds	r6, r6, r7
 80112dc:	f8c4 8010 	str.w	r8, [r4, #16]
 80112e0:	f040 80ac 	bne.w	801143c <rcl_wait_set_resize+0x218>
 80112e4:	6960      	ldr	r0, [r4, #20]
 80112e6:	b130      	cbz	r0, 80112f6 <rcl_wait_set_resize+0xd2>
 80112e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80112ea:	4649      	mov	r1, r9
 80112ec:	4798      	blx	r3
 80112ee:	6166      	str	r6, [r4, #20]
 80112f0:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80112f2:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80112f6:	2600      	movs	r6, #0
 80112f8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 80112fc:	616e      	str	r6, [r5, #20]
 80112fe:	6426      	str	r6, [r4, #64]	; 0x40
 8011300:	2f00      	cmp	r7, #0
 8011302:	f040 80ad 	bne.w	8011460 <rcl_wait_set_resize+0x23c>
 8011306:	6928      	ldr	r0, [r5, #16]
 8011308:	b138      	cbz	r0, 801131a <rcl_wait_set_resize+0xf6>
 801130a:	4649      	mov	r1, r9
 801130c:	47d0      	blx	sl
 801130e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011310:	612f      	str	r7, [r5, #16]
 8011312:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8011316:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801131a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801131c:	2600      	movs	r6, #0
 801131e:	61ee      	str	r6, [r5, #28]
 8011320:	61a6      	str	r6, [r4, #24]
 8011322:	2b00      	cmp	r3, #0
 8011324:	f040 80af 	bne.w	8011486 <rcl_wait_set_resize+0x262>
 8011328:	69a8      	ldr	r0, [r5, #24]
 801132a:	b120      	cbz	r0, 8011336 <rcl_wait_set_resize+0x112>
 801132c:	4649      	mov	r1, r9
 801132e:	47d0      	blx	sl
 8011330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011332:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011334:	61ab      	str	r3, [r5, #24]
 8011336:	6a20      	ldr	r0, [r4, #32]
 8011338:	b128      	cbz	r0, 8011346 <rcl_wait_set_resize+0x122>
 801133a:	4649      	mov	r1, r9
 801133c:	47d0      	blx	sl
 801133e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011340:	2300      	movs	r3, #0
 8011342:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8011346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011348:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801134a:	2600      	movs	r6, #0
 801134c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8011350:	626e      	str	r6, [r5, #36]	; 0x24
 8011352:	6266      	str	r6, [r4, #36]	; 0x24
 8011354:	2b00      	cmp	r3, #0
 8011356:	f000 80b6 	beq.w	80114c6 <rcl_wait_set_resize+0x2a2>
 801135a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801135e:	6a28      	ldr	r0, [r5, #32]
 8011360:	463a      	mov	r2, r7
 8011362:	4651      	mov	r1, sl
 8011364:	47c8      	blx	r9
 8011366:	6228      	str	r0, [r5, #32]
 8011368:	2800      	cmp	r0, #0
 801136a:	d04c      	beq.n	8011406 <rcl_wait_set_resize+0x1e2>
 801136c:	4652      	mov	r2, sl
 801136e:	4631      	mov	r1, r6
 8011370:	f005 fdf2 	bl	8016f58 <memset>
 8011374:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011378:	626b      	str	r3, [r5, #36]	; 0x24
 801137a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801137c:	62a6      	str	r6, [r4, #40]	; 0x28
 801137e:	463a      	mov	r2, r7
 8011380:	4651      	mov	r1, sl
 8011382:	47c8      	blx	r9
 8011384:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011386:	62e0      	str	r0, [r4, #44]	; 0x2c
 8011388:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801138a:	2c00      	cmp	r4, #0
 801138c:	f000 80f0 	beq.w	8011570 <rcl_wait_set_resize+0x34c>
 8011390:	4620      	mov	r0, r4
 8011392:	4652      	mov	r2, sl
 8011394:	4631      	mov	r1, r6
 8011396:	f005 fddf 	bl	8016f58 <memset>
 801139a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801139c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801139e:	6da7      	ldr	r7, [r4, #88]	; 0x58
 80113a0:	2600      	movs	r6, #0
 80113a2:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 80113a6:	62ee      	str	r6, [r5, #44]	; 0x2c
 80113a8:	6326      	str	r6, [r4, #48]	; 0x30
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	f040 809d 	bne.w	80114ea <rcl_wait_set_resize+0x2c6>
 80113b0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80113b2:	b120      	cbz	r0, 80113be <rcl_wait_set_resize+0x19a>
 80113b4:	4639      	mov	r1, r7
 80113b6:	47c0      	blx	r8
 80113b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80113ba:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80113bc:	62ab      	str	r3, [r5, #40]	; 0x28
 80113be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80113c0:	b310      	cbz	r0, 8011408 <rcl_wait_set_resize+0x1e4>
 80113c2:	4639      	mov	r1, r7
 80113c4:	47c0      	blx	r8
 80113c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80113c8:	2000      	movs	r0, #0
 80113ca:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 80113ce:	b003      	add	sp, #12
 80113d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113d4:	6800      	ldr	r0, [r0, #0]
 80113d6:	b120      	cbz	r0, 80113e2 <rcl_wait_set_resize+0x1be>
 80113d8:	4651      	mov	r1, sl
 80113da:	47d8      	blx	fp
 80113dc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80113de:	f8c5 8000 	str.w	r8, [r5]
 80113e2:	68a0      	ldr	r0, [r4, #8]
 80113e4:	2800      	cmp	r0, #0
 80113e6:	f43f af61 	beq.w	80112ac <rcl_wait_set_resize+0x88>
 80113ea:	4651      	mov	r1, sl
 80113ec:	47d8      	blx	fp
 80113ee:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80113f0:	2300      	movs	r3, #0
 80113f2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80113f6:	e759      	b.n	80112ac <rcl_wait_set_resize+0x88>
 80113f8:	6828      	ldr	r0, [r5, #0]
 80113fa:	9301      	str	r3, [sp, #4]
 80113fc:	4651      	mov	r1, sl
 80113fe:	47d8      	blx	fp
 8011400:	9b01      	ldr	r3, [sp, #4]
 8011402:	e9c5 3300 	strd	r3, r3, [r5]
 8011406:	200a      	movs	r0, #10
 8011408:	b003      	add	sp, #12
 801140a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801140e:	00b4      	lsls	r4, r6, #2
 8011410:	68a8      	ldr	r0, [r5, #8]
 8011412:	464a      	mov	r2, r9
 8011414:	4621      	mov	r1, r4
 8011416:	4798      	blx	r3
 8011418:	60a8      	str	r0, [r5, #8]
 801141a:	2800      	cmp	r0, #0
 801141c:	d0f3      	beq.n	8011406 <rcl_wait_set_resize+0x1e2>
 801141e:	4622      	mov	r2, r4
 8011420:	4641      	mov	r1, r8
 8011422:	f005 fd99 	bl	8016f58 <memset>
 8011426:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011428:	60ee      	str	r6, [r5, #12]
 801142a:	f04f 0800 	mov.w	r8, #0
 801142e:	19f6      	adds	r6, r6, r7
 8011430:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8011434:	f8c4 8010 	str.w	r8, [r4, #16]
 8011438:	f43f af54 	beq.w	80112e4 <rcl_wait_set_resize+0xc0>
 801143c:	00b6      	lsls	r6, r6, #2
 801143e:	464a      	mov	r2, r9
 8011440:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011442:	6960      	ldr	r0, [r4, #20]
 8011444:	4631      	mov	r1, r6
 8011446:	4798      	blx	r3
 8011448:	4681      	mov	r9, r0
 801144a:	6160      	str	r0, [r4, #20]
 801144c:	2800      	cmp	r0, #0
 801144e:	d076      	beq.n	801153e <rcl_wait_set_resize+0x31a>
 8011450:	4632      	mov	r2, r6
 8011452:	4641      	mov	r1, r8
 8011454:	f005 fd80 	bl	8016f58 <memset>
 8011458:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801145a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801145e:	e74a      	b.n	80112f6 <rcl_wait_set_resize+0xd2>
 8011460:	00bc      	lsls	r4, r7, #2
 8011462:	6928      	ldr	r0, [r5, #16]
 8011464:	464a      	mov	r2, r9
 8011466:	4621      	mov	r1, r4
 8011468:	47c0      	blx	r8
 801146a:	6128      	str	r0, [r5, #16]
 801146c:	2800      	cmp	r0, #0
 801146e:	d0ca      	beq.n	8011406 <rcl_wait_set_resize+0x1e2>
 8011470:	4622      	mov	r2, r4
 8011472:	4631      	mov	r1, r6
 8011474:	f005 fd70 	bl	8016f58 <memset>
 8011478:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801147a:	616f      	str	r7, [r5, #20]
 801147c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8011480:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8011484:	e749      	b.n	801131a <rcl_wait_set_resize+0xf6>
 8011486:	009c      	lsls	r4, r3, #2
 8011488:	69a8      	ldr	r0, [r5, #24]
 801148a:	464a      	mov	r2, r9
 801148c:	4621      	mov	r1, r4
 801148e:	47c0      	blx	r8
 8011490:	61a8      	str	r0, [r5, #24]
 8011492:	2800      	cmp	r0, #0
 8011494:	d0b7      	beq.n	8011406 <rcl_wait_set_resize+0x1e2>
 8011496:	4622      	mov	r2, r4
 8011498:	4631      	mov	r1, r6
 801149a:	f005 fd5d 	bl	8016f58 <memset>
 801149e:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 80114a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80114a2:	61eb      	str	r3, [r5, #28]
 80114a4:	6a38      	ldr	r0, [r7, #32]
 80114a6:	61fe      	str	r6, [r7, #28]
 80114a8:	464a      	mov	r2, r9
 80114aa:	4621      	mov	r1, r4
 80114ac:	47c0      	blx	r8
 80114ae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80114b0:	6238      	str	r0, [r7, #32]
 80114b2:	6a1f      	ldr	r7, [r3, #32]
 80114b4:	2f00      	cmp	r7, #0
 80114b6:	d054      	beq.n	8011562 <rcl_wait_set_resize+0x33e>
 80114b8:	4622      	mov	r2, r4
 80114ba:	4631      	mov	r1, r6
 80114bc:	4638      	mov	r0, r7
 80114be:	f005 fd4b 	bl	8016f58 <memset>
 80114c2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80114c4:	e73f      	b.n	8011346 <rcl_wait_set_resize+0x122>
 80114c6:	6a28      	ldr	r0, [r5, #32]
 80114c8:	b120      	cbz	r0, 80114d4 <rcl_wait_set_resize+0x2b0>
 80114ca:	4639      	mov	r1, r7
 80114cc:	47c0      	blx	r8
 80114ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114d0:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80114d2:	622b      	str	r3, [r5, #32]
 80114d4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80114d6:	2800      	cmp	r0, #0
 80114d8:	f43f af60 	beq.w	801139c <rcl_wait_set_resize+0x178>
 80114dc:	4639      	mov	r1, r7
 80114de:	47c0      	blx	r8
 80114e0:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80114e2:	2300      	movs	r3, #0
 80114e4:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80114e8:	e758      	b.n	801139c <rcl_wait_set_resize+0x178>
 80114ea:	009c      	lsls	r4, r3, #2
 80114ec:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80114ee:	463a      	mov	r2, r7
 80114f0:	4621      	mov	r1, r4
 80114f2:	47c8      	blx	r9
 80114f4:	62a8      	str	r0, [r5, #40]	; 0x28
 80114f6:	2800      	cmp	r0, #0
 80114f8:	d085      	beq.n	8011406 <rcl_wait_set_resize+0x1e2>
 80114fa:	4622      	mov	r2, r4
 80114fc:	4631      	mov	r1, r6
 80114fe:	f005 fd2b 	bl	8016f58 <memset>
 8011502:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8011506:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011508:	62eb      	str	r3, [r5, #44]	; 0x2c
 801150a:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801150e:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 8011512:	463a      	mov	r2, r7
 8011514:	4621      	mov	r1, r4
 8011516:	47c8      	blx	r9
 8011518:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801151a:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 801151e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011520:	b36b      	cbz	r3, 801157e <rcl_wait_set_resize+0x35a>
 8011522:	4622      	mov	r2, r4
 8011524:	4631      	mov	r1, r6
 8011526:	4618      	mov	r0, r3
 8011528:	f005 fd16 	bl	8016f58 <memset>
 801152c:	4630      	mov	r0, r6
 801152e:	b003      	add	sp, #12
 8011530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011534:	200b      	movs	r0, #11
 8011536:	4770      	bx	lr
 8011538:	f44f 7061 	mov.w	r0, #900	; 0x384
 801153c:	e764      	b.n	8011408 <rcl_wait_set_resize+0x1e4>
 801153e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011540:	68a8      	ldr	r0, [r5, #8]
 8011542:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8011544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011546:	4798      	blx	r3
 8011548:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801154a:	6928      	ldr	r0, [r5, #16]
 801154c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801154e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8011550:	f8c5 900c 	str.w	r9, [r5, #12]
 8011554:	f8c5 9008 	str.w	r9, [r5, #8]
 8011558:	4790      	blx	r2
 801155a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801155e:	200a      	movs	r0, #10
 8011560:	e752      	b.n	8011408 <rcl_wait_set_resize+0x1e4>
 8011562:	69a8      	ldr	r0, [r5, #24]
 8011564:	4649      	mov	r1, r9
 8011566:	47d0      	blx	sl
 8011568:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801156c:	200a      	movs	r0, #10
 801156e:	e74b      	b.n	8011408 <rcl_wait_set_resize+0x1e4>
 8011570:	6a28      	ldr	r0, [r5, #32]
 8011572:	4639      	mov	r1, r7
 8011574:	47c0      	blx	r8
 8011576:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801157a:	200a      	movs	r0, #10
 801157c:	e744      	b.n	8011408 <rcl_wait_set_resize+0x1e4>
 801157e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8011580:	9301      	str	r3, [sp, #4]
 8011582:	4639      	mov	r1, r7
 8011584:	47c0      	blx	r8
 8011586:	9b01      	ldr	r3, [sp, #4]
 8011588:	200a      	movs	r0, #10
 801158a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801158e:	e73b      	b.n	8011408 <rcl_wait_set_resize+0x1e4>

08011590 <rcl_wait_set_init>:
 8011590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011594:	b084      	sub	sp, #16
 8011596:	4604      	mov	r4, r0
 8011598:	a810      	add	r0, sp, #64	; 0x40
 801159a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 801159e:	460f      	mov	r7, r1
 80115a0:	4690      	mov	r8, r2
 80115a2:	4699      	mov	r9, r3
 80115a4:	f7f9 fdbc 	bl	800b120 <rcutils_allocator_is_valid>
 80115a8:	2800      	cmp	r0, #0
 80115aa:	d06b      	beq.n	8011684 <rcl_wait_set_init+0xf4>
 80115ac:	2c00      	cmp	r4, #0
 80115ae:	d069      	beq.n	8011684 <rcl_wait_set_init+0xf4>
 80115b0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80115b2:	b125      	cbz	r5, 80115be <rcl_wait_set_init+0x2e>
 80115b4:	2564      	movs	r5, #100	; 0x64
 80115b6:	4628      	mov	r0, r5
 80115b8:	b004      	add	sp, #16
 80115ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115be:	f1ba 0f00 	cmp.w	sl, #0
 80115c2:	d05f      	beq.n	8011684 <rcl_wait_set_init+0xf4>
 80115c4:	4650      	mov	r0, sl
 80115c6:	f7fe fb3f 	bl	800fc48 <rcl_context_is_valid>
 80115ca:	2800      	cmp	r0, #0
 80115cc:	d067      	beq.n	801169e <rcl_wait_set_init+0x10e>
 80115ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80115d0:	9914      	ldr	r1, [sp, #80]	; 0x50
 80115d2:	205c      	movs	r0, #92	; 0x5c
 80115d4:	4798      	blx	r3
 80115d6:	6320      	str	r0, [r4, #48]	; 0x30
 80115d8:	2800      	cmp	r0, #0
 80115da:	d062      	beq.n	80116a2 <rcl_wait_set_init+0x112>
 80115dc:	4629      	mov	r1, r5
 80115de:	225c      	movs	r2, #92	; 0x5c
 80115e0:	f005 fcba 	bl	8016f58 <memset>
 80115e4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80115e8:	eb03 0e02 	add.w	lr, r3, r2
 80115ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80115ee:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80115f0:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80115f4:	449e      	add	lr, r3
 80115f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80115fa:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80115fe:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8011602:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8011606:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 801160a:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 801160e:	f106 0548 	add.w	r5, r6, #72	; 0x48
 8011612:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 8011616:	f8da a000 	ldr.w	sl, [sl]
 801161a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801161c:	44c6      	add	lr, r8
 801161e:	f8dc 3000 	ldr.w	r3, [ip]
 8011622:	602b      	str	r3, [r5, #0]
 8011624:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8011628:	f10a 0028 	add.w	r0, sl, #40	; 0x28
 801162c:	f002 fe68 	bl	8014300 <rmw_create_wait_set>
 8011630:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011632:	63f0      	str	r0, [r6, #60]	; 0x3c
 8011634:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011636:	b350      	cbz	r0, 801168e <rcl_wait_set_init+0xfe>
 8011638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801163a:	9302      	str	r3, [sp, #8]
 801163c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801163e:	9301      	str	r3, [sp, #4]
 8011640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011642:	9300      	str	r3, [sp, #0]
 8011644:	4642      	mov	r2, r8
 8011646:	464b      	mov	r3, r9
 8011648:	4639      	mov	r1, r7
 801164a:	4620      	mov	r0, r4
 801164c:	f7ff fdea 	bl	8011224 <rcl_wait_set_resize>
 8011650:	4605      	mov	r5, r0
 8011652:	2800      	cmp	r0, #0
 8011654:	d0af      	beq.n	80115b6 <rcl_wait_set_init+0x26>
 8011656:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011658:	bb2b      	cbnz	r3, 80116a6 <rcl_wait_set_init+0x116>
 801165a:	2600      	movs	r6, #0
 801165c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8011660:	9600      	str	r6, [sp, #0]
 8011662:	4633      	mov	r3, r6
 8011664:	4632      	mov	r2, r6
 8011666:	4631      	mov	r1, r6
 8011668:	4620      	mov	r0, r4
 801166a:	f7ff fddb 	bl	8011224 <rcl_wait_set_resize>
 801166e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8011670:	2800      	cmp	r0, #0
 8011672:	d0a0      	beq.n	80115b6 <rcl_wait_set_init+0x26>
 8011674:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8011676:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8011678:	4798      	blx	r3
 801167a:	4628      	mov	r0, r5
 801167c:	6326      	str	r6, [r4, #48]	; 0x30
 801167e:	b004      	add	sp, #16
 8011680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011684:	250b      	movs	r5, #11
 8011686:	4628      	mov	r0, r5
 8011688:	b004      	add	sp, #16
 801168a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801168e:	2501      	movs	r5, #1
 8011690:	f002 fe40 	bl	8014314 <rmw_destroy_wait_set>
 8011694:	2800      	cmp	r0, #0
 8011696:	bf18      	it	ne
 8011698:	f44f 7561 	movne.w	r5, #900	; 0x384
 801169c:	e7dd      	b.n	801165a <rcl_wait_set_init+0xca>
 801169e:	2565      	movs	r5, #101	; 0x65
 80116a0:	e789      	b.n	80115b6 <rcl_wait_set_init+0x26>
 80116a2:	250a      	movs	r5, #10
 80116a4:	e787      	b.n	80115b6 <rcl_wait_set_init+0x26>
 80116a6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80116a8:	e7f2      	b.n	8011690 <rcl_wait_set_init+0x100>
 80116aa:	bf00      	nop

080116ac <rcl_wait_set_add_guard_condition>:
 80116ac:	b318      	cbz	r0, 80116f6 <rcl_wait_set_add_guard_condition+0x4a>
 80116ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80116b0:	b570      	push	{r4, r5, r6, lr}
 80116b2:	4604      	mov	r4, r0
 80116b4:	b30b      	cbz	r3, 80116fa <rcl_wait_set_add_guard_condition+0x4e>
 80116b6:	b319      	cbz	r1, 8011700 <rcl_wait_set_add_guard_condition+0x54>
 80116b8:	68dd      	ldr	r5, [r3, #12]
 80116ba:	68c0      	ldr	r0, [r0, #12]
 80116bc:	4285      	cmp	r5, r0
 80116be:	d217      	bcs.n	80116f0 <rcl_wait_set_add_guard_condition+0x44>
 80116c0:	68a0      	ldr	r0, [r4, #8]
 80116c2:	1c6e      	adds	r6, r5, #1
 80116c4:	60de      	str	r6, [r3, #12]
 80116c6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80116ca:	b102      	cbz	r2, 80116ce <rcl_wait_set_add_guard_condition+0x22>
 80116cc:	6015      	str	r5, [r2, #0]
 80116ce:	4608      	mov	r0, r1
 80116d0:	f004 fe42 	bl	8016358 <rcl_guard_condition_get_rmw_handle>
 80116d4:	b150      	cbz	r0, 80116ec <rcl_wait_set_add_guard_condition+0x40>
 80116d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80116d8:	6842      	ldr	r2, [r0, #4]
 80116da:	695b      	ldr	r3, [r3, #20]
 80116dc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80116e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80116e2:	6913      	ldr	r3, [r2, #16]
 80116e4:	3301      	adds	r3, #1
 80116e6:	2000      	movs	r0, #0
 80116e8:	6113      	str	r3, [r2, #16]
 80116ea:	bd70      	pop	{r4, r5, r6, pc}
 80116ec:	2001      	movs	r0, #1
 80116ee:	bd70      	pop	{r4, r5, r6, pc}
 80116f0:	f240 3086 	movw	r0, #902	; 0x386
 80116f4:	bd70      	pop	{r4, r5, r6, pc}
 80116f6:	200b      	movs	r0, #11
 80116f8:	4770      	bx	lr
 80116fa:	f44f 7061 	mov.w	r0, #900	; 0x384
 80116fe:	bd70      	pop	{r4, r5, r6, pc}
 8011700:	200b      	movs	r0, #11
 8011702:	bd70      	pop	{r4, r5, r6, pc}

08011704 <rcl_wait_set_add_timer>:
 8011704:	b328      	cbz	r0, 8011752 <rcl_wait_set_add_timer+0x4e>
 8011706:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011708:	b570      	push	{r4, r5, r6, lr}
 801170a:	4604      	mov	r4, r0
 801170c:	b31b      	cbz	r3, 8011756 <rcl_wait_set_add_timer+0x52>
 801170e:	b329      	cbz	r1, 801175c <rcl_wait_set_add_timer+0x58>
 8011710:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8011712:	6965      	ldr	r5, [r4, #20]
 8011714:	42a8      	cmp	r0, r5
 8011716:	d219      	bcs.n	801174c <rcl_wait_set_add_timer+0x48>
 8011718:	6925      	ldr	r5, [r4, #16]
 801171a:	1c46      	adds	r6, r0, #1
 801171c:	641e      	str	r6, [r3, #64]	; 0x40
 801171e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8011722:	b102      	cbz	r2, 8011726 <rcl_wait_set_add_timer+0x22>
 8011724:	6010      	str	r0, [r2, #0]
 8011726:	4608      	mov	r0, r1
 8011728:	f7ff fba6 	bl	8010e78 <rcl_timer_get_guard_condition>
 801172c:	b168      	cbz	r0, 801174a <rcl_wait_set_add_timer+0x46>
 801172e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011730:	68e3      	ldr	r3, [r4, #12]
 8011732:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8011734:	3b01      	subs	r3, #1
 8011736:	441d      	add	r5, r3
 8011738:	f004 fe0e 	bl	8016358 <rcl_guard_condition_get_rmw_handle>
 801173c:	b180      	cbz	r0, 8011760 <rcl_wait_set_add_timer+0x5c>
 801173e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011740:	6842      	ldr	r2, [r0, #4]
 8011742:	695b      	ldr	r3, [r3, #20]
 8011744:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011748:	2000      	movs	r0, #0
 801174a:	bd70      	pop	{r4, r5, r6, pc}
 801174c:	f240 3086 	movw	r0, #902	; 0x386
 8011750:	bd70      	pop	{r4, r5, r6, pc}
 8011752:	200b      	movs	r0, #11
 8011754:	4770      	bx	lr
 8011756:	f44f 7061 	mov.w	r0, #900	; 0x384
 801175a:	bd70      	pop	{r4, r5, r6, pc}
 801175c:	200b      	movs	r0, #11
 801175e:	bd70      	pop	{r4, r5, r6, pc}
 8011760:	2001      	movs	r0, #1
 8011762:	bd70      	pop	{r4, r5, r6, pc}

08011764 <rcl_wait_set_add_client>:
 8011764:	b318      	cbz	r0, 80117ae <rcl_wait_set_add_client+0x4a>
 8011766:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011768:	b570      	push	{r4, r5, r6, lr}
 801176a:	4604      	mov	r4, r0
 801176c:	b30b      	cbz	r3, 80117b2 <rcl_wait_set_add_client+0x4e>
 801176e:	b319      	cbz	r1, 80117b8 <rcl_wait_set_add_client+0x54>
 8011770:	699d      	ldr	r5, [r3, #24]
 8011772:	69c0      	ldr	r0, [r0, #28]
 8011774:	4285      	cmp	r5, r0
 8011776:	d217      	bcs.n	80117a8 <rcl_wait_set_add_client+0x44>
 8011778:	69a0      	ldr	r0, [r4, #24]
 801177a:	1c6e      	adds	r6, r5, #1
 801177c:	619e      	str	r6, [r3, #24]
 801177e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011782:	b102      	cbz	r2, 8011786 <rcl_wait_set_add_client+0x22>
 8011784:	6015      	str	r5, [r2, #0]
 8011786:	4608      	mov	r0, r1
 8011788:	f7fe f9b2 	bl	800faf0 <rcl_client_get_rmw_handle>
 801178c:	b150      	cbz	r0, 80117a4 <rcl_wait_set_add_client+0x40>
 801178e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011790:	6842      	ldr	r2, [r0, #4]
 8011792:	6a1b      	ldr	r3, [r3, #32]
 8011794:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011798:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801179a:	69d3      	ldr	r3, [r2, #28]
 801179c:	3301      	adds	r3, #1
 801179e:	2000      	movs	r0, #0
 80117a0:	61d3      	str	r3, [r2, #28]
 80117a2:	bd70      	pop	{r4, r5, r6, pc}
 80117a4:	2001      	movs	r0, #1
 80117a6:	bd70      	pop	{r4, r5, r6, pc}
 80117a8:	f240 3086 	movw	r0, #902	; 0x386
 80117ac:	bd70      	pop	{r4, r5, r6, pc}
 80117ae:	200b      	movs	r0, #11
 80117b0:	4770      	bx	lr
 80117b2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80117b6:	bd70      	pop	{r4, r5, r6, pc}
 80117b8:	200b      	movs	r0, #11
 80117ba:	bd70      	pop	{r4, r5, r6, pc}

080117bc <rcl_wait_set_add_service>:
 80117bc:	b318      	cbz	r0, 8011806 <rcl_wait_set_add_service+0x4a>
 80117be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80117c0:	b570      	push	{r4, r5, r6, lr}
 80117c2:	4604      	mov	r4, r0
 80117c4:	b30b      	cbz	r3, 801180a <rcl_wait_set_add_service+0x4e>
 80117c6:	b319      	cbz	r1, 8011810 <rcl_wait_set_add_service+0x54>
 80117c8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80117ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80117cc:	4285      	cmp	r5, r0
 80117ce:	d217      	bcs.n	8011800 <rcl_wait_set_add_service+0x44>
 80117d0:	6a20      	ldr	r0, [r4, #32]
 80117d2:	1c6e      	adds	r6, r5, #1
 80117d4:	625e      	str	r6, [r3, #36]	; 0x24
 80117d6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80117da:	b102      	cbz	r2, 80117de <rcl_wait_set_add_service+0x22>
 80117dc:	6015      	str	r5, [r2, #0]
 80117de:	4608      	mov	r0, r1
 80117e0:	f7ff f804 	bl	80107ec <rcl_service_get_rmw_handle>
 80117e4:	b150      	cbz	r0, 80117fc <rcl_wait_set_add_service+0x40>
 80117e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80117e8:	6842      	ldr	r2, [r0, #4]
 80117ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117ec:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80117f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80117f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80117f4:	3301      	adds	r3, #1
 80117f6:	2000      	movs	r0, #0
 80117f8:	6293      	str	r3, [r2, #40]	; 0x28
 80117fa:	bd70      	pop	{r4, r5, r6, pc}
 80117fc:	2001      	movs	r0, #1
 80117fe:	bd70      	pop	{r4, r5, r6, pc}
 8011800:	f240 3086 	movw	r0, #902	; 0x386
 8011804:	bd70      	pop	{r4, r5, r6, pc}
 8011806:	200b      	movs	r0, #11
 8011808:	4770      	bx	lr
 801180a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801180e:	bd70      	pop	{r4, r5, r6, pc}
 8011810:	200b      	movs	r0, #11
 8011812:	bd70      	pop	{r4, r5, r6, pc}
 8011814:	0000      	movs	r0, r0
	...

08011818 <rcl_wait>:
 8011818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801181c:	ed2d 8b02 	vpush	{d8}
 8011820:	b08d      	sub	sp, #52	; 0x34
 8011822:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011826:	2800      	cmp	r0, #0
 8011828:	f000 8143 	beq.w	8011ab2 <rcl_wait+0x29a>
 801182c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801182e:	4605      	mov	r5, r0
 8011830:	2e00      	cmp	r6, #0
 8011832:	f000 8112 	beq.w	8011a5a <rcl_wait+0x242>
 8011836:	6843      	ldr	r3, [r0, #4]
 8011838:	b983      	cbnz	r3, 801185c <rcl_wait+0x44>
 801183a:	68eb      	ldr	r3, [r5, #12]
 801183c:	b973      	cbnz	r3, 801185c <rcl_wait+0x44>
 801183e:	696b      	ldr	r3, [r5, #20]
 8011840:	b963      	cbnz	r3, 801185c <rcl_wait+0x44>
 8011842:	69eb      	ldr	r3, [r5, #28]
 8011844:	b953      	cbnz	r3, 801185c <rcl_wait+0x44>
 8011846:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011848:	b943      	cbnz	r3, 801185c <rcl_wait+0x44>
 801184a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801184c:	b933      	cbnz	r3, 801185c <rcl_wait+0x44>
 801184e:	f240 3085 	movw	r0, #901	; 0x385
 8011852:	b00d      	add	sp, #52	; 0x34
 8011854:	ecbd 8b02 	vpop	{d8}
 8011858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801185c:	9b04      	ldr	r3, [sp, #16]
 801185e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8011860:	2b01      	cmp	r3, #1
 8011862:	9b05      	ldr	r3, [sp, #20]
 8011864:	f173 0300 	sbcs.w	r3, r3, #0
 8011868:	f2c0 80f0 	blt.w	8011a4c <rcl_wait+0x234>
 801186c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8011870:	4643      	mov	r3, r8
 8011872:	2a00      	cmp	r2, #0
 8011874:	f000 8133 	beq.w	8011ade <rcl_wait+0x2c6>
 8011878:	2400      	movs	r4, #0
 801187a:	4613      	mov	r3, r2
 801187c:	ed9f 8b9c 	vldr	d8, [pc, #624]	; 8011af0 <rcl_wait+0x2d8>
 8011880:	46a2      	mov	sl, r4
 8011882:	46a3      	mov	fp, r4
 8011884:	f240 3921 	movw	r9, #801	; 0x321
 8011888:	4632      	mov	r2, r6
 801188a:	e014      	b.n	80118b6 <rcl_wait+0x9e>
 801188c:	2800      	cmp	r0, #0
 801188e:	d1e0      	bne.n	8011852 <rcl_wait+0x3a>
 8011890:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011894:	4542      	cmp	r2, r8
 8011896:	eb73 0107 	sbcs.w	r1, r3, r7
 801189a:	da03      	bge.n	80118a4 <rcl_wait+0x8c>
 801189c:	4690      	mov	r8, r2
 801189e:	461f      	mov	r7, r3
 80118a0:	f04f 0b01 	mov.w	fp, #1
 80118a4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80118a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80118a8:	3401      	adds	r4, #1
 80118aa:	f14a 0a00 	adc.w	sl, sl, #0
 80118ae:	429c      	cmp	r4, r3
 80118b0:	f17a 0100 	sbcs.w	r1, sl, #0
 80118b4:	d228      	bcs.n	8011908 <rcl_wait+0xf0>
 80118b6:	6928      	ldr	r0, [r5, #16]
 80118b8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80118bc:	a908      	add	r1, sp, #32
 80118be:	00a6      	lsls	r6, r4, #2
 80118c0:	2800      	cmp	r0, #0
 80118c2:	d0f1      	beq.n	80118a8 <rcl_wait+0x90>
 80118c4:	68eb      	ldr	r3, [r5, #12]
 80118c6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80118ca:	4423      	add	r3, r4
 80118cc:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 80118d0:	f1be 0f00 	cmp.w	lr, #0
 80118d4:	d006      	beq.n	80118e4 <rcl_wait+0xcc>
 80118d6:	6913      	ldr	r3, [r2, #16]
 80118d8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80118dc:	3301      	adds	r3, #1
 80118de:	6113      	str	r3, [r2, #16]
 80118e0:	692b      	ldr	r3, [r5, #16]
 80118e2:	5998      	ldr	r0, [r3, r6]
 80118e4:	ed8d 8b08 	vstr	d8, [sp, #32]
 80118e8:	f7ff fa94 	bl	8010e14 <rcl_timer_get_time_until_next_call>
 80118ec:	4548      	cmp	r0, r9
 80118ee:	d1cd      	bne.n	801188c <rcl_wait+0x74>
 80118f0:	692b      	ldr	r3, [r5, #16]
 80118f2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80118f4:	2100      	movs	r1, #0
 80118f6:	5199      	str	r1, [r3, r6]
 80118f8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80118fa:	3401      	adds	r4, #1
 80118fc:	f14a 0a00 	adc.w	sl, sl, #0
 8011900:	429c      	cmp	r4, r3
 8011902:	f17a 0100 	sbcs.w	r1, sl, #0
 8011906:	d3d6      	bcc.n	80118b6 <rcl_wait+0x9e>
 8011908:	4616      	mov	r6, r2
 801190a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801190e:	4313      	orrs	r3, r2
 8011910:	46d9      	mov	r9, fp
 8011912:	f040 80a9 	bne.w	8011a68 <rcl_wait+0x250>
 8011916:	2300      	movs	r3, #0
 8011918:	2200      	movs	r2, #0
 801191a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801191e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011922:	ab08      	add	r3, sp, #32
 8011924:	9302      	str	r3, [sp, #8]
 8011926:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8011928:	f106 0334 	add.w	r3, r6, #52	; 0x34
 801192c:	e9cd 3200 	strd	r3, r2, [sp]
 8011930:	f106 0110 	add.w	r1, r6, #16
 8011934:	f106 031c 	add.w	r3, r6, #28
 8011938:	f106 0228 	add.w	r2, r6, #40	; 0x28
 801193c:	1d30      	adds	r0, r6, #4
 801193e:	f002 fb67 	bl	8014010 <rmw_wait>
 8011942:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011944:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011946:	4680      	mov	r8, r0
 8011948:	b1ca      	cbz	r2, 801197e <rcl_wait+0x166>
 801194a:	2400      	movs	r4, #0
 801194c:	4627      	mov	r7, r4
 801194e:	692a      	ldr	r2, [r5, #16]
 8011950:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8011954:	f10d 011f 	add.w	r1, sp, #31
 8011958:	00a6      	lsls	r6, r4, #2
 801195a:	b160      	cbz	r0, 8011976 <rcl_wait+0x15e>
 801195c:	f88d 701f 	strb.w	r7, [sp, #31]
 8011960:	f7ff fa1e 	bl	8010da0 <rcl_timer_is_ready>
 8011964:	2800      	cmp	r0, #0
 8011966:	f47f af74 	bne.w	8011852 <rcl_wait+0x3a>
 801196a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801196e:	b90b      	cbnz	r3, 8011974 <rcl_wait+0x15c>
 8011970:	692a      	ldr	r2, [r5, #16]
 8011972:	5193      	str	r3, [r2, r6]
 8011974:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011978:	3401      	adds	r4, #1
 801197a:	42a2      	cmp	r2, r4
 801197c:	d8e7      	bhi.n	801194e <rcl_wait+0x136>
 801197e:	f038 0002 	bics.w	r0, r8, #2
 8011982:	f040 8090 	bne.w	8011aa6 <rcl_wait+0x28e>
 8011986:	686e      	ldr	r6, [r5, #4]
 8011988:	4602      	mov	r2, r0
 801198a:	b91e      	cbnz	r6, 8011994 <rcl_wait+0x17c>
 801198c:	e00d      	b.n	80119aa <rcl_wait+0x192>
 801198e:	3201      	adds	r2, #1
 8011990:	42b2      	cmp	r2, r6
 8011992:	d00a      	beq.n	80119aa <rcl_wait+0x192>
 8011994:	6899      	ldr	r1, [r3, #8]
 8011996:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801199a:	2900      	cmp	r1, #0
 801199c:	d1f7      	bne.n	801198e <rcl_wait+0x176>
 801199e:	682c      	ldr	r4, [r5, #0]
 80119a0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80119a4:	3201      	adds	r2, #1
 80119a6:	42b2      	cmp	r2, r6
 80119a8:	d1f4      	bne.n	8011994 <rcl_wait+0x17c>
 80119aa:	68ee      	ldr	r6, [r5, #12]
 80119ac:	2200      	movs	r2, #0
 80119ae:	b91e      	cbnz	r6, 80119b8 <rcl_wait+0x1a0>
 80119b0:	e00d      	b.n	80119ce <rcl_wait+0x1b6>
 80119b2:	3201      	adds	r2, #1
 80119b4:	42b2      	cmp	r2, r6
 80119b6:	d00a      	beq.n	80119ce <rcl_wait+0x1b6>
 80119b8:	6959      	ldr	r1, [r3, #20]
 80119ba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80119be:	2900      	cmp	r1, #0
 80119c0:	d1f7      	bne.n	80119b2 <rcl_wait+0x19a>
 80119c2:	68ac      	ldr	r4, [r5, #8]
 80119c4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80119c8:	3201      	adds	r2, #1
 80119ca:	42b2      	cmp	r2, r6
 80119cc:	d1f4      	bne.n	80119b8 <rcl_wait+0x1a0>
 80119ce:	69ee      	ldr	r6, [r5, #28]
 80119d0:	2200      	movs	r2, #0
 80119d2:	b91e      	cbnz	r6, 80119dc <rcl_wait+0x1c4>
 80119d4:	e00d      	b.n	80119f2 <rcl_wait+0x1da>
 80119d6:	3201      	adds	r2, #1
 80119d8:	42b2      	cmp	r2, r6
 80119da:	d00a      	beq.n	80119f2 <rcl_wait+0x1da>
 80119dc:	6a19      	ldr	r1, [r3, #32]
 80119de:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80119e2:	2900      	cmp	r1, #0
 80119e4:	d1f7      	bne.n	80119d6 <rcl_wait+0x1be>
 80119e6:	69ac      	ldr	r4, [r5, #24]
 80119e8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80119ec:	3201      	adds	r2, #1
 80119ee:	42b2      	cmp	r2, r6
 80119f0:	d1f4      	bne.n	80119dc <rcl_wait+0x1c4>
 80119f2:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80119f4:	2200      	movs	r2, #0
 80119f6:	b91e      	cbnz	r6, 8011a00 <rcl_wait+0x1e8>
 80119f8:	e00d      	b.n	8011a16 <rcl_wait+0x1fe>
 80119fa:	3201      	adds	r2, #1
 80119fc:	4296      	cmp	r6, r2
 80119fe:	d00a      	beq.n	8011a16 <rcl_wait+0x1fe>
 8011a00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011a02:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011a06:	2900      	cmp	r1, #0
 8011a08:	d1f7      	bne.n	80119fa <rcl_wait+0x1e2>
 8011a0a:	6a2c      	ldr	r4, [r5, #32]
 8011a0c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011a10:	3201      	adds	r2, #1
 8011a12:	4296      	cmp	r6, r2
 8011a14:	d1f4      	bne.n	8011a00 <rcl_wait+0x1e8>
 8011a16:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 8011a18:	2200      	movs	r2, #0
 8011a1a:	b91e      	cbnz	r6, 8011a24 <rcl_wait+0x20c>
 8011a1c:	e00d      	b.n	8011a3a <rcl_wait+0x222>
 8011a1e:	3201      	adds	r2, #1
 8011a20:	42b2      	cmp	r2, r6
 8011a22:	d00a      	beq.n	8011a3a <rcl_wait+0x222>
 8011a24:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8011a26:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011a2a:	2900      	cmp	r1, #0
 8011a2c:	d1f7      	bne.n	8011a1e <rcl_wait+0x206>
 8011a2e:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8011a30:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011a34:	3201      	adds	r2, #1
 8011a36:	42b2      	cmp	r2, r6
 8011a38:	d1f4      	bne.n	8011a24 <rcl_wait+0x20c>
 8011a3a:	f1b8 0f02 	cmp.w	r8, #2
 8011a3e:	f47f af08 	bne.w	8011852 <rcl_wait+0x3a>
 8011a42:	464b      	mov	r3, r9
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	bf08      	it	eq
 8011a48:	2002      	moveq	r0, #2
 8011a4a:	e702      	b.n	8011852 <rcl_wait+0x3a>
 8011a4c:	2a00      	cmp	r2, #0
 8011a4e:	d03a      	beq.n	8011ac6 <rcl_wait+0x2ae>
 8011a50:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011a54:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8011a58:	e70e      	b.n	8011878 <rcl_wait+0x60>
 8011a5a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011a5e:	b00d      	add	sp, #52	; 0x34
 8011a60:	ecbd 8b02 	vpop	{d8}
 8011a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a68:	9b04      	ldr	r3, [sp, #16]
 8011a6a:	2b01      	cmp	r3, #1
 8011a6c:	9b05      	ldr	r3, [sp, #20]
 8011a6e:	f173 0300 	sbcs.w	r3, r3, #0
 8011a72:	db24      	blt.n	8011abe <rcl_wait+0x2a6>
 8011a74:	2f00      	cmp	r7, #0
 8011a76:	bfbc      	itt	lt
 8011a78:	f04f 0800 	movlt.w	r8, #0
 8011a7c:	4647      	movlt	r7, r8
 8011a7e:	a31e      	add	r3, pc, #120	; (adr r3, 8011af8 <rcl_wait+0x2e0>)
 8011a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a84:	4640      	mov	r0, r8
 8011a86:	4639      	mov	r1, r7
 8011a88:	f7ef f966 	bl	8000d58 <__aeabi_ldivmod>
 8011a8c:	a31a      	add	r3, pc, #104	; (adr r3, 8011af8 <rcl_wait+0x2e0>)
 8011a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a92:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011a96:	4640      	mov	r0, r8
 8011a98:	4639      	mov	r1, r7
 8011a9a:	f7ef f95d 	bl	8000d58 <__aeabi_ldivmod>
 8011a9e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011aa2:	ab08      	add	r3, sp, #32
 8011aa4:	e73e      	b.n	8011924 <rcl_wait+0x10c>
 8011aa6:	2001      	movs	r0, #1
 8011aa8:	b00d      	add	sp, #52	; 0x34
 8011aaa:	ecbd 8b02 	vpop	{d8}
 8011aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ab2:	200b      	movs	r0, #11
 8011ab4:	b00d      	add	sp, #52	; 0x34
 8011ab6:	ecbd 8b02 	vpop	{d8}
 8011aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011abe:	465b      	mov	r3, fp
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d1d7      	bne.n	8011a74 <rcl_wait+0x25c>
 8011ac4:	e72e      	b.n	8011924 <rcl_wait+0x10c>
 8011ac6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8011aca:	430b      	orrs	r3, r1
 8011acc:	bf08      	it	eq
 8011ace:	4691      	moveq	r9, r2
 8011ad0:	f43f af21 	beq.w	8011916 <rcl_wait+0xfe>
 8011ad4:	9b04      	ldr	r3, [sp, #16]
 8011ad6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011ada:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8011ade:	2b01      	cmp	r3, #1
 8011ae0:	9b05      	ldr	r3, [sp, #20]
 8011ae2:	f173 0300 	sbcs.w	r3, r3, #0
 8011ae6:	f04f 0300 	mov.w	r3, #0
 8011aea:	4699      	mov	r9, r3
 8011aec:	dac2      	bge.n	8011a74 <rcl_wait+0x25c>
 8011aee:	e719      	b.n	8011924 <rcl_wait+0x10c>
 8011af0:	ffffffff 	.word	0xffffffff
 8011af4:	7fffffff 	.word	0x7fffffff
 8011af8:	3b9aca00 	.word	0x3b9aca00
 8011afc:	00000000 	.word	0x00000000

08011b00 <rcl_action_take_goal_response>:
 8011b00:	2800      	cmp	r0, #0
 8011b02:	d039      	beq.n	8011b78 <rcl_action_take_goal_response+0x78>
 8011b04:	b570      	push	{r4, r5, r6, lr}
 8011b06:	4604      	mov	r4, r0
 8011b08:	6800      	ldr	r0, [r0, #0]
 8011b0a:	b380      	cbz	r0, 8011b6e <rcl_action_take_goal_response+0x6e>
 8011b0c:	460d      	mov	r5, r1
 8011b0e:	4616      	mov	r6, r2
 8011b10:	f7fe f872 	bl	800fbf8 <rcl_client_is_valid>
 8011b14:	b330      	cbz	r0, 8011b64 <rcl_action_take_goal_response+0x64>
 8011b16:	6820      	ldr	r0, [r4, #0]
 8011b18:	3004      	adds	r0, #4
 8011b1a:	f7fe f86d 	bl	800fbf8 <rcl_client_is_valid>
 8011b1e:	b308      	cbz	r0, 8011b64 <rcl_action_take_goal_response+0x64>
 8011b20:	6820      	ldr	r0, [r4, #0]
 8011b22:	3008      	adds	r0, #8
 8011b24:	f7fe f868 	bl	800fbf8 <rcl_client_is_valid>
 8011b28:	b1e0      	cbz	r0, 8011b64 <rcl_action_take_goal_response+0x64>
 8011b2a:	6820      	ldr	r0, [r4, #0]
 8011b2c:	300c      	adds	r0, #12
 8011b2e:	f7fe ffff 	bl	8010b30 <rcl_subscription_is_valid>
 8011b32:	b1b8      	cbz	r0, 8011b64 <rcl_action_take_goal_response+0x64>
 8011b34:	6820      	ldr	r0, [r4, #0]
 8011b36:	3010      	adds	r0, #16
 8011b38:	f7fe fffa 	bl	8010b30 <rcl_subscription_is_valid>
 8011b3c:	b190      	cbz	r0, 8011b64 <rcl_action_take_goal_response+0x64>
 8011b3e:	b1cd      	cbz	r5, 8011b74 <rcl_action_take_goal_response+0x74>
 8011b40:	b1c6      	cbz	r6, 8011b74 <rcl_action_take_goal_response+0x74>
 8011b42:	6820      	ldr	r0, [r4, #0]
 8011b44:	4632      	mov	r2, r6
 8011b46:	4629      	mov	r1, r5
 8011b48:	f7fe f80e 	bl	800fb68 <rcl_take_response>
 8011b4c:	b148      	cbz	r0, 8011b62 <rcl_action_take_goal_response+0x62>
 8011b4e:	280a      	cmp	r0, #10
 8011b50:	d007      	beq.n	8011b62 <rcl_action_take_goal_response+0x62>
 8011b52:	f240 12f5 	movw	r2, #501	; 0x1f5
 8011b56:	f640 0337 	movw	r3, #2103	; 0x837
 8011b5a:	4290      	cmp	r0, r2
 8011b5c:	bf0c      	ite	eq
 8011b5e:	4618      	moveq	r0, r3
 8011b60:	2001      	movne	r0, #1
 8011b62:	bd70      	pop	{r4, r5, r6, pc}
 8011b64:	f7f9 fb00 	bl	800b168 <rcutils_reset_error>
 8011b68:	f640 0036 	movw	r0, #2102	; 0x836
 8011b6c:	bd70      	pop	{r4, r5, r6, pc}
 8011b6e:	f640 0036 	movw	r0, #2102	; 0x836
 8011b72:	bd70      	pop	{r4, r5, r6, pc}
 8011b74:	200b      	movs	r0, #11
 8011b76:	bd70      	pop	{r4, r5, r6, pc}
 8011b78:	f640 0036 	movw	r0, #2102	; 0x836
 8011b7c:	4770      	bx	lr
 8011b7e:	bf00      	nop

08011b80 <rcl_action_send_result_request>:
 8011b80:	b390      	cbz	r0, 8011be8 <rcl_action_send_result_request+0x68>
 8011b82:	b570      	push	{r4, r5, r6, lr}
 8011b84:	4604      	mov	r4, r0
 8011b86:	6800      	ldr	r0, [r0, #0]
 8011b88:	b348      	cbz	r0, 8011bde <rcl_action_send_result_request+0x5e>
 8011b8a:	460d      	mov	r5, r1
 8011b8c:	4616      	mov	r6, r2
 8011b8e:	f7fe f833 	bl	800fbf8 <rcl_client_is_valid>
 8011b92:	b1f8      	cbz	r0, 8011bd4 <rcl_action_send_result_request+0x54>
 8011b94:	6820      	ldr	r0, [r4, #0]
 8011b96:	3004      	adds	r0, #4
 8011b98:	f7fe f82e 	bl	800fbf8 <rcl_client_is_valid>
 8011b9c:	b1d0      	cbz	r0, 8011bd4 <rcl_action_send_result_request+0x54>
 8011b9e:	6820      	ldr	r0, [r4, #0]
 8011ba0:	3008      	adds	r0, #8
 8011ba2:	f7fe f829 	bl	800fbf8 <rcl_client_is_valid>
 8011ba6:	b1a8      	cbz	r0, 8011bd4 <rcl_action_send_result_request+0x54>
 8011ba8:	6820      	ldr	r0, [r4, #0]
 8011baa:	300c      	adds	r0, #12
 8011bac:	f7fe ffc0 	bl	8010b30 <rcl_subscription_is_valid>
 8011bb0:	b180      	cbz	r0, 8011bd4 <rcl_action_send_result_request+0x54>
 8011bb2:	6820      	ldr	r0, [r4, #0]
 8011bb4:	3010      	adds	r0, #16
 8011bb6:	f7fe ffbb 	bl	8010b30 <rcl_subscription_is_valid>
 8011bba:	b158      	cbz	r0, 8011bd4 <rcl_action_send_result_request+0x54>
 8011bbc:	b195      	cbz	r5, 8011be4 <rcl_action_send_result_request+0x64>
 8011bbe:	b18e      	cbz	r6, 8011be4 <rcl_action_send_result_request+0x64>
 8011bc0:	6820      	ldr	r0, [r4, #0]
 8011bc2:	4632      	mov	r2, r6
 8011bc4:	4629      	mov	r1, r5
 8011bc6:	3008      	adds	r0, #8
 8011bc8:	f7fd ff98 	bl	800fafc <rcl_send_request>
 8011bcc:	3800      	subs	r0, #0
 8011bce:	bf18      	it	ne
 8011bd0:	2001      	movne	r0, #1
 8011bd2:	bd70      	pop	{r4, r5, r6, pc}
 8011bd4:	f7f9 fac8 	bl	800b168 <rcutils_reset_error>
 8011bd8:	f640 0036 	movw	r0, #2102	; 0x836
 8011bdc:	bd70      	pop	{r4, r5, r6, pc}
 8011bde:	f640 0036 	movw	r0, #2102	; 0x836
 8011be2:	bd70      	pop	{r4, r5, r6, pc}
 8011be4:	200b      	movs	r0, #11
 8011be6:	bd70      	pop	{r4, r5, r6, pc}
 8011be8:	f640 0036 	movw	r0, #2102	; 0x836
 8011bec:	4770      	bx	lr
 8011bee:	bf00      	nop

08011bf0 <rcl_action_take_result_response>:
 8011bf0:	2800      	cmp	r0, #0
 8011bf2:	d03a      	beq.n	8011c6a <rcl_action_take_result_response+0x7a>
 8011bf4:	b570      	push	{r4, r5, r6, lr}
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	6800      	ldr	r0, [r0, #0]
 8011bfa:	b388      	cbz	r0, 8011c60 <rcl_action_take_result_response+0x70>
 8011bfc:	460d      	mov	r5, r1
 8011bfe:	4616      	mov	r6, r2
 8011c00:	f7fd fffa 	bl	800fbf8 <rcl_client_is_valid>
 8011c04:	b338      	cbz	r0, 8011c56 <rcl_action_take_result_response+0x66>
 8011c06:	6820      	ldr	r0, [r4, #0]
 8011c08:	3004      	adds	r0, #4
 8011c0a:	f7fd fff5 	bl	800fbf8 <rcl_client_is_valid>
 8011c0e:	b310      	cbz	r0, 8011c56 <rcl_action_take_result_response+0x66>
 8011c10:	6820      	ldr	r0, [r4, #0]
 8011c12:	3008      	adds	r0, #8
 8011c14:	f7fd fff0 	bl	800fbf8 <rcl_client_is_valid>
 8011c18:	b1e8      	cbz	r0, 8011c56 <rcl_action_take_result_response+0x66>
 8011c1a:	6820      	ldr	r0, [r4, #0]
 8011c1c:	300c      	adds	r0, #12
 8011c1e:	f7fe ff87 	bl	8010b30 <rcl_subscription_is_valid>
 8011c22:	b1c0      	cbz	r0, 8011c56 <rcl_action_take_result_response+0x66>
 8011c24:	6820      	ldr	r0, [r4, #0]
 8011c26:	3010      	adds	r0, #16
 8011c28:	f7fe ff82 	bl	8010b30 <rcl_subscription_is_valid>
 8011c2c:	b198      	cbz	r0, 8011c56 <rcl_action_take_result_response+0x66>
 8011c2e:	b1d5      	cbz	r5, 8011c66 <rcl_action_take_result_response+0x76>
 8011c30:	b1ce      	cbz	r6, 8011c66 <rcl_action_take_result_response+0x76>
 8011c32:	6820      	ldr	r0, [r4, #0]
 8011c34:	4632      	mov	r2, r6
 8011c36:	4629      	mov	r1, r5
 8011c38:	3008      	adds	r0, #8
 8011c3a:	f7fd ff95 	bl	800fb68 <rcl_take_response>
 8011c3e:	b148      	cbz	r0, 8011c54 <rcl_action_take_result_response+0x64>
 8011c40:	280a      	cmp	r0, #10
 8011c42:	d007      	beq.n	8011c54 <rcl_action_take_result_response+0x64>
 8011c44:	f240 12f5 	movw	r2, #501	; 0x1f5
 8011c48:	f640 0337 	movw	r3, #2103	; 0x837
 8011c4c:	4290      	cmp	r0, r2
 8011c4e:	bf0c      	ite	eq
 8011c50:	4618      	moveq	r0, r3
 8011c52:	2001      	movne	r0, #1
 8011c54:	bd70      	pop	{r4, r5, r6, pc}
 8011c56:	f7f9 fa87 	bl	800b168 <rcutils_reset_error>
 8011c5a:	f640 0036 	movw	r0, #2102	; 0x836
 8011c5e:	bd70      	pop	{r4, r5, r6, pc}
 8011c60:	f640 0036 	movw	r0, #2102	; 0x836
 8011c64:	bd70      	pop	{r4, r5, r6, pc}
 8011c66:	200b      	movs	r0, #11
 8011c68:	bd70      	pop	{r4, r5, r6, pc}
 8011c6a:	f640 0036 	movw	r0, #2102	; 0x836
 8011c6e:	4770      	bx	lr

08011c70 <rcl_action_take_cancel_response>:
 8011c70:	2800      	cmp	r0, #0
 8011c72:	d03a      	beq.n	8011cea <rcl_action_take_cancel_response+0x7a>
 8011c74:	b570      	push	{r4, r5, r6, lr}
 8011c76:	4604      	mov	r4, r0
 8011c78:	6800      	ldr	r0, [r0, #0]
 8011c7a:	b388      	cbz	r0, 8011ce0 <rcl_action_take_cancel_response+0x70>
 8011c7c:	460d      	mov	r5, r1
 8011c7e:	4616      	mov	r6, r2
 8011c80:	f7fd ffba 	bl	800fbf8 <rcl_client_is_valid>
 8011c84:	b338      	cbz	r0, 8011cd6 <rcl_action_take_cancel_response+0x66>
 8011c86:	6820      	ldr	r0, [r4, #0]
 8011c88:	3004      	adds	r0, #4
 8011c8a:	f7fd ffb5 	bl	800fbf8 <rcl_client_is_valid>
 8011c8e:	b310      	cbz	r0, 8011cd6 <rcl_action_take_cancel_response+0x66>
 8011c90:	6820      	ldr	r0, [r4, #0]
 8011c92:	3008      	adds	r0, #8
 8011c94:	f7fd ffb0 	bl	800fbf8 <rcl_client_is_valid>
 8011c98:	b1e8      	cbz	r0, 8011cd6 <rcl_action_take_cancel_response+0x66>
 8011c9a:	6820      	ldr	r0, [r4, #0]
 8011c9c:	300c      	adds	r0, #12
 8011c9e:	f7fe ff47 	bl	8010b30 <rcl_subscription_is_valid>
 8011ca2:	b1c0      	cbz	r0, 8011cd6 <rcl_action_take_cancel_response+0x66>
 8011ca4:	6820      	ldr	r0, [r4, #0]
 8011ca6:	3010      	adds	r0, #16
 8011ca8:	f7fe ff42 	bl	8010b30 <rcl_subscription_is_valid>
 8011cac:	b198      	cbz	r0, 8011cd6 <rcl_action_take_cancel_response+0x66>
 8011cae:	b1d5      	cbz	r5, 8011ce6 <rcl_action_take_cancel_response+0x76>
 8011cb0:	b1ce      	cbz	r6, 8011ce6 <rcl_action_take_cancel_response+0x76>
 8011cb2:	6820      	ldr	r0, [r4, #0]
 8011cb4:	4632      	mov	r2, r6
 8011cb6:	4629      	mov	r1, r5
 8011cb8:	3004      	adds	r0, #4
 8011cba:	f7fd ff55 	bl	800fb68 <rcl_take_response>
 8011cbe:	b148      	cbz	r0, 8011cd4 <rcl_action_take_cancel_response+0x64>
 8011cc0:	280a      	cmp	r0, #10
 8011cc2:	d007      	beq.n	8011cd4 <rcl_action_take_cancel_response+0x64>
 8011cc4:	f240 12f5 	movw	r2, #501	; 0x1f5
 8011cc8:	f640 0337 	movw	r3, #2103	; 0x837
 8011ccc:	4290      	cmp	r0, r2
 8011cce:	bf0c      	ite	eq
 8011cd0:	4618      	moveq	r0, r3
 8011cd2:	2001      	movne	r0, #1
 8011cd4:	bd70      	pop	{r4, r5, r6, pc}
 8011cd6:	f7f9 fa47 	bl	800b168 <rcutils_reset_error>
 8011cda:	f640 0036 	movw	r0, #2102	; 0x836
 8011cde:	bd70      	pop	{r4, r5, r6, pc}
 8011ce0:	f640 0036 	movw	r0, #2102	; 0x836
 8011ce4:	bd70      	pop	{r4, r5, r6, pc}
 8011ce6:	200b      	movs	r0, #11
 8011ce8:	bd70      	pop	{r4, r5, r6, pc}
 8011cea:	f640 0036 	movw	r0, #2102	; 0x836
 8011cee:	4770      	bx	lr

08011cf0 <rcl_action_take_feedback>:
 8011cf0:	2800      	cmp	r0, #0
 8011cf2:	d038      	beq.n	8011d66 <rcl_action_take_feedback+0x76>
 8011cf4:	b530      	push	{r4, r5, lr}
 8011cf6:	4604      	mov	r4, r0
 8011cf8:	6800      	ldr	r0, [r0, #0]
 8011cfa:	b091      	sub	sp, #68	; 0x44
 8011cfc:	b378      	cbz	r0, 8011d5e <rcl_action_take_feedback+0x6e>
 8011cfe:	460d      	mov	r5, r1
 8011d00:	f7fd ff7a 	bl	800fbf8 <rcl_client_is_valid>
 8011d04:	b328      	cbz	r0, 8011d52 <rcl_action_take_feedback+0x62>
 8011d06:	6820      	ldr	r0, [r4, #0]
 8011d08:	3004      	adds	r0, #4
 8011d0a:	f7fd ff75 	bl	800fbf8 <rcl_client_is_valid>
 8011d0e:	b300      	cbz	r0, 8011d52 <rcl_action_take_feedback+0x62>
 8011d10:	6820      	ldr	r0, [r4, #0]
 8011d12:	3008      	adds	r0, #8
 8011d14:	f7fd ff70 	bl	800fbf8 <rcl_client_is_valid>
 8011d18:	b1d8      	cbz	r0, 8011d52 <rcl_action_take_feedback+0x62>
 8011d1a:	6820      	ldr	r0, [r4, #0]
 8011d1c:	300c      	adds	r0, #12
 8011d1e:	f7fe ff07 	bl	8010b30 <rcl_subscription_is_valid>
 8011d22:	b1b0      	cbz	r0, 8011d52 <rcl_action_take_feedback+0x62>
 8011d24:	6820      	ldr	r0, [r4, #0]
 8011d26:	3010      	adds	r0, #16
 8011d28:	f7fe ff02 	bl	8010b30 <rcl_subscription_is_valid>
 8011d2c:	b188      	cbz	r0, 8011d52 <rcl_action_take_feedback+0x62>
 8011d2e:	b1ed      	cbz	r5, 8011d6c <rcl_action_take_feedback+0x7c>
 8011d30:	6820      	ldr	r0, [r4, #0]
 8011d32:	2300      	movs	r3, #0
 8011d34:	466a      	mov	r2, sp
 8011d36:	4629      	mov	r1, r5
 8011d38:	300c      	adds	r0, #12
 8011d3a:	f7fe fe9b 	bl	8010a74 <rcl_take>
 8011d3e:	b160      	cbz	r0, 8011d5a <rcl_action_take_feedback+0x6a>
 8011d40:	f240 1391 	movw	r3, #401	; 0x191
 8011d44:	4298      	cmp	r0, r3
 8011d46:	d014      	beq.n	8011d72 <rcl_action_take_feedback+0x82>
 8011d48:	280a      	cmp	r0, #10
 8011d4a:	bf18      	it	ne
 8011d4c:	2001      	movne	r0, #1
 8011d4e:	b011      	add	sp, #68	; 0x44
 8011d50:	bd30      	pop	{r4, r5, pc}
 8011d52:	f7f9 fa09 	bl	800b168 <rcutils_reset_error>
 8011d56:	f640 0036 	movw	r0, #2102	; 0x836
 8011d5a:	b011      	add	sp, #68	; 0x44
 8011d5c:	bd30      	pop	{r4, r5, pc}
 8011d5e:	f640 0036 	movw	r0, #2102	; 0x836
 8011d62:	b011      	add	sp, #68	; 0x44
 8011d64:	bd30      	pop	{r4, r5, pc}
 8011d66:	f640 0036 	movw	r0, #2102	; 0x836
 8011d6a:	4770      	bx	lr
 8011d6c:	200b      	movs	r0, #11
 8011d6e:	b011      	add	sp, #68	; 0x44
 8011d70:	bd30      	pop	{r4, r5, pc}
 8011d72:	f640 0037 	movw	r0, #2103	; 0x837
 8011d76:	e7f0      	b.n	8011d5a <rcl_action_take_feedback+0x6a>

08011d78 <rcl_action_wait_set_add_action_client>:
 8011d78:	2800      	cmp	r0, #0
 8011d7a:	d048      	beq.n	8011e0e <rcl_action_wait_set_add_action_client+0x96>
 8011d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d7e:	460c      	mov	r4, r1
 8011d80:	2900      	cmp	r1, #0
 8011d82:	d03c      	beq.n	8011dfe <rcl_action_wait_set_add_action_client+0x86>
 8011d84:	4605      	mov	r5, r0
 8011d86:	6808      	ldr	r0, [r1, #0]
 8011d88:	2800      	cmp	r0, #0
 8011d8a:	d038      	beq.n	8011dfe <rcl_action_wait_set_add_action_client+0x86>
 8011d8c:	4617      	mov	r7, r2
 8011d8e:	461e      	mov	r6, r3
 8011d90:	f7fd ff32 	bl	800fbf8 <rcl_client_is_valid>
 8011d94:	b3b0      	cbz	r0, 8011e04 <rcl_action_wait_set_add_action_client+0x8c>
 8011d96:	6820      	ldr	r0, [r4, #0]
 8011d98:	3004      	adds	r0, #4
 8011d9a:	f7fd ff2d 	bl	800fbf8 <rcl_client_is_valid>
 8011d9e:	b388      	cbz	r0, 8011e04 <rcl_action_wait_set_add_action_client+0x8c>
 8011da0:	6820      	ldr	r0, [r4, #0]
 8011da2:	3008      	adds	r0, #8
 8011da4:	f7fd ff28 	bl	800fbf8 <rcl_client_is_valid>
 8011da8:	b360      	cbz	r0, 8011e04 <rcl_action_wait_set_add_action_client+0x8c>
 8011daa:	6820      	ldr	r0, [r4, #0]
 8011dac:	300c      	adds	r0, #12
 8011dae:	f7fe febf 	bl	8010b30 <rcl_subscription_is_valid>
 8011db2:	b338      	cbz	r0, 8011e04 <rcl_action_wait_set_add_action_client+0x8c>
 8011db4:	6820      	ldr	r0, [r4, #0]
 8011db6:	3010      	adds	r0, #16
 8011db8:	f7fe feba 	bl	8010b30 <rcl_subscription_is_valid>
 8011dbc:	b310      	cbz	r0, 8011e04 <rcl_action_wait_set_add_action_client+0x8c>
 8011dbe:	6821      	ldr	r1, [r4, #0]
 8011dc0:	4628      	mov	r0, r5
 8011dc2:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 8011dc6:	f7ff fccd 	bl	8011764 <rcl_wait_set_add_client>
 8011dca:	b9b8      	cbnz	r0, 8011dfc <rcl_action_wait_set_add_action_client+0x84>
 8011dcc:	6821      	ldr	r1, [r4, #0]
 8011dce:	4628      	mov	r0, r5
 8011dd0:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 8011dd4:	3104      	adds	r1, #4
 8011dd6:	f7ff fcc5 	bl	8011764 <rcl_wait_set_add_client>
 8011dda:	b978      	cbnz	r0, 8011dfc <rcl_action_wait_set_add_action_client+0x84>
 8011ddc:	6821      	ldr	r1, [r4, #0]
 8011dde:	4628      	mov	r0, r5
 8011de0:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 8011de4:	3108      	adds	r1, #8
 8011de6:	f7ff fcbd 	bl	8011764 <rcl_wait_set_add_client>
 8011dea:	b938      	cbnz	r0, 8011dfc <rcl_action_wait_set_add_action_client+0x84>
 8011dec:	6821      	ldr	r1, [r4, #0]
 8011dee:	4628      	mov	r0, r5
 8011df0:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 8011df4:	310c      	adds	r1, #12
 8011df6:	f7ff f96d 	bl	80110d4 <rcl_wait_set_add_subscription>
 8011dfa:	b158      	cbz	r0, 8011e14 <rcl_action_wait_set_add_action_client+0x9c>
 8011dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dfe:	f640 0036 	movw	r0, #2102	; 0x836
 8011e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e04:	f7f9 f9b0 	bl	800b168 <rcutils_reset_error>
 8011e08:	f640 0036 	movw	r0, #2102	; 0x836
 8011e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e0e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011e12:	4770      	bx	lr
 8011e14:	6821      	ldr	r1, [r4, #0]
 8011e16:	4628      	mov	r0, r5
 8011e18:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 8011e1c:	3110      	adds	r1, #16
 8011e1e:	f7ff f959 	bl	80110d4 <rcl_wait_set_add_subscription>
 8011e22:	2800      	cmp	r0, #0
 8011e24:	d1ea      	bne.n	8011dfc <rcl_action_wait_set_add_action_client+0x84>
 8011e26:	b11f      	cbz	r7, 8011e30 <rcl_action_wait_set_add_action_client+0xb8>
 8011e28:	6823      	ldr	r3, [r4, #0]
 8011e2a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8011e2e:	603b      	str	r3, [r7, #0]
 8011e30:	2e00      	cmp	r6, #0
 8011e32:	d0e3      	beq.n	8011dfc <rcl_action_wait_set_add_action_client+0x84>
 8011e34:	6823      	ldr	r3, [r4, #0]
 8011e36:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8011e3a:	6033      	str	r3, [r6, #0]
 8011e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e3e:	bf00      	nop

08011e40 <rcl_action_client_wait_set_get_entities_ready>:
 8011e40:	2800      	cmp	r0, #0
 8011e42:	f000 808d 	beq.w	8011f60 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8011e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e4a:	460c      	mov	r4, r1
 8011e4c:	2900      	cmp	r1, #0
 8011e4e:	d077      	beq.n	8011f40 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011e50:	4605      	mov	r5, r0
 8011e52:	6808      	ldr	r0, [r1, #0]
 8011e54:	2800      	cmp	r0, #0
 8011e56:	d073      	beq.n	8011f40 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011e58:	4616      	mov	r6, r2
 8011e5a:	461f      	mov	r7, r3
 8011e5c:	f7fd fecc 	bl	800fbf8 <rcl_client_is_valid>
 8011e60:	2800      	cmp	r0, #0
 8011e62:	d071      	beq.n	8011f48 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011e64:	6820      	ldr	r0, [r4, #0]
 8011e66:	3004      	adds	r0, #4
 8011e68:	f7fd fec6 	bl	800fbf8 <rcl_client_is_valid>
 8011e6c:	2800      	cmp	r0, #0
 8011e6e:	d06b      	beq.n	8011f48 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011e70:	6820      	ldr	r0, [r4, #0]
 8011e72:	3008      	adds	r0, #8
 8011e74:	f7fd fec0 	bl	800fbf8 <rcl_client_is_valid>
 8011e78:	2800      	cmp	r0, #0
 8011e7a:	d065      	beq.n	8011f48 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011e7c:	6820      	ldr	r0, [r4, #0]
 8011e7e:	300c      	adds	r0, #12
 8011e80:	f7fe fe56 	bl	8010b30 <rcl_subscription_is_valid>
 8011e84:	2800      	cmp	r0, #0
 8011e86:	d05f      	beq.n	8011f48 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011e88:	6820      	ldr	r0, [r4, #0]
 8011e8a:	3010      	adds	r0, #16
 8011e8c:	f7fe fe50 	bl	8010b30 <rcl_subscription_is_valid>
 8011e90:	2800      	cmp	r0, #0
 8011e92:	d059      	beq.n	8011f48 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011e94:	2e00      	cmp	r6, #0
 8011e96:	d060      	beq.n	8011f5a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011e98:	2f00      	cmp	r7, #0
 8011e9a:	d05e      	beq.n	8011f5a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011e9c:	9b06      	ldr	r3, [sp, #24]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d05b      	beq.n	8011f5a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011ea2:	9b07      	ldr	r3, [sp, #28]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d058      	beq.n	8011f5a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011ea8:	9b08      	ldr	r3, [sp, #32]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d055      	beq.n	8011f5a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011eae:	6823      	ldr	r3, [r4, #0]
 8011eb0:	686a      	ldr	r2, [r5, #4]
 8011eb2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 8011eb6:	428a      	cmp	r2, r1
 8011eb8:	d94c      	bls.n	8011f54 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011eba:	f8d3 01d4 	ldr.w	r0, [r3, #468]	; 0x1d4
 8011ebe:	4282      	cmp	r2, r0
 8011ec0:	d948      	bls.n	8011f54 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011ec2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
 8011ec6:	69ea      	ldr	r2, [r5, #28]
 8011ec8:	42a2      	cmp	r2, r4
 8011eca:	d943      	bls.n	8011f54 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011ecc:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	; 0x1c8
 8011ed0:	4562      	cmp	r2, ip
 8011ed2:	d93f      	bls.n	8011f54 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011ed4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	; 0x1cc
 8011ed8:	4572      	cmp	r2, lr
 8011eda:	d93b      	bls.n	8011f54 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011edc:	69aa      	ldr	r2, [r5, #24]
 8011ede:	682d      	ldr	r5, [r5, #0]
 8011ee0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8011ee4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8011ee8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8011eec:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8011ef0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8011ef4:	f103 0c0c 	add.w	ip, r3, #12
 8011ef8:	eba5 050c 	sub.w	r5, r5, ip
 8011efc:	fab5 f585 	clz	r5, r5
 8011f00:	096d      	lsrs	r5, r5, #5
 8011f02:	7035      	strb	r5, [r6, #0]
 8011f04:	f103 0510 	add.w	r5, r3, #16
 8011f08:	1b64      	subs	r4, r4, r5
 8011f0a:	fab4 f484 	clz	r4, r4
 8011f0e:	0964      	lsrs	r4, r4, #5
 8011f10:	703c      	strb	r4, [r7, #0]
 8011f12:	eba3 0008 	sub.w	r0, r3, r8
 8011f16:	1d1c      	adds	r4, r3, #4
 8011f18:	3308      	adds	r3, #8
 8011f1a:	1ad3      	subs	r3, r2, r3
 8011f1c:	fab0 f080 	clz	r0, r0
 8011f20:	9a06      	ldr	r2, [sp, #24]
 8011f22:	0940      	lsrs	r0, r0, #5
 8011f24:	1b09      	subs	r1, r1, r4
 8011f26:	7010      	strb	r0, [r2, #0]
 8011f28:	fab1 f181 	clz	r1, r1
 8011f2c:	9a07      	ldr	r2, [sp, #28]
 8011f2e:	0949      	lsrs	r1, r1, #5
 8011f30:	7011      	strb	r1, [r2, #0]
 8011f32:	fab3 f383 	clz	r3, r3
 8011f36:	9a08      	ldr	r2, [sp, #32]
 8011f38:	095b      	lsrs	r3, r3, #5
 8011f3a:	2000      	movs	r0, #0
 8011f3c:	7013      	strb	r3, [r2, #0]
 8011f3e:	e001      	b.n	8011f44 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8011f40:	f640 0036 	movw	r0, #2102	; 0x836
 8011f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f48:	f7f9 f90e 	bl	800b168 <rcutils_reset_error>
 8011f4c:	f640 0036 	movw	r0, #2102	; 0x836
 8011f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f54:	2001      	movs	r0, #1
 8011f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f5a:	200b      	movs	r0, #11
 8011f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f60:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011f64:	4770      	bx	lr
 8011f66:	bf00      	nop

08011f68 <rcl_action_take_goal_request>:
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	d039      	beq.n	8011fe0 <rcl_action_take_goal_request+0x78>
 8011f6c:	b570      	push	{r4, r5, r6, lr}
 8011f6e:	4604      	mov	r4, r0
 8011f70:	6800      	ldr	r0, [r0, #0]
 8011f72:	b380      	cbz	r0, 8011fd6 <rcl_action_take_goal_request+0x6e>
 8011f74:	460d      	mov	r5, r1
 8011f76:	4616      	mov	r6, r2
 8011f78:	f7fe fc96 	bl	80108a8 <rcl_service_is_valid>
 8011f7c:	b330      	cbz	r0, 8011fcc <rcl_action_take_goal_request+0x64>
 8011f7e:	6820      	ldr	r0, [r4, #0]
 8011f80:	3004      	adds	r0, #4
 8011f82:	f7fe fc91 	bl	80108a8 <rcl_service_is_valid>
 8011f86:	b308      	cbz	r0, 8011fcc <rcl_action_take_goal_request+0x64>
 8011f88:	6820      	ldr	r0, [r4, #0]
 8011f8a:	3008      	adds	r0, #8
 8011f8c:	f7fe fc8c 	bl	80108a8 <rcl_service_is_valid>
 8011f90:	b1e0      	cbz	r0, 8011fcc <rcl_action_take_goal_request+0x64>
 8011f92:	6820      	ldr	r0, [r4, #0]
 8011f94:	300c      	adds	r0, #12
 8011f96:	f7f8 f957 	bl	800a248 <rcl_publisher_is_valid>
 8011f9a:	b1b8      	cbz	r0, 8011fcc <rcl_action_take_goal_request+0x64>
 8011f9c:	6820      	ldr	r0, [r4, #0]
 8011f9e:	3010      	adds	r0, #16
 8011fa0:	f7f8 f952 	bl	800a248 <rcl_publisher_is_valid>
 8011fa4:	b190      	cbz	r0, 8011fcc <rcl_action_take_goal_request+0x64>
 8011fa6:	b1cd      	cbz	r5, 8011fdc <rcl_action_take_goal_request+0x74>
 8011fa8:	b1c6      	cbz	r6, 8011fdc <rcl_action_take_goal_request+0x74>
 8011faa:	6820      	ldr	r0, [r4, #0]
 8011fac:	4632      	mov	r2, r6
 8011fae:	4629      	mov	r1, r5
 8011fb0:	f7fe fc22 	bl	80107f8 <rcl_take_request>
 8011fb4:	b148      	cbz	r0, 8011fca <rcl_action_take_goal_request+0x62>
 8011fb6:	280a      	cmp	r0, #10
 8011fb8:	d007      	beq.n	8011fca <rcl_action_take_goal_request+0x62>
 8011fba:	f240 2259 	movw	r2, #601	; 0x259
 8011fbe:	f640 0399 	movw	r3, #2201	; 0x899
 8011fc2:	4290      	cmp	r0, r2
 8011fc4:	bf0c      	ite	eq
 8011fc6:	4618      	moveq	r0, r3
 8011fc8:	2001      	movne	r0, #1
 8011fca:	bd70      	pop	{r4, r5, r6, pc}
 8011fcc:	f7f9 f8cc 	bl	800b168 <rcutils_reset_error>
 8011fd0:	f640 0098 	movw	r0, #2200	; 0x898
 8011fd4:	bd70      	pop	{r4, r5, r6, pc}
 8011fd6:	f640 0098 	movw	r0, #2200	; 0x898
 8011fda:	bd70      	pop	{r4, r5, r6, pc}
 8011fdc:	200b      	movs	r0, #11
 8011fde:	bd70      	pop	{r4, r5, r6, pc}
 8011fe0:	f640 0098 	movw	r0, #2200	; 0x898
 8011fe4:	4770      	bx	lr
 8011fe6:	bf00      	nop

08011fe8 <rcl_action_send_goal_response>:
 8011fe8:	b388      	cbz	r0, 801204e <rcl_action_send_goal_response+0x66>
 8011fea:	b570      	push	{r4, r5, r6, lr}
 8011fec:	4604      	mov	r4, r0
 8011fee:	6800      	ldr	r0, [r0, #0]
 8011ff0:	b340      	cbz	r0, 8012044 <rcl_action_send_goal_response+0x5c>
 8011ff2:	460d      	mov	r5, r1
 8011ff4:	4616      	mov	r6, r2
 8011ff6:	f7fe fc57 	bl	80108a8 <rcl_service_is_valid>
 8011ffa:	b1f0      	cbz	r0, 801203a <rcl_action_send_goal_response+0x52>
 8011ffc:	6820      	ldr	r0, [r4, #0]
 8011ffe:	3004      	adds	r0, #4
 8012000:	f7fe fc52 	bl	80108a8 <rcl_service_is_valid>
 8012004:	b1c8      	cbz	r0, 801203a <rcl_action_send_goal_response+0x52>
 8012006:	6820      	ldr	r0, [r4, #0]
 8012008:	3008      	adds	r0, #8
 801200a:	f7fe fc4d 	bl	80108a8 <rcl_service_is_valid>
 801200e:	b1a0      	cbz	r0, 801203a <rcl_action_send_goal_response+0x52>
 8012010:	6820      	ldr	r0, [r4, #0]
 8012012:	300c      	adds	r0, #12
 8012014:	f7f8 f918 	bl	800a248 <rcl_publisher_is_valid>
 8012018:	b178      	cbz	r0, 801203a <rcl_action_send_goal_response+0x52>
 801201a:	6820      	ldr	r0, [r4, #0]
 801201c:	3010      	adds	r0, #16
 801201e:	f7f8 f913 	bl	800a248 <rcl_publisher_is_valid>
 8012022:	b150      	cbz	r0, 801203a <rcl_action_send_goal_response+0x52>
 8012024:	b18d      	cbz	r5, 801204a <rcl_action_send_goal_response+0x62>
 8012026:	b186      	cbz	r6, 801204a <rcl_action_send_goal_response+0x62>
 8012028:	6820      	ldr	r0, [r4, #0]
 801202a:	4632      	mov	r2, r6
 801202c:	4629      	mov	r1, r5
 801202e:	f7fe fc23 	bl	8010878 <rcl_send_response>
 8012032:	3800      	subs	r0, #0
 8012034:	bf18      	it	ne
 8012036:	2001      	movne	r0, #1
 8012038:	bd70      	pop	{r4, r5, r6, pc}
 801203a:	f7f9 f895 	bl	800b168 <rcutils_reset_error>
 801203e:	f640 0098 	movw	r0, #2200	; 0x898
 8012042:	bd70      	pop	{r4, r5, r6, pc}
 8012044:	f640 0098 	movw	r0, #2200	; 0x898
 8012048:	bd70      	pop	{r4, r5, r6, pc}
 801204a:	200b      	movs	r0, #11
 801204c:	bd70      	pop	{r4, r5, r6, pc}
 801204e:	f640 0098 	movw	r0, #2200	; 0x898
 8012052:	4770      	bx	lr

08012054 <rcl_action_take_result_request>:
 8012054:	2800      	cmp	r0, #0
 8012056:	d03a      	beq.n	80120ce <rcl_action_take_result_request+0x7a>
 8012058:	b570      	push	{r4, r5, r6, lr}
 801205a:	4604      	mov	r4, r0
 801205c:	6800      	ldr	r0, [r0, #0]
 801205e:	b388      	cbz	r0, 80120c4 <rcl_action_take_result_request+0x70>
 8012060:	460d      	mov	r5, r1
 8012062:	4616      	mov	r6, r2
 8012064:	f7fe fc20 	bl	80108a8 <rcl_service_is_valid>
 8012068:	b338      	cbz	r0, 80120ba <rcl_action_take_result_request+0x66>
 801206a:	6820      	ldr	r0, [r4, #0]
 801206c:	3004      	adds	r0, #4
 801206e:	f7fe fc1b 	bl	80108a8 <rcl_service_is_valid>
 8012072:	b310      	cbz	r0, 80120ba <rcl_action_take_result_request+0x66>
 8012074:	6820      	ldr	r0, [r4, #0]
 8012076:	3008      	adds	r0, #8
 8012078:	f7fe fc16 	bl	80108a8 <rcl_service_is_valid>
 801207c:	b1e8      	cbz	r0, 80120ba <rcl_action_take_result_request+0x66>
 801207e:	6820      	ldr	r0, [r4, #0]
 8012080:	300c      	adds	r0, #12
 8012082:	f7f8 f8e1 	bl	800a248 <rcl_publisher_is_valid>
 8012086:	b1c0      	cbz	r0, 80120ba <rcl_action_take_result_request+0x66>
 8012088:	6820      	ldr	r0, [r4, #0]
 801208a:	3010      	adds	r0, #16
 801208c:	f7f8 f8dc 	bl	800a248 <rcl_publisher_is_valid>
 8012090:	b198      	cbz	r0, 80120ba <rcl_action_take_result_request+0x66>
 8012092:	b1d5      	cbz	r5, 80120ca <rcl_action_take_result_request+0x76>
 8012094:	b1ce      	cbz	r6, 80120ca <rcl_action_take_result_request+0x76>
 8012096:	6820      	ldr	r0, [r4, #0]
 8012098:	4632      	mov	r2, r6
 801209a:	4629      	mov	r1, r5
 801209c:	3008      	adds	r0, #8
 801209e:	f7fe fbab 	bl	80107f8 <rcl_take_request>
 80120a2:	b148      	cbz	r0, 80120b8 <rcl_action_take_result_request+0x64>
 80120a4:	280a      	cmp	r0, #10
 80120a6:	d007      	beq.n	80120b8 <rcl_action_take_result_request+0x64>
 80120a8:	f240 2259 	movw	r2, #601	; 0x259
 80120ac:	f640 0399 	movw	r3, #2201	; 0x899
 80120b0:	4290      	cmp	r0, r2
 80120b2:	bf0c      	ite	eq
 80120b4:	4618      	moveq	r0, r3
 80120b6:	2001      	movne	r0, #1
 80120b8:	bd70      	pop	{r4, r5, r6, pc}
 80120ba:	f7f9 f855 	bl	800b168 <rcutils_reset_error>
 80120be:	f640 0098 	movw	r0, #2200	; 0x898
 80120c2:	bd70      	pop	{r4, r5, r6, pc}
 80120c4:	f640 0098 	movw	r0, #2200	; 0x898
 80120c8:	bd70      	pop	{r4, r5, r6, pc}
 80120ca:	200b      	movs	r0, #11
 80120cc:	bd70      	pop	{r4, r5, r6, pc}
 80120ce:	f640 0098 	movw	r0, #2200	; 0x898
 80120d2:	4770      	bx	lr

080120d4 <rcl_action_take_cancel_request>:
 80120d4:	2800      	cmp	r0, #0
 80120d6:	d03a      	beq.n	801214e <rcl_action_take_cancel_request+0x7a>
 80120d8:	b570      	push	{r4, r5, r6, lr}
 80120da:	4604      	mov	r4, r0
 80120dc:	6800      	ldr	r0, [r0, #0]
 80120de:	b388      	cbz	r0, 8012144 <rcl_action_take_cancel_request+0x70>
 80120e0:	460d      	mov	r5, r1
 80120e2:	4616      	mov	r6, r2
 80120e4:	f7fe fbe0 	bl	80108a8 <rcl_service_is_valid>
 80120e8:	b338      	cbz	r0, 801213a <rcl_action_take_cancel_request+0x66>
 80120ea:	6820      	ldr	r0, [r4, #0]
 80120ec:	3004      	adds	r0, #4
 80120ee:	f7fe fbdb 	bl	80108a8 <rcl_service_is_valid>
 80120f2:	b310      	cbz	r0, 801213a <rcl_action_take_cancel_request+0x66>
 80120f4:	6820      	ldr	r0, [r4, #0]
 80120f6:	3008      	adds	r0, #8
 80120f8:	f7fe fbd6 	bl	80108a8 <rcl_service_is_valid>
 80120fc:	b1e8      	cbz	r0, 801213a <rcl_action_take_cancel_request+0x66>
 80120fe:	6820      	ldr	r0, [r4, #0]
 8012100:	300c      	adds	r0, #12
 8012102:	f7f8 f8a1 	bl	800a248 <rcl_publisher_is_valid>
 8012106:	b1c0      	cbz	r0, 801213a <rcl_action_take_cancel_request+0x66>
 8012108:	6820      	ldr	r0, [r4, #0]
 801210a:	3010      	adds	r0, #16
 801210c:	f7f8 f89c 	bl	800a248 <rcl_publisher_is_valid>
 8012110:	b198      	cbz	r0, 801213a <rcl_action_take_cancel_request+0x66>
 8012112:	b1d5      	cbz	r5, 801214a <rcl_action_take_cancel_request+0x76>
 8012114:	b1ce      	cbz	r6, 801214a <rcl_action_take_cancel_request+0x76>
 8012116:	6820      	ldr	r0, [r4, #0]
 8012118:	4632      	mov	r2, r6
 801211a:	4629      	mov	r1, r5
 801211c:	3004      	adds	r0, #4
 801211e:	f7fe fb6b 	bl	80107f8 <rcl_take_request>
 8012122:	b148      	cbz	r0, 8012138 <rcl_action_take_cancel_request+0x64>
 8012124:	280a      	cmp	r0, #10
 8012126:	d007      	beq.n	8012138 <rcl_action_take_cancel_request+0x64>
 8012128:	f240 2259 	movw	r2, #601	; 0x259
 801212c:	f640 0399 	movw	r3, #2201	; 0x899
 8012130:	4290      	cmp	r0, r2
 8012132:	bf0c      	ite	eq
 8012134:	4618      	moveq	r0, r3
 8012136:	2001      	movne	r0, #1
 8012138:	bd70      	pop	{r4, r5, r6, pc}
 801213a:	f7f9 f815 	bl	800b168 <rcutils_reset_error>
 801213e:	f640 0098 	movw	r0, #2200	; 0x898
 8012142:	bd70      	pop	{r4, r5, r6, pc}
 8012144:	f640 0098 	movw	r0, #2200	; 0x898
 8012148:	bd70      	pop	{r4, r5, r6, pc}
 801214a:	200b      	movs	r0, #11
 801214c:	bd70      	pop	{r4, r5, r6, pc}
 801214e:	f640 0098 	movw	r0, #2200	; 0x898
 8012152:	4770      	bx	lr

08012154 <rcl_action_send_cancel_response>:
 8012154:	b390      	cbz	r0, 80121bc <rcl_action_send_cancel_response+0x68>
 8012156:	b570      	push	{r4, r5, r6, lr}
 8012158:	4604      	mov	r4, r0
 801215a:	6800      	ldr	r0, [r0, #0]
 801215c:	b348      	cbz	r0, 80121b2 <rcl_action_send_cancel_response+0x5e>
 801215e:	460d      	mov	r5, r1
 8012160:	4616      	mov	r6, r2
 8012162:	f7fe fba1 	bl	80108a8 <rcl_service_is_valid>
 8012166:	b1f8      	cbz	r0, 80121a8 <rcl_action_send_cancel_response+0x54>
 8012168:	6820      	ldr	r0, [r4, #0]
 801216a:	3004      	adds	r0, #4
 801216c:	f7fe fb9c 	bl	80108a8 <rcl_service_is_valid>
 8012170:	b1d0      	cbz	r0, 80121a8 <rcl_action_send_cancel_response+0x54>
 8012172:	6820      	ldr	r0, [r4, #0]
 8012174:	3008      	adds	r0, #8
 8012176:	f7fe fb97 	bl	80108a8 <rcl_service_is_valid>
 801217a:	b1a8      	cbz	r0, 80121a8 <rcl_action_send_cancel_response+0x54>
 801217c:	6820      	ldr	r0, [r4, #0]
 801217e:	300c      	adds	r0, #12
 8012180:	f7f8 f862 	bl	800a248 <rcl_publisher_is_valid>
 8012184:	b180      	cbz	r0, 80121a8 <rcl_action_send_cancel_response+0x54>
 8012186:	6820      	ldr	r0, [r4, #0]
 8012188:	3010      	adds	r0, #16
 801218a:	f7f8 f85d 	bl	800a248 <rcl_publisher_is_valid>
 801218e:	b158      	cbz	r0, 80121a8 <rcl_action_send_cancel_response+0x54>
 8012190:	b195      	cbz	r5, 80121b8 <rcl_action_send_cancel_response+0x64>
 8012192:	b18e      	cbz	r6, 80121b8 <rcl_action_send_cancel_response+0x64>
 8012194:	6820      	ldr	r0, [r4, #0]
 8012196:	4632      	mov	r2, r6
 8012198:	4629      	mov	r1, r5
 801219a:	3004      	adds	r0, #4
 801219c:	f7fe fb6c 	bl	8010878 <rcl_send_response>
 80121a0:	3800      	subs	r0, #0
 80121a2:	bf18      	it	ne
 80121a4:	2001      	movne	r0, #1
 80121a6:	bd70      	pop	{r4, r5, r6, pc}
 80121a8:	f7f8 ffde 	bl	800b168 <rcutils_reset_error>
 80121ac:	f640 0098 	movw	r0, #2200	; 0x898
 80121b0:	bd70      	pop	{r4, r5, r6, pc}
 80121b2:	f640 0098 	movw	r0, #2200	; 0x898
 80121b6:	bd70      	pop	{r4, r5, r6, pc}
 80121b8:	200b      	movs	r0, #11
 80121ba:	bd70      	pop	{r4, r5, r6, pc}
 80121bc:	f640 0098 	movw	r0, #2200	; 0x898
 80121c0:	4770      	bx	lr
 80121c2:	bf00      	nop

080121c4 <rcl_action_wait_set_add_action_server>:
 80121c4:	2800      	cmp	r0, #0
 80121c6:	d04d      	beq.n	8012264 <rcl_action_wait_set_add_action_server+0xa0>
 80121c8:	b570      	push	{r4, r5, r6, lr}
 80121ca:	460c      	mov	r4, r1
 80121cc:	b159      	cbz	r1, 80121e6 <rcl_action_wait_set_add_action_server+0x22>
 80121ce:	4605      	mov	r5, r0
 80121d0:	6808      	ldr	r0, [r1, #0]
 80121d2:	b140      	cbz	r0, 80121e6 <rcl_action_wait_set_add_action_server+0x22>
 80121d4:	4616      	mov	r6, r2
 80121d6:	f7fe fb67 	bl	80108a8 <rcl_service_is_valid>
 80121da:	b120      	cbz	r0, 80121e6 <rcl_action_wait_set_add_action_server+0x22>
 80121dc:	6820      	ldr	r0, [r4, #0]
 80121de:	3004      	adds	r0, #4
 80121e0:	f7fe fb62 	bl	80108a8 <rcl_service_is_valid>
 80121e4:	b910      	cbnz	r0, 80121ec <rcl_action_wait_set_add_action_server+0x28>
 80121e6:	f640 0098 	movw	r0, #2200	; 0x898
 80121ea:	bd70      	pop	{r4, r5, r6, pc}
 80121ec:	6820      	ldr	r0, [r4, #0]
 80121ee:	3008      	adds	r0, #8
 80121f0:	f7fe fb5a 	bl	80108a8 <rcl_service_is_valid>
 80121f4:	2800      	cmp	r0, #0
 80121f6:	d0f6      	beq.n	80121e6 <rcl_action_wait_set_add_action_server+0x22>
 80121f8:	6820      	ldr	r0, [r4, #0]
 80121fa:	300c      	adds	r0, #12
 80121fc:	f7f8 f83c 	bl	800a278 <rcl_publisher_is_valid_except_context>
 8012200:	2800      	cmp	r0, #0
 8012202:	d0f0      	beq.n	80121e6 <rcl_action_wait_set_add_action_server+0x22>
 8012204:	6820      	ldr	r0, [r4, #0]
 8012206:	3010      	adds	r0, #16
 8012208:	f7f8 f836 	bl	800a278 <rcl_publisher_is_valid_except_context>
 801220c:	2800      	cmp	r0, #0
 801220e:	d0ea      	beq.n	80121e6 <rcl_action_wait_set_add_action_server+0x22>
 8012210:	6821      	ldr	r1, [r4, #0]
 8012212:	4628      	mov	r0, r5
 8012214:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 8012218:	f7ff fad0 	bl	80117bc <rcl_wait_set_add_service>
 801221c:	2800      	cmp	r0, #0
 801221e:	d1e4      	bne.n	80121ea <rcl_action_wait_set_add_action_server+0x26>
 8012220:	6821      	ldr	r1, [r4, #0]
 8012222:	4628      	mov	r0, r5
 8012224:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 8012228:	3104      	adds	r1, #4
 801222a:	f7ff fac7 	bl	80117bc <rcl_wait_set_add_service>
 801222e:	2800      	cmp	r0, #0
 8012230:	d1db      	bne.n	80121ea <rcl_action_wait_set_add_action_server+0x26>
 8012232:	6821      	ldr	r1, [r4, #0]
 8012234:	4628      	mov	r0, r5
 8012236:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 801223a:	3108      	adds	r1, #8
 801223c:	f7ff fabe 	bl	80117bc <rcl_wait_set_add_service>
 8012240:	2800      	cmp	r0, #0
 8012242:	d1d2      	bne.n	80121ea <rcl_action_wait_set_add_action_server+0x26>
 8012244:	6821      	ldr	r1, [r4, #0]
 8012246:	4628      	mov	r0, r5
 8012248:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 801224c:	3114      	adds	r1, #20
 801224e:	f7ff fa59 	bl	8011704 <rcl_wait_set_add_timer>
 8012252:	2800      	cmp	r0, #0
 8012254:	d1c9      	bne.n	80121ea <rcl_action_wait_set_add_action_server+0x26>
 8012256:	2e00      	cmp	r6, #0
 8012258:	d0c7      	beq.n	80121ea <rcl_action_wait_set_add_action_server+0x26>
 801225a:	6823      	ldr	r3, [r4, #0]
 801225c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8012260:	6033      	str	r3, [r6, #0]
 8012262:	bd70      	pop	{r4, r5, r6, pc}
 8012264:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012268:	4770      	bx	lr
 801226a:	bf00      	nop

0801226c <rcl_action_server_wait_set_get_entities_ready>:
 801226c:	2800      	cmp	r0, #0
 801226e:	d05a      	beq.n	8012326 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8012270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012272:	460c      	mov	r4, r1
 8012274:	b161      	cbz	r1, 8012290 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012276:	4605      	mov	r5, r0
 8012278:	6808      	ldr	r0, [r1, #0]
 801227a:	b148      	cbz	r0, 8012290 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801227c:	4616      	mov	r6, r2
 801227e:	461f      	mov	r7, r3
 8012280:	f7fe fb12 	bl	80108a8 <rcl_service_is_valid>
 8012284:	b120      	cbz	r0, 8012290 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012286:	6820      	ldr	r0, [r4, #0]
 8012288:	3004      	adds	r0, #4
 801228a:	f7fe fb0d 	bl	80108a8 <rcl_service_is_valid>
 801228e:	b910      	cbnz	r0, 8012296 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8012290:	f640 0098 	movw	r0, #2200	; 0x898
 8012294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012296:	6820      	ldr	r0, [r4, #0]
 8012298:	3008      	adds	r0, #8
 801229a:	f7fe fb05 	bl	80108a8 <rcl_service_is_valid>
 801229e:	2800      	cmp	r0, #0
 80122a0:	d0f6      	beq.n	8012290 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80122a2:	6820      	ldr	r0, [r4, #0]
 80122a4:	300c      	adds	r0, #12
 80122a6:	f7f7 ffe7 	bl	800a278 <rcl_publisher_is_valid_except_context>
 80122aa:	2800      	cmp	r0, #0
 80122ac:	d0f0      	beq.n	8012290 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80122ae:	6820      	ldr	r0, [r4, #0]
 80122b0:	3010      	adds	r0, #16
 80122b2:	f7f7 ffe1 	bl	800a278 <rcl_publisher_is_valid_except_context>
 80122b6:	2800      	cmp	r0, #0
 80122b8:	d0ea      	beq.n	8012290 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80122ba:	b3be      	cbz	r6, 801232c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80122bc:	b3b7      	cbz	r7, 801232c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80122be:	9b06      	ldr	r3, [sp, #24]
 80122c0:	b3a3      	cbz	r3, 801232c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80122c2:	9b07      	ldr	r3, [sp, #28]
 80122c4:	b393      	cbz	r3, 801232c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80122c6:	6821      	ldr	r1, [r4, #0]
 80122c8:	692a      	ldr	r2, [r5, #16]
 80122ca:	6a2c      	ldr	r4, [r5, #32]
 80122cc:	f8d1 51e8 	ldr.w	r5, [r1, #488]	; 0x1e8
 80122d0:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 80122d4:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80122d8:	f8d1 01e4 	ldr.w	r0, [r1, #484]	; 0x1e4
 80122dc:	f8d1 51dc 	ldr.w	r5, [r1, #476]	; 0x1dc
 80122e0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80122e4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80122e8:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80122ec:	1a64      	subs	r4, r4, r1
 80122ee:	fab4 f484 	clz	r4, r4
 80122f2:	0964      	lsrs	r4, r4, #5
 80122f4:	7034      	strb	r4, [r6, #0]
 80122f6:	1d0c      	adds	r4, r1, #4
 80122f8:	1b1b      	subs	r3, r3, r4
 80122fa:	fab3 f383 	clz	r3, r3
 80122fe:	095b      	lsrs	r3, r3, #5
 8012300:	f101 0408 	add.w	r4, r1, #8
 8012304:	703b      	strb	r3, [r7, #0]
 8012306:	f101 0314 	add.w	r3, r1, #20
 801230a:	1b01      	subs	r1, r0, r4
 801230c:	1ad3      	subs	r3, r2, r3
 801230e:	fab1 f181 	clz	r1, r1
 8012312:	9a06      	ldr	r2, [sp, #24]
 8012314:	0949      	lsrs	r1, r1, #5
 8012316:	7011      	strb	r1, [r2, #0]
 8012318:	fab3 f383 	clz	r3, r3
 801231c:	9a07      	ldr	r2, [sp, #28]
 801231e:	095b      	lsrs	r3, r3, #5
 8012320:	2000      	movs	r0, #0
 8012322:	7013      	strb	r3, [r2, #0]
 8012324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012326:	f44f 7061 	mov.w	r0, #900	; 0x384
 801232a:	4770      	bx	lr
 801232c:	200b      	movs	r0, #11
 801232e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012330 <_execute_event_handler>:
 8012330:	2002      	movs	r0, #2
 8012332:	4770      	bx	lr

08012334 <_cancel_goal_event_handler>:
 8012334:	2003      	movs	r0, #3
 8012336:	4770      	bx	lr

08012338 <_succeed_event_handler>:
 8012338:	2004      	movs	r0, #4
 801233a:	4770      	bx	lr

0801233c <_abort_event_handler>:
 801233c:	2006      	movs	r0, #6
 801233e:	4770      	bx	lr

08012340 <_canceled_event_handler>:
 8012340:	2005      	movs	r0, #5
 8012342:	4770      	bx	lr

08012344 <rcl_action_transition_goal_state>:
 8012344:	b2c2      	uxtb	r2, r0
 8012346:	2a06      	cmp	r2, #6
 8012348:	d80c      	bhi.n	8012364 <rcl_action_transition_goal_state+0x20>
 801234a:	2904      	cmp	r1, #4
 801234c:	d80a      	bhi.n	8012364 <rcl_action_transition_goal_state+0x20>
 801234e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8012352:	b410      	push	{r4}
 8012354:	1853      	adds	r3, r2, r1
 8012356:	4c06      	ldr	r4, [pc, #24]	; (8012370 <rcl_action_transition_goal_state+0x2c>)
 8012358:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801235c:	b123      	cbz	r3, 8012368 <rcl_action_transition_goal_state+0x24>
 801235e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012362:	4718      	bx	r3
 8012364:	2000      	movs	r0, #0
 8012366:	4770      	bx	lr
 8012368:	2000      	movs	r0, #0
 801236a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801236e:	4770      	bx	lr
 8012370:	0801853c 	.word	0x0801853c

08012374 <rcl_action_get_zero_initialized_cancel_response>:
 8012374:	b510      	push	{r4, lr}
 8012376:	4c07      	ldr	r4, [pc, #28]	; (8012394 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8012378:	4686      	mov	lr, r0
 801237a:	4684      	mov	ip, r0
 801237c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801237e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012384:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012388:	6823      	ldr	r3, [r4, #0]
 801238a:	f8cc 3000 	str.w	r3, [ip]
 801238e:	4670      	mov	r0, lr
 8012390:	bd10      	pop	{r4, pc}
 8012392:	bf00      	nop
 8012394:	080185c8 	.word	0x080185c8

08012398 <rclc_action_send_result_request>:
 8012398:	b1d0      	cbz	r0, 80123d0 <rclc_action_send_result_request+0x38>
 801239a:	b500      	push	{lr}
 801239c:	4684      	mov	ip, r0
 801239e:	b087      	sub	sp, #28
 80123a0:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80123a4:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80123a8:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80123ac:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80123b0:	f10d 0e08 	add.w	lr, sp, #8
 80123b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80123b8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80123bc:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 80123c0:	a902      	add	r1, sp, #8
 80123c2:	3010      	adds	r0, #16
 80123c4:	f7ff fbdc 	bl	8011b80 <rcl_action_send_result_request>
 80123c8:	b920      	cbnz	r0, 80123d4 <rclc_action_send_result_request+0x3c>
 80123ca:	b007      	add	sp, #28
 80123cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80123d0:	200b      	movs	r0, #11
 80123d2:	4770      	bx	lr
 80123d4:	9001      	str	r0, [sp, #4]
 80123d6:	f7f8 fec7 	bl	800b168 <rcutils_reset_error>
 80123da:	9801      	ldr	r0, [sp, #4]
 80123dc:	b007      	add	sp, #28
 80123de:	f85d fb04 	ldr.w	pc, [sp], #4
 80123e2:	bf00      	nop

080123e4 <rclc_action_take_goal_handle>:
 80123e4:	b160      	cbz	r0, 8012400 <rclc_action_take_goal_handle+0x1c>
 80123e6:	6883      	ldr	r3, [r0, #8]
 80123e8:	b143      	cbz	r3, 80123fc <rclc_action_take_goal_handle+0x18>
 80123ea:	6819      	ldr	r1, [r3, #0]
 80123ec:	6081      	str	r1, [r0, #8]
 80123ee:	2200      	movs	r2, #0
 80123f0:	721a      	strb	r2, [r3, #8]
 80123f2:	68c1      	ldr	r1, [r0, #12]
 80123f4:	6019      	str	r1, [r3, #0]
 80123f6:	621a      	str	r2, [r3, #32]
 80123f8:	849a      	strh	r2, [r3, #36]	; 0x24
 80123fa:	60c3      	str	r3, [r0, #12]
 80123fc:	4618      	mov	r0, r3
 80123fe:	4770      	bx	lr
 8012400:	4603      	mov	r3, r0
 8012402:	e7fb      	b.n	80123fc <rclc_action_take_goal_handle+0x18>

08012404 <rclc_action_remove_used_goal_handle>:
 8012404:	b180      	cbz	r0, 8012428 <rclc_action_remove_used_goal_handle+0x24>
 8012406:	b179      	cbz	r1, 8012428 <rclc_action_remove_used_goal_handle+0x24>
 8012408:	68c3      	ldr	r3, [r0, #12]
 801240a:	4299      	cmp	r1, r3
 801240c:	d00d      	beq.n	801242a <rclc_action_remove_used_goal_handle+0x26>
 801240e:	b12b      	cbz	r3, 801241c <rclc_action_remove_used_goal_handle+0x18>
 8012410:	681a      	ldr	r2, [r3, #0]
 8012412:	4291      	cmp	r1, r2
 8012414:	d003      	beq.n	801241e <rclc_action_remove_used_goal_handle+0x1a>
 8012416:	4613      	mov	r3, r2
 8012418:	2b00      	cmp	r3, #0
 801241a:	d1f9      	bne.n	8012410 <rclc_action_remove_used_goal_handle+0xc>
 801241c:	4770      	bx	lr
 801241e:	680a      	ldr	r2, [r1, #0]
 8012420:	601a      	str	r2, [r3, #0]
 8012422:	6883      	ldr	r3, [r0, #8]
 8012424:	600b      	str	r3, [r1, #0]
 8012426:	6081      	str	r1, [r0, #8]
 8012428:	4770      	bx	lr
 801242a:	680b      	ldr	r3, [r1, #0]
 801242c:	60c3      	str	r3, [r0, #12]
 801242e:	e7f8      	b.n	8012422 <rclc_action_remove_used_goal_handle+0x1e>

08012430 <rclc_action_find_goal_handle_by_uuid>:
 8012430:	b538      	push	{r3, r4, r5, lr}
 8012432:	b180      	cbz	r0, 8012456 <rclc_action_find_goal_handle_by_uuid+0x26>
 8012434:	460d      	mov	r5, r1
 8012436:	b181      	cbz	r1, 801245a <rclc_action_find_goal_handle_by_uuid+0x2a>
 8012438:	68c4      	ldr	r4, [r0, #12]
 801243a:	b914      	cbnz	r4, 8012442 <rclc_action_find_goal_handle_by_uuid+0x12>
 801243c:	e009      	b.n	8012452 <rclc_action_find_goal_handle_by_uuid+0x22>
 801243e:	6824      	ldr	r4, [r4, #0]
 8012440:	b13c      	cbz	r4, 8012452 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012442:	f104 0009 	add.w	r0, r4, #9
 8012446:	2210      	movs	r2, #16
 8012448:	4629      	mov	r1, r5
 801244a:	f004 fd5b 	bl	8016f04 <memcmp>
 801244e:	2800      	cmp	r0, #0
 8012450:	d1f5      	bne.n	801243e <rclc_action_find_goal_handle_by_uuid+0xe>
 8012452:	4620      	mov	r0, r4
 8012454:	bd38      	pop	{r3, r4, r5, pc}
 8012456:	4604      	mov	r4, r0
 8012458:	e7fb      	b.n	8012452 <rclc_action_find_goal_handle_by_uuid+0x22>
 801245a:	460c      	mov	r4, r1
 801245c:	e7f9      	b.n	8012452 <rclc_action_find_goal_handle_by_uuid+0x22>
 801245e:	bf00      	nop

08012460 <rclc_action_find_first_handle_by_status>:
 8012460:	b140      	cbz	r0, 8012474 <rclc_action_find_first_handle_by_status+0x14>
 8012462:	68c0      	ldr	r0, [r0, #12]
 8012464:	b910      	cbnz	r0, 801246c <rclc_action_find_first_handle_by_status+0xc>
 8012466:	e005      	b.n	8012474 <rclc_action_find_first_handle_by_status+0x14>
 8012468:	6800      	ldr	r0, [r0, #0]
 801246a:	b118      	cbz	r0, 8012474 <rclc_action_find_first_handle_by_status+0x14>
 801246c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012470:	428b      	cmp	r3, r1
 8012472:	d1f9      	bne.n	8012468 <rclc_action_find_first_handle_by_status+0x8>
 8012474:	4770      	bx	lr
 8012476:	bf00      	nop

08012478 <rclc_action_find_first_terminated_handle>:
 8012478:	b140      	cbz	r0, 801248c <rclc_action_find_first_terminated_handle+0x14>
 801247a:	68c0      	ldr	r0, [r0, #12]
 801247c:	b910      	cbnz	r0, 8012484 <rclc_action_find_first_terminated_handle+0xc>
 801247e:	e005      	b.n	801248c <rclc_action_find_first_terminated_handle+0x14>
 8012480:	6800      	ldr	r0, [r0, #0]
 8012482:	b118      	cbz	r0, 801248c <rclc_action_find_first_terminated_handle+0x14>
 8012484:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012488:	2b03      	cmp	r3, #3
 801248a:	ddf9      	ble.n	8012480 <rclc_action_find_first_terminated_handle+0x8>
 801248c:	4770      	bx	lr
 801248e:	bf00      	nop

08012490 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8012490:	b170      	cbz	r0, 80124b0 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012492:	68c0      	ldr	r0, [r0, #12]
 8012494:	b160      	cbz	r0, 80124b0 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012496:	b410      	push	{r4}
 8012498:	e001      	b.n	801249e <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801249a:	6800      	ldr	r0, [r0, #0]
 801249c:	b128      	cbz	r0, 80124aa <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801249e:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 80124a2:	4299      	cmp	r1, r3
 80124a4:	bf08      	it	eq
 80124a6:	4294      	cmpeq	r4, r2
 80124a8:	d1f7      	bne.n	801249a <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80124aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124ae:	4770      	bx	lr
 80124b0:	4770      	bx	lr
 80124b2:	bf00      	nop

080124b4 <rclc_action_find_handle_by_result_request_sequence_number>:
 80124b4:	b170      	cbz	r0, 80124d4 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80124b6:	68c0      	ldr	r0, [r0, #12]
 80124b8:	b160      	cbz	r0, 80124d4 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80124ba:	b410      	push	{r4}
 80124bc:	e001      	b.n	80124c2 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80124be:	6800      	ldr	r0, [r0, #0]
 80124c0:	b128      	cbz	r0, 80124ce <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80124c2:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 80124c6:	4299      	cmp	r1, r3
 80124c8:	bf08      	it	eq
 80124ca:	4294      	cmpeq	r4, r2
 80124cc:	d1f7      	bne.n	80124be <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80124ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124d2:	4770      	bx	lr
 80124d4:	4770      	bx	lr
 80124d6:	bf00      	nop

080124d8 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80124d8:	b170      	cbz	r0, 80124f8 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80124da:	68c0      	ldr	r0, [r0, #12]
 80124dc:	b160      	cbz	r0, 80124f8 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80124de:	b410      	push	{r4}
 80124e0:	e001      	b.n	80124e6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80124e2:	6800      	ldr	r0, [r0, #0]
 80124e4:	b128      	cbz	r0, 80124f2 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80124e6:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 80124ea:	4299      	cmp	r1, r3
 80124ec:	bf08      	it	eq
 80124ee:	4294      	cmpeq	r4, r2
 80124f0:	d1f7      	bne.n	80124e2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80124f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124f6:	4770      	bx	lr
 80124f8:	4770      	bx	lr
 80124fa:	bf00      	nop

080124fc <rclc_action_find_first_handle_with_goal_response>:
 80124fc:	b140      	cbz	r0, 8012510 <rclc_action_find_first_handle_with_goal_response+0x14>
 80124fe:	68c0      	ldr	r0, [r0, #12]
 8012500:	b910      	cbnz	r0, 8012508 <rclc_action_find_first_handle_with_goal_response+0xc>
 8012502:	e005      	b.n	8012510 <rclc_action_find_first_handle_with_goal_response+0x14>
 8012504:	6800      	ldr	r0, [r0, #0]
 8012506:	b118      	cbz	r0, 8012510 <rclc_action_find_first_handle_with_goal_response+0x14>
 8012508:	f890 3020 	ldrb.w	r3, [r0, #32]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d0f9      	beq.n	8012504 <rclc_action_find_first_handle_with_goal_response+0x8>
 8012510:	4770      	bx	lr
 8012512:	bf00      	nop

08012514 <rclc_action_find_first_handle_with_result_response>:
 8012514:	b140      	cbz	r0, 8012528 <rclc_action_find_first_handle_with_result_response+0x14>
 8012516:	68c0      	ldr	r0, [r0, #12]
 8012518:	b910      	cbnz	r0, 8012520 <rclc_action_find_first_handle_with_result_response+0xc>
 801251a:	e005      	b.n	8012528 <rclc_action_find_first_handle_with_result_response+0x14>
 801251c:	6800      	ldr	r0, [r0, #0]
 801251e:	b118      	cbz	r0, 8012528 <rclc_action_find_first_handle_with_result_response+0x14>
 8012520:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8012524:	2b00      	cmp	r3, #0
 8012526:	d0f9      	beq.n	801251c <rclc_action_find_first_handle_with_result_response+0x8>
 8012528:	4770      	bx	lr
 801252a:	bf00      	nop

0801252c <rclc_action_server_response_goal_request>:
 801252c:	b198      	cbz	r0, 8012556 <rclc_action_server_response_goal_request+0x2a>
 801252e:	b510      	push	{r4, lr}
 8012530:	6844      	ldr	r4, [r0, #4]
 8012532:	b086      	sub	sp, #24
 8012534:	2200      	movs	r2, #0
 8012536:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801253a:	460b      	mov	r3, r1
 801253c:	9205      	str	r2, [sp, #20]
 801253e:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8012542:	aa03      	add	r2, sp, #12
 8012544:	f104 0010 	add.w	r0, r4, #16
 8012548:	f88d 300c 	strb.w	r3, [sp, #12]
 801254c:	f7ff fd4c 	bl	8011fe8 <rcl_action_send_goal_response>
 8012550:	b918      	cbnz	r0, 801255a <rclc_action_server_response_goal_request+0x2e>
 8012552:	b006      	add	sp, #24
 8012554:	bd10      	pop	{r4, pc}
 8012556:	200b      	movs	r0, #11
 8012558:	4770      	bx	lr
 801255a:	9001      	str	r0, [sp, #4]
 801255c:	f7f8 fe04 	bl	800b168 <rcutils_reset_error>
 8012560:	9801      	ldr	r0, [sp, #4]
 8012562:	b006      	add	sp, #24
 8012564:	bd10      	pop	{r4, pc}
 8012566:	bf00      	nop

08012568 <rclc_action_server_goal_cancel_accept>:
 8012568:	b310      	cbz	r0, 80125b0 <rclc_action_server_goal_cancel_accept+0x48>
 801256a:	b510      	push	{r4, lr}
 801256c:	b090      	sub	sp, #64	; 0x40
 801256e:	4604      	mov	r4, r0
 8012570:	a806      	add	r0, sp, #24
 8012572:	f7ff feff 	bl	8012374 <rcl_action_get_zero_initialized_cancel_response>
 8012576:	2300      	movs	r3, #0
 8012578:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801257c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8012580:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8012584:	f88d 3018 	strb.w	r3, [sp, #24]
 8012588:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801258c:	f8cd d01c 	str.w	sp, [sp, #28]
 8012590:	46ec      	mov	ip, sp
 8012592:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012596:	ed9f 7b08 	vldr	d7, [pc, #32]	; 80125b8 <rclc_action_server_goal_cancel_accept+0x50>
 801259a:	6860      	ldr	r0, [r4, #4]
 801259c:	aa06      	add	r2, sp, #24
 801259e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 80125a2:	3010      	adds	r0, #16
 80125a4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80125a8:	f7ff fdd4 	bl	8012154 <rcl_action_send_cancel_response>
 80125ac:	b010      	add	sp, #64	; 0x40
 80125ae:	bd10      	pop	{r4, pc}
 80125b0:	200b      	movs	r0, #11
 80125b2:	4770      	bx	lr
 80125b4:	f3af 8000 	nop.w
 80125b8:	00000001 	.word	0x00000001
 80125bc:	00000001 	.word	0x00000001

080125c0 <rclc_action_server_goal_cancel_reject>:
 80125c0:	b082      	sub	sp, #8
 80125c2:	b530      	push	{r4, r5, lr}
 80125c4:	b08b      	sub	sp, #44	; 0x2c
 80125c6:	ac0e      	add	r4, sp, #56	; 0x38
 80125c8:	e884 000c 	stmia.w	r4, {r2, r3}
 80125cc:	b188      	cbz	r0, 80125f2 <rclc_action_server_goal_cancel_reject+0x32>
 80125ce:	4604      	mov	r4, r0
 80125d0:	a801      	add	r0, sp, #4
 80125d2:	460d      	mov	r5, r1
 80125d4:	f7ff fece 	bl	8012374 <rcl_action_get_zero_initialized_cancel_response>
 80125d8:	aa01      	add	r2, sp, #4
 80125da:	a90e      	add	r1, sp, #56	; 0x38
 80125dc:	f104 0010 	add.w	r0, r4, #16
 80125e0:	f88d 5004 	strb.w	r5, [sp, #4]
 80125e4:	f7ff fdb6 	bl	8012154 <rcl_action_send_cancel_response>
 80125e8:	b00b      	add	sp, #44	; 0x2c
 80125ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80125ee:	b002      	add	sp, #8
 80125f0:	4770      	bx	lr
 80125f2:	200b      	movs	r0, #11
 80125f4:	b00b      	add	sp, #44	; 0x2c
 80125f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80125fa:	b002      	add	sp, #8
 80125fc:	4770      	bx	lr
 80125fe:	bf00      	nop

08012600 <__atomic_load_8>:
 8012600:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012604:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8012608:	4a15      	ldr	r2, [pc, #84]	; (8012660 <__atomic_load_8+0x60>)
 801260a:	4b16      	ldr	r3, [pc, #88]	; (8012664 <__atomic_load_8+0x64>)
 801260c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012610:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012614:	fb02 f101 	mul.w	r1, r2, r1
 8012618:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801261c:	fba3 2301 	umull	r2, r3, r3, r1
 8012620:	091b      	lsrs	r3, r3, #4
 8012622:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012626:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801262a:	b4d0      	push	{r4, r6, r7}
 801262c:	4c0e      	ldr	r4, [pc, #56]	; (8012668 <__atomic_load_8+0x68>)
 801262e:	1ac9      	subs	r1, r1, r3
 8012630:	1862      	adds	r2, r4, r1
 8012632:	f04f 0c01 	mov.w	ip, #1
 8012636:	e8d2 3f4f 	ldrexb	r3, [r2]
 801263a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801263e:	2e00      	cmp	r6, #0
 8012640:	d1f9      	bne.n	8012636 <__atomic_load_8+0x36>
 8012642:	f3bf 8f5b 	dmb	ish
 8012646:	b2db      	uxtb	r3, r3
 8012648:	2b00      	cmp	r3, #0
 801264a:	d1f4      	bne.n	8012636 <__atomic_load_8+0x36>
 801264c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012650:	f3bf 8f5b 	dmb	ish
 8012654:	5463      	strb	r3, [r4, r1]
 8012656:	4630      	mov	r0, r6
 8012658:	4639      	mov	r1, r7
 801265a:	bcd0      	pop	{r4, r6, r7}
 801265c:	4770      	bx	lr
 801265e:	bf00      	nop
 8012660:	27d4eb2d 	.word	0x27d4eb2d
 8012664:	b21642c9 	.word	0xb21642c9
 8012668:	20010be0 	.word	0x20010be0

0801266c <__atomic_store_8>:
 801266c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012670:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8012674:	b570      	push	{r4, r5, r6, lr}
 8012676:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801267a:	4c14      	ldr	r4, [pc, #80]	; (80126cc <__atomic_store_8+0x60>)
 801267c:	4d14      	ldr	r5, [pc, #80]	; (80126d0 <__atomic_store_8+0x64>)
 801267e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012682:	fb04 f101 	mul.w	r1, r4, r1
 8012686:	4c13      	ldr	r4, [pc, #76]	; (80126d4 <__atomic_store_8+0x68>)
 8012688:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801268c:	fba4 4e01 	umull	r4, lr, r4, r1
 8012690:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8012694:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8012698:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 801269c:	eba1 0e0e 	sub.w	lr, r1, lr
 80126a0:	eb05 0c0e 	add.w	ip, r5, lr
 80126a4:	f04f 0401 	mov.w	r4, #1
 80126a8:	e8dc 1f4f 	ldrexb	r1, [ip]
 80126ac:	e8cc 4f46 	strexb	r6, r4, [ip]
 80126b0:	2e00      	cmp	r6, #0
 80126b2:	d1f9      	bne.n	80126a8 <__atomic_store_8+0x3c>
 80126b4:	f3bf 8f5b 	dmb	ish
 80126b8:	b2c9      	uxtb	r1, r1
 80126ba:	2900      	cmp	r1, #0
 80126bc:	d1f4      	bne.n	80126a8 <__atomic_store_8+0x3c>
 80126be:	e9c0 2300 	strd	r2, r3, [r0]
 80126c2:	f3bf 8f5b 	dmb	ish
 80126c6:	f805 100e 	strb.w	r1, [r5, lr]
 80126ca:	bd70      	pop	{r4, r5, r6, pc}
 80126cc:	27d4eb2d 	.word	0x27d4eb2d
 80126d0:	20010be0 	.word	0x20010be0
 80126d4:	b21642c9 	.word	0xb21642c9

080126d8 <__atomic_exchange_8>:
 80126d8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 80126dc:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 80126e0:	4916      	ldr	r1, [pc, #88]	; (801273c <__atomic_exchange_8+0x64>)
 80126e2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 80126e6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 80126ea:	fb01 fc0c 	mul.w	ip, r1, ip
 80126ee:	4914      	ldr	r1, [pc, #80]	; (8012740 <__atomic_exchange_8+0x68>)
 80126f0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80126f4:	b570      	push	{r4, r5, r6, lr}
 80126f6:	4605      	mov	r5, r0
 80126f8:	fba1 010c 	umull	r0, r1, r1, ip
 80126fc:	0909      	lsrs	r1, r1, #4
 80126fe:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8012702:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8012706:	4e0f      	ldr	r6, [pc, #60]	; (8012744 <__atomic_exchange_8+0x6c>)
 8012708:	ebac 0c01 	sub.w	ip, ip, r1
 801270c:	eb06 010c 	add.w	r1, r6, ip
 8012710:	f04f 0e01 	mov.w	lr, #1
 8012714:	e8d1 4f4f 	ldrexb	r4, [r1]
 8012718:	e8c1 ef40 	strexb	r0, lr, [r1]
 801271c:	2800      	cmp	r0, #0
 801271e:	d1f9      	bne.n	8012714 <__atomic_exchange_8+0x3c>
 8012720:	f3bf 8f5b 	dmb	ish
 8012724:	b2e4      	uxtb	r4, r4
 8012726:	2c00      	cmp	r4, #0
 8012728:	d1f4      	bne.n	8012714 <__atomic_exchange_8+0x3c>
 801272a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801272e:	e9c5 2300 	strd	r2, r3, [r5]
 8012732:	f3bf 8f5b 	dmb	ish
 8012736:	f806 400c 	strb.w	r4, [r6, ip]
 801273a:	bd70      	pop	{r4, r5, r6, pc}
 801273c:	27d4eb2d 	.word	0x27d4eb2d
 8012740:	b21642c9 	.word	0xb21642c9
 8012744:	20010be0 	.word	0x20010be0

08012748 <rcutils_get_env>:
 8012748:	b168      	cbz	r0, 8012766 <rcutils_get_env+0x1e>
 801274a:	b510      	push	{r4, lr}
 801274c:	460c      	mov	r4, r1
 801274e:	b129      	cbz	r1, 801275c <rcutils_get_env+0x14>
 8012750:	f004 f830 	bl	80167b4 <getenv>
 8012754:	b120      	cbz	r0, 8012760 <rcutils_get_env+0x18>
 8012756:	6020      	str	r0, [r4, #0]
 8012758:	2000      	movs	r0, #0
 801275a:	bd10      	pop	{r4, pc}
 801275c:	4803      	ldr	r0, [pc, #12]	; (801276c <rcutils_get_env+0x24>)
 801275e:	bd10      	pop	{r4, pc}
 8012760:	4b03      	ldr	r3, [pc, #12]	; (8012770 <rcutils_get_env+0x28>)
 8012762:	6023      	str	r3, [r4, #0]
 8012764:	bd10      	pop	{r4, pc}
 8012766:	4803      	ldr	r0, [pc, #12]	; (8012774 <rcutils_get_env+0x2c>)
 8012768:	4770      	bx	lr
 801276a:	bf00      	nop
 801276c:	08018608 	.word	0x08018608
 8012770:	0801872c 	.word	0x0801872c
 8012774:	080185ec 	.word	0x080185ec

08012778 <rcutils_is_directory>:
 8012778:	2000      	movs	r0, #0
 801277a:	4770      	bx	lr

0801277c <rcutils_join_path>:
 801277c:	b082      	sub	sp, #8
 801277e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8012782:	2000      	movs	r0, #0
 8012784:	b002      	add	sp, #8
 8012786:	4770      	bx	lr

08012788 <rcutils_to_native_path>:
 8012788:	b084      	sub	sp, #16
 801278a:	a801      	add	r0, sp, #4
 801278c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8012790:	b004      	add	sp, #16
 8012792:	2000      	movs	r0, #0
 8012794:	4770      	bx	lr
 8012796:	bf00      	nop

08012798 <rcutils_format_string_limit>:
 8012798:	b40f      	push	{r0, r1, r2, r3}
 801279a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801279c:	b083      	sub	sp, #12
 801279e:	ac08      	add	r4, sp, #32
 80127a0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80127a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80127a6:	b34e      	cbz	r6, 80127fc <rcutils_format_string_limit+0x64>
 80127a8:	a808      	add	r0, sp, #32
 80127aa:	f7f8 fcb9 	bl	800b120 <rcutils_allocator_is_valid>
 80127ae:	b328      	cbz	r0, 80127fc <rcutils_format_string_limit+0x64>
 80127b0:	2100      	movs	r1, #0
 80127b2:	ab0f      	add	r3, sp, #60	; 0x3c
 80127b4:	4632      	mov	r2, r6
 80127b6:	4608      	mov	r0, r1
 80127b8:	e9cd 3300 	strd	r3, r3, [sp]
 80127bc:	f000 f8f4 	bl	80129a8 <rcutils_vsnprintf>
 80127c0:	1c43      	adds	r3, r0, #1
 80127c2:	4605      	mov	r5, r0
 80127c4:	d01a      	beq.n	80127fc <rcutils_format_string_limit+0x64>
 80127c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80127c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80127ca:	1c47      	adds	r7, r0, #1
 80127cc:	429f      	cmp	r7, r3
 80127ce:	bf84      	itt	hi
 80127d0:	461f      	movhi	r7, r3
 80127d2:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 80127d6:	4638      	mov	r0, r7
 80127d8:	9b08      	ldr	r3, [sp, #32]
 80127da:	4798      	blx	r3
 80127dc:	4604      	mov	r4, r0
 80127de:	b168      	cbz	r0, 80127fc <rcutils_format_string_limit+0x64>
 80127e0:	9b01      	ldr	r3, [sp, #4]
 80127e2:	4632      	mov	r2, r6
 80127e4:	4639      	mov	r1, r7
 80127e6:	f000 f8df 	bl	80129a8 <rcutils_vsnprintf>
 80127ea:	2800      	cmp	r0, #0
 80127ec:	db02      	blt.n	80127f4 <rcutils_format_string_limit+0x5c>
 80127ee:	2300      	movs	r3, #0
 80127f0:	5563      	strb	r3, [r4, r5]
 80127f2:	e004      	b.n	80127fe <rcutils_format_string_limit+0x66>
 80127f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80127f8:	4620      	mov	r0, r4
 80127fa:	4798      	blx	r3
 80127fc:	2400      	movs	r4, #0
 80127fe:	4620      	mov	r0, r4
 8012800:	b003      	add	sp, #12
 8012802:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012806:	b004      	add	sp, #16
 8012808:	4770      	bx	lr
 801280a:	bf00      	nop

0801280c <rcutils_repl_str>:
 801280c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012810:	ed2d 8b02 	vpush	{d8}
 8012814:	b087      	sub	sp, #28
 8012816:	4680      	mov	r8, r0
 8012818:	4608      	mov	r0, r1
 801281a:	f8cd 8004 	str.w	r8, [sp, #4]
 801281e:	ee08 2a10 	vmov	s16, r2
 8012822:	468a      	mov	sl, r1
 8012824:	4699      	mov	r9, r3
 8012826:	f7ed fce5 	bl	80001f4 <strlen>
 801282a:	2600      	movs	r6, #0
 801282c:	4647      	mov	r7, r8
 801282e:	9002      	str	r0, [sp, #8]
 8012830:	46b3      	mov	fp, r6
 8012832:	2510      	movs	r5, #16
 8012834:	46b0      	mov	r8, r6
 8012836:	e01d      	b.n	8012874 <rcutils_repl_str+0x68>
 8012838:	f10b 0b01 	add.w	fp, fp, #1
 801283c:	455e      	cmp	r6, fp
 801283e:	d211      	bcs.n	8012864 <rcutils_repl_str+0x58>
 8012840:	442e      	add	r6, r5
 8012842:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012846:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801284a:	00b1      	lsls	r1, r6, #2
 801284c:	4798      	blx	r3
 801284e:	2800      	cmp	r0, #0
 8012850:	f000 8088 	beq.w	8012964 <rcutils_repl_str+0x158>
 8012854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012858:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801285c:	4680      	mov	r8, r0
 801285e:	bf28      	it	cs
 8012860:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8012864:	9a01      	ldr	r2, [sp, #4]
 8012866:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801286a:	1aa2      	subs	r2, r4, r2
 801286c:	f843 2c04 	str.w	r2, [r3, #-4]
 8012870:	9b02      	ldr	r3, [sp, #8]
 8012872:	18e7      	adds	r7, r4, r3
 8012874:	4651      	mov	r1, sl
 8012876:	4638      	mov	r0, r7
 8012878:	f004 fb95 	bl	8016fa6 <strstr>
 801287c:	4604      	mov	r4, r0
 801287e:	4640      	mov	r0, r8
 8012880:	2c00      	cmp	r4, #0
 8012882:	d1d9      	bne.n	8012838 <rcutils_repl_str+0x2c>
 8012884:	46b8      	mov	r8, r7
 8012886:	4607      	mov	r7, r0
 8012888:	4640      	mov	r0, r8
 801288a:	f7ed fcb3 	bl	80001f4 <strlen>
 801288e:	9b01      	ldr	r3, [sp, #4]
 8012890:	eba8 0303 	sub.w	r3, r8, r3
 8012894:	181c      	adds	r4, r3, r0
 8012896:	9404      	str	r4, [sp, #16]
 8012898:	f1bb 0f00 	cmp.w	fp, #0
 801289c:	d04a      	beq.n	8012934 <rcutils_repl_str+0x128>
 801289e:	ee18 0a10 	vmov	r0, s16
 80128a2:	f7ed fca7 	bl	80001f4 <strlen>
 80128a6:	9b02      	ldr	r3, [sp, #8]
 80128a8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80128ac:	1ac3      	subs	r3, r0, r3
 80128ae:	fb0b 4303 	mla	r3, fp, r3, r4
 80128b2:	461a      	mov	r2, r3
 80128b4:	9305      	str	r3, [sp, #20]
 80128b6:	4606      	mov	r6, r0
 80128b8:	f8d9 3000 	ldr.w	r3, [r9]
 80128bc:	1c50      	adds	r0, r2, #1
 80128be:	4798      	blx	r3
 80128c0:	9003      	str	r0, [sp, #12]
 80128c2:	2800      	cmp	r0, #0
 80128c4:	d04f      	beq.n	8012966 <rcutils_repl_str+0x15a>
 80128c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80128ca:	683a      	ldr	r2, [r7, #0]
 80128cc:	4641      	mov	r1, r8
 80128ce:	f004 fc62 	bl	8017196 <memcpy>
 80128d2:	683d      	ldr	r5, [r7, #0]
 80128d4:	9b03      	ldr	r3, [sp, #12]
 80128d6:	9701      	str	r7, [sp, #4]
 80128d8:	46ba      	mov	sl, r7
 80128da:	441d      	add	r5, r3
 80128dc:	9f02      	ldr	r7, [sp, #8]
 80128de:	f8cd 9008 	str.w	r9, [sp, #8]
 80128e2:	2401      	movs	r4, #1
 80128e4:	46d1      	mov	r9, sl
 80128e6:	ee18 aa10 	vmov	sl, s16
 80128ea:	e00a      	b.n	8012902 <rcutils_repl_str+0xf6>
 80128ec:	f8d9 5000 	ldr.w	r5, [r9]
 80128f0:	1aaa      	subs	r2, r5, r2
 80128f2:	1885      	adds	r5, r0, r2
 80128f4:	f004 fc4f 	bl	8017196 <memcpy>
 80128f8:	45a3      	cmp	fp, r4
 80128fa:	f104 0201 	add.w	r2, r4, #1
 80128fe:	d935      	bls.n	801296c <rcutils_repl_str+0x160>
 8012900:	4614      	mov	r4, r2
 8012902:	4632      	mov	r2, r6
 8012904:	4651      	mov	r1, sl
 8012906:	4628      	mov	r0, r5
 8012908:	f004 fc45 	bl	8017196 <memcpy>
 801290c:	f859 2b04 	ldr.w	r2, [r9], #4
 8012910:	45a3      	cmp	fp, r4
 8012912:	443a      	add	r2, r7
 8012914:	eb05 0006 	add.w	r0, r5, r6
 8012918:	eb08 0102 	add.w	r1, r8, r2
 801291c:	d1e6      	bne.n	80128ec <rcutils_repl_str+0xe0>
 801291e:	9b04      	ldr	r3, [sp, #16]
 8012920:	1a9a      	subs	r2, r3, r2
 8012922:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8012926:	f004 fc36 	bl	8017196 <memcpy>
 801292a:	9a03      	ldr	r2, [sp, #12]
 801292c:	9905      	ldr	r1, [sp, #20]
 801292e:	2300      	movs	r3, #0
 8012930:	5453      	strb	r3, [r2, r1]
 8012932:	e00b      	b.n	801294c <rcutils_repl_str+0x140>
 8012934:	4620      	mov	r0, r4
 8012936:	f8d9 3000 	ldr.w	r3, [r9]
 801293a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801293e:	3001      	adds	r0, #1
 8012940:	4798      	blx	r3
 8012942:	9003      	str	r0, [sp, #12]
 8012944:	b110      	cbz	r0, 801294c <rcutils_repl_str+0x140>
 8012946:	9901      	ldr	r1, [sp, #4]
 8012948:	f004 fc1d 	bl	8017186 <strcpy>
 801294c:	4638      	mov	r0, r7
 801294e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012952:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012956:	4798      	blx	r3
 8012958:	9803      	ldr	r0, [sp, #12]
 801295a:	b007      	add	sp, #28
 801295c:	ecbd 8b02 	vpop	{d8}
 8012960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012964:	4647      	mov	r7, r8
 8012966:	2300      	movs	r3, #0
 8012968:	9303      	str	r3, [sp, #12]
 801296a:	e7ef      	b.n	801294c <rcutils_repl_str+0x140>
 801296c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8012970:	e7db      	b.n	801292a <rcutils_repl_str+0x11e>
 8012972:	bf00      	nop

08012974 <rcutils_snprintf>:
 8012974:	b40c      	push	{r2, r3}
 8012976:	b530      	push	{r4, r5, lr}
 8012978:	b083      	sub	sp, #12
 801297a:	ab06      	add	r3, sp, #24
 801297c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012980:	9301      	str	r3, [sp, #4]
 8012982:	b152      	cbz	r2, 801299a <rcutils_snprintf+0x26>
 8012984:	b138      	cbz	r0, 8012996 <rcutils_snprintf+0x22>
 8012986:	b141      	cbz	r1, 801299a <rcutils_snprintf+0x26>
 8012988:	f004 faae 	bl	8016ee8 <vsniprintf>
 801298c:	b003      	add	sp, #12
 801298e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012992:	b002      	add	sp, #8
 8012994:	4770      	bx	lr
 8012996:	2900      	cmp	r1, #0
 8012998:	d0f6      	beq.n	8012988 <rcutils_snprintf+0x14>
 801299a:	f004 fbc7 	bl	801712c <__errno>
 801299e:	2316      	movs	r3, #22
 80129a0:	6003      	str	r3, [r0, #0]
 80129a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129a6:	e7f1      	b.n	801298c <rcutils_snprintf+0x18>

080129a8 <rcutils_vsnprintf>:
 80129a8:	b570      	push	{r4, r5, r6, lr}
 80129aa:	b13a      	cbz	r2, 80129bc <rcutils_vsnprintf+0x14>
 80129ac:	b120      	cbz	r0, 80129b8 <rcutils_vsnprintf+0x10>
 80129ae:	b129      	cbz	r1, 80129bc <rcutils_vsnprintf+0x14>
 80129b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129b4:	f004 ba98 	b.w	8016ee8 <vsniprintf>
 80129b8:	2900      	cmp	r1, #0
 80129ba:	d0f9      	beq.n	80129b0 <rcutils_vsnprintf+0x8>
 80129bc:	f004 fbb6 	bl	801712c <__errno>
 80129c0:	2316      	movs	r3, #22
 80129c2:	6003      	str	r3, [r0, #0]
 80129c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129c8:	bd70      	pop	{r4, r5, r6, pc}
 80129ca:	bf00      	nop

080129cc <rcutils_strdup>:
 80129cc:	b084      	sub	sp, #16
 80129ce:	b570      	push	{r4, r5, r6, lr}
 80129d0:	b082      	sub	sp, #8
 80129d2:	ac07      	add	r4, sp, #28
 80129d4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80129d8:	4605      	mov	r5, r0
 80129da:	b1b0      	cbz	r0, 8012a0a <rcutils_strdup+0x3e>
 80129dc:	f7ed fc0a 	bl	80001f4 <strlen>
 80129e0:	1c42      	adds	r2, r0, #1
 80129e2:	9b07      	ldr	r3, [sp, #28]
 80129e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80129e6:	9201      	str	r2, [sp, #4]
 80129e8:	4606      	mov	r6, r0
 80129ea:	4610      	mov	r0, r2
 80129ec:	4798      	blx	r3
 80129ee:	4604      	mov	r4, r0
 80129f0:	b128      	cbz	r0, 80129fe <rcutils_strdup+0x32>
 80129f2:	9a01      	ldr	r2, [sp, #4]
 80129f4:	4629      	mov	r1, r5
 80129f6:	f004 fbce 	bl	8017196 <memcpy>
 80129fa:	2300      	movs	r3, #0
 80129fc:	55a3      	strb	r3, [r4, r6]
 80129fe:	4620      	mov	r0, r4
 8012a00:	b002      	add	sp, #8
 8012a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a06:	b004      	add	sp, #16
 8012a08:	4770      	bx	lr
 8012a0a:	4604      	mov	r4, r0
 8012a0c:	e7f7      	b.n	80129fe <rcutils_strdup+0x32>
 8012a0e:	bf00      	nop

08012a10 <rcutils_strndup>:
 8012a10:	b082      	sub	sp, #8
 8012a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a14:	ac06      	add	r4, sp, #24
 8012a16:	e884 000c 	stmia.w	r4, {r2, r3}
 8012a1a:	4605      	mov	r5, r0
 8012a1c:	b188      	cbz	r0, 8012a42 <rcutils_strndup+0x32>
 8012a1e:	1c4f      	adds	r7, r1, #1
 8012a20:	460e      	mov	r6, r1
 8012a22:	4638      	mov	r0, r7
 8012a24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012a26:	4790      	blx	r2
 8012a28:	4604      	mov	r4, r0
 8012a2a:	b128      	cbz	r0, 8012a38 <rcutils_strndup+0x28>
 8012a2c:	463a      	mov	r2, r7
 8012a2e:	4629      	mov	r1, r5
 8012a30:	f004 fbb1 	bl	8017196 <memcpy>
 8012a34:	2300      	movs	r3, #0
 8012a36:	55a3      	strb	r3, [r4, r6]
 8012a38:	4620      	mov	r0, r4
 8012a3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012a3e:	b002      	add	sp, #8
 8012a40:	4770      	bx	lr
 8012a42:	4604      	mov	r4, r0
 8012a44:	e7f8      	b.n	8012a38 <rcutils_strndup+0x28>
 8012a46:	bf00      	nop

08012a48 <rcutils_get_zero_initialized_string_map>:
 8012a48:	4b01      	ldr	r3, [pc, #4]	; (8012a50 <rcutils_get_zero_initialized_string_map+0x8>)
 8012a4a:	2000      	movs	r0, #0
 8012a4c:	6018      	str	r0, [r3, #0]
 8012a4e:	4770      	bx	lr
 8012a50:	20010bf8 	.word	0x20010bf8

08012a54 <rcutils_string_map_reserve>:
 8012a54:	2800      	cmp	r0, #0
 8012a56:	d05f      	beq.n	8012b18 <rcutils_string_map_reserve+0xc4>
 8012a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a5c:	460c      	mov	r4, r1
 8012a5e:	6801      	ldr	r1, [r0, #0]
 8012a60:	b082      	sub	sp, #8
 8012a62:	4605      	mov	r5, r0
 8012a64:	b129      	cbz	r1, 8012a72 <rcutils_string_map_reserve+0x1e>
 8012a66:	68cb      	ldr	r3, [r1, #12]
 8012a68:	42a3      	cmp	r3, r4
 8012a6a:	d906      	bls.n	8012a7a <rcutils_string_map_reserve+0x26>
 8012a6c:	461c      	mov	r4, r3
 8012a6e:	2900      	cmp	r1, #0
 8012a70:	d1f9      	bne.n	8012a66 <rcutils_string_map_reserve+0x12>
 8012a72:	201f      	movs	r0, #31
 8012a74:	b002      	add	sp, #8
 8012a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a7a:	688b      	ldr	r3, [r1, #8]
 8012a7c:	42a3      	cmp	r3, r4
 8012a7e:	d047      	beq.n	8012b10 <rcutils_string_map_reserve+0xbc>
 8012a80:	6a0e      	ldr	r6, [r1, #32]
 8012a82:	2c00      	cmp	r4, #0
 8012a84:	d034      	beq.n	8012af0 <rcutils_string_map_reserve+0x9c>
 8012a86:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8012a8a:	d243      	bcs.n	8012b14 <rcutils_string_map_reserve+0xc0>
 8012a8c:	00a7      	lsls	r7, r4, #2
 8012a8e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8012a92:	6808      	ldr	r0, [r1, #0]
 8012a94:	4632      	mov	r2, r6
 8012a96:	4639      	mov	r1, r7
 8012a98:	47c0      	blx	r8
 8012a9a:	2800      	cmp	r0, #0
 8012a9c:	d03a      	beq.n	8012b14 <rcutils_string_map_reserve+0xc0>
 8012a9e:	682b      	ldr	r3, [r5, #0]
 8012aa0:	4632      	mov	r2, r6
 8012aa2:	6018      	str	r0, [r3, #0]
 8012aa4:	4639      	mov	r1, r7
 8012aa6:	6858      	ldr	r0, [r3, #4]
 8012aa8:	47c0      	blx	r8
 8012aaa:	2800      	cmp	r0, #0
 8012aac:	d032      	beq.n	8012b14 <rcutils_string_map_reserve+0xc0>
 8012aae:	682d      	ldr	r5, [r5, #0]
 8012ab0:	68ab      	ldr	r3, [r5, #8]
 8012ab2:	6068      	str	r0, [r5, #4]
 8012ab4:	42a3      	cmp	r3, r4
 8012ab6:	d226      	bcs.n	8012b06 <rcutils_string_map_reserve+0xb2>
 8012ab8:	682a      	ldr	r2, [r5, #0]
 8012aba:	eb00 0c07 	add.w	ip, r0, r7
 8012abe:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8012ac2:	45e6      	cmp	lr, ip
 8012ac4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8012ac8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8012acc:	d203      	bcs.n	8012ad6 <rcutils_string_map_reserve+0x82>
 8012ace:	eb02 0c07 	add.w	ip, r2, r7
 8012ad2:	4566      	cmp	r6, ip
 8012ad4:	d322      	bcc.n	8012b1c <rcutils_string_map_reserve+0xc8>
 8012ad6:	1ae3      	subs	r3, r4, r3
 8012ad8:	009a      	lsls	r2, r3, #2
 8012ada:	4670      	mov	r0, lr
 8012adc:	2100      	movs	r1, #0
 8012ade:	9201      	str	r2, [sp, #4]
 8012ae0:	f004 fa3a 	bl	8016f58 <memset>
 8012ae4:	9a01      	ldr	r2, [sp, #4]
 8012ae6:	2100      	movs	r1, #0
 8012ae8:	4630      	mov	r0, r6
 8012aea:	f004 fa35 	bl	8016f58 <memset>
 8012aee:	e00a      	b.n	8012b06 <rcutils_string_map_reserve+0xb2>
 8012af0:	694f      	ldr	r7, [r1, #20]
 8012af2:	6808      	ldr	r0, [r1, #0]
 8012af4:	4631      	mov	r1, r6
 8012af6:	47b8      	blx	r7
 8012af8:	682b      	ldr	r3, [r5, #0]
 8012afa:	4631      	mov	r1, r6
 8012afc:	6858      	ldr	r0, [r3, #4]
 8012afe:	601c      	str	r4, [r3, #0]
 8012b00:	47b8      	blx	r7
 8012b02:	682d      	ldr	r5, [r5, #0]
 8012b04:	606c      	str	r4, [r5, #4]
 8012b06:	2000      	movs	r0, #0
 8012b08:	60ac      	str	r4, [r5, #8]
 8012b0a:	b002      	add	sp, #8
 8012b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b10:	2000      	movs	r0, #0
 8012b12:	e7af      	b.n	8012a74 <rcutils_string_map_reserve+0x20>
 8012b14:	200a      	movs	r0, #10
 8012b16:	e7ad      	b.n	8012a74 <rcutils_string_map_reserve+0x20>
 8012b18:	200b      	movs	r0, #11
 8012b1a:	4770      	bx	lr
 8012b1c:	1f0b      	subs	r3, r1, #4
 8012b1e:	4418      	add	r0, r3
 8012b20:	4413      	add	r3, r2
 8012b22:	3a04      	subs	r2, #4
 8012b24:	4417      	add	r7, r2
 8012b26:	2200      	movs	r2, #0
 8012b28:	f843 2f04 	str.w	r2, [r3, #4]!
 8012b2c:	42bb      	cmp	r3, r7
 8012b2e:	f840 2f04 	str.w	r2, [r0, #4]!
 8012b32:	d1f9      	bne.n	8012b28 <rcutils_string_map_reserve+0xd4>
 8012b34:	e7e7      	b.n	8012b06 <rcutils_string_map_reserve+0xb2>
 8012b36:	bf00      	nop

08012b38 <rcutils_string_map_init>:
 8012b38:	b082      	sub	sp, #8
 8012b3a:	b570      	push	{r4, r5, r6, lr}
 8012b3c:	ac04      	add	r4, sp, #16
 8012b3e:	e884 000c 	stmia.w	r4, {r2, r3}
 8012b42:	b380      	cbz	r0, 8012ba6 <rcutils_string_map_init+0x6e>
 8012b44:	6806      	ldr	r6, [r0, #0]
 8012b46:	4604      	mov	r4, r0
 8012b48:	b12e      	cbz	r6, 8012b56 <rcutils_string_map_init+0x1e>
 8012b4a:	251e      	movs	r5, #30
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b52:	b002      	add	sp, #8
 8012b54:	4770      	bx	lr
 8012b56:	a804      	add	r0, sp, #16
 8012b58:	460d      	mov	r5, r1
 8012b5a:	f7f8 fae1 	bl	800b120 <rcutils_allocator_is_valid>
 8012b5e:	b310      	cbz	r0, 8012ba6 <rcutils_string_map_init+0x6e>
 8012b60:	9b04      	ldr	r3, [sp, #16]
 8012b62:	9908      	ldr	r1, [sp, #32]
 8012b64:	2024      	movs	r0, #36	; 0x24
 8012b66:	4798      	blx	r3
 8012b68:	6020      	str	r0, [r4, #0]
 8012b6a:	b310      	cbz	r0, 8012bb2 <rcutils_string_map_init+0x7a>
 8012b6c:	f10d 0e10 	add.w	lr, sp, #16
 8012b70:	e9c0 6600 	strd	r6, r6, [r0]
 8012b74:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8012b78:	f100 0c10 	add.w	ip, r0, #16
 8012b7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012b80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b84:	f8de 3000 	ldr.w	r3, [lr]
 8012b88:	f8cc 3000 	str.w	r3, [ip]
 8012b8c:	4629      	mov	r1, r5
 8012b8e:	4620      	mov	r0, r4
 8012b90:	f7ff ff60 	bl	8012a54 <rcutils_string_map_reserve>
 8012b94:	4605      	mov	r5, r0
 8012b96:	2800      	cmp	r0, #0
 8012b98:	d0d8      	beq.n	8012b4c <rcutils_string_map_init+0x14>
 8012b9a:	9b05      	ldr	r3, [sp, #20]
 8012b9c:	9908      	ldr	r1, [sp, #32]
 8012b9e:	6820      	ldr	r0, [r4, #0]
 8012ba0:	4798      	blx	r3
 8012ba2:	6026      	str	r6, [r4, #0]
 8012ba4:	e7d2      	b.n	8012b4c <rcutils_string_map_init+0x14>
 8012ba6:	250b      	movs	r5, #11
 8012ba8:	4628      	mov	r0, r5
 8012baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012bae:	b002      	add	sp, #8
 8012bb0:	4770      	bx	lr
 8012bb2:	250a      	movs	r5, #10
 8012bb4:	e7ca      	b.n	8012b4c <rcutils_string_map_init+0x14>
 8012bb6:	bf00      	nop

08012bb8 <rcutils_string_map_fini>:
 8012bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bbc:	b082      	sub	sp, #8
 8012bbe:	2800      	cmp	r0, #0
 8012bc0:	d03a      	beq.n	8012c38 <rcutils_string_map_fini+0x80>
 8012bc2:	6804      	ldr	r4, [r0, #0]
 8012bc4:	4606      	mov	r6, r0
 8012bc6:	2c00      	cmp	r4, #0
 8012bc8:	d032      	beq.n	8012c30 <rcutils_string_map_fini+0x78>
 8012bca:	68a3      	ldr	r3, [r4, #8]
 8012bcc:	b32b      	cbz	r3, 8012c1a <rcutils_string_map_fini+0x62>
 8012bce:	2500      	movs	r5, #0
 8012bd0:	6822      	ldr	r2, [r4, #0]
 8012bd2:	462f      	mov	r7, r5
 8012bd4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012bd8:	b1e0      	cbz	r0, 8012c14 <rcutils_string_map_fini+0x5c>
 8012bda:	6a21      	ldr	r1, [r4, #32]
 8012bdc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8012be0:	9101      	str	r1, [sp, #4]
 8012be2:	47c0      	blx	r8
 8012be4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012be8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012bec:	9901      	ldr	r1, [sp, #4]
 8012bee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012bf2:	47c0      	blx	r8
 8012bf4:	68e3      	ldr	r3, [r4, #12]
 8012bf6:	6862      	ldr	r2, [r4, #4]
 8012bf8:	3b01      	subs	r3, #1
 8012bfa:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012bfe:	60e3      	str	r3, [r4, #12]
 8012c00:	6834      	ldr	r4, [r6, #0]
 8012c02:	68a3      	ldr	r3, [r4, #8]
 8012c04:	3501      	adds	r5, #1
 8012c06:	429d      	cmp	r5, r3
 8012c08:	d207      	bcs.n	8012c1a <rcutils_string_map_fini+0x62>
 8012c0a:	6822      	ldr	r2, [r4, #0]
 8012c0c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012c10:	2800      	cmp	r0, #0
 8012c12:	d1e2      	bne.n	8012bda <rcutils_string_map_fini+0x22>
 8012c14:	3501      	adds	r5, #1
 8012c16:	429d      	cmp	r5, r3
 8012c18:	d3dc      	bcc.n	8012bd4 <rcutils_string_map_fini+0x1c>
 8012c1a:	2100      	movs	r1, #0
 8012c1c:	4630      	mov	r0, r6
 8012c1e:	f7ff ff19 	bl	8012a54 <rcutils_string_map_reserve>
 8012c22:	4604      	mov	r4, r0
 8012c24:	b920      	cbnz	r0, 8012c30 <rcutils_string_map_fini+0x78>
 8012c26:	6830      	ldr	r0, [r6, #0]
 8012c28:	6943      	ldr	r3, [r0, #20]
 8012c2a:	6a01      	ldr	r1, [r0, #32]
 8012c2c:	4798      	blx	r3
 8012c2e:	6034      	str	r4, [r6, #0]
 8012c30:	4620      	mov	r0, r4
 8012c32:	b002      	add	sp, #8
 8012c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c38:	240b      	movs	r4, #11
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	b002      	add	sp, #8
 8012c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c42:	bf00      	nop

08012c44 <rcutils_string_map_getn>:
 8012c44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c48:	b300      	cbz	r0, 8012c8c <rcutils_string_map_getn+0x48>
 8012c4a:	6807      	ldr	r7, [r0, #0]
 8012c4c:	b1ff      	cbz	r7, 8012c8e <rcutils_string_map_getn+0x4a>
 8012c4e:	4688      	mov	r8, r1
 8012c50:	b1e1      	cbz	r1, 8012c8c <rcutils_string_map_getn+0x48>
 8012c52:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8012c56:	683e      	ldr	r6, [r7, #0]
 8012c58:	f1ba 0f00 	cmp.w	sl, #0
 8012c5c:	d016      	beq.n	8012c8c <rcutils_string_map_getn+0x48>
 8012c5e:	4691      	mov	r9, r2
 8012c60:	3e04      	subs	r6, #4
 8012c62:	2400      	movs	r4, #0
 8012c64:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8012c68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012c6c:	4628      	mov	r0, r5
 8012c6e:	3401      	adds	r4, #1
 8012c70:	b155      	cbz	r5, 8012c88 <rcutils_string_map_getn+0x44>
 8012c72:	f7ed fabf 	bl	80001f4 <strlen>
 8012c76:	4548      	cmp	r0, r9
 8012c78:	4602      	mov	r2, r0
 8012c7a:	4629      	mov	r1, r5
 8012c7c:	bf38      	it	cc
 8012c7e:	464a      	movcc	r2, r9
 8012c80:	4640      	mov	r0, r8
 8012c82:	f004 f97e 	bl	8016f82 <strncmp>
 8012c86:	b128      	cbz	r0, 8012c94 <rcutils_string_map_getn+0x50>
 8012c88:	45a2      	cmp	sl, r4
 8012c8a:	d1eb      	bne.n	8012c64 <rcutils_string_map_getn+0x20>
 8012c8c:	2700      	movs	r7, #0
 8012c8e:	4638      	mov	r0, r7
 8012c90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f853 700b 	ldr.w	r7, [r3, fp]
 8012c9a:	4638      	mov	r0, r7
 8012c9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012ca0 <rmw_get_zero_initialized_context>:
 8012ca0:	b510      	push	{r4, lr}
 8012ca2:	4604      	mov	r4, r0
 8012ca4:	3010      	adds	r0, #16
 8012ca6:	f000 f80b 	bl	8012cc0 <rmw_get_zero_initialized_init_options>
 8012caa:	2300      	movs	r3, #0
 8012cac:	2000      	movs	r0, #0
 8012cae:	2100      	movs	r1, #0
 8012cb0:	e9c4 0100 	strd	r0, r1, [r4]
 8012cb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012cb8:	60a3      	str	r3, [r4, #8]
 8012cba:	4620      	mov	r0, r4
 8012cbc:	bd10      	pop	{r4, pc}
 8012cbe:	bf00      	nop

08012cc0 <rmw_get_zero_initialized_init_options>:
 8012cc0:	b510      	push	{r4, lr}
 8012cc2:	2238      	movs	r2, #56	; 0x38
 8012cc4:	4604      	mov	r4, r0
 8012cc6:	2100      	movs	r1, #0
 8012cc8:	f004 f946 	bl	8016f58 <memset>
 8012ccc:	f104 0010 	add.w	r0, r4, #16
 8012cd0:	f000 f806 	bl	8012ce0 <rmw_get_default_security_options>
 8012cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012cd8:	60e3      	str	r3, [r4, #12]
 8012cda:	4620      	mov	r0, r4
 8012cdc:	bd10      	pop	{r4, pc}
 8012cde:	bf00      	nop

08012ce0 <rmw_get_default_security_options>:
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	7002      	strb	r2, [r0, #0]
 8012ce4:	6042      	str	r2, [r0, #4]
 8012ce6:	4770      	bx	lr

08012ce8 <rmw_subscription_content_filter_options_fini>:
 8012ce8:	b1b0      	cbz	r0, 8012d18 <rmw_subscription_content_filter_options_fini+0x30>
 8012cea:	b538      	push	{r3, r4, r5, lr}
 8012cec:	4604      	mov	r4, r0
 8012cee:	4608      	mov	r0, r1
 8012cf0:	460d      	mov	r5, r1
 8012cf2:	f7f8 fa15 	bl	800b120 <rcutils_allocator_is_valid>
 8012cf6:	b168      	cbz	r0, 8012d14 <rmw_subscription_content_filter_options_fini+0x2c>
 8012cf8:	6820      	ldr	r0, [r4, #0]
 8012cfa:	b120      	cbz	r0, 8012d06 <rmw_subscription_content_filter_options_fini+0x1e>
 8012cfc:	686b      	ldr	r3, [r5, #4]
 8012cfe:	6929      	ldr	r1, [r5, #16]
 8012d00:	4798      	blx	r3
 8012d02:	2300      	movs	r3, #0
 8012d04:	6023      	str	r3, [r4, #0]
 8012d06:	1d20      	adds	r0, r4, #4
 8012d08:	f003 fbfe 	bl	8016508 <rcutils_string_array_fini>
 8012d0c:	3800      	subs	r0, #0
 8012d0e:	bf18      	it	ne
 8012d10:	2001      	movne	r0, #1
 8012d12:	bd38      	pop	{r3, r4, r5, pc}
 8012d14:	200b      	movs	r0, #11
 8012d16:	bd38      	pop	{r3, r4, r5, pc}
 8012d18:	200b      	movs	r0, #11
 8012d1a:	4770      	bx	lr

08012d1c <rmw_get_default_subscription_options>:
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	e9c0 2200 	strd	r2, r2, [r0]
 8012d22:	6082      	str	r2, [r0, #8]
 8012d24:	4770      	bx	lr
 8012d26:	bf00      	nop

08012d28 <rmw_time_equal>:
 8012d28:	b4f0      	push	{r4, r5, r6, r7}
 8012d2a:	b084      	sub	sp, #16
 8012d2c:	ac04      	add	r4, sp, #16
 8012d2e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012d32:	4603      	mov	r3, r0
 8012d34:	4924      	ldr	r1, [pc, #144]	; (8012dc8 <rmw_time_equal+0xa0>)
 8012d36:	9e03      	ldr	r6, [sp, #12]
 8012d38:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012d3c:	2202      	movs	r2, #2
 8012d3e:	4299      	cmp	r1, r3
 8012d40:	41aa      	sbcs	r2, r5
 8012d42:	d330      	bcc.n	8012da6 <rmw_time_equal+0x7e>
 8012d44:	4c21      	ldr	r4, [pc, #132]	; (8012dcc <rmw_time_equal+0xa4>)
 8012d46:	fba3 3204 	umull	r3, r2, r3, r4
 8012d4a:	fb04 2205 	mla	r2, r4, r5, r2
 8012d4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012d52:	43dd      	mvns	r5, r3
 8012d54:	1a8c      	subs	r4, r1, r2
 8012d56:	4285      	cmp	r5, r0
 8012d58:	41b4      	sbcs	r4, r6
 8012d5a:	d332      	bcc.n	8012dc2 <rmw_time_equal+0x9a>
 8012d5c:	eb10 0c03 	adds.w	ip, r0, r3
 8012d60:	eb42 0106 	adc.w	r1, r2, r6
 8012d64:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8012d68:	4817      	ldr	r0, [pc, #92]	; (8012dc8 <rmw_time_equal+0xa0>)
 8012d6a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012d6c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8012d6e:	2202      	movs	r2, #2
 8012d70:	4298      	cmp	r0, r3
 8012d72:	41b2      	sbcs	r2, r6
 8012d74:	d31c      	bcc.n	8012db0 <rmw_time_equal+0x88>
 8012d76:	4c15      	ldr	r4, [pc, #84]	; (8012dcc <rmw_time_equal+0xa4>)
 8012d78:	fba3 3204 	umull	r3, r2, r3, r4
 8012d7c:	fb04 2206 	mla	r2, r4, r6, r2
 8012d80:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8012d84:	43de      	mvns	r6, r3
 8012d86:	1a84      	subs	r4, r0, r2
 8012d88:	42ae      	cmp	r6, r5
 8012d8a:	41bc      	sbcs	r4, r7
 8012d8c:	d315      	bcc.n	8012dba <rmw_time_equal+0x92>
 8012d8e:	195b      	adds	r3, r3, r5
 8012d90:	eb42 0207 	adc.w	r2, r2, r7
 8012d94:	428a      	cmp	r2, r1
 8012d96:	bf08      	it	eq
 8012d98:	4563      	cmpeq	r3, ip
 8012d9a:	bf0c      	ite	eq
 8012d9c:	2001      	moveq	r0, #1
 8012d9e:	2000      	movne	r0, #0
 8012da0:	b004      	add	sp, #16
 8012da2:	bcf0      	pop	{r4, r5, r6, r7}
 8012da4:	4770      	bx	lr
 8012da6:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8012daa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012dae:	e7d9      	b.n	8012d64 <rmw_time_equal+0x3c>
 8012db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012db4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8012db8:	e7ec      	b.n	8012d94 <rmw_time_equal+0x6c>
 8012dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012dbe:	4602      	mov	r2, r0
 8012dc0:	e7e8      	b.n	8012d94 <rmw_time_equal+0x6c>
 8012dc2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8012dc6:	e7cd      	b.n	8012d64 <rmw_time_equal+0x3c>
 8012dc8:	25c17d04 	.word	0x25c17d04
 8012dcc:	3b9aca00 	.word	0x3b9aca00

08012dd0 <rmw_time_total_nsec>:
 8012dd0:	b470      	push	{r4, r5, r6}
 8012dd2:	b085      	sub	sp, #20
 8012dd4:	ac04      	add	r4, sp, #16
 8012dd6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012dda:	4603      	mov	r3, r0
 8012ddc:	4912      	ldr	r1, [pc, #72]	; (8012e28 <rmw_time_total_nsec+0x58>)
 8012dde:	9e03      	ldr	r6, [sp, #12]
 8012de0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012de4:	2202      	movs	r2, #2
 8012de6:	4299      	cmp	r1, r3
 8012de8:	41aa      	sbcs	r2, r5
 8012dea:	d311      	bcc.n	8012e10 <rmw_time_total_nsec+0x40>
 8012dec:	4c0f      	ldr	r4, [pc, #60]	; (8012e2c <rmw_time_total_nsec+0x5c>)
 8012dee:	fba3 3204 	umull	r3, r2, r3, r4
 8012df2:	fb04 2205 	mla	r2, r4, r5, r2
 8012df6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012dfa:	43dd      	mvns	r5, r3
 8012dfc:	1a8c      	subs	r4, r1, r2
 8012dfe:	4285      	cmp	r5, r0
 8012e00:	41b4      	sbcs	r4, r6
 8012e02:	d30c      	bcc.n	8012e1e <rmw_time_total_nsec+0x4e>
 8012e04:	1818      	adds	r0, r3, r0
 8012e06:	eb42 0106 	adc.w	r1, r2, r6
 8012e0a:	b005      	add	sp, #20
 8012e0c:	bc70      	pop	{r4, r5, r6}
 8012e0e:	4770      	bx	lr
 8012e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012e18:	b005      	add	sp, #20
 8012e1a:	bc70      	pop	{r4, r5, r6}
 8012e1c:	4770      	bx	lr
 8012e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e22:	b005      	add	sp, #20
 8012e24:	bc70      	pop	{r4, r5, r6}
 8012e26:	4770      	bx	lr
 8012e28:	25c17d04 	.word	0x25c17d04
 8012e2c:	3b9aca00 	.word	0x3b9aca00

08012e30 <rmw_get_zero_initialized_message_info>:
 8012e30:	b510      	push	{r4, lr}
 8012e32:	2240      	movs	r2, #64	; 0x40
 8012e34:	4604      	mov	r4, r0
 8012e36:	2100      	movs	r1, #0
 8012e38:	f004 f88e 	bl	8016f58 <memset>
 8012e3c:	4620      	mov	r0, r4
 8012e3e:	bd10      	pop	{r4, pc}

08012e40 <rmw_validate_full_topic_name>:
 8012e40:	2800      	cmp	r0, #0
 8012e42:	d057      	beq.n	8012ef4 <rmw_validate_full_topic_name+0xb4>
 8012e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e48:	460d      	mov	r5, r1
 8012e4a:	2900      	cmp	r1, #0
 8012e4c:	d054      	beq.n	8012ef8 <rmw_validate_full_topic_name+0xb8>
 8012e4e:	4616      	mov	r6, r2
 8012e50:	4604      	mov	r4, r0
 8012e52:	f7ed f9cf 	bl	80001f4 <strlen>
 8012e56:	b148      	cbz	r0, 8012e6c <rmw_validate_full_topic_name+0x2c>
 8012e58:	7823      	ldrb	r3, [r4, #0]
 8012e5a:	2b2f      	cmp	r3, #47	; 0x2f
 8012e5c:	d00d      	beq.n	8012e7a <rmw_validate_full_topic_name+0x3a>
 8012e5e:	2302      	movs	r3, #2
 8012e60:	602b      	str	r3, [r5, #0]
 8012e62:	b13e      	cbz	r6, 8012e74 <rmw_validate_full_topic_name+0x34>
 8012e64:	2000      	movs	r0, #0
 8012e66:	6030      	str	r0, [r6, #0]
 8012e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	602b      	str	r3, [r5, #0]
 8012e70:	2e00      	cmp	r6, #0
 8012e72:	d1f7      	bne.n	8012e64 <rmw_validate_full_topic_name+0x24>
 8012e74:	2000      	movs	r0, #0
 8012e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e7a:	1e43      	subs	r3, r0, #1
 8012e7c:	5ce2      	ldrb	r2, [r4, r3]
 8012e7e:	2a2f      	cmp	r2, #47	; 0x2f
 8012e80:	d03c      	beq.n	8012efc <rmw_validate_full_topic_name+0xbc>
 8012e82:	1e63      	subs	r3, r4, #1
 8012e84:	eb03 0800 	add.w	r8, r3, r0
 8012e88:	f1c4 0e01 	rsb	lr, r4, #1
 8012e8c:	eb0e 0703 	add.w	r7, lr, r3
 8012e90:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8012e94:	f021 0220 	bic.w	r2, r1, #32
 8012e98:	3a41      	subs	r2, #65	; 0x41
 8012e9a:	2a19      	cmp	r2, #25
 8012e9c:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 8012ea0:	d90b      	bls.n	8012eba <rmw_validate_full_topic_name+0x7a>
 8012ea2:	295f      	cmp	r1, #95	; 0x5f
 8012ea4:	d009      	beq.n	8012eba <rmw_validate_full_topic_name+0x7a>
 8012ea6:	f1bc 0f0a 	cmp.w	ip, #10
 8012eaa:	d906      	bls.n	8012eba <rmw_validate_full_topic_name+0x7a>
 8012eac:	2304      	movs	r3, #4
 8012eae:	602b      	str	r3, [r5, #0]
 8012eb0:	2e00      	cmp	r6, #0
 8012eb2:	d0df      	beq.n	8012e74 <rmw_validate_full_topic_name+0x34>
 8012eb4:	6037      	str	r7, [r6, #0]
 8012eb6:	2000      	movs	r0, #0
 8012eb8:	e7d6      	b.n	8012e68 <rmw_validate_full_topic_name+0x28>
 8012eba:	4543      	cmp	r3, r8
 8012ebc:	d1e6      	bne.n	8012e8c <rmw_validate_full_topic_name+0x4c>
 8012ebe:	4f1a      	ldr	r7, [pc, #104]	; (8012f28 <rmw_validate_full_topic_name+0xe8>)
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	e004      	b.n	8012ece <rmw_validate_full_topic_name+0x8e>
 8012ec4:	4298      	cmp	r0, r3
 8012ec6:	f104 0401 	add.w	r4, r4, #1
 8012eca:	d91c      	bls.n	8012f06 <rmw_validate_full_topic_name+0xc6>
 8012ecc:	4613      	mov	r3, r2
 8012ece:	4298      	cmp	r0, r3
 8012ed0:	f103 0201 	add.w	r2, r3, #1
 8012ed4:	d0f6      	beq.n	8012ec4 <rmw_validate_full_topic_name+0x84>
 8012ed6:	7821      	ldrb	r1, [r4, #0]
 8012ed8:	292f      	cmp	r1, #47	; 0x2f
 8012eda:	d1f3      	bne.n	8012ec4 <rmw_validate_full_topic_name+0x84>
 8012edc:	7861      	ldrb	r1, [r4, #1]
 8012ede:	292f      	cmp	r1, #47	; 0x2f
 8012ee0:	d01c      	beq.n	8012f1c <rmw_validate_full_topic_name+0xdc>
 8012ee2:	5dc9      	ldrb	r1, [r1, r7]
 8012ee4:	0749      	lsls	r1, r1, #29
 8012ee6:	d5ed      	bpl.n	8012ec4 <rmw_validate_full_topic_name+0x84>
 8012ee8:	2206      	movs	r2, #6
 8012eea:	602a      	str	r2, [r5, #0]
 8012eec:	2e00      	cmp	r6, #0
 8012eee:	d0c1      	beq.n	8012e74 <rmw_validate_full_topic_name+0x34>
 8012ef0:	6033      	str	r3, [r6, #0]
 8012ef2:	e7bf      	b.n	8012e74 <rmw_validate_full_topic_name+0x34>
 8012ef4:	200b      	movs	r0, #11
 8012ef6:	4770      	bx	lr
 8012ef8:	200b      	movs	r0, #11
 8012efa:	e7b5      	b.n	8012e68 <rmw_validate_full_topic_name+0x28>
 8012efc:	2203      	movs	r2, #3
 8012efe:	602a      	str	r2, [r5, #0]
 8012f00:	2e00      	cmp	r6, #0
 8012f02:	d1f5      	bne.n	8012ef0 <rmw_validate_full_topic_name+0xb0>
 8012f04:	e7b6      	b.n	8012e74 <rmw_validate_full_topic_name+0x34>
 8012f06:	28f7      	cmp	r0, #247	; 0xf7
 8012f08:	d802      	bhi.n	8012f10 <rmw_validate_full_topic_name+0xd0>
 8012f0a:	2000      	movs	r0, #0
 8012f0c:	6028      	str	r0, [r5, #0]
 8012f0e:	e7ab      	b.n	8012e68 <rmw_validate_full_topic_name+0x28>
 8012f10:	2307      	movs	r3, #7
 8012f12:	602b      	str	r3, [r5, #0]
 8012f14:	2e00      	cmp	r6, #0
 8012f16:	d0ad      	beq.n	8012e74 <rmw_validate_full_topic_name+0x34>
 8012f18:	23f6      	movs	r3, #246	; 0xf6
 8012f1a:	e7e9      	b.n	8012ef0 <rmw_validate_full_topic_name+0xb0>
 8012f1c:	2205      	movs	r2, #5
 8012f1e:	602a      	str	r2, [r5, #0]
 8012f20:	2e00      	cmp	r6, #0
 8012f22:	d1e5      	bne.n	8012ef0 <rmw_validate_full_topic_name+0xb0>
 8012f24:	e7a6      	b.n	8012e74 <rmw_validate_full_topic_name+0x34>
 8012f26:	bf00      	nop
 8012f28:	08018c1c 	.word	0x08018c1c

08012f2c <rmw_validate_namespace_with_size>:
 8012f2c:	b340      	cbz	r0, 8012f80 <rmw_validate_namespace_with_size+0x54>
 8012f2e:	b570      	push	{r4, r5, r6, lr}
 8012f30:	4614      	mov	r4, r2
 8012f32:	b0c2      	sub	sp, #264	; 0x108
 8012f34:	b332      	cbz	r2, 8012f84 <rmw_validate_namespace_with_size+0x58>
 8012f36:	2901      	cmp	r1, #1
 8012f38:	460d      	mov	r5, r1
 8012f3a:	461e      	mov	r6, r3
 8012f3c:	d102      	bne.n	8012f44 <rmw_validate_namespace_with_size+0x18>
 8012f3e:	7803      	ldrb	r3, [r0, #0]
 8012f40:	2b2f      	cmp	r3, #47	; 0x2f
 8012f42:	d012      	beq.n	8012f6a <rmw_validate_namespace_with_size+0x3e>
 8012f44:	aa01      	add	r2, sp, #4
 8012f46:	4669      	mov	r1, sp
 8012f48:	f7ff ff7a 	bl	8012e40 <rmw_validate_full_topic_name>
 8012f4c:	b978      	cbnz	r0, 8012f6e <rmw_validate_namespace_with_size+0x42>
 8012f4e:	9b00      	ldr	r3, [sp, #0]
 8012f50:	b14b      	cbz	r3, 8012f66 <rmw_validate_namespace_with_size+0x3a>
 8012f52:	2b07      	cmp	r3, #7
 8012f54:	d007      	beq.n	8012f66 <rmw_validate_namespace_with_size+0x3a>
 8012f56:	1e5a      	subs	r2, r3, #1
 8012f58:	2a05      	cmp	r2, #5
 8012f5a:	d82b      	bhi.n	8012fb4 <rmw_validate_namespace_with_size+0x88>
 8012f5c:	e8df f002 	tbb	[pc, r2]
 8012f60:	1e212427 	.word	0x1e212427
 8012f64:	141b      	.short	0x141b
 8012f66:	2df5      	cmp	r5, #245	; 0xf5
 8012f68:	d803      	bhi.n	8012f72 <rmw_validate_namespace_with_size+0x46>
 8012f6a:	2000      	movs	r0, #0
 8012f6c:	6020      	str	r0, [r4, #0]
 8012f6e:	b042      	add	sp, #264	; 0x108
 8012f70:	bd70      	pop	{r4, r5, r6, pc}
 8012f72:	2307      	movs	r3, #7
 8012f74:	6023      	str	r3, [r4, #0]
 8012f76:	2e00      	cmp	r6, #0
 8012f78:	d0f9      	beq.n	8012f6e <rmw_validate_namespace_with_size+0x42>
 8012f7a:	23f4      	movs	r3, #244	; 0xf4
 8012f7c:	6033      	str	r3, [r6, #0]
 8012f7e:	e7f6      	b.n	8012f6e <rmw_validate_namespace_with_size+0x42>
 8012f80:	200b      	movs	r0, #11
 8012f82:	4770      	bx	lr
 8012f84:	200b      	movs	r0, #11
 8012f86:	e7f2      	b.n	8012f6e <rmw_validate_namespace_with_size+0x42>
 8012f88:	2306      	movs	r3, #6
 8012f8a:	6023      	str	r3, [r4, #0]
 8012f8c:	2e00      	cmp	r6, #0
 8012f8e:	d0ee      	beq.n	8012f6e <rmw_validate_namespace_with_size+0x42>
 8012f90:	9b01      	ldr	r3, [sp, #4]
 8012f92:	6033      	str	r3, [r6, #0]
 8012f94:	e7eb      	b.n	8012f6e <rmw_validate_namespace_with_size+0x42>
 8012f96:	2305      	movs	r3, #5
 8012f98:	6023      	str	r3, [r4, #0]
 8012f9a:	e7f7      	b.n	8012f8c <rmw_validate_namespace_with_size+0x60>
 8012f9c:	2304      	movs	r3, #4
 8012f9e:	6023      	str	r3, [r4, #0]
 8012fa0:	e7f4      	b.n	8012f8c <rmw_validate_namespace_with_size+0x60>
 8012fa2:	2303      	movs	r3, #3
 8012fa4:	6023      	str	r3, [r4, #0]
 8012fa6:	e7f1      	b.n	8012f8c <rmw_validate_namespace_with_size+0x60>
 8012fa8:	2302      	movs	r3, #2
 8012faa:	6023      	str	r3, [r4, #0]
 8012fac:	e7ee      	b.n	8012f8c <rmw_validate_namespace_with_size+0x60>
 8012fae:	2301      	movs	r3, #1
 8012fb0:	6023      	str	r3, [r4, #0]
 8012fb2:	e7eb      	b.n	8012f8c <rmw_validate_namespace_with_size+0x60>
 8012fb4:	4a03      	ldr	r2, [pc, #12]	; (8012fc4 <rmw_validate_namespace_with_size+0x98>)
 8012fb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012fba:	a802      	add	r0, sp, #8
 8012fbc:	f7ff fcda 	bl	8012974 <rcutils_snprintf>
 8012fc0:	2001      	movs	r0, #1
 8012fc2:	e7d4      	b.n	8012f6e <rmw_validate_namespace_with_size+0x42>
 8012fc4:	08018624 	.word	0x08018624

08012fc8 <rmw_validate_namespace>:
 8012fc8:	b168      	cbz	r0, 8012fe6 <rmw_validate_namespace+0x1e>
 8012fca:	b570      	push	{r4, r5, r6, lr}
 8012fcc:	460d      	mov	r5, r1
 8012fce:	4616      	mov	r6, r2
 8012fd0:	4604      	mov	r4, r0
 8012fd2:	f7ed f90f 	bl	80001f4 <strlen>
 8012fd6:	4633      	mov	r3, r6
 8012fd8:	4601      	mov	r1, r0
 8012fda:	462a      	mov	r2, r5
 8012fdc:	4620      	mov	r0, r4
 8012fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012fe2:	f7ff bfa3 	b.w	8012f2c <rmw_validate_namespace_with_size>
 8012fe6:	200b      	movs	r0, #11
 8012fe8:	4770      	bx	lr
 8012fea:	bf00      	nop

08012fec <rmw_namespace_validation_result_string>:
 8012fec:	2807      	cmp	r0, #7
 8012fee:	bf9a      	itte	ls
 8012ff0:	4b02      	ldrls	r3, [pc, #8]	; (8012ffc <rmw_namespace_validation_result_string+0x10>)
 8012ff2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8012ff6:	4802      	ldrhi	r0, [pc, #8]	; (8013000 <rmw_namespace_validation_result_string+0x14>)
 8012ff8:	4770      	bx	lr
 8012ffa:	bf00      	nop
 8012ffc:	0801881c 	.word	0x0801881c
 8013000:	08018674 	.word	0x08018674

08013004 <rmw_validate_node_name>:
 8013004:	2800      	cmp	r0, #0
 8013006:	d03b      	beq.n	8013080 <rmw_validate_node_name+0x7c>
 8013008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801300c:	460d      	mov	r5, r1
 801300e:	2900      	cmp	r1, #0
 8013010:	d038      	beq.n	8013084 <rmw_validate_node_name+0x80>
 8013012:	4616      	mov	r6, r2
 8013014:	4604      	mov	r4, r0
 8013016:	f7ed f8ed 	bl	80001f4 <strlen>
 801301a:	b1e0      	cbz	r0, 8013056 <rmw_validate_node_name+0x52>
 801301c:	1e63      	subs	r3, r4, #1
 801301e:	eb03 0800 	add.w	r8, r3, r0
 8013022:	f1c4 0101 	rsb	r1, r4, #1
 8013026:	18cf      	adds	r7, r1, r3
 8013028:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801302c:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8013030:	f02e 0c20 	bic.w	ip, lr, #32
 8013034:	2a09      	cmp	r2, #9
 8013036:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 801303a:	d914      	bls.n	8013066 <rmw_validate_node_name+0x62>
 801303c:	f1bc 0f19 	cmp.w	ip, #25
 8013040:	d911      	bls.n	8013066 <rmw_validate_node_name+0x62>
 8013042:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8013046:	d00e      	beq.n	8013066 <rmw_validate_node_name+0x62>
 8013048:	2302      	movs	r3, #2
 801304a:	602b      	str	r3, [r5, #0]
 801304c:	b106      	cbz	r6, 8013050 <rmw_validate_node_name+0x4c>
 801304e:	6037      	str	r7, [r6, #0]
 8013050:	2000      	movs	r0, #0
 8013052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013056:	2301      	movs	r3, #1
 8013058:	602b      	str	r3, [r5, #0]
 801305a:	2e00      	cmp	r6, #0
 801305c:	d0f8      	beq.n	8013050 <rmw_validate_node_name+0x4c>
 801305e:	2000      	movs	r0, #0
 8013060:	6030      	str	r0, [r6, #0]
 8013062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013066:	4543      	cmp	r3, r8
 8013068:	d1dd      	bne.n	8013026 <rmw_validate_node_name+0x22>
 801306a:	7822      	ldrb	r2, [r4, #0]
 801306c:	4b0d      	ldr	r3, [pc, #52]	; (80130a4 <rmw_validate_node_name+0xa0>)
 801306e:	5cd3      	ldrb	r3, [r2, r3]
 8013070:	f013 0304 	ands.w	r3, r3, #4
 8013074:	d110      	bne.n	8013098 <rmw_validate_node_name+0x94>
 8013076:	28ff      	cmp	r0, #255	; 0xff
 8013078:	d806      	bhi.n	8013088 <rmw_validate_node_name+0x84>
 801307a:	602b      	str	r3, [r5, #0]
 801307c:	4618      	mov	r0, r3
 801307e:	e7e8      	b.n	8013052 <rmw_validate_node_name+0x4e>
 8013080:	200b      	movs	r0, #11
 8013082:	4770      	bx	lr
 8013084:	200b      	movs	r0, #11
 8013086:	e7e4      	b.n	8013052 <rmw_validate_node_name+0x4e>
 8013088:	2204      	movs	r2, #4
 801308a:	602a      	str	r2, [r5, #0]
 801308c:	2e00      	cmp	r6, #0
 801308e:	d0df      	beq.n	8013050 <rmw_validate_node_name+0x4c>
 8013090:	22fe      	movs	r2, #254	; 0xfe
 8013092:	6032      	str	r2, [r6, #0]
 8013094:	4618      	mov	r0, r3
 8013096:	e7dc      	b.n	8013052 <rmw_validate_node_name+0x4e>
 8013098:	2303      	movs	r3, #3
 801309a:	602b      	str	r3, [r5, #0]
 801309c:	2e00      	cmp	r6, #0
 801309e:	d1de      	bne.n	801305e <rmw_validate_node_name+0x5a>
 80130a0:	e7d6      	b.n	8013050 <rmw_validate_node_name+0x4c>
 80130a2:	bf00      	nop
 80130a4:	08018c1c 	.word	0x08018c1c

080130a8 <rmw_node_name_validation_result_string>:
 80130a8:	2804      	cmp	r0, #4
 80130aa:	bf9a      	itte	ls
 80130ac:	4b02      	ldrls	r3, [pc, #8]	; (80130b8 <rmw_node_name_validation_result_string+0x10>)
 80130ae:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80130b2:	4802      	ldrhi	r0, [pc, #8]	; (80130bc <rmw_node_name_validation_result_string+0x14>)
 80130b4:	4770      	bx	lr
 80130b6:	bf00      	nop
 80130b8:	08018928 	.word	0x08018928
 80130bc:	0801883c 	.word	0x0801883c

080130c0 <get_memory>:
 80130c0:	4603      	mov	r3, r0
 80130c2:	6840      	ldr	r0, [r0, #4]
 80130c4:	b158      	cbz	r0, 80130de <get_memory+0x1e>
 80130c6:	6842      	ldr	r2, [r0, #4]
 80130c8:	605a      	str	r2, [r3, #4]
 80130ca:	b10a      	cbz	r2, 80130d0 <get_memory+0x10>
 80130cc:	2100      	movs	r1, #0
 80130ce:	6011      	str	r1, [r2, #0]
 80130d0:	681a      	ldr	r2, [r3, #0]
 80130d2:	6042      	str	r2, [r0, #4]
 80130d4:	b102      	cbz	r2, 80130d8 <get_memory+0x18>
 80130d6:	6010      	str	r0, [r2, #0]
 80130d8:	2200      	movs	r2, #0
 80130da:	6002      	str	r2, [r0, #0]
 80130dc:	6018      	str	r0, [r3, #0]
 80130de:	4770      	bx	lr

080130e0 <put_memory>:
 80130e0:	680b      	ldr	r3, [r1, #0]
 80130e2:	b10b      	cbz	r3, 80130e8 <put_memory+0x8>
 80130e4:	684a      	ldr	r2, [r1, #4]
 80130e6:	605a      	str	r2, [r3, #4]
 80130e8:	684a      	ldr	r2, [r1, #4]
 80130ea:	b102      	cbz	r2, 80130ee <put_memory+0xe>
 80130ec:	6013      	str	r3, [r2, #0]
 80130ee:	6803      	ldr	r3, [r0, #0]
 80130f0:	428b      	cmp	r3, r1
 80130f2:	6843      	ldr	r3, [r0, #4]
 80130f4:	bf08      	it	eq
 80130f6:	6002      	streq	r2, [r0, #0]
 80130f8:	604b      	str	r3, [r1, #4]
 80130fa:	b103      	cbz	r3, 80130fe <put_memory+0x1e>
 80130fc:	6019      	str	r1, [r3, #0]
 80130fe:	2300      	movs	r3, #0
 8013100:	600b      	str	r3, [r1, #0]
 8013102:	6041      	str	r1, [r0, #4]
 8013104:	4770      	bx	lr
 8013106:	bf00      	nop

08013108 <rmw_destroy_client>:
 8013108:	b570      	push	{r4, r5, r6, lr}
 801310a:	b128      	cbz	r0, 8013118 <rmw_destroy_client+0x10>
 801310c:	4604      	mov	r4, r0
 801310e:	6800      	ldr	r0, [r0, #0]
 8013110:	460d      	mov	r5, r1
 8013112:	f7f8 fdab 	bl	800bc6c <is_uxrce_rmw_identifier_valid>
 8013116:	b910      	cbnz	r0, 801311e <rmw_destroy_client+0x16>
 8013118:	2401      	movs	r4, #1
 801311a:	4620      	mov	r0, r4
 801311c:	bd70      	pop	{r4, r5, r6, pc}
 801311e:	6863      	ldr	r3, [r4, #4]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d0f9      	beq.n	8013118 <rmw_destroy_client+0x10>
 8013124:	2d00      	cmp	r5, #0
 8013126:	d0f7      	beq.n	8013118 <rmw_destroy_client+0x10>
 8013128:	6828      	ldr	r0, [r5, #0]
 801312a:	f7f8 fd9f 	bl	800bc6c <is_uxrce_rmw_identifier_valid>
 801312e:	2800      	cmp	r0, #0
 8013130:	d0f2      	beq.n	8013118 <rmw_destroy_client+0x10>
 8013132:	686e      	ldr	r6, [r5, #4]
 8013134:	2e00      	cmp	r6, #0
 8013136:	d0ef      	beq.n	8013118 <rmw_destroy_client+0x10>
 8013138:	6864      	ldr	r4, [r4, #4]
 801313a:	6932      	ldr	r2, [r6, #16]
 801313c:	6920      	ldr	r0, [r4, #16]
 801313e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013142:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013146:	6819      	ldr	r1, [r3, #0]
 8013148:	f002 f91a 	bl	8015380 <uxr_buffer_cancel_data>
 801314c:	4602      	mov	r2, r0
 801314e:	6920      	ldr	r0, [r4, #16]
 8013150:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013154:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013158:	f7f8 fd08 	bl	800bb6c <run_xrce_session>
 801315c:	6920      	ldr	r0, [r4, #16]
 801315e:	6932      	ldr	r2, [r6, #16]
 8013160:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013164:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013168:	6819      	ldr	r1, [r3, #0]
 801316a:	f7f9 fe3b 	bl	800cde4 <uxr_buffer_delete_entity>
 801316e:	4602      	mov	r2, r0
 8013170:	6920      	ldr	r0, [r4, #16]
 8013172:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013176:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801317a:	f7f8 fcf7 	bl	800bb6c <run_xrce_session>
 801317e:	2800      	cmp	r0, #0
 8013180:	4628      	mov	r0, r5
 8013182:	bf14      	ite	ne
 8013184:	2400      	movne	r4, #0
 8013186:	2402      	moveq	r4, #2
 8013188:	f7f8 fbd8 	bl	800b93c <rmw_uxrce_fini_client_memory>
 801318c:	e7c5      	b.n	801311a <rmw_destroy_client+0x12>
 801318e:	bf00      	nop

08013190 <rmw_get_implementation_identifier>:
 8013190:	4b01      	ldr	r3, [pc, #4]	; (8013198 <rmw_get_implementation_identifier+0x8>)
 8013192:	6818      	ldr	r0, [r3, #0]
 8013194:	4770      	bx	lr
 8013196:	bf00      	nop
 8013198:	08018954 	.word	0x08018954

0801319c <rmw_init_options_init>:
 801319c:	b084      	sub	sp, #16
 801319e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131a0:	b083      	sub	sp, #12
 80131a2:	ad09      	add	r5, sp, #36	; 0x24
 80131a4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80131a8:	b130      	cbz	r0, 80131b8 <rmw_init_options_init+0x1c>
 80131aa:	4604      	mov	r4, r0
 80131ac:	4628      	mov	r0, r5
 80131ae:	f7f7 ffb7 	bl	800b120 <rcutils_allocator_is_valid>
 80131b2:	b108      	cbz	r0, 80131b8 <rmw_init_options_init+0x1c>
 80131b4:	68a6      	ldr	r6, [r4, #8]
 80131b6:	b12e      	cbz	r6, 80131c4 <rmw_init_options_init+0x28>
 80131b8:	200b      	movs	r0, #11
 80131ba:	b003      	add	sp, #12
 80131bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80131c0:	b004      	add	sp, #16
 80131c2:	4770      	bx	lr
 80131c4:	2200      	movs	r2, #0
 80131c6:	2300      	movs	r3, #0
 80131c8:	e9c4 2300 	strd	r2, r3, [r4]
 80131cc:	4b22      	ldr	r3, [pc, #136]	; (8013258 <rmw_init_options_init+0xbc>)
 80131ce:	f8df e098 	ldr.w	lr, [pc, #152]	; 8013268 <rmw_init_options_init+0xcc>
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	60a3      	str	r3, [r4, #8]
 80131d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80131d8:	f104 0c20 	add.w	ip, r4, #32
 80131dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80131e0:	466f      	mov	r7, sp
 80131e2:	682b      	ldr	r3, [r5, #0]
 80131e4:	f8cc 3000 	str.w	r3, [ip]
 80131e8:	4638      	mov	r0, r7
 80131ea:	f8c4 e01c 	str.w	lr, [r4, #28]
 80131ee:	60e6      	str	r6, [r4, #12]
 80131f0:	f7ff fd76 	bl	8012ce0 <rmw_get_default_security_options>
 80131f4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80131f8:	f104 0310 	add.w	r3, r4, #16
 80131fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8013200:	2203      	movs	r2, #3
 8013202:	4816      	ldr	r0, [pc, #88]	; (801325c <rmw_init_options_init+0xc0>)
 8013204:	4916      	ldr	r1, [pc, #88]	; (8013260 <rmw_init_options_init+0xc4>)
 8013206:	7626      	strb	r6, [r4, #24]
 8013208:	f7f8 fad8 	bl	800b7bc <rmw_uxrce_init_init_options_impl_memory>
 801320c:	4813      	ldr	r0, [pc, #76]	; (801325c <rmw_init_options_init+0xc0>)
 801320e:	f7ff ff57 	bl	80130c0 <get_memory>
 8013212:	b1f0      	cbz	r0, 8013252 <rmw_init_options_init+0xb6>
 8013214:	4a13      	ldr	r2, [pc, #76]	; (8013264 <rmw_init_options_init+0xc8>)
 8013216:	6883      	ldr	r3, [r0, #8]
 8013218:	6851      	ldr	r1, [r2, #4]
 801321a:	7810      	ldrb	r0, [r2, #0]
 801321c:	6363      	str	r3, [r4, #52]	; 0x34
 801321e:	7418      	strb	r0, [r3, #16]
 8013220:	6159      	str	r1, [r3, #20]
 8013222:	68d1      	ldr	r1, [r2, #12]
 8013224:	61d9      	str	r1, [r3, #28]
 8013226:	6911      	ldr	r1, [r2, #16]
 8013228:	6219      	str	r1, [r3, #32]
 801322a:	6951      	ldr	r1, [r2, #20]
 801322c:	6892      	ldr	r2, [r2, #8]
 801322e:	619a      	str	r2, [r3, #24]
 8013230:	6259      	str	r1, [r3, #36]	; 0x24
 8013232:	f7fb fa35 	bl	800e6a0 <uxr_nanos>
 8013236:	f003 fbc1 	bl	80169bc <srand>
 801323a:	f003 fbed 	bl	8016a18 <rand>
 801323e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013240:	6298      	str	r0, [r3, #40]	; 0x28
 8013242:	2800      	cmp	r0, #0
 8013244:	d0f9      	beq.n	801323a <rmw_init_options_init+0x9e>
 8013246:	2000      	movs	r0, #0
 8013248:	b003      	add	sp, #12
 801324a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801324e:	b004      	add	sp, #16
 8013250:	4770      	bx	lr
 8013252:	2001      	movs	r0, #1
 8013254:	e7b1      	b.n	80131ba <rmw_init_options_init+0x1e>
 8013256:	bf00      	nop
 8013258:	08018954 	.word	0x08018954
 801325c:	20010adc 	.word	0x20010adc
 8013260:	2000c378 	.word	0x2000c378
 8013264:	2000c204 	.word	0x2000c204
 8013268:	080183bc 	.word	0x080183bc

0801326c <rmw_init_options_copy>:
 801326c:	b570      	push	{r4, r5, r6, lr}
 801326e:	b158      	cbz	r0, 8013288 <rmw_init_options_copy+0x1c>
 8013270:	460d      	mov	r5, r1
 8013272:	b149      	cbz	r1, 8013288 <rmw_init_options_copy+0x1c>
 8013274:	4604      	mov	r4, r0
 8013276:	6880      	ldr	r0, [r0, #8]
 8013278:	b120      	cbz	r0, 8013284 <rmw_init_options_copy+0x18>
 801327a:	4b1e      	ldr	r3, [pc, #120]	; (80132f4 <rmw_init_options_copy+0x88>)
 801327c:	6819      	ldr	r1, [r3, #0]
 801327e:	f7ec ffaf 	bl	80001e0 <strcmp>
 8013282:	bb90      	cbnz	r0, 80132ea <rmw_init_options_copy+0x7e>
 8013284:	68ab      	ldr	r3, [r5, #8]
 8013286:	b113      	cbz	r3, 801328e <rmw_init_options_copy+0x22>
 8013288:	250b      	movs	r5, #11
 801328a:	4628      	mov	r0, r5
 801328c:	bd70      	pop	{r4, r5, r6, pc}
 801328e:	4623      	mov	r3, r4
 8013290:	462a      	mov	r2, r5
 8013292:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8013296:	f8d3 c000 	ldr.w	ip, [r3]
 801329a:	6858      	ldr	r0, [r3, #4]
 801329c:	6899      	ldr	r1, [r3, #8]
 801329e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80132a2:	f8c2 e00c 	str.w	lr, [r2, #12]
 80132a6:	3310      	adds	r3, #16
 80132a8:	42b3      	cmp	r3, r6
 80132aa:	f8c2 c000 	str.w	ip, [r2]
 80132ae:	6050      	str	r0, [r2, #4]
 80132b0:	6091      	str	r1, [r2, #8]
 80132b2:	f102 0210 	add.w	r2, r2, #16
 80132b6:	d1ee      	bne.n	8013296 <rmw_init_options_copy+0x2a>
 80132b8:	6819      	ldr	r1, [r3, #0]
 80132ba:	685b      	ldr	r3, [r3, #4]
 80132bc:	480e      	ldr	r0, [pc, #56]	; (80132f8 <rmw_init_options_copy+0x8c>)
 80132be:	6053      	str	r3, [r2, #4]
 80132c0:	6011      	str	r1, [r2, #0]
 80132c2:	f7ff fefd 	bl	80130c0 <get_memory>
 80132c6:	b198      	cbz	r0, 80132f0 <rmw_init_options_copy+0x84>
 80132c8:	6883      	ldr	r3, [r0, #8]
 80132ca:	636b      	str	r3, [r5, #52]	; 0x34
 80132cc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80132ce:	f102 0c10 	add.w	ip, r2, #16
 80132d2:	f103 0410 	add.w	r4, r3, #16
 80132d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80132da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80132dc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80132e0:	2500      	movs	r5, #0
 80132e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80132e6:	4628      	mov	r0, r5
 80132e8:	bd70      	pop	{r4, r5, r6, pc}
 80132ea:	250c      	movs	r5, #12
 80132ec:	4628      	mov	r0, r5
 80132ee:	bd70      	pop	{r4, r5, r6, pc}
 80132f0:	2501      	movs	r5, #1
 80132f2:	e7ca      	b.n	801328a <rmw_init_options_copy+0x1e>
 80132f4:	08018954 	.word	0x08018954
 80132f8:	20010adc 	.word	0x20010adc

080132fc <rmw_init_options_fini>:
 80132fc:	2800      	cmp	r0, #0
 80132fe:	d03d      	beq.n	801337c <rmw_init_options_fini+0x80>
 8013300:	b510      	push	{r4, lr}
 8013302:	4604      	mov	r4, r0
 8013304:	b08e      	sub	sp, #56	; 0x38
 8013306:	3020      	adds	r0, #32
 8013308:	f7f7 ff0a 	bl	800b120 <rcutils_allocator_is_valid>
 801330c:	b360      	cbz	r0, 8013368 <rmw_init_options_fini+0x6c>
 801330e:	68a0      	ldr	r0, [r4, #8]
 8013310:	b120      	cbz	r0, 801331c <rmw_init_options_fini+0x20>
 8013312:	4b1c      	ldr	r3, [pc, #112]	; (8013384 <rmw_init_options_fini+0x88>)
 8013314:	6819      	ldr	r1, [r3, #0]
 8013316:	f7ec ff63 	bl	80001e0 <strcmp>
 801331a:	bb68      	cbnz	r0, 8013378 <rmw_init_options_fini+0x7c>
 801331c:	4b1a      	ldr	r3, [pc, #104]	; (8013388 <rmw_init_options_fini+0x8c>)
 801331e:	6819      	ldr	r1, [r3, #0]
 8013320:	b331      	cbz	r1, 8013370 <rmw_init_options_fini+0x74>
 8013322:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8013324:	e001      	b.n	801332a <rmw_init_options_fini+0x2e>
 8013326:	6849      	ldr	r1, [r1, #4]
 8013328:	b311      	cbz	r1, 8013370 <rmw_init_options_fini+0x74>
 801332a:	688b      	ldr	r3, [r1, #8]
 801332c:	429a      	cmp	r2, r3
 801332e:	d1fa      	bne.n	8013326 <rmw_init_options_fini+0x2a>
 8013330:	4815      	ldr	r0, [pc, #84]	; (8013388 <rmw_init_options_fini+0x8c>)
 8013332:	f7ff fed5 	bl	80130e0 <put_memory>
 8013336:	4668      	mov	r0, sp
 8013338:	f7ff fcc2 	bl	8012cc0 <rmw_get_zero_initialized_init_options>
 801333c:	46ee      	mov	lr, sp
 801333e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013342:	46a4      	mov	ip, r4
 8013344:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013348:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801334c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013350:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013354:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013358:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801335c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013360:	2300      	movs	r3, #0
 8013362:	4618      	mov	r0, r3
 8013364:	b00e      	add	sp, #56	; 0x38
 8013366:	bd10      	pop	{r4, pc}
 8013368:	230b      	movs	r3, #11
 801336a:	4618      	mov	r0, r3
 801336c:	b00e      	add	sp, #56	; 0x38
 801336e:	bd10      	pop	{r4, pc}
 8013370:	2301      	movs	r3, #1
 8013372:	4618      	mov	r0, r3
 8013374:	b00e      	add	sp, #56	; 0x38
 8013376:	bd10      	pop	{r4, pc}
 8013378:	230c      	movs	r3, #12
 801337a:	e7f2      	b.n	8013362 <rmw_init_options_fini+0x66>
 801337c:	230b      	movs	r3, #11
 801337e:	4618      	mov	r0, r3
 8013380:	4770      	bx	lr
 8013382:	bf00      	nop
 8013384:	08018954 	.word	0x08018954
 8013388:	20010adc 	.word	0x20010adc

0801338c <rmw_init>:
 801338c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013390:	b083      	sub	sp, #12
 8013392:	2800      	cmp	r0, #0
 8013394:	f000 80d3 	beq.w	801353e <rmw_init+0x1b2>
 8013398:	460e      	mov	r6, r1
 801339a:	2900      	cmp	r1, #0
 801339c:	f000 80cf 	beq.w	801353e <rmw_init+0x1b2>
 80133a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80133a2:	4605      	mov	r5, r0
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	f000 80ca 	beq.w	801353e <rmw_init+0x1b2>
 80133aa:	4b78      	ldr	r3, [pc, #480]	; (801358c <rmw_init+0x200>)
 80133ac:	6880      	ldr	r0, [r0, #8]
 80133ae:	681f      	ldr	r7, [r3, #0]
 80133b0:	b128      	cbz	r0, 80133be <rmw_init+0x32>
 80133b2:	4639      	mov	r1, r7
 80133b4:	f7ec ff14 	bl	80001e0 <strcmp>
 80133b8:	2800      	cmp	r0, #0
 80133ba:	f040 80ca 	bne.w	8013552 <rmw_init+0x1c6>
 80133be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80133c2:	4c73      	ldr	r4, [pc, #460]	; (8013590 <rmw_init+0x204>)
 80133c4:	4973      	ldr	r1, [pc, #460]	; (8013594 <rmw_init+0x208>)
 80133c6:	4874      	ldr	r0, [pc, #464]	; (8013598 <rmw_init+0x20c>)
 80133c8:	60b7      	str	r7, [r6, #8]
 80133ca:	e9c6 2300 	strd	r2, r3, [r6]
 80133ce:	68eb      	ldr	r3, [r5, #12]
 80133d0:	64b3      	str	r3, [r6, #72]	; 0x48
 80133d2:	2201      	movs	r2, #1
 80133d4:	f7f8 f992 	bl	800b6fc <rmw_uxrce_init_session_memory>
 80133d8:	4620      	mov	r0, r4
 80133da:	4970      	ldr	r1, [pc, #448]	; (801359c <rmw_init+0x210>)
 80133dc:	2204      	movs	r2, #4
 80133de:	f7f8 f9cd 	bl	800b77c <rmw_uxrce_init_static_input_buffer_memory>
 80133e2:	f04f 0800 	mov.w	r8, #0
 80133e6:	486c      	ldr	r0, [pc, #432]	; (8013598 <rmw_init+0x20c>)
 80133e8:	f884 800d 	strb.w	r8, [r4, #13]
 80133ec:	f7ff fe68 	bl	80130c0 <get_memory>
 80133f0:	2800      	cmp	r0, #0
 80133f2:	f000 80a9 	beq.w	8013548 <rmw_init+0x1bc>
 80133f6:	6884      	ldr	r4, [r0, #8]
 80133f8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80133fa:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80133fc:	f890 c010 	ldrb.w	ip, [r0, #16]
 8013400:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8013404:	9101      	str	r1, [sp, #4]
 8013406:	6a00      	ldr	r0, [r0, #32]
 8013408:	9000      	str	r0, [sp, #0]
 801340a:	f104 0910 	add.w	r9, r4, #16
 801340e:	4661      	mov	r1, ip
 8013410:	4648      	mov	r0, r9
 8013412:	f001 f9ed 	bl	80147f0 <uxr_set_custom_transport_callbacks>
 8013416:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 801341a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801341e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8013422:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8013426:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 801342a:	495d      	ldr	r1, [pc, #372]	; (80135a0 <rmw_init+0x214>)
 801342c:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8013430:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8013434:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8013438:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 801343c:	4859      	ldr	r0, [pc, #356]	; (80135a4 <rmw_init+0x218>)
 801343e:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8013442:	2201      	movs	r2, #1
 8013444:	64f4      	str	r4, [r6, #76]	; 0x4c
 8013446:	f7f8 f939 	bl	800b6bc <rmw_uxrce_init_node_memory>
 801344a:	4957      	ldr	r1, [pc, #348]	; (80135a8 <rmw_init+0x21c>)
 801344c:	4857      	ldr	r0, [pc, #348]	; (80135ac <rmw_init+0x220>)
 801344e:	2205      	movs	r2, #5
 8013450:	f7f8 f914 	bl	800b67c <rmw_uxrce_init_subscription_memory>
 8013454:	4956      	ldr	r1, [pc, #344]	; (80135b0 <rmw_init+0x224>)
 8013456:	4857      	ldr	r0, [pc, #348]	; (80135b4 <rmw_init+0x228>)
 8013458:	220a      	movs	r2, #10
 801345a:	f7f8 f8ef 	bl	800b63c <rmw_uxrce_init_publisher_memory>
 801345e:	4956      	ldr	r1, [pc, #344]	; (80135b8 <rmw_init+0x22c>)
 8013460:	4856      	ldr	r0, [pc, #344]	; (80135bc <rmw_init+0x230>)
 8013462:	2201      	movs	r2, #1
 8013464:	f7f8 f8aa 	bl	800b5bc <rmw_uxrce_init_service_memory>
 8013468:	4955      	ldr	r1, [pc, #340]	; (80135c0 <rmw_init+0x234>)
 801346a:	4856      	ldr	r0, [pc, #344]	; (80135c4 <rmw_init+0x238>)
 801346c:	2201      	movs	r2, #1
 801346e:	f7f8 f8c5 	bl	800b5fc <rmw_uxrce_init_client_memory>
 8013472:	4955      	ldr	r1, [pc, #340]	; (80135c8 <rmw_init+0x23c>)
 8013474:	4855      	ldr	r0, [pc, #340]	; (80135cc <rmw_init+0x240>)
 8013476:	220f      	movs	r2, #15
 8013478:	f7f8 f960 	bl	800b73c <rmw_uxrce_init_topic_memory>
 801347c:	4954      	ldr	r1, [pc, #336]	; (80135d0 <rmw_init+0x244>)
 801347e:	4855      	ldr	r0, [pc, #340]	; (80135d4 <rmw_init+0x248>)
 8013480:	2203      	movs	r2, #3
 8013482:	f7f8 f99b 	bl	800b7bc <rmw_uxrce_init_init_options_impl_memory>
 8013486:	4954      	ldr	r1, [pc, #336]	; (80135d8 <rmw_init+0x24c>)
 8013488:	4854      	ldr	r0, [pc, #336]	; (80135dc <rmw_init+0x250>)
 801348a:	2204      	movs	r2, #4
 801348c:	f7f8 f9b6 	bl	800b7fc <rmw_uxrce_init_wait_set_memory>
 8013490:	4953      	ldr	r1, [pc, #332]	; (80135e0 <rmw_init+0x254>)
 8013492:	4854      	ldr	r0, [pc, #336]	; (80135e4 <rmw_init+0x258>)
 8013494:	2204      	movs	r2, #4
 8013496:	f7f8 f9d1 	bl	800b83c <rmw_uxrce_init_guard_condition_memory>
 801349a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 801349c:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801349e:	4642      	mov	r2, r8
 80134a0:	f000 fd9e 	bl	8013fe0 <rmw_uxrce_transport_init>
 80134a4:	4607      	mov	r7, r0
 80134a6:	2800      	cmp	r0, #0
 80134a8:	d158      	bne.n	801355c <rmw_init+0x1d0>
 80134aa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80134ac:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80134b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80134b2:	f504 7122 	add.w	r1, r4, #648	; 0x288
 80134b6:	4628      	mov	r0, r5
 80134b8:	f7f9 ff56 	bl	800d368 <uxr_init_session>
 80134bc:	494a      	ldr	r1, [pc, #296]	; (80135e8 <rmw_init+0x25c>)
 80134be:	4622      	mov	r2, r4
 80134c0:	4628      	mov	r0, r5
 80134c2:	f7f9 ff75 	bl	800d3b0 <uxr_set_topic_callback>
 80134c6:	4949      	ldr	r1, [pc, #292]	; (80135ec <rmw_init+0x260>)
 80134c8:	463a      	mov	r2, r7
 80134ca:	4628      	mov	r0, r5
 80134cc:	f7f9 ff6c 	bl	800d3a8 <uxr_set_status_callback>
 80134d0:	4947      	ldr	r1, [pc, #284]	; (80135f0 <rmw_init+0x264>)
 80134d2:	463a      	mov	r2, r7
 80134d4:	4628      	mov	r0, r5
 80134d6:	f7f9 ff6f 	bl	800d3b8 <uxr_set_request_callback>
 80134da:	4946      	ldr	r1, [pc, #280]	; (80135f4 <rmw_init+0x268>)
 80134dc:	463a      	mov	r2, r7
 80134de:	4628      	mov	r0, r5
 80134e0:	f7f9 ff6e 	bl	800d3c0 <uxr_set_reply_callback>
 80134e4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80134e8:	2304      	movs	r3, #4
 80134ea:	0092      	lsls	r2, r2, #2
 80134ec:	f504 7165 	add.w	r1, r4, #916	; 0x394
 80134f0:	4628      	mov	r0, r5
 80134f2:	f7f9 ffa3 	bl	800d43c <uxr_create_input_reliable_stream>
 80134f6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80134fa:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 80134fe:	0092      	lsls	r2, r2, #2
 8013500:	2304      	movs	r3, #4
 8013502:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8013506:	4628      	mov	r0, r5
 8013508:	f7f9 ff70 	bl	800d3ec <uxr_create_output_reliable_stream>
 801350c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8013510:	4628      	mov	r0, r5
 8013512:	f7f9 ff8d 	bl	800d430 <uxr_create_input_best_effort_stream>
 8013516:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 801351a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 801351e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8013522:	3114      	adds	r1, #20
 8013524:	4628      	mov	r0, r5
 8013526:	f7f9 ff4f 	bl	800d3c8 <uxr_create_output_best_effort_stream>
 801352a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 801352e:	4628      	mov	r0, r5
 8013530:	f7fa fcda 	bl	800dee8 <uxr_create_session>
 8013534:	b1f8      	cbz	r0, 8013576 <rmw_init+0x1ea>
 8013536:	4638      	mov	r0, r7
 8013538:	b003      	add	sp, #12
 801353a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801353e:	270b      	movs	r7, #11
 8013540:	4638      	mov	r0, r7
 8013542:	b003      	add	sp, #12
 8013544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013548:	2701      	movs	r7, #1
 801354a:	4638      	mov	r0, r7
 801354c:	b003      	add	sp, #12
 801354e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013552:	270c      	movs	r7, #12
 8013554:	4638      	mov	r0, r7
 8013556:	b003      	add	sp, #12
 8013558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801355c:	4648      	mov	r0, r9
 801355e:	f001 f989 	bl	8014874 <uxr_close_custom_transport>
 8013562:	480d      	ldr	r0, [pc, #52]	; (8013598 <rmw_init+0x20c>)
 8013564:	4621      	mov	r1, r4
 8013566:	f7ff fdbb 	bl	80130e0 <put_memory>
 801356a:	4638      	mov	r0, r7
 801356c:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8013570:	b003      	add	sp, #12
 8013572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013576:	4648      	mov	r0, r9
 8013578:	f001 f97c 	bl	8014874 <uxr_close_custom_transport>
 801357c:	4806      	ldr	r0, [pc, #24]	; (8013598 <rmw_init+0x20c>)
 801357e:	4621      	mov	r1, r4
 8013580:	f7ff fdae 	bl	80130e0 <put_memory>
 8013584:	64f7      	str	r7, [r6, #76]	; 0x4c
 8013586:	2701      	movs	r7, #1
 8013588:	e7d5      	b.n	8013536 <rmw_init+0x1aa>
 801358a:	bf00      	nop
 801358c:	08018954 	.word	0x08018954
 8013590:	20010b2c 	.word	0x20010b2c
 8013594:	2000cdd8 	.word	0x2000cdd8
 8013598:	20010b1c 	.word	0x20010b1c
 801359c:	2000e380 	.word	0x2000e380
 80135a0:	2000c3fc 	.word	0x2000c3fc
 80135a4:	20010aec 	.word	0x20010aec
 80135a8:	20010480 	.word	0x20010480
 80135ac:	20010b3c 	.word	0x20010b3c
 80135b0:	2000c4a0 	.word	0x2000c4a0
 80135b4:	20010afc 	.word	0x20010afc
 80135b8:	2000cd10 	.word	0x2000cd10
 80135bc:	20010b0c 	.word	0x20010b0c
 80135c0:	2000c230 	.word	0x2000c230
 80135c4:	2000c220 	.word	0x2000c220
 80135c8:	200108b8 	.word	0x200108b8
 80135cc:	20010b4c 	.word	0x20010b4c
 80135d0:	2000c378 	.word	0x2000c378
 80135d4:	20010adc 	.word	0x20010adc
 80135d8:	20010a5c 	.word	0x20010a5c
 80135dc:	20010b5c 	.word	0x20010b5c
 80135e0:	2000c2f8 	.word	0x2000c2f8
 80135e4:	20010acc 	.word	0x20010acc
 80135e8:	08016561 	.word	0x08016561
 80135ec:	08016559 	.word	0x08016559
 80135f0:	080165f9 	.word	0x080165f9
 80135f4:	08016695 	.word	0x08016695

080135f8 <rmw_context_fini>:
 80135f8:	4b17      	ldr	r3, [pc, #92]	; (8013658 <rmw_context_fini+0x60>)
 80135fa:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80135fc:	b570      	push	{r4, r5, r6, lr}
 80135fe:	681c      	ldr	r4, [r3, #0]
 8013600:	4605      	mov	r5, r0
 8013602:	b334      	cbz	r4, 8013652 <rmw_context_fini+0x5a>
 8013604:	2600      	movs	r6, #0
 8013606:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801360a:	6902      	ldr	r2, [r0, #16]
 801360c:	428a      	cmp	r2, r1
 801360e:	d018      	beq.n	8013642 <rmw_context_fini+0x4a>
 8013610:	2c00      	cmp	r4, #0
 8013612:	d1f8      	bne.n	8013606 <rmw_context_fini+0xe>
 8013614:	b189      	cbz	r1, 801363a <rmw_context_fini+0x42>
 8013616:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 801361a:	789b      	ldrb	r3, [r3, #2]
 801361c:	2b01      	cmp	r3, #1
 801361e:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8013622:	bf14      	ite	ne
 8013624:	210a      	movne	r1, #10
 8013626:	2100      	moveq	r1, #0
 8013628:	f7fa fc36 	bl	800de98 <uxr_delete_session_retries>
 801362c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 801362e:	f7f8 f925 	bl	800b87c <rmw_uxrce_fini_session_memory>
 8013632:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8013634:	3010      	adds	r0, #16
 8013636:	f001 f91d 	bl	8014874 <uxr_close_custom_transport>
 801363a:	2300      	movs	r3, #0
 801363c:	64eb      	str	r3, [r5, #76]	; 0x4c
 801363e:	4630      	mov	r0, r6
 8013640:	bd70      	pop	{r4, r5, r6, pc}
 8013642:	3018      	adds	r0, #24
 8013644:	f000 f90e 	bl	8013864 <rmw_destroy_node>
 8013648:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 801364a:	4606      	mov	r6, r0
 801364c:	2c00      	cmp	r4, #0
 801364e:	d1da      	bne.n	8013606 <rmw_context_fini+0xe>
 8013650:	e7e0      	b.n	8013614 <rmw_context_fini+0x1c>
 8013652:	4626      	mov	r6, r4
 8013654:	e7de      	b.n	8013614 <rmw_context_fini+0x1c>
 8013656:	bf00      	nop
 8013658:	20010aec 	.word	0x20010aec

0801365c <create_topic>:
 801365c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013660:	4605      	mov	r5, r0
 8013662:	b084      	sub	sp, #16
 8013664:	4822      	ldr	r0, [pc, #136]	; (80136f0 <create_topic+0x94>)
 8013666:	460f      	mov	r7, r1
 8013668:	4616      	mov	r6, r2
 801366a:	f7ff fd29 	bl	80130c0 <get_memory>
 801366e:	4604      	mov	r4, r0
 8013670:	2800      	cmp	r0, #0
 8013672:	d039      	beq.n	80136e8 <create_topic+0x8c>
 8013674:	692b      	ldr	r3, [r5, #16]
 8013676:	6884      	ldr	r4, [r0, #8]
 8013678:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80136f8 <create_topic+0x9c>
 801367c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013680:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8013684:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8013688:	1c42      	adds	r2, r0, #1
 801368a:	2102      	movs	r1, #2
 801368c:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8013690:	f7f9 fdaa 	bl	800d1e8 <uxr_object_id>
 8013694:	223c      	movs	r2, #60	; 0x3c
 8013696:	6120      	str	r0, [r4, #16]
 8013698:	4641      	mov	r1, r8
 801369a:	4638      	mov	r0, r7
 801369c:	f7f8 facc 	bl	800bc38 <generate_topic_name>
 80136a0:	b1f0      	cbz	r0, 80136e0 <create_topic+0x84>
 80136a2:	4f14      	ldr	r7, [pc, #80]	; (80136f4 <create_topic+0x98>)
 80136a4:	4630      	mov	r0, r6
 80136a6:	2264      	movs	r2, #100	; 0x64
 80136a8:	4639      	mov	r1, r7
 80136aa:	f7f8 fa95 	bl	800bbd8 <generate_type_name>
 80136ae:	b1b8      	cbz	r0, 80136e0 <create_topic+0x84>
 80136b0:	6928      	ldr	r0, [r5, #16]
 80136b2:	2306      	movs	r3, #6
 80136b4:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80136b8:	f8cd 8000 	str.w	r8, [sp]
 80136bc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80136c0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80136c4:	6811      	ldr	r1, [r2, #0]
 80136c6:	696b      	ldr	r3, [r5, #20]
 80136c8:	6922      	ldr	r2, [r4, #16]
 80136ca:	f7f9 fc09 	bl	800cee0 <uxr_buffer_create_topic_bin>
 80136ce:	4602      	mov	r2, r0
 80136d0:	6928      	ldr	r0, [r5, #16]
 80136d2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80136d6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80136da:	f7f8 fa47 	bl	800bb6c <run_xrce_session>
 80136de:	b918      	cbnz	r0, 80136e8 <create_topic+0x8c>
 80136e0:	4620      	mov	r0, r4
 80136e2:	f7f8 f941 	bl	800b968 <rmw_uxrce_fini_topic_memory>
 80136e6:	2400      	movs	r4, #0
 80136e8:	4620      	mov	r0, r4
 80136ea:	b004      	add	sp, #16
 80136ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136f0:	20010b4c 	.word	0x20010b4c
 80136f4:	20010c38 	.word	0x20010c38
 80136f8:	20010bfc 	.word	0x20010bfc

080136fc <destroy_topic>:
 80136fc:	b538      	push	{r3, r4, r5, lr}
 80136fe:	6985      	ldr	r5, [r0, #24]
 8013700:	b1d5      	cbz	r5, 8013738 <destroy_topic+0x3c>
 8013702:	4604      	mov	r4, r0
 8013704:	6928      	ldr	r0, [r5, #16]
 8013706:	6922      	ldr	r2, [r4, #16]
 8013708:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801370c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013710:	6819      	ldr	r1, [r3, #0]
 8013712:	f7f9 fb67 	bl	800cde4 <uxr_buffer_delete_entity>
 8013716:	4602      	mov	r2, r0
 8013718:	6928      	ldr	r0, [r5, #16]
 801371a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801371e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013722:	f7f8 fa23 	bl	800bb6c <run_xrce_session>
 8013726:	2800      	cmp	r0, #0
 8013728:	4620      	mov	r0, r4
 801372a:	bf14      	ite	ne
 801372c:	2400      	movne	r4, #0
 801372e:	2402      	moveq	r4, #2
 8013730:	f7f8 f91a 	bl	800b968 <rmw_uxrce_fini_topic_memory>
 8013734:	4620      	mov	r0, r4
 8013736:	bd38      	pop	{r3, r4, r5, pc}
 8013738:	2401      	movs	r4, #1
 801373a:	4620      	mov	r0, r4
 801373c:	bd38      	pop	{r3, r4, r5, pc}
 801373e:	bf00      	nop

08013740 <create_node>:
 8013740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013744:	b083      	sub	sp, #12
 8013746:	2b00      	cmp	r3, #0
 8013748:	d05f      	beq.n	801380a <create_node+0xca>
 801374a:	4606      	mov	r6, r0
 801374c:	4835      	ldr	r0, [pc, #212]	; (8013824 <create_node+0xe4>)
 801374e:	460f      	mov	r7, r1
 8013750:	4690      	mov	r8, r2
 8013752:	461d      	mov	r5, r3
 8013754:	f7ff fcb4 	bl	80130c0 <get_memory>
 8013758:	2800      	cmp	r0, #0
 801375a:	d056      	beq.n	801380a <create_node+0xca>
 801375c:	6884      	ldr	r4, [r0, #8]
 801375e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8013760:	6123      	str	r3, [r4, #16]
 8013762:	f7ff fd15 	bl	8013190 <rmw_get_implementation_identifier>
 8013766:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 801376a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801376e:	f8c4 9020 	str.w	r9, [r4, #32]
 8013772:	4630      	mov	r0, r6
 8013774:	f7ec fd3e 	bl	80001f4 <strlen>
 8013778:	1c42      	adds	r2, r0, #1
 801377a:	2a3c      	cmp	r2, #60	; 0x3c
 801377c:	f104 0518 	add.w	r5, r4, #24
 8013780:	d840      	bhi.n	8013804 <create_node+0xc4>
 8013782:	4648      	mov	r0, r9
 8013784:	4631      	mov	r1, r6
 8013786:	f104 0968 	add.w	r9, r4, #104	; 0x68
 801378a:	f003 fd04 	bl	8017196 <memcpy>
 801378e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8013792:	4638      	mov	r0, r7
 8013794:	f7ec fd2e 	bl	80001f4 <strlen>
 8013798:	1c42      	adds	r2, r0, #1
 801379a:	2a3c      	cmp	r2, #60	; 0x3c
 801379c:	d832      	bhi.n	8013804 <create_node+0xc4>
 801379e:	4639      	mov	r1, r7
 80137a0:	4648      	mov	r0, r9
 80137a2:	f003 fcf8 	bl	8017196 <memcpy>
 80137a6:	6923      	ldr	r3, [r4, #16]
 80137a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80137ac:	2101      	movs	r1, #1
 80137ae:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 80137b2:	1842      	adds	r2, r0, r1
 80137b4:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 80137b8:	f7f9 fd16 	bl	800d1e8 <uxr_object_id>
 80137bc:	6160      	str	r0, [r4, #20]
 80137be:	783b      	ldrb	r3, [r7, #0]
 80137c0:	2b2f      	cmp	r3, #47	; 0x2f
 80137c2:	d127      	bne.n	8013814 <create_node+0xd4>
 80137c4:	787b      	ldrb	r3, [r7, #1]
 80137c6:	bb2b      	cbnz	r3, 8013814 <create_node+0xd4>
 80137c8:	4a17      	ldr	r2, [pc, #92]	; (8013828 <create_node+0xe8>)
 80137ca:	4818      	ldr	r0, [pc, #96]	; (801382c <create_node+0xec>)
 80137cc:	4633      	mov	r3, r6
 80137ce:	213c      	movs	r1, #60	; 0x3c
 80137d0:	f003 fae8 	bl	8016da4 <sniprintf>
 80137d4:	6920      	ldr	r0, [r4, #16]
 80137d6:	4915      	ldr	r1, [pc, #84]	; (801382c <create_node+0xec>)
 80137d8:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80137dc:	9100      	str	r1, [sp, #0]
 80137de:	2106      	movs	r1, #6
 80137e0:	9101      	str	r1, [sp, #4]
 80137e2:	6811      	ldr	r1, [r2, #0]
 80137e4:	6962      	ldr	r2, [r4, #20]
 80137e6:	fa1f f388 	uxth.w	r3, r8
 80137ea:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80137ee:	f7f9 fb45 	bl	800ce7c <uxr_buffer_create_participant_bin>
 80137f2:	4602      	mov	r2, r0
 80137f4:	6920      	ldr	r0, [r4, #16]
 80137f6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80137fa:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80137fe:	f7f8 f9b5 	bl	800bb6c <run_xrce_session>
 8013802:	b918      	cbnz	r0, 801380c <create_node+0xcc>
 8013804:	4628      	mov	r0, r5
 8013806:	f7f8 f83f 	bl	800b888 <rmw_uxrce_fini_node_memory>
 801380a:	2500      	movs	r5, #0
 801380c:	4628      	mov	r0, r5
 801380e:	b003      	add	sp, #12
 8013810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013814:	4a06      	ldr	r2, [pc, #24]	; (8013830 <create_node+0xf0>)
 8013816:	9600      	str	r6, [sp, #0]
 8013818:	463b      	mov	r3, r7
 801381a:	213c      	movs	r1, #60	; 0x3c
 801381c:	4803      	ldr	r0, [pc, #12]	; (801382c <create_node+0xec>)
 801381e:	f003 fac1 	bl	8016da4 <sniprintf>
 8013822:	e7d7      	b.n	80137d4 <create_node+0x94>
 8013824:	20010aec 	.word	0x20010aec
 8013828:	08018234 	.word	0x08018234
 801382c:	20010c9c 	.word	0x20010c9c
 8013830:	080183c4 	.word	0x080183c4

08013834 <rmw_create_node>:
 8013834:	b199      	cbz	r1, 801385e <rmw_create_node+0x2a>
 8013836:	780b      	ldrb	r3, [r1, #0]
 8013838:	468c      	mov	ip, r1
 801383a:	b183      	cbz	r3, 801385e <rmw_create_node+0x2a>
 801383c:	b410      	push	{r4}
 801383e:	4614      	mov	r4, r2
 8013840:	b14a      	cbz	r2, 8013856 <rmw_create_node+0x22>
 8013842:	7813      	ldrb	r3, [r2, #0]
 8013844:	b13b      	cbz	r3, 8013856 <rmw_create_node+0x22>
 8013846:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8013848:	4603      	mov	r3, r0
 801384a:	4621      	mov	r1, r4
 801384c:	4660      	mov	r0, ip
 801384e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013852:	f7ff bf75 	b.w	8013740 <create_node>
 8013856:	2000      	movs	r0, #0
 8013858:	f85d 4b04 	ldr.w	r4, [sp], #4
 801385c:	4770      	bx	lr
 801385e:	2000      	movs	r0, #0
 8013860:	4770      	bx	lr
 8013862:	bf00      	nop

08013864 <rmw_destroy_node>:
 8013864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013866:	b328      	cbz	r0, 80138b4 <rmw_destroy_node+0x50>
 8013868:	4607      	mov	r7, r0
 801386a:	6800      	ldr	r0, [r0, #0]
 801386c:	b120      	cbz	r0, 8013878 <rmw_destroy_node+0x14>
 801386e:	4b36      	ldr	r3, [pc, #216]	; (8013948 <rmw_destroy_node+0xe4>)
 8013870:	6819      	ldr	r1, [r3, #0]
 8013872:	f7ec fcb5 	bl	80001e0 <strcmp>
 8013876:	b9e8      	cbnz	r0, 80138b4 <rmw_destroy_node+0x50>
 8013878:	687d      	ldr	r5, [r7, #4]
 801387a:	b1dd      	cbz	r5, 80138b4 <rmw_destroy_node+0x50>
 801387c:	4b33      	ldr	r3, [pc, #204]	; (801394c <rmw_destroy_node+0xe8>)
 801387e:	681c      	ldr	r4, [r3, #0]
 8013880:	2c00      	cmp	r4, #0
 8013882:	d05f      	beq.n	8013944 <rmw_destroy_node+0xe0>
 8013884:	2600      	movs	r6, #0
 8013886:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801388a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 801388e:	429d      	cmp	r5, r3
 8013890:	d013      	beq.n	80138ba <rmw_destroy_node+0x56>
 8013892:	2c00      	cmp	r4, #0
 8013894:	d1f7      	bne.n	8013886 <rmw_destroy_node+0x22>
 8013896:	4b2e      	ldr	r3, [pc, #184]	; (8013950 <rmw_destroy_node+0xec>)
 8013898:	681c      	ldr	r4, [r3, #0]
 801389a:	b1c4      	cbz	r4, 80138ce <rmw_destroy_node+0x6a>
 801389c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80138a0:	6a0b      	ldr	r3, [r1, #32]
 80138a2:	429d      	cmp	r5, r3
 80138a4:	d1f9      	bne.n	801389a <rmw_destroy_node+0x36>
 80138a6:	317c      	adds	r1, #124	; 0x7c
 80138a8:	4638      	mov	r0, r7
 80138aa:	f000 fae5 	bl	8013e78 <rmw_destroy_subscription>
 80138ae:	2801      	cmp	r0, #1
 80138b0:	4606      	mov	r6, r0
 80138b2:	d1f2      	bne.n	801389a <rmw_destroy_node+0x36>
 80138b4:	2601      	movs	r6, #1
 80138b6:	4630      	mov	r0, r6
 80138b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138ba:	3184      	adds	r1, #132	; 0x84
 80138bc:	4638      	mov	r0, r7
 80138be:	f7f7 fe2b 	bl	800b518 <rmw_destroy_publisher>
 80138c2:	2801      	cmp	r0, #1
 80138c4:	4606      	mov	r6, r0
 80138c6:	d0f5      	beq.n	80138b4 <rmw_destroy_node+0x50>
 80138c8:	2c00      	cmp	r4, #0
 80138ca:	d1dc      	bne.n	8013886 <rmw_destroy_node+0x22>
 80138cc:	e7e3      	b.n	8013896 <rmw_destroy_node+0x32>
 80138ce:	4b21      	ldr	r3, [pc, #132]	; (8013954 <rmw_destroy_node+0xf0>)
 80138d0:	681c      	ldr	r4, [r3, #0]
 80138d2:	b16c      	cbz	r4, 80138f0 <rmw_destroy_node+0x8c>
 80138d4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80138d8:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 80138da:	429d      	cmp	r5, r3
 80138dc:	d1f9      	bne.n	80138d2 <rmw_destroy_node+0x6e>
 80138de:	317c      	adds	r1, #124	; 0x7c
 80138e0:	4638      	mov	r0, r7
 80138e2:	f000 f993 	bl	8013c0c <rmw_destroy_service>
 80138e6:	2801      	cmp	r0, #1
 80138e8:	4606      	mov	r6, r0
 80138ea:	d0e3      	beq.n	80138b4 <rmw_destroy_node+0x50>
 80138ec:	2c00      	cmp	r4, #0
 80138ee:	d1f1      	bne.n	80138d4 <rmw_destroy_node+0x70>
 80138f0:	4b19      	ldr	r3, [pc, #100]	; (8013958 <rmw_destroy_node+0xf4>)
 80138f2:	681c      	ldr	r4, [r3, #0]
 80138f4:	b16c      	cbz	r4, 8013912 <rmw_destroy_node+0xae>
 80138f6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80138fa:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 80138fc:	429d      	cmp	r5, r3
 80138fe:	d1f9      	bne.n	80138f4 <rmw_destroy_node+0x90>
 8013900:	317c      	adds	r1, #124	; 0x7c
 8013902:	4638      	mov	r0, r7
 8013904:	f7ff fc00 	bl	8013108 <rmw_destroy_client>
 8013908:	2801      	cmp	r0, #1
 801390a:	4606      	mov	r6, r0
 801390c:	d0d2      	beq.n	80138b4 <rmw_destroy_node+0x50>
 801390e:	2c00      	cmp	r4, #0
 8013910:	d1f1      	bne.n	80138f6 <rmw_destroy_node+0x92>
 8013912:	6928      	ldr	r0, [r5, #16]
 8013914:	696a      	ldr	r2, [r5, #20]
 8013916:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801391a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801391e:	6819      	ldr	r1, [r3, #0]
 8013920:	f7f9 fa60 	bl	800cde4 <uxr_buffer_delete_entity>
 8013924:	4602      	mov	r2, r0
 8013926:	6928      	ldr	r0, [r5, #16]
 8013928:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801392c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013930:	f7f8 f91c 	bl	800bb6c <run_xrce_session>
 8013934:	2800      	cmp	r0, #0
 8013936:	bf08      	it	eq
 8013938:	2602      	moveq	r6, #2
 801393a:	4638      	mov	r0, r7
 801393c:	f7f7 ffa4 	bl	800b888 <rmw_uxrce_fini_node_memory>
 8013940:	4630      	mov	r0, r6
 8013942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013944:	4626      	mov	r6, r4
 8013946:	e7a6      	b.n	8013896 <rmw_destroy_node+0x32>
 8013948:	08018954 	.word	0x08018954
 801394c:	20010afc 	.word	0x20010afc
 8013950:	20010b3c 	.word	0x20010b3c
 8013954:	20010b0c 	.word	0x20010b0c
 8013958:	2000c220 	.word	0x2000c220

0801395c <rmw_node_get_graph_guard_condition>:
 801395c:	6843      	ldr	r3, [r0, #4]
 801395e:	6918      	ldr	r0, [r3, #16]
 8013960:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8013964:	4770      	bx	lr
 8013966:	bf00      	nop

08013968 <rmw_send_request>:
 8013968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801396c:	4604      	mov	r4, r0
 801396e:	6800      	ldr	r0, [r0, #0]
 8013970:	b08b      	sub	sp, #44	; 0x2c
 8013972:	460e      	mov	r6, r1
 8013974:	4615      	mov	r5, r2
 8013976:	b128      	cbz	r0, 8013984 <rmw_send_request+0x1c>
 8013978:	4b21      	ldr	r3, [pc, #132]	; (8013a00 <rmw_send_request+0x98>)
 801397a:	6819      	ldr	r1, [r3, #0]
 801397c:	f7ec fc30 	bl	80001e0 <strcmp>
 8013980:	2800      	cmp	r0, #0
 8013982:	d139      	bne.n	80139f8 <rmw_send_request+0x90>
 8013984:	6864      	ldr	r4, [r4, #4]
 8013986:	6963      	ldr	r3, [r4, #20]
 8013988:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 801398c:	689b      	ldr	r3, [r3, #8]
 801398e:	4798      	blx	r3
 8013990:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013994:	4630      	mov	r0, r6
 8013996:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801399a:	4798      	blx	r3
 801399c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80139a0:	9000      	str	r0, [sp, #0]
 80139a2:	6922      	ldr	r2, [r4, #16]
 80139a4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80139a6:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80139aa:	ab02      	add	r3, sp, #8
 80139ac:	f7fa ff18 	bl	800e7e0 <uxr_prepare_output_stream>
 80139b0:	2700      	movs	r7, #0
 80139b2:	6028      	str	r0, [r5, #0]
 80139b4:	606f      	str	r7, [r5, #4]
 80139b6:	b198      	cbz	r0, 80139e0 <rmw_send_request+0x78>
 80139b8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80139bc:	a902      	add	r1, sp, #8
 80139be:	4630      	mov	r0, r6
 80139c0:	4798      	blx	r3
 80139c2:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 80139c6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80139ca:	2b01      	cmp	r3, #1
 80139cc:	d00c      	beq.n	80139e8 <rmw_send_request+0x80>
 80139ce:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80139d0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80139d4:	f7fa f918 	bl	800dc08 <uxr_run_session_until_confirm_delivery>
 80139d8:	4638      	mov	r0, r7
 80139da:	b00b      	add	sp, #44	; 0x2c
 80139dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139e0:	2001      	movs	r0, #1
 80139e2:	b00b      	add	sp, #44	; 0x2c
 80139e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139e8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80139ec:	f7f9 fd4c 	bl	800d488 <uxr_flash_output_streams>
 80139f0:	4638      	mov	r0, r7
 80139f2:	b00b      	add	sp, #44	; 0x2c
 80139f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139f8:	200c      	movs	r0, #12
 80139fa:	b00b      	add	sp, #44	; 0x2c
 80139fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a00:	08018954 	.word	0x08018954

08013a04 <rmw_take_request>:
 8013a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a08:	4605      	mov	r5, r0
 8013a0a:	6800      	ldr	r0, [r0, #0]
 8013a0c:	b089      	sub	sp, #36	; 0x24
 8013a0e:	460c      	mov	r4, r1
 8013a10:	4690      	mov	r8, r2
 8013a12:	461e      	mov	r6, r3
 8013a14:	b128      	cbz	r0, 8013a22 <rmw_take_request+0x1e>
 8013a16:	4b28      	ldr	r3, [pc, #160]	; (8013ab8 <rmw_take_request+0xb4>)
 8013a18:	6819      	ldr	r1, [r3, #0]
 8013a1a:	f7ec fbe1 	bl	80001e0 <strcmp>
 8013a1e:	2800      	cmp	r0, #0
 8013a20:	d146      	bne.n	8013ab0 <rmw_take_request+0xac>
 8013a22:	b10e      	cbz	r6, 8013a28 <rmw_take_request+0x24>
 8013a24:	2300      	movs	r3, #0
 8013a26:	7033      	strb	r3, [r6, #0]
 8013a28:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013a2c:	f7f8 f820 	bl	800ba70 <rmw_uxrce_clean_expired_static_input_buffer>
 8013a30:	4648      	mov	r0, r9
 8013a32:	f7f7 fff5 	bl	800ba20 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013a36:	4607      	mov	r7, r0
 8013a38:	b3b0      	cbz	r0, 8013aa8 <rmw_take_request+0xa4>
 8013a3a:	6885      	ldr	r5, [r0, #8]
 8013a3c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	; 0x838
 8013a40:	f8d5 283c 	ldr.w	r2, [r5, #2108]	; 0x83c
 8013a44:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8013a48:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8013a4c:	7423      	strb	r3, [r4, #16]
 8013a4e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 8013a52:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 8013a56:	74e2      	strb	r2, [r4, #19]
 8013a58:	f8a4 3011 	strh.w	r3, [r4, #17]
 8013a5c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 8013a60:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 8013a64:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 8013a68:	61e1      	str	r1, [r4, #28]
 8013a6a:	6162      	str	r2, [r4, #20]
 8013a6c:	61a3      	str	r3, [r4, #24]
 8013a6e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013a72:	689b      	ldr	r3, [r3, #8]
 8013a74:	4798      	blx	r3
 8013a76:	6844      	ldr	r4, [r0, #4]
 8013a78:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8013a7c:	f105 0110 	add.w	r1, r5, #16
 8013a80:	4668      	mov	r0, sp
 8013a82:	f7f9 f93f 	bl	800cd04 <ucdr_init_buffer>
 8013a86:	68e3      	ldr	r3, [r4, #12]
 8013a88:	4641      	mov	r1, r8
 8013a8a:	4668      	mov	r0, sp
 8013a8c:	4798      	blx	r3
 8013a8e:	4639      	mov	r1, r7
 8013a90:	4604      	mov	r4, r0
 8013a92:	480a      	ldr	r0, [pc, #40]	; (8013abc <rmw_take_request+0xb8>)
 8013a94:	f7ff fb24 	bl	80130e0 <put_memory>
 8013a98:	b106      	cbz	r6, 8013a9c <rmw_take_request+0x98>
 8013a9a:	7034      	strb	r4, [r6, #0]
 8013a9c:	f084 0001 	eor.w	r0, r4, #1
 8013aa0:	b2c0      	uxtb	r0, r0
 8013aa2:	b009      	add	sp, #36	; 0x24
 8013aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013aa8:	2001      	movs	r0, #1
 8013aaa:	b009      	add	sp, #36	; 0x24
 8013aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ab0:	200c      	movs	r0, #12
 8013ab2:	b009      	add	sp, #36	; 0x24
 8013ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ab8:	08018954 	.word	0x08018954
 8013abc:	20010b2c 	.word	0x20010b2c

08013ac0 <rmw_send_response>:
 8013ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ac2:	4605      	mov	r5, r0
 8013ac4:	6800      	ldr	r0, [r0, #0]
 8013ac6:	b091      	sub	sp, #68	; 0x44
 8013ac8:	460c      	mov	r4, r1
 8013aca:	4616      	mov	r6, r2
 8013acc:	b128      	cbz	r0, 8013ada <rmw_send_response+0x1a>
 8013ace:	4b29      	ldr	r3, [pc, #164]	; (8013b74 <rmw_send_response+0xb4>)
 8013ad0:	6819      	ldr	r1, [r3, #0]
 8013ad2:	f7ec fb85 	bl	80001e0 <strcmp>
 8013ad6:	2800      	cmp	r0, #0
 8013ad8:	d141      	bne.n	8013b5e <rmw_send_response+0x9e>
 8013ada:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8013ade:	9306      	str	r3, [sp, #24]
 8013ae0:	4623      	mov	r3, r4
 8013ae2:	9207      	str	r2, [sp, #28]
 8013ae4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ae8:	686d      	ldr	r5, [r5, #4]
 8013aea:	789b      	ldrb	r3, [r3, #2]
 8013aec:	68a1      	ldr	r1, [r4, #8]
 8013aee:	f88d 2017 	strb.w	r2, [sp, #23]
 8013af2:	f88d 3016 	strb.w	r3, [sp, #22]
 8013af6:	68e2      	ldr	r2, [r4, #12]
 8013af8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8013afc:	6860      	ldr	r0, [r4, #4]
 8013afe:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013b02:	ab02      	add	r3, sp, #8
 8013b04:	c307      	stmia	r3!, {r0, r1, r2}
 8013b06:	696b      	ldr	r3, [r5, #20]
 8013b08:	6faf      	ldr	r7, [r5, #120]	; 0x78
 8013b0a:	68db      	ldr	r3, [r3, #12]
 8013b0c:	4798      	blx	r3
 8013b0e:	6844      	ldr	r4, [r0, #4]
 8013b10:	4630      	mov	r0, r6
 8013b12:	6923      	ldr	r3, [r4, #16]
 8013b14:	4798      	blx	r3
 8013b16:	f100 0318 	add.w	r3, r0, #24
 8013b1a:	6938      	ldr	r0, [r7, #16]
 8013b1c:	9300      	str	r3, [sp, #0]
 8013b1e:	692a      	ldr	r2, [r5, #16]
 8013b20:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8013b22:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013b26:	ab08      	add	r3, sp, #32
 8013b28:	f7fa fe5a 	bl	800e7e0 <uxr_prepare_output_stream>
 8013b2c:	b910      	cbnz	r0, 8013b34 <rmw_send_response+0x74>
 8013b2e:	2001      	movs	r0, #1
 8013b30:	b011      	add	sp, #68	; 0x44
 8013b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b34:	a902      	add	r1, sp, #8
 8013b36:	a808      	add	r0, sp, #32
 8013b38:	f7fb ff8a 	bl	800fa50 <uxr_serialize_SampleIdentity>
 8013b3c:	68a3      	ldr	r3, [r4, #8]
 8013b3e:	a908      	add	r1, sp, #32
 8013b40:	4630      	mov	r0, r6
 8013b42:	4798      	blx	r3
 8013b44:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8013b48:	6938      	ldr	r0, [r7, #16]
 8013b4a:	2b01      	cmp	r3, #1
 8013b4c:	d00a      	beq.n	8013b64 <rmw_send_response+0xa4>
 8013b4e:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8013b50:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013b54:	f7fa f858 	bl	800dc08 <uxr_run_session_until_confirm_delivery>
 8013b58:	2000      	movs	r0, #0
 8013b5a:	b011      	add	sp, #68	; 0x44
 8013b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b5e:	200c      	movs	r0, #12
 8013b60:	b011      	add	sp, #68	; 0x44
 8013b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b64:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013b68:	f7f9 fc8e 	bl	800d488 <uxr_flash_output_streams>
 8013b6c:	2000      	movs	r0, #0
 8013b6e:	b011      	add	sp, #68	; 0x44
 8013b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b72:	bf00      	nop
 8013b74:	08018954 	.word	0x08018954

08013b78 <rmw_take_response>:
 8013b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b7c:	4604      	mov	r4, r0
 8013b7e:	6800      	ldr	r0, [r0, #0]
 8013b80:	b088      	sub	sp, #32
 8013b82:	4688      	mov	r8, r1
 8013b84:	4617      	mov	r7, r2
 8013b86:	461d      	mov	r5, r3
 8013b88:	b120      	cbz	r0, 8013b94 <rmw_take_response+0x1c>
 8013b8a:	4b1e      	ldr	r3, [pc, #120]	; (8013c04 <rmw_take_response+0x8c>)
 8013b8c:	6819      	ldr	r1, [r3, #0]
 8013b8e:	f7ec fb27 	bl	80001e0 <strcmp>
 8013b92:	bb78      	cbnz	r0, 8013bf4 <rmw_take_response+0x7c>
 8013b94:	b10d      	cbz	r5, 8013b9a <rmw_take_response+0x22>
 8013b96:	2300      	movs	r3, #0
 8013b98:	702b      	strb	r3, [r5, #0]
 8013b9a:	6864      	ldr	r4, [r4, #4]
 8013b9c:	f7f7 ff68 	bl	800ba70 <rmw_uxrce_clean_expired_static_input_buffer>
 8013ba0:	4620      	mov	r0, r4
 8013ba2:	f7f7 ff3d 	bl	800ba20 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013ba6:	4606      	mov	r6, r0
 8013ba8:	b340      	cbz	r0, 8013bfc <rmw_take_response+0x84>
 8013baa:	6963      	ldr	r3, [r4, #20]
 8013bac:	6884      	ldr	r4, [r0, #8]
 8013bae:	68db      	ldr	r3, [r3, #12]
 8013bb0:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 8013bb4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8013bb8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8013bbc:	4798      	blx	r3
 8013bbe:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013bc2:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8013bc6:	f104 0110 	add.w	r1, r4, #16
 8013bca:	4668      	mov	r0, sp
 8013bcc:	f7f9 f89a 	bl	800cd04 <ucdr_init_buffer>
 8013bd0:	4639      	mov	r1, r7
 8013bd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013bd6:	4668      	mov	r0, sp
 8013bd8:	4798      	blx	r3
 8013bda:	4631      	mov	r1, r6
 8013bdc:	4604      	mov	r4, r0
 8013bde:	480a      	ldr	r0, [pc, #40]	; (8013c08 <rmw_take_response+0x90>)
 8013be0:	f7ff fa7e 	bl	80130e0 <put_memory>
 8013be4:	b105      	cbz	r5, 8013be8 <rmw_take_response+0x70>
 8013be6:	702c      	strb	r4, [r5, #0]
 8013be8:	f084 0001 	eor.w	r0, r4, #1
 8013bec:	b2c0      	uxtb	r0, r0
 8013bee:	b008      	add	sp, #32
 8013bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bf4:	200c      	movs	r0, #12
 8013bf6:	b008      	add	sp, #32
 8013bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bfc:	2001      	movs	r0, #1
 8013bfe:	b008      	add	sp, #32
 8013c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c04:	08018954 	.word	0x08018954
 8013c08:	20010b2c 	.word	0x20010b2c

08013c0c <rmw_destroy_service>:
 8013c0c:	b570      	push	{r4, r5, r6, lr}
 8013c0e:	b128      	cbz	r0, 8013c1c <rmw_destroy_service+0x10>
 8013c10:	4604      	mov	r4, r0
 8013c12:	6800      	ldr	r0, [r0, #0]
 8013c14:	460d      	mov	r5, r1
 8013c16:	f7f8 f829 	bl	800bc6c <is_uxrce_rmw_identifier_valid>
 8013c1a:	b910      	cbnz	r0, 8013c22 <rmw_destroy_service+0x16>
 8013c1c:	2401      	movs	r4, #1
 8013c1e:	4620      	mov	r0, r4
 8013c20:	bd70      	pop	{r4, r5, r6, pc}
 8013c22:	6863      	ldr	r3, [r4, #4]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d0f9      	beq.n	8013c1c <rmw_destroy_service+0x10>
 8013c28:	2d00      	cmp	r5, #0
 8013c2a:	d0f7      	beq.n	8013c1c <rmw_destroy_service+0x10>
 8013c2c:	6828      	ldr	r0, [r5, #0]
 8013c2e:	f7f8 f81d 	bl	800bc6c <is_uxrce_rmw_identifier_valid>
 8013c32:	2800      	cmp	r0, #0
 8013c34:	d0f2      	beq.n	8013c1c <rmw_destroy_service+0x10>
 8013c36:	686e      	ldr	r6, [r5, #4]
 8013c38:	2e00      	cmp	r6, #0
 8013c3a:	d0ef      	beq.n	8013c1c <rmw_destroy_service+0x10>
 8013c3c:	6864      	ldr	r4, [r4, #4]
 8013c3e:	6932      	ldr	r2, [r6, #16]
 8013c40:	6920      	ldr	r0, [r4, #16]
 8013c42:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013c46:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013c4a:	6819      	ldr	r1, [r3, #0]
 8013c4c:	f001 fb98 	bl	8015380 <uxr_buffer_cancel_data>
 8013c50:	4602      	mov	r2, r0
 8013c52:	6920      	ldr	r0, [r4, #16]
 8013c54:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013c58:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013c5c:	f7f7 ff86 	bl	800bb6c <run_xrce_session>
 8013c60:	6920      	ldr	r0, [r4, #16]
 8013c62:	6932      	ldr	r2, [r6, #16]
 8013c64:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013c68:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013c6c:	6819      	ldr	r1, [r3, #0]
 8013c6e:	f7f9 f8b9 	bl	800cde4 <uxr_buffer_delete_entity>
 8013c72:	4602      	mov	r2, r0
 8013c74:	6920      	ldr	r0, [r4, #16]
 8013c76:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013c7a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013c7e:	f7f7 ff75 	bl	800bb6c <run_xrce_session>
 8013c82:	2800      	cmp	r0, #0
 8013c84:	4628      	mov	r0, r5
 8013c86:	bf14      	ite	ne
 8013c88:	2400      	movne	r4, #0
 8013c8a:	2402      	moveq	r4, #2
 8013c8c:	f7f7 fe40 	bl	800b910 <rmw_uxrce_fini_service_memory>
 8013c90:	e7c5      	b.n	8013c1e <rmw_destroy_service+0x12>
 8013c92:	bf00      	nop

08013c94 <rmw_create_subscription>:
 8013c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c98:	b08d      	sub	sp, #52	; 0x34
 8013c9a:	2800      	cmp	r0, #0
 8013c9c:	f000 80d1 	beq.w	8013e42 <rmw_create_subscription+0x1ae>
 8013ca0:	460e      	mov	r6, r1
 8013ca2:	2900      	cmp	r1, #0
 8013ca4:	f000 80cd 	beq.w	8013e42 <rmw_create_subscription+0x1ae>
 8013ca8:	4604      	mov	r4, r0
 8013caa:	6800      	ldr	r0, [r0, #0]
 8013cac:	4615      	mov	r5, r2
 8013cae:	4698      	mov	r8, r3
 8013cb0:	f7f7 ffdc 	bl	800bc6c <is_uxrce_rmw_identifier_valid>
 8013cb4:	2800      	cmp	r0, #0
 8013cb6:	f000 80c4 	beq.w	8013e42 <rmw_create_subscription+0x1ae>
 8013cba:	2d00      	cmp	r5, #0
 8013cbc:	f000 80c1 	beq.w	8013e42 <rmw_create_subscription+0x1ae>
 8013cc0:	782b      	ldrb	r3, [r5, #0]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	f000 80bd 	beq.w	8013e42 <rmw_create_subscription+0x1ae>
 8013cc8:	f1b8 0f00 	cmp.w	r8, #0
 8013ccc:	f000 80b9 	beq.w	8013e42 <rmw_create_subscription+0x1ae>
 8013cd0:	485e      	ldr	r0, [pc, #376]	; (8013e4c <rmw_create_subscription+0x1b8>)
 8013cd2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013cd6:	f7ff f9f3 	bl	80130c0 <get_memory>
 8013cda:	4604      	mov	r4, r0
 8013cdc:	2800      	cmp	r0, #0
 8013cde:	f000 80b1 	beq.w	8013e44 <rmw_create_subscription+0x1b0>
 8013ce2:	6887      	ldr	r7, [r0, #8]
 8013ce4:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8013ce8:	f7ff fa52 	bl	8013190 <rmw_get_implementation_identifier>
 8013cec:	f107 0a98 	add.w	sl, r7, #152	; 0x98
 8013cf0:	67f8      	str	r0, [r7, #124]	; 0x7c
 8013cf2:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8013cf6:	4628      	mov	r0, r5
 8013cf8:	f7ec fa7c 	bl	80001f4 <strlen>
 8013cfc:	3001      	adds	r0, #1
 8013cfe:	283c      	cmp	r0, #60	; 0x3c
 8013d00:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8013d04:	f200 8096 	bhi.w	8013e34 <rmw_create_subscription+0x1a0>
 8013d08:	4a51      	ldr	r2, [pc, #324]	; (8013e50 <rmw_create_subscription+0x1bc>)
 8013d0a:	462b      	mov	r3, r5
 8013d0c:	213c      	movs	r1, #60	; 0x3c
 8013d0e:	4650      	mov	r0, sl
 8013d10:	f003 f848 	bl	8016da4 <sniprintf>
 8013d14:	4641      	mov	r1, r8
 8013d16:	f8c7 9020 	str.w	r9, [r7, #32]
 8013d1a:	2250      	movs	r2, #80	; 0x50
 8013d1c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8013d20:	f003 fa39 	bl	8017196 <memcpy>
 8013d24:	494b      	ldr	r1, [pc, #300]	; (8013e54 <rmw_create_subscription+0x1c0>)
 8013d26:	4630      	mov	r0, r6
 8013d28:	f7f7 ffae 	bl	800bc88 <get_message_typesupport_handle>
 8013d2c:	2800      	cmp	r0, #0
 8013d2e:	f000 8081 	beq.w	8013e34 <rmw_create_subscription+0x1a0>
 8013d32:	6842      	ldr	r2, [r0, #4]
 8013d34:	61ba      	str	r2, [r7, #24]
 8013d36:	2a00      	cmp	r2, #0
 8013d38:	d07c      	beq.n	8013e34 <rmw_create_subscription+0x1a0>
 8013d3a:	4629      	mov	r1, r5
 8013d3c:	4643      	mov	r3, r8
 8013d3e:	4648      	mov	r0, r9
 8013d40:	f7ff fc8c 	bl	801365c <create_topic>
 8013d44:	61f8      	str	r0, [r7, #28]
 8013d46:	2800      	cmp	r0, #0
 8013d48:	d078      	beq.n	8013e3c <rmw_create_subscription+0x1a8>
 8013d4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d52:	2104      	movs	r1, #4
 8013d54:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 8013d58:	1c42      	adds	r2, r0, #1
 8013d5a:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 8013d5e:	f7f9 fa43 	bl	800d1e8 <uxr_object_id>
 8013d62:	6138      	str	r0, [r7, #16]
 8013d64:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013d68:	2506      	movs	r5, #6
 8013d6a:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 8013d6e:	9500      	str	r5, [sp, #0]
 8013d70:	6819      	ldr	r1, [r3, #0]
 8013d72:	693a      	ldr	r2, [r7, #16]
 8013d74:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013d78:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013d7c:	f7f9 f916 	bl	800cfac <uxr_buffer_create_subscriber_bin>
 8013d80:	4602      	mov	r2, r0
 8013d82:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013d86:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8013d8a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8013d8e:	f7f7 feed 	bl	800bb6c <run_xrce_session>
 8013d92:	2800      	cmp	r0, #0
 8013d94:	d04e      	beq.n	8013e34 <rmw_create_subscription+0x1a0>
 8013d96:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d9e:	4629      	mov	r1, r5
 8013da0:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 8013da4:	1c42      	adds	r2, r0, #1
 8013da6:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 8013daa:	f7f9 fa1d 	bl	800d1e8 <uxr_object_id>
 8013dae:	ae08      	add	r6, sp, #32
 8013db0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013db4:	69fb      	ldr	r3, [r7, #28]
 8013db6:	6178      	str	r0, [r7, #20]
 8013db8:	4641      	mov	r1, r8
 8013dba:	4630      	mov	r0, r6
 8013dbc:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 8013dc0:	9305      	str	r3, [sp, #20]
 8013dc2:	f7f7 feef 	bl	800bba4 <convert_qos_profile>
 8013dc6:	9503      	str	r5, [sp, #12]
 8013dc8:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013dcc:	9b05      	ldr	r3, [sp, #20]
 8013dce:	9001      	str	r0, [sp, #4]
 8013dd0:	f8ad 1008 	strh.w	r1, [sp, #8]
 8013dd4:	691b      	ldr	r3, [r3, #16]
 8013dd6:	9300      	str	r3, [sp, #0]
 8013dd8:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8013ddc:	f8db 1000 	ldr.w	r1, [fp]
 8013de0:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 8013de4:	f7f9 f988 	bl	800d0f8 <uxr_buffer_create_datareader_bin>
 8013de8:	4602      	mov	r2, r0
 8013dea:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013dee:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8013df2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8013df6:	f7f7 feb9 	bl	800bb6c <run_xrce_session>
 8013dfa:	b1d8      	cbz	r0, 8013e34 <rmw_create_subscription+0x1a0>
 8013dfc:	f898 3008 	ldrb.w	r3, [r8, #8]
 8013e00:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013e04:	2b02      	cmp	r3, #2
 8013e06:	bf0c      	ite	eq
 8013e08:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 8013e0c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 8013e10:	9307      	str	r3, [sp, #28]
 8013e12:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013e16:	2200      	movs	r2, #0
 8013e18:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8013e1c:	ab0a      	add	r3, sp, #40	; 0x28
 8013e1e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8013e22:	9300      	str	r3, [sp, #0]
 8013e24:	697a      	ldr	r2, [r7, #20]
 8013e26:	9b07      	ldr	r3, [sp, #28]
 8013e28:	6809      	ldr	r1, [r1, #0]
 8013e2a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013e2e:	f001 fa6d 	bl	801530c <uxr_buffer_request_data>
 8013e32:	e007      	b.n	8013e44 <rmw_create_subscription+0x1b0>
 8013e34:	69f8      	ldr	r0, [r7, #28]
 8013e36:	b108      	cbz	r0, 8013e3c <rmw_create_subscription+0x1a8>
 8013e38:	f7f7 fd96 	bl	800b968 <rmw_uxrce_fini_topic_memory>
 8013e3c:	4620      	mov	r0, r4
 8013e3e:	f7f7 fd51 	bl	800b8e4 <rmw_uxrce_fini_subscription_memory>
 8013e42:	2400      	movs	r4, #0
 8013e44:	4620      	mov	r0, r4
 8013e46:	b00d      	add	sp, #52	; 0x34
 8013e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e4c:	20010b3c 	.word	0x20010b3c
 8013e50:	08018234 	.word	0x08018234
 8013e54:	08018200 	.word	0x08018200

08013e58 <rmw_subscription_get_actual_qos>:
 8013e58:	b150      	cbz	r0, 8013e70 <rmw_subscription_get_actual_qos+0x18>
 8013e5a:	b508      	push	{r3, lr}
 8013e5c:	460b      	mov	r3, r1
 8013e5e:	b149      	cbz	r1, 8013e74 <rmw_subscription_get_actual_qos+0x1c>
 8013e60:	6841      	ldr	r1, [r0, #4]
 8013e62:	2250      	movs	r2, #80	; 0x50
 8013e64:	3128      	adds	r1, #40	; 0x28
 8013e66:	4618      	mov	r0, r3
 8013e68:	f003 f995 	bl	8017196 <memcpy>
 8013e6c:	2000      	movs	r0, #0
 8013e6e:	bd08      	pop	{r3, pc}
 8013e70:	200b      	movs	r0, #11
 8013e72:	4770      	bx	lr
 8013e74:	200b      	movs	r0, #11
 8013e76:	bd08      	pop	{r3, pc}

08013e78 <rmw_destroy_subscription>:
 8013e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e7a:	b128      	cbz	r0, 8013e88 <rmw_destroy_subscription+0x10>
 8013e7c:	4604      	mov	r4, r0
 8013e7e:	6800      	ldr	r0, [r0, #0]
 8013e80:	460d      	mov	r5, r1
 8013e82:	f7f7 fef3 	bl	800bc6c <is_uxrce_rmw_identifier_valid>
 8013e86:	b910      	cbnz	r0, 8013e8e <rmw_destroy_subscription+0x16>
 8013e88:	2401      	movs	r4, #1
 8013e8a:	4620      	mov	r0, r4
 8013e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e8e:	6863      	ldr	r3, [r4, #4]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d0f9      	beq.n	8013e88 <rmw_destroy_subscription+0x10>
 8013e94:	2d00      	cmp	r5, #0
 8013e96:	d0f7      	beq.n	8013e88 <rmw_destroy_subscription+0x10>
 8013e98:	6828      	ldr	r0, [r5, #0]
 8013e9a:	f7f7 fee7 	bl	800bc6c <is_uxrce_rmw_identifier_valid>
 8013e9e:	2800      	cmp	r0, #0
 8013ea0:	d0f2      	beq.n	8013e88 <rmw_destroy_subscription+0x10>
 8013ea2:	686c      	ldr	r4, [r5, #4]
 8013ea4:	2c00      	cmp	r4, #0
 8013ea6:	d0ef      	beq.n	8013e88 <rmw_destroy_subscription+0x10>
 8013ea8:	6a26      	ldr	r6, [r4, #32]
 8013eaa:	6962      	ldr	r2, [r4, #20]
 8013eac:	6930      	ldr	r0, [r6, #16]
 8013eae:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013eb2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013eb6:	6819      	ldr	r1, [r3, #0]
 8013eb8:	f001 fa62 	bl	8015380 <uxr_buffer_cancel_data>
 8013ebc:	4602      	mov	r2, r0
 8013ebe:	6930      	ldr	r0, [r6, #16]
 8013ec0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013ec4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013ec8:	f7f7 fe50 	bl	800bb6c <run_xrce_session>
 8013ecc:	69e0      	ldr	r0, [r4, #28]
 8013ece:	f7ff fc15 	bl	80136fc <destroy_topic>
 8013ed2:	6a23      	ldr	r3, [r4, #32]
 8013ed4:	6962      	ldr	r2, [r4, #20]
 8013ed6:	6918      	ldr	r0, [r3, #16]
 8013ed8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013edc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013ee0:	6819      	ldr	r1, [r3, #0]
 8013ee2:	f7f8 ff7f 	bl	800cde4 <uxr_buffer_delete_entity>
 8013ee6:	6a23      	ldr	r3, [r4, #32]
 8013ee8:	6922      	ldr	r2, [r4, #16]
 8013eea:	691b      	ldr	r3, [r3, #16]
 8013eec:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8013ef0:	4604      	mov	r4, r0
 8013ef2:	6809      	ldr	r1, [r1, #0]
 8013ef4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8013ef8:	f7f8 ff74 	bl	800cde4 <uxr_buffer_delete_entity>
 8013efc:	6937      	ldr	r7, [r6, #16]
 8013efe:	4622      	mov	r2, r4
 8013f00:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8013f04:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8013f08:	4604      	mov	r4, r0
 8013f0a:	4638      	mov	r0, r7
 8013f0c:	f7f7 fe2e 	bl	800bb6c <run_xrce_session>
 8013f10:	6936      	ldr	r6, [r6, #16]
 8013f12:	4622      	mov	r2, r4
 8013f14:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8013f18:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8013f1c:	4604      	mov	r4, r0
 8013f1e:	4630      	mov	r0, r6
 8013f20:	f7f7 fe24 	bl	800bb6c <run_xrce_session>
 8013f24:	b12c      	cbz	r4, 8013f32 <rmw_destroy_subscription+0xba>
 8013f26:	b120      	cbz	r0, 8013f32 <rmw_destroy_subscription+0xba>
 8013f28:	2400      	movs	r4, #0
 8013f2a:	4628      	mov	r0, r5
 8013f2c:	f7f7 fcda 	bl	800b8e4 <rmw_uxrce_fini_subscription_memory>
 8013f30:	e7ab      	b.n	8013e8a <rmw_destroy_subscription+0x12>
 8013f32:	2402      	movs	r4, #2
 8013f34:	e7f9      	b.n	8013f2a <rmw_destroy_subscription+0xb2>
 8013f36:	bf00      	nop

08013f38 <rmw_take_with_info>:
 8013f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f3a:	4604      	mov	r4, r0
 8013f3c:	6800      	ldr	r0, [r0, #0]
 8013f3e:	b089      	sub	sp, #36	; 0x24
 8013f40:	460f      	mov	r7, r1
 8013f42:	4615      	mov	r5, r2
 8013f44:	b128      	cbz	r0, 8013f52 <rmw_take_with_info+0x1a>
 8013f46:	4b24      	ldr	r3, [pc, #144]	; (8013fd8 <rmw_take_with_info+0xa0>)
 8013f48:	6819      	ldr	r1, [r3, #0]
 8013f4a:	f7ec f949 	bl	80001e0 <strcmp>
 8013f4e:	2800      	cmp	r0, #0
 8013f50:	d13e      	bne.n	8013fd0 <rmw_take_with_info+0x98>
 8013f52:	b305      	cbz	r5, 8013f96 <rmw_take_with_info+0x5e>
 8013f54:	6864      	ldr	r4, [r4, #4]
 8013f56:	2300      	movs	r3, #0
 8013f58:	702b      	strb	r3, [r5, #0]
 8013f5a:	f7f7 fd89 	bl	800ba70 <rmw_uxrce_clean_expired_static_input_buffer>
 8013f5e:	4620      	mov	r0, r4
 8013f60:	f7f7 fd5e 	bl	800ba20 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013f64:	4606      	mov	r6, r0
 8013f66:	b1f0      	cbz	r0, 8013fa6 <rmw_take_with_info+0x6e>
 8013f68:	6881      	ldr	r1, [r0, #8]
 8013f6a:	4668      	mov	r0, sp
 8013f6c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8013f70:	3110      	adds	r1, #16
 8013f72:	f7f8 fec7 	bl	800cd04 <ucdr_init_buffer>
 8013f76:	69a3      	ldr	r3, [r4, #24]
 8013f78:	4639      	mov	r1, r7
 8013f7a:	68db      	ldr	r3, [r3, #12]
 8013f7c:	4668      	mov	r0, sp
 8013f7e:	4798      	blx	r3
 8013f80:	4631      	mov	r1, r6
 8013f82:	4604      	mov	r4, r0
 8013f84:	4815      	ldr	r0, [pc, #84]	; (8013fdc <rmw_take_with_info+0xa4>)
 8013f86:	f7ff f8ab 	bl	80130e0 <put_memory>
 8013f8a:	702c      	strb	r4, [r5, #0]
 8013f8c:	f084 0001 	eor.w	r0, r4, #1
 8013f90:	b2c0      	uxtb	r0, r0
 8013f92:	b009      	add	sp, #36	; 0x24
 8013f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f96:	6864      	ldr	r4, [r4, #4]
 8013f98:	f7f7 fd6a 	bl	800ba70 <rmw_uxrce_clean_expired_static_input_buffer>
 8013f9c:	4620      	mov	r0, r4
 8013f9e:	f7f7 fd3f 	bl	800ba20 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013fa2:	4605      	mov	r5, r0
 8013fa4:	b910      	cbnz	r0, 8013fac <rmw_take_with_info+0x74>
 8013fa6:	2001      	movs	r0, #1
 8013fa8:	b009      	add	sp, #36	; 0x24
 8013faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fac:	68a9      	ldr	r1, [r5, #8]
 8013fae:	4668      	mov	r0, sp
 8013fb0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8013fb4:	3110      	adds	r1, #16
 8013fb6:	f7f8 fea5 	bl	800cd04 <ucdr_init_buffer>
 8013fba:	69a3      	ldr	r3, [r4, #24]
 8013fbc:	4639      	mov	r1, r7
 8013fbe:	68db      	ldr	r3, [r3, #12]
 8013fc0:	4668      	mov	r0, sp
 8013fc2:	4798      	blx	r3
 8013fc4:	4629      	mov	r1, r5
 8013fc6:	4604      	mov	r4, r0
 8013fc8:	4804      	ldr	r0, [pc, #16]	; (8013fdc <rmw_take_with_info+0xa4>)
 8013fca:	f7ff f889 	bl	80130e0 <put_memory>
 8013fce:	e7dd      	b.n	8013f8c <rmw_take_with_info+0x54>
 8013fd0:	200c      	movs	r0, #12
 8013fd2:	b009      	add	sp, #36	; 0x24
 8013fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fd6:	bf00      	nop
 8013fd8:	08018954 	.word	0x08018954
 8013fdc:	20010b2c 	.word	0x20010b2c

08013fe0 <rmw_uxrce_transport_init>:
 8013fe0:	b508      	push	{r3, lr}
 8013fe2:	b108      	cbz	r0, 8013fe8 <rmw_uxrce_transport_init+0x8>
 8013fe4:	f100 0210 	add.w	r2, r0, #16
 8013fe8:	b139      	cbz	r1, 8013ffa <rmw_uxrce_transport_init+0x1a>
 8013fea:	6949      	ldr	r1, [r1, #20]
 8013fec:	4610      	mov	r0, r2
 8013fee:	f000 fc0d 	bl	801480c <uxr_init_custom_transport>
 8013ff2:	f080 0001 	eor.w	r0, r0, #1
 8013ff6:	b2c0      	uxtb	r0, r0
 8013ff8:	bd08      	pop	{r3, pc}
 8013ffa:	4b04      	ldr	r3, [pc, #16]	; (801400c <rmw_uxrce_transport_init+0x2c>)
 8013ffc:	4610      	mov	r0, r2
 8013ffe:	6859      	ldr	r1, [r3, #4]
 8014000:	f000 fc04 	bl	801480c <uxr_init_custom_transport>
 8014004:	f080 0001 	eor.w	r0, r0, #1
 8014008:	b2c0      	uxtb	r0, r0
 801400a:	bd08      	pop	{r3, pc}
 801400c:	2000c204 	.word	0x2000c204

08014010 <rmw_wait>:
 8014010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014014:	b089      	sub	sp, #36	; 0x24
 8014016:	4605      	mov	r5, r0
 8014018:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801401a:	460e      	mov	r6, r1
 801401c:	4698      	mov	r8, r3
 801401e:	4691      	mov	r9, r2
 8014020:	2a00      	cmp	r2, #0
 8014022:	f000 810a 	beq.w	801423a <rmw_wait+0x22a>
 8014026:	b16c      	cbz	r4, 8014044 <rmw_wait+0x34>
 8014028:	4bae      	ldr	r3, [pc, #696]	; (80142e4 <rmw_wait+0x2d4>)
 801402a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801402c:	af04      	add	r7, sp, #16
 801402e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8014032:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014036:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801403a:	f7fe fe75 	bl	8012d28 <rmw_time_equal>
 801403e:	2800      	cmp	r0, #0
 8014040:	f000 8127 	beq.w	8014292 <rmw_wait+0x282>
 8014044:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014048:	f7f7 fd12 	bl	800ba70 <rmw_uxrce_clean_expired_static_input_buffer>
 801404c:	4ba6      	ldr	r3, [pc, #664]	; (80142e8 <rmw_wait+0x2d8>)
 801404e:	681c      	ldr	r4, [r3, #0]
 8014050:	b14c      	cbz	r4, 8014066 <rmw_wait+0x56>
 8014052:	4623      	mov	r3, r4
 8014054:	2100      	movs	r1, #0
 8014056:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801405a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801405e:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 8014062:	2b00      	cmp	r3, #0
 8014064:	d1f7      	bne.n	8014056 <rmw_wait+0x46>
 8014066:	f1b9 0f00 	cmp.w	r9, #0
 801406a:	d011      	beq.n	8014090 <rmw_wait+0x80>
 801406c:	f8d9 1000 	ldr.w	r1, [r9]
 8014070:	b171      	cbz	r1, 8014090 <rmw_wait+0x80>
 8014072:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8014076:	2300      	movs	r3, #0
 8014078:	2001      	movs	r0, #1
 801407a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801407e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8014080:	6912      	ldr	r2, [r2, #16]
 8014082:	3301      	adds	r3, #1
 8014084:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8014088:	4299      	cmp	r1, r3
 801408a:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801408e:	d1f4      	bne.n	801407a <rmw_wait+0x6a>
 8014090:	f1b8 0f00 	cmp.w	r8, #0
 8014094:	d011      	beq.n	80140ba <rmw_wait+0xaa>
 8014096:	f8d8 1000 	ldr.w	r1, [r8]
 801409a:	b171      	cbz	r1, 80140ba <rmw_wait+0xaa>
 801409c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80140a0:	2300      	movs	r3, #0
 80140a2:	2001      	movs	r0, #1
 80140a4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80140a8:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80140aa:	6912      	ldr	r2, [r2, #16]
 80140ac:	3301      	adds	r3, #1
 80140ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80140b2:	4299      	cmp	r1, r3
 80140b4:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80140b8:	d1f4      	bne.n	80140a4 <rmw_wait+0x94>
 80140ba:	b185      	cbz	r5, 80140de <rmw_wait+0xce>
 80140bc:	6829      	ldr	r1, [r5, #0]
 80140be:	b171      	cbz	r1, 80140de <rmw_wait+0xce>
 80140c0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80140c4:	2300      	movs	r3, #0
 80140c6:	2001      	movs	r0, #1
 80140c8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80140cc:	6a12      	ldr	r2, [r2, #32]
 80140ce:	6912      	ldr	r2, [r2, #16]
 80140d0:	3301      	adds	r3, #1
 80140d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80140d6:	4299      	cmp	r1, r3
 80140d8:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80140dc:	d1f4      	bne.n	80140c8 <rmw_wait+0xb8>
 80140de:	b34c      	cbz	r4, 8014134 <rmw_wait+0x124>
 80140e0:	4622      	mov	r2, r4
 80140e2:	2300      	movs	r3, #0
 80140e4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80140e8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80140ec:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 80140f0:	440b      	add	r3, r1
 80140f2:	b2db      	uxtb	r3, r3
 80140f4:	2a00      	cmp	r2, #0
 80140f6:	d1f5      	bne.n	80140e4 <rmw_wait+0xd4>
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	f000 8084 	beq.w	8014206 <rmw_wait+0x1f6>
 80140fe:	1c7a      	adds	r2, r7, #1
 8014100:	d00d      	beq.n	801411e <rmw_wait+0x10e>
 8014102:	ee07 7a90 	vmov	s15, r7
 8014106:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801410a:	ee07 3a90 	vmov	s15, r3
 801410e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014116:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801411a:	ee17 7a90 	vmov	r7, s15
 801411e:	68a0      	ldr	r0, [r4, #8]
 8014120:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8014124:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 8014128:	2b00      	cmp	r3, #0
 801412a:	f040 8090 	bne.w	801424e <rmw_wait+0x23e>
 801412e:	6864      	ldr	r4, [r4, #4]
 8014130:	2c00      	cmp	r4, #0
 8014132:	d1f4      	bne.n	801411e <rmw_wait+0x10e>
 8014134:	f1b9 0f00 	cmp.w	r9, #0
 8014138:	f000 80bc 	beq.w	80142b4 <rmw_wait+0x2a4>
 801413c:	f8d9 7000 	ldr.w	r7, [r9]
 8014140:	2f00      	cmp	r7, #0
 8014142:	f000 808e 	beq.w	8014262 <rmw_wait+0x252>
 8014146:	2400      	movs	r4, #0
 8014148:	4627      	mov	r7, r4
 801414a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801414e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014152:	f7f7 fc65 	bl	800ba20 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014156:	2800      	cmp	r0, #0
 8014158:	d05f      	beq.n	801421a <rmw_wait+0x20a>
 801415a:	f8d9 3000 	ldr.w	r3, [r9]
 801415e:	3401      	adds	r4, #1
 8014160:	42a3      	cmp	r3, r4
 8014162:	f04f 0701 	mov.w	r7, #1
 8014166:	d8f0      	bhi.n	801414a <rmw_wait+0x13a>
 8014168:	f1b8 0f00 	cmp.w	r8, #0
 801416c:	d012      	beq.n	8014194 <rmw_wait+0x184>
 801416e:	f8d8 3000 	ldr.w	r3, [r8]
 8014172:	b17b      	cbz	r3, 8014194 <rmw_wait+0x184>
 8014174:	2400      	movs	r4, #0
 8014176:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801417a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801417e:	f7f7 fc4f 	bl	800ba20 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014182:	2800      	cmp	r0, #0
 8014184:	d051      	beq.n	801422a <rmw_wait+0x21a>
 8014186:	f8d8 3000 	ldr.w	r3, [r8]
 801418a:	3401      	adds	r4, #1
 801418c:	42a3      	cmp	r3, r4
 801418e:	f04f 0701 	mov.w	r7, #1
 8014192:	d8f0      	bhi.n	8014176 <rmw_wait+0x166>
 8014194:	b1dd      	cbz	r5, 80141ce <rmw_wait+0x1be>
 8014196:	682b      	ldr	r3, [r5, #0]
 8014198:	b1cb      	cbz	r3, 80141ce <rmw_wait+0x1be>
 801419a:	2400      	movs	r4, #0
 801419c:	686b      	ldr	r3, [r5, #4]
 801419e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80141a2:	f7f7 fc3d 	bl	800ba20 <rmw_uxrce_find_static_input_buffer_by_owner>
 80141a6:	b158      	cbz	r0, 80141c0 <rmw_wait+0x1b0>
 80141a8:	682b      	ldr	r3, [r5, #0]
 80141aa:	3401      	adds	r4, #1
 80141ac:	42a3      	cmp	r3, r4
 80141ae:	d969      	bls.n	8014284 <rmw_wait+0x274>
 80141b0:	686b      	ldr	r3, [r5, #4]
 80141b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80141b6:	2701      	movs	r7, #1
 80141b8:	f7f7 fc32 	bl	800ba20 <rmw_uxrce_find_static_input_buffer_by_owner>
 80141bc:	2800      	cmp	r0, #0
 80141be:	d1f3      	bne.n	80141a8 <rmw_wait+0x198>
 80141c0:	e9d5 3200 	ldrd	r3, r2, [r5]
 80141c4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80141c8:	3401      	adds	r4, #1
 80141ca:	42a3      	cmp	r3, r4
 80141cc:	d8e6      	bhi.n	801419c <rmw_wait+0x18c>
 80141ce:	b1a6      	cbz	r6, 80141fa <rmw_wait+0x1ea>
 80141d0:	6834      	ldr	r4, [r6, #0]
 80141d2:	b194      	cbz	r4, 80141fa <rmw_wait+0x1ea>
 80141d4:	2300      	movs	r3, #0
 80141d6:	461d      	mov	r5, r3
 80141d8:	e004      	b.n	80141e4 <rmw_wait+0x1d4>
 80141da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80141de:	3301      	adds	r3, #1
 80141e0:	42a3      	cmp	r3, r4
 80141e2:	d00a      	beq.n	80141fa <rmw_wait+0x1ea>
 80141e4:	6870      	ldr	r0, [r6, #4]
 80141e6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80141ea:	7c0a      	ldrb	r2, [r1, #16]
 80141ec:	2a00      	cmp	r2, #0
 80141ee:	d0f4      	beq.n	80141da <rmw_wait+0x1ca>
 80141f0:	3301      	adds	r3, #1
 80141f2:	42a3      	cmp	r3, r4
 80141f4:	740d      	strb	r5, [r1, #16]
 80141f6:	4617      	mov	r7, r2
 80141f8:	d1f4      	bne.n	80141e4 <rmw_wait+0x1d4>
 80141fa:	2f00      	cmp	r7, #0
 80141fc:	d03e      	beq.n	801427c <rmw_wait+0x26c>
 80141fe:	2000      	movs	r0, #0
 8014200:	b009      	add	sp, #36	; 0x24
 8014202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014206:	68a0      	ldr	r0, [r4, #8]
 8014208:	2100      	movs	r1, #0
 801420a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801420e:	f7f9 fcc1 	bl	800db94 <uxr_run_session_timeout>
 8014212:	6864      	ldr	r4, [r4, #4]
 8014214:	2c00      	cmp	r4, #0
 8014216:	d1f6      	bne.n	8014206 <rmw_wait+0x1f6>
 8014218:	e78c      	b.n	8014134 <rmw_wait+0x124>
 801421a:	e9d9 3200 	ldrd	r3, r2, [r9]
 801421e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014222:	3401      	adds	r4, #1
 8014224:	42a3      	cmp	r3, r4
 8014226:	d890      	bhi.n	801414a <rmw_wait+0x13a>
 8014228:	e79e      	b.n	8014168 <rmw_wait+0x158>
 801422a:	e9d8 3200 	ldrd	r3, r2, [r8]
 801422e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014232:	3401      	adds	r4, #1
 8014234:	429c      	cmp	r4, r3
 8014236:	d39e      	bcc.n	8014176 <rmw_wait+0x166>
 8014238:	e7ac      	b.n	8014194 <rmw_wait+0x184>
 801423a:	2b00      	cmp	r3, #0
 801423c:	f47f aef3 	bne.w	8014026 <rmw_wait+0x16>
 8014240:	2800      	cmp	r0, #0
 8014242:	f47f aef0 	bne.w	8014026 <rmw_wait+0x16>
 8014246:	2900      	cmp	r1, #0
 8014248:	f47f aeed 	bne.w	8014026 <rmw_wait+0x16>
 801424c:	e7d7      	b.n	80141fe <rmw_wait+0x1ee>
 801424e:	4639      	mov	r1, r7
 8014250:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014254:	f7f9 fcb8 	bl	800dbc8 <uxr_run_session_until_data>
 8014258:	6864      	ldr	r4, [r4, #4]
 801425a:	2c00      	cmp	r4, #0
 801425c:	f47f af5f 	bne.w	801411e <rmw_wait+0x10e>
 8014260:	e768      	b.n	8014134 <rmw_wait+0x124>
 8014262:	f1b8 0f00 	cmp.w	r8, #0
 8014266:	d032      	beq.n	80142ce <rmw_wait+0x2be>
 8014268:	f8d8 3000 	ldr.w	r3, [r8]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d181      	bne.n	8014174 <rmw_wait+0x164>
 8014270:	461f      	mov	r7, r3
 8014272:	2d00      	cmp	r5, #0
 8014274:	d18f      	bne.n	8014196 <rmw_wait+0x186>
 8014276:	462f      	mov	r7, r5
 8014278:	2e00      	cmp	r6, #0
 801427a:	d1a9      	bne.n	80141d0 <rmw_wait+0x1c0>
 801427c:	2002      	movs	r0, #2
 801427e:	b009      	add	sp, #36	; 0x24
 8014280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014284:	2e00      	cmp	r6, #0
 8014286:	d0ba      	beq.n	80141fe <rmw_wait+0x1ee>
 8014288:	6834      	ldr	r4, [r6, #0]
 801428a:	2701      	movs	r7, #1
 801428c:	2c00      	cmp	r4, #0
 801428e:	d1a1      	bne.n	80141d4 <rmw_wait+0x1c4>
 8014290:	e7b5      	b.n	80141fe <rmw_wait+0x1ee>
 8014292:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014296:	f7fe fd9b 	bl	8012dd0 <rmw_time_total_nsec>
 801429a:	2300      	movs	r3, #0
 801429c:	4a13      	ldr	r2, [pc, #76]	; (80142ec <rmw_wait+0x2dc>)
 801429e:	f7ec fdab 	bl	8000df8 <__aeabi_uldivmod>
 80142a2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80142a6:	f171 0300 	sbcs.w	r3, r1, #0
 80142aa:	4607      	mov	r7, r0
 80142ac:	bfa8      	it	ge
 80142ae:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 80142b2:	e6c9      	b.n	8014048 <rmw_wait+0x38>
 80142b4:	f1b8 0f00 	cmp.w	r8, #0
 80142b8:	d009      	beq.n	80142ce <rmw_wait+0x2be>
 80142ba:	f8d8 3000 	ldr.w	r3, [r8]
 80142be:	464f      	mov	r7, r9
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	f47f af57 	bne.w	8014174 <rmw_wait+0x164>
 80142c6:	2d00      	cmp	r5, #0
 80142c8:	f47f af65 	bne.w	8014196 <rmw_wait+0x186>
 80142cc:	e7d3      	b.n	8014276 <rmw_wait+0x266>
 80142ce:	b17d      	cbz	r5, 80142f0 <rmw_wait+0x2e0>
 80142d0:	682b      	ldr	r3, [r5, #0]
 80142d2:	4647      	mov	r7, r8
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	f47f af60 	bne.w	801419a <rmw_wait+0x18a>
 80142da:	2e00      	cmp	r6, #0
 80142dc:	f47f af78 	bne.w	80141d0 <rmw_wait+0x1c0>
 80142e0:	e7cc      	b.n	801427c <rmw_wait+0x26c>
 80142e2:	bf00      	nop
 80142e4:	08018018 	.word	0x08018018
 80142e8:	20010b1c 	.word	0x20010b1c
 80142ec:	000f4240 	.word	0x000f4240
 80142f0:	2e00      	cmp	r6, #0
 80142f2:	d0c3      	beq.n	801427c <rmw_wait+0x26c>
 80142f4:	6834      	ldr	r4, [r6, #0]
 80142f6:	462f      	mov	r7, r5
 80142f8:	2c00      	cmp	r4, #0
 80142fa:	f47f af6b 	bne.w	80141d4 <rmw_wait+0x1c4>
 80142fe:	e7bd      	b.n	801427c <rmw_wait+0x26c>

08014300 <rmw_create_wait_set>:
 8014300:	b508      	push	{r3, lr}
 8014302:	4803      	ldr	r0, [pc, #12]	; (8014310 <rmw_create_wait_set+0x10>)
 8014304:	f7fe fedc 	bl	80130c0 <get_memory>
 8014308:	b108      	cbz	r0, 801430e <rmw_create_wait_set+0xe>
 801430a:	6880      	ldr	r0, [r0, #8]
 801430c:	3010      	adds	r0, #16
 801430e:	bd08      	pop	{r3, pc}
 8014310:	20010b5c 	.word	0x20010b5c

08014314 <rmw_destroy_wait_set>:
 8014314:	b508      	push	{r3, lr}
 8014316:	4b08      	ldr	r3, [pc, #32]	; (8014338 <rmw_destroy_wait_set+0x24>)
 8014318:	6819      	ldr	r1, [r3, #0]
 801431a:	b911      	cbnz	r1, 8014322 <rmw_destroy_wait_set+0xe>
 801431c:	e00a      	b.n	8014334 <rmw_destroy_wait_set+0x20>
 801431e:	6849      	ldr	r1, [r1, #4]
 8014320:	b141      	cbz	r1, 8014334 <rmw_destroy_wait_set+0x20>
 8014322:	688b      	ldr	r3, [r1, #8]
 8014324:	3310      	adds	r3, #16
 8014326:	4298      	cmp	r0, r3
 8014328:	d1f9      	bne.n	801431e <rmw_destroy_wait_set+0xa>
 801432a:	4803      	ldr	r0, [pc, #12]	; (8014338 <rmw_destroy_wait_set+0x24>)
 801432c:	f7fe fed8 	bl	80130e0 <put_memory>
 8014330:	2000      	movs	r0, #0
 8014332:	bd08      	pop	{r3, pc}
 8014334:	2001      	movs	r0, #1
 8014336:	bd08      	pop	{r3, pc}
 8014338:	20010b5c 	.word	0x20010b5c

0801433c <rmw_uros_epoch_nanos>:
 801433c:	4b05      	ldr	r3, [pc, #20]	; (8014354 <rmw_uros_epoch_nanos+0x18>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	b123      	cbz	r3, 801434c <rmw_uros_epoch_nanos+0x10>
 8014342:	6898      	ldr	r0, [r3, #8]
 8014344:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014348:	f7f9 b894 	b.w	800d474 <uxr_epoch_nanos>
 801434c:	2000      	movs	r0, #0
 801434e:	2100      	movs	r1, #0
 8014350:	4770      	bx	lr
 8014352:	bf00      	nop
 8014354:	20010b1c 	.word	0x20010b1c

08014358 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8014358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801435c:	6805      	ldr	r5, [r0, #0]
 801435e:	4604      	mov	r4, r0
 8014360:	4628      	mov	r0, r5
 8014362:	460e      	mov	r6, r1
 8014364:	f7eb ff3c 	bl	80001e0 <strcmp>
 8014368:	b1c8      	cbz	r0, 801439e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801436a:	4b11      	ldr	r3, [pc, #68]	; (80143b0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	429d      	cmp	r5, r3
 8014370:	d112      	bne.n	8014398 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8014372:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014376:	f8d8 4000 	ldr.w	r4, [r8]
 801437a:	b16c      	cbz	r4, 8014398 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801437c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014380:	2700      	movs	r7, #0
 8014382:	3d04      	subs	r5, #4
 8014384:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8014388:	4631      	mov	r1, r6
 801438a:	f7eb ff29 	bl	80001e0 <strcmp>
 801438e:	00bb      	lsls	r3, r7, #2
 8014390:	b140      	cbz	r0, 80143a4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8014392:	3701      	adds	r7, #1
 8014394:	42bc      	cmp	r4, r7
 8014396:	d1f5      	bne.n	8014384 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8014398:	2000      	movs	r0, #0
 801439a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801439e:	4620      	mov	r0, r4
 80143a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80143a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80143ac:	58d3      	ldr	r3, [r2, r3]
 80143ae:	4718      	bx	r3
 80143b0:	200000ac 	.word	0x200000ac

080143b4 <std_msgs__msg__Int32__init>:
 80143b4:	3800      	subs	r0, #0
 80143b6:	bf18      	it	ne
 80143b8:	2001      	movne	r0, #1
 80143ba:	4770      	bx	lr

080143bc <std_msgs__msg__Int32__fini>:
 80143bc:	4770      	bx	lr
 80143be:	bf00      	nop

080143c0 <ucdr_serialize_endian_array_char>:
 80143c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143c4:	4619      	mov	r1, r3
 80143c6:	461f      	mov	r7, r3
 80143c8:	4605      	mov	r5, r0
 80143ca:	4690      	mov	r8, r2
 80143cc:	f7f8 fc46 	bl	800cc5c <ucdr_check_buffer_available_for>
 80143d0:	b9e0      	cbnz	r0, 801440c <ucdr_serialize_endian_array_char+0x4c>
 80143d2:	463e      	mov	r6, r7
 80143d4:	e009      	b.n	80143ea <ucdr_serialize_endian_array_char+0x2a>
 80143d6:	68a8      	ldr	r0, [r5, #8]
 80143d8:	f002 fedd 	bl	8017196 <memcpy>
 80143dc:	68ab      	ldr	r3, [r5, #8]
 80143de:	6928      	ldr	r0, [r5, #16]
 80143e0:	4423      	add	r3, r4
 80143e2:	4420      	add	r0, r4
 80143e4:	1b36      	subs	r6, r6, r4
 80143e6:	60ab      	str	r3, [r5, #8]
 80143e8:	6128      	str	r0, [r5, #16]
 80143ea:	4631      	mov	r1, r6
 80143ec:	2201      	movs	r2, #1
 80143ee:	4628      	mov	r0, r5
 80143f0:	f7f8 fcbc 	bl	800cd6c <ucdr_check_final_buffer_behavior_array>
 80143f4:	1bb9      	subs	r1, r7, r6
 80143f6:	4441      	add	r1, r8
 80143f8:	4604      	mov	r4, r0
 80143fa:	4602      	mov	r2, r0
 80143fc:	2800      	cmp	r0, #0
 80143fe:	d1ea      	bne.n	80143d6 <ucdr_serialize_endian_array_char+0x16>
 8014400:	2301      	movs	r3, #1
 8014402:	7da8      	ldrb	r0, [r5, #22]
 8014404:	756b      	strb	r3, [r5, #21]
 8014406:	4058      	eors	r0, r3
 8014408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801440c:	463a      	mov	r2, r7
 801440e:	68a8      	ldr	r0, [r5, #8]
 8014410:	4641      	mov	r1, r8
 8014412:	f002 fec0 	bl	8017196 <memcpy>
 8014416:	68aa      	ldr	r2, [r5, #8]
 8014418:	692b      	ldr	r3, [r5, #16]
 801441a:	443a      	add	r2, r7
 801441c:	443b      	add	r3, r7
 801441e:	60aa      	str	r2, [r5, #8]
 8014420:	612b      	str	r3, [r5, #16]
 8014422:	e7ed      	b.n	8014400 <ucdr_serialize_endian_array_char+0x40>

08014424 <ucdr_deserialize_endian_array_char>:
 8014424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014428:	4619      	mov	r1, r3
 801442a:	461f      	mov	r7, r3
 801442c:	4605      	mov	r5, r0
 801442e:	4690      	mov	r8, r2
 8014430:	f7f8 fc14 	bl	800cc5c <ucdr_check_buffer_available_for>
 8014434:	b9e0      	cbnz	r0, 8014470 <ucdr_deserialize_endian_array_char+0x4c>
 8014436:	463e      	mov	r6, r7
 8014438:	e009      	b.n	801444e <ucdr_deserialize_endian_array_char+0x2a>
 801443a:	68a9      	ldr	r1, [r5, #8]
 801443c:	f002 feab 	bl	8017196 <memcpy>
 8014440:	68ab      	ldr	r3, [r5, #8]
 8014442:	6928      	ldr	r0, [r5, #16]
 8014444:	4423      	add	r3, r4
 8014446:	4420      	add	r0, r4
 8014448:	1b36      	subs	r6, r6, r4
 801444a:	60ab      	str	r3, [r5, #8]
 801444c:	6128      	str	r0, [r5, #16]
 801444e:	2201      	movs	r2, #1
 8014450:	4631      	mov	r1, r6
 8014452:	4628      	mov	r0, r5
 8014454:	f7f8 fc8a 	bl	800cd6c <ucdr_check_final_buffer_behavior_array>
 8014458:	4604      	mov	r4, r0
 801445a:	1bb8      	subs	r0, r7, r6
 801445c:	4440      	add	r0, r8
 801445e:	4622      	mov	r2, r4
 8014460:	2c00      	cmp	r4, #0
 8014462:	d1ea      	bne.n	801443a <ucdr_deserialize_endian_array_char+0x16>
 8014464:	2301      	movs	r3, #1
 8014466:	7da8      	ldrb	r0, [r5, #22]
 8014468:	756b      	strb	r3, [r5, #21]
 801446a:	4058      	eors	r0, r3
 801446c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014470:	463a      	mov	r2, r7
 8014472:	68a9      	ldr	r1, [r5, #8]
 8014474:	4640      	mov	r0, r8
 8014476:	f002 fe8e 	bl	8017196 <memcpy>
 801447a:	68aa      	ldr	r2, [r5, #8]
 801447c:	692b      	ldr	r3, [r5, #16]
 801447e:	443a      	add	r2, r7
 8014480:	443b      	add	r3, r7
 8014482:	60aa      	str	r2, [r5, #8]
 8014484:	612b      	str	r3, [r5, #16]
 8014486:	e7ed      	b.n	8014464 <ucdr_deserialize_endian_array_char+0x40>

08014488 <ucdr_serialize_array_uint8_t>:
 8014488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801448c:	4688      	mov	r8, r1
 801448e:	4611      	mov	r1, r2
 8014490:	4617      	mov	r7, r2
 8014492:	4605      	mov	r5, r0
 8014494:	f7f8 fbe2 	bl	800cc5c <ucdr_check_buffer_available_for>
 8014498:	b9e0      	cbnz	r0, 80144d4 <ucdr_serialize_array_uint8_t+0x4c>
 801449a:	463e      	mov	r6, r7
 801449c:	e009      	b.n	80144b2 <ucdr_serialize_array_uint8_t+0x2a>
 801449e:	68a8      	ldr	r0, [r5, #8]
 80144a0:	f002 fe79 	bl	8017196 <memcpy>
 80144a4:	68aa      	ldr	r2, [r5, #8]
 80144a6:	692b      	ldr	r3, [r5, #16]
 80144a8:	4422      	add	r2, r4
 80144aa:	4423      	add	r3, r4
 80144ac:	1b36      	subs	r6, r6, r4
 80144ae:	60aa      	str	r2, [r5, #8]
 80144b0:	612b      	str	r3, [r5, #16]
 80144b2:	4631      	mov	r1, r6
 80144b4:	2201      	movs	r2, #1
 80144b6:	4628      	mov	r0, r5
 80144b8:	f7f8 fc58 	bl	800cd6c <ucdr_check_final_buffer_behavior_array>
 80144bc:	1bb9      	subs	r1, r7, r6
 80144be:	4441      	add	r1, r8
 80144c0:	4604      	mov	r4, r0
 80144c2:	4602      	mov	r2, r0
 80144c4:	2800      	cmp	r0, #0
 80144c6:	d1ea      	bne.n	801449e <ucdr_serialize_array_uint8_t+0x16>
 80144c8:	2301      	movs	r3, #1
 80144ca:	7da8      	ldrb	r0, [r5, #22]
 80144cc:	756b      	strb	r3, [r5, #21]
 80144ce:	4058      	eors	r0, r3
 80144d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144d4:	463a      	mov	r2, r7
 80144d6:	68a8      	ldr	r0, [r5, #8]
 80144d8:	4641      	mov	r1, r8
 80144da:	f002 fe5c 	bl	8017196 <memcpy>
 80144de:	68aa      	ldr	r2, [r5, #8]
 80144e0:	692b      	ldr	r3, [r5, #16]
 80144e2:	443a      	add	r2, r7
 80144e4:	443b      	add	r3, r7
 80144e6:	60aa      	str	r2, [r5, #8]
 80144e8:	612b      	str	r3, [r5, #16]
 80144ea:	e7ed      	b.n	80144c8 <ucdr_serialize_array_uint8_t+0x40>

080144ec <ucdr_serialize_endian_array_uint8_t>:
 80144ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144f0:	4619      	mov	r1, r3
 80144f2:	461f      	mov	r7, r3
 80144f4:	4605      	mov	r5, r0
 80144f6:	4690      	mov	r8, r2
 80144f8:	f7f8 fbb0 	bl	800cc5c <ucdr_check_buffer_available_for>
 80144fc:	b9e0      	cbnz	r0, 8014538 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80144fe:	463e      	mov	r6, r7
 8014500:	e009      	b.n	8014516 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8014502:	68a8      	ldr	r0, [r5, #8]
 8014504:	f002 fe47 	bl	8017196 <memcpy>
 8014508:	68ab      	ldr	r3, [r5, #8]
 801450a:	6928      	ldr	r0, [r5, #16]
 801450c:	4423      	add	r3, r4
 801450e:	4420      	add	r0, r4
 8014510:	1b36      	subs	r6, r6, r4
 8014512:	60ab      	str	r3, [r5, #8]
 8014514:	6128      	str	r0, [r5, #16]
 8014516:	4631      	mov	r1, r6
 8014518:	2201      	movs	r2, #1
 801451a:	4628      	mov	r0, r5
 801451c:	f7f8 fc26 	bl	800cd6c <ucdr_check_final_buffer_behavior_array>
 8014520:	1bb9      	subs	r1, r7, r6
 8014522:	4441      	add	r1, r8
 8014524:	4604      	mov	r4, r0
 8014526:	4602      	mov	r2, r0
 8014528:	2800      	cmp	r0, #0
 801452a:	d1ea      	bne.n	8014502 <ucdr_serialize_endian_array_uint8_t+0x16>
 801452c:	2301      	movs	r3, #1
 801452e:	7da8      	ldrb	r0, [r5, #22]
 8014530:	756b      	strb	r3, [r5, #21]
 8014532:	4058      	eors	r0, r3
 8014534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014538:	463a      	mov	r2, r7
 801453a:	68a8      	ldr	r0, [r5, #8]
 801453c:	4641      	mov	r1, r8
 801453e:	f002 fe2a 	bl	8017196 <memcpy>
 8014542:	68aa      	ldr	r2, [r5, #8]
 8014544:	692b      	ldr	r3, [r5, #16]
 8014546:	443a      	add	r2, r7
 8014548:	443b      	add	r3, r7
 801454a:	60aa      	str	r2, [r5, #8]
 801454c:	612b      	str	r3, [r5, #16]
 801454e:	e7ed      	b.n	801452c <ucdr_serialize_endian_array_uint8_t+0x40>

08014550 <ucdr_deserialize_array_uint8_t>:
 8014550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014554:	4688      	mov	r8, r1
 8014556:	4611      	mov	r1, r2
 8014558:	4617      	mov	r7, r2
 801455a:	4605      	mov	r5, r0
 801455c:	f7f8 fb7e 	bl	800cc5c <ucdr_check_buffer_available_for>
 8014560:	b9e0      	cbnz	r0, 801459c <ucdr_deserialize_array_uint8_t+0x4c>
 8014562:	463e      	mov	r6, r7
 8014564:	e009      	b.n	801457a <ucdr_deserialize_array_uint8_t+0x2a>
 8014566:	68a9      	ldr	r1, [r5, #8]
 8014568:	f002 fe15 	bl	8017196 <memcpy>
 801456c:	68aa      	ldr	r2, [r5, #8]
 801456e:	692b      	ldr	r3, [r5, #16]
 8014570:	4422      	add	r2, r4
 8014572:	4423      	add	r3, r4
 8014574:	1b36      	subs	r6, r6, r4
 8014576:	60aa      	str	r2, [r5, #8]
 8014578:	612b      	str	r3, [r5, #16]
 801457a:	2201      	movs	r2, #1
 801457c:	4631      	mov	r1, r6
 801457e:	4628      	mov	r0, r5
 8014580:	f7f8 fbf4 	bl	800cd6c <ucdr_check_final_buffer_behavior_array>
 8014584:	4604      	mov	r4, r0
 8014586:	1bb8      	subs	r0, r7, r6
 8014588:	4440      	add	r0, r8
 801458a:	4622      	mov	r2, r4
 801458c:	2c00      	cmp	r4, #0
 801458e:	d1ea      	bne.n	8014566 <ucdr_deserialize_array_uint8_t+0x16>
 8014590:	2301      	movs	r3, #1
 8014592:	7da8      	ldrb	r0, [r5, #22]
 8014594:	756b      	strb	r3, [r5, #21]
 8014596:	4058      	eors	r0, r3
 8014598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801459c:	463a      	mov	r2, r7
 801459e:	68a9      	ldr	r1, [r5, #8]
 80145a0:	4640      	mov	r0, r8
 80145a2:	f002 fdf8 	bl	8017196 <memcpy>
 80145a6:	68aa      	ldr	r2, [r5, #8]
 80145a8:	692b      	ldr	r3, [r5, #16]
 80145aa:	443a      	add	r2, r7
 80145ac:	443b      	add	r3, r7
 80145ae:	60aa      	str	r2, [r5, #8]
 80145b0:	612b      	str	r3, [r5, #16]
 80145b2:	e7ed      	b.n	8014590 <ucdr_deserialize_array_uint8_t+0x40>

080145b4 <ucdr_deserialize_endian_array_uint8_t>:
 80145b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145b8:	4619      	mov	r1, r3
 80145ba:	461f      	mov	r7, r3
 80145bc:	4605      	mov	r5, r0
 80145be:	4690      	mov	r8, r2
 80145c0:	f7f8 fb4c 	bl	800cc5c <ucdr_check_buffer_available_for>
 80145c4:	b9e0      	cbnz	r0, 8014600 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80145c6:	463e      	mov	r6, r7
 80145c8:	e009      	b.n	80145de <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80145ca:	68a9      	ldr	r1, [r5, #8]
 80145cc:	f002 fde3 	bl	8017196 <memcpy>
 80145d0:	68ab      	ldr	r3, [r5, #8]
 80145d2:	6928      	ldr	r0, [r5, #16]
 80145d4:	4423      	add	r3, r4
 80145d6:	4420      	add	r0, r4
 80145d8:	1b36      	subs	r6, r6, r4
 80145da:	60ab      	str	r3, [r5, #8]
 80145dc:	6128      	str	r0, [r5, #16]
 80145de:	2201      	movs	r2, #1
 80145e0:	4631      	mov	r1, r6
 80145e2:	4628      	mov	r0, r5
 80145e4:	f7f8 fbc2 	bl	800cd6c <ucdr_check_final_buffer_behavior_array>
 80145e8:	4604      	mov	r4, r0
 80145ea:	1bb8      	subs	r0, r7, r6
 80145ec:	4440      	add	r0, r8
 80145ee:	4622      	mov	r2, r4
 80145f0:	2c00      	cmp	r4, #0
 80145f2:	d1ea      	bne.n	80145ca <ucdr_deserialize_endian_array_uint8_t+0x16>
 80145f4:	2301      	movs	r3, #1
 80145f6:	7da8      	ldrb	r0, [r5, #22]
 80145f8:	756b      	strb	r3, [r5, #21]
 80145fa:	4058      	eors	r0, r3
 80145fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014600:	463a      	mov	r2, r7
 8014602:	68a9      	ldr	r1, [r5, #8]
 8014604:	4640      	mov	r0, r8
 8014606:	f002 fdc6 	bl	8017196 <memcpy>
 801460a:	68aa      	ldr	r2, [r5, #8]
 801460c:	692b      	ldr	r3, [r5, #16]
 801460e:	443a      	add	r2, r7
 8014610:	443b      	add	r3, r7
 8014612:	60aa      	str	r2, [r5, #8]
 8014614:	612b      	str	r3, [r5, #16]
 8014616:	e7ed      	b.n	80145f4 <ucdr_deserialize_endian_array_uint8_t+0x40>

08014618 <ucdr_serialize_sequence_char>:
 8014618:	b570      	push	{r4, r5, r6, lr}
 801461a:	4615      	mov	r5, r2
 801461c:	460e      	mov	r6, r1
 801461e:	7d01      	ldrb	r1, [r0, #20]
 8014620:	4604      	mov	r4, r0
 8014622:	f7f7 fe71 	bl	800c308 <ucdr_serialize_endian_uint32_t>
 8014626:	b90d      	cbnz	r5, 801462c <ucdr_serialize_sequence_char+0x14>
 8014628:	2001      	movs	r0, #1
 801462a:	bd70      	pop	{r4, r5, r6, pc}
 801462c:	7d21      	ldrb	r1, [r4, #20]
 801462e:	462b      	mov	r3, r5
 8014630:	4632      	mov	r2, r6
 8014632:	4620      	mov	r0, r4
 8014634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014638:	f7ff bec2 	b.w	80143c0 <ucdr_serialize_endian_array_char>

0801463c <ucdr_deserialize_sequence_char>:
 801463c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014640:	461d      	mov	r5, r3
 8014642:	4616      	mov	r6, r2
 8014644:	460f      	mov	r7, r1
 8014646:	461a      	mov	r2, r3
 8014648:	7d01      	ldrb	r1, [r0, #20]
 801464a:	4604      	mov	r4, r0
 801464c:	f7f7 ff84 	bl	800c558 <ucdr_deserialize_endian_uint32_t>
 8014650:	682b      	ldr	r3, [r5, #0]
 8014652:	429e      	cmp	r6, r3
 8014654:	bf3c      	itt	cc
 8014656:	2201      	movcc	r2, #1
 8014658:	75a2      	strbcc	r2, [r4, #22]
 801465a:	b913      	cbnz	r3, 8014662 <ucdr_deserialize_sequence_char+0x26>
 801465c:	2001      	movs	r0, #1
 801465e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014662:	7d21      	ldrb	r1, [r4, #20]
 8014664:	463a      	mov	r2, r7
 8014666:	4620      	mov	r0, r4
 8014668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801466c:	f7ff beda 	b.w	8014424 <ucdr_deserialize_endian_array_char>

08014670 <ucdr_serialize_sequence_uint8_t>:
 8014670:	b570      	push	{r4, r5, r6, lr}
 8014672:	4615      	mov	r5, r2
 8014674:	460e      	mov	r6, r1
 8014676:	7d01      	ldrb	r1, [r0, #20]
 8014678:	4604      	mov	r4, r0
 801467a:	f7f7 fe45 	bl	800c308 <ucdr_serialize_endian_uint32_t>
 801467e:	b90d      	cbnz	r5, 8014684 <ucdr_serialize_sequence_uint8_t+0x14>
 8014680:	2001      	movs	r0, #1
 8014682:	bd70      	pop	{r4, r5, r6, pc}
 8014684:	7d21      	ldrb	r1, [r4, #20]
 8014686:	462b      	mov	r3, r5
 8014688:	4632      	mov	r2, r6
 801468a:	4620      	mov	r0, r4
 801468c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014690:	f7ff bf2c 	b.w	80144ec <ucdr_serialize_endian_array_uint8_t>

08014694 <ucdr_deserialize_sequence_uint8_t>:
 8014694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014698:	461d      	mov	r5, r3
 801469a:	4616      	mov	r6, r2
 801469c:	460f      	mov	r7, r1
 801469e:	461a      	mov	r2, r3
 80146a0:	7d01      	ldrb	r1, [r0, #20]
 80146a2:	4604      	mov	r4, r0
 80146a4:	f7f7 ff58 	bl	800c558 <ucdr_deserialize_endian_uint32_t>
 80146a8:	682b      	ldr	r3, [r5, #0]
 80146aa:	429e      	cmp	r6, r3
 80146ac:	bf3c      	itt	cc
 80146ae:	2201      	movcc	r2, #1
 80146b0:	75a2      	strbcc	r2, [r4, #22]
 80146b2:	b913      	cbnz	r3, 80146ba <ucdr_deserialize_sequence_uint8_t+0x26>
 80146b4:	2001      	movs	r0, #1
 80146b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146ba:	7d21      	ldrb	r1, [r4, #20]
 80146bc:	463a      	mov	r2, r7
 80146be:	4620      	mov	r0, r4
 80146c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146c4:	f7ff bf76 	b.w	80145b4 <ucdr_deserialize_endian_array_uint8_t>

080146c8 <ucdr_serialize_string>:
 80146c8:	b510      	push	{r4, lr}
 80146ca:	b082      	sub	sp, #8
 80146cc:	4604      	mov	r4, r0
 80146ce:	4608      	mov	r0, r1
 80146d0:	9101      	str	r1, [sp, #4]
 80146d2:	f7eb fd8f 	bl	80001f4 <strlen>
 80146d6:	9901      	ldr	r1, [sp, #4]
 80146d8:	1c42      	adds	r2, r0, #1
 80146da:	4620      	mov	r0, r4
 80146dc:	b002      	add	sp, #8
 80146de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146e2:	f7ff bf99 	b.w	8014618 <ucdr_serialize_sequence_char>
 80146e6:	bf00      	nop

080146e8 <ucdr_deserialize_string>:
 80146e8:	b500      	push	{lr}
 80146ea:	b083      	sub	sp, #12
 80146ec:	ab01      	add	r3, sp, #4
 80146ee:	f7ff ffa5 	bl	801463c <ucdr_deserialize_sequence_char>
 80146f2:	b003      	add	sp, #12
 80146f4:	f85d fb04 	ldr.w	pc, [sp], #4

080146f8 <get_custom_error>:
 80146f8:	4b01      	ldr	r3, [pc, #4]	; (8014700 <get_custom_error+0x8>)
 80146fa:	7818      	ldrb	r0, [r3, #0]
 80146fc:	4770      	bx	lr
 80146fe:	bf00      	nop
 8014700:	20010cd8 	.word	0x20010cd8

08014704 <recv_custom_msg>:
 8014704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014708:	4693      	mov	fp, r2
 801470a:	b089      	sub	sp, #36	; 0x24
 801470c:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8014710:	9305      	str	r3, [sp, #20]
 8014712:	468a      	mov	sl, r1
 8014714:	2100      	movs	r1, #0
 8014716:	4604      	mov	r4, r0
 8014718:	f88d 101e 	strb.w	r1, [sp, #30]
 801471c:	b322      	cbz	r2, 8014768 <recv_custom_msg+0x64>
 801471e:	f200 2902 	addw	r9, r0, #514	; 0x202
 8014722:	f10d 081f 	add.w	r8, sp, #31
 8014726:	af05      	add	r7, sp, #20
 8014728:	f10d 061e 	add.w	r6, sp, #30
 801472c:	f44f 7500 	mov.w	r5, #512	; 0x200
 8014730:	e002      	b.n	8014738 <recv_custom_msg+0x34>
 8014732:	9b05      	ldr	r3, [sp, #20]
 8014734:	2b00      	cmp	r3, #0
 8014736:	dd0f      	ble.n	8014758 <recv_custom_msg+0x54>
 8014738:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 801473c:	4623      	mov	r3, r4
 801473e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8014742:	e9cd 5600 	strd	r5, r6, [sp]
 8014746:	4622      	mov	r2, r4
 8014748:	4648      	mov	r0, r9
 801474a:	f001 f92d 	bl	80159a8 <uxr_read_framed_msg>
 801474e:	2800      	cmp	r0, #0
 8014750:	d0ef      	beq.n	8014732 <recv_custom_msg+0x2e>
 8014752:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014756:	b1b3      	cbz	r3, 8014786 <recv_custom_msg+0x82>
 8014758:	4b0f      	ldr	r3, [pc, #60]	; (8014798 <recv_custom_msg+0x94>)
 801475a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801475e:	701a      	strb	r2, [r3, #0]
 8014760:	2000      	movs	r0, #0
 8014762:	b009      	add	sp, #36	; 0x24
 8014764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014768:	f10d 021f 	add.w	r2, sp, #31
 801476c:	9200      	str	r2, [sp, #0]
 801476e:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8014772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014776:	4601      	mov	r1, r0
 8014778:	47a8      	blx	r5
 801477a:	2800      	cmp	r0, #0
 801477c:	d0ec      	beq.n	8014758 <recv_custom_msg+0x54>
 801477e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d1e8      	bne.n	8014758 <recv_custom_msg+0x54>
 8014786:	f8cb 0000 	str.w	r0, [fp]
 801478a:	2001      	movs	r0, #1
 801478c:	f8ca 4000 	str.w	r4, [sl]
 8014790:	b009      	add	sp, #36	; 0x24
 8014792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014796:	bf00      	nop
 8014798:	20010cd8 	.word	0x20010cd8

0801479c <send_custom_msg>:
 801479c:	b530      	push	{r4, r5, lr}
 801479e:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 80147a2:	b087      	sub	sp, #28
 80147a4:	4615      	mov	r5, r2
 80147a6:	b974      	cbnz	r4, 80147c6 <send_custom_msg+0x2a>
 80147a8:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 80147ac:	f10d 0317 	add.w	r3, sp, #23
 80147b0:	47a0      	blx	r4
 80147b2:	b108      	cbz	r0, 80147b8 <send_custom_msg+0x1c>
 80147b4:	42a8      	cmp	r0, r5
 80147b6:	d015      	beq.n	80147e4 <send_custom_msg+0x48>
 80147b8:	4b0c      	ldr	r3, [pc, #48]	; (80147ec <send_custom_msg+0x50>)
 80147ba:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80147be:	701a      	strb	r2, [r3, #0]
 80147c0:	2000      	movs	r0, #0
 80147c2:	b007      	add	sp, #28
 80147c4:	bd30      	pop	{r4, r5, pc}
 80147c6:	460b      	mov	r3, r1
 80147c8:	2200      	movs	r2, #0
 80147ca:	f10d 0117 	add.w	r1, sp, #23
 80147ce:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80147d2:	4602      	mov	r2, r0
 80147d4:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 80147d8:	9500      	str	r5, [sp, #0]
 80147da:	f200 2002 	addw	r0, r0, #514	; 0x202
 80147de:	f000 feeb 	bl	80155b8 <uxr_write_framed_msg>
 80147e2:	e7e6      	b.n	80147b2 <send_custom_msg+0x16>
 80147e4:	2001      	movs	r0, #1
 80147e6:	b007      	add	sp, #28
 80147e8:	bd30      	pop	{r4, r5, pc}
 80147ea:	bf00      	nop
 80147ec:	20010cd8 	.word	0x20010cd8

080147f0 <uxr_set_custom_transport_callbacks>:
 80147f0:	b410      	push	{r4}
 80147f2:	9c01      	ldr	r4, [sp, #4]
 80147f4:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 80147f8:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 80147fc:	9b02      	ldr	r3, [sp, #8]
 80147fe:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8014802:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014806:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 801480a:	4770      	bx	lr

0801480c <uxr_init_custom_transport>:
 801480c:	b538      	push	{r3, r4, r5, lr}
 801480e:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8014812:	b303      	cbz	r3, 8014856 <uxr_init_custom_transport+0x4a>
 8014814:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8014818:	4604      	mov	r4, r0
 801481a:	b1e2      	cbz	r2, 8014856 <uxr_init_custom_transport+0x4a>
 801481c:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8014820:	b1ca      	cbz	r2, 8014856 <uxr_init_custom_transport+0x4a>
 8014822:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8014826:	b1b2      	cbz	r2, 8014856 <uxr_init_custom_transport+0x4a>
 8014828:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 801482c:	4798      	blx	r3
 801482e:	4605      	mov	r5, r0
 8014830:	b188      	cbz	r0, 8014856 <uxr_init_custom_transport+0x4a>
 8014832:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8014836:	b98b      	cbnz	r3, 801485c <uxr_init_custom_transport+0x50>
 8014838:	490b      	ldr	r1, [pc, #44]	; (8014868 <uxr_init_custom_transport+0x5c>)
 801483a:	4b0c      	ldr	r3, [pc, #48]	; (801486c <uxr_init_custom_transport+0x60>)
 801483c:	4a0c      	ldr	r2, [pc, #48]	; (8014870 <uxr_init_custom_transport+0x64>)
 801483e:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8014842:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014846:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 801484a:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 801484e:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8014852:	4628      	mov	r0, r5
 8014854:	bd38      	pop	{r3, r4, r5, pc}
 8014856:	2500      	movs	r5, #0
 8014858:	4628      	mov	r0, r5
 801485a:	bd38      	pop	{r3, r4, r5, pc}
 801485c:	2100      	movs	r1, #0
 801485e:	f204 2002 	addw	r0, r4, #514	; 0x202
 8014862:	f000 fea3 	bl	80155ac <uxr_init_framing_io>
 8014866:	e7e7      	b.n	8014838 <uxr_init_custom_transport+0x2c>
 8014868:	0801479d 	.word	0x0801479d
 801486c:	08014705 	.word	0x08014705
 8014870:	080146f9 	.word	0x080146f9

08014874 <uxr_close_custom_transport>:
 8014874:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8014878:	4718      	bx	r3
 801487a:	bf00      	nop

0801487c <uxr_init_input_best_effort_stream>:
 801487c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014880:	8003      	strh	r3, [r0, #0]
 8014882:	4770      	bx	lr

08014884 <uxr_reset_input_best_effort_stream>:
 8014884:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014888:	8003      	strh	r3, [r0, #0]
 801488a:	4770      	bx	lr

0801488c <uxr_receive_best_effort_message>:
 801488c:	b538      	push	{r3, r4, r5, lr}
 801488e:	4604      	mov	r4, r0
 8014890:	8800      	ldrh	r0, [r0, #0]
 8014892:	460d      	mov	r5, r1
 8014894:	f000 fe72 	bl	801557c <uxr_seq_num_cmp>
 8014898:	4603      	mov	r3, r0
 801489a:	2b00      	cmp	r3, #0
 801489c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80148a0:	bfb8      	it	lt
 80148a2:	8025      	strhlt	r5, [r4, #0]
 80148a4:	bd38      	pop	{r3, r4, r5, pc}
 80148a6:	bf00      	nop

080148a8 <on_full_input_buffer>:
 80148a8:	b570      	push	{r4, r5, r6, lr}
 80148aa:	4605      	mov	r5, r0
 80148ac:	460c      	mov	r4, r1
 80148ae:	682b      	ldr	r3, [r5, #0]
 80148b0:	6809      	ldr	r1, [r1, #0]
 80148b2:	8920      	ldrh	r0, [r4, #8]
 80148b4:	6862      	ldr	r2, [r4, #4]
 80148b6:	fbb2 f2f0 	udiv	r2, r2, r0
 80148ba:	eba3 0c01 	sub.w	ip, r3, r1
 80148be:	fbbc fcf2 	udiv	ip, ip, r2
 80148c2:	f10c 0c01 	add.w	ip, ip, #1
 80148c6:	fa1f f38c 	uxth.w	r3, ip
 80148ca:	fbb3 f6f0 	udiv	r6, r3, r0
 80148ce:	fb00 3316 	mls	r3, r0, r6, r3
 80148d2:	b29b      	uxth	r3, r3
 80148d4:	fb02 f303 	mul.w	r3, r2, r3
 80148d8:	1d18      	adds	r0, r3, #4
 80148da:	4408      	add	r0, r1
 80148dc:	7d26      	ldrb	r6, [r4, #20]
 80148de:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80148e2:	b116      	cbz	r6, 80148ea <on_full_input_buffer+0x42>
 80148e4:	2600      	movs	r6, #0
 80148e6:	f840 6c04 	str.w	r6, [r0, #-4]
 80148ea:	2a03      	cmp	r2, #3
 80148ec:	d801      	bhi.n	80148f2 <on_full_input_buffer+0x4a>
 80148ee:	2001      	movs	r0, #1
 80148f0:	bd70      	pop	{r4, r5, r6, pc}
 80148f2:	3308      	adds	r3, #8
 80148f4:	4419      	add	r1, r3
 80148f6:	4628      	mov	r0, r5
 80148f8:	692b      	ldr	r3, [r5, #16]
 80148fa:	3a04      	subs	r2, #4
 80148fc:	f7f8 f9fa 	bl	800ccf4 <ucdr_init_buffer_origin>
 8014900:	4628      	mov	r0, r5
 8014902:	4903      	ldr	r1, [pc, #12]	; (8014910 <on_full_input_buffer+0x68>)
 8014904:	4622      	mov	r2, r4
 8014906:	f7f8 f9d1 	bl	800ccac <ucdr_set_on_full_buffer_callback>
 801490a:	2000      	movs	r0, #0
 801490c:	bd70      	pop	{r4, r5, r6, pc}
 801490e:	bf00      	nop
 8014910:	080148a9 	.word	0x080148a9

08014914 <uxr_init_input_reliable_stream>:
 8014914:	b500      	push	{lr}
 8014916:	e9c0 1200 	strd	r1, r2, [r0]
 801491a:	f04f 0e00 	mov.w	lr, #0
 801491e:	9a01      	ldr	r2, [sp, #4]
 8014920:	8103      	strh	r3, [r0, #8]
 8014922:	6102      	str	r2, [r0, #16]
 8014924:	f880 e014 	strb.w	lr, [r0, #20]
 8014928:	b1d3      	cbz	r3, 8014960 <uxr_init_input_reliable_stream+0x4c>
 801492a:	f8c1 e000 	str.w	lr, [r1]
 801492e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014932:	f1bc 0f01 	cmp.w	ip, #1
 8014936:	d913      	bls.n	8014960 <uxr_init_input_reliable_stream+0x4c>
 8014938:	2301      	movs	r3, #1
 801493a:	fbb3 f1fc 	udiv	r1, r3, ip
 801493e:	fb0c 3111 	mls	r1, ip, r1, r3
 8014942:	b289      	uxth	r1, r1
 8014944:	6842      	ldr	r2, [r0, #4]
 8014946:	fbb2 f2fc 	udiv	r2, r2, ip
 801494a:	fb01 f202 	mul.w	r2, r1, r2
 801494e:	6801      	ldr	r1, [r0, #0]
 8014950:	f841 e002 	str.w	lr, [r1, r2]
 8014954:	3301      	adds	r3, #1
 8014956:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801495a:	b29b      	uxth	r3, r3
 801495c:	459c      	cmp	ip, r3
 801495e:	d8ec      	bhi.n	801493a <uxr_init_input_reliable_stream+0x26>
 8014960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014964:	60c3      	str	r3, [r0, #12]
 8014966:	f85d fb04 	ldr.w	pc, [sp], #4
 801496a:	bf00      	nop

0801496c <uxr_reset_input_reliable_stream>:
 801496c:	8901      	ldrh	r1, [r0, #8]
 801496e:	b1e9      	cbz	r1, 80149ac <uxr_reset_input_reliable_stream+0x40>
 8014970:	f04f 0c00 	mov.w	ip, #0
 8014974:	b500      	push	{lr}
 8014976:	4663      	mov	r3, ip
 8014978:	46e6      	mov	lr, ip
 801497a:	fbb3 f2f1 	udiv	r2, r3, r1
 801497e:	fb01 3312 	mls	r3, r1, r2, r3
 8014982:	b29b      	uxth	r3, r3
 8014984:	6842      	ldr	r2, [r0, #4]
 8014986:	fbb2 f2f1 	udiv	r2, r2, r1
 801498a:	fb02 f303 	mul.w	r3, r2, r3
 801498e:	6802      	ldr	r2, [r0, #0]
 8014990:	f842 e003 	str.w	lr, [r2, r3]
 8014994:	f10c 0c01 	add.w	ip, ip, #1
 8014998:	8901      	ldrh	r1, [r0, #8]
 801499a:	fa1f f38c 	uxth.w	r3, ip
 801499e:	4299      	cmp	r1, r3
 80149a0:	d8eb      	bhi.n	801497a <uxr_reset_input_reliable_stream+0xe>
 80149a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149a6:	60c3      	str	r3, [r0, #12]
 80149a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80149ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149b0:	60c3      	str	r3, [r0, #12]
 80149b2:	4770      	bx	lr

080149b4 <uxr_receive_reliable_message>:
 80149b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149b8:	4604      	mov	r4, r0
 80149ba:	460d      	mov	r5, r1
 80149bc:	8901      	ldrh	r1, [r0, #8]
 80149be:	8980      	ldrh	r0, [r0, #12]
 80149c0:	4690      	mov	r8, r2
 80149c2:	461f      	mov	r7, r3
 80149c4:	f000 fdd2 	bl	801556c <uxr_seq_num_add>
 80149c8:	4629      	mov	r1, r5
 80149ca:	4606      	mov	r6, r0
 80149cc:	89a0      	ldrh	r0, [r4, #12]
 80149ce:	f000 fdd5 	bl	801557c <uxr_seq_num_cmp>
 80149d2:	2800      	cmp	r0, #0
 80149d4:	db0a      	blt.n	80149ec <uxr_receive_reliable_message+0x38>
 80149d6:	2600      	movs	r6, #0
 80149d8:	89e0      	ldrh	r0, [r4, #14]
 80149da:	4629      	mov	r1, r5
 80149dc:	f000 fdce 	bl	801557c <uxr_seq_num_cmp>
 80149e0:	2800      	cmp	r0, #0
 80149e2:	da00      	bge.n	80149e6 <uxr_receive_reliable_message+0x32>
 80149e4:	81e5      	strh	r5, [r4, #14]
 80149e6:	4630      	mov	r0, r6
 80149e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149ec:	4630      	mov	r0, r6
 80149ee:	4629      	mov	r1, r5
 80149f0:	f000 fdc4 	bl	801557c <uxr_seq_num_cmp>
 80149f4:	2800      	cmp	r0, #0
 80149f6:	dbee      	blt.n	80149d6 <uxr_receive_reliable_message+0x22>
 80149f8:	6923      	ldr	r3, [r4, #16]
 80149fa:	4640      	mov	r0, r8
 80149fc:	4798      	blx	r3
 80149fe:	2101      	movs	r1, #1
 8014a00:	4681      	mov	r9, r0
 8014a02:	89a0      	ldrh	r0, [r4, #12]
 8014a04:	f000 fdb2 	bl	801556c <uxr_seq_num_add>
 8014a08:	f1b9 0f00 	cmp.w	r9, #0
 8014a0c:	d101      	bne.n	8014a12 <uxr_receive_reliable_message+0x5e>
 8014a0e:	4285      	cmp	r5, r0
 8014a10:	d047      	beq.n	8014aa2 <uxr_receive_reliable_message+0xee>
 8014a12:	8922      	ldrh	r2, [r4, #8]
 8014a14:	fbb5 f0f2 	udiv	r0, r5, r2
 8014a18:	fb02 5010 	mls	r0, r2, r0, r5
 8014a1c:	b280      	uxth	r0, r0
 8014a1e:	6863      	ldr	r3, [r4, #4]
 8014a20:	fbb3 f3f2 	udiv	r3, r3, r2
 8014a24:	fb00 f303 	mul.w	r3, r0, r3
 8014a28:	6820      	ldr	r0, [r4, #0]
 8014a2a:	3304      	adds	r3, #4
 8014a2c:	4418      	add	r0, r3
 8014a2e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d1cf      	bne.n	80149d6 <uxr_receive_reliable_message+0x22>
 8014a36:	4641      	mov	r1, r8
 8014a38:	463a      	mov	r2, r7
 8014a3a:	f002 fbac 	bl	8017196 <memcpy>
 8014a3e:	8921      	ldrh	r1, [r4, #8]
 8014a40:	fbb5 f2f1 	udiv	r2, r5, r1
 8014a44:	fb01 5212 	mls	r2, r1, r2, r5
 8014a48:	b292      	uxth	r2, r2
 8014a4a:	6863      	ldr	r3, [r4, #4]
 8014a4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014a50:	fb02 f303 	mul.w	r3, r2, r3
 8014a54:	6822      	ldr	r2, [r4, #0]
 8014a56:	50d7      	str	r7, [r2, r3]
 8014a58:	9a08      	ldr	r2, [sp, #32]
 8014a5a:	2301      	movs	r3, #1
 8014a5c:	7013      	strb	r3, [r2, #0]
 8014a5e:	f1b9 0f00 	cmp.w	r9, #0
 8014a62:	d0b8      	beq.n	80149d6 <uxr_receive_reliable_message+0x22>
 8014a64:	89a6      	ldrh	r6, [r4, #12]
 8014a66:	4630      	mov	r0, r6
 8014a68:	2101      	movs	r1, #1
 8014a6a:	f000 fd7f 	bl	801556c <uxr_seq_num_add>
 8014a6e:	8922      	ldrh	r2, [r4, #8]
 8014a70:	6863      	ldr	r3, [r4, #4]
 8014a72:	fbb3 f3f2 	udiv	r3, r3, r2
 8014a76:	4606      	mov	r6, r0
 8014a78:	fbb0 f0f2 	udiv	r0, r0, r2
 8014a7c:	fb02 6010 	mls	r0, r2, r0, r6
 8014a80:	b280      	uxth	r0, r0
 8014a82:	fb00 f303 	mul.w	r3, r0, r3
 8014a86:	6820      	ldr	r0, [r4, #0]
 8014a88:	3304      	adds	r3, #4
 8014a8a:	4418      	add	r0, r3
 8014a8c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d0a0      	beq.n	80149d6 <uxr_receive_reliable_message+0x22>
 8014a94:	6923      	ldr	r3, [r4, #16]
 8014a96:	4798      	blx	r3
 8014a98:	2802      	cmp	r0, #2
 8014a9a:	d008      	beq.n	8014aae <uxr_receive_reliable_message+0xfa>
 8014a9c:	2801      	cmp	r0, #1
 8014a9e:	d0e2      	beq.n	8014a66 <uxr_receive_reliable_message+0xb2>
 8014aa0:	e799      	b.n	80149d6 <uxr_receive_reliable_message+0x22>
 8014aa2:	9b08      	ldr	r3, [sp, #32]
 8014aa4:	81a5      	strh	r5, [r4, #12]
 8014aa6:	2601      	movs	r6, #1
 8014aa8:	f883 9000 	strb.w	r9, [r3]
 8014aac:	e794      	b.n	80149d8 <uxr_receive_reliable_message+0x24>
 8014aae:	2601      	movs	r6, #1
 8014ab0:	e792      	b.n	80149d8 <uxr_receive_reliable_message+0x24>
 8014ab2:	bf00      	nop

08014ab4 <uxr_next_input_reliable_buffer_available>:
 8014ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ab8:	4604      	mov	r4, r0
 8014aba:	460f      	mov	r7, r1
 8014abc:	8980      	ldrh	r0, [r0, #12]
 8014abe:	2101      	movs	r1, #1
 8014ac0:	4690      	mov	r8, r2
 8014ac2:	f000 fd53 	bl	801556c <uxr_seq_num_add>
 8014ac6:	8922      	ldrh	r2, [r4, #8]
 8014ac8:	fbb0 f6f2 	udiv	r6, r0, r2
 8014acc:	fb02 0616 	mls	r6, r2, r6, r0
 8014ad0:	b2b6      	uxth	r6, r6
 8014ad2:	6863      	ldr	r3, [r4, #4]
 8014ad4:	fbb3 f3f2 	udiv	r3, r3, r2
 8014ad8:	fb06 f303 	mul.w	r3, r6, r3
 8014adc:	6826      	ldr	r6, [r4, #0]
 8014ade:	3304      	adds	r3, #4
 8014ae0:	441e      	add	r6, r3
 8014ae2:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8014ae6:	f1b9 0f00 	cmp.w	r9, #0
 8014aea:	d023      	beq.n	8014b34 <uxr_next_input_reliable_buffer_available+0x80>
 8014aec:	6923      	ldr	r3, [r4, #16]
 8014aee:	4605      	mov	r5, r0
 8014af0:	4630      	mov	r0, r6
 8014af2:	4798      	blx	r3
 8014af4:	4682      	mov	sl, r0
 8014af6:	b300      	cbz	r0, 8014b3a <uxr_next_input_reliable_buffer_available+0x86>
 8014af8:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8014afc:	2101      	movs	r1, #1
 8014afe:	4650      	mov	r0, sl
 8014b00:	f000 fd34 	bl	801556c <uxr_seq_num_add>
 8014b04:	8921      	ldrh	r1, [r4, #8]
 8014b06:	fbb0 f2f1 	udiv	r2, r0, r1
 8014b0a:	4682      	mov	sl, r0
 8014b0c:	fb01 0212 	mls	r2, r1, r2, r0
 8014b10:	e9d4 0300 	ldrd	r0, r3, [r4]
 8014b14:	b292      	uxth	r2, r2
 8014b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8014b1a:	fb02 f303 	mul.w	r3, r2, r3
 8014b1e:	3304      	adds	r3, #4
 8014b20:	4418      	add	r0, r3
 8014b22:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014b26:	b12b      	cbz	r3, 8014b34 <uxr_next_input_reliable_buffer_available+0x80>
 8014b28:	6923      	ldr	r3, [r4, #16]
 8014b2a:	4798      	blx	r3
 8014b2c:	2802      	cmp	r0, #2
 8014b2e:	d01b      	beq.n	8014b68 <uxr_next_input_reliable_buffer_available+0xb4>
 8014b30:	2801      	cmp	r0, #1
 8014b32:	d0e3      	beq.n	8014afc <uxr_next_input_reliable_buffer_available+0x48>
 8014b34:	2000      	movs	r0, #0
 8014b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b3a:	464a      	mov	r2, r9
 8014b3c:	4631      	mov	r1, r6
 8014b3e:	4638      	mov	r0, r7
 8014b40:	f7f8 f8e0 	bl	800cd04 <ucdr_init_buffer>
 8014b44:	8921      	ldrh	r1, [r4, #8]
 8014b46:	fbb5 f2f1 	udiv	r2, r5, r1
 8014b4a:	fb01 5212 	mls	r2, r1, r2, r5
 8014b4e:	b292      	uxth	r2, r2
 8014b50:	6863      	ldr	r3, [r4, #4]
 8014b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8014b56:	fb02 f303 	mul.w	r3, r2, r3
 8014b5a:	6822      	ldr	r2, [r4, #0]
 8014b5c:	f842 a003 	str.w	sl, [r2, r3]
 8014b60:	2001      	movs	r0, #1
 8014b62:	81a5      	strh	r5, [r4, #12]
 8014b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b68:	8920      	ldrh	r0, [r4, #8]
 8014b6a:	fbb5 f3f0 	udiv	r3, r5, r0
 8014b6e:	fb00 5513 	mls	r5, r0, r3, r5
 8014b72:	b2ad      	uxth	r5, r5
 8014b74:	6863      	ldr	r3, [r4, #4]
 8014b76:	fbb3 f3f0 	udiv	r3, r3, r0
 8014b7a:	fb03 f505 	mul.w	r5, r3, r5
 8014b7e:	6823      	ldr	r3, [r4, #0]
 8014b80:	2000      	movs	r0, #0
 8014b82:	5158      	str	r0, [r3, r5]
 8014b84:	eb06 0108 	add.w	r1, r6, r8
 8014b88:	eba9 0208 	sub.w	r2, r9, r8
 8014b8c:	4638      	mov	r0, r7
 8014b8e:	f7f8 f8b9 	bl	800cd04 <ucdr_init_buffer>
 8014b92:	4638      	mov	r0, r7
 8014b94:	4903      	ldr	r1, [pc, #12]	; (8014ba4 <uxr_next_input_reliable_buffer_available+0xf0>)
 8014b96:	4622      	mov	r2, r4
 8014b98:	f7f8 f888 	bl	800ccac <ucdr_set_on_full_buffer_callback>
 8014b9c:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8014ba0:	2001      	movs	r0, #1
 8014ba2:	e7c8      	b.n	8014b36 <uxr_next_input_reliable_buffer_available+0x82>
 8014ba4:	080148a9 	.word	0x080148a9

08014ba8 <uxr_process_heartbeat>:
 8014ba8:	b538      	push	{r3, r4, r5, lr}
 8014baa:	4611      	mov	r1, r2
 8014bac:	4604      	mov	r4, r0
 8014bae:	89c0      	ldrh	r0, [r0, #14]
 8014bb0:	4615      	mov	r5, r2
 8014bb2:	f000 fce3 	bl	801557c <uxr_seq_num_cmp>
 8014bb6:	2800      	cmp	r0, #0
 8014bb8:	bfb8      	it	lt
 8014bba:	81e5      	strhlt	r5, [r4, #14]
 8014bbc:	bd38      	pop	{r3, r4, r5, pc}
 8014bbe:	bf00      	nop

08014bc0 <uxr_compute_acknack>:
 8014bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014bc4:	8903      	ldrh	r3, [r0, #8]
 8014bc6:	8985      	ldrh	r5, [r0, #12]
 8014bc8:	4604      	mov	r4, r0
 8014bca:	460e      	mov	r6, r1
 8014bcc:	b1d3      	cbz	r3, 8014c04 <uxr_compute_acknack+0x44>
 8014bce:	4628      	mov	r0, r5
 8014bd0:	2701      	movs	r7, #1
 8014bd2:	e003      	b.n	8014bdc <uxr_compute_acknack+0x1c>
 8014bd4:	4567      	cmp	r7, ip
 8014bd6:	d215      	bcs.n	8014c04 <uxr_compute_acknack+0x44>
 8014bd8:	89a0      	ldrh	r0, [r4, #12]
 8014bda:	3701      	adds	r7, #1
 8014bdc:	b2b9      	uxth	r1, r7
 8014bde:	f000 fcc5 	bl	801556c <uxr_seq_num_add>
 8014be2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014be6:	fbb0 f3fc 	udiv	r3, r0, ip
 8014bea:	fb0c 0313 	mls	r3, ip, r3, r0
 8014bee:	b29a      	uxth	r2, r3
 8014bf0:	e9d4 1300 	ldrd	r1, r3, [r4]
 8014bf4:	fbb3 f3fc 	udiv	r3, r3, ip
 8014bf8:	fb02 f303 	mul.w	r3, r2, r3
 8014bfc:	58cb      	ldr	r3, [r1, r3]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d1e8      	bne.n	8014bd4 <uxr_compute_acknack+0x14>
 8014c02:	4605      	mov	r5, r0
 8014c04:	8035      	strh	r5, [r6, #0]
 8014c06:	2101      	movs	r1, #1
 8014c08:	4628      	mov	r0, r5
 8014c0a:	89e7      	ldrh	r7, [r4, #14]
 8014c0c:	f000 fcb2 	bl	8015574 <uxr_seq_num_sub>
 8014c10:	4601      	mov	r1, r0
 8014c12:	4638      	mov	r0, r7
 8014c14:	f000 fcae 	bl	8015574 <uxr_seq_num_sub>
 8014c18:	4605      	mov	r5, r0
 8014c1a:	b318      	cbz	r0, 8014c64 <uxr_compute_acknack+0xa4>
 8014c1c:	f04f 0900 	mov.w	r9, #0
 8014c20:	464f      	mov	r7, r9
 8014c22:	f04f 0801 	mov.w	r8, #1
 8014c26:	fa1f f189 	uxth.w	r1, r9
 8014c2a:	8830      	ldrh	r0, [r6, #0]
 8014c2c:	f000 fc9e 	bl	801556c <uxr_seq_num_add>
 8014c30:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014c34:	fbb0 f3fc 	udiv	r3, r0, ip
 8014c38:	e9d4 1200 	ldrd	r1, r2, [r4]
 8014c3c:	fb03 001c 	mls	r0, r3, ip, r0
 8014c40:	b283      	uxth	r3, r0
 8014c42:	fbb2 f2fc 	udiv	r2, r2, ip
 8014c46:	fb02 f303 	mul.w	r3, r2, r3
 8014c4a:	fa08 f209 	lsl.w	r2, r8, r9
 8014c4e:	58cb      	ldr	r3, [r1, r3]
 8014c50:	f109 0901 	add.w	r9, r9, #1
 8014c54:	b90b      	cbnz	r3, 8014c5a <uxr_compute_acknack+0x9a>
 8014c56:	4317      	orrs	r7, r2
 8014c58:	b2bf      	uxth	r7, r7
 8014c5a:	454d      	cmp	r5, r9
 8014c5c:	d1e3      	bne.n	8014c26 <uxr_compute_acknack+0x66>
 8014c5e:	4638      	mov	r0, r7
 8014c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c64:	4607      	mov	r7, r0
 8014c66:	4638      	mov	r0, r7
 8014c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014c6c <uxr_init_output_best_effort_stream>:
 8014c6c:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8014c70:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8014c74:	6001      	str	r1, [r0, #0]
 8014c76:	7303      	strb	r3, [r0, #12]
 8014c78:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8014c7c:	4770      	bx	lr
 8014c7e:	bf00      	nop

08014c80 <uxr_reset_output_best_effort_stream>:
 8014c80:	7b02      	ldrb	r2, [r0, #12]
 8014c82:	6042      	str	r2, [r0, #4]
 8014c84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c88:	81c3      	strh	r3, [r0, #14]
 8014c8a:	4770      	bx	lr

08014c8c <uxr_prepare_best_effort_buffer_to_write>:
 8014c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c8e:	4604      	mov	r4, r0
 8014c90:	b083      	sub	sp, #12
 8014c92:	6840      	ldr	r0, [r0, #4]
 8014c94:	460d      	mov	r5, r1
 8014c96:	4616      	mov	r6, r2
 8014c98:	f7f9 fce2 	bl	800e660 <uxr_submessage_padding>
 8014c9c:	6863      	ldr	r3, [r4, #4]
 8014c9e:	4418      	add	r0, r3
 8014ca0:	68a3      	ldr	r3, [r4, #8]
 8014ca2:	1942      	adds	r2, r0, r5
 8014ca4:	4293      	cmp	r3, r2
 8014ca6:	bf2c      	ite	cs
 8014ca8:	2701      	movcs	r7, #1
 8014caa:	2700      	movcc	r7, #0
 8014cac:	d202      	bcs.n	8014cb4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8014cae:	4638      	mov	r0, r7
 8014cb0:	b003      	add	sp, #12
 8014cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cb4:	9000      	str	r0, [sp, #0]
 8014cb6:	6821      	ldr	r1, [r4, #0]
 8014cb8:	4630      	mov	r0, r6
 8014cba:	2300      	movs	r3, #0
 8014cbc:	f7f8 f810 	bl	800cce0 <ucdr_init_buffer_origin_offset>
 8014cc0:	6861      	ldr	r1, [r4, #4]
 8014cc2:	4638      	mov	r0, r7
 8014cc4:	4429      	add	r1, r5
 8014cc6:	6061      	str	r1, [r4, #4]
 8014cc8:	b003      	add	sp, #12
 8014cca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014ccc <uxr_prepare_best_effort_buffer_to_send>:
 8014ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cd0:	4604      	mov	r4, r0
 8014cd2:	461d      	mov	r5, r3
 8014cd4:	6840      	ldr	r0, [r0, #4]
 8014cd6:	7b23      	ldrb	r3, [r4, #12]
 8014cd8:	4298      	cmp	r0, r3
 8014cda:	bf8c      	ite	hi
 8014cdc:	2601      	movhi	r6, #1
 8014cde:	2600      	movls	r6, #0
 8014ce0:	d802      	bhi.n	8014ce8 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8014ce2:	4630      	mov	r0, r6
 8014ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ce8:	4688      	mov	r8, r1
 8014cea:	89e0      	ldrh	r0, [r4, #14]
 8014cec:	2101      	movs	r1, #1
 8014cee:	4617      	mov	r7, r2
 8014cf0:	f000 fc3c 	bl	801556c <uxr_seq_num_add>
 8014cf4:	6823      	ldr	r3, [r4, #0]
 8014cf6:	81e0      	strh	r0, [r4, #14]
 8014cf8:	8028      	strh	r0, [r5, #0]
 8014cfa:	f8c8 3000 	str.w	r3, [r8]
 8014cfe:	6863      	ldr	r3, [r4, #4]
 8014d00:	603b      	str	r3, [r7, #0]
 8014d02:	7b23      	ldrb	r3, [r4, #12]
 8014d04:	6063      	str	r3, [r4, #4]
 8014d06:	4630      	mov	r0, r6
 8014d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014d0c <on_full_output_buffer>:
 8014d0c:	b538      	push	{r3, r4, r5, lr}
 8014d0e:	6802      	ldr	r2, [r0, #0]
 8014d10:	460c      	mov	r4, r1
 8014d12:	6809      	ldr	r1, [r1, #0]
 8014d14:	8923      	ldrh	r3, [r4, #8]
 8014d16:	eba2 0c01 	sub.w	ip, r2, r1
 8014d1a:	6862      	ldr	r2, [r4, #4]
 8014d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8014d20:	fbbc fcf2 	udiv	ip, ip, r2
 8014d24:	f10c 0c01 	add.w	ip, ip, #1
 8014d28:	fa1f fc8c 	uxth.w	ip, ip
 8014d2c:	fbbc fef3 	udiv	lr, ip, r3
 8014d30:	fb03 c31e 	mls	r3, r3, lr, ip
 8014d34:	b29b      	uxth	r3, r3
 8014d36:	fb02 f303 	mul.w	r3, r2, r3
 8014d3a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8014d3e:	58ca      	ldr	r2, [r1, r3]
 8014d40:	4463      	add	r3, ip
 8014d42:	eba2 020c 	sub.w	r2, r2, ip
 8014d46:	3308      	adds	r3, #8
 8014d48:	4605      	mov	r5, r0
 8014d4a:	4419      	add	r1, r3
 8014d4c:	3a04      	subs	r2, #4
 8014d4e:	6903      	ldr	r3, [r0, #16]
 8014d50:	f7f7 ffd0 	bl	800ccf4 <ucdr_init_buffer_origin>
 8014d54:	4628      	mov	r0, r5
 8014d56:	4903      	ldr	r1, [pc, #12]	; (8014d64 <on_full_output_buffer+0x58>)
 8014d58:	4622      	mov	r2, r4
 8014d5a:	f7f7 ffa7 	bl	800ccac <ucdr_set_on_full_buffer_callback>
 8014d5e:	2000      	movs	r0, #0
 8014d60:	bd38      	pop	{r3, r4, r5, pc}
 8014d62:	bf00      	nop
 8014d64:	08014d0d 	.word	0x08014d0d

08014d68 <uxr_init_output_reliable_stream>:
 8014d68:	b410      	push	{r4}
 8014d6a:	f89d c004 	ldrb.w	ip, [sp, #4]
 8014d6e:	8103      	strh	r3, [r0, #8]
 8014d70:	e9c0 1200 	strd	r1, r2, [r0]
 8014d74:	f880 c00c 	strb.w	ip, [r0, #12]
 8014d78:	b1d3      	cbz	r3, 8014db0 <uxr_init_output_reliable_stream+0x48>
 8014d7a:	f8c1 c000 	str.w	ip, [r1]
 8014d7e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014d82:	f1bc 0f01 	cmp.w	ip, #1
 8014d86:	d913      	bls.n	8014db0 <uxr_init_output_reliable_stream+0x48>
 8014d88:	2301      	movs	r3, #1
 8014d8a:	fbb3 f1fc 	udiv	r1, r3, ip
 8014d8e:	fb0c 3111 	mls	r1, ip, r1, r3
 8014d92:	b289      	uxth	r1, r1
 8014d94:	6842      	ldr	r2, [r0, #4]
 8014d96:	6804      	ldr	r4, [r0, #0]
 8014d98:	fbb2 f2fc 	udiv	r2, r2, ip
 8014d9c:	fb01 f202 	mul.w	r2, r1, r2
 8014da0:	7b01      	ldrb	r1, [r0, #12]
 8014da2:	50a1      	str	r1, [r4, r2]
 8014da4:	3301      	adds	r3, #1
 8014da6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014daa:	b29b      	uxth	r3, r3
 8014dac:	459c      	cmp	ip, r3
 8014dae:	d8ec      	bhi.n	8014d8a <uxr_init_output_reliable_stream+0x22>
 8014db0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014db4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014db8:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014dbc:	4905      	ldr	r1, [pc, #20]	; (8014dd4 <uxr_init_output_reliable_stream+0x6c>)
 8014dbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014dc2:	f8c0 100e 	str.w	r1, [r0, #14]
 8014dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014dca:	2300      	movs	r3, #0
 8014dcc:	8242      	strh	r2, [r0, #18]
 8014dce:	8403      	strh	r3, [r0, #32]
 8014dd0:	4770      	bx	lr
 8014dd2:	bf00      	nop
 8014dd4:	ffff0000 	.word	0xffff0000

08014dd8 <uxr_reset_output_reliable_stream>:
 8014dd8:	8901      	ldrh	r1, [r0, #8]
 8014dda:	b1b1      	cbz	r1, 8014e0a <uxr_reset_output_reliable_stream+0x32>
 8014ddc:	f04f 0c00 	mov.w	ip, #0
 8014de0:	4663      	mov	r3, ip
 8014de2:	fbb3 f2f1 	udiv	r2, r3, r1
 8014de6:	fb01 3312 	mls	r3, r1, r2, r3
 8014dea:	b29b      	uxth	r3, r3
 8014dec:	6842      	ldr	r2, [r0, #4]
 8014dee:	fbb2 f2f1 	udiv	r2, r2, r1
 8014df2:	6801      	ldr	r1, [r0, #0]
 8014df4:	fb02 f303 	mul.w	r3, r2, r3
 8014df8:	7b02      	ldrb	r2, [r0, #12]
 8014dfa:	50ca      	str	r2, [r1, r3]
 8014dfc:	f10c 0c01 	add.w	ip, ip, #1
 8014e00:	8901      	ldrh	r1, [r0, #8]
 8014e02:	fa1f f38c 	uxth.w	r3, ip
 8014e06:	4299      	cmp	r1, r3
 8014e08:	d8eb      	bhi.n	8014de2 <uxr_reset_output_reliable_stream+0xa>
 8014e0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014e0e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014e12:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014e16:	4904      	ldr	r1, [pc, #16]	; (8014e28 <uxr_reset_output_reliable_stream+0x50>)
 8014e18:	f8c0 100e 	str.w	r1, [r0, #14]
 8014e1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014e20:	2300      	movs	r3, #0
 8014e22:	8242      	strh	r2, [r0, #18]
 8014e24:	8403      	strh	r3, [r0, #32]
 8014e26:	4770      	bx	lr
 8014e28:	ffff0000 	.word	0xffff0000

08014e2c <uxr_prepare_reliable_buffer_to_write>:
 8014e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e30:	4604      	mov	r4, r0
 8014e32:	b091      	sub	sp, #68	; 0x44
 8014e34:	8900      	ldrh	r0, [r0, #8]
 8014e36:	89e6      	ldrh	r6, [r4, #14]
 8014e38:	6823      	ldr	r3, [r4, #0]
 8014e3a:	9204      	str	r2, [sp, #16]
 8014e3c:	fbb6 f2f0 	udiv	r2, r6, r0
 8014e40:	fb00 6212 	mls	r2, r0, r2, r6
 8014e44:	b292      	uxth	r2, r2
 8014e46:	6865      	ldr	r5, [r4, #4]
 8014e48:	fbb5 f5f0 	udiv	r5, r5, r0
 8014e4c:	fb05 3202 	mla	r2, r5, r2, r3
 8014e50:	3204      	adds	r2, #4
 8014e52:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8014e56:	f894 900c 	ldrb.w	r9, [r4, #12]
 8014e5a:	9203      	str	r2, [sp, #12]
 8014e5c:	468b      	mov	fp, r1
 8014e5e:	1f2f      	subs	r7, r5, #4
 8014e60:	2800      	cmp	r0, #0
 8014e62:	f000 814c 	beq.w	80150fe <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8014e66:	f04f 0c00 	mov.w	ip, #0
 8014e6a:	46e2      	mov	sl, ip
 8014e6c:	4661      	mov	r1, ip
 8014e6e:	fbb1 f2f0 	udiv	r2, r1, r0
 8014e72:	fb00 1212 	mls	r2, r0, r2, r1
 8014e76:	b292      	uxth	r2, r2
 8014e78:	fb05 f202 	mul.w	r2, r5, r2
 8014e7c:	f10c 0c01 	add.w	ip, ip, #1
 8014e80:	589a      	ldr	r2, [r3, r2]
 8014e82:	454a      	cmp	r2, r9
 8014e84:	bf08      	it	eq
 8014e86:	f10a 0a01 	addeq.w	sl, sl, #1
 8014e8a:	fa1f f18c 	uxth.w	r1, ip
 8014e8e:	bf08      	it	eq
 8014e90:	fa1f fa8a 	uxtheq.w	sl, sl
 8014e94:	4281      	cmp	r1, r0
 8014e96:	d3ea      	bcc.n	8014e6e <uxr_prepare_reliable_buffer_to_write+0x42>
 8014e98:	4640      	mov	r0, r8
 8014e9a:	2104      	movs	r1, #4
 8014e9c:	f8cd a014 	str.w	sl, [sp, #20]
 8014ea0:	f7f7 ff34 	bl	800cd0c <ucdr_alignment>
 8014ea4:	4480      	add	r8, r0
 8014ea6:	eb08 020b 	add.w	r2, r8, fp
 8014eaa:	42ba      	cmp	r2, r7
 8014eac:	f240 80cd 	bls.w	801504a <uxr_prepare_reliable_buffer_to_write+0x21e>
 8014eb0:	7b22      	ldrb	r2, [r4, #12]
 8014eb2:	445a      	add	r2, fp
 8014eb4:	42ba      	cmp	r2, r7
 8014eb6:	f240 80b5 	bls.w	8015024 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8014eba:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 8014ebe:	33fc      	adds	r3, #252	; 0xfc
 8014ec0:	b2ba      	uxth	r2, r7
 8014ec2:	4413      	add	r3, r2
 8014ec4:	b29b      	uxth	r3, r3
 8014ec6:	fb0a f903 	mul.w	r9, sl, r3
 8014eca:	45d9      	cmp	r9, fp
 8014ecc:	9305      	str	r3, [sp, #20]
 8014ece:	9306      	str	r3, [sp, #24]
 8014ed0:	f0c0 80b7 	bcc.w	8015042 <uxr_prepare_reliable_buffer_to_write+0x216>
 8014ed4:	f108 0304 	add.w	r3, r8, #4
 8014ed8:	42bb      	cmp	r3, r7
 8014eda:	f080 80db 	bcs.w	8015094 <uxr_prepare_reliable_buffer_to_write+0x268>
 8014ede:	f1a2 0904 	sub.w	r9, r2, #4
 8014ee2:	eba9 0908 	sub.w	r9, r9, r8
 8014ee6:	9b05      	ldr	r3, [sp, #20]
 8014ee8:	fa1f f989 	uxth.w	r9, r9
 8014eec:	ebab 0b09 	sub.w	fp, fp, r9
 8014ef0:	fbbb f2f3 	udiv	r2, fp, r3
 8014ef4:	fb03 b312 	mls	r3, r3, r2, fp
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	f000 80c8 	beq.w	801508e <uxr_prepare_reliable_buffer_to_write+0x262>
 8014efe:	3201      	adds	r2, #1
 8014f00:	b292      	uxth	r2, r2
 8014f02:	9306      	str	r3, [sp, #24]
 8014f04:	4552      	cmp	r2, sl
 8014f06:	f200 809c 	bhi.w	8015042 <uxr_prepare_reliable_buffer_to_write+0x216>
 8014f0a:	f10d 0b20 	add.w	fp, sp, #32
 8014f0e:	2a00      	cmp	r2, #0
 8014f10:	d042      	beq.n	8014f98 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8014f12:	f8cd 801c 	str.w	r8, [sp, #28]
 8014f16:	f04f 0a00 	mov.w	sl, #0
 8014f1a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014f1e:	9505      	str	r5, [sp, #20]
 8014f20:	f10d 0b20 	add.w	fp, sp, #32
 8014f24:	4615      	mov	r5, r2
 8014f26:	e000      	b.n	8014f2a <uxr_prepare_reliable_buffer_to_write+0xfe>
 8014f28:	46c1      	mov	r9, r8
 8014f2a:	8920      	ldrh	r0, [r4, #8]
 8014f2c:	fbb6 f2f0 	udiv	r2, r6, r0
 8014f30:	fb00 6112 	mls	r1, r0, r2, r6
 8014f34:	b28a      	uxth	r2, r1
 8014f36:	6863      	ldr	r3, [r4, #4]
 8014f38:	fbb3 f1f0 	udiv	r1, r3, r0
 8014f3c:	6823      	ldr	r3, [r4, #0]
 8014f3e:	fb02 f101 	mul.w	r1, r2, r1
 8014f42:	3104      	adds	r1, #4
 8014f44:	4419      	add	r1, r3
 8014f46:	4658      	mov	r0, fp
 8014f48:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8014f4c:	9200      	str	r2, [sp, #0]
 8014f4e:	2300      	movs	r3, #0
 8014f50:	463a      	mov	r2, r7
 8014f52:	f7f7 fec5 	bl	800cce0 <ucdr_init_buffer_origin_offset>
 8014f56:	464a      	mov	r2, r9
 8014f58:	2300      	movs	r3, #0
 8014f5a:	210d      	movs	r1, #13
 8014f5c:	4658      	mov	r0, fp
 8014f5e:	f7f9 fb3f 	bl	800e5e0 <uxr_buffer_submessage_header>
 8014f62:	8921      	ldrh	r1, [r4, #8]
 8014f64:	fbb6 f2f1 	udiv	r2, r6, r1
 8014f68:	fb01 6212 	mls	r2, r1, r2, r6
 8014f6c:	b292      	uxth	r2, r2
 8014f6e:	6863      	ldr	r3, [r4, #4]
 8014f70:	fbb3 f3f1 	udiv	r3, r3, r1
 8014f74:	fb02 f303 	mul.w	r3, r2, r3
 8014f78:	6822      	ldr	r2, [r4, #0]
 8014f7a:	4630      	mov	r0, r6
 8014f7c:	50d7      	str	r7, [r2, r3]
 8014f7e:	2101      	movs	r1, #1
 8014f80:	f000 faf4 	bl	801556c <uxr_seq_num_add>
 8014f84:	f10a 0a01 	add.w	sl, sl, #1
 8014f88:	fa1f f38a 	uxth.w	r3, sl
 8014f8c:	429d      	cmp	r5, r3
 8014f8e:	4606      	mov	r6, r0
 8014f90:	d8ca      	bhi.n	8014f28 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8014f92:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014f96:	9d05      	ldr	r5, [sp, #20]
 8014f98:	8920      	ldrh	r0, [r4, #8]
 8014f9a:	fbb6 f3f0 	udiv	r3, r6, r0
 8014f9e:	fb00 6313 	mls	r3, r0, r3, r6
 8014fa2:	b299      	uxth	r1, r3
 8014fa4:	6863      	ldr	r3, [r4, #4]
 8014fa6:	fbb3 f3f0 	udiv	r3, r3, r0
 8014faa:	fb01 f303 	mul.w	r3, r1, r3
 8014fae:	6821      	ldr	r1, [r4, #0]
 8014fb0:	3304      	adds	r3, #4
 8014fb2:	4419      	add	r1, r3
 8014fb4:	463a      	mov	r2, r7
 8014fb6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8014fba:	9000      	str	r0, [sp, #0]
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	4658      	mov	r0, fp
 8014fc0:	f7f7 fe8e 	bl	800cce0 <ucdr_init_buffer_origin_offset>
 8014fc4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8014fc8:	4658      	mov	r0, fp
 8014fca:	fa1f f289 	uxth.w	r2, r9
 8014fce:	2302      	movs	r3, #2
 8014fd0:	210d      	movs	r1, #13
 8014fd2:	f7f9 fb05 	bl	800e5e0 <uxr_buffer_submessage_header>
 8014fd6:	9b03      	ldr	r3, [sp, #12]
 8014fd8:	8927      	ldrh	r7, [r4, #8]
 8014fda:	7b20      	ldrb	r0, [r4, #12]
 8014fdc:	f108 0104 	add.w	r1, r8, #4
 8014fe0:	440b      	add	r3, r1
 8014fe2:	4619      	mov	r1, r3
 8014fe4:	fbb6 f3f7 	udiv	r3, r6, r7
 8014fe8:	fb07 6313 	mls	r3, r7, r3, r6
 8014fec:	f1a5 0208 	sub.w	r2, r5, #8
 8014ff0:	b29d      	uxth	r5, r3
 8014ff2:	3004      	adds	r0, #4
 8014ff4:	6863      	ldr	r3, [r4, #4]
 8014ff6:	fbb3 f3f7 	udiv	r3, r3, r7
 8014ffa:	fb05 f303 	mul.w	r3, r5, r3
 8014ffe:	6825      	ldr	r5, [r4, #0]
 8015000:	4448      	add	r0, r9
 8015002:	50e8      	str	r0, [r5, r3]
 8015004:	9d04      	ldr	r5, [sp, #16]
 8015006:	eba2 0208 	sub.w	r2, r2, r8
 801500a:	4628      	mov	r0, r5
 801500c:	f7f7 fe7a 	bl	800cd04 <ucdr_init_buffer>
 8015010:	4628      	mov	r0, r5
 8015012:	493c      	ldr	r1, [pc, #240]	; (8015104 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8015014:	4622      	mov	r2, r4
 8015016:	f7f7 fe49 	bl	800ccac <ucdr_set_on_full_buffer_callback>
 801501a:	2001      	movs	r0, #1
 801501c:	81e6      	strh	r6, [r4, #14]
 801501e:	b011      	add	sp, #68	; 0x44
 8015020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015024:	2101      	movs	r1, #1
 8015026:	89e0      	ldrh	r0, [r4, #14]
 8015028:	f000 faa0 	bl	801556c <uxr_seq_num_add>
 801502c:	8921      	ldrh	r1, [r4, #8]
 801502e:	4605      	mov	r5, r0
 8015030:	8a60      	ldrh	r0, [r4, #18]
 8015032:	f000 fa9b 	bl	801556c <uxr_seq_num_add>
 8015036:	4601      	mov	r1, r0
 8015038:	4628      	mov	r0, r5
 801503a:	f000 fa9f 	bl	801557c <uxr_seq_num_cmp>
 801503e:	2800      	cmp	r0, #0
 8015040:	dd42      	ble.n	80150c8 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8015042:	2000      	movs	r0, #0
 8015044:	b011      	add	sp, #68	; 0x44
 8015046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801504a:	8921      	ldrh	r1, [r4, #8]
 801504c:	8a60      	ldrh	r0, [r4, #18]
 801504e:	9205      	str	r2, [sp, #20]
 8015050:	f000 fa8c 	bl	801556c <uxr_seq_num_add>
 8015054:	4601      	mov	r1, r0
 8015056:	4630      	mov	r0, r6
 8015058:	f000 fa90 	bl	801557c <uxr_seq_num_cmp>
 801505c:	2800      	cmp	r0, #0
 801505e:	9a05      	ldr	r2, [sp, #20]
 8015060:	dcef      	bgt.n	8015042 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015062:	8927      	ldrh	r7, [r4, #8]
 8015064:	fbb6 f3f7 	udiv	r3, r6, r7
 8015068:	fb07 6313 	mls	r3, r7, r3, r6
 801506c:	b29d      	uxth	r5, r3
 801506e:	6863      	ldr	r3, [r4, #4]
 8015070:	6824      	ldr	r4, [r4, #0]
 8015072:	fbb3 f3f7 	udiv	r3, r3, r7
 8015076:	fb05 f303 	mul.w	r3, r5, r3
 801507a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801507e:	50e2      	str	r2, [r4, r3]
 8015080:	2300      	movs	r3, #0
 8015082:	f8cd 8000 	str.w	r8, [sp]
 8015086:	f7f7 fe2b 	bl	800cce0 <ucdr_init_buffer_origin_offset>
 801508a:	2001      	movs	r0, #1
 801508c:	e7da      	b.n	8015044 <uxr_prepare_reliable_buffer_to_write+0x218>
 801508e:	b293      	uxth	r3, r2
 8015090:	461a      	mov	r2, r3
 8015092:	e737      	b.n	8014f04 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8015094:	4630      	mov	r0, r6
 8015096:	2101      	movs	r1, #1
 8015098:	9207      	str	r2, [sp, #28]
 801509a:	f000 fa67 	bl	801556c <uxr_seq_num_add>
 801509e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80150a2:	fbb0 f1fc 	udiv	r1, r0, ip
 80150a6:	fb0c 0111 	mls	r1, ip, r1, r0
 80150aa:	4606      	mov	r6, r0
 80150ac:	b288      	uxth	r0, r1
 80150ae:	6863      	ldr	r3, [r4, #4]
 80150b0:	fbb3 f1fc 	udiv	r1, r3, ip
 80150b4:	6823      	ldr	r3, [r4, #0]
 80150b6:	9a07      	ldr	r2, [sp, #28]
 80150b8:	fb00 f101 	mul.w	r1, r0, r1
 80150bc:	3104      	adds	r1, #4
 80150be:	440b      	add	r3, r1
 80150c0:	9303      	str	r3, [sp, #12]
 80150c2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80150c6:	e70a      	b.n	8014ede <uxr_prepare_reliable_buffer_to_write+0xb2>
 80150c8:	8921      	ldrh	r1, [r4, #8]
 80150ca:	fbb5 f3f1 	udiv	r3, r5, r1
 80150ce:	fb01 5313 	mls	r3, r1, r3, r5
 80150d2:	b29a      	uxth	r2, r3
 80150d4:	6863      	ldr	r3, [r4, #4]
 80150d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80150da:	6821      	ldr	r1, [r4, #0]
 80150dc:	9804      	ldr	r0, [sp, #16]
 80150de:	fb02 f303 	mul.w	r3, r2, r3
 80150e2:	3304      	adds	r3, #4
 80150e4:	7b22      	ldrb	r2, [r4, #12]
 80150e6:	4419      	add	r1, r3
 80150e8:	445a      	add	r2, fp
 80150ea:	f841 2c04 	str.w	r2, [r1, #-4]
 80150ee:	7b23      	ldrb	r3, [r4, #12]
 80150f0:	9300      	str	r3, [sp, #0]
 80150f2:	2300      	movs	r3, #0
 80150f4:	f7f7 fdf4 	bl	800cce0 <ucdr_init_buffer_origin_offset>
 80150f8:	81e5      	strh	r5, [r4, #14]
 80150fa:	2001      	movs	r0, #1
 80150fc:	e7a2      	b.n	8015044 <uxr_prepare_reliable_buffer_to_write+0x218>
 80150fe:	4682      	mov	sl, r0
 8015100:	e6ca      	b.n	8014e98 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8015102:	bf00      	nop
 8015104:	08014d0d 	.word	0x08014d0d

08015108 <uxr_prepare_next_reliable_buffer_to_send>:
 8015108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801510a:	4604      	mov	r4, r0
 801510c:	460f      	mov	r7, r1
 801510e:	8a00      	ldrh	r0, [r0, #16]
 8015110:	2101      	movs	r1, #1
 8015112:	4616      	mov	r6, r2
 8015114:	461d      	mov	r5, r3
 8015116:	f000 fa29 	bl	801556c <uxr_seq_num_add>
 801511a:	8028      	strh	r0, [r5, #0]
 801511c:	8922      	ldrh	r2, [r4, #8]
 801511e:	fbb0 f3f2 	udiv	r3, r0, r2
 8015122:	fb02 0c13 	mls	ip, r2, r3, r0
 8015126:	fa1f fc8c 	uxth.w	ip, ip
 801512a:	6863      	ldr	r3, [r4, #4]
 801512c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015130:	fb0c fc03 	mul.w	ip, ip, r3
 8015134:	6823      	ldr	r3, [r4, #0]
 8015136:	89e1      	ldrh	r1, [r4, #14]
 8015138:	f10c 0c04 	add.w	ip, ip, #4
 801513c:	4463      	add	r3, ip
 801513e:	603b      	str	r3, [r7, #0]
 8015140:	6823      	ldr	r3, [r4, #0]
 8015142:	449c      	add	ip, r3
 8015144:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8015148:	6033      	str	r3, [r6, #0]
 801514a:	f000 fa17 	bl	801557c <uxr_seq_num_cmp>
 801514e:	2800      	cmp	r0, #0
 8015150:	dd01      	ble.n	8015156 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8015152:	2000      	movs	r0, #0
 8015154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015156:	7b23      	ldrb	r3, [r4, #12]
 8015158:	6832      	ldr	r2, [r6, #0]
 801515a:	429a      	cmp	r2, r3
 801515c:	d9f9      	bls.n	8015152 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801515e:	8a61      	ldrh	r1, [r4, #18]
 8015160:	8a20      	ldrh	r0, [r4, #16]
 8015162:	f000 fa07 	bl	8015574 <uxr_seq_num_sub>
 8015166:	8923      	ldrh	r3, [r4, #8]
 8015168:	4283      	cmp	r3, r0
 801516a:	d0f2      	beq.n	8015152 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801516c:	8828      	ldrh	r0, [r5, #0]
 801516e:	89e3      	ldrh	r3, [r4, #14]
 8015170:	8220      	strh	r0, [r4, #16]
 8015172:	4298      	cmp	r0, r3
 8015174:	d001      	beq.n	801517a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8015176:	2001      	movs	r0, #1
 8015178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801517a:	2101      	movs	r1, #1
 801517c:	f000 f9f6 	bl	801556c <uxr_seq_num_add>
 8015180:	81e0      	strh	r0, [r4, #14]
 8015182:	2001      	movs	r0, #1
 8015184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015186:	bf00      	nop

08015188 <uxr_update_output_stream_heartbeat_timestamp>:
 8015188:	b570      	push	{r4, r5, r6, lr}
 801518a:	8a01      	ldrh	r1, [r0, #16]
 801518c:	4604      	mov	r4, r0
 801518e:	8a40      	ldrh	r0, [r0, #18]
 8015190:	4615      	mov	r5, r2
 8015192:	461e      	mov	r6, r3
 8015194:	f000 f9f2 	bl	801557c <uxr_seq_num_cmp>
 8015198:	2800      	cmp	r0, #0
 801519a:	db07      	blt.n	80151ac <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801519c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80151a0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80151a4:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80151a8:	2000      	movs	r0, #0
 80151aa:	bd70      	pop	{r4, r5, r6, pc}
 80151ac:	f894 0020 	ldrb.w	r0, [r4, #32]
 80151b0:	b940      	cbnz	r0, 80151c4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80151b2:	2301      	movs	r3, #1
 80151b4:	f884 3020 	strb.w	r3, [r4, #32]
 80151b8:	3564      	adds	r5, #100	; 0x64
 80151ba:	f146 0600 	adc.w	r6, r6, #0
 80151be:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80151c2:	bd70      	pop	{r4, r5, r6, pc}
 80151c4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80151c8:	4295      	cmp	r5, r2
 80151ca:	eb76 0303 	sbcs.w	r3, r6, r3
 80151ce:	bfa5      	ittet	ge
 80151d0:	3001      	addge	r0, #1
 80151d2:	f884 0020 	strbge.w	r0, [r4, #32]
 80151d6:	2000      	movlt	r0, #0
 80151d8:	2001      	movge	r0, #1
 80151da:	e7ed      	b.n	80151b8 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080151dc <uxr_begin_output_nack_buffer_it>:
 80151dc:	8a40      	ldrh	r0, [r0, #18]
 80151de:	4770      	bx	lr

080151e0 <uxr_next_reliable_nack_buffer_to_send>:
 80151e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151e4:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 80151e8:	b082      	sub	sp, #8
 80151ea:	f1b8 0f00 	cmp.w	r8, #0
 80151ee:	d011      	beq.n	8015214 <uxr_next_reliable_nack_buffer_to_send+0x34>
 80151f0:	4604      	mov	r4, r0
 80151f2:	8818      	ldrh	r0, [r3, #0]
 80151f4:	460e      	mov	r6, r1
 80151f6:	4617      	mov	r7, r2
 80151f8:	461d      	mov	r5, r3
 80151fa:	2101      	movs	r1, #1
 80151fc:	f000 f9b6 	bl	801556c <uxr_seq_num_add>
 8015200:	8028      	strh	r0, [r5, #0]
 8015202:	8a21      	ldrh	r1, [r4, #16]
 8015204:	f000 f9ba 	bl	801557c <uxr_seq_num_cmp>
 8015208:	2800      	cmp	r0, #0
 801520a:	dd07      	ble.n	801521c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801520c:	f04f 0800 	mov.w	r8, #0
 8015210:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 8015214:	4640      	mov	r0, r8
 8015216:	b002      	add	sp, #8
 8015218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801521c:	8921      	ldrh	r1, [r4, #8]
 801521e:	8828      	ldrh	r0, [r5, #0]
 8015220:	6823      	ldr	r3, [r4, #0]
 8015222:	fbb0 f2f1 	udiv	r2, r0, r1
 8015226:	fb01 0c12 	mls	ip, r1, r2, r0
 801522a:	fa1f f28c 	uxth.w	r2, ip
 801522e:	9301      	str	r3, [sp, #4]
 8015230:	6863      	ldr	r3, [r4, #4]
 8015232:	fbb3 fcf1 	udiv	ip, r3, r1
 8015236:	9b01      	ldr	r3, [sp, #4]
 8015238:	fb02 fc0c 	mul.w	ip, r2, ip
 801523c:	f10c 0c04 	add.w	ip, ip, #4
 8015240:	4463      	add	r3, ip
 8015242:	6033      	str	r3, [r6, #0]
 8015244:	6823      	ldr	r3, [r4, #0]
 8015246:	4463      	add	r3, ip
 8015248:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801524c:	603b      	str	r3, [r7, #0]
 801524e:	7b22      	ldrb	r2, [r4, #12]
 8015250:	429a      	cmp	r2, r3
 8015252:	d0d2      	beq.n	80151fa <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8015254:	4640      	mov	r0, r8
 8015256:	b002      	add	sp, #8
 8015258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801525c <uxr_process_acknack>:
 801525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801525e:	4604      	mov	r4, r0
 8015260:	460e      	mov	r6, r1
 8015262:	4610      	mov	r0, r2
 8015264:	2101      	movs	r1, #1
 8015266:	f000 f985 	bl	8015574 <uxr_seq_num_sub>
 801526a:	8a61      	ldrh	r1, [r4, #18]
 801526c:	f000 f982 	bl	8015574 <uxr_seq_num_sub>
 8015270:	b1c0      	cbz	r0, 80152a4 <uxr_process_acknack+0x48>
 8015272:	4605      	mov	r5, r0
 8015274:	2700      	movs	r7, #0
 8015276:	2101      	movs	r1, #1
 8015278:	8a60      	ldrh	r0, [r4, #18]
 801527a:	f000 f977 	bl	801556c <uxr_seq_num_add>
 801527e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015282:	fbb0 f1fc 	udiv	r1, r0, ip
 8015286:	e9d4 2300 	ldrd	r2, r3, [r4]
 801528a:	fb0c 0111 	mls	r1, ip, r1, r0
 801528e:	b289      	uxth	r1, r1
 8015290:	3701      	adds	r7, #1
 8015292:	fbb3 f3fc 	udiv	r3, r3, ip
 8015296:	fb01 f303 	mul.w	r3, r1, r3
 801529a:	42bd      	cmp	r5, r7
 801529c:	7b21      	ldrb	r1, [r4, #12]
 801529e:	8260      	strh	r0, [r4, #18]
 80152a0:	50d1      	str	r1, [r2, r3]
 80152a2:	d1e8      	bne.n	8015276 <uxr_process_acknack+0x1a>
 80152a4:	3e00      	subs	r6, #0
 80152a6:	f04f 0300 	mov.w	r3, #0
 80152aa:	bf18      	it	ne
 80152ac:	2601      	movne	r6, #1
 80152ae:	f884 3020 	strb.w	r3, [r4, #32]
 80152b2:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 80152b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080152b8 <uxr_is_output_up_to_date>:
 80152b8:	8a01      	ldrh	r1, [r0, #16]
 80152ba:	8a40      	ldrh	r0, [r0, #18]
 80152bc:	b508      	push	{r3, lr}
 80152be:	f000 f95d 	bl	801557c <uxr_seq_num_cmp>
 80152c2:	fab0 f080 	clz	r0, r0
 80152c6:	0940      	lsrs	r0, r0, #5
 80152c8:	bd08      	pop	{r3, pc}
 80152ca:	bf00      	nop

080152cc <get_available_free_slots>:
 80152cc:	8902      	ldrh	r2, [r0, #8]
 80152ce:	b1da      	cbz	r2, 8015308 <get_available_free_slots+0x3c>
 80152d0:	b530      	push	{r4, r5, lr}
 80152d2:	2100      	movs	r1, #0
 80152d4:	6843      	ldr	r3, [r0, #4]
 80152d6:	6805      	ldr	r5, [r0, #0]
 80152d8:	7b04      	ldrb	r4, [r0, #12]
 80152da:	fbb3 fef2 	udiv	lr, r3, r2
 80152de:	4608      	mov	r0, r1
 80152e0:	460b      	mov	r3, r1
 80152e2:	fbb3 fcf2 	udiv	ip, r3, r2
 80152e6:	fb02 331c 	mls	r3, r2, ip, r3
 80152ea:	b29b      	uxth	r3, r3
 80152ec:	fb0e f303 	mul.w	r3, lr, r3
 80152f0:	3101      	adds	r1, #1
 80152f2:	f855 c003 	ldr.w	ip, [r5, r3]
 80152f6:	4564      	cmp	r4, ip
 80152f8:	bf08      	it	eq
 80152fa:	3001      	addeq	r0, #1
 80152fc:	b28b      	uxth	r3, r1
 80152fe:	bf08      	it	eq
 8015300:	b280      	uxtheq	r0, r0
 8015302:	4293      	cmp	r3, r2
 8015304:	d3ed      	bcc.n	80152e2 <get_available_free_slots+0x16>
 8015306:	bd30      	pop	{r4, r5, pc}
 8015308:	4610      	mov	r0, r2
 801530a:	4770      	bx	lr

0801530c <uxr_buffer_request_data>:
 801530c:	b530      	push	{r4, r5, lr}
 801530e:	b095      	sub	sp, #84	; 0x54
 8015310:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8015314:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8015316:	9303      	str	r3, [sp, #12]
 8015318:	2200      	movs	r2, #0
 801531a:	2d00      	cmp	r5, #0
 801531c:	bf14      	ite	ne
 801531e:	2101      	movne	r1, #1
 8015320:	4611      	moveq	r1, r2
 8015322:	4604      	mov	r4, r0
 8015324:	f88d 301c 	strb.w	r3, [sp, #28]
 8015328:	f88d 201d 	strb.w	r2, [sp, #29]
 801532c:	f88d 201e 	strb.w	r2, [sp, #30]
 8015330:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8015334:	d021      	beq.n	801537a <uxr_buffer_request_data+0x6e>
 8015336:	682a      	ldr	r2, [r5, #0]
 8015338:	686b      	ldr	r3, [r5, #4]
 801533a:	f8cd 2026 	str.w	r2, [sp, #38]	; 0x26
 801533e:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8015342:	2210      	movs	r2, #16
 8015344:	2308      	movs	r3, #8
 8015346:	2100      	movs	r1, #0
 8015348:	e9cd 3100 	strd	r3, r1, [sp]
 801534c:	4620      	mov	r0, r4
 801534e:	9905      	ldr	r1, [sp, #20]
 8015350:	ab0c      	add	r3, sp, #48	; 0x30
 8015352:	f7f8 fea7 	bl	800e0a4 <uxr_prepare_stream_to_write_submessage>
 8015356:	b918      	cbnz	r0, 8015360 <uxr_buffer_request_data+0x54>
 8015358:	4604      	mov	r4, r0
 801535a:	4620      	mov	r0, r4
 801535c:	b015      	add	sp, #84	; 0x54
 801535e:	bd30      	pop	{r4, r5, pc}
 8015360:	9904      	ldr	r1, [sp, #16]
 8015362:	aa06      	add	r2, sp, #24
 8015364:	4620      	mov	r0, r4
 8015366:	f7f8 ffd3 	bl	800e310 <uxr_init_base_object_request>
 801536a:	a906      	add	r1, sp, #24
 801536c:	4604      	mov	r4, r0
 801536e:	a80c      	add	r0, sp, #48	; 0x30
 8015370:	f7fa face 	bl	800f910 <uxr_serialize_READ_DATA_Payload>
 8015374:	4620      	mov	r0, r4
 8015376:	b015      	add	sp, #84	; 0x54
 8015378:	bd30      	pop	{r4, r5, pc}
 801537a:	2208      	movs	r2, #8
 801537c:	e7e2      	b.n	8015344 <uxr_buffer_request_data+0x38>
 801537e:	bf00      	nop

08015380 <uxr_buffer_cancel_data>:
 8015380:	b510      	push	{r4, lr}
 8015382:	b094      	sub	sp, #80	; 0x50
 8015384:	2300      	movs	r3, #0
 8015386:	9202      	str	r2, [sp, #8]
 8015388:	9205      	str	r2, [sp, #20]
 801538a:	9301      	str	r3, [sp, #4]
 801538c:	2201      	movs	r2, #1
 801538e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015392:	f88d 301e 	strb.w	r3, [sp, #30]
 8015396:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 801539a:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801539e:	2308      	movs	r3, #8
 80153a0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80153a4:	9300      	str	r3, [sp, #0]
 80153a6:	2210      	movs	r2, #16
 80153a8:	ab0c      	add	r3, sp, #48	; 0x30
 80153aa:	4604      	mov	r4, r0
 80153ac:	9103      	str	r1, [sp, #12]
 80153ae:	f7f8 fe79 	bl	800e0a4 <uxr_prepare_stream_to_write_submessage>
 80153b2:	b918      	cbnz	r0, 80153bc <uxr_buffer_cancel_data+0x3c>
 80153b4:	4604      	mov	r4, r0
 80153b6:	4620      	mov	r0, r4
 80153b8:	b014      	add	sp, #80	; 0x50
 80153ba:	bd10      	pop	{r4, pc}
 80153bc:	9905      	ldr	r1, [sp, #20]
 80153be:	aa06      	add	r2, sp, #24
 80153c0:	4620      	mov	r0, r4
 80153c2:	f7f8 ffa5 	bl	800e310 <uxr_init_base_object_request>
 80153c6:	a906      	add	r1, sp, #24
 80153c8:	4604      	mov	r4, r0
 80153ca:	a80c      	add	r0, sp, #48	; 0x30
 80153cc:	f7fa faa0 	bl	800f910 <uxr_serialize_READ_DATA_Payload>
 80153d0:	4620      	mov	r0, r4
 80153d2:	b014      	add	sp, #80	; 0x50
 80153d4:	bd10      	pop	{r4, pc}
 80153d6:	bf00      	nop

080153d8 <read_submessage_format>:
 80153d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80153dc:	b095      	sub	sp, #84	; 0x54
 80153de:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 80153e2:	b113      	cbz	r3, 80153ea <read_submessage_format+0x12>
 80153e4:	b015      	add	sp, #84	; 0x54
 80153e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153ea:	460c      	mov	r4, r1
 80153ec:	4615      	mov	r5, r2
 80153ee:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80153f2:	4607      	mov	r7, r0
 80153f4:	981c      	ldr	r0, [sp, #112]	; 0x70
 80153f6:	9004      	str	r0, [sp, #16]
 80153f8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80153fa:	9005      	str	r0, [sp, #20]
 80153fc:	1a52      	subs	r2, r2, r1
 80153fe:	a80c      	add	r0, sp, #48	; 0x30
 8015400:	4699      	mov	r9, r3
 8015402:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8015406:	f7f7 fc7d 	bl	800cd04 <ucdr_init_buffer>
 801540a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801540e:	a80c      	add	r0, sp, #48	; 0x30
 8015410:	f7f7 fc4c 	bl	800ccac <ucdr_set_on_full_buffer_callback>
 8015414:	69e2      	ldr	r2, [r4, #28]
 8015416:	b19a      	cbz	r2, 8015440 <read_submessage_format+0x68>
 8015418:	f1b8 0f07 	cmp.w	r8, #7
 801541c:	f882 9014 	strb.w	r9, [r2, #20]
 8015420:	d040      	beq.n	80154a4 <read_submessage_format+0xcc>
 8015422:	f1b8 0f08 	cmp.w	r8, #8
 8015426:	d02e      	beq.n	8015486 <read_submessage_format+0xae>
 8015428:	f1b8 0f06 	cmp.w	r8, #6
 801542c:	d011      	beq.n	8015452 <read_submessage_format+0x7a>
 801542e:	2301      	movs	r3, #1
 8015430:	7513      	strb	r3, [r2, #20]
 8015432:	4629      	mov	r1, r5
 8015434:	4620      	mov	r0, r4
 8015436:	f7f7 fcb5 	bl	800cda4 <ucdr_advance_buffer>
 801543a:	b015      	add	sp, #84	; 0x54
 801543c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015440:	f1b8 0f07 	cmp.w	r8, #7
 8015444:	d02e      	beq.n	80154a4 <read_submessage_format+0xcc>
 8015446:	f1b8 0f08 	cmp.w	r8, #8
 801544a:	d01c      	beq.n	8015486 <read_submessage_format+0xae>
 801544c:	f1b8 0f06 	cmp.w	r8, #6
 8015450:	d1ef      	bne.n	8015432 <read_submessage_format+0x5a>
 8015452:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 8015456:	f1b8 0f00 	cmp.w	r8, #0
 801545a:	d011      	beq.n	8015480 <read_submessage_format+0xa8>
 801545c:	ab0c      	add	r3, sp, #48	; 0x30
 801545e:	e9cd 3500 	strd	r3, r5, [sp]
 8015462:	2306      	movs	r3, #6
 8015464:	f88d 3016 	strb.w	r3, [sp, #22]
 8015468:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801546c:	9302      	str	r3, [sp, #8]
 801546e:	4632      	mov	r2, r6
 8015470:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8015474:	4638      	mov	r0, r7
 8015476:	47c0      	blx	r8
 8015478:	2301      	movs	r3, #1
 801547a:	69e2      	ldr	r2, [r4, #28]
 801547c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8015480:	2a00      	cmp	r2, #0
 8015482:	d1d4      	bne.n	801542e <read_submessage_format+0x56>
 8015484:	e7d5      	b.n	8015432 <read_submessage_format+0x5a>
 8015486:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801548a:	2b00      	cmp	r3, #0
 801548c:	d0f8      	beq.n	8015480 <read_submessage_format+0xa8>
 801548e:	a906      	add	r1, sp, #24
 8015490:	a80c      	add	r0, sp, #48	; 0x30
 8015492:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8015496:	f7fa fb01 	bl	800fa9c <uxr_deserialize_SampleIdentity>
 801549a:	b9a0      	cbnz	r0, 80154c6 <read_submessage_format+0xee>
 801549c:	69e2      	ldr	r2, [r4, #28]
 801549e:	2a00      	cmp	r2, #0
 80154a0:	d1c5      	bne.n	801542e <read_submessage_format+0x56>
 80154a2:	e7c6      	b.n	8015432 <read_submessage_format+0x5a>
 80154a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80154a8:	b13b      	cbz	r3, 80154ba <read_submessage_format+0xe2>
 80154aa:	a906      	add	r1, sp, #24
 80154ac:	a80c      	add	r0, sp, #48	; 0x30
 80154ae:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80154b2:	f7f9 ffc7 	bl	800f444 <uxr_deserialize_BaseObjectRequest>
 80154b6:	bb60      	cbnz	r0, 8015512 <read_submessage_format+0x13a>
 80154b8:	69e2      	ldr	r2, [r4, #28]
 80154ba:	68a3      	ldr	r3, [r4, #8]
 80154bc:	442b      	add	r3, r5
 80154be:	60a3      	str	r3, [r4, #8]
 80154c0:	2a00      	cmp	r2, #0
 80154c2:	d1b4      	bne.n	801542e <read_submessage_format+0x56>
 80154c4:	e7b5      	b.n	8015432 <read_submessage_format+0x5a>
 80154c6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80154ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80154cc:	1a52      	subs	r2, r2, r1
 80154ce:	eba8 0803 	sub.w	r8, r8, r3
 80154d2:	a80c      	add	r0, sp, #48	; 0x30
 80154d4:	f7f7 fc16 	bl	800cd04 <ucdr_init_buffer>
 80154d8:	44a8      	add	r8, r5
 80154da:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80154de:	a80c      	add	r0, sp, #48	; 0x30
 80154e0:	f7f7 fbe4 	bl	800ccac <ucdr_set_on_full_buffer_callback>
 80154e4:	fa1f f888 	uxth.w	r8, r8
 80154e8:	ab0c      	add	r3, sp, #48	; 0x30
 80154ea:	9300      	str	r3, [sp, #0]
 80154ec:	f8cd 8004 	str.w	r8, [sp, #4]
 80154f0:	2108      	movs	r1, #8
 80154f2:	f88d 1016 	strb.w	r1, [sp, #22]
 80154f6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80154fa:	9102      	str	r1, [sp, #8]
 80154fc:	ab06      	add	r3, sp, #24
 80154fe:	4632      	mov	r2, r6
 8015500:	9905      	ldr	r1, [sp, #20]
 8015502:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 8015506:	4638      	mov	r0, r7
 8015508:	47b0      	blx	r6
 801550a:	2301      	movs	r3, #1
 801550c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8015510:	e7c4      	b.n	801549c <read_submessage_format+0xc4>
 8015512:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8015516:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015518:	1a52      	subs	r2, r2, r1
 801551a:	a80c      	add	r0, sp, #48	; 0x30
 801551c:	eba8 0803 	sub.w	r8, r8, r3
 8015520:	f7f7 fbf0 	bl	800cd04 <ucdr_init_buffer>
 8015524:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015528:	a80c      	add	r0, sp, #48	; 0x30
 801552a:	f7f7 fbbf 	bl	800ccac <ucdr_set_on_full_buffer_callback>
 801552e:	ab0c      	add	r3, sp, #48	; 0x30
 8015530:	9300      	str	r3, [sp, #0]
 8015532:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8015536:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801553a:	44a8      	add	r8, r5
 801553c:	fa1f f888 	uxth.w	r8, r8
 8015540:	f8cd 8004 	str.w	r8, [sp, #4]
 8015544:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015548:	2107      	movs	r1, #7
 801554a:	f88d 1016 	strb.w	r1, [sp, #22]
 801554e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8015552:	9102      	str	r1, [sp, #8]
 8015554:	4632      	mov	r2, r6
 8015556:	b29b      	uxth	r3, r3
 8015558:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 801555c:	9905      	ldr	r1, [sp, #20]
 801555e:	4638      	mov	r0, r7
 8015560:	47b0      	blx	r6
 8015562:	2301      	movs	r3, #1
 8015564:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8015568:	e7a6      	b.n	80154b8 <read_submessage_format+0xe0>
 801556a:	bf00      	nop

0801556c <uxr_seq_num_add>:
 801556c:	4408      	add	r0, r1
 801556e:	b280      	uxth	r0, r0
 8015570:	4770      	bx	lr
 8015572:	bf00      	nop

08015574 <uxr_seq_num_sub>:
 8015574:	1a40      	subs	r0, r0, r1
 8015576:	b280      	uxth	r0, r0
 8015578:	4770      	bx	lr
 801557a:	bf00      	nop

0801557c <uxr_seq_num_cmp>:
 801557c:	4288      	cmp	r0, r1
 801557e:	d011      	beq.n	80155a4 <uxr_seq_num_cmp+0x28>
 8015580:	d309      	bcc.n	8015596 <uxr_seq_num_cmp+0x1a>
 8015582:	4288      	cmp	r0, r1
 8015584:	d910      	bls.n	80155a8 <uxr_seq_num_cmp+0x2c>
 8015586:	1a40      	subs	r0, r0, r1
 8015588:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801558c:	bfd4      	ite	le
 801558e:	2001      	movle	r0, #1
 8015590:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8015594:	4770      	bx	lr
 8015596:	1a0b      	subs	r3, r1, r0
 8015598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801559c:	daf1      	bge.n	8015582 <uxr_seq_num_cmp+0x6>
 801559e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80155a2:	4770      	bx	lr
 80155a4:	2000      	movs	r0, #0
 80155a6:	4770      	bx	lr
 80155a8:	2001      	movs	r0, #1
 80155aa:	4770      	bx	lr

080155ac <uxr_init_framing_io>:
 80155ac:	2300      	movs	r3, #0
 80155ae:	7041      	strb	r1, [r0, #1]
 80155b0:	7003      	strb	r3, [r0, #0]
 80155b2:	8583      	strh	r3, [r0, #44]	; 0x2c
 80155b4:	4770      	bx	lr
 80155b6:	bf00      	nop

080155b8 <uxr_write_framed_msg>:
 80155b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155bc:	4617      	mov	r7, r2
 80155be:	7842      	ldrb	r2, [r0, #1]
 80155c0:	b083      	sub	sp, #12
 80155c2:	460e      	mov	r6, r1
 80155c4:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 80155c8:	469a      	mov	sl, r3
 80155ca:	2901      	cmp	r1, #1
 80155cc:	f04f 037e 	mov.w	r3, #126	; 0x7e
 80155d0:	4604      	mov	r4, r0
 80155d2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80155d6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80155da:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 80155de:	f240 8137 	bls.w	8015850 <uxr_write_framed_msg+0x298>
 80155e2:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80155e6:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 80155ea:	2901      	cmp	r1, #1
 80155ec:	f04f 0202 	mov.w	r2, #2
 80155f0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80155f4:	f240 808f 	bls.w	8015716 <uxr_write_framed_msg+0x15e>
 80155f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80155fa:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 80155fe:	b2dd      	uxtb	r5, r3
 8015600:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8015604:	2203      	movs	r2, #3
 8015606:	2901      	cmp	r1, #1
 8015608:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801560c:	f240 809a 	bls.w	8015744 <uxr_write_framed_msg+0x18c>
 8015610:	18a1      	adds	r1, r4, r2
 8015612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015614:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 8015618:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801561c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8015620:	3201      	adds	r2, #1
 8015622:	2801      	cmp	r0, #1
 8015624:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015628:	f240 80a0 	bls.w	801576c <uxr_write_framed_msg+0x1b4>
 801562c:	18a0      	adds	r0, r4, r2
 801562e:	3201      	adds	r2, #1
 8015630:	b2d2      	uxtb	r2, r2
 8015632:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8015636:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801563a:	2b00      	cmp	r3, #0
 801563c:	f000 80a9 	beq.w	8015792 <uxr_write_framed_msg+0x1da>
 8015640:	f04f 0900 	mov.w	r9, #0
 8015644:	46c8      	mov	r8, r9
 8015646:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801564a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 801564e:	2901      	cmp	r1, #1
 8015650:	f240 80c3 	bls.w	80157da <uxr_write_framed_msg+0x222>
 8015654:	2a29      	cmp	r2, #41	; 0x29
 8015656:	f200 809f 	bhi.w	8015798 <uxr_write_framed_msg+0x1e0>
 801565a:	18a1      	adds	r1, r4, r2
 801565c:	3201      	adds	r2, #1
 801565e:	b2d2      	uxtb	r2, r2
 8015660:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8015664:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015668:	ea89 0303 	eor.w	r3, r9, r3
 801566c:	498c      	ldr	r1, [pc, #560]	; (80158a0 <uxr_write_framed_msg+0x2e8>)
 801566e:	b2db      	uxtb	r3, r3
 8015670:	f108 0801 	add.w	r8, r8, #1
 8015674:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015678:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 801567c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801567e:	4543      	cmp	r3, r8
 8015680:	d8e1      	bhi.n	8015646 <uxr_write_framed_msg+0x8e>
 8015682:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015686:	fa5f f889 	uxtb.w	r8, r9
 801568a:	9301      	str	r3, [sp, #4]
 801568c:	f04f 0900 	mov.w	r9, #0
 8015690:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 8015694:	fa5f f18a 	uxtb.w	r1, sl
 8015698:	2901      	cmp	r1, #1
 801569a:	d921      	bls.n	80156e0 <uxr_write_framed_msg+0x128>
 801569c:	2a29      	cmp	r2, #41	; 0x29
 801569e:	f240 80af 	bls.w	8015800 <uxr_write_framed_msg+0x248>
 80156a2:	2500      	movs	r5, #0
 80156a4:	e000      	b.n	80156a8 <uxr_write_framed_msg+0xf0>
 80156a6:	b160      	cbz	r0, 80156c2 <uxr_write_framed_msg+0x10a>
 80156a8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80156ac:	1b52      	subs	r2, r2, r5
 80156ae:	465b      	mov	r3, fp
 80156b0:	4421      	add	r1, r4
 80156b2:	4638      	mov	r0, r7
 80156b4:	47b0      	blx	r6
 80156b6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80156ba:	4405      	add	r5, r0
 80156bc:	4295      	cmp	r5, r2
 80156be:	d3f2      	bcc.n	80156a6 <uxr_write_framed_msg+0xee>
 80156c0:	d003      	beq.n	80156ca <uxr_write_framed_msg+0x112>
 80156c2:	2000      	movs	r0, #0
 80156c4:	b003      	add	sp, #12
 80156c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156ca:	fa5f f18a 	uxtb.w	r1, sl
 80156ce:	f04f 0300 	mov.w	r3, #0
 80156d2:	2901      	cmp	r1, #1
 80156d4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80156d8:	f04f 0200 	mov.w	r2, #0
 80156dc:	f200 8090 	bhi.w	8015800 <uxr_write_framed_msg+0x248>
 80156e0:	1c51      	adds	r1, r2, #1
 80156e2:	b2c9      	uxtb	r1, r1
 80156e4:	2929      	cmp	r1, #41	; 0x29
 80156e6:	d8dc      	bhi.n	80156a2 <uxr_write_framed_msg+0xea>
 80156e8:	18a5      	adds	r5, r4, r2
 80156ea:	4421      	add	r1, r4
 80156ec:	3202      	adds	r2, #2
 80156ee:	f088 0820 	eor.w	r8, r8, #32
 80156f2:	4648      	mov	r0, r9
 80156f4:	f04f 037d 	mov.w	r3, #125	; 0x7d
 80156f8:	b2d2      	uxtb	r2, r2
 80156fa:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 80156fe:	f04f 0901 	mov.w	r9, #1
 8015702:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8015706:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801570a:	2800      	cmp	r0, #0
 801570c:	f040 8085 	bne.w	801581a <uxr_write_framed_msg+0x262>
 8015710:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015714:	e7bc      	b.n	8015690 <uxr_write_framed_msg+0xd8>
 8015716:	4611      	mov	r1, r2
 8015718:	f04f 0c03 	mov.w	ip, #3
 801571c:	2204      	movs	r2, #4
 801571e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015720:	4421      	add	r1, r4
 8015722:	b2dd      	uxtb	r5, r3
 8015724:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8015728:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 801572c:	44a4      	add	ip, r4
 801572e:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8015732:	f080 0020 	eor.w	r0, r0, #32
 8015736:	2901      	cmp	r1, #1
 8015738:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 801573c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015740:	f63f af66 	bhi.w	8015610 <uxr_write_framed_msg+0x58>
 8015744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015746:	18a0      	adds	r0, r4, r2
 8015748:	f085 0520 	eor.w	r5, r5, #32
 801574c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8015750:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015754:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 8015758:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801575c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8015760:	3202      	adds	r2, #2
 8015762:	2801      	cmp	r0, #1
 8015764:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015768:	f63f af60 	bhi.w	801562c <uxr_write_framed_msg+0x74>
 801576c:	1c50      	adds	r0, r2, #1
 801576e:	18a5      	adds	r5, r4, r2
 8015770:	fa54 f080 	uxtab	r0, r4, r0
 8015774:	3202      	adds	r2, #2
 8015776:	f081 0120 	eor.w	r1, r1, #32
 801577a:	b2d2      	uxtb	r2, r2
 801577c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8015780:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 8015784:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8015788:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801578c:	2b00      	cmp	r3, #0
 801578e:	f47f af57 	bne.w	8015640 <uxr_write_framed_msg+0x88>
 8015792:	9301      	str	r3, [sp, #4]
 8015794:	4698      	mov	r8, r3
 8015796:	e779      	b.n	801568c <uxr_write_framed_msg+0xd4>
 8015798:	2500      	movs	r5, #0
 801579a:	e001      	b.n	80157a0 <uxr_write_framed_msg+0x1e8>
 801579c:	2800      	cmp	r0, #0
 801579e:	d090      	beq.n	80156c2 <uxr_write_framed_msg+0x10a>
 80157a0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80157a4:	1b52      	subs	r2, r2, r5
 80157a6:	465b      	mov	r3, fp
 80157a8:	4421      	add	r1, r4
 80157aa:	4638      	mov	r0, r7
 80157ac:	47b0      	blx	r6
 80157ae:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80157b2:	4405      	add	r5, r0
 80157b4:	4295      	cmp	r5, r2
 80157b6:	d3f1      	bcc.n	801579c <uxr_write_framed_msg+0x1e4>
 80157b8:	d183      	bne.n	80156c2 <uxr_write_framed_msg+0x10a>
 80157ba:	f04f 0300 	mov.w	r3, #0
 80157be:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80157c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157c4:	4543      	cmp	r3, r8
 80157c6:	d964      	bls.n	8015892 <uxr_write_framed_msg+0x2da>
 80157c8:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80157cc:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80157d0:	2901      	cmp	r1, #1
 80157d2:	f04f 0200 	mov.w	r2, #0
 80157d6:	f63f af3d 	bhi.w	8015654 <uxr_write_framed_msg+0x9c>
 80157da:	1c51      	adds	r1, r2, #1
 80157dc:	b2c9      	uxtb	r1, r1
 80157de:	2929      	cmp	r1, #41	; 0x29
 80157e0:	d8da      	bhi.n	8015798 <uxr_write_framed_msg+0x1e0>
 80157e2:	18a0      	adds	r0, r4, r2
 80157e4:	4421      	add	r1, r4
 80157e6:	f04f 057d 	mov.w	r5, #125	; 0x7d
 80157ea:	3202      	adds	r2, #2
 80157ec:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 80157f0:	b2d2      	uxtb	r2, r2
 80157f2:	f083 0020 	eor.w	r0, r3, #32
 80157f6:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 80157fa:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80157fe:	e733      	b.n	8015668 <uxr_write_framed_msg+0xb0>
 8015800:	18a1      	adds	r1, r4, r2
 8015802:	3201      	adds	r2, #1
 8015804:	4648      	mov	r0, r9
 8015806:	b2d2      	uxtb	r2, r2
 8015808:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 801580c:	f04f 0901 	mov.w	r9, #1
 8015810:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015814:	2800      	cmp	r0, #0
 8015816:	f43f af7b 	beq.w	8015710 <uxr_write_framed_msg+0x158>
 801581a:	2500      	movs	r5, #0
 801581c:	e002      	b.n	8015824 <uxr_write_framed_msg+0x26c>
 801581e:	2800      	cmp	r0, #0
 8015820:	f43f af4f 	beq.w	80156c2 <uxr_write_framed_msg+0x10a>
 8015824:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015828:	1b52      	subs	r2, r2, r5
 801582a:	465b      	mov	r3, fp
 801582c:	4421      	add	r1, r4
 801582e:	4638      	mov	r0, r7
 8015830:	47b0      	blx	r6
 8015832:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015836:	4405      	add	r5, r0
 8015838:	4295      	cmp	r5, r2
 801583a:	d3f0      	bcc.n	801581e <uxr_write_framed_msg+0x266>
 801583c:	f47f af41 	bne.w	80156c2 <uxr_write_framed_msg+0x10a>
 8015840:	2300      	movs	r3, #0
 8015842:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8015846:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015848:	b298      	uxth	r0, r3
 801584a:	b003      	add	sp, #12
 801584c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015850:	217d      	movs	r1, #125	; 0x7d
 8015852:	f082 0220 	eor.w	r2, r2, #32
 8015856:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801585a:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801585e:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8015862:	2901      	cmp	r1, #1
 8015864:	f04f 0203 	mov.w	r2, #3
 8015868:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801586c:	d804      	bhi.n	8015878 <uxr_write_framed_msg+0x2c0>
 801586e:	4611      	mov	r1, r2
 8015870:	f04f 0c04 	mov.w	ip, #4
 8015874:	2205      	movs	r2, #5
 8015876:	e752      	b.n	801571e <uxr_write_framed_msg+0x166>
 8015878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801587a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801587e:	b2dd      	uxtb	r5, r3
 8015880:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8015884:	2204      	movs	r2, #4
 8015886:	2901      	cmp	r1, #1
 8015888:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801588c:	f63f aec0 	bhi.w	8015610 <uxr_write_framed_msg+0x58>
 8015890:	e758      	b.n	8015744 <uxr_write_framed_msg+0x18c>
 8015892:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015896:	fa5f f889 	uxtb.w	r8, r9
 801589a:	9301      	str	r3, [sp, #4]
 801589c:	2200      	movs	r2, #0
 801589e:	e6f5      	b.n	801568c <uxr_write_framed_msg+0xd4>
 80158a0:	08018970 	.word	0x08018970

080158a4 <uxr_framing_read_transport>:
 80158a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158a8:	4604      	mov	r4, r0
 80158aa:	b083      	sub	sp, #12
 80158ac:	461f      	mov	r7, r3
 80158ae:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80158b2:	4689      	mov	r9, r1
 80158b4:	4692      	mov	sl, r2
 80158b6:	f7f8 fed9 	bl	800e66c <uxr_millis>
 80158ba:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80158be:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 80158c2:	42b3      	cmp	r3, r6
 80158c4:	4680      	mov	r8, r0
 80158c6:	d061      	beq.n	801598c <uxr_framing_read_transport+0xe8>
 80158c8:	d81c      	bhi.n	8015904 <uxr_framing_read_transport+0x60>
 80158ca:	1e75      	subs	r5, r6, #1
 80158cc:	1aed      	subs	r5, r5, r3
 80158ce:	b2ed      	uxtb	r5, r5
 80158d0:	2600      	movs	r6, #0
 80158d2:	455d      	cmp	r5, fp
 80158d4:	d81f      	bhi.n	8015916 <uxr_framing_read_transport+0x72>
 80158d6:	19ab      	adds	r3, r5, r6
 80158d8:	455b      	cmp	r3, fp
 80158da:	bf84      	itt	hi
 80158dc:	ebab 0605 	subhi.w	r6, fp, r5
 80158e0:	b2f6      	uxtbhi	r6, r6
 80158e2:	b9ed      	cbnz	r5, 8015920 <uxr_framing_read_transport+0x7c>
 80158e4:	f04f 0b00 	mov.w	fp, #0
 80158e8:	f7f8 fec0 	bl	800e66c <uxr_millis>
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	eba0 0808 	sub.w	r8, r0, r8
 80158f2:	eba3 0308 	sub.w	r3, r3, r8
 80158f6:	4658      	mov	r0, fp
 80158f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80158fc:	603b      	str	r3, [r7, #0]
 80158fe:	b003      	add	sp, #12
 8015900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015904:	2e00      	cmp	r6, #0
 8015906:	d049      	beq.n	801599c <uxr_framing_read_transport+0xf8>
 8015908:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 801590c:	b2ed      	uxtb	r5, r5
 801590e:	3e01      	subs	r6, #1
 8015910:	455d      	cmp	r5, fp
 8015912:	b2f6      	uxtb	r6, r6
 8015914:	d9df      	bls.n	80158d6 <uxr_framing_read_transport+0x32>
 8015916:	fa5f f58b 	uxtb.w	r5, fp
 801591a:	2600      	movs	r6, #0
 801591c:	2d00      	cmp	r5, #0
 801591e:	d0e1      	beq.n	80158e4 <uxr_framing_read_transport+0x40>
 8015920:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015924:	3102      	adds	r1, #2
 8015926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015928:	9300      	str	r3, [sp, #0]
 801592a:	683b      	ldr	r3, [r7, #0]
 801592c:	4421      	add	r1, r4
 801592e:	462a      	mov	r2, r5
 8015930:	4650      	mov	r0, sl
 8015932:	47c8      	blx	r9
 8015934:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015938:	4a1a      	ldr	r2, [pc, #104]	; (80159a4 <uxr_framing_read_transport+0x100>)
 801593a:	4403      	add	r3, r0
 801593c:	0859      	lsrs	r1, r3, #1
 801593e:	fba2 2101 	umull	r2, r1, r2, r1
 8015942:	0889      	lsrs	r1, r1, #2
 8015944:	222a      	movs	r2, #42	; 0x2a
 8015946:	fb02 3111 	mls	r1, r2, r1, r3
 801594a:	4683      	mov	fp, r0
 801594c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8015950:	2800      	cmp	r0, #0
 8015952:	d0c7      	beq.n	80158e4 <uxr_framing_read_transport+0x40>
 8015954:	42a8      	cmp	r0, r5
 8015956:	d1c7      	bne.n	80158e8 <uxr_framing_read_transport+0x44>
 8015958:	2e00      	cmp	r6, #0
 801595a:	d0c5      	beq.n	80158e8 <uxr_framing_read_transport+0x44>
 801595c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801595e:	9300      	str	r3, [sp, #0]
 8015960:	3102      	adds	r1, #2
 8015962:	4632      	mov	r2, r6
 8015964:	4421      	add	r1, r4
 8015966:	2300      	movs	r3, #0
 8015968:	4650      	mov	r0, sl
 801596a:	47c8      	blx	r9
 801596c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015970:	4a0c      	ldr	r2, [pc, #48]	; (80159a4 <uxr_framing_read_transport+0x100>)
 8015972:	180b      	adds	r3, r1, r0
 8015974:	0859      	lsrs	r1, r3, #1
 8015976:	fba2 1201 	umull	r1, r2, r2, r1
 801597a:	0892      	lsrs	r2, r2, #2
 801597c:	212a      	movs	r1, #42	; 0x2a
 801597e:	fb01 3312 	mls	r3, r1, r2, r3
 8015982:	eb00 0b05 	add.w	fp, r0, r5
 8015986:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801598a:	e7ad      	b.n	80158e8 <uxr_framing_read_transport+0x44>
 801598c:	2600      	movs	r6, #0
 801598e:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8015992:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8015994:	d9bf      	bls.n	8015916 <uxr_framing_read_transport+0x72>
 8015996:	2102      	movs	r1, #2
 8015998:	2529      	movs	r5, #41	; 0x29
 801599a:	e7c4      	b.n	8015926 <uxr_framing_read_transport+0x82>
 801599c:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 80159a0:	b2ed      	uxtb	r5, r5
 80159a2:	e796      	b.n	80158d2 <uxr_framing_read_transport+0x2e>
 80159a4:	30c30c31 	.word	0x30c30c31

080159a8 <uxr_read_framed_msg>:
 80159a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159ac:	461e      	mov	r6, r3
 80159ae:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80159b2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80159b6:	429d      	cmp	r5, r3
 80159b8:	b083      	sub	sp, #12
 80159ba:	4604      	mov	r4, r0
 80159bc:	4688      	mov	r8, r1
 80159be:	4691      	mov	r9, r2
 80159c0:	f000 8188 	beq.w	8015cd4 <uxr_read_framed_msg+0x32c>
 80159c4:	7823      	ldrb	r3, [r4, #0]
 80159c6:	4dc1      	ldr	r5, [pc, #772]	; (8015ccc <uxr_read_framed_msg+0x324>)
 80159c8:	4fc1      	ldr	r7, [pc, #772]	; (8015cd0 <uxr_read_framed_msg+0x328>)
 80159ca:	2b07      	cmp	r3, #7
 80159cc:	d8fd      	bhi.n	80159ca <uxr_read_framed_msg+0x22>
 80159ce:	e8df f013 	tbh	[pc, r3, lsl #1]
 80159d2:	0115      	.short	0x0115
 80159d4:	00d600f6 	.word	0x00d600f6
 80159d8:	009000b9 	.word	0x009000b9
 80159dc:	0030004d 	.word	0x0030004d
 80159e0:	0008      	.short	0x0008
 80159e2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80159e6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80159ea:	4299      	cmp	r1, r3
 80159ec:	f000 814a 	beq.w	8015c84 <uxr_read_framed_msg+0x2dc>
 80159f0:	18e2      	adds	r2, r4, r3
 80159f2:	7892      	ldrb	r2, [r2, #2]
 80159f4:	2a7d      	cmp	r2, #125	; 0x7d
 80159f6:	f000 8199 	beq.w	8015d2c <uxr_read_framed_msg+0x384>
 80159fa:	3301      	adds	r3, #1
 80159fc:	0858      	lsrs	r0, r3, #1
 80159fe:	fba5 1000 	umull	r1, r0, r5, r0
 8015a02:	0880      	lsrs	r0, r0, #2
 8015a04:	212a      	movs	r1, #42	; 0x2a
 8015a06:	fb01 3310 	mls	r3, r1, r0, r3
 8015a0a:	2a7e      	cmp	r2, #126	; 0x7e
 8015a0c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015a10:	f000 8252 	beq.w	8015eb8 <uxr_read_framed_msg+0x510>
 8015a14:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8015a16:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8015a18:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015a1c:	b29b      	uxth	r3, r3
 8015a1e:	2200      	movs	r2, #0
 8015a20:	4299      	cmp	r1, r3
 8015a22:	86a3      	strh	r3, [r4, #52]	; 0x34
 8015a24:	7022      	strb	r2, [r4, #0]
 8015a26:	f000 8179 	beq.w	8015d1c <uxr_read_framed_msg+0x374>
 8015a2a:	2000      	movs	r0, #0
 8015a2c:	b003      	add	sp, #12
 8015a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a32:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015a36:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015a3a:	4299      	cmp	r1, r3
 8015a3c:	f000 8131 	beq.w	8015ca2 <uxr_read_framed_msg+0x2fa>
 8015a40:	18e2      	adds	r2, r4, r3
 8015a42:	7890      	ldrb	r0, [r2, #2]
 8015a44:	287d      	cmp	r0, #125	; 0x7d
 8015a46:	f000 8190 	beq.w	8015d6a <uxr_read_framed_msg+0x3c2>
 8015a4a:	3301      	adds	r3, #1
 8015a4c:	085a      	lsrs	r2, r3, #1
 8015a4e:	fba5 1202 	umull	r1, r2, r5, r2
 8015a52:	0892      	lsrs	r2, r2, #2
 8015a54:	212a      	movs	r1, #42	; 0x2a
 8015a56:	fb01 3312 	mls	r3, r1, r2, r3
 8015a5a:	287e      	cmp	r0, #126	; 0x7e
 8015a5c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015a60:	f000 821a 	beq.w	8015e98 <uxr_read_framed_msg+0x4f0>
 8015a64:	2307      	movs	r3, #7
 8015a66:	86a0      	strh	r0, [r4, #52]	; 0x34
 8015a68:	7023      	strb	r3, [r4, #0]
 8015a6a:	e7ae      	b.n	80159ca <uxr_read_framed_msg+0x22>
 8015a6c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8015a6e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8015a72:	459e      	cmp	lr, r3
 8015a74:	d938      	bls.n	8015ae8 <uxr_read_framed_msg+0x140>
 8015a76:	ee07 8a90 	vmov	s15, r8
 8015a7a:	212a      	movs	r1, #42	; 0x2a
 8015a7c:	e020      	b.n	8015ac0 <uxr_read_framed_msg+0x118>
 8015a7e:	f89b c002 	ldrb.w	ip, [fp, #2]
 8015a82:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8015a86:	f000 80d4 	beq.w	8015c32 <uxr_read_framed_msg+0x28a>
 8015a8a:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8015a8e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015a92:	f000 8219 	beq.w	8015ec8 <uxr_read_framed_msg+0x520>
 8015a96:	f806 c003 	strb.w	ip, [r6, r3]
 8015a9a:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 8015a9e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8015aa0:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8015aa4:	ea8a 000c 	eor.w	r0, sl, ip
 8015aa8:	b2c0      	uxtb	r0, r0
 8015aaa:	3301      	adds	r3, #1
 8015aac:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8015ab0:	b29b      	uxth	r3, r3
 8015ab2:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8015ab6:	4573      	cmp	r3, lr
 8015ab8:	8663      	strh	r3, [r4, #50]	; 0x32
 8015aba:	86e2      	strh	r2, [r4, #54]	; 0x36
 8015abc:	f080 8120 	bcs.w	8015d00 <uxr_read_framed_msg+0x358>
 8015ac0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8015ac4:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8015ac8:	f100 0c01 	add.w	ip, r0, #1
 8015acc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015ad0:	fba5 8202 	umull	r8, r2, r5, r2
 8015ad4:	0892      	lsrs	r2, r2, #2
 8015ad6:	4582      	cmp	sl, r0
 8015ad8:	eb04 0b00 	add.w	fp, r4, r0
 8015adc:	fb01 c212 	mls	r2, r1, r2, ip
 8015ae0:	d1cd      	bne.n	8015a7e <uxr_read_framed_msg+0xd6>
 8015ae2:	ee17 8a90 	vmov	r8, s15
 8015ae6:	459e      	cmp	lr, r3
 8015ae8:	f040 8111 	bne.w	8015d0e <uxr_read_framed_msg+0x366>
 8015aec:	2306      	movs	r3, #6
 8015aee:	7023      	strb	r3, [r4, #0]
 8015af0:	e76b      	b.n	80159ca <uxr_read_framed_msg+0x22>
 8015af2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015af6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015afa:	4298      	cmp	r0, r3
 8015afc:	f000 80c2 	beq.w	8015c84 <uxr_read_framed_msg+0x2dc>
 8015b00:	18e2      	adds	r2, r4, r3
 8015b02:	7891      	ldrb	r1, [r2, #2]
 8015b04:	297d      	cmp	r1, #125	; 0x7d
 8015b06:	f000 814c 	beq.w	8015da2 <uxr_read_framed_msg+0x3fa>
 8015b0a:	3301      	adds	r3, #1
 8015b0c:	085a      	lsrs	r2, r3, #1
 8015b0e:	fba5 0202 	umull	r0, r2, r5, r2
 8015b12:	0892      	lsrs	r2, r2, #2
 8015b14:	202a      	movs	r0, #42	; 0x2a
 8015b16:	fb00 3312 	mls	r3, r0, r2, r3
 8015b1a:	297e      	cmp	r1, #126	; 0x7e
 8015b1c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015b20:	f000 81ca 	beq.w	8015eb8 <uxr_read_framed_msg+0x510>
 8015b24:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8015b26:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015b2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015b2c:	b29b      	uxth	r3, r3
 8015b2e:	2000      	movs	r0, #0
 8015b30:	428b      	cmp	r3, r1
 8015b32:	8623      	strh	r3, [r4, #48]	; 0x30
 8015b34:	8660      	strh	r0, [r4, #50]	; 0x32
 8015b36:	86e0      	strh	r0, [r4, #54]	; 0x36
 8015b38:	f240 80df 	bls.w	8015cfa <uxr_read_framed_msg+0x352>
 8015b3c:	7020      	strb	r0, [r4, #0]
 8015b3e:	b003      	add	sp, #12
 8015b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b44:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015b48:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015b4c:	4299      	cmp	r1, r3
 8015b4e:	f000 80a8 	beq.w	8015ca2 <uxr_read_framed_msg+0x2fa>
 8015b52:	18e2      	adds	r2, r4, r3
 8015b54:	7890      	ldrb	r0, [r2, #2]
 8015b56:	287d      	cmp	r0, #125	; 0x7d
 8015b58:	f000 8164 	beq.w	8015e24 <uxr_read_framed_msg+0x47c>
 8015b5c:	3301      	adds	r3, #1
 8015b5e:	085a      	lsrs	r2, r3, #1
 8015b60:	fba5 1202 	umull	r1, r2, r5, r2
 8015b64:	0892      	lsrs	r2, r2, #2
 8015b66:	212a      	movs	r1, #42	; 0x2a
 8015b68:	fb01 3312 	mls	r3, r1, r2, r3
 8015b6c:	287e      	cmp	r0, #126	; 0x7e
 8015b6e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015b72:	f000 8191 	beq.w	8015e98 <uxr_read_framed_msg+0x4f0>
 8015b76:	2304      	movs	r3, #4
 8015b78:	8620      	strh	r0, [r4, #48]	; 0x30
 8015b7a:	7023      	strb	r3, [r4, #0]
 8015b7c:	e725      	b.n	80159ca <uxr_read_framed_msg+0x22>
 8015b7e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015b82:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015b86:	4290      	cmp	r0, r2
 8015b88:	f000 80b3 	beq.w	8015cf2 <uxr_read_framed_msg+0x34a>
 8015b8c:	18a3      	adds	r3, r4, r2
 8015b8e:	7899      	ldrb	r1, [r3, #2]
 8015b90:	297d      	cmp	r1, #125	; 0x7d
 8015b92:	f000 8164 	beq.w	8015e5e <uxr_read_framed_msg+0x4b6>
 8015b96:	3201      	adds	r2, #1
 8015b98:	0850      	lsrs	r0, r2, #1
 8015b9a:	fba5 3000 	umull	r3, r0, r5, r0
 8015b9e:	0880      	lsrs	r0, r0, #2
 8015ba0:	232a      	movs	r3, #42	; 0x2a
 8015ba2:	fb03 2210 	mls	r2, r3, r0, r2
 8015ba6:	297e      	cmp	r1, #126	; 0x7e
 8015ba8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015bac:	f000 8188 	beq.w	8015ec0 <uxr_read_framed_msg+0x518>
 8015bb0:	7863      	ldrb	r3, [r4, #1]
 8015bb2:	428b      	cmp	r3, r1
 8015bb4:	bf0c      	ite	eq
 8015bb6:	2303      	moveq	r3, #3
 8015bb8:	2300      	movne	r3, #0
 8015bba:	7023      	strb	r3, [r4, #0]
 8015bbc:	e705      	b.n	80159ca <uxr_read_framed_msg+0x22>
 8015bbe:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015bc2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	4299      	cmp	r1, r3
 8015bca:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8015bce:	d06c      	beq.n	8015caa <uxr_read_framed_msg+0x302>
 8015bd0:	18e2      	adds	r2, r4, r3
 8015bd2:	7890      	ldrb	r0, [r2, #2]
 8015bd4:	287d      	cmp	r0, #125	; 0x7d
 8015bd6:	f000 8101 	beq.w	8015ddc <uxr_read_framed_msg+0x434>
 8015bda:	3301      	adds	r3, #1
 8015bdc:	085a      	lsrs	r2, r3, #1
 8015bde:	fba5 1202 	umull	r1, r2, r5, r2
 8015be2:	0892      	lsrs	r2, r2, #2
 8015be4:	212a      	movs	r1, #42	; 0x2a
 8015be6:	fb01 3312 	mls	r3, r1, r2, r3
 8015bea:	287e      	cmp	r0, #126	; 0x7e
 8015bec:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8015bf0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015bf4:	d059      	beq.n	8015caa <uxr_read_framed_msg+0x302>
 8015bf6:	2302      	movs	r3, #2
 8015bf8:	7023      	strb	r3, [r4, #0]
 8015bfa:	e6e6      	b.n	80159ca <uxr_read_framed_msg+0x22>
 8015bfc:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8015c00:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015c04:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8015c08:	1c51      	adds	r1, r2, #1
 8015c0a:	084b      	lsrs	r3, r1, #1
 8015c0c:	fba5 c303 	umull	ip, r3, r5, r3
 8015c10:	089b      	lsrs	r3, r3, #2
 8015c12:	fb0e 1313 	mls	r3, lr, r3, r1
 8015c16:	4592      	cmp	sl, r2
 8015c18:	eb04 0002 	add.w	r0, r4, r2
 8015c1c:	b2da      	uxtb	r2, r3
 8015c1e:	f43f af04 	beq.w	8015a2a <uxr_read_framed_msg+0x82>
 8015c22:	7883      	ldrb	r3, [r0, #2]
 8015c24:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015c28:	2b7e      	cmp	r3, #126	; 0x7e
 8015c2a:	d1ed      	bne.n	8015c08 <uxr_read_framed_msg+0x260>
 8015c2c:	2301      	movs	r3, #1
 8015c2e:	7023      	strb	r3, [r4, #0]
 8015c30:	e6cb      	b.n	80159ca <uxr_read_framed_msg+0x22>
 8015c32:	f100 0c01 	add.w	ip, r0, #1
 8015c36:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015c3a:	fba5 8202 	umull	r8, r2, r5, r2
 8015c3e:	0892      	lsrs	r2, r2, #2
 8015c40:	fb01 c212 	mls	r2, r1, r2, ip
 8015c44:	eb04 0c02 	add.w	ip, r4, r2
 8015c48:	b2d2      	uxtb	r2, r2
 8015c4a:	4592      	cmp	sl, r2
 8015c4c:	f100 0002 	add.w	r0, r0, #2
 8015c50:	f43f af47 	beq.w	8015ae2 <uxr_read_framed_msg+0x13a>
 8015c54:	0842      	lsrs	r2, r0, #1
 8015c56:	f89c a002 	ldrb.w	sl, [ip, #2]
 8015c5a:	fba5 8202 	umull	r8, r2, r5, r2
 8015c5e:	0892      	lsrs	r2, r2, #2
 8015c60:	fb01 0012 	mls	r0, r1, r2, r0
 8015c64:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 8015c68:	f08a 0c20 	eor.w	ip, sl, #32
 8015c6c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8015c70:	f47f af11 	bne.w	8015a96 <uxr_read_framed_msg+0xee>
 8015c74:	459e      	cmp	lr, r3
 8015c76:	ee17 8a90 	vmov	r8, s15
 8015c7a:	f43f af37 	beq.w	8015aec <uxr_read_framed_msg+0x144>
 8015c7e:	2301      	movs	r3, #1
 8015c80:	7023      	strb	r3, [r4, #0]
 8015c82:	e6a2      	b.n	80159ca <uxr_read_framed_msg+0x22>
 8015c84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c86:	9300      	str	r3, [sp, #0]
 8015c88:	2301      	movs	r3, #1
 8015c8a:	9301      	str	r3, [sp, #4]
 8015c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c8e:	464a      	mov	r2, r9
 8015c90:	4641      	mov	r1, r8
 8015c92:	4620      	mov	r0, r4
 8015c94:	f7ff fe06 	bl	80158a4 <uxr_framing_read_transport>
 8015c98:	2800      	cmp	r0, #0
 8015c9a:	f43f aec6 	beq.w	8015a2a <uxr_read_framed_msg+0x82>
 8015c9e:	7823      	ldrb	r3, [r4, #0]
 8015ca0:	e693      	b.n	80159ca <uxr_read_framed_msg+0x22>
 8015ca2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ca4:	9300      	str	r3, [sp, #0]
 8015ca6:	2302      	movs	r3, #2
 8015ca8:	e7ef      	b.n	8015c8a <uxr_read_framed_msg+0x2e2>
 8015caa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cac:	9300      	str	r3, [sp, #0]
 8015cae:	2304      	movs	r3, #4
 8015cb0:	9301      	str	r3, [sp, #4]
 8015cb2:	464a      	mov	r2, r9
 8015cb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015cb6:	4641      	mov	r1, r8
 8015cb8:	4620      	mov	r0, r4
 8015cba:	f7ff fdf3 	bl	80158a4 <uxr_framing_read_transport>
 8015cbe:	2800      	cmp	r0, #0
 8015cc0:	d1ed      	bne.n	8015c9e <uxr_read_framed_msg+0x2f6>
 8015cc2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015cc6:	2b7e      	cmp	r3, #126	; 0x7e
 8015cc8:	d0e9      	beq.n	8015c9e <uxr_read_framed_msg+0x2f6>
 8015cca:	e6ae      	b.n	8015a2a <uxr_read_framed_msg+0x82>
 8015ccc:	30c30c31 	.word	0x30c30c31
 8015cd0:	08018970 	.word	0x08018970
 8015cd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cd6:	9300      	str	r3, [sp, #0]
 8015cd8:	2305      	movs	r3, #5
 8015cda:	9301      	str	r3, [sp, #4]
 8015cdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015cde:	f7ff fde1 	bl	80158a4 <uxr_framing_read_transport>
 8015ce2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015ce6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015cea:	429a      	cmp	r2, r3
 8015cec:	f43f ae9d 	beq.w	8015a2a <uxr_read_framed_msg+0x82>
 8015cf0:	e668      	b.n	80159c4 <uxr_read_framed_msg+0x1c>
 8015cf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cf4:	9300      	str	r3, [sp, #0]
 8015cf6:	2303      	movs	r3, #3
 8015cf8:	e7c7      	b.n	8015c8a <uxr_read_framed_msg+0x2e2>
 8015cfa:	2305      	movs	r3, #5
 8015cfc:	7023      	strb	r3, [r4, #0]
 8015cfe:	e664      	b.n	80159ca <uxr_read_framed_msg+0x22>
 8015d00:	ee17 8a90 	vmov	r8, s15
 8015d04:	f43f aef2 	beq.w	8015aec <uxr_read_framed_msg+0x144>
 8015d08:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8015d0c:	d08e      	beq.n	8015c2c <uxr_read_framed_msg+0x284>
 8015d0e:	ebae 0303 	sub.w	r3, lr, r3
 8015d12:	3302      	adds	r3, #2
 8015d14:	9301      	str	r3, [sp, #4]
 8015d16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d18:	9300      	str	r3, [sp, #0]
 8015d1a:	e7b7      	b.n	8015c8c <uxr_read_framed_msg+0x2e4>
 8015d1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015d1e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015d22:	7013      	strb	r3, [r2, #0]
 8015d24:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8015d26:	b003      	add	sp, #12
 8015d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d2c:	f103 0c01 	add.w	ip, r3, #1
 8015d30:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015d34:	fba5 0202 	umull	r0, r2, r5, r2
 8015d38:	0892      	lsrs	r2, r2, #2
 8015d3a:	202a      	movs	r0, #42	; 0x2a
 8015d3c:	fb00 c212 	mls	r2, r0, r2, ip
 8015d40:	fa5f fc82 	uxtb.w	ip, r2
 8015d44:	4561      	cmp	r1, ip
 8015d46:	d09d      	beq.n	8015c84 <uxr_read_framed_msg+0x2dc>
 8015d48:	3302      	adds	r3, #2
 8015d4a:	4422      	add	r2, r4
 8015d4c:	0859      	lsrs	r1, r3, #1
 8015d4e:	7892      	ldrb	r2, [r2, #2]
 8015d50:	fba5 c101 	umull	ip, r1, r5, r1
 8015d54:	0889      	lsrs	r1, r1, #2
 8015d56:	fb00 3311 	mls	r3, r0, r1, r3
 8015d5a:	2a7e      	cmp	r2, #126	; 0x7e
 8015d5c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015d60:	f000 80aa 	beq.w	8015eb8 <uxr_read_framed_msg+0x510>
 8015d64:	f082 0220 	eor.w	r2, r2, #32
 8015d68:	e654      	b.n	8015a14 <uxr_read_framed_msg+0x6c>
 8015d6a:	1c58      	adds	r0, r3, #1
 8015d6c:	0842      	lsrs	r2, r0, #1
 8015d6e:	fba5 c202 	umull	ip, r2, r5, r2
 8015d72:	0892      	lsrs	r2, r2, #2
 8015d74:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015d78:	fb0c 0212 	mls	r2, ip, r2, r0
 8015d7c:	b2d0      	uxtb	r0, r2
 8015d7e:	4281      	cmp	r1, r0
 8015d80:	d08f      	beq.n	8015ca2 <uxr_read_framed_msg+0x2fa>
 8015d82:	4422      	add	r2, r4
 8015d84:	3302      	adds	r3, #2
 8015d86:	7890      	ldrb	r0, [r2, #2]
 8015d88:	085a      	lsrs	r2, r3, #1
 8015d8a:	fba5 1202 	umull	r1, r2, r5, r2
 8015d8e:	0892      	lsrs	r2, r2, #2
 8015d90:	fb0c 3312 	mls	r3, ip, r2, r3
 8015d94:	287e      	cmp	r0, #126	; 0x7e
 8015d96:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015d9a:	d07d      	beq.n	8015e98 <uxr_read_framed_msg+0x4f0>
 8015d9c:	f080 0020 	eor.w	r0, r0, #32
 8015da0:	e660      	b.n	8015a64 <uxr_read_framed_msg+0xbc>
 8015da2:	1c59      	adds	r1, r3, #1
 8015da4:	084a      	lsrs	r2, r1, #1
 8015da6:	fba5 c202 	umull	ip, r2, r5, r2
 8015daa:	0892      	lsrs	r2, r2, #2
 8015dac:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015db0:	fb0c 1212 	mls	r2, ip, r2, r1
 8015db4:	b2d1      	uxtb	r1, r2
 8015db6:	4288      	cmp	r0, r1
 8015db8:	f43f af64 	beq.w	8015c84 <uxr_read_framed_msg+0x2dc>
 8015dbc:	4422      	add	r2, r4
 8015dbe:	3302      	adds	r3, #2
 8015dc0:	7891      	ldrb	r1, [r2, #2]
 8015dc2:	085a      	lsrs	r2, r3, #1
 8015dc4:	fba5 0202 	umull	r0, r2, r5, r2
 8015dc8:	0892      	lsrs	r2, r2, #2
 8015dca:	fb0c 3312 	mls	r3, ip, r2, r3
 8015dce:	297e      	cmp	r1, #126	; 0x7e
 8015dd0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015dd4:	d070      	beq.n	8015eb8 <uxr_read_framed_msg+0x510>
 8015dd6:	f081 0120 	eor.w	r1, r1, #32
 8015dda:	e6a3      	b.n	8015b24 <uxr_read_framed_msg+0x17c>
 8015ddc:	f103 0c01 	add.w	ip, r3, #1
 8015de0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015de4:	fba5 0202 	umull	r0, r2, r5, r2
 8015de8:	0892      	lsrs	r2, r2, #2
 8015dea:	202a      	movs	r0, #42	; 0x2a
 8015dec:	fb00 c212 	mls	r2, r0, r2, ip
 8015df0:	fa5f fc82 	uxtb.w	ip, r2
 8015df4:	4561      	cmp	r1, ip
 8015df6:	f43f af58 	beq.w	8015caa <uxr_read_framed_msg+0x302>
 8015dfa:	4422      	add	r2, r4
 8015dfc:	3302      	adds	r3, #2
 8015dfe:	7891      	ldrb	r1, [r2, #2]
 8015e00:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8015e04:	085a      	lsrs	r2, r3, #1
 8015e06:	fba5 c202 	umull	ip, r2, r5, r2
 8015e0a:	0892      	lsrs	r2, r2, #2
 8015e0c:	fb00 3312 	mls	r3, r0, r2, r3
 8015e10:	297e      	cmp	r1, #126	; 0x7e
 8015e12:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015e16:	f43f af48 	beq.w	8015caa <uxr_read_framed_msg+0x302>
 8015e1a:	f081 0120 	eor.w	r1, r1, #32
 8015e1e:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8015e22:	e6e8      	b.n	8015bf6 <uxr_read_framed_msg+0x24e>
 8015e24:	1c58      	adds	r0, r3, #1
 8015e26:	0842      	lsrs	r2, r0, #1
 8015e28:	fba5 c202 	umull	ip, r2, r5, r2
 8015e2c:	0892      	lsrs	r2, r2, #2
 8015e2e:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015e32:	fb0c 0212 	mls	r2, ip, r2, r0
 8015e36:	b2d0      	uxtb	r0, r2
 8015e38:	4281      	cmp	r1, r0
 8015e3a:	f43f af32 	beq.w	8015ca2 <uxr_read_framed_msg+0x2fa>
 8015e3e:	4422      	add	r2, r4
 8015e40:	3302      	adds	r3, #2
 8015e42:	7890      	ldrb	r0, [r2, #2]
 8015e44:	085a      	lsrs	r2, r3, #1
 8015e46:	fba5 1202 	umull	r1, r2, r5, r2
 8015e4a:	0892      	lsrs	r2, r2, #2
 8015e4c:	fb0c 3312 	mls	r3, ip, r2, r3
 8015e50:	287e      	cmp	r0, #126	; 0x7e
 8015e52:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015e56:	d01f      	beq.n	8015e98 <uxr_read_framed_msg+0x4f0>
 8015e58:	f080 0020 	eor.w	r0, r0, #32
 8015e5c:	e68b      	b.n	8015b76 <uxr_read_framed_msg+0x1ce>
 8015e5e:	1c51      	adds	r1, r2, #1
 8015e60:	084b      	lsrs	r3, r1, #1
 8015e62:	fba5 c303 	umull	ip, r3, r5, r3
 8015e66:	089b      	lsrs	r3, r3, #2
 8015e68:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015e6c:	fb0c 1313 	mls	r3, ip, r3, r1
 8015e70:	b2d9      	uxtb	r1, r3
 8015e72:	4288      	cmp	r0, r1
 8015e74:	f43f af3d 	beq.w	8015cf2 <uxr_read_framed_msg+0x34a>
 8015e78:	3202      	adds	r2, #2
 8015e7a:	4423      	add	r3, r4
 8015e7c:	0850      	lsrs	r0, r2, #1
 8015e7e:	789b      	ldrb	r3, [r3, #2]
 8015e80:	fba5 1000 	umull	r1, r0, r5, r0
 8015e84:	0880      	lsrs	r0, r0, #2
 8015e86:	fb0c 2210 	mls	r2, ip, r0, r2
 8015e8a:	2b7e      	cmp	r3, #126	; 0x7e
 8015e8c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015e90:	d016      	beq.n	8015ec0 <uxr_read_framed_msg+0x518>
 8015e92:	f083 0120 	eor.w	r1, r3, #32
 8015e96:	e68b      	b.n	8015bb0 <uxr_read_framed_msg+0x208>
 8015e98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e9a:	9300      	str	r3, [sp, #0]
 8015e9c:	2302      	movs	r3, #2
 8015e9e:	9301      	str	r3, [sp, #4]
 8015ea0:	464a      	mov	r2, r9
 8015ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ea4:	4641      	mov	r1, r8
 8015ea6:	4620      	mov	r0, r4
 8015ea8:	f7ff fcfc 	bl	80158a4 <uxr_framing_read_transport>
 8015eac:	2800      	cmp	r0, #0
 8015eae:	f47f aef6 	bne.w	8015c9e <uxr_read_framed_msg+0x2f6>
 8015eb2:	2301      	movs	r3, #1
 8015eb4:	7023      	strb	r3, [r4, #0]
 8015eb6:	e588      	b.n	80159ca <uxr_read_framed_msg+0x22>
 8015eb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015eba:	9300      	str	r3, [sp, #0]
 8015ebc:	2301      	movs	r3, #1
 8015ebe:	e7ee      	b.n	8015e9e <uxr_read_framed_msg+0x4f6>
 8015ec0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ec2:	9300      	str	r3, [sp, #0]
 8015ec4:	2303      	movs	r3, #3
 8015ec6:	e7ea      	b.n	8015e9e <uxr_read_framed_msg+0x4f6>
 8015ec8:	ee17 8a90 	vmov	r8, s15
 8015ecc:	e6ae      	b.n	8015c2c <uxr_read_framed_msg+0x284>
 8015ece:	bf00      	nop

08015ed0 <rcl_get_default_domain_id>:
 8015ed0:	b530      	push	{r4, r5, lr}
 8015ed2:	b083      	sub	sp, #12
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	9300      	str	r3, [sp, #0]
 8015ed8:	b1d0      	cbz	r0, 8015f10 <rcl_get_default_domain_id+0x40>
 8015eda:	4604      	mov	r4, r0
 8015edc:	4669      	mov	r1, sp
 8015ede:	4815      	ldr	r0, [pc, #84]	; (8015f34 <rcl_get_default_domain_id+0x64>)
 8015ee0:	f7fc fc32 	bl	8012748 <rcutils_get_env>
 8015ee4:	4602      	mov	r2, r0
 8015ee6:	b110      	cbz	r0, 8015eee <rcl_get_default_domain_id+0x1e>
 8015ee8:	2001      	movs	r0, #1
 8015eea:	b003      	add	sp, #12
 8015eec:	bd30      	pop	{r4, r5, pc}
 8015eee:	9b00      	ldr	r3, [sp, #0]
 8015ef0:	b18b      	cbz	r3, 8015f16 <rcl_get_default_domain_id+0x46>
 8015ef2:	7818      	ldrb	r0, [r3, #0]
 8015ef4:	2800      	cmp	r0, #0
 8015ef6:	d0f8      	beq.n	8015eea <rcl_get_default_domain_id+0x1a>
 8015ef8:	a901      	add	r1, sp, #4
 8015efa:	4618      	mov	r0, r3
 8015efc:	9201      	str	r2, [sp, #4]
 8015efe:	f000 fe73 	bl	8016be8 <strtoul>
 8015f02:	4605      	mov	r5, r0
 8015f04:	b150      	cbz	r0, 8015f1c <rcl_get_default_domain_id+0x4c>
 8015f06:	1c43      	adds	r3, r0, #1
 8015f08:	d00d      	beq.n	8015f26 <rcl_get_default_domain_id+0x56>
 8015f0a:	6025      	str	r5, [r4, #0]
 8015f0c:	2000      	movs	r0, #0
 8015f0e:	e7ec      	b.n	8015eea <rcl_get_default_domain_id+0x1a>
 8015f10:	200b      	movs	r0, #11
 8015f12:	b003      	add	sp, #12
 8015f14:	bd30      	pop	{r4, r5, pc}
 8015f16:	4618      	mov	r0, r3
 8015f18:	b003      	add	sp, #12
 8015f1a:	bd30      	pop	{r4, r5, pc}
 8015f1c:	9b01      	ldr	r3, [sp, #4]
 8015f1e:	781b      	ldrb	r3, [r3, #0]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d0f2      	beq.n	8015f0a <rcl_get_default_domain_id+0x3a>
 8015f24:	e7e0      	b.n	8015ee8 <rcl_get_default_domain_id+0x18>
 8015f26:	f001 f901 	bl	801712c <__errno>
 8015f2a:	6803      	ldr	r3, [r0, #0]
 8015f2c:	2b22      	cmp	r3, #34	; 0x22
 8015f2e:	d1ec      	bne.n	8015f0a <rcl_get_default_domain_id+0x3a>
 8015f30:	e7da      	b.n	8015ee8 <rcl_get_default_domain_id+0x18>
 8015f32:	bf00      	nop
 8015f34:	08018b70 	.word	0x08018b70

08015f38 <rcl_expand_topic_name>:
 8015f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f3c:	b08b      	sub	sp, #44	; 0x2c
 8015f3e:	9306      	str	r3, [sp, #24]
 8015f40:	2800      	cmp	r0, #0
 8015f42:	f000 80ad 	beq.w	80160a0 <rcl_expand_topic_name+0x168>
 8015f46:	460e      	mov	r6, r1
 8015f48:	2900      	cmp	r1, #0
 8015f4a:	f000 80a9 	beq.w	80160a0 <rcl_expand_topic_name+0x168>
 8015f4e:	4617      	mov	r7, r2
 8015f50:	2a00      	cmp	r2, #0
 8015f52:	f000 80a5 	beq.w	80160a0 <rcl_expand_topic_name+0x168>
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	f000 80a2 	beq.w	80160a0 <rcl_expand_topic_name+0x168>
 8015f5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	f000 809e 	beq.w	80160a0 <rcl_expand_topic_name+0x168>
 8015f64:	2200      	movs	r2, #0
 8015f66:	a909      	add	r1, sp, #36	; 0x24
 8015f68:	4680      	mov	r8, r0
 8015f6a:	f000 f9fb 	bl	8016364 <rcl_validate_topic_name>
 8015f6e:	4604      	mov	r4, r0
 8015f70:	2800      	cmp	r0, #0
 8015f72:	f040 8096 	bne.w	80160a2 <rcl_expand_topic_name+0x16a>
 8015f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	f040 809a 	bne.w	80160b2 <rcl_expand_topic_name+0x17a>
 8015f7e:	4602      	mov	r2, r0
 8015f80:	a909      	add	r1, sp, #36	; 0x24
 8015f82:	4630      	mov	r0, r6
 8015f84:	f7fd f83e 	bl	8013004 <rmw_validate_node_name>
 8015f88:	2800      	cmp	r0, #0
 8015f8a:	f040 808e 	bne.w	80160aa <rcl_expand_topic_name+0x172>
 8015f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f90:	2a00      	cmp	r2, #0
 8015f92:	f040 8093 	bne.w	80160bc <rcl_expand_topic_name+0x184>
 8015f96:	a909      	add	r1, sp, #36	; 0x24
 8015f98:	4638      	mov	r0, r7
 8015f9a:	f7fd f815 	bl	8012fc8 <rmw_validate_namespace>
 8015f9e:	2800      	cmp	r0, #0
 8015fa0:	f040 8083 	bne.w	80160aa <rcl_expand_topic_name+0x172>
 8015fa4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015fa6:	2c00      	cmp	r4, #0
 8015fa8:	f040 80ed 	bne.w	8016186 <rcl_expand_topic_name+0x24e>
 8015fac:	217b      	movs	r1, #123	; 0x7b
 8015fae:	4640      	mov	r0, r8
 8015fb0:	f000 ffda 	bl	8016f68 <strchr>
 8015fb4:	f898 3000 	ldrb.w	r3, [r8]
 8015fb8:	2b2f      	cmp	r3, #47	; 0x2f
 8015fba:	4605      	mov	r5, r0
 8015fbc:	f000 809e 	beq.w	80160fc <rcl_expand_topic_name+0x1c4>
 8015fc0:	2b7e      	cmp	r3, #126	; 0x7e
 8015fc2:	f040 80a2 	bne.w	801610a <rcl_expand_topic_name+0x1d2>
 8015fc6:	4638      	mov	r0, r7
 8015fc8:	f7ea f914 	bl	80001f4 <strlen>
 8015fcc:	4a82      	ldr	r2, [pc, #520]	; (80161d8 <rcl_expand_topic_name+0x2a0>)
 8015fce:	4b83      	ldr	r3, [pc, #524]	; (80161dc <rcl_expand_topic_name+0x2a4>)
 8015fd0:	2801      	cmp	r0, #1
 8015fd2:	bf18      	it	ne
 8015fd4:	4613      	movne	r3, r2
 8015fd6:	9302      	str	r3, [sp, #8]
 8015fd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015fda:	9300      	str	r3, [sp, #0]
 8015fdc:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8015fe0:	f108 0301 	add.w	r3, r8, #1
 8015fe4:	9305      	str	r3, [sp, #20]
 8015fe6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015fea:	9301      	str	r3, [sp, #4]
 8015fec:	ab14      	add	r3, sp, #80	; 0x50
 8015fee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015ff0:	f7fc fbd2 	bl	8012798 <rcutils_format_string_limit>
 8015ff4:	4682      	mov	sl, r0
 8015ff6:	2800      	cmp	r0, #0
 8015ff8:	f000 80c7 	beq.w	801618a <rcl_expand_topic_name+0x252>
 8015ffc:	2d00      	cmp	r5, #0
 8015ffe:	f000 80a2 	beq.w	8016146 <rcl_expand_topic_name+0x20e>
 8016002:	217b      	movs	r1, #123	; 0x7b
 8016004:	f000 ffb0 	bl	8016f68 <strchr>
 8016008:	46d1      	mov	r9, sl
 801600a:	4605      	mov	r5, r0
 801600c:	9407      	str	r4, [sp, #28]
 801600e:	46d3      	mov	fp, sl
 8016010:	464c      	mov	r4, r9
 8016012:	2d00      	cmp	r5, #0
 8016014:	f000 80be 	beq.w	8016194 <rcl_expand_topic_name+0x25c>
 8016018:	217d      	movs	r1, #125	; 0x7d
 801601a:	4620      	mov	r0, r4
 801601c:	f000 ffa4 	bl	8016f68 <strchr>
 8016020:	eba0 0905 	sub.w	r9, r0, r5
 8016024:	f109 0a01 	add.w	sl, r9, #1
 8016028:	486d      	ldr	r0, [pc, #436]	; (80161e0 <rcl_expand_topic_name+0x2a8>)
 801602a:	4652      	mov	r2, sl
 801602c:	4629      	mov	r1, r5
 801602e:	f000 ffa8 	bl	8016f82 <strncmp>
 8016032:	2800      	cmp	r0, #0
 8016034:	d067      	beq.n	8016106 <rcl_expand_topic_name+0x1ce>
 8016036:	486b      	ldr	r0, [pc, #428]	; (80161e4 <rcl_expand_topic_name+0x2ac>)
 8016038:	4652      	mov	r2, sl
 801603a:	4629      	mov	r1, r5
 801603c:	f000 ffa1 	bl	8016f82 <strncmp>
 8016040:	b130      	cbz	r0, 8016050 <rcl_expand_topic_name+0x118>
 8016042:	4869      	ldr	r0, [pc, #420]	; (80161e8 <rcl_expand_topic_name+0x2b0>)
 8016044:	4652      	mov	r2, sl
 8016046:	4629      	mov	r1, r5
 8016048:	f000 ff9b 	bl	8016f82 <strncmp>
 801604c:	2800      	cmp	r0, #0
 801604e:	d137      	bne.n	80160c0 <rcl_expand_topic_name+0x188>
 8016050:	46b9      	mov	r9, r7
 8016052:	ab16      	add	r3, sp, #88	; 0x58
 8016054:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016058:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801605c:	ab14      	add	r3, sp, #80	; 0x50
 801605e:	4628      	mov	r0, r5
 8016060:	cb0c      	ldmia	r3, {r2, r3}
 8016062:	4651      	mov	r1, sl
 8016064:	f7fc fcd4 	bl	8012a10 <rcutils_strndup>
 8016068:	4605      	mov	r5, r0
 801606a:	2800      	cmp	r0, #0
 801606c:	f000 809c 	beq.w	80161a8 <rcl_expand_topic_name+0x270>
 8016070:	464a      	mov	r2, r9
 8016072:	4620      	mov	r0, r4
 8016074:	ab14      	add	r3, sp, #80	; 0x50
 8016076:	4629      	mov	r1, r5
 8016078:	f7fc fbc8 	bl	801280c <rcutils_repl_str>
 801607c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801607e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016080:	4604      	mov	r4, r0
 8016082:	4628      	mov	r0, r5
 8016084:	4798      	blx	r3
 8016086:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016088:	9918      	ldr	r1, [sp, #96]	; 0x60
 801608a:	4658      	mov	r0, fp
 801608c:	4798      	blx	r3
 801608e:	2c00      	cmp	r4, #0
 8016090:	d07b      	beq.n	801618a <rcl_expand_topic_name+0x252>
 8016092:	217b      	movs	r1, #123	; 0x7b
 8016094:	4620      	mov	r0, r4
 8016096:	f000 ff67 	bl	8016f68 <strchr>
 801609a:	46a3      	mov	fp, r4
 801609c:	4605      	mov	r5, r0
 801609e:	e7b8      	b.n	8016012 <rcl_expand_topic_name+0xda>
 80160a0:	240b      	movs	r4, #11
 80160a2:	4620      	mov	r0, r4
 80160a4:	b00b      	add	sp, #44	; 0x2c
 80160a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160aa:	f7f9 fdaf 	bl	800fc0c <rcl_convert_rmw_ret_to_rcl_ret>
 80160ae:	4604      	mov	r4, r0
 80160b0:	e7f7      	b.n	80160a2 <rcl_expand_topic_name+0x16a>
 80160b2:	2467      	movs	r4, #103	; 0x67
 80160b4:	4620      	mov	r0, r4
 80160b6:	b00b      	add	sp, #44	; 0x2c
 80160b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160bc:	24c9      	movs	r4, #201	; 0xc9
 80160be:	e7f0      	b.n	80160a2 <rcl_expand_topic_name+0x16a>
 80160c0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80160c4:	9806      	ldr	r0, [sp, #24]
 80160c6:	1c69      	adds	r1, r5, #1
 80160c8:	f7fc fdbc 	bl	8012c44 <rcutils_string_map_getn>
 80160cc:	4681      	mov	r9, r0
 80160ce:	2800      	cmp	r0, #0
 80160d0:	d1bf      	bne.n	8016052 <rcl_expand_topic_name+0x11a>
 80160d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80160d4:	aa16      	add	r2, sp, #88	; 0x58
 80160d6:	6018      	str	r0, [r3, #0]
 80160d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80160da:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80160de:	ab14      	add	r3, sp, #80	; 0x50
 80160e0:	cb0c      	ldmia	r3, {r2, r3}
 80160e2:	4651      	mov	r1, sl
 80160e4:	4628      	mov	r0, r5
 80160e6:	f7fc fc93 	bl	8012a10 <rcutils_strndup>
 80160ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 80160ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80160ee:	4798      	blx	r3
 80160f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80160f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80160f4:	4658      	mov	r0, fp
 80160f6:	2469      	movs	r4, #105	; 0x69
 80160f8:	4798      	blx	r3
 80160fa:	e7d2      	b.n	80160a2 <rcl_expand_topic_name+0x16a>
 80160fc:	2800      	cmp	r0, #0
 80160fe:	d05b      	beq.n	80161b8 <rcl_expand_topic_name+0x280>
 8016100:	46c1      	mov	r9, r8
 8016102:	46a2      	mov	sl, r4
 8016104:	e782      	b.n	801600c <rcl_expand_topic_name+0xd4>
 8016106:	46b1      	mov	r9, r6
 8016108:	e7a3      	b.n	8016052 <rcl_expand_topic_name+0x11a>
 801610a:	2800      	cmp	r0, #0
 801610c:	d1f8      	bne.n	8016100 <rcl_expand_topic_name+0x1c8>
 801610e:	4638      	mov	r0, r7
 8016110:	f7ea f870 	bl	80001f4 <strlen>
 8016114:	4a35      	ldr	r2, [pc, #212]	; (80161ec <rcl_expand_topic_name+0x2b4>)
 8016116:	4b36      	ldr	r3, [pc, #216]	; (80161f0 <rcl_expand_topic_name+0x2b8>)
 8016118:	f8cd 8010 	str.w	r8, [sp, #16]
 801611c:	2801      	cmp	r0, #1
 801611e:	bf18      	it	ne
 8016120:	4613      	movne	r3, r2
 8016122:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8016126:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801612a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801612c:	9703      	str	r7, [sp, #12]
 801612e:	9200      	str	r2, [sp, #0]
 8016130:	ab14      	add	r3, sp, #80	; 0x50
 8016132:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016134:	f7fc fb30 	bl	8012798 <rcutils_format_string_limit>
 8016138:	4682      	mov	sl, r0
 801613a:	4653      	mov	r3, sl
 801613c:	b32b      	cbz	r3, 801618a <rcl_expand_topic_name+0x252>
 801613e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016140:	f8c3 a000 	str.w	sl, [r3]
 8016144:	e7ad      	b.n	80160a2 <rcl_expand_topic_name+0x16a>
 8016146:	f89a 3000 	ldrb.w	r3, [sl]
 801614a:	2b2f      	cmp	r3, #47	; 0x2f
 801614c:	d0f7      	beq.n	801613e <rcl_expand_topic_name+0x206>
 801614e:	4638      	mov	r0, r7
 8016150:	f7ea f850 	bl	80001f4 <strlen>
 8016154:	4a25      	ldr	r2, [pc, #148]	; (80161ec <rcl_expand_topic_name+0x2b4>)
 8016156:	4b26      	ldr	r3, [pc, #152]	; (80161f0 <rcl_expand_topic_name+0x2b8>)
 8016158:	f8cd a010 	str.w	sl, [sp, #16]
 801615c:	2801      	cmp	r0, #1
 801615e:	bf18      	it	ne
 8016160:	4613      	movne	r3, r2
 8016162:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8016166:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801616a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801616c:	9703      	str	r7, [sp, #12]
 801616e:	9200      	str	r2, [sp, #0]
 8016170:	ab14      	add	r3, sp, #80	; 0x50
 8016172:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016174:	f7fc fb10 	bl	8012798 <rcutils_format_string_limit>
 8016178:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801617a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801617c:	4605      	mov	r5, r0
 801617e:	4650      	mov	r0, sl
 8016180:	4798      	blx	r3
 8016182:	46aa      	mov	sl, r5
 8016184:	e7d9      	b.n	801613a <rcl_expand_topic_name+0x202>
 8016186:	24ca      	movs	r4, #202	; 0xca
 8016188:	e78b      	b.n	80160a2 <rcl_expand_topic_name+0x16a>
 801618a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801618c:	2300      	movs	r3, #0
 801618e:	6013      	str	r3, [r2, #0]
 8016190:	240a      	movs	r4, #10
 8016192:	e786      	b.n	80160a2 <rcl_expand_topic_name+0x16a>
 8016194:	465b      	mov	r3, fp
 8016196:	9c07      	ldr	r4, [sp, #28]
 8016198:	46da      	mov	sl, fp
 801619a:	2b00      	cmp	r3, #0
 801619c:	d1d3      	bne.n	8016146 <rcl_expand_topic_name+0x20e>
 801619e:	f898 3000 	ldrb.w	r3, [r8]
 80161a2:	2b2f      	cmp	r3, #47	; 0x2f
 80161a4:	d0cb      	beq.n	801613e <rcl_expand_topic_name+0x206>
 80161a6:	e7b2      	b.n	801610e <rcl_expand_topic_name+0x1d6>
 80161a8:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 80161ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80161ae:	6015      	str	r5, [r2, #0]
 80161b0:	4658      	mov	r0, fp
 80161b2:	4798      	blx	r3
 80161b4:	240a      	movs	r4, #10
 80161b6:	e774      	b.n	80160a2 <rcl_expand_topic_name+0x16a>
 80161b8:	ab17      	add	r3, sp, #92	; 0x5c
 80161ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80161be:	e88d 0003 	stmia.w	sp, {r0, r1}
 80161c2:	ab14      	add	r3, sp, #80	; 0x50
 80161c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80161c6:	4640      	mov	r0, r8
 80161c8:	f7fc fc00 	bl	80129cc <rcutils_strdup>
 80161cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80161ce:	2800      	cmp	r0, #0
 80161d0:	6018      	str	r0, [r3, #0]
 80161d2:	bf08      	it	eq
 80161d4:	240a      	moveq	r4, #10
 80161d6:	e764      	b.n	80160a2 <rcl_expand_topic_name+0x16a>
 80161d8:	08018b80 	.word	0x08018b80
 80161dc:	08018230 	.word	0x08018230
 80161e0:	08018b88 	.word	0x08018b88
 80161e4:	08018b90 	.word	0x08018b90
 80161e8:	08018b98 	.word	0x08018b98
 80161ec:	080183c4 	.word	0x080183c4
 80161f0:	08018240 	.word	0x08018240

080161f4 <rcl_get_default_topic_name_substitutions>:
 80161f4:	2800      	cmp	r0, #0
 80161f6:	bf0c      	ite	eq
 80161f8:	200b      	moveq	r0, #11
 80161fa:	2000      	movne	r0, #0
 80161fc:	4770      	bx	lr
 80161fe:	bf00      	nop

08016200 <rcl_get_zero_initialized_guard_condition>:
 8016200:	4a03      	ldr	r2, [pc, #12]	; (8016210 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016202:	4603      	mov	r3, r0
 8016204:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016208:	e883 0003 	stmia.w	r3, {r0, r1}
 801620c:	4618      	mov	r0, r3
 801620e:	4770      	bx	lr
 8016210:	08018ba4 	.word	0x08018ba4

08016214 <rcl_guard_condition_init_from_rmw>:
 8016214:	b082      	sub	sp, #8
 8016216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801621a:	b086      	sub	sp, #24
 801621c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016220:	4604      	mov	r4, r0
 8016222:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016226:	460e      	mov	r6, r1
 8016228:	4617      	mov	r7, r2
 801622a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801622e:	f10d 0e04 	add.w	lr, sp, #4
 8016232:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016236:	f8dc 3000 	ldr.w	r3, [ip]
 801623a:	f8ce 3000 	str.w	r3, [lr]
 801623e:	a801      	add	r0, sp, #4
 8016240:	f7f4 ff6e 	bl	800b120 <rcutils_allocator_is_valid>
 8016244:	b350      	cbz	r0, 801629c <rcl_guard_condition_init_from_rmw+0x88>
 8016246:	b34c      	cbz	r4, 801629c <rcl_guard_condition_init_from_rmw+0x88>
 8016248:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801624c:	f1b8 0f00 	cmp.w	r8, #0
 8016250:	d11e      	bne.n	8016290 <rcl_guard_condition_init_from_rmw+0x7c>
 8016252:	b31f      	cbz	r7, 801629c <rcl_guard_condition_init_from_rmw+0x88>
 8016254:	4638      	mov	r0, r7
 8016256:	f7f9 fcf7 	bl	800fc48 <rcl_context_is_valid>
 801625a:	b328      	cbz	r0, 80162a8 <rcl_guard_condition_init_from_rmw+0x94>
 801625c:	9b01      	ldr	r3, [sp, #4]
 801625e:	9905      	ldr	r1, [sp, #20]
 8016260:	201c      	movs	r0, #28
 8016262:	4798      	blx	r3
 8016264:	4605      	mov	r5, r0
 8016266:	6060      	str	r0, [r4, #4]
 8016268:	b358      	cbz	r0, 80162c2 <rcl_guard_condition_init_from_rmw+0xae>
 801626a:	b1fe      	cbz	r6, 80162ac <rcl_guard_condition_init_from_rmw+0x98>
 801626c:	6006      	str	r6, [r0, #0]
 801626e:	f880 8004 	strb.w	r8, [r0, #4]
 8016272:	ac01      	add	r4, sp, #4
 8016274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016276:	f105 0c08 	add.w	ip, r5, #8
 801627a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801627e:	6823      	ldr	r3, [r4, #0]
 8016280:	f8cc 3000 	str.w	r3, [ip]
 8016284:	2000      	movs	r0, #0
 8016286:	b006      	add	sp, #24
 8016288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801628c:	b002      	add	sp, #8
 801628e:	4770      	bx	lr
 8016290:	2064      	movs	r0, #100	; 0x64
 8016292:	b006      	add	sp, #24
 8016294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016298:	b002      	add	sp, #8
 801629a:	4770      	bx	lr
 801629c:	200b      	movs	r0, #11
 801629e:	b006      	add	sp, #24
 80162a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162a4:	b002      	add	sp, #8
 80162a6:	4770      	bx	lr
 80162a8:	2065      	movs	r0, #101	; 0x65
 80162aa:	e7f2      	b.n	8016292 <rcl_guard_condition_init_from_rmw+0x7e>
 80162ac:	6838      	ldr	r0, [r7, #0]
 80162ae:	3028      	adds	r0, #40	; 0x28
 80162b0:	f000 fa3a 	bl	8016728 <rmw_create_guard_condition>
 80162b4:	6028      	str	r0, [r5, #0]
 80162b6:	6865      	ldr	r5, [r4, #4]
 80162b8:	682e      	ldr	r6, [r5, #0]
 80162ba:	b126      	cbz	r6, 80162c6 <rcl_guard_condition_init_from_rmw+0xb2>
 80162bc:	2301      	movs	r3, #1
 80162be:	712b      	strb	r3, [r5, #4]
 80162c0:	e7d7      	b.n	8016272 <rcl_guard_condition_init_from_rmw+0x5e>
 80162c2:	200a      	movs	r0, #10
 80162c4:	e7e5      	b.n	8016292 <rcl_guard_condition_init_from_rmw+0x7e>
 80162c6:	4628      	mov	r0, r5
 80162c8:	9b02      	ldr	r3, [sp, #8]
 80162ca:	9905      	ldr	r1, [sp, #20]
 80162cc:	4798      	blx	r3
 80162ce:	6066      	str	r6, [r4, #4]
 80162d0:	2001      	movs	r0, #1
 80162d2:	e7de      	b.n	8016292 <rcl_guard_condition_init_from_rmw+0x7e>

080162d4 <rcl_guard_condition_fini>:
 80162d4:	b570      	push	{r4, r5, r6, lr}
 80162d6:	b082      	sub	sp, #8
 80162d8:	b1f0      	cbz	r0, 8016318 <rcl_guard_condition_fini+0x44>
 80162da:	6843      	ldr	r3, [r0, #4]
 80162dc:	4604      	mov	r4, r0
 80162de:	b163      	cbz	r3, 80162fa <rcl_guard_condition_fini+0x26>
 80162e0:	6818      	ldr	r0, [r3, #0]
 80162e2:	68de      	ldr	r6, [r3, #12]
 80162e4:	6999      	ldr	r1, [r3, #24]
 80162e6:	b160      	cbz	r0, 8016302 <rcl_guard_condition_fini+0x2e>
 80162e8:	791d      	ldrb	r5, [r3, #4]
 80162ea:	b965      	cbnz	r5, 8016306 <rcl_guard_condition_fini+0x32>
 80162ec:	4618      	mov	r0, r3
 80162ee:	47b0      	blx	r6
 80162f0:	2300      	movs	r3, #0
 80162f2:	4628      	mov	r0, r5
 80162f4:	6063      	str	r3, [r4, #4]
 80162f6:	b002      	add	sp, #8
 80162f8:	bd70      	pop	{r4, r5, r6, pc}
 80162fa:	461d      	mov	r5, r3
 80162fc:	4628      	mov	r0, r5
 80162fe:	b002      	add	sp, #8
 8016300:	bd70      	pop	{r4, r5, r6, pc}
 8016302:	4605      	mov	r5, r0
 8016304:	e7f2      	b.n	80162ec <rcl_guard_condition_fini+0x18>
 8016306:	9101      	str	r1, [sp, #4]
 8016308:	f000 fa22 	bl	8016750 <rmw_destroy_guard_condition>
 801630c:	1e05      	subs	r5, r0, #0
 801630e:	6863      	ldr	r3, [r4, #4]
 8016310:	9901      	ldr	r1, [sp, #4]
 8016312:	bf18      	it	ne
 8016314:	2501      	movne	r5, #1
 8016316:	e7e9      	b.n	80162ec <rcl_guard_condition_fini+0x18>
 8016318:	250b      	movs	r5, #11
 801631a:	4628      	mov	r0, r5
 801631c:	b002      	add	sp, #8
 801631e:	bd70      	pop	{r4, r5, r6, pc}

08016320 <rcl_guard_condition_get_default_options>:
 8016320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016322:	b087      	sub	sp, #28
 8016324:	4606      	mov	r6, r0
 8016326:	4668      	mov	r0, sp
 8016328:	f7f4 feec 	bl	800b104 <rcutils_get_default_allocator>
 801632c:	4b09      	ldr	r3, [pc, #36]	; (8016354 <rcl_guard_condition_get_default_options+0x34>)
 801632e:	46ee      	mov	lr, sp
 8016330:	469c      	mov	ip, r3
 8016332:	461d      	mov	r5, r3
 8016334:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016338:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801633c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801633e:	4634      	mov	r4, r6
 8016340:	f8de 7000 	ldr.w	r7, [lr]
 8016344:	f8cc 7000 	str.w	r7, [ip]
 8016348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801634a:	4630      	mov	r0, r6
 801634c:	6027      	str	r7, [r4, #0]
 801634e:	b007      	add	sp, #28
 8016350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016352:	bf00      	nop
 8016354:	20010cdc 	.word	0x20010cdc

08016358 <rcl_guard_condition_get_rmw_handle>:
 8016358:	b110      	cbz	r0, 8016360 <rcl_guard_condition_get_rmw_handle+0x8>
 801635a:	6840      	ldr	r0, [r0, #4]
 801635c:	b100      	cbz	r0, 8016360 <rcl_guard_condition_get_rmw_handle+0x8>
 801635e:	6800      	ldr	r0, [r0, #0]
 8016360:	4770      	bx	lr
 8016362:	bf00      	nop

08016364 <rcl_validate_topic_name>:
 8016364:	2800      	cmp	r0, #0
 8016366:	d07a      	beq.n	801645e <rcl_validate_topic_name+0xfa>
 8016368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801636c:	460e      	mov	r6, r1
 801636e:	2900      	cmp	r1, #0
 8016370:	d07c      	beq.n	801646c <rcl_validate_topic_name+0x108>
 8016372:	4617      	mov	r7, r2
 8016374:	4605      	mov	r5, r0
 8016376:	f7e9 ff3d 	bl	80001f4 <strlen>
 801637a:	b1b0      	cbz	r0, 80163aa <rcl_validate_topic_name+0x46>
 801637c:	f895 9000 	ldrb.w	r9, [r5]
 8016380:	f8df c180 	ldr.w	ip, [pc, #384]	; 8016504 <rcl_validate_topic_name+0x1a0>
 8016384:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8016388:	f013 0304 	ands.w	r3, r3, #4
 801638c:	d169      	bne.n	8016462 <rcl_validate_topic_name+0xfe>
 801638e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8016392:	f815 2008 	ldrb.w	r2, [r5, r8]
 8016396:	2a2f      	cmp	r2, #47	; 0x2f
 8016398:	d10e      	bne.n	80163b8 <rcl_validate_topic_name+0x54>
 801639a:	2202      	movs	r2, #2
 801639c:	6032      	str	r2, [r6, #0]
 801639e:	b36f      	cbz	r7, 80163fc <rcl_validate_topic_name+0x98>
 80163a0:	f8c7 8000 	str.w	r8, [r7]
 80163a4:	4618      	mov	r0, r3
 80163a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163aa:	2301      	movs	r3, #1
 80163ac:	6033      	str	r3, [r6, #0]
 80163ae:	b32f      	cbz	r7, 80163fc <rcl_validate_topic_name+0x98>
 80163b0:	2000      	movs	r0, #0
 80163b2:	6038      	str	r0, [r7, #0]
 80163b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163b8:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 80163bc:	461c      	mov	r4, r3
 80163be:	4619      	mov	r1, r3
 80163c0:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80163c4:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80163c8:	f1be 0f09 	cmp.w	lr, #9
 80163cc:	d919      	bls.n	8016402 <rcl_validate_topic_name+0x9e>
 80163ce:	f022 0e20 	bic.w	lr, r2, #32
 80163d2:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 80163d6:	f1be 0f19 	cmp.w	lr, #25
 80163da:	d912      	bls.n	8016402 <rcl_validate_topic_name+0x9e>
 80163dc:	2a5f      	cmp	r2, #95	; 0x5f
 80163de:	d019      	beq.n	8016414 <rcl_validate_topic_name+0xb0>
 80163e0:	2a2f      	cmp	r2, #47	; 0x2f
 80163e2:	d051      	beq.n	8016488 <rcl_validate_topic_name+0x124>
 80163e4:	2a7e      	cmp	r2, #126	; 0x7e
 80163e6:	d048      	beq.n	801647a <rcl_validate_topic_name+0x116>
 80163e8:	2a7b      	cmp	r2, #123	; 0x7b
 80163ea:	d054      	beq.n	8016496 <rcl_validate_topic_name+0x132>
 80163ec:	2a7d      	cmp	r2, #125	; 0x7d
 80163ee:	d161      	bne.n	80164b4 <rcl_validate_topic_name+0x150>
 80163f0:	2c00      	cmp	r4, #0
 80163f2:	d155      	bne.n	80164a0 <rcl_validate_topic_name+0x13c>
 80163f4:	2305      	movs	r3, #5
 80163f6:	6033      	str	r3, [r6, #0]
 80163f8:	b107      	cbz	r7, 80163fc <rcl_validate_topic_name+0x98>
 80163fa:	6039      	str	r1, [r7, #0]
 80163fc:	2000      	movs	r0, #0
 80163fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016402:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016406:	0752      	lsls	r2, r2, #29
 8016408:	d504      	bpl.n	8016414 <rcl_validate_topic_name+0xb0>
 801640a:	b11c      	cbz	r4, 8016414 <rcl_validate_topic_name+0xb0>
 801640c:	b111      	cbz	r1, 8016414 <rcl_validate_topic_name+0xb0>
 801640e:	1e4a      	subs	r2, r1, #1
 8016410:	429a      	cmp	r2, r3
 8016412:	d02d      	beq.n	8016470 <rcl_validate_topic_name+0x10c>
 8016414:	3101      	adds	r1, #1
 8016416:	4288      	cmp	r0, r1
 8016418:	d1d2      	bne.n	80163c0 <rcl_validate_topic_name+0x5c>
 801641a:	2c00      	cmp	r4, #0
 801641c:	d145      	bne.n	80164aa <rcl_validate_topic_name+0x146>
 801641e:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8016422:	d04f      	beq.n	80164c4 <rcl_validate_topic_name+0x160>
 8016424:	4620      	mov	r0, r4
 8016426:	2301      	movs	r3, #1
 8016428:	e006      	b.n	8016438 <rcl_validate_topic_name+0xd4>
 801642a:	428b      	cmp	r3, r1
 801642c:	f105 0501 	add.w	r5, r5, #1
 8016430:	f103 0201 	add.w	r2, r3, #1
 8016434:	d236      	bcs.n	80164a4 <rcl_validate_topic_name+0x140>
 8016436:	4613      	mov	r3, r2
 8016438:	4580      	cmp	r8, r0
 801643a:	f100 0001 	add.w	r0, r0, #1
 801643e:	d0f4      	beq.n	801642a <rcl_validate_topic_name+0xc6>
 8016440:	782a      	ldrb	r2, [r5, #0]
 8016442:	2a2f      	cmp	r2, #47	; 0x2f
 8016444:	d1f1      	bne.n	801642a <rcl_validate_topic_name+0xc6>
 8016446:	786a      	ldrb	r2, [r5, #1]
 8016448:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801644c:	0754      	lsls	r4, r2, #29
 801644e:	d5ec      	bpl.n	801642a <rcl_validate_topic_name+0xc6>
 8016450:	2204      	movs	r2, #4
 8016452:	6032      	str	r2, [r6, #0]
 8016454:	2f00      	cmp	r7, #0
 8016456:	d0d1      	beq.n	80163fc <rcl_validate_topic_name+0x98>
 8016458:	603b      	str	r3, [r7, #0]
 801645a:	2000      	movs	r0, #0
 801645c:	e7aa      	b.n	80163b4 <rcl_validate_topic_name+0x50>
 801645e:	200b      	movs	r0, #11
 8016460:	4770      	bx	lr
 8016462:	2304      	movs	r3, #4
 8016464:	6033      	str	r3, [r6, #0]
 8016466:	2f00      	cmp	r7, #0
 8016468:	d1a2      	bne.n	80163b0 <rcl_validate_topic_name+0x4c>
 801646a:	e7c7      	b.n	80163fc <rcl_validate_topic_name+0x98>
 801646c:	200b      	movs	r0, #11
 801646e:	e7a1      	b.n	80163b4 <rcl_validate_topic_name+0x50>
 8016470:	2309      	movs	r3, #9
 8016472:	6033      	str	r3, [r6, #0]
 8016474:	2f00      	cmp	r7, #0
 8016476:	d1c0      	bne.n	80163fa <rcl_validate_topic_name+0x96>
 8016478:	e7c0      	b.n	80163fc <rcl_validate_topic_name+0x98>
 801647a:	2900      	cmp	r1, #0
 801647c:	d0ca      	beq.n	8016414 <rcl_validate_topic_name+0xb0>
 801647e:	2306      	movs	r3, #6
 8016480:	6033      	str	r3, [r6, #0]
 8016482:	2f00      	cmp	r7, #0
 8016484:	d1b9      	bne.n	80163fa <rcl_validate_topic_name+0x96>
 8016486:	e7b9      	b.n	80163fc <rcl_validate_topic_name+0x98>
 8016488:	2c00      	cmp	r4, #0
 801648a:	d0c3      	beq.n	8016414 <rcl_validate_topic_name+0xb0>
 801648c:	2308      	movs	r3, #8
 801648e:	6033      	str	r3, [r6, #0]
 8016490:	2f00      	cmp	r7, #0
 8016492:	d1b2      	bne.n	80163fa <rcl_validate_topic_name+0x96>
 8016494:	e7b2      	b.n	80163fc <rcl_validate_topic_name+0x98>
 8016496:	2c00      	cmp	r4, #0
 8016498:	d1f8      	bne.n	801648c <rcl_validate_topic_name+0x128>
 801649a:	460b      	mov	r3, r1
 801649c:	2401      	movs	r4, #1
 801649e:	e7b9      	b.n	8016414 <rcl_validate_topic_name+0xb0>
 80164a0:	2400      	movs	r4, #0
 80164a2:	e7b7      	b.n	8016414 <rcl_validate_topic_name+0xb0>
 80164a4:	2000      	movs	r0, #0
 80164a6:	6030      	str	r0, [r6, #0]
 80164a8:	e784      	b.n	80163b4 <rcl_validate_topic_name+0x50>
 80164aa:	2205      	movs	r2, #5
 80164ac:	6032      	str	r2, [r6, #0]
 80164ae:	2f00      	cmp	r7, #0
 80164b0:	d1d2      	bne.n	8016458 <rcl_validate_topic_name+0xf4>
 80164b2:	e7a3      	b.n	80163fc <rcl_validate_topic_name+0x98>
 80164b4:	2c00      	cmp	r4, #0
 80164b6:	bf14      	ite	ne
 80164b8:	2308      	movne	r3, #8
 80164ba:	2303      	moveq	r3, #3
 80164bc:	6033      	str	r3, [r6, #0]
 80164be:	2f00      	cmp	r7, #0
 80164c0:	d19b      	bne.n	80163fa <rcl_validate_topic_name+0x96>
 80164c2:	e79b      	b.n	80163fc <rcl_validate_topic_name+0x98>
 80164c4:	2301      	movs	r3, #1
 80164c6:	e00a      	b.n	80164de <rcl_validate_topic_name+0x17a>
 80164c8:	2c01      	cmp	r4, #1
 80164ca:	d013      	beq.n	80164f4 <rcl_validate_topic_name+0x190>
 80164cc:	4299      	cmp	r1, r3
 80164ce:	f104 0401 	add.w	r4, r4, #1
 80164d2:	f105 0501 	add.w	r5, r5, #1
 80164d6:	f103 0201 	add.w	r2, r3, #1
 80164da:	d9e3      	bls.n	80164a4 <rcl_validate_topic_name+0x140>
 80164dc:	4613      	mov	r3, r2
 80164de:	45a0      	cmp	r8, r4
 80164e0:	d0f4      	beq.n	80164cc <rcl_validate_topic_name+0x168>
 80164e2:	782a      	ldrb	r2, [r5, #0]
 80164e4:	2a2f      	cmp	r2, #47	; 0x2f
 80164e6:	d1ef      	bne.n	80164c8 <rcl_validate_topic_name+0x164>
 80164e8:	786a      	ldrb	r2, [r5, #1]
 80164ea:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80164ee:	0752      	lsls	r2, r2, #29
 80164f0:	d5ec      	bpl.n	80164cc <rcl_validate_topic_name+0x168>
 80164f2:	e7ad      	b.n	8016450 <rcl_validate_topic_name+0xec>
 80164f4:	2307      	movs	r3, #7
 80164f6:	6033      	str	r3, [r6, #0]
 80164f8:	2f00      	cmp	r7, #0
 80164fa:	f43f af7f 	beq.w	80163fc <rcl_validate_topic_name+0x98>
 80164fe:	603c      	str	r4, [r7, #0]
 8016500:	2000      	movs	r0, #0
 8016502:	e757      	b.n	80163b4 <rcl_validate_topic_name+0x50>
 8016504:	08018c1c 	.word	0x08018c1c

08016508 <rcutils_string_array_fini>:
 8016508:	b320      	cbz	r0, 8016554 <rcutils_string_array_fini+0x4c>
 801650a:	b570      	push	{r4, r5, r6, lr}
 801650c:	4604      	mov	r4, r0
 801650e:	6840      	ldr	r0, [r0, #4]
 8016510:	b1d8      	cbz	r0, 801654a <rcutils_string_array_fini+0x42>
 8016512:	f104 0008 	add.w	r0, r4, #8
 8016516:	f7f4 fe03 	bl	800b120 <rcutils_allocator_is_valid>
 801651a:	b1b8      	cbz	r0, 801654c <rcutils_string_array_fini+0x44>
 801651c:	6823      	ldr	r3, [r4, #0]
 801651e:	b1bb      	cbz	r3, 8016550 <rcutils_string_array_fini+0x48>
 8016520:	2500      	movs	r5, #0
 8016522:	6860      	ldr	r0, [r4, #4]
 8016524:	462e      	mov	r6, r5
 8016526:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801652a:	68e3      	ldr	r3, [r4, #12]
 801652c:	69a1      	ldr	r1, [r4, #24]
 801652e:	4798      	blx	r3
 8016530:	e9d4 3000 	ldrd	r3, r0, [r4]
 8016534:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8016538:	3501      	adds	r5, #1
 801653a:	429d      	cmp	r5, r3
 801653c:	d3f3      	bcc.n	8016526 <rcutils_string_array_fini+0x1e>
 801653e:	68e3      	ldr	r3, [r4, #12]
 8016540:	69a1      	ldr	r1, [r4, #24]
 8016542:	4798      	blx	r3
 8016544:	2000      	movs	r0, #0
 8016546:	e9c4 0000 	strd	r0, r0, [r4]
 801654a:	bd70      	pop	{r4, r5, r6, pc}
 801654c:	200b      	movs	r0, #11
 801654e:	bd70      	pop	{r4, r5, r6, pc}
 8016550:	6860      	ldr	r0, [r4, #4]
 8016552:	e7f4      	b.n	801653e <rcutils_string_array_fini+0x36>
 8016554:	200b      	movs	r0, #11
 8016556:	4770      	bx	lr

08016558 <on_status>:
 8016558:	b082      	sub	sp, #8
 801655a:	b002      	add	sp, #8
 801655c:	4770      	bx	lr
 801655e:	bf00      	nop

08016560 <on_topic>:
 8016560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016564:	4a22      	ldr	r2, [pc, #136]	; (80165f0 <on_topic+0x90>)
 8016566:	b094      	sub	sp, #80	; 0x50
 8016568:	6812      	ldr	r2, [r2, #0]
 801656a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801656c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8016570:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 8016574:	b3c2      	cbz	r2, 80165e8 <on_topic+0x88>
 8016576:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801657a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801657e:	e001      	b.n	8016584 <on_topic+0x24>
 8016580:	6852      	ldr	r2, [r2, #4]
 8016582:	b38a      	cbz	r2, 80165e8 <on_topic+0x88>
 8016584:	6894      	ldr	r4, [r2, #8]
 8016586:	8aa3      	ldrh	r3, [r4, #20]
 8016588:	428b      	cmp	r3, r1
 801658a:	d1f9      	bne.n	8016580 <on_topic+0x20>
 801658c:	7da3      	ldrb	r3, [r4, #22]
 801658e:	4283      	cmp	r3, r0
 8016590:	d1f6      	bne.n	8016580 <on_topic+0x20>
 8016592:	2248      	movs	r2, #72	; 0x48
 8016594:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8016598:	4668      	mov	r0, sp
 801659a:	f000 fdfc 	bl	8017196 <memcpy>
 801659e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80165a2:	cb0c      	ldmia	r3, {r2, r3}
 80165a4:	4620      	mov	r0, r4
 80165a6:	f7f5 f9eb 	bl	800b980 <rmw_uxrce_get_static_input_buffer_for_entity>
 80165aa:	4607      	mov	r7, r0
 80165ac:	b1e0      	cbz	r0, 80165e8 <on_topic+0x88>
 80165ae:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80165b2:	4632      	mov	r2, r6
 80165b4:	4628      	mov	r0, r5
 80165b6:	f108 0110 	add.w	r1, r8, #16
 80165ba:	f7fd ffc9 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 80165be:	b930      	cbnz	r0, 80165ce <on_topic+0x6e>
 80165c0:	480c      	ldr	r0, [pc, #48]	; (80165f4 <on_topic+0x94>)
 80165c2:	4639      	mov	r1, r7
 80165c4:	b014      	add	sp, #80	; 0x50
 80165c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80165ca:	f7fc bd89 	b.w	80130e0 <put_memory>
 80165ce:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 80165d2:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 80165d6:	f7fd feb1 	bl	801433c <rmw_uros_epoch_nanos>
 80165da:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 80165de:	2305      	movs	r3, #5
 80165e0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80165e4:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 80165e8:	b014      	add	sp, #80	; 0x50
 80165ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165ee:	bf00      	nop
 80165f0:	20010b3c 	.word	0x20010b3c
 80165f4:	20010b2c 	.word	0x20010b2c

080165f8 <on_request>:
 80165f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165fc:	4823      	ldr	r0, [pc, #140]	; (801668c <on_request+0x94>)
 80165fe:	b094      	sub	sp, #80	; 0x50
 8016600:	6800      	ldr	r0, [r0, #0]
 8016602:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8016604:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8016608:	9113      	str	r1, [sp, #76]	; 0x4c
 801660a:	2800      	cmp	r0, #0
 801660c:	d03b      	beq.n	8016686 <on_request+0x8e>
 801660e:	461d      	mov	r5, r3
 8016610:	e001      	b.n	8016616 <on_request+0x1e>
 8016612:	6840      	ldr	r0, [r0, #4]
 8016614:	b3b8      	cbz	r0, 8016686 <on_request+0x8e>
 8016616:	6884      	ldr	r4, [r0, #8]
 8016618:	8b21      	ldrh	r1, [r4, #24]
 801661a:	4291      	cmp	r1, r2
 801661c:	d1f9      	bne.n	8016612 <on_request+0x1a>
 801661e:	2248      	movs	r2, #72	; 0x48
 8016620:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8016624:	4668      	mov	r0, sp
 8016626:	f000 fdb6 	bl	8017196 <memcpy>
 801662a:	f104 0320 	add.w	r3, r4, #32
 801662e:	cb0c      	ldmia	r3, {r2, r3}
 8016630:	4620      	mov	r0, r4
 8016632:	f7f5 f9a5 	bl	800b980 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016636:	4680      	mov	r8, r0
 8016638:	b328      	cbz	r0, 8016686 <on_request+0x8e>
 801663a:	4638      	mov	r0, r7
 801663c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016640:	4632      	mov	r2, r6
 8016642:	f107 0110 	add.w	r1, r7, #16
 8016646:	f7fd ff83 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 801664a:	b930      	cbnz	r0, 801665a <on_request+0x62>
 801664c:	4810      	ldr	r0, [pc, #64]	; (8016690 <on_request+0x98>)
 801664e:	4641      	mov	r1, r8
 8016650:	b014      	add	sp, #80	; 0x50
 8016652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016656:	f7fc bd43 	b.w	80130e0 <put_memory>
 801665a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801665c:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 8016660:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8016664:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8016668:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801666c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016670:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016674:	f7fd fe62 	bl	801433c <rmw_uros_epoch_nanos>
 8016678:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 801667c:	2303      	movs	r3, #3
 801667e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016682:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8016686:	b014      	add	sp, #80	; 0x50
 8016688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801668c:	20010b0c 	.word	0x20010b0c
 8016690:	20010b2c 	.word	0x20010b2c

08016694 <on_reply>:
 8016694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016698:	4821      	ldr	r0, [pc, #132]	; (8016720 <on_reply+0x8c>)
 801669a:	b094      	sub	sp, #80	; 0x50
 801669c:	6800      	ldr	r0, [r0, #0]
 801669e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80166a0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 80166a4:	9113      	str	r1, [sp, #76]	; 0x4c
 80166a6:	b3b8      	cbz	r0, 8016718 <on_reply+0x84>
 80166a8:	461d      	mov	r5, r3
 80166aa:	e001      	b.n	80166b0 <on_reply+0x1c>
 80166ac:	6840      	ldr	r0, [r0, #4]
 80166ae:	b398      	cbz	r0, 8016718 <on_reply+0x84>
 80166b0:	6884      	ldr	r4, [r0, #8]
 80166b2:	8b21      	ldrh	r1, [r4, #24]
 80166b4:	4291      	cmp	r1, r2
 80166b6:	d1f9      	bne.n	80166ac <on_reply+0x18>
 80166b8:	2248      	movs	r2, #72	; 0x48
 80166ba:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80166be:	4668      	mov	r0, sp
 80166c0:	f000 fd69 	bl	8017196 <memcpy>
 80166c4:	f104 0320 	add.w	r3, r4, #32
 80166c8:	cb0c      	ldmia	r3, {r2, r3}
 80166ca:	4620      	mov	r0, r4
 80166cc:	f7f5 f958 	bl	800b980 <rmw_uxrce_get_static_input_buffer_for_entity>
 80166d0:	4680      	mov	r8, r0
 80166d2:	b308      	cbz	r0, 8016718 <on_reply+0x84>
 80166d4:	4638      	mov	r0, r7
 80166d6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80166da:	4632      	mov	r2, r6
 80166dc:	f107 0110 	add.w	r1, r7, #16
 80166e0:	f7fd ff36 	bl	8014550 <ucdr_deserialize_array_uint8_t>
 80166e4:	b930      	cbnz	r0, 80166f4 <on_reply+0x60>
 80166e6:	480f      	ldr	r0, [pc, #60]	; (8016724 <on_reply+0x90>)
 80166e8:	4641      	mov	r1, r8
 80166ea:	b014      	add	sp, #80	; 0x50
 80166ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80166f0:	f7fc bcf6 	b.w	80130e0 <put_memory>
 80166f4:	2200      	movs	r2, #0
 80166f6:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 80166fa:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 80166fe:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8016702:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 8016706:	f7fd fe19 	bl	801433c <rmw_uros_epoch_nanos>
 801670a:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 801670e:	2304      	movs	r3, #4
 8016710:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016714:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8016718:	b014      	add	sp, #80	; 0x50
 801671a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801671e:	bf00      	nop
 8016720:	2000c220 	.word	0x2000c220
 8016724:	20010b2c 	.word	0x20010b2c

08016728 <rmw_create_guard_condition>:
 8016728:	b538      	push	{r3, r4, r5, lr}
 801672a:	4605      	mov	r5, r0
 801672c:	4807      	ldr	r0, [pc, #28]	; (801674c <rmw_create_guard_condition+0x24>)
 801672e:	f7fc fcc7 	bl	80130c0 <get_memory>
 8016732:	b148      	cbz	r0, 8016748 <rmw_create_guard_condition+0x20>
 8016734:	6884      	ldr	r4, [r0, #8]
 8016736:	2300      	movs	r3, #0
 8016738:	7423      	strb	r3, [r4, #16]
 801673a:	61e5      	str	r5, [r4, #28]
 801673c:	f7fc fd28 	bl	8013190 <rmw_get_implementation_identifier>
 8016740:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016744:	f104 0014 	add.w	r0, r4, #20
 8016748:	bd38      	pop	{r3, r4, r5, pc}
 801674a:	bf00      	nop
 801674c:	20010acc 	.word	0x20010acc

08016750 <rmw_destroy_guard_condition>:
 8016750:	b508      	push	{r3, lr}
 8016752:	4b08      	ldr	r3, [pc, #32]	; (8016774 <rmw_destroy_guard_condition+0x24>)
 8016754:	6819      	ldr	r1, [r3, #0]
 8016756:	b911      	cbnz	r1, 801675e <rmw_destroy_guard_condition+0xe>
 8016758:	e00a      	b.n	8016770 <rmw_destroy_guard_condition+0x20>
 801675a:	6849      	ldr	r1, [r1, #4]
 801675c:	b141      	cbz	r1, 8016770 <rmw_destroy_guard_condition+0x20>
 801675e:	688b      	ldr	r3, [r1, #8]
 8016760:	3314      	adds	r3, #20
 8016762:	4298      	cmp	r0, r3
 8016764:	d1f9      	bne.n	801675a <rmw_destroy_guard_condition+0xa>
 8016766:	4803      	ldr	r0, [pc, #12]	; (8016774 <rmw_destroy_guard_condition+0x24>)
 8016768:	f7fc fcba 	bl	80130e0 <put_memory>
 801676c:	2000      	movs	r0, #0
 801676e:	bd08      	pop	{r3, pc}
 8016770:	2001      	movs	r0, #1
 8016772:	bd08      	pop	{r3, pc}
 8016774:	20010acc 	.word	0x20010acc

08016778 <calloc>:
 8016778:	4b02      	ldr	r3, [pc, #8]	; (8016784 <calloc+0xc>)
 801677a:	460a      	mov	r2, r1
 801677c:	4601      	mov	r1, r0
 801677e:	6818      	ldr	r0, [r3, #0]
 8016780:	f000 b802 	b.w	8016788 <_calloc_r>
 8016784:	2000010c 	.word	0x2000010c

08016788 <_calloc_r>:
 8016788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801678a:	fba1 2402 	umull	r2, r4, r1, r2
 801678e:	b94c      	cbnz	r4, 80167a4 <_calloc_r+0x1c>
 8016790:	4611      	mov	r1, r2
 8016792:	9201      	str	r2, [sp, #4]
 8016794:	f000 f886 	bl	80168a4 <_malloc_r>
 8016798:	9a01      	ldr	r2, [sp, #4]
 801679a:	4605      	mov	r5, r0
 801679c:	b930      	cbnz	r0, 80167ac <_calloc_r+0x24>
 801679e:	4628      	mov	r0, r5
 80167a0:	b003      	add	sp, #12
 80167a2:	bd30      	pop	{r4, r5, pc}
 80167a4:	220c      	movs	r2, #12
 80167a6:	6002      	str	r2, [r0, #0]
 80167a8:	2500      	movs	r5, #0
 80167aa:	e7f8      	b.n	801679e <_calloc_r+0x16>
 80167ac:	4621      	mov	r1, r4
 80167ae:	f000 fbd3 	bl	8016f58 <memset>
 80167b2:	e7f4      	b.n	801679e <_calloc_r+0x16>

080167b4 <getenv>:
 80167b4:	b507      	push	{r0, r1, r2, lr}
 80167b6:	4b04      	ldr	r3, [pc, #16]	; (80167c8 <getenv+0x14>)
 80167b8:	4601      	mov	r1, r0
 80167ba:	aa01      	add	r2, sp, #4
 80167bc:	6818      	ldr	r0, [r3, #0]
 80167be:	f000 f805 	bl	80167cc <_findenv_r>
 80167c2:	b003      	add	sp, #12
 80167c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80167c8:	2000010c 	.word	0x2000010c

080167cc <_findenv_r>:
 80167cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167d0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8016840 <_findenv_r+0x74>
 80167d4:	4607      	mov	r7, r0
 80167d6:	4689      	mov	r9, r1
 80167d8:	4616      	mov	r6, r2
 80167da:	f000 fd09 	bl	80171f0 <__env_lock>
 80167de:	f8da 4000 	ldr.w	r4, [sl]
 80167e2:	b134      	cbz	r4, 80167f2 <_findenv_r+0x26>
 80167e4:	464b      	mov	r3, r9
 80167e6:	4698      	mov	r8, r3
 80167e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80167ec:	b13a      	cbz	r2, 80167fe <_findenv_r+0x32>
 80167ee:	2a3d      	cmp	r2, #61	; 0x3d
 80167f0:	d1f9      	bne.n	80167e6 <_findenv_r+0x1a>
 80167f2:	4638      	mov	r0, r7
 80167f4:	f000 fd02 	bl	80171fc <__env_unlock>
 80167f8:	2000      	movs	r0, #0
 80167fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167fe:	eba8 0809 	sub.w	r8, r8, r9
 8016802:	46a3      	mov	fp, r4
 8016804:	f854 0b04 	ldr.w	r0, [r4], #4
 8016808:	2800      	cmp	r0, #0
 801680a:	d0f2      	beq.n	80167f2 <_findenv_r+0x26>
 801680c:	4642      	mov	r2, r8
 801680e:	4649      	mov	r1, r9
 8016810:	f000 fbb7 	bl	8016f82 <strncmp>
 8016814:	2800      	cmp	r0, #0
 8016816:	d1f4      	bne.n	8016802 <_findenv_r+0x36>
 8016818:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801681c:	eb03 0508 	add.w	r5, r3, r8
 8016820:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016824:	2b3d      	cmp	r3, #61	; 0x3d
 8016826:	d1ec      	bne.n	8016802 <_findenv_r+0x36>
 8016828:	f8da 3000 	ldr.w	r3, [sl]
 801682c:	ebab 0303 	sub.w	r3, fp, r3
 8016830:	109b      	asrs	r3, r3, #2
 8016832:	4638      	mov	r0, r7
 8016834:	6033      	str	r3, [r6, #0]
 8016836:	f000 fce1 	bl	80171fc <__env_unlock>
 801683a:	1c68      	adds	r0, r5, #1
 801683c:	e7dd      	b.n	80167fa <_findenv_r+0x2e>
 801683e:	bf00      	nop
 8016840:	20000000 	.word	0x20000000

08016844 <malloc>:
 8016844:	4b02      	ldr	r3, [pc, #8]	; (8016850 <malloc+0xc>)
 8016846:	4601      	mov	r1, r0
 8016848:	6818      	ldr	r0, [r3, #0]
 801684a:	f000 b82b 	b.w	80168a4 <_malloc_r>
 801684e:	bf00      	nop
 8016850:	2000010c 	.word	0x2000010c

08016854 <free>:
 8016854:	4b02      	ldr	r3, [pc, #8]	; (8016860 <free+0xc>)
 8016856:	4601      	mov	r1, r0
 8016858:	6818      	ldr	r0, [r3, #0]
 801685a:	f000 bcd5 	b.w	8017208 <_free_r>
 801685e:	bf00      	nop
 8016860:	2000010c 	.word	0x2000010c

08016864 <sbrk_aligned>:
 8016864:	b570      	push	{r4, r5, r6, lr}
 8016866:	4e0e      	ldr	r6, [pc, #56]	; (80168a0 <sbrk_aligned+0x3c>)
 8016868:	460c      	mov	r4, r1
 801686a:	6831      	ldr	r1, [r6, #0]
 801686c:	4605      	mov	r5, r0
 801686e:	b911      	cbnz	r1, 8016876 <sbrk_aligned+0x12>
 8016870:	f000 fc3a 	bl	80170e8 <_sbrk_r>
 8016874:	6030      	str	r0, [r6, #0]
 8016876:	4621      	mov	r1, r4
 8016878:	4628      	mov	r0, r5
 801687a:	f000 fc35 	bl	80170e8 <_sbrk_r>
 801687e:	1c43      	adds	r3, r0, #1
 8016880:	d00a      	beq.n	8016898 <sbrk_aligned+0x34>
 8016882:	1cc4      	adds	r4, r0, #3
 8016884:	f024 0403 	bic.w	r4, r4, #3
 8016888:	42a0      	cmp	r0, r4
 801688a:	d007      	beq.n	801689c <sbrk_aligned+0x38>
 801688c:	1a21      	subs	r1, r4, r0
 801688e:	4628      	mov	r0, r5
 8016890:	f000 fc2a 	bl	80170e8 <_sbrk_r>
 8016894:	3001      	adds	r0, #1
 8016896:	d101      	bne.n	801689c <sbrk_aligned+0x38>
 8016898:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801689c:	4620      	mov	r0, r4
 801689e:	bd70      	pop	{r4, r5, r6, pc}
 80168a0:	20010cf4 	.word	0x20010cf4

080168a4 <_malloc_r>:
 80168a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168a8:	1ccd      	adds	r5, r1, #3
 80168aa:	f025 0503 	bic.w	r5, r5, #3
 80168ae:	3508      	adds	r5, #8
 80168b0:	2d0c      	cmp	r5, #12
 80168b2:	bf38      	it	cc
 80168b4:	250c      	movcc	r5, #12
 80168b6:	2d00      	cmp	r5, #0
 80168b8:	4607      	mov	r7, r0
 80168ba:	db01      	blt.n	80168c0 <_malloc_r+0x1c>
 80168bc:	42a9      	cmp	r1, r5
 80168be:	d905      	bls.n	80168cc <_malloc_r+0x28>
 80168c0:	230c      	movs	r3, #12
 80168c2:	603b      	str	r3, [r7, #0]
 80168c4:	2600      	movs	r6, #0
 80168c6:	4630      	mov	r0, r6
 80168c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80169a0 <_malloc_r+0xfc>
 80168d0:	f000 f868 	bl	80169a4 <__malloc_lock>
 80168d4:	f8d8 3000 	ldr.w	r3, [r8]
 80168d8:	461c      	mov	r4, r3
 80168da:	bb5c      	cbnz	r4, 8016934 <_malloc_r+0x90>
 80168dc:	4629      	mov	r1, r5
 80168de:	4638      	mov	r0, r7
 80168e0:	f7ff ffc0 	bl	8016864 <sbrk_aligned>
 80168e4:	1c43      	adds	r3, r0, #1
 80168e6:	4604      	mov	r4, r0
 80168e8:	d155      	bne.n	8016996 <_malloc_r+0xf2>
 80168ea:	f8d8 4000 	ldr.w	r4, [r8]
 80168ee:	4626      	mov	r6, r4
 80168f0:	2e00      	cmp	r6, #0
 80168f2:	d145      	bne.n	8016980 <_malloc_r+0xdc>
 80168f4:	2c00      	cmp	r4, #0
 80168f6:	d048      	beq.n	801698a <_malloc_r+0xe6>
 80168f8:	6823      	ldr	r3, [r4, #0]
 80168fa:	4631      	mov	r1, r6
 80168fc:	4638      	mov	r0, r7
 80168fe:	eb04 0903 	add.w	r9, r4, r3
 8016902:	f000 fbf1 	bl	80170e8 <_sbrk_r>
 8016906:	4581      	cmp	r9, r0
 8016908:	d13f      	bne.n	801698a <_malloc_r+0xe6>
 801690a:	6821      	ldr	r1, [r4, #0]
 801690c:	1a6d      	subs	r5, r5, r1
 801690e:	4629      	mov	r1, r5
 8016910:	4638      	mov	r0, r7
 8016912:	f7ff ffa7 	bl	8016864 <sbrk_aligned>
 8016916:	3001      	adds	r0, #1
 8016918:	d037      	beq.n	801698a <_malloc_r+0xe6>
 801691a:	6823      	ldr	r3, [r4, #0]
 801691c:	442b      	add	r3, r5
 801691e:	6023      	str	r3, [r4, #0]
 8016920:	f8d8 3000 	ldr.w	r3, [r8]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d038      	beq.n	801699a <_malloc_r+0xf6>
 8016928:	685a      	ldr	r2, [r3, #4]
 801692a:	42a2      	cmp	r2, r4
 801692c:	d12b      	bne.n	8016986 <_malloc_r+0xe2>
 801692e:	2200      	movs	r2, #0
 8016930:	605a      	str	r2, [r3, #4]
 8016932:	e00f      	b.n	8016954 <_malloc_r+0xb0>
 8016934:	6822      	ldr	r2, [r4, #0]
 8016936:	1b52      	subs	r2, r2, r5
 8016938:	d41f      	bmi.n	801697a <_malloc_r+0xd6>
 801693a:	2a0b      	cmp	r2, #11
 801693c:	d917      	bls.n	801696e <_malloc_r+0xca>
 801693e:	1961      	adds	r1, r4, r5
 8016940:	42a3      	cmp	r3, r4
 8016942:	6025      	str	r5, [r4, #0]
 8016944:	bf18      	it	ne
 8016946:	6059      	strne	r1, [r3, #4]
 8016948:	6863      	ldr	r3, [r4, #4]
 801694a:	bf08      	it	eq
 801694c:	f8c8 1000 	streq.w	r1, [r8]
 8016950:	5162      	str	r2, [r4, r5]
 8016952:	604b      	str	r3, [r1, #4]
 8016954:	4638      	mov	r0, r7
 8016956:	f104 060b 	add.w	r6, r4, #11
 801695a:	f000 f829 	bl	80169b0 <__malloc_unlock>
 801695e:	f026 0607 	bic.w	r6, r6, #7
 8016962:	1d23      	adds	r3, r4, #4
 8016964:	1af2      	subs	r2, r6, r3
 8016966:	d0ae      	beq.n	80168c6 <_malloc_r+0x22>
 8016968:	1b9b      	subs	r3, r3, r6
 801696a:	50a3      	str	r3, [r4, r2]
 801696c:	e7ab      	b.n	80168c6 <_malloc_r+0x22>
 801696e:	42a3      	cmp	r3, r4
 8016970:	6862      	ldr	r2, [r4, #4]
 8016972:	d1dd      	bne.n	8016930 <_malloc_r+0x8c>
 8016974:	f8c8 2000 	str.w	r2, [r8]
 8016978:	e7ec      	b.n	8016954 <_malloc_r+0xb0>
 801697a:	4623      	mov	r3, r4
 801697c:	6864      	ldr	r4, [r4, #4]
 801697e:	e7ac      	b.n	80168da <_malloc_r+0x36>
 8016980:	4634      	mov	r4, r6
 8016982:	6876      	ldr	r6, [r6, #4]
 8016984:	e7b4      	b.n	80168f0 <_malloc_r+0x4c>
 8016986:	4613      	mov	r3, r2
 8016988:	e7cc      	b.n	8016924 <_malloc_r+0x80>
 801698a:	230c      	movs	r3, #12
 801698c:	603b      	str	r3, [r7, #0]
 801698e:	4638      	mov	r0, r7
 8016990:	f000 f80e 	bl	80169b0 <__malloc_unlock>
 8016994:	e797      	b.n	80168c6 <_malloc_r+0x22>
 8016996:	6025      	str	r5, [r4, #0]
 8016998:	e7dc      	b.n	8016954 <_malloc_r+0xb0>
 801699a:	605b      	str	r3, [r3, #4]
 801699c:	deff      	udf	#255	; 0xff
 801699e:	bf00      	nop
 80169a0:	20010cf0 	.word	0x20010cf0

080169a4 <__malloc_lock>:
 80169a4:	4801      	ldr	r0, [pc, #4]	; (80169ac <__malloc_lock+0x8>)
 80169a6:	f000 bbec 	b.w	8017182 <__retarget_lock_acquire_recursive>
 80169aa:	bf00      	nop
 80169ac:	20010e39 	.word	0x20010e39

080169b0 <__malloc_unlock>:
 80169b0:	4801      	ldr	r0, [pc, #4]	; (80169b8 <__malloc_unlock+0x8>)
 80169b2:	f000 bbe7 	b.w	8017184 <__retarget_lock_release_recursive>
 80169b6:	bf00      	nop
 80169b8:	20010e39 	.word	0x20010e39

080169bc <srand>:
 80169bc:	b538      	push	{r3, r4, r5, lr}
 80169be:	4b10      	ldr	r3, [pc, #64]	; (8016a00 <srand+0x44>)
 80169c0:	681d      	ldr	r5, [r3, #0]
 80169c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80169c4:	4604      	mov	r4, r0
 80169c6:	b9b3      	cbnz	r3, 80169f6 <srand+0x3a>
 80169c8:	2018      	movs	r0, #24
 80169ca:	f7ff ff3b 	bl	8016844 <malloc>
 80169ce:	4602      	mov	r2, r0
 80169d0:	6328      	str	r0, [r5, #48]	; 0x30
 80169d2:	b920      	cbnz	r0, 80169de <srand+0x22>
 80169d4:	4b0b      	ldr	r3, [pc, #44]	; (8016a04 <srand+0x48>)
 80169d6:	480c      	ldr	r0, [pc, #48]	; (8016a08 <srand+0x4c>)
 80169d8:	2146      	movs	r1, #70	; 0x46
 80169da:	f000 fbeb 	bl	80171b4 <__assert_func>
 80169de:	490b      	ldr	r1, [pc, #44]	; (8016a0c <srand+0x50>)
 80169e0:	4b0b      	ldr	r3, [pc, #44]	; (8016a10 <srand+0x54>)
 80169e2:	e9c0 1300 	strd	r1, r3, [r0]
 80169e6:	4b0b      	ldr	r3, [pc, #44]	; (8016a14 <srand+0x58>)
 80169e8:	6083      	str	r3, [r0, #8]
 80169ea:	230b      	movs	r3, #11
 80169ec:	8183      	strh	r3, [r0, #12]
 80169ee:	2100      	movs	r1, #0
 80169f0:	2001      	movs	r0, #1
 80169f2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80169f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80169f8:	2200      	movs	r2, #0
 80169fa:	611c      	str	r4, [r3, #16]
 80169fc:	615a      	str	r2, [r3, #20]
 80169fe:	bd38      	pop	{r3, r4, r5, pc}
 8016a00:	2000010c 	.word	0x2000010c
 8016a04:	08018bac 	.word	0x08018bac
 8016a08:	08018bc3 	.word	0x08018bc3
 8016a0c:	abcd330e 	.word	0xabcd330e
 8016a10:	e66d1234 	.word	0xe66d1234
 8016a14:	0005deec 	.word	0x0005deec

08016a18 <rand>:
 8016a18:	4b16      	ldr	r3, [pc, #88]	; (8016a74 <rand+0x5c>)
 8016a1a:	b510      	push	{r4, lr}
 8016a1c:	681c      	ldr	r4, [r3, #0]
 8016a1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016a20:	b9b3      	cbnz	r3, 8016a50 <rand+0x38>
 8016a22:	2018      	movs	r0, #24
 8016a24:	f7ff ff0e 	bl	8016844 <malloc>
 8016a28:	4602      	mov	r2, r0
 8016a2a:	6320      	str	r0, [r4, #48]	; 0x30
 8016a2c:	b920      	cbnz	r0, 8016a38 <rand+0x20>
 8016a2e:	4b12      	ldr	r3, [pc, #72]	; (8016a78 <rand+0x60>)
 8016a30:	4812      	ldr	r0, [pc, #72]	; (8016a7c <rand+0x64>)
 8016a32:	2152      	movs	r1, #82	; 0x52
 8016a34:	f000 fbbe 	bl	80171b4 <__assert_func>
 8016a38:	4911      	ldr	r1, [pc, #68]	; (8016a80 <rand+0x68>)
 8016a3a:	4b12      	ldr	r3, [pc, #72]	; (8016a84 <rand+0x6c>)
 8016a3c:	e9c0 1300 	strd	r1, r3, [r0]
 8016a40:	4b11      	ldr	r3, [pc, #68]	; (8016a88 <rand+0x70>)
 8016a42:	6083      	str	r3, [r0, #8]
 8016a44:	230b      	movs	r3, #11
 8016a46:	8183      	strh	r3, [r0, #12]
 8016a48:	2100      	movs	r1, #0
 8016a4a:	2001      	movs	r0, #1
 8016a4c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016a50:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016a52:	480e      	ldr	r0, [pc, #56]	; (8016a8c <rand+0x74>)
 8016a54:	690b      	ldr	r3, [r1, #16]
 8016a56:	694c      	ldr	r4, [r1, #20]
 8016a58:	4a0d      	ldr	r2, [pc, #52]	; (8016a90 <rand+0x78>)
 8016a5a:	4358      	muls	r0, r3
 8016a5c:	fb02 0004 	mla	r0, r2, r4, r0
 8016a60:	fba3 3202 	umull	r3, r2, r3, r2
 8016a64:	3301      	adds	r3, #1
 8016a66:	eb40 0002 	adc.w	r0, r0, r2
 8016a6a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016a6e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016a72:	bd10      	pop	{r4, pc}
 8016a74:	2000010c 	.word	0x2000010c
 8016a78:	08018bac 	.word	0x08018bac
 8016a7c:	08018bc3 	.word	0x08018bc3
 8016a80:	abcd330e 	.word	0xabcd330e
 8016a84:	e66d1234 	.word	0xe66d1234
 8016a88:	0005deec 	.word	0x0005deec
 8016a8c:	5851f42d 	.word	0x5851f42d
 8016a90:	4c957f2d 	.word	0x4c957f2d

08016a94 <realloc>:
 8016a94:	4b02      	ldr	r3, [pc, #8]	; (8016aa0 <realloc+0xc>)
 8016a96:	460a      	mov	r2, r1
 8016a98:	4601      	mov	r1, r0
 8016a9a:	6818      	ldr	r0, [r3, #0]
 8016a9c:	f000 b802 	b.w	8016aa4 <_realloc_r>
 8016aa0:	2000010c 	.word	0x2000010c

08016aa4 <_realloc_r>:
 8016aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016aa8:	4680      	mov	r8, r0
 8016aaa:	4614      	mov	r4, r2
 8016aac:	460e      	mov	r6, r1
 8016aae:	b921      	cbnz	r1, 8016aba <_realloc_r+0x16>
 8016ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ab4:	4611      	mov	r1, r2
 8016ab6:	f7ff bef5 	b.w	80168a4 <_malloc_r>
 8016aba:	b92a      	cbnz	r2, 8016ac8 <_realloc_r+0x24>
 8016abc:	f000 fba4 	bl	8017208 <_free_r>
 8016ac0:	4625      	mov	r5, r4
 8016ac2:	4628      	mov	r0, r5
 8016ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ac8:	f000 fbea 	bl	80172a0 <_malloc_usable_size_r>
 8016acc:	4284      	cmp	r4, r0
 8016ace:	4607      	mov	r7, r0
 8016ad0:	d802      	bhi.n	8016ad8 <_realloc_r+0x34>
 8016ad2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016ad6:	d812      	bhi.n	8016afe <_realloc_r+0x5a>
 8016ad8:	4621      	mov	r1, r4
 8016ada:	4640      	mov	r0, r8
 8016adc:	f7ff fee2 	bl	80168a4 <_malloc_r>
 8016ae0:	4605      	mov	r5, r0
 8016ae2:	2800      	cmp	r0, #0
 8016ae4:	d0ed      	beq.n	8016ac2 <_realloc_r+0x1e>
 8016ae6:	42bc      	cmp	r4, r7
 8016ae8:	4622      	mov	r2, r4
 8016aea:	4631      	mov	r1, r6
 8016aec:	bf28      	it	cs
 8016aee:	463a      	movcs	r2, r7
 8016af0:	f000 fb51 	bl	8017196 <memcpy>
 8016af4:	4631      	mov	r1, r6
 8016af6:	4640      	mov	r0, r8
 8016af8:	f000 fb86 	bl	8017208 <_free_r>
 8016afc:	e7e1      	b.n	8016ac2 <_realloc_r+0x1e>
 8016afe:	4635      	mov	r5, r6
 8016b00:	e7df      	b.n	8016ac2 <_realloc_r+0x1e>
	...

08016b04 <_strtoul_l.constprop.0>:
 8016b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b08:	4f36      	ldr	r7, [pc, #216]	; (8016be4 <_strtoul_l.constprop.0+0xe0>)
 8016b0a:	4686      	mov	lr, r0
 8016b0c:	460d      	mov	r5, r1
 8016b0e:	4628      	mov	r0, r5
 8016b10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016b14:	5d3e      	ldrb	r6, [r7, r4]
 8016b16:	f016 0608 	ands.w	r6, r6, #8
 8016b1a:	d1f8      	bne.n	8016b0e <_strtoul_l.constprop.0+0xa>
 8016b1c:	2c2d      	cmp	r4, #45	; 0x2d
 8016b1e:	d130      	bne.n	8016b82 <_strtoul_l.constprop.0+0x7e>
 8016b20:	782c      	ldrb	r4, [r5, #0]
 8016b22:	2601      	movs	r6, #1
 8016b24:	1c85      	adds	r5, r0, #2
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d057      	beq.n	8016bda <_strtoul_l.constprop.0+0xd6>
 8016b2a:	2b10      	cmp	r3, #16
 8016b2c:	d109      	bne.n	8016b42 <_strtoul_l.constprop.0+0x3e>
 8016b2e:	2c30      	cmp	r4, #48	; 0x30
 8016b30:	d107      	bne.n	8016b42 <_strtoul_l.constprop.0+0x3e>
 8016b32:	7828      	ldrb	r0, [r5, #0]
 8016b34:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8016b38:	2858      	cmp	r0, #88	; 0x58
 8016b3a:	d149      	bne.n	8016bd0 <_strtoul_l.constprop.0+0xcc>
 8016b3c:	786c      	ldrb	r4, [r5, #1]
 8016b3e:	2310      	movs	r3, #16
 8016b40:	3502      	adds	r5, #2
 8016b42:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8016b46:	2700      	movs	r7, #0
 8016b48:	fbb8 f8f3 	udiv	r8, r8, r3
 8016b4c:	fb03 f908 	mul.w	r9, r3, r8
 8016b50:	ea6f 0909 	mvn.w	r9, r9
 8016b54:	4638      	mov	r0, r7
 8016b56:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016b5a:	f1bc 0f09 	cmp.w	ip, #9
 8016b5e:	d815      	bhi.n	8016b8c <_strtoul_l.constprop.0+0x88>
 8016b60:	4664      	mov	r4, ip
 8016b62:	42a3      	cmp	r3, r4
 8016b64:	dd23      	ble.n	8016bae <_strtoul_l.constprop.0+0xaa>
 8016b66:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8016b6a:	d007      	beq.n	8016b7c <_strtoul_l.constprop.0+0x78>
 8016b6c:	4580      	cmp	r8, r0
 8016b6e:	d31b      	bcc.n	8016ba8 <_strtoul_l.constprop.0+0xa4>
 8016b70:	d101      	bne.n	8016b76 <_strtoul_l.constprop.0+0x72>
 8016b72:	45a1      	cmp	r9, r4
 8016b74:	db18      	blt.n	8016ba8 <_strtoul_l.constprop.0+0xa4>
 8016b76:	fb00 4003 	mla	r0, r0, r3, r4
 8016b7a:	2701      	movs	r7, #1
 8016b7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016b80:	e7e9      	b.n	8016b56 <_strtoul_l.constprop.0+0x52>
 8016b82:	2c2b      	cmp	r4, #43	; 0x2b
 8016b84:	bf04      	itt	eq
 8016b86:	782c      	ldrbeq	r4, [r5, #0]
 8016b88:	1c85      	addeq	r5, r0, #2
 8016b8a:	e7cc      	b.n	8016b26 <_strtoul_l.constprop.0+0x22>
 8016b8c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016b90:	f1bc 0f19 	cmp.w	ip, #25
 8016b94:	d801      	bhi.n	8016b9a <_strtoul_l.constprop.0+0x96>
 8016b96:	3c37      	subs	r4, #55	; 0x37
 8016b98:	e7e3      	b.n	8016b62 <_strtoul_l.constprop.0+0x5e>
 8016b9a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016b9e:	f1bc 0f19 	cmp.w	ip, #25
 8016ba2:	d804      	bhi.n	8016bae <_strtoul_l.constprop.0+0xaa>
 8016ba4:	3c57      	subs	r4, #87	; 0x57
 8016ba6:	e7dc      	b.n	8016b62 <_strtoul_l.constprop.0+0x5e>
 8016ba8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016bac:	e7e6      	b.n	8016b7c <_strtoul_l.constprop.0+0x78>
 8016bae:	1c7b      	adds	r3, r7, #1
 8016bb0:	d106      	bne.n	8016bc0 <_strtoul_l.constprop.0+0xbc>
 8016bb2:	2322      	movs	r3, #34	; 0x22
 8016bb4:	f8ce 3000 	str.w	r3, [lr]
 8016bb8:	4638      	mov	r0, r7
 8016bba:	b932      	cbnz	r2, 8016bca <_strtoul_l.constprop.0+0xc6>
 8016bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016bc0:	b106      	cbz	r6, 8016bc4 <_strtoul_l.constprop.0+0xc0>
 8016bc2:	4240      	negs	r0, r0
 8016bc4:	2a00      	cmp	r2, #0
 8016bc6:	d0f9      	beq.n	8016bbc <_strtoul_l.constprop.0+0xb8>
 8016bc8:	b107      	cbz	r7, 8016bcc <_strtoul_l.constprop.0+0xc8>
 8016bca:	1e69      	subs	r1, r5, #1
 8016bcc:	6011      	str	r1, [r2, #0]
 8016bce:	e7f5      	b.n	8016bbc <_strtoul_l.constprop.0+0xb8>
 8016bd0:	2430      	movs	r4, #48	; 0x30
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d1b5      	bne.n	8016b42 <_strtoul_l.constprop.0+0x3e>
 8016bd6:	2308      	movs	r3, #8
 8016bd8:	e7b3      	b.n	8016b42 <_strtoul_l.constprop.0+0x3e>
 8016bda:	2c30      	cmp	r4, #48	; 0x30
 8016bdc:	d0a9      	beq.n	8016b32 <_strtoul_l.constprop.0+0x2e>
 8016bde:	230a      	movs	r3, #10
 8016be0:	e7af      	b.n	8016b42 <_strtoul_l.constprop.0+0x3e>
 8016be2:	bf00      	nop
 8016be4:	08018c1c 	.word	0x08018c1c

08016be8 <strtoul>:
 8016be8:	4613      	mov	r3, r2
 8016bea:	460a      	mov	r2, r1
 8016bec:	4601      	mov	r1, r0
 8016bee:	4802      	ldr	r0, [pc, #8]	; (8016bf8 <strtoul+0x10>)
 8016bf0:	6800      	ldr	r0, [r0, #0]
 8016bf2:	f7ff bf87 	b.w	8016b04 <_strtoul_l.constprop.0>
 8016bf6:	bf00      	nop
 8016bf8:	2000010c 	.word	0x2000010c

08016bfc <std>:
 8016bfc:	2300      	movs	r3, #0
 8016bfe:	b510      	push	{r4, lr}
 8016c00:	4604      	mov	r4, r0
 8016c02:	e9c0 3300 	strd	r3, r3, [r0]
 8016c06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016c0a:	6083      	str	r3, [r0, #8]
 8016c0c:	8181      	strh	r1, [r0, #12]
 8016c0e:	6643      	str	r3, [r0, #100]	; 0x64
 8016c10:	81c2      	strh	r2, [r0, #14]
 8016c12:	6183      	str	r3, [r0, #24]
 8016c14:	4619      	mov	r1, r3
 8016c16:	2208      	movs	r2, #8
 8016c18:	305c      	adds	r0, #92	; 0x5c
 8016c1a:	f000 f99d 	bl	8016f58 <memset>
 8016c1e:	4b0d      	ldr	r3, [pc, #52]	; (8016c54 <std+0x58>)
 8016c20:	6263      	str	r3, [r4, #36]	; 0x24
 8016c22:	4b0d      	ldr	r3, [pc, #52]	; (8016c58 <std+0x5c>)
 8016c24:	62a3      	str	r3, [r4, #40]	; 0x28
 8016c26:	4b0d      	ldr	r3, [pc, #52]	; (8016c5c <std+0x60>)
 8016c28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016c2a:	4b0d      	ldr	r3, [pc, #52]	; (8016c60 <std+0x64>)
 8016c2c:	6323      	str	r3, [r4, #48]	; 0x30
 8016c2e:	4b0d      	ldr	r3, [pc, #52]	; (8016c64 <std+0x68>)
 8016c30:	6224      	str	r4, [r4, #32]
 8016c32:	429c      	cmp	r4, r3
 8016c34:	d006      	beq.n	8016c44 <std+0x48>
 8016c36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8016c3a:	4294      	cmp	r4, r2
 8016c3c:	d002      	beq.n	8016c44 <std+0x48>
 8016c3e:	33d0      	adds	r3, #208	; 0xd0
 8016c40:	429c      	cmp	r4, r3
 8016c42:	d105      	bne.n	8016c50 <std+0x54>
 8016c44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c4c:	f000 ba98 	b.w	8017180 <__retarget_lock_init_recursive>
 8016c50:	bd10      	pop	{r4, pc}
 8016c52:	bf00      	nop
 8016c54:	08016e0d 	.word	0x08016e0d
 8016c58:	08016e2f 	.word	0x08016e2f
 8016c5c:	08016e67 	.word	0x08016e67
 8016c60:	08016e8b 	.word	0x08016e8b
 8016c64:	20010cf8 	.word	0x20010cf8

08016c68 <stdio_exit_handler>:
 8016c68:	4a02      	ldr	r2, [pc, #8]	; (8016c74 <stdio_exit_handler+0xc>)
 8016c6a:	4903      	ldr	r1, [pc, #12]	; (8016c78 <stdio_exit_handler+0x10>)
 8016c6c:	4803      	ldr	r0, [pc, #12]	; (8016c7c <stdio_exit_handler+0x14>)
 8016c6e:	f000 b869 	b.w	8016d44 <_fwalk_sglue>
 8016c72:	bf00      	nop
 8016c74:	200000b4 	.word	0x200000b4
 8016c78:	08017c15 	.word	0x08017c15
 8016c7c:	200000c0 	.word	0x200000c0

08016c80 <cleanup_stdio>:
 8016c80:	6841      	ldr	r1, [r0, #4]
 8016c82:	4b0c      	ldr	r3, [pc, #48]	; (8016cb4 <cleanup_stdio+0x34>)
 8016c84:	4299      	cmp	r1, r3
 8016c86:	b510      	push	{r4, lr}
 8016c88:	4604      	mov	r4, r0
 8016c8a:	d001      	beq.n	8016c90 <cleanup_stdio+0x10>
 8016c8c:	f000 ffc2 	bl	8017c14 <_fflush_r>
 8016c90:	68a1      	ldr	r1, [r4, #8]
 8016c92:	4b09      	ldr	r3, [pc, #36]	; (8016cb8 <cleanup_stdio+0x38>)
 8016c94:	4299      	cmp	r1, r3
 8016c96:	d002      	beq.n	8016c9e <cleanup_stdio+0x1e>
 8016c98:	4620      	mov	r0, r4
 8016c9a:	f000 ffbb 	bl	8017c14 <_fflush_r>
 8016c9e:	68e1      	ldr	r1, [r4, #12]
 8016ca0:	4b06      	ldr	r3, [pc, #24]	; (8016cbc <cleanup_stdio+0x3c>)
 8016ca2:	4299      	cmp	r1, r3
 8016ca4:	d004      	beq.n	8016cb0 <cleanup_stdio+0x30>
 8016ca6:	4620      	mov	r0, r4
 8016ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cac:	f000 bfb2 	b.w	8017c14 <_fflush_r>
 8016cb0:	bd10      	pop	{r4, pc}
 8016cb2:	bf00      	nop
 8016cb4:	20010cf8 	.word	0x20010cf8
 8016cb8:	20010d60 	.word	0x20010d60
 8016cbc:	20010dc8 	.word	0x20010dc8

08016cc0 <global_stdio_init.part.0>:
 8016cc0:	b510      	push	{r4, lr}
 8016cc2:	4b0b      	ldr	r3, [pc, #44]	; (8016cf0 <global_stdio_init.part.0+0x30>)
 8016cc4:	4c0b      	ldr	r4, [pc, #44]	; (8016cf4 <global_stdio_init.part.0+0x34>)
 8016cc6:	4a0c      	ldr	r2, [pc, #48]	; (8016cf8 <global_stdio_init.part.0+0x38>)
 8016cc8:	601a      	str	r2, [r3, #0]
 8016cca:	4620      	mov	r0, r4
 8016ccc:	2200      	movs	r2, #0
 8016cce:	2104      	movs	r1, #4
 8016cd0:	f7ff ff94 	bl	8016bfc <std>
 8016cd4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016cd8:	2201      	movs	r2, #1
 8016cda:	2109      	movs	r1, #9
 8016cdc:	f7ff ff8e 	bl	8016bfc <std>
 8016ce0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016ce4:	2202      	movs	r2, #2
 8016ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cea:	2112      	movs	r1, #18
 8016cec:	f7ff bf86 	b.w	8016bfc <std>
 8016cf0:	20010e30 	.word	0x20010e30
 8016cf4:	20010cf8 	.word	0x20010cf8
 8016cf8:	08016c69 	.word	0x08016c69

08016cfc <__sfp_lock_acquire>:
 8016cfc:	4801      	ldr	r0, [pc, #4]	; (8016d04 <__sfp_lock_acquire+0x8>)
 8016cfe:	f000 ba40 	b.w	8017182 <__retarget_lock_acquire_recursive>
 8016d02:	bf00      	nop
 8016d04:	20010e3a 	.word	0x20010e3a

08016d08 <__sfp_lock_release>:
 8016d08:	4801      	ldr	r0, [pc, #4]	; (8016d10 <__sfp_lock_release+0x8>)
 8016d0a:	f000 ba3b 	b.w	8017184 <__retarget_lock_release_recursive>
 8016d0e:	bf00      	nop
 8016d10:	20010e3a 	.word	0x20010e3a

08016d14 <__sinit>:
 8016d14:	b510      	push	{r4, lr}
 8016d16:	4604      	mov	r4, r0
 8016d18:	f7ff fff0 	bl	8016cfc <__sfp_lock_acquire>
 8016d1c:	6a23      	ldr	r3, [r4, #32]
 8016d1e:	b11b      	cbz	r3, 8016d28 <__sinit+0x14>
 8016d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d24:	f7ff bff0 	b.w	8016d08 <__sfp_lock_release>
 8016d28:	4b04      	ldr	r3, [pc, #16]	; (8016d3c <__sinit+0x28>)
 8016d2a:	6223      	str	r3, [r4, #32]
 8016d2c:	4b04      	ldr	r3, [pc, #16]	; (8016d40 <__sinit+0x2c>)
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d1f5      	bne.n	8016d20 <__sinit+0xc>
 8016d34:	f7ff ffc4 	bl	8016cc0 <global_stdio_init.part.0>
 8016d38:	e7f2      	b.n	8016d20 <__sinit+0xc>
 8016d3a:	bf00      	nop
 8016d3c:	08016c81 	.word	0x08016c81
 8016d40:	20010e30 	.word	0x20010e30

08016d44 <_fwalk_sglue>:
 8016d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d48:	4607      	mov	r7, r0
 8016d4a:	4688      	mov	r8, r1
 8016d4c:	4614      	mov	r4, r2
 8016d4e:	2600      	movs	r6, #0
 8016d50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016d54:	f1b9 0901 	subs.w	r9, r9, #1
 8016d58:	d505      	bpl.n	8016d66 <_fwalk_sglue+0x22>
 8016d5a:	6824      	ldr	r4, [r4, #0]
 8016d5c:	2c00      	cmp	r4, #0
 8016d5e:	d1f7      	bne.n	8016d50 <_fwalk_sglue+0xc>
 8016d60:	4630      	mov	r0, r6
 8016d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d66:	89ab      	ldrh	r3, [r5, #12]
 8016d68:	2b01      	cmp	r3, #1
 8016d6a:	d907      	bls.n	8016d7c <_fwalk_sglue+0x38>
 8016d6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016d70:	3301      	adds	r3, #1
 8016d72:	d003      	beq.n	8016d7c <_fwalk_sglue+0x38>
 8016d74:	4629      	mov	r1, r5
 8016d76:	4638      	mov	r0, r7
 8016d78:	47c0      	blx	r8
 8016d7a:	4306      	orrs	r6, r0
 8016d7c:	3568      	adds	r5, #104	; 0x68
 8016d7e:	e7e9      	b.n	8016d54 <_fwalk_sglue+0x10>

08016d80 <iprintf>:
 8016d80:	b40f      	push	{r0, r1, r2, r3}
 8016d82:	b507      	push	{r0, r1, r2, lr}
 8016d84:	4906      	ldr	r1, [pc, #24]	; (8016da0 <iprintf+0x20>)
 8016d86:	ab04      	add	r3, sp, #16
 8016d88:	6808      	ldr	r0, [r1, #0]
 8016d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d8e:	6881      	ldr	r1, [r0, #8]
 8016d90:	9301      	str	r3, [sp, #4]
 8016d92:	f000 fc0f 	bl	80175b4 <_vfiprintf_r>
 8016d96:	b003      	add	sp, #12
 8016d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d9c:	b004      	add	sp, #16
 8016d9e:	4770      	bx	lr
 8016da0:	2000010c 	.word	0x2000010c

08016da4 <sniprintf>:
 8016da4:	b40c      	push	{r2, r3}
 8016da6:	b530      	push	{r4, r5, lr}
 8016da8:	4b17      	ldr	r3, [pc, #92]	; (8016e08 <sniprintf+0x64>)
 8016daa:	1e0c      	subs	r4, r1, #0
 8016dac:	681d      	ldr	r5, [r3, #0]
 8016dae:	b09d      	sub	sp, #116	; 0x74
 8016db0:	da08      	bge.n	8016dc4 <sniprintf+0x20>
 8016db2:	238b      	movs	r3, #139	; 0x8b
 8016db4:	602b      	str	r3, [r5, #0]
 8016db6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016dba:	b01d      	add	sp, #116	; 0x74
 8016dbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016dc0:	b002      	add	sp, #8
 8016dc2:	4770      	bx	lr
 8016dc4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016dc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016dcc:	bf14      	ite	ne
 8016dce:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8016dd2:	4623      	moveq	r3, r4
 8016dd4:	9304      	str	r3, [sp, #16]
 8016dd6:	9307      	str	r3, [sp, #28]
 8016dd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ddc:	9002      	str	r0, [sp, #8]
 8016dde:	9006      	str	r0, [sp, #24]
 8016de0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016de4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016de6:	ab21      	add	r3, sp, #132	; 0x84
 8016de8:	a902      	add	r1, sp, #8
 8016dea:	4628      	mov	r0, r5
 8016dec:	9301      	str	r3, [sp, #4]
 8016dee:	f000 fab9 	bl	8017364 <_svfiprintf_r>
 8016df2:	1c43      	adds	r3, r0, #1
 8016df4:	bfbc      	itt	lt
 8016df6:	238b      	movlt	r3, #139	; 0x8b
 8016df8:	602b      	strlt	r3, [r5, #0]
 8016dfa:	2c00      	cmp	r4, #0
 8016dfc:	d0dd      	beq.n	8016dba <sniprintf+0x16>
 8016dfe:	9b02      	ldr	r3, [sp, #8]
 8016e00:	2200      	movs	r2, #0
 8016e02:	701a      	strb	r2, [r3, #0]
 8016e04:	e7d9      	b.n	8016dba <sniprintf+0x16>
 8016e06:	bf00      	nop
 8016e08:	2000010c 	.word	0x2000010c

08016e0c <__sread>:
 8016e0c:	b510      	push	{r4, lr}
 8016e0e:	460c      	mov	r4, r1
 8016e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e14:	f000 f956 	bl	80170c4 <_read_r>
 8016e18:	2800      	cmp	r0, #0
 8016e1a:	bfab      	itete	ge
 8016e1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016e1e:	89a3      	ldrhlt	r3, [r4, #12]
 8016e20:	181b      	addge	r3, r3, r0
 8016e22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016e26:	bfac      	ite	ge
 8016e28:	6563      	strge	r3, [r4, #84]	; 0x54
 8016e2a:	81a3      	strhlt	r3, [r4, #12]
 8016e2c:	bd10      	pop	{r4, pc}

08016e2e <__swrite>:
 8016e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e32:	461f      	mov	r7, r3
 8016e34:	898b      	ldrh	r3, [r1, #12]
 8016e36:	05db      	lsls	r3, r3, #23
 8016e38:	4605      	mov	r5, r0
 8016e3a:	460c      	mov	r4, r1
 8016e3c:	4616      	mov	r6, r2
 8016e3e:	d505      	bpl.n	8016e4c <__swrite+0x1e>
 8016e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e44:	2302      	movs	r3, #2
 8016e46:	2200      	movs	r2, #0
 8016e48:	f000 f92a 	bl	80170a0 <_lseek_r>
 8016e4c:	89a3      	ldrh	r3, [r4, #12]
 8016e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016e56:	81a3      	strh	r3, [r4, #12]
 8016e58:	4632      	mov	r2, r6
 8016e5a:	463b      	mov	r3, r7
 8016e5c:	4628      	mov	r0, r5
 8016e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e62:	f000 b951 	b.w	8017108 <_write_r>

08016e66 <__sseek>:
 8016e66:	b510      	push	{r4, lr}
 8016e68:	460c      	mov	r4, r1
 8016e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e6e:	f000 f917 	bl	80170a0 <_lseek_r>
 8016e72:	1c43      	adds	r3, r0, #1
 8016e74:	89a3      	ldrh	r3, [r4, #12]
 8016e76:	bf15      	itete	ne
 8016e78:	6560      	strne	r0, [r4, #84]	; 0x54
 8016e7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016e7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016e82:	81a3      	strheq	r3, [r4, #12]
 8016e84:	bf18      	it	ne
 8016e86:	81a3      	strhne	r3, [r4, #12]
 8016e88:	bd10      	pop	{r4, pc}

08016e8a <__sclose>:
 8016e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e8e:	f000 b8a1 	b.w	8016fd4 <_close_r>

08016e92 <_vsniprintf_r>:
 8016e92:	b530      	push	{r4, r5, lr}
 8016e94:	4614      	mov	r4, r2
 8016e96:	2c00      	cmp	r4, #0
 8016e98:	b09b      	sub	sp, #108	; 0x6c
 8016e9a:	4605      	mov	r5, r0
 8016e9c:	461a      	mov	r2, r3
 8016e9e:	da05      	bge.n	8016eac <_vsniprintf_r+0x1a>
 8016ea0:	238b      	movs	r3, #139	; 0x8b
 8016ea2:	6003      	str	r3, [r0, #0]
 8016ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ea8:	b01b      	add	sp, #108	; 0x6c
 8016eaa:	bd30      	pop	{r4, r5, pc}
 8016eac:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016eb0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016eb4:	bf14      	ite	ne
 8016eb6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8016eba:	4623      	moveq	r3, r4
 8016ebc:	9302      	str	r3, [sp, #8]
 8016ebe:	9305      	str	r3, [sp, #20]
 8016ec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ec4:	9100      	str	r1, [sp, #0]
 8016ec6:	9104      	str	r1, [sp, #16]
 8016ec8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016ecc:	4669      	mov	r1, sp
 8016ece:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016ed0:	f000 fa48 	bl	8017364 <_svfiprintf_r>
 8016ed4:	1c43      	adds	r3, r0, #1
 8016ed6:	bfbc      	itt	lt
 8016ed8:	238b      	movlt	r3, #139	; 0x8b
 8016eda:	602b      	strlt	r3, [r5, #0]
 8016edc:	2c00      	cmp	r4, #0
 8016ede:	d0e3      	beq.n	8016ea8 <_vsniprintf_r+0x16>
 8016ee0:	9b00      	ldr	r3, [sp, #0]
 8016ee2:	2200      	movs	r2, #0
 8016ee4:	701a      	strb	r2, [r3, #0]
 8016ee6:	e7df      	b.n	8016ea8 <_vsniprintf_r+0x16>

08016ee8 <vsniprintf>:
 8016ee8:	b507      	push	{r0, r1, r2, lr}
 8016eea:	9300      	str	r3, [sp, #0]
 8016eec:	4613      	mov	r3, r2
 8016eee:	460a      	mov	r2, r1
 8016ef0:	4601      	mov	r1, r0
 8016ef2:	4803      	ldr	r0, [pc, #12]	; (8016f00 <vsniprintf+0x18>)
 8016ef4:	6800      	ldr	r0, [r0, #0]
 8016ef6:	f7ff ffcc 	bl	8016e92 <_vsniprintf_r>
 8016efa:	b003      	add	sp, #12
 8016efc:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f00:	2000010c 	.word	0x2000010c

08016f04 <memcmp>:
 8016f04:	b510      	push	{r4, lr}
 8016f06:	3901      	subs	r1, #1
 8016f08:	4402      	add	r2, r0
 8016f0a:	4290      	cmp	r0, r2
 8016f0c:	d101      	bne.n	8016f12 <memcmp+0xe>
 8016f0e:	2000      	movs	r0, #0
 8016f10:	e005      	b.n	8016f1e <memcmp+0x1a>
 8016f12:	7803      	ldrb	r3, [r0, #0]
 8016f14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016f18:	42a3      	cmp	r3, r4
 8016f1a:	d001      	beq.n	8016f20 <memcmp+0x1c>
 8016f1c:	1b18      	subs	r0, r3, r4
 8016f1e:	bd10      	pop	{r4, pc}
 8016f20:	3001      	adds	r0, #1
 8016f22:	e7f2      	b.n	8016f0a <memcmp+0x6>

08016f24 <memmove>:
 8016f24:	4288      	cmp	r0, r1
 8016f26:	b510      	push	{r4, lr}
 8016f28:	eb01 0402 	add.w	r4, r1, r2
 8016f2c:	d902      	bls.n	8016f34 <memmove+0x10>
 8016f2e:	4284      	cmp	r4, r0
 8016f30:	4623      	mov	r3, r4
 8016f32:	d807      	bhi.n	8016f44 <memmove+0x20>
 8016f34:	1e43      	subs	r3, r0, #1
 8016f36:	42a1      	cmp	r1, r4
 8016f38:	d008      	beq.n	8016f4c <memmove+0x28>
 8016f3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016f3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016f42:	e7f8      	b.n	8016f36 <memmove+0x12>
 8016f44:	4402      	add	r2, r0
 8016f46:	4601      	mov	r1, r0
 8016f48:	428a      	cmp	r2, r1
 8016f4a:	d100      	bne.n	8016f4e <memmove+0x2a>
 8016f4c:	bd10      	pop	{r4, pc}
 8016f4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016f52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016f56:	e7f7      	b.n	8016f48 <memmove+0x24>

08016f58 <memset>:
 8016f58:	4402      	add	r2, r0
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	4293      	cmp	r3, r2
 8016f5e:	d100      	bne.n	8016f62 <memset+0xa>
 8016f60:	4770      	bx	lr
 8016f62:	f803 1b01 	strb.w	r1, [r3], #1
 8016f66:	e7f9      	b.n	8016f5c <memset+0x4>

08016f68 <strchr>:
 8016f68:	b2c9      	uxtb	r1, r1
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f70:	b11a      	cbz	r2, 8016f7a <strchr+0x12>
 8016f72:	428a      	cmp	r2, r1
 8016f74:	d1f9      	bne.n	8016f6a <strchr+0x2>
 8016f76:	4618      	mov	r0, r3
 8016f78:	4770      	bx	lr
 8016f7a:	2900      	cmp	r1, #0
 8016f7c:	bf18      	it	ne
 8016f7e:	2300      	movne	r3, #0
 8016f80:	e7f9      	b.n	8016f76 <strchr+0xe>

08016f82 <strncmp>:
 8016f82:	b510      	push	{r4, lr}
 8016f84:	b16a      	cbz	r2, 8016fa2 <strncmp+0x20>
 8016f86:	3901      	subs	r1, #1
 8016f88:	1884      	adds	r4, r0, r2
 8016f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f8e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016f92:	429a      	cmp	r2, r3
 8016f94:	d103      	bne.n	8016f9e <strncmp+0x1c>
 8016f96:	42a0      	cmp	r0, r4
 8016f98:	d001      	beq.n	8016f9e <strncmp+0x1c>
 8016f9a:	2a00      	cmp	r2, #0
 8016f9c:	d1f5      	bne.n	8016f8a <strncmp+0x8>
 8016f9e:	1ad0      	subs	r0, r2, r3
 8016fa0:	bd10      	pop	{r4, pc}
 8016fa2:	4610      	mov	r0, r2
 8016fa4:	e7fc      	b.n	8016fa0 <strncmp+0x1e>

08016fa6 <strstr>:
 8016fa6:	780a      	ldrb	r2, [r1, #0]
 8016fa8:	b570      	push	{r4, r5, r6, lr}
 8016faa:	b96a      	cbnz	r2, 8016fc8 <strstr+0x22>
 8016fac:	bd70      	pop	{r4, r5, r6, pc}
 8016fae:	429a      	cmp	r2, r3
 8016fb0:	d109      	bne.n	8016fc6 <strstr+0x20>
 8016fb2:	460c      	mov	r4, r1
 8016fb4:	4605      	mov	r5, r0
 8016fb6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d0f6      	beq.n	8016fac <strstr+0x6>
 8016fbe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016fc2:	429e      	cmp	r6, r3
 8016fc4:	d0f7      	beq.n	8016fb6 <strstr+0x10>
 8016fc6:	3001      	adds	r0, #1
 8016fc8:	7803      	ldrb	r3, [r0, #0]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d1ef      	bne.n	8016fae <strstr+0x8>
 8016fce:	4618      	mov	r0, r3
 8016fd0:	e7ec      	b.n	8016fac <strstr+0x6>
	...

08016fd4 <_close_r>:
 8016fd4:	b538      	push	{r3, r4, r5, lr}
 8016fd6:	4d06      	ldr	r5, [pc, #24]	; (8016ff0 <_close_r+0x1c>)
 8016fd8:	2300      	movs	r3, #0
 8016fda:	4604      	mov	r4, r0
 8016fdc:	4608      	mov	r0, r1
 8016fde:	602b      	str	r3, [r5, #0]
 8016fe0:	f7eb fdc7 	bl	8002b72 <_close>
 8016fe4:	1c43      	adds	r3, r0, #1
 8016fe6:	d102      	bne.n	8016fee <_close_r+0x1a>
 8016fe8:	682b      	ldr	r3, [r5, #0]
 8016fea:	b103      	cbz	r3, 8016fee <_close_r+0x1a>
 8016fec:	6023      	str	r3, [r4, #0]
 8016fee:	bd38      	pop	{r3, r4, r5, pc}
 8016ff0:	20010e34 	.word	0x20010e34

08016ff4 <_reclaim_reent>:
 8016ff4:	4b29      	ldr	r3, [pc, #164]	; (801709c <_reclaim_reent+0xa8>)
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	4283      	cmp	r3, r0
 8016ffa:	b570      	push	{r4, r5, r6, lr}
 8016ffc:	4604      	mov	r4, r0
 8016ffe:	d04b      	beq.n	8017098 <_reclaim_reent+0xa4>
 8017000:	69c3      	ldr	r3, [r0, #28]
 8017002:	b143      	cbz	r3, 8017016 <_reclaim_reent+0x22>
 8017004:	68db      	ldr	r3, [r3, #12]
 8017006:	2b00      	cmp	r3, #0
 8017008:	d144      	bne.n	8017094 <_reclaim_reent+0xa0>
 801700a:	69e3      	ldr	r3, [r4, #28]
 801700c:	6819      	ldr	r1, [r3, #0]
 801700e:	b111      	cbz	r1, 8017016 <_reclaim_reent+0x22>
 8017010:	4620      	mov	r0, r4
 8017012:	f000 f8f9 	bl	8017208 <_free_r>
 8017016:	6961      	ldr	r1, [r4, #20]
 8017018:	b111      	cbz	r1, 8017020 <_reclaim_reent+0x2c>
 801701a:	4620      	mov	r0, r4
 801701c:	f000 f8f4 	bl	8017208 <_free_r>
 8017020:	69e1      	ldr	r1, [r4, #28]
 8017022:	b111      	cbz	r1, 801702a <_reclaim_reent+0x36>
 8017024:	4620      	mov	r0, r4
 8017026:	f000 f8ef 	bl	8017208 <_free_r>
 801702a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801702c:	b111      	cbz	r1, 8017034 <_reclaim_reent+0x40>
 801702e:	4620      	mov	r0, r4
 8017030:	f000 f8ea 	bl	8017208 <_free_r>
 8017034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017036:	b111      	cbz	r1, 801703e <_reclaim_reent+0x4a>
 8017038:	4620      	mov	r0, r4
 801703a:	f000 f8e5 	bl	8017208 <_free_r>
 801703e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017040:	b111      	cbz	r1, 8017048 <_reclaim_reent+0x54>
 8017042:	4620      	mov	r0, r4
 8017044:	f000 f8e0 	bl	8017208 <_free_r>
 8017048:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801704a:	b111      	cbz	r1, 8017052 <_reclaim_reent+0x5e>
 801704c:	4620      	mov	r0, r4
 801704e:	f000 f8db 	bl	8017208 <_free_r>
 8017052:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8017054:	b111      	cbz	r1, 801705c <_reclaim_reent+0x68>
 8017056:	4620      	mov	r0, r4
 8017058:	f000 f8d6 	bl	8017208 <_free_r>
 801705c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801705e:	b111      	cbz	r1, 8017066 <_reclaim_reent+0x72>
 8017060:	4620      	mov	r0, r4
 8017062:	f000 f8d1 	bl	8017208 <_free_r>
 8017066:	6a23      	ldr	r3, [r4, #32]
 8017068:	b1b3      	cbz	r3, 8017098 <_reclaim_reent+0xa4>
 801706a:	4620      	mov	r0, r4
 801706c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017070:	4718      	bx	r3
 8017072:	5949      	ldr	r1, [r1, r5]
 8017074:	b941      	cbnz	r1, 8017088 <_reclaim_reent+0x94>
 8017076:	3504      	adds	r5, #4
 8017078:	69e3      	ldr	r3, [r4, #28]
 801707a:	2d80      	cmp	r5, #128	; 0x80
 801707c:	68d9      	ldr	r1, [r3, #12]
 801707e:	d1f8      	bne.n	8017072 <_reclaim_reent+0x7e>
 8017080:	4620      	mov	r0, r4
 8017082:	f000 f8c1 	bl	8017208 <_free_r>
 8017086:	e7c0      	b.n	801700a <_reclaim_reent+0x16>
 8017088:	680e      	ldr	r6, [r1, #0]
 801708a:	4620      	mov	r0, r4
 801708c:	f000 f8bc 	bl	8017208 <_free_r>
 8017090:	4631      	mov	r1, r6
 8017092:	e7ef      	b.n	8017074 <_reclaim_reent+0x80>
 8017094:	2500      	movs	r5, #0
 8017096:	e7ef      	b.n	8017078 <_reclaim_reent+0x84>
 8017098:	bd70      	pop	{r4, r5, r6, pc}
 801709a:	bf00      	nop
 801709c:	2000010c 	.word	0x2000010c

080170a0 <_lseek_r>:
 80170a0:	b538      	push	{r3, r4, r5, lr}
 80170a2:	4d07      	ldr	r5, [pc, #28]	; (80170c0 <_lseek_r+0x20>)
 80170a4:	4604      	mov	r4, r0
 80170a6:	4608      	mov	r0, r1
 80170a8:	4611      	mov	r1, r2
 80170aa:	2200      	movs	r2, #0
 80170ac:	602a      	str	r2, [r5, #0]
 80170ae:	461a      	mov	r2, r3
 80170b0:	f7eb fd86 	bl	8002bc0 <_lseek>
 80170b4:	1c43      	adds	r3, r0, #1
 80170b6:	d102      	bne.n	80170be <_lseek_r+0x1e>
 80170b8:	682b      	ldr	r3, [r5, #0]
 80170ba:	b103      	cbz	r3, 80170be <_lseek_r+0x1e>
 80170bc:	6023      	str	r3, [r4, #0]
 80170be:	bd38      	pop	{r3, r4, r5, pc}
 80170c0:	20010e34 	.word	0x20010e34

080170c4 <_read_r>:
 80170c4:	b538      	push	{r3, r4, r5, lr}
 80170c6:	4d07      	ldr	r5, [pc, #28]	; (80170e4 <_read_r+0x20>)
 80170c8:	4604      	mov	r4, r0
 80170ca:	4608      	mov	r0, r1
 80170cc:	4611      	mov	r1, r2
 80170ce:	2200      	movs	r2, #0
 80170d0:	602a      	str	r2, [r5, #0]
 80170d2:	461a      	mov	r2, r3
 80170d4:	f7eb fd14 	bl	8002b00 <_read>
 80170d8:	1c43      	adds	r3, r0, #1
 80170da:	d102      	bne.n	80170e2 <_read_r+0x1e>
 80170dc:	682b      	ldr	r3, [r5, #0]
 80170de:	b103      	cbz	r3, 80170e2 <_read_r+0x1e>
 80170e0:	6023      	str	r3, [r4, #0]
 80170e2:	bd38      	pop	{r3, r4, r5, pc}
 80170e4:	20010e34 	.word	0x20010e34

080170e8 <_sbrk_r>:
 80170e8:	b538      	push	{r3, r4, r5, lr}
 80170ea:	4d06      	ldr	r5, [pc, #24]	; (8017104 <_sbrk_r+0x1c>)
 80170ec:	2300      	movs	r3, #0
 80170ee:	4604      	mov	r4, r0
 80170f0:	4608      	mov	r0, r1
 80170f2:	602b      	str	r3, [r5, #0]
 80170f4:	f7eb fd72 	bl	8002bdc <_sbrk>
 80170f8:	1c43      	adds	r3, r0, #1
 80170fa:	d102      	bne.n	8017102 <_sbrk_r+0x1a>
 80170fc:	682b      	ldr	r3, [r5, #0]
 80170fe:	b103      	cbz	r3, 8017102 <_sbrk_r+0x1a>
 8017100:	6023      	str	r3, [r4, #0]
 8017102:	bd38      	pop	{r3, r4, r5, pc}
 8017104:	20010e34 	.word	0x20010e34

08017108 <_write_r>:
 8017108:	b538      	push	{r3, r4, r5, lr}
 801710a:	4d07      	ldr	r5, [pc, #28]	; (8017128 <_write_r+0x20>)
 801710c:	4604      	mov	r4, r0
 801710e:	4608      	mov	r0, r1
 8017110:	4611      	mov	r1, r2
 8017112:	2200      	movs	r2, #0
 8017114:	602a      	str	r2, [r5, #0]
 8017116:	461a      	mov	r2, r3
 8017118:	f7eb fd0f 	bl	8002b3a <_write>
 801711c:	1c43      	adds	r3, r0, #1
 801711e:	d102      	bne.n	8017126 <_write_r+0x1e>
 8017120:	682b      	ldr	r3, [r5, #0]
 8017122:	b103      	cbz	r3, 8017126 <_write_r+0x1e>
 8017124:	6023      	str	r3, [r4, #0]
 8017126:	bd38      	pop	{r3, r4, r5, pc}
 8017128:	20010e34 	.word	0x20010e34

0801712c <__errno>:
 801712c:	4b01      	ldr	r3, [pc, #4]	; (8017134 <__errno+0x8>)
 801712e:	6818      	ldr	r0, [r3, #0]
 8017130:	4770      	bx	lr
 8017132:	bf00      	nop
 8017134:	2000010c 	.word	0x2000010c

08017138 <__libc_init_array>:
 8017138:	b570      	push	{r4, r5, r6, lr}
 801713a:	4d0d      	ldr	r5, [pc, #52]	; (8017170 <__libc_init_array+0x38>)
 801713c:	4c0d      	ldr	r4, [pc, #52]	; (8017174 <__libc_init_array+0x3c>)
 801713e:	1b64      	subs	r4, r4, r5
 8017140:	10a4      	asrs	r4, r4, #2
 8017142:	2600      	movs	r6, #0
 8017144:	42a6      	cmp	r6, r4
 8017146:	d109      	bne.n	801715c <__libc_init_array+0x24>
 8017148:	4d0b      	ldr	r5, [pc, #44]	; (8017178 <__libc_init_array+0x40>)
 801714a:	4c0c      	ldr	r4, [pc, #48]	; (801717c <__libc_init_array+0x44>)
 801714c:	f000 ff02 	bl	8017f54 <_init>
 8017150:	1b64      	subs	r4, r4, r5
 8017152:	10a4      	asrs	r4, r4, #2
 8017154:	2600      	movs	r6, #0
 8017156:	42a6      	cmp	r6, r4
 8017158:	d105      	bne.n	8017166 <__libc_init_array+0x2e>
 801715a:	bd70      	pop	{r4, r5, r6, pc}
 801715c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017160:	4798      	blx	r3
 8017162:	3601      	adds	r6, #1
 8017164:	e7ee      	b.n	8017144 <__libc_init_array+0xc>
 8017166:	f855 3b04 	ldr.w	r3, [r5], #4
 801716a:	4798      	blx	r3
 801716c:	3601      	adds	r6, #1
 801716e:	e7f2      	b.n	8017156 <__libc_init_array+0x1e>
 8017170:	08018d94 	.word	0x08018d94
 8017174:	08018d94 	.word	0x08018d94
 8017178:	08018d94 	.word	0x08018d94
 801717c:	08018d9c 	.word	0x08018d9c

08017180 <__retarget_lock_init_recursive>:
 8017180:	4770      	bx	lr

08017182 <__retarget_lock_acquire_recursive>:
 8017182:	4770      	bx	lr

08017184 <__retarget_lock_release_recursive>:
 8017184:	4770      	bx	lr

08017186 <strcpy>:
 8017186:	4603      	mov	r3, r0
 8017188:	f811 2b01 	ldrb.w	r2, [r1], #1
 801718c:	f803 2b01 	strb.w	r2, [r3], #1
 8017190:	2a00      	cmp	r2, #0
 8017192:	d1f9      	bne.n	8017188 <strcpy+0x2>
 8017194:	4770      	bx	lr

08017196 <memcpy>:
 8017196:	440a      	add	r2, r1
 8017198:	4291      	cmp	r1, r2
 801719a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801719e:	d100      	bne.n	80171a2 <memcpy+0xc>
 80171a0:	4770      	bx	lr
 80171a2:	b510      	push	{r4, lr}
 80171a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80171a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80171ac:	4291      	cmp	r1, r2
 80171ae:	d1f9      	bne.n	80171a4 <memcpy+0xe>
 80171b0:	bd10      	pop	{r4, pc}
	...

080171b4 <__assert_func>:
 80171b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80171b6:	4614      	mov	r4, r2
 80171b8:	461a      	mov	r2, r3
 80171ba:	4b09      	ldr	r3, [pc, #36]	; (80171e0 <__assert_func+0x2c>)
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	4605      	mov	r5, r0
 80171c0:	68d8      	ldr	r0, [r3, #12]
 80171c2:	b14c      	cbz	r4, 80171d8 <__assert_func+0x24>
 80171c4:	4b07      	ldr	r3, [pc, #28]	; (80171e4 <__assert_func+0x30>)
 80171c6:	9100      	str	r1, [sp, #0]
 80171c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80171cc:	4906      	ldr	r1, [pc, #24]	; (80171e8 <__assert_func+0x34>)
 80171ce:	462b      	mov	r3, r5
 80171d0:	f000 fd48 	bl	8017c64 <fiprintf>
 80171d4:	f000 fdee 	bl	8017db4 <abort>
 80171d8:	4b04      	ldr	r3, [pc, #16]	; (80171ec <__assert_func+0x38>)
 80171da:	461c      	mov	r4, r3
 80171dc:	e7f3      	b.n	80171c6 <__assert_func+0x12>
 80171de:	bf00      	nop
 80171e0:	2000010c 	.word	0x2000010c
 80171e4:	08018d1c 	.word	0x08018d1c
 80171e8:	08018d29 	.word	0x08018d29
 80171ec:	08018d57 	.word	0x08018d57

080171f0 <__env_lock>:
 80171f0:	4801      	ldr	r0, [pc, #4]	; (80171f8 <__env_lock+0x8>)
 80171f2:	f7ff bfc6 	b.w	8017182 <__retarget_lock_acquire_recursive>
 80171f6:	bf00      	nop
 80171f8:	20010e38 	.word	0x20010e38

080171fc <__env_unlock>:
 80171fc:	4801      	ldr	r0, [pc, #4]	; (8017204 <__env_unlock+0x8>)
 80171fe:	f7ff bfc1 	b.w	8017184 <__retarget_lock_release_recursive>
 8017202:	bf00      	nop
 8017204:	20010e38 	.word	0x20010e38

08017208 <_free_r>:
 8017208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801720a:	2900      	cmp	r1, #0
 801720c:	d044      	beq.n	8017298 <_free_r+0x90>
 801720e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017212:	9001      	str	r0, [sp, #4]
 8017214:	2b00      	cmp	r3, #0
 8017216:	f1a1 0404 	sub.w	r4, r1, #4
 801721a:	bfb8      	it	lt
 801721c:	18e4      	addlt	r4, r4, r3
 801721e:	f7ff fbc1 	bl	80169a4 <__malloc_lock>
 8017222:	4a1e      	ldr	r2, [pc, #120]	; (801729c <_free_r+0x94>)
 8017224:	9801      	ldr	r0, [sp, #4]
 8017226:	6813      	ldr	r3, [r2, #0]
 8017228:	b933      	cbnz	r3, 8017238 <_free_r+0x30>
 801722a:	6063      	str	r3, [r4, #4]
 801722c:	6014      	str	r4, [r2, #0]
 801722e:	b003      	add	sp, #12
 8017230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017234:	f7ff bbbc 	b.w	80169b0 <__malloc_unlock>
 8017238:	42a3      	cmp	r3, r4
 801723a:	d908      	bls.n	801724e <_free_r+0x46>
 801723c:	6825      	ldr	r5, [r4, #0]
 801723e:	1961      	adds	r1, r4, r5
 8017240:	428b      	cmp	r3, r1
 8017242:	bf01      	itttt	eq
 8017244:	6819      	ldreq	r1, [r3, #0]
 8017246:	685b      	ldreq	r3, [r3, #4]
 8017248:	1949      	addeq	r1, r1, r5
 801724a:	6021      	streq	r1, [r4, #0]
 801724c:	e7ed      	b.n	801722a <_free_r+0x22>
 801724e:	461a      	mov	r2, r3
 8017250:	685b      	ldr	r3, [r3, #4]
 8017252:	b10b      	cbz	r3, 8017258 <_free_r+0x50>
 8017254:	42a3      	cmp	r3, r4
 8017256:	d9fa      	bls.n	801724e <_free_r+0x46>
 8017258:	6811      	ldr	r1, [r2, #0]
 801725a:	1855      	adds	r5, r2, r1
 801725c:	42a5      	cmp	r5, r4
 801725e:	d10b      	bne.n	8017278 <_free_r+0x70>
 8017260:	6824      	ldr	r4, [r4, #0]
 8017262:	4421      	add	r1, r4
 8017264:	1854      	adds	r4, r2, r1
 8017266:	42a3      	cmp	r3, r4
 8017268:	6011      	str	r1, [r2, #0]
 801726a:	d1e0      	bne.n	801722e <_free_r+0x26>
 801726c:	681c      	ldr	r4, [r3, #0]
 801726e:	685b      	ldr	r3, [r3, #4]
 8017270:	6053      	str	r3, [r2, #4]
 8017272:	440c      	add	r4, r1
 8017274:	6014      	str	r4, [r2, #0]
 8017276:	e7da      	b.n	801722e <_free_r+0x26>
 8017278:	d902      	bls.n	8017280 <_free_r+0x78>
 801727a:	230c      	movs	r3, #12
 801727c:	6003      	str	r3, [r0, #0]
 801727e:	e7d6      	b.n	801722e <_free_r+0x26>
 8017280:	6825      	ldr	r5, [r4, #0]
 8017282:	1961      	adds	r1, r4, r5
 8017284:	428b      	cmp	r3, r1
 8017286:	bf04      	itt	eq
 8017288:	6819      	ldreq	r1, [r3, #0]
 801728a:	685b      	ldreq	r3, [r3, #4]
 801728c:	6063      	str	r3, [r4, #4]
 801728e:	bf04      	itt	eq
 8017290:	1949      	addeq	r1, r1, r5
 8017292:	6021      	streq	r1, [r4, #0]
 8017294:	6054      	str	r4, [r2, #4]
 8017296:	e7ca      	b.n	801722e <_free_r+0x26>
 8017298:	b003      	add	sp, #12
 801729a:	bd30      	pop	{r4, r5, pc}
 801729c:	20010cf0 	.word	0x20010cf0

080172a0 <_malloc_usable_size_r>:
 80172a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172a4:	1f18      	subs	r0, r3, #4
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	bfbc      	itt	lt
 80172aa:	580b      	ldrlt	r3, [r1, r0]
 80172ac:	18c0      	addlt	r0, r0, r3
 80172ae:	4770      	bx	lr

080172b0 <__ssputs_r>:
 80172b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172b4:	688e      	ldr	r6, [r1, #8]
 80172b6:	461f      	mov	r7, r3
 80172b8:	42be      	cmp	r6, r7
 80172ba:	680b      	ldr	r3, [r1, #0]
 80172bc:	4682      	mov	sl, r0
 80172be:	460c      	mov	r4, r1
 80172c0:	4690      	mov	r8, r2
 80172c2:	d82c      	bhi.n	801731e <__ssputs_r+0x6e>
 80172c4:	898a      	ldrh	r2, [r1, #12]
 80172c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80172ca:	d026      	beq.n	801731a <__ssputs_r+0x6a>
 80172cc:	6965      	ldr	r5, [r4, #20]
 80172ce:	6909      	ldr	r1, [r1, #16]
 80172d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80172d4:	eba3 0901 	sub.w	r9, r3, r1
 80172d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80172dc:	1c7b      	adds	r3, r7, #1
 80172de:	444b      	add	r3, r9
 80172e0:	106d      	asrs	r5, r5, #1
 80172e2:	429d      	cmp	r5, r3
 80172e4:	bf38      	it	cc
 80172e6:	461d      	movcc	r5, r3
 80172e8:	0553      	lsls	r3, r2, #21
 80172ea:	d527      	bpl.n	801733c <__ssputs_r+0x8c>
 80172ec:	4629      	mov	r1, r5
 80172ee:	f7ff fad9 	bl	80168a4 <_malloc_r>
 80172f2:	4606      	mov	r6, r0
 80172f4:	b360      	cbz	r0, 8017350 <__ssputs_r+0xa0>
 80172f6:	6921      	ldr	r1, [r4, #16]
 80172f8:	464a      	mov	r2, r9
 80172fa:	f7ff ff4c 	bl	8017196 <memcpy>
 80172fe:	89a3      	ldrh	r3, [r4, #12]
 8017300:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017308:	81a3      	strh	r3, [r4, #12]
 801730a:	6126      	str	r6, [r4, #16]
 801730c:	6165      	str	r5, [r4, #20]
 801730e:	444e      	add	r6, r9
 8017310:	eba5 0509 	sub.w	r5, r5, r9
 8017314:	6026      	str	r6, [r4, #0]
 8017316:	60a5      	str	r5, [r4, #8]
 8017318:	463e      	mov	r6, r7
 801731a:	42be      	cmp	r6, r7
 801731c:	d900      	bls.n	8017320 <__ssputs_r+0x70>
 801731e:	463e      	mov	r6, r7
 8017320:	6820      	ldr	r0, [r4, #0]
 8017322:	4632      	mov	r2, r6
 8017324:	4641      	mov	r1, r8
 8017326:	f7ff fdfd 	bl	8016f24 <memmove>
 801732a:	68a3      	ldr	r3, [r4, #8]
 801732c:	1b9b      	subs	r3, r3, r6
 801732e:	60a3      	str	r3, [r4, #8]
 8017330:	6823      	ldr	r3, [r4, #0]
 8017332:	4433      	add	r3, r6
 8017334:	6023      	str	r3, [r4, #0]
 8017336:	2000      	movs	r0, #0
 8017338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801733c:	462a      	mov	r2, r5
 801733e:	f7ff fbb1 	bl	8016aa4 <_realloc_r>
 8017342:	4606      	mov	r6, r0
 8017344:	2800      	cmp	r0, #0
 8017346:	d1e0      	bne.n	801730a <__ssputs_r+0x5a>
 8017348:	6921      	ldr	r1, [r4, #16]
 801734a:	4650      	mov	r0, sl
 801734c:	f7ff ff5c 	bl	8017208 <_free_r>
 8017350:	230c      	movs	r3, #12
 8017352:	f8ca 3000 	str.w	r3, [sl]
 8017356:	89a3      	ldrh	r3, [r4, #12]
 8017358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801735c:	81a3      	strh	r3, [r4, #12]
 801735e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017362:	e7e9      	b.n	8017338 <__ssputs_r+0x88>

08017364 <_svfiprintf_r>:
 8017364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017368:	4698      	mov	r8, r3
 801736a:	898b      	ldrh	r3, [r1, #12]
 801736c:	061b      	lsls	r3, r3, #24
 801736e:	b09d      	sub	sp, #116	; 0x74
 8017370:	4607      	mov	r7, r0
 8017372:	460d      	mov	r5, r1
 8017374:	4614      	mov	r4, r2
 8017376:	d50e      	bpl.n	8017396 <_svfiprintf_r+0x32>
 8017378:	690b      	ldr	r3, [r1, #16]
 801737a:	b963      	cbnz	r3, 8017396 <_svfiprintf_r+0x32>
 801737c:	2140      	movs	r1, #64	; 0x40
 801737e:	f7ff fa91 	bl	80168a4 <_malloc_r>
 8017382:	6028      	str	r0, [r5, #0]
 8017384:	6128      	str	r0, [r5, #16]
 8017386:	b920      	cbnz	r0, 8017392 <_svfiprintf_r+0x2e>
 8017388:	230c      	movs	r3, #12
 801738a:	603b      	str	r3, [r7, #0]
 801738c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017390:	e0d0      	b.n	8017534 <_svfiprintf_r+0x1d0>
 8017392:	2340      	movs	r3, #64	; 0x40
 8017394:	616b      	str	r3, [r5, #20]
 8017396:	2300      	movs	r3, #0
 8017398:	9309      	str	r3, [sp, #36]	; 0x24
 801739a:	2320      	movs	r3, #32
 801739c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80173a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80173a4:	2330      	movs	r3, #48	; 0x30
 80173a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801754c <_svfiprintf_r+0x1e8>
 80173aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80173ae:	f04f 0901 	mov.w	r9, #1
 80173b2:	4623      	mov	r3, r4
 80173b4:	469a      	mov	sl, r3
 80173b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80173ba:	b10a      	cbz	r2, 80173c0 <_svfiprintf_r+0x5c>
 80173bc:	2a25      	cmp	r2, #37	; 0x25
 80173be:	d1f9      	bne.n	80173b4 <_svfiprintf_r+0x50>
 80173c0:	ebba 0b04 	subs.w	fp, sl, r4
 80173c4:	d00b      	beq.n	80173de <_svfiprintf_r+0x7a>
 80173c6:	465b      	mov	r3, fp
 80173c8:	4622      	mov	r2, r4
 80173ca:	4629      	mov	r1, r5
 80173cc:	4638      	mov	r0, r7
 80173ce:	f7ff ff6f 	bl	80172b0 <__ssputs_r>
 80173d2:	3001      	adds	r0, #1
 80173d4:	f000 80a9 	beq.w	801752a <_svfiprintf_r+0x1c6>
 80173d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80173da:	445a      	add	r2, fp
 80173dc:	9209      	str	r2, [sp, #36]	; 0x24
 80173de:	f89a 3000 	ldrb.w	r3, [sl]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	f000 80a1 	beq.w	801752a <_svfiprintf_r+0x1c6>
 80173e8:	2300      	movs	r3, #0
 80173ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80173ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80173f2:	f10a 0a01 	add.w	sl, sl, #1
 80173f6:	9304      	str	r3, [sp, #16]
 80173f8:	9307      	str	r3, [sp, #28]
 80173fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80173fe:	931a      	str	r3, [sp, #104]	; 0x68
 8017400:	4654      	mov	r4, sl
 8017402:	2205      	movs	r2, #5
 8017404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017408:	4850      	ldr	r0, [pc, #320]	; (801754c <_svfiprintf_r+0x1e8>)
 801740a:	f7e8 ff01 	bl	8000210 <memchr>
 801740e:	9a04      	ldr	r2, [sp, #16]
 8017410:	b9d8      	cbnz	r0, 801744a <_svfiprintf_r+0xe6>
 8017412:	06d0      	lsls	r0, r2, #27
 8017414:	bf44      	itt	mi
 8017416:	2320      	movmi	r3, #32
 8017418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801741c:	0711      	lsls	r1, r2, #28
 801741e:	bf44      	itt	mi
 8017420:	232b      	movmi	r3, #43	; 0x2b
 8017422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017426:	f89a 3000 	ldrb.w	r3, [sl]
 801742a:	2b2a      	cmp	r3, #42	; 0x2a
 801742c:	d015      	beq.n	801745a <_svfiprintf_r+0xf6>
 801742e:	9a07      	ldr	r2, [sp, #28]
 8017430:	4654      	mov	r4, sl
 8017432:	2000      	movs	r0, #0
 8017434:	f04f 0c0a 	mov.w	ip, #10
 8017438:	4621      	mov	r1, r4
 801743a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801743e:	3b30      	subs	r3, #48	; 0x30
 8017440:	2b09      	cmp	r3, #9
 8017442:	d94d      	bls.n	80174e0 <_svfiprintf_r+0x17c>
 8017444:	b1b0      	cbz	r0, 8017474 <_svfiprintf_r+0x110>
 8017446:	9207      	str	r2, [sp, #28]
 8017448:	e014      	b.n	8017474 <_svfiprintf_r+0x110>
 801744a:	eba0 0308 	sub.w	r3, r0, r8
 801744e:	fa09 f303 	lsl.w	r3, r9, r3
 8017452:	4313      	orrs	r3, r2
 8017454:	9304      	str	r3, [sp, #16]
 8017456:	46a2      	mov	sl, r4
 8017458:	e7d2      	b.n	8017400 <_svfiprintf_r+0x9c>
 801745a:	9b03      	ldr	r3, [sp, #12]
 801745c:	1d19      	adds	r1, r3, #4
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	9103      	str	r1, [sp, #12]
 8017462:	2b00      	cmp	r3, #0
 8017464:	bfbb      	ittet	lt
 8017466:	425b      	neglt	r3, r3
 8017468:	f042 0202 	orrlt.w	r2, r2, #2
 801746c:	9307      	strge	r3, [sp, #28]
 801746e:	9307      	strlt	r3, [sp, #28]
 8017470:	bfb8      	it	lt
 8017472:	9204      	strlt	r2, [sp, #16]
 8017474:	7823      	ldrb	r3, [r4, #0]
 8017476:	2b2e      	cmp	r3, #46	; 0x2e
 8017478:	d10c      	bne.n	8017494 <_svfiprintf_r+0x130>
 801747a:	7863      	ldrb	r3, [r4, #1]
 801747c:	2b2a      	cmp	r3, #42	; 0x2a
 801747e:	d134      	bne.n	80174ea <_svfiprintf_r+0x186>
 8017480:	9b03      	ldr	r3, [sp, #12]
 8017482:	1d1a      	adds	r2, r3, #4
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	9203      	str	r2, [sp, #12]
 8017488:	2b00      	cmp	r3, #0
 801748a:	bfb8      	it	lt
 801748c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017490:	3402      	adds	r4, #2
 8017492:	9305      	str	r3, [sp, #20]
 8017494:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801755c <_svfiprintf_r+0x1f8>
 8017498:	7821      	ldrb	r1, [r4, #0]
 801749a:	2203      	movs	r2, #3
 801749c:	4650      	mov	r0, sl
 801749e:	f7e8 feb7 	bl	8000210 <memchr>
 80174a2:	b138      	cbz	r0, 80174b4 <_svfiprintf_r+0x150>
 80174a4:	9b04      	ldr	r3, [sp, #16]
 80174a6:	eba0 000a 	sub.w	r0, r0, sl
 80174aa:	2240      	movs	r2, #64	; 0x40
 80174ac:	4082      	lsls	r2, r0
 80174ae:	4313      	orrs	r3, r2
 80174b0:	3401      	adds	r4, #1
 80174b2:	9304      	str	r3, [sp, #16]
 80174b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174b8:	4825      	ldr	r0, [pc, #148]	; (8017550 <_svfiprintf_r+0x1ec>)
 80174ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80174be:	2206      	movs	r2, #6
 80174c0:	f7e8 fea6 	bl	8000210 <memchr>
 80174c4:	2800      	cmp	r0, #0
 80174c6:	d038      	beq.n	801753a <_svfiprintf_r+0x1d6>
 80174c8:	4b22      	ldr	r3, [pc, #136]	; (8017554 <_svfiprintf_r+0x1f0>)
 80174ca:	bb1b      	cbnz	r3, 8017514 <_svfiprintf_r+0x1b0>
 80174cc:	9b03      	ldr	r3, [sp, #12]
 80174ce:	3307      	adds	r3, #7
 80174d0:	f023 0307 	bic.w	r3, r3, #7
 80174d4:	3308      	adds	r3, #8
 80174d6:	9303      	str	r3, [sp, #12]
 80174d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174da:	4433      	add	r3, r6
 80174dc:	9309      	str	r3, [sp, #36]	; 0x24
 80174de:	e768      	b.n	80173b2 <_svfiprintf_r+0x4e>
 80174e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80174e4:	460c      	mov	r4, r1
 80174e6:	2001      	movs	r0, #1
 80174e8:	e7a6      	b.n	8017438 <_svfiprintf_r+0xd4>
 80174ea:	2300      	movs	r3, #0
 80174ec:	3401      	adds	r4, #1
 80174ee:	9305      	str	r3, [sp, #20]
 80174f0:	4619      	mov	r1, r3
 80174f2:	f04f 0c0a 	mov.w	ip, #10
 80174f6:	4620      	mov	r0, r4
 80174f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80174fc:	3a30      	subs	r2, #48	; 0x30
 80174fe:	2a09      	cmp	r2, #9
 8017500:	d903      	bls.n	801750a <_svfiprintf_r+0x1a6>
 8017502:	2b00      	cmp	r3, #0
 8017504:	d0c6      	beq.n	8017494 <_svfiprintf_r+0x130>
 8017506:	9105      	str	r1, [sp, #20]
 8017508:	e7c4      	b.n	8017494 <_svfiprintf_r+0x130>
 801750a:	fb0c 2101 	mla	r1, ip, r1, r2
 801750e:	4604      	mov	r4, r0
 8017510:	2301      	movs	r3, #1
 8017512:	e7f0      	b.n	80174f6 <_svfiprintf_r+0x192>
 8017514:	ab03      	add	r3, sp, #12
 8017516:	9300      	str	r3, [sp, #0]
 8017518:	462a      	mov	r2, r5
 801751a:	4b0f      	ldr	r3, [pc, #60]	; (8017558 <_svfiprintf_r+0x1f4>)
 801751c:	a904      	add	r1, sp, #16
 801751e:	4638      	mov	r0, r7
 8017520:	f3af 8000 	nop.w
 8017524:	1c42      	adds	r2, r0, #1
 8017526:	4606      	mov	r6, r0
 8017528:	d1d6      	bne.n	80174d8 <_svfiprintf_r+0x174>
 801752a:	89ab      	ldrh	r3, [r5, #12]
 801752c:	065b      	lsls	r3, r3, #25
 801752e:	f53f af2d 	bmi.w	801738c <_svfiprintf_r+0x28>
 8017532:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017534:	b01d      	add	sp, #116	; 0x74
 8017536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801753a:	ab03      	add	r3, sp, #12
 801753c:	9300      	str	r3, [sp, #0]
 801753e:	462a      	mov	r2, r5
 8017540:	4b05      	ldr	r3, [pc, #20]	; (8017558 <_svfiprintf_r+0x1f4>)
 8017542:	a904      	add	r1, sp, #16
 8017544:	4638      	mov	r0, r7
 8017546:	f000 f9bd 	bl	80178c4 <_printf_i>
 801754a:	e7eb      	b.n	8017524 <_svfiprintf_r+0x1c0>
 801754c:	08018d58 	.word	0x08018d58
 8017550:	08018d62 	.word	0x08018d62
 8017554:	00000000 	.word	0x00000000
 8017558:	080172b1 	.word	0x080172b1
 801755c:	08018d5e 	.word	0x08018d5e

08017560 <__sfputc_r>:
 8017560:	6893      	ldr	r3, [r2, #8]
 8017562:	3b01      	subs	r3, #1
 8017564:	2b00      	cmp	r3, #0
 8017566:	b410      	push	{r4}
 8017568:	6093      	str	r3, [r2, #8]
 801756a:	da08      	bge.n	801757e <__sfputc_r+0x1e>
 801756c:	6994      	ldr	r4, [r2, #24]
 801756e:	42a3      	cmp	r3, r4
 8017570:	db01      	blt.n	8017576 <__sfputc_r+0x16>
 8017572:	290a      	cmp	r1, #10
 8017574:	d103      	bne.n	801757e <__sfputc_r+0x1e>
 8017576:	f85d 4b04 	ldr.w	r4, [sp], #4
 801757a:	f000 bb85 	b.w	8017c88 <__swbuf_r>
 801757e:	6813      	ldr	r3, [r2, #0]
 8017580:	1c58      	adds	r0, r3, #1
 8017582:	6010      	str	r0, [r2, #0]
 8017584:	7019      	strb	r1, [r3, #0]
 8017586:	4608      	mov	r0, r1
 8017588:	f85d 4b04 	ldr.w	r4, [sp], #4
 801758c:	4770      	bx	lr

0801758e <__sfputs_r>:
 801758e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017590:	4606      	mov	r6, r0
 8017592:	460f      	mov	r7, r1
 8017594:	4614      	mov	r4, r2
 8017596:	18d5      	adds	r5, r2, r3
 8017598:	42ac      	cmp	r4, r5
 801759a:	d101      	bne.n	80175a0 <__sfputs_r+0x12>
 801759c:	2000      	movs	r0, #0
 801759e:	e007      	b.n	80175b0 <__sfputs_r+0x22>
 80175a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175a4:	463a      	mov	r2, r7
 80175a6:	4630      	mov	r0, r6
 80175a8:	f7ff ffda 	bl	8017560 <__sfputc_r>
 80175ac:	1c43      	adds	r3, r0, #1
 80175ae:	d1f3      	bne.n	8017598 <__sfputs_r+0xa>
 80175b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080175b4 <_vfiprintf_r>:
 80175b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175b8:	460d      	mov	r5, r1
 80175ba:	b09d      	sub	sp, #116	; 0x74
 80175bc:	4614      	mov	r4, r2
 80175be:	4698      	mov	r8, r3
 80175c0:	4606      	mov	r6, r0
 80175c2:	b118      	cbz	r0, 80175cc <_vfiprintf_r+0x18>
 80175c4:	6a03      	ldr	r3, [r0, #32]
 80175c6:	b90b      	cbnz	r3, 80175cc <_vfiprintf_r+0x18>
 80175c8:	f7ff fba4 	bl	8016d14 <__sinit>
 80175cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80175ce:	07d9      	lsls	r1, r3, #31
 80175d0:	d405      	bmi.n	80175de <_vfiprintf_r+0x2a>
 80175d2:	89ab      	ldrh	r3, [r5, #12]
 80175d4:	059a      	lsls	r2, r3, #22
 80175d6:	d402      	bmi.n	80175de <_vfiprintf_r+0x2a>
 80175d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80175da:	f7ff fdd2 	bl	8017182 <__retarget_lock_acquire_recursive>
 80175de:	89ab      	ldrh	r3, [r5, #12]
 80175e0:	071b      	lsls	r3, r3, #28
 80175e2:	d501      	bpl.n	80175e8 <_vfiprintf_r+0x34>
 80175e4:	692b      	ldr	r3, [r5, #16]
 80175e6:	b99b      	cbnz	r3, 8017610 <_vfiprintf_r+0x5c>
 80175e8:	4629      	mov	r1, r5
 80175ea:	4630      	mov	r0, r6
 80175ec:	f000 fb8a 	bl	8017d04 <__swsetup_r>
 80175f0:	b170      	cbz	r0, 8017610 <_vfiprintf_r+0x5c>
 80175f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80175f4:	07dc      	lsls	r4, r3, #31
 80175f6:	d504      	bpl.n	8017602 <_vfiprintf_r+0x4e>
 80175f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80175fc:	b01d      	add	sp, #116	; 0x74
 80175fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017602:	89ab      	ldrh	r3, [r5, #12]
 8017604:	0598      	lsls	r0, r3, #22
 8017606:	d4f7      	bmi.n	80175f8 <_vfiprintf_r+0x44>
 8017608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801760a:	f7ff fdbb 	bl	8017184 <__retarget_lock_release_recursive>
 801760e:	e7f3      	b.n	80175f8 <_vfiprintf_r+0x44>
 8017610:	2300      	movs	r3, #0
 8017612:	9309      	str	r3, [sp, #36]	; 0x24
 8017614:	2320      	movs	r3, #32
 8017616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801761a:	f8cd 800c 	str.w	r8, [sp, #12]
 801761e:	2330      	movs	r3, #48	; 0x30
 8017620:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80177d4 <_vfiprintf_r+0x220>
 8017624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017628:	f04f 0901 	mov.w	r9, #1
 801762c:	4623      	mov	r3, r4
 801762e:	469a      	mov	sl, r3
 8017630:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017634:	b10a      	cbz	r2, 801763a <_vfiprintf_r+0x86>
 8017636:	2a25      	cmp	r2, #37	; 0x25
 8017638:	d1f9      	bne.n	801762e <_vfiprintf_r+0x7a>
 801763a:	ebba 0b04 	subs.w	fp, sl, r4
 801763e:	d00b      	beq.n	8017658 <_vfiprintf_r+0xa4>
 8017640:	465b      	mov	r3, fp
 8017642:	4622      	mov	r2, r4
 8017644:	4629      	mov	r1, r5
 8017646:	4630      	mov	r0, r6
 8017648:	f7ff ffa1 	bl	801758e <__sfputs_r>
 801764c:	3001      	adds	r0, #1
 801764e:	f000 80a9 	beq.w	80177a4 <_vfiprintf_r+0x1f0>
 8017652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017654:	445a      	add	r2, fp
 8017656:	9209      	str	r2, [sp, #36]	; 0x24
 8017658:	f89a 3000 	ldrb.w	r3, [sl]
 801765c:	2b00      	cmp	r3, #0
 801765e:	f000 80a1 	beq.w	80177a4 <_vfiprintf_r+0x1f0>
 8017662:	2300      	movs	r3, #0
 8017664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801766c:	f10a 0a01 	add.w	sl, sl, #1
 8017670:	9304      	str	r3, [sp, #16]
 8017672:	9307      	str	r3, [sp, #28]
 8017674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017678:	931a      	str	r3, [sp, #104]	; 0x68
 801767a:	4654      	mov	r4, sl
 801767c:	2205      	movs	r2, #5
 801767e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017682:	4854      	ldr	r0, [pc, #336]	; (80177d4 <_vfiprintf_r+0x220>)
 8017684:	f7e8 fdc4 	bl	8000210 <memchr>
 8017688:	9a04      	ldr	r2, [sp, #16]
 801768a:	b9d8      	cbnz	r0, 80176c4 <_vfiprintf_r+0x110>
 801768c:	06d1      	lsls	r1, r2, #27
 801768e:	bf44      	itt	mi
 8017690:	2320      	movmi	r3, #32
 8017692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017696:	0713      	lsls	r3, r2, #28
 8017698:	bf44      	itt	mi
 801769a:	232b      	movmi	r3, #43	; 0x2b
 801769c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80176a0:	f89a 3000 	ldrb.w	r3, [sl]
 80176a4:	2b2a      	cmp	r3, #42	; 0x2a
 80176a6:	d015      	beq.n	80176d4 <_vfiprintf_r+0x120>
 80176a8:	9a07      	ldr	r2, [sp, #28]
 80176aa:	4654      	mov	r4, sl
 80176ac:	2000      	movs	r0, #0
 80176ae:	f04f 0c0a 	mov.w	ip, #10
 80176b2:	4621      	mov	r1, r4
 80176b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80176b8:	3b30      	subs	r3, #48	; 0x30
 80176ba:	2b09      	cmp	r3, #9
 80176bc:	d94d      	bls.n	801775a <_vfiprintf_r+0x1a6>
 80176be:	b1b0      	cbz	r0, 80176ee <_vfiprintf_r+0x13a>
 80176c0:	9207      	str	r2, [sp, #28]
 80176c2:	e014      	b.n	80176ee <_vfiprintf_r+0x13a>
 80176c4:	eba0 0308 	sub.w	r3, r0, r8
 80176c8:	fa09 f303 	lsl.w	r3, r9, r3
 80176cc:	4313      	orrs	r3, r2
 80176ce:	9304      	str	r3, [sp, #16]
 80176d0:	46a2      	mov	sl, r4
 80176d2:	e7d2      	b.n	801767a <_vfiprintf_r+0xc6>
 80176d4:	9b03      	ldr	r3, [sp, #12]
 80176d6:	1d19      	adds	r1, r3, #4
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	9103      	str	r1, [sp, #12]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	bfbb      	ittet	lt
 80176e0:	425b      	neglt	r3, r3
 80176e2:	f042 0202 	orrlt.w	r2, r2, #2
 80176e6:	9307      	strge	r3, [sp, #28]
 80176e8:	9307      	strlt	r3, [sp, #28]
 80176ea:	bfb8      	it	lt
 80176ec:	9204      	strlt	r2, [sp, #16]
 80176ee:	7823      	ldrb	r3, [r4, #0]
 80176f0:	2b2e      	cmp	r3, #46	; 0x2e
 80176f2:	d10c      	bne.n	801770e <_vfiprintf_r+0x15a>
 80176f4:	7863      	ldrb	r3, [r4, #1]
 80176f6:	2b2a      	cmp	r3, #42	; 0x2a
 80176f8:	d134      	bne.n	8017764 <_vfiprintf_r+0x1b0>
 80176fa:	9b03      	ldr	r3, [sp, #12]
 80176fc:	1d1a      	adds	r2, r3, #4
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	9203      	str	r2, [sp, #12]
 8017702:	2b00      	cmp	r3, #0
 8017704:	bfb8      	it	lt
 8017706:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801770a:	3402      	adds	r4, #2
 801770c:	9305      	str	r3, [sp, #20]
 801770e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80177e4 <_vfiprintf_r+0x230>
 8017712:	7821      	ldrb	r1, [r4, #0]
 8017714:	2203      	movs	r2, #3
 8017716:	4650      	mov	r0, sl
 8017718:	f7e8 fd7a 	bl	8000210 <memchr>
 801771c:	b138      	cbz	r0, 801772e <_vfiprintf_r+0x17a>
 801771e:	9b04      	ldr	r3, [sp, #16]
 8017720:	eba0 000a 	sub.w	r0, r0, sl
 8017724:	2240      	movs	r2, #64	; 0x40
 8017726:	4082      	lsls	r2, r0
 8017728:	4313      	orrs	r3, r2
 801772a:	3401      	adds	r4, #1
 801772c:	9304      	str	r3, [sp, #16]
 801772e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017732:	4829      	ldr	r0, [pc, #164]	; (80177d8 <_vfiprintf_r+0x224>)
 8017734:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017738:	2206      	movs	r2, #6
 801773a:	f7e8 fd69 	bl	8000210 <memchr>
 801773e:	2800      	cmp	r0, #0
 8017740:	d03f      	beq.n	80177c2 <_vfiprintf_r+0x20e>
 8017742:	4b26      	ldr	r3, [pc, #152]	; (80177dc <_vfiprintf_r+0x228>)
 8017744:	bb1b      	cbnz	r3, 801778e <_vfiprintf_r+0x1da>
 8017746:	9b03      	ldr	r3, [sp, #12]
 8017748:	3307      	adds	r3, #7
 801774a:	f023 0307 	bic.w	r3, r3, #7
 801774e:	3308      	adds	r3, #8
 8017750:	9303      	str	r3, [sp, #12]
 8017752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017754:	443b      	add	r3, r7
 8017756:	9309      	str	r3, [sp, #36]	; 0x24
 8017758:	e768      	b.n	801762c <_vfiprintf_r+0x78>
 801775a:	fb0c 3202 	mla	r2, ip, r2, r3
 801775e:	460c      	mov	r4, r1
 8017760:	2001      	movs	r0, #1
 8017762:	e7a6      	b.n	80176b2 <_vfiprintf_r+0xfe>
 8017764:	2300      	movs	r3, #0
 8017766:	3401      	adds	r4, #1
 8017768:	9305      	str	r3, [sp, #20]
 801776a:	4619      	mov	r1, r3
 801776c:	f04f 0c0a 	mov.w	ip, #10
 8017770:	4620      	mov	r0, r4
 8017772:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017776:	3a30      	subs	r2, #48	; 0x30
 8017778:	2a09      	cmp	r2, #9
 801777a:	d903      	bls.n	8017784 <_vfiprintf_r+0x1d0>
 801777c:	2b00      	cmp	r3, #0
 801777e:	d0c6      	beq.n	801770e <_vfiprintf_r+0x15a>
 8017780:	9105      	str	r1, [sp, #20]
 8017782:	e7c4      	b.n	801770e <_vfiprintf_r+0x15a>
 8017784:	fb0c 2101 	mla	r1, ip, r1, r2
 8017788:	4604      	mov	r4, r0
 801778a:	2301      	movs	r3, #1
 801778c:	e7f0      	b.n	8017770 <_vfiprintf_r+0x1bc>
 801778e:	ab03      	add	r3, sp, #12
 8017790:	9300      	str	r3, [sp, #0]
 8017792:	462a      	mov	r2, r5
 8017794:	4b12      	ldr	r3, [pc, #72]	; (80177e0 <_vfiprintf_r+0x22c>)
 8017796:	a904      	add	r1, sp, #16
 8017798:	4630      	mov	r0, r6
 801779a:	f3af 8000 	nop.w
 801779e:	4607      	mov	r7, r0
 80177a0:	1c78      	adds	r0, r7, #1
 80177a2:	d1d6      	bne.n	8017752 <_vfiprintf_r+0x19e>
 80177a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80177a6:	07d9      	lsls	r1, r3, #31
 80177a8:	d405      	bmi.n	80177b6 <_vfiprintf_r+0x202>
 80177aa:	89ab      	ldrh	r3, [r5, #12]
 80177ac:	059a      	lsls	r2, r3, #22
 80177ae:	d402      	bmi.n	80177b6 <_vfiprintf_r+0x202>
 80177b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80177b2:	f7ff fce7 	bl	8017184 <__retarget_lock_release_recursive>
 80177b6:	89ab      	ldrh	r3, [r5, #12]
 80177b8:	065b      	lsls	r3, r3, #25
 80177ba:	f53f af1d 	bmi.w	80175f8 <_vfiprintf_r+0x44>
 80177be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80177c0:	e71c      	b.n	80175fc <_vfiprintf_r+0x48>
 80177c2:	ab03      	add	r3, sp, #12
 80177c4:	9300      	str	r3, [sp, #0]
 80177c6:	462a      	mov	r2, r5
 80177c8:	4b05      	ldr	r3, [pc, #20]	; (80177e0 <_vfiprintf_r+0x22c>)
 80177ca:	a904      	add	r1, sp, #16
 80177cc:	4630      	mov	r0, r6
 80177ce:	f000 f879 	bl	80178c4 <_printf_i>
 80177d2:	e7e4      	b.n	801779e <_vfiprintf_r+0x1ea>
 80177d4:	08018d58 	.word	0x08018d58
 80177d8:	08018d62 	.word	0x08018d62
 80177dc:	00000000 	.word	0x00000000
 80177e0:	0801758f 	.word	0x0801758f
 80177e4:	08018d5e 	.word	0x08018d5e

080177e8 <_printf_common>:
 80177e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177ec:	4616      	mov	r6, r2
 80177ee:	4699      	mov	r9, r3
 80177f0:	688a      	ldr	r2, [r1, #8]
 80177f2:	690b      	ldr	r3, [r1, #16]
 80177f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80177f8:	4293      	cmp	r3, r2
 80177fa:	bfb8      	it	lt
 80177fc:	4613      	movlt	r3, r2
 80177fe:	6033      	str	r3, [r6, #0]
 8017800:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017804:	4607      	mov	r7, r0
 8017806:	460c      	mov	r4, r1
 8017808:	b10a      	cbz	r2, 801780e <_printf_common+0x26>
 801780a:	3301      	adds	r3, #1
 801780c:	6033      	str	r3, [r6, #0]
 801780e:	6823      	ldr	r3, [r4, #0]
 8017810:	0699      	lsls	r1, r3, #26
 8017812:	bf42      	ittt	mi
 8017814:	6833      	ldrmi	r3, [r6, #0]
 8017816:	3302      	addmi	r3, #2
 8017818:	6033      	strmi	r3, [r6, #0]
 801781a:	6825      	ldr	r5, [r4, #0]
 801781c:	f015 0506 	ands.w	r5, r5, #6
 8017820:	d106      	bne.n	8017830 <_printf_common+0x48>
 8017822:	f104 0a19 	add.w	sl, r4, #25
 8017826:	68e3      	ldr	r3, [r4, #12]
 8017828:	6832      	ldr	r2, [r6, #0]
 801782a:	1a9b      	subs	r3, r3, r2
 801782c:	42ab      	cmp	r3, r5
 801782e:	dc26      	bgt.n	801787e <_printf_common+0x96>
 8017830:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017834:	1e13      	subs	r3, r2, #0
 8017836:	6822      	ldr	r2, [r4, #0]
 8017838:	bf18      	it	ne
 801783a:	2301      	movne	r3, #1
 801783c:	0692      	lsls	r2, r2, #26
 801783e:	d42b      	bmi.n	8017898 <_printf_common+0xb0>
 8017840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017844:	4649      	mov	r1, r9
 8017846:	4638      	mov	r0, r7
 8017848:	47c0      	blx	r8
 801784a:	3001      	adds	r0, #1
 801784c:	d01e      	beq.n	801788c <_printf_common+0xa4>
 801784e:	6823      	ldr	r3, [r4, #0]
 8017850:	6922      	ldr	r2, [r4, #16]
 8017852:	f003 0306 	and.w	r3, r3, #6
 8017856:	2b04      	cmp	r3, #4
 8017858:	bf02      	ittt	eq
 801785a:	68e5      	ldreq	r5, [r4, #12]
 801785c:	6833      	ldreq	r3, [r6, #0]
 801785e:	1aed      	subeq	r5, r5, r3
 8017860:	68a3      	ldr	r3, [r4, #8]
 8017862:	bf0c      	ite	eq
 8017864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017868:	2500      	movne	r5, #0
 801786a:	4293      	cmp	r3, r2
 801786c:	bfc4      	itt	gt
 801786e:	1a9b      	subgt	r3, r3, r2
 8017870:	18ed      	addgt	r5, r5, r3
 8017872:	2600      	movs	r6, #0
 8017874:	341a      	adds	r4, #26
 8017876:	42b5      	cmp	r5, r6
 8017878:	d11a      	bne.n	80178b0 <_printf_common+0xc8>
 801787a:	2000      	movs	r0, #0
 801787c:	e008      	b.n	8017890 <_printf_common+0xa8>
 801787e:	2301      	movs	r3, #1
 8017880:	4652      	mov	r2, sl
 8017882:	4649      	mov	r1, r9
 8017884:	4638      	mov	r0, r7
 8017886:	47c0      	blx	r8
 8017888:	3001      	adds	r0, #1
 801788a:	d103      	bne.n	8017894 <_printf_common+0xac>
 801788c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017894:	3501      	adds	r5, #1
 8017896:	e7c6      	b.n	8017826 <_printf_common+0x3e>
 8017898:	18e1      	adds	r1, r4, r3
 801789a:	1c5a      	adds	r2, r3, #1
 801789c:	2030      	movs	r0, #48	; 0x30
 801789e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80178a2:	4422      	add	r2, r4
 80178a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80178a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80178ac:	3302      	adds	r3, #2
 80178ae:	e7c7      	b.n	8017840 <_printf_common+0x58>
 80178b0:	2301      	movs	r3, #1
 80178b2:	4622      	mov	r2, r4
 80178b4:	4649      	mov	r1, r9
 80178b6:	4638      	mov	r0, r7
 80178b8:	47c0      	blx	r8
 80178ba:	3001      	adds	r0, #1
 80178bc:	d0e6      	beq.n	801788c <_printf_common+0xa4>
 80178be:	3601      	adds	r6, #1
 80178c0:	e7d9      	b.n	8017876 <_printf_common+0x8e>
	...

080178c4 <_printf_i>:
 80178c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80178c8:	7e0f      	ldrb	r7, [r1, #24]
 80178ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80178cc:	2f78      	cmp	r7, #120	; 0x78
 80178ce:	4691      	mov	r9, r2
 80178d0:	4680      	mov	r8, r0
 80178d2:	460c      	mov	r4, r1
 80178d4:	469a      	mov	sl, r3
 80178d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80178da:	d807      	bhi.n	80178ec <_printf_i+0x28>
 80178dc:	2f62      	cmp	r7, #98	; 0x62
 80178de:	d80a      	bhi.n	80178f6 <_printf_i+0x32>
 80178e0:	2f00      	cmp	r7, #0
 80178e2:	f000 80d4 	beq.w	8017a8e <_printf_i+0x1ca>
 80178e6:	2f58      	cmp	r7, #88	; 0x58
 80178e8:	f000 80c0 	beq.w	8017a6c <_printf_i+0x1a8>
 80178ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80178f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80178f4:	e03a      	b.n	801796c <_printf_i+0xa8>
 80178f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80178fa:	2b15      	cmp	r3, #21
 80178fc:	d8f6      	bhi.n	80178ec <_printf_i+0x28>
 80178fe:	a101      	add	r1, pc, #4	; (adr r1, 8017904 <_printf_i+0x40>)
 8017900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017904:	0801795d 	.word	0x0801795d
 8017908:	08017971 	.word	0x08017971
 801790c:	080178ed 	.word	0x080178ed
 8017910:	080178ed 	.word	0x080178ed
 8017914:	080178ed 	.word	0x080178ed
 8017918:	080178ed 	.word	0x080178ed
 801791c:	08017971 	.word	0x08017971
 8017920:	080178ed 	.word	0x080178ed
 8017924:	080178ed 	.word	0x080178ed
 8017928:	080178ed 	.word	0x080178ed
 801792c:	080178ed 	.word	0x080178ed
 8017930:	08017a75 	.word	0x08017a75
 8017934:	0801799d 	.word	0x0801799d
 8017938:	08017a2f 	.word	0x08017a2f
 801793c:	080178ed 	.word	0x080178ed
 8017940:	080178ed 	.word	0x080178ed
 8017944:	08017a97 	.word	0x08017a97
 8017948:	080178ed 	.word	0x080178ed
 801794c:	0801799d 	.word	0x0801799d
 8017950:	080178ed 	.word	0x080178ed
 8017954:	080178ed 	.word	0x080178ed
 8017958:	08017a37 	.word	0x08017a37
 801795c:	682b      	ldr	r3, [r5, #0]
 801795e:	1d1a      	adds	r2, r3, #4
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	602a      	str	r2, [r5, #0]
 8017964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801796c:	2301      	movs	r3, #1
 801796e:	e09f      	b.n	8017ab0 <_printf_i+0x1ec>
 8017970:	6820      	ldr	r0, [r4, #0]
 8017972:	682b      	ldr	r3, [r5, #0]
 8017974:	0607      	lsls	r7, r0, #24
 8017976:	f103 0104 	add.w	r1, r3, #4
 801797a:	6029      	str	r1, [r5, #0]
 801797c:	d501      	bpl.n	8017982 <_printf_i+0xbe>
 801797e:	681e      	ldr	r6, [r3, #0]
 8017980:	e003      	b.n	801798a <_printf_i+0xc6>
 8017982:	0646      	lsls	r6, r0, #25
 8017984:	d5fb      	bpl.n	801797e <_printf_i+0xba>
 8017986:	f9b3 6000 	ldrsh.w	r6, [r3]
 801798a:	2e00      	cmp	r6, #0
 801798c:	da03      	bge.n	8017996 <_printf_i+0xd2>
 801798e:	232d      	movs	r3, #45	; 0x2d
 8017990:	4276      	negs	r6, r6
 8017992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017996:	485a      	ldr	r0, [pc, #360]	; (8017b00 <_printf_i+0x23c>)
 8017998:	230a      	movs	r3, #10
 801799a:	e012      	b.n	80179c2 <_printf_i+0xfe>
 801799c:	682b      	ldr	r3, [r5, #0]
 801799e:	6820      	ldr	r0, [r4, #0]
 80179a0:	1d19      	adds	r1, r3, #4
 80179a2:	6029      	str	r1, [r5, #0]
 80179a4:	0605      	lsls	r5, r0, #24
 80179a6:	d501      	bpl.n	80179ac <_printf_i+0xe8>
 80179a8:	681e      	ldr	r6, [r3, #0]
 80179aa:	e002      	b.n	80179b2 <_printf_i+0xee>
 80179ac:	0641      	lsls	r1, r0, #25
 80179ae:	d5fb      	bpl.n	80179a8 <_printf_i+0xe4>
 80179b0:	881e      	ldrh	r6, [r3, #0]
 80179b2:	4853      	ldr	r0, [pc, #332]	; (8017b00 <_printf_i+0x23c>)
 80179b4:	2f6f      	cmp	r7, #111	; 0x6f
 80179b6:	bf0c      	ite	eq
 80179b8:	2308      	moveq	r3, #8
 80179ba:	230a      	movne	r3, #10
 80179bc:	2100      	movs	r1, #0
 80179be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80179c2:	6865      	ldr	r5, [r4, #4]
 80179c4:	60a5      	str	r5, [r4, #8]
 80179c6:	2d00      	cmp	r5, #0
 80179c8:	bfa2      	ittt	ge
 80179ca:	6821      	ldrge	r1, [r4, #0]
 80179cc:	f021 0104 	bicge.w	r1, r1, #4
 80179d0:	6021      	strge	r1, [r4, #0]
 80179d2:	b90e      	cbnz	r6, 80179d8 <_printf_i+0x114>
 80179d4:	2d00      	cmp	r5, #0
 80179d6:	d04b      	beq.n	8017a70 <_printf_i+0x1ac>
 80179d8:	4615      	mov	r5, r2
 80179da:	fbb6 f1f3 	udiv	r1, r6, r3
 80179de:	fb03 6711 	mls	r7, r3, r1, r6
 80179e2:	5dc7      	ldrb	r7, [r0, r7]
 80179e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80179e8:	4637      	mov	r7, r6
 80179ea:	42bb      	cmp	r3, r7
 80179ec:	460e      	mov	r6, r1
 80179ee:	d9f4      	bls.n	80179da <_printf_i+0x116>
 80179f0:	2b08      	cmp	r3, #8
 80179f2:	d10b      	bne.n	8017a0c <_printf_i+0x148>
 80179f4:	6823      	ldr	r3, [r4, #0]
 80179f6:	07de      	lsls	r6, r3, #31
 80179f8:	d508      	bpl.n	8017a0c <_printf_i+0x148>
 80179fa:	6923      	ldr	r3, [r4, #16]
 80179fc:	6861      	ldr	r1, [r4, #4]
 80179fe:	4299      	cmp	r1, r3
 8017a00:	bfde      	ittt	le
 8017a02:	2330      	movle	r3, #48	; 0x30
 8017a04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017a08:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8017a0c:	1b52      	subs	r2, r2, r5
 8017a0e:	6122      	str	r2, [r4, #16]
 8017a10:	f8cd a000 	str.w	sl, [sp]
 8017a14:	464b      	mov	r3, r9
 8017a16:	aa03      	add	r2, sp, #12
 8017a18:	4621      	mov	r1, r4
 8017a1a:	4640      	mov	r0, r8
 8017a1c:	f7ff fee4 	bl	80177e8 <_printf_common>
 8017a20:	3001      	adds	r0, #1
 8017a22:	d14a      	bne.n	8017aba <_printf_i+0x1f6>
 8017a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017a28:	b004      	add	sp, #16
 8017a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a2e:	6823      	ldr	r3, [r4, #0]
 8017a30:	f043 0320 	orr.w	r3, r3, #32
 8017a34:	6023      	str	r3, [r4, #0]
 8017a36:	4833      	ldr	r0, [pc, #204]	; (8017b04 <_printf_i+0x240>)
 8017a38:	2778      	movs	r7, #120	; 0x78
 8017a3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017a3e:	6823      	ldr	r3, [r4, #0]
 8017a40:	6829      	ldr	r1, [r5, #0]
 8017a42:	061f      	lsls	r7, r3, #24
 8017a44:	f851 6b04 	ldr.w	r6, [r1], #4
 8017a48:	d402      	bmi.n	8017a50 <_printf_i+0x18c>
 8017a4a:	065f      	lsls	r7, r3, #25
 8017a4c:	bf48      	it	mi
 8017a4e:	b2b6      	uxthmi	r6, r6
 8017a50:	07df      	lsls	r7, r3, #31
 8017a52:	bf48      	it	mi
 8017a54:	f043 0320 	orrmi.w	r3, r3, #32
 8017a58:	6029      	str	r1, [r5, #0]
 8017a5a:	bf48      	it	mi
 8017a5c:	6023      	strmi	r3, [r4, #0]
 8017a5e:	b91e      	cbnz	r6, 8017a68 <_printf_i+0x1a4>
 8017a60:	6823      	ldr	r3, [r4, #0]
 8017a62:	f023 0320 	bic.w	r3, r3, #32
 8017a66:	6023      	str	r3, [r4, #0]
 8017a68:	2310      	movs	r3, #16
 8017a6a:	e7a7      	b.n	80179bc <_printf_i+0xf8>
 8017a6c:	4824      	ldr	r0, [pc, #144]	; (8017b00 <_printf_i+0x23c>)
 8017a6e:	e7e4      	b.n	8017a3a <_printf_i+0x176>
 8017a70:	4615      	mov	r5, r2
 8017a72:	e7bd      	b.n	80179f0 <_printf_i+0x12c>
 8017a74:	682b      	ldr	r3, [r5, #0]
 8017a76:	6826      	ldr	r6, [r4, #0]
 8017a78:	6961      	ldr	r1, [r4, #20]
 8017a7a:	1d18      	adds	r0, r3, #4
 8017a7c:	6028      	str	r0, [r5, #0]
 8017a7e:	0635      	lsls	r5, r6, #24
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	d501      	bpl.n	8017a88 <_printf_i+0x1c4>
 8017a84:	6019      	str	r1, [r3, #0]
 8017a86:	e002      	b.n	8017a8e <_printf_i+0x1ca>
 8017a88:	0670      	lsls	r0, r6, #25
 8017a8a:	d5fb      	bpl.n	8017a84 <_printf_i+0x1c0>
 8017a8c:	8019      	strh	r1, [r3, #0]
 8017a8e:	2300      	movs	r3, #0
 8017a90:	6123      	str	r3, [r4, #16]
 8017a92:	4615      	mov	r5, r2
 8017a94:	e7bc      	b.n	8017a10 <_printf_i+0x14c>
 8017a96:	682b      	ldr	r3, [r5, #0]
 8017a98:	1d1a      	adds	r2, r3, #4
 8017a9a:	602a      	str	r2, [r5, #0]
 8017a9c:	681d      	ldr	r5, [r3, #0]
 8017a9e:	6862      	ldr	r2, [r4, #4]
 8017aa0:	2100      	movs	r1, #0
 8017aa2:	4628      	mov	r0, r5
 8017aa4:	f7e8 fbb4 	bl	8000210 <memchr>
 8017aa8:	b108      	cbz	r0, 8017aae <_printf_i+0x1ea>
 8017aaa:	1b40      	subs	r0, r0, r5
 8017aac:	6060      	str	r0, [r4, #4]
 8017aae:	6863      	ldr	r3, [r4, #4]
 8017ab0:	6123      	str	r3, [r4, #16]
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ab8:	e7aa      	b.n	8017a10 <_printf_i+0x14c>
 8017aba:	6923      	ldr	r3, [r4, #16]
 8017abc:	462a      	mov	r2, r5
 8017abe:	4649      	mov	r1, r9
 8017ac0:	4640      	mov	r0, r8
 8017ac2:	47d0      	blx	sl
 8017ac4:	3001      	adds	r0, #1
 8017ac6:	d0ad      	beq.n	8017a24 <_printf_i+0x160>
 8017ac8:	6823      	ldr	r3, [r4, #0]
 8017aca:	079b      	lsls	r3, r3, #30
 8017acc:	d413      	bmi.n	8017af6 <_printf_i+0x232>
 8017ace:	68e0      	ldr	r0, [r4, #12]
 8017ad0:	9b03      	ldr	r3, [sp, #12]
 8017ad2:	4298      	cmp	r0, r3
 8017ad4:	bfb8      	it	lt
 8017ad6:	4618      	movlt	r0, r3
 8017ad8:	e7a6      	b.n	8017a28 <_printf_i+0x164>
 8017ada:	2301      	movs	r3, #1
 8017adc:	4632      	mov	r2, r6
 8017ade:	4649      	mov	r1, r9
 8017ae0:	4640      	mov	r0, r8
 8017ae2:	47d0      	blx	sl
 8017ae4:	3001      	adds	r0, #1
 8017ae6:	d09d      	beq.n	8017a24 <_printf_i+0x160>
 8017ae8:	3501      	adds	r5, #1
 8017aea:	68e3      	ldr	r3, [r4, #12]
 8017aec:	9903      	ldr	r1, [sp, #12]
 8017aee:	1a5b      	subs	r3, r3, r1
 8017af0:	42ab      	cmp	r3, r5
 8017af2:	dcf2      	bgt.n	8017ada <_printf_i+0x216>
 8017af4:	e7eb      	b.n	8017ace <_printf_i+0x20a>
 8017af6:	2500      	movs	r5, #0
 8017af8:	f104 0619 	add.w	r6, r4, #25
 8017afc:	e7f5      	b.n	8017aea <_printf_i+0x226>
 8017afe:	bf00      	nop
 8017b00:	08018d69 	.word	0x08018d69
 8017b04:	08018d7a 	.word	0x08018d7a

08017b08 <__sflush_r>:
 8017b08:	898a      	ldrh	r2, [r1, #12]
 8017b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b0e:	4605      	mov	r5, r0
 8017b10:	0710      	lsls	r0, r2, #28
 8017b12:	460c      	mov	r4, r1
 8017b14:	d458      	bmi.n	8017bc8 <__sflush_r+0xc0>
 8017b16:	684b      	ldr	r3, [r1, #4]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	dc05      	bgt.n	8017b28 <__sflush_r+0x20>
 8017b1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	dc02      	bgt.n	8017b28 <__sflush_r+0x20>
 8017b22:	2000      	movs	r0, #0
 8017b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b2a:	2e00      	cmp	r6, #0
 8017b2c:	d0f9      	beq.n	8017b22 <__sflush_r+0x1a>
 8017b2e:	2300      	movs	r3, #0
 8017b30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017b34:	682f      	ldr	r7, [r5, #0]
 8017b36:	6a21      	ldr	r1, [r4, #32]
 8017b38:	602b      	str	r3, [r5, #0]
 8017b3a:	d032      	beq.n	8017ba2 <__sflush_r+0x9a>
 8017b3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017b3e:	89a3      	ldrh	r3, [r4, #12]
 8017b40:	075a      	lsls	r2, r3, #29
 8017b42:	d505      	bpl.n	8017b50 <__sflush_r+0x48>
 8017b44:	6863      	ldr	r3, [r4, #4]
 8017b46:	1ac0      	subs	r0, r0, r3
 8017b48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017b4a:	b10b      	cbz	r3, 8017b50 <__sflush_r+0x48>
 8017b4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017b4e:	1ac0      	subs	r0, r0, r3
 8017b50:	2300      	movs	r3, #0
 8017b52:	4602      	mov	r2, r0
 8017b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b56:	6a21      	ldr	r1, [r4, #32]
 8017b58:	4628      	mov	r0, r5
 8017b5a:	47b0      	blx	r6
 8017b5c:	1c43      	adds	r3, r0, #1
 8017b5e:	89a3      	ldrh	r3, [r4, #12]
 8017b60:	d106      	bne.n	8017b70 <__sflush_r+0x68>
 8017b62:	6829      	ldr	r1, [r5, #0]
 8017b64:	291d      	cmp	r1, #29
 8017b66:	d82b      	bhi.n	8017bc0 <__sflush_r+0xb8>
 8017b68:	4a29      	ldr	r2, [pc, #164]	; (8017c10 <__sflush_r+0x108>)
 8017b6a:	410a      	asrs	r2, r1
 8017b6c:	07d6      	lsls	r6, r2, #31
 8017b6e:	d427      	bmi.n	8017bc0 <__sflush_r+0xb8>
 8017b70:	2200      	movs	r2, #0
 8017b72:	6062      	str	r2, [r4, #4]
 8017b74:	04d9      	lsls	r1, r3, #19
 8017b76:	6922      	ldr	r2, [r4, #16]
 8017b78:	6022      	str	r2, [r4, #0]
 8017b7a:	d504      	bpl.n	8017b86 <__sflush_r+0x7e>
 8017b7c:	1c42      	adds	r2, r0, #1
 8017b7e:	d101      	bne.n	8017b84 <__sflush_r+0x7c>
 8017b80:	682b      	ldr	r3, [r5, #0]
 8017b82:	b903      	cbnz	r3, 8017b86 <__sflush_r+0x7e>
 8017b84:	6560      	str	r0, [r4, #84]	; 0x54
 8017b86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017b88:	602f      	str	r7, [r5, #0]
 8017b8a:	2900      	cmp	r1, #0
 8017b8c:	d0c9      	beq.n	8017b22 <__sflush_r+0x1a>
 8017b8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017b92:	4299      	cmp	r1, r3
 8017b94:	d002      	beq.n	8017b9c <__sflush_r+0x94>
 8017b96:	4628      	mov	r0, r5
 8017b98:	f7ff fb36 	bl	8017208 <_free_r>
 8017b9c:	2000      	movs	r0, #0
 8017b9e:	6360      	str	r0, [r4, #52]	; 0x34
 8017ba0:	e7c0      	b.n	8017b24 <__sflush_r+0x1c>
 8017ba2:	2301      	movs	r3, #1
 8017ba4:	4628      	mov	r0, r5
 8017ba6:	47b0      	blx	r6
 8017ba8:	1c41      	adds	r1, r0, #1
 8017baa:	d1c8      	bne.n	8017b3e <__sflush_r+0x36>
 8017bac:	682b      	ldr	r3, [r5, #0]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d0c5      	beq.n	8017b3e <__sflush_r+0x36>
 8017bb2:	2b1d      	cmp	r3, #29
 8017bb4:	d001      	beq.n	8017bba <__sflush_r+0xb2>
 8017bb6:	2b16      	cmp	r3, #22
 8017bb8:	d101      	bne.n	8017bbe <__sflush_r+0xb6>
 8017bba:	602f      	str	r7, [r5, #0]
 8017bbc:	e7b1      	b.n	8017b22 <__sflush_r+0x1a>
 8017bbe:	89a3      	ldrh	r3, [r4, #12]
 8017bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bc4:	81a3      	strh	r3, [r4, #12]
 8017bc6:	e7ad      	b.n	8017b24 <__sflush_r+0x1c>
 8017bc8:	690f      	ldr	r7, [r1, #16]
 8017bca:	2f00      	cmp	r7, #0
 8017bcc:	d0a9      	beq.n	8017b22 <__sflush_r+0x1a>
 8017bce:	0793      	lsls	r3, r2, #30
 8017bd0:	680e      	ldr	r6, [r1, #0]
 8017bd2:	bf08      	it	eq
 8017bd4:	694b      	ldreq	r3, [r1, #20]
 8017bd6:	600f      	str	r7, [r1, #0]
 8017bd8:	bf18      	it	ne
 8017bda:	2300      	movne	r3, #0
 8017bdc:	eba6 0807 	sub.w	r8, r6, r7
 8017be0:	608b      	str	r3, [r1, #8]
 8017be2:	f1b8 0f00 	cmp.w	r8, #0
 8017be6:	dd9c      	ble.n	8017b22 <__sflush_r+0x1a>
 8017be8:	6a21      	ldr	r1, [r4, #32]
 8017bea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017bec:	4643      	mov	r3, r8
 8017bee:	463a      	mov	r2, r7
 8017bf0:	4628      	mov	r0, r5
 8017bf2:	47b0      	blx	r6
 8017bf4:	2800      	cmp	r0, #0
 8017bf6:	dc06      	bgt.n	8017c06 <__sflush_r+0xfe>
 8017bf8:	89a3      	ldrh	r3, [r4, #12]
 8017bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bfe:	81a3      	strh	r3, [r4, #12]
 8017c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017c04:	e78e      	b.n	8017b24 <__sflush_r+0x1c>
 8017c06:	4407      	add	r7, r0
 8017c08:	eba8 0800 	sub.w	r8, r8, r0
 8017c0c:	e7e9      	b.n	8017be2 <__sflush_r+0xda>
 8017c0e:	bf00      	nop
 8017c10:	dfbffffe 	.word	0xdfbffffe

08017c14 <_fflush_r>:
 8017c14:	b538      	push	{r3, r4, r5, lr}
 8017c16:	690b      	ldr	r3, [r1, #16]
 8017c18:	4605      	mov	r5, r0
 8017c1a:	460c      	mov	r4, r1
 8017c1c:	b913      	cbnz	r3, 8017c24 <_fflush_r+0x10>
 8017c1e:	2500      	movs	r5, #0
 8017c20:	4628      	mov	r0, r5
 8017c22:	bd38      	pop	{r3, r4, r5, pc}
 8017c24:	b118      	cbz	r0, 8017c2e <_fflush_r+0x1a>
 8017c26:	6a03      	ldr	r3, [r0, #32]
 8017c28:	b90b      	cbnz	r3, 8017c2e <_fflush_r+0x1a>
 8017c2a:	f7ff f873 	bl	8016d14 <__sinit>
 8017c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d0f3      	beq.n	8017c1e <_fflush_r+0xa>
 8017c36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017c38:	07d0      	lsls	r0, r2, #31
 8017c3a:	d404      	bmi.n	8017c46 <_fflush_r+0x32>
 8017c3c:	0599      	lsls	r1, r3, #22
 8017c3e:	d402      	bmi.n	8017c46 <_fflush_r+0x32>
 8017c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c42:	f7ff fa9e 	bl	8017182 <__retarget_lock_acquire_recursive>
 8017c46:	4628      	mov	r0, r5
 8017c48:	4621      	mov	r1, r4
 8017c4a:	f7ff ff5d 	bl	8017b08 <__sflush_r>
 8017c4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017c50:	07da      	lsls	r2, r3, #31
 8017c52:	4605      	mov	r5, r0
 8017c54:	d4e4      	bmi.n	8017c20 <_fflush_r+0xc>
 8017c56:	89a3      	ldrh	r3, [r4, #12]
 8017c58:	059b      	lsls	r3, r3, #22
 8017c5a:	d4e1      	bmi.n	8017c20 <_fflush_r+0xc>
 8017c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c5e:	f7ff fa91 	bl	8017184 <__retarget_lock_release_recursive>
 8017c62:	e7dd      	b.n	8017c20 <_fflush_r+0xc>

08017c64 <fiprintf>:
 8017c64:	b40e      	push	{r1, r2, r3}
 8017c66:	b503      	push	{r0, r1, lr}
 8017c68:	4601      	mov	r1, r0
 8017c6a:	ab03      	add	r3, sp, #12
 8017c6c:	4805      	ldr	r0, [pc, #20]	; (8017c84 <fiprintf+0x20>)
 8017c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c72:	6800      	ldr	r0, [r0, #0]
 8017c74:	9301      	str	r3, [sp, #4]
 8017c76:	f7ff fc9d 	bl	80175b4 <_vfiprintf_r>
 8017c7a:	b002      	add	sp, #8
 8017c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017c80:	b003      	add	sp, #12
 8017c82:	4770      	bx	lr
 8017c84:	2000010c 	.word	0x2000010c

08017c88 <__swbuf_r>:
 8017c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c8a:	460e      	mov	r6, r1
 8017c8c:	4614      	mov	r4, r2
 8017c8e:	4605      	mov	r5, r0
 8017c90:	b118      	cbz	r0, 8017c9a <__swbuf_r+0x12>
 8017c92:	6a03      	ldr	r3, [r0, #32]
 8017c94:	b90b      	cbnz	r3, 8017c9a <__swbuf_r+0x12>
 8017c96:	f7ff f83d 	bl	8016d14 <__sinit>
 8017c9a:	69a3      	ldr	r3, [r4, #24]
 8017c9c:	60a3      	str	r3, [r4, #8]
 8017c9e:	89a3      	ldrh	r3, [r4, #12]
 8017ca0:	071a      	lsls	r2, r3, #28
 8017ca2:	d525      	bpl.n	8017cf0 <__swbuf_r+0x68>
 8017ca4:	6923      	ldr	r3, [r4, #16]
 8017ca6:	b31b      	cbz	r3, 8017cf0 <__swbuf_r+0x68>
 8017ca8:	6823      	ldr	r3, [r4, #0]
 8017caa:	6922      	ldr	r2, [r4, #16]
 8017cac:	1a98      	subs	r0, r3, r2
 8017cae:	6963      	ldr	r3, [r4, #20]
 8017cb0:	b2f6      	uxtb	r6, r6
 8017cb2:	4283      	cmp	r3, r0
 8017cb4:	4637      	mov	r7, r6
 8017cb6:	dc04      	bgt.n	8017cc2 <__swbuf_r+0x3a>
 8017cb8:	4621      	mov	r1, r4
 8017cba:	4628      	mov	r0, r5
 8017cbc:	f7ff ffaa 	bl	8017c14 <_fflush_r>
 8017cc0:	b9e0      	cbnz	r0, 8017cfc <__swbuf_r+0x74>
 8017cc2:	68a3      	ldr	r3, [r4, #8]
 8017cc4:	3b01      	subs	r3, #1
 8017cc6:	60a3      	str	r3, [r4, #8]
 8017cc8:	6823      	ldr	r3, [r4, #0]
 8017cca:	1c5a      	adds	r2, r3, #1
 8017ccc:	6022      	str	r2, [r4, #0]
 8017cce:	701e      	strb	r6, [r3, #0]
 8017cd0:	6962      	ldr	r2, [r4, #20]
 8017cd2:	1c43      	adds	r3, r0, #1
 8017cd4:	429a      	cmp	r2, r3
 8017cd6:	d004      	beq.n	8017ce2 <__swbuf_r+0x5a>
 8017cd8:	89a3      	ldrh	r3, [r4, #12]
 8017cda:	07db      	lsls	r3, r3, #31
 8017cdc:	d506      	bpl.n	8017cec <__swbuf_r+0x64>
 8017cde:	2e0a      	cmp	r6, #10
 8017ce0:	d104      	bne.n	8017cec <__swbuf_r+0x64>
 8017ce2:	4621      	mov	r1, r4
 8017ce4:	4628      	mov	r0, r5
 8017ce6:	f7ff ff95 	bl	8017c14 <_fflush_r>
 8017cea:	b938      	cbnz	r0, 8017cfc <__swbuf_r+0x74>
 8017cec:	4638      	mov	r0, r7
 8017cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cf0:	4621      	mov	r1, r4
 8017cf2:	4628      	mov	r0, r5
 8017cf4:	f000 f806 	bl	8017d04 <__swsetup_r>
 8017cf8:	2800      	cmp	r0, #0
 8017cfa:	d0d5      	beq.n	8017ca8 <__swbuf_r+0x20>
 8017cfc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017d00:	e7f4      	b.n	8017cec <__swbuf_r+0x64>
	...

08017d04 <__swsetup_r>:
 8017d04:	b538      	push	{r3, r4, r5, lr}
 8017d06:	4b2a      	ldr	r3, [pc, #168]	; (8017db0 <__swsetup_r+0xac>)
 8017d08:	4605      	mov	r5, r0
 8017d0a:	6818      	ldr	r0, [r3, #0]
 8017d0c:	460c      	mov	r4, r1
 8017d0e:	b118      	cbz	r0, 8017d18 <__swsetup_r+0x14>
 8017d10:	6a03      	ldr	r3, [r0, #32]
 8017d12:	b90b      	cbnz	r3, 8017d18 <__swsetup_r+0x14>
 8017d14:	f7fe fffe 	bl	8016d14 <__sinit>
 8017d18:	89a3      	ldrh	r3, [r4, #12]
 8017d1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017d1e:	0718      	lsls	r0, r3, #28
 8017d20:	d422      	bmi.n	8017d68 <__swsetup_r+0x64>
 8017d22:	06d9      	lsls	r1, r3, #27
 8017d24:	d407      	bmi.n	8017d36 <__swsetup_r+0x32>
 8017d26:	2309      	movs	r3, #9
 8017d28:	602b      	str	r3, [r5, #0]
 8017d2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017d2e:	81a3      	strh	r3, [r4, #12]
 8017d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017d34:	e034      	b.n	8017da0 <__swsetup_r+0x9c>
 8017d36:	0758      	lsls	r0, r3, #29
 8017d38:	d512      	bpl.n	8017d60 <__swsetup_r+0x5c>
 8017d3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017d3c:	b141      	cbz	r1, 8017d50 <__swsetup_r+0x4c>
 8017d3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017d42:	4299      	cmp	r1, r3
 8017d44:	d002      	beq.n	8017d4c <__swsetup_r+0x48>
 8017d46:	4628      	mov	r0, r5
 8017d48:	f7ff fa5e 	bl	8017208 <_free_r>
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	6363      	str	r3, [r4, #52]	; 0x34
 8017d50:	89a3      	ldrh	r3, [r4, #12]
 8017d52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017d56:	81a3      	strh	r3, [r4, #12]
 8017d58:	2300      	movs	r3, #0
 8017d5a:	6063      	str	r3, [r4, #4]
 8017d5c:	6923      	ldr	r3, [r4, #16]
 8017d5e:	6023      	str	r3, [r4, #0]
 8017d60:	89a3      	ldrh	r3, [r4, #12]
 8017d62:	f043 0308 	orr.w	r3, r3, #8
 8017d66:	81a3      	strh	r3, [r4, #12]
 8017d68:	6923      	ldr	r3, [r4, #16]
 8017d6a:	b94b      	cbnz	r3, 8017d80 <__swsetup_r+0x7c>
 8017d6c:	89a3      	ldrh	r3, [r4, #12]
 8017d6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017d76:	d003      	beq.n	8017d80 <__swsetup_r+0x7c>
 8017d78:	4621      	mov	r1, r4
 8017d7a:	4628      	mov	r0, r5
 8017d7c:	f000 f847 	bl	8017e0e <__smakebuf_r>
 8017d80:	89a0      	ldrh	r0, [r4, #12]
 8017d82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017d86:	f010 0301 	ands.w	r3, r0, #1
 8017d8a:	d00a      	beq.n	8017da2 <__swsetup_r+0x9e>
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	60a3      	str	r3, [r4, #8]
 8017d90:	6963      	ldr	r3, [r4, #20]
 8017d92:	425b      	negs	r3, r3
 8017d94:	61a3      	str	r3, [r4, #24]
 8017d96:	6923      	ldr	r3, [r4, #16]
 8017d98:	b943      	cbnz	r3, 8017dac <__swsetup_r+0xa8>
 8017d9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017d9e:	d1c4      	bne.n	8017d2a <__swsetup_r+0x26>
 8017da0:	bd38      	pop	{r3, r4, r5, pc}
 8017da2:	0781      	lsls	r1, r0, #30
 8017da4:	bf58      	it	pl
 8017da6:	6963      	ldrpl	r3, [r4, #20]
 8017da8:	60a3      	str	r3, [r4, #8]
 8017daa:	e7f4      	b.n	8017d96 <__swsetup_r+0x92>
 8017dac:	2000      	movs	r0, #0
 8017dae:	e7f7      	b.n	8017da0 <__swsetup_r+0x9c>
 8017db0:	2000010c 	.word	0x2000010c

08017db4 <abort>:
 8017db4:	b508      	push	{r3, lr}
 8017db6:	2006      	movs	r0, #6
 8017db8:	f000 f88e 	bl	8017ed8 <raise>
 8017dbc:	2001      	movs	r0, #1
 8017dbe:	f7ea fe95 	bl	8002aec <_exit>

08017dc2 <__swhatbuf_r>:
 8017dc2:	b570      	push	{r4, r5, r6, lr}
 8017dc4:	460c      	mov	r4, r1
 8017dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017dca:	2900      	cmp	r1, #0
 8017dcc:	b096      	sub	sp, #88	; 0x58
 8017dce:	4615      	mov	r5, r2
 8017dd0:	461e      	mov	r6, r3
 8017dd2:	da0d      	bge.n	8017df0 <__swhatbuf_r+0x2e>
 8017dd4:	89a3      	ldrh	r3, [r4, #12]
 8017dd6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017dda:	f04f 0100 	mov.w	r1, #0
 8017dde:	bf0c      	ite	eq
 8017de0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017de4:	2340      	movne	r3, #64	; 0x40
 8017de6:	2000      	movs	r0, #0
 8017de8:	6031      	str	r1, [r6, #0]
 8017dea:	602b      	str	r3, [r5, #0]
 8017dec:	b016      	add	sp, #88	; 0x58
 8017dee:	bd70      	pop	{r4, r5, r6, pc}
 8017df0:	466a      	mov	r2, sp
 8017df2:	f000 f879 	bl	8017ee8 <_fstat_r>
 8017df6:	2800      	cmp	r0, #0
 8017df8:	dbec      	blt.n	8017dd4 <__swhatbuf_r+0x12>
 8017dfa:	9901      	ldr	r1, [sp, #4]
 8017dfc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8017e00:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017e04:	4259      	negs	r1, r3
 8017e06:	4159      	adcs	r1, r3
 8017e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017e0c:	e7eb      	b.n	8017de6 <__swhatbuf_r+0x24>

08017e0e <__smakebuf_r>:
 8017e0e:	898b      	ldrh	r3, [r1, #12]
 8017e10:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017e12:	079d      	lsls	r5, r3, #30
 8017e14:	4606      	mov	r6, r0
 8017e16:	460c      	mov	r4, r1
 8017e18:	d507      	bpl.n	8017e2a <__smakebuf_r+0x1c>
 8017e1a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017e1e:	6023      	str	r3, [r4, #0]
 8017e20:	6123      	str	r3, [r4, #16]
 8017e22:	2301      	movs	r3, #1
 8017e24:	6163      	str	r3, [r4, #20]
 8017e26:	b002      	add	sp, #8
 8017e28:	bd70      	pop	{r4, r5, r6, pc}
 8017e2a:	ab01      	add	r3, sp, #4
 8017e2c:	466a      	mov	r2, sp
 8017e2e:	f7ff ffc8 	bl	8017dc2 <__swhatbuf_r>
 8017e32:	9900      	ldr	r1, [sp, #0]
 8017e34:	4605      	mov	r5, r0
 8017e36:	4630      	mov	r0, r6
 8017e38:	f7fe fd34 	bl	80168a4 <_malloc_r>
 8017e3c:	b948      	cbnz	r0, 8017e52 <__smakebuf_r+0x44>
 8017e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e42:	059a      	lsls	r2, r3, #22
 8017e44:	d4ef      	bmi.n	8017e26 <__smakebuf_r+0x18>
 8017e46:	f023 0303 	bic.w	r3, r3, #3
 8017e4a:	f043 0302 	orr.w	r3, r3, #2
 8017e4e:	81a3      	strh	r3, [r4, #12]
 8017e50:	e7e3      	b.n	8017e1a <__smakebuf_r+0xc>
 8017e52:	89a3      	ldrh	r3, [r4, #12]
 8017e54:	6020      	str	r0, [r4, #0]
 8017e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017e5a:	81a3      	strh	r3, [r4, #12]
 8017e5c:	9b00      	ldr	r3, [sp, #0]
 8017e5e:	6163      	str	r3, [r4, #20]
 8017e60:	9b01      	ldr	r3, [sp, #4]
 8017e62:	6120      	str	r0, [r4, #16]
 8017e64:	b15b      	cbz	r3, 8017e7e <__smakebuf_r+0x70>
 8017e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017e6a:	4630      	mov	r0, r6
 8017e6c:	f000 f84e 	bl	8017f0c <_isatty_r>
 8017e70:	b128      	cbz	r0, 8017e7e <__smakebuf_r+0x70>
 8017e72:	89a3      	ldrh	r3, [r4, #12]
 8017e74:	f023 0303 	bic.w	r3, r3, #3
 8017e78:	f043 0301 	orr.w	r3, r3, #1
 8017e7c:	81a3      	strh	r3, [r4, #12]
 8017e7e:	89a3      	ldrh	r3, [r4, #12]
 8017e80:	431d      	orrs	r5, r3
 8017e82:	81a5      	strh	r5, [r4, #12]
 8017e84:	e7cf      	b.n	8017e26 <__smakebuf_r+0x18>

08017e86 <_raise_r>:
 8017e86:	291f      	cmp	r1, #31
 8017e88:	b538      	push	{r3, r4, r5, lr}
 8017e8a:	4604      	mov	r4, r0
 8017e8c:	460d      	mov	r5, r1
 8017e8e:	d904      	bls.n	8017e9a <_raise_r+0x14>
 8017e90:	2316      	movs	r3, #22
 8017e92:	6003      	str	r3, [r0, #0]
 8017e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017e98:	bd38      	pop	{r3, r4, r5, pc}
 8017e9a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017e9c:	b112      	cbz	r2, 8017ea4 <_raise_r+0x1e>
 8017e9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017ea2:	b94b      	cbnz	r3, 8017eb8 <_raise_r+0x32>
 8017ea4:	4620      	mov	r0, r4
 8017ea6:	f000 f853 	bl	8017f50 <_getpid_r>
 8017eaa:	462a      	mov	r2, r5
 8017eac:	4601      	mov	r1, r0
 8017eae:	4620      	mov	r0, r4
 8017eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017eb4:	f000 b83a 	b.w	8017f2c <_kill_r>
 8017eb8:	2b01      	cmp	r3, #1
 8017eba:	d00a      	beq.n	8017ed2 <_raise_r+0x4c>
 8017ebc:	1c59      	adds	r1, r3, #1
 8017ebe:	d103      	bne.n	8017ec8 <_raise_r+0x42>
 8017ec0:	2316      	movs	r3, #22
 8017ec2:	6003      	str	r3, [r0, #0]
 8017ec4:	2001      	movs	r0, #1
 8017ec6:	e7e7      	b.n	8017e98 <_raise_r+0x12>
 8017ec8:	2400      	movs	r4, #0
 8017eca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017ece:	4628      	mov	r0, r5
 8017ed0:	4798      	blx	r3
 8017ed2:	2000      	movs	r0, #0
 8017ed4:	e7e0      	b.n	8017e98 <_raise_r+0x12>
	...

08017ed8 <raise>:
 8017ed8:	4b02      	ldr	r3, [pc, #8]	; (8017ee4 <raise+0xc>)
 8017eda:	4601      	mov	r1, r0
 8017edc:	6818      	ldr	r0, [r3, #0]
 8017ede:	f7ff bfd2 	b.w	8017e86 <_raise_r>
 8017ee2:	bf00      	nop
 8017ee4:	2000010c 	.word	0x2000010c

08017ee8 <_fstat_r>:
 8017ee8:	b538      	push	{r3, r4, r5, lr}
 8017eea:	4d07      	ldr	r5, [pc, #28]	; (8017f08 <_fstat_r+0x20>)
 8017eec:	2300      	movs	r3, #0
 8017eee:	4604      	mov	r4, r0
 8017ef0:	4608      	mov	r0, r1
 8017ef2:	4611      	mov	r1, r2
 8017ef4:	602b      	str	r3, [r5, #0]
 8017ef6:	f7ea fe48 	bl	8002b8a <_fstat>
 8017efa:	1c43      	adds	r3, r0, #1
 8017efc:	d102      	bne.n	8017f04 <_fstat_r+0x1c>
 8017efe:	682b      	ldr	r3, [r5, #0]
 8017f00:	b103      	cbz	r3, 8017f04 <_fstat_r+0x1c>
 8017f02:	6023      	str	r3, [r4, #0]
 8017f04:	bd38      	pop	{r3, r4, r5, pc}
 8017f06:	bf00      	nop
 8017f08:	20010e34 	.word	0x20010e34

08017f0c <_isatty_r>:
 8017f0c:	b538      	push	{r3, r4, r5, lr}
 8017f0e:	4d06      	ldr	r5, [pc, #24]	; (8017f28 <_isatty_r+0x1c>)
 8017f10:	2300      	movs	r3, #0
 8017f12:	4604      	mov	r4, r0
 8017f14:	4608      	mov	r0, r1
 8017f16:	602b      	str	r3, [r5, #0]
 8017f18:	f7ea fe47 	bl	8002baa <_isatty>
 8017f1c:	1c43      	adds	r3, r0, #1
 8017f1e:	d102      	bne.n	8017f26 <_isatty_r+0x1a>
 8017f20:	682b      	ldr	r3, [r5, #0]
 8017f22:	b103      	cbz	r3, 8017f26 <_isatty_r+0x1a>
 8017f24:	6023      	str	r3, [r4, #0]
 8017f26:	bd38      	pop	{r3, r4, r5, pc}
 8017f28:	20010e34 	.word	0x20010e34

08017f2c <_kill_r>:
 8017f2c:	b538      	push	{r3, r4, r5, lr}
 8017f2e:	4d07      	ldr	r5, [pc, #28]	; (8017f4c <_kill_r+0x20>)
 8017f30:	2300      	movs	r3, #0
 8017f32:	4604      	mov	r4, r0
 8017f34:	4608      	mov	r0, r1
 8017f36:	4611      	mov	r1, r2
 8017f38:	602b      	str	r3, [r5, #0]
 8017f3a:	f7ea fdc7 	bl	8002acc <_kill>
 8017f3e:	1c43      	adds	r3, r0, #1
 8017f40:	d102      	bne.n	8017f48 <_kill_r+0x1c>
 8017f42:	682b      	ldr	r3, [r5, #0]
 8017f44:	b103      	cbz	r3, 8017f48 <_kill_r+0x1c>
 8017f46:	6023      	str	r3, [r4, #0]
 8017f48:	bd38      	pop	{r3, r4, r5, pc}
 8017f4a:	bf00      	nop
 8017f4c:	20010e34 	.word	0x20010e34

08017f50 <_getpid_r>:
 8017f50:	f7ea bdb4 	b.w	8002abc <_getpid>

08017f54 <_init>:
 8017f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f56:	bf00      	nop
 8017f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f5a:	bc08      	pop	{r3}
 8017f5c:	469e      	mov	lr, r3
 8017f5e:	4770      	bx	lr

08017f60 <_fini>:
 8017f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f62:	bf00      	nop
 8017f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f66:	bc08      	pop	{r3}
 8017f68:	469e      	mov	lr, r3
 8017f6a:	4770      	bx	lr
