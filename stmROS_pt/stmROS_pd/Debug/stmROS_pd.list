
stmROS_pd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001827c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e34  08018420  08018420  00028420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019254  08019254  00030114  2**0
                  CONTENTS
  4 .ARM          00000008  08019254  08019254  00029254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801925c  0801925c  00030114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801925c  0801925c  0002925c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019264  08019264  00029264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08019268  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010d30  20000118  0801937c  00030118  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20010e48  0801937c  00030e48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f9c3  00000000  00000000  000301ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004136  00000000  00000000  0004fb7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001918  00000000  00000000  00053cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001391  00000000  00000000  000555d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c30d  00000000  00000000  00056961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e0d0  00000000  00000000  00072c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a630e  00000000  00000000  00090d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000079c0  00000000  00000000  0013704c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013ea0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000118 	.word	0x20000118
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08018404 	.word	0x08018404

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000011c 	.word	0x2000011c
 80001dc:	08018404 	.word	0x08018404

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_ldivmod>:
 8000d58:	b97b      	cbnz	r3, 8000d7a <__aeabi_ldivmod+0x22>
 8000d5a:	b972      	cbnz	r2, 8000d7a <__aeabi_ldivmod+0x22>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bfbe      	ittt	lt
 8000d60:	2000      	movlt	r0, #0
 8000d62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000d66:	e006      	blt.n	8000d76 <__aeabi_ldivmod+0x1e>
 8000d68:	bf08      	it	eq
 8000d6a:	2800      	cmpeq	r0, #0
 8000d6c:	bf1c      	itt	ne
 8000d6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000d72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d76:	f000 b9bb 	b.w	80010f0 <__aeabi_idiv0>
 8000d7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d82:	2900      	cmp	r1, #0
 8000d84:	db09      	blt.n	8000d9a <__aeabi_ldivmod+0x42>
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db1a      	blt.n	8000dc0 <__aeabi_ldivmod+0x68>
 8000d8a:	f000 f84d 	bl	8000e28 <__udivmoddi4>
 8000d8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d96:	b004      	add	sp, #16
 8000d98:	4770      	bx	lr
 8000d9a:	4240      	negs	r0, r0
 8000d9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db1b      	blt.n	8000ddc <__aeabi_ldivmod+0x84>
 8000da4:	f000 f840 	bl	8000e28 <__udivmoddi4>
 8000da8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db0:	b004      	add	sp, #16
 8000db2:	4240      	negs	r0, r0
 8000db4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db8:	4252      	negs	r2, r2
 8000dba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dbe:	4770      	bx	lr
 8000dc0:	4252      	negs	r2, r2
 8000dc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dc6:	f000 f82f 	bl	8000e28 <__udivmoddi4>
 8000dca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd2:	b004      	add	sp, #16
 8000dd4:	4240      	negs	r0, r0
 8000dd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dda:	4770      	bx	lr
 8000ddc:	4252      	negs	r2, r2
 8000dde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000de2:	f000 f821 	bl	8000e28 <__udivmoddi4>
 8000de6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dee:	b004      	add	sp, #16
 8000df0:	4252      	negs	r2, r2
 8000df2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000df6:	4770      	bx	lr

08000df8 <__aeabi_uldivmod>:
 8000df8:	b953      	cbnz	r3, 8000e10 <__aeabi_uldivmod+0x18>
 8000dfa:	b94a      	cbnz	r2, 8000e10 <__aeabi_uldivmod+0x18>
 8000dfc:	2900      	cmp	r1, #0
 8000dfe:	bf08      	it	eq
 8000e00:	2800      	cmpeq	r0, #0
 8000e02:	bf1c      	itt	ne
 8000e04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000e08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000e0c:	f000 b970 	b.w	80010f0 <__aeabi_idiv0>
 8000e10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e18:	f000 f806 	bl	8000e28 <__udivmoddi4>
 8000e1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e24:	b004      	add	sp, #16
 8000e26:	4770      	bx	lr

08000e28 <__udivmoddi4>:
 8000e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e2c:	9e08      	ldr	r6, [sp, #32]
 8000e2e:	460d      	mov	r5, r1
 8000e30:	4604      	mov	r4, r0
 8000e32:	460f      	mov	r7, r1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d14a      	bne.n	8000ece <__udivmoddi4+0xa6>
 8000e38:	428a      	cmp	r2, r1
 8000e3a:	4694      	mov	ip, r2
 8000e3c:	d965      	bls.n	8000f0a <__udivmoddi4+0xe2>
 8000e3e:	fab2 f382 	clz	r3, r2
 8000e42:	b143      	cbz	r3, 8000e56 <__udivmoddi4+0x2e>
 8000e44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e48:	f1c3 0220 	rsb	r2, r3, #32
 8000e4c:	409f      	lsls	r7, r3
 8000e4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000e52:	4317      	orrs	r7, r2
 8000e54:	409c      	lsls	r4, r3
 8000e56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e5a:	fa1f f58c 	uxth.w	r5, ip
 8000e5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e62:	0c22      	lsrs	r2, r4, #16
 8000e64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e6c:	fb01 f005 	mul.w	r0, r1, r5
 8000e70:	4290      	cmp	r0, r2
 8000e72:	d90a      	bls.n	8000e8a <__udivmoddi4+0x62>
 8000e74:	eb1c 0202 	adds.w	r2, ip, r2
 8000e78:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000e7c:	f080 811c 	bcs.w	80010b8 <__udivmoddi4+0x290>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f240 8119 	bls.w	80010b8 <__udivmoddi4+0x290>
 8000e86:	3902      	subs	r1, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a12      	subs	r2, r2, r0
 8000e8c:	b2a4      	uxth	r4, r4
 8000e8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e9a:	fb00 f505 	mul.w	r5, r0, r5
 8000e9e:	42a5      	cmp	r5, r4
 8000ea0:	d90a      	bls.n	8000eb8 <__udivmoddi4+0x90>
 8000ea2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000eaa:	f080 8107 	bcs.w	80010bc <__udivmoddi4+0x294>
 8000eae:	42a5      	cmp	r5, r4
 8000eb0:	f240 8104 	bls.w	80010bc <__udivmoddi4+0x294>
 8000eb4:	4464      	add	r4, ip
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ebc:	1b64      	subs	r4, r4, r5
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	b11e      	cbz	r6, 8000eca <__udivmoddi4+0xa2>
 8000ec2:	40dc      	lsrs	r4, r3
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	e9c6 4300 	strd	r4, r3, [r6]
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0xbc>
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	f000 80ed 	beq.w	80010b2 <__udivmoddi4+0x28a>
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e9c6 0500 	strd	r0, r5, [r6]
 8000ede:	4608      	mov	r0, r1
 8000ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee4:	fab3 f183 	clz	r1, r3
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	d149      	bne.n	8000f80 <__udivmoddi4+0x158>
 8000eec:	42ab      	cmp	r3, r5
 8000eee:	d302      	bcc.n	8000ef6 <__udivmoddi4+0xce>
 8000ef0:	4282      	cmp	r2, r0
 8000ef2:	f200 80f8 	bhi.w	80010e6 <__udivmoddi4+0x2be>
 8000ef6:	1a84      	subs	r4, r0, r2
 8000ef8:	eb65 0203 	sbc.w	r2, r5, r3
 8000efc:	2001      	movs	r0, #1
 8000efe:	4617      	mov	r7, r2
 8000f00:	2e00      	cmp	r6, #0
 8000f02:	d0e2      	beq.n	8000eca <__udivmoddi4+0xa2>
 8000f04:	e9c6 4700 	strd	r4, r7, [r6]
 8000f08:	e7df      	b.n	8000eca <__udivmoddi4+0xa2>
 8000f0a:	b902      	cbnz	r2, 8000f0e <__udivmoddi4+0xe6>
 8000f0c:	deff      	udf	#255	; 0xff
 8000f0e:	fab2 f382 	clz	r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f040 8090 	bne.w	8001038 <__udivmoddi4+0x210>
 8000f18:	1a8a      	subs	r2, r1, r2
 8000f1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1e:	fa1f fe8c 	uxth.w	lr, ip
 8000f22:	2101      	movs	r1, #1
 8000f24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f28:	fb07 2015 	mls	r0, r7, r5, r2
 8000f2c:	0c22      	lsrs	r2, r4, #16
 8000f2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f32:	fb0e f005 	mul.w	r0, lr, r5
 8000f36:	4290      	cmp	r0, r2
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x124>
 8000f3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x122>
 8000f44:	4290      	cmp	r0, r2
 8000f46:	f200 80cb 	bhi.w	80010e0 <__udivmoddi4+0x2b8>
 8000f4a:	4645      	mov	r5, r8
 8000f4c:	1a12      	subs	r2, r2, r0
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f54:	fb07 2210 	mls	r2, r7, r0, r2
 8000f58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000f60:	45a6      	cmp	lr, r4
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x14e>
 8000f64:	eb1c 0404 	adds.w	r4, ip, r4
 8000f68:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000f6c:	d202      	bcs.n	8000f74 <__udivmoddi4+0x14c>
 8000f6e:	45a6      	cmp	lr, r4
 8000f70:	f200 80bb 	bhi.w	80010ea <__udivmoddi4+0x2c2>
 8000f74:	4610      	mov	r0, r2
 8000f76:	eba4 040e 	sub.w	r4, r4, lr
 8000f7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f7e:	e79f      	b.n	8000ec0 <__udivmoddi4+0x98>
 8000f80:	f1c1 0720 	rsb	r7, r1, #32
 8000f84:	408b      	lsls	r3, r1
 8000f86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000f92:	fa20 f307 	lsr.w	r3, r0, r7
 8000f96:	40fd      	lsrs	r5, r7
 8000f98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f9c:	4323      	orrs	r3, r4
 8000f9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000fa2:	fa1f fe8c 	uxth.w	lr, ip
 8000fa6:	fb09 5518 	mls	r5, r9, r8, r5
 8000faa:	0c1c      	lsrs	r4, r3, #16
 8000fac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000fb0:	fb08 f50e 	mul.w	r5, r8, lr
 8000fb4:	42a5      	cmp	r5, r4
 8000fb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000fba:	fa00 f001 	lsl.w	r0, r0, r1
 8000fbe:	d90b      	bls.n	8000fd8 <__udivmoddi4+0x1b0>
 8000fc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000fc8:	f080 8088 	bcs.w	80010dc <__udivmoddi4+0x2b4>
 8000fcc:	42a5      	cmp	r5, r4
 8000fce:	f240 8085 	bls.w	80010dc <__udivmoddi4+0x2b4>
 8000fd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000fd6:	4464      	add	r4, ip
 8000fd8:	1b64      	subs	r4, r4, r5
 8000fda:	b29d      	uxth	r5, r3
 8000fdc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fe0:	fb09 4413 	mls	r4, r9, r3, r4
 8000fe4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fe8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fec:	45a6      	cmp	lr, r4
 8000fee:	d908      	bls.n	8001002 <__udivmoddi4+0x1da>
 8000ff0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ff8:	d26c      	bcs.n	80010d4 <__udivmoddi4+0x2ac>
 8000ffa:	45a6      	cmp	lr, r4
 8000ffc:	d96a      	bls.n	80010d4 <__udivmoddi4+0x2ac>
 8000ffe:	3b02      	subs	r3, #2
 8001000:	4464      	add	r4, ip
 8001002:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001006:	fba3 9502 	umull	r9, r5, r3, r2
 800100a:	eba4 040e 	sub.w	r4, r4, lr
 800100e:	42ac      	cmp	r4, r5
 8001010:	46c8      	mov	r8, r9
 8001012:	46ae      	mov	lr, r5
 8001014:	d356      	bcc.n	80010c4 <__udivmoddi4+0x29c>
 8001016:	d053      	beq.n	80010c0 <__udivmoddi4+0x298>
 8001018:	b156      	cbz	r6, 8001030 <__udivmoddi4+0x208>
 800101a:	ebb0 0208 	subs.w	r2, r0, r8
 800101e:	eb64 040e 	sbc.w	r4, r4, lr
 8001022:	fa04 f707 	lsl.w	r7, r4, r7
 8001026:	40ca      	lsrs	r2, r1
 8001028:	40cc      	lsrs	r4, r1
 800102a:	4317      	orrs	r7, r2
 800102c:	e9c6 7400 	strd	r7, r4, [r6]
 8001030:	4618      	mov	r0, r3
 8001032:	2100      	movs	r1, #0
 8001034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001038:	f1c3 0120 	rsb	r1, r3, #32
 800103c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001040:	fa20 f201 	lsr.w	r2, r0, r1
 8001044:	fa25 f101 	lsr.w	r1, r5, r1
 8001048:	409d      	lsls	r5, r3
 800104a:	432a      	orrs	r2, r5
 800104c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001050:	fa1f fe8c 	uxth.w	lr, ip
 8001054:	fbb1 f0f7 	udiv	r0, r1, r7
 8001058:	fb07 1510 	mls	r5, r7, r0, r1
 800105c:	0c11      	lsrs	r1, r2, #16
 800105e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001062:	fb00 f50e 	mul.w	r5, r0, lr
 8001066:	428d      	cmp	r5, r1
 8001068:	fa04 f403 	lsl.w	r4, r4, r3
 800106c:	d908      	bls.n	8001080 <__udivmoddi4+0x258>
 800106e:	eb1c 0101 	adds.w	r1, ip, r1
 8001072:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001076:	d22f      	bcs.n	80010d8 <__udivmoddi4+0x2b0>
 8001078:	428d      	cmp	r5, r1
 800107a:	d92d      	bls.n	80010d8 <__udivmoddi4+0x2b0>
 800107c:	3802      	subs	r0, #2
 800107e:	4461      	add	r1, ip
 8001080:	1b49      	subs	r1, r1, r5
 8001082:	b292      	uxth	r2, r2
 8001084:	fbb1 f5f7 	udiv	r5, r1, r7
 8001088:	fb07 1115 	mls	r1, r7, r5, r1
 800108c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001090:	fb05 f10e 	mul.w	r1, r5, lr
 8001094:	4291      	cmp	r1, r2
 8001096:	d908      	bls.n	80010aa <__udivmoddi4+0x282>
 8001098:	eb1c 0202 	adds.w	r2, ip, r2
 800109c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80010a0:	d216      	bcs.n	80010d0 <__udivmoddi4+0x2a8>
 80010a2:	4291      	cmp	r1, r2
 80010a4:	d914      	bls.n	80010d0 <__udivmoddi4+0x2a8>
 80010a6:	3d02      	subs	r5, #2
 80010a8:	4462      	add	r2, ip
 80010aa:	1a52      	subs	r2, r2, r1
 80010ac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80010b0:	e738      	b.n	8000f24 <__udivmoddi4+0xfc>
 80010b2:	4631      	mov	r1, r6
 80010b4:	4630      	mov	r0, r6
 80010b6:	e708      	b.n	8000eca <__udivmoddi4+0xa2>
 80010b8:	4639      	mov	r1, r7
 80010ba:	e6e6      	b.n	8000e8a <__udivmoddi4+0x62>
 80010bc:	4610      	mov	r0, r2
 80010be:	e6fb      	b.n	8000eb8 <__udivmoddi4+0x90>
 80010c0:	4548      	cmp	r0, r9
 80010c2:	d2a9      	bcs.n	8001018 <__udivmoddi4+0x1f0>
 80010c4:	ebb9 0802 	subs.w	r8, r9, r2
 80010c8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010cc:	3b01      	subs	r3, #1
 80010ce:	e7a3      	b.n	8001018 <__udivmoddi4+0x1f0>
 80010d0:	4645      	mov	r5, r8
 80010d2:	e7ea      	b.n	80010aa <__udivmoddi4+0x282>
 80010d4:	462b      	mov	r3, r5
 80010d6:	e794      	b.n	8001002 <__udivmoddi4+0x1da>
 80010d8:	4640      	mov	r0, r8
 80010da:	e7d1      	b.n	8001080 <__udivmoddi4+0x258>
 80010dc:	46d0      	mov	r8, sl
 80010de:	e77b      	b.n	8000fd8 <__udivmoddi4+0x1b0>
 80010e0:	3d02      	subs	r5, #2
 80010e2:	4462      	add	r2, ip
 80010e4:	e732      	b.n	8000f4c <__udivmoddi4+0x124>
 80010e6:	4608      	mov	r0, r1
 80010e8:	e70a      	b.n	8000f00 <__udivmoddi4+0xd8>
 80010ea:	4464      	add	r4, ip
 80010ec:	3802      	subs	r0, #2
 80010ee:	e742      	b.n	8000f76 <__udivmoddi4+0x14e>

080010f0 <__aeabi_idiv0>:
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001100:	f007 fc0e 	bl	8008920 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001104:	4b58      	ldr	r3, [pc, #352]	; (8001268 <pvPortMallocMicroROS+0x174>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 800110c:	f000 f980 	bl	8001410 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001110:	4b56      	ldr	r3, [pc, #344]	; (800126c <pvPortMallocMicroROS+0x178>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4013      	ands	r3, r2
 8001118:	2b00      	cmp	r3, #0
 800111a:	f040 808e 	bne.w	800123a <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d01d      	beq.n	8001160 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001124:	2208      	movs	r2, #8
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	2b00      	cmp	r3, #0
 8001134:	d014      	beq.n	8001160 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f023 0307 	bic.w	r3, r3, #7
 800113c:	3308      	adds	r3, #8
 800113e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00a      	beq.n	8001160 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800114a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800114e:	f383 8811 	msr	BASEPRI, r3
 8001152:	f3bf 8f6f 	isb	sy
 8001156:	f3bf 8f4f 	dsb	sy
 800115a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800115c:	bf00      	nop
 800115e:	e7fe      	b.n	800115e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d069      	beq.n	800123a <pvPortMallocMicroROS+0x146>
 8001166:	4b42      	ldr	r3, [pc, #264]	; (8001270 <pvPortMallocMicroROS+0x17c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	429a      	cmp	r2, r3
 800116e:	d864      	bhi.n	800123a <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001170:	4b40      	ldr	r3, [pc, #256]	; (8001274 <pvPortMallocMicroROS+0x180>)
 8001172:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001174:	4b3f      	ldr	r3, [pc, #252]	; (8001274 <pvPortMallocMicroROS+0x180>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800117a:	e004      	b.n	8001186 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	429a      	cmp	r2, r3
 800118e:	d903      	bls.n	8001198 <pvPortMallocMicroROS+0xa4>
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1f1      	bne.n	800117c <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001198:	4b33      	ldr	r3, [pc, #204]	; (8001268 <pvPortMallocMicroROS+0x174>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800119e:	429a      	cmp	r2, r3
 80011a0:	d04b      	beq.n	800123a <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2208      	movs	r2, #8
 80011a8:	4413      	add	r3, r2
 80011aa:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	6a3b      	ldr	r3, [r7, #32]
 80011b2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	1ad2      	subs	r2, r2, r3
 80011bc:	2308      	movs	r3, #8
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d91f      	bls.n	8001204 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80011c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00a      	beq.n	80011ec <pvPortMallocMicroROS+0xf8>
	__asm volatile
 80011d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011da:	f383 8811 	msr	BASEPRI, r3
 80011de:	f3bf 8f6f 	isb	sy
 80011e2:	f3bf 8f4f 	dsb	sy
 80011e6:	613b      	str	r3, [r7, #16]
}
 80011e8:	bf00      	nop
 80011ea:	e7fe      	b.n	80011ea <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	1ad2      	subs	r2, r2, r3
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80011fe:	69b8      	ldr	r0, [r7, #24]
 8001200:	f000 f968 	bl	80014d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <pvPortMallocMicroROS+0x17c>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	4a18      	ldr	r2, [pc, #96]	; (8001270 <pvPortMallocMicroROS+0x17c>)
 8001210:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <pvPortMallocMicroROS+0x17c>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4b18      	ldr	r3, [pc, #96]	; (8001278 <pvPortMallocMicroROS+0x184>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d203      	bcs.n	8001226 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <pvPortMallocMicroROS+0x17c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a15      	ldr	r2, [pc, #84]	; (8001278 <pvPortMallocMicroROS+0x184>)
 8001224:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <pvPortMallocMicroROS+0x178>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	431a      	orrs	r2, r3
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800123a:	f007 fb7f 	bl	800893c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00a      	beq.n	800125e <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8001248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800124c:	f383 8811 	msr	BASEPRI, r3
 8001250:	f3bf 8f6f 	isb	sy
 8001254:	f3bf 8f4f 	dsb	sy
 8001258:	60fb      	str	r3, [r7, #12]
}
 800125a:	bf00      	nop
 800125c:	e7fe      	b.n	800125c <pvPortMallocMicroROS+0x168>
	return pvReturn;
 800125e:	69fb      	ldr	r3, [r7, #28]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20003d3c 	.word	0x20003d3c
 800126c:	20003d48 	.word	0x20003d48
 8001270:	20003d40 	.word	0x20003d40
 8001274:	20003d34 	.word	0x20003d34
 8001278:	20003d44 	.word	0x20003d44

0800127c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d048      	beq.n	8001320 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800128e:	2308      	movs	r3, #8
 8001290:	425b      	negs	r3, r3
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	4413      	add	r3, r2
 8001296:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <vPortFreeMicroROS+0xac>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10a      	bne.n	80012c0 <vPortFreeMicroROS+0x44>
	__asm volatile
 80012aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ae:	f383 8811 	msr	BASEPRI, r3
 80012b2:	f3bf 8f6f 	isb	sy
 80012b6:	f3bf 8f4f 	dsb	sy
 80012ba:	60fb      	str	r3, [r7, #12]
}
 80012bc:	bf00      	nop
 80012be:	e7fe      	b.n	80012be <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00a      	beq.n	80012de <vPortFreeMicroROS+0x62>
	__asm volatile
 80012c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012cc:	f383 8811 	msr	BASEPRI, r3
 80012d0:	f3bf 8f6f 	isb	sy
 80012d4:	f3bf 8f4f 	dsb	sy
 80012d8:	60bb      	str	r3, [r7, #8]
}
 80012da:	bf00      	nop
 80012dc:	e7fe      	b.n	80012dc <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <vPortFreeMicroROS+0xac>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d019      	beq.n	8001320 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d115      	bne.n	8001320 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <vPortFreeMicroROS+0xac>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	401a      	ands	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001304:	f007 fb0c 	bl	8008920 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <vPortFreeMicroROS+0xb0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4413      	add	r3, r2
 8001312:	4a06      	ldr	r2, [pc, #24]	; (800132c <vPortFreeMicroROS+0xb0>)
 8001314:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001316:	6938      	ldr	r0, [r7, #16]
 8001318:	f000 f8dc 	bl	80014d4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800131c:	f007 fb0e 	bl	800893c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001320:	bf00      	nop
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20003d48 	.word	0x20003d48
 800132c:	20003d40 	.word	0x20003d40

08001330 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800133c:	2308      	movs	r3, #8
 800133e:	425b      	negs	r3, r3
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	4413      	add	r3, r2
 8001344:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <getBlockSize+0x38>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	43db      	mvns	r3, r3
 8001354:	4013      	ands	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]

	return count;
 8001358:	68fb      	ldr	r3, [r7, #12]
}
 800135a:	4618      	mov	r0, r3
 800135c:	371c      	adds	r7, #28
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20003d48 	.word	0x20003d48

0800136c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001376:	f007 fad3 	bl	8008920 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800137a:	6838      	ldr	r0, [r7, #0]
 800137c:	f7ff feba 	bl	80010f4 <pvPortMallocMicroROS>
 8001380:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d017      	beq.n	80013b8 <pvPortReallocMicroROS+0x4c>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d014      	beq.n	80013b8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffce 	bl	8001330 <getBlockSize>
 8001394:	4603      	mov	r3, r0
 8001396:	2208      	movs	r2, #8
 8001398:	1a9b      	subs	r3, r3, r2
 800139a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d201      	bcs.n	80013a8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	68b8      	ldr	r0, [r7, #8]
 80013ae:	f016 f94a 	bl	8017646 <memcpy>

		vPortFreeMicroROS(pv);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ff62 	bl	800127c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80013b8:	f007 fac0 	bl	800893c <xTaskResumeAll>

	return newmem;
 80013bc:	68bb      	ldr	r3, [r7, #8]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80013d0:	f007 faa6 	bl	8008920 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	fb02 f303 	mul.w	r3, r2, r3
 80013dc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f7ff fe88 	bl	80010f4 <pvPortMallocMicroROS>
 80013e4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	613b      	str	r3, [r7, #16]

  	while(count--)
 80013ea:	e004      	b.n	80013f6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	613a      	str	r2, [r7, #16]
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	1e5a      	subs	r2, r3, #1
 80013fa:	617a      	str	r2, [r7, #20]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f5      	bne.n	80013ec <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001400:	f007 fa9c 	bl	800893c <xTaskResumeAll>
  	return mem;
 8001404:	68fb      	ldr	r3, [r7, #12]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001416:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800141a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800141c:	4b27      	ldr	r3, [pc, #156]	; (80014bc <prvHeapInit+0xac>)
 800141e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00c      	beq.n	8001444 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3307      	adds	r3, #7
 800142e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f023 0307 	bic.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <prvHeapInit+0xac>)
 8001440:	4413      	add	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001448:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <prvHeapInit+0xb0>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <prvHeapInit+0xb0>)
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	4413      	add	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800145c:	2208      	movs	r2, #8
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	1a9b      	subs	r3, r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f023 0307 	bic.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4a15      	ldr	r2, [pc, #84]	; (80014c4 <prvHeapInit+0xb4>)
 8001470:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <prvHeapInit+0xb4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2200      	movs	r2, #0
 8001478:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <prvHeapInit+0xb4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	1ad2      	subs	r2, r2, r3
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <prvHeapInit+0xb4>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <prvHeapInit+0xb8>)
 800149e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4a09      	ldr	r2, [pc, #36]	; (80014cc <prvHeapInit+0xbc>)
 80014a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <prvHeapInit+0xc0>)
 80014aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80014ae:	601a      	str	r2, [r3, #0]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	20000134 	.word	0x20000134
 80014c0:	20003d34 	.word	0x20003d34
 80014c4:	20003d3c 	.word	0x20003d3c
 80014c8:	20003d44 	.word	0x20003d44
 80014cc:	20003d40 	.word	0x20003d40
 80014d0:	20003d48 	.word	0x20003d48

080014d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80014dc:	4b28      	ldr	r3, [pc, #160]	; (8001580 <prvInsertBlockIntoFreeList+0xac>)
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	e002      	b.n	80014e8 <prvInsertBlockIntoFreeList+0x14>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d8f7      	bhi.n	80014e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	4413      	add	r3, r2
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	429a      	cmp	r2, r3
 8001502:	d108      	bne.n	8001516 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	441a      	add	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	441a      	add	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d118      	bne.n	800155c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <prvInsertBlockIntoFreeList+0xb0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d00d      	beq.n	8001552 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	441a      	add	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	e008      	b.n	8001564 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <prvInsertBlockIntoFreeList+0xb0>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	e003      	b.n	8001564 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	429a      	cmp	r2, r3
 800156a:	d002      	beq.n	8001572 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20003d34 	.word	0x20003d34
 8001584:	20003d3c 	.word	0x20003d3c

08001588 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001596:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800159c:	4904      	ldr	r1, [pc, #16]	; (80015b0 <cubemx_transport_open+0x28>)
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f004 feb0 	bl	8006304 <HAL_UART_Receive_DMA>
    return true;
 80015a4:	2301      	movs	r3, #1
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20003d4c 	.word	0x20003d4c

080015b4 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80015c2:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f004 fec2 	bl	800634e <HAL_UART_DMAStop>
    return true;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80015e8:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b20      	cmp	r3, #32
 80015f4:	d11c      	bne.n	8001630 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	461a      	mov	r2, r3
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	6978      	ldr	r0, [r7, #20]
 8001600:	f004 fe10 	bl	8006224 <HAL_UART_Transmit_DMA>
 8001604:	4603      	mov	r3, r0
 8001606:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001608:	e002      	b.n	8001610 <cubemx_transport_write+0x3c>
            osDelay(1);
 800160a:	2001      	movs	r0, #1
 800160c:	f006 f93c 	bl	8007888 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001610:	7cfb      	ldrb	r3, [r7, #19]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d105      	bne.n	8001622 <cubemx_transport_write+0x4e>
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b20      	cmp	r3, #32
 8001620:	d1f3      	bne.n	800160a <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001622:	7cfb      	ldrb	r3, [r7, #19]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <cubemx_transport_write+0x58>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	e002      	b.n	8001632 <cubemx_transport_write+0x5e>
 800162c:	2300      	movs	r3, #0
 800162e:	e000      	b.n	8001632 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001630:	2300      	movs	r3, #0
    }
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001650:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001656:	b672      	cpsid	i
}
 8001658:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001666:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <cubemx_transport_read+0x9c>)
 8001668:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800166a:	b662      	cpsie	i
}
 800166c:	bf00      	nop
        __enable_irq();
        ms_used++;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3301      	adds	r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001674:	2001      	movs	r0, #1
 8001676:	f006 f907 	bl	8007888 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <cubemx_transport_read+0xa0>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <cubemx_transport_read+0x9c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d103      	bne.n	800168e <cubemx_transport_read+0x52>
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	dbe3      	blt.n	8001656 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001692:	e011      	b.n	80016b8 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <cubemx_transport_read+0xa0>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	440b      	add	r3, r1
 800169e:	4910      	ldr	r1, [pc, #64]	; (80016e0 <cubemx_transport_read+0xa4>)
 80016a0:	5c8a      	ldrb	r2, [r1, r2]
 80016a2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <cubemx_transport_read+0xa0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3301      	adds	r3, #1
 80016aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <cubemx_transport_read+0xa0>)
 80016b0:	6013      	str	r3, [r2, #0]
        wrote++;
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	3301      	adds	r3, #1
 80016b6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <cubemx_transport_read+0xa0>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <cubemx_transport_read+0x9c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d003      	beq.n	80016cc <cubemx_transport_read+0x90>
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d3e3      	bcc.n	8001694 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80016cc:	69bb      	ldr	r3, [r7, #24]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3720      	adds	r7, #32
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20004550 	.word	0x20004550
 80016dc:	2000454c 	.word	0x2000454c
 80016e0:	20003d4c 	.word	0x20003d4c

080016e4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80016e8:	f3bf 8f4f 	dsb	sy
}
 80016ec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <__NVIC_SystemReset+0x24>)
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80016f6:	4904      	ldr	r1, [pc, #16]	; (8001708 <__NVIC_SystemReset+0x24>)
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <__NVIC_SystemReset+0x28>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80016fe:	f3bf 8f4f 	dsb	sy
}
 8001702:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <__NVIC_SystemReset+0x20>
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	05fa0004 	.word	0x05fa0004

08001710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	flag2 = 1;
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <main+0x60>)
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800171a:	f001 fba1 	bl	8002e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800171e:	f000 f833 	bl	8001788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001722:	f000 fa17 	bl	8001b54 <MX_GPIO_Init>
  MX_DMA_Init();
 8001726:	f000 f9ed 	bl	8001b04 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800172a:	f000 f9c1 	bl	8001ab0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800172e:	f000 f971 	bl	8001a14 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001732:	f000 f893 	bl	800185c <MX_I2C1_Init>
  MX_I2C3_Init();
 8001736:	f000 f8bf 	bl	80018b8 <MX_I2C3_Init>
  MX_TIM2_Init();
 800173a:	f000 f8eb 	bl	8001914 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800173e:	2100      	movs	r1, #0
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <main+0x64>)
 8001742:	f003 fe73 	bl	800542c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001746:	2104      	movs	r1, #4
 8001748:	480a      	ldr	r0, [pc, #40]	; (8001774 <main+0x64>)
 800174a:	f003 fe6f 	bl	800542c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 800174e:	480a      	ldr	r0, [pc, #40]	; (8001778 <main+0x68>)
 8001750:	f003 fdb0 	bl	80052b4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001754:	f005 ffbc 	bl	80076d0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001758:	4a08      	ldr	r2, [pc, #32]	; (800177c <main+0x6c>)
 800175a:	2100      	movs	r1, #0
 800175c:	4808      	ldr	r0, [pc, #32]	; (8001780 <main+0x70>)
 800175e:	f006 f801 	bl	8007764 <osThreadNew>
 8001762:	4603      	mov	r3, r0
 8001764:	4a07      	ldr	r2, [pc, #28]	; (8001784 <main+0x74>)
 8001766:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001768:	f005 ffd6 	bl	8007718 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800176c:	e7fe      	b.n	800176c <main+0x5c>
 800176e:	bf00      	nop
 8001770:	20007721 	.word	0x20007721
 8001774:	200045fc 	.word	0x200045fc
 8001778:	20004644 	.word	0x20004644
 800177c:	080184f0 	.word	0x080184f0
 8001780:	08001c49 	.word	0x08001c49
 8001784:	20004794 	.word	0x20004794

08001788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b094      	sub	sp, #80	; 0x50
 800178c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	f107 0320 	add.w	r3, r7, #32
 8001792:	2230      	movs	r2, #48	; 0x30
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f015 fe36 	bl	8017408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <SystemClock_Config+0xcc>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	4a27      	ldr	r2, [pc, #156]	; (8001854 <SystemClock_Config+0xcc>)
 80017b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ba:	6413      	str	r3, [r2, #64]	; 0x40
 80017bc:	4b25      	ldr	r3, [pc, #148]	; (8001854 <SystemClock_Config+0xcc>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <SystemClock_Config+0xd0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017d4:	4a20      	ldr	r2, [pc, #128]	; (8001858 <SystemClock_Config+0xd0>)
 80017d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <SystemClock_Config+0xd0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e8:	2301      	movs	r3, #1
 80017ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f2:	2302      	movs	r3, #2
 80017f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017fc:	2304      	movs	r3, #4
 80017fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001800:	2354      	movs	r3, #84	; 0x54
 8001802:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001804:	2302      	movs	r3, #2
 8001806:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001808:	2307      	movs	r3, #7
 800180a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180c:	f107 0320 	add.w	r3, r7, #32
 8001810:	4618      	mov	r0, r3
 8001812:	f003 f835 	bl	8004880 <HAL_RCC_OscConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800181c:	f000 fe00 	bl	8002420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001820:	230f      	movs	r3, #15
 8001822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001824:	2302      	movs	r3, #2
 8001826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800182c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	2102      	movs	r1, #2
 800183c:	4618      	mov	r0, r3
 800183e:	f003 fa97 	bl	8004d70 <HAL_RCC_ClockConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001848:	f000 fdea 	bl	8002420 <Error_Handler>
  }
}
 800184c:	bf00      	nop
 800184e:	3750      	adds	r7, #80	; 0x50
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	40007000 	.word	0x40007000

0800185c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <MX_I2C1_Init+0x50>)
 8001862:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <MX_I2C1_Init+0x54>)
 8001864:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_I2C1_Init+0x50>)
 8001868:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <MX_I2C1_Init+0x58>)
 800186a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_I2C1_Init+0x50>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_I2C1_Init+0x50>)
 8001874:	2200      	movs	r2, #0
 8001876:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_I2C1_Init+0x50>)
 800187a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800187e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <MX_I2C1_Init+0x50>)
 8001882:	2200      	movs	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_I2C1_Init+0x50>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <MX_I2C1_Init+0x50>)
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_I2C1_Init+0x50>)
 8001894:	2200      	movs	r2, #0
 8001896:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001898:	4804      	ldr	r0, [pc, #16]	; (80018ac <MX_I2C1_Init+0x50>)
 800189a:	f002 f9a5 	bl	8003be8 <HAL_I2C_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018a4:	f000 fdbc 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20004554 	.word	0x20004554
 80018b0:	40005400 	.word	0x40005400
 80018b4:	000186a0 	.word	0x000186a0

080018b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <MX_I2C3_Init+0x50>)
 80018be:	4a13      	ldr	r2, [pc, #76]	; (800190c <MX_I2C3_Init+0x54>)
 80018c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <MX_I2C3_Init+0x50>)
 80018c4:	4a12      	ldr	r2, [pc, #72]	; (8001910 <MX_I2C3_Init+0x58>)
 80018c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <MX_I2C3_Init+0x50>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <MX_I2C3_Init+0x50>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <MX_I2C3_Init+0x50>)
 80018d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018da:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018dc:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <MX_I2C3_Init+0x50>)
 80018de:	2200      	movs	r2, #0
 80018e0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <MX_I2C3_Init+0x50>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e8:	4b07      	ldr	r3, [pc, #28]	; (8001908 <MX_I2C3_Init+0x50>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <MX_I2C3_Init+0x50>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018f4:	4804      	ldr	r0, [pc, #16]	; (8001908 <MX_I2C3_Init+0x50>)
 80018f6:	f002 f977 	bl	8003be8 <HAL_I2C_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001900:	f000 fd8e 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200045a8 	.word	0x200045a8
 800190c:	40005c00 	.word	0x40005c00
 8001910:	000186a0 	.word	0x000186a0

08001914 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08e      	sub	sp, #56	; 0x38
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001928:	f107 0320 	add.w	r3, r7, #32
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
 8001940:	615a      	str	r2, [r3, #20]
 8001942:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001944:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <MX_TIM2_Init+0xfc>)
 8001946:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800194a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5;
 800194c:	4b30      	ldr	r3, [pc, #192]	; (8001a10 <MX_TIM2_Init+0xfc>)
 800194e:	2205      	movs	r2, #5
 8001950:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001952:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <MX_TIM2_Init+0xfc>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001958:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <MX_TIM2_Init+0xfc>)
 800195a:	f242 7210 	movw	r2, #10000	; 0x2710
 800195e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001960:	4b2b      	ldr	r3, [pc, #172]	; (8001a10 <MX_TIM2_Init+0xfc>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001966:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <MX_TIM2_Init+0xfc>)
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800196c:	4828      	ldr	r0, [pc, #160]	; (8001a10 <MX_TIM2_Init+0xfc>)
 800196e:	f003 fc51 	bl	8005214 <HAL_TIM_Base_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001978:	f000 fd52 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001986:	4619      	mov	r1, r3
 8001988:	4821      	ldr	r0, [pc, #132]	; (8001a10 <MX_TIM2_Init+0xfc>)
 800198a:	f003 ffb1 	bl	80058f0 <HAL_TIM_ConfigClockSource>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001994:	f000 fd44 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001998:	481d      	ldr	r0, [pc, #116]	; (8001a10 <MX_TIM2_Init+0xfc>)
 800199a:	f003 fced 	bl	8005378 <HAL_TIM_PWM_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80019a4:	f000 fd3c 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b0:	f107 0320 	add.w	r3, r7, #32
 80019b4:	4619      	mov	r1, r3
 80019b6:	4816      	ldr	r0, [pc, #88]	; (8001a10 <MX_TIM2_Init+0xfc>)
 80019b8:	f004 fb62 	bl	8006080 <HAL_TIMEx_MasterConfigSynchronization>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80019c2:	f000 fd2d 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c6:	2360      	movs	r3, #96	; 0x60
 80019c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2200      	movs	r2, #0
 80019da:	4619      	mov	r1, r3
 80019dc:	480c      	ldr	r0, [pc, #48]	; (8001a10 <MX_TIM2_Init+0xfc>)
 80019de:	f003 fec5 	bl	800576c <HAL_TIM_PWM_ConfigChannel>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80019e8:	f000 fd1a 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	2204      	movs	r2, #4
 80019f0:	4619      	mov	r1, r3
 80019f2:	4807      	ldr	r0, [pc, #28]	; (8001a10 <MX_TIM2_Init+0xfc>)
 80019f4:	f003 feba 	bl	800576c <HAL_TIM_PWM_ConfigChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80019fe:	f000 fd0f 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a02:	4803      	ldr	r0, [pc, #12]	; (8001a10 <MX_TIM2_Init+0xfc>)
 8001a04:	f000 ff80 	bl	8002908 <HAL_TIM_MspPostInit>

}
 8001a08:	bf00      	nop
 8001a0a:	3738      	adds	r7, #56	; 0x38
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200045fc 	.word	0x200045fc

08001a14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a28:	463b      	mov	r3, r7
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a30:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <MX_TIM3_Init+0x94>)
 8001a32:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <MX_TIM3_Init+0x98>)
 8001a34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8001a36:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <MX_TIM3_Init+0x94>)
 8001a38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <MX_TIM3_Init+0x94>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4199;
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <MX_TIM3_Init+0x94>)
 8001a46:	f241 0267 	movw	r2, #4199	; 0x1067
 8001a4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4c:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <MX_TIM3_Init+0x94>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <MX_TIM3_Init+0x94>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a58:	4813      	ldr	r0, [pc, #76]	; (8001aa8 <MX_TIM3_Init+0x94>)
 8001a5a:	f003 fbdb 	bl	8005214 <HAL_TIM_Base_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a64:	f000 fcdc 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a6e:	f107 0308 	add.w	r3, r7, #8
 8001a72:	4619      	mov	r1, r3
 8001a74:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <MX_TIM3_Init+0x94>)
 8001a76:	f003 ff3b 	bl	80058f0 <HAL_TIM_ConfigClockSource>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a80:	f000 fcce 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a8c:	463b      	mov	r3, r7
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_TIM3_Init+0x94>)
 8001a92:	f004 faf5 	bl	8006080 <HAL_TIMEx_MasterConfigSynchronization>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a9c:	f000 fcc0 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20004644 	.word	0x20004644
 8001aac:	40000400 	.word	0x40000400

08001ab0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <MX_USART2_UART_Init+0x50>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ae8:	f004 fb4c 	bl	8006184 <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001af2:	f000 fc95 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2000468c 	.word	0x2000468c
 8001b00:	40004400 	.word	0x40004400

08001b04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <MX_DMA_Init+0x4c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a0f      	ldr	r2, [pc, #60]	; (8001b50 <MX_DMA_Init+0x4c>)
 8001b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <MX_DMA_Init+0x4c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2105      	movs	r1, #5
 8001b2a:	2010      	movs	r0, #16
 8001b2c:	f001 fa92 	bl	8003054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b30:	2010      	movs	r0, #16
 8001b32:	f001 faab 	bl	800308c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2105      	movs	r1, #5
 8001b3a:	2011      	movs	r0, #17
 8001b3c:	f001 fa8a 	bl	8003054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001b40:	2011      	movs	r0, #17
 8001b42:	f001 faa3 	bl	800308c <HAL_NVIC_EnableIRQ>

}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800

08001b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <MX_GPIO_Init+0xd0>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a2c      	ldr	r2, [pc, #176]	; (8001c24 <MX_GPIO_Init+0xd0>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <MX_GPIO_Init+0xd0>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <MX_GPIO_Init+0xd0>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a25      	ldr	r2, [pc, #148]	; (8001c24 <MX_GPIO_Init+0xd0>)
 8001b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <MX_GPIO_Init+0xd0>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <MX_GPIO_Init+0xd0>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a1e      	ldr	r2, [pc, #120]	; (8001c24 <MX_GPIO_Init+0xd0>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <MX_GPIO_Init+0xd0>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <MX_GPIO_Init+0xd0>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a17      	ldr	r2, [pc, #92]	; (8001c24 <MX_GPIO_Init+0xd0>)
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <MX_GPIO_Init+0xd0>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2120      	movs	r1, #32
 8001bde:	4812      	ldr	r0, [pc, #72]	; (8001c28 <MX_GPIO_Init+0xd4>)
 8001be0:	f001 ffe8 	bl	8003bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	480c      	ldr	r0, [pc, #48]	; (8001c2c <MX_GPIO_Init+0xd8>)
 8001bfc:	f001 fe56 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c00:	2320      	movs	r3, #32
 8001c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c04:	2301      	movs	r3, #1
 8001c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4619      	mov	r1, r3
 8001c16:	4804      	ldr	r0, [pc, #16]	; (8001c28 <MX_GPIO_Init+0xd4>)
 8001c18:	f001 fe48 	bl	80038ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c1c:	bf00      	nop
 8001c1e:	3728      	adds	r7, #40	; 0x28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020000 	.word	0x40020000
 8001c2c:	40020800 	.word	0x40020800

08001c30 <subscription_callback>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void subscription_callback(const void * msgin)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  // Cast received message to used type

  const std_msgs__msg__Int32 * msgSubscriber = (const std_msgs__msg__Int32 *)msgin;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	60fb      	str	r3, [r7, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c4c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8001c50:	af04      	add	r7, sp, #16
 8001c52:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001c56:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c5a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	  // micro-ROS configuration
	flag4 = 1;
 8001c5c:	4bb6      	ldr	r3, [pc, #728]	; (8001f38 <StartDefaultTask+0x2f0>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	701a      	strb	r2, [r3, #0]

	  rmw_uros_set_custom_transport(
 8001c62:	4bb6      	ldr	r3, [pc, #728]	; (8001f3c <StartDefaultTask+0x2f4>)
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	4bb6      	ldr	r3, [pc, #728]	; (8001f40 <StartDefaultTask+0x2f8>)
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	4bb6      	ldr	r3, [pc, #728]	; (8001f44 <StartDefaultTask+0x2fc>)
 8001c6c:	4ab6      	ldr	r2, [pc, #728]	; (8001f48 <StartDefaultTask+0x300>)
 8001c6e:	49b7      	ldr	r1, [pc, #732]	; (8001f4c <StartDefaultTask+0x304>)
 8001c70:	2001      	movs	r0, #1
 8001c72:	f009 fbb9 	bl	800b3e8 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001c76:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f009 fae6 	bl	800b24c <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001c80:	4bb3      	ldr	r3, [pc, #716]	; (8001f50 <StartDefaultTask+0x308>)
 8001c82:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001c86:	4bb3      	ldr	r3, [pc, #716]	; (8001f54 <StartDefaultTask+0x30c>)
 8001c88:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001c8c:	4bb2      	ldr	r3, [pc, #712]	; (8001f58 <StartDefaultTask+0x310>)
 8001c8e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001c92:	4bb2      	ldr	r3, [pc, #712]	; (8001f5c <StartDefaultTask+0x314>)
 8001c94:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001c98:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f009 fae3 	bl	800b268 <rcutils_set_default_allocator>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	f083 0301 	eor.w	r3, r3, #1
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d004      	beq.n	8001cb8 <StartDefaultTask+0x70>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8001cae:	f240 213b 	movw	r1, #571	; 0x23b
 8001cb2:	48ab      	ldr	r0, [pc, #684]	; (8001f60 <StartDefaultTask+0x318>)
 8001cb4:	f015 fabc 	bl	8017230 <iprintf>
	  rcl_subscription_t subscriber;

	  rclc_executor_t executor;


	  allocator = rcl_get_default_allocator();
 8001cb8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f009 faf1 	bl	800b2a4 <rcutils_get_default_allocator>
 8001cc2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001cc6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001cca:	f507 74ae 	add.w	r4, r7, #348	; 0x15c
 8001cce:	461d      	mov	r5, r3
 8001cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd4:	682b      	ldr	r3, [r5, #0]
 8001cd6:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8001cd8:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001cdc:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	f009 f9bc 	bl	800b060 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "pt_node", "", &support);
 8001ce8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001cec:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 8001cf0:	4a9c      	ldr	r2, [pc, #624]	; (8001f64 <StartDefaultTask+0x31c>)
 8001cf2:	499d      	ldr	r1, [pc, #628]	; (8001f68 <StartDefaultTask+0x320>)
 8001cf4:	f009 f9fe 	bl	800b0f4 <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 8001cf8:	f00a f902 	bl	800bf00 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8001d02:	f507 70d8 	add.w	r0, r7, #432	; 0x1b0
 8001d06:	4b99      	ldr	r3, [pc, #612]	; (8001f6c <StartDefaultTask+0x324>)
 8001d08:	f009 fa30 	bl	800b16c <rclc_publisher_init_default>
	    &publisher,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32), //std_msgs/msg/Int32
	    "pt_publisher");

	  rclc_publisher_init_default(
 8001d0c:	f00a f8f8 	bl	800bf00 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001d10:	4602      	mov	r2, r0
 8001d12:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8001d16:	f507 70d4 	add.w	r0, r7, #424	; 0x1a8
 8001d1a:	4b95      	ldr	r3, [pc, #596]	; (8001f70 <StartDefaultTask+0x328>)
 8001d1c:	f009 fa26 	bl	800b16c <rclc_publisher_init_default>
	    &publisherTest,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32), //std_msgs/msg/Int32
	    "pt_test_publisher");

	  msgPublisher.data = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	  msgPublisherTest.data = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

	  // Create subscriber
	  rclc_subscription_init_default(
 8001d2c:	f00a f8e8 	bl	800bf00 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8001d36:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001d3a:	4b8e      	ldr	r3, [pc, #568]	; (8001f74 <StartDefaultTask+0x32c>)
 8001d3c:	f009 fa4a 	bl	800b1d4 <rclc_subscription_init_default>
	    &subscriber,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    "pt_subscriber");

	  msgSubscriber.data = 15390;
 8001d40:	4b8d      	ldr	r3, [pc, #564]	; (8001f78 <StartDefaultTask+0x330>)
 8001d42:	f643 421e 	movw	r2, #15390	; 0x3c1e
 8001d46:	601a      	str	r2, [r3, #0]


	  executor = rclc_executor_get_zero_initialized_executor();
 8001d48:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001d4c:	f5a3 74b0 	sub.w	r4, r3, #352	; 0x160
 8001d50:	f107 0318 	add.w	r3, r7, #24
 8001d54:	4618      	mov	r0, r3
 8001d56:	f008 feb1 	bl	800aabc <rclc_executor_get_zero_initialized_executor>
 8001d5a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001d5e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001d62:	4620      	mov	r0, r4
 8001d64:	4619      	mov	r1, r3
 8001d66:	2388      	movs	r3, #136	; 0x88
 8001d68:	461a      	mov	r2, r3
 8001d6a:	f015 fc6c 	bl	8017646 <memcpy>
	  rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001d6e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001d72:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8001d76:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f008 fea8 	bl	800aad0 <rclc_executor_init>
	  rclc_executor_add_subscription(
 8001d80:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8001d84:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8001d88:	2300      	movs	r3, #0
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	4b7b      	ldr	r3, [pc, #492]	; (8001f7c <StartDefaultTask+0x334>)
 8001d8e:	4a7a      	ldr	r2, [pc, #488]	; (8001f78 <StartDefaultTask+0x330>)
 8001d90:	f008 ff0e 	bl	800abb0 <rclc_executor_add_subscription>

	  //rcl_subscription_fini(&subscriber, &node);
	  //rcl_node_fini(&node);

	  HAL_StatusTypeDef panStatus;
	  uint8_t as5600_panData[3] = {0};
 8001d94:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001d98:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d9c:	4a78      	ldr	r2, [pc, #480]	; (8001f80 <StartDefaultTask+0x338>)
 8001d9e:	8812      	ldrh	r2, [r2, #0]
 8001da0:	801a      	strh	r2, [r3, #0]
 8001da2:	2200      	movs	r2, #0
 8001da4:	709a      	strb	r2, [r3, #2]
	  uint16_t panLowbyte;
	  uint16_t panHighbyte;
	  uint16_t panRawAngle;
	  float panFloatAngle;
	  int panFlag = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

	  HAL_StatusTypeDef tiltStatus;
	  uint8_t as5600_tiltData[3] = {0};
 8001dac:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001db0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001db4:	4a72      	ldr	r2, [pc, #456]	; (8001f80 <StartDefaultTask+0x338>)
 8001db6:	8812      	ldrh	r2, [r2, #0]
 8001db8:	801a      	strh	r2, [r3, #0]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	709a      	strb	r2, [r3, #2]
	  uint16_t tiltLowbyte;
	  uint16_t tiltHighbyte;
	  uint16_t tiltRawAngle;
	  float tiltFloatAngle;

	  int tiltFlag = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c


	  int64_t newPanTarget = 0;
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	e9c7 2380 	strd	r2, r3, [r7, #512]	; 0x200
	  int64_t newTiltTarget = 0;
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	e9c7 237e 	strd	r2, r3, [r7, #504]	; 0x1f8
	  int64_t oldPanTarget = 0;
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	e9c7 2388 	strd	r2, r3, [r7, #544]	; 0x220
	  int64_t oldTiltTarget = 0;
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218

	  const float panKp = 400;
 8001df4:	4b63      	ldr	r3, [pc, #396]	; (8001f84 <StartDefaultTask+0x33c>)
 8001df6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
	  const float panKd = 50;
 8001dfa:	4b63      	ldr	r3, [pc, #396]	; (8001f88 <StartDefaultTask+0x340>)
 8001dfc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	  const float tiltKp = 120;
 8001e00:	4b62      	ldr	r3, [pc, #392]	; (8001f8c <StartDefaultTask+0x344>)
 8001e02:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	  const float tiltKd = 60;
 8001e06:	4b62      	ldr	r3, [pc, #392]	; (8001f90 <StartDefaultTask+0x348>)
 8001e08:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

	  uint32_t panAndTilt = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4

	  uint8_t agentState = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3
	  uint8_t agentCounter = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	  agentState = (RMW_RET_OK == rmw_uros_ping_agent(100, 1));
 8001e1e:	2101      	movs	r1, #1
 8001e20:	2064      	movs	r0, #100	; 0x64
 8001e22:	f009 faf7 	bl	800b414 <rmw_uros_ping_agent>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3


	  while(1)
	  {
		  rclc_executor_spin_some(&executor,1000*1000*40);
 8001e36:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001e3a:	4a56      	ldr	r2, [pc, #344]	; (8001f94 <StartDefaultTask+0x34c>)
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	4608      	mov	r0, r1
 8001e42:	f009 f8d5 	bl	800aff0 <rclc_executor_spin_some>
		  /*if(msgSubscriber.data == 6969)
		  {
			  NVIC_SystemReset();
		  }*/

		  msgPublisherTest.data = 1;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
		  rcl_publish(&publisherTest, &msgPublisherTest, NULL);
 8001e4c:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8001e50:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001e54:	2200      	movs	r2, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f008 faa2 	bl	800a3a0 <rcl_publish>

		  flag5 = 1;
 8001e5c:	4b4e      	ldr	r3, [pc, #312]	; (8001f98 <StartDefaultTask+0x350>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
		  if(flag == 1)
 8001e62:	4b4e      	ldr	r3, [pc, #312]	; (8001f9c <StartDefaultTask+0x354>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d1e5      	bne.n	8001e36 <StartDefaultTask+0x1ee>
		  	{
			  	agentCounter ++;
 8001e6a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
			  	if(agentCounter == 20 && agentState == 0)
 8001e74:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8001e78:	2b14      	cmp	r3, #20
 8001e7a:	d116      	bne.n	8001eaa <StartDefaultTask+0x262>
 8001e7c:	f897 31e3 	ldrb.w	r3, [r7, #483]	; 0x1e3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d112      	bne.n	8001eaa <StartDefaultTask+0x262>
			  	{
			  		agentCounter = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
			  		if(agentState != (RMW_RET_OK == rmw_uros_ping_agent(200, 1)))
 8001e8a:	f897 41e3 	ldrb.w	r4, [r7, #483]	; 0x1e3
 8001e8e:	2101      	movs	r1, #1
 8001e90:	20c8      	movs	r0, #200	; 0xc8
 8001e92:	f009 fabf 	bl	800b414 <rmw_uros_ping_agent>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	429c      	cmp	r4, r3
 8001ea4:	d001      	beq.n	8001eaa <StartDefaultTask+0x262>
					{
						NVIC_SystemReset();
 8001ea6:	f7ff fc1d 	bl	80016e4 <__NVIC_SystemReset>
						//reset
					}
			  	}


		  		flag = 0;
 8001eaa:	4b3c      	ldr	r3, [pc, #240]	; (8001f9c <StartDefaultTask+0x354>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
		  		flag6 = 1;
 8001eb0:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <StartDefaultTask+0x358>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]

		  		tiltTarget = msgSubscriber.data >> 9;
 8001eb6:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <StartDefaultTask+0x330>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	125b      	asrs	r3, r3, #9
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	4b39      	ldr	r3, [pc, #228]	; (8001fa4 <StartDefaultTask+0x35c>)
 8001ec0:	801a      	strh	r2, [r3, #0]
		  		tiltTarget = tiltTarget + 80;
 8001ec2:	4b38      	ldr	r3, [pc, #224]	; (8001fa4 <StartDefaultTask+0x35c>)
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	3350      	adds	r3, #80	; 0x50
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <StartDefaultTask+0x35c>)
 8001ecc:	801a      	strh	r2, [r3, #0]
		  		panTarget = msgSubscriber.data & 511;
 8001ece:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <StartDefaultTask+0x330>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <StartDefaultTask+0x360>)
 8001edc:	801a      	strh	r2, [r3, #0]
		  		panTarget = panTarget + 2 + 8;
 8001ede:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <StartDefaultTask+0x360>)
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	330a      	adds	r3, #10
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <StartDefaultTask+0x360>)
 8001ee8:	801a      	strh	r2, [r3, #0]

		  		panStatus = HAL_I2C_Mem_Read(&hi2c1, AS5600_ADDR_PAN, 0x0B, 1, as5600_panData, 3, 500);
 8001eea:	236c      	movs	r3, #108	; 0x6c
 8001eec:	b299      	uxth	r1, r3
 8001eee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ef2:	9302      	str	r3, [sp, #8]
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	2301      	movs	r3, #1
 8001f00:	220b      	movs	r2, #11
 8001f02:	482a      	ldr	r0, [pc, #168]	; (8001fac <StartDefaultTask+0x364>)
 8001f04:	f001 ffb4 	bl	8003e70 <HAL_I2C_Mem_Read>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f887 31e2 	strb.w	r3, [r7, #482]	; 0x1e2
		  		if (panStatus == HAL_ERROR || panStatus == HAL_TIMEOUT)
 8001f0e:	f897 31e2 	ldrb.w	r3, [r7, #482]	; 0x1e2
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d003      	beq.n	8001f1e <StartDefaultTask+0x2d6>
 8001f16:	f897 31e2 	ldrb.w	r3, [r7, #482]	; 0x1e2
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d148      	bne.n	8001fb0 <StartDefaultTask+0x368>
		  		{
					msgPublisherTest.data = 11;
 8001f1e:	230b      	movs	r3, #11
 8001f20:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
					rcl_publish(&publisherTest, &msgPublisherTest, NULL);
 8001f24:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8001f28:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f008 fa36 	bl	800a3a0 <rcl_publish>
		  			NVIC_SystemReset();
 8001f34:	f7ff fbd6 	bl	80016e4 <__NVIC_SystemReset>
 8001f38:	20007723 	.word	0x20007723
 8001f3c:	0800163d 	.word	0x0800163d
 8001f40:	080015d5 	.word	0x080015d5
 8001f44:	080015b5 	.word	0x080015b5
 8001f48:	08001589 	.word	0x08001589
 8001f4c:	2000468c 	.word	0x2000468c
 8001f50:	0800242d 	.word	0x0800242d
 8001f54:	08002471 	.word	0x08002471
 8001f58:	080024a9 	.word	0x080024a9
 8001f5c:	08002515 	.word	0x08002515
 8001f60:	0801842c 	.word	0x0801842c
 8001f64:	08018454 	.word	0x08018454
 8001f68:	08018458 	.word	0x08018458
 8001f6c:	08018460 	.word	0x08018460
 8001f70:	08018470 	.word	0x08018470
 8001f74:	08018484 	.word	0x08018484
 8001f78:	20007728 	.word	0x20007728
 8001f7c:	08001c31 	.word	0x08001c31
 8001f80:	080184b0 	.word	0x080184b0
 8001f84:	43c80000 	.word	0x43c80000
 8001f88:	42480000 	.word	0x42480000
 8001f8c:	42f00000 	.word	0x42f00000
 8001f90:	42700000 	.word	0x42700000
 8001f94:	02625a00 	.word	0x02625a00
 8001f98:	20007724 	.word	0x20007724
 8001f9c:	20007720 	.word	0x20007720
 8001fa0:	20007725 	.word	0x20007725
 8001fa4:	20000002 	.word	0x20000002
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	20004554 	.word	0x20004554
		  		}

		  		panHighbyte = as5600_panData[1];
 8001fb0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001fb4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001fb8:	785b      	ldrb	r3, [r3, #1]
 8001fba:	f8a7 31e0 	strh.w	r3, [r7, #480]	; 0x1e0
		  		panLowbyte = as5600_panData[2];
 8001fbe:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001fc2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001fc6:	789b      	ldrb	r3, [r3, #2]
 8001fc8:	f8a7 31de 	strh.w	r3, [r7, #478]	; 0x1de
		  		panRawAngle = panHighbyte << 8 | panLowbyte;
 8001fcc:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	; 0x1e0
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	b21a      	sxth	r2, r3
 8001fd4:	f9b7 31de 	ldrsh.w	r3, [r7, #478]	; 0x1de
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	f8a7 31dc 	strh.w	r3, [r7, #476]	; 0x1dc
		  		panFloatAngle = panRawAngle * 0.087890625;
 8001fe0:	f8b7 31dc 	ldrh.w	r3, [r7, #476]	; 0x1dc
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fab5 	bl	8000554 <__aeabi_i2d>
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	4ba0      	ldr	r3, [pc, #640]	; (8002270 <StartDefaultTask+0x628>)
 8001ff0:	f7fe fb1a 	bl	8000628 <__aeabi_dmul>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f7fe fd4e 	bl	8000a9c <__aeabi_d2f>
 8002000:	4603      	mov	r3, r0
 8002002:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
		  		panDegAngle = (int)panFloatAngle;
 8002006:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 800200a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800200e:	ee17 3a90 	vmov	r3, s15
 8002012:	b29a      	uxth	r2, r3
 8002014:	4b97      	ldr	r3, [pc, #604]	; (8002274 <StartDefaultTask+0x62c>)
 8002016:	801a      	strh	r2, [r3, #0]
		  		if(panDegAngle < 148)
 8002018:	4b96      	ldr	r3, [pc, #600]	; (8002274 <StartDefaultTask+0x62c>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	2b93      	cmp	r3, #147	; 0x93
 800201e:	d806      	bhi.n	800202e <StartDefaultTask+0x3e6>
		  		{
		  		  panDegAngle = 360 -148 + panDegAngle;
 8002020:	4b94      	ldr	r3, [pc, #592]	; (8002274 <StartDefaultTask+0x62c>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	33d4      	adds	r3, #212	; 0xd4
 8002026:	b29a      	uxth	r2, r3
 8002028:	4b92      	ldr	r3, [pc, #584]	; (8002274 <StartDefaultTask+0x62c>)
 800202a:	801a      	strh	r2, [r3, #0]
 800202c:	e005      	b.n	800203a <StartDefaultTask+0x3f2>
		  		}
		  		else
		  		{
		  		  panDegAngle = panDegAngle - 148;
 800202e:	4b91      	ldr	r3, [pc, #580]	; (8002274 <StartDefaultTask+0x62c>)
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	3b94      	subs	r3, #148	; 0x94
 8002034:	b29a      	uxth	r2, r3
 8002036:	4b8f      	ldr	r3, [pc, #572]	; (8002274 <StartDefaultTask+0x62c>)
 8002038:	801a      	strh	r2, [r3, #0]
		  		}

				msgPublisherTest.data = 2;
 800203a:	2302      	movs	r3, #2
 800203c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
				rcl_publish(&publisherTest, &msgPublisherTest, NULL);
 8002040:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8002044:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002048:	2200      	movs	r2, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f008 f9a8 	bl	800a3a0 <rcl_publish>

		  		tiltStatus = HAL_I2C_Mem_Read(&hi2c3, AS5600_ADDR_TILT, 0x0B, 1, as5600_tiltData, 3, 500);
 8002050:	236c      	movs	r3, #108	; 0x6c
 8002052:	b299      	uxth	r1, r3
 8002054:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002058:	9302      	str	r3, [sp, #8]
 800205a:	2303      	movs	r3, #3
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	2301      	movs	r3, #1
 8002066:	220b      	movs	r2, #11
 8002068:	4883      	ldr	r0, [pc, #524]	; (8002278 <StartDefaultTask+0x630>)
 800206a:	f001 ff01 	bl	8003e70 <HAL_I2C_Mem_Read>
 800206e:	4603      	mov	r3, r0
 8002070:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
		  		if (tiltStatus == HAL_ERROR || tiltStatus == HAL_TIMEOUT)
 8002074:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002078:	2b01      	cmp	r3, #1
 800207a:	d003      	beq.n	8002084 <StartDefaultTask+0x43c>
 800207c:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002080:	2b03      	cmp	r3, #3
 8002082:	d10c      	bne.n	800209e <StartDefaultTask+0x456>
		  		{
					msgPublisherTest.data = 10;
 8002084:	230a      	movs	r3, #10
 8002086:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
					rcl_publish(&publisherTest, &msgPublisherTest, NULL);
 800208a:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 800208e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002092:	2200      	movs	r2, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f008 f983 	bl	800a3a0 <rcl_publish>
		  			NVIC_SystemReset();
 800209a:	f7ff fb23 	bl	80016e4 <__NVIC_SystemReset>
		  		}


				msgPublisherTest.data = 7;
 800209e:	2307      	movs	r3, #7
 80020a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
				rcl_publish(&publisherTest, &msgPublisherTest, NULL);
 80020a4:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 80020a8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80020ac:	2200      	movs	r2, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f008 f976 	bl	800a3a0 <rcl_publish>

		  		tiltHighbyte = as5600_tiltData[1];
 80020b4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80020b8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80020bc:	785b      	ldrb	r3, [r3, #1]
 80020be:	f8a7 31d4 	strh.w	r3, [r7, #468]	; 0x1d4
		  		tiltLowbyte = as5600_tiltData[2];
 80020c2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80020c6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80020ca:	789b      	ldrb	r3, [r3, #2]
 80020cc:	f8a7 31d2 	strh.w	r3, [r7, #466]	; 0x1d2
		  		tiltRawAngle = tiltHighbyte << 8 | tiltLowbyte;
 80020d0:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	b21a      	sxth	r2, r3
 80020d8:	f9b7 31d2 	ldrsh.w	r3, [r7, #466]	; 0x1d2
 80020dc:	4313      	orrs	r3, r2
 80020de:	b21b      	sxth	r3, r3
 80020e0:	f8a7 31d0 	strh.w	r3, [r7, #464]	; 0x1d0
		  		tiltFloatAngle = tiltRawAngle * 0.087890625;
 80020e4:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fa33 	bl	8000554 <__aeabi_i2d>
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	4b5f      	ldr	r3, [pc, #380]	; (8002270 <StartDefaultTask+0x628>)
 80020f4:	f7fe fa98 	bl	8000628 <__aeabi_dmul>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4610      	mov	r0, r2
 80020fe:	4619      	mov	r1, r3
 8002100:	f7fe fccc 	bl	8000a9c <__aeabi_d2f>
 8002104:	4603      	mov	r3, r0
 8002106:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
		  		tiltDegAngle = (int)tiltFloatAngle;
 800210a:	edd7 7a73 	vldr	s15, [r7, #460]	; 0x1cc
 800210e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002112:	ee17 3a90 	vmov	r3, s15
 8002116:	b29a      	uxth	r2, r3
 8002118:	4b58      	ldr	r3, [pc, #352]	; (800227c <StartDefaultTask+0x634>)
 800211a:	801a      	strh	r2, [r3, #0]

				msgPublisherTest.data = 3;
 800211c:	2303      	movs	r3, #3
 800211e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
				rcl_publish(&publisherTest, &msgPublisherTest, NULL);
 8002122:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8002126:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800212a:	2200      	movs	r2, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f008 f937 	bl	800a3a0 <rcl_publish>

		  		if(tiltDegAngle < 215)
 8002132:	4b52      	ldr	r3, [pc, #328]	; (800227c <StartDefaultTask+0x634>)
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	2bd6      	cmp	r3, #214	; 0xd6
 8002138:	d806      	bhi.n	8002148 <StartDefaultTask+0x500>
		  		{
		  		  tiltDegAngle = 360 - 215 + tiltDegAngle;
 800213a:	4b50      	ldr	r3, [pc, #320]	; (800227c <StartDefaultTask+0x634>)
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	3391      	adds	r3, #145	; 0x91
 8002140:	b29a      	uxth	r2, r3
 8002142:	4b4e      	ldr	r3, [pc, #312]	; (800227c <StartDefaultTask+0x634>)
 8002144:	801a      	strh	r2, [r3, #0]
 8002146:	e005      	b.n	8002154 <StartDefaultTask+0x50c>
		  		}
		  		else
		  		{
		  		  tiltDegAngle = tiltDegAngle - 215;
 8002148:	4b4c      	ldr	r3, [pc, #304]	; (800227c <StartDefaultTask+0x634>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	3bd7      	subs	r3, #215	; 0xd7
 800214e:	b29a      	uxth	r2, r3
 8002150:	4b4a      	ldr	r3, [pc, #296]	; (800227c <StartDefaultTask+0x634>)
 8002152:	801a      	strh	r2, [r3, #0]
		  		}

				//Setting Pan Position
				if(panTarget == panDegAngle)
 8002154:	4b4a      	ldr	r3, [pc, #296]	; (8002280 <StartDefaultTask+0x638>)
 8002156:	881a      	ldrh	r2, [r3, #0]
 8002158:	4b46      	ldr	r3, [pc, #280]	; (8002274 <StartDefaultTask+0x62c>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d108      	bne.n	8002172 <StartDefaultTask+0x52a>
				{
				  panFlag = 1;
 8002160:	2301      	movs	r3, #1
 8002162:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

				  TIM2->CCR1 = PAN_TURNING_NO;
 8002166:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800216a:	f641 0238 	movw	r2, #6200	; 0x1838
 800216e:	635a      	str	r2, [r3, #52]	; 0x34
 8002170:	e069      	b.n	8002246 <StartDefaultTask+0x5fe>
				}
				else
				{
				  panFlag = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

				  newPanTarget = panTarget - panDegAngle;
 8002178:	4b41      	ldr	r3, [pc, #260]	; (8002280 <StartDefaultTask+0x638>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b3d      	ldr	r3, [pc, #244]	; (8002274 <StartDefaultTask+0x62c>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	17da      	asrs	r2, r3, #31
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	60fa      	str	r2, [r7, #12]
 800218a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800218e:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
				  panDutyPWM = PAN_TURNING_NO + panKp*newPanTarget + panKd*((newPanTarget - oldPanTarget)/ENCODER_SAMPLE_TIME);
 8002192:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8002196:	f7fe fda1 	bl	8000cdc <__aeabi_l2f>
 800219a:	ee07 0a10 	vmov	s14, r0
 800219e:	edd7 7a7d 	vldr	s15, [r7, #500]	; 0x1f4
 80021a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002284 <StartDefaultTask+0x63c>
 80021aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021ae:	ee17 0a90 	vmov	r0, s15
 80021b2:	f7fe f9e1 	bl	8000578 <__aeabi_f2d>
 80021b6:	4680      	mov	r8, r0
 80021b8:	4689      	mov	r9, r1
 80021ba:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 80021be:	f7fe f9db 	bl	8000578 <__aeabi_f2d>
 80021c2:	4604      	mov	r4, r0
 80021c4:	460d      	mov	r5, r1
 80021c6:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80021ca:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	; 0x220
 80021ce:	ebb0 0a02 	subs.w	sl, r0, r2
 80021d2:	eb61 0b03 	sbc.w	fp, r1, r3
 80021d6:	4650      	mov	r0, sl
 80021d8:	4659      	mov	r1, fp
 80021da:	f7fe f9f7 	bl	80005cc <__aeabi_l2d>
 80021de:	a322      	add	r3, pc, #136	; (adr r3, 8002268 <StartDefaultTask+0x620>)
 80021e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e4:	f7fe fb4a 	bl	800087c <__aeabi_ddiv>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4620      	mov	r0, r4
 80021ee:	4629      	mov	r1, r5
 80021f0:	f7fe fa1a 	bl	8000628 <__aeabi_dmul>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4640      	mov	r0, r8
 80021fa:	4649      	mov	r1, r9
 80021fc:	f7fe f85e 	bl	80002bc <__adddf3>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4610      	mov	r0, r2
 8002206:	4619      	mov	r1, r3
 8002208:	f7fe fc20 	bl	8000a4c <__aeabi_d2iz>
 800220c:	4603      	mov	r3, r0
 800220e:	4a1e      	ldr	r2, [pc, #120]	; (8002288 <StartDefaultTask+0x640>)
 8002210:	6013      	str	r3, [r2, #0]
				  oldPanTarget = newPanTarget;
 8002212:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 8002216:	e9c7 2388 	strd	r2, r3, [r7, #544]	; 0x220

				  if(panDutyPWM < PAN_TURNING_MIN)
 800221a:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <StartDefaultTask+0x640>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	da02      	bge.n	8002228 <StartDefaultTask+0x5e0>
					panDutyPWM = PAN_TURNING_MIN;
 8002222:	4b19      	ldr	r3, [pc, #100]	; (8002288 <StartDefaultTask+0x640>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
				  if(panDutyPWM > PAN_TURNING_MAX)
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <StartDefaultTask+0x640>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002230:	4293      	cmp	r3, r2
 8002232:	dd03      	ble.n	800223c <StartDefaultTask+0x5f4>
					panDutyPWM = PAN_TURNING_MAX;
 8002234:	4b14      	ldr	r3, [pc, #80]	; (8002288 <StartDefaultTask+0x640>)
 8002236:	f242 7210 	movw	r2, #10000	; 0x2710
 800223a:	601a      	str	r2, [r3, #0]

				  TIM2->CCR1 = panDutyPWM;
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <StartDefaultTask+0x640>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002244:	635a      	str	r2, [r3, #52]	; 0x34

				//msgPublisherTest.data = 4;
				//rcl_publish(&publisherTest, &msgPublisherTest, NULL);

				//Setting Tilt Position
				if(tiltTarget == tiltDegAngle)
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <StartDefaultTask+0x644>)
 8002248:	881a      	ldrh	r2, [r3, #0]
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <StartDefaultTask+0x634>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d11e      	bne.n	8002290 <StartDefaultTask+0x648>
				{
				  tiltFlag = 1;
 8002252:	2301      	movs	r3, #1
 8002254:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

				  TIM2->CCR2 = TILT_TURNING_NO;
 8002258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800225c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002260:	639a      	str	r2, [r3, #56]	; 0x38
 8002262:	e080      	b.n	8002366 <StartDefaultTask+0x71e>
 8002264:	f3af 8000 	nop.w
 8002268:	9999999a 	.word	0x9999999a
 800226c:	3fa99999 	.word	0x3fa99999
 8002270:	3fb68000 	.word	0x3fb68000
 8002274:	2000772c 	.word	0x2000772c
 8002278:	200045a8 	.word	0x200045a8
 800227c:	2000772e 	.word	0x2000772e
 8002280:	20000000 	.word	0x20000000
 8002284:	45c1c000 	.word	0x45c1c000
 8002288:	20007730 	.word	0x20007730
 800228c:	20000002 	.word	0x20000002
				}
				else
				{
				  tiltFlag = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

				  newTiltTarget = tiltTarget - tiltDegAngle;
 8002296:	4b4c      	ldr	r3, [pc, #304]	; (80023c8 <StartDefaultTask+0x780>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	4b4b      	ldr	r3, [pc, #300]	; (80023cc <StartDefaultTask+0x784>)
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	17da      	asrs	r2, r3, #31
 80022a4:	603b      	str	r3, [r7, #0]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80022ac:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
				  tiltDutyPWM = TILT_TURNING_NO + tiltKp*newTiltTarget + tiltKd*((newTiltTarget - oldTiltTarget)/ENCODER_SAMPLE_TIME);
 80022b0:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 80022b4:	f7fe fd12 	bl	8000cdc <__aeabi_l2f>
 80022b8:	ee07 0a10 	vmov	s14, r0
 80022bc:	edd7 7a7b 	vldr	s15, [r7, #492]	; 0x1ec
 80022c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c4:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80023d0 <StartDefaultTask+0x788>
 80022c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022cc:	ee17 0a90 	vmov	r0, s15
 80022d0:	f7fe f952 	bl	8000578 <__aeabi_f2d>
 80022d4:	4680      	mov	r8, r0
 80022d6:	4689      	mov	r9, r1
 80022d8:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 80022dc:	f7fe f94c 	bl	8000578 <__aeabi_f2d>
 80022e0:	4604      	mov	r4, r0
 80022e2:	460d      	mov	r5, r1
 80022e4:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 80022e8:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 80022ec:	1a86      	subs	r6, r0, r2
 80022ee:	613e      	str	r6, [r7, #16]
 80022f0:	eb61 0303 	sbc.w	r3, r1, r3
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022fa:	f7fe f967 	bl	80005cc <__aeabi_l2d>
 80022fe:	a330      	add	r3, pc, #192	; (adr r3, 80023c0 <StartDefaultTask+0x778>)
 8002300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002304:	f7fe faba 	bl	800087c <__aeabi_ddiv>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4620      	mov	r0, r4
 800230e:	4629      	mov	r1, r5
 8002310:	f7fe f98a 	bl	8000628 <__aeabi_dmul>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4640      	mov	r0, r8
 800231a:	4649      	mov	r1, r9
 800231c:	f7fd ffce 	bl	80002bc <__adddf3>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f7fe fb90 	bl	8000a4c <__aeabi_d2iz>
 800232c:	4603      	mov	r3, r0
 800232e:	4a29      	ldr	r2, [pc, #164]	; (80023d4 <StartDefaultTask+0x78c>)
 8002330:	6013      	str	r3, [r2, #0]
				  oldTiltTarget = newTiltTarget;
 8002332:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 8002336:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218

				  if(tiltDutyPWM < TILT_TURNING_MIN)
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <StartDefaultTask+0x78c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	da02      	bge.n	8002348 <StartDefaultTask+0x700>
					tiltDutyPWM = TILT_TURNING_MIN;
 8002342:	4b24      	ldr	r3, [pc, #144]	; (80023d4 <StartDefaultTask+0x78c>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
				  if(tiltDutyPWM > TILT_TURNING_MAX)
 8002348:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <StartDefaultTask+0x78c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002350:	4293      	cmp	r3, r2
 8002352:	dd03      	ble.n	800235c <StartDefaultTask+0x714>
					tiltDutyPWM = TILT_TURNING_MAX;
 8002354:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <StartDefaultTask+0x78c>)
 8002356:	f242 7210 	movw	r2, #10000	; 0x2710
 800235a:	601a      	str	r2, [r3, #0]

				  TIM2->CCR2 = tiltDutyPWM;
 800235c:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <StartDefaultTask+0x78c>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002364:	639a      	str	r2, [r3, #56]	; 0x38
				}
				//msgPublisherTest.data = 5;
				//rcl_publish(&publisherTest, &msgPublisherTest, NULL);

				//Send Data
				panAndTilt = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
				panAndTilt = (panDegAngle - 8) | ((tiltDegAngle-80) << 9);
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <StartDefaultTask+0x790>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	f1a3 0208 	sub.w	r2, r3, #8
 8002374:	4b15      	ldr	r3, [pc, #84]	; (80023cc <StartDefaultTask+0x784>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	3b50      	subs	r3, #80	; 0x50
 800237a:	025b      	lsls	r3, r3, #9
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
				msgPublisher.data = panAndTilt;
 8002382:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002386:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

			    rcl_ret_t ret = rcl_publish(&publisher, &msgPublisher, NULL);
 800238a:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 800238e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002392:	2200      	movs	r2, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f008 f803 	bl	800a3a0 <rcl_publish>
 800239a:	f8c7 01c8 	str.w	r0, [r7, #456]	; 0x1c8
			    flag7 = 1;
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <StartDefaultTask+0x794>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	701a      	strb	r2, [r3, #0]
			    if (ret != RCL_RET_OK)
 80023a4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f43f ad44 	beq.w	8001e36 <StartDefaultTask+0x1ee>
			    {
			    	flag8 = 1;
 80023ae:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <StartDefaultTask+0x798>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
			      printf("Error publishing (line %d)\n", __LINE__);
 80023b4:	f240 3135 	movw	r1, #821	; 0x335
 80023b8:	480a      	ldr	r0, [pc, #40]	; (80023e4 <StartDefaultTask+0x79c>)
 80023ba:	f014 ff39 	bl	8017230 <iprintf>
		  rclc_executor_spin_some(&executor,1000*1000*40);
 80023be:	e53a      	b.n	8001e36 <StartDefaultTask+0x1ee>
 80023c0:	9999999a 	.word	0x9999999a
 80023c4:	3fa99999 	.word	0x3fa99999
 80023c8:	20000002 	.word	0x20000002
 80023cc:	2000772e 	.word	0x2000772e
 80023d0:	459c4000 	.word	0x459c4000
 80023d4:	20007734 	.word	0x20007734
 80023d8:	2000772c 	.word	0x2000772c
 80023dc:	20007726 	.word	0x20007726
 80023e0:	20007727 	.word	0x20007727
 80023e4:	08018494 	.word	0x08018494

080023e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a07      	ldr	r2, [pc, #28]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d102      	bne.n	8002400 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80023fa:	f000 fd53 	bl	8002ea4 <HAL_IncTick>
  {
	  flag = 1;
	  flag3 = 1;
  }
  /* USER CODE END Callback 1 */
}
 80023fe:	e005      	b.n	800240c <HAL_TIM_PeriodElapsedCallback+0x24>
	  flag = 1;
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
	  flag3 = 1;
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40010000 	.word	0x40010000
 8002418:	20007720 	.word	0x20007720
 800241c:	20007722 	.word	0x20007722

08002420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002424:	b672      	cpsid	i
}
 8002426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002428:	e7fe      	b.n	8002428 <Error_Handler+0x8>
	...

0800242c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002436:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <microros_allocate+0x3c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4413      	add	r3, r2
 8002440:	461a      	mov	r2, r3
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <microros_allocate+0x3c>)
 8002444:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <microros_allocate+0x40>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	461a      	mov	r2, r3
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <microros_allocate+0x40>)
 8002454:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fe fe4c 	bl	80010f4 <pvPortMallocMicroROS>
 800245c:	4603      	mov	r3, r0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20007738 	.word	0x20007738
 800246c:	2000773c 	.word	0x2000773c

08002470 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00c      	beq.n	800249a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7fe ff55 	bl	8001330 <getBlockSize>
 8002486:	4603      	mov	r3, r0
 8002488:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <microros_deallocate+0x34>)
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	461a      	mov	r2, r3
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <microros_deallocate+0x34>)
 8002492:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7fe fef1 	bl	800127c <vPortFreeMicroROS>
  }
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	2000773c 	.word	0x2000773c

080024a8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <microros_reallocate+0x64>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	4413      	add	r3, r2
 80024be:	461a      	mov	r2, r3
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <microros_reallocate+0x64>)
 80024c2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <microros_reallocate+0x68>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	4413      	add	r3, r2
 80024ce:	461a      	mov	r2, r3
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <microros_reallocate+0x68>)
 80024d2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d104      	bne.n	80024e4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80024da:	68b8      	ldr	r0, [r7, #8]
 80024dc:	f7fe fe0a 	bl	80010f4 <pvPortMallocMicroROS>
 80024e0:	4603      	mov	r3, r0
 80024e2:	e00e      	b.n	8002502 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f7fe ff23 	bl	8001330 <getBlockSize>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4a08      	ldr	r2, [pc, #32]	; (8002510 <microros_reallocate+0x68>)
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <microros_reallocate+0x68>)
 80024f6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f7fe ff36 	bl	800136c <pvPortReallocMicroROS>
 8002500:	4603      	mov	r3, r0
  }
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20007738 	.word	0x20007738
 8002510:	2000773c 	.word	0x2000773c

08002514 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	4a0c      	ldr	r2, [pc, #48]	; (800255c <microros_zero_allocate+0x48>)
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	4413      	add	r3, r2
 800252e:	461a      	mov	r2, r3
 8002530:	4b0a      	ldr	r3, [pc, #40]	; (800255c <microros_zero_allocate+0x48>)
 8002532:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	fb02 f303 	mul.w	r3, r2, r3
 800253c:	4a08      	ldr	r2, [pc, #32]	; (8002560 <microros_zero_allocate+0x4c>)
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	4413      	add	r3, r2
 8002542:	461a      	mov	r2, r3
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <microros_zero_allocate+0x4c>)
 8002546:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f7fe ff3b 	bl	80013c6 <pvPortCallocMicroROS>
 8002550:	4603      	mov	r3, r0
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20007738 	.word	0x20007738
 8002560:	2000773c 	.word	0x2000773c
 8002564:	00000000 	.word	0x00000000

08002568 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002568:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
 8002570:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800257a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800257e:	a320      	add	r3, pc, #128	; (adr r3, 8002600 <UTILS_NanosecondsToTimespec+0x98>)
 8002580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002584:	f7fe fbe8 	bl	8000d58 <__aeabi_ldivmod>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002592:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002596:	a31a      	add	r3, pc, #104	; (adr r3, 8002600 <UTILS_NanosecondsToTimespec+0x98>)
 8002598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259c:	f7fe fbdc 	bl	8000d58 <__aeabi_ldivmod>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	da20      	bge.n	80025ee <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4a11      	ldr	r2, [pc, #68]	; (80025f8 <UTILS_NanosecondsToTimespec+0x90>)
 80025b2:	fb82 1203 	smull	r1, r2, r2, r3
 80025b6:	1712      	asrs	r2, r2, #28
 80025b8:	17db      	asrs	r3, r3, #31
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	3301      	adds	r3, #1
 80025be:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c6:	6979      	ldr	r1, [r7, #20]
 80025c8:	17c8      	asrs	r0, r1, #31
 80025ca:	460c      	mov	r4, r1
 80025cc:	4605      	mov	r5, r0
 80025ce:	ebb2 0804 	subs.w	r8, r2, r4
 80025d2:	eb63 0905 	sbc.w	r9, r3, r5
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	4906      	ldr	r1, [pc, #24]	; (80025fc <UTILS_NanosecondsToTimespec+0x94>)
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	441a      	add	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	609a      	str	r2, [r3, #8]
    }
}
 80025ee:	bf00      	nop
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025f8:	44b82fa1 	.word	0x44b82fa1
 80025fc:	3b9aca00 	.word	0x3b9aca00
 8002600:	3b9aca00 	.word	0x3b9aca00
 8002604:	00000000 	.word	0x00000000

08002608 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800260c:	b08e      	sub	sp, #56	; 0x38
 800260e:	af00      	add	r7, sp, #0
 8002610:	6278      	str	r0, [r7, #36]	; 0x24
 8002612:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002614:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002618:	2300      	movs	r3, #0
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800262a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800262e:	4618      	mov	r0, r3
 8002630:	f006 fc04 	bl	8008e3c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	17da      	asrs	r2, r3, #31
 8002638:	61bb      	str	r3, [r7, #24]
 800263a:	61fa      	str	r2, [r7, #28]
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	69b9      	ldr	r1, [r7, #24]
 8002646:	000b      	movs	r3, r1
 8002648:	2200      	movs	r2, #0
 800264a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	2200      	movs	r2, #0
 8002652:	461c      	mov	r4, r3
 8002654:	4615      	mov	r5, r2
 8002656:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800265a:	1911      	adds	r1, r2, r4
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	416b      	adcs	r3, r5
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002666:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800266a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	f04f 0400 	mov.w	r4, #0
 8002676:	f04f 0500 	mov.w	r5, #0
 800267a:	015d      	lsls	r5, r3, #5
 800267c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002680:	0154      	lsls	r4, r2, #5
 8002682:	4622      	mov	r2, r4
 8002684:	462b      	mov	r3, r5
 8002686:	ebb2 0800 	subs.w	r8, r2, r0
 800268a:	eb63 0901 	sbc.w	r9, r3, r1
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800269a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800269e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80026a2:	4690      	mov	r8, r2
 80026a4:	4699      	mov	r9, r3
 80026a6:	eb18 0a00 	adds.w	sl, r8, r0
 80026aa:	eb49 0b01 	adc.w	fp, r9, r1
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026ba:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026be:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026c2:	ebb2 040a 	subs.w	r4, r2, sl
 80026c6:	603c      	str	r4, [r7, #0]
 80026c8:	eb63 030b 	sbc.w	r3, r3, fp
 80026cc:	607b      	str	r3, [r7, #4]
 80026ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026d2:	4623      	mov	r3, r4
 80026d4:	181b      	adds	r3, r3, r0
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	462b      	mov	r3, r5
 80026da:	eb41 0303 	adc.w	r3, r1, r3
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	6a3a      	ldr	r2, [r7, #32]
 80026e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026e6:	f7ff ff3f 	bl	8002568 <UTILS_NanosecondsToTimespec>

    return 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	3738      	adds	r7, #56	; 0x38
 80026f0:	46bd      	mov	sp, r7
 80026f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080026f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	607b      	str	r3, [r7, #4]
 8002702:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_MspInit+0x54>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	4a11      	ldr	r2, [pc, #68]	; (800274c <HAL_MspInit+0x54>)
 8002708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800270c:	6453      	str	r3, [r2, #68]	; 0x44
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_MspInit+0x54>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	603b      	str	r3, [r7, #0]
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_MspInit+0x54>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <HAL_MspInit+0x54>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002728:	6413      	str	r3, [r2, #64]	; 0x40
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <HAL_MspInit+0x54>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	210f      	movs	r1, #15
 800273a:	f06f 0001 	mvn.w	r0, #1
 800273e:	f000 fc89 	bl	8003054 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800

08002750 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 031c 	add.w	r3, r7, #28
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a42      	ldr	r2, [pc, #264]	; (8002878 <HAL_I2C_MspInit+0x128>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d12c      	bne.n	80027cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
 8002776:	4b41      	ldr	r3, [pc, #260]	; (800287c <HAL_I2C_MspInit+0x12c>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	4a40      	ldr	r2, [pc, #256]	; (800287c <HAL_I2C_MspInit+0x12c>)
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	6313      	str	r3, [r2, #48]	; 0x30
 8002782:	4b3e      	ldr	r3, [pc, #248]	; (800287c <HAL_I2C_MspInit+0x12c>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800278e:	23c0      	movs	r3, #192	; 0xc0
 8002790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002792:	2312      	movs	r3, #18
 8002794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279a:	2303      	movs	r3, #3
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800279e:	2304      	movs	r3, #4
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a2:	f107 031c 	add.w	r3, r7, #28
 80027a6:	4619      	mov	r1, r3
 80027a8:	4835      	ldr	r0, [pc, #212]	; (8002880 <HAL_I2C_MspInit+0x130>)
 80027aa:	f001 f87f 	bl	80038ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	4b32      	ldr	r3, [pc, #200]	; (800287c <HAL_I2C_MspInit+0x12c>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	4a31      	ldr	r2, [pc, #196]	; (800287c <HAL_I2C_MspInit+0x12c>)
 80027b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027bc:	6413      	str	r3, [r2, #64]	; 0x40
 80027be:	4b2f      	ldr	r3, [pc, #188]	; (800287c <HAL_I2C_MspInit+0x12c>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80027ca:	e050      	b.n	800286e <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2c      	ldr	r2, [pc, #176]	; (8002884 <HAL_I2C_MspInit+0x134>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d14b      	bne.n	800286e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	4b28      	ldr	r3, [pc, #160]	; (800287c <HAL_I2C_MspInit+0x12c>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a27      	ldr	r2, [pc, #156]	; (800287c <HAL_I2C_MspInit+0x12c>)
 80027e0:	f043 0304 	orr.w	r3, r3, #4
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b25      	ldr	r3, [pc, #148]	; (800287c <HAL_I2C_MspInit+0x12c>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	4b21      	ldr	r3, [pc, #132]	; (800287c <HAL_I2C_MspInit+0x12c>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	4a20      	ldr	r2, [pc, #128]	; (800287c <HAL_I2C_MspInit+0x12c>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6313      	str	r3, [r2, #48]	; 0x30
 8002802:	4b1e      	ldr	r3, [pc, #120]	; (800287c <HAL_I2C_MspInit+0x12c>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800280e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002814:	2312      	movs	r3, #18
 8002816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281c:	2303      	movs	r3, #3
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002820:	2304      	movs	r3, #4
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	4619      	mov	r1, r3
 800282a:	4817      	ldr	r0, [pc, #92]	; (8002888 <HAL_I2C_MspInit+0x138>)
 800282c:	f001 f83e 	bl	80038ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002830:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002836:	2312      	movs	r3, #18
 8002838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283e:	2303      	movs	r3, #3
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002842:	2304      	movs	r3, #4
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002846:	f107 031c 	add.w	r3, r7, #28
 800284a:	4619      	mov	r1, r3
 800284c:	480f      	ldr	r0, [pc, #60]	; (800288c <HAL_I2C_MspInit+0x13c>)
 800284e:	f001 f82d 	bl	80038ac <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_I2C_MspInit+0x12c>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	4a08      	ldr	r2, [pc, #32]	; (800287c <HAL_I2C_MspInit+0x12c>)
 800285c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002860:	6413      	str	r3, [r2, #64]	; 0x40
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_I2C_MspInit+0x12c>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
}
 800286e:	bf00      	nop
 8002870:	3730      	adds	r7, #48	; 0x30
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40005400 	.word	0x40005400
 800287c:	40023800 	.word	0x40023800
 8002880:	40020400 	.word	0x40020400
 8002884:	40005c00 	.word	0x40005c00
 8002888:	40020800 	.word	0x40020800
 800288c:	40020000 	.word	0x40020000

08002890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a0:	d10e      	bne.n	80028c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	4b16      	ldr	r3, [pc, #88]	; (8002900 <HAL_TIM_Base_MspInit+0x70>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a15      	ldr	r2, [pc, #84]	; (8002900 <HAL_TIM_Base_MspInit+0x70>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
 80028b2:	4b13      	ldr	r3, [pc, #76]	; (8002900 <HAL_TIM_Base_MspInit+0x70>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028be:	e01a      	b.n	80028f6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0f      	ldr	r2, [pc, #60]	; (8002904 <HAL_TIM_Base_MspInit+0x74>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d115      	bne.n	80028f6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_TIM_Base_MspInit+0x70>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	4a0b      	ldr	r2, [pc, #44]	; (8002900 <HAL_TIM_Base_MspInit+0x70>)
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	6413      	str	r3, [r2, #64]	; 0x40
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HAL_TIM_Base_MspInit+0x70>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2105      	movs	r1, #5
 80028ea:	201d      	movs	r0, #29
 80028ec:	f000 fbb2 	bl	8003054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028f0:	201d      	movs	r0, #29
 80028f2:	f000 fbcb 	bl	800308c <HAL_NVIC_EnableIRQ>
}
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800
 8002904:	40000400 	.word	0x40000400

08002908 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002928:	d11d      	bne.n	8002966 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <HAL_TIM_MspPostInit+0x68>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a0f      	ldr	r2, [pc, #60]	; (8002970 <HAL_TIM_MspPostInit+0x68>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <HAL_TIM_MspPostInit+0x68>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002946:	2303      	movs	r3, #3
 8002948:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294a:	2302      	movs	r3, #2
 800294c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002956:	2301      	movs	r3, #1
 8002958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295a:	f107 030c 	add.w	r3, r7, #12
 800295e:	4619      	mov	r1, r3
 8002960:	4804      	ldr	r0, [pc, #16]	; (8002974 <HAL_TIM_MspPostInit+0x6c>)
 8002962:	f000 ffa3 	bl	80038ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002966:	bf00      	nop
 8002968:	3720      	adds	r7, #32
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800
 8002974:	40020000 	.word	0x40020000

08002978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	; 0x28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a4d      	ldr	r2, [pc, #308]	; (8002acc <HAL_UART_MspInit+0x154>)
 8002996:	4293      	cmp	r3, r2
 8002998:	f040 8093 	bne.w	8002ac2 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800299c:	2300      	movs	r3, #0
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	4b4b      	ldr	r3, [pc, #300]	; (8002ad0 <HAL_UART_MspInit+0x158>)
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	4a4a      	ldr	r2, [pc, #296]	; (8002ad0 <HAL_UART_MspInit+0x158>)
 80029a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029aa:	6413      	str	r3, [r2, #64]	; 0x40
 80029ac:	4b48      	ldr	r3, [pc, #288]	; (8002ad0 <HAL_UART_MspInit+0x158>)
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	4b44      	ldr	r3, [pc, #272]	; (8002ad0 <HAL_UART_MspInit+0x158>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	4a43      	ldr	r2, [pc, #268]	; (8002ad0 <HAL_UART_MspInit+0x158>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6313      	str	r3, [r2, #48]	; 0x30
 80029c8:	4b41      	ldr	r3, [pc, #260]	; (8002ad0 <HAL_UART_MspInit+0x158>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029d4:	230c      	movs	r3, #12
 80029d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e0:	2300      	movs	r3, #0
 80029e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029e4:	2307      	movs	r3, #7
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	4619      	mov	r1, r3
 80029ee:	4839      	ldr	r0, [pc, #228]	; (8002ad4 <HAL_UART_MspInit+0x15c>)
 80029f0:	f000 ff5c 	bl	80038ac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80029f4:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <HAL_UART_MspInit+0x160>)
 80029f6:	4a39      	ldr	r2, [pc, #228]	; (8002adc <HAL_UART_MspInit+0x164>)
 80029f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80029fa:	4b37      	ldr	r3, [pc, #220]	; (8002ad8 <HAL_UART_MspInit+0x160>)
 80029fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a00:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a02:	4b35      	ldr	r3, [pc, #212]	; (8002ad8 <HAL_UART_MspInit+0x160>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a08:	4b33      	ldr	r3, [pc, #204]	; (8002ad8 <HAL_UART_MspInit+0x160>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a0e:	4b32      	ldr	r3, [pc, #200]	; (8002ad8 <HAL_UART_MspInit+0x160>)
 8002a10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a14:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_UART_MspInit+0x160>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a1c:	4b2e      	ldr	r3, [pc, #184]	; (8002ad8 <HAL_UART_MspInit+0x160>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002a22:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <HAL_UART_MspInit+0x160>)
 8002a24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a28:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a2a:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <HAL_UART_MspInit+0x160>)
 8002a2c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a30:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a32:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <HAL_UART_MspInit+0x160>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a38:	4827      	ldr	r0, [pc, #156]	; (8002ad8 <HAL_UART_MspInit+0x160>)
 8002a3a:	f000 fb35 	bl	80030a8 <HAL_DMA_Init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002a44:	f7ff fcec 	bl	8002420 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a23      	ldr	r2, [pc, #140]	; (8002ad8 <HAL_UART_MspInit+0x160>)
 8002a4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a4e:	4a22      	ldr	r2, [pc, #136]	; (8002ad8 <HAL_UART_MspInit+0x160>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002a54:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_UART_MspInit+0x168>)
 8002a56:	4a23      	ldr	r2, [pc, #140]	; (8002ae4 <HAL_UART_MspInit+0x16c>)
 8002a58:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002a5a:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <HAL_UART_MspInit+0x168>)
 8002a5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a60:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a62:	4b1f      	ldr	r3, [pc, #124]	; (8002ae0 <HAL_UART_MspInit+0x168>)
 8002a64:	2240      	movs	r2, #64	; 0x40
 8002a66:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a68:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <HAL_UART_MspInit+0x168>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <HAL_UART_MspInit+0x168>)
 8002a70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a74:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <HAL_UART_MspInit+0x168>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a7c:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <HAL_UART_MspInit+0x168>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002a82:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <HAL_UART_MspInit+0x168>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a88:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <HAL_UART_MspInit+0x168>)
 8002a8a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a8e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a90:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <HAL_UART_MspInit+0x168>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002a96:	4812      	ldr	r0, [pc, #72]	; (8002ae0 <HAL_UART_MspInit+0x168>)
 8002a98:	f000 fb06 	bl	80030a8 <HAL_DMA_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002aa2:	f7ff fcbd 	bl	8002420 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a0d      	ldr	r2, [pc, #52]	; (8002ae0 <HAL_UART_MspInit+0x168>)
 8002aaa:	639a      	str	r2, [r3, #56]	; 0x38
 8002aac:	4a0c      	ldr	r2, [pc, #48]	; (8002ae0 <HAL_UART_MspInit+0x168>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2105      	movs	r1, #5
 8002ab6:	2026      	movs	r0, #38	; 0x26
 8002ab8:	f000 facc 	bl	8003054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002abc:	2026      	movs	r0, #38	; 0x26
 8002abe:	f000 fae5 	bl	800308c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ac2:	bf00      	nop
 8002ac4:	3728      	adds	r7, #40	; 0x28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40004400 	.word	0x40004400
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40020000 	.word	0x40020000
 8002ad8:	200046d4 	.word	0x200046d4
 8002adc:	40026088 	.word	0x40026088
 8002ae0:	20004734 	.word	0x20004734
 8002ae4:	400260a0 	.word	0x400260a0

08002ae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08c      	sub	sp, #48	; 0x30
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002af8:	2300      	movs	r3, #0
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <HAL_InitTick+0xd0>)
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	4a2d      	ldr	r2, [pc, #180]	; (8002bb8 <HAL_InitTick+0xd0>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6453      	str	r3, [r2, #68]	; 0x44
 8002b08:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <HAL_InitTick+0xd0>)
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b14:	f107 020c 	add.w	r2, r7, #12
 8002b18:	f107 0310 	add.w	r3, r7, #16
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f002 fb46 	bl	80051b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002b24:	f002 fb30 	bl	8005188 <HAL_RCC_GetPCLK2Freq>
 8002b28:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	4a23      	ldr	r2, [pc, #140]	; (8002bbc <HAL_InitTick+0xd4>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	0c9b      	lsrs	r3, r3, #18
 8002b34:	3b01      	subs	r3, #1
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002b38:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_InitTick+0xd8>)
 8002b3a:	4a22      	ldr	r2, [pc, #136]	; (8002bc4 <HAL_InitTick+0xdc>)
 8002b3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <HAL_InitTick+0xd8>)
 8002b40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b44:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002b46:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <HAL_InitTick+0xd8>)
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002b4c:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <HAL_InitTick+0xd8>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b52:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <HAL_InitTick+0xd8>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_InitTick+0xd8>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002b5e:	4818      	ldr	r0, [pc, #96]	; (8002bc0 <HAL_InitTick+0xd8>)
 8002b60:	f002 fb58 	bl	8005214 <HAL_TIM_Base_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d11b      	bne.n	8002baa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002b72:	4813      	ldr	r0, [pc, #76]	; (8002bc0 <HAL_InitTick+0xd8>)
 8002b74:	f002 fb9e 	bl	80052b4 <HAL_TIM_Base_Start_IT>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d111      	bne.n	8002baa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002b86:	2019      	movs	r0, #25
 8002b88:	f000 fa80 	bl	800308c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b0f      	cmp	r3, #15
 8002b90:	d808      	bhi.n	8002ba4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002b92:	2200      	movs	r2, #0
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	2019      	movs	r0, #25
 8002b98:	f000 fa5c 	bl	8003054 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b9c:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <HAL_InitTick+0xe0>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e002      	b.n	8002baa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002baa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3730      	adds	r7, #48	; 0x30
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	431bde83 	.word	0x431bde83
 8002bc0:	20007740 	.word	0x20007740
 8002bc4:	40010000 	.word	0x40010000
 8002bc8:	2000000c 	.word	0x2000000c

08002bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bd0:	e7fe      	b.n	8002bd0 <NMI_Handler+0x4>

08002bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bd6:	e7fe      	b.n	8002bd6 <HardFault_Handler+0x4>

08002bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bdc:	e7fe      	b.n	8002bdc <MemManage_Handler+0x4>

08002bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bde:	b480      	push	{r7}
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002be2:	e7fe      	b.n	8002be2 <BusFault_Handler+0x4>

08002be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be8:	e7fe      	b.n	8002be8 <UsageFault_Handler+0x4>

08002bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002bfc:	4802      	ldr	r0, [pc, #8]	; (8002c08 <DMA1_Stream5_IRQHandler+0x10>)
 8002bfe:	f000 fbeb 	bl	80033d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200046d4 	.word	0x200046d4

08002c0c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002c10:	4802      	ldr	r0, [pc, #8]	; (8002c1c <DMA1_Stream6_IRQHandler+0x10>)
 8002c12:	f000 fbe1 	bl	80033d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20004734 	.word	0x20004734

08002c20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c24:	4802      	ldr	r0, [pc, #8]	; (8002c30 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002c26:	f002 fcb1 	bl	800558c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20007740 	.word	0x20007740

08002c34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c38:	4802      	ldr	r0, [pc, #8]	; (8002c44 <TIM3_IRQHandler+0x10>)
 8002c3a:	f002 fca7 	bl	800558c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20004644 	.word	0x20004644

08002c48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <USART2_IRQHandler+0x10>)
 8002c4e:	f003 fbfd 	bl	800644c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	2000468c 	.word	0x2000468c

08002c5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return 1;
 8002c60:	2301      	movs	r3, #1
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <_kill>:

int _kill(int pid, int sig)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c76:	f014 fcb1 	bl	80175dc <__errno>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2216      	movs	r2, #22
 8002c7e:	601a      	str	r2, [r3, #0]
  return -1;
 8002c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <_exit>:

void _exit (int status)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff ffe7 	bl	8002c6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c9e:	e7fe      	b.n	8002c9e <_exit+0x12>

08002ca0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	e00a      	b.n	8002cc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cb2:	f3af 8000 	nop.w
 8002cb6:	4601      	mov	r1, r0
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	60ba      	str	r2, [r7, #8]
 8002cbe:	b2ca      	uxtb	r2, r1
 8002cc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	dbf0      	blt.n	8002cb2 <_read+0x12>
  }

  return len;
 8002cd0:	687b      	ldr	r3, [r7, #4]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	e009      	b.n	8002d00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	60ba      	str	r2, [r7, #8]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	dbf1      	blt.n	8002cec <_write+0x12>
  }
  return len;
 8002d08:	687b      	ldr	r3, [r7, #4]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <_close>:

int _close(int file)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d3a:	605a      	str	r2, [r3, #4]
  return 0;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <_isatty>:

int _isatty(int file)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d52:	2301      	movs	r3, #1
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d84:	4a14      	ldr	r2, [pc, #80]	; (8002dd8 <_sbrk+0x5c>)
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <_sbrk+0x60>)
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <_sbrk+0x64>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d102      	bne.n	8002d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <_sbrk+0x64>)
 8002d9a:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <_sbrk+0x68>)
 8002d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d9e:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <_sbrk+0x64>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d207      	bcs.n	8002dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dac:	f014 fc16 	bl	80175dc <__errno>
 8002db0:	4603      	mov	r3, r0
 8002db2:	220c      	movs	r2, #12
 8002db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dba:	e009      	b.n	8002dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <_sbrk+0x64>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dc2:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <_sbrk+0x64>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	4a05      	ldr	r2, [pc, #20]	; (8002de0 <_sbrk+0x64>)
 8002dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dce:	68fb      	ldr	r3, [r7, #12]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20018000 	.word	0x20018000
 8002ddc:	00000400 	.word	0x00000400
 8002de0:	2000778c 	.word	0x2000778c
 8002de4:	20010e48 	.word	0x20010e48

08002de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <SystemInit+0x20>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	4a05      	ldr	r2, [pc, #20]	; (8002e08 <SystemInit+0x20>)
 8002df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e10:	f7ff ffea 	bl	8002de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e14:	480c      	ldr	r0, [pc, #48]	; (8002e48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e16:	490d      	ldr	r1, [pc, #52]	; (8002e4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e18:	4a0d      	ldr	r2, [pc, #52]	; (8002e50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e1c:	e002      	b.n	8002e24 <LoopCopyDataInit>

08002e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e22:	3304      	adds	r3, #4

08002e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e28:	d3f9      	bcc.n	8002e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e2a:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e2c:	4c0a      	ldr	r4, [pc, #40]	; (8002e58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e30:	e001      	b.n	8002e36 <LoopFillZerobss>

08002e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e34:	3204      	adds	r2, #4

08002e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e38:	d3fb      	bcc.n	8002e32 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002e3a:	f014 fbd5 	bl	80175e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e3e:	f7fe fc67 	bl	8001710 <main>
  bx  lr    
 8002e42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e4c:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8002e50:	08019268 	.word	0x08019268
  ldr r2, =_sbss
 8002e54:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8002e58:	20010e48 	.word	0x20010e48

08002e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e5c:	e7fe      	b.n	8002e5c <ADC_IRQHandler>
	...

08002e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e64:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <HAL_Init+0x40>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a0d      	ldr	r2, [pc, #52]	; (8002ea0 <HAL_Init+0x40>)
 8002e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_Init+0x40>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <HAL_Init+0x40>)
 8002e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e7c:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <HAL_Init+0x40>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a07      	ldr	r2, [pc, #28]	; (8002ea0 <HAL_Init+0x40>)
 8002e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e88:	2003      	movs	r0, #3
 8002e8a:	f000 f8d8 	bl	800303e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e8e:	200f      	movs	r0, #15
 8002e90:	f7ff fe2a 	bl	8002ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e94:	f7ff fc30 	bl	80026f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023c00 	.word	0x40023c00

08002ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_IncTick+0x20>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_IncTick+0x24>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <HAL_IncTick+0x24>)
 8002eb6:	6013      	str	r3, [r2, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000010 	.word	0x20000010
 8002ec8:	20007790 	.word	0x20007790

08002ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed0:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <HAL_GetTick+0x14>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20007790 	.word	0x20007790

08002ee4 <__NVIC_SetPriorityGrouping>:
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f00:	4013      	ands	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f16:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	60d3      	str	r3, [r2, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <__NVIC_GetPriorityGrouping>:
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <__NVIC_GetPriorityGrouping+0x18>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	0a1b      	lsrs	r3, r3, #8
 8002f36:	f003 0307 	and.w	r3, r3, #7
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <__NVIC_EnableIRQ>:
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	db0b      	blt.n	8002f72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	f003 021f 	and.w	r2, r3, #31
 8002f60:	4907      	ldr	r1, [pc, #28]	; (8002f80 <__NVIC_EnableIRQ+0x38>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2001      	movs	r0, #1
 8002f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	e000e100 	.word	0xe000e100

08002f84 <__NVIC_SetPriority>:
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	6039      	str	r1, [r7, #0]
 8002f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	db0a      	blt.n	8002fae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	490c      	ldr	r1, [pc, #48]	; (8002fd0 <__NVIC_SetPriority+0x4c>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	0112      	lsls	r2, r2, #4
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002fac:	e00a      	b.n	8002fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4908      	ldr	r1, [pc, #32]	; (8002fd4 <__NVIC_SetPriority+0x50>)
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	3b04      	subs	r3, #4
 8002fbc:	0112      	lsls	r2, r2, #4
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	761a      	strb	r2, [r3, #24]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000e100 	.word	0xe000e100
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <NVIC_EncodePriority>:
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f1c3 0307 	rsb	r3, r3, #7
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	bf28      	it	cs
 8002ff6:	2304      	movcs	r3, #4
 8002ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2b06      	cmp	r3, #6
 8003000:	d902      	bls.n	8003008 <NVIC_EncodePriority+0x30>
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3b03      	subs	r3, #3
 8003006:	e000      	b.n	800300a <NVIC_EncodePriority+0x32>
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	401a      	ands	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003020:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	43d9      	mvns	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	4313      	orrs	r3, r2
}
 8003032:	4618      	mov	r0, r3
 8003034:	3724      	adds	r7, #36	; 0x24
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff ff4c 	bl	8002ee4 <__NVIC_SetPriorityGrouping>
}
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003066:	f7ff ff61 	bl	8002f2c <__NVIC_GetPriorityGrouping>
 800306a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	6978      	ldr	r0, [r7, #20]
 8003072:	f7ff ffb1 	bl	8002fd8 <NVIC_EncodePriority>
 8003076:	4602      	mov	r2, r0
 8003078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800307c:	4611      	mov	r1, r2
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff ff80 	bl	8002f84 <__NVIC_SetPriority>
}
 8003084:	bf00      	nop
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff ff54 	bl	8002f48 <__NVIC_EnableIRQ>
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030b4:	f7ff ff0a 	bl	8002ecc <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e099      	b.n	80031f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0201 	bic.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030e4:	e00f      	b.n	8003106 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030e6:	f7ff fef1 	bl	8002ecc <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b05      	cmp	r3, #5
 80030f2:	d908      	bls.n	8003106 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2203      	movs	r2, #3
 80030fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e078      	b.n	80031f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1e8      	bne.n	80030e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4b38      	ldr	r3, [pc, #224]	; (8003200 <HAL_DMA_Init+0x158>)
 8003120:	4013      	ands	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003132:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800314a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	2b04      	cmp	r3, #4
 800315e:	d107      	bne.n	8003170 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	4313      	orrs	r3, r2
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f023 0307 	bic.w	r3, r3, #7
 8003186:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	4313      	orrs	r3, r2
 8003190:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	2b04      	cmp	r3, #4
 8003198:	d117      	bne.n	80031ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00e      	beq.n	80031ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fb01 	bl	80037b4 <DMA_CheckFifoParam>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2240      	movs	r2, #64	; 0x40
 80031bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031c6:	2301      	movs	r3, #1
 80031c8:	e016      	b.n	80031f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fab8 	bl	8003748 <DMA_CalcBaseAndBitshift>
 80031d8:	4603      	mov	r3, r0
 80031da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e0:	223f      	movs	r2, #63	; 0x3f
 80031e2:	409a      	lsls	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	f010803f 	.word	0xf010803f

08003204 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_DMA_Start_IT+0x26>
 8003226:	2302      	movs	r3, #2
 8003228:	e040      	b.n	80032ac <HAL_DMA_Start_IT+0xa8>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b01      	cmp	r3, #1
 800323c:	d12f      	bne.n	800329e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2202      	movs	r2, #2
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fa4a 	bl	80036ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325c:	223f      	movs	r2, #63	; 0x3f
 800325e:	409a      	lsls	r2, r3
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0216 	orr.w	r2, r2, #22
 8003272:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d007      	beq.n	800328c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0208 	orr.w	r2, r2, #8
 800328a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	e005      	b.n	80032aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032a6:	2302      	movs	r3, #2
 80032a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032c2:	f7ff fe03 	bl	8002ecc <HAL_GetTick>
 80032c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d008      	beq.n	80032e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e052      	b.n	800338c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0216 	bic.w	r2, r2, #22
 80032f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003304:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	d103      	bne.n	8003316 <HAL_DMA_Abort+0x62>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0208 	bic.w	r2, r2, #8
 8003324:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0201 	bic.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003336:	e013      	b.n	8003360 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003338:	f7ff fdc8 	bl	8002ecc <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b05      	cmp	r3, #5
 8003344:	d90c      	bls.n	8003360 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2203      	movs	r2, #3
 8003350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e015      	b.n	800338c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e4      	bne.n	8003338 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003372:	223f      	movs	r2, #63	; 0x3f
 8003374:	409a      	lsls	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d004      	beq.n	80033b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2280      	movs	r2, #128	; 0x80
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e00c      	b.n	80033cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2205      	movs	r2, #5
 80033b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033e4:	4b8e      	ldr	r3, [pc, #568]	; (8003620 <HAL_DMA_IRQHandler+0x248>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a8e      	ldr	r2, [pc, #568]	; (8003624 <HAL_DMA_IRQHandler+0x24c>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	0a9b      	lsrs	r3, r3, #10
 80033f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003402:	2208      	movs	r2, #8
 8003404:	409a      	lsls	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4013      	ands	r3, r2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01a      	beq.n	8003444 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d013      	beq.n	8003444 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0204 	bic.w	r2, r2, #4
 800342a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	2208      	movs	r2, #8
 8003432:	409a      	lsls	r2, r3
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f043 0201 	orr.w	r2, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	2201      	movs	r2, #1
 800344a:	409a      	lsls	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d012      	beq.n	800347a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003466:	2201      	movs	r2, #1
 8003468:	409a      	lsls	r2, r3
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	f043 0202 	orr.w	r2, r3, #2
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347e:	2204      	movs	r2, #4
 8003480:	409a      	lsls	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d012      	beq.n	80034b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00b      	beq.n	80034b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	2204      	movs	r2, #4
 800349e:	409a      	lsls	r2, r3
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a8:	f043 0204 	orr.w	r2, r3, #4
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b4:	2210      	movs	r2, #16
 80034b6:	409a      	lsls	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d043      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d03c      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d2:	2210      	movs	r2, #16
 80034d4:	409a      	lsls	r2, r3
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d018      	beq.n	800351a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d108      	bne.n	8003508 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d024      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	4798      	blx	r3
 8003506:	e01f      	b.n	8003548 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01b      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	4798      	blx	r3
 8003518:	e016      	b.n	8003548 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d107      	bne.n	8003538 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0208 	bic.w	r2, r2, #8
 8003536:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354c:	2220      	movs	r2, #32
 800354e:	409a      	lsls	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 808f 	beq.w	8003678 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8087 	beq.w	8003678 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356e:	2220      	movs	r2, #32
 8003570:	409a      	lsls	r2, r3
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b05      	cmp	r3, #5
 8003580:	d136      	bne.n	80035f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0216 	bic.w	r2, r2, #22
 8003590:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d103      	bne.n	80035b2 <HAL_DMA_IRQHandler+0x1da>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d007      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0208 	bic.w	r2, r2, #8
 80035c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c6:	223f      	movs	r2, #63	; 0x3f
 80035c8:	409a      	lsls	r2, r3
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d07e      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
        }
        return;
 80035ee:	e079      	b.n	80036e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d01d      	beq.n	800363a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10d      	bne.n	8003628 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003610:	2b00      	cmp	r3, #0
 8003612:	d031      	beq.n	8003678 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	4798      	blx	r3
 800361c:	e02c      	b.n	8003678 <HAL_DMA_IRQHandler+0x2a0>
 800361e:	bf00      	nop
 8003620:	20000008 	.word	0x20000008
 8003624:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d023      	beq.n	8003678 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	4798      	blx	r3
 8003638:	e01e      	b.n	8003678 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10f      	bne.n	8003668 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0210 	bic.w	r2, r2, #16
 8003656:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367c:	2b00      	cmp	r3, #0
 800367e:	d032      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d022      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2205      	movs	r2, #5
 8003690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	3301      	adds	r3, #1
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d307      	bcc.n	80036c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f2      	bne.n	80036a4 <HAL_DMA_IRQHandler+0x2cc>
 80036be:	e000      	b.n	80036c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d005      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	4798      	blx	r3
 80036e2:	e000      	b.n	80036e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80036e4:	bf00      	nop
    }
  }
}
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003708:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b40      	cmp	r3, #64	; 0x40
 8003718:	d108      	bne.n	800372c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800372a:	e007      	b.n	800373c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	60da      	str	r2, [r3, #12]
}
 800373c:	bf00      	nop
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	3b10      	subs	r3, #16
 8003758:	4a14      	ldr	r2, [pc, #80]	; (80037ac <DMA_CalcBaseAndBitshift+0x64>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003762:	4a13      	ldr	r2, [pc, #76]	; (80037b0 <DMA_CalcBaseAndBitshift+0x68>)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4413      	add	r3, r2
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d909      	bls.n	800378a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800377e:	f023 0303 	bic.w	r3, r3, #3
 8003782:	1d1a      	adds	r2, r3, #4
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	659a      	str	r2, [r3, #88]	; 0x58
 8003788:	e007      	b.n	800379a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003792:	f023 0303 	bic.w	r3, r3, #3
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	aaaaaaab 	.word	0xaaaaaaab
 80037b0:	0801852c 	.word	0x0801852c

080037b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d11f      	bne.n	800380e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d856      	bhi.n	8003882 <DMA_CheckFifoParam+0xce>
 80037d4:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <DMA_CheckFifoParam+0x28>)
 80037d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037da:	bf00      	nop
 80037dc:	080037ed 	.word	0x080037ed
 80037e0:	080037ff 	.word	0x080037ff
 80037e4:	080037ed 	.word	0x080037ed
 80037e8:	08003883 	.word	0x08003883
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d046      	beq.n	8003886 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037fc:	e043      	b.n	8003886 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003806:	d140      	bne.n	800388a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800380c:	e03d      	b.n	800388a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003816:	d121      	bne.n	800385c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b03      	cmp	r3, #3
 800381c:	d837      	bhi.n	800388e <DMA_CheckFifoParam+0xda>
 800381e:	a201      	add	r2, pc, #4	; (adr r2, 8003824 <DMA_CheckFifoParam+0x70>)
 8003820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003824:	08003835 	.word	0x08003835
 8003828:	0800383b 	.word	0x0800383b
 800382c:	08003835 	.word	0x08003835
 8003830:	0800384d 	.word	0x0800384d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      break;
 8003838:	e030      	b.n	800389c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d025      	beq.n	8003892 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800384a:	e022      	b.n	8003892 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003854:	d11f      	bne.n	8003896 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800385a:	e01c      	b.n	8003896 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d903      	bls.n	800386a <DMA_CheckFifoParam+0xb6>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b03      	cmp	r3, #3
 8003866:	d003      	beq.n	8003870 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003868:	e018      	b.n	800389c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
      break;
 800386e:	e015      	b.n	800389c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00e      	beq.n	800389a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
      break;
 8003880:	e00b      	b.n	800389a <DMA_CheckFifoParam+0xe6>
      break;
 8003882:	bf00      	nop
 8003884:	e00a      	b.n	800389c <DMA_CheckFifoParam+0xe8>
      break;
 8003886:	bf00      	nop
 8003888:	e008      	b.n	800389c <DMA_CheckFifoParam+0xe8>
      break;
 800388a:	bf00      	nop
 800388c:	e006      	b.n	800389c <DMA_CheckFifoParam+0xe8>
      break;
 800388e:	bf00      	nop
 8003890:	e004      	b.n	800389c <DMA_CheckFifoParam+0xe8>
      break;
 8003892:	bf00      	nop
 8003894:	e002      	b.n	800389c <DMA_CheckFifoParam+0xe8>
      break;   
 8003896:	bf00      	nop
 8003898:	e000      	b.n	800389c <DMA_CheckFifoParam+0xe8>
      break;
 800389a:	bf00      	nop
    }
  } 
  
  return status; 
 800389c:	7bfb      	ldrb	r3, [r7, #15]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop

080038ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b089      	sub	sp, #36	; 0x24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038be:	2300      	movs	r3, #0
 80038c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	e159      	b.n	8003b7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038c8:	2201      	movs	r2, #1
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4013      	ands	r3, r2
 80038da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	f040 8148 	bne.w	8003b76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d005      	beq.n	80038fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d130      	bne.n	8003960 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	2203      	movs	r2, #3
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003934:	2201      	movs	r2, #1
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4013      	ands	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	091b      	lsrs	r3, r3, #4
 800394a:	f003 0201 	and.w	r2, r3, #1
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	2b03      	cmp	r3, #3
 800396a:	d017      	beq.n	800399c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	2203      	movs	r2, #3
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d123      	bne.n	80039f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	08da      	lsrs	r2, r3, #3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3208      	adds	r2, #8
 80039b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	220f      	movs	r2, #15
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	08da      	lsrs	r2, r3, #3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3208      	adds	r2, #8
 80039ea:	69b9      	ldr	r1, [r7, #24]
 80039ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	2203      	movs	r2, #3
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4013      	ands	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 0203 	and.w	r2, r3, #3
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80a2 	beq.w	8003b76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	4b57      	ldr	r3, [pc, #348]	; (8003b94 <HAL_GPIO_Init+0x2e8>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	4a56      	ldr	r2, [pc, #344]	; (8003b94 <HAL_GPIO_Init+0x2e8>)
 8003a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a40:	6453      	str	r3, [r2, #68]	; 0x44
 8003a42:	4b54      	ldr	r3, [pc, #336]	; (8003b94 <HAL_GPIO_Init+0x2e8>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a4e:	4a52      	ldr	r2, [pc, #328]	; (8003b98 <HAL_GPIO_Init+0x2ec>)
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	089b      	lsrs	r3, r3, #2
 8003a54:	3302      	adds	r3, #2
 8003a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	220f      	movs	r2, #15
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a49      	ldr	r2, [pc, #292]	; (8003b9c <HAL_GPIO_Init+0x2f0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d019      	beq.n	8003aae <HAL_GPIO_Init+0x202>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a48      	ldr	r2, [pc, #288]	; (8003ba0 <HAL_GPIO_Init+0x2f4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <HAL_GPIO_Init+0x1fe>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a47      	ldr	r2, [pc, #284]	; (8003ba4 <HAL_GPIO_Init+0x2f8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00d      	beq.n	8003aa6 <HAL_GPIO_Init+0x1fa>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a46      	ldr	r2, [pc, #280]	; (8003ba8 <HAL_GPIO_Init+0x2fc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d007      	beq.n	8003aa2 <HAL_GPIO_Init+0x1f6>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a45      	ldr	r2, [pc, #276]	; (8003bac <HAL_GPIO_Init+0x300>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d101      	bne.n	8003a9e <HAL_GPIO_Init+0x1f2>
 8003a9a:	2304      	movs	r3, #4
 8003a9c:	e008      	b.n	8003ab0 <HAL_GPIO_Init+0x204>
 8003a9e:	2307      	movs	r3, #7
 8003aa0:	e006      	b.n	8003ab0 <HAL_GPIO_Init+0x204>
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e004      	b.n	8003ab0 <HAL_GPIO_Init+0x204>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e002      	b.n	8003ab0 <HAL_GPIO_Init+0x204>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <HAL_GPIO_Init+0x204>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	f002 0203 	and.w	r2, r2, #3
 8003ab6:	0092      	lsls	r2, r2, #2
 8003ab8:	4093      	lsls	r3, r2
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ac0:	4935      	ldr	r1, [pc, #212]	; (8003b98 <HAL_GPIO_Init+0x2ec>)
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	089b      	lsrs	r3, r3, #2
 8003ac6:	3302      	adds	r3, #2
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ace:	4b38      	ldr	r3, [pc, #224]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003af2:	4a2f      	ldr	r2, [pc, #188]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003af8:	4b2d      	ldr	r3, [pc, #180]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b1c:	4a24      	ldr	r2, [pc, #144]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b22:	4b23      	ldr	r3, [pc, #140]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b46:	4a1a      	ldr	r2, [pc, #104]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b4c:	4b18      	ldr	r3, [pc, #96]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b70:	4a0f      	ldr	r2, [pc, #60]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	61fb      	str	r3, [r7, #28]
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	2b0f      	cmp	r3, #15
 8003b80:	f67f aea2 	bls.w	80038c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop
 8003b88:	3724      	adds	r7, #36	; 0x24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40013800 	.word	0x40013800
 8003b9c:	40020000 	.word	0x40020000
 8003ba0:	40020400 	.word	0x40020400
 8003ba4:	40020800 	.word	0x40020800
 8003ba8:	40020c00 	.word	0x40020c00
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40013c00 	.word	0x40013c00

08003bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	807b      	strh	r3, [r7, #2]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bc4:	787b      	ldrb	r3, [r7, #1]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bca:	887a      	ldrh	r2, [r7, #2]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bd0:	e003      	b.n	8003bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bd2:	887b      	ldrh	r3, [r7, #2]
 8003bd4:	041a      	lsls	r2, r3, #16
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	619a      	str	r2, [r3, #24]
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e12b      	b.n	8003e52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fe fd9e 	bl	8002750 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2224      	movs	r2, #36	; 0x24
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0201 	bic.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c4c:	f001 fa88 	bl	8005160 <HAL_RCC_GetPCLK1Freq>
 8003c50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4a81      	ldr	r2, [pc, #516]	; (8003e5c <HAL_I2C_Init+0x274>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d807      	bhi.n	8003c6c <HAL_I2C_Init+0x84>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4a80      	ldr	r2, [pc, #512]	; (8003e60 <HAL_I2C_Init+0x278>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	bf94      	ite	ls
 8003c64:	2301      	movls	r3, #1
 8003c66:	2300      	movhi	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	e006      	b.n	8003c7a <HAL_I2C_Init+0x92>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4a7d      	ldr	r2, [pc, #500]	; (8003e64 <HAL_I2C_Init+0x27c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	bf94      	ite	ls
 8003c74:	2301      	movls	r3, #1
 8003c76:	2300      	movhi	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e0e7      	b.n	8003e52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4a78      	ldr	r2, [pc, #480]	; (8003e68 <HAL_I2C_Init+0x280>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	0c9b      	lsrs	r3, r3, #18
 8003c8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	4a6a      	ldr	r2, [pc, #424]	; (8003e5c <HAL_I2C_Init+0x274>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d802      	bhi.n	8003cbc <HAL_I2C_Init+0xd4>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	e009      	b.n	8003cd0 <HAL_I2C_Init+0xe8>
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	4a69      	ldr	r2, [pc, #420]	; (8003e6c <HAL_I2C_Init+0x284>)
 8003cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ccc:	099b      	lsrs	r3, r3, #6
 8003cce:	3301      	adds	r3, #1
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ce2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	495c      	ldr	r1, [pc, #368]	; (8003e5c <HAL_I2C_Init+0x274>)
 8003cec:	428b      	cmp	r3, r1
 8003cee:	d819      	bhi.n	8003d24 <HAL_I2C_Init+0x13c>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1e59      	subs	r1, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cfe:	1c59      	adds	r1, r3, #1
 8003d00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d04:	400b      	ands	r3, r1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_I2C_Init+0x138>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1e59      	subs	r1, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d18:	3301      	adds	r3, #1
 8003d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1e:	e051      	b.n	8003dc4 <HAL_I2C_Init+0x1dc>
 8003d20:	2304      	movs	r3, #4
 8003d22:	e04f      	b.n	8003dc4 <HAL_I2C_Init+0x1dc>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d111      	bne.n	8003d50 <HAL_I2C_Init+0x168>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	1e58      	subs	r0, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6859      	ldr	r1, [r3, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	440b      	add	r3, r1
 8003d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3e:	3301      	adds	r3, #1
 8003d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	bf0c      	ite	eq
 8003d48:	2301      	moveq	r3, #1
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	e012      	b.n	8003d76 <HAL_I2C_Init+0x18e>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1e58      	subs	r0, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6859      	ldr	r1, [r3, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	0099      	lsls	r1, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d66:	3301      	adds	r3, #1
 8003d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_I2C_Init+0x196>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e022      	b.n	8003dc4 <HAL_I2C_Init+0x1dc>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10e      	bne.n	8003da4 <HAL_I2C_Init+0x1bc>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1e58      	subs	r0, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6859      	ldr	r1, [r3, #4]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	440b      	add	r3, r1
 8003d94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d98:	3301      	adds	r3, #1
 8003d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da2:	e00f      	b.n	8003dc4 <HAL_I2C_Init+0x1dc>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	1e58      	subs	r0, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6859      	ldr	r1, [r3, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	0099      	lsls	r1, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dba:	3301      	adds	r3, #1
 8003dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	6809      	ldr	r1, [r1, #0]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69da      	ldr	r2, [r3, #28]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003df2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6911      	ldr	r1, [r2, #16]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68d2      	ldr	r2, [r2, #12]
 8003dfe:	4311      	orrs	r1, r2
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	430b      	orrs	r3, r1
 8003e06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695a      	ldr	r2, [r3, #20]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	000186a0 	.word	0x000186a0
 8003e60:	001e847f 	.word	0x001e847f
 8003e64:	003d08ff 	.word	0x003d08ff
 8003e68:	431bde83 	.word	0x431bde83
 8003e6c:	10624dd3 	.word	0x10624dd3

08003e70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08c      	sub	sp, #48	; 0x30
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	4608      	mov	r0, r1
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4603      	mov	r3, r0
 8003e80:	817b      	strh	r3, [r7, #10]
 8003e82:	460b      	mov	r3, r1
 8003e84:	813b      	strh	r3, [r7, #8]
 8003e86:	4613      	mov	r3, r2
 8003e88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e8a:	f7ff f81f 	bl	8002ecc <HAL_GetTick>
 8003e8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	f040 8214 	bne.w	80042c6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	2319      	movs	r3, #25
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	497b      	ldr	r1, [pc, #492]	; (8004094 <HAL_I2C_Mem_Read+0x224>)
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 fafb 	bl	80044a4 <I2C_WaitOnFlagUntilTimeout>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e207      	b.n	80042c8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_I2C_Mem_Read+0x56>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e200      	b.n	80042c8 <HAL_I2C_Mem_Read+0x458>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d007      	beq.n	8003eec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003efa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2222      	movs	r2, #34	; 0x22
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2240      	movs	r2, #64	; 0x40
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a5b      	ldr	r2, [pc, #364]	; (8004098 <HAL_I2C_Mem_Read+0x228>)
 8003f2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f2e:	88f8      	ldrh	r0, [r7, #6]
 8003f30:	893a      	ldrh	r2, [r7, #8]
 8003f32:	8979      	ldrh	r1, [r7, #10]
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 f9c8 	bl	80042d4 <I2C_RequestMemoryRead>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e1bc      	b.n	80042c8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d113      	bne.n	8003f7e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f56:	2300      	movs	r3, #0
 8003f58:	623b      	str	r3, [r7, #32]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	623b      	str	r3, [r7, #32]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	623b      	str	r3, [r7, #32]
 8003f6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	e190      	b.n	80042a0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d11b      	bne.n	8003fbe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	e170      	b.n	80042a0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d11b      	bne.n	8003ffe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fe4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	e150      	b.n	80042a0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004014:	e144      	b.n	80042a0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401a:	2b03      	cmp	r3, #3
 800401c:	f200 80f1 	bhi.w	8004202 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004024:	2b01      	cmp	r3, #1
 8004026:	d123      	bne.n	8004070 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 fb9b 	bl	8004768 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e145      	b.n	80042c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800406e:	e117      	b.n	80042a0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004074:	2b02      	cmp	r3, #2
 8004076:	d14e      	bne.n	8004116 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407e:	2200      	movs	r2, #0
 8004080:	4906      	ldr	r1, [pc, #24]	; (800409c <HAL_I2C_Mem_Read+0x22c>)
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 fa0e 	bl	80044a4 <I2C_WaitOnFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d008      	beq.n	80040a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e11a      	b.n	80042c8 <HAL_I2C_Mem_Read+0x458>
 8004092:	bf00      	nop
 8004094:	00100002 	.word	0x00100002
 8004098:	ffff0000 	.word	0xffff0000
 800409c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004114:	e0c4      	b.n	80042a0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411c:	2200      	movs	r2, #0
 800411e:	496c      	ldr	r1, [pc, #432]	; (80042d0 <HAL_I2C_Mem_Read+0x460>)
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 f9bf 	bl	80044a4 <I2C_WaitOnFlagUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0cb      	b.n	80042c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004178:	2200      	movs	r2, #0
 800417a:	4955      	ldr	r1, [pc, #340]	; (80042d0 <HAL_I2C_Mem_Read+0x460>)
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f991 	bl	80044a4 <I2C_WaitOnFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e09d      	b.n	80042c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800419a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004200:	e04e      	b.n	80042a0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004204:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 faae 	bl	8004768 <I2C_WaitOnRXNEFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e058      	b.n	80042c8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b04      	cmp	r3, #4
 8004254:	d124      	bne.n	80042a0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425a:	2b03      	cmp	r3, #3
 800425c:	d107      	bne.n	800426e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800426c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f47f aeb6 	bne.w	8004016 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e000      	b.n	80042c8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80042c6:	2302      	movs	r3, #2
  }
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3728      	adds	r7, #40	; 0x28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	00010004 	.word	0x00010004

080042d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	4608      	mov	r0, r1
 80042de:	4611      	mov	r1, r2
 80042e0:	461a      	mov	r2, r3
 80042e2:	4603      	mov	r3, r0
 80042e4:	817b      	strh	r3, [r7, #10]
 80042e6:	460b      	mov	r3, r1
 80042e8:	813b      	strh	r3, [r7, #8]
 80042ea:	4613      	mov	r3, r2
 80042ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800430c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	2200      	movs	r2, #0
 8004316:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f8c2 	bl	80044a4 <I2C_WaitOnFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00d      	beq.n	8004342 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004334:	d103      	bne.n	800433e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800433c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e0aa      	b.n	8004498 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004342:	897b      	ldrh	r3, [r7, #10]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	461a      	mov	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004350:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	6a3a      	ldr	r2, [r7, #32]
 8004356:	4952      	ldr	r1, [pc, #328]	; (80044a0 <I2C_RequestMemoryRead+0x1cc>)
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f91d 	bl	8004598 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e097      	b.n	8004498 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800437e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004380:	6a39      	ldr	r1, [r7, #32]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f9a8 	bl	80046d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00d      	beq.n	80043aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	2b04      	cmp	r3, #4
 8004394:	d107      	bne.n	80043a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e076      	b.n	8004498 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043aa:	88fb      	ldrh	r3, [r7, #6]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d105      	bne.n	80043bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043b0:	893b      	ldrh	r3, [r7, #8]
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	611a      	str	r2, [r3, #16]
 80043ba:	e021      	b.n	8004400 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043bc:	893b      	ldrh	r3, [r7, #8]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043cc:	6a39      	ldr	r1, [r7, #32]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f982 	bl	80046d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00d      	beq.n	80043f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d107      	bne.n	80043f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e050      	b.n	8004498 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043f6:	893b      	ldrh	r3, [r7, #8]
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004402:	6a39      	ldr	r1, [r7, #32]
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f967 	bl	80046d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00d      	beq.n	800442c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	2b04      	cmp	r3, #4
 8004416:	d107      	bne.n	8004428 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004426:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e035      	b.n	8004498 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800443a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	2200      	movs	r2, #0
 8004444:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f82b 	bl	80044a4 <I2C_WaitOnFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00d      	beq.n	8004470 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004462:	d103      	bne.n	800446c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800446a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e013      	b.n	8004498 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004470:	897b      	ldrh	r3, [r7, #10]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	b2da      	uxtb	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	6a3a      	ldr	r2, [r7, #32]
 8004484:	4906      	ldr	r1, [pc, #24]	; (80044a0 <I2C_RequestMemoryRead+0x1cc>)
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 f886 	bl	8004598 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	00010002 	.word	0x00010002

080044a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	4613      	mov	r3, r2
 80044b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044b4:	e048      	b.n	8004548 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044bc:	d044      	beq.n	8004548 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044be:	f7fe fd05 	bl	8002ecc <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d302      	bcc.n	80044d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d139      	bne.n	8004548 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	0c1b      	lsrs	r3, r3, #16
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d10d      	bne.n	80044fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	43da      	mvns	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	4013      	ands	r3, r2
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	bf0c      	ite	eq
 80044f0:	2301      	moveq	r3, #1
 80044f2:	2300      	movne	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	461a      	mov	r2, r3
 80044f8:	e00c      	b.n	8004514 <I2C_WaitOnFlagUntilTimeout+0x70>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	43da      	mvns	r2, r3
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	4013      	ands	r3, r2
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	bf0c      	ite	eq
 800450c:	2301      	moveq	r3, #1
 800450e:	2300      	movne	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	461a      	mov	r2, r3
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	429a      	cmp	r2, r3
 8004518:	d116      	bne.n	8004548 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	f043 0220 	orr.w	r2, r3, #32
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e023      	b.n	8004590 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	0c1b      	lsrs	r3, r3, #16
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b01      	cmp	r3, #1
 8004550:	d10d      	bne.n	800456e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	43da      	mvns	r2, r3
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4013      	ands	r3, r2
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	bf0c      	ite	eq
 8004564:	2301      	moveq	r3, #1
 8004566:	2300      	movne	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	461a      	mov	r2, r3
 800456c:	e00c      	b.n	8004588 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	43da      	mvns	r2, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	4013      	ands	r3, r2
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	bf0c      	ite	eq
 8004580:	2301      	moveq	r3, #1
 8004582:	2300      	movne	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	429a      	cmp	r2, r3
 800458c:	d093      	beq.n	80044b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045a6:	e071      	b.n	800468c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b6:	d123      	bne.n	8004600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	f043 0204 	orr.w	r2, r3, #4
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e067      	b.n	80046d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004606:	d041      	beq.n	800468c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004608:	f7fe fc60 	bl	8002ecc <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	429a      	cmp	r2, r3
 8004616:	d302      	bcc.n	800461e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d136      	bne.n	800468c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	0c1b      	lsrs	r3, r3, #16
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b01      	cmp	r3, #1
 8004626:	d10c      	bne.n	8004642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	43da      	mvns	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4013      	ands	r3, r2
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	bf14      	ite	ne
 800463a:	2301      	movne	r3, #1
 800463c:	2300      	moveq	r3, #0
 800463e:	b2db      	uxtb	r3, r3
 8004640:	e00b      	b.n	800465a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	43da      	mvns	r2, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	4013      	ands	r3, r2
 800464e:	b29b      	uxth	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	bf14      	ite	ne
 8004654:	2301      	movne	r3, #1
 8004656:	2300      	moveq	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d016      	beq.n	800468c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	f043 0220 	orr.w	r2, r3, #32
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e021      	b.n	80046d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	0c1b      	lsrs	r3, r3, #16
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b01      	cmp	r3, #1
 8004694:	d10c      	bne.n	80046b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	43da      	mvns	r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4013      	ands	r3, r2
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bf14      	ite	ne
 80046a8:	2301      	movne	r3, #1
 80046aa:	2300      	moveq	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	e00b      	b.n	80046c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	43da      	mvns	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4013      	ands	r3, r2
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	bf14      	ite	ne
 80046c2:	2301      	movne	r3, #1
 80046c4:	2300      	moveq	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f47f af6d 	bne.w	80045a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046e4:	e034      	b.n	8004750 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f89b 	bl	8004822 <I2C_IsAcknowledgeFailed>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e034      	b.n	8004760 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046fc:	d028      	beq.n	8004750 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fe:	f7fe fbe5 	bl	8002ecc <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	429a      	cmp	r2, r3
 800470c:	d302      	bcc.n	8004714 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d11d      	bne.n	8004750 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471e:	2b80      	cmp	r3, #128	; 0x80
 8004720:	d016      	beq.n	8004750 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	f043 0220 	orr.w	r2, r3, #32
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e007      	b.n	8004760 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475a:	2b80      	cmp	r3, #128	; 0x80
 800475c:	d1c3      	bne.n	80046e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004774:	e049      	b.n	800480a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	2b10      	cmp	r3, #16
 8004782:	d119      	bne.n	80047b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0210 	mvn.w	r2, #16
 800478c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e030      	b.n	800481a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b8:	f7fe fb88 	bl	8002ecc <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d302      	bcc.n	80047ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d11d      	bne.n	800480a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d8:	2b40      	cmp	r3, #64	; 0x40
 80047da:	d016      	beq.n	800480a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f043 0220 	orr.w	r2, r3, #32
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e007      	b.n	800481a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004814:	2b40      	cmp	r3, #64	; 0x40
 8004816:	d1ae      	bne.n	8004776 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004838:	d11b      	bne.n	8004872 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004842:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f043 0204 	orr.w	r2, r3, #4
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e267      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d075      	beq.n	800498a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800489e:	4b88      	ldr	r3, [pc, #544]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d00c      	beq.n	80048c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048aa:	4b85      	ldr	r3, [pc, #532]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d112      	bne.n	80048dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048b6:	4b82      	ldr	r3, [pc, #520]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048c2:	d10b      	bne.n	80048dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c4:	4b7e      	ldr	r3, [pc, #504]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d05b      	beq.n	8004988 <HAL_RCC_OscConfig+0x108>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d157      	bne.n	8004988 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e242      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e4:	d106      	bne.n	80048f4 <HAL_RCC_OscConfig+0x74>
 80048e6:	4b76      	ldr	r3, [pc, #472]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a75      	ldr	r2, [pc, #468]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80048ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	e01d      	b.n	8004930 <HAL_RCC_OscConfig+0xb0>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048fc:	d10c      	bne.n	8004918 <HAL_RCC_OscConfig+0x98>
 80048fe:	4b70      	ldr	r3, [pc, #448]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a6f      	ldr	r2, [pc, #444]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	4b6d      	ldr	r3, [pc, #436]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a6c      	ldr	r2, [pc, #432]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	e00b      	b.n	8004930 <HAL_RCC_OscConfig+0xb0>
 8004918:	4b69      	ldr	r3, [pc, #420]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a68      	ldr	r2, [pc, #416]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 800491e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	4b66      	ldr	r3, [pc, #408]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a65      	ldr	r2, [pc, #404]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 800492a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800492e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d013      	beq.n	8004960 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004938:	f7fe fac8 	bl	8002ecc <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004940:	f7fe fac4 	bl	8002ecc <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b64      	cmp	r3, #100	; 0x64
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e207      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004952:	4b5b      	ldr	r3, [pc, #364]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0xc0>
 800495e:	e014      	b.n	800498a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004960:	f7fe fab4 	bl	8002ecc <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004968:	f7fe fab0 	bl	8002ecc <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b64      	cmp	r3, #100	; 0x64
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e1f3      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800497a:	4b51      	ldr	r3, [pc, #324]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0xe8>
 8004986:	e000      	b.n	800498a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d063      	beq.n	8004a5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004996:	4b4a      	ldr	r3, [pc, #296]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 030c 	and.w	r3, r3, #12
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00b      	beq.n	80049ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049a2:	4b47      	ldr	r3, [pc, #284]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d11c      	bne.n	80049e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ae:	4b44      	ldr	r3, [pc, #272]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d116      	bne.n	80049e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ba:	4b41      	ldr	r3, [pc, #260]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <HAL_RCC_OscConfig+0x152>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d001      	beq.n	80049d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e1c7      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d2:	4b3b      	ldr	r3, [pc, #236]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	4937      	ldr	r1, [pc, #220]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e6:	e03a      	b.n	8004a5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d020      	beq.n	8004a32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049f0:	4b34      	ldr	r3, [pc, #208]	; (8004ac4 <HAL_RCC_OscConfig+0x244>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f6:	f7fe fa69 	bl	8002ecc <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049fe:	f7fe fa65 	bl	8002ecc <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e1a8      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a10:	4b2b      	ldr	r3, [pc, #172]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f0      	beq.n	80049fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1c:	4b28      	ldr	r3, [pc, #160]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	4925      	ldr	r1, [pc, #148]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	600b      	str	r3, [r1, #0]
 8004a30:	e015      	b.n	8004a5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a32:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <HAL_RCC_OscConfig+0x244>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a38:	f7fe fa48 	bl	8002ecc <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a40:	f7fe fa44 	bl	8002ecc <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e187      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a52:	4b1b      	ldr	r3, [pc, #108]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d036      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d016      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a72:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <HAL_RCC_OscConfig+0x248>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a78:	f7fe fa28 	bl	8002ecc <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a80:	f7fe fa24 	bl	8002ecc <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e167      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a92:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCC_OscConfig+0x200>
 8004a9e:	e01b      	b.n	8004ad8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <HAL_RCC_OscConfig+0x248>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa6:	f7fe fa11 	bl	8002ecc <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aac:	e00e      	b.n	8004acc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aae:	f7fe fa0d 	bl	8002ecc <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d907      	bls.n	8004acc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e150      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	42470000 	.word	0x42470000
 8004ac8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004acc:	4b88      	ldr	r3, [pc, #544]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1ea      	bne.n	8004aae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 8097 	beq.w	8004c14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aea:	4b81      	ldr	r3, [pc, #516]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10f      	bne.n	8004b16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af6:	2300      	movs	r3, #0
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	4b7d      	ldr	r3, [pc, #500]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	4a7c      	ldr	r2, [pc, #496]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b04:	6413      	str	r3, [r2, #64]	; 0x40
 8004b06:	4b7a      	ldr	r3, [pc, #488]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0e:	60bb      	str	r3, [r7, #8]
 8004b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b12:	2301      	movs	r3, #1
 8004b14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b16:	4b77      	ldr	r3, [pc, #476]	; (8004cf4 <HAL_RCC_OscConfig+0x474>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d118      	bne.n	8004b54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b22:	4b74      	ldr	r3, [pc, #464]	; (8004cf4 <HAL_RCC_OscConfig+0x474>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a73      	ldr	r2, [pc, #460]	; (8004cf4 <HAL_RCC_OscConfig+0x474>)
 8004b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b2e:	f7fe f9cd 	bl	8002ecc <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b36:	f7fe f9c9 	bl	8002ecc <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e10c      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b48:	4b6a      	ldr	r3, [pc, #424]	; (8004cf4 <HAL_RCC_OscConfig+0x474>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0f0      	beq.n	8004b36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d106      	bne.n	8004b6a <HAL_RCC_OscConfig+0x2ea>
 8004b5c:	4b64      	ldr	r3, [pc, #400]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b60:	4a63      	ldr	r2, [pc, #396]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	6713      	str	r3, [r2, #112]	; 0x70
 8004b68:	e01c      	b.n	8004ba4 <HAL_RCC_OscConfig+0x324>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b05      	cmp	r3, #5
 8004b70:	d10c      	bne.n	8004b8c <HAL_RCC_OscConfig+0x30c>
 8004b72:	4b5f      	ldr	r3, [pc, #380]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b76:	4a5e      	ldr	r2, [pc, #376]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b78:	f043 0304 	orr.w	r3, r3, #4
 8004b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7e:	4b5c      	ldr	r3, [pc, #368]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b82:	4a5b      	ldr	r2, [pc, #364]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b84:	f043 0301 	orr.w	r3, r3, #1
 8004b88:	6713      	str	r3, [r2, #112]	; 0x70
 8004b8a:	e00b      	b.n	8004ba4 <HAL_RCC_OscConfig+0x324>
 8004b8c:	4b58      	ldr	r3, [pc, #352]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	4a57      	ldr	r2, [pc, #348]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	6713      	str	r3, [r2, #112]	; 0x70
 8004b98:	4b55      	ldr	r3, [pc, #340]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9c:	4a54      	ldr	r2, [pc, #336]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b9e:	f023 0304 	bic.w	r3, r3, #4
 8004ba2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d015      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bac:	f7fe f98e 	bl	8002ecc <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb2:	e00a      	b.n	8004bca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bb4:	f7fe f98a 	bl	8002ecc <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e0cb      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bca:	4b49      	ldr	r3, [pc, #292]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0ee      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x334>
 8004bd6:	e014      	b.n	8004c02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd8:	f7fe f978 	bl	8002ecc <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bde:	e00a      	b.n	8004bf6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004be0:	f7fe f974 	bl	8002ecc <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e0b5      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf6:	4b3e      	ldr	r3, [pc, #248]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1ee      	bne.n	8004be0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d105      	bne.n	8004c14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c08:	4b39      	ldr	r3, [pc, #228]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	4a38      	ldr	r2, [pc, #224]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 80a1 	beq.w	8004d60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c1e:	4b34      	ldr	r3, [pc, #208]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 030c 	and.w	r3, r3, #12
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d05c      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d141      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c32:	4b31      	ldr	r3, [pc, #196]	; (8004cf8 <HAL_RCC_OscConfig+0x478>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c38:	f7fe f948 	bl	8002ecc <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c40:	f7fe f944 	bl	8002ecc <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e087      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c52:	4b27      	ldr	r3, [pc, #156]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69da      	ldr	r2, [r3, #28]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	019b      	lsls	r3, r3, #6
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c74:	085b      	lsrs	r3, r3, #1
 8004c76:	3b01      	subs	r3, #1
 8004c78:	041b      	lsls	r3, r3, #16
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	061b      	lsls	r3, r3, #24
 8004c82:	491b      	ldr	r1, [pc, #108]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c88:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <HAL_RCC_OscConfig+0x478>)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8e:	f7fe f91d 	bl	8002ecc <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c96:	f7fe f919 	bl	8002ecc <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e05c      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ca8:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f0      	beq.n	8004c96 <HAL_RCC_OscConfig+0x416>
 8004cb4:	e054      	b.n	8004d60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb6:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <HAL_RCC_OscConfig+0x478>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbc:	f7fe f906 	bl	8002ecc <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc4:	f7fe f902 	bl	8002ecc <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e045      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd6:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f0      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x444>
 8004ce2:	e03d      	b.n	8004d60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d107      	bne.n	8004cfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e038      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	40007000 	.word	0x40007000
 8004cf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cfc:	4b1b      	ldr	r3, [pc, #108]	; (8004d6c <HAL_RCC_OscConfig+0x4ec>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d028      	beq.n	8004d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d121      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d11a      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d111      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d42:	085b      	lsrs	r3, r3, #1
 8004d44:	3b01      	subs	r3, #1
 8004d46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d107      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d001      	beq.n	8004d60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40023800 	.word	0x40023800

08004d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0cc      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d84:	4b68      	ldr	r3, [pc, #416]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d90c      	bls.n	8004dac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d92:	4b65      	ldr	r3, [pc, #404]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9a:	4b63      	ldr	r3, [pc, #396]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d001      	beq.n	8004dac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e0b8      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d020      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dc4:	4b59      	ldr	r3, [pc, #356]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	4a58      	ldr	r2, [pc, #352]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ddc:	4b53      	ldr	r3, [pc, #332]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	4a52      	ldr	r2, [pc, #328]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004de6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de8:	4b50      	ldr	r3, [pc, #320]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	494d      	ldr	r1, [pc, #308]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d044      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d107      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0e:	4b47      	ldr	r3, [pc, #284]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d119      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e07f      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d003      	beq.n	8004e2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d107      	bne.n	8004e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2e:	4b3f      	ldr	r3, [pc, #252]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d109      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e06f      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3e:	4b3b      	ldr	r3, [pc, #236]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e067      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e4e:	4b37      	ldr	r3, [pc, #220]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f023 0203 	bic.w	r2, r3, #3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	4934      	ldr	r1, [pc, #208]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e60:	f7fe f834 	bl	8002ecc <HAL_GetTick>
 8004e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e66:	e00a      	b.n	8004e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e68:	f7fe f830 	bl	8002ecc <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e04f      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7e:	4b2b      	ldr	r3, [pc, #172]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 020c 	and.w	r2, r3, #12
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d1eb      	bne.n	8004e68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e90:	4b25      	ldr	r3, [pc, #148]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d20c      	bcs.n	8004eb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9e:	4b22      	ldr	r3, [pc, #136]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea6:	4b20      	ldr	r3, [pc, #128]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d001      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e032      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d008      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ec4:	4b19      	ldr	r3, [pc, #100]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4916      	ldr	r1, [pc, #88]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d009      	beq.n	8004ef6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ee2:	4b12      	ldr	r3, [pc, #72]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	490e      	ldr	r1, [pc, #56]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ef6:	f000 f821 	bl	8004f3c <HAL_RCC_GetSysClockFreq>
 8004efa:	4602      	mov	r2, r0
 8004efc:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	091b      	lsrs	r3, r3, #4
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	490a      	ldr	r1, [pc, #40]	; (8004f30 <HAL_RCC_ClockConfig+0x1c0>)
 8004f08:	5ccb      	ldrb	r3, [r1, r3]
 8004f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0e:	4a09      	ldr	r2, [pc, #36]	; (8004f34 <HAL_RCC_ClockConfig+0x1c4>)
 8004f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f12:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <HAL_RCC_ClockConfig+0x1c8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fd fde6 	bl	8002ae8 <HAL_InitTick>

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40023c00 	.word	0x40023c00
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	08018514 	.word	0x08018514
 8004f34:	20000008 	.word	0x20000008
 8004f38:	2000000c 	.word	0x2000000c

08004f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f40:	b094      	sub	sp, #80	; 0x50
 8004f42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	647b      	str	r3, [r7, #68]	; 0x44
 8004f48:	2300      	movs	r3, #0
 8004f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f54:	4b79      	ldr	r3, [pc, #484]	; (800513c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 030c 	and.w	r3, r3, #12
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d00d      	beq.n	8004f7c <HAL_RCC_GetSysClockFreq+0x40>
 8004f60:	2b08      	cmp	r3, #8
 8004f62:	f200 80e1 	bhi.w	8005128 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_RCC_GetSysClockFreq+0x34>
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d003      	beq.n	8004f76 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f6e:	e0db      	b.n	8005128 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f70:	4b73      	ldr	r3, [pc, #460]	; (8005140 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004f74:	e0db      	b.n	800512e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f76:	4b73      	ldr	r3, [pc, #460]	; (8005144 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f7a:	e0d8      	b.n	800512e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f7c:	4b6f      	ldr	r3, [pc, #444]	; (800513c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f86:	4b6d      	ldr	r3, [pc, #436]	; (800513c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d063      	beq.n	800505a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f92:	4b6a      	ldr	r3, [pc, #424]	; (800513c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	099b      	lsrs	r3, r3, #6
 8004f98:	2200      	movs	r2, #0
 8004f9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa4:	633b      	str	r3, [r7, #48]	; 0x30
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8004faa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004fae:	4622      	mov	r2, r4
 8004fb0:	462b      	mov	r3, r5
 8004fb2:	f04f 0000 	mov.w	r0, #0
 8004fb6:	f04f 0100 	mov.w	r1, #0
 8004fba:	0159      	lsls	r1, r3, #5
 8004fbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fc0:	0150      	lsls	r0, r2, #5
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	1a51      	subs	r1, r2, r1
 8004fca:	6139      	str	r1, [r7, #16]
 8004fcc:	4629      	mov	r1, r5
 8004fce:	eb63 0301 	sbc.w	r3, r3, r1
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fe0:	4659      	mov	r1, fp
 8004fe2:	018b      	lsls	r3, r1, #6
 8004fe4:	4651      	mov	r1, sl
 8004fe6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fea:	4651      	mov	r1, sl
 8004fec:	018a      	lsls	r2, r1, #6
 8004fee:	4651      	mov	r1, sl
 8004ff0:	ebb2 0801 	subs.w	r8, r2, r1
 8004ff4:	4659      	mov	r1, fp
 8004ff6:	eb63 0901 	sbc.w	r9, r3, r1
 8004ffa:	f04f 0200 	mov.w	r2, #0
 8004ffe:	f04f 0300 	mov.w	r3, #0
 8005002:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005006:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800500a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800500e:	4690      	mov	r8, r2
 8005010:	4699      	mov	r9, r3
 8005012:	4623      	mov	r3, r4
 8005014:	eb18 0303 	adds.w	r3, r8, r3
 8005018:	60bb      	str	r3, [r7, #8]
 800501a:	462b      	mov	r3, r5
 800501c:	eb49 0303 	adc.w	r3, r9, r3
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800502e:	4629      	mov	r1, r5
 8005030:	024b      	lsls	r3, r1, #9
 8005032:	4621      	mov	r1, r4
 8005034:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005038:	4621      	mov	r1, r4
 800503a:	024a      	lsls	r2, r1, #9
 800503c:	4610      	mov	r0, r2
 800503e:	4619      	mov	r1, r3
 8005040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005042:	2200      	movs	r2, #0
 8005044:	62bb      	str	r3, [r7, #40]	; 0x28
 8005046:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005048:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800504c:	f7fb fed4 	bl	8000df8 <__aeabi_uldivmod>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4613      	mov	r3, r2
 8005056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005058:	e058      	b.n	800510c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800505a:	4b38      	ldr	r3, [pc, #224]	; (800513c <HAL_RCC_GetSysClockFreq+0x200>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	099b      	lsrs	r3, r3, #6
 8005060:	2200      	movs	r2, #0
 8005062:	4618      	mov	r0, r3
 8005064:	4611      	mov	r1, r2
 8005066:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800506a:	623b      	str	r3, [r7, #32]
 800506c:	2300      	movs	r3, #0
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
 8005070:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005074:	4642      	mov	r2, r8
 8005076:	464b      	mov	r3, r9
 8005078:	f04f 0000 	mov.w	r0, #0
 800507c:	f04f 0100 	mov.w	r1, #0
 8005080:	0159      	lsls	r1, r3, #5
 8005082:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005086:	0150      	lsls	r0, r2, #5
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4641      	mov	r1, r8
 800508e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005092:	4649      	mov	r1, r9
 8005094:	eb63 0b01 	sbc.w	fp, r3, r1
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	f04f 0300 	mov.w	r3, #0
 80050a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050ac:	ebb2 040a 	subs.w	r4, r2, sl
 80050b0:	eb63 050b 	sbc.w	r5, r3, fp
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	00eb      	lsls	r3, r5, #3
 80050be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050c2:	00e2      	lsls	r2, r4, #3
 80050c4:	4614      	mov	r4, r2
 80050c6:	461d      	mov	r5, r3
 80050c8:	4643      	mov	r3, r8
 80050ca:	18e3      	adds	r3, r4, r3
 80050cc:	603b      	str	r3, [r7, #0]
 80050ce:	464b      	mov	r3, r9
 80050d0:	eb45 0303 	adc.w	r3, r5, r3
 80050d4:	607b      	str	r3, [r7, #4]
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050e2:	4629      	mov	r1, r5
 80050e4:	028b      	lsls	r3, r1, #10
 80050e6:	4621      	mov	r1, r4
 80050e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050ec:	4621      	mov	r1, r4
 80050ee:	028a      	lsls	r2, r1, #10
 80050f0:	4610      	mov	r0, r2
 80050f2:	4619      	mov	r1, r3
 80050f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050f6:	2200      	movs	r2, #0
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	61fa      	str	r2, [r7, #28]
 80050fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005100:	f7fb fe7a 	bl	8000df8 <__aeabi_uldivmod>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	4613      	mov	r3, r2
 800510a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800510c:	4b0b      	ldr	r3, [pc, #44]	; (800513c <HAL_RCC_GetSysClockFreq+0x200>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	0c1b      	lsrs	r3, r3, #16
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	3301      	adds	r3, #1
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800511c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800511e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005120:	fbb2 f3f3 	udiv	r3, r2, r3
 8005124:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005126:	e002      	b.n	800512e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005128:	4b05      	ldr	r3, [pc, #20]	; (8005140 <HAL_RCC_GetSysClockFreq+0x204>)
 800512a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800512c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800512e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005130:	4618      	mov	r0, r3
 8005132:	3750      	adds	r7, #80	; 0x50
 8005134:	46bd      	mov	sp, r7
 8005136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800513a:	bf00      	nop
 800513c:	40023800 	.word	0x40023800
 8005140:	00f42400 	.word	0x00f42400
 8005144:	007a1200 	.word	0x007a1200

08005148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800514c:	4b03      	ldr	r3, [pc, #12]	; (800515c <HAL_RCC_GetHCLKFreq+0x14>)
 800514e:	681b      	ldr	r3, [r3, #0]
}
 8005150:	4618      	mov	r0, r3
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	20000008 	.word	0x20000008

08005160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005164:	f7ff fff0 	bl	8005148 <HAL_RCC_GetHCLKFreq>
 8005168:	4602      	mov	r2, r0
 800516a:	4b05      	ldr	r3, [pc, #20]	; (8005180 <HAL_RCC_GetPCLK1Freq+0x20>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	0a9b      	lsrs	r3, r3, #10
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	4903      	ldr	r1, [pc, #12]	; (8005184 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005176:	5ccb      	ldrb	r3, [r1, r3]
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800517c:	4618      	mov	r0, r3
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40023800 	.word	0x40023800
 8005184:	08018524 	.word	0x08018524

08005188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800518c:	f7ff ffdc 	bl	8005148 <HAL_RCC_GetHCLKFreq>
 8005190:	4602      	mov	r2, r0
 8005192:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	0b5b      	lsrs	r3, r3, #13
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	4903      	ldr	r1, [pc, #12]	; (80051ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800519e:	5ccb      	ldrb	r3, [r1, r3]
 80051a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40023800 	.word	0x40023800
 80051ac:	08018524 	.word	0x08018524

080051b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	220f      	movs	r2, #15
 80051be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051c0:	4b12      	ldr	r3, [pc, #72]	; (800520c <HAL_RCC_GetClockConfig+0x5c>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 0203 	and.w	r2, r3, #3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051cc:	4b0f      	ldr	r3, [pc, #60]	; (800520c <HAL_RCC_GetClockConfig+0x5c>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80051d8:	4b0c      	ldr	r3, [pc, #48]	; (800520c <HAL_RCC_GetClockConfig+0x5c>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80051e4:	4b09      	ldr	r3, [pc, #36]	; (800520c <HAL_RCC_GetClockConfig+0x5c>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	08db      	lsrs	r3, r3, #3
 80051ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80051f2:	4b07      	ldr	r3, [pc, #28]	; (8005210 <HAL_RCC_GetClockConfig+0x60>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0207 	and.w	r2, r3, #7
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	601a      	str	r2, [r3, #0]
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40023800 	.word	0x40023800
 8005210:	40023c00 	.word	0x40023c00

08005214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e041      	b.n	80052aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fd fb28 	bl	8002890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3304      	adds	r3, #4
 8005250:	4619      	mov	r1, r3
 8005252:	4610      	mov	r0, r2
 8005254:	f000 fc3c 	bl	8005ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d001      	beq.n	80052cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e044      	b.n	8005356 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1e      	ldr	r2, [pc, #120]	; (8005364 <HAL_TIM_Base_Start_IT+0xb0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d018      	beq.n	8005320 <HAL_TIM_Base_Start_IT+0x6c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f6:	d013      	beq.n	8005320 <HAL_TIM_Base_Start_IT+0x6c>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a1a      	ldr	r2, [pc, #104]	; (8005368 <HAL_TIM_Base_Start_IT+0xb4>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00e      	beq.n	8005320 <HAL_TIM_Base_Start_IT+0x6c>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a19      	ldr	r2, [pc, #100]	; (800536c <HAL_TIM_Base_Start_IT+0xb8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d009      	beq.n	8005320 <HAL_TIM_Base_Start_IT+0x6c>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a17      	ldr	r2, [pc, #92]	; (8005370 <HAL_TIM_Base_Start_IT+0xbc>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d004      	beq.n	8005320 <HAL_TIM_Base_Start_IT+0x6c>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a16      	ldr	r2, [pc, #88]	; (8005374 <HAL_TIM_Base_Start_IT+0xc0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d111      	bne.n	8005344 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b06      	cmp	r3, #6
 8005330:	d010      	beq.n	8005354 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f042 0201 	orr.w	r2, r2, #1
 8005340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005342:	e007      	b.n	8005354 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0201 	orr.w	r2, r2, #1
 8005352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40010000 	.word	0x40010000
 8005368:	40000400 	.word	0x40000400
 800536c:	40000800 	.word	0x40000800
 8005370:	40000c00 	.word	0x40000c00
 8005374:	40014000 	.word	0x40014000

08005378 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e041      	b.n	800540e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f839 	bl	8005416 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3304      	adds	r3, #4
 80053b4:	4619      	mov	r1, r3
 80053b6:	4610      	mov	r0, r2
 80053b8:	f000 fb8a 	bl	8005ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
	...

0800542c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d109      	bne.n	8005450 <HAL_TIM_PWM_Start+0x24>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b01      	cmp	r3, #1
 8005446:	bf14      	ite	ne
 8005448:	2301      	movne	r3, #1
 800544a:	2300      	moveq	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	e022      	b.n	8005496 <HAL_TIM_PWM_Start+0x6a>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b04      	cmp	r3, #4
 8005454:	d109      	bne.n	800546a <HAL_TIM_PWM_Start+0x3e>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b01      	cmp	r3, #1
 8005460:	bf14      	ite	ne
 8005462:	2301      	movne	r3, #1
 8005464:	2300      	moveq	r3, #0
 8005466:	b2db      	uxtb	r3, r3
 8005468:	e015      	b.n	8005496 <HAL_TIM_PWM_Start+0x6a>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b08      	cmp	r3, #8
 800546e:	d109      	bne.n	8005484 <HAL_TIM_PWM_Start+0x58>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b01      	cmp	r3, #1
 800547a:	bf14      	ite	ne
 800547c:	2301      	movne	r3, #1
 800547e:	2300      	moveq	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	e008      	b.n	8005496 <HAL_TIM_PWM_Start+0x6a>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b01      	cmp	r3, #1
 800548e:	bf14      	ite	ne
 8005490:	2301      	movne	r3, #1
 8005492:	2300      	moveq	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e068      	b.n	8005570 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_PWM_Start+0x82>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054ac:	e013      	b.n	80054d6 <HAL_TIM_PWM_Start+0xaa>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d104      	bne.n	80054be <HAL_TIM_PWM_Start+0x92>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054bc:	e00b      	b.n	80054d6 <HAL_TIM_PWM_Start+0xaa>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d104      	bne.n	80054ce <HAL_TIM_PWM_Start+0xa2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054cc:	e003      	b.n	80054d6 <HAL_TIM_PWM_Start+0xaa>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2202      	movs	r2, #2
 80054d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2201      	movs	r2, #1
 80054dc:	6839      	ldr	r1, [r7, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fda8 	bl	8006034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a23      	ldr	r2, [pc, #140]	; (8005578 <HAL_TIM_PWM_Start+0x14c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d107      	bne.n	80054fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a1d      	ldr	r2, [pc, #116]	; (8005578 <HAL_TIM_PWM_Start+0x14c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d018      	beq.n	800553a <HAL_TIM_PWM_Start+0x10e>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005510:	d013      	beq.n	800553a <HAL_TIM_PWM_Start+0x10e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a19      	ldr	r2, [pc, #100]	; (800557c <HAL_TIM_PWM_Start+0x150>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00e      	beq.n	800553a <HAL_TIM_PWM_Start+0x10e>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a17      	ldr	r2, [pc, #92]	; (8005580 <HAL_TIM_PWM_Start+0x154>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d009      	beq.n	800553a <HAL_TIM_PWM_Start+0x10e>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a16      	ldr	r2, [pc, #88]	; (8005584 <HAL_TIM_PWM_Start+0x158>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d004      	beq.n	800553a <HAL_TIM_PWM_Start+0x10e>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a14      	ldr	r2, [pc, #80]	; (8005588 <HAL_TIM_PWM_Start+0x15c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d111      	bne.n	800555e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b06      	cmp	r3, #6
 800554a:	d010      	beq.n	800556e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0201 	orr.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555c:	e007      	b.n	800556e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f042 0201 	orr.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	40010000 	.word	0x40010000
 800557c:	40000400 	.word	0x40000400
 8005580:	40000800 	.word	0x40000800
 8005584:	40000c00 	.word	0x40000c00
 8005588:	40014000 	.word	0x40014000

0800558c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d020      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01b      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0202 	mvn.w	r2, #2
 80055c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa5b 	bl	8005a92 <HAL_TIM_IC_CaptureCallback>
 80055dc:	e005      	b.n	80055ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fa4d 	bl	8005a7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fa5e 	bl	8005aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d020      	beq.n	800563c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01b      	beq.n	800563c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0204 	mvn.w	r2, #4
 800560c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2202      	movs	r2, #2
 8005612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fa35 	bl	8005a92 <HAL_TIM_IC_CaptureCallback>
 8005628:	e005      	b.n	8005636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fa27 	bl	8005a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fa38 	bl	8005aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d020      	beq.n	8005688 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f003 0308 	and.w	r3, r3, #8
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01b      	beq.n	8005688 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0208 	mvn.w	r2, #8
 8005658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2204      	movs	r2, #4
 800565e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fa0f 	bl	8005a92 <HAL_TIM_IC_CaptureCallback>
 8005674:	e005      	b.n	8005682 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fa01 	bl	8005a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fa12 	bl	8005aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	2b00      	cmp	r3, #0
 8005690:	d020      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01b      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0210 	mvn.w	r2, #16
 80056a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2208      	movs	r2, #8
 80056aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f9e9 	bl	8005a92 <HAL_TIM_IC_CaptureCallback>
 80056c0:	e005      	b.n	80056ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f9db 	bl	8005a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f9ec 	bl	8005aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00c      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0201 	mvn.w	r2, #1
 80056f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fc fe78 	bl	80023e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00c      	beq.n	800571c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fd2a 	bl	8006170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00c      	beq.n	8005740 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f9bd 	bl	8005aba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00c      	beq.n	8005764 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f003 0320 	and.w	r3, r3, #32
 8005750:	2b00      	cmp	r3, #0
 8005752:	d007      	beq.n	8005764 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0220 	mvn.w	r2, #32
 800575c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fcfc 	bl	800615c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005764:	bf00      	nop
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005778:	2300      	movs	r3, #0
 800577a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005786:	2302      	movs	r3, #2
 8005788:	e0ae      	b.n	80058e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b0c      	cmp	r3, #12
 8005796:	f200 809f 	bhi.w	80058d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800579a:	a201      	add	r2, pc, #4	; (adr r2, 80057a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800579c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a0:	080057d5 	.word	0x080057d5
 80057a4:	080058d9 	.word	0x080058d9
 80057a8:	080058d9 	.word	0x080058d9
 80057ac:	080058d9 	.word	0x080058d9
 80057b0:	08005815 	.word	0x08005815
 80057b4:	080058d9 	.word	0x080058d9
 80057b8:	080058d9 	.word	0x080058d9
 80057bc:	080058d9 	.word	0x080058d9
 80057c0:	08005857 	.word	0x08005857
 80057c4:	080058d9 	.word	0x080058d9
 80057c8:	080058d9 	.word	0x080058d9
 80057cc:	080058d9 	.word	0x080058d9
 80057d0:	08005897 	.word	0x08005897
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68b9      	ldr	r1, [r7, #8]
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fa04 	bl	8005be8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0208 	orr.w	r2, r2, #8
 80057ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699a      	ldr	r2, [r3, #24]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0204 	bic.w	r2, r2, #4
 80057fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6999      	ldr	r1, [r3, #24]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	691a      	ldr	r2, [r3, #16]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	619a      	str	r2, [r3, #24]
      break;
 8005812:	e064      	b.n	80058de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68b9      	ldr	r1, [r7, #8]
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fa4a 	bl	8005cb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800582e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	699a      	ldr	r2, [r3, #24]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800583e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6999      	ldr	r1, [r3, #24]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	021a      	lsls	r2, r3, #8
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	619a      	str	r2, [r3, #24]
      break;
 8005854:	e043      	b.n	80058de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68b9      	ldr	r1, [r7, #8]
 800585c:	4618      	mov	r0, r3
 800585e:	f000 fa95 	bl	8005d8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69da      	ldr	r2, [r3, #28]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0208 	orr.w	r2, r2, #8
 8005870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69da      	ldr	r2, [r3, #28]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0204 	bic.w	r2, r2, #4
 8005880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69d9      	ldr	r1, [r3, #28]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	61da      	str	r2, [r3, #28]
      break;
 8005894:	e023      	b.n	80058de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	4618      	mov	r0, r3
 800589e:	f000 fadf 	bl	8005e60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69da      	ldr	r2, [r3, #28]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69da      	ldr	r2, [r3, #28]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69d9      	ldr	r1, [r3, #28]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	021a      	lsls	r2, r3, #8
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	61da      	str	r2, [r3, #28]
      break;
 80058d6:	e002      	b.n	80058de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	75fb      	strb	r3, [r7, #23]
      break;
 80058dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_TIM_ConfigClockSource+0x1c>
 8005908:	2302      	movs	r3, #2
 800590a:	e0b4      	b.n	8005a76 <HAL_TIM_ConfigClockSource+0x186>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800592a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005932:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005944:	d03e      	beq.n	80059c4 <HAL_TIM_ConfigClockSource+0xd4>
 8005946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800594a:	f200 8087 	bhi.w	8005a5c <HAL_TIM_ConfigClockSource+0x16c>
 800594e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005952:	f000 8086 	beq.w	8005a62 <HAL_TIM_ConfigClockSource+0x172>
 8005956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800595a:	d87f      	bhi.n	8005a5c <HAL_TIM_ConfigClockSource+0x16c>
 800595c:	2b70      	cmp	r3, #112	; 0x70
 800595e:	d01a      	beq.n	8005996 <HAL_TIM_ConfigClockSource+0xa6>
 8005960:	2b70      	cmp	r3, #112	; 0x70
 8005962:	d87b      	bhi.n	8005a5c <HAL_TIM_ConfigClockSource+0x16c>
 8005964:	2b60      	cmp	r3, #96	; 0x60
 8005966:	d050      	beq.n	8005a0a <HAL_TIM_ConfigClockSource+0x11a>
 8005968:	2b60      	cmp	r3, #96	; 0x60
 800596a:	d877      	bhi.n	8005a5c <HAL_TIM_ConfigClockSource+0x16c>
 800596c:	2b50      	cmp	r3, #80	; 0x50
 800596e:	d03c      	beq.n	80059ea <HAL_TIM_ConfigClockSource+0xfa>
 8005970:	2b50      	cmp	r3, #80	; 0x50
 8005972:	d873      	bhi.n	8005a5c <HAL_TIM_ConfigClockSource+0x16c>
 8005974:	2b40      	cmp	r3, #64	; 0x40
 8005976:	d058      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0x13a>
 8005978:	2b40      	cmp	r3, #64	; 0x40
 800597a:	d86f      	bhi.n	8005a5c <HAL_TIM_ConfigClockSource+0x16c>
 800597c:	2b30      	cmp	r3, #48	; 0x30
 800597e:	d064      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0x15a>
 8005980:	2b30      	cmp	r3, #48	; 0x30
 8005982:	d86b      	bhi.n	8005a5c <HAL_TIM_ConfigClockSource+0x16c>
 8005984:	2b20      	cmp	r3, #32
 8005986:	d060      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0x15a>
 8005988:	2b20      	cmp	r3, #32
 800598a:	d867      	bhi.n	8005a5c <HAL_TIM_ConfigClockSource+0x16c>
 800598c:	2b00      	cmp	r3, #0
 800598e:	d05c      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0x15a>
 8005990:	2b10      	cmp	r3, #16
 8005992:	d05a      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0x15a>
 8005994:	e062      	b.n	8005a5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059a6:	f000 fb25 	bl	8005ff4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	609a      	str	r2, [r3, #8]
      break;
 80059c2:	e04f      	b.n	8005a64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059d4:	f000 fb0e 	bl	8005ff4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059e6:	609a      	str	r2, [r3, #8]
      break;
 80059e8:	e03c      	b.n	8005a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059f6:	461a      	mov	r2, r3
 80059f8:	f000 fa82 	bl	8005f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2150      	movs	r1, #80	; 0x50
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 fadb 	bl	8005fbe <TIM_ITRx_SetConfig>
      break;
 8005a08:	e02c      	b.n	8005a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a16:	461a      	mov	r2, r3
 8005a18:	f000 faa1 	bl	8005f5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2160      	movs	r1, #96	; 0x60
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 facb 	bl	8005fbe <TIM_ITRx_SetConfig>
      break;
 8005a28:	e01c      	b.n	8005a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a36:	461a      	mov	r2, r3
 8005a38:	f000 fa62 	bl	8005f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2140      	movs	r1, #64	; 0x40
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fabb 	bl	8005fbe <TIM_ITRx_SetConfig>
      break;
 8005a48:	e00c      	b.n	8005a64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4619      	mov	r1, r3
 8005a54:	4610      	mov	r0, r2
 8005a56:	f000 fab2 	bl	8005fbe <TIM_ITRx_SetConfig>
      break;
 8005a5a:	e003      	b.n	8005a64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a60:	e000      	b.n	8005a64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b083      	sub	sp, #12
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
	...

08005ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a3a      	ldr	r2, [pc, #232]	; (8005bcc <TIM_Base_SetConfig+0xfc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00f      	beq.n	8005b08 <TIM_Base_SetConfig+0x38>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aee:	d00b      	beq.n	8005b08 <TIM_Base_SetConfig+0x38>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a37      	ldr	r2, [pc, #220]	; (8005bd0 <TIM_Base_SetConfig+0x100>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d007      	beq.n	8005b08 <TIM_Base_SetConfig+0x38>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a36      	ldr	r2, [pc, #216]	; (8005bd4 <TIM_Base_SetConfig+0x104>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d003      	beq.n	8005b08 <TIM_Base_SetConfig+0x38>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a35      	ldr	r2, [pc, #212]	; (8005bd8 <TIM_Base_SetConfig+0x108>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d108      	bne.n	8005b1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a2b      	ldr	r2, [pc, #172]	; (8005bcc <TIM_Base_SetConfig+0xfc>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d01b      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b28:	d017      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a28      	ldr	r2, [pc, #160]	; (8005bd0 <TIM_Base_SetConfig+0x100>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d013      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a27      	ldr	r2, [pc, #156]	; (8005bd4 <TIM_Base_SetConfig+0x104>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00f      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a26      	ldr	r2, [pc, #152]	; (8005bd8 <TIM_Base_SetConfig+0x108>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00b      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a25      	ldr	r2, [pc, #148]	; (8005bdc <TIM_Base_SetConfig+0x10c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d007      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a24      	ldr	r2, [pc, #144]	; (8005be0 <TIM_Base_SetConfig+0x110>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d003      	beq.n	8005b5a <TIM_Base_SetConfig+0x8a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a23      	ldr	r2, [pc, #140]	; (8005be4 <TIM_Base_SetConfig+0x114>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d108      	bne.n	8005b6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a0e      	ldr	r2, [pc, #56]	; (8005bcc <TIM_Base_SetConfig+0xfc>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d103      	bne.n	8005ba0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d105      	bne.n	8005bbe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f023 0201 	bic.w	r2, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	611a      	str	r2, [r3, #16]
  }
}
 8005bbe:	bf00      	nop
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40000400 	.word	0x40000400
 8005bd4:	40000800 	.word	0x40000800
 8005bd8:	40000c00 	.word	0x40000c00
 8005bdc:	40014000 	.word	0x40014000
 8005be0:	40014400 	.word	0x40014400
 8005be4:	40014800 	.word	0x40014800

08005be8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	f023 0201 	bic.w	r2, r3, #1
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0303 	bic.w	r3, r3, #3
 8005c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f023 0302 	bic.w	r3, r3, #2
 8005c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a1c      	ldr	r2, [pc, #112]	; (8005cb0 <TIM_OC1_SetConfig+0xc8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d10c      	bne.n	8005c5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f023 0308 	bic.w	r3, r3, #8
 8005c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f023 0304 	bic.w	r3, r3, #4
 8005c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a13      	ldr	r2, [pc, #76]	; (8005cb0 <TIM_OC1_SetConfig+0xc8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d111      	bne.n	8005c8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	621a      	str	r2, [r3, #32]
}
 8005ca4:	bf00      	nop
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	40010000 	.word	0x40010000

08005cb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	f023 0210 	bic.w	r2, r3, #16
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f023 0320 	bic.w	r3, r3, #32
 8005cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a1e      	ldr	r2, [pc, #120]	; (8005d88 <TIM_OC2_SetConfig+0xd4>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d10d      	bne.n	8005d30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a15      	ldr	r2, [pc, #84]	; (8005d88 <TIM_OC2_SetConfig+0xd4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d113      	bne.n	8005d60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	621a      	str	r2, [r3, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40010000 	.word	0x40010000

08005d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0303 	bic.w	r3, r3, #3
 8005dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a1d      	ldr	r2, [pc, #116]	; (8005e5c <TIM_OC3_SetConfig+0xd0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d10d      	bne.n	8005e06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005df0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	021b      	lsls	r3, r3, #8
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a14      	ldr	r2, [pc, #80]	; (8005e5c <TIM_OC3_SetConfig+0xd0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d113      	bne.n	8005e36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	621a      	str	r2, [r3, #32]
}
 8005e50:	bf00      	nop
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	40010000 	.word	0x40010000

08005e60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	031b      	lsls	r3, r3, #12
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a10      	ldr	r2, [pc, #64]	; (8005efc <TIM_OC4_SetConfig+0x9c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d109      	bne.n	8005ed4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ec6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	019b      	lsls	r3, r3, #6
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	621a      	str	r2, [r3, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	371c      	adds	r7, #28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40010000 	.word	0x40010000

08005f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	f023 0201 	bic.w	r2, r3, #1
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f023 030a 	bic.w	r3, r3, #10
 8005f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	621a      	str	r2, [r3, #32]
}
 8005f52:	bf00      	nop
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b087      	sub	sp, #28
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	60f8      	str	r0, [r7, #12]
 8005f66:	60b9      	str	r1, [r7, #8]
 8005f68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	f023 0210 	bic.w	r2, r3, #16
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	031b      	lsls	r3, r3, #12
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	621a      	str	r2, [r3, #32]
}
 8005fb2:	bf00      	nop
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b085      	sub	sp, #20
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f043 0307 	orr.w	r3, r3, #7
 8005fe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	609a      	str	r2, [r3, #8]
}
 8005fe8:	bf00      	nop
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800600e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	021a      	lsls	r2, r3, #8
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	431a      	orrs	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4313      	orrs	r3, r2
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	609a      	str	r2, [r3, #8]
}
 8006028:	bf00      	nop
 800602a:	371c      	adds	r7, #28
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f003 031f 	and.w	r3, r3, #31
 8006046:	2201      	movs	r2, #1
 8006048:	fa02 f303 	lsl.w	r3, r2, r3
 800604c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a1a      	ldr	r2, [r3, #32]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	43db      	mvns	r3, r3
 8006056:	401a      	ands	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6a1a      	ldr	r2, [r3, #32]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	fa01 f303 	lsl.w	r3, r1, r3
 800606c:	431a      	orrs	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
	...

08006080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006094:	2302      	movs	r3, #2
 8006096:	e050      	b.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a1c      	ldr	r2, [pc, #112]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d018      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e4:	d013      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a18      	ldr	r2, [pc, #96]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00e      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a16      	ldr	r2, [pc, #88]	; (8006150 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d009      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a15      	ldr	r2, [pc, #84]	; (8006154 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d004      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a13      	ldr	r2, [pc, #76]	; (8006158 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d10c      	bne.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	4313      	orrs	r3, r2
 800611e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40010000 	.word	0x40010000
 800614c:	40000400 	.word	0x40000400
 8006150:	40000800 	.word	0x40000800
 8006154:	40000c00 	.word	0x40000c00
 8006158:	40014000 	.word	0x40014000

0800615c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e042      	b.n	800621c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fc fbe4 	bl	8002978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2224      	movs	r2, #36	; 0x24
 80061b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68da      	ldr	r2, [r3, #12]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 ffc9 	bl	8007160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	691a      	ldr	r2, [r3, #16]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	695a      	ldr	r2, [r3, #20]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08c      	sub	sp, #48	; 0x30
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	4613      	mov	r3, r2
 8006230:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b20      	cmp	r3, #32
 800623c:	d156      	bne.n	80062ec <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <HAL_UART_Transmit_DMA+0x26>
 8006244:	88fb      	ldrh	r3, [r7, #6]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e04f      	b.n	80062ee <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	88fa      	ldrh	r2, [r7, #6]
 8006258:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	88fa      	ldrh	r2, [r7, #6]
 800625e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2221      	movs	r2, #33	; 0x21
 800626a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006272:	4a21      	ldr	r2, [pc, #132]	; (80062f8 <HAL_UART_Transmit_DMA+0xd4>)
 8006274:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	4a20      	ldr	r2, [pc, #128]	; (80062fc <HAL_UART_Transmit_DMA+0xd8>)
 800627c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	4a1f      	ldr	r2, [pc, #124]	; (8006300 <HAL_UART_Transmit_DMA+0xdc>)
 8006284:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628a:	2200      	movs	r2, #0
 800628c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800628e:	f107 0308 	add.w	r3, r7, #8
 8006292:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	6819      	ldr	r1, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3304      	adds	r3, #4
 80062a2:	461a      	mov	r2, r3
 80062a4:	88fb      	ldrh	r3, [r7, #6]
 80062a6:	f7fc ffad 	bl	8003204 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062b2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3314      	adds	r3, #20
 80062ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	e853 3f00 	ldrex	r3, [r3]
 80062c2:	617b      	str	r3, [r7, #20]
   return(result);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3314      	adds	r3, #20
 80062d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062d4:	627a      	str	r2, [r7, #36]	; 0x24
 80062d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d8:	6a39      	ldr	r1, [r7, #32]
 80062da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062dc:	e841 2300 	strex	r3, r2, [r1]
 80062e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e5      	bne.n	80062b4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	e000      	b.n	80062ee <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80062ec:	2302      	movs	r3, #2
  }
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3730      	adds	r7, #48	; 0x30
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	080069ed 	.word	0x080069ed
 80062fc:	08006a87 	.word	0x08006a87
 8006300:	08006c0b 	.word	0x08006c0b

08006304 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	4613      	mov	r3, r2
 8006310:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b20      	cmp	r3, #32
 800631c:	d112      	bne.n	8006344 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <HAL_UART_Receive_DMA+0x26>
 8006324:	88fb      	ldrh	r3, [r7, #6]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e00b      	b.n	8006346 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006334:	88fb      	ldrh	r3, [r7, #6]
 8006336:	461a      	mov	r2, r3
 8006338:	68b9      	ldr	r1, [r7, #8]
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 fcb0 	bl	8006ca0 <UART_Start_Receive_DMA>
 8006340:	4603      	mov	r3, r0
 8006342:	e000      	b.n	8006346 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006344:	2302      	movs	r3, #2
  }
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b090      	sub	sp, #64	; 0x40
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006356:	2300      	movs	r3, #0
 8006358:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006364:	2b80      	cmp	r3, #128	; 0x80
 8006366:	bf0c      	ite	eq
 8006368:	2301      	moveq	r3, #1
 800636a:	2300      	movne	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b21      	cmp	r3, #33	; 0x21
 800637a:	d128      	bne.n	80063ce <HAL_UART_DMAStop+0x80>
 800637c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d025      	beq.n	80063ce <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3314      	adds	r3, #20
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	e853 3f00 	ldrex	r3, [r3]
 8006390:	623b      	str	r3, [r7, #32]
   return(result);
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006398:	63bb      	str	r3, [r7, #56]	; 0x38
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3314      	adds	r3, #20
 80063a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063a2:	633a      	str	r2, [r7, #48]	; 0x30
 80063a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063aa:	e841 2300 	strex	r3, r2, [r1]
 80063ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1e5      	bne.n	8006382 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d004      	beq.n	80063c8 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fc ff76 	bl	80032b4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fd03 	bl	8006dd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d8:	2b40      	cmp	r3, #64	; 0x40
 80063da:	bf0c      	ite	eq
 80063dc:	2301      	moveq	r3, #1
 80063de:	2300      	movne	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b22      	cmp	r3, #34	; 0x22
 80063ee:	d128      	bne.n	8006442 <HAL_UART_DMAStop+0xf4>
 80063f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d025      	beq.n	8006442 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3314      	adds	r3, #20
 80063fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	60fb      	str	r3, [r7, #12]
   return(result);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800640c:	637b      	str	r3, [r7, #52]	; 0x34
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3314      	adds	r3, #20
 8006414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006416:	61fa      	str	r2, [r7, #28]
 8006418:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	69b9      	ldr	r1, [r7, #24]
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	617b      	str	r3, [r7, #20]
   return(result);
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e5      	bne.n	80063f6 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642e:	2b00      	cmp	r3, #0
 8006430:	d004      	beq.n	800643c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	4618      	mov	r0, r3
 8006438:	f7fc ff3c 	bl	80032b4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fcf1 	bl	8006e24 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3740      	adds	r7, #64	; 0x40
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b0ba      	sub	sp, #232	; 0xe8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006472:	2300      	movs	r3, #0
 8006474:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006478:	2300      	movs	r3, #0
 800647a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800647e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006482:	f003 030f 	and.w	r3, r3, #15
 8006486:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800648a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10f      	bne.n	80064b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006496:	f003 0320 	and.w	r3, r3, #32
 800649a:	2b00      	cmp	r3, #0
 800649c:	d009      	beq.n	80064b2 <HAL_UART_IRQHandler+0x66>
 800649e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fd99 	bl	8006fe2 <UART_Receive_IT>
      return;
 80064b0:	e25b      	b.n	800696a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 80de 	beq.w	8006678 <HAL_UART_IRQHandler+0x22c>
 80064bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d106      	bne.n	80064d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 80d1 	beq.w	8006678 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00b      	beq.n	80064fa <HAL_UART_IRQHandler+0xae>
 80064e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d005      	beq.n	80064fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f2:	f043 0201 	orr.w	r2, r3, #1
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fe:	f003 0304 	and.w	r3, r3, #4
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00b      	beq.n	800651e <HAL_UART_IRQHandler+0xd2>
 8006506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d005      	beq.n	800651e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006516:	f043 0202 	orr.w	r2, r3, #2
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800651e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00b      	beq.n	8006542 <HAL_UART_IRQHandler+0xf6>
 800652a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d005      	beq.n	8006542 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653a:	f043 0204 	orr.w	r2, r3, #4
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b00      	cmp	r3, #0
 800654c:	d011      	beq.n	8006572 <HAL_UART_IRQHandler+0x126>
 800654e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d105      	bne.n	8006566 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800655a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d005      	beq.n	8006572 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656a:	f043 0208 	orr.w	r2, r3, #8
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 81f2 	beq.w	8006960 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800657c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b00      	cmp	r3, #0
 8006586:	d008      	beq.n	800659a <HAL_UART_IRQHandler+0x14e>
 8006588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800658c:	f003 0320 	and.w	r3, r3, #32
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fd24 	bl	8006fe2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a4:	2b40      	cmp	r3, #64	; 0x40
 80065a6:	bf0c      	ite	eq
 80065a8:	2301      	moveq	r3, #1
 80065aa:	2300      	movne	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d103      	bne.n	80065c6 <HAL_UART_IRQHandler+0x17a>
 80065be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d04f      	beq.n	8006666 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fc2c 	bl	8006e24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d6:	2b40      	cmp	r3, #64	; 0x40
 80065d8:	d141      	bne.n	800665e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3314      	adds	r3, #20
 80065e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3314      	adds	r3, #20
 8006602:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006606:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800660a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006612:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800661e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1d9      	bne.n	80065da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800662a:	2b00      	cmp	r3, #0
 800662c:	d013      	beq.n	8006656 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006632:	4a7e      	ldr	r2, [pc, #504]	; (800682c <HAL_UART_IRQHandler+0x3e0>)
 8006634:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800663a:	4618      	mov	r0, r3
 800663c:	f7fc feaa 	bl	8003394 <HAL_DMA_Abort_IT>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d016      	beq.n	8006674 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006650:	4610      	mov	r0, r2
 8006652:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006654:	e00e      	b.n	8006674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f9b2 	bl	80069c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800665c:	e00a      	b.n	8006674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f9ae 	bl	80069c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006664:	e006      	b.n	8006674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f9aa 	bl	80069c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006672:	e175      	b.n	8006960 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006674:	bf00      	nop
    return;
 8006676:	e173      	b.n	8006960 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667c:	2b01      	cmp	r3, #1
 800667e:	f040 814f 	bne.w	8006920 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006686:	f003 0310 	and.w	r3, r3, #16
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 8148 	beq.w	8006920 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006694:	f003 0310 	and.w	r3, r3, #16
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 8141 	beq.w	8006920 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800669e:	2300      	movs	r3, #0
 80066a0:	60bb      	str	r3, [r7, #8]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60bb      	str	r3, [r7, #8]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	60bb      	str	r3, [r7, #8]
 80066b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066be:	2b40      	cmp	r3, #64	; 0x40
 80066c0:	f040 80b6 	bne.w	8006830 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 8145 	beq.w	8006964 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066e2:	429a      	cmp	r2, r3
 80066e4:	f080 813e 	bcs.w	8006964 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066fa:	f000 8088 	beq.w	800680e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	330c      	adds	r3, #12
 8006704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800671c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	330c      	adds	r3, #12
 8006726:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800672a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800672e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006736:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006742:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1d9      	bne.n	80066fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3314      	adds	r3, #20
 8006750:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800675a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800675c:	f023 0301 	bic.w	r3, r3, #1
 8006760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3314      	adds	r3, #20
 800676a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800676e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006772:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006776:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e1      	bne.n	800674a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3314      	adds	r3, #20
 800678c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800679c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3314      	adds	r3, #20
 80067a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067b2:	e841 2300 	strex	r3, r2, [r1]
 80067b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1e3      	bne.n	8006786 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2220      	movs	r2, #32
 80067c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	330c      	adds	r3, #12
 80067d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d6:	e853 3f00 	ldrex	r3, [r3]
 80067da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067de:	f023 0310 	bic.w	r3, r3, #16
 80067e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	330c      	adds	r3, #12
 80067ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80067f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80067f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e3      	bne.n	80067cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006808:	4618      	mov	r0, r3
 800680a:	f7fc fd53 	bl	80032b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2202      	movs	r2, #2
 8006812:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800681c:	b29b      	uxth	r3, r3
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	b29b      	uxth	r3, r3
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f8d5 	bl	80069d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800682a:	e09b      	b.n	8006964 <HAL_UART_IRQHandler+0x518>
 800682c:	08006eeb 	.word	0x08006eeb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006838:	b29b      	uxth	r3, r3
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006844:	b29b      	uxth	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 808e 	beq.w	8006968 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800684c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 8089 	beq.w	8006968 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	330c      	adds	r3, #12
 800685c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800686c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	330c      	adds	r3, #12
 8006876:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800687a:	647a      	str	r2, [r7, #68]	; 0x44
 800687c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006880:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006882:	e841 2300 	strex	r3, r2, [r1]
 8006886:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1e3      	bne.n	8006856 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3314      	adds	r3, #20
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	e853 3f00 	ldrex	r3, [r3]
 800689c:	623b      	str	r3, [r7, #32]
   return(result);
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	f023 0301 	bic.w	r3, r3, #1
 80068a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3314      	adds	r3, #20
 80068ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068b2:	633a      	str	r2, [r7, #48]	; 0x30
 80068b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e3      	bne.n	800688e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	330c      	adds	r3, #12
 80068da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 0310 	bic.w	r3, r3, #16
 80068ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	330c      	adds	r3, #12
 80068f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80068f8:	61fa      	str	r2, [r7, #28]
 80068fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fc:	69b9      	ldr	r1, [r7, #24]
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	617b      	str	r3, [r7, #20]
   return(result);
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e3      	bne.n	80068d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006912:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f85b 	bl	80069d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800691e:	e023      	b.n	8006968 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006928:	2b00      	cmp	r3, #0
 800692a:	d009      	beq.n	8006940 <HAL_UART_IRQHandler+0x4f4>
 800692c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 faea 	bl	8006f12 <UART_Transmit_IT>
    return;
 800693e:	e014      	b.n	800696a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00e      	beq.n	800696a <HAL_UART_IRQHandler+0x51e>
 800694c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006954:	2b00      	cmp	r3, #0
 8006956:	d008      	beq.n	800696a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fb2a 	bl	8006fb2 <UART_EndTransmit_IT>
    return;
 800695e:	e004      	b.n	800696a <HAL_UART_IRQHandler+0x51e>
    return;
 8006960:	bf00      	nop
 8006962:	e002      	b.n	800696a <HAL_UART_IRQHandler+0x51e>
      return;
 8006964:	bf00      	nop
 8006966:	e000      	b.n	800696a <HAL_UART_IRQHandler+0x51e>
      return;
 8006968:	bf00      	nop
  }
}
 800696a:	37e8      	adds	r7, #232	; 0xe8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b090      	sub	sp, #64	; 0x40
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d137      	bne.n	8006a78 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3314      	adds	r3, #20
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a24:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3314      	adds	r3, #20
 8006a2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a2e:	633a      	str	r2, [r7, #48]	; 0x30
 8006a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e5      	bne.n	8006a0e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	330c      	adds	r3, #12
 8006a48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a58:	637b      	str	r3, [r7, #52]	; 0x34
 8006a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	330c      	adds	r3, #12
 8006a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a62:	61fa      	str	r2, [r7, #28]
 8006a64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a66:	69b9      	ldr	r1, [r7, #24]
 8006a68:	69fa      	ldr	r2, [r7, #28]
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	617b      	str	r3, [r7, #20]
   return(result);
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e5      	bne.n	8006a42 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a76:	e002      	b.n	8006a7e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006a78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006a7a:	f7ff ff79 	bl	8006970 <HAL_UART_TxCpltCallback>
}
 8006a7e:	bf00      	nop
 8006a80:	3740      	adds	r7, #64	; 0x40
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a92:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f7ff ff75 	bl	8006984 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a9a:	bf00      	nop
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b09c      	sub	sp, #112	; 0x70
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d172      	bne.n	8006ba4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ad6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ada:	66bb      	str	r3, [r7, #104]	; 0x68
 8006adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ae4:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ae6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006aea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e5      	bne.n	8006ac4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3314      	adds	r3, #20
 8006afe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0a:	f023 0301 	bic.w	r3, r3, #1
 8006b0e:	667b      	str	r3, [r7, #100]	; 0x64
 8006b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3314      	adds	r3, #20
 8006b16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006b18:	647a      	str	r2, [r7, #68]	; 0x44
 8006b1a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e5      	bne.n	8006af8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3314      	adds	r3, #20
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	e853 3f00 	ldrex	r3, [r3]
 8006b3a:	623b      	str	r3, [r7, #32]
   return(result);
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b42:	663b      	str	r3, [r7, #96]	; 0x60
 8006b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3314      	adds	r3, #20
 8006b4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b4c:	633a      	str	r2, [r7, #48]	; 0x30
 8006b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b54:	e841 2300 	strex	r3, r2, [r1]
 8006b58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1e5      	bne.n	8006b2c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b62:	2220      	movs	r2, #32
 8006b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d119      	bne.n	8006ba4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	330c      	adds	r3, #12
 8006b76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	e853 3f00 	ldrex	r3, [r3]
 8006b7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0310 	bic.w	r3, r3, #16
 8006b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	330c      	adds	r3, #12
 8006b8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b90:	61fa      	str	r2, [r7, #28]
 8006b92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b94:	69b9      	ldr	r1, [r7, #24]
 8006b96:	69fa      	ldr	r2, [r7, #28]
 8006b98:	e841 2300 	strex	r3, r2, [r1]
 8006b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1e5      	bne.n	8006b70 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d106      	bne.n	8006bc0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006bba:	f7ff ff0b 	bl	80069d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006bbe:	e002      	b.n	8006bc6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006bc0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006bc2:	f7ff fee9 	bl	8006998 <HAL_UART_RxCpltCallback>
}
 8006bc6:	bf00      	nop
 8006bc8:	3770      	adds	r7, #112	; 0x70
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b084      	sub	sp, #16
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2201      	movs	r2, #1
 8006be0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d108      	bne.n	8006bfc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bee:	085b      	lsrs	r3, r3, #1
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f7ff feed 	bl	80069d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006bfa:	e002      	b.n	8006c02 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f7ff fed5 	bl	80069ac <HAL_UART_RxHalfCpltCallback>
}
 8006c02:	bf00      	nop
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b084      	sub	sp, #16
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c26:	2b80      	cmp	r3, #128	; 0x80
 8006c28:	bf0c      	ite	eq
 8006c2a:	2301      	moveq	r3, #1
 8006c2c:	2300      	movne	r3, #0
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b21      	cmp	r3, #33	; 0x21
 8006c3c:	d108      	bne.n	8006c50 <UART_DMAError+0x46>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2200      	movs	r2, #0
 8006c48:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006c4a:	68b8      	ldr	r0, [r7, #8]
 8006c4c:	f000 f8c2 	bl	8006dd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5a:	2b40      	cmp	r3, #64	; 0x40
 8006c5c:	bf0c      	ite	eq
 8006c5e:	2301      	moveq	r3, #1
 8006c60:	2300      	movne	r3, #0
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b22      	cmp	r3, #34	; 0x22
 8006c70:	d108      	bne.n	8006c84 <UART_DMAError+0x7a>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006c7e:	68b8      	ldr	r0, [r7, #8]
 8006c80:	f000 f8d0 	bl	8006e24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c88:	f043 0210 	orr.w	r2, r3, #16
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c90:	68b8      	ldr	r0, [r7, #8]
 8006c92:	f7ff fe95 	bl	80069c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c96:	bf00      	nop
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b098      	sub	sp, #96	; 0x60
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	88fa      	ldrh	r2, [r7, #6]
 8006cb8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2222      	movs	r2, #34	; 0x22
 8006cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ccc:	4a3e      	ldr	r2, [pc, #248]	; (8006dc8 <UART_Start_Receive_DMA+0x128>)
 8006cce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd4:	4a3d      	ldr	r2, [pc, #244]	; (8006dcc <UART_Start_Receive_DMA+0x12c>)
 8006cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cdc:	4a3c      	ldr	r2, [pc, #240]	; (8006dd0 <UART_Start_Receive_DMA+0x130>)
 8006cde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006ce8:	f107 0308 	add.w	r3, r7, #8
 8006cec:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	88fb      	ldrh	r3, [r7, #6]
 8006d00:	f7fc fa80 	bl	8003204 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006d04:	2300      	movs	r3, #0
 8006d06:	613b      	str	r3, [r7, #16]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	613b      	str	r3, [r7, #16]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	613b      	str	r3, [r7, #16]
 8006d18:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d019      	beq.n	8006d56 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	330c      	adds	r3, #12
 8006d28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d38:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	330c      	adds	r3, #12
 8006d40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d42:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006d44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006d48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e5      	bne.n	8006d22 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3314      	adds	r3, #20
 8006d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	f043 0301 	orr.w	r3, r3, #1
 8006d6c:	657b      	str	r3, [r7, #84]	; 0x54
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3314      	adds	r3, #20
 8006d74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d76:	63ba      	str	r2, [r7, #56]	; 0x38
 8006d78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e5      	bne.n	8006d56 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3314      	adds	r3, #20
 8006d90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	617b      	str	r3, [r7, #20]
   return(result);
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006da0:	653b      	str	r3, [r7, #80]	; 0x50
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3314      	adds	r3, #20
 8006da8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006daa:	627a      	str	r2, [r7, #36]	; 0x24
 8006dac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	6a39      	ldr	r1, [r7, #32]
 8006db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e5      	bne.n	8006d8a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3760      	adds	r7, #96	; 0x60
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	08006aa3 	.word	0x08006aa3
 8006dcc:	08006bcf 	.word	0x08006bcf
 8006dd0:	08006c0b 	.word	0x08006c0b

08006dd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b089      	sub	sp, #36	; 0x24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	330c      	adds	r3, #12
 8006de2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	e853 3f00 	ldrex	r3, [r3]
 8006dea:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006df2:	61fb      	str	r3, [r7, #28]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	330c      	adds	r3, #12
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	61ba      	str	r2, [r7, #24]
 8006dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e00:	6979      	ldr	r1, [r7, #20]
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	e841 2300 	strex	r3, r2, [r1]
 8006e08:	613b      	str	r3, [r7, #16]
   return(result);
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1e5      	bne.n	8006ddc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2220      	movs	r2, #32
 8006e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006e18:	bf00      	nop
 8006e1a:	3724      	adds	r7, #36	; 0x24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b095      	sub	sp, #84	; 0x54
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	330c      	adds	r3, #12
 8006e32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e36:	e853 3f00 	ldrex	r3, [r3]
 8006e3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e4c:	643a      	str	r2, [r7, #64]	; 0x40
 8006e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e5      	bne.n	8006e2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3314      	adds	r3, #20
 8006e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	f023 0301 	bic.w	r3, r3, #1
 8006e76:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3314      	adds	r3, #20
 8006e7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e5      	bne.n	8006e60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d119      	bne.n	8006ed0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f023 0310 	bic.w	r3, r3, #16
 8006eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	330c      	adds	r3, #12
 8006eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ebc:	61ba      	str	r2, [r7, #24]
 8006ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6979      	ldr	r1, [r7, #20]
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e5      	bne.n	8006e9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ede:	bf00      	nop
 8006ee0:	3754      	adds	r7, #84	; 0x54
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7ff fd5b 	bl	80069c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f0a:	bf00      	nop
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b085      	sub	sp, #20
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b21      	cmp	r3, #33	; 0x21
 8006f24:	d13e      	bne.n	8006fa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f2e:	d114      	bne.n	8006f5a <UART_Transmit_IT+0x48>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d110      	bne.n	8006f5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	1c9a      	adds	r2, r3, #2
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	621a      	str	r2, [r3, #32]
 8006f58:	e008      	b.n	8006f6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	1c59      	adds	r1, r3, #1
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6211      	str	r1, [r2, #32]
 8006f64:	781a      	ldrb	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	4619      	mov	r1, r3
 8006f7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10f      	bne.n	8006fa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	e000      	b.n	8006fa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fa4:	2302      	movs	r3, #2
  }
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff fccc 	bl	8006970 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b08c      	sub	sp, #48	; 0x30
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b22      	cmp	r3, #34	; 0x22
 8006ff4:	f040 80ae 	bne.w	8007154 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007000:	d117      	bne.n	8007032 <UART_Receive_IT+0x50>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d113      	bne.n	8007032 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800700a:	2300      	movs	r3, #0
 800700c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007012:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	b29b      	uxth	r3, r3
 800701c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007020:	b29a      	uxth	r2, r3
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702a:	1c9a      	adds	r2, r3, #2
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	629a      	str	r2, [r3, #40]	; 0x28
 8007030:	e026      	b.n	8007080 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007036:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007038:	2300      	movs	r3, #0
 800703a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007044:	d007      	beq.n	8007056 <UART_Receive_IT+0x74>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10a      	bne.n	8007064 <UART_Receive_IT+0x82>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d106      	bne.n	8007064 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	b2da      	uxtb	r2, r3
 800705e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	e008      	b.n	8007076 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	b2db      	uxtb	r3, r3
 800706c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007070:	b2da      	uxtb	r2, r3
 8007072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007074:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007084:	b29b      	uxth	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b29b      	uxth	r3, r3
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	4619      	mov	r1, r3
 800708e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007090:	2b00      	cmp	r3, #0
 8007092:	d15d      	bne.n	8007150 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0220 	bic.w	r2, r2, #32
 80070a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	695a      	ldr	r2, [r3, #20]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 0201 	bic.w	r2, r2, #1
 80070c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d135      	bne.n	8007146 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	330c      	adds	r3, #12
 80070e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	e853 3f00 	ldrex	r3, [r3]
 80070ee:	613b      	str	r3, [r7, #16]
   return(result);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f023 0310 	bic.w	r3, r3, #16
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	330c      	adds	r3, #12
 80070fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007100:	623a      	str	r2, [r7, #32]
 8007102:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	69f9      	ldr	r1, [r7, #28]
 8007106:	6a3a      	ldr	r2, [r7, #32]
 8007108:	e841 2300 	strex	r3, r2, [r1]
 800710c:	61bb      	str	r3, [r7, #24]
   return(result);
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e5      	bne.n	80070e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0310 	and.w	r3, r3, #16
 800711e:	2b10      	cmp	r3, #16
 8007120:	d10a      	bne.n	8007138 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	60fb      	str	r3, [r7, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7ff fc48 	bl	80069d4 <HAL_UARTEx_RxEventCallback>
 8007144:	e002      	b.n	800714c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff fc26 	bl	8006998 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	e002      	b.n	8007156 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	e000      	b.n	8007156 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007154:	2302      	movs	r3, #2
  }
}
 8007156:	4618      	mov	r0, r3
 8007158:	3730      	adds	r7, #48	; 0x30
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007164:	b0c0      	sub	sp, #256	; 0x100
 8007166:	af00      	add	r7, sp, #0
 8007168:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800716c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717c:	68d9      	ldr	r1, [r3, #12]
 800717e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	ea40 0301 	orr.w	r3, r0, r1
 8007188:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800718a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	431a      	orrs	r2, r3
 8007198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	431a      	orrs	r2, r3
 80071a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80071b8:	f021 010c 	bic.w	r1, r1, #12
 80071bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071c6:	430b      	orrs	r3, r1
 80071c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071da:	6999      	ldr	r1, [r3, #24]
 80071dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	ea40 0301 	orr.w	r3, r0, r1
 80071e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	4b8f      	ldr	r3, [pc, #572]	; (800742c <UART_SetConfig+0x2cc>)
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d005      	beq.n	8007200 <UART_SetConfig+0xa0>
 80071f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	4b8d      	ldr	r3, [pc, #564]	; (8007430 <UART_SetConfig+0x2d0>)
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d104      	bne.n	800720a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007200:	f7fd ffc2 	bl	8005188 <HAL_RCC_GetPCLK2Freq>
 8007204:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007208:	e003      	b.n	8007212 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800720a:	f7fd ffa9 	bl	8005160 <HAL_RCC_GetPCLK1Freq>
 800720e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007216:	69db      	ldr	r3, [r3, #28]
 8007218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800721c:	f040 810c 	bne.w	8007438 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007224:	2200      	movs	r2, #0
 8007226:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800722a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800722e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007232:	4622      	mov	r2, r4
 8007234:	462b      	mov	r3, r5
 8007236:	1891      	adds	r1, r2, r2
 8007238:	65b9      	str	r1, [r7, #88]	; 0x58
 800723a:	415b      	adcs	r3, r3
 800723c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800723e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007242:	4621      	mov	r1, r4
 8007244:	eb12 0801 	adds.w	r8, r2, r1
 8007248:	4629      	mov	r1, r5
 800724a:	eb43 0901 	adc.w	r9, r3, r1
 800724e:	f04f 0200 	mov.w	r2, #0
 8007252:	f04f 0300 	mov.w	r3, #0
 8007256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800725a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800725e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007262:	4690      	mov	r8, r2
 8007264:	4699      	mov	r9, r3
 8007266:	4623      	mov	r3, r4
 8007268:	eb18 0303 	adds.w	r3, r8, r3
 800726c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007270:	462b      	mov	r3, r5
 8007272:	eb49 0303 	adc.w	r3, r9, r3
 8007276:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800727a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007286:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800728a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800728e:	460b      	mov	r3, r1
 8007290:	18db      	adds	r3, r3, r3
 8007292:	653b      	str	r3, [r7, #80]	; 0x50
 8007294:	4613      	mov	r3, r2
 8007296:	eb42 0303 	adc.w	r3, r2, r3
 800729a:	657b      	str	r3, [r7, #84]	; 0x54
 800729c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80072a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80072a4:	f7f9 fda8 	bl	8000df8 <__aeabi_uldivmod>
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	4b61      	ldr	r3, [pc, #388]	; (8007434 <UART_SetConfig+0x2d4>)
 80072ae:	fba3 2302 	umull	r2, r3, r3, r2
 80072b2:	095b      	lsrs	r3, r3, #5
 80072b4:	011c      	lsls	r4, r3, #4
 80072b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80072c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80072c8:	4642      	mov	r2, r8
 80072ca:	464b      	mov	r3, r9
 80072cc:	1891      	adds	r1, r2, r2
 80072ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80072d0:	415b      	adcs	r3, r3
 80072d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072d8:	4641      	mov	r1, r8
 80072da:	eb12 0a01 	adds.w	sl, r2, r1
 80072de:	4649      	mov	r1, r9
 80072e0:	eb43 0b01 	adc.w	fp, r3, r1
 80072e4:	f04f 0200 	mov.w	r2, #0
 80072e8:	f04f 0300 	mov.w	r3, #0
 80072ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072f8:	4692      	mov	sl, r2
 80072fa:	469b      	mov	fp, r3
 80072fc:	4643      	mov	r3, r8
 80072fe:	eb1a 0303 	adds.w	r3, sl, r3
 8007302:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007306:	464b      	mov	r3, r9
 8007308:	eb4b 0303 	adc.w	r3, fp, r3
 800730c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800731c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007320:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007324:	460b      	mov	r3, r1
 8007326:	18db      	adds	r3, r3, r3
 8007328:	643b      	str	r3, [r7, #64]	; 0x40
 800732a:	4613      	mov	r3, r2
 800732c:	eb42 0303 	adc.w	r3, r2, r3
 8007330:	647b      	str	r3, [r7, #68]	; 0x44
 8007332:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007336:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800733a:	f7f9 fd5d 	bl	8000df8 <__aeabi_uldivmod>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	4611      	mov	r1, r2
 8007344:	4b3b      	ldr	r3, [pc, #236]	; (8007434 <UART_SetConfig+0x2d4>)
 8007346:	fba3 2301 	umull	r2, r3, r3, r1
 800734a:	095b      	lsrs	r3, r3, #5
 800734c:	2264      	movs	r2, #100	; 0x64
 800734e:	fb02 f303 	mul.w	r3, r2, r3
 8007352:	1acb      	subs	r3, r1, r3
 8007354:	00db      	lsls	r3, r3, #3
 8007356:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800735a:	4b36      	ldr	r3, [pc, #216]	; (8007434 <UART_SetConfig+0x2d4>)
 800735c:	fba3 2302 	umull	r2, r3, r3, r2
 8007360:	095b      	lsrs	r3, r3, #5
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007368:	441c      	add	r4, r3
 800736a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800736e:	2200      	movs	r2, #0
 8007370:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007374:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007378:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800737c:	4642      	mov	r2, r8
 800737e:	464b      	mov	r3, r9
 8007380:	1891      	adds	r1, r2, r2
 8007382:	63b9      	str	r1, [r7, #56]	; 0x38
 8007384:	415b      	adcs	r3, r3
 8007386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007388:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800738c:	4641      	mov	r1, r8
 800738e:	1851      	adds	r1, r2, r1
 8007390:	6339      	str	r1, [r7, #48]	; 0x30
 8007392:	4649      	mov	r1, r9
 8007394:	414b      	adcs	r3, r1
 8007396:	637b      	str	r3, [r7, #52]	; 0x34
 8007398:	f04f 0200 	mov.w	r2, #0
 800739c:	f04f 0300 	mov.w	r3, #0
 80073a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80073a4:	4659      	mov	r1, fp
 80073a6:	00cb      	lsls	r3, r1, #3
 80073a8:	4651      	mov	r1, sl
 80073aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073ae:	4651      	mov	r1, sl
 80073b0:	00ca      	lsls	r2, r1, #3
 80073b2:	4610      	mov	r0, r2
 80073b4:	4619      	mov	r1, r3
 80073b6:	4603      	mov	r3, r0
 80073b8:	4642      	mov	r2, r8
 80073ba:	189b      	adds	r3, r3, r2
 80073bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073c0:	464b      	mov	r3, r9
 80073c2:	460a      	mov	r2, r1
 80073c4:	eb42 0303 	adc.w	r3, r2, r3
 80073c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80073dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073e0:	460b      	mov	r3, r1
 80073e2:	18db      	adds	r3, r3, r3
 80073e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80073e6:	4613      	mov	r3, r2
 80073e8:	eb42 0303 	adc.w	r3, r2, r3
 80073ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80073f6:	f7f9 fcff 	bl	8000df8 <__aeabi_uldivmod>
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	4b0d      	ldr	r3, [pc, #52]	; (8007434 <UART_SetConfig+0x2d4>)
 8007400:	fba3 1302 	umull	r1, r3, r3, r2
 8007404:	095b      	lsrs	r3, r3, #5
 8007406:	2164      	movs	r1, #100	; 0x64
 8007408:	fb01 f303 	mul.w	r3, r1, r3
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	00db      	lsls	r3, r3, #3
 8007410:	3332      	adds	r3, #50	; 0x32
 8007412:	4a08      	ldr	r2, [pc, #32]	; (8007434 <UART_SetConfig+0x2d4>)
 8007414:	fba2 2303 	umull	r2, r3, r2, r3
 8007418:	095b      	lsrs	r3, r3, #5
 800741a:	f003 0207 	and.w	r2, r3, #7
 800741e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4422      	add	r2, r4
 8007426:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007428:	e106      	b.n	8007638 <UART_SetConfig+0x4d8>
 800742a:	bf00      	nop
 800742c:	40011000 	.word	0x40011000
 8007430:	40011400 	.word	0x40011400
 8007434:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800743c:	2200      	movs	r2, #0
 800743e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007442:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007446:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800744a:	4642      	mov	r2, r8
 800744c:	464b      	mov	r3, r9
 800744e:	1891      	adds	r1, r2, r2
 8007450:	6239      	str	r1, [r7, #32]
 8007452:	415b      	adcs	r3, r3
 8007454:	627b      	str	r3, [r7, #36]	; 0x24
 8007456:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800745a:	4641      	mov	r1, r8
 800745c:	1854      	adds	r4, r2, r1
 800745e:	4649      	mov	r1, r9
 8007460:	eb43 0501 	adc.w	r5, r3, r1
 8007464:	f04f 0200 	mov.w	r2, #0
 8007468:	f04f 0300 	mov.w	r3, #0
 800746c:	00eb      	lsls	r3, r5, #3
 800746e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007472:	00e2      	lsls	r2, r4, #3
 8007474:	4614      	mov	r4, r2
 8007476:	461d      	mov	r5, r3
 8007478:	4643      	mov	r3, r8
 800747a:	18e3      	adds	r3, r4, r3
 800747c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007480:	464b      	mov	r3, r9
 8007482:	eb45 0303 	adc.w	r3, r5, r3
 8007486:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800748a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007496:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800749a:	f04f 0200 	mov.w	r2, #0
 800749e:	f04f 0300 	mov.w	r3, #0
 80074a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80074a6:	4629      	mov	r1, r5
 80074a8:	008b      	lsls	r3, r1, #2
 80074aa:	4621      	mov	r1, r4
 80074ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074b0:	4621      	mov	r1, r4
 80074b2:	008a      	lsls	r2, r1, #2
 80074b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80074b8:	f7f9 fc9e 	bl	8000df8 <__aeabi_uldivmod>
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	4b60      	ldr	r3, [pc, #384]	; (8007644 <UART_SetConfig+0x4e4>)
 80074c2:	fba3 2302 	umull	r2, r3, r3, r2
 80074c6:	095b      	lsrs	r3, r3, #5
 80074c8:	011c      	lsls	r4, r3, #4
 80074ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074ce:	2200      	movs	r2, #0
 80074d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80074dc:	4642      	mov	r2, r8
 80074de:	464b      	mov	r3, r9
 80074e0:	1891      	adds	r1, r2, r2
 80074e2:	61b9      	str	r1, [r7, #24]
 80074e4:	415b      	adcs	r3, r3
 80074e6:	61fb      	str	r3, [r7, #28]
 80074e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074ec:	4641      	mov	r1, r8
 80074ee:	1851      	adds	r1, r2, r1
 80074f0:	6139      	str	r1, [r7, #16]
 80074f2:	4649      	mov	r1, r9
 80074f4:	414b      	adcs	r3, r1
 80074f6:	617b      	str	r3, [r7, #20]
 80074f8:	f04f 0200 	mov.w	r2, #0
 80074fc:	f04f 0300 	mov.w	r3, #0
 8007500:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007504:	4659      	mov	r1, fp
 8007506:	00cb      	lsls	r3, r1, #3
 8007508:	4651      	mov	r1, sl
 800750a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800750e:	4651      	mov	r1, sl
 8007510:	00ca      	lsls	r2, r1, #3
 8007512:	4610      	mov	r0, r2
 8007514:	4619      	mov	r1, r3
 8007516:	4603      	mov	r3, r0
 8007518:	4642      	mov	r2, r8
 800751a:	189b      	adds	r3, r3, r2
 800751c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007520:	464b      	mov	r3, r9
 8007522:	460a      	mov	r2, r1
 8007524:	eb42 0303 	adc.w	r3, r2, r3
 8007528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800752c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	67bb      	str	r3, [r7, #120]	; 0x78
 8007536:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007538:	f04f 0200 	mov.w	r2, #0
 800753c:	f04f 0300 	mov.w	r3, #0
 8007540:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007544:	4649      	mov	r1, r9
 8007546:	008b      	lsls	r3, r1, #2
 8007548:	4641      	mov	r1, r8
 800754a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800754e:	4641      	mov	r1, r8
 8007550:	008a      	lsls	r2, r1, #2
 8007552:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007556:	f7f9 fc4f 	bl	8000df8 <__aeabi_uldivmod>
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	4611      	mov	r1, r2
 8007560:	4b38      	ldr	r3, [pc, #224]	; (8007644 <UART_SetConfig+0x4e4>)
 8007562:	fba3 2301 	umull	r2, r3, r3, r1
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	2264      	movs	r2, #100	; 0x64
 800756a:	fb02 f303 	mul.w	r3, r2, r3
 800756e:	1acb      	subs	r3, r1, r3
 8007570:	011b      	lsls	r3, r3, #4
 8007572:	3332      	adds	r3, #50	; 0x32
 8007574:	4a33      	ldr	r2, [pc, #204]	; (8007644 <UART_SetConfig+0x4e4>)
 8007576:	fba2 2303 	umull	r2, r3, r2, r3
 800757a:	095b      	lsrs	r3, r3, #5
 800757c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007580:	441c      	add	r4, r3
 8007582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007586:	2200      	movs	r2, #0
 8007588:	673b      	str	r3, [r7, #112]	; 0x70
 800758a:	677a      	str	r2, [r7, #116]	; 0x74
 800758c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007590:	4642      	mov	r2, r8
 8007592:	464b      	mov	r3, r9
 8007594:	1891      	adds	r1, r2, r2
 8007596:	60b9      	str	r1, [r7, #8]
 8007598:	415b      	adcs	r3, r3
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075a0:	4641      	mov	r1, r8
 80075a2:	1851      	adds	r1, r2, r1
 80075a4:	6039      	str	r1, [r7, #0]
 80075a6:	4649      	mov	r1, r9
 80075a8:	414b      	adcs	r3, r1
 80075aa:	607b      	str	r3, [r7, #4]
 80075ac:	f04f 0200 	mov.w	r2, #0
 80075b0:	f04f 0300 	mov.w	r3, #0
 80075b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075b8:	4659      	mov	r1, fp
 80075ba:	00cb      	lsls	r3, r1, #3
 80075bc:	4651      	mov	r1, sl
 80075be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075c2:	4651      	mov	r1, sl
 80075c4:	00ca      	lsls	r2, r1, #3
 80075c6:	4610      	mov	r0, r2
 80075c8:	4619      	mov	r1, r3
 80075ca:	4603      	mov	r3, r0
 80075cc:	4642      	mov	r2, r8
 80075ce:	189b      	adds	r3, r3, r2
 80075d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80075d2:	464b      	mov	r3, r9
 80075d4:	460a      	mov	r2, r1
 80075d6:	eb42 0303 	adc.w	r3, r2, r3
 80075da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	663b      	str	r3, [r7, #96]	; 0x60
 80075e6:	667a      	str	r2, [r7, #100]	; 0x64
 80075e8:	f04f 0200 	mov.w	r2, #0
 80075ec:	f04f 0300 	mov.w	r3, #0
 80075f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80075f4:	4649      	mov	r1, r9
 80075f6:	008b      	lsls	r3, r1, #2
 80075f8:	4641      	mov	r1, r8
 80075fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075fe:	4641      	mov	r1, r8
 8007600:	008a      	lsls	r2, r1, #2
 8007602:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007606:	f7f9 fbf7 	bl	8000df8 <__aeabi_uldivmod>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	4b0d      	ldr	r3, [pc, #52]	; (8007644 <UART_SetConfig+0x4e4>)
 8007610:	fba3 1302 	umull	r1, r3, r3, r2
 8007614:	095b      	lsrs	r3, r3, #5
 8007616:	2164      	movs	r1, #100	; 0x64
 8007618:	fb01 f303 	mul.w	r3, r1, r3
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	011b      	lsls	r3, r3, #4
 8007620:	3332      	adds	r3, #50	; 0x32
 8007622:	4a08      	ldr	r2, [pc, #32]	; (8007644 <UART_SetConfig+0x4e4>)
 8007624:	fba2 2303 	umull	r2, r3, r2, r3
 8007628:	095b      	lsrs	r3, r3, #5
 800762a:	f003 020f 	and.w	r2, r3, #15
 800762e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4422      	add	r2, r4
 8007636:	609a      	str	r2, [r3, #8]
}
 8007638:	bf00      	nop
 800763a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800763e:	46bd      	mov	sp, r7
 8007640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007644:	51eb851f 	.word	0x51eb851f

08007648 <__NVIC_SetPriority>:
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	6039      	str	r1, [r7, #0]
 8007652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007658:	2b00      	cmp	r3, #0
 800765a:	db0a      	blt.n	8007672 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	b2da      	uxtb	r2, r3
 8007660:	490c      	ldr	r1, [pc, #48]	; (8007694 <__NVIC_SetPriority+0x4c>)
 8007662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007666:	0112      	lsls	r2, r2, #4
 8007668:	b2d2      	uxtb	r2, r2
 800766a:	440b      	add	r3, r1
 800766c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007670:	e00a      	b.n	8007688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	b2da      	uxtb	r2, r3
 8007676:	4908      	ldr	r1, [pc, #32]	; (8007698 <__NVIC_SetPriority+0x50>)
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	3b04      	subs	r3, #4
 8007680:	0112      	lsls	r2, r2, #4
 8007682:	b2d2      	uxtb	r2, r2
 8007684:	440b      	add	r3, r1
 8007686:	761a      	strb	r2, [r3, #24]
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	e000e100 	.word	0xe000e100
 8007698:	e000ed00 	.word	0xe000ed00

0800769c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80076a0:	4b05      	ldr	r3, [pc, #20]	; (80076b8 <SysTick_Handler+0x1c>)
 80076a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80076a4:	f001 fd4e 	bl	8009144 <xTaskGetSchedulerState>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d001      	beq.n	80076b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80076ae:	f002 fb33 	bl	8009d18 <xPortSysTickHandler>
  }
}
 80076b2:	bf00      	nop
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	e000e010 	.word	0xe000e010

080076bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80076bc:	b580      	push	{r7, lr}
 80076be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80076c0:	2100      	movs	r1, #0
 80076c2:	f06f 0004 	mvn.w	r0, #4
 80076c6:	f7ff ffbf 	bl	8007648 <__NVIC_SetPriority>
#endif
}
 80076ca:	bf00      	nop
 80076cc:	bd80      	pop	{r7, pc}
	...

080076d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076d6:	f3ef 8305 	mrs	r3, IPSR
 80076da:	603b      	str	r3, [r7, #0]
  return(result);
 80076dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80076e2:	f06f 0305 	mvn.w	r3, #5
 80076e6:	607b      	str	r3, [r7, #4]
 80076e8:	e00c      	b.n	8007704 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80076ea:	4b0a      	ldr	r3, [pc, #40]	; (8007714 <osKernelInitialize+0x44>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d105      	bne.n	80076fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80076f2:	4b08      	ldr	r3, [pc, #32]	; (8007714 <osKernelInitialize+0x44>)
 80076f4:	2201      	movs	r2, #1
 80076f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	607b      	str	r3, [r7, #4]
 80076fc:	e002      	b.n	8007704 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80076fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007702:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007704:	687b      	ldr	r3, [r7, #4]
}
 8007706:	4618      	mov	r0, r3
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	20007794 	.word	0x20007794

08007718 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800771e:	f3ef 8305 	mrs	r3, IPSR
 8007722:	603b      	str	r3, [r7, #0]
  return(result);
 8007724:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <osKernelStart+0x1a>
    stat = osErrorISR;
 800772a:	f06f 0305 	mvn.w	r3, #5
 800772e:	607b      	str	r3, [r7, #4]
 8007730:	e010      	b.n	8007754 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007732:	4b0b      	ldr	r3, [pc, #44]	; (8007760 <osKernelStart+0x48>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d109      	bne.n	800774e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800773a:	f7ff ffbf 	bl	80076bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800773e:	4b08      	ldr	r3, [pc, #32]	; (8007760 <osKernelStart+0x48>)
 8007740:	2202      	movs	r2, #2
 8007742:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007744:	f001 f87c 	bl	8008840 <vTaskStartScheduler>
      stat = osOK;
 8007748:	2300      	movs	r3, #0
 800774a:	607b      	str	r3, [r7, #4]
 800774c:	e002      	b.n	8007754 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800774e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007752:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007754:	687b      	ldr	r3, [r7, #4]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20007794 	.word	0x20007794

08007764 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007764:	b580      	push	{r7, lr}
 8007766:	b08e      	sub	sp, #56	; 0x38
 8007768:	af04      	add	r7, sp, #16
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007770:	2300      	movs	r3, #0
 8007772:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007774:	f3ef 8305 	mrs	r3, IPSR
 8007778:	617b      	str	r3, [r7, #20]
  return(result);
 800777a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800777c:	2b00      	cmp	r3, #0
 800777e:	d17e      	bne.n	800787e <osThreadNew+0x11a>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d07b      	beq.n	800787e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007786:	2380      	movs	r3, #128	; 0x80
 8007788:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800778a:	2318      	movs	r3, #24
 800778c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800778e:	2300      	movs	r3, #0
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007796:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d045      	beq.n	800782a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <osThreadNew+0x48>
        name = attr->name;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d008      	beq.n	80077d2 <osThreadNew+0x6e>
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	2b38      	cmp	r3, #56	; 0x38
 80077c4:	d805      	bhi.n	80077d2 <osThreadNew+0x6e>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <osThreadNew+0x72>
        return (NULL);
 80077d2:	2300      	movs	r3, #0
 80077d4:	e054      	b.n	8007880 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	089b      	lsrs	r3, r3, #2
 80077e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00e      	beq.n	800780c <osThreadNew+0xa8>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	2ba7      	cmp	r3, #167	; 0xa7
 80077f4:	d90a      	bls.n	800780c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d006      	beq.n	800780c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <osThreadNew+0xa8>
        mem = 1;
 8007806:	2301      	movs	r3, #1
 8007808:	61bb      	str	r3, [r7, #24]
 800780a:	e010      	b.n	800782e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10c      	bne.n	800782e <osThreadNew+0xca>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d108      	bne.n	800782e <osThreadNew+0xca>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d104      	bne.n	800782e <osThreadNew+0xca>
          mem = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	61bb      	str	r3, [r7, #24]
 8007828:	e001      	b.n	800782e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d110      	bne.n	8007856 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800783c:	9202      	str	r2, [sp, #8]
 800783e:	9301      	str	r3, [sp, #4]
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	6a3a      	ldr	r2, [r7, #32]
 8007848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 fe0c 	bl	8008468 <xTaskCreateStatic>
 8007850:	4603      	mov	r3, r0
 8007852:	613b      	str	r3, [r7, #16]
 8007854:	e013      	b.n	800787e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d110      	bne.n	800787e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	b29a      	uxth	r2, r3
 8007860:	f107 0310 	add.w	r3, r7, #16
 8007864:	9301      	str	r3, [sp, #4]
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 fe57 	bl	8008522 <xTaskCreate>
 8007874:	4603      	mov	r3, r0
 8007876:	2b01      	cmp	r3, #1
 8007878:	d001      	beq.n	800787e <osThreadNew+0x11a>
            hTask = NULL;
 800787a:	2300      	movs	r3, #0
 800787c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800787e:	693b      	ldr	r3, [r7, #16]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3728      	adds	r7, #40	; 0x28
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007890:	f3ef 8305 	mrs	r3, IPSR
 8007894:	60bb      	str	r3, [r7, #8]
  return(result);
 8007896:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007898:	2b00      	cmp	r3, #0
 800789a:	d003      	beq.n	80078a4 <osDelay+0x1c>
    stat = osErrorISR;
 800789c:	f06f 0305 	mvn.w	r3, #5
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	e007      	b.n	80078b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 ff92 	bl	80087d8 <vTaskDelay>
    }
  }

  return (stat);
 80078b4:	68fb      	ldr	r3, [r7, #12]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
	...

080078c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4a07      	ldr	r2, [pc, #28]	; (80078ec <vApplicationGetIdleTaskMemory+0x2c>)
 80078d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	4a06      	ldr	r2, [pc, #24]	; (80078f0 <vApplicationGetIdleTaskMemory+0x30>)
 80078d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2280      	movs	r2, #128	; 0x80
 80078dc:	601a      	str	r2, [r3, #0]
}
 80078de:	bf00      	nop
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	20007798 	.word	0x20007798
 80078f0:	20007840 	.word	0x20007840

080078f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4a07      	ldr	r2, [pc, #28]	; (8007920 <vApplicationGetTimerTaskMemory+0x2c>)
 8007904:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	4a06      	ldr	r2, [pc, #24]	; (8007924 <vApplicationGetTimerTaskMemory+0x30>)
 800790a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007912:	601a      	str	r2, [r3, #0]
}
 8007914:	bf00      	nop
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	20007a40 	.word	0x20007a40
 8007924:	20007ae8 	.word	0x20007ae8

08007928 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f103 0208 	add.w	r2, r3, #8
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007940:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f103 0208 	add.w	r2, r3, #8
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f103 0208 	add.w	r2, r3, #8
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007982:	b480      	push	{r7}
 8007984:	b085      	sub	sp, #20
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	1c5a      	adds	r2, r3, #1
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	601a      	str	r2, [r3, #0]
}
 80079be:	bf00      	nop
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079ca:	b480      	push	{r7}
 80079cc:	b085      	sub	sp, #20
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079e0:	d103      	bne.n	80079ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	e00c      	b.n	8007a04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	3308      	adds	r3, #8
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	e002      	b.n	80079f8 <vListInsert+0x2e>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d2f6      	bcs.n	80079f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	1c5a      	adds	r2, r3, #1
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	601a      	str	r2, [r3, #0]
}
 8007a30:	bf00      	nop
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	6892      	ldr	r2, [r2, #8]
 8007a52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	6852      	ldr	r2, [r2, #4]
 8007a5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d103      	bne.n	8007a70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	1e5a      	subs	r2, r3, #1
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <xQueueGenericReset+0x2a>
	__asm volatile
 8007aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	60bb      	str	r3, [r7, #8]
}
 8007ab6:	bf00      	nop
 8007ab8:	e7fe      	b.n	8007ab8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007aba:	f002 f89b 	bl	8009bf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac6:	68f9      	ldr	r1, [r7, #12]
 8007ac8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007aca:	fb01 f303 	mul.w	r3, r1, r3
 8007ace:	441a      	add	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aea:	3b01      	subs	r3, #1
 8007aec:	68f9      	ldr	r1, [r7, #12]
 8007aee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007af0:	fb01 f303 	mul.w	r3, r1, r3
 8007af4:	441a      	add	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	22ff      	movs	r2, #255	; 0xff
 8007afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	22ff      	movs	r2, #255	; 0xff
 8007b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d114      	bne.n	8007b3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d01a      	beq.n	8007b4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	3310      	adds	r3, #16
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f001 f929 	bl	8008d74 <xTaskRemoveFromEventList>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d012      	beq.n	8007b4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b28:	4b0c      	ldr	r3, [pc, #48]	; (8007b5c <xQueueGenericReset+0xcc>)
 8007b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	e009      	b.n	8007b4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3310      	adds	r3, #16
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7ff fef2 	bl	8007928 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3324      	adds	r3, #36	; 0x24
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7ff feed 	bl	8007928 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b4e:	f002 f881 	bl	8009c54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b52:	2301      	movs	r3, #1
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	e000ed04 	.word	0xe000ed04

08007b60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b08e      	sub	sp, #56	; 0x38
 8007b64:	af02      	add	r7, sp, #8
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
 8007b6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10a      	bne.n	8007b8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10a      	bne.n	8007ba6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ba2:	bf00      	nop
 8007ba4:	e7fe      	b.n	8007ba4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d002      	beq.n	8007bb2 <xQueueGenericCreateStatic+0x52>
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d001      	beq.n	8007bb6 <xQueueGenericCreateStatic+0x56>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e000      	b.n	8007bb8 <xQueueGenericCreateStatic+0x58>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10a      	bne.n	8007bd2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	623b      	str	r3, [r7, #32]
}
 8007bce:	bf00      	nop
 8007bd0:	e7fe      	b.n	8007bd0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d102      	bne.n	8007bde <xQueueGenericCreateStatic+0x7e>
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <xQueueGenericCreateStatic+0x82>
 8007bde:	2301      	movs	r3, #1
 8007be0:	e000      	b.n	8007be4 <xQueueGenericCreateStatic+0x84>
 8007be2:	2300      	movs	r3, #0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10a      	bne.n	8007bfe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	61fb      	str	r3, [r7, #28]
}
 8007bfa:	bf00      	nop
 8007bfc:	e7fe      	b.n	8007bfc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bfe:	2350      	movs	r3, #80	; 0x50
 8007c00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	2b50      	cmp	r3, #80	; 0x50
 8007c06:	d00a      	beq.n	8007c1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	61bb      	str	r3, [r7, #24]
}
 8007c1a:	bf00      	nop
 8007c1c:	e7fe      	b.n	8007c1c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00d      	beq.n	8007c46 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	68b9      	ldr	r1, [r7, #8]
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 f805 	bl	8007c50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3730      	adds	r7, #48	; 0x30
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
 8007c5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d103      	bne.n	8007c6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	69ba      	ldr	r2, [r7, #24]
 8007c68:	601a      	str	r2, [r3, #0]
 8007c6a:	e002      	b.n	8007c72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c7e:	2101      	movs	r1, #1
 8007c80:	69b8      	ldr	r0, [r7, #24]
 8007c82:	f7ff ff05 	bl	8007a90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	78fa      	ldrb	r2, [r7, #3]
 8007c8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c8e:	bf00      	nop
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08e      	sub	sp, #56	; 0x38
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
 8007ca4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10a      	bne.n	8007cca <xQueueGenericSend+0x32>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007cc6:	bf00      	nop
 8007cc8:	e7fe      	b.n	8007cc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d103      	bne.n	8007cd8 <xQueueGenericSend+0x40>
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <xQueueGenericSend+0x44>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e000      	b.n	8007cde <xQueueGenericSend+0x46>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <xQueueGenericSend+0x60>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d103      	bne.n	8007d06 <xQueueGenericSend+0x6e>
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d101      	bne.n	8007d0a <xQueueGenericSend+0x72>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e000      	b.n	8007d0c <xQueueGenericSend+0x74>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10a      	bne.n	8007d26 <xQueueGenericSend+0x8e>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	623b      	str	r3, [r7, #32]
}
 8007d22:	bf00      	nop
 8007d24:	e7fe      	b.n	8007d24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d26:	f001 fa0d 	bl	8009144 <xTaskGetSchedulerState>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d102      	bne.n	8007d36 <xQueueGenericSend+0x9e>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <xQueueGenericSend+0xa2>
 8007d36:	2301      	movs	r3, #1
 8007d38:	e000      	b.n	8007d3c <xQueueGenericSend+0xa4>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10a      	bne.n	8007d56 <xQueueGenericSend+0xbe>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	61fb      	str	r3, [r7, #28]
}
 8007d52:	bf00      	nop
 8007d54:	e7fe      	b.n	8007d54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d56:	f001 ff4d 	bl	8009bf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d302      	bcc.n	8007d6c <xQueueGenericSend+0xd4>
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d129      	bne.n	8007dc0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	68b9      	ldr	r1, [r7, #8]
 8007d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d72:	f000 fa0b 	bl	800818c <prvCopyDataToQueue>
 8007d76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d010      	beq.n	8007da2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d82:	3324      	adds	r3, #36	; 0x24
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 fff5 	bl	8008d74 <xTaskRemoveFromEventList>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d013      	beq.n	8007db8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d90:	4b3f      	ldr	r3, [pc, #252]	; (8007e90 <xQueueGenericSend+0x1f8>)
 8007d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	e00a      	b.n	8007db8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d007      	beq.n	8007db8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007da8:	4b39      	ldr	r3, [pc, #228]	; (8007e90 <xQueueGenericSend+0x1f8>)
 8007daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007db8:	f001 ff4c 	bl	8009c54 <vPortExitCritical>
				return pdPASS;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e063      	b.n	8007e88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d103      	bne.n	8007dce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dc6:	f001 ff45 	bl	8009c54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e05c      	b.n	8007e88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d106      	bne.n	8007de2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dd4:	f107 0314 	add.w	r3, r7, #20
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f001 f855 	bl	8008e88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dde:	2301      	movs	r3, #1
 8007de0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007de2:	f001 ff37 	bl	8009c54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007de6:	f000 fd9b 	bl	8008920 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dea:	f001 ff03 	bl	8009bf4 <vPortEnterCritical>
 8007dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007df4:	b25b      	sxtb	r3, r3
 8007df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dfa:	d103      	bne.n	8007e04 <xQueueGenericSend+0x16c>
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e0a:	b25b      	sxtb	r3, r3
 8007e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e10:	d103      	bne.n	8007e1a <xQueueGenericSend+0x182>
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e1a:	f001 ff1b 	bl	8009c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e1e:	1d3a      	adds	r2, r7, #4
 8007e20:	f107 0314 	add.w	r3, r7, #20
 8007e24:	4611      	mov	r1, r2
 8007e26:	4618      	mov	r0, r3
 8007e28:	f001 f844 	bl	8008eb4 <xTaskCheckForTimeOut>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d124      	bne.n	8007e7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e34:	f000 faa2 	bl	800837c <prvIsQueueFull>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d018      	beq.n	8007e70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	3310      	adds	r3, #16
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	4611      	mov	r1, r2
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 ff44 	bl	8008cd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e4e:	f000 fa2d 	bl	80082ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e52:	f000 fd73 	bl	800893c <xTaskResumeAll>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f47f af7c 	bne.w	8007d56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007e5e:	4b0c      	ldr	r3, [pc, #48]	; (8007e90 <xQueueGenericSend+0x1f8>)
 8007e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	e772      	b.n	8007d56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e72:	f000 fa1b 	bl	80082ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e76:	f000 fd61 	bl	800893c <xTaskResumeAll>
 8007e7a:	e76c      	b.n	8007d56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e7e:	f000 fa15 	bl	80082ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e82:	f000 fd5b 	bl	800893c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3738      	adds	r7, #56	; 0x38
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	e000ed04 	.word	0xe000ed04

08007e94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b090      	sub	sp, #64	; 0x40
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10a      	bne.n	8007ec2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ebe:	bf00      	nop
 8007ec0:	e7fe      	b.n	8007ec0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d103      	bne.n	8007ed0 <xQueueGenericSendFromISR+0x3c>
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <xQueueGenericSendFromISR+0x40>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e000      	b.n	8007ed6 <xQueueGenericSendFromISR+0x42>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10a      	bne.n	8007ef0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007eec:	bf00      	nop
 8007eee:	e7fe      	b.n	8007eee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d103      	bne.n	8007efe <xQueueGenericSendFromISR+0x6a>
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d101      	bne.n	8007f02 <xQueueGenericSendFromISR+0x6e>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e000      	b.n	8007f04 <xQueueGenericSendFromISR+0x70>
 8007f02:	2300      	movs	r3, #0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10a      	bne.n	8007f1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	623b      	str	r3, [r7, #32]
}
 8007f1a:	bf00      	nop
 8007f1c:	e7fe      	b.n	8007f1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f1e:	f001 ff4b 	bl	8009db8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f22:	f3ef 8211 	mrs	r2, BASEPRI
 8007f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	61fa      	str	r2, [r7, #28]
 8007f38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d302      	bcc.n	8007f50 <xQueueGenericSendFromISR+0xbc>
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d12f      	bne.n	8007fb0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	68b9      	ldr	r1, [r7, #8]
 8007f64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f66:	f000 f911 	bl	800818c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f72:	d112      	bne.n	8007f9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d016      	beq.n	8007faa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7e:	3324      	adds	r3, #36	; 0x24
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 fef7 	bl	8008d74 <xTaskRemoveFromEventList>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00e      	beq.n	8007faa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00b      	beq.n	8007faa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	e007      	b.n	8007faa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	b25a      	sxtb	r2, r3
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007faa:	2301      	movs	r3, #1
 8007fac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007fae:	e001      	b.n	8007fb4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007fbe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3740      	adds	r7, #64	; 0x40
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
	...

08007fcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08c      	sub	sp, #48	; 0x30
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10a      	bne.n	8007ffc <xQueueReceive+0x30>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	623b      	str	r3, [r7, #32]
}
 8007ff8:	bf00      	nop
 8007ffa:	e7fe      	b.n	8007ffa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d103      	bne.n	800800a <xQueueReceive+0x3e>
 8008002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <xQueueReceive+0x42>
 800800a:	2301      	movs	r3, #1
 800800c:	e000      	b.n	8008010 <xQueueReceive+0x44>
 800800e:	2300      	movs	r3, #0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10a      	bne.n	800802a <xQueueReceive+0x5e>
	__asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	61fb      	str	r3, [r7, #28]
}
 8008026:	bf00      	nop
 8008028:	e7fe      	b.n	8008028 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800802a:	f001 f88b 	bl	8009144 <xTaskGetSchedulerState>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d102      	bne.n	800803a <xQueueReceive+0x6e>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <xQueueReceive+0x72>
 800803a:	2301      	movs	r3, #1
 800803c:	e000      	b.n	8008040 <xQueueReceive+0x74>
 800803e:	2300      	movs	r3, #0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10a      	bne.n	800805a <xQueueReceive+0x8e>
	__asm volatile
 8008044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	61bb      	str	r3, [r7, #24]
}
 8008056:	bf00      	nop
 8008058:	e7fe      	b.n	8008058 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800805a:	f001 fdcb 	bl	8009bf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008062:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	2b00      	cmp	r3, #0
 8008068:	d01f      	beq.n	80080aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800806a:	68b9      	ldr	r1, [r7, #8]
 800806c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800806e:	f000 f8f7 	bl	8008260 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	1e5a      	subs	r2, r3, #1
 8008076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008078:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00f      	beq.n	80080a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	3310      	adds	r3, #16
 8008086:	4618      	mov	r0, r3
 8008088:	f000 fe74 	bl	8008d74 <xTaskRemoveFromEventList>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d007      	beq.n	80080a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008092:	4b3d      	ldr	r3, [pc, #244]	; (8008188 <xQueueReceive+0x1bc>)
 8008094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080a2:	f001 fdd7 	bl	8009c54 <vPortExitCritical>
				return pdPASS;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e069      	b.n	800817e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d103      	bne.n	80080b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080b0:	f001 fdd0 	bl	8009c54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080b4:	2300      	movs	r3, #0
 80080b6:	e062      	b.n	800817e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d106      	bne.n	80080cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080be:	f107 0310 	add.w	r3, r7, #16
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 fee0 	bl	8008e88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080c8:	2301      	movs	r3, #1
 80080ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080cc:	f001 fdc2 	bl	8009c54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080d0:	f000 fc26 	bl	8008920 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080d4:	f001 fd8e 	bl	8009bf4 <vPortEnterCritical>
 80080d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080de:	b25b      	sxtb	r3, r3
 80080e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080e4:	d103      	bne.n	80080ee <xQueueReceive+0x122>
 80080e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080f4:	b25b      	sxtb	r3, r3
 80080f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080fa:	d103      	bne.n	8008104 <xQueueReceive+0x138>
 80080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008104:	f001 fda6 	bl	8009c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008108:	1d3a      	adds	r2, r7, #4
 800810a:	f107 0310 	add.w	r3, r7, #16
 800810e:	4611      	mov	r1, r2
 8008110:	4618      	mov	r0, r3
 8008112:	f000 fecf 	bl	8008eb4 <xTaskCheckForTimeOut>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d123      	bne.n	8008164 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800811c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800811e:	f000 f917 	bl	8008350 <prvIsQueueEmpty>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d017      	beq.n	8008158 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812a:	3324      	adds	r3, #36	; 0x24
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	4611      	mov	r1, r2
 8008130:	4618      	mov	r0, r3
 8008132:	f000 fdcf 	bl	8008cd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008138:	f000 f8b8 	bl	80082ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800813c:	f000 fbfe 	bl	800893c <xTaskResumeAll>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d189      	bne.n	800805a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008146:	4b10      	ldr	r3, [pc, #64]	; (8008188 <xQueueReceive+0x1bc>)
 8008148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	e780      	b.n	800805a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800815a:	f000 f8a7 	bl	80082ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800815e:	f000 fbed 	bl	800893c <xTaskResumeAll>
 8008162:	e77a      	b.n	800805a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008166:	f000 f8a1 	bl	80082ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800816a:	f000 fbe7 	bl	800893c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800816e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008170:	f000 f8ee 	bl	8008350 <prvIsQueueEmpty>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	f43f af6f 	beq.w	800805a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800817c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800817e:	4618      	mov	r0, r3
 8008180:	3730      	adds	r7, #48	; 0x30
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	e000ed04 	.word	0xe000ed04

0800818c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008198:	2300      	movs	r3, #0
 800819a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10d      	bne.n	80081c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d14d      	bne.n	800824e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 ffe2 	bl	8009180 <xTaskPriorityDisinherit>
 80081bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	609a      	str	r2, [r3, #8]
 80081c4:	e043      	b.n	800824e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d119      	bne.n	8008200 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6858      	ldr	r0, [r3, #4]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d4:	461a      	mov	r2, r3
 80081d6:	68b9      	ldr	r1, [r7, #8]
 80081d8:	f00f fa35 	bl	8017646 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e4:	441a      	add	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d32b      	bcc.n	800824e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	605a      	str	r2, [r3, #4]
 80081fe:	e026      	b.n	800824e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	68d8      	ldr	r0, [r3, #12]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008208:	461a      	mov	r2, r3
 800820a:	68b9      	ldr	r1, [r7, #8]
 800820c:	f00f fa1b 	bl	8017646 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	68da      	ldr	r2, [r3, #12]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008218:	425b      	negs	r3, r3
 800821a:	441a      	add	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	68da      	ldr	r2, [r3, #12]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	429a      	cmp	r2, r3
 800822a:	d207      	bcs.n	800823c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008234:	425b      	negs	r3, r3
 8008236:	441a      	add	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b02      	cmp	r3, #2
 8008240:	d105      	bne.n	800824e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	3b01      	subs	r3, #1
 800824c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	1c5a      	adds	r2, r3, #1
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008256:	697b      	ldr	r3, [r7, #20]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3718      	adds	r7, #24
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826e:	2b00      	cmp	r3, #0
 8008270:	d018      	beq.n	80082a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68da      	ldr	r2, [r3, #12]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827a:	441a      	add	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68da      	ldr	r2, [r3, #12]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	429a      	cmp	r2, r3
 800828a:	d303      	bcc.n	8008294 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	68d9      	ldr	r1, [r3, #12]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829c:	461a      	mov	r2, r3
 800829e:	6838      	ldr	r0, [r7, #0]
 80082a0:	f00f f9d1 	bl	8017646 <memcpy>
	}
}
 80082a4:	bf00      	nop
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082b4:	f001 fc9e 	bl	8009bf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082c0:	e011      	b.n	80082e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d012      	beq.n	80082f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	3324      	adds	r3, #36	; 0x24
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 fd50 	bl	8008d74 <xTaskRemoveFromEventList>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082da:	f000 fe4d 	bl	8008f78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082de:	7bfb      	ldrb	r3, [r7, #15]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	dce9      	bgt.n	80082c2 <prvUnlockQueue+0x16>
 80082ee:	e000      	b.n	80082f2 <prvUnlockQueue+0x46>
					break;
 80082f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	22ff      	movs	r2, #255	; 0xff
 80082f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80082fa:	f001 fcab 	bl	8009c54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082fe:	f001 fc79 	bl	8009bf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008308:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800830a:	e011      	b.n	8008330 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d012      	beq.n	800833a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	3310      	adds	r3, #16
 8008318:	4618      	mov	r0, r3
 800831a:	f000 fd2b 	bl	8008d74 <xTaskRemoveFromEventList>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008324:	f000 fe28 	bl	8008f78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008328:	7bbb      	ldrb	r3, [r7, #14]
 800832a:	3b01      	subs	r3, #1
 800832c:	b2db      	uxtb	r3, r3
 800832e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008330:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008334:	2b00      	cmp	r3, #0
 8008336:	dce9      	bgt.n	800830c <prvUnlockQueue+0x60>
 8008338:	e000      	b.n	800833c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800833a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	22ff      	movs	r2, #255	; 0xff
 8008340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008344:	f001 fc86 	bl	8009c54 <vPortExitCritical>
}
 8008348:	bf00      	nop
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008358:	f001 fc4c 	bl	8009bf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008360:	2b00      	cmp	r3, #0
 8008362:	d102      	bne.n	800836a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008364:	2301      	movs	r3, #1
 8008366:	60fb      	str	r3, [r7, #12]
 8008368:	e001      	b.n	800836e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800836a:	2300      	movs	r3, #0
 800836c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800836e:	f001 fc71 	bl	8009c54 <vPortExitCritical>

	return xReturn;
 8008372:	68fb      	ldr	r3, [r7, #12]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008384:	f001 fc36 	bl	8009bf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008390:	429a      	cmp	r2, r3
 8008392:	d102      	bne.n	800839a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008394:	2301      	movs	r3, #1
 8008396:	60fb      	str	r3, [r7, #12]
 8008398:	e001      	b.n	800839e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800839a:	2300      	movs	r3, #0
 800839c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800839e:	f001 fc59 	bl	8009c54 <vPortExitCritical>

	return xReturn;
 80083a2:	68fb      	ldr	r3, [r7, #12]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	e014      	b.n	80083e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083bc:	4a0f      	ldr	r2, [pc, #60]	; (80083fc <vQueueAddToRegistry+0x50>)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10b      	bne.n	80083e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083c8:	490c      	ldr	r1, [pc, #48]	; (80083fc <vQueueAddToRegistry+0x50>)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083d2:	4a0a      	ldr	r2, [pc, #40]	; (80083fc <vQueueAddToRegistry+0x50>)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	4413      	add	r3, r2
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083de:	e006      	b.n	80083ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3301      	adds	r3, #1
 80083e4:	60fb      	str	r3, [r7, #12]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2b07      	cmp	r3, #7
 80083ea:	d9e7      	bls.n	80083bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083ec:	bf00      	nop
 80083ee:	bf00      	nop
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	20007ee8 	.word	0x20007ee8

08008400 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008410:	f001 fbf0 	bl	8009bf4 <vPortEnterCritical>
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800841a:	b25b      	sxtb	r3, r3
 800841c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008420:	d103      	bne.n	800842a <vQueueWaitForMessageRestricted+0x2a>
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008430:	b25b      	sxtb	r3, r3
 8008432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008436:	d103      	bne.n	8008440 <vQueueWaitForMessageRestricted+0x40>
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008440:	f001 fc08 	bl	8009c54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008448:	2b00      	cmp	r3, #0
 800844a:	d106      	bne.n	800845a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	3324      	adds	r3, #36	; 0x24
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	68b9      	ldr	r1, [r7, #8]
 8008454:	4618      	mov	r0, r3
 8008456:	f000 fc61 	bl	8008d1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800845a:	6978      	ldr	r0, [r7, #20]
 800845c:	f7ff ff26 	bl	80082ac <prvUnlockQueue>
	}
 8008460:	bf00      	nop
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008468:	b580      	push	{r7, lr}
 800846a:	b08e      	sub	sp, #56	; 0x38
 800846c:	af04      	add	r7, sp, #16
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
 8008474:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10a      	bne.n	8008492 <xTaskCreateStatic+0x2a>
	__asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	623b      	str	r3, [r7, #32]
}
 800848e:	bf00      	nop
 8008490:	e7fe      	b.n	8008490 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10a      	bne.n	80084ae <xTaskCreateStatic+0x46>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	61fb      	str	r3, [r7, #28]
}
 80084aa:	bf00      	nop
 80084ac:	e7fe      	b.n	80084ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084ae:	23a8      	movs	r3, #168	; 0xa8
 80084b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	2ba8      	cmp	r3, #168	; 0xa8
 80084b6:	d00a      	beq.n	80084ce <xTaskCreateStatic+0x66>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084bc:	f383 8811 	msr	BASEPRI, r3
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	61bb      	str	r3, [r7, #24]
}
 80084ca:	bf00      	nop
 80084cc:	e7fe      	b.n	80084cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d01e      	beq.n	8008514 <xTaskCreateStatic+0xac>
 80084d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d01b      	beq.n	8008514 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	2202      	movs	r2, #2
 80084ea:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084ee:	2300      	movs	r3, #0
 80084f0:	9303      	str	r3, [sp, #12]
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	9302      	str	r3, [sp, #8]
 80084f6:	f107 0314 	add.w	r3, r7, #20
 80084fa:	9301      	str	r3, [sp, #4]
 80084fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	68b9      	ldr	r1, [r7, #8]
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 f850 	bl	80085ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800850c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800850e:	f000 f8f3 	bl	80086f8 <prvAddNewTaskToReadyList>
 8008512:	e001      	b.n	8008518 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008514:	2300      	movs	r3, #0
 8008516:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008518:	697b      	ldr	r3, [r7, #20]
	}
 800851a:	4618      	mov	r0, r3
 800851c:	3728      	adds	r7, #40	; 0x28
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008522:	b580      	push	{r7, lr}
 8008524:	b08c      	sub	sp, #48	; 0x30
 8008526:	af04      	add	r7, sp, #16
 8008528:	60f8      	str	r0, [r7, #12]
 800852a:	60b9      	str	r1, [r7, #8]
 800852c:	603b      	str	r3, [r7, #0]
 800852e:	4613      	mov	r3, r2
 8008530:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008532:	88fb      	ldrh	r3, [r7, #6]
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4618      	mov	r0, r3
 8008538:	f001 fc7e 	bl	8009e38 <pvPortMalloc>
 800853c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00e      	beq.n	8008562 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008544:	20a8      	movs	r0, #168	; 0xa8
 8008546:	f001 fc77 	bl	8009e38 <pvPortMalloc>
 800854a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	631a      	str	r2, [r3, #48]	; 0x30
 8008558:	e005      	b.n	8008566 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800855a:	6978      	ldr	r0, [r7, #20]
 800855c:	f001 fd38 	bl	8009fd0 <vPortFree>
 8008560:	e001      	b.n	8008566 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008562:	2300      	movs	r3, #0
 8008564:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d017      	beq.n	800859c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008574:	88fa      	ldrh	r2, [r7, #6]
 8008576:	2300      	movs	r3, #0
 8008578:	9303      	str	r3, [sp, #12]
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	9302      	str	r3, [sp, #8]
 800857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f000 f80e 	bl	80085ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008590:	69f8      	ldr	r0, [r7, #28]
 8008592:	f000 f8b1 	bl	80086f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008596:	2301      	movs	r3, #1
 8008598:	61bb      	str	r3, [r7, #24]
 800859a:	e002      	b.n	80085a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800859c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085a2:	69bb      	ldr	r3, [r7, #24]
	}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3720      	adds	r7, #32
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	461a      	mov	r2, r3
 80085c4:	21a5      	movs	r1, #165	; 0xa5
 80085c6:	f00e ff1f 	bl	8017408 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085d4:	3b01      	subs	r3, #1
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4413      	add	r3, r2
 80085da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	f023 0307 	bic.w	r3, r3, #7
 80085e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	f003 0307 	and.w	r3, r3, #7
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <prvInitialiseNewTask+0x58>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	617b      	str	r3, [r7, #20]
}
 8008600:	bf00      	nop
 8008602:	e7fe      	b.n	8008602 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d01f      	beq.n	800864a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800860a:	2300      	movs	r3, #0
 800860c:	61fb      	str	r3, [r7, #28]
 800860e:	e012      	b.n	8008636 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	4413      	add	r3, r2
 8008616:	7819      	ldrb	r1, [r3, #0]
 8008618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	4413      	add	r3, r2
 800861e:	3334      	adds	r3, #52	; 0x34
 8008620:	460a      	mov	r2, r1
 8008622:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	4413      	add	r3, r2
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d006      	beq.n	800863e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	3301      	adds	r3, #1
 8008634:	61fb      	str	r3, [r7, #28]
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	2b0f      	cmp	r3, #15
 800863a:	d9e9      	bls.n	8008610 <prvInitialiseNewTask+0x64>
 800863c:	e000      	b.n	8008640 <prvInitialiseNewTask+0x94>
			{
				break;
 800863e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008648:	e003      	b.n	8008652 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008654:	2b37      	cmp	r3, #55	; 0x37
 8008656:	d901      	bls.n	800865c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008658:	2337      	movs	r3, #55	; 0x37
 800865a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800865c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008660:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008666:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	2200      	movs	r2, #0
 800866c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800866e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008670:	3304      	adds	r3, #4
 8008672:	4618      	mov	r0, r3
 8008674:	f7ff f978 	bl	8007968 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867a:	3318      	adds	r3, #24
 800867c:	4618      	mov	r0, r3
 800867e:	f7ff f973 	bl	8007968 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008686:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008696:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869a:	2200      	movs	r2, #0
 800869c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086aa:	3354      	adds	r3, #84	; 0x54
 80086ac:	224c      	movs	r2, #76	; 0x4c
 80086ae:	2100      	movs	r1, #0
 80086b0:	4618      	mov	r0, r3
 80086b2:	f00e fea9 	bl	8017408 <memset>
 80086b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b8:	4a0c      	ldr	r2, [pc, #48]	; (80086ec <prvInitialiseNewTask+0x140>)
 80086ba:	659a      	str	r2, [r3, #88]	; 0x58
 80086bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086be:	4a0c      	ldr	r2, [pc, #48]	; (80086f0 <prvInitialiseNewTask+0x144>)
 80086c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80086c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c4:	4a0b      	ldr	r2, [pc, #44]	; (80086f4 <prvInitialiseNewTask+0x148>)
 80086c6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	68f9      	ldr	r1, [r7, #12]
 80086cc:	69b8      	ldr	r0, [r7, #24]
 80086ce:	f001 f967 	bl	80099a0 <pxPortInitialiseStack>
 80086d2:	4602      	mov	r2, r0
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d002      	beq.n	80086e4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086e4:	bf00      	nop
 80086e6:	3720      	adds	r7, #32
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	20010d04 	.word	0x20010d04
 80086f0:	20010d6c 	.word	0x20010d6c
 80086f4:	20010dd4 	.word	0x20010dd4

080086f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008700:	f001 fa78 	bl	8009bf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008704:	4b2d      	ldr	r3, [pc, #180]	; (80087bc <prvAddNewTaskToReadyList+0xc4>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3301      	adds	r3, #1
 800870a:	4a2c      	ldr	r2, [pc, #176]	; (80087bc <prvAddNewTaskToReadyList+0xc4>)
 800870c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800870e:	4b2c      	ldr	r3, [pc, #176]	; (80087c0 <prvAddNewTaskToReadyList+0xc8>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d109      	bne.n	800872a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008716:	4a2a      	ldr	r2, [pc, #168]	; (80087c0 <prvAddNewTaskToReadyList+0xc8>)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800871c:	4b27      	ldr	r3, [pc, #156]	; (80087bc <prvAddNewTaskToReadyList+0xc4>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d110      	bne.n	8008746 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008724:	f000 fc4c 	bl	8008fc0 <prvInitialiseTaskLists>
 8008728:	e00d      	b.n	8008746 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800872a:	4b26      	ldr	r3, [pc, #152]	; (80087c4 <prvAddNewTaskToReadyList+0xcc>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d109      	bne.n	8008746 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008732:	4b23      	ldr	r3, [pc, #140]	; (80087c0 <prvAddNewTaskToReadyList+0xc8>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873c:	429a      	cmp	r2, r3
 800873e:	d802      	bhi.n	8008746 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008740:	4a1f      	ldr	r2, [pc, #124]	; (80087c0 <prvAddNewTaskToReadyList+0xc8>)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008746:	4b20      	ldr	r3, [pc, #128]	; (80087c8 <prvAddNewTaskToReadyList+0xd0>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3301      	adds	r3, #1
 800874c:	4a1e      	ldr	r2, [pc, #120]	; (80087c8 <prvAddNewTaskToReadyList+0xd0>)
 800874e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008750:	4b1d      	ldr	r3, [pc, #116]	; (80087c8 <prvAddNewTaskToReadyList+0xd0>)
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800875c:	4b1b      	ldr	r3, [pc, #108]	; (80087cc <prvAddNewTaskToReadyList+0xd4>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	429a      	cmp	r2, r3
 8008762:	d903      	bls.n	800876c <prvAddNewTaskToReadyList+0x74>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008768:	4a18      	ldr	r2, [pc, #96]	; (80087cc <prvAddNewTaskToReadyList+0xd4>)
 800876a:	6013      	str	r3, [r2, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008770:	4613      	mov	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4a15      	ldr	r2, [pc, #84]	; (80087d0 <prvAddNewTaskToReadyList+0xd8>)
 800877a:	441a      	add	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	3304      	adds	r3, #4
 8008780:	4619      	mov	r1, r3
 8008782:	4610      	mov	r0, r2
 8008784:	f7ff f8fd 	bl	8007982 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008788:	f001 fa64 	bl	8009c54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800878c:	4b0d      	ldr	r3, [pc, #52]	; (80087c4 <prvAddNewTaskToReadyList+0xcc>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00e      	beq.n	80087b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008794:	4b0a      	ldr	r3, [pc, #40]	; (80087c0 <prvAddNewTaskToReadyList+0xc8>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879e:	429a      	cmp	r2, r3
 80087a0:	d207      	bcs.n	80087b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087a2:	4b0c      	ldr	r3, [pc, #48]	; (80087d4 <prvAddNewTaskToReadyList+0xdc>)
 80087a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087a8:	601a      	str	r2, [r3, #0]
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087b2:	bf00      	nop
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	200083fc 	.word	0x200083fc
 80087c0:	20007f28 	.word	0x20007f28
 80087c4:	20008408 	.word	0x20008408
 80087c8:	20008418 	.word	0x20008418
 80087cc:	20008404 	.word	0x20008404
 80087d0:	20007f2c 	.word	0x20007f2c
 80087d4:	e000ed04 	.word	0xe000ed04

080087d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087e0:	2300      	movs	r3, #0
 80087e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d017      	beq.n	800881a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087ea:	4b13      	ldr	r3, [pc, #76]	; (8008838 <vTaskDelay+0x60>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00a      	beq.n	8008808 <vTaskDelay+0x30>
	__asm volatile
 80087f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f6:	f383 8811 	msr	BASEPRI, r3
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	60bb      	str	r3, [r7, #8]
}
 8008804:	bf00      	nop
 8008806:	e7fe      	b.n	8008806 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008808:	f000 f88a 	bl	8008920 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800880c:	2100      	movs	r1, #0
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fd24 	bl	800925c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008814:	f000 f892 	bl	800893c <xTaskResumeAll>
 8008818:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d107      	bne.n	8008830 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008820:	4b06      	ldr	r3, [pc, #24]	; (800883c <vTaskDelay+0x64>)
 8008822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008830:	bf00      	nop
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	20008424 	.word	0x20008424
 800883c:	e000ed04 	.word	0xe000ed04

08008840 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08a      	sub	sp, #40	; 0x28
 8008844:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008846:	2300      	movs	r3, #0
 8008848:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800884a:	2300      	movs	r3, #0
 800884c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800884e:	463a      	mov	r2, r7
 8008850:	1d39      	adds	r1, r7, #4
 8008852:	f107 0308 	add.w	r3, r7, #8
 8008856:	4618      	mov	r0, r3
 8008858:	f7ff f832 	bl	80078c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	9202      	str	r2, [sp, #8]
 8008864:	9301      	str	r3, [sp, #4]
 8008866:	2300      	movs	r3, #0
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	2300      	movs	r3, #0
 800886c:	460a      	mov	r2, r1
 800886e:	4924      	ldr	r1, [pc, #144]	; (8008900 <vTaskStartScheduler+0xc0>)
 8008870:	4824      	ldr	r0, [pc, #144]	; (8008904 <vTaskStartScheduler+0xc4>)
 8008872:	f7ff fdf9 	bl	8008468 <xTaskCreateStatic>
 8008876:	4603      	mov	r3, r0
 8008878:	4a23      	ldr	r2, [pc, #140]	; (8008908 <vTaskStartScheduler+0xc8>)
 800887a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800887c:	4b22      	ldr	r3, [pc, #136]	; (8008908 <vTaskStartScheduler+0xc8>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008884:	2301      	movs	r3, #1
 8008886:	617b      	str	r3, [r7, #20]
 8008888:	e001      	b.n	800888e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800888a:	2300      	movs	r3, #0
 800888c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d102      	bne.n	800889a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008894:	f000 fd36 	bl	8009304 <xTimerCreateTimerTask>
 8008898:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d11b      	bne.n	80088d8 <vTaskStartScheduler+0x98>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	613b      	str	r3, [r7, #16]
}
 80088b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088b4:	4b15      	ldr	r3, [pc, #84]	; (800890c <vTaskStartScheduler+0xcc>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3354      	adds	r3, #84	; 0x54
 80088ba:	4a15      	ldr	r2, [pc, #84]	; (8008910 <vTaskStartScheduler+0xd0>)
 80088bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088be:	4b15      	ldr	r3, [pc, #84]	; (8008914 <vTaskStartScheduler+0xd4>)
 80088c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088c6:	4b14      	ldr	r3, [pc, #80]	; (8008918 <vTaskStartScheduler+0xd8>)
 80088c8:	2201      	movs	r2, #1
 80088ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088cc:	4b13      	ldr	r3, [pc, #76]	; (800891c <vTaskStartScheduler+0xdc>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088d2:	f001 f8ed 	bl	8009ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088d6:	e00e      	b.n	80088f6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088de:	d10a      	bne.n	80088f6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	60fb      	str	r3, [r7, #12]
}
 80088f2:	bf00      	nop
 80088f4:	e7fe      	b.n	80088f4 <vTaskStartScheduler+0xb4>
}
 80088f6:	bf00      	nop
 80088f8:	3718      	adds	r7, #24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	080184b4 	.word	0x080184b4
 8008904:	08008f91 	.word	0x08008f91
 8008908:	20008420 	.word	0x20008420
 800890c:	20007f28 	.word	0x20007f28
 8008910:	20000110 	.word	0x20000110
 8008914:	2000841c 	.word	0x2000841c
 8008918:	20008408 	.word	0x20008408
 800891c:	20008400 	.word	0x20008400

08008920 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008920:	b480      	push	{r7}
 8008922:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008924:	4b04      	ldr	r3, [pc, #16]	; (8008938 <vTaskSuspendAll+0x18>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3301      	adds	r3, #1
 800892a:	4a03      	ldr	r2, [pc, #12]	; (8008938 <vTaskSuspendAll+0x18>)
 800892c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800892e:	bf00      	nop
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	20008424 	.word	0x20008424

0800893c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008942:	2300      	movs	r3, #0
 8008944:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008946:	2300      	movs	r3, #0
 8008948:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800894a:	4b42      	ldr	r3, [pc, #264]	; (8008a54 <xTaskResumeAll+0x118>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10a      	bne.n	8008968 <xTaskResumeAll+0x2c>
	__asm volatile
 8008952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	603b      	str	r3, [r7, #0]
}
 8008964:	bf00      	nop
 8008966:	e7fe      	b.n	8008966 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008968:	f001 f944 	bl	8009bf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800896c:	4b39      	ldr	r3, [pc, #228]	; (8008a54 <xTaskResumeAll+0x118>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3b01      	subs	r3, #1
 8008972:	4a38      	ldr	r2, [pc, #224]	; (8008a54 <xTaskResumeAll+0x118>)
 8008974:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008976:	4b37      	ldr	r3, [pc, #220]	; (8008a54 <xTaskResumeAll+0x118>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d162      	bne.n	8008a44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800897e:	4b36      	ldr	r3, [pc, #216]	; (8008a58 <xTaskResumeAll+0x11c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d05e      	beq.n	8008a44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008986:	e02f      	b.n	80089e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008988:	4b34      	ldr	r3, [pc, #208]	; (8008a5c <xTaskResumeAll+0x120>)
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	3318      	adds	r3, #24
 8008994:	4618      	mov	r0, r3
 8008996:	f7ff f851 	bl	8007a3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3304      	adds	r3, #4
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff f84c 	bl	8007a3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a8:	4b2d      	ldr	r3, [pc, #180]	; (8008a60 <xTaskResumeAll+0x124>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d903      	bls.n	80089b8 <xTaskResumeAll+0x7c>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b4:	4a2a      	ldr	r2, [pc, #168]	; (8008a60 <xTaskResumeAll+0x124>)
 80089b6:	6013      	str	r3, [r2, #0]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089bc:	4613      	mov	r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	4413      	add	r3, r2
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4a27      	ldr	r2, [pc, #156]	; (8008a64 <xTaskResumeAll+0x128>)
 80089c6:	441a      	add	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	3304      	adds	r3, #4
 80089cc:	4619      	mov	r1, r3
 80089ce:	4610      	mov	r0, r2
 80089d0:	f7fe ffd7 	bl	8007982 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d8:	4b23      	ldr	r3, [pc, #140]	; (8008a68 <xTaskResumeAll+0x12c>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089de:	429a      	cmp	r2, r3
 80089e0:	d302      	bcc.n	80089e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80089e2:	4b22      	ldr	r3, [pc, #136]	; (8008a6c <xTaskResumeAll+0x130>)
 80089e4:	2201      	movs	r2, #1
 80089e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089e8:	4b1c      	ldr	r3, [pc, #112]	; (8008a5c <xTaskResumeAll+0x120>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1cb      	bne.n	8008988 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089f6:	f000 fb85 	bl	8009104 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089fa:	4b1d      	ldr	r3, [pc, #116]	; (8008a70 <xTaskResumeAll+0x134>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d010      	beq.n	8008a28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a06:	f000 f847 	bl	8008a98 <xTaskIncrementTick>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008a10:	4b16      	ldr	r3, [pc, #88]	; (8008a6c <xTaskResumeAll+0x130>)
 8008a12:	2201      	movs	r2, #1
 8008a14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1f1      	bne.n	8008a06 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008a22:	4b13      	ldr	r3, [pc, #76]	; (8008a70 <xTaskResumeAll+0x134>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a28:	4b10      	ldr	r3, [pc, #64]	; (8008a6c <xTaskResumeAll+0x130>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d009      	beq.n	8008a44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a30:	2301      	movs	r3, #1
 8008a32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a34:	4b0f      	ldr	r3, [pc, #60]	; (8008a74 <xTaskResumeAll+0x138>)
 8008a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a3a:	601a      	str	r2, [r3, #0]
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a44:	f001 f906 	bl	8009c54 <vPortExitCritical>

	return xAlreadyYielded;
 8008a48:	68bb      	ldr	r3, [r7, #8]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	20008424 	.word	0x20008424
 8008a58:	200083fc 	.word	0x200083fc
 8008a5c:	200083bc 	.word	0x200083bc
 8008a60:	20008404 	.word	0x20008404
 8008a64:	20007f2c 	.word	0x20007f2c
 8008a68:	20007f28 	.word	0x20007f28
 8008a6c:	20008410 	.word	0x20008410
 8008a70:	2000840c 	.word	0x2000840c
 8008a74:	e000ed04 	.word	0xe000ed04

08008a78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a7e:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <xTaskGetTickCount+0x1c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a84:	687b      	ldr	r3, [r7, #4]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	20008400 	.word	0x20008400

08008a98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aa2:	4b4f      	ldr	r3, [pc, #316]	; (8008be0 <xTaskIncrementTick+0x148>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f040 808f 	bne.w	8008bca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008aac:	4b4d      	ldr	r3, [pc, #308]	; (8008be4 <xTaskIncrementTick+0x14c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ab4:	4a4b      	ldr	r2, [pc, #300]	; (8008be4 <xTaskIncrementTick+0x14c>)
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d120      	bne.n	8008b02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ac0:	4b49      	ldr	r3, [pc, #292]	; (8008be8 <xTaskIncrementTick+0x150>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00a      	beq.n	8008ae0 <xTaskIncrementTick+0x48>
	__asm volatile
 8008aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	603b      	str	r3, [r7, #0]
}
 8008adc:	bf00      	nop
 8008ade:	e7fe      	b.n	8008ade <xTaskIncrementTick+0x46>
 8008ae0:	4b41      	ldr	r3, [pc, #260]	; (8008be8 <xTaskIncrementTick+0x150>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	60fb      	str	r3, [r7, #12]
 8008ae6:	4b41      	ldr	r3, [pc, #260]	; (8008bec <xTaskIncrementTick+0x154>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a3f      	ldr	r2, [pc, #252]	; (8008be8 <xTaskIncrementTick+0x150>)
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	4a3f      	ldr	r2, [pc, #252]	; (8008bec <xTaskIncrementTick+0x154>)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6013      	str	r3, [r2, #0]
 8008af4:	4b3e      	ldr	r3, [pc, #248]	; (8008bf0 <xTaskIncrementTick+0x158>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3301      	adds	r3, #1
 8008afa:	4a3d      	ldr	r2, [pc, #244]	; (8008bf0 <xTaskIncrementTick+0x158>)
 8008afc:	6013      	str	r3, [r2, #0]
 8008afe:	f000 fb01 	bl	8009104 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b02:	4b3c      	ldr	r3, [pc, #240]	; (8008bf4 <xTaskIncrementTick+0x15c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d349      	bcc.n	8008ba0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b0c:	4b36      	ldr	r3, [pc, #216]	; (8008be8 <xTaskIncrementTick+0x150>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d104      	bne.n	8008b20 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b16:	4b37      	ldr	r3, [pc, #220]	; (8008bf4 <xTaskIncrementTick+0x15c>)
 8008b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b1c:	601a      	str	r2, [r3, #0]
					break;
 8008b1e:	e03f      	b.n	8008ba0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b20:	4b31      	ldr	r3, [pc, #196]	; (8008be8 <xTaskIncrementTick+0x150>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b30:	693a      	ldr	r2, [r7, #16]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d203      	bcs.n	8008b40 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b38:	4a2e      	ldr	r2, [pc, #184]	; (8008bf4 <xTaskIncrementTick+0x15c>)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b3e:	e02f      	b.n	8008ba0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	3304      	adds	r3, #4
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fe ff79 	bl	8007a3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d004      	beq.n	8008b5c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	3318      	adds	r3, #24
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fe ff70 	bl	8007a3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b60:	4b25      	ldr	r3, [pc, #148]	; (8008bf8 <xTaskIncrementTick+0x160>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d903      	bls.n	8008b70 <xTaskIncrementTick+0xd8>
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6c:	4a22      	ldr	r2, [pc, #136]	; (8008bf8 <xTaskIncrementTick+0x160>)
 8008b6e:	6013      	str	r3, [r2, #0]
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b74:	4613      	mov	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4a1f      	ldr	r2, [pc, #124]	; (8008bfc <xTaskIncrementTick+0x164>)
 8008b7e:	441a      	add	r2, r3
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	3304      	adds	r3, #4
 8008b84:	4619      	mov	r1, r3
 8008b86:	4610      	mov	r0, r2
 8008b88:	f7fe fefb 	bl	8007982 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b90:	4b1b      	ldr	r3, [pc, #108]	; (8008c00 <xTaskIncrementTick+0x168>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d3b8      	bcc.n	8008b0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b9e:	e7b5      	b.n	8008b0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ba0:	4b17      	ldr	r3, [pc, #92]	; (8008c00 <xTaskIncrementTick+0x168>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba6:	4915      	ldr	r1, [pc, #84]	; (8008bfc <xTaskIncrementTick+0x164>)
 8008ba8:	4613      	mov	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	440b      	add	r3, r1
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d901      	bls.n	8008bbc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008bbc:	4b11      	ldr	r3, [pc, #68]	; (8008c04 <xTaskIncrementTick+0x16c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d007      	beq.n	8008bd4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	617b      	str	r3, [r7, #20]
 8008bc8:	e004      	b.n	8008bd4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008bca:	4b0f      	ldr	r3, [pc, #60]	; (8008c08 <xTaskIncrementTick+0x170>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	4a0d      	ldr	r2, [pc, #52]	; (8008c08 <xTaskIncrementTick+0x170>)
 8008bd2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008bd4:	697b      	ldr	r3, [r7, #20]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3718      	adds	r7, #24
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	20008424 	.word	0x20008424
 8008be4:	20008400 	.word	0x20008400
 8008be8:	200083b4 	.word	0x200083b4
 8008bec:	200083b8 	.word	0x200083b8
 8008bf0:	20008414 	.word	0x20008414
 8008bf4:	2000841c 	.word	0x2000841c
 8008bf8:	20008404 	.word	0x20008404
 8008bfc:	20007f2c 	.word	0x20007f2c
 8008c00:	20007f28 	.word	0x20007f28
 8008c04:	20008410 	.word	0x20008410
 8008c08:	2000840c 	.word	0x2000840c

08008c0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c12:	4b2a      	ldr	r3, [pc, #168]	; (8008cbc <vTaskSwitchContext+0xb0>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c1a:	4b29      	ldr	r3, [pc, #164]	; (8008cc0 <vTaskSwitchContext+0xb4>)
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c20:	e046      	b.n	8008cb0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008c22:	4b27      	ldr	r3, [pc, #156]	; (8008cc0 <vTaskSwitchContext+0xb4>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c28:	4b26      	ldr	r3, [pc, #152]	; (8008cc4 <vTaskSwitchContext+0xb8>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	60fb      	str	r3, [r7, #12]
 8008c2e:	e010      	b.n	8008c52 <vTaskSwitchContext+0x46>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d10a      	bne.n	8008c4c <vTaskSwitchContext+0x40>
	__asm volatile
 8008c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	607b      	str	r3, [r7, #4]
}
 8008c48:	bf00      	nop
 8008c4a:	e7fe      	b.n	8008c4a <vTaskSwitchContext+0x3e>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	60fb      	str	r3, [r7, #12]
 8008c52:	491d      	ldr	r1, [pc, #116]	; (8008cc8 <vTaskSwitchContext+0xbc>)
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	440b      	add	r3, r1
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0e4      	beq.n	8008c30 <vTaskSwitchContext+0x24>
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4a15      	ldr	r2, [pc, #84]	; (8008cc8 <vTaskSwitchContext+0xbc>)
 8008c72:	4413      	add	r3, r2
 8008c74:	60bb      	str	r3, [r7, #8]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	605a      	str	r2, [r3, #4]
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	3308      	adds	r3, #8
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d104      	bne.n	8008c96 <vTaskSwitchContext+0x8a>
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	605a      	str	r2, [r3, #4]
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	4a0b      	ldr	r2, [pc, #44]	; (8008ccc <vTaskSwitchContext+0xc0>)
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	4a08      	ldr	r2, [pc, #32]	; (8008cc4 <vTaskSwitchContext+0xb8>)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ca6:	4b09      	ldr	r3, [pc, #36]	; (8008ccc <vTaskSwitchContext+0xc0>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	3354      	adds	r3, #84	; 0x54
 8008cac:	4a08      	ldr	r2, [pc, #32]	; (8008cd0 <vTaskSwitchContext+0xc4>)
 8008cae:	6013      	str	r3, [r2, #0]
}
 8008cb0:	bf00      	nop
 8008cb2:	3714      	adds	r7, #20
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr
 8008cbc:	20008424 	.word	0x20008424
 8008cc0:	20008410 	.word	0x20008410
 8008cc4:	20008404 	.word	0x20008404
 8008cc8:	20007f2c 	.word	0x20007f2c
 8008ccc:	20007f28 	.word	0x20007f28
 8008cd0:	20000110 	.word	0x20000110

08008cd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10a      	bne.n	8008cfa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	60fb      	str	r3, [r7, #12]
}
 8008cf6:	bf00      	nop
 8008cf8:	e7fe      	b.n	8008cf8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cfa:	4b07      	ldr	r3, [pc, #28]	; (8008d18 <vTaskPlaceOnEventList+0x44>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	3318      	adds	r3, #24
 8008d00:	4619      	mov	r1, r3
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7fe fe61 	bl	80079ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d08:	2101      	movs	r1, #1
 8008d0a:	6838      	ldr	r0, [r7, #0]
 8008d0c:	f000 faa6 	bl	800925c <prvAddCurrentTaskToDelayedList>
}
 8008d10:	bf00      	nop
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	20007f28 	.word	0x20007f28

08008d1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10a      	bne.n	8008d44 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	617b      	str	r3, [r7, #20]
}
 8008d40:	bf00      	nop
 8008d42:	e7fe      	b.n	8008d42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d44:	4b0a      	ldr	r3, [pc, #40]	; (8008d70 <vTaskPlaceOnEventListRestricted+0x54>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	3318      	adds	r3, #24
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f7fe fe18 	bl	8007982 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d002      	beq.n	8008d5e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d5e:	6879      	ldr	r1, [r7, #4]
 8008d60:	68b8      	ldr	r0, [r7, #8]
 8008d62:	f000 fa7b 	bl	800925c <prvAddCurrentTaskToDelayedList>
	}
 8008d66:	bf00      	nop
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	20007f28 	.word	0x20007f28

08008d74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10a      	bne.n	8008da0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	60fb      	str	r3, [r7, #12]
}
 8008d9c:	bf00      	nop
 8008d9e:	e7fe      	b.n	8008d9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	3318      	adds	r3, #24
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fe fe49 	bl	8007a3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008daa:	4b1e      	ldr	r3, [pc, #120]	; (8008e24 <xTaskRemoveFromEventList+0xb0>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d11d      	bne.n	8008dee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	3304      	adds	r3, #4
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fe fe40 	bl	8007a3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc0:	4b19      	ldr	r3, [pc, #100]	; (8008e28 <xTaskRemoveFromEventList+0xb4>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d903      	bls.n	8008dd0 <xTaskRemoveFromEventList+0x5c>
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dcc:	4a16      	ldr	r2, [pc, #88]	; (8008e28 <xTaskRemoveFromEventList+0xb4>)
 8008dce:	6013      	str	r3, [r2, #0]
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4a13      	ldr	r2, [pc, #76]	; (8008e2c <xTaskRemoveFromEventList+0xb8>)
 8008dde:	441a      	add	r2, r3
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	3304      	adds	r3, #4
 8008de4:	4619      	mov	r1, r3
 8008de6:	4610      	mov	r0, r2
 8008de8:	f7fe fdcb 	bl	8007982 <vListInsertEnd>
 8008dec:	e005      	b.n	8008dfa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	3318      	adds	r3, #24
 8008df2:	4619      	mov	r1, r3
 8008df4:	480e      	ldr	r0, [pc, #56]	; (8008e30 <xTaskRemoveFromEventList+0xbc>)
 8008df6:	f7fe fdc4 	bl	8007982 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dfe:	4b0d      	ldr	r3, [pc, #52]	; (8008e34 <xTaskRemoveFromEventList+0xc0>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d905      	bls.n	8008e14 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e0c:	4b0a      	ldr	r3, [pc, #40]	; (8008e38 <xTaskRemoveFromEventList+0xc4>)
 8008e0e:	2201      	movs	r2, #1
 8008e10:	601a      	str	r2, [r3, #0]
 8008e12:	e001      	b.n	8008e18 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008e14:	2300      	movs	r3, #0
 8008e16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e18:	697b      	ldr	r3, [r7, #20]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3718      	adds	r7, #24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	20008424 	.word	0x20008424
 8008e28:	20008404 	.word	0x20008404
 8008e2c:	20007f2c 	.word	0x20007f2c
 8008e30:	200083bc 	.word	0x200083bc
 8008e34:	20007f28 	.word	0x20007f28
 8008e38:	20008410 	.word	0x20008410

08008e3c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10a      	bne.n	8008e60 <vTaskSetTimeOutState+0x24>
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	60fb      	str	r3, [r7, #12]
}
 8008e5c:	bf00      	nop
 8008e5e:	e7fe      	b.n	8008e5e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008e60:	f000 fec8 	bl	8009bf4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e64:	4b06      	ldr	r3, [pc, #24]	; (8008e80 <vTaskSetTimeOutState+0x44>)
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008e6c:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <vTaskSetTimeOutState+0x48>)
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008e74:	f000 feee 	bl	8009c54 <vPortExitCritical>
}
 8008e78:	bf00      	nop
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	20008414 	.word	0x20008414
 8008e84:	20008400 	.word	0x20008400

08008e88 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e90:	4b06      	ldr	r3, [pc, #24]	; (8008eac <vTaskInternalSetTimeOutState+0x24>)
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e98:	4b05      	ldr	r3, [pc, #20]	; (8008eb0 <vTaskInternalSetTimeOutState+0x28>)
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	605a      	str	r2, [r3, #4]
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	20008414 	.word	0x20008414
 8008eb0:	20008400 	.word	0x20008400

08008eb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b088      	sub	sp, #32
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10a      	bne.n	8008eda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	613b      	str	r3, [r7, #16]
}
 8008ed6:	bf00      	nop
 8008ed8:	e7fe      	b.n	8008ed8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d10a      	bne.n	8008ef6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	60fb      	str	r3, [r7, #12]
}
 8008ef2:	bf00      	nop
 8008ef4:	e7fe      	b.n	8008ef4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008ef6:	f000 fe7d 	bl	8009bf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008efa:	4b1d      	ldr	r3, [pc, #116]	; (8008f70 <xTaskCheckForTimeOut+0xbc>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	69ba      	ldr	r2, [r7, #24]
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f12:	d102      	bne.n	8008f1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f14:	2300      	movs	r3, #0
 8008f16:	61fb      	str	r3, [r7, #28]
 8008f18:	e023      	b.n	8008f62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	4b15      	ldr	r3, [pc, #84]	; (8008f74 <xTaskCheckForTimeOut+0xc0>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d007      	beq.n	8008f36 <xTaskCheckForTimeOut+0x82>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	69ba      	ldr	r2, [r7, #24]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d302      	bcc.n	8008f36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f30:	2301      	movs	r3, #1
 8008f32:	61fb      	str	r3, [r7, #28]
 8008f34:	e015      	b.n	8008f62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	697a      	ldr	r2, [r7, #20]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d20b      	bcs.n	8008f58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	1ad2      	subs	r2, r2, r3
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7ff ff9b 	bl	8008e88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f52:	2300      	movs	r3, #0
 8008f54:	61fb      	str	r3, [r7, #28]
 8008f56:	e004      	b.n	8008f62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f62:	f000 fe77 	bl	8009c54 <vPortExitCritical>

	return xReturn;
 8008f66:	69fb      	ldr	r3, [r7, #28]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3720      	adds	r7, #32
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	20008400 	.word	0x20008400
 8008f74:	20008414 	.word	0x20008414

08008f78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f78:	b480      	push	{r7}
 8008f7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f7c:	4b03      	ldr	r3, [pc, #12]	; (8008f8c <vTaskMissedYield+0x14>)
 8008f7e:	2201      	movs	r2, #1
 8008f80:	601a      	str	r2, [r3, #0]
}
 8008f82:	bf00      	nop
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	20008410 	.word	0x20008410

08008f90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f98:	f000 f852 	bl	8009040 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f9c:	4b06      	ldr	r3, [pc, #24]	; (8008fb8 <prvIdleTask+0x28>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d9f9      	bls.n	8008f98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008fa4:	4b05      	ldr	r3, [pc, #20]	; (8008fbc <prvIdleTask+0x2c>)
 8008fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008faa:	601a      	str	r2, [r3, #0]
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008fb4:	e7f0      	b.n	8008f98 <prvIdleTask+0x8>
 8008fb6:	bf00      	nop
 8008fb8:	20007f2c 	.word	0x20007f2c
 8008fbc:	e000ed04 	.word	0xe000ed04

08008fc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	607b      	str	r3, [r7, #4]
 8008fca:	e00c      	b.n	8008fe6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4a12      	ldr	r2, [pc, #72]	; (8009020 <prvInitialiseTaskLists+0x60>)
 8008fd8:	4413      	add	r3, r2
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fe fca4 	bl	8007928 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	607b      	str	r3, [r7, #4]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2b37      	cmp	r3, #55	; 0x37
 8008fea:	d9ef      	bls.n	8008fcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fec:	480d      	ldr	r0, [pc, #52]	; (8009024 <prvInitialiseTaskLists+0x64>)
 8008fee:	f7fe fc9b 	bl	8007928 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ff2:	480d      	ldr	r0, [pc, #52]	; (8009028 <prvInitialiseTaskLists+0x68>)
 8008ff4:	f7fe fc98 	bl	8007928 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ff8:	480c      	ldr	r0, [pc, #48]	; (800902c <prvInitialiseTaskLists+0x6c>)
 8008ffa:	f7fe fc95 	bl	8007928 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ffe:	480c      	ldr	r0, [pc, #48]	; (8009030 <prvInitialiseTaskLists+0x70>)
 8009000:	f7fe fc92 	bl	8007928 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009004:	480b      	ldr	r0, [pc, #44]	; (8009034 <prvInitialiseTaskLists+0x74>)
 8009006:	f7fe fc8f 	bl	8007928 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800900a:	4b0b      	ldr	r3, [pc, #44]	; (8009038 <prvInitialiseTaskLists+0x78>)
 800900c:	4a05      	ldr	r2, [pc, #20]	; (8009024 <prvInitialiseTaskLists+0x64>)
 800900e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009010:	4b0a      	ldr	r3, [pc, #40]	; (800903c <prvInitialiseTaskLists+0x7c>)
 8009012:	4a05      	ldr	r2, [pc, #20]	; (8009028 <prvInitialiseTaskLists+0x68>)
 8009014:	601a      	str	r2, [r3, #0]
}
 8009016:	bf00      	nop
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	20007f2c 	.word	0x20007f2c
 8009024:	2000838c 	.word	0x2000838c
 8009028:	200083a0 	.word	0x200083a0
 800902c:	200083bc 	.word	0x200083bc
 8009030:	200083d0 	.word	0x200083d0
 8009034:	200083e8 	.word	0x200083e8
 8009038:	200083b4 	.word	0x200083b4
 800903c:	200083b8 	.word	0x200083b8

08009040 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009046:	e019      	b.n	800907c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009048:	f000 fdd4 	bl	8009bf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800904c:	4b10      	ldr	r3, [pc, #64]	; (8009090 <prvCheckTasksWaitingTermination+0x50>)
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	3304      	adds	r3, #4
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe fcef 	bl	8007a3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800905e:	4b0d      	ldr	r3, [pc, #52]	; (8009094 <prvCheckTasksWaitingTermination+0x54>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3b01      	subs	r3, #1
 8009064:	4a0b      	ldr	r2, [pc, #44]	; (8009094 <prvCheckTasksWaitingTermination+0x54>)
 8009066:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009068:	4b0b      	ldr	r3, [pc, #44]	; (8009098 <prvCheckTasksWaitingTermination+0x58>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	3b01      	subs	r3, #1
 800906e:	4a0a      	ldr	r2, [pc, #40]	; (8009098 <prvCheckTasksWaitingTermination+0x58>)
 8009070:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009072:	f000 fdef 	bl	8009c54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f810 	bl	800909c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800907c:	4b06      	ldr	r3, [pc, #24]	; (8009098 <prvCheckTasksWaitingTermination+0x58>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1e1      	bne.n	8009048 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009084:	bf00      	nop
 8009086:	bf00      	nop
 8009088:	3708      	adds	r7, #8
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	200083d0 	.word	0x200083d0
 8009094:	200083fc 	.word	0x200083fc
 8009098:	200083e4 	.word	0x200083e4

0800909c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3354      	adds	r3, #84	; 0x54
 80090a8:	4618      	mov	r0, r3
 80090aa:	f00e f9fb 	bl	80174a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d108      	bne.n	80090ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090bc:	4618      	mov	r0, r3
 80090be:	f000 ff87 	bl	8009fd0 <vPortFree>
				vPortFree( pxTCB );
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 ff84 	bl	8009fd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090c8:	e018      	b.n	80090fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d103      	bne.n	80090dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 ff7b 	bl	8009fd0 <vPortFree>
	}
 80090da:	e00f      	b.n	80090fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d00a      	beq.n	80090fc <prvDeleteTCB+0x60>
	__asm volatile
 80090e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	60fb      	str	r3, [r7, #12]
}
 80090f8:	bf00      	nop
 80090fa:	e7fe      	b.n	80090fa <prvDeleteTCB+0x5e>
	}
 80090fc:	bf00      	nop
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800910a:	4b0c      	ldr	r3, [pc, #48]	; (800913c <prvResetNextTaskUnblockTime+0x38>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d104      	bne.n	800911e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009114:	4b0a      	ldr	r3, [pc, #40]	; (8009140 <prvResetNextTaskUnblockTime+0x3c>)
 8009116:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800911a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800911c:	e008      	b.n	8009130 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800911e:	4b07      	ldr	r3, [pc, #28]	; (800913c <prvResetNextTaskUnblockTime+0x38>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	4a04      	ldr	r2, [pc, #16]	; (8009140 <prvResetNextTaskUnblockTime+0x3c>)
 800912e:	6013      	str	r3, [r2, #0]
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	200083b4 	.word	0x200083b4
 8009140:	2000841c 	.word	0x2000841c

08009144 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800914a:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <xTaskGetSchedulerState+0x34>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d102      	bne.n	8009158 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009152:	2301      	movs	r3, #1
 8009154:	607b      	str	r3, [r7, #4]
 8009156:	e008      	b.n	800916a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009158:	4b08      	ldr	r3, [pc, #32]	; (800917c <xTaskGetSchedulerState+0x38>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d102      	bne.n	8009166 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009160:	2302      	movs	r3, #2
 8009162:	607b      	str	r3, [r7, #4]
 8009164:	e001      	b.n	800916a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009166:	2300      	movs	r3, #0
 8009168:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800916a:	687b      	ldr	r3, [r7, #4]
	}
 800916c:	4618      	mov	r0, r3
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	20008408 	.word	0x20008408
 800917c:	20008424 	.word	0x20008424

08009180 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800918c:	2300      	movs	r3, #0
 800918e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d056      	beq.n	8009244 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009196:	4b2e      	ldr	r3, [pc, #184]	; (8009250 <xTaskPriorityDisinherit+0xd0>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	429a      	cmp	r2, r3
 800919e:	d00a      	beq.n	80091b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80091a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a4:	f383 8811 	msr	BASEPRI, r3
 80091a8:	f3bf 8f6f 	isb	sy
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	60fb      	str	r3, [r7, #12]
}
 80091b2:	bf00      	nop
 80091b4:	e7fe      	b.n	80091b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10a      	bne.n	80091d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	60bb      	str	r3, [r7, #8]
}
 80091d0:	bf00      	nop
 80091d2:	e7fe      	b.n	80091d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d8:	1e5a      	subs	r2, r3, #1
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d02c      	beq.n	8009244 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d128      	bne.n	8009244 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	3304      	adds	r3, #4
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe fc20 	bl	8007a3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009208:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009214:	4b0f      	ldr	r3, [pc, #60]	; (8009254 <xTaskPriorityDisinherit+0xd4>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	429a      	cmp	r2, r3
 800921a:	d903      	bls.n	8009224 <xTaskPriorityDisinherit+0xa4>
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	4a0c      	ldr	r2, [pc, #48]	; (8009254 <xTaskPriorityDisinherit+0xd4>)
 8009222:	6013      	str	r3, [r2, #0]
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009228:	4613      	mov	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4413      	add	r3, r2
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	4a09      	ldr	r2, [pc, #36]	; (8009258 <xTaskPriorityDisinherit+0xd8>)
 8009232:	441a      	add	r2, r3
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	3304      	adds	r3, #4
 8009238:	4619      	mov	r1, r3
 800923a:	4610      	mov	r0, r2
 800923c:	f7fe fba1 	bl	8007982 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009240:	2301      	movs	r3, #1
 8009242:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009244:	697b      	ldr	r3, [r7, #20]
	}
 8009246:	4618      	mov	r0, r3
 8009248:	3718      	adds	r7, #24
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	20007f28 	.word	0x20007f28
 8009254:	20008404 	.word	0x20008404
 8009258:	20007f2c 	.word	0x20007f2c

0800925c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009266:	4b21      	ldr	r3, [pc, #132]	; (80092ec <prvAddCurrentTaskToDelayedList+0x90>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800926c:	4b20      	ldr	r3, [pc, #128]	; (80092f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	3304      	adds	r3, #4
 8009272:	4618      	mov	r0, r3
 8009274:	f7fe fbe2 	bl	8007a3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800927e:	d10a      	bne.n	8009296 <prvAddCurrentTaskToDelayedList+0x3a>
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d007      	beq.n	8009296 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009286:	4b1a      	ldr	r3, [pc, #104]	; (80092f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3304      	adds	r3, #4
 800928c:	4619      	mov	r1, r3
 800928e:	4819      	ldr	r0, [pc, #100]	; (80092f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009290:	f7fe fb77 	bl	8007982 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009294:	e026      	b.n	80092e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4413      	add	r3, r2
 800929c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800929e:	4b14      	ldr	r3, [pc, #80]	; (80092f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d209      	bcs.n	80092c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092ae:	4b12      	ldr	r3, [pc, #72]	; (80092f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	4b0f      	ldr	r3, [pc, #60]	; (80092f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	3304      	adds	r3, #4
 80092b8:	4619      	mov	r1, r3
 80092ba:	4610      	mov	r0, r2
 80092bc:	f7fe fb85 	bl	80079ca <vListInsert>
}
 80092c0:	e010      	b.n	80092e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092c2:	4b0e      	ldr	r3, [pc, #56]	; (80092fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	4b0a      	ldr	r3, [pc, #40]	; (80092f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3304      	adds	r3, #4
 80092cc:	4619      	mov	r1, r3
 80092ce:	4610      	mov	r0, r2
 80092d0:	f7fe fb7b 	bl	80079ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80092d4:	4b0a      	ldr	r3, [pc, #40]	; (8009300 <prvAddCurrentTaskToDelayedList+0xa4>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68ba      	ldr	r2, [r7, #8]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d202      	bcs.n	80092e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80092de:	4a08      	ldr	r2, [pc, #32]	; (8009300 <prvAddCurrentTaskToDelayedList+0xa4>)
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	6013      	str	r3, [r2, #0]
}
 80092e4:	bf00      	nop
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	20008400 	.word	0x20008400
 80092f0:	20007f28 	.word	0x20007f28
 80092f4:	200083e8 	.word	0x200083e8
 80092f8:	200083b8 	.word	0x200083b8
 80092fc:	200083b4 	.word	0x200083b4
 8009300:	2000841c 	.word	0x2000841c

08009304 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b08a      	sub	sp, #40	; 0x28
 8009308:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800930a:	2300      	movs	r3, #0
 800930c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800930e:	f000 fb07 	bl	8009920 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009312:	4b1c      	ldr	r3, [pc, #112]	; (8009384 <xTimerCreateTimerTask+0x80>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d021      	beq.n	800935e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800931a:	2300      	movs	r3, #0
 800931c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800931e:	2300      	movs	r3, #0
 8009320:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009322:	1d3a      	adds	r2, r7, #4
 8009324:	f107 0108 	add.w	r1, r7, #8
 8009328:	f107 030c 	add.w	r3, r7, #12
 800932c:	4618      	mov	r0, r3
 800932e:	f7fe fae1 	bl	80078f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009332:	6879      	ldr	r1, [r7, #4]
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	9202      	str	r2, [sp, #8]
 800933a:	9301      	str	r3, [sp, #4]
 800933c:	2302      	movs	r3, #2
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	2300      	movs	r3, #0
 8009342:	460a      	mov	r2, r1
 8009344:	4910      	ldr	r1, [pc, #64]	; (8009388 <xTimerCreateTimerTask+0x84>)
 8009346:	4811      	ldr	r0, [pc, #68]	; (800938c <xTimerCreateTimerTask+0x88>)
 8009348:	f7ff f88e 	bl	8008468 <xTaskCreateStatic>
 800934c:	4603      	mov	r3, r0
 800934e:	4a10      	ldr	r2, [pc, #64]	; (8009390 <xTimerCreateTimerTask+0x8c>)
 8009350:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009352:	4b0f      	ldr	r3, [pc, #60]	; (8009390 <xTimerCreateTimerTask+0x8c>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d001      	beq.n	800935e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800935a:	2301      	movs	r3, #1
 800935c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10a      	bne.n	800937a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	613b      	str	r3, [r7, #16]
}
 8009376:	bf00      	nop
 8009378:	e7fe      	b.n	8009378 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800937a:	697b      	ldr	r3, [r7, #20]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3718      	adds	r7, #24
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	20008458 	.word	0x20008458
 8009388:	080184bc 	.word	0x080184bc
 800938c:	080094c9 	.word	0x080094c9
 8009390:	2000845c 	.word	0x2000845c

08009394 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b08a      	sub	sp, #40	; 0x28
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
 80093a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80093a2:	2300      	movs	r3, #0
 80093a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10a      	bne.n	80093c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	623b      	str	r3, [r7, #32]
}
 80093be:	bf00      	nop
 80093c0:	e7fe      	b.n	80093c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80093c2:	4b1a      	ldr	r3, [pc, #104]	; (800942c <xTimerGenericCommand+0x98>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d02a      	beq.n	8009420 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	2b05      	cmp	r3, #5
 80093da:	dc18      	bgt.n	800940e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80093dc:	f7ff feb2 	bl	8009144 <xTaskGetSchedulerState>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d109      	bne.n	80093fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80093e6:	4b11      	ldr	r3, [pc, #68]	; (800942c <xTimerGenericCommand+0x98>)
 80093e8:	6818      	ldr	r0, [r3, #0]
 80093ea:	f107 0110 	add.w	r1, r7, #16
 80093ee:	2300      	movs	r3, #0
 80093f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093f2:	f7fe fc51 	bl	8007c98 <xQueueGenericSend>
 80093f6:	6278      	str	r0, [r7, #36]	; 0x24
 80093f8:	e012      	b.n	8009420 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80093fa:	4b0c      	ldr	r3, [pc, #48]	; (800942c <xTimerGenericCommand+0x98>)
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	f107 0110 	add.w	r1, r7, #16
 8009402:	2300      	movs	r3, #0
 8009404:	2200      	movs	r2, #0
 8009406:	f7fe fc47 	bl	8007c98 <xQueueGenericSend>
 800940a:	6278      	str	r0, [r7, #36]	; 0x24
 800940c:	e008      	b.n	8009420 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800940e:	4b07      	ldr	r3, [pc, #28]	; (800942c <xTimerGenericCommand+0x98>)
 8009410:	6818      	ldr	r0, [r3, #0]
 8009412:	f107 0110 	add.w	r1, r7, #16
 8009416:	2300      	movs	r3, #0
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	f7fe fd3b 	bl	8007e94 <xQueueGenericSendFromISR>
 800941e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009422:	4618      	mov	r0, r3
 8009424:	3728      	adds	r7, #40	; 0x28
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	20008458 	.word	0x20008458

08009430 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b088      	sub	sp, #32
 8009434:	af02      	add	r7, sp, #8
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800943a:	4b22      	ldr	r3, [pc, #136]	; (80094c4 <prvProcessExpiredTimer+0x94>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	3304      	adds	r3, #4
 8009448:	4618      	mov	r0, r3
 800944a:	f7fe faf7 	bl	8007a3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009454:	f003 0304 	and.w	r3, r3, #4
 8009458:	2b00      	cmp	r3, #0
 800945a:	d022      	beq.n	80094a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	699a      	ldr	r2, [r3, #24]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	18d1      	adds	r1, r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	683a      	ldr	r2, [r7, #0]
 8009468:	6978      	ldr	r0, [r7, #20]
 800946a:	f000 f8d1 	bl	8009610 <prvInsertTimerInActiveList>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d01f      	beq.n	80094b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009474:	2300      	movs	r3, #0
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	2300      	movs	r3, #0
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	2100      	movs	r1, #0
 800947e:	6978      	ldr	r0, [r7, #20]
 8009480:	f7ff ff88 	bl	8009394 <xTimerGenericCommand>
 8009484:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d113      	bne.n	80094b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800948c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009490:	f383 8811 	msr	BASEPRI, r3
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	60fb      	str	r3, [r7, #12]
}
 800949e:	bf00      	nop
 80094a0:	e7fe      	b.n	80094a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094a8:	f023 0301 	bic.w	r3, r3, #1
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	6a1b      	ldr	r3, [r3, #32]
 80094b8:	6978      	ldr	r0, [r7, #20]
 80094ba:	4798      	blx	r3
}
 80094bc:	bf00      	nop
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	20008450 	.word	0x20008450

080094c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094d0:	f107 0308 	add.w	r3, r7, #8
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 f857 	bl	8009588 <prvGetNextExpireTime>
 80094da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	4619      	mov	r1, r3
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f000 f803 	bl	80094ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80094e6:	f000 f8d5 	bl	8009694 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094ea:	e7f1      	b.n	80094d0 <prvTimerTask+0x8>

080094ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80094f6:	f7ff fa13 	bl	8008920 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094fa:	f107 0308 	add.w	r3, r7, #8
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 f866 	bl	80095d0 <prvSampleTimeNow>
 8009504:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d130      	bne.n	800956e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10a      	bne.n	8009528 <prvProcessTimerOrBlockTask+0x3c>
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	429a      	cmp	r2, r3
 8009518:	d806      	bhi.n	8009528 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800951a:	f7ff fa0f 	bl	800893c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800951e:	68f9      	ldr	r1, [r7, #12]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f7ff ff85 	bl	8009430 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009526:	e024      	b.n	8009572 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d008      	beq.n	8009540 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800952e:	4b13      	ldr	r3, [pc, #76]	; (800957c <prvProcessTimerOrBlockTask+0x90>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d101      	bne.n	800953c <prvProcessTimerOrBlockTask+0x50>
 8009538:	2301      	movs	r3, #1
 800953a:	e000      	b.n	800953e <prvProcessTimerOrBlockTask+0x52>
 800953c:	2300      	movs	r3, #0
 800953e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009540:	4b0f      	ldr	r3, [pc, #60]	; (8009580 <prvProcessTimerOrBlockTask+0x94>)
 8009542:	6818      	ldr	r0, [r3, #0]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	1ad3      	subs	r3, r2, r3
 800954a:	683a      	ldr	r2, [r7, #0]
 800954c:	4619      	mov	r1, r3
 800954e:	f7fe ff57 	bl	8008400 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009552:	f7ff f9f3 	bl	800893c <xTaskResumeAll>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10a      	bne.n	8009572 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800955c:	4b09      	ldr	r3, [pc, #36]	; (8009584 <prvProcessTimerOrBlockTask+0x98>)
 800955e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009562:	601a      	str	r2, [r3, #0]
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	f3bf 8f6f 	isb	sy
}
 800956c:	e001      	b.n	8009572 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800956e:	f7ff f9e5 	bl	800893c <xTaskResumeAll>
}
 8009572:	bf00      	nop
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	20008454 	.word	0x20008454
 8009580:	20008458 	.word	0x20008458
 8009584:	e000ed04 	.word	0xe000ed04

08009588 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009590:	4b0e      	ldr	r3, [pc, #56]	; (80095cc <prvGetNextExpireTime+0x44>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d101      	bne.n	800959e <prvGetNextExpireTime+0x16>
 800959a:	2201      	movs	r2, #1
 800959c:	e000      	b.n	80095a0 <prvGetNextExpireTime+0x18>
 800959e:	2200      	movs	r2, #0
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d105      	bne.n	80095b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095ac:	4b07      	ldr	r3, [pc, #28]	; (80095cc <prvGetNextExpireTime+0x44>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	60fb      	str	r3, [r7, #12]
 80095b6:	e001      	b.n	80095bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80095b8:	2300      	movs	r3, #0
 80095ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80095bc:	68fb      	ldr	r3, [r7, #12]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	20008450 	.word	0x20008450

080095d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80095d8:	f7ff fa4e 	bl	8008a78 <xTaskGetTickCount>
 80095dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80095de:	4b0b      	ldr	r3, [pc, #44]	; (800960c <prvSampleTimeNow+0x3c>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d205      	bcs.n	80095f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80095e8:	f000 f936 	bl	8009858 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	e002      	b.n	80095fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80095fa:	4a04      	ldr	r2, [pc, #16]	; (800960c <prvSampleTimeNow+0x3c>)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009600:	68fb      	ldr	r3, [r7, #12]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	20008460 	.word	0x20008460

08009610 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
 800961c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800961e:	2300      	movs	r3, #0
 8009620:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	429a      	cmp	r2, r3
 8009634:	d812      	bhi.n	800965c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	1ad2      	subs	r2, r2, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	429a      	cmp	r2, r3
 8009642:	d302      	bcc.n	800964a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009644:	2301      	movs	r3, #1
 8009646:	617b      	str	r3, [r7, #20]
 8009648:	e01b      	b.n	8009682 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800964a:	4b10      	ldr	r3, [pc, #64]	; (800968c <prvInsertTimerInActiveList+0x7c>)
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	3304      	adds	r3, #4
 8009652:	4619      	mov	r1, r3
 8009654:	4610      	mov	r0, r2
 8009656:	f7fe f9b8 	bl	80079ca <vListInsert>
 800965a:	e012      	b.n	8009682 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	429a      	cmp	r2, r3
 8009662:	d206      	bcs.n	8009672 <prvInsertTimerInActiveList+0x62>
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	429a      	cmp	r2, r3
 800966a:	d302      	bcc.n	8009672 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800966c:	2301      	movs	r3, #1
 800966e:	617b      	str	r3, [r7, #20]
 8009670:	e007      	b.n	8009682 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009672:	4b07      	ldr	r3, [pc, #28]	; (8009690 <prvInsertTimerInActiveList+0x80>)
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	3304      	adds	r3, #4
 800967a:	4619      	mov	r1, r3
 800967c:	4610      	mov	r0, r2
 800967e:	f7fe f9a4 	bl	80079ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009682:	697b      	ldr	r3, [r7, #20]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	20008454 	.word	0x20008454
 8009690:	20008450 	.word	0x20008450

08009694 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b08e      	sub	sp, #56	; 0x38
 8009698:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800969a:	e0ca      	b.n	8009832 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	da18      	bge.n	80096d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80096a2:	1d3b      	adds	r3, r7, #4
 80096a4:	3304      	adds	r3, #4
 80096a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80096a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10a      	bne.n	80096c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80096ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	61fb      	str	r3, [r7, #28]
}
 80096c0:	bf00      	nop
 80096c2:	e7fe      	b.n	80096c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80096c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096ca:	6850      	ldr	r0, [r2, #4]
 80096cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096ce:	6892      	ldr	r2, [r2, #8]
 80096d0:	4611      	mov	r1, r2
 80096d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f2c0 80ab 	blt.w	8009832 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80096e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e2:	695b      	ldr	r3, [r3, #20]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d004      	beq.n	80096f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ea:	3304      	adds	r3, #4
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fe f9a5 	bl	8007a3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096f2:	463b      	mov	r3, r7
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7ff ff6b 	bl	80095d0 <prvSampleTimeNow>
 80096fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b09      	cmp	r3, #9
 8009700:	f200 8096 	bhi.w	8009830 <prvProcessReceivedCommands+0x19c>
 8009704:	a201      	add	r2, pc, #4	; (adr r2, 800970c <prvProcessReceivedCommands+0x78>)
 8009706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970a:	bf00      	nop
 800970c:	08009735 	.word	0x08009735
 8009710:	08009735 	.word	0x08009735
 8009714:	08009735 	.word	0x08009735
 8009718:	080097a9 	.word	0x080097a9
 800971c:	080097bd 	.word	0x080097bd
 8009720:	08009807 	.word	0x08009807
 8009724:	08009735 	.word	0x08009735
 8009728:	08009735 	.word	0x08009735
 800972c:	080097a9 	.word	0x080097a9
 8009730:	080097bd 	.word	0x080097bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800973a:	f043 0301 	orr.w	r3, r3, #1
 800973e:	b2da      	uxtb	r2, r3
 8009740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	18d1      	adds	r1, r2, r3
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009754:	f7ff ff5c 	bl	8009610 <prvInsertTimerInActiveList>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d069      	beq.n	8009832 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800975e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009764:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800976c:	f003 0304 	and.w	r3, r3, #4
 8009770:	2b00      	cmp	r3, #0
 8009772:	d05e      	beq.n	8009832 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009774:	68ba      	ldr	r2, [r7, #8]
 8009776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009778:	699b      	ldr	r3, [r3, #24]
 800977a:	441a      	add	r2, r3
 800977c:	2300      	movs	r3, #0
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	2300      	movs	r3, #0
 8009782:	2100      	movs	r1, #0
 8009784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009786:	f7ff fe05 	bl	8009394 <xTimerGenericCommand>
 800978a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800978c:	6a3b      	ldr	r3, [r7, #32]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d14f      	bne.n	8009832 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	61bb      	str	r3, [r7, #24]
}
 80097a4:	bf00      	nop
 80097a6:	e7fe      	b.n	80097a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097ae:	f023 0301 	bic.w	r3, r3, #1
 80097b2:	b2da      	uxtb	r2, r3
 80097b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80097ba:	e03a      	b.n	8009832 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097c2:	f043 0301 	orr.w	r3, r3, #1
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80097d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10a      	bne.n	80097f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	617b      	str	r3, [r7, #20]
}
 80097ee:	bf00      	nop
 80097f0:	e7fe      	b.n	80097f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80097f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f4:	699a      	ldr	r2, [r3, #24]
 80097f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f8:	18d1      	adds	r1, r2, r3
 80097fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009800:	f7ff ff06 	bl	8009610 <prvInsertTimerInActiveList>
					break;
 8009804:	e015      	b.n	8009832 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800980c:	f003 0302 	and.w	r3, r3, #2
 8009810:	2b00      	cmp	r3, #0
 8009812:	d103      	bne.n	800981c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009816:	f000 fbdb 	bl	8009fd0 <vPortFree>
 800981a:	e00a      	b.n	8009832 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009822:	f023 0301 	bic.w	r3, r3, #1
 8009826:	b2da      	uxtb	r2, r3
 8009828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800982e:	e000      	b.n	8009832 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009830:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009832:	4b08      	ldr	r3, [pc, #32]	; (8009854 <prvProcessReceivedCommands+0x1c0>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	1d39      	adds	r1, r7, #4
 8009838:	2200      	movs	r2, #0
 800983a:	4618      	mov	r0, r3
 800983c:	f7fe fbc6 	bl	8007fcc <xQueueReceive>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	f47f af2a 	bne.w	800969c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009848:	bf00      	nop
 800984a:	bf00      	nop
 800984c:	3730      	adds	r7, #48	; 0x30
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	20008458 	.word	0x20008458

08009858 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b088      	sub	sp, #32
 800985c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800985e:	e048      	b.n	80098f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009860:	4b2d      	ldr	r3, [pc, #180]	; (8009918 <prvSwitchTimerLists+0xc0>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800986a:	4b2b      	ldr	r3, [pc, #172]	; (8009918 <prvSwitchTimerLists+0xc0>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	3304      	adds	r3, #4
 8009878:	4618      	mov	r0, r3
 800987a:	f7fe f8df 	bl	8007a3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6a1b      	ldr	r3, [r3, #32]
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800988c:	f003 0304 	and.w	r3, r3, #4
 8009890:	2b00      	cmp	r3, #0
 8009892:	d02e      	beq.n	80098f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	699b      	ldr	r3, [r3, #24]
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	4413      	add	r3, r2
 800989c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d90e      	bls.n	80098c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098b2:	4b19      	ldr	r3, [pc, #100]	; (8009918 <prvSwitchTimerLists+0xc0>)
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3304      	adds	r3, #4
 80098ba:	4619      	mov	r1, r3
 80098bc:	4610      	mov	r0, r2
 80098be:	f7fe f884 	bl	80079ca <vListInsert>
 80098c2:	e016      	b.n	80098f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098c4:	2300      	movs	r3, #0
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	2300      	movs	r3, #0
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	2100      	movs	r1, #0
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f7ff fd60 	bl	8009394 <xTimerGenericCommand>
 80098d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d10a      	bne.n	80098f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80098dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e0:	f383 8811 	msr	BASEPRI, r3
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	603b      	str	r3, [r7, #0]
}
 80098ee:	bf00      	nop
 80098f0:	e7fe      	b.n	80098f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098f2:	4b09      	ldr	r3, [pc, #36]	; (8009918 <prvSwitchTimerLists+0xc0>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1b1      	bne.n	8009860 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80098fc:	4b06      	ldr	r3, [pc, #24]	; (8009918 <prvSwitchTimerLists+0xc0>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009902:	4b06      	ldr	r3, [pc, #24]	; (800991c <prvSwitchTimerLists+0xc4>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a04      	ldr	r2, [pc, #16]	; (8009918 <prvSwitchTimerLists+0xc0>)
 8009908:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800990a:	4a04      	ldr	r2, [pc, #16]	; (800991c <prvSwitchTimerLists+0xc4>)
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	6013      	str	r3, [r2, #0]
}
 8009910:	bf00      	nop
 8009912:	3718      	adds	r7, #24
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	20008450 	.word	0x20008450
 800991c:	20008454 	.word	0x20008454

08009920 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009926:	f000 f965 	bl	8009bf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800992a:	4b15      	ldr	r3, [pc, #84]	; (8009980 <prvCheckForValidListAndQueue+0x60>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d120      	bne.n	8009974 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009932:	4814      	ldr	r0, [pc, #80]	; (8009984 <prvCheckForValidListAndQueue+0x64>)
 8009934:	f7fd fff8 	bl	8007928 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009938:	4813      	ldr	r0, [pc, #76]	; (8009988 <prvCheckForValidListAndQueue+0x68>)
 800993a:	f7fd fff5 	bl	8007928 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800993e:	4b13      	ldr	r3, [pc, #76]	; (800998c <prvCheckForValidListAndQueue+0x6c>)
 8009940:	4a10      	ldr	r2, [pc, #64]	; (8009984 <prvCheckForValidListAndQueue+0x64>)
 8009942:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009944:	4b12      	ldr	r3, [pc, #72]	; (8009990 <prvCheckForValidListAndQueue+0x70>)
 8009946:	4a10      	ldr	r2, [pc, #64]	; (8009988 <prvCheckForValidListAndQueue+0x68>)
 8009948:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800994a:	2300      	movs	r3, #0
 800994c:	9300      	str	r3, [sp, #0]
 800994e:	4b11      	ldr	r3, [pc, #68]	; (8009994 <prvCheckForValidListAndQueue+0x74>)
 8009950:	4a11      	ldr	r2, [pc, #68]	; (8009998 <prvCheckForValidListAndQueue+0x78>)
 8009952:	2110      	movs	r1, #16
 8009954:	200a      	movs	r0, #10
 8009956:	f7fe f903 	bl	8007b60 <xQueueGenericCreateStatic>
 800995a:	4603      	mov	r3, r0
 800995c:	4a08      	ldr	r2, [pc, #32]	; (8009980 <prvCheckForValidListAndQueue+0x60>)
 800995e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009960:	4b07      	ldr	r3, [pc, #28]	; (8009980 <prvCheckForValidListAndQueue+0x60>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d005      	beq.n	8009974 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009968:	4b05      	ldr	r3, [pc, #20]	; (8009980 <prvCheckForValidListAndQueue+0x60>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	490b      	ldr	r1, [pc, #44]	; (800999c <prvCheckForValidListAndQueue+0x7c>)
 800996e:	4618      	mov	r0, r3
 8009970:	f7fe fd1c 	bl	80083ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009974:	f000 f96e 	bl	8009c54 <vPortExitCritical>
}
 8009978:	bf00      	nop
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	20008458 	.word	0x20008458
 8009984:	20008428 	.word	0x20008428
 8009988:	2000843c 	.word	0x2000843c
 800998c:	20008450 	.word	0x20008450
 8009990:	20008454 	.word	0x20008454
 8009994:	20008504 	.word	0x20008504
 8009998:	20008464 	.word	0x20008464
 800999c:	080184c4 	.word	0x080184c4

080099a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3b04      	subs	r3, #4
 80099b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80099b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	3b04      	subs	r3, #4
 80099be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	f023 0201 	bic.w	r2, r3, #1
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	3b04      	subs	r3, #4
 80099ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80099d0:	4a0c      	ldr	r2, [pc, #48]	; (8009a04 <pxPortInitialiseStack+0x64>)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	3b14      	subs	r3, #20
 80099da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	3b04      	subs	r3, #4
 80099e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f06f 0202 	mvn.w	r2, #2
 80099ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	3b20      	subs	r3, #32
 80099f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80099f6:	68fb      	ldr	r3, [r7, #12]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	08009a09 	.word	0x08009a09

08009a08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009a12:	4b12      	ldr	r3, [pc, #72]	; (8009a5c <prvTaskExitError+0x54>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a1a:	d00a      	beq.n	8009a32 <prvTaskExitError+0x2a>
	__asm volatile
 8009a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	60fb      	str	r3, [r7, #12]
}
 8009a2e:	bf00      	nop
 8009a30:	e7fe      	b.n	8009a30 <prvTaskExitError+0x28>
	__asm volatile
 8009a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a36:	f383 8811 	msr	BASEPRI, r3
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	60bb      	str	r3, [r7, #8]
}
 8009a44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009a46:	bf00      	nop
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d0fc      	beq.n	8009a48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a4e:	bf00      	nop
 8009a50:	bf00      	nop
 8009a52:	3714      	adds	r7, #20
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	20000014 	.word	0x20000014

08009a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a60:	4b07      	ldr	r3, [pc, #28]	; (8009a80 <pxCurrentTCBConst2>)
 8009a62:	6819      	ldr	r1, [r3, #0]
 8009a64:	6808      	ldr	r0, [r1, #0]
 8009a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a6a:	f380 8809 	msr	PSP, r0
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f04f 0000 	mov.w	r0, #0
 8009a76:	f380 8811 	msr	BASEPRI, r0
 8009a7a:	4770      	bx	lr
 8009a7c:	f3af 8000 	nop.w

08009a80 <pxCurrentTCBConst2>:
 8009a80:	20007f28 	.word	0x20007f28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop

08009a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a88:	4808      	ldr	r0, [pc, #32]	; (8009aac <prvPortStartFirstTask+0x24>)
 8009a8a:	6800      	ldr	r0, [r0, #0]
 8009a8c:	6800      	ldr	r0, [r0, #0]
 8009a8e:	f380 8808 	msr	MSP, r0
 8009a92:	f04f 0000 	mov.w	r0, #0
 8009a96:	f380 8814 	msr	CONTROL, r0
 8009a9a:	b662      	cpsie	i
 8009a9c:	b661      	cpsie	f
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	df00      	svc	0
 8009aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009aaa:	bf00      	nop
 8009aac:	e000ed08 	.word	0xe000ed08

08009ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ab6:	4b46      	ldr	r3, [pc, #280]	; (8009bd0 <xPortStartScheduler+0x120>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a46      	ldr	r2, [pc, #280]	; (8009bd4 <xPortStartScheduler+0x124>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d10a      	bne.n	8009ad6 <xPortStartScheduler+0x26>
	__asm volatile
 8009ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac4:	f383 8811 	msr	BASEPRI, r3
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	613b      	str	r3, [r7, #16]
}
 8009ad2:	bf00      	nop
 8009ad4:	e7fe      	b.n	8009ad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ad6:	4b3e      	ldr	r3, [pc, #248]	; (8009bd0 <xPortStartScheduler+0x120>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a3f      	ldr	r2, [pc, #252]	; (8009bd8 <xPortStartScheduler+0x128>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d10a      	bne.n	8009af6 <xPortStartScheduler+0x46>
	__asm volatile
 8009ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae4:	f383 8811 	msr	BASEPRI, r3
 8009ae8:	f3bf 8f6f 	isb	sy
 8009aec:	f3bf 8f4f 	dsb	sy
 8009af0:	60fb      	str	r3, [r7, #12]
}
 8009af2:	bf00      	nop
 8009af4:	e7fe      	b.n	8009af4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009af6:	4b39      	ldr	r3, [pc, #228]	; (8009bdc <xPortStartScheduler+0x12c>)
 8009af8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	22ff      	movs	r2, #255	; 0xff
 8009b06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b10:	78fb      	ldrb	r3, [r7, #3]
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	4b31      	ldr	r3, [pc, #196]	; (8009be0 <xPortStartScheduler+0x130>)
 8009b1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b1e:	4b31      	ldr	r3, [pc, #196]	; (8009be4 <xPortStartScheduler+0x134>)
 8009b20:	2207      	movs	r2, #7
 8009b22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b24:	e009      	b.n	8009b3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009b26:	4b2f      	ldr	r3, [pc, #188]	; (8009be4 <xPortStartScheduler+0x134>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	4a2d      	ldr	r2, [pc, #180]	; (8009be4 <xPortStartScheduler+0x134>)
 8009b2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b30:	78fb      	ldrb	r3, [r7, #3]
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	005b      	lsls	r3, r3, #1
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b3a:	78fb      	ldrb	r3, [r7, #3]
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b42:	2b80      	cmp	r3, #128	; 0x80
 8009b44:	d0ef      	beq.n	8009b26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b46:	4b27      	ldr	r3, [pc, #156]	; (8009be4 <xPortStartScheduler+0x134>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f1c3 0307 	rsb	r3, r3, #7
 8009b4e:	2b04      	cmp	r3, #4
 8009b50:	d00a      	beq.n	8009b68 <xPortStartScheduler+0xb8>
	__asm volatile
 8009b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b56:	f383 8811 	msr	BASEPRI, r3
 8009b5a:	f3bf 8f6f 	isb	sy
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	60bb      	str	r3, [r7, #8]
}
 8009b64:	bf00      	nop
 8009b66:	e7fe      	b.n	8009b66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b68:	4b1e      	ldr	r3, [pc, #120]	; (8009be4 <xPortStartScheduler+0x134>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	021b      	lsls	r3, r3, #8
 8009b6e:	4a1d      	ldr	r2, [pc, #116]	; (8009be4 <xPortStartScheduler+0x134>)
 8009b70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b72:	4b1c      	ldr	r3, [pc, #112]	; (8009be4 <xPortStartScheduler+0x134>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b7a:	4a1a      	ldr	r2, [pc, #104]	; (8009be4 <xPortStartScheduler+0x134>)
 8009b7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b86:	4b18      	ldr	r3, [pc, #96]	; (8009be8 <xPortStartScheduler+0x138>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a17      	ldr	r2, [pc, #92]	; (8009be8 <xPortStartScheduler+0x138>)
 8009b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b92:	4b15      	ldr	r3, [pc, #84]	; (8009be8 <xPortStartScheduler+0x138>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a14      	ldr	r2, [pc, #80]	; (8009be8 <xPortStartScheduler+0x138>)
 8009b98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b9e:	f000 f8dd 	bl	8009d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ba2:	4b12      	ldr	r3, [pc, #72]	; (8009bec <xPortStartScheduler+0x13c>)
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ba8:	f000 f8fc 	bl	8009da4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009bac:	4b10      	ldr	r3, [pc, #64]	; (8009bf0 <xPortStartScheduler+0x140>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a0f      	ldr	r2, [pc, #60]	; (8009bf0 <xPortStartScheduler+0x140>)
 8009bb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009bb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009bb8:	f7ff ff66 	bl	8009a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009bbc:	f7ff f826 	bl	8008c0c <vTaskSwitchContext>
	prvTaskExitError();
 8009bc0:	f7ff ff22 	bl	8009a08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3718      	adds	r7, #24
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	e000ed00 	.word	0xe000ed00
 8009bd4:	410fc271 	.word	0x410fc271
 8009bd8:	410fc270 	.word	0x410fc270
 8009bdc:	e000e400 	.word	0xe000e400
 8009be0:	20008554 	.word	0x20008554
 8009be4:	20008558 	.word	0x20008558
 8009be8:	e000ed20 	.word	0xe000ed20
 8009bec:	20000014 	.word	0x20000014
 8009bf0:	e000ef34 	.word	0xe000ef34

08009bf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
	__asm volatile
 8009bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	607b      	str	r3, [r7, #4]
}
 8009c0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c0e:	4b0f      	ldr	r3, [pc, #60]	; (8009c4c <vPortEnterCritical+0x58>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3301      	adds	r3, #1
 8009c14:	4a0d      	ldr	r2, [pc, #52]	; (8009c4c <vPortEnterCritical+0x58>)
 8009c16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009c18:	4b0c      	ldr	r3, [pc, #48]	; (8009c4c <vPortEnterCritical+0x58>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d10f      	bne.n	8009c40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c20:	4b0b      	ldr	r3, [pc, #44]	; (8009c50 <vPortEnterCritical+0x5c>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00a      	beq.n	8009c40 <vPortEnterCritical+0x4c>
	__asm volatile
 8009c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2e:	f383 8811 	msr	BASEPRI, r3
 8009c32:	f3bf 8f6f 	isb	sy
 8009c36:	f3bf 8f4f 	dsb	sy
 8009c3a:	603b      	str	r3, [r7, #0]
}
 8009c3c:	bf00      	nop
 8009c3e:	e7fe      	b.n	8009c3e <vPortEnterCritical+0x4a>
	}
}
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	20000014 	.word	0x20000014
 8009c50:	e000ed04 	.word	0xe000ed04

08009c54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c5a:	4b12      	ldr	r3, [pc, #72]	; (8009ca4 <vPortExitCritical+0x50>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10a      	bne.n	8009c78 <vPortExitCritical+0x24>
	__asm volatile
 8009c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c66:	f383 8811 	msr	BASEPRI, r3
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	607b      	str	r3, [r7, #4]
}
 8009c74:	bf00      	nop
 8009c76:	e7fe      	b.n	8009c76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009c78:	4b0a      	ldr	r3, [pc, #40]	; (8009ca4 <vPortExitCritical+0x50>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	4a09      	ldr	r2, [pc, #36]	; (8009ca4 <vPortExitCritical+0x50>)
 8009c80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c82:	4b08      	ldr	r3, [pc, #32]	; (8009ca4 <vPortExitCritical+0x50>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d105      	bne.n	8009c96 <vPortExitCritical+0x42>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	f383 8811 	msr	BASEPRI, r3
}
 8009c94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c96:	bf00      	nop
 8009c98:	370c      	adds	r7, #12
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	20000014 	.word	0x20000014
	...

08009cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009cb0:	f3ef 8009 	mrs	r0, PSP
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	4b15      	ldr	r3, [pc, #84]	; (8009d10 <pxCurrentTCBConst>)
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	f01e 0f10 	tst.w	lr, #16
 8009cc0:	bf08      	it	eq
 8009cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cca:	6010      	str	r0, [r2, #0]
 8009ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009cd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009cd4:	f380 8811 	msr	BASEPRI, r0
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f7fe ff94 	bl	8008c0c <vTaskSwitchContext>
 8009ce4:	f04f 0000 	mov.w	r0, #0
 8009ce8:	f380 8811 	msr	BASEPRI, r0
 8009cec:	bc09      	pop	{r0, r3}
 8009cee:	6819      	ldr	r1, [r3, #0]
 8009cf0:	6808      	ldr	r0, [r1, #0]
 8009cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf6:	f01e 0f10 	tst.w	lr, #16
 8009cfa:	bf08      	it	eq
 8009cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009d00:	f380 8809 	msr	PSP, r0
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	f3af 8000 	nop.w

08009d10 <pxCurrentTCBConst>:
 8009d10:	20007f28 	.word	0x20007f28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009d14:	bf00      	nop
 8009d16:	bf00      	nop

08009d18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	607b      	str	r3, [r7, #4]
}
 8009d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d32:	f7fe feb1 	bl	8008a98 <xTaskIncrementTick>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d003      	beq.n	8009d44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d3c:	4b06      	ldr	r3, [pc, #24]	; (8009d58 <xPortSysTickHandler+0x40>)
 8009d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d42:	601a      	str	r2, [r3, #0]
 8009d44:	2300      	movs	r3, #0
 8009d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	f383 8811 	msr	BASEPRI, r3
}
 8009d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d50:	bf00      	nop
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	e000ed04 	.word	0xe000ed04

08009d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d60:	4b0b      	ldr	r3, [pc, #44]	; (8009d90 <vPortSetupTimerInterrupt+0x34>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d66:	4b0b      	ldr	r3, [pc, #44]	; (8009d94 <vPortSetupTimerInterrupt+0x38>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d6c:	4b0a      	ldr	r3, [pc, #40]	; (8009d98 <vPortSetupTimerInterrupt+0x3c>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a0a      	ldr	r2, [pc, #40]	; (8009d9c <vPortSetupTimerInterrupt+0x40>)
 8009d72:	fba2 2303 	umull	r2, r3, r2, r3
 8009d76:	099b      	lsrs	r3, r3, #6
 8009d78:	4a09      	ldr	r2, [pc, #36]	; (8009da0 <vPortSetupTimerInterrupt+0x44>)
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d7e:	4b04      	ldr	r3, [pc, #16]	; (8009d90 <vPortSetupTimerInterrupt+0x34>)
 8009d80:	2207      	movs	r2, #7
 8009d82:	601a      	str	r2, [r3, #0]
}
 8009d84:	bf00      	nop
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	e000e010 	.word	0xe000e010
 8009d94:	e000e018 	.word	0xe000e018
 8009d98:	20000008 	.word	0x20000008
 8009d9c:	10624dd3 	.word	0x10624dd3
 8009da0:	e000e014 	.word	0xe000e014

08009da4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009da4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009db4 <vPortEnableVFP+0x10>
 8009da8:	6801      	ldr	r1, [r0, #0]
 8009daa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009dae:	6001      	str	r1, [r0, #0]
 8009db0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009db2:	bf00      	nop
 8009db4:	e000ed88 	.word	0xe000ed88

08009db8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009dbe:	f3ef 8305 	mrs	r3, IPSR
 8009dc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2b0f      	cmp	r3, #15
 8009dc8:	d914      	bls.n	8009df4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009dca:	4a17      	ldr	r2, [pc, #92]	; (8009e28 <vPortValidateInterruptPriority+0x70>)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	4413      	add	r3, r2
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009dd4:	4b15      	ldr	r3, [pc, #84]	; (8009e2c <vPortValidateInterruptPriority+0x74>)
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	7afa      	ldrb	r2, [r7, #11]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d20a      	bcs.n	8009df4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	607b      	str	r3, [r7, #4]
}
 8009df0:	bf00      	nop
 8009df2:	e7fe      	b.n	8009df2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009df4:	4b0e      	ldr	r3, [pc, #56]	; (8009e30 <vPortValidateInterruptPriority+0x78>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009dfc:	4b0d      	ldr	r3, [pc, #52]	; (8009e34 <vPortValidateInterruptPriority+0x7c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d90a      	bls.n	8009e1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e08:	f383 8811 	msr	BASEPRI, r3
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f3bf 8f4f 	dsb	sy
 8009e14:	603b      	str	r3, [r7, #0]
}
 8009e16:	bf00      	nop
 8009e18:	e7fe      	b.n	8009e18 <vPortValidateInterruptPriority+0x60>
	}
 8009e1a:	bf00      	nop
 8009e1c:	3714      	adds	r7, #20
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	e000e3f0 	.word	0xe000e3f0
 8009e2c:	20008554 	.word	0x20008554
 8009e30:	e000ed0c 	.word	0xe000ed0c
 8009e34:	20008558 	.word	0x20008558

08009e38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b08a      	sub	sp, #40	; 0x28
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009e40:	2300      	movs	r3, #0
 8009e42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009e44:	f7fe fd6c 	bl	8008920 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009e48:	4b5b      	ldr	r3, [pc, #364]	; (8009fb8 <pvPortMalloc+0x180>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d101      	bne.n	8009e54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009e50:	f000 f920 	bl	800a094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e54:	4b59      	ldr	r3, [pc, #356]	; (8009fbc <pvPortMalloc+0x184>)
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f040 8093 	bne.w	8009f88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d01d      	beq.n	8009ea4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009e68:	2208      	movs	r2, #8
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f003 0307 	and.w	r3, r3, #7
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d014      	beq.n	8009ea4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f023 0307 	bic.w	r3, r3, #7
 8009e80:	3308      	adds	r3, #8
 8009e82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f003 0307 	and.w	r3, r3, #7
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00a      	beq.n	8009ea4 <pvPortMalloc+0x6c>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	617b      	str	r3, [r7, #20]
}
 8009ea0:	bf00      	nop
 8009ea2:	e7fe      	b.n	8009ea2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d06e      	beq.n	8009f88 <pvPortMalloc+0x150>
 8009eaa:	4b45      	ldr	r3, [pc, #276]	; (8009fc0 <pvPortMalloc+0x188>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d869      	bhi.n	8009f88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009eb4:	4b43      	ldr	r3, [pc, #268]	; (8009fc4 <pvPortMalloc+0x18c>)
 8009eb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009eb8:	4b42      	ldr	r3, [pc, #264]	; (8009fc4 <pvPortMalloc+0x18c>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ebe:	e004      	b.n	8009eca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d903      	bls.n	8009edc <pvPortMalloc+0xa4>
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1f1      	bne.n	8009ec0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009edc:	4b36      	ldr	r3, [pc, #216]	; (8009fb8 <pvPortMalloc+0x180>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d050      	beq.n	8009f88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ee6:	6a3b      	ldr	r3, [r7, #32]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2208      	movs	r2, #8
 8009eec:	4413      	add	r3, r2
 8009eee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	6a3b      	ldr	r3, [r7, #32]
 8009ef6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	1ad2      	subs	r2, r2, r3
 8009f00:	2308      	movs	r3, #8
 8009f02:	005b      	lsls	r3, r3, #1
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d91f      	bls.n	8009f48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	f003 0307 	and.w	r3, r3, #7
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00a      	beq.n	8009f30 <pvPortMalloc+0xf8>
	__asm volatile
 8009f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1e:	f383 8811 	msr	BASEPRI, r3
 8009f22:	f3bf 8f6f 	isb	sy
 8009f26:	f3bf 8f4f 	dsb	sy
 8009f2a:	613b      	str	r3, [r7, #16]
}
 8009f2c:	bf00      	nop
 8009f2e:	e7fe      	b.n	8009f2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	685a      	ldr	r2, [r3, #4]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	1ad2      	subs	r2, r2, r3
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009f42:	69b8      	ldr	r0, [r7, #24]
 8009f44:	f000 f908 	bl	800a158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f48:	4b1d      	ldr	r3, [pc, #116]	; (8009fc0 <pvPortMalloc+0x188>)
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	4a1b      	ldr	r2, [pc, #108]	; (8009fc0 <pvPortMalloc+0x188>)
 8009f54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f56:	4b1a      	ldr	r3, [pc, #104]	; (8009fc0 <pvPortMalloc+0x188>)
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	4b1b      	ldr	r3, [pc, #108]	; (8009fc8 <pvPortMalloc+0x190>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d203      	bcs.n	8009f6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f62:	4b17      	ldr	r3, [pc, #92]	; (8009fc0 <pvPortMalloc+0x188>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a18      	ldr	r2, [pc, #96]	; (8009fc8 <pvPortMalloc+0x190>)
 8009f68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	685a      	ldr	r2, [r3, #4]
 8009f6e:	4b13      	ldr	r3, [pc, #76]	; (8009fbc <pvPortMalloc+0x184>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	431a      	orrs	r2, r3
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009f7e:	4b13      	ldr	r3, [pc, #76]	; (8009fcc <pvPortMalloc+0x194>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	3301      	adds	r3, #1
 8009f84:	4a11      	ldr	r2, [pc, #68]	; (8009fcc <pvPortMalloc+0x194>)
 8009f86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f88:	f7fe fcd8 	bl	800893c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	f003 0307 	and.w	r3, r3, #7
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00a      	beq.n	8009fac <pvPortMalloc+0x174>
	__asm volatile
 8009f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9a:	f383 8811 	msr	BASEPRI, r3
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f3bf 8f4f 	dsb	sy
 8009fa6:	60fb      	str	r3, [r7, #12]
}
 8009fa8:	bf00      	nop
 8009faa:	e7fe      	b.n	8009faa <pvPortMalloc+0x172>
	return pvReturn;
 8009fac:	69fb      	ldr	r3, [r7, #28]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3728      	adds	r7, #40	; 0x28
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	2000c164 	.word	0x2000c164
 8009fbc:	2000c178 	.word	0x2000c178
 8009fc0:	2000c168 	.word	0x2000c168
 8009fc4:	2000c15c 	.word	0x2000c15c
 8009fc8:	2000c16c 	.word	0x2000c16c
 8009fcc:	2000c170 	.word	0x2000c170

08009fd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d04d      	beq.n	800a07e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009fe2:	2308      	movs	r3, #8
 8009fe4:	425b      	negs	r3, r3
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	4413      	add	r3, r2
 8009fea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	685a      	ldr	r2, [r3, #4]
 8009ff4:	4b24      	ldr	r3, [pc, #144]	; (800a088 <vPortFree+0xb8>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d10a      	bne.n	800a014 <vPortFree+0x44>
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	60fb      	str	r3, [r7, #12]
}
 800a010:	bf00      	nop
 800a012:	e7fe      	b.n	800a012 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00a      	beq.n	800a032 <vPortFree+0x62>
	__asm volatile
 800a01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	60bb      	str	r3, [r7, #8]
}
 800a02e:	bf00      	nop
 800a030:	e7fe      	b.n	800a030 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	685a      	ldr	r2, [r3, #4]
 800a036:	4b14      	ldr	r3, [pc, #80]	; (800a088 <vPortFree+0xb8>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4013      	ands	r3, r2
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d01e      	beq.n	800a07e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d11a      	bne.n	800a07e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	4b0e      	ldr	r3, [pc, #56]	; (800a088 <vPortFree+0xb8>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	43db      	mvns	r3, r3
 800a052:	401a      	ands	r2, r3
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a058:	f7fe fc62 	bl	8008920 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	685a      	ldr	r2, [r3, #4]
 800a060:	4b0a      	ldr	r3, [pc, #40]	; (800a08c <vPortFree+0xbc>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4413      	add	r3, r2
 800a066:	4a09      	ldr	r2, [pc, #36]	; (800a08c <vPortFree+0xbc>)
 800a068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a06a:	6938      	ldr	r0, [r7, #16]
 800a06c:	f000 f874 	bl	800a158 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a070:	4b07      	ldr	r3, [pc, #28]	; (800a090 <vPortFree+0xc0>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	3301      	adds	r3, #1
 800a076:	4a06      	ldr	r2, [pc, #24]	; (800a090 <vPortFree+0xc0>)
 800a078:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a07a:	f7fe fc5f 	bl	800893c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a07e:	bf00      	nop
 800a080:	3718      	adds	r7, #24
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	2000c178 	.word	0x2000c178
 800a08c:	2000c168 	.word	0x2000c168
 800a090:	2000c174 	.word	0x2000c174

0800a094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a09a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a09e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a0a0:	4b27      	ldr	r3, [pc, #156]	; (800a140 <prvHeapInit+0xac>)
 800a0a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f003 0307 	and.w	r3, r3, #7
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00c      	beq.n	800a0c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	3307      	adds	r3, #7
 800a0b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f023 0307 	bic.w	r3, r3, #7
 800a0ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	4a1f      	ldr	r2, [pc, #124]	; (800a140 <prvHeapInit+0xac>)
 800a0c4:	4413      	add	r3, r2
 800a0c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a0cc:	4a1d      	ldr	r2, [pc, #116]	; (800a144 <prvHeapInit+0xb0>)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a0d2:	4b1c      	ldr	r3, [pc, #112]	; (800a144 <prvHeapInit+0xb0>)
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	4413      	add	r3, r2
 800a0de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a0e0:	2208      	movs	r2, #8
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	1a9b      	subs	r3, r3, r2
 800a0e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f023 0307 	bic.w	r3, r3, #7
 800a0ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	4a15      	ldr	r2, [pc, #84]	; (800a148 <prvHeapInit+0xb4>)
 800a0f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a0f6:	4b14      	ldr	r3, [pc, #80]	; (800a148 <prvHeapInit+0xb4>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a0fe:	4b12      	ldr	r3, [pc, #72]	; (800a148 <prvHeapInit+0xb4>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2200      	movs	r2, #0
 800a104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	1ad2      	subs	r2, r2, r3
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a114:	4b0c      	ldr	r3, [pc, #48]	; (800a148 <prvHeapInit+0xb4>)
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	4a0a      	ldr	r2, [pc, #40]	; (800a14c <prvHeapInit+0xb8>)
 800a122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	4a09      	ldr	r2, [pc, #36]	; (800a150 <prvHeapInit+0xbc>)
 800a12a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a12c:	4b09      	ldr	r3, [pc, #36]	; (800a154 <prvHeapInit+0xc0>)
 800a12e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a132:	601a      	str	r2, [r3, #0]
}
 800a134:	bf00      	nop
 800a136:	3714      	adds	r7, #20
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr
 800a140:	2000855c 	.word	0x2000855c
 800a144:	2000c15c 	.word	0x2000c15c
 800a148:	2000c164 	.word	0x2000c164
 800a14c:	2000c16c 	.word	0x2000c16c
 800a150:	2000c168 	.word	0x2000c168
 800a154:	2000c178 	.word	0x2000c178

0800a158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a160:	4b28      	ldr	r3, [pc, #160]	; (800a204 <prvInsertBlockIntoFreeList+0xac>)
 800a162:	60fb      	str	r3, [r7, #12]
 800a164:	e002      	b.n	800a16c <prvInsertBlockIntoFreeList+0x14>
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	60fb      	str	r3, [r7, #12]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	429a      	cmp	r2, r3
 800a174:	d8f7      	bhi.n	800a166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	4413      	add	r3, r2
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	429a      	cmp	r2, r3
 800a186:	d108      	bne.n	800a19a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	685a      	ldr	r2, [r3, #4]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	441a      	add	r2, r3
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	441a      	add	r2, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d118      	bne.n	800a1e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	4b15      	ldr	r3, [pc, #84]	; (800a208 <prvInsertBlockIntoFreeList+0xb0>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d00d      	beq.n	800a1d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	441a      	add	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	601a      	str	r2, [r3, #0]
 800a1d4:	e008      	b.n	800a1e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a1d6:	4b0c      	ldr	r3, [pc, #48]	; (800a208 <prvInsertBlockIntoFreeList+0xb0>)
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	601a      	str	r2, [r3, #0]
 800a1de:	e003      	b.n	800a1e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d002      	beq.n	800a1f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1f6:	bf00      	nop
 800a1f8:	3714      	adds	r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	2000c15c 	.word	0x2000c15c
 800a208:	2000c164 	.word	0x2000c164

0800a20c <rcl_get_zero_initialized_publisher>:
 800a20c:	4b01      	ldr	r3, [pc, #4]	; (800a214 <rcl_get_zero_initialized_publisher+0x8>)
 800a20e:	6818      	ldr	r0, [r3, #0]
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	08018534 	.word	0x08018534

0800a218 <rcl_publisher_init>:
 800a218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a21c:	b088      	sub	sp, #32
 800a21e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a220:	2d00      	cmp	r5, #0
 800a222:	d069      	beq.n	800a2f8 <rcl_publisher_init+0xe0>
 800a224:	f105 0950 	add.w	r9, r5, #80	; 0x50
 800a228:	4604      	mov	r4, r0
 800a22a:	4648      	mov	r0, r9
 800a22c:	460e      	mov	r6, r1
 800a22e:	4690      	mov	r8, r2
 800a230:	461f      	mov	r7, r3
 800a232:	f001 f845 	bl	800b2c0 <rcutils_allocator_is_valid>
 800a236:	2800      	cmp	r0, #0
 800a238:	d05e      	beq.n	800a2f8 <rcl_publisher_init+0xe0>
 800a23a:	2c00      	cmp	r4, #0
 800a23c:	d05c      	beq.n	800a2f8 <rcl_publisher_init+0xe0>
 800a23e:	f8d4 a000 	ldr.w	sl, [r4]
 800a242:	f1ba 0f00 	cmp.w	sl, #0
 800a246:	d004      	beq.n	800a252 <rcl_publisher_init+0x3a>
 800a248:	2764      	movs	r7, #100	; 0x64
 800a24a:	4638      	mov	r0, r7
 800a24c:	b008      	add	sp, #32
 800a24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a252:	4630      	mov	r0, r6
 800a254:	f007 f896 	bl	8011384 <rcl_node_is_valid>
 800a258:	2800      	cmp	r0, #0
 800a25a:	d052      	beq.n	800a302 <rcl_publisher_init+0xea>
 800a25c:	f1b8 0f00 	cmp.w	r8, #0
 800a260:	d04a      	beq.n	800a2f8 <rcl_publisher_init+0xe0>
 800a262:	2f00      	cmp	r7, #0
 800a264:	d048      	beq.n	800a2f8 <rcl_publisher_init+0xe0>
 800a266:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a26a:	aa07      	add	r2, sp, #28
 800a26c:	9205      	str	r2, [sp, #20]
 800a26e:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800a272:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a276:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a27a:	f8cd a01c 	str.w	sl, [sp, #28]
 800a27e:	4639      	mov	r1, r7
 800a280:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a284:	4630      	mov	r0, r6
 800a286:	f007 f8d1 	bl	801142c <rcl_node_resolve_name>
 800a28a:	4607      	mov	r7, r0
 800a28c:	2800      	cmp	r0, #0
 800a28e:	d14f      	bne.n	800a330 <rcl_publisher_init+0x118>
 800a290:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a292:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800a294:	20c8      	movs	r0, #200	; 0xc8
 800a296:	4798      	blx	r3
 800a298:	6020      	str	r0, [r4, #0]
 800a29a:	2800      	cmp	r0, #0
 800a29c:	d04e      	beq.n	800a33c <rcl_publisher_init+0x124>
 800a29e:	4630      	mov	r0, r6
 800a2a0:	f007 f892 	bl	80113c8 <rcl_node_get_rmw_handle>
 800a2a4:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800a2a8:	9300      	str	r3, [sp, #0]
 800a2aa:	9a07      	ldr	r2, [sp, #28]
 800a2ac:	6827      	ldr	r7, [r4, #0]
 800a2ae:	462b      	mov	r3, r5
 800a2b0:	4641      	mov	r1, r8
 800a2b2:	f001 f95d 	bl	800b570 <rmw_create_publisher>
 800a2b6:	6823      	ldr	r3, [r4, #0]
 800a2b8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800a2bc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800a2c0:	b370      	cbz	r0, 800a320 <rcl_publisher_init+0x108>
 800a2c2:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800a2c6:	f001 fa31 	bl	800b72c <rmw_publisher_get_actual_qos>
 800a2ca:	6823      	ldr	r3, [r4, #0]
 800a2cc:	4607      	mov	r7, r0
 800a2ce:	b9d0      	cbnz	r0, 800a306 <rcl_publisher_init+0xee>
 800a2d0:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 800a2d4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800a2d8:	4629      	mov	r1, r5
 800a2da:	2270      	movs	r2, #112	; 0x70
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f00d f9b2 	bl	8017646 <memcpy>
 800a2e2:	6832      	ldr	r2, [r6, #0]
 800a2e4:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800a2e8:	9807      	ldr	r0, [sp, #28]
 800a2ea:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800a2ec:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800a2ee:	4798      	blx	r3
 800a2f0:	4638      	mov	r0, r7
 800a2f2:	b008      	add	sp, #32
 800a2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f8:	270b      	movs	r7, #11
 800a2fa:	4638      	mov	r0, r7
 800a2fc:	b008      	add	sp, #32
 800a2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a302:	27c8      	movs	r7, #200	; 0xc8
 800a304:	e7a1      	b.n	800a24a <rcl_publisher_init+0x32>
 800a306:	b18b      	cbz	r3, 800a32c <rcl_publisher_init+0x114>
 800a308:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a30c:	b142      	cbz	r2, 800a320 <rcl_publisher_init+0x108>
 800a30e:	4630      	mov	r0, r6
 800a310:	f007 f85a 	bl	80113c8 <rcl_node_get_rmw_handle>
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800a31a:	f001 fa17 	bl	800b74c <rmw_destroy_publisher>
 800a31e:	6823      	ldr	r3, [r4, #0]
 800a320:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800a322:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800a324:	4618      	mov	r0, r3
 800a326:	4790      	blx	r2
 800a328:	2300      	movs	r3, #0
 800a32a:	6023      	str	r3, [r4, #0]
 800a32c:	2701      	movs	r7, #1
 800a32e:	e7db      	b.n	800a2e8 <rcl_publisher_init+0xd0>
 800a330:	2867      	cmp	r0, #103	; 0x67
 800a332:	d0d9      	beq.n	800a2e8 <rcl_publisher_init+0xd0>
 800a334:	2869      	cmp	r0, #105	; 0x69
 800a336:	d003      	beq.n	800a340 <rcl_publisher_init+0x128>
 800a338:	280a      	cmp	r0, #10
 800a33a:	d1f7      	bne.n	800a32c <rcl_publisher_init+0x114>
 800a33c:	270a      	movs	r7, #10
 800a33e:	e7d3      	b.n	800a2e8 <rcl_publisher_init+0xd0>
 800a340:	2767      	movs	r7, #103	; 0x67
 800a342:	e7d1      	b.n	800a2e8 <rcl_publisher_init+0xd0>

0800a344 <rcl_publisher_get_default_options>:
 800a344:	b570      	push	{r4, r5, r6, lr}
 800a346:	4d14      	ldr	r5, [pc, #80]	; (800a398 <rcl_publisher_get_default_options+0x54>)
 800a348:	4914      	ldr	r1, [pc, #80]	; (800a39c <rcl_publisher_get_default_options+0x58>)
 800a34a:	b088      	sub	sp, #32
 800a34c:	4604      	mov	r4, r0
 800a34e:	2250      	movs	r2, #80	; 0x50
 800a350:	4628      	mov	r0, r5
 800a352:	f00d f978 	bl	8017646 <memcpy>
 800a356:	a802      	add	r0, sp, #8
 800a358:	f000 ffa4 	bl	800b2a4 <rcutils_get_default_allocator>
 800a35c:	f10d 0c08 	add.w	ip, sp, #8
 800a360:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a364:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800a368:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a36c:	466e      	mov	r6, sp
 800a36e:	f8dc 3000 	ldr.w	r3, [ip]
 800a372:	f8ce 3000 	str.w	r3, [lr]
 800a376:	4630      	mov	r0, r6
 800a378:	f001 f832 	bl	800b3e0 <rmw_get_default_publisher_options>
 800a37c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a380:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800a384:	e883 0003 	stmia.w	r3, {r0, r1}
 800a388:	2270      	movs	r2, #112	; 0x70
 800a38a:	4629      	mov	r1, r5
 800a38c:	4620      	mov	r0, r4
 800a38e:	f00d f95a 	bl	8017646 <memcpy>
 800a392:	4620      	mov	r0, r4
 800a394:	b008      	add	sp, #32
 800a396:	bd70      	pop	{r4, r5, r6, pc}
 800a398:	2000c180 	.word	0x2000c180
 800a39c:	08018538 	.word	0x08018538

0800a3a0 <rcl_publish>:
 800a3a0:	b1f8      	cbz	r0, 800a3e2 <rcl_publish+0x42>
 800a3a2:	6803      	ldr	r3, [r0, #0]
 800a3a4:	b570      	push	{r4, r5, r6, lr}
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	b1b3      	cbz	r3, 800a3d8 <rcl_publish+0x38>
 800a3aa:	4616      	mov	r6, r2
 800a3ac:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a3b0:	b192      	cbz	r2, 800a3d8 <rcl_publish+0x38>
 800a3b2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800a3b6:	460d      	mov	r5, r1
 800a3b8:	f006 fc0a 	bl	8010bd0 <rcl_context_is_valid>
 800a3bc:	b160      	cbz	r0, 800a3d8 <rcl_publish+0x38>
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800a3c4:	b140      	cbz	r0, 800a3d8 <rcl_publish+0x38>
 800a3c6:	b155      	cbz	r5, 800a3de <rcl_publish+0x3e>
 800a3c8:	4632      	mov	r2, r6
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	f001 f870 	bl	800b4b0 <rmw_publish>
 800a3d0:	3800      	subs	r0, #0
 800a3d2:	bf18      	it	ne
 800a3d4:	2001      	movne	r0, #1
 800a3d6:	bd70      	pop	{r4, r5, r6, pc}
 800a3d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a3dc:	bd70      	pop	{r4, r5, r6, pc}
 800a3de:	200b      	movs	r0, #11
 800a3e0:	bd70      	pop	{r4, r5, r6, pc}
 800a3e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a3e6:	4770      	bx	lr

0800a3e8 <rcl_publisher_is_valid>:
 800a3e8:	b1a0      	cbz	r0, 800a414 <rcl_publisher_is_valid+0x2c>
 800a3ea:	6803      	ldr	r3, [r0, #0]
 800a3ec:	b510      	push	{r4, lr}
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	b173      	cbz	r3, 800a410 <rcl_publisher_is_valid+0x28>
 800a3f2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a3f6:	b15a      	cbz	r2, 800a410 <rcl_publisher_is_valid+0x28>
 800a3f8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800a3fc:	f006 fbe8 	bl	8010bd0 <rcl_context_is_valid>
 800a400:	b130      	cbz	r0, 800a410 <rcl_publisher_is_valid+0x28>
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800a408:	3800      	subs	r0, #0
 800a40a:	bf18      	it	ne
 800a40c:	2001      	movne	r0, #1
 800a40e:	bd10      	pop	{r4, pc}
 800a410:	2000      	movs	r0, #0
 800a412:	bd10      	pop	{r4, pc}
 800a414:	2000      	movs	r0, #0
 800a416:	4770      	bx	lr

0800a418 <rcl_publisher_is_valid_except_context>:
 800a418:	b130      	cbz	r0, 800a428 <rcl_publisher_is_valid_except_context+0x10>
 800a41a:	6800      	ldr	r0, [r0, #0]
 800a41c:	b120      	cbz	r0, 800a428 <rcl_publisher_is_valid_except_context+0x10>
 800a41e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 800a422:	3800      	subs	r0, #0
 800a424:	bf18      	it	ne
 800a426:	2001      	movne	r0, #1
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop

0800a42c <_rclc_check_for_new_data>:
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d046      	beq.n	800a4be <_rclc_check_for_new_data+0x92>
 800a430:	b510      	push	{r4, lr}
 800a432:	7802      	ldrb	r2, [r0, #0]
 800a434:	b084      	sub	sp, #16
 800a436:	4603      	mov	r3, r0
 800a438:	2a0a      	cmp	r2, #10
 800a43a:	d842      	bhi.n	800a4c2 <_rclc_check_for_new_data+0x96>
 800a43c:	e8df f002 	tbb	[pc, r2]
 800a440:	14181212 	.word	0x14181212
 800a444:	06060614 	.word	0x06060614
 800a448:	2e1a      	.short	0x2e1a
 800a44a:	16          	.byte	0x16
 800a44b:	00          	.byte	0x00
 800a44c:	6a0a      	ldr	r2, [r1, #32]
 800a44e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a450:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a454:	2000      	movs	r0, #0
 800a456:	1a12      	subs	r2, r2, r0
 800a458:	bf18      	it	ne
 800a45a:	2201      	movne	r2, #1
 800a45c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800a460:	b004      	add	sp, #16
 800a462:	bd10      	pop	{r4, pc}
 800a464:	680a      	ldr	r2, [r1, #0]
 800a466:	e7f2      	b.n	800a44e <_rclc_check_for_new_data+0x22>
 800a468:	698a      	ldr	r2, [r1, #24]
 800a46a:	e7f0      	b.n	800a44e <_rclc_check_for_new_data+0x22>
 800a46c:	688a      	ldr	r2, [r1, #8]
 800a46e:	e7ee      	b.n	800a44e <_rclc_check_for_new_data+0x22>
 800a470:	690a      	ldr	r2, [r1, #16]
 800a472:	e7ec      	b.n	800a44e <_rclc_check_for_new_data+0x22>
 800a474:	685c      	ldr	r4, [r3, #4]
 800a476:	4608      	mov	r0, r1
 800a478:	f104 0244 	add.w	r2, r4, #68	; 0x44
 800a47c:	f104 0143 	add.w	r1, r4, #67	; 0x43
 800a480:	f104 0342 	add.w	r3, r4, #66	; 0x42
 800a484:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800a48e:	f104 0341 	add.w	r3, r4, #65	; 0x41
 800a492:	f104 0110 	add.w	r1, r4, #16
 800a496:	f008 fc97 	bl	8012dc8 <rcl_action_client_wait_set_get_entities_ready>
 800a49a:	e7e1      	b.n	800a460 <_rclc_check_for_new_data+0x34>
 800a49c:	685c      	ldr	r4, [r3, #4]
 800a49e:	f104 0223 	add.w	r2, r4, #35	; 0x23
 800a4a2:	f104 0322 	add.w	r3, r4, #34	; 0x22
 800a4a6:	e9cd 3200 	strd	r3, r2, [sp]
 800a4aa:	4608      	mov	r0, r1
 800a4ac:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800a4b0:	f104 0220 	add.w	r2, r4, #32
 800a4b4:	f104 0110 	add.w	r1, r4, #16
 800a4b8:	f008 fe9c 	bl	80131f4 <rcl_action_server_wait_set_get_entities_ready>
 800a4bc:	e7d0      	b.n	800a460 <_rclc_check_for_new_data+0x34>
 800a4be:	200b      	movs	r0, #11
 800a4c0:	4770      	bx	lr
 800a4c2:	2001      	movs	r0, #1
 800a4c4:	e7cc      	b.n	800a460 <_rclc_check_for_new_data+0x34>
 800a4c6:	bf00      	nop

0800a4c8 <_rclc_take_new_data>:
 800a4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4ca:	b09b      	sub	sp, #108	; 0x6c
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	f000 8088 	beq.w	800a5e2 <_rclc_take_new_data+0x11a>
 800a4d2:	7803      	ldrb	r3, [r0, #0]
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	2b0a      	cmp	r3, #10
 800a4d8:	f200 8167 	bhi.w	800a7aa <_rclc_take_new_data+0x2e2>
 800a4dc:	e8df f003 	tbb	[pc, r3]
 800a4e0:	44152d2d 	.word	0x44152d2d
 800a4e4:	19191944 	.word	0x19191944
 800a4e8:	065a      	.short	0x065a
 800a4ea:	15          	.byte	0x15
 800a4eb:	00          	.byte	0x00
 800a4ec:	6840      	ldr	r0, [r0, #4]
 800a4ee:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f040 80b2 	bne.w	800a65c <_rclc_take_new_data+0x194>
 800a4f8:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f040 80e4 	bne.w	800a6ca <_rclc_take_new_data+0x202>
 800a502:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800a506:	2b00      	cmp	r3, #0
 800a508:	d16f      	bne.n	800a5ea <_rclc_take_new_data+0x122>
 800a50a:	2500      	movs	r5, #0
 800a50c:	4628      	mov	r0, r5
 800a50e:	b01b      	add	sp, #108	; 0x6c
 800a510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a512:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a514:	6a0b      	ldr	r3, [r1, #32]
 800a516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d0f5      	beq.n	800a50a <_rclc_take_new_data+0x42>
 800a51e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a522:	f104 0110 	add.w	r1, r4, #16
 800a526:	f007 f92b 	bl	8011780 <rcl_take_request>
 800a52a:	4605      	mov	r5, r0
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d0ec      	beq.n	800a50a <_rclc_take_new_data+0x42>
 800a530:	f240 2359 	movw	r3, #601	; 0x259
 800a534:	4298      	cmp	r0, r3
 800a536:	d013      	beq.n	800a560 <_rclc_take_new_data+0x98>
 800a538:	e029      	b.n	800a58e <_rclc_take_new_data+0xc6>
 800a53a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a53c:	680b      	ldr	r3, [r1, #0]
 800a53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d0e1      	beq.n	800a50a <_rclc_take_new_data+0x42>
 800a546:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800a54a:	2300      	movs	r3, #0
 800a54c:	aa0a      	add	r2, sp, #40	; 0x28
 800a54e:	f007 fa55 	bl	80119fc <rcl_take>
 800a552:	4605      	mov	r5, r0
 800a554:	2800      	cmp	r0, #0
 800a556:	d0d9      	beq.n	800a50c <_rclc_take_new_data+0x44>
 800a558:	f240 1391 	movw	r3, #401	; 0x191
 800a55c:	4298      	cmp	r0, r3
 800a55e:	d116      	bne.n	800a58e <_rclc_take_new_data+0xc6>
 800a560:	2300      	movs	r3, #0
 800a562:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800a566:	e7d1      	b.n	800a50c <_rclc_take_new_data+0x44>
 800a568:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a56a:	698b      	ldr	r3, [r1, #24]
 800a56c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d0ca      	beq.n	800a50a <_rclc_take_new_data+0x42>
 800a574:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a578:	f104 0110 	add.w	r1, r4, #16
 800a57c:	f006 fab8 	bl	8010af0 <rcl_take_response>
 800a580:	4605      	mov	r5, r0
 800a582:	2800      	cmp	r0, #0
 800a584:	d0c1      	beq.n	800a50a <_rclc_take_new_data+0x42>
 800a586:	f240 13f5 	movw	r3, #501	; 0x1f5
 800a58a:	4298      	cmp	r0, r3
 800a58c:	d0be      	beq.n	800a50c <_rclc_take_new_data+0x44>
 800a58e:	f000 febb 	bl	800b308 <rcutils_reset_error>
 800a592:	e7bb      	b.n	800a50c <_rclc_take_new_data+0x44>
 800a594:	6840      	ldr	r0, [r0, #4]
 800a596:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d17d      	bne.n	800a69a <_rclc_take_new_data+0x1d2>
 800a59e:	69c3      	ldr	r3, [r0, #28]
 800a5a0:	b11b      	cbz	r3, 800a5aa <_rclc_take_new_data+0xe2>
 800a5a2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d144      	bne.n	800a634 <_rclc_take_new_data+0x16c>
 800a5aa:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	f040 80ac 	bne.w	800a70c <_rclc_take_new_data+0x244>
 800a5b4:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d0a6      	beq.n	800a50a <_rclc_take_new_data+0x42>
 800a5bc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800a5be:	a90a      	add	r1, sp, #40	; 0x28
 800a5c0:	3010      	adds	r0, #16
 800a5c2:	f008 fad9 	bl	8012b78 <rcl_action_take_result_response>
 800a5c6:	4605      	mov	r5, r0
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d1e0      	bne.n	800a58e <_rclc_take_new_data+0xc6>
 800a5cc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a5d0:	6860      	ldr	r0, [r4, #4]
 800a5d2:	f008 ff33 	bl	801343c <rclc_action_find_handle_by_result_request_sequence_number>
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	d098      	beq.n	800a50c <_rclc_take_new_data+0x44>
 800a5da:	2301      	movs	r3, #1
 800a5dc:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 800a5e0:	e794      	b.n	800a50c <_rclc_take_new_data+0x44>
 800a5e2:	250b      	movs	r5, #11
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	b01b      	add	sp, #108	; 0x6c
 800a5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ea:	ae04      	add	r6, sp, #16
 800a5ec:	aa0a      	add	r2, sp, #40	; 0x28
 800a5ee:	3010      	adds	r0, #16
 800a5f0:	4631      	mov	r1, r6
 800a5f2:	f008 fd33 	bl	801305c <rcl_action_take_cancel_request>
 800a5f6:	4605      	mov	r5, r0
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d1c8      	bne.n	800a58e <_rclc_take_new_data+0xc6>
 800a5fc:	6860      	ldr	r0, [r4, #4]
 800a5fe:	a90a      	add	r1, sp, #40	; 0x28
 800a600:	f008 feda 	bl	80133b8 <rclc_action_find_goal_handle_by_uuid>
 800a604:	4607      	mov	r7, r0
 800a606:	2800      	cmp	r0, #0
 800a608:	f000 80bb 	beq.w	800a782 <_rclc_take_new_data+0x2ba>
 800a60c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800a610:	2101      	movs	r1, #1
 800a612:	f008 fe5b 	bl	80132cc <rcl_action_transition_goal_state>
 800a616:	2803      	cmp	r0, #3
 800a618:	4684      	mov	ip, r0
 800a61a:	f040 80a7 	bne.w	800a76c <_rclc_take_new_data+0x2a4>
 800a61e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a620:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800a624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a626:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a62a:	e884 0003 	stmia.w	r4, {r0, r1}
 800a62e:	f887 c008 	strb.w	ip, [r7, #8]
 800a632:	e76b      	b.n	800a50c <_rclc_take_new_data+0x44>
 800a634:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a636:	3010      	adds	r0, #16
 800a638:	f008 fb1e 	bl	8012c78 <rcl_action_take_feedback>
 800a63c:	4605      	mov	r5, r0
 800a63e:	2800      	cmp	r0, #0
 800a640:	d1a5      	bne.n	800a58e <_rclc_take_new_data+0xc6>
 800a642:	6860      	ldr	r0, [r4, #4]
 800a644:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a646:	f008 feb7 	bl	80133b8 <rclc_action_find_goal_handle_by_uuid>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2800      	cmp	r0, #0
 800a64e:	f000 80a3 	beq.w	800a798 <_rclc_take_new_data+0x2d0>
 800a652:	2201      	movs	r2, #1
 800a654:	6860      	ldr	r0, [r4, #4]
 800a656:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800a65a:	e7a6      	b.n	800a5aa <_rclc_take_new_data+0xe2>
 800a65c:	f008 fe86 	bl	801336c <rclc_action_take_goal_handle>
 800a660:	4606      	mov	r6, r0
 800a662:	6860      	ldr	r0, [r4, #4]
 800a664:	2e00      	cmp	r6, #0
 800a666:	f43f af47 	beq.w	800a4f8 <_rclc_take_new_data+0x30>
 800a66a:	6070      	str	r0, [r6, #4]
 800a66c:	69f2      	ldr	r2, [r6, #28]
 800a66e:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800a672:	3010      	adds	r0, #16
 800a674:	f008 fc3c 	bl	8012ef0 <rcl_action_take_goal_request>
 800a678:	4605      	mov	r5, r0
 800a67a:	2800      	cmp	r0, #0
 800a67c:	f040 808e 	bne.w	800a79c <_rclc_take_new_data+0x2d4>
 800a680:	69f7      	ldr	r7, [r6, #28]
 800a682:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a684:	7235      	strb	r5, [r6, #8]
 800a686:	f8c6 0009 	str.w	r0, [r6, #9]
 800a68a:	f8c6 100d 	str.w	r1, [r6, #13]
 800a68e:	6860      	ldr	r0, [r4, #4]
 800a690:	f8c6 2011 	str.w	r2, [r6, #17]
 800a694:	f8c6 3015 	str.w	r3, [r6, #21]
 800a698:	e72e      	b.n	800a4f8 <_rclc_take_new_data+0x30>
 800a69a:	aa04      	add	r2, sp, #16
 800a69c:	a90a      	add	r1, sp, #40	; 0x28
 800a69e:	3010      	adds	r0, #16
 800a6a0:	f008 f9f2 	bl	8012a88 <rcl_action_take_goal_response>
 800a6a4:	4605      	mov	r5, r0
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	f47f af71 	bne.w	800a58e <_rclc_take_new_data+0xc6>
 800a6ac:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a6b0:	6860      	ldr	r0, [r4, #4]
 800a6b2:	f008 feb1 	bl	8013418 <rclc_action_find_handle_by_goal_request_sequence_number>
 800a6b6:	b130      	cbz	r0, 800a6c6 <_rclc_take_new_data+0x1fe>
 800a6b8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a6bc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f880 2020 	strb.w	r2, [r0, #32]
 800a6c6:	6860      	ldr	r0, [r4, #4]
 800a6c8:	e769      	b.n	800a59e <_rclc_take_new_data+0xd6>
 800a6ca:	aa04      	add	r2, sp, #16
 800a6cc:	3010      	adds	r0, #16
 800a6ce:	a90a      	add	r1, sp, #40	; 0x28
 800a6d0:	f008 fc84 	bl	8012fdc <rcl_action_take_result_request>
 800a6d4:	4605      	mov	r5, r0
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	f47f af59 	bne.w	800a58e <_rclc_take_new_data+0xc6>
 800a6dc:	6860      	ldr	r0, [r4, #4]
 800a6de:	a904      	add	r1, sp, #16
 800a6e0:	f008 fe6a 	bl	80133b8 <rclc_action_find_goal_handle_by_uuid>
 800a6e4:	4607      	mov	r7, r0
 800a6e6:	b160      	cbz	r0, 800a702 <_rclc_take_new_data+0x23a>
 800a6e8:	ad0a      	add	r5, sp, #40	; 0x28
 800a6ea:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800a6ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a6f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a6f6:	f04f 0c02 	mov.w	ip, #2
 800a6fa:	e886 0003 	stmia.w	r6, {r0, r1}
 800a6fe:	f887 c008 	strb.w	ip, [r7, #8]
 800a702:	6860      	ldr	r0, [r4, #4]
 800a704:	2300      	movs	r3, #0
 800a706:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800a70a:	e6fa      	b.n	800a502 <_rclc_take_new_data+0x3a>
 800a70c:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800a710:	a90a      	add	r1, sp, #40	; 0x28
 800a712:	3010      	adds	r0, #16
 800a714:	f008 fa70 	bl	8012bf8 <rcl_action_take_cancel_response>
 800a718:	4605      	mov	r5, r0
 800a71a:	2800      	cmp	r0, #0
 800a71c:	f47f af37 	bne.w	800a58e <_rclc_take_new_data+0xc6>
 800a720:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a724:	6860      	ldr	r0, [r4, #4]
 800a726:	f008 fe9b 	bl	8013460 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800a72a:	4606      	mov	r6, r0
 800a72c:	6860      	ldr	r0, [r4, #4]
 800a72e:	2e00      	cmp	r6, #0
 800a730:	f43f af40 	beq.w	800a5b4 <_rclc_take_new_data+0xec>
 800a734:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a736:	2701      	movs	r7, #1
 800a738:	84b7      	strh	r7, [r6, #36]	; 0x24
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f43f af3a 	beq.w	800a5b4 <_rclc_take_new_data+0xec>
 800a740:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a742:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a746:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a74a:	f008 fe35 	bl	80133b8 <rclc_action_find_goal_handle_by_uuid>
 800a74e:	b138      	cbz	r0, 800a760 <_rclc_take_new_data+0x298>
 800a750:	6860      	ldr	r0, [r4, #4]
 800a752:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a754:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800a758:	3501      	adds	r5, #1
 800a75a:	42ab      	cmp	r3, r5
 800a75c:	d8f0      	bhi.n	800a740 <_rclc_take_new_data+0x278>
 800a75e:	e729      	b.n	800a5b4 <_rclc_take_new_data+0xec>
 800a760:	6860      	ldr	r0, [r4, #4]
 800a762:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a764:	3501      	adds	r5, #1
 800a766:	42ab      	cmp	r3, r5
 800a768:	d8ea      	bhi.n	800a740 <_rclc_take_new_data+0x278>
 800a76a:	e723      	b.n	800a5b4 <_rclc_take_new_data+0xec>
 800a76c:	ab06      	add	r3, sp, #24
 800a76e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a770:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a774:	2103      	movs	r1, #3
 800a776:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a77a:	6860      	ldr	r0, [r4, #4]
 800a77c:	f008 fee4 	bl	8013548 <rclc_action_server_goal_cancel_reject>
 800a780:	e6c4      	b.n	800a50c <_rclc_take_new_data+0x44>
 800a782:	ab06      	add	r3, sp, #24
 800a784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a786:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a78a:	2102      	movs	r1, #2
 800a78c:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a790:	6860      	ldr	r0, [r4, #4]
 800a792:	f008 fed9 	bl	8013548 <rclc_action_server_goal_cancel_reject>
 800a796:	e6b9      	b.n	800a50c <_rclc_take_new_data+0x44>
 800a798:	6860      	ldr	r0, [r4, #4]
 800a79a:	e706      	b.n	800a5aa <_rclc_take_new_data+0xe2>
 800a79c:	6860      	ldr	r0, [r4, #4]
 800a79e:	4631      	mov	r1, r6
 800a7a0:	f008 fdf4 	bl	801338c <rclc_action_remove_used_goal_handle>
 800a7a4:	f000 fdb0 	bl	800b308 <rcutils_reset_error>
 800a7a8:	e6b0      	b.n	800a50c <_rclc_take_new_data+0x44>
 800a7aa:	2501      	movs	r5, #1
 800a7ac:	e6ae      	b.n	800a50c <_rclc_take_new_data+0x44>
 800a7ae:	bf00      	nop

0800a7b0 <_rclc_execute.part.0>:
 800a7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7b2:	7803      	ldrb	r3, [r0, #0]
 800a7b4:	b087      	sub	sp, #28
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	2b0a      	cmp	r3, #10
 800a7ba:	f200 8136 	bhi.w	800aa2a <_rclc_execute.part.0+0x27a>
 800a7be:	e8df f003 	tbb	[pc, r3]
 800a7c2:	435e      	.short	0x435e
 800a7c4:	06a1664f 	.word	0x06a1664f
 800a7c8:	6c1e0606 	.word	0x6c1e0606
 800a7cc:	59          	.byte	0x59
 800a7cd:	00          	.byte	0x00
 800a7ce:	2b06      	cmp	r3, #6
 800a7d0:	f000 8122 	beq.w	800aa18 <_rclc_execute.part.0+0x268>
 800a7d4:	2b07      	cmp	r3, #7
 800a7d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a7d8:	f040 8118 	bne.w	800aa0c <_rclc_execute.part.0+0x25c>
 800a7dc:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800a7e0:	6880      	ldr	r0, [r0, #8]
 800a7e2:	4798      	blx	r3
 800a7e4:	f104 0110 	add.w	r1, r4, #16
 800a7e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a7ea:	6860      	ldr	r0, [r4, #4]
 800a7ec:	f007 f808 	bl	8011800 <rcl_send_response>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d033      	beq.n	800a85c <_rclc_execute.part.0+0xac>
 800a7f4:	9005      	str	r0, [sp, #20]
 800a7f6:	f000 fd87 	bl	800b308 <rcutils_reset_error>
 800a7fa:	9805      	ldr	r0, [sp, #20]
 800a7fc:	e02e      	b.n	800a85c <_rclc_execute.part.0+0xac>
 800a7fe:	6840      	ldr	r0, [r0, #4]
 800a800:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800a804:	2b00      	cmp	r3, #0
 800a806:	f000 8086 	beq.w	800a916 <_rclc_execute.part.0+0x166>
 800a80a:	2600      	movs	r6, #0
 800a80c:	2701      	movs	r7, #1
 800a80e:	e004      	b.n	800a81a <_rclc_execute.part.0+0x6a>
 800a810:	f008 fd86 	bl	8013320 <rclc_action_send_result_request>
 800a814:	b998      	cbnz	r0, 800a83e <_rclc_execute.part.0+0x8e>
 800a816:	722f      	strb	r7, [r5, #8]
 800a818:	6860      	ldr	r0, [r4, #4]
 800a81a:	f008 fe33 	bl	8013484 <rclc_action_find_first_handle_with_goal_response>
 800a81e:	4605      	mov	r5, r0
 800a820:	2800      	cmp	r0, #0
 800a822:	d077      	beq.n	800a914 <_rclc_execute.part.0+0x164>
 800a824:	6863      	ldr	r3, [r4, #4]
 800a826:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a828:	699b      	ldr	r3, [r3, #24]
 800a82a:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800a82e:	f885 6020 	strb.w	r6, [r5, #32]
 800a832:	4798      	blx	r3
 800a834:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800a838:	4628      	mov	r0, r5
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1e8      	bne.n	800a810 <_rclc_execute.part.0+0x60>
 800a83e:	6860      	ldr	r0, [r4, #4]
 800a840:	4629      	mov	r1, r5
 800a842:	f008 fda3 	bl	801338c <rclc_action_remove_used_goal_handle>
 800a846:	e7e7      	b.n	800a818 <_rclc_execute.part.0+0x68>
 800a848:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800a84c:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800a850:	2d00      	cmp	r5, #0
 800a852:	f000 80c9 	beq.w	800a9e8 <_rclc_execute.part.0+0x238>
 800a856:	6880      	ldr	r0, [r0, #8]
 800a858:	4798      	blx	r3
 800a85a:	2000      	movs	r0, #0
 800a85c:	b007      	add	sp, #28
 800a85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a860:	6840      	ldr	r0, [r0, #4]
 800a862:	f007 f9cf 	bl	8011c04 <rcl_timer_call>
 800a866:	f240 3321 	movw	r3, #801	; 0x321
 800a86a:	4298      	cmp	r0, r3
 800a86c:	d004      	beq.n	800a878 <_rclc_execute.part.0+0xc8>
 800a86e:	2800      	cmp	r0, #0
 800a870:	d0f4      	beq.n	800a85c <_rclc_execute.part.0+0xac>
 800a872:	e7bf      	b.n	800a7f4 <_rclc_execute.part.0+0x44>
 800a874:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a876:	4798      	blx	r3
 800a878:	2000      	movs	r0, #0
 800a87a:	b007      	add	sp, #28
 800a87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a87e:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800a882:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a884:	b925      	cbnz	r5, 800a890 <_rclc_execute.part.0+0xe0>
 800a886:	4628      	mov	r0, r5
 800a888:	4798      	blx	r3
 800a88a:	4628      	mov	r0, r5
 800a88c:	e7e6      	b.n	800a85c <_rclc_execute.part.0+0xac>
 800a88e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a890:	68a0      	ldr	r0, [r4, #8]
 800a892:	4798      	blx	r3
 800a894:	2000      	movs	r0, #0
 800a896:	b007      	add	sp, #28
 800a898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a89a:	6840      	ldr	r0, [r0, #4]
 800a89c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800a8a0:	bb3b      	cbnz	r3, 800a8f2 <_rclc_execute.part.0+0x142>
 800a8a2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d07b      	beq.n	800a9a2 <_rclc_execute.part.0+0x1f2>
 800a8aa:	f640 0634 	movw	r6, #2100	; 0x834
 800a8ae:	2701      	movs	r7, #1
 800a8b0:	e007      	b.n	800a8c2 <_rclc_execute.part.0+0x112>
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	f008 fdfe 	bl	80134b4 <rclc_action_server_response_goal_request>
 800a8b8:	6860      	ldr	r0, [r4, #4]
 800a8ba:	4629      	mov	r1, r5
 800a8bc:	f008 fd66 	bl	801338c <rclc_action_remove_used_goal_handle>
 800a8c0:	6860      	ldr	r0, [r4, #4]
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	f008 fd90 	bl	80133e8 <rclc_action_find_first_handle_by_status>
 800a8c8:	4605      	mov	r5, r0
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	d066      	beq.n	800a99c <_rclc_execute.part.0+0x1ec>
 800a8ce:	6863      	ldr	r3, [r4, #4]
 800a8d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a8d2:	699b      	ldr	r3, [r3, #24]
 800a8d4:	4798      	blx	r3
 800a8d6:	42b0      	cmp	r0, r6
 800a8d8:	f04f 0100 	mov.w	r1, #0
 800a8dc:	d1e9      	bne.n	800a8b2 <_rclc_execute.part.0+0x102>
 800a8de:	2101      	movs	r1, #1
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	f008 fde7 	bl	80134b4 <rclc_action_server_response_goal_request>
 800a8e6:	722f      	strb	r7, [r5, #8]
 800a8e8:	e7ea      	b.n	800a8c0 <_rclc_execute.part.0+0x110>
 800a8ea:	6848      	ldr	r0, [r1, #4]
 800a8ec:	f008 fd4e 	bl	801338c <rclc_action_remove_used_goal_handle>
 800a8f0:	6860      	ldr	r0, [r4, #4]
 800a8f2:	f008 fd85 	bl	8013400 <rclc_action_find_first_terminated_handle>
 800a8f6:	4601      	mov	r1, r0
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	d1f6      	bne.n	800a8ea <_rclc_execute.part.0+0x13a>
 800a8fc:	6860      	ldr	r0, [r4, #4]
 800a8fe:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800a902:	e7ce      	b.n	800a8a2 <_rclc_execute.part.0+0xf2>
 800a904:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a906:	6880      	ldr	r0, [r0, #8]
 800a908:	f104 0110 	add.w	r1, r4, #16
 800a90c:	4798      	blx	r3
 800a90e:	2000      	movs	r0, #0
 800a910:	b007      	add	sp, #28
 800a912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a914:	6860      	ldr	r0, [r4, #4]
 800a916:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a91a:	b18b      	cbz	r3, 800a940 <_rclc_execute.part.0+0x190>
 800a91c:	68c5      	ldr	r5, [r0, #12]
 800a91e:	b32d      	cbz	r5, 800a96c <_rclc_execute.part.0+0x1bc>
 800a920:	2600      	movs	r6, #0
 800a922:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800a926:	b143      	cbz	r3, 800a93a <_rclc_execute.part.0+0x18a>
 800a928:	69c3      	ldr	r3, [r0, #28]
 800a92a:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800a92e:	b123      	cbz	r3, 800a93a <_rclc_execute.part.0+0x18a>
 800a930:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a932:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a934:	4628      	mov	r0, r5
 800a936:	4798      	blx	r3
 800a938:	6860      	ldr	r0, [r4, #4]
 800a93a:	682d      	ldr	r5, [r5, #0]
 800a93c:	2d00      	cmp	r5, #0
 800a93e:	d1f0      	bne.n	800a922 <_rclc_execute.part.0+0x172>
 800a940:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800a944:	b193      	cbz	r3, 800a96c <_rclc_execute.part.0+0x1bc>
 800a946:	68c5      	ldr	r5, [r0, #12]
 800a948:	b185      	cbz	r5, 800a96c <_rclc_execute.part.0+0x1bc>
 800a94a:	2600      	movs	r6, #0
 800a94c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800a950:	b14b      	cbz	r3, 800a966 <_rclc_execute.part.0+0x1b6>
 800a952:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a954:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800a958:	b12b      	cbz	r3, 800a966 <_rclc_execute.part.0+0x1b6>
 800a95a:	4628      	mov	r0, r5
 800a95c:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800a960:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a962:	4798      	blx	r3
 800a964:	6860      	ldr	r0, [r4, #4]
 800a966:	682d      	ldr	r5, [r5, #0]
 800a968:	2d00      	cmp	r5, #0
 800a96a:	d1ef      	bne.n	800a94c <_rclc_execute.part.0+0x19c>
 800a96c:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800a970:	2b00      	cmp	r3, #0
 800a972:	d081      	beq.n	800a878 <_rclc_execute.part.0+0xc8>
 800a974:	2700      	movs	r7, #0
 800a976:	e00b      	b.n	800a990 <_rclc_execute.part.0+0x1e0>
 800a978:	6863      	ldr	r3, [r4, #4]
 800a97a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a97c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a97e:	6a1e      	ldr	r6, [r3, #32]
 800a980:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800a984:	47b0      	blx	r6
 800a986:	6860      	ldr	r0, [r4, #4]
 800a988:	4629      	mov	r1, r5
 800a98a:	f008 fcff 	bl	801338c <rclc_action_remove_used_goal_handle>
 800a98e:	6860      	ldr	r0, [r4, #4]
 800a990:	f008 fd84 	bl	801349c <rclc_action_find_first_handle_with_result_response>
 800a994:	4605      	mov	r5, r0
 800a996:	2800      	cmp	r0, #0
 800a998:	d1ee      	bne.n	800a978 <_rclc_execute.part.0+0x1c8>
 800a99a:	e76d      	b.n	800a878 <_rclc_execute.part.0+0xc8>
 800a99c:	6860      	ldr	r0, [r4, #4]
 800a99e:	f880 5020 	strb.w	r5, [r0, #32]
 800a9a2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f43f af66 	beq.w	800a878 <_rclc_execute.part.0+0xc8>
 800a9ac:	68c5      	ldr	r5, [r0, #12]
 800a9ae:	b1b5      	cbz	r5, 800a9de <_rclc_execute.part.0+0x22e>
 800a9b0:	2602      	movs	r6, #2
 800a9b2:	e001      	b.n	800a9b8 <_rclc_execute.part.0+0x208>
 800a9b4:	682d      	ldr	r5, [r5, #0]
 800a9b6:	b195      	cbz	r5, 800a9de <_rclc_execute.part.0+0x22e>
 800a9b8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800a9bc:	2b03      	cmp	r3, #3
 800a9be:	d1f9      	bne.n	800a9b4 <_rclc_execute.part.0+0x204>
 800a9c0:	69c3      	ldr	r3, [r0, #28]
 800a9c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	4798      	blx	r3
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800a9d4:	b163      	cbz	r3, 800a9f0 <_rclc_execute.part.0+0x240>
 800a9d6:	f008 fd8b 	bl	80134f0 <rclc_action_server_goal_cancel_accept>
 800a9da:	6860      	ldr	r0, [r4, #4]
 800a9dc:	e7ea      	b.n	800a9b4 <_rclc_execute.part.0+0x204>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	e739      	b.n	800a85c <_rclc_execute.part.0+0xac>
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	4798      	blx	r3
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	e735      	b.n	800a85c <_rclc_execute.part.0+0xac>
 800a9f0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a9f2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a9f6:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800a9fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9fe:	6860      	ldr	r0, [r4, #4]
 800aa00:	2101      	movs	r1, #1
 800aa02:	f008 fda1 	bl	8013548 <rclc_action_server_goal_cancel_reject>
 800aa06:	722e      	strb	r6, [r5, #8]
 800aa08:	6860      	ldr	r0, [r4, #4]
 800aa0a:	e7d3      	b.n	800a9b4 <_rclc_execute.part.0+0x204>
 800aa0c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800aa0e:	6880      	ldr	r0, [r0, #8]
 800aa10:	4798      	blx	r3
 800aa12:	f104 0110 	add.w	r1, r4, #16
 800aa16:	e6e7      	b.n	800a7e8 <_rclc_execute.part.0+0x38>
 800aa18:	f100 0110 	add.w	r1, r0, #16
 800aa1c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800aa1e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800aa20:	6880      	ldr	r0, [r0, #8]
 800aa22:	9105      	str	r1, [sp, #20]
 800aa24:	4798      	blx	r3
 800aa26:	9905      	ldr	r1, [sp, #20]
 800aa28:	e6de      	b.n	800a7e8 <_rclc_execute.part.0+0x38>
 800aa2a:	2001      	movs	r0, #1
 800aa2c:	e716      	b.n	800a85c <_rclc_execute.part.0+0xac>
 800aa2e:	bf00      	nop

0800aa30 <rclc_executor_trigger_any>:
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d03f      	beq.n	800aab4 <rclc_executor_trigger_any+0x84>
 800aa34:	2900      	cmp	r1, #0
 800aa36:	d03e      	beq.n	800aab6 <rclc_executor_trigger_any+0x86>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800aa3e:	2200      	movs	r2, #0
 800aa40:	2800      	cmp	r0, #0
 800aa42:	d037      	beq.n	800aab4 <rclc_executor_trigger_any+0x84>
 800aa44:	b430      	push	{r4, r5}
 800aa46:	f893 c000 	ldrb.w	ip, [r3]
 800aa4a:	f1bc 0f08 	cmp.w	ip, #8
 800aa4e:	d11e      	bne.n	800aa8e <rclc_executor_trigger_any+0x5e>
 800aa50:	685c      	ldr	r4, [r3, #4]
 800aa52:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800aa54:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800aa58:	d105      	bne.n	800aa66 <rclc_executor_trigger_any+0x36>
 800aa5a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800aa5e:	b910      	cbnz	r0, 800aa66 <rclc_executor_trigger_any+0x36>
 800aa60:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800aa64:	b128      	cbz	r0, 800aa72 <rclc_executor_trigger_any+0x42>
 800aa66:	bc30      	pop	{r4, r5}
 800aa68:	4770      	bx	lr
 800aa6a:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d1f9      	bne.n	800aa66 <rclc_executor_trigger_any+0x36>
 800aa72:	3201      	adds	r2, #1
 800aa74:	4291      	cmp	r1, r2
 800aa76:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800aa7a:	d018      	beq.n	800aaae <rclc_executor_trigger_any+0x7e>
 800aa7c:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d0f0      	beq.n	800aa66 <rclc_executor_trigger_any+0x36>
 800aa84:	f893 c000 	ldrb.w	ip, [r3]
 800aa88:	f1bc 0f08 	cmp.w	ip, #8
 800aa8c:	d0e0      	beq.n	800aa50 <rclc_executor_trigger_any+0x20>
 800aa8e:	f1bc 0f09 	cmp.w	ip, #9
 800aa92:	d1ea      	bne.n	800aa6a <rclc_executor_trigger_any+0x3a>
 800aa94:	685c      	ldr	r4, [r3, #4]
 800aa96:	6a25      	ldr	r5, [r4, #32]
 800aa98:	2d00      	cmp	r5, #0
 800aa9a:	d1e4      	bne.n	800aa66 <rclc_executor_trigger_any+0x36>
 800aa9c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	d1e0      	bne.n	800aa66 <rclc_executor_trigger_any+0x36>
 800aaa4:	3201      	adds	r2, #1
 800aaa6:	4291      	cmp	r1, r2
 800aaa8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800aaac:	d1e6      	bne.n	800aa7c <rclc_executor_trigger_any+0x4c>
 800aaae:	2000      	movs	r0, #0
 800aab0:	bc30      	pop	{r4, r5}
 800aab2:	4770      	bx	lr
 800aab4:	4770      	bx	lr
 800aab6:	4608      	mov	r0, r1
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop

0800aabc <rclc_executor_get_zero_initialized_executor>:
 800aabc:	b510      	push	{r4, lr}
 800aabe:	4903      	ldr	r1, [pc, #12]	; (800aacc <rclc_executor_get_zero_initialized_executor+0x10>)
 800aac0:	4604      	mov	r4, r0
 800aac2:	2288      	movs	r2, #136	; 0x88
 800aac4:	f00c fdbf 	bl	8017646 <memcpy>
 800aac8:	4620      	mov	r0, r4
 800aaca:	bd10      	pop	{r4, pc}
 800aacc:	08018588 	.word	0x08018588

0800aad0 <rclc_executor_init>:
 800aad0:	2800      	cmp	r0, #0
 800aad2:	d05f      	beq.n	800ab94 <rclc_executor_init+0xc4>
 800aad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aad8:	460c      	mov	r4, r1
 800aada:	b0b0      	sub	sp, #192	; 0xc0
 800aadc:	2900      	cmp	r1, #0
 800aade:	d051      	beq.n	800ab84 <rclc_executor_init+0xb4>
 800aae0:	4605      	mov	r5, r0
 800aae2:	4618      	mov	r0, r3
 800aae4:	4616      	mov	r6, r2
 800aae6:	461f      	mov	r7, r3
 800aae8:	f000 fbea 	bl	800b2c0 <rcutils_allocator_is_valid>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	d049      	beq.n	800ab84 <rclc_executor_init+0xb4>
 800aaf0:	2e00      	cmp	r6, #0
 800aaf2:	d047      	beq.n	800ab84 <rclc_executor_init+0xb4>
 800aaf4:	492c      	ldr	r1, [pc, #176]	; (800aba8 <rclc_executor_init+0xd8>)
 800aaf6:	2288      	movs	r2, #136	; 0x88
 800aaf8:	a80e      	add	r0, sp, #56	; 0x38
 800aafa:	f00c fda4 	bl	8017646 <memcpy>
 800aafe:	a90e      	add	r1, sp, #56	; 0x38
 800ab00:	2288      	movs	r2, #136	; 0x88
 800ab02:	4628      	mov	r0, r5
 800ab04:	f00c fd9f 	bl	8017646 <memcpy>
 800ab08:	602c      	str	r4, [r5, #0]
 800ab0a:	4668      	mov	r0, sp
 800ab0c:	60ae      	str	r6, [r5, #8]
 800ab0e:	466c      	mov	r4, sp
 800ab10:	f007 f9ea 	bl	8011ee8 <rcl_get_zero_initialized_wait_set>
 800ab14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab16:	f105 0c14 	add.w	ip, r5, #20
 800ab1a:	f8d7 8000 	ldr.w	r8, [r7]
 800ab1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab2e:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 800aba0 <rclc_executor_init+0xd0>
 800ab32:	6823      	ldr	r3, [r4, #0]
 800ab34:	f8cc 3000 	str.w	r3, [ip]
 800ab38:	6939      	ldr	r1, [r7, #16]
 800ab3a:	612f      	str	r7, [r5, #16]
 800ab3c:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 800ab40:	01b0      	lsls	r0, r6, #6
 800ab42:	47c0      	blx	r8
 800ab44:	6068      	str	r0, [r5, #4]
 800ab46:	b338      	cbz	r0, 800ab98 <rclc_executor_init+0xc8>
 800ab48:	2400      	movs	r4, #0
 800ab4a:	e000      	b.n	800ab4e <rclc_executor_init+0x7e>
 800ab4c:	6868      	ldr	r0, [r5, #4]
 800ab4e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800ab52:	4631      	mov	r1, r6
 800ab54:	3401      	adds	r4, #1
 800ab56:	f000 fa6b 	bl	800b030 <rclc_executor_handle_init>
 800ab5a:	42a6      	cmp	r6, r4
 800ab5c:	d1f6      	bne.n	800ab4c <rclc_executor_init+0x7c>
 800ab5e:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800ab62:	f000 fa5b 	bl	800b01c <rclc_executor_handle_counters_zero_init>
 800ab66:	4a11      	ldr	r2, [pc, #68]	; (800abac <rclc_executor_init+0xdc>)
 800ab68:	686b      	ldr	r3, [r5, #4]
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	e9c5 201e 	strd	r2, r0, [r5, #120]	; 0x78
 800ab70:	b163      	cbz	r3, 800ab8c <rclc_executor_init+0xbc>
 800ab72:	692b      	ldr	r3, [r5, #16]
 800ab74:	b153      	cbz	r3, 800ab8c <rclc_executor_init+0xbc>
 800ab76:	68ab      	ldr	r3, [r5, #8]
 800ab78:	b143      	cbz	r3, 800ab8c <rclc_executor_init+0xbc>
 800ab7a:	f885 0080 	strb.w	r0, [r5, #128]	; 0x80
 800ab7e:	b030      	add	sp, #192	; 0xc0
 800ab80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab84:	200b      	movs	r0, #11
 800ab86:	b030      	add	sp, #192	; 0xc0
 800ab88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	b030      	add	sp, #192	; 0xc0
 800ab90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab94:	200b      	movs	r0, #11
 800ab96:	4770      	bx	lr
 800ab98:	200a      	movs	r0, #10
 800ab9a:	e7f4      	b.n	800ab86 <rclc_executor_init+0xb6>
 800ab9c:	f3af 8000 	nop.w
 800aba0:	3b9aca00 	.word	0x3b9aca00
 800aba4:	00000000 	.word	0x00000000
 800aba8:	08018588 	.word	0x08018588
 800abac:	0800aa31 	.word	0x0800aa31

0800abb0 <rclc_executor_add_subscription>:
 800abb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb2:	f89d e018 	ldrb.w	lr, [sp, #24]
 800abb6:	b338      	cbz	r0, 800ac08 <rclc_executor_add_subscription+0x58>
 800abb8:	b331      	cbz	r1, 800ac08 <rclc_executor_add_subscription+0x58>
 800abba:	b32a      	cbz	r2, 800ac08 <rclc_executor_add_subscription+0x58>
 800abbc:	b323      	cbz	r3, 800ac08 <rclc_executor_add_subscription+0x58>
 800abbe:	4604      	mov	r4, r0
 800abc0:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800abc4:	42a8      	cmp	r0, r5
 800abc6:	d301      	bcc.n	800abcc <rclc_executor_add_subscription+0x1c>
 800abc8:	2001      	movs	r0, #1
 800abca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abcc:	6866      	ldr	r6, [r4, #4]
 800abce:	0187      	lsls	r7, r0, #6
 800abd0:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800abd4:	2500      	movs	r5, #0
 800abd6:	55f5      	strb	r5, [r6, r7]
 800abd8:	3001      	adds	r0, #1
 800abda:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
 800abde:	f8cc 502c 	str.w	r5, [ip, #44]	; 0x2c
 800abe2:	2301      	movs	r3, #1
 800abe4:	f104 0514 	add.w	r5, r4, #20
 800abe8:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800abec:	f88c e001 	strb.w	lr, [ip, #1]
 800abf0:	f8ac 3038 	strh.w	r3, [ip, #56]	; 0x38
 800abf4:	60e0      	str	r0, [r4, #12]
 800abf6:	4628      	mov	r0, r5
 800abf8:	f007 f98a 	bl	8011f10 <rcl_wait_set_is_valid>
 800abfc:	b930      	cbnz	r0, 800ac0c <rclc_executor_add_subscription+0x5c>
 800abfe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ac00:	3301      	adds	r3, #1
 800ac02:	2000      	movs	r0, #0
 800ac04:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac08:	200b      	movs	r0, #11
 800ac0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	f007 f985 	bl	8011f1c <rcl_wait_set_fini>
 800ac12:	2800      	cmp	r0, #0
 800ac14:	d0f3      	beq.n	800abfe <rclc_executor_add_subscription+0x4e>
 800ac16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ac18 <rclc_executor_prepare>:
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	d044      	beq.n	800aca6 <rclc_executor_prepare+0x8e>
 800ac1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac1e:	f100 0514 	add.w	r5, r0, #20
 800ac22:	b09b      	sub	sp, #108	; 0x6c
 800ac24:	4604      	mov	r4, r0
 800ac26:	4628      	mov	r0, r5
 800ac28:	f007 f972 	bl	8011f10 <rcl_wait_set_is_valid>
 800ac2c:	b110      	cbz	r0, 800ac34 <rclc_executor_prepare+0x1c>
 800ac2e:	2000      	movs	r0, #0
 800ac30:	b01b      	add	sp, #108	; 0x6c
 800ac32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac34:	4628      	mov	r0, r5
 800ac36:	f007 f971 	bl	8011f1c <rcl_wait_set_fini>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	d130      	bne.n	800aca0 <rclc_executor_prepare+0x88>
 800ac3e:	a80c      	add	r0, sp, #48	; 0x30
 800ac40:	f007 f952 	bl	8011ee8 <rcl_get_zero_initialized_wait_set>
 800ac44:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800ac48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ac4c:	46ae      	mov	lr, r5
 800ac4e:	6927      	ldr	r7, [r4, #16]
 800ac50:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ac54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ac58:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ac5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ac60:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ac64:	f8dc 3000 	ldr.w	r3, [ip]
 800ac68:	f8ce 3000 	str.w	r3, [lr]
 800ac6c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ac6e:	ae04      	add	r6, sp, #16
 800ac70:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	6822      	ldr	r2, [r4, #0]
 800ac76:	6033      	str	r3, [r6, #0]
 800ac78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac7a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800ac7c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ac80:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 800ac84:	e9cd 2100 	strd	r2, r1, [sp]
 800ac88:	4628      	mov	r0, r5
 800ac8a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ac8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ac8e:	f007 fc43 	bl	8012518 <rcl_wait_set_init>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d0cc      	beq.n	800ac30 <rclc_executor_prepare+0x18>
 800ac96:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac98:	f000 fb36 	bl	800b308 <rcutils_reset_error>
 800ac9c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ac9e:	e7c7      	b.n	800ac30 <rclc_executor_prepare+0x18>
 800aca0:	f000 fb32 	bl	800b308 <rcutils_reset_error>
 800aca4:	e7cb      	b.n	800ac3e <rclc_executor_prepare+0x26>
 800aca6:	200b      	movs	r0, #11
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop

0800acac <rclc_executor_spin_some.part.0>:
 800acac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb0:	f100 0614 	add.w	r6, r0, #20
 800acb4:	b083      	sub	sp, #12
 800acb6:	4691      	mov	r9, r2
 800acb8:	4698      	mov	r8, r3
 800acba:	4605      	mov	r5, r0
 800acbc:	f7ff ffac 	bl	800ac18 <rclc_executor_prepare>
 800acc0:	4630      	mov	r0, r6
 800acc2:	f007 f9f7 	bl	80120b4 <rcl_wait_set_clear>
 800acc6:	4607      	mov	r7, r0
 800acc8:	2800      	cmp	r0, #0
 800acca:	f040 80ed 	bne.w	800aea8 <rclc_executor_spin_some.part.0+0x1fc>
 800acce:	68ab      	ldr	r3, [r5, #8]
 800acd0:	4604      	mov	r4, r0
 800acd2:	b303      	cbz	r3, 800ad16 <rclc_executor_spin_some.part.0+0x6a>
 800acd4:	6869      	ldr	r1, [r5, #4]
 800acd6:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800acda:	01a2      	lsls	r2, r4, #6
 800acdc:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800ace0:	b1cb      	cbz	r3, 800ad16 <rclc_executor_spin_some.part.0+0x6a>
 800ace2:	5c8b      	ldrb	r3, [r1, r2]
 800ace4:	2b0a      	cmp	r3, #10
 800ace6:	f200 80d8 	bhi.w	800ae9a <rclc_executor_spin_some.part.0+0x1ee>
 800acea:	e8df f003 	tbb	[pc, r3]
 800acee:	9c9c      	.short	0x9c9c
 800acf0:	068c8ca7 	.word	0x068c8ca7
 800acf4:	bdc90606 	.word	0xbdc90606
 800acf8:	b2          	.byte	0xb2
 800acf9:	00          	.byte	0x00
 800acfa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800acfe:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800ad02:	4630      	mov	r0, r6
 800ad04:	f007 fd1e 	bl	8012744 <rcl_wait_set_add_service>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	f040 8086 	bne.w	800ae1a <rclc_executor_spin_some.part.0+0x16e>
 800ad0e:	68ab      	ldr	r3, [r5, #8]
 800ad10:	3401      	adds	r4, #1
 800ad12:	429c      	cmp	r4, r3
 800ad14:	d3de      	bcc.n	800acd4 <rclc_executor_spin_some.part.0+0x28>
 800ad16:	4643      	mov	r3, r8
 800ad18:	464a      	mov	r2, r9
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f007 fd40 	bl	80127a0 <rcl_wait>
 800ad20:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f000 80c7 	beq.w	800aeb8 <rclc_executor_spin_some.part.0+0x20c>
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	f040 80b5 	bne.w	800ae9a <rclc_executor_spin_some.part.0+0x1ee>
 800ad30:	68ab      	ldr	r3, [r5, #8]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f000 8159 	beq.w	800afea <rclc_executor_spin_some.part.0+0x33e>
 800ad38:	2400      	movs	r4, #0
 800ad3a:	46a0      	mov	r8, r4
 800ad3c:	f240 1991 	movw	r9, #401	; 0x191
 800ad40:	e00a      	b.n	800ad58 <rclc_executor_spin_some.part.0+0xac>
 800ad42:	f7ff fb73 	bl	800a42c <_rclc_check_for_new_data>
 800ad46:	4604      	mov	r4, r0
 800ad48:	b110      	cbz	r0, 800ad50 <rclc_executor_spin_some.part.0+0xa4>
 800ad4a:	4548      	cmp	r0, r9
 800ad4c:	f040 80b2 	bne.w	800aeb4 <rclc_executor_spin_some.part.0+0x208>
 800ad50:	68ab      	ldr	r3, [r5, #8]
 800ad52:	4598      	cmp	r8, r3
 800ad54:	f080 8126 	bcs.w	800afa4 <rclc_executor_spin_some.part.0+0x2f8>
 800ad58:	686a      	ldr	r2, [r5, #4]
 800ad5a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ad5e:	4631      	mov	r1, r6
 800ad60:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800ad64:	f108 0801 	add.w	r8, r8, #1
 800ad68:	f1bc 0f00 	cmp.w	ip, #0
 800ad6c:	d1e9      	bne.n	800ad42 <rclc_executor_spin_some.part.0+0x96>
 800ad6e:	4619      	mov	r1, r3
 800ad70:	4610      	mov	r0, r2
 800ad72:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800ad76:	4798      	blx	r3
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	f000 809b 	beq.w	800aeb4 <rclc_executor_spin_some.part.0+0x208>
 800ad7e:	68ab      	ldr	r3, [r5, #8]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	f000 8097 	beq.w	800aeb4 <rclc_executor_spin_some.part.0+0x208>
 800ad86:	f04f 0800 	mov.w	r8, #0
 800ad8a:	f240 1991 	movw	r9, #401	; 0x191
 800ad8e:	e009      	b.n	800ada4 <rclc_executor_spin_some.part.0+0xf8>
 800ad90:	f7ff fb9a 	bl	800a4c8 <_rclc_take_new_data>
 800ad94:	4604      	mov	r4, r0
 800ad96:	b110      	cbz	r0, 800ad9e <rclc_executor_spin_some.part.0+0xf2>
 800ad98:	4548      	cmp	r0, r9
 800ad9a:	f040 808b 	bne.w	800aeb4 <rclc_executor_spin_some.part.0+0x208>
 800ad9e:	68ab      	ldr	r3, [r5, #8]
 800ada0:	4598      	cmp	r8, r3
 800ada2:	d209      	bcs.n	800adb8 <rclc_executor_spin_some.part.0+0x10c>
 800ada4:	6868      	ldr	r0, [r5, #4]
 800ada6:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800adaa:	4631      	mov	r1, r6
 800adac:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800adb0:	f108 0801 	add.w	r8, r8, #1
 800adb4:	2a00      	cmp	r2, #0
 800adb6:	d1eb      	bne.n	800ad90 <rclc_executor_spin_some.part.0+0xe4>
 800adb8:	2600      	movs	r6, #0
 800adba:	b97b      	cbnz	r3, 800addc <rclc_executor_spin_some.part.0+0x130>
 800adbc:	e07a      	b.n	800aeb4 <rclc_executor_spin_some.part.0+0x208>
 800adbe:	f812 200c 	ldrb.w	r2, [r2, ip]
 800adc2:	2a08      	cmp	r2, #8
 800adc4:	f000 80fd 	beq.w	800afc2 <rclc_executor_spin_some.part.0+0x316>
 800adc8:	2a09      	cmp	r2, #9
 800adca:	f000 80ef 	beq.w	800afac <rclc_executor_spin_some.part.0+0x300>
 800adce:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800add2:	b98a      	cbnz	r2, 800adf8 <rclc_executor_spin_some.part.0+0x14c>
 800add4:	3601      	adds	r6, #1
 800add6:	429e      	cmp	r6, r3
 800add8:	d262      	bcs.n	800aea0 <rclc_executor_spin_some.part.0+0x1f4>
 800adda:	2400      	movs	r4, #0
 800addc:	686a      	ldr	r2, [r5, #4]
 800adde:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800ade2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800ade6:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800adea:	2900      	cmp	r1, #0
 800adec:	d062      	beq.n	800aeb4 <rclc_executor_spin_some.part.0+0x208>
 800adee:	7841      	ldrb	r1, [r0, #1]
 800adf0:	2900      	cmp	r1, #0
 800adf2:	d0e4      	beq.n	800adbe <rclc_executor_spin_some.part.0+0x112>
 800adf4:	2901      	cmp	r1, #1
 800adf6:	d1ed      	bne.n	800add4 <rclc_executor_spin_some.part.0+0x128>
 800adf8:	f7ff fcda 	bl	800a7b0 <_rclc_execute.part.0>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	f040 80b6 	bne.w	800af6e <rclc_executor_spin_some.part.0+0x2c2>
 800ae02:	68ab      	ldr	r3, [r5, #8]
 800ae04:	e7e6      	b.n	800add4 <rclc_executor_spin_some.part.0+0x128>
 800ae06:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ae0a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800ae0e:	4630      	mov	r0, r6
 800ae10:	f007 fc6c 	bl	80126ec <rcl_wait_set_add_client>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	f43f af7a 	beq.w	800ad0e <rclc_executor_spin_some.part.0+0x62>
 800ae1a:	9001      	str	r0, [sp, #4]
 800ae1c:	f000 fa74 	bl	800b308 <rcutils_reset_error>
 800ae20:	9801      	ldr	r0, [sp, #4]
 800ae22:	4607      	mov	r7, r0
 800ae24:	e03c      	b.n	800aea0 <rclc_executor_spin_some.part.0+0x1f4>
 800ae26:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ae2a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800ae2e:	4630      	mov	r0, r6
 800ae30:	f007 f914 	bl	801205c <rcl_wait_set_add_subscription>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	f43f af6a 	beq.w	800ad0e <rclc_executor_spin_some.part.0+0x62>
 800ae3a:	e7ee      	b.n	800ae1a <rclc_executor_spin_some.part.0+0x16e>
 800ae3c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ae40:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800ae44:	4630      	mov	r0, r6
 800ae46:	f007 fc21 	bl	801268c <rcl_wait_set_add_timer>
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	f43f af5f 	beq.w	800ad0e <rclc_executor_spin_some.part.0+0x62>
 800ae50:	e7e3      	b.n	800ae1a <rclc_executor_spin_some.part.0+0x16e>
 800ae52:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ae56:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	f007 fbea 	bl	8012634 <rcl_wait_set_add_guard_condition>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	f43f af54 	beq.w	800ad0e <rclc_executor_spin_some.part.0+0x62>
 800ae66:	e7d8      	b.n	800ae1a <rclc_executor_spin_some.part.0+0x16e>
 800ae68:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ae6c:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800ae70:	3110      	adds	r1, #16
 800ae72:	4630      	mov	r0, r6
 800ae74:	f008 f96a 	bl	801314c <rcl_action_wait_set_add_action_server>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	f43f af48 	beq.w	800ad0e <rclc_executor_spin_some.part.0+0x62>
 800ae7e:	e7cc      	b.n	800ae1a <rclc_executor_spin_some.part.0+0x16e>
 800ae80:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ae84:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800ae88:	3110      	adds	r1, #16
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	f007 ff37 	bl	8012d00 <rcl_action_wait_set_add_action_client>
 800ae92:	2800      	cmp	r0, #0
 800ae94:	f43f af3b 	beq.w	800ad0e <rclc_executor_spin_some.part.0+0x62>
 800ae98:	e7bf      	b.n	800ae1a <rclc_executor_spin_some.part.0+0x16e>
 800ae9a:	f000 fa35 	bl	800b308 <rcutils_reset_error>
 800ae9e:	2701      	movs	r7, #1
 800aea0:	4638      	mov	r0, r7
 800aea2:	b003      	add	sp, #12
 800aea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea8:	f000 fa2e 	bl	800b308 <rcutils_reset_error>
 800aeac:	4638      	mov	r0, r7
 800aeae:	b003      	add	sp, #12
 800aeb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb4:	4627      	mov	r7, r4
 800aeb6:	e7f3      	b.n	800aea0 <rclc_executor_spin_some.part.0+0x1f4>
 800aeb8:	68ab      	ldr	r3, [r5, #8]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f000 8092 	beq.w	800afe4 <rclc_executor_spin_some.part.0+0x338>
 800aec0:	2400      	movs	r4, #0
 800aec2:	46a0      	mov	r8, r4
 800aec4:	f240 1991 	movw	r9, #401	; 0x191
 800aec8:	e008      	b.n	800aedc <rclc_executor_spin_some.part.0+0x230>
 800aeca:	f7ff faaf 	bl	800a42c <_rclc_check_for_new_data>
 800aece:	4604      	mov	r4, r0
 800aed0:	b108      	cbz	r0, 800aed6 <rclc_executor_spin_some.part.0+0x22a>
 800aed2:	4548      	cmp	r0, r9
 800aed4:	d1ee      	bne.n	800aeb4 <rclc_executor_spin_some.part.0+0x208>
 800aed6:	68ab      	ldr	r3, [r5, #8]
 800aed8:	4598      	cmp	r8, r3
 800aeda:	d265      	bcs.n	800afa8 <rclc_executor_spin_some.part.0+0x2fc>
 800aedc:	686a      	ldr	r2, [r5, #4]
 800aede:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800aee2:	4631      	mov	r1, r6
 800aee4:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800aee8:	f108 0801 	add.w	r8, r8, #1
 800aeec:	f1bc 0f00 	cmp.w	ip, #0
 800aef0:	d1eb      	bne.n	800aeca <rclc_executor_spin_some.part.0+0x21e>
 800aef2:	4619      	mov	r1, r3
 800aef4:	4610      	mov	r0, r2
 800aef6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800aefa:	4798      	blx	r3
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d0d9      	beq.n	800aeb4 <rclc_executor_spin_some.part.0+0x208>
 800af00:	68ab      	ldr	r3, [r5, #8]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d0d6      	beq.n	800aeb4 <rclc_executor_spin_some.part.0+0x208>
 800af06:	f04f 0800 	mov.w	r8, #0
 800af0a:	f240 1991 	movw	r9, #401	; 0x191
 800af0e:	f240 2a59 	movw	sl, #601	; 0x259
 800af12:	e00e      	b.n	800af32 <rclc_executor_spin_some.part.0+0x286>
 800af14:	f813 300b 	ldrb.w	r3, [r3, fp]
 800af18:	2b08      	cmp	r3, #8
 800af1a:	d033      	beq.n	800af84 <rclc_executor_spin_some.part.0+0x2d8>
 800af1c:	2b09      	cmp	r3, #9
 800af1e:	d028      	beq.n	800af72 <rclc_executor_spin_some.part.0+0x2c6>
 800af20:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800af24:	b9fb      	cbnz	r3, 800af66 <rclc_executor_spin_some.part.0+0x2ba>
 800af26:	68ab      	ldr	r3, [r5, #8]
 800af28:	f108 0801 	add.w	r8, r8, #1
 800af2c:	4598      	cmp	r8, r3
 800af2e:	d2b7      	bcs.n	800aea0 <rclc_executor_spin_some.part.0+0x1f4>
 800af30:	2400      	movs	r4, #0
 800af32:	6868      	ldr	r0, [r5, #4]
 800af34:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800af38:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800af3c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800af40:	2b00      	cmp	r3, #0
 800af42:	d0b7      	beq.n	800aeb4 <rclc_executor_spin_some.part.0+0x208>
 800af44:	4631      	mov	r1, r6
 800af46:	f7ff fabf 	bl	800a4c8 <_rclc_take_new_data>
 800af4a:	b118      	cbz	r0, 800af54 <rclc_executor_spin_some.part.0+0x2a8>
 800af4c:	4548      	cmp	r0, r9
 800af4e:	d001      	beq.n	800af54 <rclc_executor_spin_some.part.0+0x2a8>
 800af50:	4550      	cmp	r0, sl
 800af52:	d10c      	bne.n	800af6e <rclc_executor_spin_some.part.0+0x2c2>
 800af54:	686b      	ldr	r3, [r5, #4]
 800af56:	eb13 000b 	adds.w	r0, r3, fp
 800af5a:	d021      	beq.n	800afa0 <rclc_executor_spin_some.part.0+0x2f4>
 800af5c:	7842      	ldrb	r2, [r0, #1]
 800af5e:	2a00      	cmp	r2, #0
 800af60:	d0d8      	beq.n	800af14 <rclc_executor_spin_some.part.0+0x268>
 800af62:	2a01      	cmp	r2, #1
 800af64:	d1df      	bne.n	800af26 <rclc_executor_spin_some.part.0+0x27a>
 800af66:	f7ff fc23 	bl	800a7b0 <_rclc_execute.part.0>
 800af6a:	2800      	cmp	r0, #0
 800af6c:	d0db      	beq.n	800af26 <rclc_executor_spin_some.part.0+0x27a>
 800af6e:	4607      	mov	r7, r0
 800af70:	e796      	b.n	800aea0 <rclc_executor_spin_some.part.0+0x1f4>
 800af72:	6843      	ldr	r3, [r0, #4]
 800af74:	6a1a      	ldr	r2, [r3, #32]
 800af76:	2a00      	cmp	r2, #0
 800af78:	d1f5      	bne.n	800af66 <rclc_executor_spin_some.part.0+0x2ba>
 800af7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d0d1      	beq.n	800af26 <rclc_executor_spin_some.part.0+0x27a>
 800af82:	e7f0      	b.n	800af66 <rclc_executor_spin_some.part.0+0x2ba>
 800af84:	6843      	ldr	r3, [r0, #4]
 800af86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af88:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800af8c:	d1eb      	bne.n	800af66 <rclc_executor_spin_some.part.0+0x2ba>
 800af8e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800af92:	2a00      	cmp	r2, #0
 800af94:	d1e7      	bne.n	800af66 <rclc_executor_spin_some.part.0+0x2ba>
 800af96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d0c3      	beq.n	800af26 <rclc_executor_spin_some.part.0+0x27a>
 800af9e:	e7e2      	b.n	800af66 <rclc_executor_spin_some.part.0+0x2ba>
 800afa0:	270b      	movs	r7, #11
 800afa2:	e77d      	b.n	800aea0 <rclc_executor_spin_some.part.0+0x1f4>
 800afa4:	686a      	ldr	r2, [r5, #4]
 800afa6:	e6e2      	b.n	800ad6e <rclc_executor_spin_some.part.0+0xc2>
 800afa8:	686a      	ldr	r2, [r5, #4]
 800afaa:	e7a2      	b.n	800aef2 <rclc_executor_spin_some.part.0+0x246>
 800afac:	6842      	ldr	r2, [r0, #4]
 800afae:	6a11      	ldr	r1, [r2, #32]
 800afb0:	2900      	cmp	r1, #0
 800afb2:	f47f af21 	bne.w	800adf8 <rclc_executor_spin_some.part.0+0x14c>
 800afb6:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800afba:	2a00      	cmp	r2, #0
 800afbc:	f43f af0a 	beq.w	800add4 <rclc_executor_spin_some.part.0+0x128>
 800afc0:	e71a      	b.n	800adf8 <rclc_executor_spin_some.part.0+0x14c>
 800afc2:	6842      	ldr	r2, [r0, #4]
 800afc4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800afc6:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800afca:	f47f af15 	bne.w	800adf8 <rclc_executor_spin_some.part.0+0x14c>
 800afce:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800afd2:	2900      	cmp	r1, #0
 800afd4:	f47f af10 	bne.w	800adf8 <rclc_executor_spin_some.part.0+0x14c>
 800afd8:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800afdc:	2a00      	cmp	r2, #0
 800afde:	f43f aef9 	beq.w	800add4 <rclc_executor_spin_some.part.0+0x128>
 800afe2:	e709      	b.n	800adf8 <rclc_executor_spin_some.part.0+0x14c>
 800afe4:	686a      	ldr	r2, [r5, #4]
 800afe6:	461c      	mov	r4, r3
 800afe8:	e783      	b.n	800aef2 <rclc_executor_spin_some.part.0+0x246>
 800afea:	686a      	ldr	r2, [r5, #4]
 800afec:	461c      	mov	r4, r3
 800afee:	e6be      	b.n	800ad6e <rclc_executor_spin_some.part.0+0xc2>

0800aff0 <rclc_executor_spin_some>:
 800aff0:	b190      	cbz	r0, 800b018 <rclc_executor_spin_some+0x28>
 800aff2:	b570      	push	{r4, r5, r6, lr}
 800aff4:	4604      	mov	r4, r0
 800aff6:	6800      	ldr	r0, [r0, #0]
 800aff8:	4616      	mov	r6, r2
 800affa:	461d      	mov	r5, r3
 800affc:	f005 fde8 	bl	8010bd0 <rcl_context_is_valid>
 800b000:	b130      	cbz	r0, 800b010 <rclc_executor_spin_some+0x20>
 800b002:	4632      	mov	r2, r6
 800b004:	462b      	mov	r3, r5
 800b006:	4620      	mov	r0, r4
 800b008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b00c:	f7ff be4e 	b.w	800acac <rclc_executor_spin_some.part.0>
 800b010:	f000 f97a 	bl	800b308 <rcutils_reset_error>
 800b014:	2001      	movs	r0, #1
 800b016:	bd70      	pop	{r4, r5, r6, pc}
 800b018:	200b      	movs	r0, #11
 800b01a:	4770      	bx	lr

0800b01c <rclc_executor_handle_counters_zero_init>:
 800b01c:	b130      	cbz	r0, 800b02c <rclc_executor_handle_counters_zero_init+0x10>
 800b01e:	b508      	push	{r3, lr}
 800b020:	2220      	movs	r2, #32
 800b022:	2100      	movs	r1, #0
 800b024:	f00c f9f0 	bl	8017408 <memset>
 800b028:	2000      	movs	r0, #0
 800b02a:	bd08      	pop	{r3, pc}
 800b02c:	200b      	movs	r0, #11
 800b02e:	4770      	bx	lr

0800b030 <rclc_executor_handle_init>:
 800b030:	b168      	cbz	r0, 800b04e <rclc_executor_handle_init+0x1e>
 800b032:	ed9f 7b09 	vldr	d7, [pc, #36]	; 800b058 <rclc_executor_handle_init+0x28>
 800b036:	2300      	movs	r3, #0
 800b038:	220b      	movs	r2, #11
 800b03a:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
 800b03e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800b042:	e9c0 310c 	strd	r3, r1, [r0, #48]	; 0x30
 800b046:	8002      	strh	r2, [r0, #0]
 800b048:	8703      	strh	r3, [r0, #56]	; 0x38
 800b04a:	4618      	mov	r0, r3
 800b04c:	4770      	bx	lr
 800b04e:	200b      	movs	r0, #11
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	f3af 8000 	nop.w
	...

0800b060 <rclc_support_init>:
 800b060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b064:	b086      	sub	sp, #24
 800b066:	b3b8      	cbz	r0, 800b0d8 <rclc_support_init+0x78>
 800b068:	461c      	mov	r4, r3
 800b06a:	b3ab      	cbz	r3, 800b0d8 <rclc_support_init+0x78>
 800b06c:	460f      	mov	r7, r1
 800b06e:	4690      	mov	r8, r2
 800b070:	4606      	mov	r6, r0
 800b072:	f005 ff17 	bl	8010ea4 <rcl_get_zero_initialized_init_options>
 800b076:	f104 030c 	add.w	r3, r4, #12
 800b07a:	9005      	str	r0, [sp, #20]
 800b07c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b080:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b084:	a805      	add	r0, sp, #20
 800b086:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b08a:	f005 ff0d 	bl	8010ea8 <rcl_init_options_init>
 800b08e:	4605      	mov	r5, r0
 800b090:	b9e0      	cbnz	r0, 800b0cc <rclc_support_init+0x6c>
 800b092:	ad02      	add	r5, sp, #8
 800b094:	4628      	mov	r0, r5
 800b096:	f005 fd91 	bl	8010bbc <rcl_get_zero_initialized_context>
 800b09a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b09e:	4633      	mov	r3, r6
 800b0a0:	e886 0003 	stmia.w	r6, {r0, r1}
 800b0a4:	aa05      	add	r2, sp, #20
 800b0a6:	4641      	mov	r1, r8
 800b0a8:	4638      	mov	r0, r7
 800b0aa:	f005 fdf7 	bl	8010c9c <rcl_init>
 800b0ae:	4605      	mov	r5, r0
 800b0b0:	b9b8      	cbnz	r0, 800b0e2 <rclc_support_init+0x82>
 800b0b2:	60b4      	str	r4, [r6, #8]
 800b0b4:	4622      	mov	r2, r4
 800b0b6:	f106 010c 	add.w	r1, r6, #12
 800b0ba:	2003      	movs	r0, #3
 800b0bc:	f006 fd1e 	bl	8011afc <rcl_clock_init>
 800b0c0:	4605      	mov	r5, r0
 800b0c2:	b970      	cbnz	r0, 800b0e2 <rclc_support_init+0x82>
 800b0c4:	a805      	add	r0, sp, #20
 800b0c6:	f005 ff55 	bl	8010f74 <rcl_init_options_fini>
 800b0ca:	b108      	cbz	r0, 800b0d0 <rclc_support_init+0x70>
 800b0cc:	f000 f91c 	bl	800b308 <rcutils_reset_error>
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	b006      	add	sp, #24
 800b0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0d8:	250b      	movs	r5, #11
 800b0da:	4628      	mov	r0, r5
 800b0dc:	b006      	add	sp, #24
 800b0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0e2:	f000 f911 	bl	800b308 <rcutils_reset_error>
 800b0e6:	a805      	add	r0, sp, #20
 800b0e8:	f005 ff44 	bl	8010f74 <rcl_init_options_fini>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d0ef      	beq.n	800b0d0 <rclc_support_init+0x70>
 800b0f0:	e7ec      	b.n	800b0cc <rclc_support_init+0x6c>
 800b0f2:	bf00      	nop

0800b0f4 <rclc_node_init_default>:
 800b0f4:	b3b8      	cbz	r0, 800b166 <rclc_node_init_default+0x72>
 800b0f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0fa:	460d      	mov	r5, r1
 800b0fc:	b0a1      	sub	sp, #132	; 0x84
 800b0fe:	b329      	cbz	r1, 800b14c <rclc_node_init_default+0x58>
 800b100:	4616      	mov	r6, r2
 800b102:	b31a      	cbz	r2, 800b14c <rclc_node_init_default+0x58>
 800b104:	461f      	mov	r7, r3
 800b106:	b30b      	cbz	r3, 800b14c <rclc_node_init_default+0x58>
 800b108:	f10d 0810 	add.w	r8, sp, #16
 800b10c:	4604      	mov	r4, r0
 800b10e:	4640      	mov	r0, r8
 800b110:	f005 ffe8 	bl	80110e4 <rcl_get_zero_initialized_node>
 800b114:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b118:	f10d 0918 	add.w	r9, sp, #24
 800b11c:	e884 0003 	stmia.w	r4, {r0, r1}
 800b120:	4648      	mov	r0, r9
 800b122:	f006 f957 	bl	80113d4 <rcl_node_get_default_options>
 800b126:	4640      	mov	r0, r8
 800b128:	f005 ffdc 	bl	80110e4 <rcl_get_zero_initialized_node>
 800b12c:	f8cd 9000 	str.w	r9, [sp]
 800b130:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b134:	463b      	mov	r3, r7
 800b136:	e884 0003 	stmia.w	r4, {r0, r1}
 800b13a:	4632      	mov	r2, r6
 800b13c:	4629      	mov	r1, r5
 800b13e:	4620      	mov	r0, r4
 800b140:	f005 ffda 	bl	80110f8 <rcl_node_init>
 800b144:	b930      	cbnz	r0, 800b154 <rclc_node_init_default+0x60>
 800b146:	b021      	add	sp, #132	; 0x84
 800b148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b14c:	200b      	movs	r0, #11
 800b14e:	b021      	add	sp, #132	; 0x84
 800b150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b154:	9003      	str	r0, [sp, #12]
 800b156:	f000 f8d7 	bl	800b308 <rcutils_reset_error>
 800b15a:	f000 f8d5 	bl	800b308 <rcutils_reset_error>
 800b15e:	9803      	ldr	r0, [sp, #12]
 800b160:	b021      	add	sp, #132	; 0x84
 800b162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b166:	200b      	movs	r0, #11
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop

0800b16c <rclc_publisher_init_default>:
 800b16c:	b368      	cbz	r0, 800b1ca <rclc_publisher_init_default+0x5e>
 800b16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b172:	460d      	mov	r5, r1
 800b174:	b0a0      	sub	sp, #128	; 0x80
 800b176:	b321      	cbz	r1, 800b1c2 <rclc_publisher_init_default+0x56>
 800b178:	4616      	mov	r6, r2
 800b17a:	b312      	cbz	r2, 800b1c2 <rclc_publisher_init_default+0x56>
 800b17c:	461f      	mov	r7, r3
 800b17e:	b303      	cbz	r3, 800b1c2 <rclc_publisher_init_default+0x56>
 800b180:	4604      	mov	r4, r0
 800b182:	f7ff f843 	bl	800a20c <rcl_get_zero_initialized_publisher>
 800b186:	f10d 0810 	add.w	r8, sp, #16
 800b18a:	6020      	str	r0, [r4, #0]
 800b18c:	4640      	mov	r0, r8
 800b18e:	f7ff f8d9 	bl	800a344 <rcl_publisher_get_default_options>
 800b192:	490f      	ldr	r1, [pc, #60]	; (800b1d0 <rclc_publisher_init_default+0x64>)
 800b194:	2250      	movs	r2, #80	; 0x50
 800b196:	4640      	mov	r0, r8
 800b198:	f00c fa55 	bl	8017646 <memcpy>
 800b19c:	f8cd 8000 	str.w	r8, [sp]
 800b1a0:	463b      	mov	r3, r7
 800b1a2:	4632      	mov	r2, r6
 800b1a4:	4629      	mov	r1, r5
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f7ff f836 	bl	800a218 <rcl_publisher_init>
 800b1ac:	b910      	cbnz	r0, 800b1b4 <rclc_publisher_init_default+0x48>
 800b1ae:	b020      	add	sp, #128	; 0x80
 800b1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1b4:	9003      	str	r0, [sp, #12]
 800b1b6:	f000 f8a7 	bl	800b308 <rcutils_reset_error>
 800b1ba:	9803      	ldr	r0, [sp, #12]
 800b1bc:	b020      	add	sp, #128	; 0x80
 800b1be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1c2:	200b      	movs	r0, #11
 800b1c4:	b020      	add	sp, #128	; 0x80
 800b1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1ca:	200b      	movs	r0, #11
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	08018610 	.word	0x08018610

0800b1d4 <rclc_subscription_init_default>:
 800b1d4:	b368      	cbz	r0, 800b232 <rclc_subscription_init_default+0x5e>
 800b1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1da:	460d      	mov	r5, r1
 800b1dc:	b0a0      	sub	sp, #128	; 0x80
 800b1de:	b321      	cbz	r1, 800b22a <rclc_subscription_init_default+0x56>
 800b1e0:	4616      	mov	r6, r2
 800b1e2:	b312      	cbz	r2, 800b22a <rclc_subscription_init_default+0x56>
 800b1e4:	461f      	mov	r7, r3
 800b1e6:	b303      	cbz	r3, 800b22a <rclc_subscription_init_default+0x56>
 800b1e8:	4604      	mov	r4, r0
 800b1ea:	f006 fb2b 	bl	8011844 <rcl_get_zero_initialized_subscription>
 800b1ee:	f10d 0810 	add.w	r8, sp, #16
 800b1f2:	6020      	str	r0, [r4, #0]
 800b1f4:	4640      	mov	r0, r8
 800b1f6:	f006 fbd3 	bl	80119a0 <rcl_subscription_get_default_options>
 800b1fa:	490f      	ldr	r1, [pc, #60]	; (800b238 <rclc_subscription_init_default+0x64>)
 800b1fc:	2250      	movs	r2, #80	; 0x50
 800b1fe:	4640      	mov	r0, r8
 800b200:	f00c fa21 	bl	8017646 <memcpy>
 800b204:	f8cd 8000 	str.w	r8, [sp]
 800b208:	463b      	mov	r3, r7
 800b20a:	4632      	mov	r2, r6
 800b20c:	4629      	mov	r1, r5
 800b20e:	4620      	mov	r0, r4
 800b210:	f006 fb1e 	bl	8011850 <rcl_subscription_init>
 800b214:	b910      	cbnz	r0, 800b21c <rclc_subscription_init_default+0x48>
 800b216:	b020      	add	sp, #128	; 0x80
 800b218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b21c:	9003      	str	r0, [sp, #12]
 800b21e:	f000 f873 	bl	800b308 <rcutils_reset_error>
 800b222:	9803      	ldr	r0, [sp, #12]
 800b224:	b020      	add	sp, #128	; 0x80
 800b226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b22a:	200b      	movs	r0, #11
 800b22c:	b020      	add	sp, #128	; 0x80
 800b22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b232:	200b      	movs	r0, #11
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	08018660 	.word	0x08018660

0800b23c <__default_zero_allocate>:
 800b23c:	f00b bcf4 	b.w	8016c28 <calloc>

0800b240 <__default_reallocate>:
 800b240:	f00b be80 	b.w	8016f44 <realloc>

0800b244 <__default_deallocate>:
 800b244:	f00b bd5e 	b.w	8016d04 <free>

0800b248 <__default_allocate>:
 800b248:	f00b bd54 	b.w	8016cf4 <malloc>

0800b24c <rcutils_get_zero_initialized_allocator>:
 800b24c:	b510      	push	{r4, lr}
 800b24e:	4c05      	ldr	r4, [pc, #20]	; (800b264 <rcutils_get_zero_initialized_allocator+0x18>)
 800b250:	4686      	mov	lr, r0
 800b252:	4684      	mov	ip, r0
 800b254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b256:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b25a:	6823      	ldr	r3, [r4, #0]
 800b25c:	f8cc 3000 	str.w	r3, [ip]
 800b260:	4670      	mov	r0, lr
 800b262:	bd10      	pop	{r4, pc}
 800b264:	080186b0 	.word	0x080186b0

0800b268 <rcutils_set_default_allocator>:
 800b268:	b1a8      	cbz	r0, 800b296 <rcutils_set_default_allocator+0x2e>
 800b26a:	6802      	ldr	r2, [r0, #0]
 800b26c:	b1a2      	cbz	r2, 800b298 <rcutils_set_default_allocator+0x30>
 800b26e:	6841      	ldr	r1, [r0, #4]
 800b270:	b1a1      	cbz	r1, 800b29c <rcutils_set_default_allocator+0x34>
 800b272:	b410      	push	{r4}
 800b274:	68c4      	ldr	r4, [r0, #12]
 800b276:	b164      	cbz	r4, 800b292 <rcutils_set_default_allocator+0x2a>
 800b278:	6880      	ldr	r0, [r0, #8]
 800b27a:	b138      	cbz	r0, 800b28c <rcutils_set_default_allocator+0x24>
 800b27c:	4b08      	ldr	r3, [pc, #32]	; (800b2a0 <rcutils_set_default_allocator+0x38>)
 800b27e:	601a      	str	r2, [r3, #0]
 800b280:	2200      	movs	r2, #0
 800b282:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b286:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b28a:	2001      	movs	r0, #1
 800b28c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	4620      	mov	r0, r4
 800b294:	e7fa      	b.n	800b28c <rcutils_set_default_allocator+0x24>
 800b296:	4770      	bx	lr
 800b298:	4610      	mov	r0, r2
 800b29a:	4770      	bx	lr
 800b29c:	4608      	mov	r0, r1
 800b29e:	4770      	bx	lr
 800b2a0:	20000018 	.word	0x20000018

0800b2a4 <rcutils_get_default_allocator>:
 800b2a4:	b510      	push	{r4, lr}
 800b2a6:	4c05      	ldr	r4, [pc, #20]	; (800b2bc <rcutils_get_default_allocator+0x18>)
 800b2a8:	4686      	mov	lr, r0
 800b2aa:	4684      	mov	ip, r0
 800b2ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b2ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b2b2:	6823      	ldr	r3, [r4, #0]
 800b2b4:	f8cc 3000 	str.w	r3, [ip]
 800b2b8:	4670      	mov	r0, lr
 800b2ba:	bd10      	pop	{r4, pc}
 800b2bc:	20000018 	.word	0x20000018

0800b2c0 <rcutils_allocator_is_valid>:
 800b2c0:	b158      	cbz	r0, 800b2da <rcutils_allocator_is_valid+0x1a>
 800b2c2:	6803      	ldr	r3, [r0, #0]
 800b2c4:	b143      	cbz	r3, 800b2d8 <rcutils_allocator_is_valid+0x18>
 800b2c6:	6843      	ldr	r3, [r0, #4]
 800b2c8:	b133      	cbz	r3, 800b2d8 <rcutils_allocator_is_valid+0x18>
 800b2ca:	68c3      	ldr	r3, [r0, #12]
 800b2cc:	b123      	cbz	r3, 800b2d8 <rcutils_allocator_is_valid+0x18>
 800b2ce:	6880      	ldr	r0, [r0, #8]
 800b2d0:	3800      	subs	r0, #0
 800b2d2:	bf18      	it	ne
 800b2d4:	2001      	movne	r0, #1
 800b2d6:	4770      	bx	lr
 800b2d8:	4618      	mov	r0, r3
 800b2da:	4770      	bx	lr

0800b2dc <rcutils_get_error_string>:
 800b2dc:	4b06      	ldr	r3, [pc, #24]	; (800b2f8 <rcutils_get_error_string+0x1c>)
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	b13b      	cbz	r3, 800b2f2 <rcutils_get_error_string+0x16>
 800b2e2:	4b06      	ldr	r3, [pc, #24]	; (800b2fc <rcutils_get_error_string+0x20>)
 800b2e4:	781a      	ldrb	r2, [r3, #0]
 800b2e6:	b90a      	cbnz	r2, 800b2ec <rcutils_get_error_string+0x10>
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	701a      	strb	r2, [r3, #0]
 800b2ec:	4b04      	ldr	r3, [pc, #16]	; (800b300 <rcutils_get_error_string+0x24>)
 800b2ee:	7818      	ldrb	r0, [r3, #0]
 800b2f0:	4770      	bx	lr
 800b2f2:	4b04      	ldr	r3, [pc, #16]	; (800b304 <rcutils_get_error_string+0x28>)
 800b2f4:	7818      	ldrb	r0, [r3, #0]
 800b2f6:	4770      	bx	lr
 800b2f8:	2000c1f0 	.word	0x2000c1f0
 800b2fc:	2000c209 	.word	0x2000c209
 800b300:	2000c208 	.word	0x2000c208
 800b304:	080186c4 	.word	0x080186c4

0800b308 <rcutils_reset_error>:
 800b308:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800b328 <rcutils_reset_error+0x20>
 800b30c:	4a08      	ldr	r2, [pc, #32]	; (800b330 <rcutils_reset_error+0x28>)
 800b30e:	4809      	ldr	r0, [pc, #36]	; (800b334 <rcutils_reset_error+0x2c>)
 800b310:	4909      	ldr	r1, [pc, #36]	; (800b338 <rcutils_reset_error+0x30>)
 800b312:	2300      	movs	r3, #0
 800b314:	8013      	strh	r3, [r2, #0]
 800b316:	ed82 7b02 	vstr	d7, [r2, #8]
 800b31a:	4a08      	ldr	r2, [pc, #32]	; (800b33c <rcutils_reset_error+0x34>)
 800b31c:	7003      	strb	r3, [r0, #0]
 800b31e:	700b      	strb	r3, [r1, #0]
 800b320:	7013      	strb	r3, [r2, #0]
 800b322:	4770      	bx	lr
 800b324:	f3af 8000 	nop.w
	...
 800b330:	2000c1f8 	.word	0x2000c1f8
 800b334:	2000c209 	.word	0x2000c209
 800b338:	2000c208 	.word	0x2000c208
 800b33c:	2000c1f0 	.word	0x2000c1f0

0800b340 <rcutils_system_time_now>:
 800b340:	b308      	cbz	r0, 800b386 <rcutils_system_time_now+0x46>
 800b342:	b570      	push	{r4, r5, r6, lr}
 800b344:	b084      	sub	sp, #16
 800b346:	4604      	mov	r4, r0
 800b348:	4669      	mov	r1, sp
 800b34a:	2001      	movs	r0, #1
 800b34c:	f7f7 f95c 	bl	8002608 <clock_gettime>
 800b350:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b354:	2d00      	cmp	r5, #0
 800b356:	db13      	blt.n	800b380 <rcutils_system_time_now+0x40>
 800b358:	9902      	ldr	r1, [sp, #8]
 800b35a:	2900      	cmp	r1, #0
 800b35c:	db0d      	blt.n	800b37a <rcutils_system_time_now+0x3a>
 800b35e:	4e0b      	ldr	r6, [pc, #44]	; (800b38c <rcutils_system_time_now+0x4c>)
 800b360:	fba3 3206 	umull	r3, r2, r3, r6
 800b364:	185b      	adds	r3, r3, r1
 800b366:	fb06 2205 	mla	r2, r6, r5, r2
 800b36a:	f04f 0000 	mov.w	r0, #0
 800b36e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b372:	e9c4 3200 	strd	r3, r2, [r4]
 800b376:	b004      	add	sp, #16
 800b378:	bd70      	pop	{r4, r5, r6, pc}
 800b37a:	ea53 0205 	orrs.w	r2, r3, r5
 800b37e:	d1ee      	bne.n	800b35e <rcutils_system_time_now+0x1e>
 800b380:	2002      	movs	r0, #2
 800b382:	b004      	add	sp, #16
 800b384:	bd70      	pop	{r4, r5, r6, pc}
 800b386:	200b      	movs	r0, #11
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	3b9aca00 	.word	0x3b9aca00

0800b390 <rcutils_steady_time_now>:
 800b390:	b308      	cbz	r0, 800b3d6 <rcutils_steady_time_now+0x46>
 800b392:	b570      	push	{r4, r5, r6, lr}
 800b394:	b084      	sub	sp, #16
 800b396:	4604      	mov	r4, r0
 800b398:	4669      	mov	r1, sp
 800b39a:	2000      	movs	r0, #0
 800b39c:	f7f7 f934 	bl	8002608 <clock_gettime>
 800b3a0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b3a4:	2d00      	cmp	r5, #0
 800b3a6:	db13      	blt.n	800b3d0 <rcutils_steady_time_now+0x40>
 800b3a8:	9902      	ldr	r1, [sp, #8]
 800b3aa:	2900      	cmp	r1, #0
 800b3ac:	db0d      	blt.n	800b3ca <rcutils_steady_time_now+0x3a>
 800b3ae:	4e0b      	ldr	r6, [pc, #44]	; (800b3dc <rcutils_steady_time_now+0x4c>)
 800b3b0:	fba3 3206 	umull	r3, r2, r3, r6
 800b3b4:	185b      	adds	r3, r3, r1
 800b3b6:	fb06 2205 	mla	r2, r6, r5, r2
 800b3ba:	f04f 0000 	mov.w	r0, #0
 800b3be:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b3c2:	e9c4 3200 	strd	r3, r2, [r4]
 800b3c6:	b004      	add	sp, #16
 800b3c8:	bd70      	pop	{r4, r5, r6, pc}
 800b3ca:	ea53 0205 	orrs.w	r2, r3, r5
 800b3ce:	d1ee      	bne.n	800b3ae <rcutils_steady_time_now+0x1e>
 800b3d0:	2002      	movs	r0, #2
 800b3d2:	b004      	add	sp, #16
 800b3d4:	bd70      	pop	{r4, r5, r6, pc}
 800b3d6:	200b      	movs	r0, #11
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	3b9aca00 	.word	0x3b9aca00

0800b3e0 <rmw_get_default_publisher_options>:
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	6002      	str	r2, [r0, #0]
 800b3e4:	7102      	strb	r2, [r0, #4]
 800b3e6:	4770      	bx	lr

0800b3e8 <rmw_uros_set_custom_transport>:
 800b3e8:	b470      	push	{r4, r5, r6}
 800b3ea:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b3ee:	b162      	cbz	r2, 800b40a <rmw_uros_set_custom_transport+0x22>
 800b3f0:	b15b      	cbz	r3, 800b40a <rmw_uros_set_custom_transport+0x22>
 800b3f2:	b155      	cbz	r5, 800b40a <rmw_uros_set_custom_transport+0x22>
 800b3f4:	b14e      	cbz	r6, 800b40a <rmw_uros_set_custom_transport+0x22>
 800b3f6:	4c06      	ldr	r4, [pc, #24]	; (800b410 <rmw_uros_set_custom_transport+0x28>)
 800b3f8:	7020      	strb	r0, [r4, #0]
 800b3fa:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b3fe:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b402:	6166      	str	r6, [r4, #20]
 800b404:	2000      	movs	r0, #0
 800b406:	bc70      	pop	{r4, r5, r6}
 800b408:	4770      	bx	lr
 800b40a:	200b      	movs	r0, #11
 800b40c:	bc70      	pop	{r4, r5, r6}
 800b40e:	4770      	bx	lr
 800b410:	2000c20c 	.word	0x2000c20c

0800b414 <rmw_uros_ping_agent>:
 800b414:	b570      	push	{r4, r5, r6, lr}
 800b416:	4b22      	ldr	r3, [pc, #136]	; (800b4a0 <rmw_uros_ping_agent+0x8c>)
 800b418:	7b1a      	ldrb	r2, [r3, #12]
 800b41a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800b41e:	4605      	mov	r5, r0
 800b420:	460e      	mov	r6, r1
 800b422:	b10a      	cbz	r2, 800b428 <rmw_uros_ping_agent+0x14>
 800b424:	681c      	ldr	r4, [r3, #0]
 800b426:	b9bc      	cbnz	r4, 800b458 <rmw_uros_ping_agent+0x44>
 800b428:	4b1e      	ldr	r3, [pc, #120]	; (800b4a4 <rmw_uros_ping_agent+0x90>)
 800b42a:	781a      	ldrb	r2, [r3, #0]
 800b42c:	6918      	ldr	r0, [r3, #16]
 800b42e:	f88d 2200 	strb.w	r2, [sp, #512]	; 0x200
 800b432:	685a      	ldr	r2, [r3, #4]
 800b434:	92a3      	str	r2, [sp, #652]	; 0x28c
 800b436:	2100      	movs	r1, #0
 800b438:	68da      	ldr	r2, [r3, #12]
 800b43a:	909c      	str	r0, [sp, #624]	; 0x270
 800b43c:	6958      	ldr	r0, [r3, #20]
 800b43e:	929b      	str	r2, [sp, #620]	; 0x26c
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	909d      	str	r0, [sp, #628]	; 0x274
 800b444:	466a      	mov	r2, sp
 800b446:	4608      	mov	r0, r1
 800b448:	939a      	str	r3, [sp, #616]	; 0x268
 800b44a:	f000 f9d1 	bl	800b7f0 <rmw_uxrce_transport_init>
 800b44e:	b198      	cbz	r0, 800b478 <rmw_uros_ping_agent+0x64>
 800b450:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800b454:	bd70      	pop	{r4, r5, r6, pc}
 800b456:	b9f0      	cbnz	r0, 800b496 <rmw_uros_ping_agent+0x82>
 800b458:	68a0      	ldr	r0, [r4, #8]
 800b45a:	4632      	mov	r2, r6
 800b45c:	4629      	mov	r1, r5
 800b45e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b462:	f002 f8e3 	bl	800d62c <uxr_ping_agent_session>
 800b466:	6864      	ldr	r4, [r4, #4]
 800b468:	2c00      	cmp	r4, #0
 800b46a:	d1f4      	bne.n	800b456 <rmw_uros_ping_agent+0x42>
 800b46c:	f080 0001 	eor.w	r0, r0, #1
 800b470:	b2c0      	uxtb	r0, r0
 800b472:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800b476:	bd70      	pop	{r4, r5, r6, pc}
 800b478:	4632      	mov	r2, r6
 800b47a:	4629      	mov	r1, r5
 800b47c:	a89e      	add	r0, sp, #632	; 0x278
 800b47e:	f002 f921 	bl	800d6c4 <uxr_ping_agent_attempts>
 800b482:	4604      	mov	r4, r0
 800b484:	4668      	mov	r0, sp
 800b486:	f002 f89d 	bl	800d5c4 <uxr_close_custom_transport>
 800b48a:	f084 0001 	eor.w	r0, r4, #1
 800b48e:	b2c0      	uxtb	r0, r0
 800b490:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800b494:	bd70      	pop	{r4, r5, r6, pc}
 800b496:	2000      	movs	r0, #0
 800b498:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800b49c:	bd70      	pop	{r4, r5, r6, pc}
 800b49e:	bf00      	nop
 800b4a0:	20010b24 	.word	0x20010b24
 800b4a4:	2000c20c 	.word	0x2000c20c

0800b4a8 <flush_session>:
 800b4a8:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800b4aa:	f002 bea1 	b.w	800e1f0 <uxr_run_session_until_confirm_delivery>
 800b4ae:	bf00      	nop

0800b4b0 <rmw_publish>:
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	d053      	beq.n	800b55c <rmw_publish+0xac>
 800b4b4:	b570      	push	{r4, r5, r6, lr}
 800b4b6:	460d      	mov	r5, r1
 800b4b8:	b08e      	sub	sp, #56	; 0x38
 800b4ba:	2900      	cmp	r1, #0
 800b4bc:	d04b      	beq.n	800b556 <rmw_publish+0xa6>
 800b4be:	4604      	mov	r4, r0
 800b4c0:	6800      	ldr	r0, [r0, #0]
 800b4c2:	f000 fd03 	bl	800becc <is_uxrce_rmw_identifier_valid>
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	d045      	beq.n	800b556 <rmw_publish+0xa6>
 800b4ca:	6866      	ldr	r6, [r4, #4]
 800b4cc:	2e00      	cmp	r6, #0
 800b4ce:	d042      	beq.n	800b556 <rmw_publish+0xa6>
 800b4d0:	69b4      	ldr	r4, [r6, #24]
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	6923      	ldr	r3, [r4, #16]
 800b4d6:	4798      	blx	r3
 800b4d8:	69f3      	ldr	r3, [r6, #28]
 800b4da:	9005      	str	r0, [sp, #20]
 800b4dc:	b113      	cbz	r3, 800b4e4 <rmw_publish+0x34>
 800b4de:	a805      	add	r0, sp, #20
 800b4e0:	4798      	blx	r3
 800b4e2:	9805      	ldr	r0, [sp, #20]
 800b4e4:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	9000      	str	r0, [sp, #0]
 800b4ec:	6972      	ldr	r2, [r6, #20]
 800b4ee:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800b4f0:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800b4f4:	ab06      	add	r3, sp, #24
 800b4f6:	f004 f923 	bl	800f740 <uxr_prepare_output_stream>
 800b4fa:	b1d8      	cbz	r0, 800b534 <rmw_publish+0x84>
 800b4fc:	68a3      	ldr	r3, [r4, #8]
 800b4fe:	a906      	add	r1, sp, #24
 800b500:	4628      	mov	r0, r5
 800b502:	4798      	blx	r3
 800b504:	6a33      	ldr	r3, [r6, #32]
 800b506:	4604      	mov	r4, r0
 800b508:	b10b      	cbz	r3, 800b50e <rmw_publish+0x5e>
 800b50a:	a806      	add	r0, sp, #24
 800b50c:	4798      	blx	r3
 800b50e:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800b512:	2b01      	cmp	r3, #1
 800b514:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800b518:	d022      	beq.n	800b560 <rmw_publish+0xb0>
 800b51a:	6918      	ldr	r0, [r3, #16]
 800b51c:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800b51e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b522:	f002 fe65 	bl	800e1f0 <uxr_run_session_until_confirm_delivery>
 800b526:	4020      	ands	r0, r4
 800b528:	b2c4      	uxtb	r4, r0
 800b52a:	f084 0001 	eor.w	r0, r4, #1
 800b52e:	b2c0      	uxtb	r0, r0
 800b530:	b00e      	add	sp, #56	; 0x38
 800b532:	bd70      	pop	{r4, r5, r6, pc}
 800b534:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800b538:	6918      	ldr	r0, [r3, #16]
 800b53a:	9b05      	ldr	r3, [sp, #20]
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	4b0b      	ldr	r3, [pc, #44]	; (800b56c <rmw_publish+0xbc>)
 800b540:	9301      	str	r3, [sp, #4]
 800b542:	9602      	str	r6, [sp, #8]
 800b544:	6972      	ldr	r2, [r6, #20]
 800b546:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800b548:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b54c:	ab06      	add	r3, sp, #24
 800b54e:	f004 f927 	bl	800f7a0 <uxr_prepare_output_stream_fragmented>
 800b552:	2800      	cmp	r0, #0
 800b554:	d1d2      	bne.n	800b4fc <rmw_publish+0x4c>
 800b556:	2001      	movs	r0, #1
 800b558:	b00e      	add	sp, #56	; 0x38
 800b55a:	bd70      	pop	{r4, r5, r6, pc}
 800b55c:	2001      	movs	r0, #1
 800b55e:	4770      	bx	lr
 800b560:	6918      	ldr	r0, [r3, #16]
 800b562:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b566:	f002 fa83 	bl	800da70 <uxr_flash_output_streams>
 800b56a:	e7de      	b.n	800b52a <rmw_publish+0x7a>
 800b56c:	0800b4a9 	.word	0x0800b4a9

0800b570 <rmw_create_publisher>:
 800b570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b574:	b087      	sub	sp, #28
 800b576:	2800      	cmp	r0, #0
 800b578:	f000 80cc 	beq.w	800b714 <rmw_create_publisher+0x1a4>
 800b57c:	460e      	mov	r6, r1
 800b57e:	2900      	cmp	r1, #0
 800b580:	f000 80c8 	beq.w	800b714 <rmw_create_publisher+0x1a4>
 800b584:	4604      	mov	r4, r0
 800b586:	6800      	ldr	r0, [r0, #0]
 800b588:	4615      	mov	r5, r2
 800b58a:	4698      	mov	r8, r3
 800b58c:	f000 fc9e 	bl	800becc <is_uxrce_rmw_identifier_valid>
 800b590:	2800      	cmp	r0, #0
 800b592:	f000 80bf 	beq.w	800b714 <rmw_create_publisher+0x1a4>
 800b596:	2d00      	cmp	r5, #0
 800b598:	f000 80bc 	beq.w	800b714 <rmw_create_publisher+0x1a4>
 800b59c:	782b      	ldrb	r3, [r5, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	f000 80b8 	beq.w	800b714 <rmw_create_publisher+0x1a4>
 800b5a4:	f1b8 0f00 	cmp.w	r8, #0
 800b5a8:	f000 80b4 	beq.w	800b714 <rmw_create_publisher+0x1a4>
 800b5ac:	485c      	ldr	r0, [pc, #368]	; (800b720 <rmw_create_publisher+0x1b0>)
 800b5ae:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b5b2:	f008 fd49 	bl	8014048 <get_memory>
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	f000 80ac 	beq.w	800b714 <rmw_create_publisher+0x1a4>
 800b5bc:	6884      	ldr	r4, [r0, #8]
 800b5be:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800b5c2:	f008 fda9 	bl	8014118 <rmw_get_implementation_identifier>
 800b5c6:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800b5ca:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800b5ce:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	f7f4 fe0e 	bl	80001f4 <strlen>
 800b5d8:	3001      	adds	r0, #1
 800b5da:	283c      	cmp	r0, #60	; 0x3c
 800b5dc:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800b5e0:	f200 8091 	bhi.w	800b706 <rmw_create_publisher+0x196>
 800b5e4:	4a4f      	ldr	r2, [pc, #316]	; (800b724 <rmw_create_publisher+0x1b4>)
 800b5e6:	462b      	mov	r3, r5
 800b5e8:	213c      	movs	r1, #60	; 0x3c
 800b5ea:	4650      	mov	r0, sl
 800b5ec:	f00b fe32 	bl	8017254 <sniprintf>
 800b5f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b5f4:	67e3      	str	r3, [r4, #124]	; 0x7c
 800b5f6:	4641      	mov	r1, r8
 800b5f8:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800b5fc:	2250      	movs	r2, #80	; 0x50
 800b5fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b602:	f00c f820 	bl	8017646 <memcpy>
 800b606:	f898 3008 	ldrb.w	r3, [r8, #8]
 800b60a:	4947      	ldr	r1, [pc, #284]	; (800b728 <rmw_create_publisher+0x1b8>)
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b612:	bf0c      	ite	eq
 800b614:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800b618:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800b61c:	67a3      	str	r3, [r4, #120]	; 0x78
 800b61e:	2300      	movs	r3, #0
 800b620:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800b624:	4630      	mov	r0, r6
 800b626:	f000 fc5f 	bl	800bee8 <get_message_typesupport_handle>
 800b62a:	2800      	cmp	r0, #0
 800b62c:	d06b      	beq.n	800b706 <rmw_create_publisher+0x196>
 800b62e:	6842      	ldr	r2, [r0, #4]
 800b630:	61a2      	str	r2, [r4, #24]
 800b632:	2a00      	cmp	r2, #0
 800b634:	d067      	beq.n	800b706 <rmw_create_publisher+0x196>
 800b636:	4629      	mov	r1, r5
 800b638:	4643      	mov	r3, r8
 800b63a:	4648      	mov	r0, r9
 800b63c:	f008 ffd2 	bl	80145e4 <create_topic>
 800b640:	6260      	str	r0, [r4, #36]	; 0x24
 800b642:	2800      	cmp	r0, #0
 800b644:	d063      	beq.n	800b70e <rmw_create_publisher+0x19e>
 800b646:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b64a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b64e:	2103      	movs	r1, #3
 800b650:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800b654:	1c42      	adds	r2, r0, #1
 800b656:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800b65a:	f001 ffb7 	bl	800d5cc <uxr_object_id>
 800b65e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800b662:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b666:	6120      	str	r0, [r4, #16]
 800b668:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800b66c:	6910      	ldr	r0, [r2, #16]
 800b66e:	2506      	movs	r5, #6
 800b670:	9500      	str	r5, [sp, #0]
 800b672:	6819      	ldr	r1, [r3, #0]
 800b674:	6922      	ldr	r2, [r4, #16]
 800b676:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b67a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b67e:	f001 fd95 	bl	800d1ac <uxr_buffer_create_publisher_bin>
 800b682:	4602      	mov	r2, r0
 800b684:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b688:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800b68c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800b690:	f000 fb9c 	bl	800bdcc <run_xrce_session>
 800b694:	b3b8      	cbz	r0, 800b706 <rmw_create_publisher+0x196>
 800b696:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b69a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b69e:	2105      	movs	r1, #5
 800b6a0:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800b6a4:	1c42      	adds	r2, r0, #1
 800b6a6:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800b6aa:	f001 ff8f 	bl	800d5cc <uxr_object_id>
 800b6ae:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b6b2:	6160      	str	r0, [r4, #20]
 800b6b4:	691e      	ldr	r6, [r3, #16]
 800b6b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b6ba:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800b6be:	f10d 0a10 	add.w	sl, sp, #16
 800b6c2:	4641      	mov	r1, r8
 800b6c4:	4650      	mov	r0, sl
 800b6c6:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800b6ca:	f000 fb9b 	bl	800be04 <convert_qos_profile>
 800b6ce:	9503      	str	r5, [sp, #12]
 800b6d0:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800b6d4:	9001      	str	r0, [sp, #4]
 800b6d6:	f8ad 1008 	strh.w	r1, [sp, #8]
 800b6da:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800b6e4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800b6e8:	f8d8 1000 	ldr.w	r1, [r8]
 800b6ec:	4630      	mov	r0, r6
 800b6ee:	f001 fdbd 	bl	800d26c <uxr_buffer_create_datawriter_bin>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b6f8:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800b6fc:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800b700:	f000 fb64 	bl	800bdcc <run_xrce_session>
 800b704:	b938      	cbnz	r0, 800b716 <rmw_create_publisher+0x1a6>
 800b706:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b708:	b108      	cbz	r0, 800b70e <rmw_create_publisher+0x19e>
 800b70a:	f000 fa5f 	bl	800bbcc <rmw_uxrce_fini_topic_memory>
 800b70e:	4638      	mov	r0, r7
 800b710:	f000 fa04 	bl	800bb1c <rmw_uxrce_fini_publisher_memory>
 800b714:	2700      	movs	r7, #0
 800b716:	4638      	mov	r0, r7
 800b718:	b007      	add	sp, #28
 800b71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b71e:	bf00      	nop
 800b720:	20010b04 	.word	0x20010b04
 800b724:	080186fc 	.word	0x080186fc
 800b728:	080186c8 	.word	0x080186c8

0800b72c <rmw_publisher_get_actual_qos>:
 800b72c:	b150      	cbz	r0, 800b744 <rmw_publisher_get_actual_qos+0x18>
 800b72e:	b508      	push	{r3, lr}
 800b730:	460b      	mov	r3, r1
 800b732:	b149      	cbz	r1, 800b748 <rmw_publisher_get_actual_qos+0x1c>
 800b734:	6841      	ldr	r1, [r0, #4]
 800b736:	2250      	movs	r2, #80	; 0x50
 800b738:	3128      	adds	r1, #40	; 0x28
 800b73a:	4618      	mov	r0, r3
 800b73c:	f00b ff83 	bl	8017646 <memcpy>
 800b740:	2000      	movs	r0, #0
 800b742:	bd08      	pop	{r3, pc}
 800b744:	200b      	movs	r0, #11
 800b746:	4770      	bx	lr
 800b748:	200b      	movs	r0, #11
 800b74a:	bd08      	pop	{r3, pc}

0800b74c <rmw_destroy_publisher>:
 800b74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74e:	b128      	cbz	r0, 800b75c <rmw_destroy_publisher+0x10>
 800b750:	4604      	mov	r4, r0
 800b752:	6800      	ldr	r0, [r0, #0]
 800b754:	460d      	mov	r5, r1
 800b756:	f000 fbb9 	bl	800becc <is_uxrce_rmw_identifier_valid>
 800b75a:	b910      	cbnz	r0, 800b762 <rmw_destroy_publisher+0x16>
 800b75c:	2401      	movs	r4, #1
 800b75e:	4620      	mov	r0, r4
 800b760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b762:	6863      	ldr	r3, [r4, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d0f9      	beq.n	800b75c <rmw_destroy_publisher+0x10>
 800b768:	2d00      	cmp	r5, #0
 800b76a:	d0f7      	beq.n	800b75c <rmw_destroy_publisher+0x10>
 800b76c:	6828      	ldr	r0, [r5, #0]
 800b76e:	f000 fbad 	bl	800becc <is_uxrce_rmw_identifier_valid>
 800b772:	2800      	cmp	r0, #0
 800b774:	d0f2      	beq.n	800b75c <rmw_destroy_publisher+0x10>
 800b776:	686c      	ldr	r4, [r5, #4]
 800b778:	2c00      	cmp	r4, #0
 800b77a:	d0ef      	beq.n	800b75c <rmw_destroy_publisher+0x10>
 800b77c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b77e:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800b782:	f008 ff7f 	bl	8014684 <destroy_topic>
 800b786:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b78a:	6962      	ldr	r2, [r4, #20]
 800b78c:	6918      	ldr	r0, [r3, #16]
 800b78e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b792:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b796:	6819      	ldr	r1, [r3, #0]
 800b798:	f001 fc54 	bl	800d044 <uxr_buffer_delete_entity>
 800b79c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b7a0:	6922      	ldr	r2, [r4, #16]
 800b7a2:	691b      	ldr	r3, [r3, #16]
 800b7a4:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800b7a8:	4604      	mov	r4, r0
 800b7aa:	6809      	ldr	r1, [r1, #0]
 800b7ac:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800b7b0:	f001 fc48 	bl	800d044 <uxr_buffer_delete_entity>
 800b7b4:	693e      	ldr	r6, [r7, #16]
 800b7b6:	4622      	mov	r2, r4
 800b7b8:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800b7bc:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	f000 fb02 	bl	800bdcc <run_xrce_session>
 800b7c8:	693e      	ldr	r6, [r7, #16]
 800b7ca:	4622      	mov	r2, r4
 800b7cc:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800b7d0:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	f000 faf8 	bl	800bdcc <run_xrce_session>
 800b7dc:	b12c      	cbz	r4, 800b7ea <rmw_destroy_publisher+0x9e>
 800b7de:	b120      	cbz	r0, 800b7ea <rmw_destroy_publisher+0x9e>
 800b7e0:	2400      	movs	r4, #0
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	f000 f99a 	bl	800bb1c <rmw_uxrce_fini_publisher_memory>
 800b7e8:	e7b9      	b.n	800b75e <rmw_destroy_publisher+0x12>
 800b7ea:	2402      	movs	r4, #2
 800b7ec:	e7f9      	b.n	800b7e2 <rmw_destroy_publisher+0x96>
 800b7ee:	bf00      	nop

0800b7f0 <rmw_uxrce_transport_init>:
 800b7f0:	b508      	push	{r3, lr}
 800b7f2:	b108      	cbz	r0, 800b7f8 <rmw_uxrce_transport_init+0x8>
 800b7f4:	f100 0210 	add.w	r2, r0, #16
 800b7f8:	b139      	cbz	r1, 800b80a <rmw_uxrce_transport_init+0x1a>
 800b7fa:	6949      	ldr	r1, [r1, #20]
 800b7fc:	4610      	mov	r0, r2
 800b7fe:	f001 fead 	bl	800d55c <uxr_init_custom_transport>
 800b802:	f080 0001 	eor.w	r0, r0, #1
 800b806:	b2c0      	uxtb	r0, r0
 800b808:	bd08      	pop	{r3, pc}
 800b80a:	4b04      	ldr	r3, [pc, #16]	; (800b81c <rmw_uxrce_transport_init+0x2c>)
 800b80c:	4610      	mov	r0, r2
 800b80e:	6859      	ldr	r1, [r3, #4]
 800b810:	f001 fea4 	bl	800d55c <uxr_init_custom_transport>
 800b814:	f080 0001 	eor.w	r0, r0, #1
 800b818:	b2c0      	uxtb	r0, r0
 800b81a:	bd08      	pop	{r3, pc}
 800b81c:	2000c20c 	.word	0x2000c20c

0800b820 <rmw_uxrce_init_service_memory>:
 800b820:	b1e2      	cbz	r2, 800b85c <rmw_uxrce_init_service_memory+0x3c>
 800b822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b826:	7b05      	ldrb	r5, [r0, #12]
 800b828:	4606      	mov	r6, r0
 800b82a:	b9ad      	cbnz	r5, 800b858 <rmw_uxrce_init_service_memory+0x38>
 800b82c:	23c8      	movs	r3, #200	; 0xc8
 800b82e:	e9c0 5500 	strd	r5, r5, [r0]
 800b832:	6083      	str	r3, [r0, #8]
 800b834:	f240 1301 	movw	r3, #257	; 0x101
 800b838:	4617      	mov	r7, r2
 800b83a:	8183      	strh	r3, [r0, #12]
 800b83c:	460c      	mov	r4, r1
 800b83e:	46a8      	mov	r8, r5
 800b840:	4621      	mov	r1, r4
 800b842:	4630      	mov	r0, r6
 800b844:	3501      	adds	r5, #1
 800b846:	f008 fc0f 	bl	8014068 <put_memory>
 800b84a:	42af      	cmp	r7, r5
 800b84c:	60a4      	str	r4, [r4, #8]
 800b84e:	f884 800c 	strb.w	r8, [r4, #12]
 800b852:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800b856:	d1f3      	bne.n	800b840 <rmw_uxrce_init_service_memory+0x20>
 800b858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop

0800b860 <rmw_uxrce_init_client_memory>:
 800b860:	b1e2      	cbz	r2, 800b89c <rmw_uxrce_init_client_memory+0x3c>
 800b862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b866:	7b05      	ldrb	r5, [r0, #12]
 800b868:	4606      	mov	r6, r0
 800b86a:	b9ad      	cbnz	r5, 800b898 <rmw_uxrce_init_client_memory+0x38>
 800b86c:	23c8      	movs	r3, #200	; 0xc8
 800b86e:	e9c0 5500 	strd	r5, r5, [r0]
 800b872:	6083      	str	r3, [r0, #8]
 800b874:	f240 1301 	movw	r3, #257	; 0x101
 800b878:	4617      	mov	r7, r2
 800b87a:	8183      	strh	r3, [r0, #12]
 800b87c:	460c      	mov	r4, r1
 800b87e:	46a8      	mov	r8, r5
 800b880:	4621      	mov	r1, r4
 800b882:	4630      	mov	r0, r6
 800b884:	3501      	adds	r5, #1
 800b886:	f008 fbef 	bl	8014068 <put_memory>
 800b88a:	42af      	cmp	r7, r5
 800b88c:	60a4      	str	r4, [r4, #8]
 800b88e:	f884 800c 	strb.w	r8, [r4, #12]
 800b892:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800b896:	d1f3      	bne.n	800b880 <rmw_uxrce_init_client_memory+0x20>
 800b898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop

0800b8a0 <rmw_uxrce_init_publisher_memory>:
 800b8a0:	b1e2      	cbz	r2, 800b8dc <rmw_uxrce_init_publisher_memory+0x3c>
 800b8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a6:	7b05      	ldrb	r5, [r0, #12]
 800b8a8:	4606      	mov	r6, r0
 800b8aa:	b9ad      	cbnz	r5, 800b8d8 <rmw_uxrce_init_publisher_memory+0x38>
 800b8ac:	23d8      	movs	r3, #216	; 0xd8
 800b8ae:	e9c0 5500 	strd	r5, r5, [r0]
 800b8b2:	6083      	str	r3, [r0, #8]
 800b8b4:	f240 1301 	movw	r3, #257	; 0x101
 800b8b8:	4617      	mov	r7, r2
 800b8ba:	8183      	strh	r3, [r0, #12]
 800b8bc:	460c      	mov	r4, r1
 800b8be:	46a8      	mov	r8, r5
 800b8c0:	4621      	mov	r1, r4
 800b8c2:	4630      	mov	r0, r6
 800b8c4:	3501      	adds	r5, #1
 800b8c6:	f008 fbcf 	bl	8014068 <put_memory>
 800b8ca:	42af      	cmp	r7, r5
 800b8cc:	60a4      	str	r4, [r4, #8]
 800b8ce:	f884 800c 	strb.w	r8, [r4, #12]
 800b8d2:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800b8d6:	d1f3      	bne.n	800b8c0 <rmw_uxrce_init_publisher_memory+0x20>
 800b8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop

0800b8e0 <rmw_uxrce_init_subscription_memory>:
 800b8e0:	b1e2      	cbz	r2, 800b91c <rmw_uxrce_init_subscription_memory+0x3c>
 800b8e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e6:	7b05      	ldrb	r5, [r0, #12]
 800b8e8:	4606      	mov	r6, r0
 800b8ea:	b9ad      	cbnz	r5, 800b918 <rmw_uxrce_init_subscription_memory+0x38>
 800b8ec:	23d8      	movs	r3, #216	; 0xd8
 800b8ee:	e9c0 5500 	strd	r5, r5, [r0]
 800b8f2:	6083      	str	r3, [r0, #8]
 800b8f4:	f240 1301 	movw	r3, #257	; 0x101
 800b8f8:	4617      	mov	r7, r2
 800b8fa:	8183      	strh	r3, [r0, #12]
 800b8fc:	460c      	mov	r4, r1
 800b8fe:	46a8      	mov	r8, r5
 800b900:	4621      	mov	r1, r4
 800b902:	4630      	mov	r0, r6
 800b904:	3501      	adds	r5, #1
 800b906:	f008 fbaf 	bl	8014068 <put_memory>
 800b90a:	42af      	cmp	r7, r5
 800b90c:	60a4      	str	r4, [r4, #8]
 800b90e:	f884 800c 	strb.w	r8, [r4, #12]
 800b912:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800b916:	d1f3      	bne.n	800b900 <rmw_uxrce_init_subscription_memory+0x20>
 800b918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop

0800b920 <rmw_uxrce_init_node_memory>:
 800b920:	b1e2      	cbz	r2, 800b95c <rmw_uxrce_init_node_memory+0x3c>
 800b922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b926:	7b05      	ldrb	r5, [r0, #12]
 800b928:	4606      	mov	r6, r0
 800b92a:	b9ad      	cbnz	r5, 800b958 <rmw_uxrce_init_node_memory+0x38>
 800b92c:	23a4      	movs	r3, #164	; 0xa4
 800b92e:	e9c0 5500 	strd	r5, r5, [r0]
 800b932:	6083      	str	r3, [r0, #8]
 800b934:	f240 1301 	movw	r3, #257	; 0x101
 800b938:	4617      	mov	r7, r2
 800b93a:	8183      	strh	r3, [r0, #12]
 800b93c:	460c      	mov	r4, r1
 800b93e:	46a8      	mov	r8, r5
 800b940:	4621      	mov	r1, r4
 800b942:	4630      	mov	r0, r6
 800b944:	3501      	adds	r5, #1
 800b946:	f008 fb8f 	bl	8014068 <put_memory>
 800b94a:	42af      	cmp	r7, r5
 800b94c:	60a4      	str	r4, [r4, #8]
 800b94e:	f884 800c 	strb.w	r8, [r4, #12]
 800b952:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800b956:	d1f3      	bne.n	800b940 <rmw_uxrce_init_node_memory+0x20>
 800b958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop

0800b960 <rmw_uxrce_init_session_memory>:
 800b960:	b1ea      	cbz	r2, 800b99e <rmw_uxrce_init_session_memory+0x3e>
 800b962:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b966:	7b05      	ldrb	r5, [r0, #12]
 800b968:	4606      	mov	r6, r0
 800b96a:	b9b5      	cbnz	r5, 800b99a <rmw_uxrce_init_session_memory+0x3a>
 800b96c:	e9c0 5500 	strd	r5, r5, [r0]
 800b970:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800b974:	f240 1301 	movw	r3, #257	; 0x101
 800b978:	4617      	mov	r7, r2
 800b97a:	f8c0 8008 	str.w	r8, [r0, #8]
 800b97e:	460c      	mov	r4, r1
 800b980:	8183      	strh	r3, [r0, #12]
 800b982:	46a9      	mov	r9, r5
 800b984:	4621      	mov	r1, r4
 800b986:	4630      	mov	r0, r6
 800b988:	3501      	adds	r5, #1
 800b98a:	f008 fb6d 	bl	8014068 <put_memory>
 800b98e:	42af      	cmp	r7, r5
 800b990:	60a4      	str	r4, [r4, #8]
 800b992:	f884 900c 	strb.w	r9, [r4, #12]
 800b996:	4444      	add	r4, r8
 800b998:	d1f4      	bne.n	800b984 <rmw_uxrce_init_session_memory+0x24>
 800b99a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b99e:	4770      	bx	lr

0800b9a0 <rmw_uxrce_init_topic_memory>:
 800b9a0:	b1e2      	cbz	r2, 800b9dc <rmw_uxrce_init_topic_memory+0x3c>
 800b9a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a6:	7b05      	ldrb	r5, [r0, #12]
 800b9a8:	4606      	mov	r6, r0
 800b9aa:	b9ad      	cbnz	r5, 800b9d8 <rmw_uxrce_init_topic_memory+0x38>
 800b9ac:	231c      	movs	r3, #28
 800b9ae:	e9c0 5500 	strd	r5, r5, [r0]
 800b9b2:	6083      	str	r3, [r0, #8]
 800b9b4:	f240 1301 	movw	r3, #257	; 0x101
 800b9b8:	4617      	mov	r7, r2
 800b9ba:	8183      	strh	r3, [r0, #12]
 800b9bc:	460c      	mov	r4, r1
 800b9be:	46a8      	mov	r8, r5
 800b9c0:	4621      	mov	r1, r4
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	3501      	adds	r5, #1
 800b9c6:	f008 fb4f 	bl	8014068 <put_memory>
 800b9ca:	42af      	cmp	r7, r5
 800b9cc:	60a4      	str	r4, [r4, #8]
 800b9ce:	f884 800c 	strb.w	r8, [r4, #12]
 800b9d2:	f104 041c 	add.w	r4, r4, #28
 800b9d6:	d1f3      	bne.n	800b9c0 <rmw_uxrce_init_topic_memory+0x20>
 800b9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9dc:	4770      	bx	lr
 800b9de:	bf00      	nop

0800b9e0 <rmw_uxrce_init_static_input_buffer_memory>:
 800b9e0:	b1ea      	cbz	r2, 800ba1e <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800b9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e6:	7b05      	ldrb	r5, [r0, #12]
 800b9e8:	4606      	mov	r6, r0
 800b9ea:	b9b5      	cbnz	r5, 800ba1a <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800b9ec:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800b9f0:	e9c0 5500 	strd	r5, r5, [r0]
 800b9f4:	6083      	str	r3, [r0, #8]
 800b9f6:	f240 1301 	movw	r3, #257	; 0x101
 800b9fa:	4617      	mov	r7, r2
 800b9fc:	8183      	strh	r3, [r0, #12]
 800b9fe:	460c      	mov	r4, r1
 800ba00:	46a8      	mov	r8, r5
 800ba02:	4621      	mov	r1, r4
 800ba04:	4630      	mov	r0, r6
 800ba06:	3501      	adds	r5, #1
 800ba08:	f008 fb2e 	bl	8014068 <put_memory>
 800ba0c:	42af      	cmp	r7, r5
 800ba0e:	60a4      	str	r4, [r4, #8]
 800ba10:	f884 800c 	strb.w	r8, [r4, #12]
 800ba14:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800ba18:	d1f3      	bne.n	800ba02 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ba1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba1e:	4770      	bx	lr

0800ba20 <rmw_uxrce_init_init_options_impl_memory>:
 800ba20:	b1e2      	cbz	r2, 800ba5c <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ba22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba26:	7b05      	ldrb	r5, [r0, #12]
 800ba28:	4606      	mov	r6, r0
 800ba2a:	b9ad      	cbnz	r5, 800ba58 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800ba2c:	232c      	movs	r3, #44	; 0x2c
 800ba2e:	e9c0 5500 	strd	r5, r5, [r0]
 800ba32:	6083      	str	r3, [r0, #8]
 800ba34:	f240 1301 	movw	r3, #257	; 0x101
 800ba38:	4617      	mov	r7, r2
 800ba3a:	8183      	strh	r3, [r0, #12]
 800ba3c:	460c      	mov	r4, r1
 800ba3e:	46a8      	mov	r8, r5
 800ba40:	4621      	mov	r1, r4
 800ba42:	4630      	mov	r0, r6
 800ba44:	3501      	adds	r5, #1
 800ba46:	f008 fb0f 	bl	8014068 <put_memory>
 800ba4a:	42af      	cmp	r7, r5
 800ba4c:	60a4      	str	r4, [r4, #8]
 800ba4e:	f884 800c 	strb.w	r8, [r4, #12]
 800ba52:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800ba56:	d1f3      	bne.n	800ba40 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800ba58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop

0800ba60 <rmw_uxrce_init_wait_set_memory>:
 800ba60:	b1e2      	cbz	r2, 800ba9c <rmw_uxrce_init_wait_set_memory+0x3c>
 800ba62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba66:	7b05      	ldrb	r5, [r0, #12]
 800ba68:	4606      	mov	r6, r0
 800ba6a:	b9ad      	cbnz	r5, 800ba98 <rmw_uxrce_init_wait_set_memory+0x38>
 800ba6c:	231c      	movs	r3, #28
 800ba6e:	e9c0 5500 	strd	r5, r5, [r0]
 800ba72:	6083      	str	r3, [r0, #8]
 800ba74:	f240 1301 	movw	r3, #257	; 0x101
 800ba78:	4617      	mov	r7, r2
 800ba7a:	8183      	strh	r3, [r0, #12]
 800ba7c:	460c      	mov	r4, r1
 800ba7e:	46a8      	mov	r8, r5
 800ba80:	4621      	mov	r1, r4
 800ba82:	4630      	mov	r0, r6
 800ba84:	3501      	adds	r5, #1
 800ba86:	f008 faef 	bl	8014068 <put_memory>
 800ba8a:	42af      	cmp	r7, r5
 800ba8c:	60a4      	str	r4, [r4, #8]
 800ba8e:	f884 800c 	strb.w	r8, [r4, #12]
 800ba92:	f104 041c 	add.w	r4, r4, #28
 800ba96:	d1f3      	bne.n	800ba80 <rmw_uxrce_init_wait_set_memory+0x20>
 800ba98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop

0800baa0 <rmw_uxrce_init_guard_condition_memory>:
 800baa0:	b1e2      	cbz	r2, 800badc <rmw_uxrce_init_guard_condition_memory+0x3c>
 800baa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baa6:	7b05      	ldrb	r5, [r0, #12]
 800baa8:	4606      	mov	r6, r0
 800baaa:	b9ad      	cbnz	r5, 800bad8 <rmw_uxrce_init_guard_condition_memory+0x38>
 800baac:	2320      	movs	r3, #32
 800baae:	e9c0 5500 	strd	r5, r5, [r0]
 800bab2:	6083      	str	r3, [r0, #8]
 800bab4:	f240 1301 	movw	r3, #257	; 0x101
 800bab8:	4617      	mov	r7, r2
 800baba:	8183      	strh	r3, [r0, #12]
 800babc:	460c      	mov	r4, r1
 800babe:	46a8      	mov	r8, r5
 800bac0:	4621      	mov	r1, r4
 800bac2:	4630      	mov	r0, r6
 800bac4:	3501      	adds	r5, #1
 800bac6:	f008 facf 	bl	8014068 <put_memory>
 800baca:	42af      	cmp	r7, r5
 800bacc:	60a4      	str	r4, [r4, #8]
 800bace:	f884 800c 	strb.w	r8, [r4, #12]
 800bad2:	f104 0420 	add.w	r4, r4, #32
 800bad6:	d1f3      	bne.n	800bac0 <rmw_uxrce_init_guard_condition_memory+0x20>
 800bad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop

0800bae0 <rmw_uxrce_fini_session_memory>:
 800bae0:	4601      	mov	r1, r0
 800bae2:	4801      	ldr	r0, [pc, #4]	; (800bae8 <rmw_uxrce_fini_session_memory+0x8>)
 800bae4:	f008 bac0 	b.w	8014068 <put_memory>
 800bae8:	20010b24 	.word	0x20010b24

0800baec <rmw_uxrce_fini_node_memory>:
 800baec:	b538      	push	{r3, r4, r5, lr}
 800baee:	4604      	mov	r4, r0
 800baf0:	6800      	ldr	r0, [r0, #0]
 800baf2:	b128      	cbz	r0, 800bb00 <rmw_uxrce_fini_node_memory+0x14>
 800baf4:	4b07      	ldr	r3, [pc, #28]	; (800bb14 <rmw_uxrce_fini_node_memory+0x28>)
 800baf6:	6819      	ldr	r1, [r3, #0]
 800baf8:	f7f4 fb72 	bl	80001e0 <strcmp>
 800bafc:	b940      	cbnz	r0, 800bb10 <rmw_uxrce_fini_node_memory+0x24>
 800bafe:	6020      	str	r0, [r4, #0]
 800bb00:	6861      	ldr	r1, [r4, #4]
 800bb02:	b129      	cbz	r1, 800bb10 <rmw_uxrce_fini_node_memory+0x24>
 800bb04:	2500      	movs	r5, #0
 800bb06:	4804      	ldr	r0, [pc, #16]	; (800bb18 <rmw_uxrce_fini_node_memory+0x2c>)
 800bb08:	610d      	str	r5, [r1, #16]
 800bb0a:	f008 faad 	bl	8014068 <put_memory>
 800bb0e:	6065      	str	r5, [r4, #4]
 800bb10:	bd38      	pop	{r3, r4, r5, pc}
 800bb12:	bf00      	nop
 800bb14:	0801901c 	.word	0x0801901c
 800bb18:	20010af4 	.word	0x20010af4

0800bb1c <rmw_uxrce_fini_publisher_memory>:
 800bb1c:	b510      	push	{r4, lr}
 800bb1e:	4604      	mov	r4, r0
 800bb20:	6800      	ldr	r0, [r0, #0]
 800bb22:	b128      	cbz	r0, 800bb30 <rmw_uxrce_fini_publisher_memory+0x14>
 800bb24:	4b06      	ldr	r3, [pc, #24]	; (800bb40 <rmw_uxrce_fini_publisher_memory+0x24>)
 800bb26:	6819      	ldr	r1, [r3, #0]
 800bb28:	f7f4 fb5a 	bl	80001e0 <strcmp>
 800bb2c:	b938      	cbnz	r0, 800bb3e <rmw_uxrce_fini_publisher_memory+0x22>
 800bb2e:	6020      	str	r0, [r4, #0]
 800bb30:	6861      	ldr	r1, [r4, #4]
 800bb32:	b121      	cbz	r1, 800bb3e <rmw_uxrce_fini_publisher_memory+0x22>
 800bb34:	4803      	ldr	r0, [pc, #12]	; (800bb44 <rmw_uxrce_fini_publisher_memory+0x28>)
 800bb36:	f008 fa97 	bl	8014068 <put_memory>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	6063      	str	r3, [r4, #4]
 800bb3e:	bd10      	pop	{r4, pc}
 800bb40:	0801901c 	.word	0x0801901c
 800bb44:	20010b04 	.word	0x20010b04

0800bb48 <rmw_uxrce_fini_subscription_memory>:
 800bb48:	b510      	push	{r4, lr}
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	6800      	ldr	r0, [r0, #0]
 800bb4e:	b128      	cbz	r0, 800bb5c <rmw_uxrce_fini_subscription_memory+0x14>
 800bb50:	4b06      	ldr	r3, [pc, #24]	; (800bb6c <rmw_uxrce_fini_subscription_memory+0x24>)
 800bb52:	6819      	ldr	r1, [r3, #0]
 800bb54:	f7f4 fb44 	bl	80001e0 <strcmp>
 800bb58:	b938      	cbnz	r0, 800bb6a <rmw_uxrce_fini_subscription_memory+0x22>
 800bb5a:	6020      	str	r0, [r4, #0]
 800bb5c:	6861      	ldr	r1, [r4, #4]
 800bb5e:	b121      	cbz	r1, 800bb6a <rmw_uxrce_fini_subscription_memory+0x22>
 800bb60:	4803      	ldr	r0, [pc, #12]	; (800bb70 <rmw_uxrce_fini_subscription_memory+0x28>)
 800bb62:	f008 fa81 	bl	8014068 <put_memory>
 800bb66:	2300      	movs	r3, #0
 800bb68:	6063      	str	r3, [r4, #4]
 800bb6a:	bd10      	pop	{r4, pc}
 800bb6c:	0801901c 	.word	0x0801901c
 800bb70:	20010b44 	.word	0x20010b44

0800bb74 <rmw_uxrce_fini_service_memory>:
 800bb74:	b510      	push	{r4, lr}
 800bb76:	4604      	mov	r4, r0
 800bb78:	6800      	ldr	r0, [r0, #0]
 800bb7a:	b128      	cbz	r0, 800bb88 <rmw_uxrce_fini_service_memory+0x14>
 800bb7c:	4b06      	ldr	r3, [pc, #24]	; (800bb98 <rmw_uxrce_fini_service_memory+0x24>)
 800bb7e:	6819      	ldr	r1, [r3, #0]
 800bb80:	f7f4 fb2e 	bl	80001e0 <strcmp>
 800bb84:	b938      	cbnz	r0, 800bb96 <rmw_uxrce_fini_service_memory+0x22>
 800bb86:	6020      	str	r0, [r4, #0]
 800bb88:	6861      	ldr	r1, [r4, #4]
 800bb8a:	b121      	cbz	r1, 800bb96 <rmw_uxrce_fini_service_memory+0x22>
 800bb8c:	4803      	ldr	r0, [pc, #12]	; (800bb9c <rmw_uxrce_fini_service_memory+0x28>)
 800bb8e:	f008 fa6b 	bl	8014068 <put_memory>
 800bb92:	2300      	movs	r3, #0
 800bb94:	6063      	str	r3, [r4, #4]
 800bb96:	bd10      	pop	{r4, pc}
 800bb98:	0801901c 	.word	0x0801901c
 800bb9c:	20010b14 	.word	0x20010b14

0800bba0 <rmw_uxrce_fini_client_memory>:
 800bba0:	b510      	push	{r4, lr}
 800bba2:	4604      	mov	r4, r0
 800bba4:	6800      	ldr	r0, [r0, #0]
 800bba6:	b128      	cbz	r0, 800bbb4 <rmw_uxrce_fini_client_memory+0x14>
 800bba8:	4b06      	ldr	r3, [pc, #24]	; (800bbc4 <rmw_uxrce_fini_client_memory+0x24>)
 800bbaa:	6819      	ldr	r1, [r3, #0]
 800bbac:	f7f4 fb18 	bl	80001e0 <strcmp>
 800bbb0:	b938      	cbnz	r0, 800bbc2 <rmw_uxrce_fini_client_memory+0x22>
 800bbb2:	6020      	str	r0, [r4, #0]
 800bbb4:	6861      	ldr	r1, [r4, #4]
 800bbb6:	b121      	cbz	r1, 800bbc2 <rmw_uxrce_fini_client_memory+0x22>
 800bbb8:	4803      	ldr	r0, [pc, #12]	; (800bbc8 <rmw_uxrce_fini_client_memory+0x28>)
 800bbba:	f008 fa55 	bl	8014068 <put_memory>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	6063      	str	r3, [r4, #4]
 800bbc2:	bd10      	pop	{r4, pc}
 800bbc4:	0801901c 	.word	0x0801901c
 800bbc8:	2000c228 	.word	0x2000c228

0800bbcc <rmw_uxrce_fini_topic_memory>:
 800bbcc:	b510      	push	{r4, lr}
 800bbce:	4604      	mov	r4, r0
 800bbd0:	4621      	mov	r1, r4
 800bbd2:	4803      	ldr	r0, [pc, #12]	; (800bbe0 <rmw_uxrce_fini_topic_memory+0x14>)
 800bbd4:	f008 fa48 	bl	8014068 <put_memory>
 800bbd8:	2300      	movs	r3, #0
 800bbda:	61a3      	str	r3, [r4, #24]
 800bbdc:	bd10      	pop	{r4, pc}
 800bbde:	bf00      	nop
 800bbe0:	20010b54 	.word	0x20010b54

0800bbe4 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800bbe4:	b082      	sub	sp, #8
 800bbe6:	b530      	push	{r4, r5, lr}
 800bbe8:	4925      	ldr	r1, [pc, #148]	; (800bc80 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800bbea:	680d      	ldr	r5, [r1, #0]
 800bbec:	ac03      	add	r4, sp, #12
 800bbee:	e884 000c 	stmia.w	r4, {r2, r3}
 800bbf2:	461c      	mov	r4, r3
 800bbf4:	2d00      	cmp	r5, #0
 800bbf6:	d041      	beq.n	800bc7c <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800bbf8:	462b      	mov	r3, r5
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	689a      	ldr	r2, [r3, #8]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800bc04:	4290      	cmp	r0, r2
 800bc06:	bf08      	it	eq
 800bc08:	3101      	addeq	r1, #1
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d1f6      	bne.n	800bbfc <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800bc0e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800bc12:	2b02      	cmp	r3, #2
 800bc14:	d029      	beq.n	800bc6a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800bc16:	d907      	bls.n	800bc28 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800bc18:	2b03      	cmp	r3, #3
 800bc1a:	d005      	beq.n	800bc28 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc22:	4608      	mov	r0, r1
 800bc24:	b002      	add	sp, #8
 800bc26:	4770      	bx	lr
 800bc28:	b314      	cbz	r4, 800bc70 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bc2a:	428c      	cmp	r4, r1
 800bc2c:	d820      	bhi.n	800bc70 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bc2e:	2d00      	cmp	r5, #0
 800bc30:	d0f4      	beq.n	800bc1c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800bc32:	2100      	movs	r1, #0
 800bc34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800bc38:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800bc3c:	e002      	b.n	800bc44 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800bc3e:	686d      	ldr	r5, [r5, #4]
 800bc40:	2d00      	cmp	r5, #0
 800bc42:	d0ec      	beq.n	800bc1e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800bc44:	68ab      	ldr	r3, [r5, #8]
 800bc46:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800bc4a:	4290      	cmp	r0, r2
 800bc4c:	d1f7      	bne.n	800bc3e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bc4e:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800bc52:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800bc56:	4562      	cmp	r2, ip
 800bc58:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800bc5c:	eb73 0e04 	sbcs.w	lr, r3, r4
 800bc60:	daed      	bge.n	800bc3e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bc62:	4694      	mov	ip, r2
 800bc64:	461c      	mov	r4, r3
 800bc66:	4629      	mov	r1, r5
 800bc68:	e7e9      	b.n	800bc3e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bc6a:	b10c      	cbz	r4, 800bc70 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bc6c:	428c      	cmp	r4, r1
 800bc6e:	d9d5      	bls.n	800bc1c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800bc70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc74:	4802      	ldr	r0, [pc, #8]	; (800bc80 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800bc76:	b002      	add	sp, #8
 800bc78:	f008 b9e6 	b.w	8014048 <get_memory>
 800bc7c:	4629      	mov	r1, r5
 800bc7e:	e7c6      	b.n	800bc0e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800bc80:	20010b34 	.word	0x20010b34

0800bc84 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800bc84:	4b11      	ldr	r3, [pc, #68]	; (800bccc <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	b530      	push	{r4, r5, lr}
 800bc8a:	b1e3      	cbz	r3, 800bcc6 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800bc8c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800bc90:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800bc94:	2400      	movs	r4, #0
 800bc96:	e001      	b.n	800bc9c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	b193      	cbz	r3, 800bcc2 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800bc9c:	689a      	ldr	r2, [r3, #8]
 800bc9e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800bca2:	4288      	cmp	r0, r1
 800bca4:	d1f8      	bne.n	800bc98 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800bca6:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800bcaa:	f8d2 281c 	ldr.w	r2, [r2, #2076]	; 0x81c
 800bcae:	4571      	cmp	r1, lr
 800bcb0:	eb72 050c 	sbcs.w	r5, r2, ip
 800bcb4:	daf0      	bge.n	800bc98 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800bcb6:	461c      	mov	r4, r3
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	468e      	mov	lr, r1
 800bcbc:	4694      	mov	ip, r2
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d1ec      	bne.n	800bc9c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	bd30      	pop	{r4, r5, pc}
 800bcc6:	461c      	mov	r4, r3
 800bcc8:	4620      	mov	r0, r4
 800bcca:	bd30      	pop	{r4, r5, pc}
 800bccc:	20010b34 	.word	0x20010b34

0800bcd0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	4b3c      	ldr	r3, [pc, #240]	; (800bdc8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800bcd6:	ed2d 8b06 	vpush	{d8-d10}
 800bcda:	681f      	ldr	r7, [r3, #0]
 800bcdc:	b08d      	sub	sp, #52	; 0x34
 800bcde:	f009 fad9 	bl	8015294 <rmw_uros_epoch_nanos>
 800bce2:	2f00      	cmp	r7, #0
 800bce4:	d05d      	beq.n	800bda2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800bce6:	46b8      	mov	r8, r7
 800bce8:	ed9f 8b31 	vldr	d8, [pc, #196]	; 800bdb0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800bcec:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800bcf0:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800bcf4:	2b04      	cmp	r3, #4
 800bcf6:	ed9f ab30 	vldr	d10, [pc, #192]	; 800bdb8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800bcfa:	ed9f 9b31 	vldr	d9, [pc, #196]	; 800bdc0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800bcfe:	4681      	mov	r9, r0
 800bd00:	468a      	mov	sl, r1
 800bd02:	ac04      	add	r4, sp, #16
 800bd04:	d03f      	beq.n	800bd86 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800bd06:	2b05      	cmp	r3, #5
 800bd08:	d044      	beq.n	800bd94 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800bd0a:	2b03      	cmp	r3, #3
 800bd0c:	d03b      	beq.n	800bd86 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800bd0e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bd12:	ed8d ab06 	vstr	d10, [sp, #24]
 800bd16:	ed8d 8b08 	vstr	d8, [sp, #32]
 800bd1a:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800bd1e:	ab08      	add	r3, sp, #32
 800bd20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bd22:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bd26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bd2a:	f007 ffc1 	bl	8013cb0 <rmw_time_equal>
 800bd2e:	b118      	cbz	r0, 800bd38 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800bd30:	ed8d 9b04 	vstr	d9, [sp, #16]
 800bd34:	ed8d 8b06 	vstr	d8, [sp, #24]
 800bd38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bd3c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800bd40:	f8d5 781c 	ldr.w	r7, [r5, #2076]	; 0x81c
 800bd44:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800bd48:	f008 f806 	bl	8013d58 <rmw_time_total_nsec>
 800bd4c:	1830      	adds	r0, r6, r0
 800bd4e:	eb47 0101 	adc.w	r1, r7, r1
 800bd52:	4548      	cmp	r0, r9
 800bd54:	eb71 030a 	sbcs.w	r3, r1, sl
 800bd58:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800bd5c:	db05      	blt.n	800bd6a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800bd5e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800bd62:	4591      	cmp	r9, r2
 800bd64:	eb7a 0303 	sbcs.w	r3, sl, r3
 800bd68:	da03      	bge.n	800bd72 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800bd6a:	4817      	ldr	r0, [pc, #92]	; (800bdc8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800bd6c:	4641      	mov	r1, r8
 800bd6e:	f008 f97b 	bl	8014068 <put_memory>
 800bd72:	f1bb 0f00 	cmp.w	fp, #0
 800bd76:	d014      	beq.n	800bda2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800bd78:	46d8      	mov	r8, fp
 800bd7a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800bd7e:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800bd82:	2b04      	cmp	r3, #4
 800bd84:	d1bf      	bne.n	800bd06 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800bd86:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800bd8a:	3340      	adds	r3, #64	; 0x40
 800bd8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bd8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bd92:	e7c0      	b.n	800bd16 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800bd94:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800bd98:	3348      	adds	r3, #72	; 0x48
 800bd9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bd9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bda0:	e7b9      	b.n	800bd16 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800bda2:	b00d      	add	sp, #52	; 0x34
 800bda4:	ecbd 8b06 	vpop	{d8-d10}
 800bda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdac:	f3af 8000 	nop.w
	...
 800bdb8:	00000001 	.word	0x00000001
 800bdbc:	00000000 	.word	0x00000000
 800bdc0:	0000001e 	.word	0x0000001e
 800bdc4:	00000000 	.word	0x00000000
 800bdc8:	20010b34 	.word	0x20010b34

0800bdcc <run_xrce_session>:
 800bdcc:	b510      	push	{r4, lr}
 800bdce:	788c      	ldrb	r4, [r1, #2]
 800bdd0:	b086      	sub	sp, #24
 800bdd2:	2c01      	cmp	r4, #1
 800bdd4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800bdd8:	d00c      	beq.n	800bdf4 <run_xrce_session+0x28>
 800bdda:	4619      	mov	r1, r3
 800bddc:	2301      	movs	r3, #1
 800bdde:	9300      	str	r3, [sp, #0]
 800bde0:	f10d 020e 	add.w	r2, sp, #14
 800bde4:	f10d 0317 	add.w	r3, sp, #23
 800bde8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bdec:	f002 fa26 	bl	800e23c <uxr_run_session_until_all_status>
 800bdf0:	b006      	add	sp, #24
 800bdf2:	bd10      	pop	{r4, pc}
 800bdf4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bdf8:	f001 fe3a 	bl	800da70 <uxr_flash_output_streams>
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	b006      	add	sp, #24
 800be00:	bd10      	pop	{r4, pc}
 800be02:	bf00      	nop

0800be04 <convert_qos_profile>:
 800be04:	7a4a      	ldrb	r2, [r1, #9]
 800be06:	f891 c008 	ldrb.w	ip, [r1, #8]
 800be0a:	2a02      	cmp	r2, #2
 800be0c:	bf18      	it	ne
 800be0e:	2200      	movne	r2, #0
 800be10:	7002      	strb	r2, [r0, #0]
 800be12:	780a      	ldrb	r2, [r1, #0]
 800be14:	8889      	ldrh	r1, [r1, #4]
 800be16:	8081      	strh	r1, [r0, #4]
 800be18:	f1ac 0c02 	sub.w	ip, ip, #2
 800be1c:	f1a2 0202 	sub.w	r2, r2, #2
 800be20:	fabc fc8c 	clz	ip, ip
 800be24:	fab2 f282 	clz	r2, r2
 800be28:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800be2c:	0952      	lsrs	r2, r2, #5
 800be2e:	f880 c001 	strb.w	ip, [r0, #1]
 800be32:	7082      	strb	r2, [r0, #2]
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop

0800be38 <generate_type_name>:
 800be38:	b530      	push	{r4, r5, lr}
 800be3a:	2300      	movs	r3, #0
 800be3c:	700b      	strb	r3, [r1, #0]
 800be3e:	6803      	ldr	r3, [r0, #0]
 800be40:	b087      	sub	sp, #28
 800be42:	4614      	mov	r4, r2
 800be44:	b1d3      	cbz	r3, 800be7c <generate_type_name+0x44>
 800be46:	4a0f      	ldr	r2, [pc, #60]	; (800be84 <generate_type_name+0x4c>)
 800be48:	4615      	mov	r5, r2
 800be4a:	9203      	str	r2, [sp, #12]
 800be4c:	9500      	str	r5, [sp, #0]
 800be4e:	6842      	ldr	r2, [r0, #4]
 800be50:	480d      	ldr	r0, [pc, #52]	; (800be88 <generate_type_name+0x50>)
 800be52:	9001      	str	r0, [sp, #4]
 800be54:	4608      	mov	r0, r1
 800be56:	490d      	ldr	r1, [pc, #52]	; (800be8c <generate_type_name+0x54>)
 800be58:	9204      	str	r2, [sp, #16]
 800be5a:	9105      	str	r1, [sp, #20]
 800be5c:	9102      	str	r1, [sp, #8]
 800be5e:	4a0c      	ldr	r2, [pc, #48]	; (800be90 <generate_type_name+0x58>)
 800be60:	4621      	mov	r1, r4
 800be62:	f00b f9f7 	bl	8017254 <sniprintf>
 800be66:	2800      	cmp	r0, #0
 800be68:	db05      	blt.n	800be76 <generate_type_name+0x3e>
 800be6a:	4284      	cmp	r4, r0
 800be6c:	bfd4      	ite	le
 800be6e:	2000      	movle	r0, #0
 800be70:	2001      	movgt	r0, #1
 800be72:	b007      	add	sp, #28
 800be74:	bd30      	pop	{r4, r5, pc}
 800be76:	2000      	movs	r0, #0
 800be78:	b007      	add	sp, #28
 800be7a:	bd30      	pop	{r4, r5, pc}
 800be7c:	4b05      	ldr	r3, [pc, #20]	; (800be94 <generate_type_name+0x5c>)
 800be7e:	4a01      	ldr	r2, [pc, #4]	; (800be84 <generate_type_name+0x4c>)
 800be80:	461d      	mov	r5, r3
 800be82:	e7e2      	b.n	800be4a <generate_type_name+0x12>
 800be84:	080186ec 	.word	0x080186ec
 800be88:	08018704 	.word	0x08018704
 800be8c:	08018700 	.word	0x08018700
 800be90:	080186f0 	.word	0x080186f0
 800be94:	08018df4 	.word	0x08018df4

0800be98 <generate_topic_name>:
 800be98:	b510      	push	{r4, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	4614      	mov	r4, r2
 800be9e:	9000      	str	r0, [sp, #0]
 800bea0:	4b08      	ldr	r3, [pc, #32]	; (800bec4 <generate_topic_name+0x2c>)
 800bea2:	4a09      	ldr	r2, [pc, #36]	; (800bec8 <generate_topic_name+0x30>)
 800bea4:	4608      	mov	r0, r1
 800bea6:	4621      	mov	r1, r4
 800bea8:	f00b f9d4 	bl	8017254 <sniprintf>
 800beac:	2800      	cmp	r0, #0
 800beae:	db05      	blt.n	800bebc <generate_topic_name+0x24>
 800beb0:	4284      	cmp	r4, r0
 800beb2:	bfd4      	ite	le
 800beb4:	2000      	movle	r0, #0
 800beb6:	2001      	movgt	r0, #1
 800beb8:	b002      	add	sp, #8
 800beba:	bd10      	pop	{r4, pc}
 800bebc:	2000      	movs	r0, #0
 800bebe:	b002      	add	sp, #8
 800bec0:	bd10      	pop	{r4, pc}
 800bec2:	bf00      	nop
 800bec4:	08018710 	.word	0x08018710
 800bec8:	08018708 	.word	0x08018708

0800becc <is_uxrce_rmw_identifier_valid>:
 800becc:	b510      	push	{r4, lr}
 800bece:	4604      	mov	r4, r0
 800bed0:	b140      	cbz	r0, 800bee4 <is_uxrce_rmw_identifier_valid+0x18>
 800bed2:	f008 f921 	bl	8014118 <rmw_get_implementation_identifier>
 800bed6:	4601      	mov	r1, r0
 800bed8:	4620      	mov	r0, r4
 800beda:	f7f4 f981 	bl	80001e0 <strcmp>
 800bede:	fab0 f080 	clz	r0, r0
 800bee2:	0940      	lsrs	r0, r0, #5
 800bee4:	bd10      	pop	{r4, pc}
 800bee6:	bf00      	nop

0800bee8 <get_message_typesupport_handle>:
 800bee8:	6883      	ldr	r3, [r0, #8]
 800beea:	4718      	bx	r3

0800beec <get_message_typesupport_handle_function>:
 800beec:	b510      	push	{r4, lr}
 800beee:	4604      	mov	r4, r0
 800bef0:	6800      	ldr	r0, [r0, #0]
 800bef2:	f7f4 f975 	bl	80001e0 <strcmp>
 800bef6:	2800      	cmp	r0, #0
 800bef8:	bf0c      	ite	eq
 800befa:	4620      	moveq	r0, r4
 800befc:	2000      	movne	r0, #0
 800befe:	bd10      	pop	{r4, pc}

0800bf00 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800bf00:	4b04      	ldr	r3, [pc, #16]	; (800bf14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	b10a      	cbz	r2, 800bf0a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800bf06:	4803      	ldr	r0, [pc, #12]	; (800bf14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800bf08:	4770      	bx	lr
 800bf0a:	4a03      	ldr	r2, [pc, #12]	; (800bf18 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800bf0c:	4801      	ldr	r0, [pc, #4]	; (800bf14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800bf0e:	6812      	ldr	r2, [r2, #0]
 800bf10:	601a      	str	r2, [r3, #0]
 800bf12:	4770      	bx	lr
 800bf14:	20000034 	.word	0x20000034
 800bf18:	200000b0 	.word	0x200000b0

0800bf1c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800bf1c:	4a02      	ldr	r2, [pc, #8]	; (800bf28 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800bf1e:	4b03      	ldr	r3, [pc, #12]	; (800bf2c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800bf20:	6812      	ldr	r2, [r2, #0]
 800bf22:	601a      	str	r2, [r3, #0]
 800bf24:	4770      	bx	lr
 800bf26:	bf00      	nop
 800bf28:	200000b0 	.word	0x200000b0
 800bf2c:	20000034 	.word	0x20000034

0800bf30 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800bf30:	f009 b9ec 	b.w	801530c <std_msgs__msg__Int32__init>

0800bf34 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800bf34:	f009 b9ee 	b.w	8015314 <std_msgs__msg__Int32__fini>

0800bf38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800bf38:	4b04      	ldr	r3, [pc, #16]	; (800bf4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	b10a      	cbz	r2, 800bf42 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800bf3e:	4803      	ldr	r0, [pc, #12]	; (800bf4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800bf40:	4770      	bx	lr
 800bf42:	4a03      	ldr	r2, [pc, #12]	; (800bf50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800bf44:	4801      	ldr	r0, [pc, #4]	; (800bf4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800bf46:	6812      	ldr	r2, [r2, #0]
 800bf48:	601a      	str	r2, [r3, #0]
 800bf4a:	4770      	bx	lr
 800bf4c:	2000007c 	.word	0x2000007c
 800bf50:	200000b4 	.word	0x200000b4

0800bf54 <_Int32__max_serialized_size>:
 800bf54:	b508      	push	{r3, lr}
 800bf56:	2104      	movs	r1, #4
 800bf58:	2000      	movs	r0, #0
 800bf5a:	f001 f807 	bl	800cf6c <ucdr_alignment>
 800bf5e:	3004      	adds	r0, #4
 800bf60:	bd08      	pop	{r3, pc}
 800bf62:	bf00      	nop

0800bf64 <_Int32__cdr_deserialize>:
 800bf64:	b109      	cbz	r1, 800bf6a <_Int32__cdr_deserialize+0x6>
 800bf66:	f000 bf19 	b.w	800cd9c <ucdr_deserialize_int32_t>
 800bf6a:	4608      	mov	r0, r1
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop

0800bf70 <get_serialized_size_std_msgs__msg__Int32>:
 800bf70:	b138      	cbz	r0, 800bf82 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800bf72:	b508      	push	{r3, lr}
 800bf74:	460b      	mov	r3, r1
 800bf76:	4618      	mov	r0, r3
 800bf78:	2104      	movs	r1, #4
 800bf7a:	f000 fff7 	bl	800cf6c <ucdr_alignment>
 800bf7e:	3004      	adds	r0, #4
 800bf80:	bd08      	pop	{r3, pc}
 800bf82:	4770      	bx	lr

0800bf84 <_Int32__cdr_serialize>:
 800bf84:	460a      	mov	r2, r1
 800bf86:	b118      	cbz	r0, 800bf90 <_Int32__cdr_serialize+0xc>
 800bf88:	6801      	ldr	r1, [r0, #0]
 800bf8a:	4610      	mov	r0, r2
 800bf8c:	f000 be6e 	b.w	800cc6c <ucdr_serialize_int32_t>
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop

0800bf94 <_Int32__get_serialized_size>:
 800bf94:	b130      	cbz	r0, 800bfa4 <_Int32__get_serialized_size+0x10>
 800bf96:	b508      	push	{r3, lr}
 800bf98:	2104      	movs	r1, #4
 800bf9a:	2000      	movs	r0, #0
 800bf9c:	f000 ffe6 	bl	800cf6c <ucdr_alignment>
 800bfa0:	3004      	adds	r0, #4
 800bfa2:	bd08      	pop	{r3, pc}
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop

0800bfa8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800bfa8:	4800      	ldr	r0, [pc, #0]	; (800bfac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800bfaa:	4770      	bx	lr
 800bfac:	20000088 	.word	0x20000088

0800bfb0 <ucdr_serialize_bool>:
 800bfb0:	b538      	push	{r3, r4, r5, lr}
 800bfb2:	460d      	mov	r5, r1
 800bfb4:	2101      	movs	r1, #1
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	f000 ff8c 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800bfbc:	b148      	cbz	r0, 800bfd2 <ucdr_serialize_bool+0x22>
 800bfbe:	68a3      	ldr	r3, [r4, #8]
 800bfc0:	701d      	strb	r5, [r3, #0]
 800bfc2:	68a2      	ldr	r2, [r4, #8]
 800bfc4:	6923      	ldr	r3, [r4, #16]
 800bfc6:	2101      	movs	r1, #1
 800bfc8:	440a      	add	r2, r1
 800bfca:	440b      	add	r3, r1
 800bfcc:	60a2      	str	r2, [r4, #8]
 800bfce:	6123      	str	r3, [r4, #16]
 800bfd0:	7561      	strb	r1, [r4, #21]
 800bfd2:	7da0      	ldrb	r0, [r4, #22]
 800bfd4:	f080 0001 	eor.w	r0, r0, #1
 800bfd8:	bd38      	pop	{r3, r4, r5, pc}
 800bfda:	bf00      	nop

0800bfdc <ucdr_deserialize_bool>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	460d      	mov	r5, r1
 800bfe0:	2101      	movs	r1, #1
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	f000 ff76 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800bfe8:	b160      	cbz	r0, 800c004 <ucdr_deserialize_bool+0x28>
 800bfea:	68a2      	ldr	r2, [r4, #8]
 800bfec:	6923      	ldr	r3, [r4, #16]
 800bfee:	f812 1b01 	ldrb.w	r1, [r2], #1
 800bff2:	3900      	subs	r1, #0
 800bff4:	bf18      	it	ne
 800bff6:	2101      	movne	r1, #1
 800bff8:	7029      	strb	r1, [r5, #0]
 800bffa:	3301      	adds	r3, #1
 800bffc:	2101      	movs	r1, #1
 800bffe:	60a2      	str	r2, [r4, #8]
 800c000:	6123      	str	r3, [r4, #16]
 800c002:	7561      	strb	r1, [r4, #21]
 800c004:	7da0      	ldrb	r0, [r4, #22]
 800c006:	f080 0001 	eor.w	r0, r0, #1
 800c00a:	bd38      	pop	{r3, r4, r5, pc}

0800c00c <ucdr_serialize_uint8_t>:
 800c00c:	b538      	push	{r3, r4, r5, lr}
 800c00e:	460d      	mov	r5, r1
 800c010:	2101      	movs	r1, #1
 800c012:	4604      	mov	r4, r0
 800c014:	f000 ff5e 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c018:	b148      	cbz	r0, 800c02e <ucdr_serialize_uint8_t+0x22>
 800c01a:	68a3      	ldr	r3, [r4, #8]
 800c01c:	701d      	strb	r5, [r3, #0]
 800c01e:	68a2      	ldr	r2, [r4, #8]
 800c020:	6923      	ldr	r3, [r4, #16]
 800c022:	2101      	movs	r1, #1
 800c024:	440a      	add	r2, r1
 800c026:	440b      	add	r3, r1
 800c028:	60a2      	str	r2, [r4, #8]
 800c02a:	6123      	str	r3, [r4, #16]
 800c02c:	7561      	strb	r1, [r4, #21]
 800c02e:	7da0      	ldrb	r0, [r4, #22]
 800c030:	f080 0001 	eor.w	r0, r0, #1
 800c034:	bd38      	pop	{r3, r4, r5, pc}
 800c036:	bf00      	nop

0800c038 <ucdr_deserialize_uint8_t>:
 800c038:	b538      	push	{r3, r4, r5, lr}
 800c03a:	460d      	mov	r5, r1
 800c03c:	2101      	movs	r1, #1
 800c03e:	4604      	mov	r4, r0
 800c040:	f000 ff48 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c044:	b150      	cbz	r0, 800c05c <ucdr_deserialize_uint8_t+0x24>
 800c046:	68a3      	ldr	r3, [r4, #8]
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	702b      	strb	r3, [r5, #0]
 800c04c:	68a2      	ldr	r2, [r4, #8]
 800c04e:	6923      	ldr	r3, [r4, #16]
 800c050:	2101      	movs	r1, #1
 800c052:	440a      	add	r2, r1
 800c054:	440b      	add	r3, r1
 800c056:	60a2      	str	r2, [r4, #8]
 800c058:	6123      	str	r3, [r4, #16]
 800c05a:	7561      	strb	r1, [r4, #21]
 800c05c:	7da0      	ldrb	r0, [r4, #22]
 800c05e:	f080 0001 	eor.w	r0, r0, #1
 800c062:	bd38      	pop	{r3, r4, r5, pc}

0800c064 <ucdr_serialize_uint16_t>:
 800c064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c068:	b082      	sub	sp, #8
 800c06a:	460b      	mov	r3, r1
 800c06c:	2102      	movs	r1, #2
 800c06e:	4604      	mov	r4, r0
 800c070:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c074:	f000 ff82 	bl	800cf7c <ucdr_buffer_alignment>
 800c078:	4601      	mov	r1, r0
 800c07a:	4620      	mov	r0, r4
 800c07c:	7d67      	ldrb	r7, [r4, #21]
 800c07e:	f000 ffc1 	bl	800d004 <ucdr_advance_buffer>
 800c082:	2102      	movs	r1, #2
 800c084:	4620      	mov	r0, r4
 800c086:	f000 ff19 	bl	800cebc <ucdr_check_buffer_available_for>
 800c08a:	bb78      	cbnz	r0, 800c0ec <ucdr_serialize_uint16_t+0x88>
 800c08c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c090:	42ab      	cmp	r3, r5
 800c092:	d926      	bls.n	800c0e2 <ucdr_serialize_uint16_t+0x7e>
 800c094:	1b5e      	subs	r6, r3, r5
 800c096:	60a3      	str	r3, [r4, #8]
 800c098:	6923      	ldr	r3, [r4, #16]
 800c09a:	f1c6 0802 	rsb	r8, r6, #2
 800c09e:	4433      	add	r3, r6
 800c0a0:	6123      	str	r3, [r4, #16]
 800c0a2:	4641      	mov	r1, r8
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f000 ff15 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	d03b      	beq.n	800c126 <ucdr_serialize_uint16_t+0xc2>
 800c0ae:	7d23      	ldrb	r3, [r4, #20]
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d04a      	beq.n	800c14a <ucdr_serialize_uint16_t+0xe6>
 800c0b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c0b8:	702b      	strb	r3, [r5, #0]
 800c0ba:	2e00      	cmp	r6, #0
 800c0bc:	d040      	beq.n	800c140 <ucdr_serialize_uint16_t+0xdc>
 800c0be:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c0c2:	706b      	strb	r3, [r5, #1]
 800c0c4:	6923      	ldr	r3, [r4, #16]
 800c0c6:	68a2      	ldr	r2, [r4, #8]
 800c0c8:	7da0      	ldrb	r0, [r4, #22]
 800c0ca:	3302      	adds	r3, #2
 800c0cc:	1b9e      	subs	r6, r3, r6
 800c0ce:	4442      	add	r2, r8
 800c0d0:	2302      	movs	r3, #2
 800c0d2:	f080 0001 	eor.w	r0, r0, #1
 800c0d6:	60a2      	str	r2, [r4, #8]
 800c0d8:	6126      	str	r6, [r4, #16]
 800c0da:	7563      	strb	r3, [r4, #21]
 800c0dc:	b002      	add	sp, #8
 800c0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e2:	2102      	movs	r1, #2
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	f000 fef5 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c0ea:	b190      	cbz	r0, 800c112 <ucdr_serialize_uint16_t+0xae>
 800c0ec:	7d23      	ldrb	r3, [r4, #20]
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	68a3      	ldr	r3, [r4, #8]
 800c0f2:	d014      	beq.n	800c11e <ucdr_serialize_uint16_t+0xba>
 800c0f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c0f8:	701a      	strb	r2, [r3, #0]
 800c0fa:	68a3      	ldr	r3, [r4, #8]
 800c0fc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c100:	705a      	strb	r2, [r3, #1]
 800c102:	68a2      	ldr	r2, [r4, #8]
 800c104:	6923      	ldr	r3, [r4, #16]
 800c106:	3202      	adds	r2, #2
 800c108:	3302      	adds	r3, #2
 800c10a:	2102      	movs	r1, #2
 800c10c:	60a2      	str	r2, [r4, #8]
 800c10e:	6123      	str	r3, [r4, #16]
 800c110:	7561      	strb	r1, [r4, #21]
 800c112:	7da0      	ldrb	r0, [r4, #22]
 800c114:	f080 0001 	eor.w	r0, r0, #1
 800c118:	b002      	add	sp, #8
 800c11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c11e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c122:	801a      	strh	r2, [r3, #0]
 800c124:	e7ed      	b.n	800c102 <ucdr_serialize_uint16_t+0x9e>
 800c126:	68a2      	ldr	r2, [r4, #8]
 800c128:	6923      	ldr	r3, [r4, #16]
 800c12a:	7da0      	ldrb	r0, [r4, #22]
 800c12c:	7567      	strb	r7, [r4, #21]
 800c12e:	1b92      	subs	r2, r2, r6
 800c130:	1b9b      	subs	r3, r3, r6
 800c132:	f080 0001 	eor.w	r0, r0, #1
 800c136:	60a2      	str	r2, [r4, #8]
 800c138:	6123      	str	r3, [r4, #16]
 800c13a:	b002      	add	sp, #8
 800c13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c140:	68a3      	ldr	r3, [r4, #8]
 800c142:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c146:	701a      	strb	r2, [r3, #0]
 800c148:	e7bc      	b.n	800c0c4 <ucdr_serialize_uint16_t+0x60>
 800c14a:	4628      	mov	r0, r5
 800c14c:	f10d 0506 	add.w	r5, sp, #6
 800c150:	4629      	mov	r1, r5
 800c152:	4632      	mov	r2, r6
 800c154:	f00b fa77 	bl	8017646 <memcpy>
 800c158:	68a0      	ldr	r0, [r4, #8]
 800c15a:	4642      	mov	r2, r8
 800c15c:	19a9      	adds	r1, r5, r6
 800c15e:	f00b fa72 	bl	8017646 <memcpy>
 800c162:	e7af      	b.n	800c0c4 <ucdr_serialize_uint16_t+0x60>

0800c164 <ucdr_serialize_endian_uint16_t>:
 800c164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c168:	b083      	sub	sp, #12
 800c16a:	460d      	mov	r5, r1
 800c16c:	2102      	movs	r1, #2
 800c16e:	4604      	mov	r4, r0
 800c170:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c174:	f000 ff02 	bl	800cf7c <ucdr_buffer_alignment>
 800c178:	4601      	mov	r1, r0
 800c17a:	4620      	mov	r0, r4
 800c17c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c180:	f000 ff40 	bl	800d004 <ucdr_advance_buffer>
 800c184:	2102      	movs	r1, #2
 800c186:	4620      	mov	r0, r4
 800c188:	f000 fe98 	bl	800cebc <ucdr_check_buffer_available_for>
 800c18c:	bb70      	cbnz	r0, 800c1ec <ucdr_serialize_endian_uint16_t+0x88>
 800c18e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c192:	42be      	cmp	r6, r7
 800c194:	d925      	bls.n	800c1e2 <ucdr_serialize_endian_uint16_t+0x7e>
 800c196:	6923      	ldr	r3, [r4, #16]
 800c198:	60a6      	str	r6, [r4, #8]
 800c19a:	1bf6      	subs	r6, r6, r7
 800c19c:	4433      	add	r3, r6
 800c19e:	f1c6 0902 	rsb	r9, r6, #2
 800c1a2:	6123      	str	r3, [r4, #16]
 800c1a4:	4649      	mov	r1, r9
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f000 fe94 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	d039      	beq.n	800c224 <ucdr_serialize_endian_uint16_t+0xc0>
 800c1b0:	2d01      	cmp	r5, #1
 800c1b2:	d04a      	beq.n	800c24a <ucdr_serialize_endian_uint16_t+0xe6>
 800c1b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c1b8:	703b      	strb	r3, [r7, #0]
 800c1ba:	2e00      	cmp	r6, #0
 800c1bc:	d040      	beq.n	800c240 <ucdr_serialize_endian_uint16_t+0xdc>
 800c1be:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c1c2:	707b      	strb	r3, [r7, #1]
 800c1c4:	6923      	ldr	r3, [r4, #16]
 800c1c6:	68a2      	ldr	r2, [r4, #8]
 800c1c8:	7da0      	ldrb	r0, [r4, #22]
 800c1ca:	3302      	adds	r3, #2
 800c1cc:	444a      	add	r2, r9
 800c1ce:	1b9b      	subs	r3, r3, r6
 800c1d0:	2102      	movs	r1, #2
 800c1d2:	f080 0001 	eor.w	r0, r0, #1
 800c1d6:	60a2      	str	r2, [r4, #8]
 800c1d8:	6123      	str	r3, [r4, #16]
 800c1da:	7561      	strb	r1, [r4, #21]
 800c1dc:	b003      	add	sp, #12
 800c1de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1e2:	2102      	movs	r1, #2
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	f000 fe75 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c1ea:	b188      	cbz	r0, 800c210 <ucdr_serialize_endian_uint16_t+0xac>
 800c1ec:	2d01      	cmp	r5, #1
 800c1ee:	68a3      	ldr	r3, [r4, #8]
 800c1f0:	d014      	beq.n	800c21c <ucdr_serialize_endian_uint16_t+0xb8>
 800c1f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c1f6:	701a      	strb	r2, [r3, #0]
 800c1f8:	68a3      	ldr	r3, [r4, #8]
 800c1fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c1fe:	705a      	strb	r2, [r3, #1]
 800c200:	68a2      	ldr	r2, [r4, #8]
 800c202:	6923      	ldr	r3, [r4, #16]
 800c204:	3202      	adds	r2, #2
 800c206:	3302      	adds	r3, #2
 800c208:	2102      	movs	r1, #2
 800c20a:	60a2      	str	r2, [r4, #8]
 800c20c:	6123      	str	r3, [r4, #16]
 800c20e:	7561      	strb	r1, [r4, #21]
 800c210:	7da0      	ldrb	r0, [r4, #22]
 800c212:	f080 0001 	eor.w	r0, r0, #1
 800c216:	b003      	add	sp, #12
 800c218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c21c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c220:	801a      	strh	r2, [r3, #0]
 800c222:	e7ed      	b.n	800c200 <ucdr_serialize_endian_uint16_t+0x9c>
 800c224:	68a2      	ldr	r2, [r4, #8]
 800c226:	6923      	ldr	r3, [r4, #16]
 800c228:	7da0      	ldrb	r0, [r4, #22]
 800c22a:	f884 8015 	strb.w	r8, [r4, #21]
 800c22e:	1b92      	subs	r2, r2, r6
 800c230:	1b9b      	subs	r3, r3, r6
 800c232:	f080 0001 	eor.w	r0, r0, #1
 800c236:	60a2      	str	r2, [r4, #8]
 800c238:	6123      	str	r3, [r4, #16]
 800c23a:	b003      	add	sp, #12
 800c23c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c240:	68a3      	ldr	r3, [r4, #8]
 800c242:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c246:	701a      	strb	r2, [r3, #0]
 800c248:	e7bc      	b.n	800c1c4 <ucdr_serialize_endian_uint16_t+0x60>
 800c24a:	f10d 0506 	add.w	r5, sp, #6
 800c24e:	4629      	mov	r1, r5
 800c250:	4632      	mov	r2, r6
 800c252:	4638      	mov	r0, r7
 800c254:	f00b f9f7 	bl	8017646 <memcpy>
 800c258:	68a0      	ldr	r0, [r4, #8]
 800c25a:	464a      	mov	r2, r9
 800c25c:	19a9      	adds	r1, r5, r6
 800c25e:	f00b f9f2 	bl	8017646 <memcpy>
 800c262:	e7af      	b.n	800c1c4 <ucdr_serialize_endian_uint16_t+0x60>

0800c264 <ucdr_deserialize_uint16_t>:
 800c264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c268:	460d      	mov	r5, r1
 800c26a:	2102      	movs	r1, #2
 800c26c:	4604      	mov	r4, r0
 800c26e:	f000 fe85 	bl	800cf7c <ucdr_buffer_alignment>
 800c272:	4601      	mov	r1, r0
 800c274:	4620      	mov	r0, r4
 800c276:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c27a:	f000 fec3 	bl	800d004 <ucdr_advance_buffer>
 800c27e:	2102      	movs	r1, #2
 800c280:	4620      	mov	r0, r4
 800c282:	f000 fe1b 	bl	800cebc <ucdr_check_buffer_available_for>
 800c286:	bb60      	cbnz	r0, 800c2e2 <ucdr_deserialize_uint16_t+0x7e>
 800c288:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c28c:	42be      	cmp	r6, r7
 800c28e:	d923      	bls.n	800c2d8 <ucdr_deserialize_uint16_t+0x74>
 800c290:	6923      	ldr	r3, [r4, #16]
 800c292:	60a6      	str	r6, [r4, #8]
 800c294:	1bf6      	subs	r6, r6, r7
 800c296:	4433      	add	r3, r6
 800c298:	f1c6 0902 	rsb	r9, r6, #2
 800c29c:	6123      	str	r3, [r4, #16]
 800c29e:	4649      	mov	r1, r9
 800c2a0:	4620      	mov	r0, r4
 800c2a2:	f000 fe17 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	d034      	beq.n	800c314 <ucdr_deserialize_uint16_t+0xb0>
 800c2aa:	7d23      	ldrb	r3, [r4, #20]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d042      	beq.n	800c336 <ucdr_deserialize_uint16_t+0xd2>
 800c2b0:	787b      	ldrb	r3, [r7, #1]
 800c2b2:	702b      	strb	r3, [r5, #0]
 800c2b4:	2e00      	cmp	r6, #0
 800c2b6:	d03a      	beq.n	800c32e <ucdr_deserialize_uint16_t+0xca>
 800c2b8:	783b      	ldrb	r3, [r7, #0]
 800c2ba:	706b      	strb	r3, [r5, #1]
 800c2bc:	6923      	ldr	r3, [r4, #16]
 800c2be:	68a2      	ldr	r2, [r4, #8]
 800c2c0:	7da0      	ldrb	r0, [r4, #22]
 800c2c2:	2102      	movs	r1, #2
 800c2c4:	3302      	adds	r3, #2
 800c2c6:	444a      	add	r2, r9
 800c2c8:	1b9b      	subs	r3, r3, r6
 800c2ca:	7561      	strb	r1, [r4, #21]
 800c2cc:	60a2      	str	r2, [r4, #8]
 800c2ce:	6123      	str	r3, [r4, #16]
 800c2d0:	f080 0001 	eor.w	r0, r0, #1
 800c2d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2d8:	2102      	movs	r1, #2
 800c2da:	4620      	mov	r0, r4
 800c2dc:	f000 fdfa 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c2e0:	b180      	cbz	r0, 800c304 <ucdr_deserialize_uint16_t+0xa0>
 800c2e2:	7d23      	ldrb	r3, [r4, #20]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	68a3      	ldr	r3, [r4, #8]
 800c2e8:	d011      	beq.n	800c30e <ucdr_deserialize_uint16_t+0xaa>
 800c2ea:	785b      	ldrb	r3, [r3, #1]
 800c2ec:	702b      	strb	r3, [r5, #0]
 800c2ee:	68a3      	ldr	r3, [r4, #8]
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	706b      	strb	r3, [r5, #1]
 800c2f4:	68a2      	ldr	r2, [r4, #8]
 800c2f6:	6923      	ldr	r3, [r4, #16]
 800c2f8:	3202      	adds	r2, #2
 800c2fa:	3302      	adds	r3, #2
 800c2fc:	2102      	movs	r1, #2
 800c2fe:	60a2      	str	r2, [r4, #8]
 800c300:	6123      	str	r3, [r4, #16]
 800c302:	7561      	strb	r1, [r4, #21]
 800c304:	7da0      	ldrb	r0, [r4, #22]
 800c306:	f080 0001 	eor.w	r0, r0, #1
 800c30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c30e:	881b      	ldrh	r3, [r3, #0]
 800c310:	802b      	strh	r3, [r5, #0]
 800c312:	e7ef      	b.n	800c2f4 <ucdr_deserialize_uint16_t+0x90>
 800c314:	68a2      	ldr	r2, [r4, #8]
 800c316:	6923      	ldr	r3, [r4, #16]
 800c318:	7da0      	ldrb	r0, [r4, #22]
 800c31a:	f884 8015 	strb.w	r8, [r4, #21]
 800c31e:	1b92      	subs	r2, r2, r6
 800c320:	1b9b      	subs	r3, r3, r6
 800c322:	60a2      	str	r2, [r4, #8]
 800c324:	6123      	str	r3, [r4, #16]
 800c326:	f080 0001 	eor.w	r0, r0, #1
 800c32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c32e:	68a3      	ldr	r3, [r4, #8]
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	706b      	strb	r3, [r5, #1]
 800c334:	e7c2      	b.n	800c2bc <ucdr_deserialize_uint16_t+0x58>
 800c336:	4639      	mov	r1, r7
 800c338:	4632      	mov	r2, r6
 800c33a:	4628      	mov	r0, r5
 800c33c:	f00b f983 	bl	8017646 <memcpy>
 800c340:	68a1      	ldr	r1, [r4, #8]
 800c342:	464a      	mov	r2, r9
 800c344:	19a8      	adds	r0, r5, r6
 800c346:	f00b f97e 	bl	8017646 <memcpy>
 800c34a:	e7b7      	b.n	800c2bc <ucdr_deserialize_uint16_t+0x58>

0800c34c <ucdr_deserialize_endian_uint16_t>:
 800c34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c350:	460e      	mov	r6, r1
 800c352:	2102      	movs	r1, #2
 800c354:	4604      	mov	r4, r0
 800c356:	4615      	mov	r5, r2
 800c358:	f000 fe10 	bl	800cf7c <ucdr_buffer_alignment>
 800c35c:	4601      	mov	r1, r0
 800c35e:	4620      	mov	r0, r4
 800c360:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c364:	f000 fe4e 	bl	800d004 <ucdr_advance_buffer>
 800c368:	2102      	movs	r1, #2
 800c36a:	4620      	mov	r0, r4
 800c36c:	f000 fda6 	bl	800cebc <ucdr_check_buffer_available_for>
 800c370:	bb70      	cbnz	r0, 800c3d0 <ucdr_deserialize_endian_uint16_t+0x84>
 800c372:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800c376:	4547      	cmp	r7, r8
 800c378:	d925      	bls.n	800c3c6 <ucdr_deserialize_endian_uint16_t+0x7a>
 800c37a:	6923      	ldr	r3, [r4, #16]
 800c37c:	60a7      	str	r7, [r4, #8]
 800c37e:	eba7 0708 	sub.w	r7, r7, r8
 800c382:	443b      	add	r3, r7
 800c384:	f1c7 0a02 	rsb	sl, r7, #2
 800c388:	6123      	str	r3, [r4, #16]
 800c38a:	4651      	mov	r1, sl
 800c38c:	4620      	mov	r0, r4
 800c38e:	f000 fda1 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c392:	2800      	cmp	r0, #0
 800c394:	d034      	beq.n	800c400 <ucdr_deserialize_endian_uint16_t+0xb4>
 800c396:	2e01      	cmp	r6, #1
 800c398:	d043      	beq.n	800c422 <ucdr_deserialize_endian_uint16_t+0xd6>
 800c39a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c39e:	702b      	strb	r3, [r5, #0]
 800c3a0:	2f00      	cmp	r7, #0
 800c3a2:	d03a      	beq.n	800c41a <ucdr_deserialize_endian_uint16_t+0xce>
 800c3a4:	f898 3000 	ldrb.w	r3, [r8]
 800c3a8:	706b      	strb	r3, [r5, #1]
 800c3aa:	6923      	ldr	r3, [r4, #16]
 800c3ac:	68a2      	ldr	r2, [r4, #8]
 800c3ae:	7da0      	ldrb	r0, [r4, #22]
 800c3b0:	2102      	movs	r1, #2
 800c3b2:	3302      	adds	r3, #2
 800c3b4:	4452      	add	r2, sl
 800c3b6:	1bdb      	subs	r3, r3, r7
 800c3b8:	7561      	strb	r1, [r4, #21]
 800c3ba:	60a2      	str	r2, [r4, #8]
 800c3bc:	6123      	str	r3, [r4, #16]
 800c3be:	f080 0001 	eor.w	r0, r0, #1
 800c3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3c6:	2102      	movs	r1, #2
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f000 fd83 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c3ce:	b178      	cbz	r0, 800c3f0 <ucdr_deserialize_endian_uint16_t+0xa4>
 800c3d0:	2e01      	cmp	r6, #1
 800c3d2:	68a3      	ldr	r3, [r4, #8]
 800c3d4:	d011      	beq.n	800c3fa <ucdr_deserialize_endian_uint16_t+0xae>
 800c3d6:	785b      	ldrb	r3, [r3, #1]
 800c3d8:	702b      	strb	r3, [r5, #0]
 800c3da:	68a3      	ldr	r3, [r4, #8]
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	706b      	strb	r3, [r5, #1]
 800c3e0:	68a2      	ldr	r2, [r4, #8]
 800c3e2:	6923      	ldr	r3, [r4, #16]
 800c3e4:	3202      	adds	r2, #2
 800c3e6:	3302      	adds	r3, #2
 800c3e8:	2102      	movs	r1, #2
 800c3ea:	60a2      	str	r2, [r4, #8]
 800c3ec:	6123      	str	r3, [r4, #16]
 800c3ee:	7561      	strb	r1, [r4, #21]
 800c3f0:	7da0      	ldrb	r0, [r4, #22]
 800c3f2:	f080 0001 	eor.w	r0, r0, #1
 800c3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3fa:	881b      	ldrh	r3, [r3, #0]
 800c3fc:	802b      	strh	r3, [r5, #0]
 800c3fe:	e7ef      	b.n	800c3e0 <ucdr_deserialize_endian_uint16_t+0x94>
 800c400:	68a2      	ldr	r2, [r4, #8]
 800c402:	6923      	ldr	r3, [r4, #16]
 800c404:	7da0      	ldrb	r0, [r4, #22]
 800c406:	f884 9015 	strb.w	r9, [r4, #21]
 800c40a:	1bd2      	subs	r2, r2, r7
 800c40c:	1bdb      	subs	r3, r3, r7
 800c40e:	60a2      	str	r2, [r4, #8]
 800c410:	6123      	str	r3, [r4, #16]
 800c412:	f080 0001 	eor.w	r0, r0, #1
 800c416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c41a:	68a3      	ldr	r3, [r4, #8]
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	706b      	strb	r3, [r5, #1]
 800c420:	e7c3      	b.n	800c3aa <ucdr_deserialize_endian_uint16_t+0x5e>
 800c422:	4641      	mov	r1, r8
 800c424:	463a      	mov	r2, r7
 800c426:	4628      	mov	r0, r5
 800c428:	f00b f90d 	bl	8017646 <memcpy>
 800c42c:	68a1      	ldr	r1, [r4, #8]
 800c42e:	4652      	mov	r2, sl
 800c430:	19e8      	adds	r0, r5, r7
 800c432:	f00b f908 	bl	8017646 <memcpy>
 800c436:	e7b8      	b.n	800c3aa <ucdr_deserialize_endian_uint16_t+0x5e>

0800c438 <ucdr_serialize_uint32_t>:
 800c438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c43c:	b082      	sub	sp, #8
 800c43e:	4604      	mov	r4, r0
 800c440:	9101      	str	r1, [sp, #4]
 800c442:	2104      	movs	r1, #4
 800c444:	f000 fd9a 	bl	800cf7c <ucdr_buffer_alignment>
 800c448:	4601      	mov	r1, r0
 800c44a:	4620      	mov	r0, r4
 800c44c:	7d67      	ldrb	r7, [r4, #21]
 800c44e:	f000 fdd9 	bl	800d004 <ucdr_advance_buffer>
 800c452:	2104      	movs	r1, #4
 800c454:	4620      	mov	r0, r4
 800c456:	f000 fd31 	bl	800cebc <ucdr_check_buffer_available_for>
 800c45a:	2800      	cmp	r0, #0
 800c45c:	d139      	bne.n	800c4d2 <ucdr_serialize_uint32_t+0x9a>
 800c45e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c462:	42ab      	cmp	r3, r5
 800c464:	d930      	bls.n	800c4c8 <ucdr_serialize_uint32_t+0x90>
 800c466:	1b5e      	subs	r6, r3, r5
 800c468:	60a3      	str	r3, [r4, #8]
 800c46a:	6923      	ldr	r3, [r4, #16]
 800c46c:	f1c6 0804 	rsb	r8, r6, #4
 800c470:	4433      	add	r3, r6
 800c472:	6123      	str	r3, [r4, #16]
 800c474:	4641      	mov	r1, r8
 800c476:	4620      	mov	r0, r4
 800c478:	f000 fd2c 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	d04c      	beq.n	800c51a <ucdr_serialize_uint32_t+0xe2>
 800c480:	7d23      	ldrb	r3, [r4, #20]
 800c482:	2b01      	cmp	r3, #1
 800c484:	d063      	beq.n	800c54e <ucdr_serialize_uint32_t+0x116>
 800c486:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c48a:	702b      	strb	r3, [r5, #0]
 800c48c:	2e00      	cmp	r6, #0
 800c48e:	d051      	beq.n	800c534 <ucdr_serialize_uint32_t+0xfc>
 800c490:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c494:	706b      	strb	r3, [r5, #1]
 800c496:	2e01      	cmp	r6, #1
 800c498:	d050      	beq.n	800c53c <ucdr_serialize_uint32_t+0x104>
 800c49a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c49e:	70ab      	strb	r3, [r5, #2]
 800c4a0:	2e02      	cmp	r6, #2
 800c4a2:	d04f      	beq.n	800c544 <ucdr_serialize_uint32_t+0x10c>
 800c4a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c4a8:	70eb      	strb	r3, [r5, #3]
 800c4aa:	6923      	ldr	r3, [r4, #16]
 800c4ac:	68a2      	ldr	r2, [r4, #8]
 800c4ae:	7da0      	ldrb	r0, [r4, #22]
 800c4b0:	3304      	adds	r3, #4
 800c4b2:	1b9e      	subs	r6, r3, r6
 800c4b4:	4442      	add	r2, r8
 800c4b6:	2304      	movs	r3, #4
 800c4b8:	f080 0001 	eor.w	r0, r0, #1
 800c4bc:	60a2      	str	r2, [r4, #8]
 800c4be:	6126      	str	r6, [r4, #16]
 800c4c0:	7563      	strb	r3, [r4, #21]
 800c4c2:	b002      	add	sp, #8
 800c4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c8:	2104      	movs	r1, #4
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f000 fd02 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c4d0:	b1d0      	cbz	r0, 800c508 <ucdr_serialize_uint32_t+0xd0>
 800c4d2:	7d23      	ldrb	r3, [r4, #20]
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	68a3      	ldr	r3, [r4, #8]
 800c4d8:	d01c      	beq.n	800c514 <ucdr_serialize_uint32_t+0xdc>
 800c4da:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c4de:	701a      	strb	r2, [r3, #0]
 800c4e0:	68a3      	ldr	r3, [r4, #8]
 800c4e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c4e6:	705a      	strb	r2, [r3, #1]
 800c4e8:	68a3      	ldr	r3, [r4, #8]
 800c4ea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c4ee:	709a      	strb	r2, [r3, #2]
 800c4f0:	68a3      	ldr	r3, [r4, #8]
 800c4f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c4f6:	70da      	strb	r2, [r3, #3]
 800c4f8:	68a2      	ldr	r2, [r4, #8]
 800c4fa:	6923      	ldr	r3, [r4, #16]
 800c4fc:	3204      	adds	r2, #4
 800c4fe:	3304      	adds	r3, #4
 800c500:	2104      	movs	r1, #4
 800c502:	60a2      	str	r2, [r4, #8]
 800c504:	6123      	str	r3, [r4, #16]
 800c506:	7561      	strb	r1, [r4, #21]
 800c508:	7da0      	ldrb	r0, [r4, #22]
 800c50a:	f080 0001 	eor.w	r0, r0, #1
 800c50e:	b002      	add	sp, #8
 800c510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c514:	9a01      	ldr	r2, [sp, #4]
 800c516:	601a      	str	r2, [r3, #0]
 800c518:	e7ee      	b.n	800c4f8 <ucdr_serialize_uint32_t+0xc0>
 800c51a:	68a2      	ldr	r2, [r4, #8]
 800c51c:	6923      	ldr	r3, [r4, #16]
 800c51e:	7da0      	ldrb	r0, [r4, #22]
 800c520:	7567      	strb	r7, [r4, #21]
 800c522:	1b92      	subs	r2, r2, r6
 800c524:	1b9b      	subs	r3, r3, r6
 800c526:	f080 0001 	eor.w	r0, r0, #1
 800c52a:	60a2      	str	r2, [r4, #8]
 800c52c:	6123      	str	r3, [r4, #16]
 800c52e:	b002      	add	sp, #8
 800c530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c534:	68a3      	ldr	r3, [r4, #8]
 800c536:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c53a:	701a      	strb	r2, [r3, #0]
 800c53c:	68a3      	ldr	r3, [r4, #8]
 800c53e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c542:	701a      	strb	r2, [r3, #0]
 800c544:	68a3      	ldr	r3, [r4, #8]
 800c546:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c54a:	701a      	strb	r2, [r3, #0]
 800c54c:	e7ad      	b.n	800c4aa <ucdr_serialize_uint32_t+0x72>
 800c54e:	4628      	mov	r0, r5
 800c550:	ad01      	add	r5, sp, #4
 800c552:	4629      	mov	r1, r5
 800c554:	4632      	mov	r2, r6
 800c556:	f00b f876 	bl	8017646 <memcpy>
 800c55a:	68a0      	ldr	r0, [r4, #8]
 800c55c:	4642      	mov	r2, r8
 800c55e:	19a9      	adds	r1, r5, r6
 800c560:	f00b f871 	bl	8017646 <memcpy>
 800c564:	e7a1      	b.n	800c4aa <ucdr_serialize_uint32_t+0x72>
 800c566:	bf00      	nop

0800c568 <ucdr_serialize_endian_uint32_t>:
 800c568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c56c:	b083      	sub	sp, #12
 800c56e:	460d      	mov	r5, r1
 800c570:	2104      	movs	r1, #4
 800c572:	4604      	mov	r4, r0
 800c574:	9201      	str	r2, [sp, #4]
 800c576:	f000 fd01 	bl	800cf7c <ucdr_buffer_alignment>
 800c57a:	4601      	mov	r1, r0
 800c57c:	4620      	mov	r0, r4
 800c57e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c582:	f000 fd3f 	bl	800d004 <ucdr_advance_buffer>
 800c586:	2104      	movs	r1, #4
 800c588:	4620      	mov	r0, r4
 800c58a:	f000 fc97 	bl	800cebc <ucdr_check_buffer_available_for>
 800c58e:	2800      	cmp	r0, #0
 800c590:	d138      	bne.n	800c604 <ucdr_serialize_endian_uint32_t+0x9c>
 800c592:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c596:	42b7      	cmp	r7, r6
 800c598:	d92f      	bls.n	800c5fa <ucdr_serialize_endian_uint32_t+0x92>
 800c59a:	6923      	ldr	r3, [r4, #16]
 800c59c:	60a7      	str	r7, [r4, #8]
 800c59e:	1bbf      	subs	r7, r7, r6
 800c5a0:	443b      	add	r3, r7
 800c5a2:	f1c7 0904 	rsb	r9, r7, #4
 800c5a6:	6123      	str	r3, [r4, #16]
 800c5a8:	4649      	mov	r1, r9
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f000 fc92 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d04a      	beq.n	800c64a <ucdr_serialize_endian_uint32_t+0xe2>
 800c5b4:	2d01      	cmp	r5, #1
 800c5b6:	d063      	beq.n	800c680 <ucdr_serialize_endian_uint32_t+0x118>
 800c5b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c5bc:	7033      	strb	r3, [r6, #0]
 800c5be:	2f00      	cmp	r7, #0
 800c5c0:	d051      	beq.n	800c666 <ucdr_serialize_endian_uint32_t+0xfe>
 800c5c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c5c6:	7073      	strb	r3, [r6, #1]
 800c5c8:	2f01      	cmp	r7, #1
 800c5ca:	d050      	beq.n	800c66e <ucdr_serialize_endian_uint32_t+0x106>
 800c5cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c5d0:	70b3      	strb	r3, [r6, #2]
 800c5d2:	2f02      	cmp	r7, #2
 800c5d4:	d04f      	beq.n	800c676 <ucdr_serialize_endian_uint32_t+0x10e>
 800c5d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c5da:	70f3      	strb	r3, [r6, #3]
 800c5dc:	6923      	ldr	r3, [r4, #16]
 800c5de:	68a2      	ldr	r2, [r4, #8]
 800c5e0:	7da0      	ldrb	r0, [r4, #22]
 800c5e2:	3304      	adds	r3, #4
 800c5e4:	444a      	add	r2, r9
 800c5e6:	1bdb      	subs	r3, r3, r7
 800c5e8:	2104      	movs	r1, #4
 800c5ea:	f080 0001 	eor.w	r0, r0, #1
 800c5ee:	60a2      	str	r2, [r4, #8]
 800c5f0:	6123      	str	r3, [r4, #16]
 800c5f2:	7561      	strb	r1, [r4, #21]
 800c5f4:	b003      	add	sp, #12
 800c5f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5fa:	2104      	movs	r1, #4
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	f000 fc69 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c602:	b1c8      	cbz	r0, 800c638 <ucdr_serialize_endian_uint32_t+0xd0>
 800c604:	2d01      	cmp	r5, #1
 800c606:	68a3      	ldr	r3, [r4, #8]
 800c608:	d01c      	beq.n	800c644 <ucdr_serialize_endian_uint32_t+0xdc>
 800c60a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c60e:	701a      	strb	r2, [r3, #0]
 800c610:	68a3      	ldr	r3, [r4, #8]
 800c612:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c616:	705a      	strb	r2, [r3, #1]
 800c618:	68a3      	ldr	r3, [r4, #8]
 800c61a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c61e:	709a      	strb	r2, [r3, #2]
 800c620:	68a3      	ldr	r3, [r4, #8]
 800c622:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c626:	70da      	strb	r2, [r3, #3]
 800c628:	68a2      	ldr	r2, [r4, #8]
 800c62a:	6923      	ldr	r3, [r4, #16]
 800c62c:	3204      	adds	r2, #4
 800c62e:	3304      	adds	r3, #4
 800c630:	2104      	movs	r1, #4
 800c632:	60a2      	str	r2, [r4, #8]
 800c634:	6123      	str	r3, [r4, #16]
 800c636:	7561      	strb	r1, [r4, #21]
 800c638:	7da0      	ldrb	r0, [r4, #22]
 800c63a:	f080 0001 	eor.w	r0, r0, #1
 800c63e:	b003      	add	sp, #12
 800c640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c644:	9a01      	ldr	r2, [sp, #4]
 800c646:	601a      	str	r2, [r3, #0]
 800c648:	e7ee      	b.n	800c628 <ucdr_serialize_endian_uint32_t+0xc0>
 800c64a:	68a2      	ldr	r2, [r4, #8]
 800c64c:	6923      	ldr	r3, [r4, #16]
 800c64e:	7da0      	ldrb	r0, [r4, #22]
 800c650:	f884 8015 	strb.w	r8, [r4, #21]
 800c654:	1bd2      	subs	r2, r2, r7
 800c656:	1bdb      	subs	r3, r3, r7
 800c658:	f080 0001 	eor.w	r0, r0, #1
 800c65c:	60a2      	str	r2, [r4, #8]
 800c65e:	6123      	str	r3, [r4, #16]
 800c660:	b003      	add	sp, #12
 800c662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c666:	68a3      	ldr	r3, [r4, #8]
 800c668:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c66c:	701a      	strb	r2, [r3, #0]
 800c66e:	68a3      	ldr	r3, [r4, #8]
 800c670:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c674:	701a      	strb	r2, [r3, #0]
 800c676:	68a3      	ldr	r3, [r4, #8]
 800c678:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c67c:	701a      	strb	r2, [r3, #0]
 800c67e:	e7ad      	b.n	800c5dc <ucdr_serialize_endian_uint32_t+0x74>
 800c680:	ad01      	add	r5, sp, #4
 800c682:	4629      	mov	r1, r5
 800c684:	463a      	mov	r2, r7
 800c686:	4630      	mov	r0, r6
 800c688:	f00a ffdd 	bl	8017646 <memcpy>
 800c68c:	68a0      	ldr	r0, [r4, #8]
 800c68e:	464a      	mov	r2, r9
 800c690:	19e9      	adds	r1, r5, r7
 800c692:	f00a ffd8 	bl	8017646 <memcpy>
 800c696:	e7a1      	b.n	800c5dc <ucdr_serialize_endian_uint32_t+0x74>

0800c698 <ucdr_deserialize_uint32_t>:
 800c698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c69c:	460d      	mov	r5, r1
 800c69e:	2104      	movs	r1, #4
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	f000 fc6b 	bl	800cf7c <ucdr_buffer_alignment>
 800c6a6:	4601      	mov	r1, r0
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c6ae:	f000 fca9 	bl	800d004 <ucdr_advance_buffer>
 800c6b2:	2104      	movs	r1, #4
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	f000 fc01 	bl	800cebc <ucdr_check_buffer_available_for>
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	d138      	bne.n	800c730 <ucdr_deserialize_uint32_t+0x98>
 800c6be:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c6c2:	42b7      	cmp	r7, r6
 800c6c4:	d92f      	bls.n	800c726 <ucdr_deserialize_uint32_t+0x8e>
 800c6c6:	6923      	ldr	r3, [r4, #16]
 800c6c8:	60a7      	str	r7, [r4, #8]
 800c6ca:	1bbf      	subs	r7, r7, r6
 800c6cc:	443b      	add	r3, r7
 800c6ce:	f1c7 0904 	rsb	r9, r7, #4
 800c6d2:	6123      	str	r3, [r4, #16]
 800c6d4:	4649      	mov	r1, r9
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	f000 fbfc 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	d046      	beq.n	800c76e <ucdr_deserialize_uint32_t+0xd6>
 800c6e0:	7d23      	ldrb	r3, [r4, #20]
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	d05c      	beq.n	800c7a0 <ucdr_deserialize_uint32_t+0x108>
 800c6e6:	78f3      	ldrb	r3, [r6, #3]
 800c6e8:	702b      	strb	r3, [r5, #0]
 800c6ea:	2f00      	cmp	r7, #0
 800c6ec:	d04c      	beq.n	800c788 <ucdr_deserialize_uint32_t+0xf0>
 800c6ee:	78b3      	ldrb	r3, [r6, #2]
 800c6f0:	706b      	strb	r3, [r5, #1]
 800c6f2:	2f01      	cmp	r7, #1
 800c6f4:	f105 0302 	add.w	r3, r5, #2
 800c6f8:	d04a      	beq.n	800c790 <ucdr_deserialize_uint32_t+0xf8>
 800c6fa:	7873      	ldrb	r3, [r6, #1]
 800c6fc:	70ab      	strb	r3, [r5, #2]
 800c6fe:	2f02      	cmp	r7, #2
 800c700:	f105 0303 	add.w	r3, r5, #3
 800c704:	d048      	beq.n	800c798 <ucdr_deserialize_uint32_t+0x100>
 800c706:	7833      	ldrb	r3, [r6, #0]
 800c708:	70eb      	strb	r3, [r5, #3]
 800c70a:	6923      	ldr	r3, [r4, #16]
 800c70c:	68a2      	ldr	r2, [r4, #8]
 800c70e:	7da0      	ldrb	r0, [r4, #22]
 800c710:	2104      	movs	r1, #4
 800c712:	3304      	adds	r3, #4
 800c714:	444a      	add	r2, r9
 800c716:	1bdb      	subs	r3, r3, r7
 800c718:	7561      	strb	r1, [r4, #21]
 800c71a:	60a2      	str	r2, [r4, #8]
 800c71c:	6123      	str	r3, [r4, #16]
 800c71e:	f080 0001 	eor.w	r0, r0, #1
 800c722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c726:	2104      	movs	r1, #4
 800c728:	4620      	mov	r0, r4
 800c72a:	f000 fbd3 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c72e:	b1b0      	cbz	r0, 800c75e <ucdr_deserialize_uint32_t+0xc6>
 800c730:	7d23      	ldrb	r3, [r4, #20]
 800c732:	2b01      	cmp	r3, #1
 800c734:	68a3      	ldr	r3, [r4, #8]
 800c736:	d017      	beq.n	800c768 <ucdr_deserialize_uint32_t+0xd0>
 800c738:	78db      	ldrb	r3, [r3, #3]
 800c73a:	702b      	strb	r3, [r5, #0]
 800c73c:	68a3      	ldr	r3, [r4, #8]
 800c73e:	789b      	ldrb	r3, [r3, #2]
 800c740:	706b      	strb	r3, [r5, #1]
 800c742:	68a3      	ldr	r3, [r4, #8]
 800c744:	785b      	ldrb	r3, [r3, #1]
 800c746:	70ab      	strb	r3, [r5, #2]
 800c748:	68a3      	ldr	r3, [r4, #8]
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	70eb      	strb	r3, [r5, #3]
 800c74e:	68a2      	ldr	r2, [r4, #8]
 800c750:	6923      	ldr	r3, [r4, #16]
 800c752:	3204      	adds	r2, #4
 800c754:	3304      	adds	r3, #4
 800c756:	2104      	movs	r1, #4
 800c758:	60a2      	str	r2, [r4, #8]
 800c75a:	6123      	str	r3, [r4, #16]
 800c75c:	7561      	strb	r1, [r4, #21]
 800c75e:	7da0      	ldrb	r0, [r4, #22]
 800c760:	f080 0001 	eor.w	r0, r0, #1
 800c764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	602b      	str	r3, [r5, #0]
 800c76c:	e7ef      	b.n	800c74e <ucdr_deserialize_uint32_t+0xb6>
 800c76e:	68a2      	ldr	r2, [r4, #8]
 800c770:	6923      	ldr	r3, [r4, #16]
 800c772:	7da0      	ldrb	r0, [r4, #22]
 800c774:	f884 8015 	strb.w	r8, [r4, #21]
 800c778:	1bd2      	subs	r2, r2, r7
 800c77a:	1bdb      	subs	r3, r3, r7
 800c77c:	60a2      	str	r2, [r4, #8]
 800c77e:	6123      	str	r3, [r4, #16]
 800c780:	f080 0001 	eor.w	r0, r0, #1
 800c784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c788:	68a3      	ldr	r3, [r4, #8]
 800c78a:	789b      	ldrb	r3, [r3, #2]
 800c78c:	706b      	strb	r3, [r5, #1]
 800c78e:	1cab      	adds	r3, r5, #2
 800c790:	68a2      	ldr	r2, [r4, #8]
 800c792:	7852      	ldrb	r2, [r2, #1]
 800c794:	f803 2b01 	strb.w	r2, [r3], #1
 800c798:	68a2      	ldr	r2, [r4, #8]
 800c79a:	7812      	ldrb	r2, [r2, #0]
 800c79c:	701a      	strb	r2, [r3, #0]
 800c79e:	e7b4      	b.n	800c70a <ucdr_deserialize_uint32_t+0x72>
 800c7a0:	4631      	mov	r1, r6
 800c7a2:	463a      	mov	r2, r7
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	f00a ff4e 	bl	8017646 <memcpy>
 800c7aa:	68a1      	ldr	r1, [r4, #8]
 800c7ac:	464a      	mov	r2, r9
 800c7ae:	19e8      	adds	r0, r5, r7
 800c7b0:	f00a ff49 	bl	8017646 <memcpy>
 800c7b4:	e7a9      	b.n	800c70a <ucdr_deserialize_uint32_t+0x72>
 800c7b6:	bf00      	nop

0800c7b8 <ucdr_deserialize_endian_uint32_t>:
 800c7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7bc:	460e      	mov	r6, r1
 800c7be:	2104      	movs	r1, #4
 800c7c0:	4604      	mov	r4, r0
 800c7c2:	4615      	mov	r5, r2
 800c7c4:	f000 fbda 	bl	800cf7c <ucdr_buffer_alignment>
 800c7c8:	4601      	mov	r1, r0
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c7d0:	f000 fc18 	bl	800d004 <ucdr_advance_buffer>
 800c7d4:	2104      	movs	r1, #4
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	f000 fb70 	bl	800cebc <ucdr_check_buffer_available_for>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d13c      	bne.n	800c85a <ucdr_deserialize_endian_uint32_t+0xa2>
 800c7e0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800c7e4:	42bb      	cmp	r3, r7
 800c7e6:	d933      	bls.n	800c850 <ucdr_deserialize_endian_uint32_t+0x98>
 800c7e8:	eba3 0807 	sub.w	r8, r3, r7
 800c7ec:	60a3      	str	r3, [r4, #8]
 800c7ee:	6923      	ldr	r3, [r4, #16]
 800c7f0:	f1c8 0a04 	rsb	sl, r8, #4
 800c7f4:	4443      	add	r3, r8
 800c7f6:	6123      	str	r3, [r4, #16]
 800c7f8:	4651      	mov	r1, sl
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f000 fb6a 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c800:	2800      	cmp	r0, #0
 800c802:	d048      	beq.n	800c896 <ucdr_deserialize_endian_uint32_t+0xde>
 800c804:	2e01      	cmp	r6, #1
 800c806:	d061      	beq.n	800c8cc <ucdr_deserialize_endian_uint32_t+0x114>
 800c808:	78fb      	ldrb	r3, [r7, #3]
 800c80a:	702b      	strb	r3, [r5, #0]
 800c80c:	f1b8 0f00 	cmp.w	r8, #0
 800c810:	d050      	beq.n	800c8b4 <ucdr_deserialize_endian_uint32_t+0xfc>
 800c812:	78bb      	ldrb	r3, [r7, #2]
 800c814:	706b      	strb	r3, [r5, #1]
 800c816:	f1b8 0f01 	cmp.w	r8, #1
 800c81a:	f105 0302 	add.w	r3, r5, #2
 800c81e:	d04d      	beq.n	800c8bc <ucdr_deserialize_endian_uint32_t+0x104>
 800c820:	787b      	ldrb	r3, [r7, #1]
 800c822:	70ab      	strb	r3, [r5, #2]
 800c824:	f1b8 0f02 	cmp.w	r8, #2
 800c828:	f105 0303 	add.w	r3, r5, #3
 800c82c:	d04a      	beq.n	800c8c4 <ucdr_deserialize_endian_uint32_t+0x10c>
 800c82e:	783b      	ldrb	r3, [r7, #0]
 800c830:	70eb      	strb	r3, [r5, #3]
 800c832:	6923      	ldr	r3, [r4, #16]
 800c834:	68a2      	ldr	r2, [r4, #8]
 800c836:	7da0      	ldrb	r0, [r4, #22]
 800c838:	2104      	movs	r1, #4
 800c83a:	3304      	adds	r3, #4
 800c83c:	4452      	add	r2, sl
 800c83e:	eba3 0308 	sub.w	r3, r3, r8
 800c842:	7561      	strb	r1, [r4, #21]
 800c844:	60a2      	str	r2, [r4, #8]
 800c846:	6123      	str	r3, [r4, #16]
 800c848:	f080 0001 	eor.w	r0, r0, #1
 800c84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c850:	2104      	movs	r1, #4
 800c852:	4620      	mov	r0, r4
 800c854:	f000 fb3e 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c858:	b1a8      	cbz	r0, 800c886 <ucdr_deserialize_endian_uint32_t+0xce>
 800c85a:	2e01      	cmp	r6, #1
 800c85c:	68a3      	ldr	r3, [r4, #8]
 800c85e:	d017      	beq.n	800c890 <ucdr_deserialize_endian_uint32_t+0xd8>
 800c860:	78db      	ldrb	r3, [r3, #3]
 800c862:	702b      	strb	r3, [r5, #0]
 800c864:	68a3      	ldr	r3, [r4, #8]
 800c866:	789b      	ldrb	r3, [r3, #2]
 800c868:	706b      	strb	r3, [r5, #1]
 800c86a:	68a3      	ldr	r3, [r4, #8]
 800c86c:	785b      	ldrb	r3, [r3, #1]
 800c86e:	70ab      	strb	r3, [r5, #2]
 800c870:	68a3      	ldr	r3, [r4, #8]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	70eb      	strb	r3, [r5, #3]
 800c876:	68a2      	ldr	r2, [r4, #8]
 800c878:	6923      	ldr	r3, [r4, #16]
 800c87a:	3204      	adds	r2, #4
 800c87c:	3304      	adds	r3, #4
 800c87e:	2104      	movs	r1, #4
 800c880:	60a2      	str	r2, [r4, #8]
 800c882:	6123      	str	r3, [r4, #16]
 800c884:	7561      	strb	r1, [r4, #21]
 800c886:	7da0      	ldrb	r0, [r4, #22]
 800c888:	f080 0001 	eor.w	r0, r0, #1
 800c88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	602b      	str	r3, [r5, #0]
 800c894:	e7ef      	b.n	800c876 <ucdr_deserialize_endian_uint32_t+0xbe>
 800c896:	68a2      	ldr	r2, [r4, #8]
 800c898:	6923      	ldr	r3, [r4, #16]
 800c89a:	7da0      	ldrb	r0, [r4, #22]
 800c89c:	f884 9015 	strb.w	r9, [r4, #21]
 800c8a0:	eba2 0208 	sub.w	r2, r2, r8
 800c8a4:	eba3 0308 	sub.w	r3, r3, r8
 800c8a8:	60a2      	str	r2, [r4, #8]
 800c8aa:	6123      	str	r3, [r4, #16]
 800c8ac:	f080 0001 	eor.w	r0, r0, #1
 800c8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8b4:	68a3      	ldr	r3, [r4, #8]
 800c8b6:	789b      	ldrb	r3, [r3, #2]
 800c8b8:	706b      	strb	r3, [r5, #1]
 800c8ba:	1cab      	adds	r3, r5, #2
 800c8bc:	68a2      	ldr	r2, [r4, #8]
 800c8be:	7852      	ldrb	r2, [r2, #1]
 800c8c0:	f803 2b01 	strb.w	r2, [r3], #1
 800c8c4:	68a2      	ldr	r2, [r4, #8]
 800c8c6:	7812      	ldrb	r2, [r2, #0]
 800c8c8:	701a      	strb	r2, [r3, #0]
 800c8ca:	e7b2      	b.n	800c832 <ucdr_deserialize_endian_uint32_t+0x7a>
 800c8cc:	4639      	mov	r1, r7
 800c8ce:	4642      	mov	r2, r8
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	f00a feb8 	bl	8017646 <memcpy>
 800c8d6:	68a1      	ldr	r1, [r4, #8]
 800c8d8:	4652      	mov	r2, sl
 800c8da:	eb05 0008 	add.w	r0, r5, r8
 800c8de:	f00a feb2 	bl	8017646 <memcpy>
 800c8e2:	e7a6      	b.n	800c832 <ucdr_deserialize_endian_uint32_t+0x7a>

0800c8e4 <ucdr_serialize_uint64_t>:
 800c8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8e8:	2108      	movs	r1, #8
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	4604      	mov	r4, r0
 800c8ee:	e9cd 2300 	strd	r2, r3, [sp]
 800c8f2:	f000 fb43 	bl	800cf7c <ucdr_buffer_alignment>
 800c8f6:	4601      	mov	r1, r0
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	7d67      	ldrb	r7, [r4, #21]
 800c8fc:	f000 fb82 	bl	800d004 <ucdr_advance_buffer>
 800c900:	2108      	movs	r1, #8
 800c902:	4620      	mov	r0, r4
 800c904:	f000 fada 	bl	800cebc <ucdr_check_buffer_available_for>
 800c908:	2800      	cmp	r0, #0
 800c90a:	d14e      	bne.n	800c9aa <ucdr_serialize_uint64_t+0xc6>
 800c90c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c910:	42ab      	cmp	r3, r5
 800c912:	d945      	bls.n	800c9a0 <ucdr_serialize_uint64_t+0xbc>
 800c914:	1b5e      	subs	r6, r3, r5
 800c916:	60a3      	str	r3, [r4, #8]
 800c918:	6923      	ldr	r3, [r4, #16]
 800c91a:	f1c6 0808 	rsb	r8, r6, #8
 800c91e:	4433      	add	r3, r6
 800c920:	6123      	str	r3, [r4, #16]
 800c922:	4641      	mov	r1, r8
 800c924:	4620      	mov	r0, r4
 800c926:	f000 fad5 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c92a:	2800      	cmp	r0, #0
 800c92c:	d074      	beq.n	800ca18 <ucdr_serialize_uint64_t+0x134>
 800c92e:	7d23      	ldrb	r3, [r4, #20]
 800c930:	2b01      	cmp	r3, #1
 800c932:	f000 809b 	beq.w	800ca6c <ucdr_serialize_uint64_t+0x188>
 800c936:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c93a:	702b      	strb	r3, [r5, #0]
 800c93c:	2e00      	cmp	r6, #0
 800c93e:	d078      	beq.n	800ca32 <ucdr_serialize_uint64_t+0x14e>
 800c940:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c944:	706b      	strb	r3, [r5, #1]
 800c946:	2e01      	cmp	r6, #1
 800c948:	d077      	beq.n	800ca3a <ucdr_serialize_uint64_t+0x156>
 800c94a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c94e:	70ab      	strb	r3, [r5, #2]
 800c950:	2e02      	cmp	r6, #2
 800c952:	d076      	beq.n	800ca42 <ucdr_serialize_uint64_t+0x15e>
 800c954:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c958:	70eb      	strb	r3, [r5, #3]
 800c95a:	2e03      	cmp	r6, #3
 800c95c:	d075      	beq.n	800ca4a <ucdr_serialize_uint64_t+0x166>
 800c95e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c962:	712b      	strb	r3, [r5, #4]
 800c964:	2e04      	cmp	r6, #4
 800c966:	d074      	beq.n	800ca52 <ucdr_serialize_uint64_t+0x16e>
 800c968:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c96c:	716b      	strb	r3, [r5, #5]
 800c96e:	2e05      	cmp	r6, #5
 800c970:	d073      	beq.n	800ca5a <ucdr_serialize_uint64_t+0x176>
 800c972:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c976:	71ab      	strb	r3, [r5, #6]
 800c978:	2e06      	cmp	r6, #6
 800c97a:	d072      	beq.n	800ca62 <ucdr_serialize_uint64_t+0x17e>
 800c97c:	f89d 3000 	ldrb.w	r3, [sp]
 800c980:	71eb      	strb	r3, [r5, #7]
 800c982:	6923      	ldr	r3, [r4, #16]
 800c984:	68a2      	ldr	r2, [r4, #8]
 800c986:	7da0      	ldrb	r0, [r4, #22]
 800c988:	3308      	adds	r3, #8
 800c98a:	1b9e      	subs	r6, r3, r6
 800c98c:	4442      	add	r2, r8
 800c98e:	2308      	movs	r3, #8
 800c990:	f080 0001 	eor.w	r0, r0, #1
 800c994:	60a2      	str	r2, [r4, #8]
 800c996:	6126      	str	r6, [r4, #16]
 800c998:	7563      	strb	r3, [r4, #21]
 800c99a:	b002      	add	sp, #8
 800c99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9a0:	2108      	movs	r1, #8
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	f000 fa96 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800c9a8:	b350      	cbz	r0, 800ca00 <ucdr_serialize_uint64_t+0x11c>
 800c9aa:	7d23      	ldrb	r3, [r4, #20]
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d02d      	beq.n	800ca0c <ucdr_serialize_uint64_t+0x128>
 800c9b0:	68a3      	ldr	r3, [r4, #8]
 800c9b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c9b6:	701a      	strb	r2, [r3, #0]
 800c9b8:	68a3      	ldr	r3, [r4, #8]
 800c9ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c9be:	705a      	strb	r2, [r3, #1]
 800c9c0:	68a3      	ldr	r3, [r4, #8]
 800c9c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c9c6:	709a      	strb	r2, [r3, #2]
 800c9c8:	68a3      	ldr	r3, [r4, #8]
 800c9ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c9ce:	70da      	strb	r2, [r3, #3]
 800c9d0:	68a3      	ldr	r3, [r4, #8]
 800c9d2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c9d6:	711a      	strb	r2, [r3, #4]
 800c9d8:	68a3      	ldr	r3, [r4, #8]
 800c9da:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c9de:	715a      	strb	r2, [r3, #5]
 800c9e0:	68a3      	ldr	r3, [r4, #8]
 800c9e2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c9e6:	719a      	strb	r2, [r3, #6]
 800c9e8:	68a3      	ldr	r3, [r4, #8]
 800c9ea:	f89d 2000 	ldrb.w	r2, [sp]
 800c9ee:	71da      	strb	r2, [r3, #7]
 800c9f0:	68a2      	ldr	r2, [r4, #8]
 800c9f2:	6923      	ldr	r3, [r4, #16]
 800c9f4:	3208      	adds	r2, #8
 800c9f6:	3308      	adds	r3, #8
 800c9f8:	2108      	movs	r1, #8
 800c9fa:	60a2      	str	r2, [r4, #8]
 800c9fc:	6123      	str	r3, [r4, #16]
 800c9fe:	7561      	strb	r1, [r4, #21]
 800ca00:	7da0      	ldrb	r0, [r4, #22]
 800ca02:	f080 0001 	eor.w	r0, r0, #1
 800ca06:	b002      	add	sp, #8
 800ca08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca0c:	466b      	mov	r3, sp
 800ca0e:	cb03      	ldmia	r3!, {r0, r1}
 800ca10:	68a3      	ldr	r3, [r4, #8]
 800ca12:	6018      	str	r0, [r3, #0]
 800ca14:	6059      	str	r1, [r3, #4]
 800ca16:	e7eb      	b.n	800c9f0 <ucdr_serialize_uint64_t+0x10c>
 800ca18:	68a2      	ldr	r2, [r4, #8]
 800ca1a:	6923      	ldr	r3, [r4, #16]
 800ca1c:	7da0      	ldrb	r0, [r4, #22]
 800ca1e:	7567      	strb	r7, [r4, #21]
 800ca20:	1b92      	subs	r2, r2, r6
 800ca22:	1b9b      	subs	r3, r3, r6
 800ca24:	f080 0001 	eor.w	r0, r0, #1
 800ca28:	60a2      	str	r2, [r4, #8]
 800ca2a:	6123      	str	r3, [r4, #16]
 800ca2c:	b002      	add	sp, #8
 800ca2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca32:	68a3      	ldr	r3, [r4, #8]
 800ca34:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ca38:	701a      	strb	r2, [r3, #0]
 800ca3a:	68a3      	ldr	r3, [r4, #8]
 800ca3c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ca40:	701a      	strb	r2, [r3, #0]
 800ca42:	68a3      	ldr	r3, [r4, #8]
 800ca44:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ca48:	701a      	strb	r2, [r3, #0]
 800ca4a:	68a3      	ldr	r3, [r4, #8]
 800ca4c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ca50:	701a      	strb	r2, [r3, #0]
 800ca52:	68a3      	ldr	r3, [r4, #8]
 800ca54:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ca58:	701a      	strb	r2, [r3, #0]
 800ca5a:	68a3      	ldr	r3, [r4, #8]
 800ca5c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ca60:	701a      	strb	r2, [r3, #0]
 800ca62:	68a3      	ldr	r3, [r4, #8]
 800ca64:	f89d 2000 	ldrb.w	r2, [sp]
 800ca68:	701a      	strb	r2, [r3, #0]
 800ca6a:	e78a      	b.n	800c982 <ucdr_serialize_uint64_t+0x9e>
 800ca6c:	4628      	mov	r0, r5
 800ca6e:	466d      	mov	r5, sp
 800ca70:	4629      	mov	r1, r5
 800ca72:	4632      	mov	r2, r6
 800ca74:	f00a fde7 	bl	8017646 <memcpy>
 800ca78:	68a0      	ldr	r0, [r4, #8]
 800ca7a:	4642      	mov	r2, r8
 800ca7c:	19a9      	adds	r1, r5, r6
 800ca7e:	f00a fde2 	bl	8017646 <memcpy>
 800ca82:	e77e      	b.n	800c982 <ucdr_serialize_uint64_t+0x9e>

0800ca84 <ucdr_serialize_int16_t>:
 800ca84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca88:	b082      	sub	sp, #8
 800ca8a:	460b      	mov	r3, r1
 800ca8c:	2102      	movs	r1, #2
 800ca8e:	4604      	mov	r4, r0
 800ca90:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ca94:	f000 fa72 	bl	800cf7c <ucdr_buffer_alignment>
 800ca98:	4601      	mov	r1, r0
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	7d67      	ldrb	r7, [r4, #21]
 800ca9e:	f000 fab1 	bl	800d004 <ucdr_advance_buffer>
 800caa2:	2102      	movs	r1, #2
 800caa4:	4620      	mov	r0, r4
 800caa6:	f000 fa09 	bl	800cebc <ucdr_check_buffer_available_for>
 800caaa:	bb78      	cbnz	r0, 800cb0c <ucdr_serialize_int16_t+0x88>
 800caac:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cab0:	42ab      	cmp	r3, r5
 800cab2:	d926      	bls.n	800cb02 <ucdr_serialize_int16_t+0x7e>
 800cab4:	1b5e      	subs	r6, r3, r5
 800cab6:	60a3      	str	r3, [r4, #8]
 800cab8:	6923      	ldr	r3, [r4, #16]
 800caba:	f1c6 0802 	rsb	r8, r6, #2
 800cabe:	4433      	add	r3, r6
 800cac0:	6123      	str	r3, [r4, #16]
 800cac2:	4641      	mov	r1, r8
 800cac4:	4620      	mov	r0, r4
 800cac6:	f000 fa05 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800caca:	2800      	cmp	r0, #0
 800cacc:	d03b      	beq.n	800cb46 <ucdr_serialize_int16_t+0xc2>
 800cace:	7d23      	ldrb	r3, [r4, #20]
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d04a      	beq.n	800cb6a <ucdr_serialize_int16_t+0xe6>
 800cad4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cad8:	702b      	strb	r3, [r5, #0]
 800cada:	2e00      	cmp	r6, #0
 800cadc:	d040      	beq.n	800cb60 <ucdr_serialize_int16_t+0xdc>
 800cade:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cae2:	706b      	strb	r3, [r5, #1]
 800cae4:	6923      	ldr	r3, [r4, #16]
 800cae6:	68a2      	ldr	r2, [r4, #8]
 800cae8:	7da0      	ldrb	r0, [r4, #22]
 800caea:	3302      	adds	r3, #2
 800caec:	1b9e      	subs	r6, r3, r6
 800caee:	4442      	add	r2, r8
 800caf0:	2302      	movs	r3, #2
 800caf2:	f080 0001 	eor.w	r0, r0, #1
 800caf6:	60a2      	str	r2, [r4, #8]
 800caf8:	6126      	str	r6, [r4, #16]
 800cafa:	7563      	strb	r3, [r4, #21]
 800cafc:	b002      	add	sp, #8
 800cafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb02:	2102      	movs	r1, #2
 800cb04:	4620      	mov	r0, r4
 800cb06:	f000 f9e5 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800cb0a:	b190      	cbz	r0, 800cb32 <ucdr_serialize_int16_t+0xae>
 800cb0c:	7d23      	ldrb	r3, [r4, #20]
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	68a3      	ldr	r3, [r4, #8]
 800cb12:	d014      	beq.n	800cb3e <ucdr_serialize_int16_t+0xba>
 800cb14:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cb18:	701a      	strb	r2, [r3, #0]
 800cb1a:	68a3      	ldr	r3, [r4, #8]
 800cb1c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cb20:	705a      	strb	r2, [r3, #1]
 800cb22:	68a2      	ldr	r2, [r4, #8]
 800cb24:	6923      	ldr	r3, [r4, #16]
 800cb26:	3202      	adds	r2, #2
 800cb28:	3302      	adds	r3, #2
 800cb2a:	2102      	movs	r1, #2
 800cb2c:	60a2      	str	r2, [r4, #8]
 800cb2e:	6123      	str	r3, [r4, #16]
 800cb30:	7561      	strb	r1, [r4, #21]
 800cb32:	7da0      	ldrb	r0, [r4, #22]
 800cb34:	f080 0001 	eor.w	r0, r0, #1
 800cb38:	b002      	add	sp, #8
 800cb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb3e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cb42:	801a      	strh	r2, [r3, #0]
 800cb44:	e7ed      	b.n	800cb22 <ucdr_serialize_int16_t+0x9e>
 800cb46:	68a2      	ldr	r2, [r4, #8]
 800cb48:	6923      	ldr	r3, [r4, #16]
 800cb4a:	7da0      	ldrb	r0, [r4, #22]
 800cb4c:	7567      	strb	r7, [r4, #21]
 800cb4e:	1b92      	subs	r2, r2, r6
 800cb50:	1b9b      	subs	r3, r3, r6
 800cb52:	f080 0001 	eor.w	r0, r0, #1
 800cb56:	60a2      	str	r2, [r4, #8]
 800cb58:	6123      	str	r3, [r4, #16]
 800cb5a:	b002      	add	sp, #8
 800cb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb60:	68a3      	ldr	r3, [r4, #8]
 800cb62:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cb66:	701a      	strb	r2, [r3, #0]
 800cb68:	e7bc      	b.n	800cae4 <ucdr_serialize_int16_t+0x60>
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	f10d 0506 	add.w	r5, sp, #6
 800cb70:	4629      	mov	r1, r5
 800cb72:	4632      	mov	r2, r6
 800cb74:	f00a fd67 	bl	8017646 <memcpy>
 800cb78:	68a0      	ldr	r0, [r4, #8]
 800cb7a:	4642      	mov	r2, r8
 800cb7c:	19a9      	adds	r1, r5, r6
 800cb7e:	f00a fd62 	bl	8017646 <memcpy>
 800cb82:	e7af      	b.n	800cae4 <ucdr_serialize_int16_t+0x60>

0800cb84 <ucdr_deserialize_int16_t>:
 800cb84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb88:	460d      	mov	r5, r1
 800cb8a:	2102      	movs	r1, #2
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	f000 f9f5 	bl	800cf7c <ucdr_buffer_alignment>
 800cb92:	4601      	mov	r1, r0
 800cb94:	4620      	mov	r0, r4
 800cb96:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cb9a:	f000 fa33 	bl	800d004 <ucdr_advance_buffer>
 800cb9e:	2102      	movs	r1, #2
 800cba0:	4620      	mov	r0, r4
 800cba2:	f000 f98b 	bl	800cebc <ucdr_check_buffer_available_for>
 800cba6:	bb60      	cbnz	r0, 800cc02 <ucdr_deserialize_int16_t+0x7e>
 800cba8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cbac:	42be      	cmp	r6, r7
 800cbae:	d923      	bls.n	800cbf8 <ucdr_deserialize_int16_t+0x74>
 800cbb0:	6923      	ldr	r3, [r4, #16]
 800cbb2:	60a6      	str	r6, [r4, #8]
 800cbb4:	1bf6      	subs	r6, r6, r7
 800cbb6:	4433      	add	r3, r6
 800cbb8:	f1c6 0902 	rsb	r9, r6, #2
 800cbbc:	6123      	str	r3, [r4, #16]
 800cbbe:	4649      	mov	r1, r9
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f000 f987 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d034      	beq.n	800cc34 <ucdr_deserialize_int16_t+0xb0>
 800cbca:	7d23      	ldrb	r3, [r4, #20]
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d042      	beq.n	800cc56 <ucdr_deserialize_int16_t+0xd2>
 800cbd0:	787b      	ldrb	r3, [r7, #1]
 800cbd2:	702b      	strb	r3, [r5, #0]
 800cbd4:	2e00      	cmp	r6, #0
 800cbd6:	d03a      	beq.n	800cc4e <ucdr_deserialize_int16_t+0xca>
 800cbd8:	783b      	ldrb	r3, [r7, #0]
 800cbda:	706b      	strb	r3, [r5, #1]
 800cbdc:	6923      	ldr	r3, [r4, #16]
 800cbde:	68a2      	ldr	r2, [r4, #8]
 800cbe0:	7da0      	ldrb	r0, [r4, #22]
 800cbe2:	2102      	movs	r1, #2
 800cbe4:	3302      	adds	r3, #2
 800cbe6:	444a      	add	r2, r9
 800cbe8:	1b9b      	subs	r3, r3, r6
 800cbea:	7561      	strb	r1, [r4, #21]
 800cbec:	60a2      	str	r2, [r4, #8]
 800cbee:	6123      	str	r3, [r4, #16]
 800cbf0:	f080 0001 	eor.w	r0, r0, #1
 800cbf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbf8:	2102      	movs	r1, #2
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	f000 f96a 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800cc00:	b180      	cbz	r0, 800cc24 <ucdr_deserialize_int16_t+0xa0>
 800cc02:	7d23      	ldrb	r3, [r4, #20]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	68a3      	ldr	r3, [r4, #8]
 800cc08:	d011      	beq.n	800cc2e <ucdr_deserialize_int16_t+0xaa>
 800cc0a:	785b      	ldrb	r3, [r3, #1]
 800cc0c:	702b      	strb	r3, [r5, #0]
 800cc0e:	68a3      	ldr	r3, [r4, #8]
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	706b      	strb	r3, [r5, #1]
 800cc14:	68a2      	ldr	r2, [r4, #8]
 800cc16:	6923      	ldr	r3, [r4, #16]
 800cc18:	3202      	adds	r2, #2
 800cc1a:	3302      	adds	r3, #2
 800cc1c:	2102      	movs	r1, #2
 800cc1e:	60a2      	str	r2, [r4, #8]
 800cc20:	6123      	str	r3, [r4, #16]
 800cc22:	7561      	strb	r1, [r4, #21]
 800cc24:	7da0      	ldrb	r0, [r4, #22]
 800cc26:	f080 0001 	eor.w	r0, r0, #1
 800cc2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc2e:	881b      	ldrh	r3, [r3, #0]
 800cc30:	802b      	strh	r3, [r5, #0]
 800cc32:	e7ef      	b.n	800cc14 <ucdr_deserialize_int16_t+0x90>
 800cc34:	68a2      	ldr	r2, [r4, #8]
 800cc36:	6923      	ldr	r3, [r4, #16]
 800cc38:	7da0      	ldrb	r0, [r4, #22]
 800cc3a:	f884 8015 	strb.w	r8, [r4, #21]
 800cc3e:	1b92      	subs	r2, r2, r6
 800cc40:	1b9b      	subs	r3, r3, r6
 800cc42:	60a2      	str	r2, [r4, #8]
 800cc44:	6123      	str	r3, [r4, #16]
 800cc46:	f080 0001 	eor.w	r0, r0, #1
 800cc4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc4e:	68a3      	ldr	r3, [r4, #8]
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	706b      	strb	r3, [r5, #1]
 800cc54:	e7c2      	b.n	800cbdc <ucdr_deserialize_int16_t+0x58>
 800cc56:	4639      	mov	r1, r7
 800cc58:	4632      	mov	r2, r6
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	f00a fcf3 	bl	8017646 <memcpy>
 800cc60:	68a1      	ldr	r1, [r4, #8]
 800cc62:	464a      	mov	r2, r9
 800cc64:	19a8      	adds	r0, r5, r6
 800cc66:	f00a fcee 	bl	8017646 <memcpy>
 800cc6a:	e7b7      	b.n	800cbdc <ucdr_deserialize_int16_t+0x58>

0800cc6c <ucdr_serialize_int32_t>:
 800cc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc70:	b082      	sub	sp, #8
 800cc72:	4604      	mov	r4, r0
 800cc74:	9101      	str	r1, [sp, #4]
 800cc76:	2104      	movs	r1, #4
 800cc78:	f000 f980 	bl	800cf7c <ucdr_buffer_alignment>
 800cc7c:	4601      	mov	r1, r0
 800cc7e:	4620      	mov	r0, r4
 800cc80:	7d67      	ldrb	r7, [r4, #21]
 800cc82:	f000 f9bf 	bl	800d004 <ucdr_advance_buffer>
 800cc86:	2104      	movs	r1, #4
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f000 f917 	bl	800cebc <ucdr_check_buffer_available_for>
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	d139      	bne.n	800cd06 <ucdr_serialize_int32_t+0x9a>
 800cc92:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cc96:	42ab      	cmp	r3, r5
 800cc98:	d930      	bls.n	800ccfc <ucdr_serialize_int32_t+0x90>
 800cc9a:	1b5e      	subs	r6, r3, r5
 800cc9c:	60a3      	str	r3, [r4, #8]
 800cc9e:	6923      	ldr	r3, [r4, #16]
 800cca0:	f1c6 0804 	rsb	r8, r6, #4
 800cca4:	4433      	add	r3, r6
 800cca6:	6123      	str	r3, [r4, #16]
 800cca8:	4641      	mov	r1, r8
 800ccaa:	4620      	mov	r0, r4
 800ccac:	f000 f912 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	d04c      	beq.n	800cd4e <ucdr_serialize_int32_t+0xe2>
 800ccb4:	7d23      	ldrb	r3, [r4, #20]
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d063      	beq.n	800cd82 <ucdr_serialize_int32_t+0x116>
 800ccba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ccbe:	702b      	strb	r3, [r5, #0]
 800ccc0:	2e00      	cmp	r6, #0
 800ccc2:	d051      	beq.n	800cd68 <ucdr_serialize_int32_t+0xfc>
 800ccc4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ccc8:	706b      	strb	r3, [r5, #1]
 800ccca:	2e01      	cmp	r6, #1
 800cccc:	d050      	beq.n	800cd70 <ucdr_serialize_int32_t+0x104>
 800ccce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ccd2:	70ab      	strb	r3, [r5, #2]
 800ccd4:	2e02      	cmp	r6, #2
 800ccd6:	d04f      	beq.n	800cd78 <ucdr_serialize_int32_t+0x10c>
 800ccd8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ccdc:	70eb      	strb	r3, [r5, #3]
 800ccde:	6923      	ldr	r3, [r4, #16]
 800cce0:	68a2      	ldr	r2, [r4, #8]
 800cce2:	7da0      	ldrb	r0, [r4, #22]
 800cce4:	3304      	adds	r3, #4
 800cce6:	1b9e      	subs	r6, r3, r6
 800cce8:	4442      	add	r2, r8
 800ccea:	2304      	movs	r3, #4
 800ccec:	f080 0001 	eor.w	r0, r0, #1
 800ccf0:	60a2      	str	r2, [r4, #8]
 800ccf2:	6126      	str	r6, [r4, #16]
 800ccf4:	7563      	strb	r3, [r4, #21]
 800ccf6:	b002      	add	sp, #8
 800ccf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccfc:	2104      	movs	r1, #4
 800ccfe:	4620      	mov	r0, r4
 800cd00:	f000 f8e8 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800cd04:	b1d0      	cbz	r0, 800cd3c <ucdr_serialize_int32_t+0xd0>
 800cd06:	7d23      	ldrb	r3, [r4, #20]
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	68a3      	ldr	r3, [r4, #8]
 800cd0c:	d01c      	beq.n	800cd48 <ucdr_serialize_int32_t+0xdc>
 800cd0e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cd12:	701a      	strb	r2, [r3, #0]
 800cd14:	68a3      	ldr	r3, [r4, #8]
 800cd16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cd1a:	705a      	strb	r2, [r3, #1]
 800cd1c:	68a3      	ldr	r3, [r4, #8]
 800cd1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cd22:	709a      	strb	r2, [r3, #2]
 800cd24:	68a3      	ldr	r3, [r4, #8]
 800cd26:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cd2a:	70da      	strb	r2, [r3, #3]
 800cd2c:	68a2      	ldr	r2, [r4, #8]
 800cd2e:	6923      	ldr	r3, [r4, #16]
 800cd30:	3204      	adds	r2, #4
 800cd32:	3304      	adds	r3, #4
 800cd34:	2104      	movs	r1, #4
 800cd36:	60a2      	str	r2, [r4, #8]
 800cd38:	6123      	str	r3, [r4, #16]
 800cd3a:	7561      	strb	r1, [r4, #21]
 800cd3c:	7da0      	ldrb	r0, [r4, #22]
 800cd3e:	f080 0001 	eor.w	r0, r0, #1
 800cd42:	b002      	add	sp, #8
 800cd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd48:	9a01      	ldr	r2, [sp, #4]
 800cd4a:	601a      	str	r2, [r3, #0]
 800cd4c:	e7ee      	b.n	800cd2c <ucdr_serialize_int32_t+0xc0>
 800cd4e:	68a2      	ldr	r2, [r4, #8]
 800cd50:	6923      	ldr	r3, [r4, #16]
 800cd52:	7da0      	ldrb	r0, [r4, #22]
 800cd54:	7567      	strb	r7, [r4, #21]
 800cd56:	1b92      	subs	r2, r2, r6
 800cd58:	1b9b      	subs	r3, r3, r6
 800cd5a:	f080 0001 	eor.w	r0, r0, #1
 800cd5e:	60a2      	str	r2, [r4, #8]
 800cd60:	6123      	str	r3, [r4, #16]
 800cd62:	b002      	add	sp, #8
 800cd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd68:	68a3      	ldr	r3, [r4, #8]
 800cd6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cd6e:	701a      	strb	r2, [r3, #0]
 800cd70:	68a3      	ldr	r3, [r4, #8]
 800cd72:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cd76:	701a      	strb	r2, [r3, #0]
 800cd78:	68a3      	ldr	r3, [r4, #8]
 800cd7a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cd7e:	701a      	strb	r2, [r3, #0]
 800cd80:	e7ad      	b.n	800ccde <ucdr_serialize_int32_t+0x72>
 800cd82:	4628      	mov	r0, r5
 800cd84:	ad01      	add	r5, sp, #4
 800cd86:	4629      	mov	r1, r5
 800cd88:	4632      	mov	r2, r6
 800cd8a:	f00a fc5c 	bl	8017646 <memcpy>
 800cd8e:	68a0      	ldr	r0, [r4, #8]
 800cd90:	4642      	mov	r2, r8
 800cd92:	19a9      	adds	r1, r5, r6
 800cd94:	f00a fc57 	bl	8017646 <memcpy>
 800cd98:	e7a1      	b.n	800ccde <ucdr_serialize_int32_t+0x72>
 800cd9a:	bf00      	nop

0800cd9c <ucdr_deserialize_int32_t>:
 800cd9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cda0:	460d      	mov	r5, r1
 800cda2:	2104      	movs	r1, #4
 800cda4:	4604      	mov	r4, r0
 800cda6:	f000 f8e9 	bl	800cf7c <ucdr_buffer_alignment>
 800cdaa:	4601      	mov	r1, r0
 800cdac:	4620      	mov	r0, r4
 800cdae:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cdb2:	f000 f927 	bl	800d004 <ucdr_advance_buffer>
 800cdb6:	2104      	movs	r1, #4
 800cdb8:	4620      	mov	r0, r4
 800cdba:	f000 f87f 	bl	800cebc <ucdr_check_buffer_available_for>
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	d138      	bne.n	800ce34 <ucdr_deserialize_int32_t+0x98>
 800cdc2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cdc6:	42b7      	cmp	r7, r6
 800cdc8:	d92f      	bls.n	800ce2a <ucdr_deserialize_int32_t+0x8e>
 800cdca:	6923      	ldr	r3, [r4, #16]
 800cdcc:	60a7      	str	r7, [r4, #8]
 800cdce:	1bbf      	subs	r7, r7, r6
 800cdd0:	443b      	add	r3, r7
 800cdd2:	f1c7 0904 	rsb	r9, r7, #4
 800cdd6:	6123      	str	r3, [r4, #16]
 800cdd8:	4649      	mov	r1, r9
 800cdda:	4620      	mov	r0, r4
 800cddc:	f000 f87a 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d046      	beq.n	800ce72 <ucdr_deserialize_int32_t+0xd6>
 800cde4:	7d23      	ldrb	r3, [r4, #20]
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d05c      	beq.n	800cea4 <ucdr_deserialize_int32_t+0x108>
 800cdea:	78f3      	ldrb	r3, [r6, #3]
 800cdec:	702b      	strb	r3, [r5, #0]
 800cdee:	2f00      	cmp	r7, #0
 800cdf0:	d04c      	beq.n	800ce8c <ucdr_deserialize_int32_t+0xf0>
 800cdf2:	78b3      	ldrb	r3, [r6, #2]
 800cdf4:	706b      	strb	r3, [r5, #1]
 800cdf6:	2f01      	cmp	r7, #1
 800cdf8:	f105 0302 	add.w	r3, r5, #2
 800cdfc:	d04a      	beq.n	800ce94 <ucdr_deserialize_int32_t+0xf8>
 800cdfe:	7873      	ldrb	r3, [r6, #1]
 800ce00:	70ab      	strb	r3, [r5, #2]
 800ce02:	2f02      	cmp	r7, #2
 800ce04:	f105 0303 	add.w	r3, r5, #3
 800ce08:	d048      	beq.n	800ce9c <ucdr_deserialize_int32_t+0x100>
 800ce0a:	7833      	ldrb	r3, [r6, #0]
 800ce0c:	70eb      	strb	r3, [r5, #3]
 800ce0e:	6923      	ldr	r3, [r4, #16]
 800ce10:	68a2      	ldr	r2, [r4, #8]
 800ce12:	7da0      	ldrb	r0, [r4, #22]
 800ce14:	2104      	movs	r1, #4
 800ce16:	3304      	adds	r3, #4
 800ce18:	444a      	add	r2, r9
 800ce1a:	1bdb      	subs	r3, r3, r7
 800ce1c:	7561      	strb	r1, [r4, #21]
 800ce1e:	60a2      	str	r2, [r4, #8]
 800ce20:	6123      	str	r3, [r4, #16]
 800ce22:	f080 0001 	eor.w	r0, r0, #1
 800ce26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce2a:	2104      	movs	r1, #4
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f000 f851 	bl	800ced4 <ucdr_check_final_buffer_behavior>
 800ce32:	b1b0      	cbz	r0, 800ce62 <ucdr_deserialize_int32_t+0xc6>
 800ce34:	7d23      	ldrb	r3, [r4, #20]
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	68a3      	ldr	r3, [r4, #8]
 800ce3a:	d017      	beq.n	800ce6c <ucdr_deserialize_int32_t+0xd0>
 800ce3c:	78db      	ldrb	r3, [r3, #3]
 800ce3e:	702b      	strb	r3, [r5, #0]
 800ce40:	68a3      	ldr	r3, [r4, #8]
 800ce42:	789b      	ldrb	r3, [r3, #2]
 800ce44:	706b      	strb	r3, [r5, #1]
 800ce46:	68a3      	ldr	r3, [r4, #8]
 800ce48:	785b      	ldrb	r3, [r3, #1]
 800ce4a:	70ab      	strb	r3, [r5, #2]
 800ce4c:	68a3      	ldr	r3, [r4, #8]
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	70eb      	strb	r3, [r5, #3]
 800ce52:	68a2      	ldr	r2, [r4, #8]
 800ce54:	6923      	ldr	r3, [r4, #16]
 800ce56:	3204      	adds	r2, #4
 800ce58:	3304      	adds	r3, #4
 800ce5a:	2104      	movs	r1, #4
 800ce5c:	60a2      	str	r2, [r4, #8]
 800ce5e:	6123      	str	r3, [r4, #16]
 800ce60:	7561      	strb	r1, [r4, #21]
 800ce62:	7da0      	ldrb	r0, [r4, #22]
 800ce64:	f080 0001 	eor.w	r0, r0, #1
 800ce68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	602b      	str	r3, [r5, #0]
 800ce70:	e7ef      	b.n	800ce52 <ucdr_deserialize_int32_t+0xb6>
 800ce72:	68a2      	ldr	r2, [r4, #8]
 800ce74:	6923      	ldr	r3, [r4, #16]
 800ce76:	7da0      	ldrb	r0, [r4, #22]
 800ce78:	f884 8015 	strb.w	r8, [r4, #21]
 800ce7c:	1bd2      	subs	r2, r2, r7
 800ce7e:	1bdb      	subs	r3, r3, r7
 800ce80:	60a2      	str	r2, [r4, #8]
 800ce82:	6123      	str	r3, [r4, #16]
 800ce84:	f080 0001 	eor.w	r0, r0, #1
 800ce88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce8c:	68a3      	ldr	r3, [r4, #8]
 800ce8e:	789b      	ldrb	r3, [r3, #2]
 800ce90:	706b      	strb	r3, [r5, #1]
 800ce92:	1cab      	adds	r3, r5, #2
 800ce94:	68a2      	ldr	r2, [r4, #8]
 800ce96:	7852      	ldrb	r2, [r2, #1]
 800ce98:	f803 2b01 	strb.w	r2, [r3], #1
 800ce9c:	68a2      	ldr	r2, [r4, #8]
 800ce9e:	7812      	ldrb	r2, [r2, #0]
 800cea0:	701a      	strb	r2, [r3, #0]
 800cea2:	e7b4      	b.n	800ce0e <ucdr_deserialize_int32_t+0x72>
 800cea4:	4631      	mov	r1, r6
 800cea6:	463a      	mov	r2, r7
 800cea8:	4628      	mov	r0, r5
 800ceaa:	f00a fbcc 	bl	8017646 <memcpy>
 800ceae:	68a1      	ldr	r1, [r4, #8]
 800ceb0:	464a      	mov	r2, r9
 800ceb2:	19e8      	adds	r0, r5, r7
 800ceb4:	f00a fbc7 	bl	8017646 <memcpy>
 800ceb8:	e7a9      	b.n	800ce0e <ucdr_deserialize_int32_t+0x72>
 800ceba:	bf00      	nop

0800cebc <ucdr_check_buffer_available_for>:
 800cebc:	7d83      	ldrb	r3, [r0, #22]
 800cebe:	b93b      	cbnz	r3, 800ced0 <ucdr_check_buffer_available_for+0x14>
 800cec0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800cec4:	4419      	add	r1, r3
 800cec6:	4288      	cmp	r0, r1
 800cec8:	bf34      	ite	cc
 800ceca:	2000      	movcc	r0, #0
 800cecc:	2001      	movcs	r0, #1
 800cece:	4770      	bx	lr
 800ced0:	2000      	movs	r0, #0
 800ced2:	4770      	bx	lr

0800ced4 <ucdr_check_final_buffer_behavior>:
 800ced4:	7d83      	ldrb	r3, [r0, #22]
 800ced6:	b943      	cbnz	r3, 800ceea <ucdr_check_final_buffer_behavior+0x16>
 800ced8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800cedc:	4291      	cmp	r1, r2
 800cede:	b510      	push	{r4, lr}
 800cee0:	4604      	mov	r4, r0
 800cee2:	d205      	bcs.n	800cef0 <ucdr_check_final_buffer_behavior+0x1c>
 800cee4:	2301      	movs	r3, #1
 800cee6:	4618      	mov	r0, r3
 800cee8:	bd10      	pop	{r4, pc}
 800ceea:	2300      	movs	r3, #0
 800ceec:	4618      	mov	r0, r3
 800ceee:	4770      	bx	lr
 800cef0:	6982      	ldr	r2, [r0, #24]
 800cef2:	b13a      	cbz	r2, 800cf04 <ucdr_check_final_buffer_behavior+0x30>
 800cef4:	69c1      	ldr	r1, [r0, #28]
 800cef6:	4790      	blx	r2
 800cef8:	f080 0301 	eor.w	r3, r0, #1
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	75a0      	strb	r0, [r4, #22]
 800cf00:	4618      	mov	r0, r3
 800cf02:	bd10      	pop	{r4, pc}
 800cf04:	2001      	movs	r0, #1
 800cf06:	75a0      	strb	r0, [r4, #22]
 800cf08:	e7fa      	b.n	800cf00 <ucdr_check_final_buffer_behavior+0x2c>
 800cf0a:	bf00      	nop

0800cf0c <ucdr_set_on_full_buffer_callback>:
 800cf0c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800cf10:	4770      	bx	lr
 800cf12:	bf00      	nop

0800cf14 <ucdr_init_buffer_origin_offset_endian>:
 800cf14:	b410      	push	{r4}
 800cf16:	9c01      	ldr	r4, [sp, #4]
 800cf18:	6001      	str	r1, [r0, #0]
 800cf1a:	440a      	add	r2, r1
 800cf1c:	6042      	str	r2, [r0, #4]
 800cf1e:	190a      	adds	r2, r1, r4
 800cf20:	441c      	add	r4, r3
 800cf22:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800cf26:	6082      	str	r2, [r0, #8]
 800cf28:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cf2c:	7503      	strb	r3, [r0, #20]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800cf34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf38:	7542      	strb	r2, [r0, #21]
 800cf3a:	7582      	strb	r2, [r0, #22]
 800cf3c:	4770      	bx	lr
 800cf3e:	bf00      	nop

0800cf40 <ucdr_init_buffer_origin_offset>:
 800cf40:	b510      	push	{r4, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	9c04      	ldr	r4, [sp, #16]
 800cf46:	9400      	str	r4, [sp, #0]
 800cf48:	2401      	movs	r4, #1
 800cf4a:	9401      	str	r4, [sp, #4]
 800cf4c:	f7ff ffe2 	bl	800cf14 <ucdr_init_buffer_origin_offset_endian>
 800cf50:	b002      	add	sp, #8
 800cf52:	bd10      	pop	{r4, pc}

0800cf54 <ucdr_init_buffer_origin>:
 800cf54:	b510      	push	{r4, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	2400      	movs	r4, #0
 800cf5a:	9400      	str	r4, [sp, #0]
 800cf5c:	f7ff fff0 	bl	800cf40 <ucdr_init_buffer_origin_offset>
 800cf60:	b002      	add	sp, #8
 800cf62:	bd10      	pop	{r4, pc}

0800cf64 <ucdr_init_buffer>:
 800cf64:	2300      	movs	r3, #0
 800cf66:	f7ff bff5 	b.w	800cf54 <ucdr_init_buffer_origin>
 800cf6a:	bf00      	nop

0800cf6c <ucdr_alignment>:
 800cf6c:	fbb0 f3f1 	udiv	r3, r0, r1
 800cf70:	fb03 0011 	mls	r0, r3, r1, r0
 800cf74:	1a08      	subs	r0, r1, r0
 800cf76:	3901      	subs	r1, #1
 800cf78:	4008      	ands	r0, r1
 800cf7a:	4770      	bx	lr

0800cf7c <ucdr_buffer_alignment>:
 800cf7c:	7d43      	ldrb	r3, [r0, #21]
 800cf7e:	428b      	cmp	r3, r1
 800cf80:	d208      	bcs.n	800cf94 <ucdr_buffer_alignment+0x18>
 800cf82:	6900      	ldr	r0, [r0, #16]
 800cf84:	fbb0 f3f1 	udiv	r3, r0, r1
 800cf88:	fb01 0013 	mls	r0, r1, r3, r0
 800cf8c:	1a08      	subs	r0, r1, r0
 800cf8e:	3901      	subs	r1, #1
 800cf90:	4008      	ands	r0, r1
 800cf92:	4770      	bx	lr
 800cf94:	2000      	movs	r0, #0
 800cf96:	4770      	bx	lr

0800cf98 <ucdr_align_to>:
 800cf98:	b538      	push	{r3, r4, r5, lr}
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	460d      	mov	r5, r1
 800cf9e:	f7ff ffed 	bl	800cf7c <ucdr_buffer_alignment>
 800cfa2:	68a3      	ldr	r3, [r4, #8]
 800cfa4:	6921      	ldr	r1, [r4, #16]
 800cfa6:	7565      	strb	r5, [r4, #21]
 800cfa8:	181a      	adds	r2, r3, r0
 800cfaa:	6863      	ldr	r3, [r4, #4]
 800cfac:	4293      	cmp	r3, r2
 800cfae:	4408      	add	r0, r1
 800cfb0:	bf28      	it	cs
 800cfb2:	4613      	movcs	r3, r2
 800cfb4:	6120      	str	r0, [r4, #16]
 800cfb6:	60a3      	str	r3, [r4, #8]
 800cfb8:	bd38      	pop	{r3, r4, r5, pc}
 800cfba:	bf00      	nop

0800cfbc <ucdr_buffer_length>:
 800cfbc:	6882      	ldr	r2, [r0, #8]
 800cfbe:	6800      	ldr	r0, [r0, #0]
 800cfc0:	1a10      	subs	r0, r2, r0
 800cfc2:	4770      	bx	lr

0800cfc4 <ucdr_buffer_remaining>:
 800cfc4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800cfc8:	1a10      	subs	r0, r2, r0
 800cfca:	4770      	bx	lr

0800cfcc <ucdr_check_final_buffer_behavior_array>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	7d83      	ldrb	r3, [r0, #22]
 800cfd0:	b963      	cbnz	r3, 800cfec <ucdr_check_final_buffer_behavior_array+0x20>
 800cfd2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	4604      	mov	r4, r0
 800cfda:	460d      	mov	r5, r1
 800cfdc:	d308      	bcc.n	800cff0 <ucdr_check_final_buffer_behavior_array+0x24>
 800cfde:	b139      	cbz	r1, 800cff0 <ucdr_check_final_buffer_behavior_array+0x24>
 800cfe0:	6983      	ldr	r3, [r0, #24]
 800cfe2:	b163      	cbz	r3, 800cffe <ucdr_check_final_buffer_behavior_array+0x32>
 800cfe4:	69c1      	ldr	r1, [r0, #28]
 800cfe6:	4798      	blx	r3
 800cfe8:	75a0      	strb	r0, [r4, #22]
 800cfea:	b108      	cbz	r0, 800cff0 <ucdr_check_final_buffer_behavior_array+0x24>
 800cfec:	2000      	movs	r0, #0
 800cfee:	bd38      	pop	{r3, r4, r5, pc}
 800cff0:	4620      	mov	r0, r4
 800cff2:	f7ff ffe7 	bl	800cfc4 <ucdr_buffer_remaining>
 800cff6:	42a8      	cmp	r0, r5
 800cff8:	bf28      	it	cs
 800cffa:	4628      	movcs	r0, r5
 800cffc:	bd38      	pop	{r3, r4, r5, pc}
 800cffe:	2301      	movs	r3, #1
 800d000:	7583      	strb	r3, [r0, #22]
 800d002:	e7f3      	b.n	800cfec <ucdr_check_final_buffer_behavior_array+0x20>

0800d004 <ucdr_advance_buffer>:
 800d004:	b538      	push	{r3, r4, r5, lr}
 800d006:	4604      	mov	r4, r0
 800d008:	460d      	mov	r5, r1
 800d00a:	f7ff ff57 	bl	800cebc <ucdr_check_buffer_available_for>
 800d00e:	b178      	cbz	r0, 800d030 <ucdr_advance_buffer+0x2c>
 800d010:	6923      	ldr	r3, [r4, #16]
 800d012:	68a2      	ldr	r2, [r4, #8]
 800d014:	442b      	add	r3, r5
 800d016:	6123      	str	r3, [r4, #16]
 800d018:	2301      	movs	r3, #1
 800d01a:	442a      	add	r2, r5
 800d01c:	7563      	strb	r3, [r4, #21]
 800d01e:	60a2      	str	r2, [r4, #8]
 800d020:	bd38      	pop	{r3, r4, r5, pc}
 800d022:	68a2      	ldr	r2, [r4, #8]
 800d024:	6923      	ldr	r3, [r4, #16]
 800d026:	4402      	add	r2, r0
 800d028:	4403      	add	r3, r0
 800d02a:	1a2d      	subs	r5, r5, r0
 800d02c:	60a2      	str	r2, [r4, #8]
 800d02e:	6123      	str	r3, [r4, #16]
 800d030:	4629      	mov	r1, r5
 800d032:	2201      	movs	r2, #1
 800d034:	4620      	mov	r0, r4
 800d036:	f7ff ffc9 	bl	800cfcc <ucdr_check_final_buffer_behavior_array>
 800d03a:	2800      	cmp	r0, #0
 800d03c:	d1f1      	bne.n	800d022 <ucdr_advance_buffer+0x1e>
 800d03e:	2301      	movs	r3, #1
 800d040:	7563      	strb	r3, [r4, #21]
 800d042:	bd38      	pop	{r3, r4, r5, pc}

0800d044 <uxr_buffer_delete_entity>:
 800d044:	b510      	push	{r4, lr}
 800d046:	2300      	movs	r3, #0
 800d048:	b08e      	sub	sp, #56	; 0x38
 800d04a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d04e:	2303      	movs	r3, #3
 800d050:	9300      	str	r3, [sp, #0]
 800d052:	2204      	movs	r2, #4
 800d054:	ab06      	add	r3, sp, #24
 800d056:	4604      	mov	r4, r0
 800d058:	9103      	str	r1, [sp, #12]
 800d05a:	f001 fb41 	bl	800e6e0 <uxr_prepare_stream_to_write_submessage>
 800d05e:	b918      	cbnz	r0, 800d068 <uxr_buffer_delete_entity+0x24>
 800d060:	4604      	mov	r4, r0
 800d062:	4620      	mov	r0, r4
 800d064:	b00e      	add	sp, #56	; 0x38
 800d066:	bd10      	pop	{r4, pc}
 800d068:	9902      	ldr	r1, [sp, #8]
 800d06a:	aa05      	add	r2, sp, #20
 800d06c:	4620      	mov	r0, r4
 800d06e:	f001 fc6d 	bl	800e94c <uxr_init_base_object_request>
 800d072:	a905      	add	r1, sp, #20
 800d074:	4604      	mov	r4, r0
 800d076:	a806      	add	r0, sp, #24
 800d078:	f003 fb64 	bl	8010744 <uxr_serialize_DELETE_Payload>
 800d07c:	4620      	mov	r0, r4
 800d07e:	b00e      	add	sp, #56	; 0x38
 800d080:	bd10      	pop	{r4, pc}
 800d082:	bf00      	nop

0800d084 <uxr_common_create_entity>:
 800d084:	b510      	push	{r4, lr}
 800d086:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d08a:	b08c      	sub	sp, #48	; 0x30
 800d08c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d090:	f1bc 0f01 	cmp.w	ip, #1
 800d094:	bf0c      	ite	eq
 800d096:	f003 0201 	andeq.w	r2, r3, #1
 800d09a:	2200      	movne	r2, #0
 800d09c:	330e      	adds	r3, #14
 800d09e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800d0a2:	9101      	str	r1, [sp, #4]
 800d0a4:	441a      	add	r2, r3
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	9300      	str	r3, [sp, #0]
 800d0aa:	9903      	ldr	r1, [sp, #12]
 800d0ac:	ab04      	add	r3, sp, #16
 800d0ae:	b292      	uxth	r2, r2
 800d0b0:	4604      	mov	r4, r0
 800d0b2:	f001 fb15 	bl	800e6e0 <uxr_prepare_stream_to_write_submessage>
 800d0b6:	b918      	cbnz	r0, 800d0c0 <uxr_common_create_entity+0x3c>
 800d0b8:	4604      	mov	r4, r0
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	b00c      	add	sp, #48	; 0x30
 800d0be:	bd10      	pop	{r4, pc}
 800d0c0:	9902      	ldr	r1, [sp, #8]
 800d0c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f001 fc41 	bl	800e94c <uxr_init_base_object_request>
 800d0ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d0cc:	4604      	mov	r4, r0
 800d0ce:	a804      	add	r0, sp, #16
 800d0d0:	f003 fa80 	bl	80105d4 <uxr_serialize_CREATE_Payload>
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	b00c      	add	sp, #48	; 0x30
 800d0d8:	bd10      	pop	{r4, pc}
 800d0da:	bf00      	nop

0800d0dc <uxr_buffer_create_participant_bin>:
 800d0dc:	b570      	push	{r4, r5, r6, lr}
 800d0de:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800d0e2:	ac11      	add	r4, sp, #68	; 0x44
 800d0e4:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800d0e8:	2303      	movs	r3, #3
 800d0ea:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d0ee:	7223      	strb	r3, [r4, #8]
 800d0f0:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800d0f2:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	2100      	movs	r1, #0
 800d0fa:	4605      	mov	r5, r0
 800d0fc:	7122      	strb	r2, [r4, #4]
 800d0fe:	f88d 1014 	strb.w	r1, [sp, #20]
 800d102:	b1cb      	cbz	r3, 800d138 <uxr_buffer_create_participant_bin+0x5c>
 800d104:	f88d 201c 	strb.w	r2, [sp, #28]
 800d108:	9308      	str	r3, [sp, #32]
 800d10a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d10e:	a915      	add	r1, sp, #84	; 0x54
 800d110:	a809      	add	r0, sp, #36	; 0x24
 800d112:	f7ff ff27 	bl	800cf64 <ucdr_init_buffer>
 800d116:	a905      	add	r1, sp, #20
 800d118:	a809      	add	r0, sp, #36	; 0x24
 800d11a:	f002 fe3d 	bl	800fd98 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800d11e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d120:	9600      	str	r6, [sp, #0]
 800d122:	9401      	str	r4, [sp, #4]
 800d124:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d128:	60e3      	str	r3, [r4, #12]
 800d12a:	4628      	mov	r0, r5
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	f7ff ffa9 	bl	800d084 <uxr_common_create_entity>
 800d132:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800d136:	bd70      	pop	{r4, r5, r6, pc}
 800d138:	f88d 301c 	strb.w	r3, [sp, #28]
 800d13c:	e7e5      	b.n	800d10a <uxr_buffer_create_participant_bin+0x2e>
 800d13e:	bf00      	nop

0800d140 <uxr_buffer_create_topic_bin>:
 800d140:	b570      	push	{r4, r5, r6, lr}
 800d142:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800d146:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d14a:	9105      	str	r1, [sp, #20]
 800d14c:	4605      	mov	r5, r0
 800d14e:	a997      	add	r1, sp, #604	; 0x25c
 800d150:	4618      	mov	r0, r3
 800d152:	2302      	movs	r3, #2
 800d154:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800d158:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800d15c:	f000 fa58 	bl	800d610 <uxr_object_id_to_raw>
 800d160:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800d162:	9306      	str	r3, [sp, #24]
 800d164:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800d166:	930a      	str	r3, [sp, #40]	; 0x28
 800d168:	2303      	movs	r3, #3
 800d16a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800d16e:	2301      	movs	r3, #1
 800d170:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d174:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d178:	a917      	add	r1, sp, #92	; 0x5c
 800d17a:	2300      	movs	r3, #0
 800d17c:	a80b      	add	r0, sp, #44	; 0x2c
 800d17e:	f88d 301c 	strb.w	r3, [sp, #28]
 800d182:	f7ff feef 	bl	800cf64 <ucdr_init_buffer>
 800d186:	a906      	add	r1, sp, #24
 800d188:	a80b      	add	r0, sp, #44	; 0x2c
 800d18a:	f002 fe27 	bl	800fddc <uxr_serialize_OBJK_Topic_Binary>
 800d18e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d190:	9316      	str	r3, [sp, #88]	; 0x58
 800d192:	ac13      	add	r4, sp, #76	; 0x4c
 800d194:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d198:	9600      	str	r6, [sp, #0]
 800d19a:	9401      	str	r4, [sp, #4]
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	4628      	mov	r0, r5
 800d1a0:	f7ff ff70 	bl	800d084 <uxr_common_create_entity>
 800d1a4:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800d1a8:	bd70      	pop	{r4, r5, r6, pc}
 800d1aa:	bf00      	nop

0800d1ac <uxr_buffer_create_publisher_bin>:
 800d1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1ae:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800d1b2:	4605      	mov	r5, r0
 800d1b4:	9105      	str	r1, [sp, #20]
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	2603      	movs	r6, #3
 800d1ba:	a992      	add	r1, sp, #584	; 0x248
 800d1bc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d1c0:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800d1c4:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800d1c8:	f000 fa22 	bl	800d610 <uxr_object_id_to_raw>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1d2:	a912      	add	r1, sp, #72	; 0x48
 800d1d4:	a806      	add	r0, sp, #24
 800d1d6:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800d1da:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800d1de:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800d1e2:	f7ff febf 	bl	800cf64 <ucdr_init_buffer>
 800d1e6:	a993      	add	r1, sp, #588	; 0x24c
 800d1e8:	a806      	add	r0, sp, #24
 800d1ea:	f002 feab 	bl	800ff44 <uxr_serialize_OBJK_Publisher_Binary>
 800d1ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1f0:	9311      	str	r3, [sp, #68]	; 0x44
 800d1f2:	ac0e      	add	r4, sp, #56	; 0x38
 800d1f4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d1f8:	9700      	str	r7, [sp, #0]
 800d1fa:	9401      	str	r4, [sp, #4]
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	4628      	mov	r0, r5
 800d200:	f7ff ff40 	bl	800d084 <uxr_common_create_entity>
 800d204:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800d208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d20a:	bf00      	nop

0800d20c <uxr_buffer_create_subscriber_bin>:
 800d20c:	b570      	push	{r4, r5, r6, lr}
 800d20e:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 800d212:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d216:	9105      	str	r1, [sp, #20]
 800d218:	4605      	mov	r5, r0
 800d21a:	a992      	add	r1, sp, #584	; 0x248
 800d21c:	4618      	mov	r0, r3
 800d21e:	2304      	movs	r3, #4
 800d220:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 800d224:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800d228:	f000 f9f2 	bl	800d610 <uxr_object_id_to_raw>
 800d22c:	2300      	movs	r3, #0
 800d22e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d232:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800d236:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800d23a:	a912      	add	r1, sp, #72	; 0x48
 800d23c:	2303      	movs	r3, #3
 800d23e:	a806      	add	r0, sp, #24
 800d240:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800d244:	f7ff fe8e 	bl	800cf64 <ucdr_init_buffer>
 800d248:	a993      	add	r1, sp, #588	; 0x24c
 800d24a:	a806      	add	r0, sp, #24
 800d24c:	f002 ff2a 	bl	80100a4 <uxr_serialize_OBJK_Subscriber_Binary>
 800d250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d252:	9311      	str	r3, [sp, #68]	; 0x44
 800d254:	ac0e      	add	r4, sp, #56	; 0x38
 800d256:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d25a:	9600      	str	r6, [sp, #0]
 800d25c:	9401      	str	r4, [sp, #4]
 800d25e:	b29b      	uxth	r3, r3
 800d260:	4628      	mov	r0, r5
 800d262:	f7ff ff0f 	bl	800d084 <uxr_common_create_entity>
 800d266:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 800d26a:	bd70      	pop	{r4, r5, r6, pc}

0800d26c <uxr_buffer_create_datawriter_bin>:
 800d26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d270:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d274:	ac1d      	add	r4, sp, #116	; 0x74
 800d276:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d27a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800d27e:	9105      	str	r1, [sp, #20]
 800d280:	4606      	mov	r6, r0
 800d282:	a9a1      	add	r1, sp, #644	; 0x284
 800d284:	4618      	mov	r0, r3
 800d286:	2305      	movs	r3, #5
 800d288:	7123      	strb	r3, [r4, #4]
 800d28a:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800d28e:	2703      	movs	r7, #3
 800d290:	f000 f9be 	bl	800d610 <uxr_object_id_to_raw>
 800d294:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800d296:	7227      	strb	r7, [r4, #8]
 800d298:	a90e      	add	r1, sp, #56	; 0x38
 800d29a:	f000 f9b9 	bl	800d610 <uxr_object_id_to_raw>
 800d29e:	2300      	movs	r3, #0
 800d2a0:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800d2a4:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800d2a8:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800d2ac:	3d00      	subs	r5, #0
 800d2ae:	bf18      	it	ne
 800d2b0:	2501      	movne	r5, #1
 800d2b2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800d2b6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800d2ba:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800d2be:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800d2c8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800d2cc:	bb8a      	cbnz	r2, 800d332 <uxr_buffer_create_datawriter_bin+0xc6>
 800d2ce:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800d2d2:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800d2d6:	f04f 0c13 	mov.w	ip, #19
 800d2da:	250b      	movs	r5, #11
 800d2dc:	2221      	movs	r2, #33	; 0x21
 800d2de:	2111      	movs	r1, #17
 800d2e0:	2009      	movs	r0, #9
 800d2e2:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800d2e6:	b923      	cbnz	r3, 800d2f2 <uxr_buffer_create_datawriter_bin+0x86>
 800d2e8:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800d2ec:	4672      	mov	r2, lr
 800d2ee:	4661      	mov	r1, ip
 800d2f0:	4628      	mov	r0, r5
 800d2f2:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d025      	beq.n	800d346 <uxr_buffer_create_datawriter_bin+0xda>
 800d2fa:	2b03      	cmp	r3, #3
 800d2fc:	d029      	beq.n	800d352 <uxr_buffer_create_datawriter_bin+0xe6>
 800d2fe:	b32b      	cbz	r3, 800d34c <uxr_buffer_create_datawriter_bin+0xe0>
 800d300:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d304:	a921      	add	r1, sp, #132	; 0x84
 800d306:	a806      	add	r0, sp, #24
 800d308:	f7ff fe2c 	bl	800cf64 <ucdr_init_buffer>
 800d30c:	a90e      	add	r1, sp, #56	; 0x38
 800d30e:	a806      	add	r0, sp, #24
 800d310:	f002 ff7a 	bl	8010208 <uxr_serialize_OBJK_DataWriter_Binary>
 800d314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d316:	f8cd 8000 	str.w	r8, [sp]
 800d31a:	9401      	str	r4, [sp, #4]
 800d31c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d320:	60e3      	str	r3, [r4, #12]
 800d322:	4630      	mov	r0, r6
 800d324:	b29b      	uxth	r3, r3
 800d326:	f7ff fead 	bl	800d084 <uxr_common_create_entity>
 800d32a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d332:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800d336:	f04f 0c12 	mov.w	ip, #18
 800d33a:	250a      	movs	r5, #10
 800d33c:	2220      	movs	r2, #32
 800d33e:	2110      	movs	r1, #16
 800d340:	2008      	movs	r0, #8
 800d342:	2702      	movs	r7, #2
 800d344:	e7cd      	b.n	800d2e2 <uxr_buffer_create_datawriter_bin+0x76>
 800d346:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800d34a:	e7d9      	b.n	800d300 <uxr_buffer_create_datawriter_bin+0x94>
 800d34c:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800d350:	e7d6      	b.n	800d300 <uxr_buffer_create_datawriter_bin+0x94>
 800d352:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800d356:	e7d3      	b.n	800d300 <uxr_buffer_create_datawriter_bin+0x94>

0800d358 <uxr_buffer_create_datareader_bin>:
 800d358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d35c:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800d360:	ac1f      	add	r4, sp, #124	; 0x7c
 800d362:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d366:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800d36a:	9105      	str	r1, [sp, #20]
 800d36c:	4606      	mov	r6, r0
 800d36e:	a9a3      	add	r1, sp, #652	; 0x28c
 800d370:	4618      	mov	r0, r3
 800d372:	2306      	movs	r3, #6
 800d374:	7123      	strb	r3, [r4, #4]
 800d376:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800d37a:	2703      	movs	r7, #3
 800d37c:	f000 f948 	bl	800d610 <uxr_object_id_to_raw>
 800d380:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800d382:	7227      	strb	r7, [r4, #8]
 800d384:	a90e      	add	r1, sp, #56	; 0x38
 800d386:	f000 f943 	bl	800d610 <uxr_object_id_to_raw>
 800d38a:	2300      	movs	r3, #0
 800d38c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800d390:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 800d394:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800d398:	3d00      	subs	r5, #0
 800d39a:	bf18      	it	ne
 800d39c:	2501      	movne	r5, #1
 800d39e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800d3a2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800d3a6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800d3aa:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800d3ae:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800d3b8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800d3bc:	bb8a      	cbnz	r2, 800d422 <uxr_buffer_create_datareader_bin+0xca>
 800d3be:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800d3c2:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800d3c6:	f04f 0c13 	mov.w	ip, #19
 800d3ca:	250b      	movs	r5, #11
 800d3cc:	2221      	movs	r2, #33	; 0x21
 800d3ce:	2111      	movs	r1, #17
 800d3d0:	2009      	movs	r0, #9
 800d3d2:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800d3d6:	b923      	cbnz	r3, 800d3e2 <uxr_buffer_create_datareader_bin+0x8a>
 800d3d8:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800d3dc:	4672      	mov	r2, lr
 800d3de:	4661      	mov	r1, ip
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d025      	beq.n	800d436 <uxr_buffer_create_datareader_bin+0xde>
 800d3ea:	2b03      	cmp	r3, #3
 800d3ec:	d029      	beq.n	800d442 <uxr_buffer_create_datareader_bin+0xea>
 800d3ee:	b32b      	cbz	r3, 800d43c <uxr_buffer_create_datareader_bin+0xe4>
 800d3f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3f4:	a923      	add	r1, sp, #140	; 0x8c
 800d3f6:	a806      	add	r0, sp, #24
 800d3f8:	f7ff fdb4 	bl	800cf64 <ucdr_init_buffer>
 800d3fc:	a90e      	add	r1, sp, #56	; 0x38
 800d3fe:	a806      	add	r0, sp, #24
 800d400:	f002 fec6 	bl	8010190 <uxr_serialize_OBJK_DataReader_Binary>
 800d404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d406:	f8cd 8000 	str.w	r8, [sp]
 800d40a:	9401      	str	r4, [sp, #4]
 800d40c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d410:	60e3      	str	r3, [r4, #12]
 800d412:	4630      	mov	r0, r6
 800d414:	b29b      	uxth	r3, r3
 800d416:	f7ff fe35 	bl	800d084 <uxr_common_create_entity>
 800d41a:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800d41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d422:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800d426:	f04f 0c12 	mov.w	ip, #18
 800d42a:	250a      	movs	r5, #10
 800d42c:	2220      	movs	r2, #32
 800d42e:	2110      	movs	r1, #16
 800d430:	2008      	movs	r0, #8
 800d432:	2702      	movs	r7, #2
 800d434:	e7cd      	b.n	800d3d2 <uxr_buffer_create_datareader_bin+0x7a>
 800d436:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800d43a:	e7d9      	b.n	800d3f0 <uxr_buffer_create_datareader_bin+0x98>
 800d43c:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800d440:	e7d6      	b.n	800d3f0 <uxr_buffer_create_datareader_bin+0x98>
 800d442:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800d446:	e7d3      	b.n	800d3f0 <uxr_buffer_create_datareader_bin+0x98>

0800d448 <get_custom_error>:
 800d448:	4b01      	ldr	r3, [pc, #4]	; (800d450 <get_custom_error+0x8>)
 800d44a:	7818      	ldrb	r0, [r3, #0]
 800d44c:	4770      	bx	lr
 800d44e:	bf00      	nop
 800d450:	20010b74 	.word	0x20010b74

0800d454 <recv_custom_msg>:
 800d454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d458:	4693      	mov	fp, r2
 800d45a:	b089      	sub	sp, #36	; 0x24
 800d45c:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 800d460:	9305      	str	r3, [sp, #20]
 800d462:	468a      	mov	sl, r1
 800d464:	2100      	movs	r1, #0
 800d466:	4604      	mov	r4, r0
 800d468:	f88d 101e 	strb.w	r1, [sp, #30]
 800d46c:	b322      	cbz	r2, 800d4b8 <recv_custom_msg+0x64>
 800d46e:	f200 2902 	addw	r9, r0, #514	; 0x202
 800d472:	f10d 081f 	add.w	r8, sp, #31
 800d476:	af05      	add	r7, sp, #20
 800d478:	f10d 061e 	add.w	r6, sp, #30
 800d47c:	f44f 7500 	mov.w	r5, #512	; 0x200
 800d480:	e002      	b.n	800d488 <recv_custom_msg+0x34>
 800d482:	9b05      	ldr	r3, [sp, #20]
 800d484:	2b00      	cmp	r3, #0
 800d486:	dd0f      	ble.n	800d4a8 <recv_custom_msg+0x54>
 800d488:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 800d48c:	4623      	mov	r3, r4
 800d48e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d492:	e9cd 5600 	strd	r5, r6, [sp]
 800d496:	4622      	mov	r2, r4
 800d498:	4648      	mov	r0, r9
 800d49a:	f001 fc85 	bl	800eda8 <uxr_read_framed_msg>
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d0ef      	beq.n	800d482 <recv_custom_msg+0x2e>
 800d4a2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d4a6:	b1b3      	cbz	r3, 800d4d6 <recv_custom_msg+0x82>
 800d4a8:	4b0f      	ldr	r3, [pc, #60]	; (800d4e8 <recv_custom_msg+0x94>)
 800d4aa:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800d4ae:	701a      	strb	r2, [r3, #0]
 800d4b0:	2000      	movs	r0, #0
 800d4b2:	b009      	add	sp, #36	; 0x24
 800d4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4b8:	f10d 021f 	add.w	r2, sp, #31
 800d4bc:	9200      	str	r2, [sp, #0]
 800d4be:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 800d4c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4c6:	4601      	mov	r1, r0
 800d4c8:	47a8      	blx	r5
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	d0ec      	beq.n	800d4a8 <recv_custom_msg+0x54>
 800d4ce:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1e8      	bne.n	800d4a8 <recv_custom_msg+0x54>
 800d4d6:	f8cb 0000 	str.w	r0, [fp]
 800d4da:	2001      	movs	r0, #1
 800d4dc:	f8ca 4000 	str.w	r4, [sl]
 800d4e0:	b009      	add	sp, #36	; 0x24
 800d4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4e6:	bf00      	nop
 800d4e8:	20010b74 	.word	0x20010b74

0800d4ec <send_custom_msg>:
 800d4ec:	b530      	push	{r4, r5, lr}
 800d4ee:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 800d4f2:	b087      	sub	sp, #28
 800d4f4:	4615      	mov	r5, r2
 800d4f6:	b974      	cbnz	r4, 800d516 <send_custom_msg+0x2a>
 800d4f8:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 800d4fc:	f10d 0317 	add.w	r3, sp, #23
 800d500:	47a0      	blx	r4
 800d502:	b108      	cbz	r0, 800d508 <send_custom_msg+0x1c>
 800d504:	42a8      	cmp	r0, r5
 800d506:	d015      	beq.n	800d534 <send_custom_msg+0x48>
 800d508:	4b0c      	ldr	r3, [pc, #48]	; (800d53c <send_custom_msg+0x50>)
 800d50a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800d50e:	701a      	strb	r2, [r3, #0]
 800d510:	2000      	movs	r0, #0
 800d512:	b007      	add	sp, #28
 800d514:	bd30      	pop	{r4, r5, pc}
 800d516:	460b      	mov	r3, r1
 800d518:	2200      	movs	r2, #0
 800d51a:	f10d 0117 	add.w	r1, sp, #23
 800d51e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d522:	4602      	mov	r2, r0
 800d524:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 800d528:	9500      	str	r5, [sp, #0]
 800d52a:	f200 2002 	addw	r0, r0, #514	; 0x202
 800d52e:	f001 fa43 	bl	800e9b8 <uxr_write_framed_msg>
 800d532:	e7e6      	b.n	800d502 <send_custom_msg+0x16>
 800d534:	2001      	movs	r0, #1
 800d536:	b007      	add	sp, #28
 800d538:	bd30      	pop	{r4, r5, pc}
 800d53a:	bf00      	nop
 800d53c:	20010b74 	.word	0x20010b74

0800d540 <uxr_set_custom_transport_callbacks>:
 800d540:	b410      	push	{r4}
 800d542:	9c01      	ldr	r4, [sp, #4]
 800d544:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 800d548:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 800d54c:	9b02      	ldr	r3, [sp, #8]
 800d54e:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 800d552:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d556:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 800d55a:	4770      	bx	lr

0800d55c <uxr_init_custom_transport>:
 800d55c:	b538      	push	{r3, r4, r5, lr}
 800d55e:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 800d562:	b303      	cbz	r3, 800d5a6 <uxr_init_custom_transport+0x4a>
 800d564:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800d568:	4604      	mov	r4, r0
 800d56a:	b1e2      	cbz	r2, 800d5a6 <uxr_init_custom_transport+0x4a>
 800d56c:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800d570:	b1ca      	cbz	r2, 800d5a6 <uxr_init_custom_transport+0x4a>
 800d572:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 800d576:	b1b2      	cbz	r2, 800d5a6 <uxr_init_custom_transport+0x4a>
 800d578:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 800d57c:	4798      	blx	r3
 800d57e:	4605      	mov	r5, r0
 800d580:	b188      	cbz	r0, 800d5a6 <uxr_init_custom_transport+0x4a>
 800d582:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800d586:	b98b      	cbnz	r3, 800d5ac <uxr_init_custom_transport+0x50>
 800d588:	490b      	ldr	r1, [pc, #44]	; (800d5b8 <uxr_init_custom_transport+0x5c>)
 800d58a:	4b0c      	ldr	r3, [pc, #48]	; (800d5bc <uxr_init_custom_transport+0x60>)
 800d58c:	4a0c      	ldr	r2, [pc, #48]	; (800d5c0 <uxr_init_custom_transport+0x64>)
 800d58e:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 800d592:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d596:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 800d59a:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 800d59e:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 800d5a2:	4628      	mov	r0, r5
 800d5a4:	bd38      	pop	{r3, r4, r5, pc}
 800d5a6:	2500      	movs	r5, #0
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	bd38      	pop	{r3, r4, r5, pc}
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	f204 2002 	addw	r0, r4, #514	; 0x202
 800d5b2:	f001 f9fb 	bl	800e9ac <uxr_init_framing_io>
 800d5b6:	e7e7      	b.n	800d588 <uxr_init_custom_transport+0x2c>
 800d5b8:	0800d4ed 	.word	0x0800d4ed
 800d5bc:	0800d455 	.word	0x0800d455
 800d5c0:	0800d449 	.word	0x0800d449

0800d5c4 <uxr_close_custom_transport>:
 800d5c4:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800d5c8:	4718      	bx	r3
 800d5ca:	bf00      	nop

0800d5cc <uxr_object_id>:
 800d5cc:	b082      	sub	sp, #8
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	f88d 1006 	strb.w	r1, [sp, #6]
 800d5d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d5d8:	f360 030f 	bfi	r3, r0, #0, #16
 800d5dc:	f362 431f 	bfi	r3, r2, #16, #16
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	b002      	add	sp, #8
 800d5e4:	4770      	bx	lr
 800d5e6:	bf00      	nop

0800d5e8 <uxr_object_id_from_raw>:
 800d5e8:	7843      	ldrb	r3, [r0, #1]
 800d5ea:	7801      	ldrb	r1, [r0, #0]
 800d5ec:	b082      	sub	sp, #8
 800d5ee:	f003 020f 	and.w	r2, r3, #15
 800d5f2:	f88d 2006 	strb.w	r2, [sp, #6]
 800d5f6:	091b      	lsrs	r3, r3, #4
 800d5f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d5fc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d600:	2000      	movs	r0, #0
 800d602:	f363 000f 	bfi	r0, r3, #0, #16
 800d606:	f362 401f 	bfi	r0, r2, #16, #16
 800d60a:	b002      	add	sp, #8
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop

0800d610 <uxr_object_id_to_raw>:
 800d610:	4602      	mov	r2, r0
 800d612:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800d616:	b082      	sub	sp, #8
 800d618:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800d61c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800d620:	f881 c000 	strb.w	ip, [r1]
 800d624:	7048      	strb	r0, [r1, #1]
 800d626:	b002      	add	sp, #8
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop

0800d62c <uxr_ping_agent_session>:
 800d62c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d630:	4617      	mov	r7, r2
 800d632:	b091      	sub	sp, #68	; 0x44
 800d634:	2210      	movs	r2, #16
 800d636:	4606      	mov	r6, r0
 800d638:	4688      	mov	r8, r1
 800d63a:	a808      	add	r0, sp, #32
 800d63c:	eb0d 0102 	add.w	r1, sp, r2
 800d640:	f7ff fc90 	bl	800cf64 <ucdr_init_buffer>
 800d644:	4b1e      	ldr	r3, [pc, #120]	; (800d6c0 <uxr_ping_agent_session+0x94>)
 800d646:	2500      	movs	r5, #0
 800d648:	881b      	ldrh	r3, [r3, #0]
 800d64a:	f8ad 300a 	strh.w	r3, [sp, #10]
 800d64e:	9500      	str	r5, [sp, #0]
 800d650:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800d654:	2402      	movs	r4, #2
 800d656:	7831      	ldrb	r1, [r6, #0]
 800d658:	f8ad 3008 	strh.w	r3, [sp, #8]
 800d65c:	462a      	mov	r2, r5
 800d65e:	a808      	add	r0, sp, #32
 800d660:	462b      	mov	r3, r5
 800d662:	9403      	str	r4, [sp, #12]
 800d664:	f002 f966 	bl	800f934 <uxr_serialize_message_header>
 800d668:	4621      	mov	r1, r4
 800d66a:	462b      	mov	r3, r5
 800d66c:	2208      	movs	r2, #8
 800d66e:	a808      	add	r0, sp, #32
 800d670:	f001 ff66 	bl	800f540 <uxr_buffer_submessage_header>
 800d674:	a902      	add	r1, sp, #8
 800d676:	4604      	mov	r4, r0
 800d678:	a808      	add	r0, sp, #32
 800d67a:	f003 f83b 	bl	80106f4 <uxr_serialize_GET_INFO_Payload>
 800d67e:	b104      	cbz	r4, 800d682 <uxr_ping_agent_session+0x56>
 800d680:	b918      	cbnz	r0, 800d68a <uxr_ping_agent_session+0x5e>
 800d682:	2000      	movs	r0, #0
 800d684:	b011      	add	sp, #68	; 0x44
 800d686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d68a:	a808      	add	r0, sp, #32
 800d68c:	f7ff fc96 	bl	800cfbc <ucdr_buffer_length>
 800d690:	4681      	mov	r9, r0
 800d692:	e00d      	b.n	800d6b0 <uxr_ping_agent_session+0x84>
 800d694:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d696:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d69a:	47a0      	blx	r4
 800d69c:	4641      	mov	r1, r8
 800d69e:	4604      	mov	r4, r0
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	f000 fe1d 	bl	800e2e0 <uxr_run_session_until_pong>
 800d6a6:	ea04 0c00 	and.w	ip, r4, r0
 800d6aa:	f01c 00ff 	ands.w	r0, ip, #255	; 0xff
 800d6ae:	d1e9      	bne.n	800d684 <uxr_ping_agent_session+0x58>
 800d6b0:	42af      	cmp	r7, r5
 800d6b2:	464a      	mov	r2, r9
 800d6b4:	a904      	add	r1, sp, #16
 800d6b6:	f105 0501 	add.w	r5, r5, #1
 800d6ba:	d1eb      	bne.n	800d694 <uxr_ping_agent_session+0x68>
 800d6bc:	e7e1      	b.n	800d682 <uxr_ping_agent_session+0x56>
 800d6be:	bf00      	nop
 800d6c0:	080184cc 	.word	0x080184cc

0800d6c4 <uxr_ping_agent_attempts>:
 800d6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c8:	ed2d 8b02 	vpush	{d8}
 800d6cc:	b0d1      	sub	sp, #324	; 0x144
 800d6ce:	4606      	mov	r6, r0
 800d6d0:	4688      	mov	r8, r1
 800d6d2:	a80e      	add	r0, sp, #56	; 0x38
 800d6d4:	a90a      	add	r1, sp, #40	; 0x28
 800d6d6:	4615      	mov	r5, r2
 800d6d8:	2210      	movs	r2, #16
 800d6da:	f7ff fc43 	bl	800cf64 <ucdr_init_buffer>
 800d6de:	4b54      	ldr	r3, [pc, #336]	; (800d830 <uxr_ping_agent_attempts+0x16c>)
 800d6e0:	881b      	ldrh	r3, [r3, #0]
 800d6e2:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	2402      	movs	r4, #2
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	9300      	str	r3, [sp, #0]
 800d6ee:	2180      	movs	r1, #128	; 0x80
 800d6f0:	a80e      	add	r0, sp, #56	; 0x38
 800d6f2:	f44f 6720 	mov.w	r7, #2560	; 0xa00
 800d6f6:	941f      	str	r4, [sp, #124]	; 0x7c
 800d6f8:	f8ad 7078 	strh.w	r7, [sp, #120]	; 0x78
 800d6fc:	f002 f91a 	bl	800f934 <uxr_serialize_message_header>
 800d700:	4621      	mov	r1, r4
 800d702:	2300      	movs	r3, #0
 800d704:	2208      	movs	r2, #8
 800d706:	a80e      	add	r0, sp, #56	; 0x38
 800d708:	f001 ff1a 	bl	800f540 <uxr_buffer_submessage_header>
 800d70c:	a91e      	add	r1, sp, #120	; 0x78
 800d70e:	4604      	mov	r4, r0
 800d710:	a80e      	add	r0, sp, #56	; 0x38
 800d712:	f002 ffef 	bl	80106f4 <uxr_serialize_GET_INFO_Payload>
 800d716:	b104      	cbz	r4, 800d71a <uxr_ping_agent_attempts+0x56>
 800d718:	b938      	cbnz	r0, 800d72a <uxr_ping_agent_attempts+0x66>
 800d71a:	f04f 0b00 	mov.w	fp, #0
 800d71e:	4658      	mov	r0, fp
 800d720:	b051      	add	sp, #324	; 0x144
 800d722:	ecbd 8b02 	vpop	{d8}
 800d726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d72a:	a80e      	add	r0, sp, #56	; 0x38
 800d72c:	f7ff fc46 	bl	800cfbc <ucdr_buffer_length>
 800d730:	1c6b      	adds	r3, r5, #1
 800d732:	ee08 0a10 	vmov	s16, r0
 800d736:	9303      	str	r3, [sp, #12]
 800d738:	f04f 0901 	mov.w	r9, #1
 800d73c:	9b03      	ldr	r3, [sp, #12]
 800d73e:	454b      	cmp	r3, r9
 800d740:	d0eb      	beq.n	800d71a <uxr_ping_agent_attempts+0x56>
 800d742:	e9d6 0300 	ldrd	r0, r3, [r6]
 800d746:	ee18 2a10 	vmov	r2, s16
 800d74a:	a90a      	add	r1, sp, #40	; 0x28
 800d74c:	4798      	blx	r3
 800d74e:	f001 ff3d 	bl	800f5cc <uxr_millis>
 800d752:	4645      	mov	r5, r8
 800d754:	4604      	mov	r4, r0
 800d756:	f04f 0a00 	mov.w	sl, #0
 800d75a:	68b7      	ldr	r7, [r6, #8]
 800d75c:	6830      	ldr	r0, [r6, #0]
 800d75e:	f8cd a018 	str.w	sl, [sp, #24]
 800d762:	4643      	mov	r3, r8
 800d764:	aa07      	add	r2, sp, #28
 800d766:	a906      	add	r1, sp, #24
 800d768:	47b8      	blx	r7
 800d76a:	4607      	mov	r7, r0
 800d76c:	b958      	cbnz	r0, 800d786 <uxr_ping_agent_attempts+0xc2>
 800d76e:	f001 ff2d 	bl	800f5cc <uxr_millis>
 800d772:	1b00      	subs	r0, r0, r4
 800d774:	1a2d      	subs	r5, r5, r0
 800d776:	f001 ff29 	bl	800f5cc <uxr_millis>
 800d77a:	2d00      	cmp	r5, #0
 800d77c:	4604      	mov	r4, r0
 800d77e:	dcec      	bgt.n	800d75a <uxr_ping_agent_attempts+0x96>
 800d780:	f109 0901 	add.w	r9, r9, #1
 800d784:	e7da      	b.n	800d73c <uxr_ping_agent_attempts+0x78>
 800d786:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800d78a:	a816      	add	r0, sp, #88	; 0x58
 800d78c:	f7ff fbea 	bl	800cf64 <ucdr_init_buffer>
 800d790:	ab05      	add	r3, sp, #20
 800d792:	f10d 0211 	add.w	r2, sp, #17
 800d796:	a916      	add	r1, sp, #88	; 0x58
 800d798:	a808      	add	r0, sp, #32
 800d79a:	e9cd aa08 	strd	sl, sl, [sp, #32]
 800d79e:	f001 f88b 	bl	800e8b8 <uxr_read_session_header>
 800d7a2:	22c8      	movs	r2, #200	; 0xc8
 800d7a4:	2100      	movs	r1, #0
 800d7a6:	a81e      	add	r0, sp, #120	; 0x78
 800d7a8:	f009 fe2e 	bl	8017408 <memset>
 800d7ac:	a816      	add	r0, sp, #88	; 0x58
 800d7ae:	f7ff fc09 	bl	800cfc4 <ucdr_buffer_remaining>
 800d7b2:	2804      	cmp	r0, #4
 800d7b4:	d814      	bhi.n	800d7e0 <uxr_ping_agent_attempts+0x11c>
 800d7b6:	f89d b12d 	ldrb.w	fp, [sp, #301]	; 0x12d
 800d7ba:	f001 ff07 	bl	800f5cc <uxr_millis>
 800d7be:	1b00      	subs	r0, r0, r4
 800d7c0:	1a2d      	subs	r5, r5, r0
 800d7c2:	f001 ff03 	bl	800f5cc <uxr_millis>
 800d7c6:	2d00      	cmp	r5, #0
 800d7c8:	4604      	mov	r4, r0
 800d7ca:	dd2a      	ble.n	800d822 <uxr_ping_agent_attempts+0x15e>
 800d7cc:	f1bb 0f00 	cmp.w	fp, #0
 800d7d0:	d0c3      	beq.n	800d75a <uxr_ping_agent_attempts+0x96>
 800d7d2:	46bb      	mov	fp, r7
 800d7d4:	4658      	mov	r0, fp
 800d7d6:	b051      	add	sp, #324	; 0x144
 800d7d8:	ecbd 8b02 	vpop	{d8}
 800d7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e0:	f10d 0316 	add.w	r3, sp, #22
 800d7e4:	f10d 0213 	add.w	r2, sp, #19
 800d7e8:	f10d 0112 	add.w	r1, sp, #18
 800d7ec:	a816      	add	r0, sp, #88	; 0x58
 800d7ee:	f88d a012 	strb.w	sl, [sp, #18]
 800d7f2:	f8ad a016 	strh.w	sl, [sp, #22]
 800d7f6:	f88d a013 	strb.w	sl, [sp, #19]
 800d7fa:	f002 f8ed 	bl	800f9d8 <uxr_deserialize_submessage_header>
 800d7fe:	a816      	add	r0, sp, #88	; 0x58
 800d800:	f7ff fbe0 	bl	800cfc4 <ucdr_buffer_remaining>
 800d804:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800d808:	4298      	cmp	r0, r3
 800d80a:	d3d4      	bcc.n	800d7b6 <uxr_ping_agent_attempts+0xf2>
 800d80c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800d810:	2b06      	cmp	r3, #6
 800d812:	d1d0      	bne.n	800d7b6 <uxr_ping_agent_attempts+0xf2>
 800d814:	a916      	add	r1, sp, #88	; 0x58
 800d816:	a81e      	add	r0, sp, #120	; 0x78
 800d818:	f88d a12d 	strb.w	sl, [sp, #301]	; 0x12d
 800d81c:	f000 f99e 	bl	800db5c <read_submessage_info>
 800d820:	e7c9      	b.n	800d7b6 <uxr_ping_agent_attempts+0xf2>
 800d822:	f1bb 0f00 	cmp.w	fp, #0
 800d826:	d1d4      	bne.n	800d7d2 <uxr_ping_agent_attempts+0x10e>
 800d828:	f109 0901 	add.w	r9, r9, #1
 800d82c:	e786      	b.n	800d73c <uxr_ping_agent_attempts+0x78>
 800d82e:	bf00      	nop
 800d830:	080184cc 	.word	0x080184cc

0800d834 <on_get_fragmentation_info>:
 800d834:	b500      	push	{lr}
 800d836:	b08b      	sub	sp, #44	; 0x2c
 800d838:	4601      	mov	r1, r0
 800d83a:	2204      	movs	r2, #4
 800d83c:	a802      	add	r0, sp, #8
 800d83e:	f7ff fb91 	bl	800cf64 <ucdr_init_buffer>
 800d842:	f10d 0305 	add.w	r3, sp, #5
 800d846:	f10d 0206 	add.w	r2, sp, #6
 800d84a:	a901      	add	r1, sp, #4
 800d84c:	a802      	add	r0, sp, #8
 800d84e:	f001 fe91 	bl	800f574 <uxr_read_submessage_header>
 800d852:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d856:	2b0d      	cmp	r3, #13
 800d858:	d003      	beq.n	800d862 <on_get_fragmentation_info+0x2e>
 800d85a:	2000      	movs	r0, #0
 800d85c:	b00b      	add	sp, #44	; 0x2c
 800d85e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d862:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d866:	f013 0f02 	tst.w	r3, #2
 800d86a:	bf14      	ite	ne
 800d86c:	2002      	movne	r0, #2
 800d86e:	2001      	moveq	r0, #1
 800d870:	b00b      	add	sp, #44	; 0x2c
 800d872:	f85d fb04 	ldr.w	pc, [sp], #4
 800d876:	bf00      	nop

0800d878 <read_submessage_get_info>:
 800d878:	b570      	push	{r4, r5, r6, lr}
 800d87a:	2500      	movs	r5, #0
 800d87c:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800d880:	4604      	mov	r4, r0
 800d882:	f44f 7224 	mov.w	r2, #656	; 0x290
 800d886:	460e      	mov	r6, r1
 800d888:	a810      	add	r0, sp, #64	; 0x40
 800d88a:	4629      	mov	r1, r5
 800d88c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800d890:	f009 fdba 	bl	8017408 <memset>
 800d894:	a903      	add	r1, sp, #12
 800d896:	4630      	mov	r0, r6
 800d898:	f002 ff40 	bl	801071c <uxr_deserialize_GET_INFO_Payload>
 800d89c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d8a0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f001 f849 	bl	800e93c <uxr_session_header_offset>
 800d8aa:	462b      	mov	r3, r5
 800d8ac:	9000      	str	r0, [sp, #0]
 800d8ae:	220c      	movs	r2, #12
 800d8b0:	a905      	add	r1, sp, #20
 800d8b2:	a808      	add	r0, sp, #32
 800d8b4:	f7ff fb44 	bl	800cf40 <ucdr_init_buffer_origin_offset>
 800d8b8:	a910      	add	r1, sp, #64	; 0x40
 800d8ba:	a808      	add	r0, sp, #32
 800d8bc:	f002 ffa0 	bl	8010800 <uxr_serialize_INFO_Payload>
 800d8c0:	9b08      	ldr	r3, [sp, #32]
 800d8c2:	462a      	mov	r2, r5
 800d8c4:	4629      	mov	r1, r5
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	f000 ffe2 	bl	800e890 <uxr_stamp_session_header>
 800d8cc:	a808      	add	r0, sp, #32
 800d8ce:	f7ff fb75 	bl	800cfbc <ucdr_buffer_length>
 800d8d2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	a905      	add	r1, sp, #20
 800d8d8:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d8dc:	47a0      	blx	r4
 800d8de:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800d8e2:	bd70      	pop	{r4, r5, r6, pc}

0800d8e4 <write_submessage_acknack.isra.0>:
 800d8e4:	b570      	push	{r4, r5, r6, lr}
 800d8e6:	b092      	sub	sp, #72	; 0x48
 800d8e8:	4605      	mov	r5, r0
 800d8ea:	460e      	mov	r6, r1
 800d8ec:	4614      	mov	r4, r2
 800d8ee:	f001 f825 	bl	800e93c <uxr_session_header_offset>
 800d8f2:	a905      	add	r1, sp, #20
 800d8f4:	9000      	str	r0, [sp, #0]
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	a80a      	add	r0, sp, #40	; 0x28
 800d8fa:	2211      	movs	r2, #17
 800d8fc:	f7ff fb20 	bl	800cf40 <ucdr_init_buffer_origin_offset>
 800d900:	2218      	movs	r2, #24
 800d902:	fb02 5404 	mla	r4, r2, r4, r5
 800d906:	2300      	movs	r3, #0
 800d908:	2205      	movs	r2, #5
 800d90a:	3450      	adds	r4, #80	; 0x50
 800d90c:	210a      	movs	r1, #10
 800d90e:	a80a      	add	r0, sp, #40	; 0x28
 800d910:	f001 fe16 	bl	800f540 <uxr_buffer_submessage_header>
 800d914:	a903      	add	r1, sp, #12
 800d916:	4620      	mov	r0, r4
 800d918:	f008 f83c 	bl	8015994 <uxr_compute_acknack>
 800d91c:	ba40      	rev16	r0, r0
 800d91e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800d922:	a903      	add	r1, sp, #12
 800d924:	a80a      	add	r0, sp, #40	; 0x28
 800d926:	f88d 6010 	strb.w	r6, [sp, #16]
 800d92a:	f002 ffd9 	bl	80108e0 <uxr_serialize_ACKNACK_Payload>
 800d92e:	2200      	movs	r2, #0
 800d930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d932:	4611      	mov	r1, r2
 800d934:	4628      	mov	r0, r5
 800d936:	f000 ffab 	bl	800e890 <uxr_stamp_session_header>
 800d93a:	a80a      	add	r0, sp, #40	; 0x28
 800d93c:	f7ff fb3e 	bl	800cfbc <ucdr_buffer_length>
 800d940:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d942:	4602      	mov	r2, r0
 800d944:	a905      	add	r1, sp, #20
 800d946:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d94a:	47a0      	blx	r4
 800d94c:	b012      	add	sp, #72	; 0x48
 800d94e:	bd70      	pop	{r4, r5, r6, pc}

0800d950 <uxr_init_session>:
 800d950:	b510      	push	{r4, lr}
 800d952:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800d988 <uxr_init_session+0x38>
 800d956:	2300      	movs	r3, #0
 800d958:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800d95c:	4604      	mov	r4, r0
 800d95e:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800d962:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800d966:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800d96a:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800d96e:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800d972:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800d976:	2181      	movs	r1, #129	; 0x81
 800d978:	f000 fef6 	bl	800e768 <uxr_init_session_info>
 800d97c:	f104 0008 	add.w	r0, r4, #8
 800d980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d984:	f001 bcf8 	b.w	800f378 <uxr_init_stream_storage>
	...

0800d990 <uxr_set_status_callback>:
 800d990:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800d994:	4770      	bx	lr
 800d996:	bf00      	nop

0800d998 <uxr_set_topic_callback>:
 800d998:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800d99c:	4770      	bx	lr
 800d99e:	bf00      	nop

0800d9a0 <uxr_set_request_callback>:
 800d9a0:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop

0800d9a8 <uxr_set_reply_callback>:
 800d9a8:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop

0800d9b0 <uxr_create_output_best_effort_stream>:
 800d9b0:	b510      	push	{r4, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	e9cd 2100 	strd	r2, r1, [sp]
 800d9b8:	4604      	mov	r4, r0
 800d9ba:	f000 ffbf 	bl	800e93c <uxr_session_header_offset>
 800d9be:	e9dd 2100 	ldrd	r2, r1, [sp]
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	f104 0008 	add.w	r0, r4, #8
 800d9c8:	b004      	add	sp, #16
 800d9ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9ce:	f001 bd1d 	b.w	800f40c <uxr_add_output_best_effort_buffer>
 800d9d2:	bf00      	nop

0800d9d4 <uxr_create_output_reliable_stream>:
 800d9d4:	b510      	push	{r4, lr}
 800d9d6:	b088      	sub	sp, #32
 800d9d8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800d9dc:	4604      	mov	r4, r0
 800d9de:	9303      	str	r3, [sp, #12]
 800d9e0:	f000 ffac 	bl	800e93c <uxr_session_header_offset>
 800d9e4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d9e8:	9000      	str	r0, [sp, #0]
 800d9ea:	9905      	ldr	r1, [sp, #20]
 800d9ec:	f104 0008 	add.w	r0, r4, #8
 800d9f0:	f001 fd20 	bl	800f434 <uxr_add_output_reliable_buffer>
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	b2c3      	uxtb	r3, r0
 800d9f8:	f363 0207 	bfi	r2, r3, #0, #8
 800d9fc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800da00:	f363 220f 	bfi	r2, r3, #8, #8
 800da04:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800da08:	f363 4217 	bfi	r2, r3, #16, #8
 800da0c:	0e03      	lsrs	r3, r0, #24
 800da0e:	f363 621f 	bfi	r2, r3, #24, #8
 800da12:	4610      	mov	r0, r2
 800da14:	b008      	add	sp, #32
 800da16:	bd10      	pop	{r4, pc}

0800da18 <uxr_create_input_best_effort_stream>:
 800da18:	b082      	sub	sp, #8
 800da1a:	3008      	adds	r0, #8
 800da1c:	b002      	add	sp, #8
 800da1e:	f001 bd23 	b.w	800f468 <uxr_add_input_best_effort_buffer>
 800da22:	bf00      	nop

0800da24 <uxr_create_input_reliable_stream>:
 800da24:	b510      	push	{r4, lr}
 800da26:	b084      	sub	sp, #16
 800da28:	4c0b      	ldr	r4, [pc, #44]	; (800da58 <uxr_create_input_reliable_stream+0x34>)
 800da2a:	9400      	str	r4, [sp, #0]
 800da2c:	3008      	adds	r0, #8
 800da2e:	f001 fd31 	bl	800f494 <uxr_add_input_reliable_buffer>
 800da32:	2200      	movs	r2, #0
 800da34:	b2c3      	uxtb	r3, r0
 800da36:	f363 0207 	bfi	r2, r3, #0, #8
 800da3a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800da3e:	f363 220f 	bfi	r2, r3, #8, #8
 800da42:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800da46:	f363 4217 	bfi	r2, r3, #16, #8
 800da4a:	0e03      	lsrs	r3, r0, #24
 800da4c:	f363 621f 	bfi	r2, r3, #24, #8
 800da50:	4610      	mov	r0, r2
 800da52:	b004      	add	sp, #16
 800da54:	bd10      	pop	{r4, pc}
 800da56:	bf00      	nop
 800da58:	0800d835 	.word	0x0800d835

0800da5c <uxr_epoch_nanos>:
 800da5c:	b510      	push	{r4, lr}
 800da5e:	4604      	mov	r4, r0
 800da60:	f001 fdce 	bl	800f600 <uxr_nanos>
 800da64:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800da68:	1ac0      	subs	r0, r0, r3
 800da6a:	eb61 0102 	sbc.w	r1, r1, r2
 800da6e:	bd10      	pop	{r4, pc}

0800da70 <uxr_flash_output_streams>:
 800da70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da74:	7e03      	ldrb	r3, [r0, #24]
 800da76:	b084      	sub	sp, #16
 800da78:	4604      	mov	r4, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d035      	beq.n	800daea <uxr_flash_output_streams+0x7a>
 800da7e:	f04f 0900 	mov.w	r9, #0
 800da82:	4648      	mov	r0, r9
 800da84:	f10d 0802 	add.w	r8, sp, #2
 800da88:	af03      	add	r7, sp, #12
 800da8a:	ae02      	add	r6, sp, #8
 800da8c:	e006      	b.n	800da9c <uxr_flash_output_streams+0x2c>
 800da8e:	7e23      	ldrb	r3, [r4, #24]
 800da90:	f109 0901 	add.w	r9, r9, #1
 800da94:	fa5f f089 	uxtb.w	r0, r9
 800da98:	4283      	cmp	r3, r0
 800da9a:	d926      	bls.n	800daea <uxr_flash_output_streams+0x7a>
 800da9c:	2201      	movs	r2, #1
 800da9e:	4611      	mov	r1, r2
 800daa0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800daa4:	f001 fc14 	bl	800f2d0 <uxr_stream_id>
 800daa8:	3508      	adds	r5, #8
 800daaa:	4684      	mov	ip, r0
 800daac:	4643      	mov	r3, r8
 800daae:	463a      	mov	r2, r7
 800dab0:	4631      	mov	r1, r6
 800dab2:	4628      	mov	r0, r5
 800dab4:	f8cd c004 	str.w	ip, [sp, #4]
 800dab8:	f007 fff2 	bl	8015aa0 <uxr_prepare_best_effort_buffer_to_send>
 800dabc:	2800      	cmp	r0, #0
 800dabe:	d0e6      	beq.n	800da8e <uxr_flash_output_streams+0x1e>
 800dac0:	9b02      	ldr	r3, [sp, #8]
 800dac2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dac6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800daca:	4620      	mov	r0, r4
 800dacc:	f000 fee0 	bl	800e890 <uxr_stamp_session_header>
 800dad0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dad2:	9a03      	ldr	r2, [sp, #12]
 800dad4:	685d      	ldr	r5, [r3, #4]
 800dad6:	6818      	ldr	r0, [r3, #0]
 800dad8:	9902      	ldr	r1, [sp, #8]
 800dada:	47a8      	blx	r5
 800dadc:	f109 0901 	add.w	r9, r9, #1
 800dae0:	7e23      	ldrb	r3, [r4, #24]
 800dae2:	fa5f f089 	uxtb.w	r0, r9
 800dae6:	4283      	cmp	r3, r0
 800dae8:	d8d8      	bhi.n	800da9c <uxr_flash_output_streams+0x2c>
 800daea:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800daee:	b38b      	cbz	r3, 800db54 <uxr_flash_output_streams+0xe4>
 800daf0:	f04f 0900 	mov.w	r9, #0
 800daf4:	f10d 0802 	add.w	r8, sp, #2
 800daf8:	af03      	add	r7, sp, #12
 800dafa:	ae02      	add	r6, sp, #8
 800dafc:	4648      	mov	r0, r9
 800dafe:	2201      	movs	r2, #1
 800db00:	2102      	movs	r1, #2
 800db02:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800db06:	f001 fbe3 	bl	800f2d0 <uxr_stream_id>
 800db0a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800db0e:	3520      	adds	r5, #32
 800db10:	9001      	str	r0, [sp, #4]
 800db12:	e00d      	b.n	800db30 <uxr_flash_output_streams+0xc0>
 800db14:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800db18:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800db1c:	9b02      	ldr	r3, [sp, #8]
 800db1e:	f000 feb7 	bl	800e890 <uxr_stamp_session_header>
 800db22:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800db24:	9a03      	ldr	r2, [sp, #12]
 800db26:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800db2a:	9902      	ldr	r1, [sp, #8]
 800db2c:	6818      	ldr	r0, [r3, #0]
 800db2e:	47d0      	blx	sl
 800db30:	4643      	mov	r3, r8
 800db32:	463a      	mov	r2, r7
 800db34:	4631      	mov	r1, r6
 800db36:	4628      	mov	r0, r5
 800db38:	f008 f9d0 	bl	8015edc <uxr_prepare_next_reliable_buffer_to_send>
 800db3c:	4603      	mov	r3, r0
 800db3e:	4620      	mov	r0, r4
 800db40:	2b00      	cmp	r3, #0
 800db42:	d1e7      	bne.n	800db14 <uxr_flash_output_streams+0xa4>
 800db44:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800db48:	f109 0901 	add.w	r9, r9, #1
 800db4c:	fa5f f089 	uxtb.w	r0, r9
 800db50:	4283      	cmp	r3, r0
 800db52:	d8d4      	bhi.n	800dafe <uxr_flash_output_streams+0x8e>
 800db54:	b004      	add	sp, #16
 800db56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db5a:	bf00      	nop

0800db5c <read_submessage_info>:
 800db5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db60:	460d      	mov	r5, r1
 800db62:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800db66:	4669      	mov	r1, sp
 800db68:	4607      	mov	r7, r0
 800db6a:	4628      	mov	r0, r5
 800db6c:	f002 fcd0 	bl	8010510 <uxr_deserialize_BaseObjectReply>
 800db70:	a902      	add	r1, sp, #8
 800db72:	4604      	mov	r4, r0
 800db74:	4628      	mov	r0, r5
 800db76:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800db7a:	f7fe fa2f 	bl	800bfdc <ucdr_deserialize_bool>
 800db7e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800db82:	4004      	ands	r4, r0
 800db84:	b2e4      	uxtb	r4, r4
 800db86:	b95b      	cbnz	r3, 800dba0 <read_submessage_info+0x44>
 800db88:	a987      	add	r1, sp, #540	; 0x21c
 800db8a:	4628      	mov	r0, r5
 800db8c:	f7fe fa26 	bl	800bfdc <ucdr_deserialize_bool>
 800db90:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800db94:	4606      	mov	r6, r0
 800db96:	b94b      	cbnz	r3, 800dbac <read_submessage_info+0x50>
 800db98:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800db9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dba0:	a903      	add	r1, sp, #12
 800dba2:	4628      	mov	r0, r5
 800dba4:	f002 fb5c 	bl	8010260 <uxr_deserialize_ObjectVariant>
 800dba8:	4004      	ands	r4, r0
 800dbaa:	e7ed      	b.n	800db88 <read_submessage_info+0x2c>
 800dbac:	a988      	add	r1, sp, #544	; 0x220
 800dbae:	4628      	mov	r0, r5
 800dbb0:	f7fe fa42 	bl	800c038 <ucdr_deserialize_uint8_t>
 800dbb4:	4234      	tst	r4, r6
 800dbb6:	d0ef      	beq.n	800db98 <read_submessage_info+0x3c>
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	d0ed      	beq.n	800db98 <read_submessage_info+0x3c>
 800dbbc:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800dbc0:	2b0d      	cmp	r3, #13
 800dbc2:	d1e9      	bne.n	800db98 <read_submessage_info+0x3c>
 800dbc4:	a98a      	add	r1, sp, #552	; 0x228
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	f7fe ffdc 	bl	800cb84 <ucdr_deserialize_int16_t>
 800dbcc:	b140      	cbz	r0, 800dbe0 <read_submessage_info+0x84>
 800dbce:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	dd07      	ble.n	800dbe6 <read_submessage_info+0x8a>
 800dbd6:	f1b8 0f00 	cmp.w	r8, #0
 800dbda:	bf14      	ite	ne
 800dbdc:	2001      	movne	r0, #1
 800dbde:	2002      	moveq	r0, #2
 800dbe0:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800dbe4:	e7d8      	b.n	800db98 <read_submessage_info+0x3c>
 800dbe6:	2000      	movs	r0, #0
 800dbe8:	e7fa      	b.n	800dbe0 <read_submessage_info+0x84>
 800dbea:	bf00      	nop

0800dbec <read_submessage_list>:
 800dbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf0:	b097      	sub	sp, #92	; 0x5c
 800dbf2:	4ec1      	ldr	r6, [pc, #772]	; (800def8 <read_submessage_list+0x30c>)
 800dbf4:	9209      	str	r2, [sp, #36]	; 0x24
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	460d      	mov	r5, r1
 800dbfa:	f04f 0801 	mov.w	r8, #1
 800dbfe:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800dc02:	aa0c      	add	r2, sp, #48	; 0x30
 800dc04:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800dc08:	4628      	mov	r0, r5
 800dc0a:	f001 fcb3 	bl	800f574 <uxr_read_submessage_header>
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	f000 813e 	beq.w	800de90 <read_submessage_list+0x2a4>
 800dc14:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800dc18:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800dc1c:	3b02      	subs	r3, #2
 800dc1e:	2b0d      	cmp	r3, #13
 800dc20:	d8ed      	bhi.n	800dbfe <read_submessage_list+0x12>
 800dc22:	a101      	add	r1, pc, #4	; (adr r1, 800dc28 <read_submessage_list+0x3c>)
 800dc24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc28:	0800de87 	.word	0x0800de87
 800dc2c:	0800dbff 	.word	0x0800dbff
 800dc30:	0800de77 	.word	0x0800de77
 800dc34:	0800de15 	.word	0x0800de15
 800dc38:	0800de0b 	.word	0x0800de0b
 800dc3c:	0800dbff 	.word	0x0800dbff
 800dc40:	0800dbff 	.word	0x0800dbff
 800dc44:	0800dd6b 	.word	0x0800dd6b
 800dc48:	0800dcfb 	.word	0x0800dcfb
 800dc4c:	0800dcbb 	.word	0x0800dcbb
 800dc50:	0800dbff 	.word	0x0800dbff
 800dc54:	0800dbff 	.word	0x0800dbff
 800dc58:	0800dbff 	.word	0x0800dbff
 800dc5c:	0800dc61 	.word	0x0800dc61
 800dc60:	a910      	add	r1, sp, #64	; 0x40
 800dc62:	4628      	mov	r0, r5
 800dc64:	f002 fe8c 	bl	8010980 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800dc68:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 800dc6c:	f1b9 0f00 	cmp.w	r9, #0
 800dc70:	f000 8116 	beq.w	800dea0 <read_submessage_list+0x2b4>
 800dc74:	f001 fcc4 	bl	800f600 <uxr_nanos>
 800dc78:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	460b      	mov	r3, r1
 800dc7e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800dc80:	2100      	movs	r1, #0
 800dc82:	468c      	mov	ip, r1
 800dc84:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800dc88:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800dc8c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800dc8e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800dc90:	468c      	mov	ip, r1
 800dc92:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800dc96:	46e2      	mov	sl, ip
 800dc98:	46bc      	mov	ip, r7
 800dc9a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 800dc9e:	fbc0 7106 	smlal	r7, r1, r0, r6
 800dca2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800dca6:	e9cd 7100 	strd	r7, r1, [sp]
 800dcaa:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800dcae:	9106      	str	r1, [sp, #24]
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	47c8      	blx	r9
 800dcb4:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 800dcb8:	e7a1      	b.n	800dbfe <read_submessage_list+0x12>
 800dcba:	a910      	add	r1, sp, #64	; 0x40
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	f002 fe4d 	bl	801095c <uxr_deserialize_HEARTBEAT_Payload>
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800dcc8:	f001 fb2c 	bl	800f324 <uxr_stream_id_from_raw>
 800dccc:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800dcd0:	900f      	str	r0, [sp, #60]	; 0x3c
 800dcd2:	4639      	mov	r1, r7
 800dcd4:	f104 0008 	add.w	r0, r4, #8
 800dcd8:	f001 fc12 	bl	800f500 <uxr_get_input_reliable_stream>
 800dcdc:	2800      	cmp	r0, #0
 800dcde:	d08e      	beq.n	800dbfe <read_submessage_list+0x12>
 800dce0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800dce4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800dce8:	f007 fe48 	bl	801597c <uxr_process_heartbeat>
 800dcec:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800dcf0:	463a      	mov	r2, r7
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f7ff fdf6 	bl	800d8e4 <write_submessage_acknack.isra.0>
 800dcf8:	e781      	b.n	800dbfe <read_submessage_list+0x12>
 800dcfa:	a910      	add	r1, sp, #64	; 0x40
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	f002 fe05 	bl	801090c <uxr_deserialize_ACKNACK_Payload>
 800dd02:	2100      	movs	r1, #0
 800dd04:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800dd08:	f001 fb0c 	bl	800f324 <uxr_stream_id_from_raw>
 800dd0c:	900d      	str	r0, [sp, #52]	; 0x34
 800dd0e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800dd12:	f104 0008 	add.w	r0, r4, #8
 800dd16:	f001 fbdf 	bl	800f4d8 <uxr_get_output_reliable_stream>
 800dd1a:	4607      	mov	r7, r0
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	f43f af6e 	beq.w	800dbfe <read_submessage_list+0x12>
 800dd22:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800dd26:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800dd2a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800dd2e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800dd32:	b289      	uxth	r1, r1
 800dd34:	f008 f97c 	bl	8016030 <uxr_process_acknack>
 800dd38:	4638      	mov	r0, r7
 800dd3a:	f008 f939 	bl	8015fb0 <uxr_begin_output_nack_buffer_it>
 800dd3e:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800dd42:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800dd46:	e006      	b.n	800dd56 <read_submessage_list+0x16a>
 800dd48:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dd4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dd4c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800dd50:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dd52:	6818      	ldr	r0, [r3, #0]
 800dd54:	47c8      	blx	r9
 800dd56:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800dd5a:	aa0f      	add	r2, sp, #60	; 0x3c
 800dd5c:	4651      	mov	r1, sl
 800dd5e:	4638      	mov	r0, r7
 800dd60:	f008 f928 	bl	8015fb4 <uxr_next_reliable_nack_buffer_to_send>
 800dd64:	2800      	cmp	r0, #0
 800dd66:	d1ef      	bne.n	800dd48 <read_submessage_list+0x15c>
 800dd68:	e749      	b.n	800dbfe <read_submessage_list+0x12>
 800dd6a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800dd6e:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800dd72:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800dd76:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800dd7a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800dd7e:	4651      	mov	r1, sl
 800dd80:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800dd84:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 800dd88:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800dd8c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800dd90:	4628      	mov	r0, r5
 800dd92:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800dd96:	f002 fb05 	bl	80103a4 <uxr_deserialize_BaseObjectRequest>
 800dd9a:	4650      	mov	r0, sl
 800dd9c:	a90f      	add	r1, sp, #60	; 0x3c
 800dd9e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800dda2:	f000 fdf1 	bl	800e988 <uxr_parse_base_object_request>
 800dda6:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800ddaa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ddac:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800ddb0:	9110      	str	r1, [sp, #64]	; 0x40
 800ddb2:	3f04      	subs	r7, #4
 800ddb4:	f009 090e 	and.w	r9, r9, #14
 800ddb8:	b2bf      	uxth	r7, r7
 800ddba:	f1bb 0f00 	cmp.w	fp, #0
 800ddbe:	d006      	beq.n	800ddce <read_submessage_list+0x1e2>
 800ddc0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ddc4:	9300      	str	r3, [sp, #0]
 800ddc6:	4652      	mov	r2, sl
 800ddc8:	2300      	movs	r3, #0
 800ddca:	4620      	mov	r0, r4
 800ddcc:	47d8      	blx	fp
 800ddce:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800ddd0:	b16a      	cbz	r2, 800ddee <read_submessage_list+0x202>
 800ddd2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ddd4:	2100      	movs	r1, #0
 800ddd6:	3802      	subs	r0, #2
 800ddd8:	e002      	b.n	800dde0 <read_submessage_list+0x1f4>
 800ddda:	3101      	adds	r1, #1
 800dddc:	4291      	cmp	r1, r2
 800ddde:	d006      	beq.n	800ddee <read_submessage_list+0x202>
 800dde0:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800dde4:	4553      	cmp	r3, sl
 800dde6:	d1f8      	bne.n	800ddda <read_submessage_list+0x1ee>
 800dde8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ddea:	2200      	movs	r2, #0
 800ddec:	545a      	strb	r2, [r3, r1]
 800ddee:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800ddf2:	9102      	str	r1, [sp, #8]
 800ddf4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ddf6:	9101      	str	r1, [sp, #4]
 800ddf8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ddfa:	9100      	str	r1, [sp, #0]
 800ddfc:	464b      	mov	r3, r9
 800ddfe:	463a      	mov	r2, r7
 800de00:	4629      	mov	r1, r5
 800de02:	4620      	mov	r0, r4
 800de04:	f008 f9d2 	bl	80161ac <read_submessage_format>
 800de08:	e6f9      	b.n	800dbfe <read_submessage_list+0x12>
 800de0a:	4629      	mov	r1, r5
 800de0c:	4620      	mov	r0, r4
 800de0e:	f7ff fea5 	bl	800db5c <read_submessage_info>
 800de12:	e6f4      	b.n	800dbfe <read_submessage_list+0x12>
 800de14:	2a00      	cmp	r2, #0
 800de16:	d03e      	beq.n	800de96 <read_submessage_list+0x2aa>
 800de18:	a910      	add	r1, sp, #64	; 0x40
 800de1a:	4628      	mov	r0, r5
 800de1c:	f002 fcd2 	bl	80107c4 <uxr_deserialize_STATUS_Payload>
 800de20:	a90e      	add	r1, sp, #56	; 0x38
 800de22:	aa0d      	add	r2, sp, #52	; 0x34
 800de24:	a810      	add	r0, sp, #64	; 0x40
 800de26:	f000 fdaf 	bl	800e988 <uxr_parse_base_object_request>
 800de2a:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800de2e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800de30:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800de34:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 800de38:	910f      	str	r1, [sp, #60]	; 0x3c
 800de3a:	f1ba 0f00 	cmp.w	sl, #0
 800de3e:	d006      	beq.n	800de4e <read_submessage_list+0x262>
 800de40:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800de44:	9300      	str	r3, [sp, #0]
 800de46:	463a      	mov	r2, r7
 800de48:	464b      	mov	r3, r9
 800de4a:	4620      	mov	r0, r4
 800de4c:	47d0      	blx	sl
 800de4e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800de50:	2a00      	cmp	r2, #0
 800de52:	f43f aed4 	beq.w	800dbfe <read_submessage_list+0x12>
 800de56:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800de58:	2100      	movs	r1, #0
 800de5a:	3802      	subs	r0, #2
 800de5c:	e003      	b.n	800de66 <read_submessage_list+0x27a>
 800de5e:	3101      	adds	r1, #1
 800de60:	4291      	cmp	r1, r2
 800de62:	f43f aecc 	beq.w	800dbfe <read_submessage_list+0x12>
 800de66:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800de6a:	42bb      	cmp	r3, r7
 800de6c:	d1f7      	bne.n	800de5e <read_submessage_list+0x272>
 800de6e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800de70:	f803 9001 	strb.w	r9, [r3, r1]
 800de74:	e6c3      	b.n	800dbfe <read_submessage_list+0x12>
 800de76:	2a00      	cmp	r2, #0
 800de78:	f47f aec1 	bne.w	800dbfe <read_submessage_list+0x12>
 800de7c:	4629      	mov	r1, r5
 800de7e:	4620      	mov	r0, r4
 800de80:	f000 fcc8 	bl	800e814 <uxr_read_create_session_status>
 800de84:	e6bb      	b.n	800dbfe <read_submessage_list+0x12>
 800de86:	4629      	mov	r1, r5
 800de88:	4620      	mov	r0, r4
 800de8a:	f7ff fcf5 	bl	800d878 <read_submessage_get_info>
 800de8e:	e6b6      	b.n	800dbfe <read_submessage_list+0x12>
 800de90:	b017      	add	sp, #92	; 0x5c
 800de92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de96:	4629      	mov	r1, r5
 800de98:	4620      	mov	r0, r4
 800de9a:	f000 fcc7 	bl	800e82c <uxr_read_delete_session_status>
 800de9e:	e6ae      	b.n	800dbfe <read_submessage_list+0x12>
 800dea0:	f001 fbae 	bl	800f600 <uxr_nanos>
 800dea4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dea6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dea8:	464f      	mov	r7, r9
 800deaa:	fbc3 2706 	smlal	r2, r7, r3, r6
 800deae:	1812      	adds	r2, r2, r0
 800deb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800deb2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800deb4:	eb47 0101 	adc.w	r1, r7, r1
 800deb8:	464f      	mov	r7, r9
 800deba:	fbc3 0706 	smlal	r0, r7, r3, r6
 800debe:	463b      	mov	r3, r7
 800dec0:	4684      	mov	ip, r0
 800dec2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 800dec6:	fbc7 0906 	smlal	r0, r9, r7, r6
 800deca:	eb1c 0c00 	adds.w	ip, ip, r0
 800dece:	464f      	mov	r7, r9
 800ded0:	eb43 0307 	adc.w	r3, r3, r7
 800ded4:	ebb2 0c0c 	subs.w	ip, r2, ip
 800ded8:	eb61 0303 	sbc.w	r3, r1, r3
 800dedc:	0fda      	lsrs	r2, r3, #31
 800dede:	eb12 020c 	adds.w	r2, r2, ip
 800dee2:	f143 0300 	adc.w	r3, r3, #0
 800dee6:	0852      	lsrs	r2, r2, #1
 800dee8:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800deec:	105b      	asrs	r3, r3, #1
 800deee:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 800def2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800def6:	e6dd      	b.n	800dcb4 <read_submessage_list+0xc8>
 800def8:	3b9aca00 	.word	0x3b9aca00

0800defc <listen_message_reliably>:
 800defc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df00:	1e0b      	subs	r3, r1, #0
 800df02:	b09d      	sub	sp, #116	; 0x74
 800df04:	bfb8      	it	lt
 800df06:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800df0a:	4680      	mov	r8, r0
 800df0c:	9305      	str	r3, [sp, #20]
 800df0e:	f001 fb5d 	bl	800f5cc <uxr_millis>
 800df12:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800df16:	4681      	mov	r9, r0
 800df18:	2a00      	cmp	r2, #0
 800df1a:	f000 80a1 	beq.w	800e060 <listen_message_reliably+0x164>
 800df1e:	2600      	movs	r6, #0
 800df20:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800df24:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800df28:	9303      	str	r3, [sp, #12]
 800df2a:	4630      	mov	r0, r6
 800df2c:	460f      	mov	r7, r1
 800df2e:	e00f      	b.n	800df50 <listen_message_reliably+0x54>
 800df30:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800df34:	9903      	ldr	r1, [sp, #12]
 800df36:	455a      	cmp	r2, fp
 800df38:	f106 0601 	add.w	r6, r6, #1
 800df3c:	eb73 0101 	sbcs.w	r1, r3, r1
 800df40:	b2f0      	uxtb	r0, r6
 800df42:	da01      	bge.n	800df48 <listen_message_reliably+0x4c>
 800df44:	4693      	mov	fp, r2
 800df46:	9303      	str	r3, [sp, #12]
 800df48:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800df4c:	4283      	cmp	r3, r0
 800df4e:	d960      	bls.n	800e012 <listen_message_reliably+0x116>
 800df50:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800df54:	2102      	movs	r1, #2
 800df56:	2201      	movs	r2, #1
 800df58:	f001 f9ba 	bl	800f2d0 <uxr_stream_id>
 800df5c:	00e4      	lsls	r4, r4, #3
 800df5e:	f104 0520 	add.w	r5, r4, #32
 800df62:	4445      	add	r5, r8
 800df64:	4601      	mov	r1, r0
 800df66:	463b      	mov	r3, r7
 800df68:	464a      	mov	r2, r9
 800df6a:	4628      	mov	r0, r5
 800df6c:	9109      	str	r1, [sp, #36]	; 0x24
 800df6e:	f007 fff5 	bl	8015f5c <uxr_update_output_stream_heartbeat_timestamp>
 800df72:	eb08 0304 	add.w	r3, r8, r4
 800df76:	2800      	cmp	r0, #0
 800df78:	d0da      	beq.n	800df30 <listen_message_reliably+0x34>
 800df7a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800df7e:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800df82:	9304      	str	r3, [sp, #16]
 800df84:	4640      	mov	r0, r8
 800df86:	f000 fcd9 	bl	800e93c <uxr_session_header_offset>
 800df8a:	3501      	adds	r5, #1
 800df8c:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800df90:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800df94:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800df98:	2300      	movs	r3, #0
 800df9a:	2211      	movs	r2, #17
 800df9c:	9000      	str	r0, [sp, #0]
 800df9e:	a90c      	add	r1, sp, #48	; 0x30
 800dfa0:	4650      	mov	r0, sl
 800dfa2:	f7fe ffcd 	bl	800cf40 <ucdr_init_buffer_origin_offset>
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	2205      	movs	r2, #5
 800dfaa:	210b      	movs	r1, #11
 800dfac:	4650      	mov	r0, sl
 800dfae:	f001 fac7 	bl	800f540 <uxr_buffer_submessage_header>
 800dfb2:	8968      	ldrh	r0, [r5, #10]
 800dfb4:	2101      	movs	r1, #1
 800dfb6:	f008 f9c3 	bl	8016340 <uxr_seq_num_add>
 800dfba:	892b      	ldrh	r3, [r5, #8]
 800dfbc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	9b04      	ldr	r3, [sp, #16]
 800dfc4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800dfc8:	a90a      	add	r1, sp, #40	; 0x28
 800dfca:	4650      	mov	r0, sl
 800dfcc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800dfd0:	f002 fcb0 	bl	8010934 <uxr_serialize_HEARTBEAT_Payload>
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	4611      	mov	r1, r2
 800dfd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dfda:	4640      	mov	r0, r8
 800dfdc:	f000 fc58 	bl	800e890 <uxr_stamp_session_header>
 800dfe0:	4650      	mov	r0, sl
 800dfe2:	f7fe ffeb 	bl	800cfbc <ucdr_buffer_length>
 800dfe6:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800dfea:	4602      	mov	r2, r0
 800dfec:	a90c      	add	r1, sp, #48	; 0x30
 800dfee:	e9d3 0500 	ldrd	r0, r5, [r3]
 800dff2:	4444      	add	r4, r8
 800dff4:	47a8      	blx	r5
 800dff6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800dffa:	9903      	ldr	r1, [sp, #12]
 800dffc:	455a      	cmp	r2, fp
 800dffe:	f106 0601 	add.w	r6, r6, #1
 800e002:	eb73 0101 	sbcs.w	r1, r3, r1
 800e006:	b2f0      	uxtb	r0, r6
 800e008:	db9c      	blt.n	800df44 <listen_message_reliably+0x48>
 800e00a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800e00e:	4283      	cmp	r3, r0
 800e010:	d89e      	bhi.n	800df50 <listen_message_reliably+0x54>
 800e012:	9a03      	ldr	r2, [sp, #12]
 800e014:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e018:	429a      	cmp	r2, r3
 800e01a:	bf08      	it	eq
 800e01c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800e020:	d01e      	beq.n	800e060 <listen_message_reliably+0x164>
 800e022:	ebab 0309 	sub.w	r3, fp, r9
 800e026:	9905      	ldr	r1, [sp, #20]
 800e028:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	bf08      	it	eq
 800e030:	2301      	moveq	r3, #1
 800e032:	4299      	cmp	r1, r3
 800e034:	bfa8      	it	ge
 800e036:	4619      	movge	r1, r3
 800e038:	6894      	ldr	r4, [r2, #8]
 800e03a:	6810      	ldr	r0, [r2, #0]
 800e03c:	4689      	mov	r9, r1
 800e03e:	460b      	mov	r3, r1
 800e040:	aa08      	add	r2, sp, #32
 800e042:	a907      	add	r1, sp, #28
 800e044:	47a0      	blx	r4
 800e046:	b968      	cbnz	r0, 800e064 <listen_message_reliably+0x168>
 800e048:	9b05      	ldr	r3, [sp, #20]
 800e04a:	eba3 0309 	sub.w	r3, r3, r9
 800e04e:	2b00      	cmp	r3, #0
 800e050:	9305      	str	r3, [sp, #20]
 800e052:	f73f af5c 	bgt.w	800df0e <listen_message_reliably+0x12>
 800e056:	4604      	mov	r4, r0
 800e058:	4620      	mov	r0, r4
 800e05a:	b01d      	add	sp, #116	; 0x74
 800e05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e060:	9b05      	ldr	r3, [sp, #20]
 800e062:	e7e0      	b.n	800e026 <listen_message_reliably+0x12a>
 800e064:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e068:	4604      	mov	r4, r0
 800e06a:	a80c      	add	r0, sp, #48	; 0x30
 800e06c:	f7fe ff7a 	bl	800cf64 <ucdr_init_buffer>
 800e070:	2500      	movs	r5, #0
 800e072:	f10d 031a 	add.w	r3, sp, #26
 800e076:	aa06      	add	r2, sp, #24
 800e078:	a90c      	add	r1, sp, #48	; 0x30
 800e07a:	4640      	mov	r0, r8
 800e07c:	f88d 5018 	strb.w	r5, [sp, #24]
 800e080:	f000 fc1a 	bl	800e8b8 <uxr_read_session_header>
 800e084:	b918      	cbnz	r0, 800e08e <listen_message_reliably+0x192>
 800e086:	4620      	mov	r0, r4
 800e088:	b01d      	add	sp, #116	; 0x74
 800e08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e08e:	4629      	mov	r1, r5
 800e090:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e094:	f001 f946 	bl	800f324 <uxr_stream_id_from_raw>
 800e098:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800e09c:	2d01      	cmp	r5, #1
 800e09e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800e0a2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800e0a6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e0aa:	d04b      	beq.n	800e144 <listen_message_reliably+0x248>
 800e0ac:	2d02      	cmp	r5, #2
 800e0ae:	d00f      	beq.n	800e0d0 <listen_message_reliably+0x1d4>
 800e0b0:	2d00      	cmp	r5, #0
 800e0b2:	d1e8      	bne.n	800e086 <listen_message_reliably+0x18a>
 800e0b4:	4629      	mov	r1, r5
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	f001 f934 	bl	800f324 <uxr_stream_id_from_raw>
 800e0bc:	a90c      	add	r1, sp, #48	; 0x30
 800e0be:	4602      	mov	r2, r0
 800e0c0:	4640      	mov	r0, r8
 800e0c2:	920a      	str	r2, [sp, #40]	; 0x28
 800e0c4:	f7ff fd92 	bl	800dbec <read_submessage_list>
 800e0c8:	4620      	mov	r0, r4
 800e0ca:	b01d      	add	sp, #116	; 0x74
 800e0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d0:	4631      	mov	r1, r6
 800e0d2:	f108 0008 	add.w	r0, r8, #8
 800e0d6:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800e0da:	f001 fa11 	bl	800f500 <uxr_get_input_reliable_stream>
 800e0de:	4607      	mov	r7, r0
 800e0e0:	b338      	cbz	r0, 800e132 <listen_message_reliably+0x236>
 800e0e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0e4:	9203      	str	r2, [sp, #12]
 800e0e6:	a80c      	add	r0, sp, #48	; 0x30
 800e0e8:	f7fe ff6c 	bl	800cfc4 <ucdr_buffer_remaining>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	f10d 0019 	add.w	r0, sp, #25
 800e0f2:	9000      	str	r0, [sp, #0]
 800e0f4:	9a03      	ldr	r2, [sp, #12]
 800e0f6:	4651      	mov	r1, sl
 800e0f8:	4638      	mov	r0, r7
 800e0fa:	f007 fb45 	bl	8015788 <uxr_receive_reliable_message>
 800e0fe:	b1c0      	cbz	r0, 800e132 <listen_message_reliably+0x236>
 800e100:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e104:	b393      	cbz	r3, 800e16c <listen_message_reliably+0x270>
 800e106:	ad14      	add	r5, sp, #80	; 0x50
 800e108:	f04f 0a02 	mov.w	sl, #2
 800e10c:	e00a      	b.n	800e124 <listen_message_reliably+0x228>
 800e10e:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800e112:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800e116:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800e11a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e11c:	4629      	mov	r1, r5
 800e11e:	4640      	mov	r0, r8
 800e120:	f7ff fd64 	bl	800dbec <read_submessage_list>
 800e124:	2204      	movs	r2, #4
 800e126:	4629      	mov	r1, r5
 800e128:	4638      	mov	r0, r7
 800e12a:	f007 fbad 	bl	8015888 <uxr_next_input_reliable_buffer_available>
 800e12e:	2800      	cmp	r0, #0
 800e130:	d1ed      	bne.n	800e10e <listen_message_reliably+0x212>
 800e132:	4640      	mov	r0, r8
 800e134:	4632      	mov	r2, r6
 800e136:	4649      	mov	r1, r9
 800e138:	f7ff fbd4 	bl	800d8e4 <write_submessage_acknack.isra.0>
 800e13c:	4620      	mov	r0, r4
 800e13e:	b01d      	add	sp, #116	; 0x74
 800e140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e144:	4631      	mov	r1, r6
 800e146:	f108 0008 	add.w	r0, r8, #8
 800e14a:	f001 f9cf 	bl	800f4ec <uxr_get_input_best_effort_stream>
 800e14e:	2800      	cmp	r0, #0
 800e150:	d099      	beq.n	800e086 <listen_message_reliably+0x18a>
 800e152:	4651      	mov	r1, sl
 800e154:	f007 fa84 	bl	8015660 <uxr_receive_best_effort_message>
 800e158:	2800      	cmp	r0, #0
 800e15a:	d094      	beq.n	800e086 <listen_message_reliably+0x18a>
 800e15c:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800e160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e162:	a90c      	add	r1, sp, #48	; 0x30
 800e164:	4640      	mov	r0, r8
 800e166:	f7ff fd41 	bl	800dbec <read_submessage_list>
 800e16a:	e78c      	b.n	800e086 <listen_message_reliably+0x18a>
 800e16c:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800e170:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e172:	a90c      	add	r1, sp, #48	; 0x30
 800e174:	4640      	mov	r0, r8
 800e176:	f7ff fd39 	bl	800dbec <read_submessage_list>
 800e17a:	e7c4      	b.n	800e106 <listen_message_reliably+0x20a>

0800e17c <uxr_run_session_timeout>:
 800e17c:	b570      	push	{r4, r5, r6, lr}
 800e17e:	4604      	mov	r4, r0
 800e180:	460d      	mov	r5, r1
 800e182:	f001 fa23 	bl	800f5cc <uxr_millis>
 800e186:	4606      	mov	r6, r0
 800e188:	4620      	mov	r0, r4
 800e18a:	f7ff fc71 	bl	800da70 <uxr_flash_output_streams>
 800e18e:	4629      	mov	r1, r5
 800e190:	4620      	mov	r0, r4
 800e192:	f7ff feb3 	bl	800defc <listen_message_reliably>
 800e196:	f001 fa19 	bl	800f5cc <uxr_millis>
 800e19a:	1b83      	subs	r3, r0, r6
 800e19c:	1ae9      	subs	r1, r5, r3
 800e19e:	2900      	cmp	r1, #0
 800e1a0:	dcf6      	bgt.n	800e190 <uxr_run_session_timeout+0x14>
 800e1a2:	f104 0008 	add.w	r0, r4, #8
 800e1a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1aa:	f001 b9b3 	b.w	800f514 <uxr_output_streams_confirmed>
 800e1ae:	bf00      	nop

0800e1b0 <uxr_run_session_until_data>:
 800e1b0:	b570      	push	{r4, r5, r6, lr}
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	460d      	mov	r5, r1
 800e1b6:	f001 fa09 	bl	800f5cc <uxr_millis>
 800e1ba:	4606      	mov	r6, r0
 800e1bc:	4620      	mov	r0, r4
 800e1be:	f7ff fc57 	bl	800da70 <uxr_flash_output_streams>
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800e1c8:	4629      	mov	r1, r5
 800e1ca:	e005      	b.n	800e1d8 <uxr_run_session_until_data+0x28>
 800e1cc:	f001 f9fe 	bl	800f5cc <uxr_millis>
 800e1d0:	1b83      	subs	r3, r0, r6
 800e1d2:	1ae9      	subs	r1, r5, r3
 800e1d4:	2900      	cmp	r1, #0
 800e1d6:	dd07      	ble.n	800e1e8 <uxr_run_session_until_data+0x38>
 800e1d8:	4620      	mov	r0, r4
 800e1da:	f7ff fe8f 	bl	800defc <listen_message_reliably>
 800e1de:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800e1e2:	2800      	cmp	r0, #0
 800e1e4:	d0f2      	beq.n	800e1cc <uxr_run_session_until_data+0x1c>
 800e1e6:	bd70      	pop	{r4, r5, r6, pc}
 800e1e8:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800e1ec:	bd70      	pop	{r4, r5, r6, pc}
 800e1ee:	bf00      	nop

0800e1f0 <uxr_run_session_until_confirm_delivery>:
 800e1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1f4:	4606      	mov	r6, r0
 800e1f6:	460d      	mov	r5, r1
 800e1f8:	f001 f9e8 	bl	800f5cc <uxr_millis>
 800e1fc:	4607      	mov	r7, r0
 800e1fe:	4630      	mov	r0, r6
 800e200:	f7ff fc36 	bl	800da70 <uxr_flash_output_streams>
 800e204:	2d00      	cmp	r5, #0
 800e206:	f106 0808 	add.w	r8, r6, #8
 800e20a:	bfa8      	it	ge
 800e20c:	462c      	movge	r4, r5
 800e20e:	da07      	bge.n	800e220 <uxr_run_session_until_confirm_delivery+0x30>
 800e210:	e00e      	b.n	800e230 <uxr_run_session_until_confirm_delivery+0x40>
 800e212:	f7ff fe73 	bl	800defc <listen_message_reliably>
 800e216:	f001 f9d9 	bl	800f5cc <uxr_millis>
 800e21a:	1bc3      	subs	r3, r0, r7
 800e21c:	1aec      	subs	r4, r5, r3
 800e21e:	d407      	bmi.n	800e230 <uxr_run_session_until_confirm_delivery+0x40>
 800e220:	4640      	mov	r0, r8
 800e222:	f001 f977 	bl	800f514 <uxr_output_streams_confirmed>
 800e226:	4603      	mov	r3, r0
 800e228:	4621      	mov	r1, r4
 800e22a:	4630      	mov	r0, r6
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d0f0      	beq.n	800e212 <uxr_run_session_until_confirm_delivery+0x22>
 800e230:	4640      	mov	r0, r8
 800e232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e236:	f001 b96d 	b.w	800f514 <uxr_output_streams_confirmed>
 800e23a:	bf00      	nop

0800e23c <uxr_run_session_until_all_status>:
 800e23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e240:	9c08      	ldr	r4, [sp, #32]
 800e242:	4606      	mov	r6, r0
 800e244:	460f      	mov	r7, r1
 800e246:	4691      	mov	r9, r2
 800e248:	461d      	mov	r5, r3
 800e24a:	f7ff fc11 	bl	800da70 <uxr_flash_output_streams>
 800e24e:	b124      	cbz	r4, 800e25a <uxr_run_session_until_all_status+0x1e>
 800e250:	4622      	mov	r2, r4
 800e252:	21ff      	movs	r1, #255	; 0xff
 800e254:	4628      	mov	r0, r5
 800e256:	f009 f8d7 	bl	8017408 <memset>
 800e25a:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 800e25e:	67f4      	str	r4, [r6, #124]	; 0x7c
 800e260:	f001 f9b4 	bl	800f5cc <uxr_millis>
 800e264:	3d01      	subs	r5, #1
 800e266:	f1a9 0902 	sub.w	r9, r9, #2
 800e26a:	4680      	mov	r8, r0
 800e26c:	4639      	mov	r1, r7
 800e26e:	4630      	mov	r0, r6
 800e270:	f7ff fe44 	bl	800defc <listen_message_reliably>
 800e274:	f001 f9aa 	bl	800f5cc <uxr_millis>
 800e278:	eba0 0008 	sub.w	r0, r0, r8
 800e27c:	1a39      	subs	r1, r7, r0
 800e27e:	b344      	cbz	r4, 800e2d2 <uxr_run_session_until_all_status+0x96>
 800e280:	4628      	mov	r0, r5
 800e282:	46ac      	mov	ip, r5
 800e284:	2301      	movs	r3, #1
 800e286:	e002      	b.n	800e28e <uxr_run_session_until_all_status+0x52>
 800e288:	42a3      	cmp	r3, r4
 800e28a:	d20d      	bcs.n	800e2a8 <uxr_run_session_until_all_status+0x6c>
 800e28c:	3301      	adds	r3, #1
 800e28e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800e292:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800e296:	d1f7      	bne.n	800e288 <uxr_run_session_until_all_status+0x4c>
 800e298:	42a3      	cmp	r3, r4
 800e29a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800e29e:	d213      	bcs.n	800e2c8 <uxr_run_session_until_all_status+0x8c>
 800e2a0:	2a00      	cmp	r2, #0
 800e2a2:	d0f3      	beq.n	800e28c <uxr_run_session_until_all_status+0x50>
 800e2a4:	2900      	cmp	r1, #0
 800e2a6:	dce2      	bgt.n	800e26e <uxr_run_session_until_all_status+0x32>
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	67f3      	str	r3, [r6, #124]	; 0x7c
 800e2ac:	442c      	add	r4, r5
 800e2ae:	e001      	b.n	800e2b4 <uxr_run_session_until_all_status+0x78>
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	d812      	bhi.n	800e2da <uxr_run_session_until_all_status+0x9e>
 800e2b4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800e2b8:	4284      	cmp	r4, r0
 800e2ba:	d1f9      	bne.n	800e2b0 <uxr_run_session_until_all_status+0x74>
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	bf8c      	ite	hi
 800e2c0:	2000      	movhi	r0, #0
 800e2c2:	2001      	movls	r0, #1
 800e2c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2c8:	2900      	cmp	r1, #0
 800e2ca:	dded      	ble.n	800e2a8 <uxr_run_session_until_all_status+0x6c>
 800e2cc:	2a00      	cmp	r2, #0
 800e2ce:	d1ce      	bne.n	800e26e <uxr_run_session_until_all_status+0x32>
 800e2d0:	e7ea      	b.n	800e2a8 <uxr_run_session_until_all_status+0x6c>
 800e2d2:	67f4      	str	r4, [r6, #124]	; 0x7c
 800e2d4:	2001      	movs	r0, #1
 800e2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2da:	2000      	movs	r0, #0
 800e2dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e2e0 <uxr_run_session_until_pong>:
 800e2e0:	b570      	push	{r4, r5, r6, lr}
 800e2e2:	4604      	mov	r4, r0
 800e2e4:	460d      	mov	r5, r1
 800e2e6:	f001 f971 	bl	800f5cc <uxr_millis>
 800e2ea:	4606      	mov	r6, r0
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	f7ff fbbf 	bl	800da70 <uxr_flash_output_streams>
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
 800e2f8:	4629      	mov	r1, r5
 800e2fa:	e005      	b.n	800e308 <uxr_run_session_until_pong+0x28>
 800e2fc:	f001 f966 	bl	800f5cc <uxr_millis>
 800e300:	1b83      	subs	r3, r0, r6
 800e302:	1ae9      	subs	r1, r5, r3
 800e304:	2900      	cmp	r1, #0
 800e306:	dd0c      	ble.n	800e322 <uxr_run_session_until_pong+0x42>
 800e308:	4620      	mov	r0, r4
 800e30a:	f7ff fdf7 	bl	800defc <listen_message_reliably>
 800e30e:	f894 00b5 	ldrb.w	r0, [r4, #181]	; 0xb5
 800e312:	2800      	cmp	r0, #0
 800e314:	d0f2      	beq.n	800e2fc <uxr_run_session_until_pong+0x1c>
 800e316:	f1a0 0001 	sub.w	r0, r0, #1
 800e31a:	fab0 f080 	clz	r0, r0
 800e31e:	0940      	lsrs	r0, r0, #5
 800e320:	bd70      	pop	{r4, r5, r6, pc}
 800e322:	f894 00b5 	ldrb.w	r0, [r4, #181]	; 0xb5
 800e326:	f1a0 0001 	sub.w	r0, r0, #1
 800e32a:	fab0 f080 	clz	r0, r0
 800e32e:	0940      	lsrs	r0, r0, #5
 800e330:	bd70      	pop	{r4, r5, r6, pc}
 800e332:	bf00      	nop

0800e334 <wait_session_status>:
 800e334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e338:	4604      	mov	r4, r0
 800e33a:	b09d      	sub	sp, #116	; 0x74
 800e33c:	20ff      	movs	r0, #255	; 0xff
 800e33e:	7160      	strb	r0, [r4, #5]
 800e340:	9303      	str	r3, [sp, #12]
 800e342:	2b00      	cmp	r3, #0
 800e344:	f000 80b6 	beq.w	800e4b4 <wait_session_status+0x180>
 800e348:	468a      	mov	sl, r1
 800e34a:	4691      	mov	r9, r2
 800e34c:	f04f 0b00 	mov.w	fp, #0
 800e350:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e352:	464a      	mov	r2, r9
 800e354:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e358:	4651      	mov	r1, sl
 800e35a:	47a8      	blx	r5
 800e35c:	f001 f936 	bl	800f5cc <uxr_millis>
 800e360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e364:	4605      	mov	r5, r0
 800e366:	e009      	b.n	800e37c <wait_session_status+0x48>
 800e368:	f001 f930 	bl	800f5cc <uxr_millis>
 800e36c:	1b40      	subs	r0, r0, r5
 800e36e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800e372:	2b00      	cmp	r3, #0
 800e374:	dd40      	ble.n	800e3f8 <wait_session_status+0xc4>
 800e376:	7960      	ldrb	r0, [r4, #5]
 800e378:	28ff      	cmp	r0, #255	; 0xff
 800e37a:	d145      	bne.n	800e408 <wait_session_status+0xd4>
 800e37c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800e37e:	a908      	add	r1, sp, #32
 800e380:	6896      	ldr	r6, [r2, #8]
 800e382:	6810      	ldr	r0, [r2, #0]
 800e384:	aa09      	add	r2, sp, #36	; 0x24
 800e386:	47b0      	blx	r6
 800e388:	2800      	cmp	r0, #0
 800e38a:	d0ed      	beq.n	800e368 <wait_session_status+0x34>
 800e38c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800e390:	a80c      	add	r0, sp, #48	; 0x30
 800e392:	f7fe fde7 	bl	800cf64 <ucdr_init_buffer>
 800e396:	2600      	movs	r6, #0
 800e398:	f10d 031e 	add.w	r3, sp, #30
 800e39c:	aa07      	add	r2, sp, #28
 800e39e:	a90c      	add	r1, sp, #48	; 0x30
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	f88d 601c 	strb.w	r6, [sp, #28]
 800e3a6:	f000 fa87 	bl	800e8b8 <uxr_read_session_header>
 800e3aa:	2800      	cmp	r0, #0
 800e3ac:	d0dc      	beq.n	800e368 <wait_session_status+0x34>
 800e3ae:	4631      	mov	r1, r6
 800e3b0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800e3b4:	f000 ffb6 	bl	800f324 <uxr_stream_id_from_raw>
 800e3b8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800e3bc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800e3c0:	9302      	str	r3, [sp, #8]
 800e3c2:	2f01      	cmp	r7, #1
 800e3c4:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800e3c8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e3cc:	d05c      	beq.n	800e488 <wait_session_status+0x154>
 800e3ce:	2f02      	cmp	r7, #2
 800e3d0:	d020      	beq.n	800e414 <wait_session_status+0xe0>
 800e3d2:	2f00      	cmp	r7, #0
 800e3d4:	d1c8      	bne.n	800e368 <wait_session_status+0x34>
 800e3d6:	4639      	mov	r1, r7
 800e3d8:	4638      	mov	r0, r7
 800e3da:	f000 ffa3 	bl	800f324 <uxr_stream_id_from_raw>
 800e3de:	a90c      	add	r1, sp, #48	; 0x30
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	900b      	str	r0, [sp, #44]	; 0x2c
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	f7ff fc01 	bl	800dbec <read_submessage_list>
 800e3ea:	f001 f8ef 	bl	800f5cc <uxr_millis>
 800e3ee:	1b40      	subs	r0, r0, r5
 800e3f0:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	dcbe      	bgt.n	800e376 <wait_session_status+0x42>
 800e3f8:	9b03      	ldr	r3, [sp, #12]
 800e3fa:	7960      	ldrb	r0, [r4, #5]
 800e3fc:	f10b 0b01 	add.w	fp, fp, #1
 800e400:	455b      	cmp	r3, fp
 800e402:	d001      	beq.n	800e408 <wait_session_status+0xd4>
 800e404:	28ff      	cmp	r0, #255	; 0xff
 800e406:	d0a3      	beq.n	800e350 <wait_session_status+0x1c>
 800e408:	38ff      	subs	r0, #255	; 0xff
 800e40a:	bf18      	it	ne
 800e40c:	2001      	movne	r0, #1
 800e40e:	b01d      	add	sp, #116	; 0x74
 800e410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e414:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800e418:	9304      	str	r3, [sp, #16]
 800e41a:	4631      	mov	r1, r6
 800e41c:	f104 0008 	add.w	r0, r4, #8
 800e420:	f001 f86e 	bl	800f500 <uxr_get_input_reliable_stream>
 800e424:	4680      	mov	r8, r0
 800e426:	b348      	cbz	r0, 800e47c <wait_session_status+0x148>
 800e428:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e42a:	9205      	str	r2, [sp, #20]
 800e42c:	a80c      	add	r0, sp, #48	; 0x30
 800e42e:	f7fe fdc9 	bl	800cfc4 <ucdr_buffer_remaining>
 800e432:	4603      	mov	r3, r0
 800e434:	f10d 001d 	add.w	r0, sp, #29
 800e438:	9000      	str	r0, [sp, #0]
 800e43a:	9a05      	ldr	r2, [sp, #20]
 800e43c:	9902      	ldr	r1, [sp, #8]
 800e43e:	4640      	mov	r0, r8
 800e440:	f007 f9a2 	bl	8015788 <uxr_receive_reliable_message>
 800e444:	b1d0      	cbz	r0, 800e47c <wait_session_status+0x148>
 800e446:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d03a      	beq.n	800e4c4 <wait_session_status+0x190>
 800e44e:	9f04      	ldr	r7, [sp, #16]
 800e450:	e00a      	b.n	800e468 <wait_session_status+0x134>
 800e452:	f04f 0302 	mov.w	r3, #2
 800e456:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800e45a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800e45e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800e462:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e464:	f7ff fbc2 	bl	800dbec <read_submessage_list>
 800e468:	a914      	add	r1, sp, #80	; 0x50
 800e46a:	2204      	movs	r2, #4
 800e46c:	4640      	mov	r0, r8
 800e46e:	f007 fa0b 	bl	8015888 <uxr_next_input_reliable_buffer_available>
 800e472:	4603      	mov	r3, r0
 800e474:	a914      	add	r1, sp, #80	; 0x50
 800e476:	4620      	mov	r0, r4
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d1ea      	bne.n	800e452 <wait_session_status+0x11e>
 800e47c:	9904      	ldr	r1, [sp, #16]
 800e47e:	4632      	mov	r2, r6
 800e480:	4620      	mov	r0, r4
 800e482:	f7ff fa2f 	bl	800d8e4 <write_submessage_acknack.isra.0>
 800e486:	e76f      	b.n	800e368 <wait_session_status+0x34>
 800e488:	4631      	mov	r1, r6
 800e48a:	f104 0008 	add.w	r0, r4, #8
 800e48e:	f001 f82d 	bl	800f4ec <uxr_get_input_best_effort_stream>
 800e492:	2800      	cmp	r0, #0
 800e494:	f43f af68 	beq.w	800e368 <wait_session_status+0x34>
 800e498:	9902      	ldr	r1, [sp, #8]
 800e49a:	f007 f8e1 	bl	8015660 <uxr_receive_best_effort_message>
 800e49e:	2800      	cmp	r0, #0
 800e4a0:	f43f af62 	beq.w	800e368 <wait_session_status+0x34>
 800e4a4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800e4a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e4aa:	a90c      	add	r1, sp, #48	; 0x30
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	f7ff fb9d 	bl	800dbec <read_submessage_list>
 800e4b2:	e759      	b.n	800e368 <wait_session_status+0x34>
 800e4b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e4b6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e4ba:	47a0      	blx	r4
 800e4bc:	2001      	movs	r0, #1
 800e4be:	b01d      	add	sp, #116	; 0x74
 800e4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800e4c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e4ca:	a90c      	add	r1, sp, #48	; 0x30
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	f7ff fb8d 	bl	800dbec <read_submessage_list>
 800e4d2:	e7bc      	b.n	800e44e <wait_session_status+0x11a>

0800e4d4 <uxr_delete_session_retries>:
 800e4d4:	b530      	push	{r4, r5, lr}
 800e4d6:	b08f      	sub	sp, #60	; 0x3c
 800e4d8:	4604      	mov	r4, r0
 800e4da:	460d      	mov	r5, r1
 800e4dc:	f000 fa2e 	bl	800e93c <uxr_session_header_offset>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	2210      	movs	r2, #16
 800e4e4:	9000      	str	r0, [sp, #0]
 800e4e6:	a902      	add	r1, sp, #8
 800e4e8:	a806      	add	r0, sp, #24
 800e4ea:	f7fe fd29 	bl	800cf40 <ucdr_init_buffer_origin_offset>
 800e4ee:	a906      	add	r1, sp, #24
 800e4f0:	4620      	mov	r0, r4
 800e4f2:	f000 f973 	bl	800e7dc <uxr_buffer_delete_session>
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	4611      	mov	r1, r2
 800e4fa:	9b06      	ldr	r3, [sp, #24]
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	f000 f9c7 	bl	800e890 <uxr_stamp_session_header>
 800e502:	a806      	add	r0, sp, #24
 800e504:	f7fe fd5a 	bl	800cfbc <ucdr_buffer_length>
 800e508:	462b      	mov	r3, r5
 800e50a:	4602      	mov	r2, r0
 800e50c:	a902      	add	r1, sp, #8
 800e50e:	4620      	mov	r0, r4
 800e510:	f7ff ff10 	bl	800e334 <wait_session_status>
 800e514:	b118      	cbz	r0, 800e51e <uxr_delete_session_retries+0x4a>
 800e516:	7960      	ldrb	r0, [r4, #5]
 800e518:	fab0 f080 	clz	r0, r0
 800e51c:	0940      	lsrs	r0, r0, #5
 800e51e:	b00f      	add	sp, #60	; 0x3c
 800e520:	bd30      	pop	{r4, r5, pc}
 800e522:	bf00      	nop

0800e524 <uxr_create_session>:
 800e524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e528:	f100 0b08 	add.w	fp, r0, #8
 800e52c:	b0ab      	sub	sp, #172	; 0xac
 800e52e:	4604      	mov	r4, r0
 800e530:	4658      	mov	r0, fp
 800e532:	f000 ff2b 	bl	800f38c <uxr_reset_stream_storage>
 800e536:	4620      	mov	r0, r4
 800e538:	f000 fa00 	bl	800e93c <uxr_session_header_offset>
 800e53c:	2300      	movs	r3, #0
 800e53e:	9000      	str	r0, [sp, #0]
 800e540:	221c      	movs	r2, #28
 800e542:	a90b      	add	r1, sp, #44	; 0x2c
 800e544:	a812      	add	r0, sp, #72	; 0x48
 800e546:	f7fe fcfb 	bl	800cf40 <ucdr_init_buffer_origin_offset>
 800e54a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e54c:	8a1a      	ldrh	r2, [r3, #16]
 800e54e:	3a04      	subs	r2, #4
 800e550:	b292      	uxth	r2, r2
 800e552:	a912      	add	r1, sp, #72	; 0x48
 800e554:	4620      	mov	r0, r4
 800e556:	f000 f917 	bl	800e788 <uxr_buffer_create_session>
 800e55a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e55c:	4620      	mov	r0, r4
 800e55e:	f000 f983 	bl	800e868 <uxr_stamp_create_session_header>
 800e562:	a812      	add	r0, sp, #72	; 0x48
 800e564:	f7fe fd2a 	bl	800cfbc <ucdr_buffer_length>
 800e568:	23ff      	movs	r3, #255	; 0xff
 800e56a:	7163      	strb	r3, [r4, #5]
 800e56c:	230a      	movs	r3, #10
 800e56e:	46da      	mov	sl, fp
 800e570:	9303      	str	r3, [sp, #12]
 800e572:	4683      	mov	fp, r0
 800e574:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e576:	465a      	mov	r2, fp
 800e578:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e57c:	a90b      	add	r1, sp, #44	; 0x2c
 800e57e:	47a8      	blx	r5
 800e580:	f001 f824 	bl	800f5cc <uxr_millis>
 800e584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e588:	4605      	mov	r5, r0
 800e58a:	e009      	b.n	800e5a0 <uxr_create_session+0x7c>
 800e58c:	f001 f81e 	bl	800f5cc <uxr_millis>
 800e590:	1b40      	subs	r0, r0, r5
 800e592:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800e596:	2b00      	cmp	r3, #0
 800e598:	7962      	ldrb	r2, [r4, #5]
 800e59a:	dd38      	ble.n	800e60e <uxr_create_session+0xea>
 800e59c:	2aff      	cmp	r2, #255	; 0xff
 800e59e:	d13c      	bne.n	800e61a <uxr_create_session+0xf6>
 800e5a0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800e5a2:	a907      	add	r1, sp, #28
 800e5a4:	6896      	ldr	r6, [r2, #8]
 800e5a6:	6810      	ldr	r0, [r2, #0]
 800e5a8:	aa08      	add	r2, sp, #32
 800e5aa:	47b0      	blx	r6
 800e5ac:	2800      	cmp	r0, #0
 800e5ae:	d0ed      	beq.n	800e58c <uxr_create_session+0x68>
 800e5b0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e5b4:	a81a      	add	r0, sp, #104	; 0x68
 800e5b6:	f7fe fcd5 	bl	800cf64 <ucdr_init_buffer>
 800e5ba:	2600      	movs	r6, #0
 800e5bc:	f10d 031a 	add.w	r3, sp, #26
 800e5c0:	aa06      	add	r2, sp, #24
 800e5c2:	a91a      	add	r1, sp, #104	; 0x68
 800e5c4:	4620      	mov	r0, r4
 800e5c6:	f88d 6018 	strb.w	r6, [sp, #24]
 800e5ca:	f000 f975 	bl	800e8b8 <uxr_read_session_header>
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	d0dc      	beq.n	800e58c <uxr_create_session+0x68>
 800e5d2:	4631      	mov	r1, r6
 800e5d4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e5d8:	f000 fea4 	bl	800f324 <uxr_stream_id_from_raw>
 800e5dc:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800e5e0:	2e01      	cmp	r6, #1
 800e5e2:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800e5e6:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800e5ea:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800e5ee:	d053      	beq.n	800e698 <uxr_create_session+0x174>
 800e5f0:	2e02      	cmp	r6, #2
 800e5f2:	d018      	beq.n	800e626 <uxr_create_session+0x102>
 800e5f4:	2e00      	cmp	r6, #0
 800e5f6:	d1c9      	bne.n	800e58c <uxr_create_session+0x68>
 800e5f8:	4631      	mov	r1, r6
 800e5fa:	4630      	mov	r0, r6
 800e5fc:	f000 fe92 	bl	800f324 <uxr_stream_id_from_raw>
 800e600:	a91a      	add	r1, sp, #104	; 0x68
 800e602:	4602      	mov	r2, r0
 800e604:	900a      	str	r0, [sp, #40]	; 0x28
 800e606:	4620      	mov	r0, r4
 800e608:	f7ff faf0 	bl	800dbec <read_submessage_list>
 800e60c:	e7be      	b.n	800e58c <uxr_create_session+0x68>
 800e60e:	9b03      	ldr	r3, [sp, #12]
 800e610:	3b01      	subs	r3, #1
 800e612:	9303      	str	r3, [sp, #12]
 800e614:	d001      	beq.n	800e61a <uxr_create_session+0xf6>
 800e616:	2aff      	cmp	r2, #255	; 0xff
 800e618:	d0ac      	beq.n	800e574 <uxr_create_session+0x50>
 800e61a:	2a00      	cmp	r2, #0
 800e61c:	d051      	beq.n	800e6c2 <uxr_create_session+0x19e>
 800e61e:	2000      	movs	r0, #0
 800e620:	b02b      	add	sp, #172	; 0xac
 800e622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e626:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800e62a:	9304      	str	r3, [sp, #16]
 800e62c:	4639      	mov	r1, r7
 800e62e:	4650      	mov	r0, sl
 800e630:	f000 ff66 	bl	800f500 <uxr_get_input_reliable_stream>
 800e634:	4680      	mov	r8, r0
 800e636:	b348      	cbz	r0, 800e68c <uxr_create_session+0x168>
 800e638:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e63a:	9205      	str	r2, [sp, #20]
 800e63c:	a81a      	add	r0, sp, #104	; 0x68
 800e63e:	f7fe fcc1 	bl	800cfc4 <ucdr_buffer_remaining>
 800e642:	4603      	mov	r3, r0
 800e644:	f10d 0019 	add.w	r0, sp, #25
 800e648:	9000      	str	r0, [sp, #0]
 800e64a:	9a05      	ldr	r2, [sp, #20]
 800e64c:	4649      	mov	r1, r9
 800e64e:	4640      	mov	r0, r8
 800e650:	f007 f89a 	bl	8015788 <uxr_receive_reliable_message>
 800e654:	b1d0      	cbz	r0, 800e68c <uxr_create_session+0x168>
 800e656:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d038      	beq.n	800e6d0 <uxr_create_session+0x1ac>
 800e65e:	9e04      	ldr	r6, [sp, #16]
 800e660:	e00a      	b.n	800e678 <uxr_create_session+0x154>
 800e662:	f04f 0302 	mov.w	r3, #2
 800e666:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 800e66a:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800e66e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e672:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e674:	f7ff faba 	bl	800dbec <read_submessage_list>
 800e678:	a922      	add	r1, sp, #136	; 0x88
 800e67a:	2204      	movs	r2, #4
 800e67c:	4640      	mov	r0, r8
 800e67e:	f007 f903 	bl	8015888 <uxr_next_input_reliable_buffer_available>
 800e682:	4603      	mov	r3, r0
 800e684:	a922      	add	r1, sp, #136	; 0x88
 800e686:	4620      	mov	r0, r4
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d1ea      	bne.n	800e662 <uxr_create_session+0x13e>
 800e68c:	9904      	ldr	r1, [sp, #16]
 800e68e:	463a      	mov	r2, r7
 800e690:	4620      	mov	r0, r4
 800e692:	f7ff f927 	bl	800d8e4 <write_submessage_acknack.isra.0>
 800e696:	e779      	b.n	800e58c <uxr_create_session+0x68>
 800e698:	4639      	mov	r1, r7
 800e69a:	4650      	mov	r0, sl
 800e69c:	f000 ff26 	bl	800f4ec <uxr_get_input_best_effort_stream>
 800e6a0:	2800      	cmp	r0, #0
 800e6a2:	f43f af73 	beq.w	800e58c <uxr_create_session+0x68>
 800e6a6:	4649      	mov	r1, r9
 800e6a8:	f006 ffda 	bl	8015660 <uxr_receive_best_effort_message>
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	f43f af6d 	beq.w	800e58c <uxr_create_session+0x68>
 800e6b2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800e6b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6b8:	a91a      	add	r1, sp, #104	; 0x68
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	f7ff fa96 	bl	800dbec <read_submessage_list>
 800e6c0:	e764      	b.n	800e58c <uxr_create_session+0x68>
 800e6c2:	4650      	mov	r0, sl
 800e6c4:	f000 fe62 	bl	800f38c <uxr_reset_stream_storage>
 800e6c8:	2001      	movs	r0, #1
 800e6ca:	b02b      	add	sp, #172	; 0xac
 800e6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d0:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800e6d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6d6:	a91a      	add	r1, sp, #104	; 0x68
 800e6d8:	4620      	mov	r0, r4
 800e6da:	f7ff fa87 	bl	800dbec <read_submessage_list>
 800e6de:	e7be      	b.n	800e65e <uxr_create_session+0x13a>

0800e6e0 <uxr_prepare_stream_to_write_submessage>:
 800e6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6e4:	b082      	sub	sp, #8
 800e6e6:	4682      	mov	sl, r0
 800e6e8:	4610      	mov	r0, r2
 800e6ea:	4615      	mov	r5, r2
 800e6ec:	461e      	mov	r6, r3
 800e6ee:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800e6f2:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800e6f6:	9101      	str	r1, [sp, #4]
 800e6f8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800e6fc:	f000 ff60 	bl	800f5c0 <uxr_submessage_padding>
 800e700:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e704:	f105 0904 	add.w	r9, r5, #4
 800e708:	2b01      	cmp	r3, #1
 800e70a:	4481      	add	r9, r0
 800e70c:	d01d      	beq.n	800e74a <uxr_prepare_stream_to_write_submessage+0x6a>
 800e70e:	2b02      	cmp	r3, #2
 800e710:	d116      	bne.n	800e740 <uxr_prepare_stream_to_write_submessage+0x60>
 800e712:	4621      	mov	r1, r4
 800e714:	f10a 0008 	add.w	r0, sl, #8
 800e718:	f000 fede 	bl	800f4d8 <uxr_get_output_reliable_stream>
 800e71c:	4604      	mov	r4, r0
 800e71e:	b158      	cbz	r0, 800e738 <uxr_prepare_stream_to_write_submessage+0x58>
 800e720:	4649      	mov	r1, r9
 800e722:	4632      	mov	r2, r6
 800e724:	f007 fa6c 	bl	8015c00 <uxr_prepare_reliable_buffer_to_write>
 800e728:	4604      	mov	r4, r0
 800e72a:	b12c      	cbz	r4, 800e738 <uxr_prepare_stream_to_write_submessage+0x58>
 800e72c:	4643      	mov	r3, r8
 800e72e:	b2aa      	uxth	r2, r5
 800e730:	4639      	mov	r1, r7
 800e732:	4630      	mov	r0, r6
 800e734:	f000 ff04 	bl	800f540 <uxr_buffer_submessage_header>
 800e738:	4620      	mov	r0, r4
 800e73a:	b002      	add	sp, #8
 800e73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e740:	2400      	movs	r4, #0
 800e742:	4620      	mov	r0, r4
 800e744:	b002      	add	sp, #8
 800e746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e74a:	4621      	mov	r1, r4
 800e74c:	f10a 0008 	add.w	r0, sl, #8
 800e750:	f000 feba 	bl	800f4c8 <uxr_get_output_best_effort_stream>
 800e754:	4604      	mov	r4, r0
 800e756:	2800      	cmp	r0, #0
 800e758:	d0ee      	beq.n	800e738 <uxr_prepare_stream_to_write_submessage+0x58>
 800e75a:	4649      	mov	r1, r9
 800e75c:	4632      	mov	r2, r6
 800e75e:	f007 f97f 	bl	8015a60 <uxr_prepare_best_effort_buffer_to_write>
 800e762:	4604      	mov	r4, r0
 800e764:	e7e1      	b.n	800e72a <uxr_prepare_stream_to_write_submessage+0x4a>
 800e766:	bf00      	nop

0800e768 <uxr_init_session_info>:
 800e768:	0e13      	lsrs	r3, r2, #24
 800e76a:	7043      	strb	r3, [r0, #1]
 800e76c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800e770:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e774:	7001      	strb	r1, [r0, #0]
 800e776:	70c3      	strb	r3, [r0, #3]
 800e778:	2109      	movs	r1, #9
 800e77a:	23ff      	movs	r3, #255	; 0xff
 800e77c:	f880 c002 	strb.w	ip, [r0, #2]
 800e780:	7102      	strb	r2, [r0, #4]
 800e782:	80c1      	strh	r1, [r0, #6]
 800e784:	7143      	strb	r3, [r0, #5]
 800e786:	4770      	bx	lr

0800e788 <uxr_buffer_create_session>:
 800e788:	b530      	push	{r4, r5, lr}
 800e78a:	b089      	sub	sp, #36	; 0x24
 800e78c:	2300      	movs	r3, #0
 800e78e:	4d12      	ldr	r5, [pc, #72]	; (800e7d8 <uxr_buffer_create_session+0x50>)
 800e790:	9307      	str	r3, [sp, #28]
 800e792:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e796:	2201      	movs	r2, #1
 800e798:	9301      	str	r3, [sp, #4]
 800e79a:	80c2      	strh	r2, [r0, #6]
 800e79c:	f88d 2004 	strb.w	r2, [sp, #4]
 800e7a0:	682a      	ldr	r2, [r5, #0]
 800e7a2:	9200      	str	r2, [sp, #0]
 800e7a4:	88aa      	ldrh	r2, [r5, #4]
 800e7a6:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e7aa:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800e7ae:	9202      	str	r2, [sp, #8]
 800e7b0:	460c      	mov	r4, r1
 800e7b2:	7802      	ldrb	r2, [r0, #0]
 800e7b4:	9303      	str	r3, [sp, #12]
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	f88d 200c 	strb.w	r2, [sp, #12]
 800e7bc:	4620      	mov	r0, r4
 800e7be:	2210      	movs	r2, #16
 800e7c0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800e7c4:	9306      	str	r3, [sp, #24]
 800e7c6:	f000 febb 	bl	800f540 <uxr_buffer_submessage_header>
 800e7ca:	4669      	mov	r1, sp
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	f001 feff 	bl	80105d0 <uxr_serialize_CREATE_CLIENT_Payload>
 800e7d2:	b009      	add	sp, #36	; 0x24
 800e7d4:	bd30      	pop	{r4, r5, pc}
 800e7d6:	bf00      	nop
 800e7d8:	080184d0 	.word	0x080184d0

0800e7dc <uxr_buffer_delete_session>:
 800e7dc:	b510      	push	{r4, lr}
 800e7de:	4b0c      	ldr	r3, [pc, #48]	; (800e810 <uxr_buffer_delete_session+0x34>)
 800e7e0:	b082      	sub	sp, #8
 800e7e2:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800e7e6:	f8ad c006 	strh.w	ip, [sp, #6]
 800e7ea:	460c      	mov	r4, r1
 800e7ec:	2202      	movs	r2, #2
 800e7ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e7f2:	80c2      	strh	r2, [r0, #6]
 800e7f4:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e7f8:	2204      	movs	r2, #4
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	2103      	movs	r1, #3
 800e7fe:	4620      	mov	r0, r4
 800e800:	f000 fe9e 	bl	800f540 <uxr_buffer_submessage_header>
 800e804:	a901      	add	r1, sp, #4
 800e806:	4620      	mov	r0, r4
 800e808:	f001 ff9c 	bl	8010744 <uxr_serialize_DELETE_Payload>
 800e80c:	b002      	add	sp, #8
 800e80e:	bd10      	pop	{r4, pc}
 800e810:	080184d0 	.word	0x080184d0

0800e814 <uxr_read_create_session_status>:
 800e814:	b510      	push	{r4, lr}
 800e816:	b088      	sub	sp, #32
 800e818:	4604      	mov	r4, r0
 800e81a:	4608      	mov	r0, r1
 800e81c:	a901      	add	r1, sp, #4
 800e81e:	f001 ffa1 	bl	8010764 <uxr_deserialize_STATUS_AGENT_Payload>
 800e822:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e826:	7163      	strb	r3, [r4, #5]
 800e828:	b008      	add	sp, #32
 800e82a:	bd10      	pop	{r4, pc}

0800e82c <uxr_read_delete_session_status>:
 800e82c:	b510      	push	{r4, lr}
 800e82e:	4604      	mov	r4, r0
 800e830:	b084      	sub	sp, #16
 800e832:	4608      	mov	r0, r1
 800e834:	a902      	add	r1, sp, #8
 800e836:	f001 ffc5 	bl	80107c4 <uxr_deserialize_STATUS_Payload>
 800e83a:	88e3      	ldrh	r3, [r4, #6]
 800e83c:	2b02      	cmp	r3, #2
 800e83e:	d001      	beq.n	800e844 <uxr_read_delete_session_status+0x18>
 800e840:	b004      	add	sp, #16
 800e842:	bd10      	pop	{r4, pc}
 800e844:	f10d 000a 	add.w	r0, sp, #10
 800e848:	f7fe fece 	bl	800d5e8 <uxr_object_id_from_raw>
 800e84c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800e850:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800e854:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e858:	b29b      	uxth	r3, r3
 800e85a:	2b02      	cmp	r3, #2
 800e85c:	bf04      	itt	eq
 800e85e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800e862:	7163      	strbeq	r3, [r4, #5]
 800e864:	b004      	add	sp, #16
 800e866:	bd10      	pop	{r4, pc}

0800e868 <uxr_stamp_create_session_header>:
 800e868:	b510      	push	{r4, lr}
 800e86a:	2208      	movs	r2, #8
 800e86c:	b08a      	sub	sp, #40	; 0x28
 800e86e:	4604      	mov	r4, r0
 800e870:	eb0d 0002 	add.w	r0, sp, r2
 800e874:	f7fe fb76 	bl	800cf64 <ucdr_init_buffer>
 800e878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e87c:	9400      	str	r4, [sp, #0]
 800e87e:	2300      	movs	r3, #0
 800e880:	461a      	mov	r2, r3
 800e882:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800e886:	a802      	add	r0, sp, #8
 800e888:	f001 f854 	bl	800f934 <uxr_serialize_message_header>
 800e88c:	b00a      	add	sp, #40	; 0x28
 800e88e:	bd10      	pop	{r4, pc}

0800e890 <uxr_stamp_session_header>:
 800e890:	b530      	push	{r4, r5, lr}
 800e892:	b08d      	sub	sp, #52	; 0x34
 800e894:	4604      	mov	r4, r0
 800e896:	460d      	mov	r5, r1
 800e898:	9203      	str	r2, [sp, #12]
 800e89a:	4619      	mov	r1, r3
 800e89c:	a804      	add	r0, sp, #16
 800e89e:	2208      	movs	r2, #8
 800e8a0:	f7fe fb60 	bl	800cf64 <ucdr_init_buffer>
 800e8a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8a8:	9b03      	ldr	r3, [sp, #12]
 800e8aa:	9400      	str	r4, [sp, #0]
 800e8ac:	462a      	mov	r2, r5
 800e8ae:	a804      	add	r0, sp, #16
 800e8b0:	f001 f840 	bl	800f934 <uxr_serialize_message_header>
 800e8b4:	b00d      	add	sp, #52	; 0x34
 800e8b6:	bd30      	pop	{r4, r5, pc}

0800e8b8 <uxr_read_session_header>:
 800e8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8bc:	4607      	mov	r7, r0
 800e8be:	b084      	sub	sp, #16
 800e8c0:	4608      	mov	r0, r1
 800e8c2:	460c      	mov	r4, r1
 800e8c4:	4615      	mov	r5, r2
 800e8c6:	461e      	mov	r6, r3
 800e8c8:	f7fe fb7c 	bl	800cfc4 <ucdr_buffer_remaining>
 800e8cc:	2808      	cmp	r0, #8
 800e8ce:	d803      	bhi.n	800e8d8 <uxr_read_session_header+0x20>
 800e8d0:	2000      	movs	r0, #0
 800e8d2:	b004      	add	sp, #16
 800e8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8d8:	f10d 080c 	add.w	r8, sp, #12
 800e8dc:	4633      	mov	r3, r6
 800e8de:	462a      	mov	r2, r5
 800e8e0:	f8cd 8000 	str.w	r8, [sp]
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	f10d 010b 	add.w	r1, sp, #11
 800e8ea:	f001 f841 	bl	800f970 <uxr_deserialize_message_header>
 800e8ee:	783a      	ldrb	r2, [r7, #0]
 800e8f0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d1eb      	bne.n	800e8d0 <uxr_read_session_header+0x18>
 800e8f8:	061b      	lsls	r3, r3, #24
 800e8fa:	d41c      	bmi.n	800e936 <uxr_read_session_header+0x7e>
 800e8fc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800e900:	787b      	ldrb	r3, [r7, #1]
 800e902:	429a      	cmp	r2, r3
 800e904:	d003      	beq.n	800e90e <uxr_read_session_header+0x56>
 800e906:	2001      	movs	r0, #1
 800e908:	f080 0001 	eor.w	r0, r0, #1
 800e90c:	e7e1      	b.n	800e8d2 <uxr_read_session_header+0x1a>
 800e90e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800e912:	78bb      	ldrb	r3, [r7, #2]
 800e914:	429a      	cmp	r2, r3
 800e916:	f107 0102 	add.w	r1, r7, #2
 800e91a:	d1f4      	bne.n	800e906 <uxr_read_session_header+0x4e>
 800e91c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800e920:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e924:	429a      	cmp	r2, r3
 800e926:	d1ee      	bne.n	800e906 <uxr_read_session_header+0x4e>
 800e928:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800e92c:	784b      	ldrb	r3, [r1, #1]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d1e9      	bne.n	800e906 <uxr_read_session_header+0x4e>
 800e932:	2000      	movs	r0, #0
 800e934:	e7e8      	b.n	800e908 <uxr_read_session_header+0x50>
 800e936:	2001      	movs	r0, #1
 800e938:	e7cb      	b.n	800e8d2 <uxr_read_session_header+0x1a>
 800e93a:	bf00      	nop

0800e93c <uxr_session_header_offset>:
 800e93c:	f990 3000 	ldrsb.w	r3, [r0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	bfac      	ite	ge
 800e944:	2008      	movge	r0, #8
 800e946:	2004      	movlt	r0, #4
 800e948:	4770      	bx	lr
 800e94a:	bf00      	nop

0800e94c <uxr_init_base_object_request>:
 800e94c:	b510      	push	{r4, lr}
 800e94e:	88c3      	ldrh	r3, [r0, #6]
 800e950:	b082      	sub	sp, #8
 800e952:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800e956:	9101      	str	r1, [sp, #4]
 800e958:	f1a3 010a 	sub.w	r1, r3, #10
 800e95c:	b289      	uxth	r1, r1
 800e95e:	42a1      	cmp	r1, r4
 800e960:	d80e      	bhi.n	800e980 <uxr_init_base_object_request+0x34>
 800e962:	3301      	adds	r3, #1
 800e964:	b29c      	uxth	r4, r3
 800e966:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e96a:	b2db      	uxtb	r3, r3
 800e96c:	80c4      	strh	r4, [r0, #6]
 800e96e:	9801      	ldr	r0, [sp, #4]
 800e970:	7011      	strb	r1, [r2, #0]
 800e972:	7053      	strb	r3, [r2, #1]
 800e974:	1c91      	adds	r1, r2, #2
 800e976:	f7fe fe4b 	bl	800d610 <uxr_object_id_to_raw>
 800e97a:	4620      	mov	r0, r4
 800e97c:	b002      	add	sp, #8
 800e97e:	bd10      	pop	{r4, pc}
 800e980:	230a      	movs	r3, #10
 800e982:	2100      	movs	r1, #0
 800e984:	461c      	mov	r4, r3
 800e986:	e7f1      	b.n	800e96c <uxr_init_base_object_request+0x20>

0800e988 <uxr_parse_base_object_request>:
 800e988:	b570      	push	{r4, r5, r6, lr}
 800e98a:	4604      	mov	r4, r0
 800e98c:	3002      	adds	r0, #2
 800e98e:	460d      	mov	r5, r1
 800e990:	4616      	mov	r6, r2
 800e992:	f7fe fe29 	bl	800d5e8 <uxr_object_id_from_raw>
 800e996:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800e99a:	8028      	strh	r0, [r5, #0]
 800e99c:	806b      	strh	r3, [r5, #2]
 800e99e:	7822      	ldrb	r2, [r4, #0]
 800e9a0:	7863      	ldrb	r3, [r4, #1]
 800e9a2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e9a6:	8033      	strh	r3, [r6, #0]
 800e9a8:	bd70      	pop	{r4, r5, r6, pc}
 800e9aa:	bf00      	nop

0800e9ac <uxr_init_framing_io>:
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	7041      	strb	r1, [r0, #1]
 800e9b0:	7003      	strb	r3, [r0, #0]
 800e9b2:	8583      	strh	r3, [r0, #44]	; 0x2c
 800e9b4:	4770      	bx	lr
 800e9b6:	bf00      	nop

0800e9b8 <uxr_write_framed_msg>:
 800e9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9bc:	4617      	mov	r7, r2
 800e9be:	7842      	ldrb	r2, [r0, #1]
 800e9c0:	b083      	sub	sp, #12
 800e9c2:	460e      	mov	r6, r1
 800e9c4:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 800e9c8:	469a      	mov	sl, r3
 800e9ca:	2901      	cmp	r1, #1
 800e9cc:	f04f 037e 	mov.w	r3, #126	; 0x7e
 800e9d0:	4604      	mov	r4, r0
 800e9d2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800e9d6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800e9da:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 800e9de:	f240 8137 	bls.w	800ec50 <uxr_write_framed_msg+0x298>
 800e9e2:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 800e9e6:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 800e9ea:	2901      	cmp	r1, #1
 800e9ec:	f04f 0202 	mov.w	r2, #2
 800e9f0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800e9f4:	f240 808f 	bls.w	800eb16 <uxr_write_framed_msg+0x15e>
 800e9f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9fa:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 800e9fe:	b2dd      	uxtb	r5, r3
 800ea00:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 800ea04:	2203      	movs	r2, #3
 800ea06:	2901      	cmp	r1, #1
 800ea08:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800ea0c:	f240 809a 	bls.w	800eb44 <uxr_write_framed_msg+0x18c>
 800ea10:	18a1      	adds	r1, r4, r2
 800ea12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea14:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 800ea18:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ea1c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 800ea20:	3201      	adds	r2, #1
 800ea22:	2801      	cmp	r0, #1
 800ea24:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800ea28:	f240 80a0 	bls.w	800eb6c <uxr_write_framed_msg+0x1b4>
 800ea2c:	18a0      	adds	r0, r4, r2
 800ea2e:	3201      	adds	r2, #1
 800ea30:	b2d2      	uxtb	r2, r2
 800ea32:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800ea36:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	f000 80a9 	beq.w	800eb92 <uxr_write_framed_msg+0x1da>
 800ea40:	f04f 0900 	mov.w	r9, #0
 800ea44:	46c8      	mov	r8, r9
 800ea46:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800ea4a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 800ea4e:	2901      	cmp	r1, #1
 800ea50:	f240 80c3 	bls.w	800ebda <uxr_write_framed_msg+0x222>
 800ea54:	2a29      	cmp	r2, #41	; 0x29
 800ea56:	f200 809f 	bhi.w	800eb98 <uxr_write_framed_msg+0x1e0>
 800ea5a:	18a1      	adds	r1, r4, r2
 800ea5c:	3201      	adds	r2, #1
 800ea5e:	b2d2      	uxtb	r2, r2
 800ea60:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 800ea64:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800ea68:	ea89 0303 	eor.w	r3, r9, r3
 800ea6c:	498c      	ldr	r1, [pc, #560]	; (800eca0 <uxr_write_framed_msg+0x2e8>)
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	f108 0801 	add.w	r8, r8, #1
 800ea74:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ea78:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800ea7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea7e:	4543      	cmp	r3, r8
 800ea80:	d8e1      	bhi.n	800ea46 <uxr_write_framed_msg+0x8e>
 800ea82:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800ea86:	fa5f f889 	uxtb.w	r8, r9
 800ea8a:	9301      	str	r3, [sp, #4]
 800ea8c:	f04f 0900 	mov.w	r9, #0
 800ea90:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 800ea94:	fa5f f18a 	uxtb.w	r1, sl
 800ea98:	2901      	cmp	r1, #1
 800ea9a:	d921      	bls.n	800eae0 <uxr_write_framed_msg+0x128>
 800ea9c:	2a29      	cmp	r2, #41	; 0x29
 800ea9e:	f240 80af 	bls.w	800ec00 <uxr_write_framed_msg+0x248>
 800eaa2:	2500      	movs	r5, #0
 800eaa4:	e000      	b.n	800eaa8 <uxr_write_framed_msg+0xf0>
 800eaa6:	b160      	cbz	r0, 800eac2 <uxr_write_framed_msg+0x10a>
 800eaa8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800eaac:	1b52      	subs	r2, r2, r5
 800eaae:	465b      	mov	r3, fp
 800eab0:	4421      	add	r1, r4
 800eab2:	4638      	mov	r0, r7
 800eab4:	47b0      	blx	r6
 800eab6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800eaba:	4405      	add	r5, r0
 800eabc:	4295      	cmp	r5, r2
 800eabe:	d3f2      	bcc.n	800eaa6 <uxr_write_framed_msg+0xee>
 800eac0:	d003      	beq.n	800eaca <uxr_write_framed_msg+0x112>
 800eac2:	2000      	movs	r0, #0
 800eac4:	b003      	add	sp, #12
 800eac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaca:	fa5f f18a 	uxtb.w	r1, sl
 800eace:	f04f 0300 	mov.w	r3, #0
 800ead2:	2901      	cmp	r1, #1
 800ead4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800ead8:	f04f 0200 	mov.w	r2, #0
 800eadc:	f200 8090 	bhi.w	800ec00 <uxr_write_framed_msg+0x248>
 800eae0:	1c51      	adds	r1, r2, #1
 800eae2:	b2c9      	uxtb	r1, r1
 800eae4:	2929      	cmp	r1, #41	; 0x29
 800eae6:	d8dc      	bhi.n	800eaa2 <uxr_write_framed_msg+0xea>
 800eae8:	18a5      	adds	r5, r4, r2
 800eaea:	4421      	add	r1, r4
 800eaec:	3202      	adds	r2, #2
 800eaee:	f088 0820 	eor.w	r8, r8, #32
 800eaf2:	4648      	mov	r0, r9
 800eaf4:	f04f 037d 	mov.w	r3, #125	; 0x7d
 800eaf8:	b2d2      	uxtb	r2, r2
 800eafa:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 800eafe:	f04f 0901 	mov.w	r9, #1
 800eb02:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 800eb06:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800eb0a:	2800      	cmp	r0, #0
 800eb0c:	f040 8085 	bne.w	800ec1a <uxr_write_framed_msg+0x262>
 800eb10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800eb14:	e7bc      	b.n	800ea90 <uxr_write_framed_msg+0xd8>
 800eb16:	4611      	mov	r1, r2
 800eb18:	f04f 0c03 	mov.w	ip, #3
 800eb1c:	2204      	movs	r2, #4
 800eb1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb20:	4421      	add	r1, r4
 800eb22:	b2dd      	uxtb	r5, r3
 800eb24:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 800eb28:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 800eb2c:	44a4      	add	ip, r4
 800eb2e:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 800eb32:	f080 0020 	eor.w	r0, r0, #32
 800eb36:	2901      	cmp	r1, #1
 800eb38:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 800eb3c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800eb40:	f63f af66 	bhi.w	800ea10 <uxr_write_framed_msg+0x58>
 800eb44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb46:	18a0      	adds	r0, r4, r2
 800eb48:	f085 0520 	eor.w	r5, r5, #32
 800eb4c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 800eb50:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800eb54:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 800eb58:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 800eb5c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 800eb60:	3202      	adds	r2, #2
 800eb62:	2801      	cmp	r0, #1
 800eb64:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800eb68:	f63f af60 	bhi.w	800ea2c <uxr_write_framed_msg+0x74>
 800eb6c:	1c50      	adds	r0, r2, #1
 800eb6e:	18a5      	adds	r5, r4, r2
 800eb70:	fa54 f080 	uxtab	r0, r4, r0
 800eb74:	3202      	adds	r2, #2
 800eb76:	f081 0120 	eor.w	r1, r1, #32
 800eb7a:	b2d2      	uxtb	r2, r2
 800eb7c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 800eb80:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 800eb84:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800eb88:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f47f af57 	bne.w	800ea40 <uxr_write_framed_msg+0x88>
 800eb92:	9301      	str	r3, [sp, #4]
 800eb94:	4698      	mov	r8, r3
 800eb96:	e779      	b.n	800ea8c <uxr_write_framed_msg+0xd4>
 800eb98:	2500      	movs	r5, #0
 800eb9a:	e001      	b.n	800eba0 <uxr_write_framed_msg+0x1e8>
 800eb9c:	2800      	cmp	r0, #0
 800eb9e:	d090      	beq.n	800eac2 <uxr_write_framed_msg+0x10a>
 800eba0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800eba4:	1b52      	subs	r2, r2, r5
 800eba6:	465b      	mov	r3, fp
 800eba8:	4421      	add	r1, r4
 800ebaa:	4638      	mov	r0, r7
 800ebac:	47b0      	blx	r6
 800ebae:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800ebb2:	4405      	add	r5, r0
 800ebb4:	4295      	cmp	r5, r2
 800ebb6:	d3f1      	bcc.n	800eb9c <uxr_write_framed_msg+0x1e4>
 800ebb8:	d183      	bne.n	800eac2 <uxr_write_framed_msg+0x10a>
 800ebba:	f04f 0300 	mov.w	r3, #0
 800ebbe:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800ebc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebc4:	4543      	cmp	r3, r8
 800ebc6:	d964      	bls.n	800ec92 <uxr_write_framed_msg+0x2da>
 800ebc8:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800ebcc:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 800ebd0:	2901      	cmp	r1, #1
 800ebd2:	f04f 0200 	mov.w	r2, #0
 800ebd6:	f63f af3d 	bhi.w	800ea54 <uxr_write_framed_msg+0x9c>
 800ebda:	1c51      	adds	r1, r2, #1
 800ebdc:	b2c9      	uxtb	r1, r1
 800ebde:	2929      	cmp	r1, #41	; 0x29
 800ebe0:	d8da      	bhi.n	800eb98 <uxr_write_framed_msg+0x1e0>
 800ebe2:	18a0      	adds	r0, r4, r2
 800ebe4:	4421      	add	r1, r4
 800ebe6:	f04f 057d 	mov.w	r5, #125	; 0x7d
 800ebea:	3202      	adds	r2, #2
 800ebec:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 800ebf0:	b2d2      	uxtb	r2, r2
 800ebf2:	f083 0020 	eor.w	r0, r3, #32
 800ebf6:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 800ebfa:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800ebfe:	e733      	b.n	800ea68 <uxr_write_framed_msg+0xb0>
 800ec00:	18a1      	adds	r1, r4, r2
 800ec02:	3201      	adds	r2, #1
 800ec04:	4648      	mov	r0, r9
 800ec06:	b2d2      	uxtb	r2, r2
 800ec08:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 800ec0c:	f04f 0901 	mov.w	r9, #1
 800ec10:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800ec14:	2800      	cmp	r0, #0
 800ec16:	f43f af7b 	beq.w	800eb10 <uxr_write_framed_msg+0x158>
 800ec1a:	2500      	movs	r5, #0
 800ec1c:	e002      	b.n	800ec24 <uxr_write_framed_msg+0x26c>
 800ec1e:	2800      	cmp	r0, #0
 800ec20:	f43f af4f 	beq.w	800eac2 <uxr_write_framed_msg+0x10a>
 800ec24:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800ec28:	1b52      	subs	r2, r2, r5
 800ec2a:	465b      	mov	r3, fp
 800ec2c:	4421      	add	r1, r4
 800ec2e:	4638      	mov	r0, r7
 800ec30:	47b0      	blx	r6
 800ec32:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800ec36:	4405      	add	r5, r0
 800ec38:	4295      	cmp	r5, r2
 800ec3a:	d3f0      	bcc.n	800ec1e <uxr_write_framed_msg+0x266>
 800ec3c:	f47f af41 	bne.w	800eac2 <uxr_write_framed_msg+0x10a>
 800ec40:	2300      	movs	r3, #0
 800ec42:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800ec46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec48:	b298      	uxth	r0, r3
 800ec4a:	b003      	add	sp, #12
 800ec4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec50:	217d      	movs	r1, #125	; 0x7d
 800ec52:	f082 0220 	eor.w	r2, r2, #32
 800ec56:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 800ec5a:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 800ec5e:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 800ec62:	2901      	cmp	r1, #1
 800ec64:	f04f 0203 	mov.w	r2, #3
 800ec68:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800ec6c:	d804      	bhi.n	800ec78 <uxr_write_framed_msg+0x2c0>
 800ec6e:	4611      	mov	r1, r2
 800ec70:	f04f 0c04 	mov.w	ip, #4
 800ec74:	2205      	movs	r2, #5
 800ec76:	e752      	b.n	800eb1e <uxr_write_framed_msg+0x166>
 800ec78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec7a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 800ec7e:	b2dd      	uxtb	r5, r3
 800ec80:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 800ec84:	2204      	movs	r2, #4
 800ec86:	2901      	cmp	r1, #1
 800ec88:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800ec8c:	f63f aec0 	bhi.w	800ea10 <uxr_write_framed_msg+0x58>
 800ec90:	e758      	b.n	800eb44 <uxr_write_framed_msg+0x18c>
 800ec92:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800ec96:	fa5f f889 	uxtb.w	r8, r9
 800ec9a:	9301      	str	r3, [sp, #4]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	e6f5      	b.n	800ea8c <uxr_write_framed_msg+0xd4>
 800eca0:	08018864 	.word	0x08018864

0800eca4 <uxr_framing_read_transport>:
 800eca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eca8:	4604      	mov	r4, r0
 800ecaa:	b083      	sub	sp, #12
 800ecac:	461f      	mov	r7, r3
 800ecae:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800ecb2:	4689      	mov	r9, r1
 800ecb4:	4692      	mov	sl, r2
 800ecb6:	f000 fc89 	bl	800f5cc <uxr_millis>
 800ecba:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800ecbe:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 800ecc2:	42b3      	cmp	r3, r6
 800ecc4:	4680      	mov	r8, r0
 800ecc6:	d061      	beq.n	800ed8c <uxr_framing_read_transport+0xe8>
 800ecc8:	d81c      	bhi.n	800ed04 <uxr_framing_read_transport+0x60>
 800ecca:	1e75      	subs	r5, r6, #1
 800eccc:	1aed      	subs	r5, r5, r3
 800ecce:	b2ed      	uxtb	r5, r5
 800ecd0:	2600      	movs	r6, #0
 800ecd2:	455d      	cmp	r5, fp
 800ecd4:	d81f      	bhi.n	800ed16 <uxr_framing_read_transport+0x72>
 800ecd6:	19ab      	adds	r3, r5, r6
 800ecd8:	455b      	cmp	r3, fp
 800ecda:	bf84      	itt	hi
 800ecdc:	ebab 0605 	subhi.w	r6, fp, r5
 800ece0:	b2f6      	uxtbhi	r6, r6
 800ece2:	b9ed      	cbnz	r5, 800ed20 <uxr_framing_read_transport+0x7c>
 800ece4:	f04f 0b00 	mov.w	fp, #0
 800ece8:	f000 fc70 	bl	800f5cc <uxr_millis>
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	eba0 0808 	sub.w	r8, r0, r8
 800ecf2:	eba3 0308 	sub.w	r3, r3, r8
 800ecf6:	4658      	mov	r0, fp
 800ecf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ecfc:	603b      	str	r3, [r7, #0]
 800ecfe:	b003      	add	sp, #12
 800ed00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed04:	2e00      	cmp	r6, #0
 800ed06:	d049      	beq.n	800ed9c <uxr_framing_read_transport+0xf8>
 800ed08:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 800ed0c:	b2ed      	uxtb	r5, r5
 800ed0e:	3e01      	subs	r6, #1
 800ed10:	455d      	cmp	r5, fp
 800ed12:	b2f6      	uxtb	r6, r6
 800ed14:	d9df      	bls.n	800ecd6 <uxr_framing_read_transport+0x32>
 800ed16:	fa5f f58b 	uxtb.w	r5, fp
 800ed1a:	2600      	movs	r6, #0
 800ed1c:	2d00      	cmp	r5, #0
 800ed1e:	d0e1      	beq.n	800ece4 <uxr_framing_read_transport+0x40>
 800ed20:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800ed24:	3102      	adds	r1, #2
 800ed26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed28:	9300      	str	r3, [sp, #0]
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	4421      	add	r1, r4
 800ed2e:	462a      	mov	r2, r5
 800ed30:	4650      	mov	r0, sl
 800ed32:	47c8      	blx	r9
 800ed34:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800ed38:	4a1a      	ldr	r2, [pc, #104]	; (800eda4 <uxr_framing_read_transport+0x100>)
 800ed3a:	4403      	add	r3, r0
 800ed3c:	0859      	lsrs	r1, r3, #1
 800ed3e:	fba2 2101 	umull	r2, r1, r2, r1
 800ed42:	0889      	lsrs	r1, r1, #2
 800ed44:	222a      	movs	r2, #42	; 0x2a
 800ed46:	fb02 3111 	mls	r1, r2, r1, r3
 800ed4a:	4683      	mov	fp, r0
 800ed4c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 800ed50:	2800      	cmp	r0, #0
 800ed52:	d0c7      	beq.n	800ece4 <uxr_framing_read_transport+0x40>
 800ed54:	42a8      	cmp	r0, r5
 800ed56:	d1c7      	bne.n	800ece8 <uxr_framing_read_transport+0x44>
 800ed58:	2e00      	cmp	r6, #0
 800ed5a:	d0c5      	beq.n	800ece8 <uxr_framing_read_transport+0x44>
 800ed5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed5e:	9300      	str	r3, [sp, #0]
 800ed60:	3102      	adds	r1, #2
 800ed62:	4632      	mov	r2, r6
 800ed64:	4421      	add	r1, r4
 800ed66:	2300      	movs	r3, #0
 800ed68:	4650      	mov	r0, sl
 800ed6a:	47c8      	blx	r9
 800ed6c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800ed70:	4a0c      	ldr	r2, [pc, #48]	; (800eda4 <uxr_framing_read_transport+0x100>)
 800ed72:	180b      	adds	r3, r1, r0
 800ed74:	0859      	lsrs	r1, r3, #1
 800ed76:	fba2 1201 	umull	r1, r2, r2, r1
 800ed7a:	0892      	lsrs	r2, r2, #2
 800ed7c:	212a      	movs	r1, #42	; 0x2a
 800ed7e:	fb01 3312 	mls	r3, r1, r2, r3
 800ed82:	eb00 0b05 	add.w	fp, r0, r5
 800ed86:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800ed8a:	e7ad      	b.n	800ece8 <uxr_framing_read_transport+0x44>
 800ed8c:	2600      	movs	r6, #0
 800ed8e:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 800ed92:	85a6      	strh	r6, [r4, #44]	; 0x2c
 800ed94:	d9bf      	bls.n	800ed16 <uxr_framing_read_transport+0x72>
 800ed96:	2102      	movs	r1, #2
 800ed98:	2529      	movs	r5, #41	; 0x29
 800ed9a:	e7c4      	b.n	800ed26 <uxr_framing_read_transport+0x82>
 800ed9c:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 800eda0:	b2ed      	uxtb	r5, r5
 800eda2:	e796      	b.n	800ecd2 <uxr_framing_read_transport+0x2e>
 800eda4:	30c30c31 	.word	0x30c30c31

0800eda8 <uxr_read_framed_msg>:
 800eda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edac:	461e      	mov	r6, r3
 800edae:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 800edb2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800edb6:	429d      	cmp	r5, r3
 800edb8:	b083      	sub	sp, #12
 800edba:	4604      	mov	r4, r0
 800edbc:	4688      	mov	r8, r1
 800edbe:	4691      	mov	r9, r2
 800edc0:	f000 8188 	beq.w	800f0d4 <uxr_read_framed_msg+0x32c>
 800edc4:	7823      	ldrb	r3, [r4, #0]
 800edc6:	4dc1      	ldr	r5, [pc, #772]	; (800f0cc <uxr_read_framed_msg+0x324>)
 800edc8:	4fc1      	ldr	r7, [pc, #772]	; (800f0d0 <uxr_read_framed_msg+0x328>)
 800edca:	2b07      	cmp	r3, #7
 800edcc:	d8fd      	bhi.n	800edca <uxr_read_framed_msg+0x22>
 800edce:	e8df f013 	tbh	[pc, r3, lsl #1]
 800edd2:	0115      	.short	0x0115
 800edd4:	00d600f6 	.word	0x00d600f6
 800edd8:	009000b9 	.word	0x009000b9
 800eddc:	0030004d 	.word	0x0030004d
 800ede0:	0008      	.short	0x0008
 800ede2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800ede6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800edea:	4299      	cmp	r1, r3
 800edec:	f000 814a 	beq.w	800f084 <uxr_read_framed_msg+0x2dc>
 800edf0:	18e2      	adds	r2, r4, r3
 800edf2:	7892      	ldrb	r2, [r2, #2]
 800edf4:	2a7d      	cmp	r2, #125	; 0x7d
 800edf6:	f000 8199 	beq.w	800f12c <uxr_read_framed_msg+0x384>
 800edfa:	3301      	adds	r3, #1
 800edfc:	0858      	lsrs	r0, r3, #1
 800edfe:	fba5 1000 	umull	r1, r0, r5, r0
 800ee02:	0880      	lsrs	r0, r0, #2
 800ee04:	212a      	movs	r1, #42	; 0x2a
 800ee06:	fb01 3310 	mls	r3, r1, r0, r3
 800ee0a:	2a7e      	cmp	r2, #126	; 0x7e
 800ee0c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800ee10:	f000 8252 	beq.w	800f2b8 <uxr_read_framed_msg+0x510>
 800ee14:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800ee16:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800ee18:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	2200      	movs	r2, #0
 800ee20:	4299      	cmp	r1, r3
 800ee22:	86a3      	strh	r3, [r4, #52]	; 0x34
 800ee24:	7022      	strb	r2, [r4, #0]
 800ee26:	f000 8179 	beq.w	800f11c <uxr_read_framed_msg+0x374>
 800ee2a:	2000      	movs	r0, #0
 800ee2c:	b003      	add	sp, #12
 800ee2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee32:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800ee36:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800ee3a:	4299      	cmp	r1, r3
 800ee3c:	f000 8131 	beq.w	800f0a2 <uxr_read_framed_msg+0x2fa>
 800ee40:	18e2      	adds	r2, r4, r3
 800ee42:	7890      	ldrb	r0, [r2, #2]
 800ee44:	287d      	cmp	r0, #125	; 0x7d
 800ee46:	f000 8190 	beq.w	800f16a <uxr_read_framed_msg+0x3c2>
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	085a      	lsrs	r2, r3, #1
 800ee4e:	fba5 1202 	umull	r1, r2, r5, r2
 800ee52:	0892      	lsrs	r2, r2, #2
 800ee54:	212a      	movs	r1, #42	; 0x2a
 800ee56:	fb01 3312 	mls	r3, r1, r2, r3
 800ee5a:	287e      	cmp	r0, #126	; 0x7e
 800ee5c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800ee60:	f000 821a 	beq.w	800f298 <uxr_read_framed_msg+0x4f0>
 800ee64:	2307      	movs	r3, #7
 800ee66:	86a0      	strh	r0, [r4, #52]	; 0x34
 800ee68:	7023      	strb	r3, [r4, #0]
 800ee6a:	e7ae      	b.n	800edca <uxr_read_framed_msg+0x22>
 800ee6c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800ee6e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 800ee72:	459e      	cmp	lr, r3
 800ee74:	d938      	bls.n	800eee8 <uxr_read_framed_msg+0x140>
 800ee76:	ee07 8a90 	vmov	s15, r8
 800ee7a:	212a      	movs	r1, #42	; 0x2a
 800ee7c:	e020      	b.n	800eec0 <uxr_read_framed_msg+0x118>
 800ee7e:	f89b c002 	ldrb.w	ip, [fp, #2]
 800ee82:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 800ee86:	f000 80d4 	beq.w	800f032 <uxr_read_framed_msg+0x28a>
 800ee8a:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 800ee8e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800ee92:	f000 8219 	beq.w	800f2c8 <uxr_read_framed_msg+0x520>
 800ee96:	f806 c003 	strb.w	ip, [r6, r3]
 800ee9a:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 800ee9e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800eea0:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 800eea4:	ea8a 000c 	eor.w	r0, sl, ip
 800eea8:	b2c0      	uxtb	r0, r0
 800eeaa:	3301      	adds	r3, #1
 800eeac:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800eeb0:	b29b      	uxth	r3, r3
 800eeb2:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800eeb6:	4573      	cmp	r3, lr
 800eeb8:	8663      	strh	r3, [r4, #50]	; 0x32
 800eeba:	86e2      	strh	r2, [r4, #54]	; 0x36
 800eebc:	f080 8120 	bcs.w	800f100 <uxr_read_framed_msg+0x358>
 800eec0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 800eec4:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 800eec8:	f100 0c01 	add.w	ip, r0, #1
 800eecc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800eed0:	fba5 8202 	umull	r8, r2, r5, r2
 800eed4:	0892      	lsrs	r2, r2, #2
 800eed6:	4582      	cmp	sl, r0
 800eed8:	eb04 0b00 	add.w	fp, r4, r0
 800eedc:	fb01 c212 	mls	r2, r1, r2, ip
 800eee0:	d1cd      	bne.n	800ee7e <uxr_read_framed_msg+0xd6>
 800eee2:	ee17 8a90 	vmov	r8, s15
 800eee6:	459e      	cmp	lr, r3
 800eee8:	f040 8111 	bne.w	800f10e <uxr_read_framed_msg+0x366>
 800eeec:	2306      	movs	r3, #6
 800eeee:	7023      	strb	r3, [r4, #0]
 800eef0:	e76b      	b.n	800edca <uxr_read_framed_msg+0x22>
 800eef2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800eef6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800eefa:	4298      	cmp	r0, r3
 800eefc:	f000 80c2 	beq.w	800f084 <uxr_read_framed_msg+0x2dc>
 800ef00:	18e2      	adds	r2, r4, r3
 800ef02:	7891      	ldrb	r1, [r2, #2]
 800ef04:	297d      	cmp	r1, #125	; 0x7d
 800ef06:	f000 814c 	beq.w	800f1a2 <uxr_read_framed_msg+0x3fa>
 800ef0a:	3301      	adds	r3, #1
 800ef0c:	085a      	lsrs	r2, r3, #1
 800ef0e:	fba5 0202 	umull	r0, r2, r5, r2
 800ef12:	0892      	lsrs	r2, r2, #2
 800ef14:	202a      	movs	r0, #42	; 0x2a
 800ef16:	fb00 3312 	mls	r3, r0, r2, r3
 800ef1a:	297e      	cmp	r1, #126	; 0x7e
 800ef1c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800ef20:	f000 81ca 	beq.w	800f2b8 <uxr_read_framed_msg+0x510>
 800ef24:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ef26:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800ef2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ef2c:	b29b      	uxth	r3, r3
 800ef2e:	2000      	movs	r0, #0
 800ef30:	428b      	cmp	r3, r1
 800ef32:	8623      	strh	r3, [r4, #48]	; 0x30
 800ef34:	8660      	strh	r0, [r4, #50]	; 0x32
 800ef36:	86e0      	strh	r0, [r4, #54]	; 0x36
 800ef38:	f240 80df 	bls.w	800f0fa <uxr_read_framed_msg+0x352>
 800ef3c:	7020      	strb	r0, [r4, #0]
 800ef3e:	b003      	add	sp, #12
 800ef40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef44:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800ef48:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800ef4c:	4299      	cmp	r1, r3
 800ef4e:	f000 80a8 	beq.w	800f0a2 <uxr_read_framed_msg+0x2fa>
 800ef52:	18e2      	adds	r2, r4, r3
 800ef54:	7890      	ldrb	r0, [r2, #2]
 800ef56:	287d      	cmp	r0, #125	; 0x7d
 800ef58:	f000 8164 	beq.w	800f224 <uxr_read_framed_msg+0x47c>
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	085a      	lsrs	r2, r3, #1
 800ef60:	fba5 1202 	umull	r1, r2, r5, r2
 800ef64:	0892      	lsrs	r2, r2, #2
 800ef66:	212a      	movs	r1, #42	; 0x2a
 800ef68:	fb01 3312 	mls	r3, r1, r2, r3
 800ef6c:	287e      	cmp	r0, #126	; 0x7e
 800ef6e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800ef72:	f000 8191 	beq.w	800f298 <uxr_read_framed_msg+0x4f0>
 800ef76:	2304      	movs	r3, #4
 800ef78:	8620      	strh	r0, [r4, #48]	; 0x30
 800ef7a:	7023      	strb	r3, [r4, #0]
 800ef7c:	e725      	b.n	800edca <uxr_read_framed_msg+0x22>
 800ef7e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800ef82:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800ef86:	4290      	cmp	r0, r2
 800ef88:	f000 80b3 	beq.w	800f0f2 <uxr_read_framed_msg+0x34a>
 800ef8c:	18a3      	adds	r3, r4, r2
 800ef8e:	7899      	ldrb	r1, [r3, #2]
 800ef90:	297d      	cmp	r1, #125	; 0x7d
 800ef92:	f000 8164 	beq.w	800f25e <uxr_read_framed_msg+0x4b6>
 800ef96:	3201      	adds	r2, #1
 800ef98:	0850      	lsrs	r0, r2, #1
 800ef9a:	fba5 3000 	umull	r3, r0, r5, r0
 800ef9e:	0880      	lsrs	r0, r0, #2
 800efa0:	232a      	movs	r3, #42	; 0x2a
 800efa2:	fb03 2210 	mls	r2, r3, r0, r2
 800efa6:	297e      	cmp	r1, #126	; 0x7e
 800efa8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800efac:	f000 8188 	beq.w	800f2c0 <uxr_read_framed_msg+0x518>
 800efb0:	7863      	ldrb	r3, [r4, #1]
 800efb2:	428b      	cmp	r3, r1
 800efb4:	bf0c      	ite	eq
 800efb6:	2303      	moveq	r3, #3
 800efb8:	2300      	movne	r3, #0
 800efba:	7023      	strb	r3, [r4, #0]
 800efbc:	e705      	b.n	800edca <uxr_read_framed_msg+0x22>
 800efbe:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800efc2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800efc6:	2200      	movs	r2, #0
 800efc8:	4299      	cmp	r1, r3
 800efca:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 800efce:	d06c      	beq.n	800f0aa <uxr_read_framed_msg+0x302>
 800efd0:	18e2      	adds	r2, r4, r3
 800efd2:	7890      	ldrb	r0, [r2, #2]
 800efd4:	287d      	cmp	r0, #125	; 0x7d
 800efd6:	f000 8101 	beq.w	800f1dc <uxr_read_framed_msg+0x434>
 800efda:	3301      	adds	r3, #1
 800efdc:	085a      	lsrs	r2, r3, #1
 800efde:	fba5 1202 	umull	r1, r2, r5, r2
 800efe2:	0892      	lsrs	r2, r2, #2
 800efe4:	212a      	movs	r1, #42	; 0x2a
 800efe6:	fb01 3312 	mls	r3, r1, r2, r3
 800efea:	287e      	cmp	r0, #126	; 0x7e
 800efec:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 800eff0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800eff4:	d059      	beq.n	800f0aa <uxr_read_framed_msg+0x302>
 800eff6:	2302      	movs	r3, #2
 800eff8:	7023      	strb	r3, [r4, #0]
 800effa:	e6e6      	b.n	800edca <uxr_read_framed_msg+0x22>
 800effc:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 800f000:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800f004:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 800f008:	1c51      	adds	r1, r2, #1
 800f00a:	084b      	lsrs	r3, r1, #1
 800f00c:	fba5 c303 	umull	ip, r3, r5, r3
 800f010:	089b      	lsrs	r3, r3, #2
 800f012:	fb0e 1313 	mls	r3, lr, r3, r1
 800f016:	4592      	cmp	sl, r2
 800f018:	eb04 0002 	add.w	r0, r4, r2
 800f01c:	b2da      	uxtb	r2, r3
 800f01e:	f43f af04 	beq.w	800ee2a <uxr_read_framed_msg+0x82>
 800f022:	7883      	ldrb	r3, [r0, #2]
 800f024:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800f028:	2b7e      	cmp	r3, #126	; 0x7e
 800f02a:	d1ed      	bne.n	800f008 <uxr_read_framed_msg+0x260>
 800f02c:	2301      	movs	r3, #1
 800f02e:	7023      	strb	r3, [r4, #0]
 800f030:	e6cb      	b.n	800edca <uxr_read_framed_msg+0x22>
 800f032:	f100 0c01 	add.w	ip, r0, #1
 800f036:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f03a:	fba5 8202 	umull	r8, r2, r5, r2
 800f03e:	0892      	lsrs	r2, r2, #2
 800f040:	fb01 c212 	mls	r2, r1, r2, ip
 800f044:	eb04 0c02 	add.w	ip, r4, r2
 800f048:	b2d2      	uxtb	r2, r2
 800f04a:	4592      	cmp	sl, r2
 800f04c:	f100 0002 	add.w	r0, r0, #2
 800f050:	f43f af47 	beq.w	800eee2 <uxr_read_framed_msg+0x13a>
 800f054:	0842      	lsrs	r2, r0, #1
 800f056:	f89c a002 	ldrb.w	sl, [ip, #2]
 800f05a:	fba5 8202 	umull	r8, r2, r5, r2
 800f05e:	0892      	lsrs	r2, r2, #2
 800f060:	fb01 0012 	mls	r0, r1, r2, r0
 800f064:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 800f068:	f08a 0c20 	eor.w	ip, sl, #32
 800f06c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 800f070:	f47f af11 	bne.w	800ee96 <uxr_read_framed_msg+0xee>
 800f074:	459e      	cmp	lr, r3
 800f076:	ee17 8a90 	vmov	r8, s15
 800f07a:	f43f af37 	beq.w	800eeec <uxr_read_framed_msg+0x144>
 800f07e:	2301      	movs	r3, #1
 800f080:	7023      	strb	r3, [r4, #0]
 800f082:	e6a2      	b.n	800edca <uxr_read_framed_msg+0x22>
 800f084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f086:	9300      	str	r3, [sp, #0]
 800f088:	2301      	movs	r3, #1
 800f08a:	9301      	str	r3, [sp, #4]
 800f08c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f08e:	464a      	mov	r2, r9
 800f090:	4641      	mov	r1, r8
 800f092:	4620      	mov	r0, r4
 800f094:	f7ff fe06 	bl	800eca4 <uxr_framing_read_transport>
 800f098:	2800      	cmp	r0, #0
 800f09a:	f43f aec6 	beq.w	800ee2a <uxr_read_framed_msg+0x82>
 800f09e:	7823      	ldrb	r3, [r4, #0]
 800f0a0:	e693      	b.n	800edca <uxr_read_framed_msg+0x22>
 800f0a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f0a4:	9300      	str	r3, [sp, #0]
 800f0a6:	2302      	movs	r3, #2
 800f0a8:	e7ef      	b.n	800f08a <uxr_read_framed_msg+0x2e2>
 800f0aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f0ac:	9300      	str	r3, [sp, #0]
 800f0ae:	2304      	movs	r3, #4
 800f0b0:	9301      	str	r3, [sp, #4]
 800f0b2:	464a      	mov	r2, r9
 800f0b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f0b6:	4641      	mov	r1, r8
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	f7ff fdf3 	bl	800eca4 <uxr_framing_read_transport>
 800f0be:	2800      	cmp	r0, #0
 800f0c0:	d1ed      	bne.n	800f09e <uxr_read_framed_msg+0x2f6>
 800f0c2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800f0c6:	2b7e      	cmp	r3, #126	; 0x7e
 800f0c8:	d0e9      	beq.n	800f09e <uxr_read_framed_msg+0x2f6>
 800f0ca:	e6ae      	b.n	800ee2a <uxr_read_framed_msg+0x82>
 800f0cc:	30c30c31 	.word	0x30c30c31
 800f0d0:	08018864 	.word	0x08018864
 800f0d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f0d6:	9300      	str	r3, [sp, #0]
 800f0d8:	2305      	movs	r3, #5
 800f0da:	9301      	str	r3, [sp, #4]
 800f0dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f0de:	f7ff fde1 	bl	800eca4 <uxr_framing_read_transport>
 800f0e2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800f0e6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	f43f ae9d 	beq.w	800ee2a <uxr_read_framed_msg+0x82>
 800f0f0:	e668      	b.n	800edc4 <uxr_read_framed_msg+0x1c>
 800f0f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f0f4:	9300      	str	r3, [sp, #0]
 800f0f6:	2303      	movs	r3, #3
 800f0f8:	e7c7      	b.n	800f08a <uxr_read_framed_msg+0x2e2>
 800f0fa:	2305      	movs	r3, #5
 800f0fc:	7023      	strb	r3, [r4, #0]
 800f0fe:	e664      	b.n	800edca <uxr_read_framed_msg+0x22>
 800f100:	ee17 8a90 	vmov	r8, s15
 800f104:	f43f aef2 	beq.w	800eeec <uxr_read_framed_msg+0x144>
 800f108:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 800f10c:	d08e      	beq.n	800f02c <uxr_read_framed_msg+0x284>
 800f10e:	ebae 0303 	sub.w	r3, lr, r3
 800f112:	3302      	adds	r3, #2
 800f114:	9301      	str	r3, [sp, #4]
 800f116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f118:	9300      	str	r3, [sp, #0]
 800f11a:	e7b7      	b.n	800f08c <uxr_read_framed_msg+0x2e4>
 800f11c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f11e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800f122:	7013      	strb	r3, [r2, #0]
 800f124:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 800f126:	b003      	add	sp, #12
 800f128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f12c:	f103 0c01 	add.w	ip, r3, #1
 800f130:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f134:	fba5 0202 	umull	r0, r2, r5, r2
 800f138:	0892      	lsrs	r2, r2, #2
 800f13a:	202a      	movs	r0, #42	; 0x2a
 800f13c:	fb00 c212 	mls	r2, r0, r2, ip
 800f140:	fa5f fc82 	uxtb.w	ip, r2
 800f144:	4561      	cmp	r1, ip
 800f146:	d09d      	beq.n	800f084 <uxr_read_framed_msg+0x2dc>
 800f148:	3302      	adds	r3, #2
 800f14a:	4422      	add	r2, r4
 800f14c:	0859      	lsrs	r1, r3, #1
 800f14e:	7892      	ldrb	r2, [r2, #2]
 800f150:	fba5 c101 	umull	ip, r1, r5, r1
 800f154:	0889      	lsrs	r1, r1, #2
 800f156:	fb00 3311 	mls	r3, r0, r1, r3
 800f15a:	2a7e      	cmp	r2, #126	; 0x7e
 800f15c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800f160:	f000 80aa 	beq.w	800f2b8 <uxr_read_framed_msg+0x510>
 800f164:	f082 0220 	eor.w	r2, r2, #32
 800f168:	e654      	b.n	800ee14 <uxr_read_framed_msg+0x6c>
 800f16a:	1c58      	adds	r0, r3, #1
 800f16c:	0842      	lsrs	r2, r0, #1
 800f16e:	fba5 c202 	umull	ip, r2, r5, r2
 800f172:	0892      	lsrs	r2, r2, #2
 800f174:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800f178:	fb0c 0212 	mls	r2, ip, r2, r0
 800f17c:	b2d0      	uxtb	r0, r2
 800f17e:	4281      	cmp	r1, r0
 800f180:	d08f      	beq.n	800f0a2 <uxr_read_framed_msg+0x2fa>
 800f182:	4422      	add	r2, r4
 800f184:	3302      	adds	r3, #2
 800f186:	7890      	ldrb	r0, [r2, #2]
 800f188:	085a      	lsrs	r2, r3, #1
 800f18a:	fba5 1202 	umull	r1, r2, r5, r2
 800f18e:	0892      	lsrs	r2, r2, #2
 800f190:	fb0c 3312 	mls	r3, ip, r2, r3
 800f194:	287e      	cmp	r0, #126	; 0x7e
 800f196:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800f19a:	d07d      	beq.n	800f298 <uxr_read_framed_msg+0x4f0>
 800f19c:	f080 0020 	eor.w	r0, r0, #32
 800f1a0:	e660      	b.n	800ee64 <uxr_read_framed_msg+0xbc>
 800f1a2:	1c59      	adds	r1, r3, #1
 800f1a4:	084a      	lsrs	r2, r1, #1
 800f1a6:	fba5 c202 	umull	ip, r2, r5, r2
 800f1aa:	0892      	lsrs	r2, r2, #2
 800f1ac:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800f1b0:	fb0c 1212 	mls	r2, ip, r2, r1
 800f1b4:	b2d1      	uxtb	r1, r2
 800f1b6:	4288      	cmp	r0, r1
 800f1b8:	f43f af64 	beq.w	800f084 <uxr_read_framed_msg+0x2dc>
 800f1bc:	4422      	add	r2, r4
 800f1be:	3302      	adds	r3, #2
 800f1c0:	7891      	ldrb	r1, [r2, #2]
 800f1c2:	085a      	lsrs	r2, r3, #1
 800f1c4:	fba5 0202 	umull	r0, r2, r5, r2
 800f1c8:	0892      	lsrs	r2, r2, #2
 800f1ca:	fb0c 3312 	mls	r3, ip, r2, r3
 800f1ce:	297e      	cmp	r1, #126	; 0x7e
 800f1d0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800f1d4:	d070      	beq.n	800f2b8 <uxr_read_framed_msg+0x510>
 800f1d6:	f081 0120 	eor.w	r1, r1, #32
 800f1da:	e6a3      	b.n	800ef24 <uxr_read_framed_msg+0x17c>
 800f1dc:	f103 0c01 	add.w	ip, r3, #1
 800f1e0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f1e4:	fba5 0202 	umull	r0, r2, r5, r2
 800f1e8:	0892      	lsrs	r2, r2, #2
 800f1ea:	202a      	movs	r0, #42	; 0x2a
 800f1ec:	fb00 c212 	mls	r2, r0, r2, ip
 800f1f0:	fa5f fc82 	uxtb.w	ip, r2
 800f1f4:	4561      	cmp	r1, ip
 800f1f6:	f43f af58 	beq.w	800f0aa <uxr_read_framed_msg+0x302>
 800f1fa:	4422      	add	r2, r4
 800f1fc:	3302      	adds	r3, #2
 800f1fe:	7891      	ldrb	r1, [r2, #2]
 800f200:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 800f204:	085a      	lsrs	r2, r3, #1
 800f206:	fba5 c202 	umull	ip, r2, r5, r2
 800f20a:	0892      	lsrs	r2, r2, #2
 800f20c:	fb00 3312 	mls	r3, r0, r2, r3
 800f210:	297e      	cmp	r1, #126	; 0x7e
 800f212:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800f216:	f43f af48 	beq.w	800f0aa <uxr_read_framed_msg+0x302>
 800f21a:	f081 0120 	eor.w	r1, r1, #32
 800f21e:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 800f222:	e6e8      	b.n	800eff6 <uxr_read_framed_msg+0x24e>
 800f224:	1c58      	adds	r0, r3, #1
 800f226:	0842      	lsrs	r2, r0, #1
 800f228:	fba5 c202 	umull	ip, r2, r5, r2
 800f22c:	0892      	lsrs	r2, r2, #2
 800f22e:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800f232:	fb0c 0212 	mls	r2, ip, r2, r0
 800f236:	b2d0      	uxtb	r0, r2
 800f238:	4281      	cmp	r1, r0
 800f23a:	f43f af32 	beq.w	800f0a2 <uxr_read_framed_msg+0x2fa>
 800f23e:	4422      	add	r2, r4
 800f240:	3302      	adds	r3, #2
 800f242:	7890      	ldrb	r0, [r2, #2]
 800f244:	085a      	lsrs	r2, r3, #1
 800f246:	fba5 1202 	umull	r1, r2, r5, r2
 800f24a:	0892      	lsrs	r2, r2, #2
 800f24c:	fb0c 3312 	mls	r3, ip, r2, r3
 800f250:	287e      	cmp	r0, #126	; 0x7e
 800f252:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800f256:	d01f      	beq.n	800f298 <uxr_read_framed_msg+0x4f0>
 800f258:	f080 0020 	eor.w	r0, r0, #32
 800f25c:	e68b      	b.n	800ef76 <uxr_read_framed_msg+0x1ce>
 800f25e:	1c51      	adds	r1, r2, #1
 800f260:	084b      	lsrs	r3, r1, #1
 800f262:	fba5 c303 	umull	ip, r3, r5, r3
 800f266:	089b      	lsrs	r3, r3, #2
 800f268:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800f26c:	fb0c 1313 	mls	r3, ip, r3, r1
 800f270:	b2d9      	uxtb	r1, r3
 800f272:	4288      	cmp	r0, r1
 800f274:	f43f af3d 	beq.w	800f0f2 <uxr_read_framed_msg+0x34a>
 800f278:	3202      	adds	r2, #2
 800f27a:	4423      	add	r3, r4
 800f27c:	0850      	lsrs	r0, r2, #1
 800f27e:	789b      	ldrb	r3, [r3, #2]
 800f280:	fba5 1000 	umull	r1, r0, r5, r0
 800f284:	0880      	lsrs	r0, r0, #2
 800f286:	fb0c 2210 	mls	r2, ip, r0, r2
 800f28a:	2b7e      	cmp	r3, #126	; 0x7e
 800f28c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800f290:	d016      	beq.n	800f2c0 <uxr_read_framed_msg+0x518>
 800f292:	f083 0120 	eor.w	r1, r3, #32
 800f296:	e68b      	b.n	800efb0 <uxr_read_framed_msg+0x208>
 800f298:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f29a:	9300      	str	r3, [sp, #0]
 800f29c:	2302      	movs	r3, #2
 800f29e:	9301      	str	r3, [sp, #4]
 800f2a0:	464a      	mov	r2, r9
 800f2a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f2a4:	4641      	mov	r1, r8
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	f7ff fcfc 	bl	800eca4 <uxr_framing_read_transport>
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	f47f aef6 	bne.w	800f09e <uxr_read_framed_msg+0x2f6>
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	7023      	strb	r3, [r4, #0]
 800f2b6:	e588      	b.n	800edca <uxr_read_framed_msg+0x22>
 800f2b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2ba:	9300      	str	r3, [sp, #0]
 800f2bc:	2301      	movs	r3, #1
 800f2be:	e7ee      	b.n	800f29e <uxr_read_framed_msg+0x4f6>
 800f2c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2c2:	9300      	str	r3, [sp, #0]
 800f2c4:	2303      	movs	r3, #3
 800f2c6:	e7ea      	b.n	800f29e <uxr_read_framed_msg+0x4f6>
 800f2c8:	ee17 8a90 	vmov	r8, s15
 800f2cc:	e6ae      	b.n	800f02c <uxr_read_framed_msg+0x284>
 800f2ce:	bf00      	nop

0800f2d0 <uxr_stream_id>:
 800f2d0:	2901      	cmp	r1, #1
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	d01d      	beq.n	800f312 <uxr_stream_id+0x42>
 800f2d6:	2902      	cmp	r1, #2
 800f2d8:	f04f 0c00 	mov.w	ip, #0
 800f2dc:	d01e      	beq.n	800f31c <uxr_stream_id+0x4c>
 800f2de:	2300      	movs	r3, #0
 800f2e0:	f36c 0307 	bfi	r3, ip, #0, #8
 800f2e4:	f360 230f 	bfi	r3, r0, #8, #8
 800f2e8:	f361 4317 	bfi	r3, r1, #16, #8
 800f2ec:	f362 631f 	bfi	r3, r2, #24, #8
 800f2f0:	b2da      	uxtb	r2, r3
 800f2f2:	2000      	movs	r0, #0
 800f2f4:	f362 0007 	bfi	r0, r2, #0, #8
 800f2f8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f2fc:	f362 200f 	bfi	r0, r2, #8, #8
 800f300:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f304:	f362 4017 	bfi	r0, r2, #16, #8
 800f308:	0e1b      	lsrs	r3, r3, #24
 800f30a:	f363 601f 	bfi	r0, r3, #24, #8
 800f30e:	b002      	add	sp, #8
 800f310:	4770      	bx	lr
 800f312:	f100 0c01 	add.w	ip, r0, #1
 800f316:	fa5f fc8c 	uxtb.w	ip, ip
 800f31a:	e7e0      	b.n	800f2de <uxr_stream_id+0xe>
 800f31c:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 800f320:	e7dd      	b.n	800f2de <uxr_stream_id+0xe>
 800f322:	bf00      	nop

0800f324 <uxr_stream_id_from_raw>:
 800f324:	b082      	sub	sp, #8
 800f326:	b130      	cbz	r0, 800f336 <uxr_stream_id_from_raw+0x12>
 800f328:	0603      	lsls	r3, r0, #24
 800f32a:	d420      	bmi.n	800f36e <uxr_stream_id_from_raw+0x4a>
 800f32c:	1e42      	subs	r2, r0, #1
 800f32e:	b2d2      	uxtb	r2, r2
 800f330:	f04f 0c01 	mov.w	ip, #1
 800f334:	e001      	b.n	800f33a <uxr_stream_id_from_raw+0x16>
 800f336:	4684      	mov	ip, r0
 800f338:	4602      	mov	r2, r0
 800f33a:	2300      	movs	r3, #0
 800f33c:	f360 0307 	bfi	r3, r0, #0, #8
 800f340:	f362 230f 	bfi	r3, r2, #8, #8
 800f344:	f36c 4317 	bfi	r3, ip, #16, #8
 800f348:	f361 631f 	bfi	r3, r1, #24, #8
 800f34c:	b2da      	uxtb	r2, r3
 800f34e:	2000      	movs	r0, #0
 800f350:	f362 0007 	bfi	r0, r2, #0, #8
 800f354:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f358:	f362 200f 	bfi	r0, r2, #8, #8
 800f35c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f360:	f362 4017 	bfi	r0, r2, #16, #8
 800f364:	0e1b      	lsrs	r3, r3, #24
 800f366:	f363 601f 	bfi	r0, r3, #24, #8
 800f36a:	b002      	add	sp, #8
 800f36c:	4770      	bx	lr
 800f36e:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800f372:	f04f 0c02 	mov.w	ip, #2
 800f376:	e7e0      	b.n	800f33a <uxr_stream_id_from_raw+0x16>

0800f378 <uxr_init_stream_storage>:
 800f378:	2300      	movs	r3, #0
 800f37a:	7403      	strb	r3, [r0, #16]
 800f37c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800f380:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800f384:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800f388:	4770      	bx	lr
 800f38a:	bf00      	nop

0800f38c <uxr_reset_stream_storage>:
 800f38c:	b570      	push	{r4, r5, r6, lr}
 800f38e:	7c03      	ldrb	r3, [r0, #16]
 800f390:	4604      	mov	r4, r0
 800f392:	b153      	cbz	r3, 800f3aa <uxr_reset_stream_storage+0x1e>
 800f394:	4606      	mov	r6, r0
 800f396:	2500      	movs	r5, #0
 800f398:	4630      	mov	r0, r6
 800f39a:	f006 fb5b 	bl	8015a54 <uxr_reset_output_best_effort_stream>
 800f39e:	7c23      	ldrb	r3, [r4, #16]
 800f3a0:	3501      	adds	r5, #1
 800f3a2:	42ab      	cmp	r3, r5
 800f3a4:	f106 0610 	add.w	r6, r6, #16
 800f3a8:	d8f6      	bhi.n	800f398 <uxr_reset_stream_storage+0xc>
 800f3aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f3ae:	b163      	cbz	r3, 800f3ca <uxr_reset_stream_storage+0x3e>
 800f3b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f3b4:	2500      	movs	r5, #0
 800f3b6:	4630      	mov	r0, r6
 800f3b8:	f006 f94e 	bl	8015658 <uxr_reset_input_best_effort_stream>
 800f3bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f3c0:	3501      	adds	r5, #1
 800f3c2:	42ab      	cmp	r3, r5
 800f3c4:	f106 0602 	add.w	r6, r6, #2
 800f3c8:	d8f5      	bhi.n	800f3b6 <uxr_reset_stream_storage+0x2a>
 800f3ca:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f3ce:	b163      	cbz	r3, 800f3ea <uxr_reset_stream_storage+0x5e>
 800f3d0:	f104 0618 	add.w	r6, r4, #24
 800f3d4:	2500      	movs	r5, #0
 800f3d6:	4630      	mov	r0, r6
 800f3d8:	f006 fbe8 	bl	8015bac <uxr_reset_output_reliable_stream>
 800f3dc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f3e0:	3501      	adds	r5, #1
 800f3e2:	42ab      	cmp	r3, r5
 800f3e4:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800f3e8:	d8f5      	bhi.n	800f3d6 <uxr_reset_stream_storage+0x4a>
 800f3ea:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800f3ee:	b163      	cbz	r3, 800f40a <uxr_reset_stream_storage+0x7e>
 800f3f0:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800f3f4:	2500      	movs	r5, #0
 800f3f6:	4630      	mov	r0, r6
 800f3f8:	f006 f9a2 	bl	8015740 <uxr_reset_input_reliable_stream>
 800f3fc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800f400:	3501      	adds	r5, #1
 800f402:	42ab      	cmp	r3, r5
 800f404:	f106 0618 	add.w	r6, r6, #24
 800f408:	d8f5      	bhi.n	800f3f6 <uxr_reset_stream_storage+0x6a>
 800f40a:	bd70      	pop	{r4, r5, r6, pc}

0800f40c <uxr_add_output_best_effort_buffer>:
 800f40c:	b510      	push	{r4, lr}
 800f40e:	7c04      	ldrb	r4, [r0, #16]
 800f410:	f104 0c01 	add.w	ip, r4, #1
 800f414:	b082      	sub	sp, #8
 800f416:	f880 c010 	strb.w	ip, [r0, #16]
 800f41a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800f41e:	f006 fb0f 	bl	8015a40 <uxr_init_output_best_effort_stream>
 800f422:	2201      	movs	r2, #1
 800f424:	4611      	mov	r1, r2
 800f426:	4620      	mov	r0, r4
 800f428:	b002      	add	sp, #8
 800f42a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f42e:	f7ff bf4f 	b.w	800f2d0 <uxr_stream_id>
 800f432:	bf00      	nop

0800f434 <uxr_add_output_reliable_buffer>:
 800f434:	b510      	push	{r4, lr}
 800f436:	b084      	sub	sp, #16
 800f438:	4684      	mov	ip, r0
 800f43a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f43e:	9000      	str	r0, [sp, #0]
 800f440:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800f444:	2028      	movs	r0, #40	; 0x28
 800f446:	fb00 c004 	mla	r0, r0, r4, ip
 800f44a:	f104 0e01 	add.w	lr, r4, #1
 800f44e:	3018      	adds	r0, #24
 800f450:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800f454:	f006 fb72 	bl	8015b3c <uxr_init_output_reliable_stream>
 800f458:	2201      	movs	r2, #1
 800f45a:	2102      	movs	r1, #2
 800f45c:	4620      	mov	r0, r4
 800f45e:	b004      	add	sp, #16
 800f460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f464:	f7ff bf34 	b.w	800f2d0 <uxr_stream_id>

0800f468 <uxr_add_input_best_effort_buffer>:
 800f468:	b510      	push	{r4, lr}
 800f46a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800f46e:	4603      	mov	r3, r0
 800f470:	1c62      	adds	r2, r4, #1
 800f472:	f104 0021 	add.w	r0, r4, #33	; 0x21
 800f476:	b082      	sub	sp, #8
 800f478:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800f47c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f480:	f006 f8e6 	bl	8015650 <uxr_init_input_best_effort_stream>
 800f484:	2200      	movs	r2, #0
 800f486:	2101      	movs	r1, #1
 800f488:	4620      	mov	r0, r4
 800f48a:	b002      	add	sp, #8
 800f48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f490:	f7ff bf1e 	b.w	800f2d0 <uxr_stream_id>

0800f494 <uxr_add_input_reliable_buffer>:
 800f494:	b510      	push	{r4, lr}
 800f496:	b084      	sub	sp, #16
 800f498:	4684      	mov	ip, r0
 800f49a:	9806      	ldr	r0, [sp, #24]
 800f49c:	9000      	str	r0, [sp, #0]
 800f49e:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800f4a2:	2018      	movs	r0, #24
 800f4a4:	fb00 c004 	mla	r0, r0, r4, ip
 800f4a8:	f104 0e01 	add.w	lr, r4, #1
 800f4ac:	3048      	adds	r0, #72	; 0x48
 800f4ae:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800f4b2:	f006 f919 	bl	80156e8 <uxr_init_input_reliable_stream>
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	2102      	movs	r1, #2
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	b004      	add	sp, #16
 800f4be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4c2:	f7ff bf05 	b.w	800f2d0 <uxr_stream_id>
 800f4c6:	bf00      	nop

0800f4c8 <uxr_get_output_best_effort_stream>:
 800f4c8:	7c03      	ldrb	r3, [r0, #16]
 800f4ca:	428b      	cmp	r3, r1
 800f4cc:	bf8c      	ite	hi
 800f4ce:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800f4d2:	2000      	movls	r0, #0
 800f4d4:	4770      	bx	lr
 800f4d6:	bf00      	nop

0800f4d8 <uxr_get_output_reliable_stream>:
 800f4d8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800f4dc:	428b      	cmp	r3, r1
 800f4de:	bf83      	ittte	hi
 800f4e0:	2328      	movhi	r3, #40	; 0x28
 800f4e2:	fb03 0001 	mlahi	r0, r3, r1, r0
 800f4e6:	3018      	addhi	r0, #24
 800f4e8:	2000      	movls	r0, #0
 800f4ea:	4770      	bx	lr

0800f4ec <uxr_get_input_best_effort_stream>:
 800f4ec:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800f4f0:	428b      	cmp	r3, r1
 800f4f2:	bf86      	itte	hi
 800f4f4:	3121      	addhi	r1, #33	; 0x21
 800f4f6:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800f4fa:	2000      	movls	r0, #0
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop

0800f500 <uxr_get_input_reliable_stream>:
 800f500:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800f504:	428b      	cmp	r3, r1
 800f506:	bf83      	ittte	hi
 800f508:	2318      	movhi	r3, #24
 800f50a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800f50e:	3048      	addhi	r0, #72	; 0x48
 800f510:	2000      	movls	r0, #0
 800f512:	4770      	bx	lr

0800f514 <uxr_output_streams_confirmed>:
 800f514:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800f518:	b183      	cbz	r3, 800f53c <uxr_output_streams_confirmed+0x28>
 800f51a:	b570      	push	{r4, r5, r6, lr}
 800f51c:	4606      	mov	r6, r0
 800f51e:	f100 0518 	add.w	r5, r0, #24
 800f522:	2400      	movs	r4, #0
 800f524:	e001      	b.n	800f52a <uxr_output_streams_confirmed+0x16>
 800f526:	3528      	adds	r5, #40	; 0x28
 800f528:	b138      	cbz	r0, 800f53a <uxr_output_streams_confirmed+0x26>
 800f52a:	4628      	mov	r0, r5
 800f52c:	f006 fdae 	bl	801608c <uxr_is_output_up_to_date>
 800f530:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800f534:	3401      	adds	r4, #1
 800f536:	42a3      	cmp	r3, r4
 800f538:	d8f5      	bhi.n	800f526 <uxr_output_streams_confirmed+0x12>
 800f53a:	bd70      	pop	{r4, r5, r6, pc}
 800f53c:	2001      	movs	r0, #1
 800f53e:	4770      	bx	lr

0800f540 <uxr_buffer_submessage_header>:
 800f540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f542:	4604      	mov	r4, r0
 800f544:	460e      	mov	r6, r1
 800f546:	2104      	movs	r1, #4
 800f548:	4615      	mov	r5, r2
 800f54a:	461f      	mov	r7, r3
 800f54c:	f7fd fd24 	bl	800cf98 <ucdr_align_to>
 800f550:	2301      	movs	r3, #1
 800f552:	ea47 0203 	orr.w	r2, r7, r3
 800f556:	4631      	mov	r1, r6
 800f558:	7523      	strb	r3, [r4, #20]
 800f55a:	4620      	mov	r0, r4
 800f55c:	462b      	mov	r3, r5
 800f55e:	f000 fa27 	bl	800f9b0 <uxr_serialize_submessage_header>
 800f562:	4620      	mov	r0, r4
 800f564:	f7fd fd2e 	bl	800cfc4 <ucdr_buffer_remaining>
 800f568:	42a8      	cmp	r0, r5
 800f56a:	bf34      	ite	cc
 800f56c:	2000      	movcc	r0, #0
 800f56e:	2001      	movcs	r0, #1
 800f570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f572:	bf00      	nop

0800f574 <uxr_read_submessage_header>:
 800f574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f578:	4604      	mov	r4, r0
 800f57a:	460d      	mov	r5, r1
 800f57c:	2104      	movs	r1, #4
 800f57e:	4616      	mov	r6, r2
 800f580:	4698      	mov	r8, r3
 800f582:	f7fd fd09 	bl	800cf98 <ucdr_align_to>
 800f586:	4620      	mov	r0, r4
 800f588:	f7fd fd1c 	bl	800cfc4 <ucdr_buffer_remaining>
 800f58c:	2803      	cmp	r0, #3
 800f58e:	bf8c      	ite	hi
 800f590:	2701      	movhi	r7, #1
 800f592:	2700      	movls	r7, #0
 800f594:	d802      	bhi.n	800f59c <uxr_read_submessage_header+0x28>
 800f596:	4638      	mov	r0, r7
 800f598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f59c:	4633      	mov	r3, r6
 800f59e:	4642      	mov	r2, r8
 800f5a0:	4620      	mov	r0, r4
 800f5a2:	4629      	mov	r1, r5
 800f5a4:	f000 fa18 	bl	800f9d8 <uxr_deserialize_submessage_header>
 800f5a8:	f898 3000 	ldrb.w	r3, [r8]
 800f5ac:	f003 0201 	and.w	r2, r3, #1
 800f5b0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800f5b4:	f888 3000 	strb.w	r3, [r8]
 800f5b8:	7522      	strb	r2, [r4, #20]
 800f5ba:	4638      	mov	r0, r7
 800f5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f5c0 <uxr_submessage_padding>:
 800f5c0:	f010 0003 	ands.w	r0, r0, #3
 800f5c4:	bf18      	it	ne
 800f5c6:	f1c0 0004 	rsbne	r0, r0, #4
 800f5ca:	4770      	bx	lr

0800f5cc <uxr_millis>:
 800f5cc:	b510      	push	{r4, lr}
 800f5ce:	b084      	sub	sp, #16
 800f5d0:	4669      	mov	r1, sp
 800f5d2:	2001      	movs	r0, #1
 800f5d4:	f7f3 f818 	bl	8002608 <clock_gettime>
 800f5d8:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800f5dc:	4906      	ldr	r1, [pc, #24]	; (800f5f8 <uxr_millis+0x2c>)
 800f5de:	fba0 0301 	umull	r0, r3, r0, r1
 800f5e2:	1900      	adds	r0, r0, r4
 800f5e4:	fb01 3102 	mla	r1, r1, r2, r3
 800f5e8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800f5ec:	4a03      	ldr	r2, [pc, #12]	; (800f5fc <uxr_millis+0x30>)
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	f7f1 fbb2 	bl	8000d58 <__aeabi_ldivmod>
 800f5f4:	b004      	add	sp, #16
 800f5f6:	bd10      	pop	{r4, pc}
 800f5f8:	3b9aca00 	.word	0x3b9aca00
 800f5fc:	000f4240 	.word	0x000f4240

0800f600 <uxr_nanos>:
 800f600:	b510      	push	{r4, lr}
 800f602:	b084      	sub	sp, #16
 800f604:	4669      	mov	r1, sp
 800f606:	2001      	movs	r0, #1
 800f608:	f7f2 fffe 	bl	8002608 <clock_gettime>
 800f60c:	4a06      	ldr	r2, [pc, #24]	; (800f628 <uxr_nanos+0x28>)
 800f60e:	9800      	ldr	r0, [sp, #0]
 800f610:	9902      	ldr	r1, [sp, #8]
 800f612:	9c01      	ldr	r4, [sp, #4]
 800f614:	fba0 0302 	umull	r0, r3, r0, r2
 800f618:	1840      	adds	r0, r0, r1
 800f61a:	fb02 3304 	mla	r3, r2, r4, r3
 800f61e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800f622:	b004      	add	sp, #16
 800f624:	bd10      	pop	{r4, pc}
 800f626:	bf00      	nop
 800f628:	3b9aca00 	.word	0x3b9aca00

0800f62c <on_full_output_buffer_fragmented>:
 800f62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f630:	460c      	mov	r4, r1
 800f632:	b08a      	sub	sp, #40	; 0x28
 800f634:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800f638:	4606      	mov	r6, r0
 800f63a:	f104 0008 	add.w	r0, r4, #8
 800f63e:	f7ff ff4b 	bl	800f4d8 <uxr_get_output_reliable_stream>
 800f642:	4605      	mov	r5, r0
 800f644:	f006 fd2c 	bl	80160a0 <get_available_free_slots>
 800f648:	b968      	cbnz	r0, 800f666 <on_full_output_buffer_fragmented+0x3a>
 800f64a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800f64e:	4620      	mov	r0, r4
 800f650:	4798      	blx	r3
 800f652:	b918      	cbnz	r0, 800f65c <on_full_output_buffer_fragmented+0x30>
 800f654:	2001      	movs	r0, #1
 800f656:	b00a      	add	sp, #40	; 0x28
 800f658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f65c:	4628      	mov	r0, r5
 800f65e:	f006 fd1f 	bl	80160a0 <get_available_free_slots>
 800f662:	2800      	cmp	r0, #0
 800f664:	d0f6      	beq.n	800f654 <on_full_output_buffer_fragmented+0x28>
 800f666:	8929      	ldrh	r1, [r5, #8]
 800f668:	89eb      	ldrh	r3, [r5, #14]
 800f66a:	7b28      	ldrb	r0, [r5, #12]
 800f66c:	686a      	ldr	r2, [r5, #4]
 800f66e:	fbb2 f8f1 	udiv	r8, r2, r1
 800f672:	fbb3 f2f1 	udiv	r2, r3, r1
 800f676:	fb01 3112 	mls	r1, r1, r2, r3
 800f67a:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 800f67e:	b289      	uxth	r1, r1
 800f680:	fb08 f101 	mul.w	r1, r8, r1
 800f684:	30fc      	adds	r0, #252	; 0xfc
 800f686:	f1a8 0804 	sub.w	r8, r8, #4
 800f68a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800f68e:	4440      	add	r0, r8
 800f690:	b287      	uxth	r7, r0
 800f692:	1bdb      	subs	r3, r3, r7
 800f694:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800f698:	682b      	ldr	r3, [r5, #0]
 800f69a:	3104      	adds	r1, #4
 800f69c:	4419      	add	r1, r3
 800f69e:	4642      	mov	r2, r8
 800f6a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6a4:	9300      	str	r3, [sp, #0]
 800f6a6:	a802      	add	r0, sp, #8
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	f7fd fc49 	bl	800cf40 <ucdr_init_buffer_origin_offset>
 800f6ae:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800f6b2:	f102 0308 	add.w	r3, r2, #8
 800f6b6:	4543      	cmp	r3, r8
 800f6b8:	d928      	bls.n	800f70c <on_full_output_buffer_fragmented+0xe0>
 800f6ba:	463a      	mov	r2, r7
 800f6bc:	2300      	movs	r3, #0
 800f6be:	210d      	movs	r1, #13
 800f6c0:	a802      	add	r0, sp, #8
 800f6c2:	f7ff ff3d 	bl	800f540 <uxr_buffer_submessage_header>
 800f6c6:	8929      	ldrh	r1, [r5, #8]
 800f6c8:	89eb      	ldrh	r3, [r5, #14]
 800f6ca:	fbb3 f2f1 	udiv	r2, r3, r1
 800f6ce:	fb01 3312 	mls	r3, r1, r2, r3
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	686a      	ldr	r2, [r5, #4]
 800f6d6:	fbb2 f2f1 	udiv	r2, r2, r1
 800f6da:	fb02 f303 	mul.w	r3, r2, r3
 800f6de:	682a      	ldr	r2, [r5, #0]
 800f6e0:	f842 8003 	str.w	r8, [r2, r3]
 800f6e4:	89e8      	ldrh	r0, [r5, #14]
 800f6e6:	2101      	movs	r1, #1
 800f6e8:	f006 fe2a 	bl	8016340 <uxr_seq_num_add>
 800f6ec:	9904      	ldr	r1, [sp, #16]
 800f6ee:	9a03      	ldr	r2, [sp, #12]
 800f6f0:	81e8      	strh	r0, [r5, #14]
 800f6f2:	1a52      	subs	r2, r2, r1
 800f6f4:	4630      	mov	r0, r6
 800f6f6:	f7fd fc35 	bl	800cf64 <ucdr_init_buffer>
 800f6fa:	4630      	mov	r0, r6
 800f6fc:	490f      	ldr	r1, [pc, #60]	; (800f73c <on_full_output_buffer_fragmented+0x110>)
 800f6fe:	4622      	mov	r2, r4
 800f700:	f7fd fc04 	bl	800cf0c <ucdr_set_on_full_buffer_callback>
 800f704:	2000      	movs	r0, #0
 800f706:	b00a      	add	sp, #40	; 0x28
 800f708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f70c:	b292      	uxth	r2, r2
 800f70e:	2302      	movs	r3, #2
 800f710:	210d      	movs	r1, #13
 800f712:	a802      	add	r0, sp, #8
 800f714:	f7ff ff14 	bl	800f540 <uxr_buffer_submessage_header>
 800f718:	8928      	ldrh	r0, [r5, #8]
 800f71a:	89eb      	ldrh	r3, [r5, #14]
 800f71c:	fbb3 f1f0 	udiv	r1, r3, r0
 800f720:	fb00 3311 	mls	r3, r0, r1, r3
 800f724:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800f728:	6869      	ldr	r1, [r5, #4]
 800f72a:	fbb1 f1f0 	udiv	r1, r1, r0
 800f72e:	b29b      	uxth	r3, r3
 800f730:	fb01 f303 	mul.w	r3, r1, r3
 800f734:	6829      	ldr	r1, [r5, #0]
 800f736:	3208      	adds	r2, #8
 800f738:	50ca      	str	r2, [r1, r3]
 800f73a:	e7d3      	b.n	800f6e4 <on_full_output_buffer_fragmented+0xb8>
 800f73c:	0800f62d 	.word	0x0800f62d

0800f740 <uxr_prepare_output_stream>:
 800f740:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f742:	b087      	sub	sp, #28
 800f744:	2707      	movs	r7, #7
 800f746:	9202      	str	r2, [sp, #8]
 800f748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f74a:	9103      	str	r1, [sp, #12]
 800f74c:	2500      	movs	r5, #0
 800f74e:	3204      	adds	r2, #4
 800f750:	e9cd 7500 	strd	r7, r5, [sp]
 800f754:	461c      	mov	r4, r3
 800f756:	4606      	mov	r6, r0
 800f758:	f7fe ffc2 	bl	800e6e0 <uxr_prepare_stream_to_write_submessage>
 800f75c:	f080 0201 	eor.w	r2, r0, #1
 800f760:	b2d2      	uxtb	r2, r2
 800f762:	75a2      	strb	r2, [r4, #22]
 800f764:	b112      	cbz	r2, 800f76c <uxr_prepare_output_stream+0x2c>
 800f766:	4628      	mov	r0, r5
 800f768:	b007      	add	sp, #28
 800f76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f76c:	aa05      	add	r2, sp, #20
 800f76e:	9902      	ldr	r1, [sp, #8]
 800f770:	4630      	mov	r0, r6
 800f772:	f7ff f8eb 	bl	800e94c <uxr_init_base_object_request>
 800f776:	a905      	add	r1, sp, #20
 800f778:	4605      	mov	r5, r0
 800f77a:	4620      	mov	r0, r4
 800f77c:	f001 f8a0 	bl	80108c0 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f780:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800f784:	69a6      	ldr	r6, [r4, #24]
 800f786:	69e7      	ldr	r7, [r4, #28]
 800f788:	1a52      	subs	r2, r2, r1
 800f78a:	4620      	mov	r0, r4
 800f78c:	f7fd fbea 	bl	800cf64 <ucdr_init_buffer>
 800f790:	4620      	mov	r0, r4
 800f792:	463a      	mov	r2, r7
 800f794:	4631      	mov	r1, r6
 800f796:	f7fd fbb9 	bl	800cf0c <ucdr_set_on_full_buffer_callback>
 800f79a:	4628      	mov	r0, r5
 800f79c:	b007      	add	sp, #28
 800f79e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f7a0 <uxr_prepare_output_stream_fragmented>:
 800f7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7a4:	b091      	sub	sp, #68	; 0x44
 800f7a6:	4605      	mov	r5, r0
 800f7a8:	9105      	str	r1, [sp, #20]
 800f7aa:	3008      	adds	r0, #8
 800f7ac:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800f7b0:	461e      	mov	r6, r3
 800f7b2:	9204      	str	r2, [sp, #16]
 800f7b4:	f7ff fe90 	bl	800f4d8 <uxr_get_output_reliable_stream>
 800f7b8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	f000 8091 	beq.w	800f8e4 <uxr_prepare_output_stream_fragmented+0x144>
 800f7c2:	4604      	mov	r4, r0
 800f7c4:	2800      	cmp	r0, #0
 800f7c6:	f000 808d 	beq.w	800f8e4 <uxr_prepare_output_stream_fragmented+0x144>
 800f7ca:	f006 fc69 	bl	80160a0 <get_available_free_slots>
 800f7ce:	2800      	cmp	r0, #0
 800f7d0:	f000 8083 	beq.w	800f8da <uxr_prepare_output_stream_fragmented+0x13a>
 800f7d4:	8922      	ldrh	r2, [r4, #8]
 800f7d6:	89e7      	ldrh	r7, [r4, #14]
 800f7d8:	fbb7 f9f2 	udiv	r9, r7, r2
 800f7dc:	fb02 7919 	mls	r9, r2, r9, r7
 800f7e0:	fa1f f989 	uxth.w	r9, r9
 800f7e4:	6863      	ldr	r3, [r4, #4]
 800f7e6:	fbb3 f2f2 	udiv	r2, r3, r2
 800f7ea:	6823      	ldr	r3, [r4, #0]
 800f7ec:	9203      	str	r2, [sp, #12]
 800f7ee:	fb02 f909 	mul.w	r9, r2, r9
 800f7f2:	f109 0904 	add.w	r9, r9, #4
 800f7f6:	4499      	add	r9, r3
 800f7f8:	7b23      	ldrb	r3, [r4, #12]
 800f7fa:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800f7fe:	4543      	cmp	r3, r8
 800f800:	f1a2 0b04 	sub.w	fp, r2, #4
 800f804:	d37a      	bcc.n	800f8fc <uxr_prepare_output_stream_fragmented+0x15c>
 800f806:	f1ab 0a04 	sub.w	sl, fp, #4
 800f80a:	ebaa 0a03 	sub.w	sl, sl, r3
 800f80e:	465a      	mov	r2, fp
 800f810:	2300      	movs	r3, #0
 800f812:	4649      	mov	r1, r9
 800f814:	a808      	add	r0, sp, #32
 800f816:	f8cd 8000 	str.w	r8, [sp]
 800f81a:	f7fd fb91 	bl	800cf40 <ucdr_init_buffer_origin_offset>
 800f81e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f820:	fa1f fa8a 	uxth.w	sl, sl
 800f824:	4652      	mov	r2, sl
 800f826:	f103 0a08 	add.w	sl, r3, #8
 800f82a:	45da      	cmp	sl, fp
 800f82c:	bf34      	ite	cc
 800f82e:	2302      	movcc	r3, #2
 800f830:	2300      	movcs	r3, #0
 800f832:	210d      	movs	r1, #13
 800f834:	a808      	add	r0, sp, #32
 800f836:	f7ff fe83 	bl	800f540 <uxr_buffer_submessage_header>
 800f83a:	8921      	ldrh	r1, [r4, #8]
 800f83c:	fbb7 f2f1 	udiv	r2, r7, r1
 800f840:	fb01 7212 	mls	r2, r1, r2, r7
 800f844:	b292      	uxth	r2, r2
 800f846:	6863      	ldr	r3, [r4, #4]
 800f848:	fbb3 f3f1 	udiv	r3, r3, r1
 800f84c:	fb02 f303 	mul.w	r3, r2, r3
 800f850:	6822      	ldr	r2, [r4, #0]
 800f852:	4638      	mov	r0, r7
 800f854:	f842 b003 	str.w	fp, [r2, r3]
 800f858:	2101      	movs	r1, #1
 800f85a:	f006 fd71 	bl	8016340 <uxr_seq_num_add>
 800f85e:	9b03      	ldr	r3, [sp, #12]
 800f860:	f108 0104 	add.w	r1, r8, #4
 800f864:	f1a3 0208 	sub.w	r2, r3, #8
 800f868:	eba2 0208 	sub.w	r2, r2, r8
 800f86c:	4449      	add	r1, r9
 800f86e:	4607      	mov	r7, r0
 800f870:	4630      	mov	r0, r6
 800f872:	f7fd fb77 	bl	800cf64 <ucdr_init_buffer>
 800f876:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f878:	81e7      	strh	r7, [r4, #14]
 800f87a:	1d1a      	adds	r2, r3, #4
 800f87c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800f880:	bf28      	it	cs
 800f882:	2200      	movcs	r2, #0
 800f884:	2300      	movs	r3, #0
 800f886:	b292      	uxth	r2, r2
 800f888:	2107      	movs	r1, #7
 800f88a:	4630      	mov	r0, r6
 800f88c:	f7ff fe58 	bl	800f540 <uxr_buffer_submessage_header>
 800f890:	9904      	ldr	r1, [sp, #16]
 800f892:	aa07      	add	r2, sp, #28
 800f894:	4628      	mov	r0, r5
 800f896:	f7ff f859 	bl	800e94c <uxr_init_base_object_request>
 800f89a:	4604      	mov	r4, r0
 800f89c:	b318      	cbz	r0, 800f8e6 <uxr_prepare_output_stream_fragmented+0x146>
 800f89e:	a907      	add	r1, sp, #28
 800f8a0:	4630      	mov	r0, r6
 800f8a2:	f001 f80d 	bl	80108c0 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f8a6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800f8aa:	4630      	mov	r0, r6
 800f8ac:	1a52      	subs	r2, r2, r1
 800f8ae:	f7fd fb59 	bl	800cf64 <ucdr_init_buffer>
 800f8b2:	9b05      	ldr	r3, [sp, #20]
 800f8b4:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800f8b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f8ba:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800f8be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f8c0:	491b      	ldr	r1, [pc, #108]	; (800f930 <uxr_prepare_output_stream_fragmented+0x190>)
 800f8c2:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 800f8c6:	4630      	mov	r0, r6
 800f8c8:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800f8cc:	462a      	mov	r2, r5
 800f8ce:	f7fd fb1d 	bl	800cf0c <ucdr_set_on_full_buffer_callback>
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	b011      	add	sp, #68	; 0x44
 800f8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8da:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f8dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f8de:	4628      	mov	r0, r5
 800f8e0:	4798      	blx	r3
 800f8e2:	b920      	cbnz	r0, 800f8ee <uxr_prepare_output_stream_fragmented+0x14e>
 800f8e4:	2400      	movs	r4, #0
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	b011      	add	sp, #68	; 0x44
 800f8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ee:	4620      	mov	r0, r4
 800f8f0:	f006 fbd6 	bl	80160a0 <get_available_free_slots>
 800f8f4:	2800      	cmp	r0, #0
 800f8f6:	f47f af6d 	bne.w	800f7d4 <uxr_prepare_output_stream_fragmented+0x34>
 800f8fa:	e7f3      	b.n	800f8e4 <uxr_prepare_output_stream_fragmented+0x144>
 800f8fc:	4638      	mov	r0, r7
 800f8fe:	2101      	movs	r1, #1
 800f900:	f006 fd1e 	bl	8016340 <uxr_seq_num_add>
 800f904:	8921      	ldrh	r1, [r4, #8]
 800f906:	fbb0 f2f1 	udiv	r2, r0, r1
 800f90a:	fb01 0912 	mls	r9, r1, r2, r0
 800f90e:	fa1f f289 	uxth.w	r2, r9
 800f912:	6863      	ldr	r3, [r4, #4]
 800f914:	fbb3 f9f1 	udiv	r9, r3, r1
 800f918:	6823      	ldr	r3, [r4, #0]
 800f91a:	fb02 f909 	mul.w	r9, r2, r9
 800f91e:	f109 0904 	add.w	r9, r9, #4
 800f922:	4499      	add	r9, r3
 800f924:	4607      	mov	r7, r0
 800f926:	7b23      	ldrb	r3, [r4, #12]
 800f928:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800f92c:	e76b      	b.n	800f806 <uxr_prepare_output_stream_fragmented+0x66>
 800f92e:	bf00      	nop
 800f930:	0800f62d 	.word	0x0800f62d

0800f934 <uxr_serialize_message_header>:
 800f934:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f936:	b083      	sub	sp, #12
 800f938:	4616      	mov	r6, r2
 800f93a:	4604      	mov	r4, r0
 800f93c:	9301      	str	r3, [sp, #4]
 800f93e:	460d      	mov	r5, r1
 800f940:	9f08      	ldr	r7, [sp, #32]
 800f942:	f7fc fb63 	bl	800c00c <ucdr_serialize_uint8_t>
 800f946:	4631      	mov	r1, r6
 800f948:	4620      	mov	r0, r4
 800f94a:	f7fc fb5f 	bl	800c00c <ucdr_serialize_uint8_t>
 800f94e:	9a01      	ldr	r2, [sp, #4]
 800f950:	2101      	movs	r1, #1
 800f952:	4620      	mov	r0, r4
 800f954:	f7fc fc06 	bl	800c164 <ucdr_serialize_endian_uint16_t>
 800f958:	062b      	lsls	r3, r5, #24
 800f95a:	d501      	bpl.n	800f960 <uxr_serialize_message_header+0x2c>
 800f95c:	b003      	add	sp, #12
 800f95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f960:	2204      	movs	r2, #4
 800f962:	4639      	mov	r1, r7
 800f964:	4620      	mov	r0, r4
 800f966:	b003      	add	sp, #12
 800f968:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f96c:	f005 bd38 	b.w	80153e0 <ucdr_serialize_array_uint8_t>

0800f970 <uxr_deserialize_message_header>:
 800f970:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f972:	b083      	sub	sp, #12
 800f974:	4616      	mov	r6, r2
 800f976:	4604      	mov	r4, r0
 800f978:	9301      	str	r3, [sp, #4]
 800f97a:	460d      	mov	r5, r1
 800f97c:	9f08      	ldr	r7, [sp, #32]
 800f97e:	f7fc fb5b 	bl	800c038 <ucdr_deserialize_uint8_t>
 800f982:	4631      	mov	r1, r6
 800f984:	4620      	mov	r0, r4
 800f986:	f7fc fb57 	bl	800c038 <ucdr_deserialize_uint8_t>
 800f98a:	9a01      	ldr	r2, [sp, #4]
 800f98c:	2101      	movs	r1, #1
 800f98e:	4620      	mov	r0, r4
 800f990:	f7fc fcdc 	bl	800c34c <ucdr_deserialize_endian_uint16_t>
 800f994:	f995 3000 	ldrsb.w	r3, [r5]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	da01      	bge.n	800f9a0 <uxr_deserialize_message_header+0x30>
 800f99c:	b003      	add	sp, #12
 800f99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9a0:	2204      	movs	r2, #4
 800f9a2:	4639      	mov	r1, r7
 800f9a4:	4620      	mov	r0, r4
 800f9a6:	b003      	add	sp, #12
 800f9a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f9ac:	f005 bd7c 	b.w	80154a8 <ucdr_deserialize_array_uint8_t>

0800f9b0 <uxr_serialize_submessage_header>:
 800f9b0:	b530      	push	{r4, r5, lr}
 800f9b2:	b083      	sub	sp, #12
 800f9b4:	4615      	mov	r5, r2
 800f9b6:	4604      	mov	r4, r0
 800f9b8:	9301      	str	r3, [sp, #4]
 800f9ba:	f7fc fb27 	bl	800c00c <ucdr_serialize_uint8_t>
 800f9be:	4629      	mov	r1, r5
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	f7fc fb23 	bl	800c00c <ucdr_serialize_uint8_t>
 800f9c6:	9a01      	ldr	r2, [sp, #4]
 800f9c8:	2101      	movs	r1, #1
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	b003      	add	sp, #12
 800f9ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9d2:	f7fc bbc7 	b.w	800c164 <ucdr_serialize_endian_uint16_t>
 800f9d6:	bf00      	nop

0800f9d8 <uxr_deserialize_submessage_header>:
 800f9d8:	b530      	push	{r4, r5, lr}
 800f9da:	b083      	sub	sp, #12
 800f9dc:	4615      	mov	r5, r2
 800f9de:	4604      	mov	r4, r0
 800f9e0:	9301      	str	r3, [sp, #4]
 800f9e2:	f7fc fb29 	bl	800c038 <ucdr_deserialize_uint8_t>
 800f9e6:	4629      	mov	r1, r5
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	f7fc fb25 	bl	800c038 <ucdr_deserialize_uint8_t>
 800f9ee:	9a01      	ldr	r2, [sp, #4]
 800f9f0:	2101      	movs	r1, #1
 800f9f2:	4620      	mov	r0, r4
 800f9f4:	b003      	add	sp, #12
 800f9f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9fa:	f7fc bca7 	b.w	800c34c <ucdr_deserialize_endian_uint16_t>
 800f9fe:	bf00      	nop

0800fa00 <uxr_serialize_CLIENT_Representation>:
 800fa00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa04:	2204      	movs	r2, #4
 800fa06:	460e      	mov	r6, r1
 800fa08:	4605      	mov	r5, r0
 800fa0a:	f005 fce9 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 800fa0e:	2202      	movs	r2, #2
 800fa10:	4607      	mov	r7, r0
 800fa12:	1d31      	adds	r1, r6, #4
 800fa14:	4628      	mov	r0, r5
 800fa16:	f005 fce3 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 800fa1a:	4038      	ands	r0, r7
 800fa1c:	2202      	movs	r2, #2
 800fa1e:	1db1      	adds	r1, r6, #6
 800fa20:	b2c7      	uxtb	r7, r0
 800fa22:	4628      	mov	r0, r5
 800fa24:	f005 fcdc 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 800fa28:	2204      	movs	r2, #4
 800fa2a:	4007      	ands	r7, r0
 800fa2c:	f106 0108 	add.w	r1, r6, #8
 800fa30:	4628      	mov	r0, r5
 800fa32:	f005 fcd5 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 800fa36:	7b31      	ldrb	r1, [r6, #12]
 800fa38:	4007      	ands	r7, r0
 800fa3a:	4628      	mov	r0, r5
 800fa3c:	f7fc fae6 	bl	800c00c <ucdr_serialize_uint8_t>
 800fa40:	7b71      	ldrb	r1, [r6, #13]
 800fa42:	4007      	ands	r7, r0
 800fa44:	4628      	mov	r0, r5
 800fa46:	f7fc fab3 	bl	800bfb0 <ucdr_serialize_bool>
 800fa4a:	7b73      	ldrb	r3, [r6, #13]
 800fa4c:	ea07 0800 	and.w	r8, r7, r0
 800fa50:	b93b      	cbnz	r3, 800fa62 <uxr_serialize_CLIENT_Representation+0x62>
 800fa52:	8bb1      	ldrh	r1, [r6, #28]
 800fa54:	4628      	mov	r0, r5
 800fa56:	f7fc fb05 	bl	800c064 <ucdr_serialize_uint16_t>
 800fa5a:	ea08 0000 	and.w	r0, r8, r0
 800fa5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa62:	6931      	ldr	r1, [r6, #16]
 800fa64:	4628      	mov	r0, r5
 800fa66:	f7fc fce7 	bl	800c438 <ucdr_serialize_uint32_t>
 800fa6a:	6933      	ldr	r3, [r6, #16]
 800fa6c:	b1e3      	cbz	r3, 800faa8 <uxr_serialize_CLIENT_Representation+0xa8>
 800fa6e:	b1c0      	cbz	r0, 800faa2 <uxr_serialize_CLIENT_Representation+0xa2>
 800fa70:	4637      	mov	r7, r6
 800fa72:	f04f 0900 	mov.w	r9, #0
 800fa76:	e001      	b.n	800fa7c <uxr_serialize_CLIENT_Representation+0x7c>
 800fa78:	3708      	adds	r7, #8
 800fa7a:	b194      	cbz	r4, 800faa2 <uxr_serialize_CLIENT_Representation+0xa2>
 800fa7c:	6979      	ldr	r1, [r7, #20]
 800fa7e:	4628      	mov	r0, r5
 800fa80:	f005 fdce 	bl	8015620 <ucdr_serialize_string>
 800fa84:	69b9      	ldr	r1, [r7, #24]
 800fa86:	4604      	mov	r4, r0
 800fa88:	4628      	mov	r0, r5
 800fa8a:	f005 fdc9 	bl	8015620 <ucdr_serialize_string>
 800fa8e:	6933      	ldr	r3, [r6, #16]
 800fa90:	f109 0901 	add.w	r9, r9, #1
 800fa94:	4004      	ands	r4, r0
 800fa96:	4599      	cmp	r9, r3
 800fa98:	b2e4      	uxtb	r4, r4
 800fa9a:	d3ed      	bcc.n	800fa78 <uxr_serialize_CLIENT_Representation+0x78>
 800fa9c:	ea08 0804 	and.w	r8, r8, r4
 800faa0:	e7d7      	b.n	800fa52 <uxr_serialize_CLIENT_Representation+0x52>
 800faa2:	f04f 0800 	mov.w	r8, #0
 800faa6:	e7d4      	b.n	800fa52 <uxr_serialize_CLIENT_Representation+0x52>
 800faa8:	ea08 0800 	and.w	r8, r8, r0
 800faac:	e7d1      	b.n	800fa52 <uxr_serialize_CLIENT_Representation+0x52>
 800faae:	bf00      	nop

0800fab0 <uxr_deserialize_CLIENT_Representation>:
 800fab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fab4:	2204      	movs	r2, #4
 800fab6:	460c      	mov	r4, r1
 800fab8:	4605      	mov	r5, r0
 800faba:	f005 fcf5 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 800fabe:	2202      	movs	r2, #2
 800fac0:	4607      	mov	r7, r0
 800fac2:	1d21      	adds	r1, r4, #4
 800fac4:	4628      	mov	r0, r5
 800fac6:	f005 fcef 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 800faca:	4038      	ands	r0, r7
 800facc:	2202      	movs	r2, #2
 800face:	1da1      	adds	r1, r4, #6
 800fad0:	b2c6      	uxtb	r6, r0
 800fad2:	4628      	mov	r0, r5
 800fad4:	f005 fce8 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 800fad8:	2204      	movs	r2, #4
 800fada:	4006      	ands	r6, r0
 800fadc:	f104 0108 	add.w	r1, r4, #8
 800fae0:	4628      	mov	r0, r5
 800fae2:	f005 fce1 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 800fae6:	f104 010c 	add.w	r1, r4, #12
 800faea:	4006      	ands	r6, r0
 800faec:	4628      	mov	r0, r5
 800faee:	f7fc faa3 	bl	800c038 <ucdr_deserialize_uint8_t>
 800faf2:	f104 010d 	add.w	r1, r4, #13
 800faf6:	ea06 0700 	and.w	r7, r6, r0
 800fafa:	4628      	mov	r0, r5
 800fafc:	f7fc fa6e 	bl	800bfdc <ucdr_deserialize_bool>
 800fb00:	7b63      	ldrb	r3, [r4, #13]
 800fb02:	4007      	ands	r7, r0
 800fb04:	b93b      	cbnz	r3, 800fb16 <uxr_deserialize_CLIENT_Representation+0x66>
 800fb06:	f104 011c 	add.w	r1, r4, #28
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	f7fc fbaa 	bl	800c264 <ucdr_deserialize_uint16_t>
 800fb10:	4038      	ands	r0, r7
 800fb12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb16:	f104 0110 	add.w	r1, r4, #16
 800fb1a:	4628      	mov	r0, r5
 800fb1c:	f7fc fdbc 	bl	800c698 <ucdr_deserialize_uint32_t>
 800fb20:	6923      	ldr	r3, [r4, #16]
 800fb22:	2b01      	cmp	r3, #1
 800fb24:	d903      	bls.n	800fb2e <uxr_deserialize_CLIENT_Representation+0x7e>
 800fb26:	2301      	movs	r3, #1
 800fb28:	75ab      	strb	r3, [r5, #22]
 800fb2a:	2700      	movs	r7, #0
 800fb2c:	e7eb      	b.n	800fb06 <uxr_deserialize_CLIENT_Representation+0x56>
 800fb2e:	b30b      	cbz	r3, 800fb74 <uxr_deserialize_CLIENT_Representation+0xc4>
 800fb30:	2800      	cmp	r0, #0
 800fb32:	d0fa      	beq.n	800fb2a <uxr_deserialize_CLIENT_Representation+0x7a>
 800fb34:	46a0      	mov	r8, r4
 800fb36:	f04f 0900 	mov.w	r9, #0
 800fb3a:	e001      	b.n	800fb40 <uxr_deserialize_CLIENT_Representation+0x90>
 800fb3c:	2e00      	cmp	r6, #0
 800fb3e:	d0f4      	beq.n	800fb2a <uxr_deserialize_CLIENT_Representation+0x7a>
 800fb40:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800fb44:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb48:	4628      	mov	r0, r5
 800fb4a:	f005 fd79 	bl	8015640 <ucdr_deserialize_string>
 800fb4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb52:	4606      	mov	r6, r0
 800fb54:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800fb58:	4628      	mov	r0, r5
 800fb5a:	f005 fd71 	bl	8015640 <ucdr_deserialize_string>
 800fb5e:	6923      	ldr	r3, [r4, #16]
 800fb60:	f109 0901 	add.w	r9, r9, #1
 800fb64:	4006      	ands	r6, r0
 800fb66:	4599      	cmp	r9, r3
 800fb68:	f108 0808 	add.w	r8, r8, #8
 800fb6c:	b2f6      	uxtb	r6, r6
 800fb6e:	d3e5      	bcc.n	800fb3c <uxr_deserialize_CLIENT_Representation+0x8c>
 800fb70:	4037      	ands	r7, r6
 800fb72:	e7c8      	b.n	800fb06 <uxr_deserialize_CLIENT_Representation+0x56>
 800fb74:	4007      	ands	r7, r0
 800fb76:	e7c6      	b.n	800fb06 <uxr_deserialize_CLIENT_Representation+0x56>

0800fb78 <uxr_serialize_AGENT_Representation>:
 800fb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb7c:	2204      	movs	r2, #4
 800fb7e:	460f      	mov	r7, r1
 800fb80:	4605      	mov	r5, r0
 800fb82:	f005 fc2d 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 800fb86:	2202      	movs	r2, #2
 800fb88:	4604      	mov	r4, r0
 800fb8a:	1d39      	adds	r1, r7, #4
 800fb8c:	4628      	mov	r0, r5
 800fb8e:	f005 fc27 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 800fb92:	4020      	ands	r0, r4
 800fb94:	2202      	movs	r2, #2
 800fb96:	1db9      	adds	r1, r7, #6
 800fb98:	b2c4      	uxtb	r4, r0
 800fb9a:	4628      	mov	r0, r5
 800fb9c:	f005 fc20 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 800fba0:	7a39      	ldrb	r1, [r7, #8]
 800fba2:	4004      	ands	r4, r0
 800fba4:	4628      	mov	r0, r5
 800fba6:	f7fc fa03 	bl	800bfb0 <ucdr_serialize_bool>
 800fbaa:	7a3b      	ldrb	r3, [r7, #8]
 800fbac:	ea00 0804 	and.w	r8, r0, r4
 800fbb0:	b913      	cbnz	r3, 800fbb8 <uxr_serialize_AGENT_Representation+0x40>
 800fbb2:	4640      	mov	r0, r8
 800fbb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbb8:	68f9      	ldr	r1, [r7, #12]
 800fbba:	4628      	mov	r0, r5
 800fbbc:	f7fc fc3c 	bl	800c438 <ucdr_serialize_uint32_t>
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	b303      	cbz	r3, 800fc06 <uxr_serialize_AGENT_Representation+0x8e>
 800fbc4:	b1d0      	cbz	r0, 800fbfc <uxr_serialize_AGENT_Representation+0x84>
 800fbc6:	463e      	mov	r6, r7
 800fbc8:	f04f 0900 	mov.w	r9, #0
 800fbcc:	e001      	b.n	800fbd2 <uxr_serialize_AGENT_Representation+0x5a>
 800fbce:	3608      	adds	r6, #8
 800fbd0:	b1a4      	cbz	r4, 800fbfc <uxr_serialize_AGENT_Representation+0x84>
 800fbd2:	6931      	ldr	r1, [r6, #16]
 800fbd4:	4628      	mov	r0, r5
 800fbd6:	f005 fd23 	bl	8015620 <ucdr_serialize_string>
 800fbda:	6971      	ldr	r1, [r6, #20]
 800fbdc:	4604      	mov	r4, r0
 800fbde:	4628      	mov	r0, r5
 800fbe0:	f005 fd1e 	bl	8015620 <ucdr_serialize_string>
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f109 0901 	add.w	r9, r9, #1
 800fbea:	4004      	ands	r4, r0
 800fbec:	4599      	cmp	r9, r3
 800fbee:	b2e4      	uxtb	r4, r4
 800fbf0:	d3ed      	bcc.n	800fbce <uxr_serialize_AGENT_Representation+0x56>
 800fbf2:	ea08 0804 	and.w	r8, r8, r4
 800fbf6:	4640      	mov	r0, r8
 800fbf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbfc:	f04f 0800 	mov.w	r8, #0
 800fc00:	4640      	mov	r0, r8
 800fc02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc06:	ea08 0800 	and.w	r8, r8, r0
 800fc0a:	e7d2      	b.n	800fbb2 <uxr_serialize_AGENT_Representation+0x3a>

0800fc0c <uxr_serialize_DATAWRITER_Representation>:
 800fc0c:	b570      	push	{r4, r5, r6, lr}
 800fc0e:	460d      	mov	r5, r1
 800fc10:	7809      	ldrb	r1, [r1, #0]
 800fc12:	4606      	mov	r6, r0
 800fc14:	f7fc f9fa 	bl	800c00c <ucdr_serialize_uint8_t>
 800fc18:	4604      	mov	r4, r0
 800fc1a:	b130      	cbz	r0, 800fc2a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800fc1c:	782b      	ldrb	r3, [r5, #0]
 800fc1e:	2b02      	cmp	r3, #2
 800fc20:	d00c      	beq.n	800fc3c <uxr_serialize_DATAWRITER_Representation+0x30>
 800fc22:	2b03      	cmp	r3, #3
 800fc24:	d010      	beq.n	800fc48 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800fc26:	2b01      	cmp	r3, #1
 800fc28:	d008      	beq.n	800fc3c <uxr_serialize_DATAWRITER_Representation+0x30>
 800fc2a:	2202      	movs	r2, #2
 800fc2c:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800fc30:	4630      	mov	r0, r6
 800fc32:	f005 fbd5 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 800fc36:	4020      	ands	r0, r4
 800fc38:	b2c0      	uxtb	r0, r0
 800fc3a:	bd70      	pop	{r4, r5, r6, pc}
 800fc3c:	6869      	ldr	r1, [r5, #4]
 800fc3e:	4630      	mov	r0, r6
 800fc40:	f005 fcee 	bl	8015620 <ucdr_serialize_string>
 800fc44:	4604      	mov	r4, r0
 800fc46:	e7f0      	b.n	800fc2a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800fc48:	4629      	mov	r1, r5
 800fc4a:	4630      	mov	r0, r6
 800fc4c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800fc50:	3104      	adds	r1, #4
 800fc52:	f005 fcb9 	bl	80155c8 <ucdr_serialize_sequence_uint8_t>
 800fc56:	4604      	mov	r4, r0
 800fc58:	e7e7      	b.n	800fc2a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800fc5a:	bf00      	nop

0800fc5c <uxr_serialize_ObjectVariant.part.0>:
 800fc5c:	b570      	push	{r4, r5, r6, lr}
 800fc5e:	780b      	ldrb	r3, [r1, #0]
 800fc60:	3b01      	subs	r3, #1
 800fc62:	460c      	mov	r4, r1
 800fc64:	4605      	mov	r5, r0
 800fc66:	2b0d      	cmp	r3, #13
 800fc68:	d854      	bhi.n	800fd14 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800fc6a:	e8df f003 	tbb	[pc, r3]
 800fc6e:	0730      	.short	0x0730
 800fc70:	07071b1b 	.word	0x07071b1b
 800fc74:	0c530707 	.word	0x0c530707
 800fc78:	494e0c0c 	.word	0x494e0c0c
 800fc7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc80:	3104      	adds	r1, #4
 800fc82:	f7ff bfc3 	b.w	800fc0c <uxr_serialize_DATAWRITER_Representation>
 800fc86:	7909      	ldrb	r1, [r1, #4]
 800fc88:	f7fc f9c0 	bl	800c00c <ucdr_serialize_uint8_t>
 800fc8c:	b1e8      	cbz	r0, 800fcca <uxr_serialize_ObjectVariant.part.0+0x6e>
 800fc8e:	7923      	ldrb	r3, [r4, #4]
 800fc90:	2b01      	cmp	r3, #1
 800fc92:	d001      	beq.n	800fc98 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800fc94:	2b02      	cmp	r3, #2
 800fc96:	d13d      	bne.n	800fd14 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800fc98:	68a1      	ldr	r1, [r4, #8]
 800fc9a:	4628      	mov	r0, r5
 800fc9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fca0:	f005 bcbe 	b.w	8015620 <ucdr_serialize_string>
 800fca4:	7909      	ldrb	r1, [r1, #4]
 800fca6:	f7fc f9b1 	bl	800c00c <ucdr_serialize_uint8_t>
 800fcaa:	4606      	mov	r6, r0
 800fcac:	b120      	cbz	r0, 800fcb8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800fcae:	7923      	ldrb	r3, [r4, #4]
 800fcb0:	2b02      	cmp	r3, #2
 800fcb2:	d039      	beq.n	800fd28 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800fcb4:	2b03      	cmp	r3, #3
 800fcb6:	d02f      	beq.n	800fd18 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800fcb8:	2202      	movs	r2, #2
 800fcba:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800fcbe:	4628      	mov	r0, r5
 800fcc0:	f005 fb8e 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 800fcc4:	4030      	ands	r0, r6
 800fcc6:	b2c0      	uxtb	r0, r0
 800fcc8:	bd70      	pop	{r4, r5, r6, pc}
 800fcca:	2000      	movs	r0, #0
 800fccc:	bd70      	pop	{r4, r5, r6, pc}
 800fcce:	7909      	ldrb	r1, [r1, #4]
 800fcd0:	f7fc f99c 	bl	800c00c <ucdr_serialize_uint8_t>
 800fcd4:	4606      	mov	r6, r0
 800fcd6:	b158      	cbz	r0, 800fcf0 <uxr_serialize_ObjectVariant.part.0+0x94>
 800fcd8:	7923      	ldrb	r3, [r4, #4]
 800fcda:	2b02      	cmp	r3, #2
 800fcdc:	d003      	beq.n	800fce6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800fcde:	2b03      	cmp	r3, #3
 800fce0:	d028      	beq.n	800fd34 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800fce2:	2b01      	cmp	r3, #1
 800fce4:	d104      	bne.n	800fcf0 <uxr_serialize_ObjectVariant.part.0+0x94>
 800fce6:	68a1      	ldr	r1, [r4, #8]
 800fce8:	4628      	mov	r0, r5
 800fcea:	f005 fc99 	bl	8015620 <ucdr_serialize_string>
 800fcee:	4606      	mov	r6, r0
 800fcf0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800fcf4:	4628      	mov	r0, r5
 800fcf6:	f7fc fec5 	bl	800ca84 <ucdr_serialize_int16_t>
 800fcfa:	4030      	ands	r0, r6
 800fcfc:	b2c0      	uxtb	r0, r0
 800fcfe:	bd70      	pop	{r4, r5, r6, pc}
 800fd00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd04:	3104      	adds	r1, #4
 800fd06:	f7ff be7b 	b.w	800fa00 <uxr_serialize_CLIENT_Representation>
 800fd0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd0e:	3104      	adds	r1, #4
 800fd10:	f7ff bf32 	b.w	800fb78 <uxr_serialize_AGENT_Representation>
 800fd14:	2001      	movs	r0, #1
 800fd16:	bd70      	pop	{r4, r5, r6, pc}
 800fd18:	68a2      	ldr	r2, [r4, #8]
 800fd1a:	f104 010c 	add.w	r1, r4, #12
 800fd1e:	4628      	mov	r0, r5
 800fd20:	f005 fc52 	bl	80155c8 <ucdr_serialize_sequence_uint8_t>
 800fd24:	4606      	mov	r6, r0
 800fd26:	e7c7      	b.n	800fcb8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800fd28:	68a1      	ldr	r1, [r4, #8]
 800fd2a:	4628      	mov	r0, r5
 800fd2c:	f005 fc78 	bl	8015620 <ucdr_serialize_string>
 800fd30:	4606      	mov	r6, r0
 800fd32:	e7c1      	b.n	800fcb8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800fd34:	68a2      	ldr	r2, [r4, #8]
 800fd36:	f104 010c 	add.w	r1, r4, #12
 800fd3a:	4628      	mov	r0, r5
 800fd3c:	f005 fc44 	bl	80155c8 <ucdr_serialize_sequence_uint8_t>
 800fd40:	4606      	mov	r6, r0
 800fd42:	e7d5      	b.n	800fcf0 <uxr_serialize_ObjectVariant.part.0+0x94>

0800fd44 <uxr_deserialize_DATAWRITER_Representation>:
 800fd44:	b570      	push	{r4, r5, r6, lr}
 800fd46:	4606      	mov	r6, r0
 800fd48:	460d      	mov	r5, r1
 800fd4a:	f7fc f975 	bl	800c038 <ucdr_deserialize_uint8_t>
 800fd4e:	4604      	mov	r4, r0
 800fd50:	b130      	cbz	r0, 800fd60 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800fd52:	782b      	ldrb	r3, [r5, #0]
 800fd54:	2b02      	cmp	r3, #2
 800fd56:	d00c      	beq.n	800fd72 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800fd58:	2b03      	cmp	r3, #3
 800fd5a:	d012      	beq.n	800fd82 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d008      	beq.n	800fd72 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800fd60:	2202      	movs	r2, #2
 800fd62:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800fd66:	4630      	mov	r0, r6
 800fd68:	f005 fb9e 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 800fd6c:	4020      	ands	r0, r4
 800fd6e:	b2c0      	uxtb	r0, r0
 800fd70:	bd70      	pop	{r4, r5, r6, pc}
 800fd72:	6869      	ldr	r1, [r5, #4]
 800fd74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fd78:	4630      	mov	r0, r6
 800fd7a:	f005 fc61 	bl	8015640 <ucdr_deserialize_string>
 800fd7e:	4604      	mov	r4, r0
 800fd80:	e7ee      	b.n	800fd60 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800fd82:	1d2b      	adds	r3, r5, #4
 800fd84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fd88:	f105 0108 	add.w	r1, r5, #8
 800fd8c:	4630      	mov	r0, r6
 800fd8e:	f005 fc2d 	bl	80155ec <ucdr_deserialize_sequence_uint8_t>
 800fd92:	4604      	mov	r4, r0
 800fd94:	e7e4      	b.n	800fd60 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800fd96:	bf00      	nop

0800fd98 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800fd98:	b570      	push	{r4, r5, r6, lr}
 800fd9a:	460d      	mov	r5, r1
 800fd9c:	7809      	ldrb	r1, [r1, #0]
 800fd9e:	4606      	mov	r6, r0
 800fda0:	f7fc f906 	bl	800bfb0 <ucdr_serialize_bool>
 800fda4:	782b      	ldrb	r3, [r5, #0]
 800fda6:	4604      	mov	r4, r0
 800fda8:	b94b      	cbnz	r3, 800fdbe <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800fdaa:	7a29      	ldrb	r1, [r5, #8]
 800fdac:	4630      	mov	r0, r6
 800fdae:	f7fc f8ff 	bl	800bfb0 <ucdr_serialize_bool>
 800fdb2:	7a2b      	ldrb	r3, [r5, #8]
 800fdb4:	4004      	ands	r4, r0
 800fdb6:	b2e4      	uxtb	r4, r4
 800fdb8:	b943      	cbnz	r3, 800fdcc <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800fdba:	4620      	mov	r0, r4
 800fdbc:	bd70      	pop	{r4, r5, r6, pc}
 800fdbe:	6869      	ldr	r1, [r5, #4]
 800fdc0:	4630      	mov	r0, r6
 800fdc2:	f005 fc2d 	bl	8015620 <ucdr_serialize_string>
 800fdc6:	4004      	ands	r4, r0
 800fdc8:	b2e4      	uxtb	r4, r4
 800fdca:	e7ee      	b.n	800fdaa <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800fdcc:	68e9      	ldr	r1, [r5, #12]
 800fdce:	4630      	mov	r0, r6
 800fdd0:	f005 fc26 	bl	8015620 <ucdr_serialize_string>
 800fdd4:	4004      	ands	r4, r0
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	bd70      	pop	{r4, r5, r6, pc}
 800fdda:	bf00      	nop

0800fddc <uxr_serialize_OBJK_Topic_Binary>:
 800fddc:	b570      	push	{r4, r5, r6, lr}
 800fdde:	460d      	mov	r5, r1
 800fde0:	6809      	ldr	r1, [r1, #0]
 800fde2:	4606      	mov	r6, r0
 800fde4:	f005 fc1c 	bl	8015620 <ucdr_serialize_string>
 800fde8:	7929      	ldrb	r1, [r5, #4]
 800fdea:	4604      	mov	r4, r0
 800fdec:	4630      	mov	r0, r6
 800fdee:	f7fc f8df 	bl	800bfb0 <ucdr_serialize_bool>
 800fdf2:	792b      	ldrb	r3, [r5, #4]
 800fdf4:	4004      	ands	r4, r0
 800fdf6:	b2e4      	uxtb	r4, r4
 800fdf8:	b943      	cbnz	r3, 800fe0c <uxr_serialize_OBJK_Topic_Binary+0x30>
 800fdfa:	7b29      	ldrb	r1, [r5, #12]
 800fdfc:	4630      	mov	r0, r6
 800fdfe:	f7fc f8d7 	bl	800bfb0 <ucdr_serialize_bool>
 800fe02:	7b2b      	ldrb	r3, [r5, #12]
 800fe04:	4004      	ands	r4, r0
 800fe06:	b93b      	cbnz	r3, 800fe18 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800fe08:	4620      	mov	r0, r4
 800fe0a:	bd70      	pop	{r4, r5, r6, pc}
 800fe0c:	68a9      	ldr	r1, [r5, #8]
 800fe0e:	4630      	mov	r0, r6
 800fe10:	f005 fc06 	bl	8015620 <ucdr_serialize_string>
 800fe14:	4004      	ands	r4, r0
 800fe16:	e7f0      	b.n	800fdfa <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800fe18:	6929      	ldr	r1, [r5, #16]
 800fe1a:	4630      	mov	r0, r6
 800fe1c:	f005 fc00 	bl	8015620 <ucdr_serialize_string>
 800fe20:	4004      	ands	r4, r0
 800fe22:	b2e4      	uxtb	r4, r4
 800fe24:	4620      	mov	r0, r4
 800fe26:	bd70      	pop	{r4, r5, r6, pc}

0800fe28 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800fe28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe2c:	460c      	mov	r4, r1
 800fe2e:	7809      	ldrb	r1, [r1, #0]
 800fe30:	4606      	mov	r6, r0
 800fe32:	f7fc f8bd 	bl	800bfb0 <ucdr_serialize_bool>
 800fe36:	7823      	ldrb	r3, [r4, #0]
 800fe38:	4605      	mov	r5, r0
 800fe3a:	b96b      	cbnz	r3, 800fe58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800fe3c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800fe40:	4630      	mov	r0, r6
 800fe42:	f7fc f8b5 	bl	800bfb0 <ucdr_serialize_bool>
 800fe46:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800fe4a:	4005      	ands	r5, r0
 800fe4c:	b2ed      	uxtb	r5, r5
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d169      	bne.n	800ff26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800fe52:	4628      	mov	r0, r5
 800fe54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe58:	6861      	ldr	r1, [r4, #4]
 800fe5a:	4630      	mov	r0, r6
 800fe5c:	f7fc faec 	bl	800c438 <ucdr_serialize_uint32_t>
 800fe60:	6863      	ldr	r3, [r4, #4]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d06b      	beq.n	800ff3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800fe66:	2800      	cmp	r0, #0
 800fe68:	d067      	beq.n	800ff3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fe6a:	68a1      	ldr	r1, [r4, #8]
 800fe6c:	4630      	mov	r0, r6
 800fe6e:	f005 fbd7 	bl	8015620 <ucdr_serialize_string>
 800fe72:	6863      	ldr	r3, [r4, #4]
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d953      	bls.n	800ff20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fe78:	2800      	cmp	r0, #0
 800fe7a:	d05e      	beq.n	800ff3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fe7c:	68e1      	ldr	r1, [r4, #12]
 800fe7e:	4630      	mov	r0, r6
 800fe80:	f005 fbce 	bl	8015620 <ucdr_serialize_string>
 800fe84:	6863      	ldr	r3, [r4, #4]
 800fe86:	2b02      	cmp	r3, #2
 800fe88:	d94a      	bls.n	800ff20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fe8a:	2800      	cmp	r0, #0
 800fe8c:	d055      	beq.n	800ff3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fe8e:	6921      	ldr	r1, [r4, #16]
 800fe90:	4630      	mov	r0, r6
 800fe92:	f005 fbc5 	bl	8015620 <ucdr_serialize_string>
 800fe96:	6863      	ldr	r3, [r4, #4]
 800fe98:	2b03      	cmp	r3, #3
 800fe9a:	d941      	bls.n	800ff20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fe9c:	2800      	cmp	r0, #0
 800fe9e:	d04c      	beq.n	800ff3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fea0:	6961      	ldr	r1, [r4, #20]
 800fea2:	4630      	mov	r0, r6
 800fea4:	f005 fbbc 	bl	8015620 <ucdr_serialize_string>
 800fea8:	6863      	ldr	r3, [r4, #4]
 800feaa:	2b04      	cmp	r3, #4
 800feac:	d938      	bls.n	800ff20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800feae:	2800      	cmp	r0, #0
 800feb0:	d043      	beq.n	800ff3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800feb2:	69a1      	ldr	r1, [r4, #24]
 800feb4:	4630      	mov	r0, r6
 800feb6:	f005 fbb3 	bl	8015620 <ucdr_serialize_string>
 800feba:	6863      	ldr	r3, [r4, #4]
 800febc:	2b05      	cmp	r3, #5
 800febe:	d92f      	bls.n	800ff20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fec0:	2800      	cmp	r0, #0
 800fec2:	d03a      	beq.n	800ff3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fec4:	69e1      	ldr	r1, [r4, #28]
 800fec6:	4630      	mov	r0, r6
 800fec8:	f005 fbaa 	bl	8015620 <ucdr_serialize_string>
 800fecc:	6863      	ldr	r3, [r4, #4]
 800fece:	2b06      	cmp	r3, #6
 800fed0:	d926      	bls.n	800ff20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fed2:	b390      	cbz	r0, 800ff3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fed4:	6a21      	ldr	r1, [r4, #32]
 800fed6:	4630      	mov	r0, r6
 800fed8:	f005 fba2 	bl	8015620 <ucdr_serialize_string>
 800fedc:	6863      	ldr	r3, [r4, #4]
 800fede:	2b07      	cmp	r3, #7
 800fee0:	d91e      	bls.n	800ff20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fee2:	b350      	cbz	r0, 800ff3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fee4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fee6:	4630      	mov	r0, r6
 800fee8:	f005 fb9a 	bl	8015620 <ucdr_serialize_string>
 800feec:	6863      	ldr	r3, [r4, #4]
 800feee:	2b08      	cmp	r3, #8
 800fef0:	d916      	bls.n	800ff20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fef2:	b310      	cbz	r0, 800ff3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fef4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800fef6:	4630      	mov	r0, r6
 800fef8:	f005 fb92 	bl	8015620 <ucdr_serialize_string>
 800fefc:	6863      	ldr	r3, [r4, #4]
 800fefe:	2b09      	cmp	r3, #9
 800ff00:	d90e      	bls.n	800ff20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ff02:	b1d0      	cbz	r0, 800ff3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ff04:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800ff08:	2709      	movs	r7, #9
 800ff0a:	e000      	b.n	800ff0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800ff0c:	b1a8      	cbz	r0, 800ff3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ff0e:	f858 1b04 	ldr.w	r1, [r8], #4
 800ff12:	4630      	mov	r0, r6
 800ff14:	f005 fb84 	bl	8015620 <ucdr_serialize_string>
 800ff18:	6862      	ldr	r2, [r4, #4]
 800ff1a:	3701      	adds	r7, #1
 800ff1c:	4297      	cmp	r7, r2
 800ff1e:	d3f5      	bcc.n	800ff0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800ff20:	4005      	ands	r5, r0
 800ff22:	b2ed      	uxtb	r5, r5
 800ff24:	e78a      	b.n	800fe3c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800ff26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ff28:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800ff2c:	4630      	mov	r0, r6
 800ff2e:	f005 fb4b 	bl	80155c8 <ucdr_serialize_sequence_uint8_t>
 800ff32:	4005      	ands	r5, r0
 800ff34:	4628      	mov	r0, r5
 800ff36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff3a:	2500      	movs	r5, #0
 800ff3c:	e77e      	b.n	800fe3c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800ff3e:	4028      	ands	r0, r5
 800ff40:	b2c5      	uxtb	r5, r0
 800ff42:	e77b      	b.n	800fe3c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800ff44 <uxr_serialize_OBJK_Publisher_Binary>:
 800ff44:	b570      	push	{r4, r5, r6, lr}
 800ff46:	460d      	mov	r5, r1
 800ff48:	7809      	ldrb	r1, [r1, #0]
 800ff4a:	4606      	mov	r6, r0
 800ff4c:	f7fc f830 	bl	800bfb0 <ucdr_serialize_bool>
 800ff50:	782b      	ldrb	r3, [r5, #0]
 800ff52:	4604      	mov	r4, r0
 800ff54:	b94b      	cbnz	r3, 800ff6a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800ff56:	7a29      	ldrb	r1, [r5, #8]
 800ff58:	4630      	mov	r0, r6
 800ff5a:	f7fc f829 	bl	800bfb0 <ucdr_serialize_bool>
 800ff5e:	7a2b      	ldrb	r3, [r5, #8]
 800ff60:	4004      	ands	r4, r0
 800ff62:	b2e4      	uxtb	r4, r4
 800ff64:	b943      	cbnz	r3, 800ff78 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800ff66:	4620      	mov	r0, r4
 800ff68:	bd70      	pop	{r4, r5, r6, pc}
 800ff6a:	6869      	ldr	r1, [r5, #4]
 800ff6c:	4630      	mov	r0, r6
 800ff6e:	f005 fb57 	bl	8015620 <ucdr_serialize_string>
 800ff72:	4004      	ands	r4, r0
 800ff74:	b2e4      	uxtb	r4, r4
 800ff76:	e7ee      	b.n	800ff56 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800ff78:	f105 010c 	add.w	r1, r5, #12
 800ff7c:	4630      	mov	r0, r6
 800ff7e:	f7ff ff53 	bl	800fe28 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800ff82:	4004      	ands	r4, r0
 800ff84:	4620      	mov	r0, r4
 800ff86:	bd70      	pop	{r4, r5, r6, pc}

0800ff88 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800ff88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff8c:	460c      	mov	r4, r1
 800ff8e:	7809      	ldrb	r1, [r1, #0]
 800ff90:	4606      	mov	r6, r0
 800ff92:	f7fc f80d 	bl	800bfb0 <ucdr_serialize_bool>
 800ff96:	7823      	ldrb	r3, [r4, #0]
 800ff98:	4605      	mov	r5, r0
 800ff9a:	b96b      	cbnz	r3, 800ffb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800ff9c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800ffa0:	4630      	mov	r0, r6
 800ffa2:	f7fc f805 	bl	800bfb0 <ucdr_serialize_bool>
 800ffa6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ffaa:	4005      	ands	r5, r0
 800ffac:	b2ed      	uxtb	r5, r5
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d169      	bne.n	8010086 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800ffb2:	4628      	mov	r0, r5
 800ffb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffb8:	6861      	ldr	r1, [r4, #4]
 800ffba:	4630      	mov	r0, r6
 800ffbc:	f7fc fa3c 	bl	800c438 <ucdr_serialize_uint32_t>
 800ffc0:	6863      	ldr	r3, [r4, #4]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d06b      	beq.n	801009e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800ffc6:	2800      	cmp	r0, #0
 800ffc8:	d067      	beq.n	801009a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ffca:	68a1      	ldr	r1, [r4, #8]
 800ffcc:	4630      	mov	r0, r6
 800ffce:	f005 fb27 	bl	8015620 <ucdr_serialize_string>
 800ffd2:	6863      	ldr	r3, [r4, #4]
 800ffd4:	2b01      	cmp	r3, #1
 800ffd6:	d953      	bls.n	8010080 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ffd8:	2800      	cmp	r0, #0
 800ffda:	d05e      	beq.n	801009a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ffdc:	68e1      	ldr	r1, [r4, #12]
 800ffde:	4630      	mov	r0, r6
 800ffe0:	f005 fb1e 	bl	8015620 <ucdr_serialize_string>
 800ffe4:	6863      	ldr	r3, [r4, #4]
 800ffe6:	2b02      	cmp	r3, #2
 800ffe8:	d94a      	bls.n	8010080 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ffea:	2800      	cmp	r0, #0
 800ffec:	d055      	beq.n	801009a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ffee:	6921      	ldr	r1, [r4, #16]
 800fff0:	4630      	mov	r0, r6
 800fff2:	f005 fb15 	bl	8015620 <ucdr_serialize_string>
 800fff6:	6863      	ldr	r3, [r4, #4]
 800fff8:	2b03      	cmp	r3, #3
 800fffa:	d941      	bls.n	8010080 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800fffc:	2800      	cmp	r0, #0
 800fffe:	d04c      	beq.n	801009a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010000:	6961      	ldr	r1, [r4, #20]
 8010002:	4630      	mov	r0, r6
 8010004:	f005 fb0c 	bl	8015620 <ucdr_serialize_string>
 8010008:	6863      	ldr	r3, [r4, #4]
 801000a:	2b04      	cmp	r3, #4
 801000c:	d938      	bls.n	8010080 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801000e:	2800      	cmp	r0, #0
 8010010:	d043      	beq.n	801009a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010012:	69a1      	ldr	r1, [r4, #24]
 8010014:	4630      	mov	r0, r6
 8010016:	f005 fb03 	bl	8015620 <ucdr_serialize_string>
 801001a:	6863      	ldr	r3, [r4, #4]
 801001c:	2b05      	cmp	r3, #5
 801001e:	d92f      	bls.n	8010080 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010020:	2800      	cmp	r0, #0
 8010022:	d03a      	beq.n	801009a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010024:	69e1      	ldr	r1, [r4, #28]
 8010026:	4630      	mov	r0, r6
 8010028:	f005 fafa 	bl	8015620 <ucdr_serialize_string>
 801002c:	6863      	ldr	r3, [r4, #4]
 801002e:	2b06      	cmp	r3, #6
 8010030:	d926      	bls.n	8010080 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010032:	b390      	cbz	r0, 801009a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010034:	6a21      	ldr	r1, [r4, #32]
 8010036:	4630      	mov	r0, r6
 8010038:	f005 faf2 	bl	8015620 <ucdr_serialize_string>
 801003c:	6863      	ldr	r3, [r4, #4]
 801003e:	2b07      	cmp	r3, #7
 8010040:	d91e      	bls.n	8010080 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010042:	b350      	cbz	r0, 801009a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010044:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010046:	4630      	mov	r0, r6
 8010048:	f005 faea 	bl	8015620 <ucdr_serialize_string>
 801004c:	6863      	ldr	r3, [r4, #4]
 801004e:	2b08      	cmp	r3, #8
 8010050:	d916      	bls.n	8010080 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010052:	b310      	cbz	r0, 801009a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010054:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8010056:	4630      	mov	r0, r6
 8010058:	f005 fae2 	bl	8015620 <ucdr_serialize_string>
 801005c:	6863      	ldr	r3, [r4, #4]
 801005e:	2b09      	cmp	r3, #9
 8010060:	d90e      	bls.n	8010080 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010062:	b1d0      	cbz	r0, 801009a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010064:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8010068:	2709      	movs	r7, #9
 801006a:	e000      	b.n	801006e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801006c:	b1a8      	cbz	r0, 801009a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801006e:	f858 1b04 	ldr.w	r1, [r8], #4
 8010072:	4630      	mov	r0, r6
 8010074:	f005 fad4 	bl	8015620 <ucdr_serialize_string>
 8010078:	6862      	ldr	r2, [r4, #4]
 801007a:	3701      	adds	r7, #1
 801007c:	4297      	cmp	r7, r2
 801007e:	d3f5      	bcc.n	801006c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8010080:	4005      	ands	r5, r0
 8010082:	b2ed      	uxtb	r5, r5
 8010084:	e78a      	b.n	800ff9c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8010086:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010088:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801008c:	4630      	mov	r0, r6
 801008e:	f005 fa9b 	bl	80155c8 <ucdr_serialize_sequence_uint8_t>
 8010092:	4005      	ands	r5, r0
 8010094:	4628      	mov	r0, r5
 8010096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801009a:	2500      	movs	r5, #0
 801009c:	e77e      	b.n	800ff9c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801009e:	4028      	ands	r0, r5
 80100a0:	b2c5      	uxtb	r5, r0
 80100a2:	e77b      	b.n	800ff9c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

080100a4 <uxr_serialize_OBJK_Subscriber_Binary>:
 80100a4:	b570      	push	{r4, r5, r6, lr}
 80100a6:	460d      	mov	r5, r1
 80100a8:	7809      	ldrb	r1, [r1, #0]
 80100aa:	4606      	mov	r6, r0
 80100ac:	f7fb ff80 	bl	800bfb0 <ucdr_serialize_bool>
 80100b0:	782b      	ldrb	r3, [r5, #0]
 80100b2:	4604      	mov	r4, r0
 80100b4:	b94b      	cbnz	r3, 80100ca <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80100b6:	7a29      	ldrb	r1, [r5, #8]
 80100b8:	4630      	mov	r0, r6
 80100ba:	f7fb ff79 	bl	800bfb0 <ucdr_serialize_bool>
 80100be:	7a2b      	ldrb	r3, [r5, #8]
 80100c0:	4004      	ands	r4, r0
 80100c2:	b2e4      	uxtb	r4, r4
 80100c4:	b943      	cbnz	r3, 80100d8 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80100c6:	4620      	mov	r0, r4
 80100c8:	bd70      	pop	{r4, r5, r6, pc}
 80100ca:	6869      	ldr	r1, [r5, #4]
 80100cc:	4630      	mov	r0, r6
 80100ce:	f005 faa7 	bl	8015620 <ucdr_serialize_string>
 80100d2:	4004      	ands	r4, r0
 80100d4:	b2e4      	uxtb	r4, r4
 80100d6:	e7ee      	b.n	80100b6 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80100d8:	f105 010c 	add.w	r1, r5, #12
 80100dc:	4630      	mov	r0, r6
 80100de:	f7ff ff53 	bl	800ff88 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80100e2:	4004      	ands	r4, r0
 80100e4:	4620      	mov	r0, r4
 80100e6:	bd70      	pop	{r4, r5, r6, pc}

080100e8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80100e8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80100ec:	4688      	mov	r8, r1
 80100ee:	8809      	ldrh	r1, [r1, #0]
 80100f0:	4681      	mov	r9, r0
 80100f2:	f7fb ffb7 	bl	800c064 <ucdr_serialize_uint16_t>
 80100f6:	f898 1002 	ldrb.w	r1, [r8, #2]
 80100fa:	4606      	mov	r6, r0
 80100fc:	4648      	mov	r0, r9
 80100fe:	f7fb ff57 	bl	800bfb0 <ucdr_serialize_bool>
 8010102:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010106:	4006      	ands	r6, r0
 8010108:	b2f5      	uxtb	r5, r6
 801010a:	b9eb      	cbnz	r3, 8010148 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801010c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8010110:	4648      	mov	r0, r9
 8010112:	f7fb ff4d 	bl	800bfb0 <ucdr_serialize_bool>
 8010116:	f898 3006 	ldrb.w	r3, [r8, #6]
 801011a:	4005      	ands	r5, r0
 801011c:	bb7b      	cbnz	r3, 801017e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801011e:	f898 100c 	ldrb.w	r1, [r8, #12]
 8010122:	4648      	mov	r0, r9
 8010124:	f7fb ff44 	bl	800bfb0 <ucdr_serialize_bool>
 8010128:	f898 300c 	ldrb.w	r3, [r8, #12]
 801012c:	4005      	ands	r5, r0
 801012e:	b9f3      	cbnz	r3, 801016e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8010130:	f898 1014 	ldrb.w	r1, [r8, #20]
 8010134:	4648      	mov	r0, r9
 8010136:	f7fb ff3b 	bl	800bfb0 <ucdr_serialize_bool>
 801013a:	f898 3014 	ldrb.w	r3, [r8, #20]
 801013e:	4005      	ands	r5, r0
 8010140:	b94b      	cbnz	r3, 8010156 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8010142:	4628      	mov	r0, r5
 8010144:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8010148:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801014c:	4648      	mov	r0, r9
 801014e:	f7fb ff89 	bl	800c064 <ucdr_serialize_uint16_t>
 8010152:	4005      	ands	r5, r0
 8010154:	e7da      	b.n	801010c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8010156:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801015a:	f108 011c 	add.w	r1, r8, #28
 801015e:	4648      	mov	r0, r9
 8010160:	f005 fa32 	bl	80155c8 <ucdr_serialize_sequence_uint8_t>
 8010164:	4028      	ands	r0, r5
 8010166:	b2c5      	uxtb	r5, r0
 8010168:	4628      	mov	r0, r5
 801016a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801016e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010172:	4648      	mov	r0, r9
 8010174:	f7fc f960 	bl	800c438 <ucdr_serialize_uint32_t>
 8010178:	4028      	ands	r0, r5
 801017a:	b2c5      	uxtb	r5, r0
 801017c:	e7d8      	b.n	8010130 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801017e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8010182:	4648      	mov	r0, r9
 8010184:	f7fc f958 	bl	800c438 <ucdr_serialize_uint32_t>
 8010188:	4028      	ands	r0, r5
 801018a:	b2c5      	uxtb	r5, r0
 801018c:	e7c7      	b.n	801011e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801018e:	bf00      	nop

08010190 <uxr_serialize_OBJK_DataReader_Binary>:
 8010190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010192:	2202      	movs	r2, #2
 8010194:	460c      	mov	r4, r1
 8010196:	4606      	mov	r6, r0
 8010198:	f005 f922 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 801019c:	78a1      	ldrb	r1, [r4, #2]
 801019e:	4605      	mov	r5, r0
 80101a0:	4630      	mov	r0, r6
 80101a2:	f7fb ff05 	bl	800bfb0 <ucdr_serialize_bool>
 80101a6:	78a3      	ldrb	r3, [r4, #2]
 80101a8:	4005      	ands	r5, r0
 80101aa:	b2ed      	uxtb	r5, r5
 80101ac:	b90b      	cbnz	r3, 80101b2 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80101ae:	4628      	mov	r0, r5
 80101b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101b2:	f104 0108 	add.w	r1, r4, #8
 80101b6:	4630      	mov	r0, r6
 80101b8:	f7ff ff96 	bl	80100e8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80101bc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80101c0:	4607      	mov	r7, r0
 80101c2:	4630      	mov	r0, r6
 80101c4:	f7fb fef4 	bl	800bfb0 <ucdr_serialize_bool>
 80101c8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80101cc:	4038      	ands	r0, r7
 80101ce:	b2c7      	uxtb	r7, r0
 80101d0:	b95b      	cbnz	r3, 80101ea <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80101d2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 80101d6:	4630      	mov	r0, r6
 80101d8:	f7fb feea 	bl	800bfb0 <ucdr_serialize_bool>
 80101dc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80101e0:	4007      	ands	r7, r0
 80101e2:	b94b      	cbnz	r3, 80101f8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80101e4:	403d      	ands	r5, r7
 80101e6:	4628      	mov	r0, r5
 80101e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101ea:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 80101ee:	4630      	mov	r0, r6
 80101f0:	f7fc fb78 	bl	800c8e4 <ucdr_serialize_uint64_t>
 80101f4:	4007      	ands	r7, r0
 80101f6:	e7ec      	b.n	80101d2 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80101f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80101fa:	4630      	mov	r0, r6
 80101fc:	f005 fa10 	bl	8015620 <ucdr_serialize_string>
 8010200:	4007      	ands	r7, r0
 8010202:	b2ff      	uxtb	r7, r7
 8010204:	e7ee      	b.n	80101e4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8010206:	bf00      	nop

08010208 <uxr_serialize_OBJK_DataWriter_Binary>:
 8010208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801020a:	2202      	movs	r2, #2
 801020c:	460d      	mov	r5, r1
 801020e:	4606      	mov	r6, r0
 8010210:	f005 f8e6 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 8010214:	78a9      	ldrb	r1, [r5, #2]
 8010216:	4604      	mov	r4, r0
 8010218:	4630      	mov	r0, r6
 801021a:	f7fb fec9 	bl	800bfb0 <ucdr_serialize_bool>
 801021e:	78ab      	ldrb	r3, [r5, #2]
 8010220:	4004      	ands	r4, r0
 8010222:	b2e4      	uxtb	r4, r4
 8010224:	b90b      	cbnz	r3, 801022a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8010226:	4620      	mov	r0, r4
 8010228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801022a:	f105 0108 	add.w	r1, r5, #8
 801022e:	4630      	mov	r0, r6
 8010230:	f7ff ff5a 	bl	80100e8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8010234:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8010238:	4607      	mov	r7, r0
 801023a:	4630      	mov	r0, r6
 801023c:	f7fb feb8 	bl	800bfb0 <ucdr_serialize_bool>
 8010240:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8010244:	4038      	ands	r0, r7
 8010246:	b2c7      	uxtb	r7, r0
 8010248:	b913      	cbnz	r3, 8010250 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801024a:	403c      	ands	r4, r7
 801024c:	4620      	mov	r0, r4
 801024e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010250:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8010254:	4630      	mov	r0, r6
 8010256:	f7fc fb45 	bl	800c8e4 <ucdr_serialize_uint64_t>
 801025a:	4007      	ands	r7, r0
 801025c:	e7f5      	b.n	801024a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801025e:	bf00      	nop

08010260 <uxr_deserialize_ObjectVariant>:
 8010260:	b570      	push	{r4, r5, r6, lr}
 8010262:	4605      	mov	r5, r0
 8010264:	460e      	mov	r6, r1
 8010266:	f7fb fee7 	bl	800c038 <ucdr_deserialize_uint8_t>
 801026a:	b168      	cbz	r0, 8010288 <uxr_deserialize_ObjectVariant+0x28>
 801026c:	7833      	ldrb	r3, [r6, #0]
 801026e:	3b01      	subs	r3, #1
 8010270:	4604      	mov	r4, r0
 8010272:	2b0d      	cmp	r3, #13
 8010274:	d809      	bhi.n	801028a <uxr_deserialize_ObjectVariant+0x2a>
 8010276:	e8df f003 	tbb	[pc, r3]
 801027a:	0a41      	.short	0x0a41
 801027c:	0a0a2323 	.word	0x0a0a2323
 8010280:	10080a0a 	.word	0x10080a0a
 8010284:	565c1010 	.word	0x565c1010
 8010288:	2400      	movs	r4, #0
 801028a:	4620      	mov	r0, r4
 801028c:	bd70      	pop	{r4, r5, r6, pc}
 801028e:	1d31      	adds	r1, r6, #4
 8010290:	4628      	mov	r0, r5
 8010292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010296:	f7ff bd55 	b.w	800fd44 <uxr_deserialize_DATAWRITER_Representation>
 801029a:	1d31      	adds	r1, r6, #4
 801029c:	4628      	mov	r0, r5
 801029e:	f7fb fecb 	bl	800c038 <ucdr_deserialize_uint8_t>
 80102a2:	2800      	cmp	r0, #0
 80102a4:	d0f0      	beq.n	8010288 <uxr_deserialize_ObjectVariant+0x28>
 80102a6:	7933      	ldrb	r3, [r6, #4]
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	d001      	beq.n	80102b0 <uxr_deserialize_ObjectVariant+0x50>
 80102ac:	2b02      	cmp	r3, #2
 80102ae:	d1ec      	bne.n	801028a <uxr_deserialize_ObjectVariant+0x2a>
 80102b0:	68b1      	ldr	r1, [r6, #8]
 80102b2:	4628      	mov	r0, r5
 80102b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80102b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102bc:	f005 b9c0 	b.w	8015640 <ucdr_deserialize_string>
 80102c0:	1d31      	adds	r1, r6, #4
 80102c2:	4628      	mov	r0, r5
 80102c4:	f7fb feb8 	bl	800c038 <ucdr_deserialize_uint8_t>
 80102c8:	4604      	mov	r4, r0
 80102ca:	b170      	cbz	r0, 80102ea <uxr_deserialize_ObjectVariant+0x8a>
 80102cc:	7933      	ldrb	r3, [r6, #4]
 80102ce:	2b02      	cmp	r3, #2
 80102d0:	d04c      	beq.n	801036c <uxr_deserialize_ObjectVariant+0x10c>
 80102d2:	2b03      	cmp	r3, #3
 80102d4:	d109      	bne.n	80102ea <uxr_deserialize_ObjectVariant+0x8a>
 80102d6:	f106 0308 	add.w	r3, r6, #8
 80102da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80102de:	f106 010c 	add.w	r1, r6, #12
 80102e2:	4628      	mov	r0, r5
 80102e4:	f005 f982 	bl	80155ec <ucdr_deserialize_sequence_uint8_t>
 80102e8:	4604      	mov	r4, r0
 80102ea:	2202      	movs	r2, #2
 80102ec:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80102f0:	4628      	mov	r0, r5
 80102f2:	f005 f8d9 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 80102f6:	4020      	ands	r0, r4
 80102f8:	b2c4      	uxtb	r4, r0
 80102fa:	e7c6      	b.n	801028a <uxr_deserialize_ObjectVariant+0x2a>
 80102fc:	1d31      	adds	r1, r6, #4
 80102fe:	4628      	mov	r0, r5
 8010300:	f7fb fe9a 	bl	800c038 <ucdr_deserialize_uint8_t>
 8010304:	4604      	mov	r4, r0
 8010306:	b130      	cbz	r0, 8010316 <uxr_deserialize_ObjectVariant+0xb6>
 8010308:	7933      	ldrb	r3, [r6, #4]
 801030a:	2b02      	cmp	r3, #2
 801030c:	d036      	beq.n	801037c <uxr_deserialize_ObjectVariant+0x11c>
 801030e:	2b03      	cmp	r3, #3
 8010310:	d03c      	beq.n	801038c <uxr_deserialize_ObjectVariant+0x12c>
 8010312:	2b01      	cmp	r3, #1
 8010314:	d032      	beq.n	801037c <uxr_deserialize_ObjectVariant+0x11c>
 8010316:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801031a:	4628      	mov	r0, r5
 801031c:	f7fc fc32 	bl	800cb84 <ucdr_deserialize_int16_t>
 8010320:	4020      	ands	r0, r4
 8010322:	b2c4      	uxtb	r4, r0
 8010324:	e7b1      	b.n	801028a <uxr_deserialize_ObjectVariant+0x2a>
 8010326:	1d31      	adds	r1, r6, #4
 8010328:	4628      	mov	r0, r5
 801032a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801032e:	f7ff bbbf 	b.w	800fab0 <uxr_deserialize_CLIENT_Representation>
 8010332:	2204      	movs	r2, #4
 8010334:	18b1      	adds	r1, r6, r2
 8010336:	4628      	mov	r0, r5
 8010338:	f005 f8b6 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 801033c:	2202      	movs	r2, #2
 801033e:	f106 0108 	add.w	r1, r6, #8
 8010342:	4604      	mov	r4, r0
 8010344:	4628      	mov	r0, r5
 8010346:	f005 f8af 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 801034a:	2202      	movs	r2, #2
 801034c:	4004      	ands	r4, r0
 801034e:	f106 010a 	add.w	r1, r6, #10
 8010352:	4628      	mov	r0, r5
 8010354:	f005 f8a8 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 8010358:	b2e4      	uxtb	r4, r4
 801035a:	4603      	mov	r3, r0
 801035c:	f106 010c 	add.w	r1, r6, #12
 8010360:	4628      	mov	r0, r5
 8010362:	401c      	ands	r4, r3
 8010364:	f7fb fe3a 	bl	800bfdc <ucdr_deserialize_bool>
 8010368:	4004      	ands	r4, r0
 801036a:	e78e      	b.n	801028a <uxr_deserialize_ObjectVariant+0x2a>
 801036c:	68b1      	ldr	r1, [r6, #8]
 801036e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010372:	4628      	mov	r0, r5
 8010374:	f005 f964 	bl	8015640 <ucdr_deserialize_string>
 8010378:	4604      	mov	r4, r0
 801037a:	e7b6      	b.n	80102ea <uxr_deserialize_ObjectVariant+0x8a>
 801037c:	68b1      	ldr	r1, [r6, #8]
 801037e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010382:	4628      	mov	r0, r5
 8010384:	f005 f95c 	bl	8015640 <ucdr_deserialize_string>
 8010388:	4604      	mov	r4, r0
 801038a:	e7c4      	b.n	8010316 <uxr_deserialize_ObjectVariant+0xb6>
 801038c:	f106 0308 	add.w	r3, r6, #8
 8010390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010394:	f106 010c 	add.w	r1, r6, #12
 8010398:	4628      	mov	r0, r5
 801039a:	f005 f927 	bl	80155ec <ucdr_deserialize_sequence_uint8_t>
 801039e:	4604      	mov	r4, r0
 80103a0:	e7b9      	b.n	8010316 <uxr_deserialize_ObjectVariant+0xb6>
 80103a2:	bf00      	nop

080103a4 <uxr_deserialize_BaseObjectRequest>:
 80103a4:	b570      	push	{r4, r5, r6, lr}
 80103a6:	2202      	movs	r2, #2
 80103a8:	4605      	mov	r5, r0
 80103aa:	460e      	mov	r6, r1
 80103ac:	f005 f87c 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 80103b0:	2202      	movs	r2, #2
 80103b2:	4604      	mov	r4, r0
 80103b4:	18b1      	adds	r1, r6, r2
 80103b6:	4628      	mov	r0, r5
 80103b8:	f005 f876 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 80103bc:	4020      	ands	r0, r4
 80103be:	b2c0      	uxtb	r0, r0
 80103c0:	bd70      	pop	{r4, r5, r6, pc}
 80103c2:	bf00      	nop

080103c4 <uxr_serialize_ActivityInfoVariant>:
 80103c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103c8:	460d      	mov	r5, r1
 80103ca:	7809      	ldrb	r1, [r1, #0]
 80103cc:	4607      	mov	r7, r0
 80103ce:	f7fb fe1d 	bl	800c00c <ucdr_serialize_uint8_t>
 80103d2:	4681      	mov	r9, r0
 80103d4:	b138      	cbz	r0, 80103e6 <uxr_serialize_ActivityInfoVariant+0x22>
 80103d6:	782b      	ldrb	r3, [r5, #0]
 80103d8:	2b06      	cmp	r3, #6
 80103da:	f000 8082 	beq.w	80104e2 <uxr_serialize_ActivityInfoVariant+0x11e>
 80103de:	2b0d      	cmp	r3, #13
 80103e0:	d016      	beq.n	8010410 <uxr_serialize_ActivityInfoVariant+0x4c>
 80103e2:	2b05      	cmp	r3, #5
 80103e4:	d002      	beq.n	80103ec <uxr_serialize_ActivityInfoVariant+0x28>
 80103e6:	4648      	mov	r0, r9
 80103e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103ec:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80103f0:	4638      	mov	r0, r7
 80103f2:	f7fc fb47 	bl	800ca84 <ucdr_serialize_int16_t>
 80103f6:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80103fa:	4681      	mov	r9, r0
 80103fc:	4638      	mov	r0, r7
 80103fe:	f7fc fa71 	bl	800c8e4 <ucdr_serialize_uint64_t>
 8010402:	ea09 0000 	and.w	r0, r9, r0
 8010406:	fa5f f980 	uxtb.w	r9, r0
 801040a:	4648      	mov	r0, r9
 801040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010410:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010414:	4638      	mov	r0, r7
 8010416:	f7fc fb35 	bl	800ca84 <ucdr_serialize_int16_t>
 801041a:	68e9      	ldr	r1, [r5, #12]
 801041c:	4681      	mov	r9, r0
 801041e:	4638      	mov	r0, r7
 8010420:	f7fc f80a 	bl	800c438 <ucdr_serialize_uint32_t>
 8010424:	68eb      	ldr	r3, [r5, #12]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d0eb      	beq.n	8010402 <uxr_serialize_ActivityInfoVariant+0x3e>
 801042a:	b320      	cbz	r0, 8010476 <uxr_serialize_ActivityInfoVariant+0xb2>
 801042c:	f105 080c 	add.w	r8, r5, #12
 8010430:	2600      	movs	r6, #0
 8010432:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8010436:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 801043a:	f89a 1010 	ldrb.w	r1, [sl, #16]
 801043e:	4638      	mov	r0, r7
 8010440:	f7fb fde4 	bl	800c00c <ucdr_serialize_uint8_t>
 8010444:	2800      	cmp	r0, #0
 8010446:	d053      	beq.n	80104f0 <uxr_serialize_ActivityInfoVariant+0x12c>
 8010448:	f89a 3010 	ldrb.w	r3, [sl, #16]
 801044c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8010450:	0074      	lsls	r4, r6, #1
 8010452:	00c9      	lsls	r1, r1, #3
 8010454:	2b03      	cmp	r3, #3
 8010456:	d854      	bhi.n	8010502 <uxr_serialize_ActivityInfoVariant+0x13e>
 8010458:	e8df f003 	tbb	[pc, r3]
 801045c:	02102132 	.word	0x02102132
 8010460:	4441      	add	r1, r8
 8010462:	4638      	mov	r0, r7
 8010464:	6889      	ldr	r1, [r1, #8]
 8010466:	f005 f8db 	bl	8015620 <ucdr_serialize_string>
 801046a:	68ea      	ldr	r2, [r5, #12]
 801046c:	3601      	adds	r6, #1
 801046e:	4296      	cmp	r6, r2
 8010470:	d242      	bcs.n	80104f8 <uxr_serialize_ActivityInfoVariant+0x134>
 8010472:	2800      	cmp	r0, #0
 8010474:	d1dd      	bne.n	8010432 <uxr_serialize_ActivityInfoVariant+0x6e>
 8010476:	f04f 0900 	mov.w	r9, #0
 801047a:	e7b4      	b.n	80103e6 <uxr_serialize_ActivityInfoVariant+0x22>
 801047c:	3108      	adds	r1, #8
 801047e:	4441      	add	r1, r8
 8010480:	2210      	movs	r2, #16
 8010482:	4638      	mov	r0, r7
 8010484:	f004 ffac 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 8010488:	4434      	add	r4, r6
 801048a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801048e:	4604      	mov	r4, r0
 8010490:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010492:	4638      	mov	r0, r7
 8010494:	f7fb ffd0 	bl	800c438 <ucdr_serialize_uint32_t>
 8010498:	4020      	ands	r0, r4
 801049a:	b2c0      	uxtb	r0, r0
 801049c:	e7e5      	b.n	801046a <uxr_serialize_ActivityInfoVariant+0xa6>
 801049e:	3108      	adds	r1, #8
 80104a0:	4441      	add	r1, r8
 80104a2:	2204      	movs	r2, #4
 80104a4:	4638      	mov	r0, r7
 80104a6:	f004 ff9b 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 80104aa:	4434      	add	r4, r6
 80104ac:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80104b0:	4604      	mov	r4, r0
 80104b2:	8b19      	ldrh	r1, [r3, #24]
 80104b4:	4638      	mov	r0, r7
 80104b6:	f7fb fdd5 	bl	800c064 <ucdr_serialize_uint16_t>
 80104ba:	4020      	ands	r0, r4
 80104bc:	b2c0      	uxtb	r0, r0
 80104be:	e7d4      	b.n	801046a <uxr_serialize_ActivityInfoVariant+0xa6>
 80104c0:	3108      	adds	r1, #8
 80104c2:	4441      	add	r1, r8
 80104c4:	2202      	movs	r2, #2
 80104c6:	4638      	mov	r0, r7
 80104c8:	f004 ff8a 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 80104cc:	4434      	add	r4, r6
 80104ce:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80104d2:	4604      	mov	r4, r0
 80104d4:	7d99      	ldrb	r1, [r3, #22]
 80104d6:	4638      	mov	r0, r7
 80104d8:	f7fb fd98 	bl	800c00c <ucdr_serialize_uint8_t>
 80104dc:	4020      	ands	r0, r4
 80104de:	b2c0      	uxtb	r0, r0
 80104e0:	e7c3      	b.n	801046a <uxr_serialize_ActivityInfoVariant+0xa6>
 80104e2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80104e6:	4638      	mov	r0, r7
 80104e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104ec:	f7fc baca 	b.w	800ca84 <ucdr_serialize_int16_t>
 80104f0:	68ea      	ldr	r2, [r5, #12]
 80104f2:	3601      	adds	r6, #1
 80104f4:	42b2      	cmp	r2, r6
 80104f6:	d8be      	bhi.n	8010476 <uxr_serialize_ActivityInfoVariant+0xb2>
 80104f8:	ea09 0900 	and.w	r9, r9, r0
 80104fc:	fa5f f989 	uxtb.w	r9, r9
 8010500:	e771      	b.n	80103e6 <uxr_serialize_ActivityInfoVariant+0x22>
 8010502:	68eb      	ldr	r3, [r5, #12]
 8010504:	3601      	adds	r6, #1
 8010506:	429e      	cmp	r6, r3
 8010508:	f10a 0a18 	add.w	sl, sl, #24
 801050c:	d395      	bcc.n	801043a <uxr_serialize_ActivityInfoVariant+0x76>
 801050e:	e76a      	b.n	80103e6 <uxr_serialize_ActivityInfoVariant+0x22>

08010510 <uxr_deserialize_BaseObjectReply>:
 8010510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010514:	2202      	movs	r2, #2
 8010516:	4606      	mov	r6, r0
 8010518:	460f      	mov	r7, r1
 801051a:	f004 ffc5 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 801051e:	2202      	movs	r2, #2
 8010520:	18b9      	adds	r1, r7, r2
 8010522:	4605      	mov	r5, r0
 8010524:	4630      	mov	r0, r6
 8010526:	f004 ffbf 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 801052a:	1d39      	adds	r1, r7, #4
 801052c:	4680      	mov	r8, r0
 801052e:	4630      	mov	r0, r6
 8010530:	f7fb fd82 	bl	800c038 <ucdr_deserialize_uint8_t>
 8010534:	1d79      	adds	r1, r7, #5
 8010536:	4604      	mov	r4, r0
 8010538:	4630      	mov	r0, r6
 801053a:	f7fb fd7d 	bl	800c038 <ucdr_deserialize_uint8_t>
 801053e:	ea05 0508 	and.w	r5, r5, r8
 8010542:	402c      	ands	r4, r5
 8010544:	4020      	ands	r0, r4
 8010546:	b2c0      	uxtb	r0, r0
 8010548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801054c <uxr_serialize_ReadSpecification>:
 801054c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010550:	460e      	mov	r6, r1
 8010552:	7809      	ldrb	r1, [r1, #0]
 8010554:	4607      	mov	r7, r0
 8010556:	f7fb fd59 	bl	800c00c <ucdr_serialize_uint8_t>
 801055a:	7871      	ldrb	r1, [r6, #1]
 801055c:	4604      	mov	r4, r0
 801055e:	4638      	mov	r0, r7
 8010560:	f7fb fd54 	bl	800c00c <ucdr_serialize_uint8_t>
 8010564:	78b1      	ldrb	r1, [r6, #2]
 8010566:	4004      	ands	r4, r0
 8010568:	4638      	mov	r0, r7
 801056a:	f7fb fd21 	bl	800bfb0 <ucdr_serialize_bool>
 801056e:	78b3      	ldrb	r3, [r6, #2]
 8010570:	b2e4      	uxtb	r4, r4
 8010572:	4004      	ands	r4, r0
 8010574:	b94b      	cbnz	r3, 801058a <uxr_serialize_ReadSpecification+0x3e>
 8010576:	7a31      	ldrb	r1, [r6, #8]
 8010578:	4638      	mov	r0, r7
 801057a:	f7fb fd19 	bl	800bfb0 <ucdr_serialize_bool>
 801057e:	7a33      	ldrb	r3, [r6, #8]
 8010580:	4004      	ands	r4, r0
 8010582:	b943      	cbnz	r3, 8010596 <uxr_serialize_ReadSpecification+0x4a>
 8010584:	4620      	mov	r0, r4
 8010586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801058a:	6871      	ldr	r1, [r6, #4]
 801058c:	4638      	mov	r0, r7
 801058e:	f005 f847 	bl	8015620 <ucdr_serialize_string>
 8010592:	4004      	ands	r4, r0
 8010594:	e7ef      	b.n	8010576 <uxr_serialize_ReadSpecification+0x2a>
 8010596:	8971      	ldrh	r1, [r6, #10]
 8010598:	4638      	mov	r0, r7
 801059a:	f7fb fd63 	bl	800c064 <ucdr_serialize_uint16_t>
 801059e:	89b1      	ldrh	r1, [r6, #12]
 80105a0:	4605      	mov	r5, r0
 80105a2:	4638      	mov	r0, r7
 80105a4:	f7fb fd5e 	bl	800c064 <ucdr_serialize_uint16_t>
 80105a8:	89f1      	ldrh	r1, [r6, #14]
 80105aa:	4005      	ands	r5, r0
 80105ac:	4638      	mov	r0, r7
 80105ae:	f7fb fd59 	bl	800c064 <ucdr_serialize_uint16_t>
 80105b2:	8a31      	ldrh	r1, [r6, #16]
 80105b4:	4680      	mov	r8, r0
 80105b6:	4638      	mov	r0, r7
 80105b8:	f7fb fd54 	bl	800c064 <ucdr_serialize_uint16_t>
 80105bc:	b2ed      	uxtb	r5, r5
 80105be:	4025      	ands	r5, r4
 80105c0:	ea08 0505 	and.w	r5, r8, r5
 80105c4:	ea00 0405 	and.w	r4, r0, r5
 80105c8:	4620      	mov	r0, r4
 80105ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ce:	bf00      	nop

080105d0 <uxr_serialize_CREATE_CLIENT_Payload>:
 80105d0:	f7ff ba16 	b.w	800fa00 <uxr_serialize_CLIENT_Representation>

080105d4 <uxr_serialize_CREATE_Payload>:
 80105d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105d6:	2202      	movs	r2, #2
 80105d8:	4607      	mov	r7, r0
 80105da:	460e      	mov	r6, r1
 80105dc:	f004 ff00 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 80105e0:	2202      	movs	r2, #2
 80105e2:	18b1      	adds	r1, r6, r2
 80105e4:	4605      	mov	r5, r0
 80105e6:	4638      	mov	r0, r7
 80105e8:	f004 fefa 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 80105ec:	7931      	ldrb	r1, [r6, #4]
 80105ee:	4604      	mov	r4, r0
 80105f0:	4638      	mov	r0, r7
 80105f2:	f7fb fd0b 	bl	800c00c <ucdr_serialize_uint8_t>
 80105f6:	b170      	cbz	r0, 8010616 <uxr_serialize_CREATE_Payload+0x42>
 80105f8:	7933      	ldrb	r3, [r6, #4]
 80105fa:	402c      	ands	r4, r5
 80105fc:	3b01      	subs	r3, #1
 80105fe:	b2e4      	uxtb	r4, r4
 8010600:	2b0d      	cmp	r3, #13
 8010602:	d809      	bhi.n	8010618 <uxr_serialize_CREATE_Payload+0x44>
 8010604:	e8df f003 	tbb	[pc, r3]
 8010608:	23230a4c 	.word	0x23230a4c
 801060c:	0a0a0a0a 	.word	0x0a0a0a0a
 8010610:	12121208 	.word	0x12121208
 8010614:	3e45      	.short	0x3e45
 8010616:	2400      	movs	r4, #0
 8010618:	4620      	mov	r0, r4
 801061a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801061c:	f106 0108 	add.w	r1, r6, #8
 8010620:	4638      	mov	r0, r7
 8010622:	f7ff faf3 	bl	800fc0c <uxr_serialize_DATAWRITER_Representation>
 8010626:	4004      	ands	r4, r0
 8010628:	4620      	mov	r0, r4
 801062a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801062c:	7a31      	ldrb	r1, [r6, #8]
 801062e:	4638      	mov	r0, r7
 8010630:	f7fb fcec 	bl	800c00c <ucdr_serialize_uint8_t>
 8010634:	2800      	cmp	r0, #0
 8010636:	d0ee      	beq.n	8010616 <uxr_serialize_CREATE_Payload+0x42>
 8010638:	7a33      	ldrb	r3, [r6, #8]
 801063a:	2b01      	cmp	r3, #1
 801063c:	d001      	beq.n	8010642 <uxr_serialize_CREATE_Payload+0x6e>
 801063e:	2b02      	cmp	r3, #2
 8010640:	d1ea      	bne.n	8010618 <uxr_serialize_CREATE_Payload+0x44>
 8010642:	68f1      	ldr	r1, [r6, #12]
 8010644:	4638      	mov	r0, r7
 8010646:	f004 ffeb 	bl	8015620 <ucdr_serialize_string>
 801064a:	4004      	ands	r4, r0
 801064c:	e7e4      	b.n	8010618 <uxr_serialize_CREATE_Payload+0x44>
 801064e:	7a31      	ldrb	r1, [r6, #8]
 8010650:	4638      	mov	r0, r7
 8010652:	f7fb fcdb 	bl	800c00c <ucdr_serialize_uint8_t>
 8010656:	4605      	mov	r5, r0
 8010658:	b158      	cbz	r0, 8010672 <uxr_serialize_CREATE_Payload+0x9e>
 801065a:	7a33      	ldrb	r3, [r6, #8]
 801065c:	2b02      	cmp	r3, #2
 801065e:	d034      	beq.n	80106ca <uxr_serialize_CREATE_Payload+0xf6>
 8010660:	2b03      	cmp	r3, #3
 8010662:	d106      	bne.n	8010672 <uxr_serialize_CREATE_Payload+0x9e>
 8010664:	68f2      	ldr	r2, [r6, #12]
 8010666:	f106 0110 	add.w	r1, r6, #16
 801066a:	4638      	mov	r0, r7
 801066c:	f004 ffac 	bl	80155c8 <ucdr_serialize_sequence_uint8_t>
 8010670:	4605      	mov	r5, r0
 8010672:	2202      	movs	r2, #2
 8010674:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8010678:	4638      	mov	r0, r7
 801067a:	f004 feb1 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 801067e:	4028      	ands	r0, r5
 8010680:	4004      	ands	r4, r0
 8010682:	e7c9      	b.n	8010618 <uxr_serialize_CREATE_Payload+0x44>
 8010684:	f106 0108 	add.w	r1, r6, #8
 8010688:	4638      	mov	r0, r7
 801068a:	f7ff f9b9 	bl	800fa00 <uxr_serialize_CLIENT_Representation>
 801068e:	4004      	ands	r4, r0
 8010690:	e7c2      	b.n	8010618 <uxr_serialize_CREATE_Payload+0x44>
 8010692:	f106 0108 	add.w	r1, r6, #8
 8010696:	4638      	mov	r0, r7
 8010698:	f7ff fa6e 	bl	800fb78 <uxr_serialize_AGENT_Representation>
 801069c:	4004      	ands	r4, r0
 801069e:	e7bb      	b.n	8010618 <uxr_serialize_CREATE_Payload+0x44>
 80106a0:	7a31      	ldrb	r1, [r6, #8]
 80106a2:	4638      	mov	r0, r7
 80106a4:	f7fb fcb2 	bl	800c00c <ucdr_serialize_uint8_t>
 80106a8:	4605      	mov	r5, r0
 80106aa:	b130      	cbz	r0, 80106ba <uxr_serialize_CREATE_Payload+0xe6>
 80106ac:	7a33      	ldrb	r3, [r6, #8]
 80106ae:	2b02      	cmp	r3, #2
 80106b0:	d011      	beq.n	80106d6 <uxr_serialize_CREATE_Payload+0x102>
 80106b2:	2b03      	cmp	r3, #3
 80106b4:	d015      	beq.n	80106e2 <uxr_serialize_CREATE_Payload+0x10e>
 80106b6:	2b01      	cmp	r3, #1
 80106b8:	d00d      	beq.n	80106d6 <uxr_serialize_CREATE_Payload+0x102>
 80106ba:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 80106be:	4638      	mov	r0, r7
 80106c0:	f7fc f9e0 	bl	800ca84 <ucdr_serialize_int16_t>
 80106c4:	4028      	ands	r0, r5
 80106c6:	4004      	ands	r4, r0
 80106c8:	e7a6      	b.n	8010618 <uxr_serialize_CREATE_Payload+0x44>
 80106ca:	68f1      	ldr	r1, [r6, #12]
 80106cc:	4638      	mov	r0, r7
 80106ce:	f004 ffa7 	bl	8015620 <ucdr_serialize_string>
 80106d2:	4605      	mov	r5, r0
 80106d4:	e7cd      	b.n	8010672 <uxr_serialize_CREATE_Payload+0x9e>
 80106d6:	68f1      	ldr	r1, [r6, #12]
 80106d8:	4638      	mov	r0, r7
 80106da:	f004 ffa1 	bl	8015620 <ucdr_serialize_string>
 80106de:	4605      	mov	r5, r0
 80106e0:	e7eb      	b.n	80106ba <uxr_serialize_CREATE_Payload+0xe6>
 80106e2:	68f2      	ldr	r2, [r6, #12]
 80106e4:	f106 0110 	add.w	r1, r6, #16
 80106e8:	4638      	mov	r0, r7
 80106ea:	f004 ff6d 	bl	80155c8 <ucdr_serialize_sequence_uint8_t>
 80106ee:	4605      	mov	r5, r0
 80106f0:	e7e3      	b.n	80106ba <uxr_serialize_CREATE_Payload+0xe6>
 80106f2:	bf00      	nop

080106f4 <uxr_serialize_GET_INFO_Payload>:
 80106f4:	b570      	push	{r4, r5, r6, lr}
 80106f6:	2202      	movs	r2, #2
 80106f8:	4605      	mov	r5, r0
 80106fa:	460e      	mov	r6, r1
 80106fc:	f004 fe70 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 8010700:	2202      	movs	r2, #2
 8010702:	18b1      	adds	r1, r6, r2
 8010704:	4604      	mov	r4, r0
 8010706:	4628      	mov	r0, r5
 8010708:	f004 fe6a 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 801070c:	6871      	ldr	r1, [r6, #4]
 801070e:	4004      	ands	r4, r0
 8010710:	4628      	mov	r0, r5
 8010712:	f7fb fe91 	bl	800c438 <ucdr_serialize_uint32_t>
 8010716:	b2e4      	uxtb	r4, r4
 8010718:	4020      	ands	r0, r4
 801071a:	bd70      	pop	{r4, r5, r6, pc}

0801071c <uxr_deserialize_GET_INFO_Payload>:
 801071c:	b570      	push	{r4, r5, r6, lr}
 801071e:	2202      	movs	r2, #2
 8010720:	4605      	mov	r5, r0
 8010722:	460e      	mov	r6, r1
 8010724:	f004 fec0 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 8010728:	2202      	movs	r2, #2
 801072a:	18b1      	adds	r1, r6, r2
 801072c:	4604      	mov	r4, r0
 801072e:	4628      	mov	r0, r5
 8010730:	f004 feba 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 8010734:	1d31      	adds	r1, r6, #4
 8010736:	4004      	ands	r4, r0
 8010738:	4628      	mov	r0, r5
 801073a:	f7fb ffad 	bl	800c698 <ucdr_deserialize_uint32_t>
 801073e:	b2e4      	uxtb	r4, r4
 8010740:	4020      	ands	r0, r4
 8010742:	bd70      	pop	{r4, r5, r6, pc}

08010744 <uxr_serialize_DELETE_Payload>:
 8010744:	b570      	push	{r4, r5, r6, lr}
 8010746:	2202      	movs	r2, #2
 8010748:	4605      	mov	r5, r0
 801074a:	460e      	mov	r6, r1
 801074c:	f004 fe48 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 8010750:	2202      	movs	r2, #2
 8010752:	4604      	mov	r4, r0
 8010754:	18b1      	adds	r1, r6, r2
 8010756:	4628      	mov	r0, r5
 8010758:	f004 fe42 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 801075c:	4020      	ands	r0, r4
 801075e:	b2c0      	uxtb	r0, r0
 8010760:	bd70      	pop	{r4, r5, r6, pc}
 8010762:	bf00      	nop

08010764 <uxr_deserialize_STATUS_AGENT_Payload>:
 8010764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010768:	4605      	mov	r5, r0
 801076a:	460e      	mov	r6, r1
 801076c:	f7fb fc64 	bl	800c038 <ucdr_deserialize_uint8_t>
 8010770:	1c71      	adds	r1, r6, #1
 8010772:	4604      	mov	r4, r0
 8010774:	4628      	mov	r0, r5
 8010776:	f7fb fc5f 	bl	800c038 <ucdr_deserialize_uint8_t>
 801077a:	2204      	movs	r2, #4
 801077c:	18b1      	adds	r1, r6, r2
 801077e:	4680      	mov	r8, r0
 8010780:	4628      	mov	r0, r5
 8010782:	f004 fe91 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 8010786:	f106 0108 	add.w	r1, r6, #8
 801078a:	4607      	mov	r7, r0
 801078c:	2202      	movs	r2, #2
 801078e:	4628      	mov	r0, r5
 8010790:	f004 fe8a 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 8010794:	ea04 0308 	and.w	r3, r4, r8
 8010798:	b2db      	uxtb	r3, r3
 801079a:	ea03 0407 	and.w	r4, r3, r7
 801079e:	2202      	movs	r2, #2
 80107a0:	4607      	mov	r7, r0
 80107a2:	f106 010a 	add.w	r1, r6, #10
 80107a6:	4628      	mov	r0, r5
 80107a8:	f004 fe7e 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 80107ac:	f106 010c 	add.w	r1, r6, #12
 80107b0:	4603      	mov	r3, r0
 80107b2:	4628      	mov	r0, r5
 80107b4:	461d      	mov	r5, r3
 80107b6:	f7fb fc11 	bl	800bfdc <ucdr_deserialize_bool>
 80107ba:	403c      	ands	r4, r7
 80107bc:	4025      	ands	r5, r4
 80107be:	4028      	ands	r0, r5
 80107c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080107c4 <uxr_deserialize_STATUS_Payload>:
 80107c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107c8:	2202      	movs	r2, #2
 80107ca:	4606      	mov	r6, r0
 80107cc:	460f      	mov	r7, r1
 80107ce:	f004 fe6b 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 80107d2:	2202      	movs	r2, #2
 80107d4:	18b9      	adds	r1, r7, r2
 80107d6:	4605      	mov	r5, r0
 80107d8:	4630      	mov	r0, r6
 80107da:	f004 fe65 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 80107de:	1d39      	adds	r1, r7, #4
 80107e0:	4680      	mov	r8, r0
 80107e2:	4630      	mov	r0, r6
 80107e4:	f7fb fc28 	bl	800c038 <ucdr_deserialize_uint8_t>
 80107e8:	1d79      	adds	r1, r7, #5
 80107ea:	4604      	mov	r4, r0
 80107ec:	4630      	mov	r0, r6
 80107ee:	f7fb fc23 	bl	800c038 <ucdr_deserialize_uint8_t>
 80107f2:	ea05 0508 	and.w	r5, r5, r8
 80107f6:	402c      	ands	r4, r5
 80107f8:	4020      	ands	r0, r4
 80107fa:	b2c0      	uxtb	r0, r0
 80107fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010800 <uxr_serialize_INFO_Payload>:
 8010800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010804:	2202      	movs	r2, #2
 8010806:	460c      	mov	r4, r1
 8010808:	4605      	mov	r5, r0
 801080a:	f004 fde9 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 801080e:	2202      	movs	r2, #2
 8010810:	18a1      	adds	r1, r4, r2
 8010812:	4680      	mov	r8, r0
 8010814:	4628      	mov	r0, r5
 8010816:	f004 fde3 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 801081a:	7921      	ldrb	r1, [r4, #4]
 801081c:	4607      	mov	r7, r0
 801081e:	4628      	mov	r0, r5
 8010820:	f7fb fbf4 	bl	800c00c <ucdr_serialize_uint8_t>
 8010824:	7961      	ldrb	r1, [r4, #5]
 8010826:	4606      	mov	r6, r0
 8010828:	4628      	mov	r0, r5
 801082a:	f7fb fbef 	bl	800c00c <ucdr_serialize_uint8_t>
 801082e:	ea08 0807 	and.w	r8, r8, r7
 8010832:	ea06 0608 	and.w	r6, r6, r8
 8010836:	4006      	ands	r6, r0
 8010838:	7a21      	ldrb	r1, [r4, #8]
 801083a:	4628      	mov	r0, r5
 801083c:	f7fb fbb8 	bl	800bfb0 <ucdr_serialize_bool>
 8010840:	7a23      	ldrb	r3, [r4, #8]
 8010842:	b2f7      	uxtb	r7, r6
 8010844:	4606      	mov	r6, r0
 8010846:	b96b      	cbnz	r3, 8010864 <uxr_serialize_INFO_Payload+0x64>
 8010848:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 801084c:	4628      	mov	r0, r5
 801084e:	f7fb fbaf 	bl	800bfb0 <ucdr_serialize_bool>
 8010852:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8010856:	4030      	ands	r0, r6
 8010858:	b2c6      	uxtb	r6, r0
 801085a:	b983      	cbnz	r3, 801087e <uxr_serialize_INFO_Payload+0x7e>
 801085c:	ea06 0007 	and.w	r0, r6, r7
 8010860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010864:	7b21      	ldrb	r1, [r4, #12]
 8010866:	4628      	mov	r0, r5
 8010868:	f7fb fbd0 	bl	800c00c <ucdr_serialize_uint8_t>
 801086c:	b188      	cbz	r0, 8010892 <uxr_serialize_INFO_Payload+0x92>
 801086e:	f104 010c 	add.w	r1, r4, #12
 8010872:	4628      	mov	r0, r5
 8010874:	f7ff f9f2 	bl	800fc5c <uxr_serialize_ObjectVariant.part.0>
 8010878:	4030      	ands	r0, r6
 801087a:	b2c6      	uxtb	r6, r0
 801087c:	e7e4      	b.n	8010848 <uxr_serialize_INFO_Payload+0x48>
 801087e:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8010882:	4628      	mov	r0, r5
 8010884:	f7ff fd9e 	bl	80103c4 <uxr_serialize_ActivityInfoVariant>
 8010888:	4006      	ands	r6, r0
 801088a:	ea06 0007 	and.w	r0, r6, r7
 801088e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010892:	4606      	mov	r6, r0
 8010894:	e7d8      	b.n	8010848 <uxr_serialize_INFO_Payload+0x48>
 8010896:	bf00      	nop

08010898 <uxr_serialize_READ_DATA_Payload>:
 8010898:	b570      	push	{r4, r5, r6, lr}
 801089a:	2202      	movs	r2, #2
 801089c:	4605      	mov	r5, r0
 801089e:	460e      	mov	r6, r1
 80108a0:	f004 fd9e 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 80108a4:	2202      	movs	r2, #2
 80108a6:	18b1      	adds	r1, r6, r2
 80108a8:	4604      	mov	r4, r0
 80108aa:	4628      	mov	r0, r5
 80108ac:	f004 fd98 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 80108b0:	1d31      	adds	r1, r6, #4
 80108b2:	4004      	ands	r4, r0
 80108b4:	4628      	mov	r0, r5
 80108b6:	f7ff fe49 	bl	801054c <uxr_serialize_ReadSpecification>
 80108ba:	b2e4      	uxtb	r4, r4
 80108bc:	4020      	ands	r0, r4
 80108be:	bd70      	pop	{r4, r5, r6, pc}

080108c0 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80108c0:	b570      	push	{r4, r5, r6, lr}
 80108c2:	2202      	movs	r2, #2
 80108c4:	4605      	mov	r5, r0
 80108c6:	460e      	mov	r6, r1
 80108c8:	f004 fd8a 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 80108cc:	2202      	movs	r2, #2
 80108ce:	4604      	mov	r4, r0
 80108d0:	18b1      	adds	r1, r6, r2
 80108d2:	4628      	mov	r0, r5
 80108d4:	f004 fd84 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 80108d8:	4020      	ands	r0, r4
 80108da:	b2c0      	uxtb	r0, r0
 80108dc:	bd70      	pop	{r4, r5, r6, pc}
 80108de:	bf00      	nop

080108e0 <uxr_serialize_ACKNACK_Payload>:
 80108e0:	b570      	push	{r4, r5, r6, lr}
 80108e2:	460c      	mov	r4, r1
 80108e4:	460e      	mov	r6, r1
 80108e6:	f834 1b02 	ldrh.w	r1, [r4], #2
 80108ea:	4605      	mov	r5, r0
 80108ec:	f7fb fbba 	bl	800c064 <ucdr_serialize_uint16_t>
 80108f0:	2202      	movs	r2, #2
 80108f2:	4621      	mov	r1, r4
 80108f4:	4604      	mov	r4, r0
 80108f6:	4628      	mov	r0, r5
 80108f8:	f004 fd72 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 80108fc:	7931      	ldrb	r1, [r6, #4]
 80108fe:	4004      	ands	r4, r0
 8010900:	4628      	mov	r0, r5
 8010902:	f7fb fb83 	bl	800c00c <ucdr_serialize_uint8_t>
 8010906:	b2e4      	uxtb	r4, r4
 8010908:	4020      	ands	r0, r4
 801090a:	bd70      	pop	{r4, r5, r6, pc}

0801090c <uxr_deserialize_ACKNACK_Payload>:
 801090c:	b570      	push	{r4, r5, r6, lr}
 801090e:	4605      	mov	r5, r0
 8010910:	460e      	mov	r6, r1
 8010912:	f7fb fca7 	bl	800c264 <ucdr_deserialize_uint16_t>
 8010916:	2202      	movs	r2, #2
 8010918:	18b1      	adds	r1, r6, r2
 801091a:	4604      	mov	r4, r0
 801091c:	4628      	mov	r0, r5
 801091e:	f004 fdc3 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 8010922:	1d31      	adds	r1, r6, #4
 8010924:	4004      	ands	r4, r0
 8010926:	4628      	mov	r0, r5
 8010928:	f7fb fb86 	bl	800c038 <ucdr_deserialize_uint8_t>
 801092c:	b2e4      	uxtb	r4, r4
 801092e:	4020      	ands	r0, r4
 8010930:	bd70      	pop	{r4, r5, r6, pc}
 8010932:	bf00      	nop

08010934 <uxr_serialize_HEARTBEAT_Payload>:
 8010934:	b570      	push	{r4, r5, r6, lr}
 8010936:	460d      	mov	r5, r1
 8010938:	8809      	ldrh	r1, [r1, #0]
 801093a:	4606      	mov	r6, r0
 801093c:	f7fb fb92 	bl	800c064 <ucdr_serialize_uint16_t>
 8010940:	8869      	ldrh	r1, [r5, #2]
 8010942:	4604      	mov	r4, r0
 8010944:	4630      	mov	r0, r6
 8010946:	f7fb fb8d 	bl	800c064 <ucdr_serialize_uint16_t>
 801094a:	7929      	ldrb	r1, [r5, #4]
 801094c:	4004      	ands	r4, r0
 801094e:	4630      	mov	r0, r6
 8010950:	f7fb fb5c 	bl	800c00c <ucdr_serialize_uint8_t>
 8010954:	b2e4      	uxtb	r4, r4
 8010956:	4020      	ands	r0, r4
 8010958:	bd70      	pop	{r4, r5, r6, pc}
 801095a:	bf00      	nop

0801095c <uxr_deserialize_HEARTBEAT_Payload>:
 801095c:	b570      	push	{r4, r5, r6, lr}
 801095e:	4605      	mov	r5, r0
 8010960:	460e      	mov	r6, r1
 8010962:	f7fb fc7f 	bl	800c264 <ucdr_deserialize_uint16_t>
 8010966:	1cb1      	adds	r1, r6, #2
 8010968:	4604      	mov	r4, r0
 801096a:	4628      	mov	r0, r5
 801096c:	f7fb fc7a 	bl	800c264 <ucdr_deserialize_uint16_t>
 8010970:	1d31      	adds	r1, r6, #4
 8010972:	4004      	ands	r4, r0
 8010974:	4628      	mov	r0, r5
 8010976:	f7fb fb5f 	bl	800c038 <ucdr_deserialize_uint8_t>
 801097a:	b2e4      	uxtb	r4, r4
 801097c:	4020      	ands	r0, r4
 801097e:	bd70      	pop	{r4, r5, r6, pc}

08010980 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8010980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010984:	4605      	mov	r5, r0
 8010986:	460e      	mov	r6, r1
 8010988:	f7fc fa08 	bl	800cd9c <ucdr_deserialize_int32_t>
 801098c:	1d31      	adds	r1, r6, #4
 801098e:	4607      	mov	r7, r0
 8010990:	4628      	mov	r0, r5
 8010992:	f7fb fe81 	bl	800c698 <ucdr_deserialize_uint32_t>
 8010996:	f106 0108 	add.w	r1, r6, #8
 801099a:	4680      	mov	r8, r0
 801099c:	4628      	mov	r0, r5
 801099e:	f7fc f9fd 	bl	800cd9c <ucdr_deserialize_int32_t>
 80109a2:	f106 010c 	add.w	r1, r6, #12
 80109a6:	4604      	mov	r4, r0
 80109a8:	4628      	mov	r0, r5
 80109aa:	f7fb fe75 	bl	800c698 <ucdr_deserialize_uint32_t>
 80109ae:	ea07 0708 	and.w	r7, r7, r8
 80109b2:	403c      	ands	r4, r7
 80109b4:	f106 0110 	add.w	r1, r6, #16
 80109b8:	4004      	ands	r4, r0
 80109ba:	4628      	mov	r0, r5
 80109bc:	f7fc f9ee 	bl	800cd9c <ucdr_deserialize_int32_t>
 80109c0:	f106 0114 	add.w	r1, r6, #20
 80109c4:	4607      	mov	r7, r0
 80109c6:	4628      	mov	r0, r5
 80109c8:	f7fb fe66 	bl	800c698 <ucdr_deserialize_uint32_t>
 80109cc:	b2e4      	uxtb	r4, r4
 80109ce:	403c      	ands	r4, r7
 80109d0:	4020      	ands	r0, r4
 80109d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109d6:	bf00      	nop

080109d8 <uxr_serialize_SampleIdentity>:
 80109d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109dc:	220c      	movs	r2, #12
 80109de:	4604      	mov	r4, r0
 80109e0:	460d      	mov	r5, r1
 80109e2:	f004 fcfd 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 80109e6:	2203      	movs	r2, #3
 80109e8:	f105 010c 	add.w	r1, r5, #12
 80109ec:	4607      	mov	r7, r0
 80109ee:	4620      	mov	r0, r4
 80109f0:	f004 fcf6 	bl	80153e0 <ucdr_serialize_array_uint8_t>
 80109f4:	7be9      	ldrb	r1, [r5, #15]
 80109f6:	4680      	mov	r8, r0
 80109f8:	4620      	mov	r0, r4
 80109fa:	f7fb fb07 	bl	800c00c <ucdr_serialize_uint8_t>
 80109fe:	6929      	ldr	r1, [r5, #16]
 8010a00:	4606      	mov	r6, r0
 8010a02:	4620      	mov	r0, r4
 8010a04:	f7fc f932 	bl	800cc6c <ucdr_serialize_int32_t>
 8010a08:	6969      	ldr	r1, [r5, #20]
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	4620      	mov	r0, r4
 8010a0e:	ea07 0708 	and.w	r7, r7, r8
 8010a12:	461c      	mov	r4, r3
 8010a14:	f7fb fd10 	bl	800c438 <ucdr_serialize_uint32_t>
 8010a18:	403e      	ands	r6, r7
 8010a1a:	4034      	ands	r4, r6
 8010a1c:	4020      	ands	r0, r4
 8010a1e:	b2c0      	uxtb	r0, r0
 8010a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010a24 <uxr_deserialize_SampleIdentity>:
 8010a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a28:	220c      	movs	r2, #12
 8010a2a:	4604      	mov	r4, r0
 8010a2c:	460d      	mov	r5, r1
 8010a2e:	f004 fd3b 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 8010a32:	2203      	movs	r2, #3
 8010a34:	f105 010c 	add.w	r1, r5, #12
 8010a38:	4607      	mov	r7, r0
 8010a3a:	4620      	mov	r0, r4
 8010a3c:	f004 fd34 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 8010a40:	f105 010f 	add.w	r1, r5, #15
 8010a44:	4680      	mov	r8, r0
 8010a46:	4620      	mov	r0, r4
 8010a48:	f7fb faf6 	bl	800c038 <ucdr_deserialize_uint8_t>
 8010a4c:	f105 0110 	add.w	r1, r5, #16
 8010a50:	4606      	mov	r6, r0
 8010a52:	4620      	mov	r0, r4
 8010a54:	f7fc f9a2 	bl	800cd9c <ucdr_deserialize_int32_t>
 8010a58:	f105 0114 	add.w	r1, r5, #20
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	4620      	mov	r0, r4
 8010a60:	ea07 0708 	and.w	r7, r7, r8
 8010a64:	461c      	mov	r4, r3
 8010a66:	f7fb fe17 	bl	800c698 <ucdr_deserialize_uint32_t>
 8010a6a:	403e      	ands	r6, r7
 8010a6c:	4034      	ands	r4, r6
 8010a6e:	4020      	ands	r0, r4
 8010a70:	b2c0      	uxtb	r0, r0
 8010a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a76:	bf00      	nop

08010a78 <rcl_client_get_rmw_handle>:
 8010a78:	b118      	cbz	r0, 8010a82 <rcl_client_get_rmw_handle+0xa>
 8010a7a:	6800      	ldr	r0, [r0, #0]
 8010a7c:	b108      	cbz	r0, 8010a82 <rcl_client_get_rmw_handle+0xa>
 8010a7e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8010a82:	4770      	bx	lr

08010a84 <rcl_send_request>:
 8010a84:	b570      	push	{r4, r5, r6, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	b1e8      	cbz	r0, 8010ac6 <rcl_send_request+0x42>
 8010a8a:	4604      	mov	r4, r0
 8010a8c:	6800      	ldr	r0, [r0, #0]
 8010a8e:	b1d0      	cbz	r0, 8010ac6 <rcl_send_request+0x42>
 8010a90:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8010a94:	b1bb      	cbz	r3, 8010ac6 <rcl_send_request+0x42>
 8010a96:	460e      	mov	r6, r1
 8010a98:	b1d1      	cbz	r1, 8010ad0 <rcl_send_request+0x4c>
 8010a9a:	4615      	mov	r5, r2
 8010a9c:	b1c2      	cbz	r2, 8010ad0 <rcl_send_request+0x4c>
 8010a9e:	2105      	movs	r1, #5
 8010aa0:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8010aa4:	f002 fd70 	bl	8013588 <__atomic_load_8>
 8010aa8:	6823      	ldr	r3, [r4, #0]
 8010aaa:	e9c5 0100 	strd	r0, r1, [r5]
 8010aae:	462a      	mov	r2, r5
 8010ab0:	4631      	mov	r1, r6
 8010ab2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8010ab6:	f003 ff1b 	bl	80148f0 <rmw_send_request>
 8010aba:	4606      	mov	r6, r0
 8010abc:	b160      	cbz	r0, 8010ad8 <rcl_send_request+0x54>
 8010abe:	2601      	movs	r6, #1
 8010ac0:	4630      	mov	r0, r6
 8010ac2:	b002      	add	sp, #8
 8010ac4:	bd70      	pop	{r4, r5, r6, pc}
 8010ac6:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8010aca:	4630      	mov	r0, r6
 8010acc:	b002      	add	sp, #8
 8010ace:	bd70      	pop	{r4, r5, r6, pc}
 8010ad0:	260b      	movs	r6, #11
 8010ad2:	4630      	mov	r0, r6
 8010ad4:	b002      	add	sp, #8
 8010ad6:	bd70      	pop	{r4, r5, r6, pc}
 8010ad8:	6820      	ldr	r0, [r4, #0]
 8010ada:	2105      	movs	r1, #5
 8010adc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010ae0:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8010ae4:	9100      	str	r1, [sp, #0]
 8010ae6:	f002 fdbb 	bl	8013660 <__atomic_exchange_8>
 8010aea:	4630      	mov	r0, r6
 8010aec:	b002      	add	sp, #8
 8010aee:	bd70      	pop	{r4, r5, r6, pc}

08010af0 <rcl_take_response>:
 8010af0:	b570      	push	{r4, r5, r6, lr}
 8010af2:	468e      	mov	lr, r1
 8010af4:	460c      	mov	r4, r1
 8010af6:	4616      	mov	r6, r2
 8010af8:	4605      	mov	r5, r0
 8010afa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010afe:	b08c      	sub	sp, #48	; 0x30
 8010b00:	f10d 0c18 	add.w	ip, sp, #24
 8010b04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b08:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010b0c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010b10:	b35d      	cbz	r5, 8010b6a <rcl_take_response+0x7a>
 8010b12:	682b      	ldr	r3, [r5, #0]
 8010b14:	b34b      	cbz	r3, 8010b6a <rcl_take_response+0x7a>
 8010b16:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8010b1a:	b330      	cbz	r0, 8010b6a <rcl_take_response+0x7a>
 8010b1c:	b346      	cbz	r6, 8010b70 <rcl_take_response+0x80>
 8010b1e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010b78 <rcl_take_response+0x88>
 8010b22:	2300      	movs	r3, #0
 8010b24:	f88d 3007 	strb.w	r3, [sp, #7]
 8010b28:	4632      	mov	r2, r6
 8010b2a:	f10d 0307 	add.w	r3, sp, #7
 8010b2e:	a902      	add	r1, sp, #8
 8010b30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010b34:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010b38:	f003 ffe2 	bl	8014b00 <rmw_take_response>
 8010b3c:	4605      	mov	r5, r0
 8010b3e:	b9c8      	cbnz	r0, 8010b74 <rcl_take_response+0x84>
 8010b40:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010b44:	f240 13f5 	movw	r3, #501	; 0x1f5
 8010b48:	2a00      	cmp	r2, #0
 8010b4a:	bf08      	it	eq
 8010b4c:	461d      	moveq	r5, r3
 8010b4e:	f10d 0e18 	add.w	lr, sp, #24
 8010b52:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010b56:	46a4      	mov	ip, r4
 8010b58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b5c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010b60:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010b64:	4628      	mov	r0, r5
 8010b66:	b00c      	add	sp, #48	; 0x30
 8010b68:	bd70      	pop	{r4, r5, r6, pc}
 8010b6a:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 8010b6e:	e7ee      	b.n	8010b4e <rcl_take_response+0x5e>
 8010b70:	250b      	movs	r5, #11
 8010b72:	e7ec      	b.n	8010b4e <rcl_take_response+0x5e>
 8010b74:	2501      	movs	r5, #1
 8010b76:	e7ea      	b.n	8010b4e <rcl_take_response+0x5e>
	...

08010b80 <rcl_client_is_valid>:
 8010b80:	b130      	cbz	r0, 8010b90 <rcl_client_is_valid+0x10>
 8010b82:	6800      	ldr	r0, [r0, #0]
 8010b84:	b120      	cbz	r0, 8010b90 <rcl_client_is_valid+0x10>
 8010b86:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8010b8a:	3800      	subs	r0, #0
 8010b8c:	bf18      	it	ne
 8010b8e:	2001      	movne	r0, #1
 8010b90:	4770      	bx	lr
 8010b92:	bf00      	nop

08010b94 <rcl_convert_rmw_ret_to_rcl_ret>:
 8010b94:	280b      	cmp	r0, #11
 8010b96:	dc0d      	bgt.n	8010bb4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8010b98:	2800      	cmp	r0, #0
 8010b9a:	db09      	blt.n	8010bb0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010b9c:	280b      	cmp	r0, #11
 8010b9e:	d807      	bhi.n	8010bb0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010ba0:	e8df f000 	tbb	[pc, r0]
 8010ba4:	07060607 	.word	0x07060607
 8010ba8:	06060606 	.word	0x06060606
 8010bac:	07070606 	.word	0x07070606
 8010bb0:	2001      	movs	r0, #1
 8010bb2:	4770      	bx	lr
 8010bb4:	28cb      	cmp	r0, #203	; 0xcb
 8010bb6:	bf18      	it	ne
 8010bb8:	2001      	movne	r0, #1
 8010bba:	4770      	bx	lr

08010bbc <rcl_get_zero_initialized_context>:
 8010bbc:	4a03      	ldr	r2, [pc, #12]	; (8010bcc <rcl_get_zero_initialized_context+0x10>)
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010bc4:	e883 0003 	stmia.w	r3, {r0, r1}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	4770      	bx	lr
 8010bcc:	08018a64 	.word	0x08018a64

08010bd0 <rcl_context_is_valid>:
 8010bd0:	b118      	cbz	r0, 8010bda <rcl_context_is_valid+0xa>
 8010bd2:	6840      	ldr	r0, [r0, #4]
 8010bd4:	3800      	subs	r0, #0
 8010bd6:	bf18      	it	ne
 8010bd8:	2001      	movne	r0, #1
 8010bda:	4770      	bx	lr

08010bdc <__cleanup_context>:
 8010bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010be0:	4606      	mov	r6, r0
 8010be2:	6800      	ldr	r0, [r0, #0]
 8010be4:	2300      	movs	r3, #0
 8010be6:	6073      	str	r3, [r6, #4]
 8010be8:	2800      	cmp	r0, #0
 8010bea:	d049      	beq.n	8010c80 <__cleanup_context+0xa4>
 8010bec:	6947      	ldr	r7, [r0, #20]
 8010bee:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8010bf2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8010bf6:	b137      	cbz	r7, 8010c06 <__cleanup_context+0x2a>
 8010bf8:	3014      	adds	r0, #20
 8010bfa:	f000 f9bb 	bl	8010f74 <rcl_init_options_fini>
 8010bfe:	4607      	mov	r7, r0
 8010c00:	2800      	cmp	r0, #0
 8010c02:	d144      	bne.n	8010c8e <__cleanup_context+0xb2>
 8010c04:	6830      	ldr	r0, [r6, #0]
 8010c06:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010c08:	b143      	cbz	r3, 8010c1c <__cleanup_context+0x40>
 8010c0a:	3028      	adds	r0, #40	; 0x28
 8010c0c:	f003 fcb8 	bl	8014580 <rmw_context_fini>
 8010c10:	b118      	cbz	r0, 8010c1a <__cleanup_context+0x3e>
 8010c12:	2f00      	cmp	r7, #0
 8010c14:	d03e      	beq.n	8010c94 <__cleanup_context+0xb8>
 8010c16:	f7fa fb77 	bl	800b308 <rcutils_reset_error>
 8010c1a:	6830      	ldr	r0, [r6, #0]
 8010c1c:	6a03      	ldr	r3, [r0, #32]
 8010c1e:	b1db      	cbz	r3, 8010c58 <__cleanup_context+0x7c>
 8010c20:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8010c24:	2a01      	cmp	r2, #1
 8010c26:	f17c 0100 	sbcs.w	r1, ip, #0
 8010c2a:	db11      	blt.n	8010c50 <__cleanup_context+0x74>
 8010c2c:	2400      	movs	r4, #0
 8010c2e:	4625      	mov	r5, r4
 8010c30:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010c34:	4649      	mov	r1, r9
 8010c36:	b1b8      	cbz	r0, 8010c68 <__cleanup_context+0x8c>
 8010c38:	47c0      	blx	r8
 8010c3a:	6833      	ldr	r3, [r6, #0]
 8010c3c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8010c40:	3401      	adds	r4, #1
 8010c42:	f145 0500 	adc.w	r5, r5, #0
 8010c46:	4294      	cmp	r4, r2
 8010c48:	eb75 010c 	sbcs.w	r1, r5, ip
 8010c4c:	6a1b      	ldr	r3, [r3, #32]
 8010c4e:	dbef      	blt.n	8010c30 <__cleanup_context+0x54>
 8010c50:	4618      	mov	r0, r3
 8010c52:	4649      	mov	r1, r9
 8010c54:	47c0      	blx	r8
 8010c56:	6830      	ldr	r0, [r6, #0]
 8010c58:	4649      	mov	r1, r9
 8010c5a:	47c0      	blx	r8
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	e9c6 3300 	strd	r3, r3, [r6]
 8010c62:	4638      	mov	r0, r7
 8010c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c68:	3401      	adds	r4, #1
 8010c6a:	f145 0500 	adc.w	r5, r5, #0
 8010c6e:	4294      	cmp	r4, r2
 8010c70:	eb75 010c 	sbcs.w	r1, r5, ip
 8010c74:	dbdc      	blt.n	8010c30 <__cleanup_context+0x54>
 8010c76:	4618      	mov	r0, r3
 8010c78:	4649      	mov	r1, r9
 8010c7a:	47c0      	blx	r8
 8010c7c:	6830      	ldr	r0, [r6, #0]
 8010c7e:	e7eb      	b.n	8010c58 <__cleanup_context+0x7c>
 8010c80:	4607      	mov	r7, r0
 8010c82:	2300      	movs	r3, #0
 8010c84:	e9c6 3300 	strd	r3, r3, [r6]
 8010c88:	4638      	mov	r0, r7
 8010c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c8e:	f7fa fb3b 	bl	800b308 <rcutils_reset_error>
 8010c92:	e7b7      	b.n	8010c04 <__cleanup_context+0x28>
 8010c94:	f7ff ff7e 	bl	8010b94 <rcl_convert_rmw_ret_to_rcl_ret>
 8010c98:	4607      	mov	r7, r0
 8010c9a:	e7bc      	b.n	8010c16 <__cleanup_context+0x3a>

08010c9c <rcl_init>:
 8010c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ca0:	1e05      	subs	r5, r0, #0
 8010ca2:	b09e      	sub	sp, #120	; 0x78
 8010ca4:	460e      	mov	r6, r1
 8010ca6:	4690      	mov	r8, r2
 8010ca8:	461f      	mov	r7, r3
 8010caa:	f340 809c 	ble.w	8010de6 <rcl_init+0x14a>
 8010cae:	2900      	cmp	r1, #0
 8010cb0:	f000 809c 	beq.w	8010dec <rcl_init+0x150>
 8010cb4:	f1a1 0e04 	sub.w	lr, r1, #4
 8010cb8:	f04f 0c00 	mov.w	ip, #0
 8010cbc:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8010cc0:	f10c 0c01 	add.w	ip, ip, #1
 8010cc4:	2c00      	cmp	r4, #0
 8010cc6:	f000 8091 	beq.w	8010dec <rcl_init+0x150>
 8010cca:	4565      	cmp	r5, ip
 8010ccc:	d1f6      	bne.n	8010cbc <rcl_init+0x20>
 8010cce:	f1b8 0f00 	cmp.w	r8, #0
 8010cd2:	f000 808b 	beq.w	8010dec <rcl_init+0x150>
 8010cd6:	f8d8 4000 	ldr.w	r4, [r8]
 8010cda:	2c00      	cmp	r4, #0
 8010cdc:	f000 8086 	beq.w	8010dec <rcl_init+0x150>
 8010ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010ce2:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8010ce6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010cea:	6823      	ldr	r3, [r4, #0]
 8010cec:	f8cc 3000 	str.w	r3, [ip]
 8010cf0:	a819      	add	r0, sp, #100	; 0x64
 8010cf2:	f7fa fae5 	bl	800b2c0 <rcutils_allocator_is_valid>
 8010cf6:	2800      	cmp	r0, #0
 8010cf8:	d078      	beq.n	8010dec <rcl_init+0x150>
 8010cfa:	2f00      	cmp	r7, #0
 8010cfc:	d076      	beq.n	8010dec <rcl_init+0x150>
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d178      	bne.n	8010df6 <rcl_init+0x15a>
 8010d04:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8010d08:	2178      	movs	r1, #120	; 0x78
 8010d0a:	2001      	movs	r0, #1
 8010d0c:	4798      	blx	r3
 8010d0e:	4604      	mov	r4, r0
 8010d10:	6038      	str	r0, [r7, #0]
 8010d12:	2800      	cmp	r0, #0
 8010d14:	f000 80b6 	beq.w	8010e84 <rcl_init+0x1e8>
 8010d18:	a802      	add	r0, sp, #8
 8010d1a:	f002 ff85 	bl	8013c28 <rmw_get_zero_initialized_context>
 8010d1e:	a902      	add	r1, sp, #8
 8010d20:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8010d24:	2250      	movs	r2, #80	; 0x50
 8010d26:	ac19      	add	r4, sp, #100	; 0x64
 8010d28:	f006 fc8d 	bl	8017646 <memcpy>
 8010d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010d2e:	f8d7 e000 	ldr.w	lr, [r7]
 8010d32:	46f4      	mov	ip, lr
 8010d34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d38:	6823      	ldr	r3, [r4, #0]
 8010d3a:	f8cc 3000 	str.w	r3, [ip]
 8010d3e:	f10e 0114 	add.w	r1, lr, #20
 8010d42:	4640      	mov	r0, r8
 8010d44:	f000 f940 	bl	8010fc8 <rcl_init_options_copy>
 8010d48:	4604      	mov	r4, r0
 8010d4a:	2800      	cmp	r0, #0
 8010d4c:	d144      	bne.n	8010dd8 <rcl_init+0x13c>
 8010d4e:	f8d7 9000 	ldr.w	r9, [r7]
 8010d52:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8010d56:	f8c9 0020 	str.w	r0, [r9, #32]
 8010d5a:	f8c9 5018 	str.w	r5, [r9, #24]
 8010d5e:	f8c9 801c 	str.w	r8, [r9, #28]
 8010d62:	2d00      	cmp	r5, #0
 8010d64:	d04e      	beq.n	8010e04 <rcl_init+0x168>
 8010d66:	2e00      	cmp	r6, #0
 8010d68:	d04c      	beq.n	8010e04 <rcl_init+0x168>
 8010d6a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8010d6e:	2104      	movs	r1, #4
 8010d70:	4628      	mov	r0, r5
 8010d72:	4798      	blx	r3
 8010d74:	f8c9 0020 	str.w	r0, [r9, #32]
 8010d78:	f8d7 9000 	ldr.w	r9, [r7]
 8010d7c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8010d80:	46ca      	mov	sl, r9
 8010d82:	b343      	cbz	r3, 8010dd6 <rcl_init+0x13a>
 8010d84:	2d01      	cmp	r5, #1
 8010d86:	f178 0300 	sbcs.w	r3, r8, #0
 8010d8a:	db3b      	blt.n	8010e04 <rcl_init+0x168>
 8010d8c:	2400      	movs	r4, #0
 8010d8e:	3e04      	subs	r6, #4
 8010d90:	46a1      	mov	r9, r4
 8010d92:	e00b      	b.n	8010dac <rcl_init+0x110>
 8010d94:	6831      	ldr	r1, [r6, #0]
 8010d96:	f006 fc56 	bl	8017646 <memcpy>
 8010d9a:	3401      	adds	r4, #1
 8010d9c:	f149 0900 	adc.w	r9, r9, #0
 8010da0:	45c8      	cmp	r8, r9
 8010da2:	bf08      	it	eq
 8010da4:	42a5      	cmpeq	r5, r4
 8010da6:	d02b      	beq.n	8010e00 <rcl_init+0x164>
 8010da8:	f8d7 a000 	ldr.w	sl, [r7]
 8010dac:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8010db0:	f7ef fa20 	bl	80001f4 <strlen>
 8010db4:	1c42      	adds	r2, r0, #1
 8010db6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010db8:	991d      	ldr	r1, [sp, #116]	; 0x74
 8010dba:	f8da a020 	ldr.w	sl, [sl, #32]
 8010dbe:	9201      	str	r2, [sp, #4]
 8010dc0:	4610      	mov	r0, r2
 8010dc2:	4798      	blx	r3
 8010dc4:	683b      	ldr	r3, [r7, #0]
 8010dc6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8010dca:	6a1b      	ldr	r3, [r3, #32]
 8010dcc:	9a01      	ldr	r2, [sp, #4]
 8010dce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010dd2:	2800      	cmp	r0, #0
 8010dd4:	d1de      	bne.n	8010d94 <rcl_init+0xf8>
 8010dd6:	240a      	movs	r4, #10
 8010dd8:	4638      	mov	r0, r7
 8010dda:	f7ff feff 	bl	8010bdc <__cleanup_context>
 8010dde:	4620      	mov	r0, r4
 8010de0:	b01e      	add	sp, #120	; 0x78
 8010de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010de6:	2900      	cmp	r1, #0
 8010de8:	f43f af71 	beq.w	8010cce <rcl_init+0x32>
 8010dec:	240b      	movs	r4, #11
 8010dee:	4620      	mov	r0, r4
 8010df0:	b01e      	add	sp, #120	; 0x78
 8010df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010df6:	2464      	movs	r4, #100	; 0x64
 8010df8:	4620      	mov	r0, r4
 8010dfa:	b01e      	add	sp, #120	; 0x78
 8010dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e00:	f8d7 9000 	ldr.w	r9, [r7]
 8010e04:	4926      	ldr	r1, [pc, #152]	; (8010ea0 <rcl_init+0x204>)
 8010e06:	680b      	ldr	r3, [r1, #0]
 8010e08:	3301      	adds	r3, #1
 8010e0a:	d036      	beq.n	8010e7a <rcl_init+0x1de>
 8010e0c:	600b      	str	r3, [r1, #0]
 8010e0e:	461a      	mov	r2, r3
 8010e10:	2400      	movs	r4, #0
 8010e12:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8010e16:	607b      	str	r3, [r7, #4]
 8010e18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010e1a:	3301      	adds	r3, #1
 8010e1c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8010e20:	d034      	beq.n	8010e8c <rcl_init+0x1f0>
 8010e22:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8010e26:	b93b      	cbnz	r3, 8010e38 <rcl_init+0x19c>
 8010e28:	3030      	adds	r0, #48	; 0x30
 8010e2a:	f000 f939 	bl	80110a0 <rcl_get_localhost_only>
 8010e2e:	4604      	mov	r4, r0
 8010e30:	2800      	cmp	r0, #0
 8010e32:	d1d1      	bne.n	8010dd8 <rcl_init+0x13c>
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	6958      	ldr	r0, [r3, #20]
 8010e38:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8010e3a:	aa18      	add	r2, sp, #96	; 0x60
 8010e3c:	a917      	add	r1, sp, #92	; 0x5c
 8010e3e:	f001 f841 	bl	8011ec4 <rcl_validate_enclave_name>
 8010e42:	4604      	mov	r4, r0
 8010e44:	2800      	cmp	r0, #0
 8010e46:	d1c7      	bne.n	8010dd8 <rcl_init+0x13c>
 8010e48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e4a:	b9eb      	cbnz	r3, 8010e88 <rcl_init+0x1ec>
 8010e4c:	6839      	ldr	r1, [r7, #0]
 8010e4e:	694b      	ldr	r3, [r1, #20]
 8010e50:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8010e52:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8010e56:	f000 fc3d 	bl	80116d4 <rcl_get_security_options_from_environment>
 8010e5a:	4604      	mov	r4, r0
 8010e5c:	2800      	cmp	r0, #0
 8010e5e:	d1bb      	bne.n	8010dd8 <rcl_init+0x13c>
 8010e60:	6839      	ldr	r1, [r7, #0]
 8010e62:	6948      	ldr	r0, [r1, #20]
 8010e64:	3128      	adds	r1, #40	; 0x28
 8010e66:	3018      	adds	r0, #24
 8010e68:	f003 fa54 	bl	8014314 <rmw_init>
 8010e6c:	4604      	mov	r4, r0
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	d0bd      	beq.n	8010dee <rcl_init+0x152>
 8010e72:	f7ff fe8f 	bl	8010b94 <rcl_convert_rmw_ret_to_rcl_ret>
 8010e76:	4604      	mov	r4, r0
 8010e78:	e7ae      	b.n	8010dd8 <rcl_init+0x13c>
 8010e7a:	2201      	movs	r2, #1
 8010e7c:	461c      	mov	r4, r3
 8010e7e:	600a      	str	r2, [r1, #0]
 8010e80:	4613      	mov	r3, r2
 8010e82:	e7c6      	b.n	8010e12 <rcl_init+0x176>
 8010e84:	240a      	movs	r4, #10
 8010e86:	e7b2      	b.n	8010dee <rcl_init+0x152>
 8010e88:	2401      	movs	r4, #1
 8010e8a:	e7a5      	b.n	8010dd8 <rcl_init+0x13c>
 8010e8c:	3024      	adds	r0, #36	; 0x24
 8010e8e:	f005 fa77 	bl	8016380 <rcl_get_default_domain_id>
 8010e92:	4604      	mov	r4, r0
 8010e94:	2800      	cmp	r0, #0
 8010e96:	d19f      	bne.n	8010dd8 <rcl_init+0x13c>
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	6958      	ldr	r0, [r3, #20]
 8010e9c:	e7c1      	b.n	8010e22 <rcl_init+0x186>
 8010e9e:	bf00      	nop
 8010ea0:	20010b78 	.word	0x20010b78

08010ea4 <rcl_get_zero_initialized_init_options>:
 8010ea4:	2000      	movs	r0, #0
 8010ea6:	4770      	bx	lr

08010ea8 <rcl_init_options_init>:
 8010ea8:	b084      	sub	sp, #16
 8010eaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010eac:	b097      	sub	sp, #92	; 0x5c
 8010eae:	ae1d      	add	r6, sp, #116	; 0x74
 8010eb0:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8010eb4:	2800      	cmp	r0, #0
 8010eb6:	d058      	beq.n	8010f6a <rcl_init_options_init+0xc2>
 8010eb8:	6803      	ldr	r3, [r0, #0]
 8010eba:	4605      	mov	r5, r0
 8010ebc:	b133      	cbz	r3, 8010ecc <rcl_init_options_init+0x24>
 8010ebe:	2464      	movs	r4, #100	; 0x64
 8010ec0:	4620      	mov	r0, r4
 8010ec2:	b017      	add	sp, #92	; 0x5c
 8010ec4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010ec8:	b004      	add	sp, #16
 8010eca:	4770      	bx	lr
 8010ecc:	4630      	mov	r0, r6
 8010ece:	f7fa f9f7 	bl	800b2c0 <rcutils_allocator_is_valid>
 8010ed2:	2800      	cmp	r0, #0
 8010ed4:	d049      	beq.n	8010f6a <rcl_init_options_init+0xc2>
 8010ed6:	46b4      	mov	ip, r6
 8010ed8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010edc:	ac11      	add	r4, sp, #68	; 0x44
 8010ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ee0:	f8dc 3000 	ldr.w	r3, [ip]
 8010ee4:	6023      	str	r3, [r4, #0]
 8010ee6:	9921      	ldr	r1, [sp, #132]	; 0x84
 8010ee8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010eea:	2050      	movs	r0, #80	; 0x50
 8010eec:	4798      	blx	r3
 8010eee:	4604      	mov	r4, r0
 8010ef0:	6028      	str	r0, [r5, #0]
 8010ef2:	2800      	cmp	r0, #0
 8010ef4:	d03b      	beq.n	8010f6e <rcl_init_options_init+0xc6>
 8010ef6:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8010efa:	4686      	mov	lr, r0
 8010efc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010f00:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010f04:	f8dc 3000 	ldr.w	r3, [ip]
 8010f08:	f8ce 3000 	str.w	r3, [lr]
 8010f0c:	a802      	add	r0, sp, #8
 8010f0e:	f002 fe9b 	bl	8013c48 <rmw_get_zero_initialized_init_options>
 8010f12:	f10d 0e08 	add.w	lr, sp, #8
 8010f16:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010f1a:	f104 0c18 	add.w	ip, r4, #24
 8010f1e:	682f      	ldr	r7, [r5, #0]
 8010f20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f24:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010f28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010f30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f34:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010f38:	ac20      	add	r4, sp, #128	; 0x80
 8010f3a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010f3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010f42:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010f46:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8010f4a:	f107 0018 	add.w	r0, r7, #24
 8010f4e:	f003 f8e9 	bl	8014124 <rmw_init_options_init>
 8010f52:	4604      	mov	r4, r0
 8010f54:	2800      	cmp	r0, #0
 8010f56:	d0b3      	beq.n	8010ec0 <rcl_init_options_init+0x18>
 8010f58:	9921      	ldr	r1, [sp, #132]	; 0x84
 8010f5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010f5c:	6828      	ldr	r0, [r5, #0]
 8010f5e:	4798      	blx	r3
 8010f60:	4620      	mov	r0, r4
 8010f62:	f7ff fe17 	bl	8010b94 <rcl_convert_rmw_ret_to_rcl_ret>
 8010f66:	4604      	mov	r4, r0
 8010f68:	e7aa      	b.n	8010ec0 <rcl_init_options_init+0x18>
 8010f6a:	240b      	movs	r4, #11
 8010f6c:	e7a8      	b.n	8010ec0 <rcl_init_options_init+0x18>
 8010f6e:	240a      	movs	r4, #10
 8010f70:	e7a6      	b.n	8010ec0 <rcl_init_options_init+0x18>
 8010f72:	bf00      	nop

08010f74 <rcl_init_options_fini>:
 8010f74:	b530      	push	{r4, r5, lr}
 8010f76:	b087      	sub	sp, #28
 8010f78:	b1f0      	cbz	r0, 8010fb8 <rcl_init_options_fini+0x44>
 8010f7a:	6803      	ldr	r3, [r0, #0]
 8010f7c:	4604      	mov	r4, r0
 8010f7e:	b1db      	cbz	r3, 8010fb8 <rcl_init_options_fini+0x44>
 8010f80:	469c      	mov	ip, r3
 8010f82:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010f86:	f10d 0e04 	add.w	lr, sp, #4
 8010f8a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010f8e:	f8dc 3000 	ldr.w	r3, [ip]
 8010f92:	f8ce 3000 	str.w	r3, [lr]
 8010f96:	a801      	add	r0, sp, #4
 8010f98:	f7fa f992 	bl	800b2c0 <rcutils_allocator_is_valid>
 8010f9c:	b160      	cbz	r0, 8010fb8 <rcl_init_options_fini+0x44>
 8010f9e:	6820      	ldr	r0, [r4, #0]
 8010fa0:	3018      	adds	r0, #24
 8010fa2:	f003 f96f 	bl	8014284 <rmw_init_options_fini>
 8010fa6:	4605      	mov	r5, r0
 8010fa8:	b950      	cbnz	r0, 8010fc0 <rcl_init_options_fini+0x4c>
 8010faa:	6820      	ldr	r0, [r4, #0]
 8010fac:	9b02      	ldr	r3, [sp, #8]
 8010fae:	9905      	ldr	r1, [sp, #20]
 8010fb0:	4798      	blx	r3
 8010fb2:	4628      	mov	r0, r5
 8010fb4:	b007      	add	sp, #28
 8010fb6:	bd30      	pop	{r4, r5, pc}
 8010fb8:	250b      	movs	r5, #11
 8010fba:	4628      	mov	r0, r5
 8010fbc:	b007      	add	sp, #28
 8010fbe:	bd30      	pop	{r4, r5, pc}
 8010fc0:	f7ff fde8 	bl	8010b94 <rcl_convert_rmw_ret_to_rcl_ret>
 8010fc4:	4605      	mov	r5, r0
 8010fc6:	e7f8      	b.n	8010fba <rcl_init_options_fini+0x46>

08010fc8 <rcl_init_options_copy>:
 8010fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fcc:	b094      	sub	sp, #80	; 0x50
 8010fce:	2800      	cmp	r0, #0
 8010fd0:	d058      	beq.n	8011084 <rcl_init_options_copy+0xbc>
 8010fd2:	4604      	mov	r4, r0
 8010fd4:	6800      	ldr	r0, [r0, #0]
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	d054      	beq.n	8011084 <rcl_init_options_copy+0xbc>
 8010fda:	460e      	mov	r6, r1
 8010fdc:	f7fa f970 	bl	800b2c0 <rcutils_allocator_is_valid>
 8010fe0:	2800      	cmp	r0, #0
 8010fe2:	d04f      	beq.n	8011084 <rcl_init_options_copy+0xbc>
 8010fe4:	2e00      	cmp	r6, #0
 8010fe6:	d04d      	beq.n	8011084 <rcl_init_options_copy+0xbc>
 8010fe8:	6833      	ldr	r3, [r6, #0]
 8010fea:	b123      	cbz	r3, 8010ff6 <rcl_init_options_copy+0x2e>
 8010fec:	2464      	movs	r4, #100	; 0x64
 8010fee:	4620      	mov	r0, r4
 8010ff0:	b014      	add	sp, #80	; 0x50
 8010ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ff6:	6827      	ldr	r7, [r4, #0]
 8010ff8:	46bc      	mov	ip, r7
 8010ffa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010ffe:	ad0f      	add	r5, sp, #60	; 0x3c
 8011000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011002:	f8dc 3000 	ldr.w	r3, [ip]
 8011006:	f8d7 8000 	ldr.w	r8, [r7]
 801100a:	602b      	str	r3, [r5, #0]
 801100c:	4619      	mov	r1, r3
 801100e:	2050      	movs	r0, #80	; 0x50
 8011010:	47c0      	blx	r8
 8011012:	4605      	mov	r5, r0
 8011014:	6030      	str	r0, [r6, #0]
 8011016:	b3d0      	cbz	r0, 801108e <rcl_init_options_copy+0xc6>
 8011018:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 801101c:	4686      	mov	lr, r0
 801101e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011022:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011026:	f8dc 3000 	ldr.w	r3, [ip]
 801102a:	f8ce 3000 	str.w	r3, [lr]
 801102e:	4668      	mov	r0, sp
 8011030:	f002 fe0a 	bl	8013c48 <rmw_get_zero_initialized_init_options>
 8011034:	46ee      	mov	lr, sp
 8011036:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801103a:	f105 0c18 	add.w	ip, r5, #24
 801103e:	6824      	ldr	r4, [r4, #0]
 8011040:	6835      	ldr	r5, [r6, #0]
 8011042:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011046:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801104a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801104e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011052:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011056:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801105a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801105e:	f104 0018 	add.w	r0, r4, #24
 8011062:	f105 0118 	add.w	r1, r5, #24
 8011066:	f003 f8c5 	bl	80141f4 <rmw_init_options_copy>
 801106a:	4604      	mov	r4, r0
 801106c:	2800      	cmp	r0, #0
 801106e:	d0be      	beq.n	8010fee <rcl_init_options_copy+0x26>
 8011070:	f7fa f934 	bl	800b2dc <rcutils_get_error_string>
 8011074:	f7fa f948 	bl	800b308 <rcutils_reset_error>
 8011078:	4630      	mov	r0, r6
 801107a:	f7ff ff7b 	bl	8010f74 <rcl_init_options_fini>
 801107e:	b140      	cbz	r0, 8011092 <rcl_init_options_copy+0xca>
 8011080:	4604      	mov	r4, r0
 8011082:	e7b4      	b.n	8010fee <rcl_init_options_copy+0x26>
 8011084:	240b      	movs	r4, #11
 8011086:	4620      	mov	r0, r4
 8011088:	b014      	add	sp, #80	; 0x50
 801108a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801108e:	240a      	movs	r4, #10
 8011090:	e7ad      	b.n	8010fee <rcl_init_options_copy+0x26>
 8011092:	4620      	mov	r0, r4
 8011094:	b014      	add	sp, #80	; 0x50
 8011096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801109a:	f7ff bd7b 	b.w	8010b94 <rcl_convert_rmw_ret_to_rcl_ret>
 801109e:	bf00      	nop

080110a0 <rcl_get_localhost_only>:
 80110a0:	b510      	push	{r4, lr}
 80110a2:	b082      	sub	sp, #8
 80110a4:	2300      	movs	r3, #0
 80110a6:	9301      	str	r3, [sp, #4]
 80110a8:	b1b8      	cbz	r0, 80110da <rcl_get_localhost_only+0x3a>
 80110aa:	4604      	mov	r4, r0
 80110ac:	a901      	add	r1, sp, #4
 80110ae:	480c      	ldr	r0, [pc, #48]	; (80110e0 <rcl_get_localhost_only+0x40>)
 80110b0:	f002 fb0e 	bl	80136d0 <rcutils_get_env>
 80110b4:	b110      	cbz	r0, 80110bc <rcl_get_localhost_only+0x1c>
 80110b6:	2001      	movs	r0, #1
 80110b8:	b002      	add	sp, #8
 80110ba:	bd10      	pop	{r4, pc}
 80110bc:	9b01      	ldr	r3, [sp, #4]
 80110be:	b113      	cbz	r3, 80110c6 <rcl_get_localhost_only+0x26>
 80110c0:	781a      	ldrb	r2, [r3, #0]
 80110c2:	2a31      	cmp	r2, #49	; 0x31
 80110c4:	d004      	beq.n	80110d0 <rcl_get_localhost_only+0x30>
 80110c6:	2302      	movs	r3, #2
 80110c8:	2000      	movs	r0, #0
 80110ca:	7023      	strb	r3, [r4, #0]
 80110cc:	b002      	add	sp, #8
 80110ce:	bd10      	pop	{r4, pc}
 80110d0:	785b      	ldrb	r3, [r3, #1]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d1f7      	bne.n	80110c6 <rcl_get_localhost_only+0x26>
 80110d6:	2301      	movs	r3, #1
 80110d8:	e7f6      	b.n	80110c8 <rcl_get_localhost_only+0x28>
 80110da:	200b      	movs	r0, #11
 80110dc:	b002      	add	sp, #8
 80110de:	bd10      	pop	{r4, pc}
 80110e0:	08018a6c 	.word	0x08018a6c

080110e4 <rcl_get_zero_initialized_node>:
 80110e4:	4a03      	ldr	r2, [pc, #12]	; (80110f4 <rcl_get_zero_initialized_node+0x10>)
 80110e6:	4603      	mov	r3, r0
 80110e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80110ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80110f0:	4618      	mov	r0, r3
 80110f2:	4770      	bx	lr
 80110f4:	08018a94 	.word	0x08018a94

080110f8 <rcl_node_init>:
 80110f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110fc:	b0a9      	sub	sp, #164	; 0xa4
 80110fe:	4604      	mov	r4, r0
 8011100:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8011104:	a823      	add	r0, sp, #140	; 0x8c
 8011106:	460e      	mov	r6, r1
 8011108:	4615      	mov	r5, r2
 801110a:	461f      	mov	r7, r3
 801110c:	f005 fb60 	bl	80167d0 <rcl_guard_condition_get_default_options>
 8011110:	f1b8 0f00 	cmp.w	r8, #0
 8011114:	f000 80e6 	beq.w	80112e4 <rcl_node_init+0x1ec>
 8011118:	4640      	mov	r0, r8
 801111a:	f7fa f8d1 	bl	800b2c0 <rcutils_allocator_is_valid>
 801111e:	2800      	cmp	r0, #0
 8011120:	f000 80e0 	beq.w	80112e4 <rcl_node_init+0x1ec>
 8011124:	2e00      	cmp	r6, #0
 8011126:	f000 80dd 	beq.w	80112e4 <rcl_node_init+0x1ec>
 801112a:	2d00      	cmp	r5, #0
 801112c:	f000 80da 	beq.w	80112e4 <rcl_node_init+0x1ec>
 8011130:	2c00      	cmp	r4, #0
 8011132:	f000 80d7 	beq.w	80112e4 <rcl_node_init+0x1ec>
 8011136:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801113a:	f1b9 0f00 	cmp.w	r9, #0
 801113e:	f040 80fd 	bne.w	801133c <rcl_node_init+0x244>
 8011142:	2f00      	cmp	r7, #0
 8011144:	f000 80ce 	beq.w	80112e4 <rcl_node_init+0x1ec>
 8011148:	4638      	mov	r0, r7
 801114a:	f7ff fd41 	bl	8010bd0 <rcl_context_is_valid>
 801114e:	4682      	mov	sl, r0
 8011150:	2800      	cmp	r0, #0
 8011152:	f000 80cd 	beq.w	80112f0 <rcl_node_init+0x1f8>
 8011156:	464a      	mov	r2, r9
 8011158:	a922      	add	r1, sp, #136	; 0x88
 801115a:	4630      	mov	r0, r6
 801115c:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8011160:	f002 ff14 	bl	8013f8c <rmw_validate_node_name>
 8011164:	4681      	mov	r9, r0
 8011166:	2800      	cmp	r0, #0
 8011168:	f040 80be 	bne.w	80112e8 <rcl_node_init+0x1f0>
 801116c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801116e:	2800      	cmp	r0, #0
 8011170:	f040 80f0 	bne.w	8011354 <rcl_node_init+0x25c>
 8011174:	4628      	mov	r0, r5
 8011176:	f7ef f83d 	bl	80001f4 <strlen>
 801117a:	2800      	cmp	r0, #0
 801117c:	f040 80bb 	bne.w	80112f6 <rcl_node_init+0x1fe>
 8011180:	4d7c      	ldr	r5, [pc, #496]	; (8011374 <rcl_node_init+0x27c>)
 8011182:	a922      	add	r1, sp, #136	; 0x88
 8011184:	2200      	movs	r2, #0
 8011186:	4628      	mov	r0, r5
 8011188:	f002 fee2 	bl	8013f50 <rmw_validate_namespace>
 801118c:	4681      	mov	r9, r0
 801118e:	2800      	cmp	r0, #0
 8011190:	f040 80aa 	bne.w	80112e8 <rcl_node_init+0x1f0>
 8011194:	4682      	mov	sl, r0
 8011196:	9822      	ldr	r0, [sp, #136]	; 0x88
 8011198:	2800      	cmp	r0, #0
 801119a:	f040 80e0 	bne.w	801135e <rcl_node_init+0x266>
 801119e:	f8d8 3000 	ldr.w	r3, [r8]
 80111a2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80111a6:	2078      	movs	r0, #120	; 0x78
 80111a8:	4798      	blx	r3
 80111aa:	4681      	mov	r9, r0
 80111ac:	6060      	str	r0, [r4, #4]
 80111ae:	2800      	cmp	r0, #0
 80111b0:	f000 80ca 	beq.w	8011348 <rcl_node_init+0x250>
 80111b4:	2200      	movs	r2, #0
 80111b6:	2300      	movs	r3, #0
 80111b8:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 80111bc:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 80111c0:	a808      	add	r0, sp, #32
 80111c2:	f000 f907 	bl	80113d4 <rcl_node_get_default_options>
 80111c6:	a908      	add	r1, sp, #32
 80111c8:	4648      	mov	r0, r9
 80111ca:	2268      	movs	r2, #104	; 0x68
 80111cc:	f006 fa3b 	bl	8017646 <memcpy>
 80111d0:	6861      	ldr	r1, [r4, #4]
 80111d2:	6027      	str	r7, [r4, #0]
 80111d4:	4640      	mov	r0, r8
 80111d6:	f000 f90b 	bl	80113f0 <rcl_node_options_copy>
 80111da:	2800      	cmp	r0, #0
 80111dc:	d158      	bne.n	8011290 <rcl_node_init+0x198>
 80111de:	4628      	mov	r0, r5
 80111e0:	f7ef f808 	bl	80001f4 <strlen>
 80111e4:	4428      	add	r0, r5
 80111e6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80111ea:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80111ee:	2b2f      	cmp	r3, #47	; 0x2f
 80111f0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80111f4:	9300      	str	r3, [sp, #0]
 80111f6:	bf0c      	ite	eq
 80111f8:	4b5f      	ldreq	r3, [pc, #380]	; (8011378 <rcl_node_init+0x280>)
 80111fa:	4b60      	ldrne	r3, [pc, #384]	; (801137c <rcl_node_init+0x284>)
 80111fc:	9302      	str	r3, [sp, #8]
 80111fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011202:	9301      	str	r3, [sp, #4]
 8011204:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8011208:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801120c:	f002 fa88 	bl	8013720 <rcutils_format_string_limit>
 8011210:	6823      	ldr	r3, [r4, #0]
 8011212:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 8011216:	6818      	ldr	r0, [r3, #0]
 8011218:	4631      	mov	r1, r6
 801121a:	3028      	adds	r0, #40	; 0x28
 801121c:	462a      	mov	r2, r5
 801121e:	6866      	ldr	r6, [r4, #4]
 8011220:	f003 facc 	bl	80147bc <rmw_create_node>
 8011224:	6863      	ldr	r3, [r4, #4]
 8011226:	66b0      	str	r0, [r6, #104]	; 0x68
 8011228:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801122a:	2800      	cmp	r0, #0
 801122c:	d032      	beq.n	8011294 <rcl_node_init+0x19c>
 801122e:	f003 fb59 	bl	80148e4 <rmw_node_get_graph_guard_condition>
 8011232:	4681      	mov	r9, r0
 8011234:	b360      	cbz	r0, 8011290 <rcl_node_init+0x198>
 8011236:	f8d8 3000 	ldr.w	r3, [r8]
 801123a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801123e:	6866      	ldr	r6, [r4, #4]
 8011240:	2008      	movs	r0, #8
 8011242:	4798      	blx	r3
 8011244:	6863      	ldr	r3, [r4, #4]
 8011246:	66f0      	str	r0, [r6, #108]	; 0x6c
 8011248:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 801124c:	f1bb 0f00 	cmp.w	fp, #0
 8011250:	d020      	beq.n	8011294 <rcl_node_init+0x19c>
 8011252:	a806      	add	r0, sp, #24
 8011254:	f005 fa2c 	bl	80166b0 <rcl_get_zero_initialized_guard_condition>
 8011258:	a806      	add	r0, sp, #24
 801125a:	c803      	ldmia	r0, {r0, r1}
 801125c:	6863      	ldr	r3, [r4, #4]
 801125e:	46c4      	mov	ip, r8
 8011260:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8011264:	e88b 0003 	stmia.w	fp, {r0, r1}
 8011268:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801126c:	ae23      	add	r6, sp, #140	; 0x8c
 801126e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011270:	f8dc 3000 	ldr.w	r3, [ip]
 8011274:	6033      	str	r3, [r6, #0]
 8011276:	ab28      	add	r3, sp, #160	; 0xa0
 8011278:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801127c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011280:	4649      	mov	r1, r9
 8011282:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011284:	463a      	mov	r2, r7
 8011286:	4670      	mov	r0, lr
 8011288:	f005 fa1c 	bl	80166c4 <rcl_guard_condition_init_from_rmw>
 801128c:	4681      	mov	r9, r0
 801128e:	b328      	cbz	r0, 80112dc <rcl_node_init+0x1e4>
 8011290:	6863      	ldr	r3, [r4, #4]
 8011292:	b1f3      	cbz	r3, 80112d2 <rcl_node_init+0x1da>
 8011294:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8011296:	b128      	cbz	r0, 80112a4 <rcl_node_init+0x1ac>
 8011298:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801129c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80112a0:	4798      	blx	r3
 80112a2:	6863      	ldr	r3, [r4, #4]
 80112a4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80112a6:	b110      	cbz	r0, 80112ae <rcl_node_init+0x1b6>
 80112a8:	f003 faa0 	bl	80147ec <rmw_destroy_node>
 80112ac:	6863      	ldr	r3, [r4, #4]
 80112ae:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80112b0:	b148      	cbz	r0, 80112c6 <rcl_node_init+0x1ce>
 80112b2:	f005 fa67 	bl	8016784 <rcl_guard_condition_fini>
 80112b6:	6863      	ldr	r3, [r4, #4]
 80112b8:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80112bc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80112be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80112c2:	4798      	blx	r3
 80112c4:	6863      	ldr	r3, [r4, #4]
 80112c6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80112ca:	4618      	mov	r0, r3
 80112cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80112d0:	4798      	blx	r3
 80112d2:	2300      	movs	r3, #0
 80112d4:	e9c4 3300 	strd	r3, r3, [r4]
 80112d8:	f04f 0901 	mov.w	r9, #1
 80112dc:	f1ba 0f00 	cmp.w	sl, #0
 80112e0:	d125      	bne.n	801132e <rcl_node_init+0x236>
 80112e2:	e001      	b.n	80112e8 <rcl_node_init+0x1f0>
 80112e4:	f04f 090b 	mov.w	r9, #11
 80112e8:	4648      	mov	r0, r9
 80112ea:	b029      	add	sp, #164	; 0xa4
 80112ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112f0:	f04f 0965 	mov.w	r9, #101	; 0x65
 80112f4:	e7f8      	b.n	80112e8 <rcl_node_init+0x1f0>
 80112f6:	782b      	ldrb	r3, [r5, #0]
 80112f8:	2b2f      	cmp	r3, #47	; 0x2f
 80112fa:	f43f af42 	beq.w	8011182 <rcl_node_init+0x8a>
 80112fe:	9503      	str	r5, [sp, #12]
 8011300:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011304:	9300      	str	r3, [sp, #0]
 8011306:	4b1e      	ldr	r3, [pc, #120]	; (8011380 <rcl_node_init+0x288>)
 8011308:	9302      	str	r3, [sp, #8]
 801130a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801130e:	9301      	str	r3, [sp, #4]
 8011310:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8011314:	f002 fa04 	bl	8013720 <rcutils_format_string_limit>
 8011318:	4605      	mov	r5, r0
 801131a:	b340      	cbz	r0, 801136e <rcl_node_init+0x276>
 801131c:	2200      	movs	r2, #0
 801131e:	a922      	add	r1, sp, #136	; 0x88
 8011320:	9222      	str	r2, [sp, #136]	; 0x88
 8011322:	f002 fe15 	bl	8013f50 <rmw_validate_namespace>
 8011326:	4681      	mov	r9, r0
 8011328:	2800      	cmp	r0, #0
 801132a:	f43f af34 	beq.w	8011196 <rcl_node_init+0x9e>
 801132e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011332:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011336:	4628      	mov	r0, r5
 8011338:	4798      	blx	r3
 801133a:	e7d5      	b.n	80112e8 <rcl_node_init+0x1f0>
 801133c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8011340:	4648      	mov	r0, r9
 8011342:	b029      	add	sp, #164	; 0xa4
 8011344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011348:	f04f 090a 	mov.w	r9, #10
 801134c:	f1ba 0f00 	cmp.w	sl, #0
 8011350:	d1ed      	bne.n	801132e <rcl_node_init+0x236>
 8011352:	e7c9      	b.n	80112e8 <rcl_node_init+0x1f0>
 8011354:	f002 fe6c 	bl	8014030 <rmw_node_name_validation_result_string>
 8011358:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 801135c:	e7c4      	b.n	80112e8 <rcl_node_init+0x1f0>
 801135e:	f002 fe09 	bl	8013f74 <rmw_namespace_validation_result_string>
 8011362:	f04f 09ca 	mov.w	r9, #202	; 0xca
 8011366:	f1ba 0f00 	cmp.w	sl, #0
 801136a:	d1e0      	bne.n	801132e <rcl_node_init+0x236>
 801136c:	e7bc      	b.n	80112e8 <rcl_node_init+0x1f0>
 801136e:	f04f 090a 	mov.w	r9, #10
 8011372:	e7b9      	b.n	80112e8 <rcl_node_init+0x1f0>
 8011374:	08018a84 	.word	0x08018a84
 8011378:	08018708 	.word	0x08018708
 801137c:	08018a8c 	.word	0x08018a8c
 8011380:	08018a88 	.word	0x08018a88

08011384 <rcl_node_is_valid>:
 8011384:	b130      	cbz	r0, 8011394 <rcl_node_is_valid+0x10>
 8011386:	6843      	ldr	r3, [r0, #4]
 8011388:	b123      	cbz	r3, 8011394 <rcl_node_is_valid+0x10>
 801138a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801138c:	b113      	cbz	r3, 8011394 <rcl_node_is_valid+0x10>
 801138e:	6800      	ldr	r0, [r0, #0]
 8011390:	f7ff bc1e 	b.w	8010bd0 <rcl_context_is_valid>
 8011394:	2000      	movs	r0, #0
 8011396:	4770      	bx	lr

08011398 <rcl_node_get_name>:
 8011398:	b120      	cbz	r0, 80113a4 <rcl_node_get_name+0xc>
 801139a:	6840      	ldr	r0, [r0, #4]
 801139c:	b110      	cbz	r0, 80113a4 <rcl_node_get_name+0xc>
 801139e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80113a0:	b100      	cbz	r0, 80113a4 <rcl_node_get_name+0xc>
 80113a2:	6880      	ldr	r0, [r0, #8]
 80113a4:	4770      	bx	lr
 80113a6:	bf00      	nop

080113a8 <rcl_node_get_namespace>:
 80113a8:	b120      	cbz	r0, 80113b4 <rcl_node_get_namespace+0xc>
 80113aa:	6840      	ldr	r0, [r0, #4]
 80113ac:	b110      	cbz	r0, 80113b4 <rcl_node_get_namespace+0xc>
 80113ae:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80113b0:	b100      	cbz	r0, 80113b4 <rcl_node_get_namespace+0xc>
 80113b2:	68c0      	ldr	r0, [r0, #12]
 80113b4:	4770      	bx	lr
 80113b6:	bf00      	nop

080113b8 <rcl_node_get_options>:
 80113b8:	b128      	cbz	r0, 80113c6 <rcl_node_get_options+0xe>
 80113ba:	6840      	ldr	r0, [r0, #4]
 80113bc:	b118      	cbz	r0, 80113c6 <rcl_node_get_options+0xe>
 80113be:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	bf08      	it	eq
 80113c4:	2000      	moveq	r0, #0
 80113c6:	4770      	bx	lr

080113c8 <rcl_node_get_rmw_handle>:
 80113c8:	b110      	cbz	r0, 80113d0 <rcl_node_get_rmw_handle+0x8>
 80113ca:	6840      	ldr	r0, [r0, #4]
 80113cc:	b100      	cbz	r0, 80113d0 <rcl_node_get_rmw_handle+0x8>
 80113ce:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80113d0:	4770      	bx	lr
 80113d2:	bf00      	nop

080113d4 <rcl_node_get_default_options>:
 80113d4:	b510      	push	{r4, lr}
 80113d6:	2268      	movs	r2, #104	; 0x68
 80113d8:	4604      	mov	r4, r0
 80113da:	2100      	movs	r1, #0
 80113dc:	f006 f814 	bl	8017408 <memset>
 80113e0:	4620      	mov	r0, r4
 80113e2:	f7f9 ff5f 	bl	800b2a4 <rcutils_get_default_allocator>
 80113e6:	2301      	movs	r3, #1
 80113e8:	7523      	strb	r3, [r4, #20]
 80113ea:	4620      	mov	r0, r4
 80113ec:	bd10      	pop	{r4, pc}
 80113ee:	bf00      	nop

080113f0 <rcl_node_options_copy>:
 80113f0:	b1d0      	cbz	r0, 8011428 <rcl_node_options_copy+0x38>
 80113f2:	b570      	push	{r4, r5, r6, lr}
 80113f4:	460c      	mov	r4, r1
 80113f6:	b1a9      	cbz	r1, 8011424 <rcl_node_options_copy+0x34>
 80113f8:	4288      	cmp	r0, r1
 80113fa:	4684      	mov	ip, r0
 80113fc:	d012      	beq.n	8011424 <rcl_node_options_copy+0x34>
 80113fe:	4605      	mov	r5, r0
 8011400:	8a86      	ldrh	r6, [r0, #20]
 8011402:	468e      	mov	lr, r1
 8011404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011406:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801140a:	682b      	ldr	r3, [r5, #0]
 801140c:	f8ce 3000 	str.w	r3, [lr]
 8011410:	f10c 0118 	add.w	r1, ip, #24
 8011414:	2250      	movs	r2, #80	; 0x50
 8011416:	82a6      	strh	r6, [r4, #20]
 8011418:	f104 0018 	add.w	r0, r4, #24
 801141c:	f006 f913 	bl	8017646 <memcpy>
 8011420:	2000      	movs	r0, #0
 8011422:	bd70      	pop	{r4, r5, r6, pc}
 8011424:	200b      	movs	r0, #11
 8011426:	bd70      	pop	{r4, r5, r6, pc}
 8011428:	200b      	movs	r0, #11
 801142a:	4770      	bx	lr

0801142c <rcl_node_resolve_name>:
 801142c:	b082      	sub	sp, #8
 801142e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011432:	b091      	sub	sp, #68	; 0x44
 8011434:	ac1a      	add	r4, sp, #104	; 0x68
 8011436:	e884 000c 	stmia.w	r4, {r2, r3}
 801143a:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 801143e:	2800      	cmp	r0, #0
 8011440:	d03b      	beq.n	80114ba <rcl_node_resolve_name+0x8e>
 8011442:	460c      	mov	r4, r1
 8011444:	4605      	mov	r5, r0
 8011446:	f7ff ffb7 	bl	80113b8 <rcl_node_get_options>
 801144a:	2800      	cmp	r0, #0
 801144c:	d037      	beq.n	80114be <rcl_node_resolve_name+0x92>
 801144e:	4628      	mov	r0, r5
 8011450:	f7ff ffa2 	bl	8011398 <rcl_node_get_name>
 8011454:	4606      	mov	r6, r0
 8011456:	4628      	mov	r0, r5
 8011458:	f7ff ffa6 	bl	80113a8 <rcl_node_get_namespace>
 801145c:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8011460:	4681      	mov	r9, r0
 8011462:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011466:	ad0b      	add	r5, sp, #44	; 0x2c
 8011468:	46ac      	mov	ip, r5
 801146a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801146e:	f8de 3000 	ldr.w	r3, [lr]
 8011472:	f8cc 3000 	str.w	r3, [ip]
 8011476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011478:	b1fb      	cbz	r3, 80114ba <rcl_node_resolve_name+0x8e>
 801147a:	468a      	mov	sl, r1
 801147c:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8011480:	f002 faa6 	bl	80139d0 <rcutils_get_zero_initialized_string_map>
 8011484:	ab10      	add	r3, sp, #64	; 0x40
 8011486:	9008      	str	r0, [sp, #32]
 8011488:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801148c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011490:	2100      	movs	r1, #0
 8011492:	e895 000c 	ldmia.w	r5, {r2, r3}
 8011496:	a808      	add	r0, sp, #32
 8011498:	f002 fb12 	bl	8013ac0 <rcutils_string_map_init>
 801149c:	4607      	mov	r7, r0
 801149e:	b180      	cbz	r0, 80114c2 <rcl_node_resolve_name+0x96>
 80114a0:	f7f9 ff1c 	bl	800b2dc <rcutils_get_error_string>
 80114a4:	f7f9 ff30 	bl	800b308 <rcutils_reset_error>
 80114a8:	2f0a      	cmp	r7, #10
 80114aa:	bf18      	it	ne
 80114ac:	2701      	movne	r7, #1
 80114ae:	4638      	mov	r0, r7
 80114b0:	b011      	add	sp, #68	; 0x44
 80114b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114b6:	b002      	add	sp, #8
 80114b8:	4770      	bx	lr
 80114ba:	270b      	movs	r7, #11
 80114bc:	e7f7      	b.n	80114ae <rcl_node_resolve_name+0x82>
 80114be:	2701      	movs	r7, #1
 80114c0:	e7f5      	b.n	80114ae <rcl_node_resolve_name+0x82>
 80114c2:	9009      	str	r0, [sp, #36]	; 0x24
 80114c4:	9007      	str	r0, [sp, #28]
 80114c6:	a808      	add	r0, sp, #32
 80114c8:	f005 f8ec 	bl	80166a4 <rcl_get_default_topic_name_substitutions>
 80114cc:	4607      	mov	r7, r0
 80114ce:	b1a8      	cbz	r0, 80114fc <rcl_node_resolve_name+0xd0>
 80114d0:	280a      	cmp	r0, #10
 80114d2:	9c07      	ldr	r4, [sp, #28]
 80114d4:	d000      	beq.n	80114d8 <rcl_node_resolve_name+0xac>
 80114d6:	2701      	movs	r7, #1
 80114d8:	a808      	add	r0, sp, #32
 80114da:	f002 fb31 	bl	8013b40 <rcutils_string_map_fini>
 80114de:	2800      	cmp	r0, #0
 80114e0:	d13d      	bne.n	801155e <rcl_node_resolve_name+0x132>
 80114e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114e4:	4659      	mov	r1, fp
 80114e6:	47d0      	blx	sl
 80114e8:	4659      	mov	r1, fp
 80114ea:	4620      	mov	r0, r4
 80114ec:	47d0      	blx	sl
 80114ee:	f1b8 0f00 	cmp.w	r8, #0
 80114f2:	d0dc      	beq.n	80114ae <rcl_node_resolve_name+0x82>
 80114f4:	2f67      	cmp	r7, #103	; 0x67
 80114f6:	bf08      	it	eq
 80114f8:	2768      	moveq	r7, #104	; 0x68
 80114fa:	e7d8      	b.n	80114ae <rcl_node_resolve_name+0x82>
 80114fc:	ab09      	add	r3, sp, #36	; 0x24
 80114fe:	9305      	str	r3, [sp, #20]
 8011500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011502:	46ec      	mov	ip, sp
 8011504:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011508:	682b      	ldr	r3, [r5, #0]
 801150a:	f8cc 3000 	str.w	r3, [ip]
 801150e:	464a      	mov	r2, r9
 8011510:	4631      	mov	r1, r6
 8011512:	4620      	mov	r0, r4
 8011514:	ab08      	add	r3, sp, #32
 8011516:	f004 ff67 	bl	80163e8 <rcl_expand_topic_name>
 801151a:	4607      	mov	r7, r0
 801151c:	b9b8      	cbnz	r0, 801154e <rcl_node_resolve_name+0x122>
 801151e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8011520:	9009      	str	r0, [sp, #36]	; 0x24
 8011522:	4602      	mov	r2, r0
 8011524:	a90a      	add	r1, sp, #40	; 0x28
 8011526:	4620      	mov	r0, r4
 8011528:	f002 fc4e 	bl	8013dc8 <rmw_validate_full_topic_name>
 801152c:	b988      	cbnz	r0, 8011552 <rcl_node_resolve_name+0x126>
 801152e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011530:	b9d5      	cbnz	r5, 8011568 <rcl_node_resolve_name+0x13c>
 8011532:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011534:	a808      	add	r0, sp, #32
 8011536:	601c      	str	r4, [r3, #0]
 8011538:	f002 fb02 	bl	8013b40 <rcutils_string_map_fini>
 801153c:	4607      	mov	r7, r0
 801153e:	b1a8      	cbz	r0, 801156c <rcl_node_resolve_name+0x140>
 8011540:	f7f9 fecc 	bl	800b2dc <rcutils_get_error_string>
 8011544:	462c      	mov	r4, r5
 8011546:	f7f9 fedf 	bl	800b308 <rcutils_reset_error>
 801154a:	2701      	movs	r7, #1
 801154c:	e7c9      	b.n	80114e2 <rcl_node_resolve_name+0xb6>
 801154e:	9c07      	ldr	r4, [sp, #28]
 8011550:	e7c2      	b.n	80114d8 <rcl_node_resolve_name+0xac>
 8011552:	f7f9 fec3 	bl	800b2dc <rcutils_get_error_string>
 8011556:	2701      	movs	r7, #1
 8011558:	f7f9 fed6 	bl	800b308 <rcutils_reset_error>
 801155c:	e7bc      	b.n	80114d8 <rcl_node_resolve_name+0xac>
 801155e:	f7f9 febd 	bl	800b2dc <rcutils_get_error_string>
 8011562:	f7f9 fed1 	bl	800b308 <rcutils_reset_error>
 8011566:	e7bc      	b.n	80114e2 <rcl_node_resolve_name+0xb6>
 8011568:	2767      	movs	r7, #103	; 0x67
 801156a:	e7b5      	b.n	80114d8 <rcl_node_resolve_name+0xac>
 801156c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801156e:	4659      	mov	r1, fp
 8011570:	47d0      	blx	sl
 8011572:	4659      	mov	r1, fp
 8011574:	4638      	mov	r0, r7
 8011576:	47d0      	blx	sl
 8011578:	e799      	b.n	80114ae <rcl_node_resolve_name+0x82>
 801157a:	bf00      	nop

0801157c <exact_match_lookup>:
 801157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801157e:	f102 0708 	add.w	r7, r2, #8
 8011582:	460b      	mov	r3, r1
 8011584:	4614      	mov	r4, r2
 8011586:	4606      	mov	r6, r0
 8011588:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801158c:	b085      	sub	sp, #20
 801158e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011592:	4618      	mov	r0, r3
 8011594:	4919      	ldr	r1, [pc, #100]	; (80115fc <exact_match_lookup+0x80>)
 8011596:	e894 000c 	ldmia.w	r4, {r2, r3}
 801159a:	f002 f8b3 	bl	8013704 <rcutils_join_path>
 801159e:	7833      	ldrb	r3, [r6, #0]
 80115a0:	2b2f      	cmp	r3, #47	; 0x2f
 80115a2:	4605      	mov	r5, r0
 80115a4:	d023      	beq.n	80115ee <exact_match_lookup+0x72>
 80115a6:	f104 030c 	add.w	r3, r4, #12
 80115aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80115ae:	e88d 0003 	stmia.w	sp, {r0, r1}
 80115b2:	1c70      	adds	r0, r6, #1
 80115b4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80115b8:	f002 f8aa 	bl	8013710 <rcutils_to_native_path>
 80115bc:	4606      	mov	r6, r0
 80115be:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80115c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80115c6:	4631      	mov	r1, r6
 80115c8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80115cc:	4628      	mov	r0, r5
 80115ce:	f002 f899 	bl	8013704 <rcutils_join_path>
 80115d2:	6862      	ldr	r2, [r4, #4]
 80115d4:	6921      	ldr	r1, [r4, #16]
 80115d6:	4603      	mov	r3, r0
 80115d8:	4630      	mov	r0, r6
 80115da:	461e      	mov	r6, r3
 80115dc:	4790      	blx	r2
 80115de:	4628      	mov	r0, r5
 80115e0:	6863      	ldr	r3, [r4, #4]
 80115e2:	6921      	ldr	r1, [r4, #16]
 80115e4:	4798      	blx	r3
 80115e6:	4635      	mov	r5, r6
 80115e8:	4628      	mov	r0, r5
 80115ea:	b005      	add	sp, #20
 80115ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115ee:	7873      	ldrb	r3, [r6, #1]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d1d8      	bne.n	80115a6 <exact_match_lookup+0x2a>
 80115f4:	4628      	mov	r0, r5
 80115f6:	b005      	add	sp, #20
 80115f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115fa:	bf00      	nop
 80115fc:	08018ad8 	.word	0x08018ad8

08011600 <rcl_get_secure_root>:
 8011600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011604:	b085      	sub	sp, #20
 8011606:	b168      	cbz	r0, 8011624 <rcl_get_secure_root+0x24>
 8011608:	4607      	mov	r7, r0
 801160a:	4608      	mov	r0, r1
 801160c:	460c      	mov	r4, r1
 801160e:	f7f9 fe57 	bl	800b2c0 <rcutils_allocator_is_valid>
 8011612:	b138      	cbz	r0, 8011624 <rcl_get_secure_root+0x24>
 8011614:	2300      	movs	r3, #0
 8011616:	482d      	ldr	r0, [pc, #180]	; (80116cc <rcl_get_secure_root+0xcc>)
 8011618:	9303      	str	r3, [sp, #12]
 801161a:	a903      	add	r1, sp, #12
 801161c:	f002 f858 	bl	80136d0 <rcutils_get_env>
 8011620:	4605      	mov	r5, r0
 8011622:	b120      	cbz	r0, 801162e <rcl_get_secure_root+0x2e>
 8011624:	2500      	movs	r5, #0
 8011626:	4628      	mov	r0, r5
 8011628:	b005      	add	sp, #20
 801162a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801162e:	9b03      	ldr	r3, [sp, #12]
 8011630:	781a      	ldrb	r2, [r3, #0]
 8011632:	2a00      	cmp	r2, #0
 8011634:	d0f6      	beq.n	8011624 <rcl_get_secure_root+0x24>
 8011636:	f104 090c 	add.w	r9, r4, #12
 801163a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801163e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011642:	4618      	mov	r0, r3
 8011644:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011648:	f002 f984 	bl	8013954 <rcutils_strdup>
 801164c:	4680      	mov	r8, r0
 801164e:	2800      	cmp	r0, #0
 8011650:	d0e8      	beq.n	8011624 <rcl_get_secure_root+0x24>
 8011652:	481f      	ldr	r0, [pc, #124]	; (80116d0 <rcl_get_secure_root+0xd0>)
 8011654:	9503      	str	r5, [sp, #12]
 8011656:	a903      	add	r1, sp, #12
 8011658:	f002 f83a 	bl	80136d0 <rcutils_get_env>
 801165c:	b160      	cbz	r0, 8011678 <rcl_get_secure_root+0x78>
 801165e:	2600      	movs	r6, #0
 8011660:	6863      	ldr	r3, [r4, #4]
 8011662:	6921      	ldr	r1, [r4, #16]
 8011664:	4630      	mov	r0, r6
 8011666:	4798      	blx	r3
 8011668:	4640      	mov	r0, r8
 801166a:	6863      	ldr	r3, [r4, #4]
 801166c:	6921      	ldr	r1, [r4, #16]
 801166e:	4798      	blx	r3
 8011670:	4628      	mov	r0, r5
 8011672:	b005      	add	sp, #20
 8011674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011678:	9b03      	ldr	r3, [sp, #12]
 801167a:	781e      	ldrb	r6, [r3, #0]
 801167c:	b1f6      	cbz	r6, 80116bc <rcl_get_secure_root+0xbc>
 801167e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011682:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011686:	4618      	mov	r0, r3
 8011688:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801168c:	f002 f962 	bl	8013954 <rcutils_strdup>
 8011690:	4606      	mov	r6, r0
 8011692:	2800      	cmp	r0, #0
 8011694:	d0e3      	beq.n	801165e <rcl_get_secure_root+0x5e>
 8011696:	4622      	mov	r2, r4
 8011698:	4641      	mov	r1, r8
 801169a:	f7ff ff6f 	bl	801157c <exact_match_lookup>
 801169e:	4605      	mov	r5, r0
 80116a0:	2d00      	cmp	r5, #0
 80116a2:	d0dd      	beq.n	8011660 <rcl_get_secure_root+0x60>
 80116a4:	4628      	mov	r0, r5
 80116a6:	f002 f82b 	bl	8013700 <rcutils_is_directory>
 80116aa:	4603      	mov	r3, r0
 80116ac:	2800      	cmp	r0, #0
 80116ae:	d1d7      	bne.n	8011660 <rcl_get_secure_root+0x60>
 80116b0:	4628      	mov	r0, r5
 80116b2:	6921      	ldr	r1, [r4, #16]
 80116b4:	461d      	mov	r5, r3
 80116b6:	6863      	ldr	r3, [r4, #4]
 80116b8:	4798      	blx	r3
 80116ba:	e7d1      	b.n	8011660 <rcl_get_secure_root+0x60>
 80116bc:	4622      	mov	r2, r4
 80116be:	4638      	mov	r0, r7
 80116c0:	4641      	mov	r1, r8
 80116c2:	f7ff ff5b 	bl	801157c <exact_match_lookup>
 80116c6:	4605      	mov	r5, r0
 80116c8:	e7ea      	b.n	80116a0 <rcl_get_secure_root+0xa0>
 80116ca:	bf00      	nop
 80116cc:	08018ae4 	.word	0x08018ae4
 80116d0:	08018afc 	.word	0x08018afc

080116d4 <rcl_get_security_options_from_environment>:
 80116d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116d8:	b082      	sub	sp, #8
 80116da:	2300      	movs	r3, #0
 80116dc:	4606      	mov	r6, r0
 80116de:	460f      	mov	r7, r1
 80116e0:	4820      	ldr	r0, [pc, #128]	; (8011764 <rcl_get_security_options_from_environment+0x90>)
 80116e2:	9301      	str	r3, [sp, #4]
 80116e4:	a901      	add	r1, sp, #4
 80116e6:	4690      	mov	r8, r2
 80116e8:	f001 fff2 	bl	80136d0 <rcutils_get_env>
 80116ec:	b120      	cbz	r0, 80116f8 <rcl_get_security_options_from_environment+0x24>
 80116ee:	2501      	movs	r5, #1
 80116f0:	4628      	mov	r0, r5
 80116f2:	b002      	add	sp, #8
 80116f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116f8:	491b      	ldr	r1, [pc, #108]	; (8011768 <rcl_get_security_options_from_environment+0x94>)
 80116fa:	4604      	mov	r4, r0
 80116fc:	9801      	ldr	r0, [sp, #4]
 80116fe:	f7ee fd6f 	bl	80001e0 <strcmp>
 8011702:	4605      	mov	r5, r0
 8011704:	b9e8      	cbnz	r0, 8011742 <rcl_get_security_options_from_environment+0x6e>
 8011706:	9001      	str	r0, [sp, #4]
 8011708:	f1b8 0f00 	cmp.w	r8, #0
 801170c:	d020      	beq.n	8011750 <rcl_get_security_options_from_environment+0x7c>
 801170e:	4817      	ldr	r0, [pc, #92]	; (801176c <rcl_get_security_options_from_environment+0x98>)
 8011710:	a901      	add	r1, sp, #4
 8011712:	f001 ffdd 	bl	80136d0 <rcutils_get_env>
 8011716:	2800      	cmp	r0, #0
 8011718:	d1e9      	bne.n	80116ee <rcl_get_security_options_from_environment+0x1a>
 801171a:	4915      	ldr	r1, [pc, #84]	; (8011770 <rcl_get_security_options_from_environment+0x9c>)
 801171c:	9801      	ldr	r0, [sp, #4]
 801171e:	f7ee fd5f 	bl	80001e0 <strcmp>
 8011722:	fab0 f080 	clz	r0, r0
 8011726:	0940      	lsrs	r0, r0, #5
 8011728:	f888 0000 	strb.w	r0, [r8]
 801172c:	4639      	mov	r1, r7
 801172e:	4630      	mov	r0, r6
 8011730:	f7ff ff66 	bl	8011600 <rcl_get_secure_root>
 8011734:	b170      	cbz	r0, 8011754 <rcl_get_security_options_from_environment+0x80>
 8011736:	f8c8 0004 	str.w	r0, [r8, #4]
 801173a:	4628      	mov	r0, r5
 801173c:	b002      	add	sp, #8
 801173e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011742:	4625      	mov	r5, r4
 8011744:	4628      	mov	r0, r5
 8011746:	f888 4000 	strb.w	r4, [r8]
 801174a:	b002      	add	sp, #8
 801174c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011750:	250b      	movs	r5, #11
 8011752:	e7cd      	b.n	80116f0 <rcl_get_security_options_from_environment+0x1c>
 8011754:	f898 5000 	ldrb.w	r5, [r8]
 8011758:	f1a5 0501 	sub.w	r5, r5, #1
 801175c:	fab5 f585 	clz	r5, r5
 8011760:	096d      	lsrs	r5, r5, #5
 8011762:	e7c5      	b.n	80116f0 <rcl_get_security_options_from_environment+0x1c>
 8011764:	08018a9c 	.word	0x08018a9c
 8011768:	08018ab0 	.word	0x08018ab0
 801176c:	08018ab8 	.word	0x08018ab8
 8011770:	08018ad0 	.word	0x08018ad0

08011774 <rcl_service_get_rmw_handle>:
 8011774:	b118      	cbz	r0, 801177e <rcl_service_get_rmw_handle+0xa>
 8011776:	6800      	ldr	r0, [r0, #0]
 8011778:	b108      	cbz	r0, 801177e <rcl_service_get_rmw_handle+0xa>
 801177a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801177e:	4770      	bx	lr

08011780 <rcl_take_request>:
 8011780:	b570      	push	{r4, r5, r6, lr}
 8011782:	468e      	mov	lr, r1
 8011784:	460c      	mov	r4, r1
 8011786:	4616      	mov	r6, r2
 8011788:	4605      	mov	r5, r0
 801178a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801178e:	b08c      	sub	sp, #48	; 0x30
 8011790:	f10d 0c18 	add.w	ip, sp, #24
 8011794:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011798:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801179c:	e88c 0003 	stmia.w	ip, {r0, r1}
 80117a0:	b30d      	cbz	r5, 80117e6 <rcl_take_request+0x66>
 80117a2:	682b      	ldr	r3, [r5, #0]
 80117a4:	b1fb      	cbz	r3, 80117e6 <rcl_take_request+0x66>
 80117a6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80117aa:	b1e0      	cbz	r0, 80117e6 <rcl_take_request+0x66>
 80117ac:	b336      	cbz	r6, 80117fc <rcl_take_request+0x7c>
 80117ae:	2300      	movs	r3, #0
 80117b0:	f88d 3007 	strb.w	r3, [sp, #7]
 80117b4:	4632      	mov	r2, r6
 80117b6:	f10d 0307 	add.w	r3, sp, #7
 80117ba:	a902      	add	r1, sp, #8
 80117bc:	f003 f8e6 	bl	801498c <rmw_take_request>
 80117c0:	4605      	mov	r5, r0
 80117c2:	b198      	cbz	r0, 80117ec <rcl_take_request+0x6c>
 80117c4:	280a      	cmp	r0, #10
 80117c6:	bf18      	it	ne
 80117c8:	2501      	movne	r5, #1
 80117ca:	f10d 0e18 	add.w	lr, sp, #24
 80117ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80117d2:	46a4      	mov	ip, r4
 80117d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80117d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80117dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80117e0:	4628      	mov	r0, r5
 80117e2:	b00c      	add	sp, #48	; 0x30
 80117e4:	bd70      	pop	{r4, r5, r6, pc}
 80117e6:	f44f 7516 	mov.w	r5, #600	; 0x258
 80117ea:	e7ee      	b.n	80117ca <rcl_take_request+0x4a>
 80117ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80117f0:	f240 2359 	movw	r3, #601	; 0x259
 80117f4:	2a00      	cmp	r2, #0
 80117f6:	bf08      	it	eq
 80117f8:	461d      	moveq	r5, r3
 80117fa:	e7e6      	b.n	80117ca <rcl_take_request+0x4a>
 80117fc:	250b      	movs	r5, #11
 80117fe:	e7e4      	b.n	80117ca <rcl_take_request+0x4a>

08011800 <rcl_send_response>:
 8011800:	b170      	cbz	r0, 8011820 <rcl_send_response+0x20>
 8011802:	6800      	ldr	r0, [r0, #0]
 8011804:	b160      	cbz	r0, 8011820 <rcl_send_response+0x20>
 8011806:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801180a:	b148      	cbz	r0, 8011820 <rcl_send_response+0x20>
 801180c:	b159      	cbz	r1, 8011826 <rcl_send_response+0x26>
 801180e:	b510      	push	{r4, lr}
 8011810:	b15a      	cbz	r2, 801182a <rcl_send_response+0x2a>
 8011812:	f003 f919 	bl	8014a48 <rmw_send_response>
 8011816:	b110      	cbz	r0, 801181e <rcl_send_response+0x1e>
 8011818:	2802      	cmp	r0, #2
 801181a:	bf18      	it	ne
 801181c:	2001      	movne	r0, #1
 801181e:	bd10      	pop	{r4, pc}
 8011820:	f44f 7016 	mov.w	r0, #600	; 0x258
 8011824:	4770      	bx	lr
 8011826:	200b      	movs	r0, #11
 8011828:	4770      	bx	lr
 801182a:	200b      	movs	r0, #11
 801182c:	bd10      	pop	{r4, pc}
 801182e:	bf00      	nop

08011830 <rcl_service_is_valid>:
 8011830:	b130      	cbz	r0, 8011840 <rcl_service_is_valid+0x10>
 8011832:	6800      	ldr	r0, [r0, #0]
 8011834:	b120      	cbz	r0, 8011840 <rcl_service_is_valid+0x10>
 8011836:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801183a:	3800      	subs	r0, #0
 801183c:	bf18      	it	ne
 801183e:	2001      	movne	r0, #1
 8011840:	4770      	bx	lr
 8011842:	bf00      	nop

08011844 <rcl_get_zero_initialized_subscription>:
 8011844:	4b01      	ldr	r3, [pc, #4]	; (801184c <rcl_get_zero_initialized_subscription+0x8>)
 8011846:	6818      	ldr	r0, [r3, #0]
 8011848:	4770      	bx	lr
 801184a:	bf00      	nop
 801184c:	08018b1c 	.word	0x08018b1c

08011850 <rcl_subscription_init>:
 8011850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011854:	b089      	sub	sp, #36	; 0x24
 8011856:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8011858:	b1d6      	cbz	r6, 8011890 <rcl_subscription_init+0x40>
 801185a:	f106 0950 	add.w	r9, r6, #80	; 0x50
 801185e:	4604      	mov	r4, r0
 8011860:	4648      	mov	r0, r9
 8011862:	460d      	mov	r5, r1
 8011864:	4690      	mov	r8, r2
 8011866:	461f      	mov	r7, r3
 8011868:	f7f9 fd2a 	bl	800b2c0 <rcutils_allocator_is_valid>
 801186c:	b180      	cbz	r0, 8011890 <rcl_subscription_init+0x40>
 801186e:	b17c      	cbz	r4, 8011890 <rcl_subscription_init+0x40>
 8011870:	4628      	mov	r0, r5
 8011872:	f7ff fd87 	bl	8011384 <rcl_node_is_valid>
 8011876:	2800      	cmp	r0, #0
 8011878:	d054      	beq.n	8011924 <rcl_subscription_init+0xd4>
 801187a:	f1b8 0f00 	cmp.w	r8, #0
 801187e:	d007      	beq.n	8011890 <rcl_subscription_init+0x40>
 8011880:	b137      	cbz	r7, 8011890 <rcl_subscription_init+0x40>
 8011882:	6823      	ldr	r3, [r4, #0]
 8011884:	b14b      	cbz	r3, 801189a <rcl_subscription_init+0x4a>
 8011886:	2764      	movs	r7, #100	; 0x64
 8011888:	4638      	mov	r0, r7
 801188a:	b009      	add	sp, #36	; 0x24
 801188c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011890:	270b      	movs	r7, #11
 8011892:	4638      	mov	r0, r7
 8011894:	b009      	add	sp, #36	; 0x24
 8011896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801189a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801189e:	aa07      	add	r2, sp, #28
 80118a0:	9205      	str	r2, [sp, #20]
 80118a2:	9307      	str	r3, [sp, #28]
 80118a4:	f106 0358 	add.w	r3, r6, #88	; 0x58
 80118a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80118ac:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80118b0:	4639      	mov	r1, r7
 80118b2:	e899 000c 	ldmia.w	r9, {r2, r3}
 80118b6:	4628      	mov	r0, r5
 80118b8:	f7ff fdb8 	bl	801142c <rcl_node_resolve_name>
 80118bc:	4607      	mov	r7, r0
 80118be:	2800      	cmp	r0, #0
 80118c0:	d15f      	bne.n	8011982 <rcl_subscription_init+0x132>
 80118c2:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 80118c6:	21c8      	movs	r1, #200	; 0xc8
 80118c8:	2001      	movs	r0, #1
 80118ca:	4798      	blx	r3
 80118cc:	6020      	str	r0, [r4, #0]
 80118ce:	2800      	cmp	r0, #0
 80118d0:	d05d      	beq.n	801198e <rcl_subscription_init+0x13e>
 80118d2:	4628      	mov	r0, r5
 80118d4:	f7ff fd78 	bl	80113c8 <rcl_node_get_rmw_handle>
 80118d8:	f106 0364 	add.w	r3, r6, #100	; 0x64
 80118dc:	9300      	str	r3, [sp, #0]
 80118de:	9a07      	ldr	r2, [sp, #28]
 80118e0:	6827      	ldr	r7, [r4, #0]
 80118e2:	4641      	mov	r1, r8
 80118e4:	4633      	mov	r3, r6
 80118e6:	f003 f999 	bl	8014c1c <rmw_create_subscription>
 80118ea:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 80118ee:	6827      	ldr	r7, [r4, #0]
 80118f0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80118f4:	b348      	cbz	r0, 801194a <rcl_subscription_init+0xfa>
 80118f6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80118fa:	f003 fa71 	bl	8014de0 <rmw_subscription_get_actual_qos>
 80118fe:	4607      	mov	r7, r0
 8011900:	b9a8      	cbnz	r0, 801192e <rcl_subscription_init+0xde>
 8011902:	6820      	ldr	r0, [r4, #0]
 8011904:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 8011908:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 801190c:	2270      	movs	r2, #112	; 0x70
 801190e:	4631      	mov	r1, r6
 8011910:	f005 fe99 	bl	8017646 <memcpy>
 8011914:	9807      	ldr	r0, [sp, #28]
 8011916:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8011918:	6e31      	ldr	r1, [r6, #96]	; 0x60
 801191a:	4798      	blx	r3
 801191c:	4638      	mov	r0, r7
 801191e:	b009      	add	sp, #36	; 0x24
 8011920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011924:	27c8      	movs	r7, #200	; 0xc8
 8011926:	4638      	mov	r0, r7
 8011928:	b009      	add	sp, #36	; 0x24
 801192a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801192e:	6827      	ldr	r7, [r4, #0]
 8011930:	b32f      	cbz	r7, 801197e <rcl_subscription_init+0x12e>
 8011932:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011936:	b14b      	cbz	r3, 801194c <rcl_subscription_init+0xfc>
 8011938:	4628      	mov	r0, r5
 801193a:	f7ff fd45 	bl	80113c8 <rcl_node_get_rmw_handle>
 801193e:	6823      	ldr	r3, [r4, #0]
 8011940:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8011944:	f003 fa5c 	bl	8014e00 <rmw_destroy_subscription>
 8011948:	6827      	ldr	r7, [r4, #0]
 801194a:	b197      	cbz	r7, 8011972 <rcl_subscription_init+0x122>
 801194c:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8011950:	4628      	mov	r0, r5
 8011952:	f7f9 fcb5 	bl	800b2c0 <rcutils_allocator_is_valid>
 8011956:	b158      	cbz	r0, 8011970 <rcl_subscription_init+0x120>
 8011958:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801195a:	b148      	cbz	r0, 8011970 <rcl_subscription_init+0x120>
 801195c:	4629      	mov	r1, r5
 801195e:	f002 f987 	bl	8013c70 <rmw_subscription_content_filter_options_fini>
 8011962:	4605      	mov	r5, r0
 8011964:	b9b8      	cbnz	r0, 8011996 <rcl_subscription_init+0x146>
 8011966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011968:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801196a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801196c:	4798      	blx	r3
 801196e:	66fd      	str	r5, [r7, #108]	; 0x6c
 8011970:	6827      	ldr	r7, [r4, #0]
 8011972:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8011974:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8011976:	4638      	mov	r0, r7
 8011978:	4798      	blx	r3
 801197a:	2300      	movs	r3, #0
 801197c:	6023      	str	r3, [r4, #0]
 801197e:	2701      	movs	r7, #1
 8011980:	e7c8      	b.n	8011914 <rcl_subscription_init+0xc4>
 8011982:	2867      	cmp	r0, #103	; 0x67
 8011984:	d0c6      	beq.n	8011914 <rcl_subscription_init+0xc4>
 8011986:	2869      	cmp	r0, #105	; 0x69
 8011988:	d003      	beq.n	8011992 <rcl_subscription_init+0x142>
 801198a:	280a      	cmp	r0, #10
 801198c:	d1f7      	bne.n	801197e <rcl_subscription_init+0x12e>
 801198e:	270a      	movs	r7, #10
 8011990:	e7c0      	b.n	8011914 <rcl_subscription_init+0xc4>
 8011992:	2767      	movs	r7, #103	; 0x67
 8011994:	e7be      	b.n	8011914 <rcl_subscription_init+0xc4>
 8011996:	f7ff f8fd 	bl	8010b94 <rcl_convert_rmw_ret_to_rcl_ret>
 801199a:	6827      	ldr	r7, [r4, #0]
 801199c:	e7e9      	b.n	8011972 <rcl_subscription_init+0x122>
 801199e:	bf00      	nop

080119a0 <rcl_subscription_get_default_options>:
 80119a0:	b570      	push	{r4, r5, r6, lr}
 80119a2:	4d14      	ldr	r5, [pc, #80]	; (80119f4 <rcl_subscription_get_default_options+0x54>)
 80119a4:	4914      	ldr	r1, [pc, #80]	; (80119f8 <rcl_subscription_get_default_options+0x58>)
 80119a6:	b08a      	sub	sp, #40	; 0x28
 80119a8:	4604      	mov	r4, r0
 80119aa:	2250      	movs	r2, #80	; 0x50
 80119ac:	4628      	mov	r0, r5
 80119ae:	f005 fe4a 	bl	8017646 <memcpy>
 80119b2:	a804      	add	r0, sp, #16
 80119b4:	f7f9 fc76 	bl	800b2a4 <rcutils_get_default_allocator>
 80119b8:	f10d 0c10 	add.w	ip, sp, #16
 80119bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80119c0:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 80119c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80119c8:	466e      	mov	r6, sp
 80119ca:	f8dc 3000 	ldr.w	r3, [ip]
 80119ce:	f8ce 3000 	str.w	r3, [lr]
 80119d2:	4630      	mov	r0, r6
 80119d4:	f002 f966 	bl	8013ca4 <rmw_get_default_subscription_options>
 80119d8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80119dc:	f105 0364 	add.w	r3, r5, #100	; 0x64
 80119e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80119e4:	2270      	movs	r2, #112	; 0x70
 80119e6:	4629      	mov	r1, r5
 80119e8:	4620      	mov	r0, r4
 80119ea:	f005 fe2c 	bl	8017646 <memcpy>
 80119ee:	4620      	mov	r0, r4
 80119f0:	b00a      	add	sp, #40	; 0x28
 80119f2:	bd70      	pop	{r4, r5, r6, pc}
 80119f4:	20010b80 	.word	0x20010b80
 80119f8:	08018b20 	.word	0x08018b20

080119fc <rcl_take>:
 80119fc:	2800      	cmp	r0, #0
 80119fe:	d04a      	beq.n	8011a96 <rcl_take+0x9a>
 8011a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a04:	4604      	mov	r4, r0
 8011a06:	6800      	ldr	r0, [r0, #0]
 8011a08:	b0a4      	sub	sp, #144	; 0x90
 8011a0a:	2800      	cmp	r0, #0
 8011a0c:	d03b      	beq.n	8011a86 <rcl_take+0x8a>
 8011a0e:	461f      	mov	r7, r3
 8011a10:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d036      	beq.n	8011a86 <rcl_take+0x8a>
 8011a18:	460e      	mov	r6, r1
 8011a1a:	2900      	cmp	r1, #0
 8011a1c:	d039      	beq.n	8011a92 <rcl_take+0x96>
 8011a1e:	4615      	mov	r5, r2
 8011a20:	2a00      	cmp	r2, #0
 8011a22:	d03c      	beq.n	8011a9e <rcl_take+0xa2>
 8011a24:	a802      	add	r0, sp, #8
 8011a26:	f002 f9c7 	bl	8013db8 <rmw_get_zero_initialized_message_info>
 8011a2a:	f10d 0c08 	add.w	ip, sp, #8
 8011a2e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011a32:	46ae      	mov	lr, r5
 8011a34:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011a38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011a3c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011a40:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011a44:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011a48:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8011a4c:	f04f 0800 	mov.w	r8, #0
 8011a50:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8011a54:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 8011a58:	6822      	ldr	r2, [r4, #0]
 8011a5a:	462b      	mov	r3, r5
 8011a5c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
 8011a60:	9700      	str	r7, [sp, #0]
 8011a62:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 8011a66:	4631      	mov	r1, r6
 8011a68:	f003 fa2a 	bl	8014ec0 <rmw_take_with_info>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	b9c0      	cbnz	r0, 8011aa2 <rcl_take+0xa6>
 8011a70:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 8011a74:	f240 1291 	movw	r2, #401	; 0x191
 8011a78:	2900      	cmp	r1, #0
 8011a7a:	bf08      	it	eq
 8011a7c:	4613      	moveq	r3, r2
 8011a7e:	4618      	mov	r0, r3
 8011a80:	b024      	add	sp, #144	; 0x90
 8011a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a86:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	b024      	add	sp, #144	; 0x90
 8011a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a92:	230b      	movs	r3, #11
 8011a94:	e7f3      	b.n	8011a7e <rcl_take+0x82>
 8011a96:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	4770      	bx	lr
 8011a9e:	ad14      	add	r5, sp, #80	; 0x50
 8011aa0:	e7c0      	b.n	8011a24 <rcl_take+0x28>
 8011aa2:	f7ff f877 	bl	8010b94 <rcl_convert_rmw_ret_to_rcl_ret>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	e7e9      	b.n	8011a7e <rcl_take+0x82>
 8011aaa:	bf00      	nop

08011aac <rcl_subscription_get_rmw_handle>:
 8011aac:	b118      	cbz	r0, 8011ab6 <rcl_subscription_get_rmw_handle+0xa>
 8011aae:	6800      	ldr	r0, [r0, #0]
 8011ab0:	b108      	cbz	r0, 8011ab6 <rcl_subscription_get_rmw_handle+0xa>
 8011ab2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8011ab6:	4770      	bx	lr

08011ab8 <rcl_subscription_is_valid>:
 8011ab8:	b130      	cbz	r0, 8011ac8 <rcl_subscription_is_valid+0x10>
 8011aba:	6800      	ldr	r0, [r0, #0]
 8011abc:	b120      	cbz	r0, 8011ac8 <rcl_subscription_is_valid+0x10>
 8011abe:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8011ac2:	3800      	subs	r0, #0
 8011ac4:	bf18      	it	ne
 8011ac6:	2001      	movne	r0, #1
 8011ac8:	4770      	bx	lr
 8011aca:	bf00      	nop

08011acc <rcl_get_system_time>:
 8011acc:	4608      	mov	r0, r1
 8011ace:	f7f9 bc37 	b.w	800b340 <rcutils_system_time_now>
 8011ad2:	bf00      	nop

08011ad4 <rcl_get_steady_time>:
 8011ad4:	4608      	mov	r0, r1
 8011ad6:	f7f9 bc5b 	b.w	800b390 <rcutils_steady_time_now>
 8011ada:	bf00      	nop

08011adc <rcl_get_ros_time>:
 8011adc:	7a03      	ldrb	r3, [r0, #8]
 8011ade:	b510      	push	{r4, lr}
 8011ae0:	460c      	mov	r4, r1
 8011ae2:	b133      	cbz	r3, 8011af2 <rcl_get_ros_time+0x16>
 8011ae4:	2105      	movs	r1, #5
 8011ae6:	f001 fd4f 	bl	8013588 <__atomic_load_8>
 8011aea:	e9c4 0100 	strd	r0, r1, [r4]
 8011aee:	2000      	movs	r0, #0
 8011af0:	bd10      	pop	{r4, pc}
 8011af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011af6:	4608      	mov	r0, r1
 8011af8:	f7f9 bc22 	b.w	800b340 <rcutils_system_time_now>

08011afc <rcl_clock_init>:
 8011afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011afe:	4605      	mov	r5, r0
 8011b00:	4610      	mov	r0, r2
 8011b02:	4614      	mov	r4, r2
 8011b04:	460e      	mov	r6, r1
 8011b06:	f7f9 fbdb 	bl	800b2c0 <rcutils_allocator_is_valid>
 8011b0a:	b128      	cbz	r0, 8011b18 <rcl_clock_init+0x1c>
 8011b0c:	2d03      	cmp	r5, #3
 8011b0e:	d803      	bhi.n	8011b18 <rcl_clock_init+0x1c>
 8011b10:	e8df f005 	tbb	[pc, r5]
 8011b14:	06532e1d 	.word	0x06532e1d
 8011b18:	f04f 0c0b 	mov.w	ip, #11
 8011b1c:	4660      	mov	r0, ip
 8011b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b20:	2e00      	cmp	r6, #0
 8011b22:	d0f9      	beq.n	8011b18 <rcl_clock_init+0x1c>
 8011b24:	2c00      	cmp	r4, #0
 8011b26:	d0f7      	beq.n	8011b18 <rcl_clock_init+0x1c>
 8011b28:	2300      	movs	r3, #0
 8011b2a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011b2e:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8011be4 <rcl_clock_init+0xe8>
 8011b32:	6133      	str	r3, [r6, #16]
 8011b34:	f106 0514 	add.w	r5, r6, #20
 8011b38:	469c      	mov	ip, r3
 8011b3a:	2703      	movs	r7, #3
 8011b3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011b3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011b40:	6823      	ldr	r3, [r4, #0]
 8011b42:	602b      	str	r3, [r5, #0]
 8011b44:	7037      	strb	r7, [r6, #0]
 8011b46:	f8c6 e00c 	str.w	lr, [r6, #12]
 8011b4a:	4660      	mov	r0, ip
 8011b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b4e:	2e00      	cmp	r6, #0
 8011b50:	d0e2      	beq.n	8011b18 <rcl_clock_init+0x1c>
 8011b52:	2300      	movs	r3, #0
 8011b54:	7033      	strb	r3, [r6, #0]
 8011b56:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011b5a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8011b5e:	469c      	mov	ip, r3
 8011b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011b62:	f106 0514 	add.w	r5, r6, #20
 8011b66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011b68:	6823      	ldr	r3, [r4, #0]
 8011b6a:	602b      	str	r3, [r5, #0]
 8011b6c:	4660      	mov	r0, ip
 8011b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b70:	2e00      	cmp	r6, #0
 8011b72:	d0d1      	beq.n	8011b18 <rcl_clock_init+0x1c>
 8011b74:	2c00      	cmp	r4, #0
 8011b76:	d0cf      	beq.n	8011b18 <rcl_clock_init+0x1c>
 8011b78:	2700      	movs	r7, #0
 8011b7a:	7037      	strb	r7, [r6, #0]
 8011b7c:	46a4      	mov	ip, r4
 8011b7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011b82:	f106 0514 	add.w	r5, r6, #20
 8011b86:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8011b8a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8011b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011b90:	f8dc 3000 	ldr.w	r3, [ip]
 8011b94:	602b      	str	r3, [r5, #0]
 8011b96:	6921      	ldr	r1, [r4, #16]
 8011b98:	6823      	ldr	r3, [r4, #0]
 8011b9a:	2010      	movs	r0, #16
 8011b9c:	4798      	blx	r3
 8011b9e:	6130      	str	r0, [r6, #16]
 8011ba0:	b1d0      	cbz	r0, 8011bd8 <rcl_clock_init+0xdc>
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	e9c0 2300 	strd	r2, r3, [r0]
 8011baa:	2301      	movs	r3, #1
 8011bac:	7207      	strb	r7, [r0, #8]
 8011bae:	4a0c      	ldr	r2, [pc, #48]	; (8011be0 <rcl_clock_init+0xe4>)
 8011bb0:	7033      	strb	r3, [r6, #0]
 8011bb2:	46bc      	mov	ip, r7
 8011bb4:	60f2      	str	r2, [r6, #12]
 8011bb6:	4660      	mov	r0, ip
 8011bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bba:	2e00      	cmp	r6, #0
 8011bbc:	d0ac      	beq.n	8011b18 <rcl_clock_init+0x1c>
 8011bbe:	2c00      	cmp	r4, #0
 8011bc0:	d0aa      	beq.n	8011b18 <rcl_clock_init+0x1c>
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011bc8:	f8df e01c 	ldr.w	lr, [pc, #28]	; 8011be8 <rcl_clock_init+0xec>
 8011bcc:	6133      	str	r3, [r6, #16]
 8011bce:	f106 0514 	add.w	r5, r6, #20
 8011bd2:	469c      	mov	ip, r3
 8011bd4:	2702      	movs	r7, #2
 8011bd6:	e7b1      	b.n	8011b3c <rcl_clock_init+0x40>
 8011bd8:	f04f 0c0a 	mov.w	ip, #10
 8011bdc:	e79e      	b.n	8011b1c <rcl_clock_init+0x20>
 8011bde:	bf00      	nop
 8011be0:	08011add 	.word	0x08011add
 8011be4:	08011ad5 	.word	0x08011ad5
 8011be8:	08011acd 	.word	0x08011acd

08011bec <rcl_clock_get_now>:
 8011bec:	b140      	cbz	r0, 8011c00 <rcl_clock_get_now+0x14>
 8011bee:	b139      	cbz	r1, 8011c00 <rcl_clock_get_now+0x14>
 8011bf0:	7803      	ldrb	r3, [r0, #0]
 8011bf2:	b11b      	cbz	r3, 8011bfc <rcl_clock_get_now+0x10>
 8011bf4:	68c3      	ldr	r3, [r0, #12]
 8011bf6:	b10b      	cbz	r3, 8011bfc <rcl_clock_get_now+0x10>
 8011bf8:	6900      	ldr	r0, [r0, #16]
 8011bfa:	4718      	bx	r3
 8011bfc:	2001      	movs	r0, #1
 8011bfe:	4770      	bx	lr
 8011c00:	200b      	movs	r0, #11
 8011c02:	4770      	bx	lr

08011c04 <rcl_timer_call>:
 8011c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c08:	b087      	sub	sp, #28
 8011c0a:	2800      	cmp	r0, #0
 8011c0c:	d06d      	beq.n	8011cea <rcl_timer_call+0xe6>
 8011c0e:	6803      	ldr	r3, [r0, #0]
 8011c10:	4604      	mov	r4, r0
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d063      	beq.n	8011cde <rcl_timer_call+0xda>
 8011c16:	f3bf 8f5b 	dmb	ish
 8011c1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011c1e:	f3bf 8f5b 	dmb	ish
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d150      	bne.n	8011cc8 <rcl_timer_call+0xc4>
 8011c26:	6803      	ldr	r3, [r0, #0]
 8011c28:	a904      	add	r1, sp, #16
 8011c2a:	6818      	ldr	r0, [r3, #0]
 8011c2c:	f7ff ffde 	bl	8011bec <rcl_clock_get_now>
 8011c30:	4605      	mov	r5, r0
 8011c32:	2800      	cmp	r0, #0
 8011c34:	d14a      	bne.n	8011ccc <rcl_timer_call+0xc8>
 8011c36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	db4a      	blt.n	8011cd4 <rcl_timer_call+0xd0>
 8011c3e:	6820      	ldr	r0, [r4, #0]
 8011c40:	f04f 0a05 	mov.w	sl, #5
 8011c44:	f8cd a000 	str.w	sl, [sp]
 8011c48:	3020      	adds	r0, #32
 8011c4a:	f001 fd09 	bl	8013660 <__atomic_exchange_8>
 8011c4e:	6823      	ldr	r3, [r4, #0]
 8011c50:	f3bf 8f5b 	dmb	ish
 8011c54:	4680      	mov	r8, r0
 8011c56:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8011c5a:	f3bf 8f5b 	dmb	ish
 8011c5e:	6820      	ldr	r0, [r4, #0]
 8011c60:	4689      	mov	r9, r1
 8011c62:	3028      	adds	r0, #40	; 0x28
 8011c64:	4651      	mov	r1, sl
 8011c66:	f001 fc8f 	bl	8013588 <__atomic_load_8>
 8011c6a:	4606      	mov	r6, r0
 8011c6c:	6820      	ldr	r0, [r4, #0]
 8011c6e:	460f      	mov	r7, r1
 8011c70:	3018      	adds	r0, #24
 8011c72:	4651      	mov	r1, sl
 8011c74:	f001 fc88 	bl	8013588 <__atomic_load_8>
 8011c78:	1836      	adds	r6, r6, r0
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	4682      	mov	sl, r0
 8011c7e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8011c82:	eb47 0701 	adc.w	r7, r7, r1
 8011c86:	4286      	cmp	r6, r0
 8011c88:	460b      	mov	r3, r1
 8011c8a:	eb77 010c 	sbcs.w	r1, r7, ip
 8011c8e:	da04      	bge.n	8011c9a <rcl_timer_call+0x96>
 8011c90:	ea53 0102 	orrs.w	r1, r3, r2
 8011c94:	d12e      	bne.n	8011cf4 <rcl_timer_call+0xf0>
 8011c96:	4606      	mov	r6, r0
 8011c98:	4667      	mov	r7, ip
 8011c9a:	6820      	ldr	r0, [r4, #0]
 8011c9c:	2105      	movs	r1, #5
 8011c9e:	4632      	mov	r2, r6
 8011ca0:	463b      	mov	r3, r7
 8011ca2:	3028      	adds	r0, #40	; 0x28
 8011ca4:	9100      	str	r1, [sp, #0]
 8011ca6:	f001 fca5 	bl	80135f4 <__atomic_store_8>
 8011caa:	f1bb 0f00 	cmp.w	fp, #0
 8011cae:	d00d      	beq.n	8011ccc <rcl_timer_call+0xc8>
 8011cb0:	9a04      	ldr	r2, [sp, #16]
 8011cb2:	9b05      	ldr	r3, [sp, #20]
 8011cb4:	ebb2 0208 	subs.w	r2, r2, r8
 8011cb8:	4620      	mov	r0, r4
 8011cba:	eb63 0309 	sbc.w	r3, r3, r9
 8011cbe:	47d8      	blx	fp
 8011cc0:	4628      	mov	r0, r5
 8011cc2:	b007      	add	sp, #28
 8011cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cc8:	f240 3521 	movw	r5, #801	; 0x321
 8011ccc:	4628      	mov	r0, r5
 8011cce:	b007      	add	sp, #28
 8011cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cd4:	2501      	movs	r5, #1
 8011cd6:	4628      	mov	r0, r5
 8011cd8:	b007      	add	sp, #28
 8011cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cde:	f44f 7548 	mov.w	r5, #800	; 0x320
 8011ce2:	4628      	mov	r0, r5
 8011ce4:	b007      	add	sp, #28
 8011ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cea:	250b      	movs	r5, #11
 8011cec:	4628      	mov	r0, r5
 8011cee:	b007      	add	sp, #28
 8011cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cf4:	1b80      	subs	r0, r0, r6
 8011cf6:	eb6c 0107 	sbc.w	r1, ip, r7
 8011cfa:	3801      	subs	r0, #1
 8011cfc:	f161 0100 	sbc.w	r1, r1, #0
 8011d00:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011d04:	f7ef f828 	bl	8000d58 <__aeabi_ldivmod>
 8011d08:	9b02      	ldr	r3, [sp, #8]
 8011d0a:	3001      	adds	r0, #1
 8011d0c:	f141 0100 	adc.w	r1, r1, #0
 8011d10:	fb00 f303 	mul.w	r3, r0, r3
 8011d14:	fb01 330a 	mla	r3, r1, sl, r3
 8011d18:	fba0 0a0a 	umull	r0, sl, r0, sl
 8011d1c:	1986      	adds	r6, r0, r6
 8011d1e:	4453      	add	r3, sl
 8011d20:	eb43 0707 	adc.w	r7, r3, r7
 8011d24:	e7b9      	b.n	8011c9a <rcl_timer_call+0x96>
 8011d26:	bf00      	nop

08011d28 <rcl_timer_is_ready>:
 8011d28:	b570      	push	{r4, r5, r6, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	b378      	cbz	r0, 8011d8e <rcl_timer_is_ready+0x66>
 8011d2e:	6803      	ldr	r3, [r0, #0]
 8011d30:	4604      	mov	r4, r0
 8011d32:	b383      	cbz	r3, 8011d96 <rcl_timer_is_ready+0x6e>
 8011d34:	460d      	mov	r5, r1
 8011d36:	b351      	cbz	r1, 8011d8e <rcl_timer_is_ready+0x66>
 8011d38:	f3bf 8f5b 	dmb	ish
 8011d3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011d40:	f3bf 8f5b 	dmb	ish
 8011d44:	b953      	cbnz	r3, 8011d5c <rcl_timer_is_ready+0x34>
 8011d46:	6803      	ldr	r3, [r0, #0]
 8011d48:	4669      	mov	r1, sp
 8011d4a:	6818      	ldr	r0, [r3, #0]
 8011d4c:	f7ff ff4e 	bl	8011bec <rcl_clock_get_now>
 8011d50:	4606      	mov	r6, r0
 8011d52:	b140      	cbz	r0, 8011d66 <rcl_timer_is_ready+0x3e>
 8011d54:	f240 3321 	movw	r3, #801	; 0x321
 8011d58:	4298      	cmp	r0, r3
 8011d5a:	d101      	bne.n	8011d60 <rcl_timer_is_ready+0x38>
 8011d5c:	2600      	movs	r6, #0
 8011d5e:	702e      	strb	r6, [r5, #0]
 8011d60:	4630      	mov	r0, r6
 8011d62:	b002      	add	sp, #8
 8011d64:	bd70      	pop	{r4, r5, r6, pc}
 8011d66:	6820      	ldr	r0, [r4, #0]
 8011d68:	2105      	movs	r1, #5
 8011d6a:	3028      	adds	r0, #40	; 0x28
 8011d6c:	f001 fc0c 	bl	8013588 <__atomic_load_8>
 8011d70:	9b00      	ldr	r3, [sp, #0]
 8011d72:	1ac0      	subs	r0, r0, r3
 8011d74:	9b01      	ldr	r3, [sp, #4]
 8011d76:	eb61 0103 	sbc.w	r1, r1, r3
 8011d7a:	2801      	cmp	r0, #1
 8011d7c:	f171 0300 	sbcs.w	r3, r1, #0
 8011d80:	bfb4      	ite	lt
 8011d82:	2301      	movlt	r3, #1
 8011d84:	2300      	movge	r3, #0
 8011d86:	4630      	mov	r0, r6
 8011d88:	702b      	strb	r3, [r5, #0]
 8011d8a:	b002      	add	sp, #8
 8011d8c:	bd70      	pop	{r4, r5, r6, pc}
 8011d8e:	260b      	movs	r6, #11
 8011d90:	4630      	mov	r0, r6
 8011d92:	b002      	add	sp, #8
 8011d94:	bd70      	pop	{r4, r5, r6, pc}
 8011d96:	f44f 7648 	mov.w	r6, #800	; 0x320
 8011d9a:	e7e1      	b.n	8011d60 <rcl_timer_is_ready+0x38>

08011d9c <rcl_timer_get_time_until_next_call>:
 8011d9c:	b570      	push	{r4, r5, r6, lr}
 8011d9e:	b082      	sub	sp, #8
 8011da0:	b330      	cbz	r0, 8011df0 <rcl_timer_get_time_until_next_call+0x54>
 8011da2:	6803      	ldr	r3, [r0, #0]
 8011da4:	4604      	mov	r4, r0
 8011da6:	b33b      	cbz	r3, 8011df8 <rcl_timer_get_time_until_next_call+0x5c>
 8011da8:	460d      	mov	r5, r1
 8011daa:	b309      	cbz	r1, 8011df0 <rcl_timer_get_time_until_next_call+0x54>
 8011dac:	f3bf 8f5b 	dmb	ish
 8011db0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011db4:	f3bf 8f5b 	dmb	ish
 8011db8:	b9ab      	cbnz	r3, 8011de6 <rcl_timer_get_time_until_next_call+0x4a>
 8011dba:	6803      	ldr	r3, [r0, #0]
 8011dbc:	4669      	mov	r1, sp
 8011dbe:	6818      	ldr	r0, [r3, #0]
 8011dc0:	f7ff ff14 	bl	8011bec <rcl_clock_get_now>
 8011dc4:	4606      	mov	r6, r0
 8011dc6:	b958      	cbnz	r0, 8011de0 <rcl_timer_get_time_until_next_call+0x44>
 8011dc8:	6820      	ldr	r0, [r4, #0]
 8011dca:	2105      	movs	r1, #5
 8011dcc:	3028      	adds	r0, #40	; 0x28
 8011dce:	f001 fbdb 	bl	8013588 <__atomic_load_8>
 8011dd2:	9b00      	ldr	r3, [sp, #0]
 8011dd4:	1ac0      	subs	r0, r0, r3
 8011dd6:	9b01      	ldr	r3, [sp, #4]
 8011dd8:	6028      	str	r0, [r5, #0]
 8011dda:	eb61 0103 	sbc.w	r1, r1, r3
 8011dde:	6069      	str	r1, [r5, #4]
 8011de0:	4630      	mov	r0, r6
 8011de2:	b002      	add	sp, #8
 8011de4:	bd70      	pop	{r4, r5, r6, pc}
 8011de6:	f240 3621 	movw	r6, #801	; 0x321
 8011dea:	4630      	mov	r0, r6
 8011dec:	b002      	add	sp, #8
 8011dee:	bd70      	pop	{r4, r5, r6, pc}
 8011df0:	260b      	movs	r6, #11
 8011df2:	4630      	mov	r0, r6
 8011df4:	b002      	add	sp, #8
 8011df6:	bd70      	pop	{r4, r5, r6, pc}
 8011df8:	f44f 7648 	mov.w	r6, #800	; 0x320
 8011dfc:	e7f0      	b.n	8011de0 <rcl_timer_get_time_until_next_call+0x44>
 8011dfe:	bf00      	nop

08011e00 <rcl_timer_get_guard_condition>:
 8011e00:	b130      	cbz	r0, 8011e10 <rcl_timer_get_guard_condition+0x10>
 8011e02:	6800      	ldr	r0, [r0, #0]
 8011e04:	b120      	cbz	r0, 8011e10 <rcl_timer_get_guard_condition+0x10>
 8011e06:	68c3      	ldr	r3, [r0, #12]
 8011e08:	b10b      	cbz	r3, 8011e0e <rcl_timer_get_guard_condition+0xe>
 8011e0a:	3008      	adds	r0, #8
 8011e0c:	4770      	bx	lr
 8011e0e:	4618      	mov	r0, r3
 8011e10:	4770      	bx	lr
 8011e12:	bf00      	nop

08011e14 <rcl_validate_enclave_name_with_size>:
 8011e14:	b378      	cbz	r0, 8011e76 <rcl_validate_enclave_name_with_size+0x62>
 8011e16:	b570      	push	{r4, r5, r6, lr}
 8011e18:	4615      	mov	r5, r2
 8011e1a:	b0c2      	sub	sp, #264	; 0x108
 8011e1c:	b302      	cbz	r2, 8011e60 <rcl_validate_enclave_name_with_size+0x4c>
 8011e1e:	461e      	mov	r6, r3
 8011e20:	466a      	mov	r2, sp
 8011e22:	ab01      	add	r3, sp, #4
 8011e24:	460c      	mov	r4, r1
 8011e26:	f002 f845 	bl	8013eb4 <rmw_validate_namespace_with_size>
 8011e2a:	4684      	mov	ip, r0
 8011e2c:	b9e8      	cbnz	r0, 8011e6a <rcl_validate_enclave_name_with_size+0x56>
 8011e2e:	9b00      	ldr	r3, [sp, #0]
 8011e30:	b923      	cbnz	r3, 8011e3c <rcl_validate_enclave_name_with_size+0x28>
 8011e32:	2300      	movs	r3, #0
 8011e34:	602b      	str	r3, [r5, #0]
 8011e36:	4660      	mov	r0, ip
 8011e38:	b042      	add	sp, #264	; 0x108
 8011e3a:	bd70      	pop	{r4, r5, r6, pc}
 8011e3c:	2b07      	cmp	r3, #7
 8011e3e:	d007      	beq.n	8011e50 <rcl_validate_enclave_name_with_size+0x3c>
 8011e40:	1e5a      	subs	r2, r3, #1
 8011e42:	2a05      	cmp	r2, #5
 8011e44:	d833      	bhi.n	8011eae <rcl_validate_enclave_name_with_size+0x9a>
 8011e46:	e8df f002 	tbb	[pc, r2]
 8011e4a:	2c2f      	.short	0x2c2f
 8011e4c:	1a232629 	.word	0x1a232629
 8011e50:	2cff      	cmp	r4, #255	; 0xff
 8011e52:	d9ee      	bls.n	8011e32 <rcl_validate_enclave_name_with_size+0x1e>
 8011e54:	602b      	str	r3, [r5, #0]
 8011e56:	2e00      	cmp	r6, #0
 8011e58:	d0ed      	beq.n	8011e36 <rcl_validate_enclave_name_with_size+0x22>
 8011e5a:	23fe      	movs	r3, #254	; 0xfe
 8011e5c:	6033      	str	r3, [r6, #0]
 8011e5e:	e7ea      	b.n	8011e36 <rcl_validate_enclave_name_with_size+0x22>
 8011e60:	f04f 0c0b 	mov.w	ip, #11
 8011e64:	4660      	mov	r0, ip
 8011e66:	b042      	add	sp, #264	; 0x108
 8011e68:	bd70      	pop	{r4, r5, r6, pc}
 8011e6a:	f7fe fe93 	bl	8010b94 <rcl_convert_rmw_ret_to_rcl_ret>
 8011e6e:	4684      	mov	ip, r0
 8011e70:	4660      	mov	r0, ip
 8011e72:	b042      	add	sp, #264	; 0x108
 8011e74:	bd70      	pop	{r4, r5, r6, pc}
 8011e76:	f04f 0c0b 	mov.w	ip, #11
 8011e7a:	4660      	mov	r0, ip
 8011e7c:	4770      	bx	lr
 8011e7e:	2306      	movs	r3, #6
 8011e80:	602b      	str	r3, [r5, #0]
 8011e82:	2e00      	cmp	r6, #0
 8011e84:	d0d7      	beq.n	8011e36 <rcl_validate_enclave_name_with_size+0x22>
 8011e86:	9b01      	ldr	r3, [sp, #4]
 8011e88:	6033      	str	r3, [r6, #0]
 8011e8a:	4660      	mov	r0, ip
 8011e8c:	b042      	add	sp, #264	; 0x108
 8011e8e:	bd70      	pop	{r4, r5, r6, pc}
 8011e90:	2305      	movs	r3, #5
 8011e92:	602b      	str	r3, [r5, #0]
 8011e94:	e7f5      	b.n	8011e82 <rcl_validate_enclave_name_with_size+0x6e>
 8011e96:	2304      	movs	r3, #4
 8011e98:	602b      	str	r3, [r5, #0]
 8011e9a:	e7f2      	b.n	8011e82 <rcl_validate_enclave_name_with_size+0x6e>
 8011e9c:	2303      	movs	r3, #3
 8011e9e:	602b      	str	r3, [r5, #0]
 8011ea0:	e7ef      	b.n	8011e82 <rcl_validate_enclave_name_with_size+0x6e>
 8011ea2:	2302      	movs	r3, #2
 8011ea4:	602b      	str	r3, [r5, #0]
 8011ea6:	e7ec      	b.n	8011e82 <rcl_validate_enclave_name_with_size+0x6e>
 8011ea8:	2301      	movs	r3, #1
 8011eaa:	602b      	str	r3, [r5, #0]
 8011eac:	e7e9      	b.n	8011e82 <rcl_validate_enclave_name_with_size+0x6e>
 8011eae:	4a04      	ldr	r2, [pc, #16]	; (8011ec0 <rcl_validate_enclave_name_with_size+0xac>)
 8011eb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011eb4:	a802      	add	r0, sp, #8
 8011eb6:	f001 fd21 	bl	80138fc <rcutils_snprintf>
 8011eba:	f04f 0c01 	mov.w	ip, #1
 8011ebe:	e7ba      	b.n	8011e36 <rcl_validate_enclave_name_with_size+0x22>
 8011ec0:	08018b70 	.word	0x08018b70

08011ec4 <rcl_validate_enclave_name>:
 8011ec4:	b168      	cbz	r0, 8011ee2 <rcl_validate_enclave_name+0x1e>
 8011ec6:	b570      	push	{r4, r5, r6, lr}
 8011ec8:	460d      	mov	r5, r1
 8011eca:	4616      	mov	r6, r2
 8011ecc:	4604      	mov	r4, r0
 8011ece:	f7ee f991 	bl	80001f4 <strlen>
 8011ed2:	4633      	mov	r3, r6
 8011ed4:	4601      	mov	r1, r0
 8011ed6:	462a      	mov	r2, r5
 8011ed8:	4620      	mov	r0, r4
 8011eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ede:	f7ff bf99 	b.w	8011e14 <rcl_validate_enclave_name_with_size>
 8011ee2:	200b      	movs	r0, #11
 8011ee4:	4770      	bx	lr
 8011ee6:	bf00      	nop

08011ee8 <rcl_get_zero_initialized_wait_set>:
 8011ee8:	b510      	push	{r4, lr}
 8011eea:	4c08      	ldr	r4, [pc, #32]	; (8011f0c <rcl_get_zero_initialized_wait_set+0x24>)
 8011eec:	4686      	mov	lr, r0
 8011eee:	4684      	mov	ip, r0
 8011ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011ef2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ef6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011ef8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011efe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f02:	6823      	ldr	r3, [r4, #0]
 8011f04:	f8cc 3000 	str.w	r3, [ip]
 8011f08:	4670      	mov	r0, lr
 8011f0a:	bd10      	pop	{r4, pc}
 8011f0c:	08018bd0 	.word	0x08018bd0

08011f10 <rcl_wait_set_is_valid>:
 8011f10:	b118      	cbz	r0, 8011f1a <rcl_wait_set_is_valid+0xa>
 8011f12:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8011f14:	3800      	subs	r0, #0
 8011f16:	bf18      	it	ne
 8011f18:	2001      	movne	r0, #1
 8011f1a:	4770      	bx	lr

08011f1c <rcl_wait_set_fini>:
 8011f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f20:	b082      	sub	sp, #8
 8011f22:	2800      	cmp	r0, #0
 8011f24:	f000 8095 	beq.w	8012052 <rcl_wait_set_fini+0x136>
 8011f28:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8011f2a:	4604      	mov	r4, r0
 8011f2c:	2e00      	cmp	r6, #0
 8011f2e:	f000 808c 	beq.w	801204a <rcl_wait_set_fini+0x12e>
 8011f32:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8011f34:	f003 f99a 	bl	801526c <rmw_destroy_wait_set>
 8011f38:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011f3a:	1e06      	subs	r6, r0, #0
 8011f3c:	bf18      	it	ne
 8011f3e:	f44f 7661 	movne.w	r6, #900	; 0x384
 8011f42:	2d00      	cmp	r5, #0
 8011f44:	f000 8081 	beq.w	801204a <rcl_wait_set_fini+0x12e>
 8011f48:	6820      	ldr	r0, [r4, #0]
 8011f4a:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8011f4e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011f50:	2700      	movs	r7, #0
 8011f52:	6067      	str	r7, [r4, #4]
 8011f54:	602f      	str	r7, [r5, #0]
 8011f56:	b120      	cbz	r0, 8011f62 <rcl_wait_set_fini+0x46>
 8011f58:	9101      	str	r1, [sp, #4]
 8011f5a:	47c0      	blx	r8
 8011f5c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011f5e:	9901      	ldr	r1, [sp, #4]
 8011f60:	6027      	str	r7, [r4, #0]
 8011f62:	68a8      	ldr	r0, [r5, #8]
 8011f64:	b120      	cbz	r0, 8011f70 <rcl_wait_set_fini+0x54>
 8011f66:	47c0      	blx	r8
 8011f68:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8011f70:	68a0      	ldr	r0, [r4, #8]
 8011f72:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011f74:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011f76:	f04f 0800 	mov.w	r8, #0
 8011f7a:	f8c4 800c 	str.w	r8, [r4, #12]
 8011f7e:	f8c5 800c 	str.w	r8, [r5, #12]
 8011f82:	b128      	cbz	r0, 8011f90 <rcl_wait_set_fini+0x74>
 8011f84:	47b8      	blx	r7
 8011f86:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011f88:	f8c4 8008 	str.w	r8, [r4, #8]
 8011f8c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011f8e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011f90:	6968      	ldr	r0, [r5, #20]
 8011f92:	f04f 0800 	mov.w	r8, #0
 8011f96:	f8c5 8010 	str.w	r8, [r5, #16]
 8011f9a:	b128      	cbz	r0, 8011fa8 <rcl_wait_set_fini+0x8c>
 8011f9c:	47b8      	blx	r7
 8011f9e:	f8c5 8014 	str.w	r8, [r5, #20]
 8011fa2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011fa4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011fa6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011fa8:	6920      	ldr	r0, [r4, #16]
 8011faa:	f04f 0800 	mov.w	r8, #0
 8011fae:	f8c4 8014 	str.w	r8, [r4, #20]
 8011fb2:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8011fb6:	b128      	cbz	r0, 8011fc4 <rcl_wait_set_fini+0xa8>
 8011fb8:	47b8      	blx	r7
 8011fba:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011fbc:	f8c4 8010 	str.w	r8, [r4, #16]
 8011fc0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011fc2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011fc4:	69a0      	ldr	r0, [r4, #24]
 8011fc6:	f04f 0800 	mov.w	r8, #0
 8011fca:	f8c4 801c 	str.w	r8, [r4, #28]
 8011fce:	f8c5 8018 	str.w	r8, [r5, #24]
 8011fd2:	b128      	cbz	r0, 8011fe0 <rcl_wait_set_fini+0xc4>
 8011fd4:	9101      	str	r1, [sp, #4]
 8011fd6:	47b8      	blx	r7
 8011fd8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011fda:	9901      	ldr	r1, [sp, #4]
 8011fdc:	f8c4 8018 	str.w	r8, [r4, #24]
 8011fe0:	6a28      	ldr	r0, [r5, #32]
 8011fe2:	b120      	cbz	r0, 8011fee <rcl_wait_set_fini+0xd2>
 8011fe4:	47b8      	blx	r7
 8011fe6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011fe8:	2300      	movs	r3, #0
 8011fea:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8011fee:	6a20      	ldr	r0, [r4, #32]
 8011ff0:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8011ff4:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011ff6:	2700      	movs	r7, #0
 8011ff8:	6267      	str	r7, [r4, #36]	; 0x24
 8011ffa:	626f      	str	r7, [r5, #36]	; 0x24
 8011ffc:	b120      	cbz	r0, 8012008 <rcl_wait_set_fini+0xec>
 8011ffe:	9101      	str	r1, [sp, #4]
 8012000:	47c0      	blx	r8
 8012002:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012004:	9901      	ldr	r1, [sp, #4]
 8012006:	6227      	str	r7, [r4, #32]
 8012008:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801200a:	b120      	cbz	r0, 8012016 <rcl_wait_set_fini+0xfa>
 801200c:	47c0      	blx	r8
 801200e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012010:	2300      	movs	r3, #0
 8012012:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8012016:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012018:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801201c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801201e:	2700      	movs	r7, #0
 8012020:	62e7      	str	r7, [r4, #44]	; 0x2c
 8012022:	632f      	str	r7, [r5, #48]	; 0x30
 8012024:	b120      	cbz	r0, 8012030 <rcl_wait_set_fini+0x114>
 8012026:	9101      	str	r1, [sp, #4]
 8012028:	47c0      	blx	r8
 801202a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801202c:	9901      	ldr	r1, [sp, #4]
 801202e:	62a7      	str	r7, [r4, #40]	; 0x28
 8012030:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8012032:	b120      	cbz	r0, 801203e <rcl_wait_set_fini+0x122>
 8012034:	47c0      	blx	r8
 8012036:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012038:	2300      	movs	r3, #0
 801203a:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801203e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8012040:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8012042:	4628      	mov	r0, r5
 8012044:	4798      	blx	r3
 8012046:	2300      	movs	r3, #0
 8012048:	6323      	str	r3, [r4, #48]	; 0x30
 801204a:	4630      	mov	r0, r6
 801204c:	b002      	add	sp, #8
 801204e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012052:	260b      	movs	r6, #11
 8012054:	4630      	mov	r0, r6
 8012056:	b002      	add	sp, #8
 8012058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801205c <rcl_wait_set_add_subscription>:
 801205c:	b318      	cbz	r0, 80120a6 <rcl_wait_set_add_subscription+0x4a>
 801205e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012060:	b570      	push	{r4, r5, r6, lr}
 8012062:	4604      	mov	r4, r0
 8012064:	b30b      	cbz	r3, 80120aa <rcl_wait_set_add_subscription+0x4e>
 8012066:	b319      	cbz	r1, 80120b0 <rcl_wait_set_add_subscription+0x54>
 8012068:	681d      	ldr	r5, [r3, #0]
 801206a:	6840      	ldr	r0, [r0, #4]
 801206c:	4285      	cmp	r5, r0
 801206e:	d217      	bcs.n	80120a0 <rcl_wait_set_add_subscription+0x44>
 8012070:	6820      	ldr	r0, [r4, #0]
 8012072:	1c6e      	adds	r6, r5, #1
 8012074:	601e      	str	r6, [r3, #0]
 8012076:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801207a:	b102      	cbz	r2, 801207e <rcl_wait_set_add_subscription+0x22>
 801207c:	6015      	str	r5, [r2, #0]
 801207e:	4608      	mov	r0, r1
 8012080:	f7ff fd14 	bl	8011aac <rcl_subscription_get_rmw_handle>
 8012084:	b150      	cbz	r0, 801209c <rcl_wait_set_add_subscription+0x40>
 8012086:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012088:	6842      	ldr	r2, [r0, #4]
 801208a:	689b      	ldr	r3, [r3, #8]
 801208c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012090:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012092:	6853      	ldr	r3, [r2, #4]
 8012094:	3301      	adds	r3, #1
 8012096:	2000      	movs	r0, #0
 8012098:	6053      	str	r3, [r2, #4]
 801209a:	bd70      	pop	{r4, r5, r6, pc}
 801209c:	2001      	movs	r0, #1
 801209e:	bd70      	pop	{r4, r5, r6, pc}
 80120a0:	f240 3086 	movw	r0, #902	; 0x386
 80120a4:	bd70      	pop	{r4, r5, r6, pc}
 80120a6:	200b      	movs	r0, #11
 80120a8:	4770      	bx	lr
 80120aa:	f44f 7061 	mov.w	r0, #900	; 0x384
 80120ae:	bd70      	pop	{r4, r5, r6, pc}
 80120b0:	200b      	movs	r0, #11
 80120b2:	bd70      	pop	{r4, r5, r6, pc}

080120b4 <rcl_wait_set_clear>:
 80120b4:	2800      	cmp	r0, #0
 80120b6:	d073      	beq.n	80121a0 <rcl_wait_set_clear+0xec>
 80120b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80120ba:	b510      	push	{r4, lr}
 80120bc:	4604      	mov	r4, r0
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d070      	beq.n	80121a4 <rcl_wait_set_clear+0xf0>
 80120c2:	6800      	ldr	r0, [r0, #0]
 80120c4:	b138      	cbz	r0, 80120d6 <rcl_wait_set_clear+0x22>
 80120c6:	6862      	ldr	r2, [r4, #4]
 80120c8:	2100      	movs	r1, #0
 80120ca:	0092      	lsls	r2, r2, #2
 80120cc:	f005 f99c 	bl	8017408 <memset>
 80120d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80120d2:	2200      	movs	r2, #0
 80120d4:	601a      	str	r2, [r3, #0]
 80120d6:	68a0      	ldr	r0, [r4, #8]
 80120d8:	b138      	cbz	r0, 80120ea <rcl_wait_set_clear+0x36>
 80120da:	68e2      	ldr	r2, [r4, #12]
 80120dc:	2100      	movs	r1, #0
 80120de:	0092      	lsls	r2, r2, #2
 80120e0:	f005 f992 	bl	8017408 <memset>
 80120e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80120e6:	2200      	movs	r2, #0
 80120e8:	60da      	str	r2, [r3, #12]
 80120ea:	69a0      	ldr	r0, [r4, #24]
 80120ec:	b138      	cbz	r0, 80120fe <rcl_wait_set_clear+0x4a>
 80120ee:	69e2      	ldr	r2, [r4, #28]
 80120f0:	2100      	movs	r1, #0
 80120f2:	0092      	lsls	r2, r2, #2
 80120f4:	f005 f988 	bl	8017408 <memset>
 80120f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80120fa:	2200      	movs	r2, #0
 80120fc:	619a      	str	r2, [r3, #24]
 80120fe:	6a20      	ldr	r0, [r4, #32]
 8012100:	b138      	cbz	r0, 8012112 <rcl_wait_set_clear+0x5e>
 8012102:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8012104:	2100      	movs	r1, #0
 8012106:	0092      	lsls	r2, r2, #2
 8012108:	f005 f97e 	bl	8017408 <memset>
 801210c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801210e:	2200      	movs	r2, #0
 8012110:	625a      	str	r2, [r3, #36]	; 0x24
 8012112:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012114:	b138      	cbz	r0, 8012126 <rcl_wait_set_clear+0x72>
 8012116:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012118:	2100      	movs	r1, #0
 801211a:	0092      	lsls	r2, r2, #2
 801211c:	f005 f974 	bl	8017408 <memset>
 8012120:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012122:	2200      	movs	r2, #0
 8012124:	631a      	str	r2, [r3, #48]	; 0x30
 8012126:	6920      	ldr	r0, [r4, #16]
 8012128:	b138      	cbz	r0, 801213a <rcl_wait_set_clear+0x86>
 801212a:	6962      	ldr	r2, [r4, #20]
 801212c:	2100      	movs	r1, #0
 801212e:	0092      	lsls	r2, r2, #2
 8012130:	f005 f96a 	bl	8017408 <memset>
 8012134:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012136:	2200      	movs	r2, #0
 8012138:	641a      	str	r2, [r3, #64]	; 0x40
 801213a:	6898      	ldr	r0, [r3, #8]
 801213c:	b138      	cbz	r0, 801214e <rcl_wait_set_clear+0x9a>
 801213e:	685a      	ldr	r2, [r3, #4]
 8012140:	2100      	movs	r1, #0
 8012142:	0092      	lsls	r2, r2, #2
 8012144:	f005 f960 	bl	8017408 <memset>
 8012148:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801214a:	2200      	movs	r2, #0
 801214c:	605a      	str	r2, [r3, #4]
 801214e:	6958      	ldr	r0, [r3, #20]
 8012150:	b138      	cbz	r0, 8012162 <rcl_wait_set_clear+0xae>
 8012152:	691a      	ldr	r2, [r3, #16]
 8012154:	2100      	movs	r1, #0
 8012156:	0092      	lsls	r2, r2, #2
 8012158:	f005 f956 	bl	8017408 <memset>
 801215c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801215e:	2200      	movs	r2, #0
 8012160:	611a      	str	r2, [r3, #16]
 8012162:	6a18      	ldr	r0, [r3, #32]
 8012164:	b138      	cbz	r0, 8012176 <rcl_wait_set_clear+0xc2>
 8012166:	69da      	ldr	r2, [r3, #28]
 8012168:	2100      	movs	r1, #0
 801216a:	0092      	lsls	r2, r2, #2
 801216c:	f005 f94c 	bl	8017408 <memset>
 8012170:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012172:	2200      	movs	r2, #0
 8012174:	61da      	str	r2, [r3, #28]
 8012176:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012178:	b138      	cbz	r0, 801218a <rcl_wait_set_clear+0xd6>
 801217a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801217c:	2100      	movs	r1, #0
 801217e:	0092      	lsls	r2, r2, #2
 8012180:	f005 f942 	bl	8017408 <memset>
 8012184:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012186:	2200      	movs	r2, #0
 8012188:	629a      	str	r2, [r3, #40]	; 0x28
 801218a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801218c:	b138      	cbz	r0, 801219e <rcl_wait_set_clear+0xea>
 801218e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012190:	2100      	movs	r1, #0
 8012192:	0092      	lsls	r2, r2, #2
 8012194:	f005 f938 	bl	8017408 <memset>
 8012198:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801219a:	2000      	movs	r0, #0
 801219c:	6358      	str	r0, [r3, #52]	; 0x34
 801219e:	bd10      	pop	{r4, pc}
 80121a0:	200b      	movs	r0, #11
 80121a2:	4770      	bx	lr
 80121a4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80121a8:	bd10      	pop	{r4, pc}
 80121aa:	bf00      	nop

080121ac <rcl_wait_set_resize>:
 80121ac:	2800      	cmp	r0, #0
 80121ae:	f000 8185 	beq.w	80124bc <rcl_wait_set_resize+0x310>
 80121b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121b6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80121b8:	b083      	sub	sp, #12
 80121ba:	4605      	mov	r5, r0
 80121bc:	2c00      	cmp	r4, #0
 80121be:	f000 817f 	beq.w	80124c0 <rcl_wait_set_resize+0x314>
 80121c2:	f04f 0900 	mov.w	r9, #0
 80121c6:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80121ca:	461f      	mov	r7, r3
 80121cc:	4688      	mov	r8, r1
 80121ce:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 80121d2:	4616      	mov	r6, r2
 80121d4:	f8c0 9004 	str.w	r9, [r0, #4]
 80121d8:	f8c4 9000 	str.w	r9, [r4]
 80121dc:	2900      	cmp	r1, #0
 80121de:	f000 80bd 	beq.w	801235c <rcl_wait_set_resize+0x1b0>
 80121e2:	008c      	lsls	r4, r1, #2
 80121e4:	6800      	ldr	r0, [r0, #0]
 80121e6:	9301      	str	r3, [sp, #4]
 80121e8:	4652      	mov	r2, sl
 80121ea:	4621      	mov	r1, r4
 80121ec:	4798      	blx	r3
 80121ee:	9b01      	ldr	r3, [sp, #4]
 80121f0:	6028      	str	r0, [r5, #0]
 80121f2:	2800      	cmp	r0, #0
 80121f4:	f000 80cb 	beq.w	801238e <rcl_wait_set_resize+0x1e2>
 80121f8:	4622      	mov	r2, r4
 80121fa:	4649      	mov	r1, r9
 80121fc:	9301      	str	r3, [sp, #4]
 80121fe:	f005 f903 	bl	8017408 <memset>
 8012202:	f8c5 8004 	str.w	r8, [r5, #4]
 8012206:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801220a:	9b01      	ldr	r3, [sp, #4]
 801220c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8012210:	f8c8 9004 	str.w	r9, [r8, #4]
 8012214:	4652      	mov	r2, sl
 8012216:	4621      	mov	r1, r4
 8012218:	4798      	blx	r3
 801221a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801221c:	f8c8 0008 	str.w	r0, [r8, #8]
 8012220:	689b      	ldr	r3, [r3, #8]
 8012222:	2b00      	cmp	r3, #0
 8012224:	f000 80ac 	beq.w	8012380 <rcl_wait_set_resize+0x1d4>
 8012228:	4622      	mov	r2, r4
 801222a:	4649      	mov	r1, r9
 801222c:	4618      	mov	r0, r3
 801222e:	f005 f8eb 	bl	8017408 <memset>
 8012232:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012234:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8012238:	f04f 0800 	mov.w	r8, #0
 801223c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 8012240:	f8c5 800c 	str.w	r8, [r5, #12]
 8012244:	f8c4 800c 	str.w	r8, [r4, #12]
 8012248:	2e00      	cmp	r6, #0
 801224a:	f040 80a4 	bne.w	8012396 <rcl_wait_set_resize+0x1ea>
 801224e:	68a8      	ldr	r0, [r5, #8]
 8012250:	b128      	cbz	r0, 801225e <rcl_wait_set_resize+0xb2>
 8012252:	4649      	mov	r1, r9
 8012254:	4790      	blx	r2
 8012256:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012258:	60ae      	str	r6, [r5, #8]
 801225a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801225e:	f04f 0800 	mov.w	r8, #0
 8012262:	19f6      	adds	r6, r6, r7
 8012264:	f8c4 8010 	str.w	r8, [r4, #16]
 8012268:	f040 80ac 	bne.w	80123c4 <rcl_wait_set_resize+0x218>
 801226c:	6960      	ldr	r0, [r4, #20]
 801226e:	b130      	cbz	r0, 801227e <rcl_wait_set_resize+0xd2>
 8012270:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8012272:	4649      	mov	r1, r9
 8012274:	4798      	blx	r3
 8012276:	6166      	str	r6, [r4, #20]
 8012278:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801227a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801227e:	2600      	movs	r6, #0
 8012280:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8012284:	616e      	str	r6, [r5, #20]
 8012286:	6426      	str	r6, [r4, #64]	; 0x40
 8012288:	2f00      	cmp	r7, #0
 801228a:	f040 80ad 	bne.w	80123e8 <rcl_wait_set_resize+0x23c>
 801228e:	6928      	ldr	r0, [r5, #16]
 8012290:	b138      	cbz	r0, 80122a2 <rcl_wait_set_resize+0xf6>
 8012292:	4649      	mov	r1, r9
 8012294:	47d0      	blx	sl
 8012296:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012298:	612f      	str	r7, [r5, #16]
 801229a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801229e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80122a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80122a4:	2600      	movs	r6, #0
 80122a6:	61ee      	str	r6, [r5, #28]
 80122a8:	61a6      	str	r6, [r4, #24]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	f040 80af 	bne.w	801240e <rcl_wait_set_resize+0x262>
 80122b0:	69a8      	ldr	r0, [r5, #24]
 80122b2:	b120      	cbz	r0, 80122be <rcl_wait_set_resize+0x112>
 80122b4:	4649      	mov	r1, r9
 80122b6:	47d0      	blx	sl
 80122b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80122ba:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80122bc:	61ab      	str	r3, [r5, #24]
 80122be:	6a20      	ldr	r0, [r4, #32]
 80122c0:	b128      	cbz	r0, 80122ce <rcl_wait_set_resize+0x122>
 80122c2:	4649      	mov	r1, r9
 80122c4:	47d0      	blx	sl
 80122c6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80122c8:	2300      	movs	r3, #0
 80122ca:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80122ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122d0:	6da7      	ldr	r7, [r4, #88]	; 0x58
 80122d2:	2600      	movs	r6, #0
 80122d4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 80122d8:	626e      	str	r6, [r5, #36]	; 0x24
 80122da:	6266      	str	r6, [r4, #36]	; 0x24
 80122dc:	2b00      	cmp	r3, #0
 80122de:	f000 80b6 	beq.w	801244e <rcl_wait_set_resize+0x2a2>
 80122e2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80122e6:	6a28      	ldr	r0, [r5, #32]
 80122e8:	463a      	mov	r2, r7
 80122ea:	4651      	mov	r1, sl
 80122ec:	47c8      	blx	r9
 80122ee:	6228      	str	r0, [r5, #32]
 80122f0:	2800      	cmp	r0, #0
 80122f2:	d04c      	beq.n	801238e <rcl_wait_set_resize+0x1e2>
 80122f4:	4652      	mov	r2, sl
 80122f6:	4631      	mov	r1, r6
 80122f8:	f005 f886 	bl	8017408 <memset>
 80122fc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80122fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012300:	626b      	str	r3, [r5, #36]	; 0x24
 8012302:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8012304:	62a6      	str	r6, [r4, #40]	; 0x28
 8012306:	463a      	mov	r2, r7
 8012308:	4651      	mov	r1, sl
 801230a:	47c8      	blx	r9
 801230c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801230e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8012310:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012312:	2c00      	cmp	r4, #0
 8012314:	f000 80f0 	beq.w	80124f8 <rcl_wait_set_resize+0x34c>
 8012318:	4620      	mov	r0, r4
 801231a:	4652      	mov	r2, sl
 801231c:	4631      	mov	r1, r6
 801231e:	f005 f873 	bl	8017408 <memset>
 8012322:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012326:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8012328:	2600      	movs	r6, #0
 801232a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801232e:	62ee      	str	r6, [r5, #44]	; 0x2c
 8012330:	6326      	str	r6, [r4, #48]	; 0x30
 8012332:	2b00      	cmp	r3, #0
 8012334:	f040 809d 	bne.w	8012472 <rcl_wait_set_resize+0x2c6>
 8012338:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801233a:	b120      	cbz	r0, 8012346 <rcl_wait_set_resize+0x19a>
 801233c:	4639      	mov	r1, r7
 801233e:	47c0      	blx	r8
 8012340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012342:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012344:	62ab      	str	r3, [r5, #40]	; 0x28
 8012346:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8012348:	b310      	cbz	r0, 8012390 <rcl_wait_set_resize+0x1e4>
 801234a:	4639      	mov	r1, r7
 801234c:	47c0      	blx	r8
 801234e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012350:	2000      	movs	r0, #0
 8012352:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 8012356:	b003      	add	sp, #12
 8012358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801235c:	6800      	ldr	r0, [r0, #0]
 801235e:	b120      	cbz	r0, 801236a <rcl_wait_set_resize+0x1be>
 8012360:	4651      	mov	r1, sl
 8012362:	47d8      	blx	fp
 8012364:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012366:	f8c5 8000 	str.w	r8, [r5]
 801236a:	68a0      	ldr	r0, [r4, #8]
 801236c:	2800      	cmp	r0, #0
 801236e:	f43f af61 	beq.w	8012234 <rcl_wait_set_resize+0x88>
 8012372:	4651      	mov	r1, sl
 8012374:	47d8      	blx	fp
 8012376:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012378:	2300      	movs	r3, #0
 801237a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801237e:	e759      	b.n	8012234 <rcl_wait_set_resize+0x88>
 8012380:	6828      	ldr	r0, [r5, #0]
 8012382:	9301      	str	r3, [sp, #4]
 8012384:	4651      	mov	r1, sl
 8012386:	47d8      	blx	fp
 8012388:	9b01      	ldr	r3, [sp, #4]
 801238a:	e9c5 3300 	strd	r3, r3, [r5]
 801238e:	200a      	movs	r0, #10
 8012390:	b003      	add	sp, #12
 8012392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012396:	00b4      	lsls	r4, r6, #2
 8012398:	68a8      	ldr	r0, [r5, #8]
 801239a:	464a      	mov	r2, r9
 801239c:	4621      	mov	r1, r4
 801239e:	4798      	blx	r3
 80123a0:	60a8      	str	r0, [r5, #8]
 80123a2:	2800      	cmp	r0, #0
 80123a4:	d0f3      	beq.n	801238e <rcl_wait_set_resize+0x1e2>
 80123a6:	4622      	mov	r2, r4
 80123a8:	4641      	mov	r1, r8
 80123aa:	f005 f82d 	bl	8017408 <memset>
 80123ae:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80123b0:	60ee      	str	r6, [r5, #12]
 80123b2:	f04f 0800 	mov.w	r8, #0
 80123b6:	19f6      	adds	r6, r6, r7
 80123b8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80123bc:	f8c4 8010 	str.w	r8, [r4, #16]
 80123c0:	f43f af54 	beq.w	801226c <rcl_wait_set_resize+0xc0>
 80123c4:	00b6      	lsls	r6, r6, #2
 80123c6:	464a      	mov	r2, r9
 80123c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80123ca:	6960      	ldr	r0, [r4, #20]
 80123cc:	4631      	mov	r1, r6
 80123ce:	4798      	blx	r3
 80123d0:	4681      	mov	r9, r0
 80123d2:	6160      	str	r0, [r4, #20]
 80123d4:	2800      	cmp	r0, #0
 80123d6:	d076      	beq.n	80124c6 <rcl_wait_set_resize+0x31a>
 80123d8:	4632      	mov	r2, r6
 80123da:	4641      	mov	r1, r8
 80123dc:	f005 f814 	bl	8017408 <memset>
 80123e0:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80123e2:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80123e6:	e74a      	b.n	801227e <rcl_wait_set_resize+0xd2>
 80123e8:	00bc      	lsls	r4, r7, #2
 80123ea:	6928      	ldr	r0, [r5, #16]
 80123ec:	464a      	mov	r2, r9
 80123ee:	4621      	mov	r1, r4
 80123f0:	47c0      	blx	r8
 80123f2:	6128      	str	r0, [r5, #16]
 80123f4:	2800      	cmp	r0, #0
 80123f6:	d0ca      	beq.n	801238e <rcl_wait_set_resize+0x1e2>
 80123f8:	4622      	mov	r2, r4
 80123fa:	4631      	mov	r1, r6
 80123fc:	f005 f804 	bl	8017408 <memset>
 8012400:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012402:	616f      	str	r7, [r5, #20]
 8012404:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8012408:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801240c:	e749      	b.n	80122a2 <rcl_wait_set_resize+0xf6>
 801240e:	009c      	lsls	r4, r3, #2
 8012410:	69a8      	ldr	r0, [r5, #24]
 8012412:	464a      	mov	r2, r9
 8012414:	4621      	mov	r1, r4
 8012416:	47c0      	blx	r8
 8012418:	61a8      	str	r0, [r5, #24]
 801241a:	2800      	cmp	r0, #0
 801241c:	d0b7      	beq.n	801238e <rcl_wait_set_resize+0x1e2>
 801241e:	4622      	mov	r2, r4
 8012420:	4631      	mov	r1, r6
 8012422:	f004 fff1 	bl	8017408 <memset>
 8012426:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8012428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801242a:	61eb      	str	r3, [r5, #28]
 801242c:	6a38      	ldr	r0, [r7, #32]
 801242e:	61fe      	str	r6, [r7, #28]
 8012430:	464a      	mov	r2, r9
 8012432:	4621      	mov	r1, r4
 8012434:	47c0      	blx	r8
 8012436:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012438:	6238      	str	r0, [r7, #32]
 801243a:	6a1f      	ldr	r7, [r3, #32]
 801243c:	2f00      	cmp	r7, #0
 801243e:	d054      	beq.n	80124ea <rcl_wait_set_resize+0x33e>
 8012440:	4622      	mov	r2, r4
 8012442:	4631      	mov	r1, r6
 8012444:	4638      	mov	r0, r7
 8012446:	f004 ffdf 	bl	8017408 <memset>
 801244a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801244c:	e73f      	b.n	80122ce <rcl_wait_set_resize+0x122>
 801244e:	6a28      	ldr	r0, [r5, #32]
 8012450:	b120      	cbz	r0, 801245c <rcl_wait_set_resize+0x2b0>
 8012452:	4639      	mov	r1, r7
 8012454:	47c0      	blx	r8
 8012456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012458:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801245a:	622b      	str	r3, [r5, #32]
 801245c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801245e:	2800      	cmp	r0, #0
 8012460:	f43f af60 	beq.w	8012324 <rcl_wait_set_resize+0x178>
 8012464:	4639      	mov	r1, r7
 8012466:	47c0      	blx	r8
 8012468:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801246a:	2300      	movs	r3, #0
 801246c:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8012470:	e758      	b.n	8012324 <rcl_wait_set_resize+0x178>
 8012472:	009c      	lsls	r4, r3, #2
 8012474:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8012476:	463a      	mov	r2, r7
 8012478:	4621      	mov	r1, r4
 801247a:	47c8      	blx	r9
 801247c:	62a8      	str	r0, [r5, #40]	; 0x28
 801247e:	2800      	cmp	r0, #0
 8012480:	d085      	beq.n	801238e <rcl_wait_set_resize+0x1e2>
 8012482:	4622      	mov	r2, r4
 8012484:	4631      	mov	r1, r6
 8012486:	f004 ffbf 	bl	8017408 <memset>
 801248a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801248e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012490:	62eb      	str	r3, [r5, #44]	; 0x2c
 8012492:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8012496:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 801249a:	463a      	mov	r2, r7
 801249c:	4621      	mov	r1, r4
 801249e:	47c8      	blx	r9
 80124a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80124a2:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 80124a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124a8:	b36b      	cbz	r3, 8012506 <rcl_wait_set_resize+0x35a>
 80124aa:	4622      	mov	r2, r4
 80124ac:	4631      	mov	r1, r6
 80124ae:	4618      	mov	r0, r3
 80124b0:	f004 ffaa 	bl	8017408 <memset>
 80124b4:	4630      	mov	r0, r6
 80124b6:	b003      	add	sp, #12
 80124b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124bc:	200b      	movs	r0, #11
 80124be:	4770      	bx	lr
 80124c0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80124c4:	e764      	b.n	8012390 <rcl_wait_set_resize+0x1e4>
 80124c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80124c8:	68a8      	ldr	r0, [r5, #8]
 80124ca:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80124cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80124ce:	4798      	blx	r3
 80124d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80124d2:	6928      	ldr	r0, [r5, #16]
 80124d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80124d6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80124d8:	f8c5 900c 	str.w	r9, [r5, #12]
 80124dc:	f8c5 9008 	str.w	r9, [r5, #8]
 80124e0:	4790      	blx	r2
 80124e2:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80124e6:	200a      	movs	r0, #10
 80124e8:	e752      	b.n	8012390 <rcl_wait_set_resize+0x1e4>
 80124ea:	69a8      	ldr	r0, [r5, #24]
 80124ec:	4649      	mov	r1, r9
 80124ee:	47d0      	blx	sl
 80124f0:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80124f4:	200a      	movs	r0, #10
 80124f6:	e74b      	b.n	8012390 <rcl_wait_set_resize+0x1e4>
 80124f8:	6a28      	ldr	r0, [r5, #32]
 80124fa:	4639      	mov	r1, r7
 80124fc:	47c0      	blx	r8
 80124fe:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8012502:	200a      	movs	r0, #10
 8012504:	e744      	b.n	8012390 <rcl_wait_set_resize+0x1e4>
 8012506:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8012508:	9301      	str	r3, [sp, #4]
 801250a:	4639      	mov	r1, r7
 801250c:	47c0      	blx	r8
 801250e:	9b01      	ldr	r3, [sp, #4]
 8012510:	200a      	movs	r0, #10
 8012512:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8012516:	e73b      	b.n	8012390 <rcl_wait_set_resize+0x1e4>

08012518 <rcl_wait_set_init>:
 8012518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801251c:	b084      	sub	sp, #16
 801251e:	4604      	mov	r4, r0
 8012520:	a810      	add	r0, sp, #64	; 0x40
 8012522:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8012526:	460f      	mov	r7, r1
 8012528:	4690      	mov	r8, r2
 801252a:	4699      	mov	r9, r3
 801252c:	f7f8 fec8 	bl	800b2c0 <rcutils_allocator_is_valid>
 8012530:	2800      	cmp	r0, #0
 8012532:	d06b      	beq.n	801260c <rcl_wait_set_init+0xf4>
 8012534:	2c00      	cmp	r4, #0
 8012536:	d069      	beq.n	801260c <rcl_wait_set_init+0xf4>
 8012538:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801253a:	b125      	cbz	r5, 8012546 <rcl_wait_set_init+0x2e>
 801253c:	2564      	movs	r5, #100	; 0x64
 801253e:	4628      	mov	r0, r5
 8012540:	b004      	add	sp, #16
 8012542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012546:	f1ba 0f00 	cmp.w	sl, #0
 801254a:	d05f      	beq.n	801260c <rcl_wait_set_init+0xf4>
 801254c:	4650      	mov	r0, sl
 801254e:	f7fe fb3f 	bl	8010bd0 <rcl_context_is_valid>
 8012552:	2800      	cmp	r0, #0
 8012554:	d067      	beq.n	8012626 <rcl_wait_set_init+0x10e>
 8012556:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012558:	9914      	ldr	r1, [sp, #80]	; 0x50
 801255a:	205c      	movs	r0, #92	; 0x5c
 801255c:	4798      	blx	r3
 801255e:	6320      	str	r0, [r4, #48]	; 0x30
 8012560:	2800      	cmp	r0, #0
 8012562:	d062      	beq.n	801262a <rcl_wait_set_init+0x112>
 8012564:	4629      	mov	r1, r5
 8012566:	225c      	movs	r2, #92	; 0x5c
 8012568:	f004 ff4e 	bl	8017408 <memset>
 801256c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8012570:	eb03 0e02 	add.w	lr, r3, r2
 8012574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012576:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8012578:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801257c:	449e      	add	lr, r3
 801257e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012582:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8012586:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801258a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801258e:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 8012592:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 8012596:	f106 0548 	add.w	r5, r6, #72	; 0x48
 801259a:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 801259e:	f8da a000 	ldr.w	sl, [sl]
 80125a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80125a4:	44c6      	add	lr, r8
 80125a6:	f8dc 3000 	ldr.w	r3, [ip]
 80125aa:	602b      	str	r3, [r5, #0]
 80125ac:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80125b0:	f10a 0028 	add.w	r0, sl, #40	; 0x28
 80125b4:	f002 fe50 	bl	8015258 <rmw_create_wait_set>
 80125b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80125ba:	63f0      	str	r0, [r6, #60]	; 0x3c
 80125bc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80125be:	b350      	cbz	r0, 8012616 <rcl_wait_set_init+0xfe>
 80125c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80125c2:	9302      	str	r3, [sp, #8]
 80125c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125c6:	9301      	str	r3, [sp, #4]
 80125c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125ca:	9300      	str	r3, [sp, #0]
 80125cc:	4642      	mov	r2, r8
 80125ce:	464b      	mov	r3, r9
 80125d0:	4639      	mov	r1, r7
 80125d2:	4620      	mov	r0, r4
 80125d4:	f7ff fdea 	bl	80121ac <rcl_wait_set_resize>
 80125d8:	4605      	mov	r5, r0
 80125da:	2800      	cmp	r0, #0
 80125dc:	d0af      	beq.n	801253e <rcl_wait_set_init+0x26>
 80125de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80125e0:	bb2b      	cbnz	r3, 801262e <rcl_wait_set_init+0x116>
 80125e2:	2600      	movs	r6, #0
 80125e4:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80125e8:	9600      	str	r6, [sp, #0]
 80125ea:	4633      	mov	r3, r6
 80125ec:	4632      	mov	r2, r6
 80125ee:	4631      	mov	r1, r6
 80125f0:	4620      	mov	r0, r4
 80125f2:	f7ff fddb 	bl	80121ac <rcl_wait_set_resize>
 80125f6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80125f8:	2800      	cmp	r0, #0
 80125fa:	d0a0      	beq.n	801253e <rcl_wait_set_init+0x26>
 80125fc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80125fe:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8012600:	4798      	blx	r3
 8012602:	4628      	mov	r0, r5
 8012604:	6326      	str	r6, [r4, #48]	; 0x30
 8012606:	b004      	add	sp, #16
 8012608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801260c:	250b      	movs	r5, #11
 801260e:	4628      	mov	r0, r5
 8012610:	b004      	add	sp, #16
 8012612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012616:	2501      	movs	r5, #1
 8012618:	f002 fe28 	bl	801526c <rmw_destroy_wait_set>
 801261c:	2800      	cmp	r0, #0
 801261e:	bf18      	it	ne
 8012620:	f44f 7561 	movne.w	r5, #900	; 0x384
 8012624:	e7dd      	b.n	80125e2 <rcl_wait_set_init+0xca>
 8012626:	2565      	movs	r5, #101	; 0x65
 8012628:	e789      	b.n	801253e <rcl_wait_set_init+0x26>
 801262a:	250a      	movs	r5, #10
 801262c:	e787      	b.n	801253e <rcl_wait_set_init+0x26>
 801262e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8012630:	e7f2      	b.n	8012618 <rcl_wait_set_init+0x100>
 8012632:	bf00      	nop

08012634 <rcl_wait_set_add_guard_condition>:
 8012634:	b318      	cbz	r0, 801267e <rcl_wait_set_add_guard_condition+0x4a>
 8012636:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012638:	b570      	push	{r4, r5, r6, lr}
 801263a:	4604      	mov	r4, r0
 801263c:	b30b      	cbz	r3, 8012682 <rcl_wait_set_add_guard_condition+0x4e>
 801263e:	b319      	cbz	r1, 8012688 <rcl_wait_set_add_guard_condition+0x54>
 8012640:	68dd      	ldr	r5, [r3, #12]
 8012642:	68c0      	ldr	r0, [r0, #12]
 8012644:	4285      	cmp	r5, r0
 8012646:	d217      	bcs.n	8012678 <rcl_wait_set_add_guard_condition+0x44>
 8012648:	68a0      	ldr	r0, [r4, #8]
 801264a:	1c6e      	adds	r6, r5, #1
 801264c:	60de      	str	r6, [r3, #12]
 801264e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012652:	b102      	cbz	r2, 8012656 <rcl_wait_set_add_guard_condition+0x22>
 8012654:	6015      	str	r5, [r2, #0]
 8012656:	4608      	mov	r0, r1
 8012658:	f004 f8d6 	bl	8016808 <rcl_guard_condition_get_rmw_handle>
 801265c:	b150      	cbz	r0, 8012674 <rcl_wait_set_add_guard_condition+0x40>
 801265e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012660:	6842      	ldr	r2, [r0, #4]
 8012662:	695b      	ldr	r3, [r3, #20]
 8012664:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012668:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801266a:	6913      	ldr	r3, [r2, #16]
 801266c:	3301      	adds	r3, #1
 801266e:	2000      	movs	r0, #0
 8012670:	6113      	str	r3, [r2, #16]
 8012672:	bd70      	pop	{r4, r5, r6, pc}
 8012674:	2001      	movs	r0, #1
 8012676:	bd70      	pop	{r4, r5, r6, pc}
 8012678:	f240 3086 	movw	r0, #902	; 0x386
 801267c:	bd70      	pop	{r4, r5, r6, pc}
 801267e:	200b      	movs	r0, #11
 8012680:	4770      	bx	lr
 8012682:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012686:	bd70      	pop	{r4, r5, r6, pc}
 8012688:	200b      	movs	r0, #11
 801268a:	bd70      	pop	{r4, r5, r6, pc}

0801268c <rcl_wait_set_add_timer>:
 801268c:	b328      	cbz	r0, 80126da <rcl_wait_set_add_timer+0x4e>
 801268e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012690:	b570      	push	{r4, r5, r6, lr}
 8012692:	4604      	mov	r4, r0
 8012694:	b31b      	cbz	r3, 80126de <rcl_wait_set_add_timer+0x52>
 8012696:	b329      	cbz	r1, 80126e4 <rcl_wait_set_add_timer+0x58>
 8012698:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801269a:	6965      	ldr	r5, [r4, #20]
 801269c:	42a8      	cmp	r0, r5
 801269e:	d219      	bcs.n	80126d4 <rcl_wait_set_add_timer+0x48>
 80126a0:	6925      	ldr	r5, [r4, #16]
 80126a2:	1c46      	adds	r6, r0, #1
 80126a4:	641e      	str	r6, [r3, #64]	; 0x40
 80126a6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80126aa:	b102      	cbz	r2, 80126ae <rcl_wait_set_add_timer+0x22>
 80126ac:	6010      	str	r0, [r2, #0]
 80126ae:	4608      	mov	r0, r1
 80126b0:	f7ff fba6 	bl	8011e00 <rcl_timer_get_guard_condition>
 80126b4:	b168      	cbz	r0, 80126d2 <rcl_wait_set_add_timer+0x46>
 80126b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80126b8:	68e3      	ldr	r3, [r4, #12]
 80126ba:	6c15      	ldr	r5, [r2, #64]	; 0x40
 80126bc:	3b01      	subs	r3, #1
 80126be:	441d      	add	r5, r3
 80126c0:	f004 f8a2 	bl	8016808 <rcl_guard_condition_get_rmw_handle>
 80126c4:	b180      	cbz	r0, 80126e8 <rcl_wait_set_add_timer+0x5c>
 80126c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80126c8:	6842      	ldr	r2, [r0, #4]
 80126ca:	695b      	ldr	r3, [r3, #20]
 80126cc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80126d0:	2000      	movs	r0, #0
 80126d2:	bd70      	pop	{r4, r5, r6, pc}
 80126d4:	f240 3086 	movw	r0, #902	; 0x386
 80126d8:	bd70      	pop	{r4, r5, r6, pc}
 80126da:	200b      	movs	r0, #11
 80126dc:	4770      	bx	lr
 80126de:	f44f 7061 	mov.w	r0, #900	; 0x384
 80126e2:	bd70      	pop	{r4, r5, r6, pc}
 80126e4:	200b      	movs	r0, #11
 80126e6:	bd70      	pop	{r4, r5, r6, pc}
 80126e8:	2001      	movs	r0, #1
 80126ea:	bd70      	pop	{r4, r5, r6, pc}

080126ec <rcl_wait_set_add_client>:
 80126ec:	b318      	cbz	r0, 8012736 <rcl_wait_set_add_client+0x4a>
 80126ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80126f0:	b570      	push	{r4, r5, r6, lr}
 80126f2:	4604      	mov	r4, r0
 80126f4:	b30b      	cbz	r3, 801273a <rcl_wait_set_add_client+0x4e>
 80126f6:	b319      	cbz	r1, 8012740 <rcl_wait_set_add_client+0x54>
 80126f8:	699d      	ldr	r5, [r3, #24]
 80126fa:	69c0      	ldr	r0, [r0, #28]
 80126fc:	4285      	cmp	r5, r0
 80126fe:	d217      	bcs.n	8012730 <rcl_wait_set_add_client+0x44>
 8012700:	69a0      	ldr	r0, [r4, #24]
 8012702:	1c6e      	adds	r6, r5, #1
 8012704:	619e      	str	r6, [r3, #24]
 8012706:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801270a:	b102      	cbz	r2, 801270e <rcl_wait_set_add_client+0x22>
 801270c:	6015      	str	r5, [r2, #0]
 801270e:	4608      	mov	r0, r1
 8012710:	f7fe f9b2 	bl	8010a78 <rcl_client_get_rmw_handle>
 8012714:	b150      	cbz	r0, 801272c <rcl_wait_set_add_client+0x40>
 8012716:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012718:	6842      	ldr	r2, [r0, #4]
 801271a:	6a1b      	ldr	r3, [r3, #32]
 801271c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012720:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012722:	69d3      	ldr	r3, [r2, #28]
 8012724:	3301      	adds	r3, #1
 8012726:	2000      	movs	r0, #0
 8012728:	61d3      	str	r3, [r2, #28]
 801272a:	bd70      	pop	{r4, r5, r6, pc}
 801272c:	2001      	movs	r0, #1
 801272e:	bd70      	pop	{r4, r5, r6, pc}
 8012730:	f240 3086 	movw	r0, #902	; 0x386
 8012734:	bd70      	pop	{r4, r5, r6, pc}
 8012736:	200b      	movs	r0, #11
 8012738:	4770      	bx	lr
 801273a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801273e:	bd70      	pop	{r4, r5, r6, pc}
 8012740:	200b      	movs	r0, #11
 8012742:	bd70      	pop	{r4, r5, r6, pc}

08012744 <rcl_wait_set_add_service>:
 8012744:	b318      	cbz	r0, 801278e <rcl_wait_set_add_service+0x4a>
 8012746:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012748:	b570      	push	{r4, r5, r6, lr}
 801274a:	4604      	mov	r4, r0
 801274c:	b30b      	cbz	r3, 8012792 <rcl_wait_set_add_service+0x4e>
 801274e:	b319      	cbz	r1, 8012798 <rcl_wait_set_add_service+0x54>
 8012750:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8012752:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012754:	4285      	cmp	r5, r0
 8012756:	d217      	bcs.n	8012788 <rcl_wait_set_add_service+0x44>
 8012758:	6a20      	ldr	r0, [r4, #32]
 801275a:	1c6e      	adds	r6, r5, #1
 801275c:	625e      	str	r6, [r3, #36]	; 0x24
 801275e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012762:	b102      	cbz	r2, 8012766 <rcl_wait_set_add_service+0x22>
 8012764:	6015      	str	r5, [r2, #0]
 8012766:	4608      	mov	r0, r1
 8012768:	f7ff f804 	bl	8011774 <rcl_service_get_rmw_handle>
 801276c:	b150      	cbz	r0, 8012784 <rcl_wait_set_add_service+0x40>
 801276e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012770:	6842      	ldr	r2, [r0, #4]
 8012772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012774:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012778:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801277a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801277c:	3301      	adds	r3, #1
 801277e:	2000      	movs	r0, #0
 8012780:	6293      	str	r3, [r2, #40]	; 0x28
 8012782:	bd70      	pop	{r4, r5, r6, pc}
 8012784:	2001      	movs	r0, #1
 8012786:	bd70      	pop	{r4, r5, r6, pc}
 8012788:	f240 3086 	movw	r0, #902	; 0x386
 801278c:	bd70      	pop	{r4, r5, r6, pc}
 801278e:	200b      	movs	r0, #11
 8012790:	4770      	bx	lr
 8012792:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012796:	bd70      	pop	{r4, r5, r6, pc}
 8012798:	200b      	movs	r0, #11
 801279a:	bd70      	pop	{r4, r5, r6, pc}
 801279c:	0000      	movs	r0, r0
	...

080127a0 <rcl_wait>:
 80127a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127a4:	ed2d 8b02 	vpush	{d8}
 80127a8:	b08d      	sub	sp, #52	; 0x34
 80127aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80127ae:	2800      	cmp	r0, #0
 80127b0:	f000 8143 	beq.w	8012a3a <rcl_wait+0x29a>
 80127b4:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80127b6:	4605      	mov	r5, r0
 80127b8:	2e00      	cmp	r6, #0
 80127ba:	f000 8112 	beq.w	80129e2 <rcl_wait+0x242>
 80127be:	6843      	ldr	r3, [r0, #4]
 80127c0:	b983      	cbnz	r3, 80127e4 <rcl_wait+0x44>
 80127c2:	68eb      	ldr	r3, [r5, #12]
 80127c4:	b973      	cbnz	r3, 80127e4 <rcl_wait+0x44>
 80127c6:	696b      	ldr	r3, [r5, #20]
 80127c8:	b963      	cbnz	r3, 80127e4 <rcl_wait+0x44>
 80127ca:	69eb      	ldr	r3, [r5, #28]
 80127cc:	b953      	cbnz	r3, 80127e4 <rcl_wait+0x44>
 80127ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80127d0:	b943      	cbnz	r3, 80127e4 <rcl_wait+0x44>
 80127d2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80127d4:	b933      	cbnz	r3, 80127e4 <rcl_wait+0x44>
 80127d6:	f240 3085 	movw	r0, #901	; 0x385
 80127da:	b00d      	add	sp, #52	; 0x34
 80127dc:	ecbd 8b02 	vpop	{d8}
 80127e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127e4:	9b04      	ldr	r3, [sp, #16]
 80127e6:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80127e8:	2b01      	cmp	r3, #1
 80127ea:	9b05      	ldr	r3, [sp, #20]
 80127ec:	f173 0300 	sbcs.w	r3, r3, #0
 80127f0:	f2c0 80f0 	blt.w	80129d4 <rcl_wait+0x234>
 80127f4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80127f8:	4643      	mov	r3, r8
 80127fa:	2a00      	cmp	r2, #0
 80127fc:	f000 8133 	beq.w	8012a66 <rcl_wait+0x2c6>
 8012800:	2400      	movs	r4, #0
 8012802:	4613      	mov	r3, r2
 8012804:	ed9f 8b9c 	vldr	d8, [pc, #624]	; 8012a78 <rcl_wait+0x2d8>
 8012808:	46a2      	mov	sl, r4
 801280a:	46a3      	mov	fp, r4
 801280c:	f240 3921 	movw	r9, #801	; 0x321
 8012810:	4632      	mov	r2, r6
 8012812:	e014      	b.n	801283e <rcl_wait+0x9e>
 8012814:	2800      	cmp	r0, #0
 8012816:	d1e0      	bne.n	80127da <rcl_wait+0x3a>
 8012818:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801281c:	4542      	cmp	r2, r8
 801281e:	eb73 0107 	sbcs.w	r1, r3, r7
 8012822:	da03      	bge.n	801282c <rcl_wait+0x8c>
 8012824:	4690      	mov	r8, r2
 8012826:	461f      	mov	r7, r3
 8012828:	f04f 0b01 	mov.w	fp, #1
 801282c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801282e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012830:	3401      	adds	r4, #1
 8012832:	f14a 0a00 	adc.w	sl, sl, #0
 8012836:	429c      	cmp	r4, r3
 8012838:	f17a 0100 	sbcs.w	r1, sl, #0
 801283c:	d228      	bcs.n	8012890 <rcl_wait+0xf0>
 801283e:	6928      	ldr	r0, [r5, #16]
 8012840:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8012844:	a908      	add	r1, sp, #32
 8012846:	00a6      	lsls	r6, r4, #2
 8012848:	2800      	cmp	r0, #0
 801284a:	d0f1      	beq.n	8012830 <rcl_wait+0x90>
 801284c:	68eb      	ldr	r3, [r5, #12]
 801284e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8012852:	4423      	add	r3, r4
 8012854:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8012858:	f1be 0f00 	cmp.w	lr, #0
 801285c:	d006      	beq.n	801286c <rcl_wait+0xcc>
 801285e:	6913      	ldr	r3, [r2, #16]
 8012860:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8012864:	3301      	adds	r3, #1
 8012866:	6113      	str	r3, [r2, #16]
 8012868:	692b      	ldr	r3, [r5, #16]
 801286a:	5998      	ldr	r0, [r3, r6]
 801286c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8012870:	f7ff fa94 	bl	8011d9c <rcl_timer_get_time_until_next_call>
 8012874:	4548      	cmp	r0, r9
 8012876:	d1cd      	bne.n	8012814 <rcl_wait+0x74>
 8012878:	692b      	ldr	r3, [r5, #16]
 801287a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801287c:	2100      	movs	r1, #0
 801287e:	5199      	str	r1, [r3, r6]
 8012880:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012882:	3401      	adds	r4, #1
 8012884:	f14a 0a00 	adc.w	sl, sl, #0
 8012888:	429c      	cmp	r4, r3
 801288a:	f17a 0100 	sbcs.w	r1, sl, #0
 801288e:	d3d6      	bcc.n	801283e <rcl_wait+0x9e>
 8012890:	4616      	mov	r6, r2
 8012892:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8012896:	4313      	orrs	r3, r2
 8012898:	46d9      	mov	r9, fp
 801289a:	f040 80a9 	bne.w	80129f0 <rcl_wait+0x250>
 801289e:	2300      	movs	r3, #0
 80128a0:	2200      	movs	r2, #0
 80128a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80128a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80128aa:	ab08      	add	r3, sp, #32
 80128ac:	9302      	str	r3, [sp, #8]
 80128ae:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 80128b0:	f106 0334 	add.w	r3, r6, #52	; 0x34
 80128b4:	e9cd 3200 	strd	r3, r2, [sp]
 80128b8:	f106 0110 	add.w	r1, r6, #16
 80128bc:	f106 031c 	add.w	r3, r6, #28
 80128c0:	f106 0228 	add.w	r2, r6, #40	; 0x28
 80128c4:	1d30      	adds	r0, r6, #4
 80128c6:	f002 fb4f 	bl	8014f68 <rmw_wait>
 80128ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80128cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80128ce:	4680      	mov	r8, r0
 80128d0:	b1ca      	cbz	r2, 8012906 <rcl_wait+0x166>
 80128d2:	2400      	movs	r4, #0
 80128d4:	4627      	mov	r7, r4
 80128d6:	692a      	ldr	r2, [r5, #16]
 80128d8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80128dc:	f10d 011f 	add.w	r1, sp, #31
 80128e0:	00a6      	lsls	r6, r4, #2
 80128e2:	b160      	cbz	r0, 80128fe <rcl_wait+0x15e>
 80128e4:	f88d 701f 	strb.w	r7, [sp, #31]
 80128e8:	f7ff fa1e 	bl	8011d28 <rcl_timer_is_ready>
 80128ec:	2800      	cmp	r0, #0
 80128ee:	f47f af74 	bne.w	80127da <rcl_wait+0x3a>
 80128f2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80128f6:	b90b      	cbnz	r3, 80128fc <rcl_wait+0x15c>
 80128f8:	692a      	ldr	r2, [r5, #16]
 80128fa:	5193      	str	r3, [r2, r6]
 80128fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80128fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012900:	3401      	adds	r4, #1
 8012902:	42a2      	cmp	r2, r4
 8012904:	d8e7      	bhi.n	80128d6 <rcl_wait+0x136>
 8012906:	f038 0002 	bics.w	r0, r8, #2
 801290a:	f040 8090 	bne.w	8012a2e <rcl_wait+0x28e>
 801290e:	686e      	ldr	r6, [r5, #4]
 8012910:	4602      	mov	r2, r0
 8012912:	b91e      	cbnz	r6, 801291c <rcl_wait+0x17c>
 8012914:	e00d      	b.n	8012932 <rcl_wait+0x192>
 8012916:	3201      	adds	r2, #1
 8012918:	42b2      	cmp	r2, r6
 801291a:	d00a      	beq.n	8012932 <rcl_wait+0x192>
 801291c:	6899      	ldr	r1, [r3, #8]
 801291e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012922:	2900      	cmp	r1, #0
 8012924:	d1f7      	bne.n	8012916 <rcl_wait+0x176>
 8012926:	682c      	ldr	r4, [r5, #0]
 8012928:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801292c:	3201      	adds	r2, #1
 801292e:	42b2      	cmp	r2, r6
 8012930:	d1f4      	bne.n	801291c <rcl_wait+0x17c>
 8012932:	68ee      	ldr	r6, [r5, #12]
 8012934:	2200      	movs	r2, #0
 8012936:	b91e      	cbnz	r6, 8012940 <rcl_wait+0x1a0>
 8012938:	e00d      	b.n	8012956 <rcl_wait+0x1b6>
 801293a:	3201      	adds	r2, #1
 801293c:	42b2      	cmp	r2, r6
 801293e:	d00a      	beq.n	8012956 <rcl_wait+0x1b6>
 8012940:	6959      	ldr	r1, [r3, #20]
 8012942:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012946:	2900      	cmp	r1, #0
 8012948:	d1f7      	bne.n	801293a <rcl_wait+0x19a>
 801294a:	68ac      	ldr	r4, [r5, #8]
 801294c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012950:	3201      	adds	r2, #1
 8012952:	42b2      	cmp	r2, r6
 8012954:	d1f4      	bne.n	8012940 <rcl_wait+0x1a0>
 8012956:	69ee      	ldr	r6, [r5, #28]
 8012958:	2200      	movs	r2, #0
 801295a:	b91e      	cbnz	r6, 8012964 <rcl_wait+0x1c4>
 801295c:	e00d      	b.n	801297a <rcl_wait+0x1da>
 801295e:	3201      	adds	r2, #1
 8012960:	42b2      	cmp	r2, r6
 8012962:	d00a      	beq.n	801297a <rcl_wait+0x1da>
 8012964:	6a19      	ldr	r1, [r3, #32]
 8012966:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801296a:	2900      	cmp	r1, #0
 801296c:	d1f7      	bne.n	801295e <rcl_wait+0x1be>
 801296e:	69ac      	ldr	r4, [r5, #24]
 8012970:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012974:	3201      	adds	r2, #1
 8012976:	42b2      	cmp	r2, r6
 8012978:	d1f4      	bne.n	8012964 <rcl_wait+0x1c4>
 801297a:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 801297c:	2200      	movs	r2, #0
 801297e:	b91e      	cbnz	r6, 8012988 <rcl_wait+0x1e8>
 8012980:	e00d      	b.n	801299e <rcl_wait+0x1fe>
 8012982:	3201      	adds	r2, #1
 8012984:	4296      	cmp	r6, r2
 8012986:	d00a      	beq.n	801299e <rcl_wait+0x1fe>
 8012988:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801298a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801298e:	2900      	cmp	r1, #0
 8012990:	d1f7      	bne.n	8012982 <rcl_wait+0x1e2>
 8012992:	6a2c      	ldr	r4, [r5, #32]
 8012994:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012998:	3201      	adds	r2, #1
 801299a:	4296      	cmp	r6, r2
 801299c:	d1f4      	bne.n	8012988 <rcl_wait+0x1e8>
 801299e:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 80129a0:	2200      	movs	r2, #0
 80129a2:	b91e      	cbnz	r6, 80129ac <rcl_wait+0x20c>
 80129a4:	e00d      	b.n	80129c2 <rcl_wait+0x222>
 80129a6:	3201      	adds	r2, #1
 80129a8:	42b2      	cmp	r2, r6
 80129aa:	d00a      	beq.n	80129c2 <rcl_wait+0x222>
 80129ac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80129ae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80129b2:	2900      	cmp	r1, #0
 80129b4:	d1f7      	bne.n	80129a6 <rcl_wait+0x206>
 80129b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80129b8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80129bc:	3201      	adds	r2, #1
 80129be:	42b2      	cmp	r2, r6
 80129c0:	d1f4      	bne.n	80129ac <rcl_wait+0x20c>
 80129c2:	f1b8 0f02 	cmp.w	r8, #2
 80129c6:	f47f af08 	bne.w	80127da <rcl_wait+0x3a>
 80129ca:	464b      	mov	r3, r9
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	bf08      	it	eq
 80129d0:	2002      	moveq	r0, #2
 80129d2:	e702      	b.n	80127da <rcl_wait+0x3a>
 80129d4:	2a00      	cmp	r2, #0
 80129d6:	d03a      	beq.n	8012a4e <rcl_wait+0x2ae>
 80129d8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80129dc:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80129e0:	e70e      	b.n	8012800 <rcl_wait+0x60>
 80129e2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80129e6:	b00d      	add	sp, #52	; 0x34
 80129e8:	ecbd 8b02 	vpop	{d8}
 80129ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129f0:	9b04      	ldr	r3, [sp, #16]
 80129f2:	2b01      	cmp	r3, #1
 80129f4:	9b05      	ldr	r3, [sp, #20]
 80129f6:	f173 0300 	sbcs.w	r3, r3, #0
 80129fa:	db24      	blt.n	8012a46 <rcl_wait+0x2a6>
 80129fc:	2f00      	cmp	r7, #0
 80129fe:	bfbc      	itt	lt
 8012a00:	f04f 0800 	movlt.w	r8, #0
 8012a04:	4647      	movlt	r7, r8
 8012a06:	a31e      	add	r3, pc, #120	; (adr r3, 8012a80 <rcl_wait+0x2e0>)
 8012a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a0c:	4640      	mov	r0, r8
 8012a0e:	4639      	mov	r1, r7
 8012a10:	f7ee f9a2 	bl	8000d58 <__aeabi_ldivmod>
 8012a14:	a31a      	add	r3, pc, #104	; (adr r3, 8012a80 <rcl_wait+0x2e0>)
 8012a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a1a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012a1e:	4640      	mov	r0, r8
 8012a20:	4639      	mov	r1, r7
 8012a22:	f7ee f999 	bl	8000d58 <__aeabi_ldivmod>
 8012a26:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012a2a:	ab08      	add	r3, sp, #32
 8012a2c:	e73e      	b.n	80128ac <rcl_wait+0x10c>
 8012a2e:	2001      	movs	r0, #1
 8012a30:	b00d      	add	sp, #52	; 0x34
 8012a32:	ecbd 8b02 	vpop	{d8}
 8012a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a3a:	200b      	movs	r0, #11
 8012a3c:	b00d      	add	sp, #52	; 0x34
 8012a3e:	ecbd 8b02 	vpop	{d8}
 8012a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a46:	465b      	mov	r3, fp
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d1d7      	bne.n	80129fc <rcl_wait+0x25c>
 8012a4c:	e72e      	b.n	80128ac <rcl_wait+0x10c>
 8012a4e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8012a52:	430b      	orrs	r3, r1
 8012a54:	bf08      	it	eq
 8012a56:	4691      	moveq	r9, r2
 8012a58:	f43f af21 	beq.w	801289e <rcl_wait+0xfe>
 8012a5c:	9b04      	ldr	r3, [sp, #16]
 8012a5e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8012a62:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8012a66:	2b01      	cmp	r3, #1
 8012a68:	9b05      	ldr	r3, [sp, #20]
 8012a6a:	f173 0300 	sbcs.w	r3, r3, #0
 8012a6e:	f04f 0300 	mov.w	r3, #0
 8012a72:	4699      	mov	r9, r3
 8012a74:	dac2      	bge.n	80129fc <rcl_wait+0x25c>
 8012a76:	e719      	b.n	80128ac <rcl_wait+0x10c>
 8012a78:	ffffffff 	.word	0xffffffff
 8012a7c:	7fffffff 	.word	0x7fffffff
 8012a80:	3b9aca00 	.word	0x3b9aca00
 8012a84:	00000000 	.word	0x00000000

08012a88 <rcl_action_take_goal_response>:
 8012a88:	2800      	cmp	r0, #0
 8012a8a:	d039      	beq.n	8012b00 <rcl_action_take_goal_response+0x78>
 8012a8c:	b570      	push	{r4, r5, r6, lr}
 8012a8e:	4604      	mov	r4, r0
 8012a90:	6800      	ldr	r0, [r0, #0]
 8012a92:	b380      	cbz	r0, 8012af6 <rcl_action_take_goal_response+0x6e>
 8012a94:	460d      	mov	r5, r1
 8012a96:	4616      	mov	r6, r2
 8012a98:	f7fe f872 	bl	8010b80 <rcl_client_is_valid>
 8012a9c:	b330      	cbz	r0, 8012aec <rcl_action_take_goal_response+0x64>
 8012a9e:	6820      	ldr	r0, [r4, #0]
 8012aa0:	3004      	adds	r0, #4
 8012aa2:	f7fe f86d 	bl	8010b80 <rcl_client_is_valid>
 8012aa6:	b308      	cbz	r0, 8012aec <rcl_action_take_goal_response+0x64>
 8012aa8:	6820      	ldr	r0, [r4, #0]
 8012aaa:	3008      	adds	r0, #8
 8012aac:	f7fe f868 	bl	8010b80 <rcl_client_is_valid>
 8012ab0:	b1e0      	cbz	r0, 8012aec <rcl_action_take_goal_response+0x64>
 8012ab2:	6820      	ldr	r0, [r4, #0]
 8012ab4:	300c      	adds	r0, #12
 8012ab6:	f7fe ffff 	bl	8011ab8 <rcl_subscription_is_valid>
 8012aba:	b1b8      	cbz	r0, 8012aec <rcl_action_take_goal_response+0x64>
 8012abc:	6820      	ldr	r0, [r4, #0]
 8012abe:	3010      	adds	r0, #16
 8012ac0:	f7fe fffa 	bl	8011ab8 <rcl_subscription_is_valid>
 8012ac4:	b190      	cbz	r0, 8012aec <rcl_action_take_goal_response+0x64>
 8012ac6:	b1cd      	cbz	r5, 8012afc <rcl_action_take_goal_response+0x74>
 8012ac8:	b1c6      	cbz	r6, 8012afc <rcl_action_take_goal_response+0x74>
 8012aca:	6820      	ldr	r0, [r4, #0]
 8012acc:	4632      	mov	r2, r6
 8012ace:	4629      	mov	r1, r5
 8012ad0:	f7fe f80e 	bl	8010af0 <rcl_take_response>
 8012ad4:	b148      	cbz	r0, 8012aea <rcl_action_take_goal_response+0x62>
 8012ad6:	280a      	cmp	r0, #10
 8012ad8:	d007      	beq.n	8012aea <rcl_action_take_goal_response+0x62>
 8012ada:	f240 12f5 	movw	r2, #501	; 0x1f5
 8012ade:	f640 0337 	movw	r3, #2103	; 0x837
 8012ae2:	4290      	cmp	r0, r2
 8012ae4:	bf0c      	ite	eq
 8012ae6:	4618      	moveq	r0, r3
 8012ae8:	2001      	movne	r0, #1
 8012aea:	bd70      	pop	{r4, r5, r6, pc}
 8012aec:	f7f8 fc0c 	bl	800b308 <rcutils_reset_error>
 8012af0:	f640 0036 	movw	r0, #2102	; 0x836
 8012af4:	bd70      	pop	{r4, r5, r6, pc}
 8012af6:	f640 0036 	movw	r0, #2102	; 0x836
 8012afa:	bd70      	pop	{r4, r5, r6, pc}
 8012afc:	200b      	movs	r0, #11
 8012afe:	bd70      	pop	{r4, r5, r6, pc}
 8012b00:	f640 0036 	movw	r0, #2102	; 0x836
 8012b04:	4770      	bx	lr
 8012b06:	bf00      	nop

08012b08 <rcl_action_send_result_request>:
 8012b08:	b390      	cbz	r0, 8012b70 <rcl_action_send_result_request+0x68>
 8012b0a:	b570      	push	{r4, r5, r6, lr}
 8012b0c:	4604      	mov	r4, r0
 8012b0e:	6800      	ldr	r0, [r0, #0]
 8012b10:	b348      	cbz	r0, 8012b66 <rcl_action_send_result_request+0x5e>
 8012b12:	460d      	mov	r5, r1
 8012b14:	4616      	mov	r6, r2
 8012b16:	f7fe f833 	bl	8010b80 <rcl_client_is_valid>
 8012b1a:	b1f8      	cbz	r0, 8012b5c <rcl_action_send_result_request+0x54>
 8012b1c:	6820      	ldr	r0, [r4, #0]
 8012b1e:	3004      	adds	r0, #4
 8012b20:	f7fe f82e 	bl	8010b80 <rcl_client_is_valid>
 8012b24:	b1d0      	cbz	r0, 8012b5c <rcl_action_send_result_request+0x54>
 8012b26:	6820      	ldr	r0, [r4, #0]
 8012b28:	3008      	adds	r0, #8
 8012b2a:	f7fe f829 	bl	8010b80 <rcl_client_is_valid>
 8012b2e:	b1a8      	cbz	r0, 8012b5c <rcl_action_send_result_request+0x54>
 8012b30:	6820      	ldr	r0, [r4, #0]
 8012b32:	300c      	adds	r0, #12
 8012b34:	f7fe ffc0 	bl	8011ab8 <rcl_subscription_is_valid>
 8012b38:	b180      	cbz	r0, 8012b5c <rcl_action_send_result_request+0x54>
 8012b3a:	6820      	ldr	r0, [r4, #0]
 8012b3c:	3010      	adds	r0, #16
 8012b3e:	f7fe ffbb 	bl	8011ab8 <rcl_subscription_is_valid>
 8012b42:	b158      	cbz	r0, 8012b5c <rcl_action_send_result_request+0x54>
 8012b44:	b195      	cbz	r5, 8012b6c <rcl_action_send_result_request+0x64>
 8012b46:	b18e      	cbz	r6, 8012b6c <rcl_action_send_result_request+0x64>
 8012b48:	6820      	ldr	r0, [r4, #0]
 8012b4a:	4632      	mov	r2, r6
 8012b4c:	4629      	mov	r1, r5
 8012b4e:	3008      	adds	r0, #8
 8012b50:	f7fd ff98 	bl	8010a84 <rcl_send_request>
 8012b54:	3800      	subs	r0, #0
 8012b56:	bf18      	it	ne
 8012b58:	2001      	movne	r0, #1
 8012b5a:	bd70      	pop	{r4, r5, r6, pc}
 8012b5c:	f7f8 fbd4 	bl	800b308 <rcutils_reset_error>
 8012b60:	f640 0036 	movw	r0, #2102	; 0x836
 8012b64:	bd70      	pop	{r4, r5, r6, pc}
 8012b66:	f640 0036 	movw	r0, #2102	; 0x836
 8012b6a:	bd70      	pop	{r4, r5, r6, pc}
 8012b6c:	200b      	movs	r0, #11
 8012b6e:	bd70      	pop	{r4, r5, r6, pc}
 8012b70:	f640 0036 	movw	r0, #2102	; 0x836
 8012b74:	4770      	bx	lr
 8012b76:	bf00      	nop

08012b78 <rcl_action_take_result_response>:
 8012b78:	2800      	cmp	r0, #0
 8012b7a:	d03a      	beq.n	8012bf2 <rcl_action_take_result_response+0x7a>
 8012b7c:	b570      	push	{r4, r5, r6, lr}
 8012b7e:	4604      	mov	r4, r0
 8012b80:	6800      	ldr	r0, [r0, #0]
 8012b82:	b388      	cbz	r0, 8012be8 <rcl_action_take_result_response+0x70>
 8012b84:	460d      	mov	r5, r1
 8012b86:	4616      	mov	r6, r2
 8012b88:	f7fd fffa 	bl	8010b80 <rcl_client_is_valid>
 8012b8c:	b338      	cbz	r0, 8012bde <rcl_action_take_result_response+0x66>
 8012b8e:	6820      	ldr	r0, [r4, #0]
 8012b90:	3004      	adds	r0, #4
 8012b92:	f7fd fff5 	bl	8010b80 <rcl_client_is_valid>
 8012b96:	b310      	cbz	r0, 8012bde <rcl_action_take_result_response+0x66>
 8012b98:	6820      	ldr	r0, [r4, #0]
 8012b9a:	3008      	adds	r0, #8
 8012b9c:	f7fd fff0 	bl	8010b80 <rcl_client_is_valid>
 8012ba0:	b1e8      	cbz	r0, 8012bde <rcl_action_take_result_response+0x66>
 8012ba2:	6820      	ldr	r0, [r4, #0]
 8012ba4:	300c      	adds	r0, #12
 8012ba6:	f7fe ff87 	bl	8011ab8 <rcl_subscription_is_valid>
 8012baa:	b1c0      	cbz	r0, 8012bde <rcl_action_take_result_response+0x66>
 8012bac:	6820      	ldr	r0, [r4, #0]
 8012bae:	3010      	adds	r0, #16
 8012bb0:	f7fe ff82 	bl	8011ab8 <rcl_subscription_is_valid>
 8012bb4:	b198      	cbz	r0, 8012bde <rcl_action_take_result_response+0x66>
 8012bb6:	b1d5      	cbz	r5, 8012bee <rcl_action_take_result_response+0x76>
 8012bb8:	b1ce      	cbz	r6, 8012bee <rcl_action_take_result_response+0x76>
 8012bba:	6820      	ldr	r0, [r4, #0]
 8012bbc:	4632      	mov	r2, r6
 8012bbe:	4629      	mov	r1, r5
 8012bc0:	3008      	adds	r0, #8
 8012bc2:	f7fd ff95 	bl	8010af0 <rcl_take_response>
 8012bc6:	b148      	cbz	r0, 8012bdc <rcl_action_take_result_response+0x64>
 8012bc8:	280a      	cmp	r0, #10
 8012bca:	d007      	beq.n	8012bdc <rcl_action_take_result_response+0x64>
 8012bcc:	f240 12f5 	movw	r2, #501	; 0x1f5
 8012bd0:	f640 0337 	movw	r3, #2103	; 0x837
 8012bd4:	4290      	cmp	r0, r2
 8012bd6:	bf0c      	ite	eq
 8012bd8:	4618      	moveq	r0, r3
 8012bda:	2001      	movne	r0, #1
 8012bdc:	bd70      	pop	{r4, r5, r6, pc}
 8012bde:	f7f8 fb93 	bl	800b308 <rcutils_reset_error>
 8012be2:	f640 0036 	movw	r0, #2102	; 0x836
 8012be6:	bd70      	pop	{r4, r5, r6, pc}
 8012be8:	f640 0036 	movw	r0, #2102	; 0x836
 8012bec:	bd70      	pop	{r4, r5, r6, pc}
 8012bee:	200b      	movs	r0, #11
 8012bf0:	bd70      	pop	{r4, r5, r6, pc}
 8012bf2:	f640 0036 	movw	r0, #2102	; 0x836
 8012bf6:	4770      	bx	lr

08012bf8 <rcl_action_take_cancel_response>:
 8012bf8:	2800      	cmp	r0, #0
 8012bfa:	d03a      	beq.n	8012c72 <rcl_action_take_cancel_response+0x7a>
 8012bfc:	b570      	push	{r4, r5, r6, lr}
 8012bfe:	4604      	mov	r4, r0
 8012c00:	6800      	ldr	r0, [r0, #0]
 8012c02:	b388      	cbz	r0, 8012c68 <rcl_action_take_cancel_response+0x70>
 8012c04:	460d      	mov	r5, r1
 8012c06:	4616      	mov	r6, r2
 8012c08:	f7fd ffba 	bl	8010b80 <rcl_client_is_valid>
 8012c0c:	b338      	cbz	r0, 8012c5e <rcl_action_take_cancel_response+0x66>
 8012c0e:	6820      	ldr	r0, [r4, #0]
 8012c10:	3004      	adds	r0, #4
 8012c12:	f7fd ffb5 	bl	8010b80 <rcl_client_is_valid>
 8012c16:	b310      	cbz	r0, 8012c5e <rcl_action_take_cancel_response+0x66>
 8012c18:	6820      	ldr	r0, [r4, #0]
 8012c1a:	3008      	adds	r0, #8
 8012c1c:	f7fd ffb0 	bl	8010b80 <rcl_client_is_valid>
 8012c20:	b1e8      	cbz	r0, 8012c5e <rcl_action_take_cancel_response+0x66>
 8012c22:	6820      	ldr	r0, [r4, #0]
 8012c24:	300c      	adds	r0, #12
 8012c26:	f7fe ff47 	bl	8011ab8 <rcl_subscription_is_valid>
 8012c2a:	b1c0      	cbz	r0, 8012c5e <rcl_action_take_cancel_response+0x66>
 8012c2c:	6820      	ldr	r0, [r4, #0]
 8012c2e:	3010      	adds	r0, #16
 8012c30:	f7fe ff42 	bl	8011ab8 <rcl_subscription_is_valid>
 8012c34:	b198      	cbz	r0, 8012c5e <rcl_action_take_cancel_response+0x66>
 8012c36:	b1d5      	cbz	r5, 8012c6e <rcl_action_take_cancel_response+0x76>
 8012c38:	b1ce      	cbz	r6, 8012c6e <rcl_action_take_cancel_response+0x76>
 8012c3a:	6820      	ldr	r0, [r4, #0]
 8012c3c:	4632      	mov	r2, r6
 8012c3e:	4629      	mov	r1, r5
 8012c40:	3004      	adds	r0, #4
 8012c42:	f7fd ff55 	bl	8010af0 <rcl_take_response>
 8012c46:	b148      	cbz	r0, 8012c5c <rcl_action_take_cancel_response+0x64>
 8012c48:	280a      	cmp	r0, #10
 8012c4a:	d007      	beq.n	8012c5c <rcl_action_take_cancel_response+0x64>
 8012c4c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8012c50:	f640 0337 	movw	r3, #2103	; 0x837
 8012c54:	4290      	cmp	r0, r2
 8012c56:	bf0c      	ite	eq
 8012c58:	4618      	moveq	r0, r3
 8012c5a:	2001      	movne	r0, #1
 8012c5c:	bd70      	pop	{r4, r5, r6, pc}
 8012c5e:	f7f8 fb53 	bl	800b308 <rcutils_reset_error>
 8012c62:	f640 0036 	movw	r0, #2102	; 0x836
 8012c66:	bd70      	pop	{r4, r5, r6, pc}
 8012c68:	f640 0036 	movw	r0, #2102	; 0x836
 8012c6c:	bd70      	pop	{r4, r5, r6, pc}
 8012c6e:	200b      	movs	r0, #11
 8012c70:	bd70      	pop	{r4, r5, r6, pc}
 8012c72:	f640 0036 	movw	r0, #2102	; 0x836
 8012c76:	4770      	bx	lr

08012c78 <rcl_action_take_feedback>:
 8012c78:	2800      	cmp	r0, #0
 8012c7a:	d038      	beq.n	8012cee <rcl_action_take_feedback+0x76>
 8012c7c:	b530      	push	{r4, r5, lr}
 8012c7e:	4604      	mov	r4, r0
 8012c80:	6800      	ldr	r0, [r0, #0]
 8012c82:	b091      	sub	sp, #68	; 0x44
 8012c84:	b378      	cbz	r0, 8012ce6 <rcl_action_take_feedback+0x6e>
 8012c86:	460d      	mov	r5, r1
 8012c88:	f7fd ff7a 	bl	8010b80 <rcl_client_is_valid>
 8012c8c:	b328      	cbz	r0, 8012cda <rcl_action_take_feedback+0x62>
 8012c8e:	6820      	ldr	r0, [r4, #0]
 8012c90:	3004      	adds	r0, #4
 8012c92:	f7fd ff75 	bl	8010b80 <rcl_client_is_valid>
 8012c96:	b300      	cbz	r0, 8012cda <rcl_action_take_feedback+0x62>
 8012c98:	6820      	ldr	r0, [r4, #0]
 8012c9a:	3008      	adds	r0, #8
 8012c9c:	f7fd ff70 	bl	8010b80 <rcl_client_is_valid>
 8012ca0:	b1d8      	cbz	r0, 8012cda <rcl_action_take_feedback+0x62>
 8012ca2:	6820      	ldr	r0, [r4, #0]
 8012ca4:	300c      	adds	r0, #12
 8012ca6:	f7fe ff07 	bl	8011ab8 <rcl_subscription_is_valid>
 8012caa:	b1b0      	cbz	r0, 8012cda <rcl_action_take_feedback+0x62>
 8012cac:	6820      	ldr	r0, [r4, #0]
 8012cae:	3010      	adds	r0, #16
 8012cb0:	f7fe ff02 	bl	8011ab8 <rcl_subscription_is_valid>
 8012cb4:	b188      	cbz	r0, 8012cda <rcl_action_take_feedback+0x62>
 8012cb6:	b1ed      	cbz	r5, 8012cf4 <rcl_action_take_feedback+0x7c>
 8012cb8:	6820      	ldr	r0, [r4, #0]
 8012cba:	2300      	movs	r3, #0
 8012cbc:	466a      	mov	r2, sp
 8012cbe:	4629      	mov	r1, r5
 8012cc0:	300c      	adds	r0, #12
 8012cc2:	f7fe fe9b 	bl	80119fc <rcl_take>
 8012cc6:	b160      	cbz	r0, 8012ce2 <rcl_action_take_feedback+0x6a>
 8012cc8:	f240 1391 	movw	r3, #401	; 0x191
 8012ccc:	4298      	cmp	r0, r3
 8012cce:	d014      	beq.n	8012cfa <rcl_action_take_feedback+0x82>
 8012cd0:	280a      	cmp	r0, #10
 8012cd2:	bf18      	it	ne
 8012cd4:	2001      	movne	r0, #1
 8012cd6:	b011      	add	sp, #68	; 0x44
 8012cd8:	bd30      	pop	{r4, r5, pc}
 8012cda:	f7f8 fb15 	bl	800b308 <rcutils_reset_error>
 8012cde:	f640 0036 	movw	r0, #2102	; 0x836
 8012ce2:	b011      	add	sp, #68	; 0x44
 8012ce4:	bd30      	pop	{r4, r5, pc}
 8012ce6:	f640 0036 	movw	r0, #2102	; 0x836
 8012cea:	b011      	add	sp, #68	; 0x44
 8012cec:	bd30      	pop	{r4, r5, pc}
 8012cee:	f640 0036 	movw	r0, #2102	; 0x836
 8012cf2:	4770      	bx	lr
 8012cf4:	200b      	movs	r0, #11
 8012cf6:	b011      	add	sp, #68	; 0x44
 8012cf8:	bd30      	pop	{r4, r5, pc}
 8012cfa:	f640 0037 	movw	r0, #2103	; 0x837
 8012cfe:	e7f0      	b.n	8012ce2 <rcl_action_take_feedback+0x6a>

08012d00 <rcl_action_wait_set_add_action_client>:
 8012d00:	2800      	cmp	r0, #0
 8012d02:	d048      	beq.n	8012d96 <rcl_action_wait_set_add_action_client+0x96>
 8012d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d06:	460c      	mov	r4, r1
 8012d08:	2900      	cmp	r1, #0
 8012d0a:	d03c      	beq.n	8012d86 <rcl_action_wait_set_add_action_client+0x86>
 8012d0c:	4605      	mov	r5, r0
 8012d0e:	6808      	ldr	r0, [r1, #0]
 8012d10:	2800      	cmp	r0, #0
 8012d12:	d038      	beq.n	8012d86 <rcl_action_wait_set_add_action_client+0x86>
 8012d14:	4617      	mov	r7, r2
 8012d16:	461e      	mov	r6, r3
 8012d18:	f7fd ff32 	bl	8010b80 <rcl_client_is_valid>
 8012d1c:	b3b0      	cbz	r0, 8012d8c <rcl_action_wait_set_add_action_client+0x8c>
 8012d1e:	6820      	ldr	r0, [r4, #0]
 8012d20:	3004      	adds	r0, #4
 8012d22:	f7fd ff2d 	bl	8010b80 <rcl_client_is_valid>
 8012d26:	b388      	cbz	r0, 8012d8c <rcl_action_wait_set_add_action_client+0x8c>
 8012d28:	6820      	ldr	r0, [r4, #0]
 8012d2a:	3008      	adds	r0, #8
 8012d2c:	f7fd ff28 	bl	8010b80 <rcl_client_is_valid>
 8012d30:	b360      	cbz	r0, 8012d8c <rcl_action_wait_set_add_action_client+0x8c>
 8012d32:	6820      	ldr	r0, [r4, #0]
 8012d34:	300c      	adds	r0, #12
 8012d36:	f7fe febf 	bl	8011ab8 <rcl_subscription_is_valid>
 8012d3a:	b338      	cbz	r0, 8012d8c <rcl_action_wait_set_add_action_client+0x8c>
 8012d3c:	6820      	ldr	r0, [r4, #0]
 8012d3e:	3010      	adds	r0, #16
 8012d40:	f7fe feba 	bl	8011ab8 <rcl_subscription_is_valid>
 8012d44:	b310      	cbz	r0, 8012d8c <rcl_action_wait_set_add_action_client+0x8c>
 8012d46:	6821      	ldr	r1, [r4, #0]
 8012d48:	4628      	mov	r0, r5
 8012d4a:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 8012d4e:	f7ff fccd 	bl	80126ec <rcl_wait_set_add_client>
 8012d52:	b9b8      	cbnz	r0, 8012d84 <rcl_action_wait_set_add_action_client+0x84>
 8012d54:	6821      	ldr	r1, [r4, #0]
 8012d56:	4628      	mov	r0, r5
 8012d58:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 8012d5c:	3104      	adds	r1, #4
 8012d5e:	f7ff fcc5 	bl	80126ec <rcl_wait_set_add_client>
 8012d62:	b978      	cbnz	r0, 8012d84 <rcl_action_wait_set_add_action_client+0x84>
 8012d64:	6821      	ldr	r1, [r4, #0]
 8012d66:	4628      	mov	r0, r5
 8012d68:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 8012d6c:	3108      	adds	r1, #8
 8012d6e:	f7ff fcbd 	bl	80126ec <rcl_wait_set_add_client>
 8012d72:	b938      	cbnz	r0, 8012d84 <rcl_action_wait_set_add_action_client+0x84>
 8012d74:	6821      	ldr	r1, [r4, #0]
 8012d76:	4628      	mov	r0, r5
 8012d78:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 8012d7c:	310c      	adds	r1, #12
 8012d7e:	f7ff f96d 	bl	801205c <rcl_wait_set_add_subscription>
 8012d82:	b158      	cbz	r0, 8012d9c <rcl_action_wait_set_add_action_client+0x9c>
 8012d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d86:	f640 0036 	movw	r0, #2102	; 0x836
 8012d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d8c:	f7f8 fabc 	bl	800b308 <rcutils_reset_error>
 8012d90:	f640 0036 	movw	r0, #2102	; 0x836
 8012d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d96:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012d9a:	4770      	bx	lr
 8012d9c:	6821      	ldr	r1, [r4, #0]
 8012d9e:	4628      	mov	r0, r5
 8012da0:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 8012da4:	3110      	adds	r1, #16
 8012da6:	f7ff f959 	bl	801205c <rcl_wait_set_add_subscription>
 8012daa:	2800      	cmp	r0, #0
 8012dac:	d1ea      	bne.n	8012d84 <rcl_action_wait_set_add_action_client+0x84>
 8012dae:	b11f      	cbz	r7, 8012db8 <rcl_action_wait_set_add_action_client+0xb8>
 8012db0:	6823      	ldr	r3, [r4, #0]
 8012db2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8012db6:	603b      	str	r3, [r7, #0]
 8012db8:	2e00      	cmp	r6, #0
 8012dba:	d0e3      	beq.n	8012d84 <rcl_action_wait_set_add_action_client+0x84>
 8012dbc:	6823      	ldr	r3, [r4, #0]
 8012dbe:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8012dc2:	6033      	str	r3, [r6, #0]
 8012dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dc6:	bf00      	nop

08012dc8 <rcl_action_client_wait_set_get_entities_ready>:
 8012dc8:	2800      	cmp	r0, #0
 8012dca:	f000 808d 	beq.w	8012ee8 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8012dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dd2:	460c      	mov	r4, r1
 8012dd4:	2900      	cmp	r1, #0
 8012dd6:	d077      	beq.n	8012ec8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012dd8:	4605      	mov	r5, r0
 8012dda:	6808      	ldr	r0, [r1, #0]
 8012ddc:	2800      	cmp	r0, #0
 8012dde:	d073      	beq.n	8012ec8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012de0:	4616      	mov	r6, r2
 8012de2:	461f      	mov	r7, r3
 8012de4:	f7fd fecc 	bl	8010b80 <rcl_client_is_valid>
 8012de8:	2800      	cmp	r0, #0
 8012dea:	d071      	beq.n	8012ed0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012dec:	6820      	ldr	r0, [r4, #0]
 8012dee:	3004      	adds	r0, #4
 8012df0:	f7fd fec6 	bl	8010b80 <rcl_client_is_valid>
 8012df4:	2800      	cmp	r0, #0
 8012df6:	d06b      	beq.n	8012ed0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012df8:	6820      	ldr	r0, [r4, #0]
 8012dfa:	3008      	adds	r0, #8
 8012dfc:	f7fd fec0 	bl	8010b80 <rcl_client_is_valid>
 8012e00:	2800      	cmp	r0, #0
 8012e02:	d065      	beq.n	8012ed0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012e04:	6820      	ldr	r0, [r4, #0]
 8012e06:	300c      	adds	r0, #12
 8012e08:	f7fe fe56 	bl	8011ab8 <rcl_subscription_is_valid>
 8012e0c:	2800      	cmp	r0, #0
 8012e0e:	d05f      	beq.n	8012ed0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012e10:	6820      	ldr	r0, [r4, #0]
 8012e12:	3010      	adds	r0, #16
 8012e14:	f7fe fe50 	bl	8011ab8 <rcl_subscription_is_valid>
 8012e18:	2800      	cmp	r0, #0
 8012e1a:	d059      	beq.n	8012ed0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012e1c:	2e00      	cmp	r6, #0
 8012e1e:	d060      	beq.n	8012ee2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012e20:	2f00      	cmp	r7, #0
 8012e22:	d05e      	beq.n	8012ee2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012e24:	9b06      	ldr	r3, [sp, #24]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d05b      	beq.n	8012ee2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012e2a:	9b07      	ldr	r3, [sp, #28]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d058      	beq.n	8012ee2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012e30:	9b08      	ldr	r3, [sp, #32]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d055      	beq.n	8012ee2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012e36:	6823      	ldr	r3, [r4, #0]
 8012e38:	686a      	ldr	r2, [r5, #4]
 8012e3a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 8012e3e:	428a      	cmp	r2, r1
 8012e40:	d94c      	bls.n	8012edc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012e42:	f8d3 01d4 	ldr.w	r0, [r3, #468]	; 0x1d4
 8012e46:	4282      	cmp	r2, r0
 8012e48:	d948      	bls.n	8012edc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012e4a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
 8012e4e:	69ea      	ldr	r2, [r5, #28]
 8012e50:	42a2      	cmp	r2, r4
 8012e52:	d943      	bls.n	8012edc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012e54:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	; 0x1c8
 8012e58:	4562      	cmp	r2, ip
 8012e5a:	d93f      	bls.n	8012edc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012e5c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	; 0x1cc
 8012e60:	4572      	cmp	r2, lr
 8012e62:	d93b      	bls.n	8012edc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012e64:	69aa      	ldr	r2, [r5, #24]
 8012e66:	682d      	ldr	r5, [r5, #0]
 8012e68:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8012e6c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8012e70:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8012e74:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8012e78:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8012e7c:	f103 0c0c 	add.w	ip, r3, #12
 8012e80:	eba5 050c 	sub.w	r5, r5, ip
 8012e84:	fab5 f585 	clz	r5, r5
 8012e88:	096d      	lsrs	r5, r5, #5
 8012e8a:	7035      	strb	r5, [r6, #0]
 8012e8c:	f103 0510 	add.w	r5, r3, #16
 8012e90:	1b64      	subs	r4, r4, r5
 8012e92:	fab4 f484 	clz	r4, r4
 8012e96:	0964      	lsrs	r4, r4, #5
 8012e98:	703c      	strb	r4, [r7, #0]
 8012e9a:	eba3 0008 	sub.w	r0, r3, r8
 8012e9e:	1d1c      	adds	r4, r3, #4
 8012ea0:	3308      	adds	r3, #8
 8012ea2:	1ad3      	subs	r3, r2, r3
 8012ea4:	fab0 f080 	clz	r0, r0
 8012ea8:	9a06      	ldr	r2, [sp, #24]
 8012eaa:	0940      	lsrs	r0, r0, #5
 8012eac:	1b09      	subs	r1, r1, r4
 8012eae:	7010      	strb	r0, [r2, #0]
 8012eb0:	fab1 f181 	clz	r1, r1
 8012eb4:	9a07      	ldr	r2, [sp, #28]
 8012eb6:	0949      	lsrs	r1, r1, #5
 8012eb8:	7011      	strb	r1, [r2, #0]
 8012eba:	fab3 f383 	clz	r3, r3
 8012ebe:	9a08      	ldr	r2, [sp, #32]
 8012ec0:	095b      	lsrs	r3, r3, #5
 8012ec2:	2000      	movs	r0, #0
 8012ec4:	7013      	strb	r3, [r2, #0]
 8012ec6:	e001      	b.n	8012ecc <rcl_action_client_wait_set_get_entities_ready+0x104>
 8012ec8:	f640 0036 	movw	r0, #2102	; 0x836
 8012ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ed0:	f7f8 fa1a 	bl	800b308 <rcutils_reset_error>
 8012ed4:	f640 0036 	movw	r0, #2102	; 0x836
 8012ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012edc:	2001      	movs	r0, #1
 8012ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ee2:	200b      	movs	r0, #11
 8012ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ee8:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012eec:	4770      	bx	lr
 8012eee:	bf00      	nop

08012ef0 <rcl_action_take_goal_request>:
 8012ef0:	2800      	cmp	r0, #0
 8012ef2:	d039      	beq.n	8012f68 <rcl_action_take_goal_request+0x78>
 8012ef4:	b570      	push	{r4, r5, r6, lr}
 8012ef6:	4604      	mov	r4, r0
 8012ef8:	6800      	ldr	r0, [r0, #0]
 8012efa:	b380      	cbz	r0, 8012f5e <rcl_action_take_goal_request+0x6e>
 8012efc:	460d      	mov	r5, r1
 8012efe:	4616      	mov	r6, r2
 8012f00:	f7fe fc96 	bl	8011830 <rcl_service_is_valid>
 8012f04:	b330      	cbz	r0, 8012f54 <rcl_action_take_goal_request+0x64>
 8012f06:	6820      	ldr	r0, [r4, #0]
 8012f08:	3004      	adds	r0, #4
 8012f0a:	f7fe fc91 	bl	8011830 <rcl_service_is_valid>
 8012f0e:	b308      	cbz	r0, 8012f54 <rcl_action_take_goal_request+0x64>
 8012f10:	6820      	ldr	r0, [r4, #0]
 8012f12:	3008      	adds	r0, #8
 8012f14:	f7fe fc8c 	bl	8011830 <rcl_service_is_valid>
 8012f18:	b1e0      	cbz	r0, 8012f54 <rcl_action_take_goal_request+0x64>
 8012f1a:	6820      	ldr	r0, [r4, #0]
 8012f1c:	300c      	adds	r0, #12
 8012f1e:	f7f7 fa63 	bl	800a3e8 <rcl_publisher_is_valid>
 8012f22:	b1b8      	cbz	r0, 8012f54 <rcl_action_take_goal_request+0x64>
 8012f24:	6820      	ldr	r0, [r4, #0]
 8012f26:	3010      	adds	r0, #16
 8012f28:	f7f7 fa5e 	bl	800a3e8 <rcl_publisher_is_valid>
 8012f2c:	b190      	cbz	r0, 8012f54 <rcl_action_take_goal_request+0x64>
 8012f2e:	b1cd      	cbz	r5, 8012f64 <rcl_action_take_goal_request+0x74>
 8012f30:	b1c6      	cbz	r6, 8012f64 <rcl_action_take_goal_request+0x74>
 8012f32:	6820      	ldr	r0, [r4, #0]
 8012f34:	4632      	mov	r2, r6
 8012f36:	4629      	mov	r1, r5
 8012f38:	f7fe fc22 	bl	8011780 <rcl_take_request>
 8012f3c:	b148      	cbz	r0, 8012f52 <rcl_action_take_goal_request+0x62>
 8012f3e:	280a      	cmp	r0, #10
 8012f40:	d007      	beq.n	8012f52 <rcl_action_take_goal_request+0x62>
 8012f42:	f240 2259 	movw	r2, #601	; 0x259
 8012f46:	f640 0399 	movw	r3, #2201	; 0x899
 8012f4a:	4290      	cmp	r0, r2
 8012f4c:	bf0c      	ite	eq
 8012f4e:	4618      	moveq	r0, r3
 8012f50:	2001      	movne	r0, #1
 8012f52:	bd70      	pop	{r4, r5, r6, pc}
 8012f54:	f7f8 f9d8 	bl	800b308 <rcutils_reset_error>
 8012f58:	f640 0098 	movw	r0, #2200	; 0x898
 8012f5c:	bd70      	pop	{r4, r5, r6, pc}
 8012f5e:	f640 0098 	movw	r0, #2200	; 0x898
 8012f62:	bd70      	pop	{r4, r5, r6, pc}
 8012f64:	200b      	movs	r0, #11
 8012f66:	bd70      	pop	{r4, r5, r6, pc}
 8012f68:	f640 0098 	movw	r0, #2200	; 0x898
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop

08012f70 <rcl_action_send_goal_response>:
 8012f70:	b388      	cbz	r0, 8012fd6 <rcl_action_send_goal_response+0x66>
 8012f72:	b570      	push	{r4, r5, r6, lr}
 8012f74:	4604      	mov	r4, r0
 8012f76:	6800      	ldr	r0, [r0, #0]
 8012f78:	b340      	cbz	r0, 8012fcc <rcl_action_send_goal_response+0x5c>
 8012f7a:	460d      	mov	r5, r1
 8012f7c:	4616      	mov	r6, r2
 8012f7e:	f7fe fc57 	bl	8011830 <rcl_service_is_valid>
 8012f82:	b1f0      	cbz	r0, 8012fc2 <rcl_action_send_goal_response+0x52>
 8012f84:	6820      	ldr	r0, [r4, #0]
 8012f86:	3004      	adds	r0, #4
 8012f88:	f7fe fc52 	bl	8011830 <rcl_service_is_valid>
 8012f8c:	b1c8      	cbz	r0, 8012fc2 <rcl_action_send_goal_response+0x52>
 8012f8e:	6820      	ldr	r0, [r4, #0]
 8012f90:	3008      	adds	r0, #8
 8012f92:	f7fe fc4d 	bl	8011830 <rcl_service_is_valid>
 8012f96:	b1a0      	cbz	r0, 8012fc2 <rcl_action_send_goal_response+0x52>
 8012f98:	6820      	ldr	r0, [r4, #0]
 8012f9a:	300c      	adds	r0, #12
 8012f9c:	f7f7 fa24 	bl	800a3e8 <rcl_publisher_is_valid>
 8012fa0:	b178      	cbz	r0, 8012fc2 <rcl_action_send_goal_response+0x52>
 8012fa2:	6820      	ldr	r0, [r4, #0]
 8012fa4:	3010      	adds	r0, #16
 8012fa6:	f7f7 fa1f 	bl	800a3e8 <rcl_publisher_is_valid>
 8012faa:	b150      	cbz	r0, 8012fc2 <rcl_action_send_goal_response+0x52>
 8012fac:	b18d      	cbz	r5, 8012fd2 <rcl_action_send_goal_response+0x62>
 8012fae:	b186      	cbz	r6, 8012fd2 <rcl_action_send_goal_response+0x62>
 8012fb0:	6820      	ldr	r0, [r4, #0]
 8012fb2:	4632      	mov	r2, r6
 8012fb4:	4629      	mov	r1, r5
 8012fb6:	f7fe fc23 	bl	8011800 <rcl_send_response>
 8012fba:	3800      	subs	r0, #0
 8012fbc:	bf18      	it	ne
 8012fbe:	2001      	movne	r0, #1
 8012fc0:	bd70      	pop	{r4, r5, r6, pc}
 8012fc2:	f7f8 f9a1 	bl	800b308 <rcutils_reset_error>
 8012fc6:	f640 0098 	movw	r0, #2200	; 0x898
 8012fca:	bd70      	pop	{r4, r5, r6, pc}
 8012fcc:	f640 0098 	movw	r0, #2200	; 0x898
 8012fd0:	bd70      	pop	{r4, r5, r6, pc}
 8012fd2:	200b      	movs	r0, #11
 8012fd4:	bd70      	pop	{r4, r5, r6, pc}
 8012fd6:	f640 0098 	movw	r0, #2200	; 0x898
 8012fda:	4770      	bx	lr

08012fdc <rcl_action_take_result_request>:
 8012fdc:	2800      	cmp	r0, #0
 8012fde:	d03a      	beq.n	8013056 <rcl_action_take_result_request+0x7a>
 8012fe0:	b570      	push	{r4, r5, r6, lr}
 8012fe2:	4604      	mov	r4, r0
 8012fe4:	6800      	ldr	r0, [r0, #0]
 8012fe6:	b388      	cbz	r0, 801304c <rcl_action_take_result_request+0x70>
 8012fe8:	460d      	mov	r5, r1
 8012fea:	4616      	mov	r6, r2
 8012fec:	f7fe fc20 	bl	8011830 <rcl_service_is_valid>
 8012ff0:	b338      	cbz	r0, 8013042 <rcl_action_take_result_request+0x66>
 8012ff2:	6820      	ldr	r0, [r4, #0]
 8012ff4:	3004      	adds	r0, #4
 8012ff6:	f7fe fc1b 	bl	8011830 <rcl_service_is_valid>
 8012ffa:	b310      	cbz	r0, 8013042 <rcl_action_take_result_request+0x66>
 8012ffc:	6820      	ldr	r0, [r4, #0]
 8012ffe:	3008      	adds	r0, #8
 8013000:	f7fe fc16 	bl	8011830 <rcl_service_is_valid>
 8013004:	b1e8      	cbz	r0, 8013042 <rcl_action_take_result_request+0x66>
 8013006:	6820      	ldr	r0, [r4, #0]
 8013008:	300c      	adds	r0, #12
 801300a:	f7f7 f9ed 	bl	800a3e8 <rcl_publisher_is_valid>
 801300e:	b1c0      	cbz	r0, 8013042 <rcl_action_take_result_request+0x66>
 8013010:	6820      	ldr	r0, [r4, #0]
 8013012:	3010      	adds	r0, #16
 8013014:	f7f7 f9e8 	bl	800a3e8 <rcl_publisher_is_valid>
 8013018:	b198      	cbz	r0, 8013042 <rcl_action_take_result_request+0x66>
 801301a:	b1d5      	cbz	r5, 8013052 <rcl_action_take_result_request+0x76>
 801301c:	b1ce      	cbz	r6, 8013052 <rcl_action_take_result_request+0x76>
 801301e:	6820      	ldr	r0, [r4, #0]
 8013020:	4632      	mov	r2, r6
 8013022:	4629      	mov	r1, r5
 8013024:	3008      	adds	r0, #8
 8013026:	f7fe fbab 	bl	8011780 <rcl_take_request>
 801302a:	b148      	cbz	r0, 8013040 <rcl_action_take_result_request+0x64>
 801302c:	280a      	cmp	r0, #10
 801302e:	d007      	beq.n	8013040 <rcl_action_take_result_request+0x64>
 8013030:	f240 2259 	movw	r2, #601	; 0x259
 8013034:	f640 0399 	movw	r3, #2201	; 0x899
 8013038:	4290      	cmp	r0, r2
 801303a:	bf0c      	ite	eq
 801303c:	4618      	moveq	r0, r3
 801303e:	2001      	movne	r0, #1
 8013040:	bd70      	pop	{r4, r5, r6, pc}
 8013042:	f7f8 f961 	bl	800b308 <rcutils_reset_error>
 8013046:	f640 0098 	movw	r0, #2200	; 0x898
 801304a:	bd70      	pop	{r4, r5, r6, pc}
 801304c:	f640 0098 	movw	r0, #2200	; 0x898
 8013050:	bd70      	pop	{r4, r5, r6, pc}
 8013052:	200b      	movs	r0, #11
 8013054:	bd70      	pop	{r4, r5, r6, pc}
 8013056:	f640 0098 	movw	r0, #2200	; 0x898
 801305a:	4770      	bx	lr

0801305c <rcl_action_take_cancel_request>:
 801305c:	2800      	cmp	r0, #0
 801305e:	d03a      	beq.n	80130d6 <rcl_action_take_cancel_request+0x7a>
 8013060:	b570      	push	{r4, r5, r6, lr}
 8013062:	4604      	mov	r4, r0
 8013064:	6800      	ldr	r0, [r0, #0]
 8013066:	b388      	cbz	r0, 80130cc <rcl_action_take_cancel_request+0x70>
 8013068:	460d      	mov	r5, r1
 801306a:	4616      	mov	r6, r2
 801306c:	f7fe fbe0 	bl	8011830 <rcl_service_is_valid>
 8013070:	b338      	cbz	r0, 80130c2 <rcl_action_take_cancel_request+0x66>
 8013072:	6820      	ldr	r0, [r4, #0]
 8013074:	3004      	adds	r0, #4
 8013076:	f7fe fbdb 	bl	8011830 <rcl_service_is_valid>
 801307a:	b310      	cbz	r0, 80130c2 <rcl_action_take_cancel_request+0x66>
 801307c:	6820      	ldr	r0, [r4, #0]
 801307e:	3008      	adds	r0, #8
 8013080:	f7fe fbd6 	bl	8011830 <rcl_service_is_valid>
 8013084:	b1e8      	cbz	r0, 80130c2 <rcl_action_take_cancel_request+0x66>
 8013086:	6820      	ldr	r0, [r4, #0]
 8013088:	300c      	adds	r0, #12
 801308a:	f7f7 f9ad 	bl	800a3e8 <rcl_publisher_is_valid>
 801308e:	b1c0      	cbz	r0, 80130c2 <rcl_action_take_cancel_request+0x66>
 8013090:	6820      	ldr	r0, [r4, #0]
 8013092:	3010      	adds	r0, #16
 8013094:	f7f7 f9a8 	bl	800a3e8 <rcl_publisher_is_valid>
 8013098:	b198      	cbz	r0, 80130c2 <rcl_action_take_cancel_request+0x66>
 801309a:	b1d5      	cbz	r5, 80130d2 <rcl_action_take_cancel_request+0x76>
 801309c:	b1ce      	cbz	r6, 80130d2 <rcl_action_take_cancel_request+0x76>
 801309e:	6820      	ldr	r0, [r4, #0]
 80130a0:	4632      	mov	r2, r6
 80130a2:	4629      	mov	r1, r5
 80130a4:	3004      	adds	r0, #4
 80130a6:	f7fe fb6b 	bl	8011780 <rcl_take_request>
 80130aa:	b148      	cbz	r0, 80130c0 <rcl_action_take_cancel_request+0x64>
 80130ac:	280a      	cmp	r0, #10
 80130ae:	d007      	beq.n	80130c0 <rcl_action_take_cancel_request+0x64>
 80130b0:	f240 2259 	movw	r2, #601	; 0x259
 80130b4:	f640 0399 	movw	r3, #2201	; 0x899
 80130b8:	4290      	cmp	r0, r2
 80130ba:	bf0c      	ite	eq
 80130bc:	4618      	moveq	r0, r3
 80130be:	2001      	movne	r0, #1
 80130c0:	bd70      	pop	{r4, r5, r6, pc}
 80130c2:	f7f8 f921 	bl	800b308 <rcutils_reset_error>
 80130c6:	f640 0098 	movw	r0, #2200	; 0x898
 80130ca:	bd70      	pop	{r4, r5, r6, pc}
 80130cc:	f640 0098 	movw	r0, #2200	; 0x898
 80130d0:	bd70      	pop	{r4, r5, r6, pc}
 80130d2:	200b      	movs	r0, #11
 80130d4:	bd70      	pop	{r4, r5, r6, pc}
 80130d6:	f640 0098 	movw	r0, #2200	; 0x898
 80130da:	4770      	bx	lr

080130dc <rcl_action_send_cancel_response>:
 80130dc:	b390      	cbz	r0, 8013144 <rcl_action_send_cancel_response+0x68>
 80130de:	b570      	push	{r4, r5, r6, lr}
 80130e0:	4604      	mov	r4, r0
 80130e2:	6800      	ldr	r0, [r0, #0]
 80130e4:	b348      	cbz	r0, 801313a <rcl_action_send_cancel_response+0x5e>
 80130e6:	460d      	mov	r5, r1
 80130e8:	4616      	mov	r6, r2
 80130ea:	f7fe fba1 	bl	8011830 <rcl_service_is_valid>
 80130ee:	b1f8      	cbz	r0, 8013130 <rcl_action_send_cancel_response+0x54>
 80130f0:	6820      	ldr	r0, [r4, #0]
 80130f2:	3004      	adds	r0, #4
 80130f4:	f7fe fb9c 	bl	8011830 <rcl_service_is_valid>
 80130f8:	b1d0      	cbz	r0, 8013130 <rcl_action_send_cancel_response+0x54>
 80130fa:	6820      	ldr	r0, [r4, #0]
 80130fc:	3008      	adds	r0, #8
 80130fe:	f7fe fb97 	bl	8011830 <rcl_service_is_valid>
 8013102:	b1a8      	cbz	r0, 8013130 <rcl_action_send_cancel_response+0x54>
 8013104:	6820      	ldr	r0, [r4, #0]
 8013106:	300c      	adds	r0, #12
 8013108:	f7f7 f96e 	bl	800a3e8 <rcl_publisher_is_valid>
 801310c:	b180      	cbz	r0, 8013130 <rcl_action_send_cancel_response+0x54>
 801310e:	6820      	ldr	r0, [r4, #0]
 8013110:	3010      	adds	r0, #16
 8013112:	f7f7 f969 	bl	800a3e8 <rcl_publisher_is_valid>
 8013116:	b158      	cbz	r0, 8013130 <rcl_action_send_cancel_response+0x54>
 8013118:	b195      	cbz	r5, 8013140 <rcl_action_send_cancel_response+0x64>
 801311a:	b18e      	cbz	r6, 8013140 <rcl_action_send_cancel_response+0x64>
 801311c:	6820      	ldr	r0, [r4, #0]
 801311e:	4632      	mov	r2, r6
 8013120:	4629      	mov	r1, r5
 8013122:	3004      	adds	r0, #4
 8013124:	f7fe fb6c 	bl	8011800 <rcl_send_response>
 8013128:	3800      	subs	r0, #0
 801312a:	bf18      	it	ne
 801312c:	2001      	movne	r0, #1
 801312e:	bd70      	pop	{r4, r5, r6, pc}
 8013130:	f7f8 f8ea 	bl	800b308 <rcutils_reset_error>
 8013134:	f640 0098 	movw	r0, #2200	; 0x898
 8013138:	bd70      	pop	{r4, r5, r6, pc}
 801313a:	f640 0098 	movw	r0, #2200	; 0x898
 801313e:	bd70      	pop	{r4, r5, r6, pc}
 8013140:	200b      	movs	r0, #11
 8013142:	bd70      	pop	{r4, r5, r6, pc}
 8013144:	f640 0098 	movw	r0, #2200	; 0x898
 8013148:	4770      	bx	lr
 801314a:	bf00      	nop

0801314c <rcl_action_wait_set_add_action_server>:
 801314c:	2800      	cmp	r0, #0
 801314e:	d04d      	beq.n	80131ec <rcl_action_wait_set_add_action_server+0xa0>
 8013150:	b570      	push	{r4, r5, r6, lr}
 8013152:	460c      	mov	r4, r1
 8013154:	b159      	cbz	r1, 801316e <rcl_action_wait_set_add_action_server+0x22>
 8013156:	4605      	mov	r5, r0
 8013158:	6808      	ldr	r0, [r1, #0]
 801315a:	b140      	cbz	r0, 801316e <rcl_action_wait_set_add_action_server+0x22>
 801315c:	4616      	mov	r6, r2
 801315e:	f7fe fb67 	bl	8011830 <rcl_service_is_valid>
 8013162:	b120      	cbz	r0, 801316e <rcl_action_wait_set_add_action_server+0x22>
 8013164:	6820      	ldr	r0, [r4, #0]
 8013166:	3004      	adds	r0, #4
 8013168:	f7fe fb62 	bl	8011830 <rcl_service_is_valid>
 801316c:	b910      	cbnz	r0, 8013174 <rcl_action_wait_set_add_action_server+0x28>
 801316e:	f640 0098 	movw	r0, #2200	; 0x898
 8013172:	bd70      	pop	{r4, r5, r6, pc}
 8013174:	6820      	ldr	r0, [r4, #0]
 8013176:	3008      	adds	r0, #8
 8013178:	f7fe fb5a 	bl	8011830 <rcl_service_is_valid>
 801317c:	2800      	cmp	r0, #0
 801317e:	d0f6      	beq.n	801316e <rcl_action_wait_set_add_action_server+0x22>
 8013180:	6820      	ldr	r0, [r4, #0]
 8013182:	300c      	adds	r0, #12
 8013184:	f7f7 f948 	bl	800a418 <rcl_publisher_is_valid_except_context>
 8013188:	2800      	cmp	r0, #0
 801318a:	d0f0      	beq.n	801316e <rcl_action_wait_set_add_action_server+0x22>
 801318c:	6820      	ldr	r0, [r4, #0]
 801318e:	3010      	adds	r0, #16
 8013190:	f7f7 f942 	bl	800a418 <rcl_publisher_is_valid_except_context>
 8013194:	2800      	cmp	r0, #0
 8013196:	d0ea      	beq.n	801316e <rcl_action_wait_set_add_action_server+0x22>
 8013198:	6821      	ldr	r1, [r4, #0]
 801319a:	4628      	mov	r0, r5
 801319c:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 80131a0:	f7ff fad0 	bl	8012744 <rcl_wait_set_add_service>
 80131a4:	2800      	cmp	r0, #0
 80131a6:	d1e4      	bne.n	8013172 <rcl_action_wait_set_add_action_server+0x26>
 80131a8:	6821      	ldr	r1, [r4, #0]
 80131aa:	4628      	mov	r0, r5
 80131ac:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 80131b0:	3104      	adds	r1, #4
 80131b2:	f7ff fac7 	bl	8012744 <rcl_wait_set_add_service>
 80131b6:	2800      	cmp	r0, #0
 80131b8:	d1db      	bne.n	8013172 <rcl_action_wait_set_add_action_server+0x26>
 80131ba:	6821      	ldr	r1, [r4, #0]
 80131bc:	4628      	mov	r0, r5
 80131be:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 80131c2:	3108      	adds	r1, #8
 80131c4:	f7ff fabe 	bl	8012744 <rcl_wait_set_add_service>
 80131c8:	2800      	cmp	r0, #0
 80131ca:	d1d2      	bne.n	8013172 <rcl_action_wait_set_add_action_server+0x26>
 80131cc:	6821      	ldr	r1, [r4, #0]
 80131ce:	4628      	mov	r0, r5
 80131d0:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 80131d4:	3114      	adds	r1, #20
 80131d6:	f7ff fa59 	bl	801268c <rcl_wait_set_add_timer>
 80131da:	2800      	cmp	r0, #0
 80131dc:	d1c9      	bne.n	8013172 <rcl_action_wait_set_add_action_server+0x26>
 80131de:	2e00      	cmp	r6, #0
 80131e0:	d0c7      	beq.n	8013172 <rcl_action_wait_set_add_action_server+0x26>
 80131e2:	6823      	ldr	r3, [r4, #0]
 80131e4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80131e8:	6033      	str	r3, [r6, #0]
 80131ea:	bd70      	pop	{r4, r5, r6, pc}
 80131ec:	f44f 7061 	mov.w	r0, #900	; 0x384
 80131f0:	4770      	bx	lr
 80131f2:	bf00      	nop

080131f4 <rcl_action_server_wait_set_get_entities_ready>:
 80131f4:	2800      	cmp	r0, #0
 80131f6:	d05a      	beq.n	80132ae <rcl_action_server_wait_set_get_entities_ready+0xba>
 80131f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131fa:	460c      	mov	r4, r1
 80131fc:	b161      	cbz	r1, 8013218 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80131fe:	4605      	mov	r5, r0
 8013200:	6808      	ldr	r0, [r1, #0]
 8013202:	b148      	cbz	r0, 8013218 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013204:	4616      	mov	r6, r2
 8013206:	461f      	mov	r7, r3
 8013208:	f7fe fb12 	bl	8011830 <rcl_service_is_valid>
 801320c:	b120      	cbz	r0, 8013218 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801320e:	6820      	ldr	r0, [r4, #0]
 8013210:	3004      	adds	r0, #4
 8013212:	f7fe fb0d 	bl	8011830 <rcl_service_is_valid>
 8013216:	b910      	cbnz	r0, 801321e <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8013218:	f640 0098 	movw	r0, #2200	; 0x898
 801321c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801321e:	6820      	ldr	r0, [r4, #0]
 8013220:	3008      	adds	r0, #8
 8013222:	f7fe fb05 	bl	8011830 <rcl_service_is_valid>
 8013226:	2800      	cmp	r0, #0
 8013228:	d0f6      	beq.n	8013218 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801322a:	6820      	ldr	r0, [r4, #0]
 801322c:	300c      	adds	r0, #12
 801322e:	f7f7 f8f3 	bl	800a418 <rcl_publisher_is_valid_except_context>
 8013232:	2800      	cmp	r0, #0
 8013234:	d0f0      	beq.n	8013218 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013236:	6820      	ldr	r0, [r4, #0]
 8013238:	3010      	adds	r0, #16
 801323a:	f7f7 f8ed 	bl	800a418 <rcl_publisher_is_valid_except_context>
 801323e:	2800      	cmp	r0, #0
 8013240:	d0ea      	beq.n	8013218 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013242:	b3be      	cbz	r6, 80132b4 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013244:	b3b7      	cbz	r7, 80132b4 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013246:	9b06      	ldr	r3, [sp, #24]
 8013248:	b3a3      	cbz	r3, 80132b4 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801324a:	9b07      	ldr	r3, [sp, #28]
 801324c:	b393      	cbz	r3, 80132b4 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801324e:	6821      	ldr	r1, [r4, #0]
 8013250:	692a      	ldr	r2, [r5, #16]
 8013252:	6a2c      	ldr	r4, [r5, #32]
 8013254:	f8d1 51e8 	ldr.w	r5, [r1, #488]	; 0x1e8
 8013258:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 801325c:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8013260:	f8d1 01e4 	ldr.w	r0, [r1, #484]	; 0x1e4
 8013264:	f8d1 51dc 	ldr.w	r5, [r1, #476]	; 0x1dc
 8013268:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801326c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8013270:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8013274:	1a64      	subs	r4, r4, r1
 8013276:	fab4 f484 	clz	r4, r4
 801327a:	0964      	lsrs	r4, r4, #5
 801327c:	7034      	strb	r4, [r6, #0]
 801327e:	1d0c      	adds	r4, r1, #4
 8013280:	1b1b      	subs	r3, r3, r4
 8013282:	fab3 f383 	clz	r3, r3
 8013286:	095b      	lsrs	r3, r3, #5
 8013288:	f101 0408 	add.w	r4, r1, #8
 801328c:	703b      	strb	r3, [r7, #0]
 801328e:	f101 0314 	add.w	r3, r1, #20
 8013292:	1b01      	subs	r1, r0, r4
 8013294:	1ad3      	subs	r3, r2, r3
 8013296:	fab1 f181 	clz	r1, r1
 801329a:	9a06      	ldr	r2, [sp, #24]
 801329c:	0949      	lsrs	r1, r1, #5
 801329e:	7011      	strb	r1, [r2, #0]
 80132a0:	fab3 f383 	clz	r3, r3
 80132a4:	9a07      	ldr	r2, [sp, #28]
 80132a6:	095b      	lsrs	r3, r3, #5
 80132a8:	2000      	movs	r0, #0
 80132aa:	7013      	strb	r3, [r2, #0]
 80132ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132ae:	f44f 7061 	mov.w	r0, #900	; 0x384
 80132b2:	4770      	bx	lr
 80132b4:	200b      	movs	r0, #11
 80132b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080132b8 <_execute_event_handler>:
 80132b8:	2002      	movs	r0, #2
 80132ba:	4770      	bx	lr

080132bc <_cancel_goal_event_handler>:
 80132bc:	2003      	movs	r0, #3
 80132be:	4770      	bx	lr

080132c0 <_succeed_event_handler>:
 80132c0:	2004      	movs	r0, #4
 80132c2:	4770      	bx	lr

080132c4 <_abort_event_handler>:
 80132c4:	2006      	movs	r0, #6
 80132c6:	4770      	bx	lr

080132c8 <_canceled_event_handler>:
 80132c8:	2005      	movs	r0, #5
 80132ca:	4770      	bx	lr

080132cc <rcl_action_transition_goal_state>:
 80132cc:	b2c2      	uxtb	r2, r0
 80132ce:	2a06      	cmp	r2, #6
 80132d0:	d80c      	bhi.n	80132ec <rcl_action_transition_goal_state+0x20>
 80132d2:	2904      	cmp	r1, #4
 80132d4:	d80a      	bhi.n	80132ec <rcl_action_transition_goal_state+0x20>
 80132d6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80132da:	b410      	push	{r4}
 80132dc:	1853      	adds	r3, r2, r1
 80132de:	4c06      	ldr	r4, [pc, #24]	; (80132f8 <rcl_action_transition_goal_state+0x2c>)
 80132e0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80132e4:	b123      	cbz	r3, 80132f0 <rcl_action_transition_goal_state+0x24>
 80132e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132ea:	4718      	bx	r3
 80132ec:	2000      	movs	r0, #0
 80132ee:	4770      	bx	lr
 80132f0:	2000      	movs	r0, #0
 80132f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132f6:	4770      	bx	lr
 80132f8:	08018c04 	.word	0x08018c04

080132fc <rcl_action_get_zero_initialized_cancel_response>:
 80132fc:	b510      	push	{r4, lr}
 80132fe:	4c07      	ldr	r4, [pc, #28]	; (801331c <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8013300:	4686      	mov	lr, r0
 8013302:	4684      	mov	ip, r0
 8013304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013306:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801330a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801330c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013310:	6823      	ldr	r3, [r4, #0]
 8013312:	f8cc 3000 	str.w	r3, [ip]
 8013316:	4670      	mov	r0, lr
 8013318:	bd10      	pop	{r4, pc}
 801331a:	bf00      	nop
 801331c:	08018c90 	.word	0x08018c90

08013320 <rclc_action_send_result_request>:
 8013320:	b1d0      	cbz	r0, 8013358 <rclc_action_send_result_request+0x38>
 8013322:	b500      	push	{lr}
 8013324:	4684      	mov	ip, r0
 8013326:	b087      	sub	sp, #28
 8013328:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801332c:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8013330:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8013334:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8013338:	f10d 0e08 	add.w	lr, sp, #8
 801333c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013340:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8013344:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8013348:	a902      	add	r1, sp, #8
 801334a:	3010      	adds	r0, #16
 801334c:	f7ff fbdc 	bl	8012b08 <rcl_action_send_result_request>
 8013350:	b920      	cbnz	r0, 801335c <rclc_action_send_result_request+0x3c>
 8013352:	b007      	add	sp, #28
 8013354:	f85d fb04 	ldr.w	pc, [sp], #4
 8013358:	200b      	movs	r0, #11
 801335a:	4770      	bx	lr
 801335c:	9001      	str	r0, [sp, #4]
 801335e:	f7f7 ffd3 	bl	800b308 <rcutils_reset_error>
 8013362:	9801      	ldr	r0, [sp, #4]
 8013364:	b007      	add	sp, #28
 8013366:	f85d fb04 	ldr.w	pc, [sp], #4
 801336a:	bf00      	nop

0801336c <rclc_action_take_goal_handle>:
 801336c:	b160      	cbz	r0, 8013388 <rclc_action_take_goal_handle+0x1c>
 801336e:	6883      	ldr	r3, [r0, #8]
 8013370:	b143      	cbz	r3, 8013384 <rclc_action_take_goal_handle+0x18>
 8013372:	6819      	ldr	r1, [r3, #0]
 8013374:	6081      	str	r1, [r0, #8]
 8013376:	2200      	movs	r2, #0
 8013378:	721a      	strb	r2, [r3, #8]
 801337a:	68c1      	ldr	r1, [r0, #12]
 801337c:	6019      	str	r1, [r3, #0]
 801337e:	621a      	str	r2, [r3, #32]
 8013380:	849a      	strh	r2, [r3, #36]	; 0x24
 8013382:	60c3      	str	r3, [r0, #12]
 8013384:	4618      	mov	r0, r3
 8013386:	4770      	bx	lr
 8013388:	4603      	mov	r3, r0
 801338a:	e7fb      	b.n	8013384 <rclc_action_take_goal_handle+0x18>

0801338c <rclc_action_remove_used_goal_handle>:
 801338c:	b180      	cbz	r0, 80133b0 <rclc_action_remove_used_goal_handle+0x24>
 801338e:	b179      	cbz	r1, 80133b0 <rclc_action_remove_used_goal_handle+0x24>
 8013390:	68c3      	ldr	r3, [r0, #12]
 8013392:	4299      	cmp	r1, r3
 8013394:	d00d      	beq.n	80133b2 <rclc_action_remove_used_goal_handle+0x26>
 8013396:	b12b      	cbz	r3, 80133a4 <rclc_action_remove_used_goal_handle+0x18>
 8013398:	681a      	ldr	r2, [r3, #0]
 801339a:	4291      	cmp	r1, r2
 801339c:	d003      	beq.n	80133a6 <rclc_action_remove_used_goal_handle+0x1a>
 801339e:	4613      	mov	r3, r2
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d1f9      	bne.n	8013398 <rclc_action_remove_used_goal_handle+0xc>
 80133a4:	4770      	bx	lr
 80133a6:	680a      	ldr	r2, [r1, #0]
 80133a8:	601a      	str	r2, [r3, #0]
 80133aa:	6883      	ldr	r3, [r0, #8]
 80133ac:	600b      	str	r3, [r1, #0]
 80133ae:	6081      	str	r1, [r0, #8]
 80133b0:	4770      	bx	lr
 80133b2:	680b      	ldr	r3, [r1, #0]
 80133b4:	60c3      	str	r3, [r0, #12]
 80133b6:	e7f8      	b.n	80133aa <rclc_action_remove_used_goal_handle+0x1e>

080133b8 <rclc_action_find_goal_handle_by_uuid>:
 80133b8:	b538      	push	{r3, r4, r5, lr}
 80133ba:	b180      	cbz	r0, 80133de <rclc_action_find_goal_handle_by_uuid+0x26>
 80133bc:	460d      	mov	r5, r1
 80133be:	b181      	cbz	r1, 80133e2 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80133c0:	68c4      	ldr	r4, [r0, #12]
 80133c2:	b914      	cbnz	r4, 80133ca <rclc_action_find_goal_handle_by_uuid+0x12>
 80133c4:	e009      	b.n	80133da <rclc_action_find_goal_handle_by_uuid+0x22>
 80133c6:	6824      	ldr	r4, [r4, #0]
 80133c8:	b13c      	cbz	r4, 80133da <rclc_action_find_goal_handle_by_uuid+0x22>
 80133ca:	f104 0009 	add.w	r0, r4, #9
 80133ce:	2210      	movs	r2, #16
 80133d0:	4629      	mov	r1, r5
 80133d2:	f003 ffef 	bl	80173b4 <memcmp>
 80133d6:	2800      	cmp	r0, #0
 80133d8:	d1f5      	bne.n	80133c6 <rclc_action_find_goal_handle_by_uuid+0xe>
 80133da:	4620      	mov	r0, r4
 80133dc:	bd38      	pop	{r3, r4, r5, pc}
 80133de:	4604      	mov	r4, r0
 80133e0:	e7fb      	b.n	80133da <rclc_action_find_goal_handle_by_uuid+0x22>
 80133e2:	460c      	mov	r4, r1
 80133e4:	e7f9      	b.n	80133da <rclc_action_find_goal_handle_by_uuid+0x22>
 80133e6:	bf00      	nop

080133e8 <rclc_action_find_first_handle_by_status>:
 80133e8:	b140      	cbz	r0, 80133fc <rclc_action_find_first_handle_by_status+0x14>
 80133ea:	68c0      	ldr	r0, [r0, #12]
 80133ec:	b910      	cbnz	r0, 80133f4 <rclc_action_find_first_handle_by_status+0xc>
 80133ee:	e005      	b.n	80133fc <rclc_action_find_first_handle_by_status+0x14>
 80133f0:	6800      	ldr	r0, [r0, #0]
 80133f2:	b118      	cbz	r0, 80133fc <rclc_action_find_first_handle_by_status+0x14>
 80133f4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80133f8:	428b      	cmp	r3, r1
 80133fa:	d1f9      	bne.n	80133f0 <rclc_action_find_first_handle_by_status+0x8>
 80133fc:	4770      	bx	lr
 80133fe:	bf00      	nop

08013400 <rclc_action_find_first_terminated_handle>:
 8013400:	b140      	cbz	r0, 8013414 <rclc_action_find_first_terminated_handle+0x14>
 8013402:	68c0      	ldr	r0, [r0, #12]
 8013404:	b910      	cbnz	r0, 801340c <rclc_action_find_first_terminated_handle+0xc>
 8013406:	e005      	b.n	8013414 <rclc_action_find_first_terminated_handle+0x14>
 8013408:	6800      	ldr	r0, [r0, #0]
 801340a:	b118      	cbz	r0, 8013414 <rclc_action_find_first_terminated_handle+0x14>
 801340c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8013410:	2b03      	cmp	r3, #3
 8013412:	ddf9      	ble.n	8013408 <rclc_action_find_first_terminated_handle+0x8>
 8013414:	4770      	bx	lr
 8013416:	bf00      	nop

08013418 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8013418:	b170      	cbz	r0, 8013438 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801341a:	68c0      	ldr	r0, [r0, #12]
 801341c:	b160      	cbz	r0, 8013438 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801341e:	b410      	push	{r4}
 8013420:	e001      	b.n	8013426 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8013422:	6800      	ldr	r0, [r0, #0]
 8013424:	b128      	cbz	r0, 8013432 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8013426:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 801342a:	4299      	cmp	r1, r3
 801342c:	bf08      	it	eq
 801342e:	4294      	cmpeq	r4, r2
 8013430:	d1f7      	bne.n	8013422 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8013432:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013436:	4770      	bx	lr
 8013438:	4770      	bx	lr
 801343a:	bf00      	nop

0801343c <rclc_action_find_handle_by_result_request_sequence_number>:
 801343c:	b170      	cbz	r0, 801345c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801343e:	68c0      	ldr	r0, [r0, #12]
 8013440:	b160      	cbz	r0, 801345c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8013442:	b410      	push	{r4}
 8013444:	e001      	b.n	801344a <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8013446:	6800      	ldr	r0, [r0, #0]
 8013448:	b128      	cbz	r0, 8013456 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801344a:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 801344e:	4299      	cmp	r1, r3
 8013450:	bf08      	it	eq
 8013452:	4294      	cmpeq	r4, r2
 8013454:	d1f7      	bne.n	8013446 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8013456:	f85d 4b04 	ldr.w	r4, [sp], #4
 801345a:	4770      	bx	lr
 801345c:	4770      	bx	lr
 801345e:	bf00      	nop

08013460 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8013460:	b170      	cbz	r0, 8013480 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8013462:	68c0      	ldr	r0, [r0, #12]
 8013464:	b160      	cbz	r0, 8013480 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8013466:	b410      	push	{r4}
 8013468:	e001      	b.n	801346e <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801346a:	6800      	ldr	r0, [r0, #0]
 801346c:	b128      	cbz	r0, 801347a <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801346e:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 8013472:	4299      	cmp	r1, r3
 8013474:	bf08      	it	eq
 8013476:	4294      	cmpeq	r4, r2
 8013478:	d1f7      	bne.n	801346a <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801347a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801347e:	4770      	bx	lr
 8013480:	4770      	bx	lr
 8013482:	bf00      	nop

08013484 <rclc_action_find_first_handle_with_goal_response>:
 8013484:	b140      	cbz	r0, 8013498 <rclc_action_find_first_handle_with_goal_response+0x14>
 8013486:	68c0      	ldr	r0, [r0, #12]
 8013488:	b910      	cbnz	r0, 8013490 <rclc_action_find_first_handle_with_goal_response+0xc>
 801348a:	e005      	b.n	8013498 <rclc_action_find_first_handle_with_goal_response+0x14>
 801348c:	6800      	ldr	r0, [r0, #0]
 801348e:	b118      	cbz	r0, 8013498 <rclc_action_find_first_handle_with_goal_response+0x14>
 8013490:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d0f9      	beq.n	801348c <rclc_action_find_first_handle_with_goal_response+0x8>
 8013498:	4770      	bx	lr
 801349a:	bf00      	nop

0801349c <rclc_action_find_first_handle_with_result_response>:
 801349c:	b140      	cbz	r0, 80134b0 <rclc_action_find_first_handle_with_result_response+0x14>
 801349e:	68c0      	ldr	r0, [r0, #12]
 80134a0:	b910      	cbnz	r0, 80134a8 <rclc_action_find_first_handle_with_result_response+0xc>
 80134a2:	e005      	b.n	80134b0 <rclc_action_find_first_handle_with_result_response+0x14>
 80134a4:	6800      	ldr	r0, [r0, #0]
 80134a6:	b118      	cbz	r0, 80134b0 <rclc_action_find_first_handle_with_result_response+0x14>
 80134a8:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d0f9      	beq.n	80134a4 <rclc_action_find_first_handle_with_result_response+0x8>
 80134b0:	4770      	bx	lr
 80134b2:	bf00      	nop

080134b4 <rclc_action_server_response_goal_request>:
 80134b4:	b198      	cbz	r0, 80134de <rclc_action_server_response_goal_request+0x2a>
 80134b6:	b510      	push	{r4, lr}
 80134b8:	6844      	ldr	r4, [r0, #4]
 80134ba:	b086      	sub	sp, #24
 80134bc:	2200      	movs	r2, #0
 80134be:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80134c2:	460b      	mov	r3, r1
 80134c4:	9205      	str	r2, [sp, #20]
 80134c6:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80134ca:	aa03      	add	r2, sp, #12
 80134cc:	f104 0010 	add.w	r0, r4, #16
 80134d0:	f88d 300c 	strb.w	r3, [sp, #12]
 80134d4:	f7ff fd4c 	bl	8012f70 <rcl_action_send_goal_response>
 80134d8:	b918      	cbnz	r0, 80134e2 <rclc_action_server_response_goal_request+0x2e>
 80134da:	b006      	add	sp, #24
 80134dc:	bd10      	pop	{r4, pc}
 80134de:	200b      	movs	r0, #11
 80134e0:	4770      	bx	lr
 80134e2:	9001      	str	r0, [sp, #4]
 80134e4:	f7f7 ff10 	bl	800b308 <rcutils_reset_error>
 80134e8:	9801      	ldr	r0, [sp, #4]
 80134ea:	b006      	add	sp, #24
 80134ec:	bd10      	pop	{r4, pc}
 80134ee:	bf00      	nop

080134f0 <rclc_action_server_goal_cancel_accept>:
 80134f0:	b310      	cbz	r0, 8013538 <rclc_action_server_goal_cancel_accept+0x48>
 80134f2:	b510      	push	{r4, lr}
 80134f4:	b090      	sub	sp, #64	; 0x40
 80134f6:	4604      	mov	r4, r0
 80134f8:	a806      	add	r0, sp, #24
 80134fa:	f7ff feff 	bl	80132fc <rcl_action_get_zero_initialized_cancel_response>
 80134fe:	2300      	movs	r3, #0
 8013500:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8013504:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8013508:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801350c:	f88d 3018 	strb.w	r3, [sp, #24]
 8013510:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8013514:	f8cd d01c 	str.w	sp, [sp, #28]
 8013518:	46ec      	mov	ip, sp
 801351a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801351e:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8013540 <rclc_action_server_goal_cancel_accept+0x50>
 8013522:	6860      	ldr	r0, [r4, #4]
 8013524:	aa06      	add	r2, sp, #24
 8013526:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801352a:	3010      	adds	r0, #16
 801352c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8013530:	f7ff fdd4 	bl	80130dc <rcl_action_send_cancel_response>
 8013534:	b010      	add	sp, #64	; 0x40
 8013536:	bd10      	pop	{r4, pc}
 8013538:	200b      	movs	r0, #11
 801353a:	4770      	bx	lr
 801353c:	f3af 8000 	nop.w
 8013540:	00000001 	.word	0x00000001
 8013544:	00000001 	.word	0x00000001

08013548 <rclc_action_server_goal_cancel_reject>:
 8013548:	b082      	sub	sp, #8
 801354a:	b530      	push	{r4, r5, lr}
 801354c:	b08b      	sub	sp, #44	; 0x2c
 801354e:	ac0e      	add	r4, sp, #56	; 0x38
 8013550:	e884 000c 	stmia.w	r4, {r2, r3}
 8013554:	b188      	cbz	r0, 801357a <rclc_action_server_goal_cancel_reject+0x32>
 8013556:	4604      	mov	r4, r0
 8013558:	a801      	add	r0, sp, #4
 801355a:	460d      	mov	r5, r1
 801355c:	f7ff fece 	bl	80132fc <rcl_action_get_zero_initialized_cancel_response>
 8013560:	aa01      	add	r2, sp, #4
 8013562:	a90e      	add	r1, sp, #56	; 0x38
 8013564:	f104 0010 	add.w	r0, r4, #16
 8013568:	f88d 5004 	strb.w	r5, [sp, #4]
 801356c:	f7ff fdb6 	bl	80130dc <rcl_action_send_cancel_response>
 8013570:	b00b      	add	sp, #44	; 0x2c
 8013572:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013576:	b002      	add	sp, #8
 8013578:	4770      	bx	lr
 801357a:	200b      	movs	r0, #11
 801357c:	b00b      	add	sp, #44	; 0x2c
 801357e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013582:	b002      	add	sp, #8
 8013584:	4770      	bx	lr
 8013586:	bf00      	nop

08013588 <__atomic_load_8>:
 8013588:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801358c:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8013590:	4a15      	ldr	r2, [pc, #84]	; (80135e8 <__atomic_load_8+0x60>)
 8013592:	4b16      	ldr	r3, [pc, #88]	; (80135ec <__atomic_load_8+0x64>)
 8013594:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013598:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801359c:	fb02 f101 	mul.w	r1, r2, r1
 80135a0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80135a4:	fba3 2301 	umull	r2, r3, r3, r1
 80135a8:	091b      	lsrs	r3, r3, #4
 80135aa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80135ae:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80135b2:	b4d0      	push	{r4, r6, r7}
 80135b4:	4c0e      	ldr	r4, [pc, #56]	; (80135f0 <__atomic_load_8+0x68>)
 80135b6:	1ac9      	subs	r1, r1, r3
 80135b8:	1862      	adds	r2, r4, r1
 80135ba:	f04f 0c01 	mov.w	ip, #1
 80135be:	e8d2 3f4f 	ldrexb	r3, [r2]
 80135c2:	e8c2 cf46 	strexb	r6, ip, [r2]
 80135c6:	2e00      	cmp	r6, #0
 80135c8:	d1f9      	bne.n	80135be <__atomic_load_8+0x36>
 80135ca:	f3bf 8f5b 	dmb	ish
 80135ce:	b2db      	uxtb	r3, r3
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d1f4      	bne.n	80135be <__atomic_load_8+0x36>
 80135d4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80135d8:	f3bf 8f5b 	dmb	ish
 80135dc:	5463      	strb	r3, [r4, r1]
 80135de:	4630      	mov	r0, r6
 80135e0:	4639      	mov	r1, r7
 80135e2:	bcd0      	pop	{r4, r6, r7}
 80135e4:	4770      	bx	lr
 80135e6:	bf00      	nop
 80135e8:	27d4eb2d 	.word	0x27d4eb2d
 80135ec:	b21642c9 	.word	0xb21642c9
 80135f0:	20010bf0 	.word	0x20010bf0

080135f4 <__atomic_store_8>:
 80135f4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80135f8:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80135fc:	b570      	push	{r4, r5, r6, lr}
 80135fe:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013602:	4c14      	ldr	r4, [pc, #80]	; (8013654 <__atomic_store_8+0x60>)
 8013604:	4d14      	ldr	r5, [pc, #80]	; (8013658 <__atomic_store_8+0x64>)
 8013606:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801360a:	fb04 f101 	mul.w	r1, r4, r1
 801360e:	4c13      	ldr	r4, [pc, #76]	; (801365c <__atomic_store_8+0x68>)
 8013610:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013614:	fba4 4e01 	umull	r4, lr, r4, r1
 8013618:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801361c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8013620:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8013624:	eba1 0e0e 	sub.w	lr, r1, lr
 8013628:	eb05 0c0e 	add.w	ip, r5, lr
 801362c:	f04f 0401 	mov.w	r4, #1
 8013630:	e8dc 1f4f 	ldrexb	r1, [ip]
 8013634:	e8cc 4f46 	strexb	r6, r4, [ip]
 8013638:	2e00      	cmp	r6, #0
 801363a:	d1f9      	bne.n	8013630 <__atomic_store_8+0x3c>
 801363c:	f3bf 8f5b 	dmb	ish
 8013640:	b2c9      	uxtb	r1, r1
 8013642:	2900      	cmp	r1, #0
 8013644:	d1f4      	bne.n	8013630 <__atomic_store_8+0x3c>
 8013646:	e9c0 2300 	strd	r2, r3, [r0]
 801364a:	f3bf 8f5b 	dmb	ish
 801364e:	f805 100e 	strb.w	r1, [r5, lr]
 8013652:	bd70      	pop	{r4, r5, r6, pc}
 8013654:	27d4eb2d 	.word	0x27d4eb2d
 8013658:	20010bf0 	.word	0x20010bf0
 801365c:	b21642c9 	.word	0xb21642c9

08013660 <__atomic_exchange_8>:
 8013660:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8013664:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8013668:	4916      	ldr	r1, [pc, #88]	; (80136c4 <__atomic_exchange_8+0x64>)
 801366a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801366e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8013672:	fb01 fc0c 	mul.w	ip, r1, ip
 8013676:	4914      	ldr	r1, [pc, #80]	; (80136c8 <__atomic_exchange_8+0x68>)
 8013678:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801367c:	b570      	push	{r4, r5, r6, lr}
 801367e:	4605      	mov	r5, r0
 8013680:	fba1 010c 	umull	r0, r1, r1, ip
 8013684:	0909      	lsrs	r1, r1, #4
 8013686:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801368a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 801368e:	4e0f      	ldr	r6, [pc, #60]	; (80136cc <__atomic_exchange_8+0x6c>)
 8013690:	ebac 0c01 	sub.w	ip, ip, r1
 8013694:	eb06 010c 	add.w	r1, r6, ip
 8013698:	f04f 0e01 	mov.w	lr, #1
 801369c:	e8d1 4f4f 	ldrexb	r4, [r1]
 80136a0:	e8c1 ef40 	strexb	r0, lr, [r1]
 80136a4:	2800      	cmp	r0, #0
 80136a6:	d1f9      	bne.n	801369c <__atomic_exchange_8+0x3c>
 80136a8:	f3bf 8f5b 	dmb	ish
 80136ac:	b2e4      	uxtb	r4, r4
 80136ae:	2c00      	cmp	r4, #0
 80136b0:	d1f4      	bne.n	801369c <__atomic_exchange_8+0x3c>
 80136b2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80136b6:	e9c5 2300 	strd	r2, r3, [r5]
 80136ba:	f3bf 8f5b 	dmb	ish
 80136be:	f806 400c 	strb.w	r4, [r6, ip]
 80136c2:	bd70      	pop	{r4, r5, r6, pc}
 80136c4:	27d4eb2d 	.word	0x27d4eb2d
 80136c8:	b21642c9 	.word	0xb21642c9
 80136cc:	20010bf0 	.word	0x20010bf0

080136d0 <rcutils_get_env>:
 80136d0:	b168      	cbz	r0, 80136ee <rcutils_get_env+0x1e>
 80136d2:	b510      	push	{r4, lr}
 80136d4:	460c      	mov	r4, r1
 80136d6:	b129      	cbz	r1, 80136e4 <rcutils_get_env+0x14>
 80136d8:	f003 fac4 	bl	8016c64 <getenv>
 80136dc:	b120      	cbz	r0, 80136e8 <rcutils_get_env+0x18>
 80136de:	6020      	str	r0, [r4, #0]
 80136e0:	2000      	movs	r0, #0
 80136e2:	bd10      	pop	{r4, pc}
 80136e4:	4803      	ldr	r0, [pc, #12]	; (80136f4 <rcutils_get_env+0x24>)
 80136e6:	bd10      	pop	{r4, pc}
 80136e8:	4b03      	ldr	r3, [pc, #12]	; (80136f8 <rcutils_get_env+0x28>)
 80136ea:	6023      	str	r3, [r4, #0]
 80136ec:	bd10      	pop	{r4, pc}
 80136ee:	4803      	ldr	r0, [pc, #12]	; (80136fc <rcutils_get_env+0x2c>)
 80136f0:	4770      	bx	lr
 80136f2:	bf00      	nop
 80136f4:	08018cd0 	.word	0x08018cd0
 80136f8:	08018df4 	.word	0x08018df4
 80136fc:	08018cb4 	.word	0x08018cb4

08013700 <rcutils_is_directory>:
 8013700:	2000      	movs	r0, #0
 8013702:	4770      	bx	lr

08013704 <rcutils_join_path>:
 8013704:	b082      	sub	sp, #8
 8013706:	e88d 000c 	stmia.w	sp, {r2, r3}
 801370a:	2000      	movs	r0, #0
 801370c:	b002      	add	sp, #8
 801370e:	4770      	bx	lr

08013710 <rcutils_to_native_path>:
 8013710:	b084      	sub	sp, #16
 8013712:	a801      	add	r0, sp, #4
 8013714:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8013718:	b004      	add	sp, #16
 801371a:	2000      	movs	r0, #0
 801371c:	4770      	bx	lr
 801371e:	bf00      	nop

08013720 <rcutils_format_string_limit>:
 8013720:	b40f      	push	{r0, r1, r2, r3}
 8013722:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013724:	b083      	sub	sp, #12
 8013726:	ac08      	add	r4, sp, #32
 8013728:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801372a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801372e:	b34e      	cbz	r6, 8013784 <rcutils_format_string_limit+0x64>
 8013730:	a808      	add	r0, sp, #32
 8013732:	f7f7 fdc5 	bl	800b2c0 <rcutils_allocator_is_valid>
 8013736:	b328      	cbz	r0, 8013784 <rcutils_format_string_limit+0x64>
 8013738:	2100      	movs	r1, #0
 801373a:	ab0f      	add	r3, sp, #60	; 0x3c
 801373c:	4632      	mov	r2, r6
 801373e:	4608      	mov	r0, r1
 8013740:	e9cd 3300 	strd	r3, r3, [sp]
 8013744:	f000 f8f4 	bl	8013930 <rcutils_vsnprintf>
 8013748:	1c43      	adds	r3, r0, #1
 801374a:	4605      	mov	r5, r0
 801374c:	d01a      	beq.n	8013784 <rcutils_format_string_limit+0x64>
 801374e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013750:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013752:	1c47      	adds	r7, r0, #1
 8013754:	429f      	cmp	r7, r3
 8013756:	bf84      	itt	hi
 8013758:	461f      	movhi	r7, r3
 801375a:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 801375e:	4638      	mov	r0, r7
 8013760:	9b08      	ldr	r3, [sp, #32]
 8013762:	4798      	blx	r3
 8013764:	4604      	mov	r4, r0
 8013766:	b168      	cbz	r0, 8013784 <rcutils_format_string_limit+0x64>
 8013768:	9b01      	ldr	r3, [sp, #4]
 801376a:	4632      	mov	r2, r6
 801376c:	4639      	mov	r1, r7
 801376e:	f000 f8df 	bl	8013930 <rcutils_vsnprintf>
 8013772:	2800      	cmp	r0, #0
 8013774:	db02      	blt.n	801377c <rcutils_format_string_limit+0x5c>
 8013776:	2300      	movs	r3, #0
 8013778:	5563      	strb	r3, [r4, r5]
 801377a:	e004      	b.n	8013786 <rcutils_format_string_limit+0x66>
 801377c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801377e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013780:	4620      	mov	r0, r4
 8013782:	4798      	blx	r3
 8013784:	2400      	movs	r4, #0
 8013786:	4620      	mov	r0, r4
 8013788:	b003      	add	sp, #12
 801378a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801378e:	b004      	add	sp, #16
 8013790:	4770      	bx	lr
 8013792:	bf00      	nop

08013794 <rcutils_repl_str>:
 8013794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013798:	ed2d 8b02 	vpush	{d8}
 801379c:	b087      	sub	sp, #28
 801379e:	4680      	mov	r8, r0
 80137a0:	4608      	mov	r0, r1
 80137a2:	f8cd 8004 	str.w	r8, [sp, #4]
 80137a6:	ee08 2a10 	vmov	s16, r2
 80137aa:	468a      	mov	sl, r1
 80137ac:	4699      	mov	r9, r3
 80137ae:	f7ec fd21 	bl	80001f4 <strlen>
 80137b2:	2600      	movs	r6, #0
 80137b4:	4647      	mov	r7, r8
 80137b6:	9002      	str	r0, [sp, #8]
 80137b8:	46b3      	mov	fp, r6
 80137ba:	2510      	movs	r5, #16
 80137bc:	46b0      	mov	r8, r6
 80137be:	e01d      	b.n	80137fc <rcutils_repl_str+0x68>
 80137c0:	f10b 0b01 	add.w	fp, fp, #1
 80137c4:	455e      	cmp	r6, fp
 80137c6:	d211      	bcs.n	80137ec <rcutils_repl_str+0x58>
 80137c8:	442e      	add	r6, r5
 80137ca:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80137ce:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80137d2:	00b1      	lsls	r1, r6, #2
 80137d4:	4798      	blx	r3
 80137d6:	2800      	cmp	r0, #0
 80137d8:	f000 8088 	beq.w	80138ec <rcutils_repl_str+0x158>
 80137dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80137e0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80137e4:	4680      	mov	r8, r0
 80137e6:	bf28      	it	cs
 80137e8:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 80137ec:	9a01      	ldr	r2, [sp, #4]
 80137ee:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80137f2:	1aa2      	subs	r2, r4, r2
 80137f4:	f843 2c04 	str.w	r2, [r3, #-4]
 80137f8:	9b02      	ldr	r3, [sp, #8]
 80137fa:	18e7      	adds	r7, r4, r3
 80137fc:	4651      	mov	r1, sl
 80137fe:	4638      	mov	r0, r7
 8013800:	f003 fe29 	bl	8017456 <strstr>
 8013804:	4604      	mov	r4, r0
 8013806:	4640      	mov	r0, r8
 8013808:	2c00      	cmp	r4, #0
 801380a:	d1d9      	bne.n	80137c0 <rcutils_repl_str+0x2c>
 801380c:	46b8      	mov	r8, r7
 801380e:	4607      	mov	r7, r0
 8013810:	4640      	mov	r0, r8
 8013812:	f7ec fcef 	bl	80001f4 <strlen>
 8013816:	9b01      	ldr	r3, [sp, #4]
 8013818:	eba8 0303 	sub.w	r3, r8, r3
 801381c:	181c      	adds	r4, r3, r0
 801381e:	9404      	str	r4, [sp, #16]
 8013820:	f1bb 0f00 	cmp.w	fp, #0
 8013824:	d04a      	beq.n	80138bc <rcutils_repl_str+0x128>
 8013826:	ee18 0a10 	vmov	r0, s16
 801382a:	f7ec fce3 	bl	80001f4 <strlen>
 801382e:	9b02      	ldr	r3, [sp, #8]
 8013830:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013834:	1ac3      	subs	r3, r0, r3
 8013836:	fb0b 4303 	mla	r3, fp, r3, r4
 801383a:	461a      	mov	r2, r3
 801383c:	9305      	str	r3, [sp, #20]
 801383e:	4606      	mov	r6, r0
 8013840:	f8d9 3000 	ldr.w	r3, [r9]
 8013844:	1c50      	adds	r0, r2, #1
 8013846:	4798      	blx	r3
 8013848:	9003      	str	r0, [sp, #12]
 801384a:	2800      	cmp	r0, #0
 801384c:	d04f      	beq.n	80138ee <rcutils_repl_str+0x15a>
 801384e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013852:	683a      	ldr	r2, [r7, #0]
 8013854:	4641      	mov	r1, r8
 8013856:	f003 fef6 	bl	8017646 <memcpy>
 801385a:	683d      	ldr	r5, [r7, #0]
 801385c:	9b03      	ldr	r3, [sp, #12]
 801385e:	9701      	str	r7, [sp, #4]
 8013860:	46ba      	mov	sl, r7
 8013862:	441d      	add	r5, r3
 8013864:	9f02      	ldr	r7, [sp, #8]
 8013866:	f8cd 9008 	str.w	r9, [sp, #8]
 801386a:	2401      	movs	r4, #1
 801386c:	46d1      	mov	r9, sl
 801386e:	ee18 aa10 	vmov	sl, s16
 8013872:	e00a      	b.n	801388a <rcutils_repl_str+0xf6>
 8013874:	f8d9 5000 	ldr.w	r5, [r9]
 8013878:	1aaa      	subs	r2, r5, r2
 801387a:	1885      	adds	r5, r0, r2
 801387c:	f003 fee3 	bl	8017646 <memcpy>
 8013880:	45a3      	cmp	fp, r4
 8013882:	f104 0201 	add.w	r2, r4, #1
 8013886:	d935      	bls.n	80138f4 <rcutils_repl_str+0x160>
 8013888:	4614      	mov	r4, r2
 801388a:	4632      	mov	r2, r6
 801388c:	4651      	mov	r1, sl
 801388e:	4628      	mov	r0, r5
 8013890:	f003 fed9 	bl	8017646 <memcpy>
 8013894:	f859 2b04 	ldr.w	r2, [r9], #4
 8013898:	45a3      	cmp	fp, r4
 801389a:	443a      	add	r2, r7
 801389c:	eb05 0006 	add.w	r0, r5, r6
 80138a0:	eb08 0102 	add.w	r1, r8, r2
 80138a4:	d1e6      	bne.n	8013874 <rcutils_repl_str+0xe0>
 80138a6:	9b04      	ldr	r3, [sp, #16]
 80138a8:	1a9a      	subs	r2, r3, r2
 80138aa:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80138ae:	f003 feca 	bl	8017646 <memcpy>
 80138b2:	9a03      	ldr	r2, [sp, #12]
 80138b4:	9905      	ldr	r1, [sp, #20]
 80138b6:	2300      	movs	r3, #0
 80138b8:	5453      	strb	r3, [r2, r1]
 80138ba:	e00b      	b.n	80138d4 <rcutils_repl_str+0x140>
 80138bc:	4620      	mov	r0, r4
 80138be:	f8d9 3000 	ldr.w	r3, [r9]
 80138c2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80138c6:	3001      	adds	r0, #1
 80138c8:	4798      	blx	r3
 80138ca:	9003      	str	r0, [sp, #12]
 80138cc:	b110      	cbz	r0, 80138d4 <rcutils_repl_str+0x140>
 80138ce:	9901      	ldr	r1, [sp, #4]
 80138d0:	f003 feb1 	bl	8017636 <strcpy>
 80138d4:	4638      	mov	r0, r7
 80138d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80138da:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80138de:	4798      	blx	r3
 80138e0:	9803      	ldr	r0, [sp, #12]
 80138e2:	b007      	add	sp, #28
 80138e4:	ecbd 8b02 	vpop	{d8}
 80138e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ec:	4647      	mov	r7, r8
 80138ee:	2300      	movs	r3, #0
 80138f0:	9303      	str	r3, [sp, #12]
 80138f2:	e7ef      	b.n	80138d4 <rcutils_repl_str+0x140>
 80138f4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80138f8:	e7db      	b.n	80138b2 <rcutils_repl_str+0x11e>
 80138fa:	bf00      	nop

080138fc <rcutils_snprintf>:
 80138fc:	b40c      	push	{r2, r3}
 80138fe:	b530      	push	{r4, r5, lr}
 8013900:	b083      	sub	sp, #12
 8013902:	ab06      	add	r3, sp, #24
 8013904:	f853 2b04 	ldr.w	r2, [r3], #4
 8013908:	9301      	str	r3, [sp, #4]
 801390a:	b152      	cbz	r2, 8013922 <rcutils_snprintf+0x26>
 801390c:	b138      	cbz	r0, 801391e <rcutils_snprintf+0x22>
 801390e:	b141      	cbz	r1, 8013922 <rcutils_snprintf+0x26>
 8013910:	f003 fd42 	bl	8017398 <vsniprintf>
 8013914:	b003      	add	sp, #12
 8013916:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801391a:	b002      	add	sp, #8
 801391c:	4770      	bx	lr
 801391e:	2900      	cmp	r1, #0
 8013920:	d0f6      	beq.n	8013910 <rcutils_snprintf+0x14>
 8013922:	f003 fe5b 	bl	80175dc <__errno>
 8013926:	2316      	movs	r3, #22
 8013928:	6003      	str	r3, [r0, #0]
 801392a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801392e:	e7f1      	b.n	8013914 <rcutils_snprintf+0x18>

08013930 <rcutils_vsnprintf>:
 8013930:	b570      	push	{r4, r5, r6, lr}
 8013932:	b13a      	cbz	r2, 8013944 <rcutils_vsnprintf+0x14>
 8013934:	b120      	cbz	r0, 8013940 <rcutils_vsnprintf+0x10>
 8013936:	b129      	cbz	r1, 8013944 <rcutils_vsnprintf+0x14>
 8013938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801393c:	f003 bd2c 	b.w	8017398 <vsniprintf>
 8013940:	2900      	cmp	r1, #0
 8013942:	d0f9      	beq.n	8013938 <rcutils_vsnprintf+0x8>
 8013944:	f003 fe4a 	bl	80175dc <__errno>
 8013948:	2316      	movs	r3, #22
 801394a:	6003      	str	r3, [r0, #0]
 801394c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013950:	bd70      	pop	{r4, r5, r6, pc}
 8013952:	bf00      	nop

08013954 <rcutils_strdup>:
 8013954:	b084      	sub	sp, #16
 8013956:	b570      	push	{r4, r5, r6, lr}
 8013958:	b082      	sub	sp, #8
 801395a:	ac07      	add	r4, sp, #28
 801395c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8013960:	4605      	mov	r5, r0
 8013962:	b1b0      	cbz	r0, 8013992 <rcutils_strdup+0x3e>
 8013964:	f7ec fc46 	bl	80001f4 <strlen>
 8013968:	1c42      	adds	r2, r0, #1
 801396a:	9b07      	ldr	r3, [sp, #28]
 801396c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801396e:	9201      	str	r2, [sp, #4]
 8013970:	4606      	mov	r6, r0
 8013972:	4610      	mov	r0, r2
 8013974:	4798      	blx	r3
 8013976:	4604      	mov	r4, r0
 8013978:	b128      	cbz	r0, 8013986 <rcutils_strdup+0x32>
 801397a:	9a01      	ldr	r2, [sp, #4]
 801397c:	4629      	mov	r1, r5
 801397e:	f003 fe62 	bl	8017646 <memcpy>
 8013982:	2300      	movs	r3, #0
 8013984:	55a3      	strb	r3, [r4, r6]
 8013986:	4620      	mov	r0, r4
 8013988:	b002      	add	sp, #8
 801398a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801398e:	b004      	add	sp, #16
 8013990:	4770      	bx	lr
 8013992:	4604      	mov	r4, r0
 8013994:	e7f7      	b.n	8013986 <rcutils_strdup+0x32>
 8013996:	bf00      	nop

08013998 <rcutils_strndup>:
 8013998:	b082      	sub	sp, #8
 801399a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801399c:	ac06      	add	r4, sp, #24
 801399e:	e884 000c 	stmia.w	r4, {r2, r3}
 80139a2:	4605      	mov	r5, r0
 80139a4:	b188      	cbz	r0, 80139ca <rcutils_strndup+0x32>
 80139a6:	1c4f      	adds	r7, r1, #1
 80139a8:	460e      	mov	r6, r1
 80139aa:	4638      	mov	r0, r7
 80139ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80139ae:	4790      	blx	r2
 80139b0:	4604      	mov	r4, r0
 80139b2:	b128      	cbz	r0, 80139c0 <rcutils_strndup+0x28>
 80139b4:	463a      	mov	r2, r7
 80139b6:	4629      	mov	r1, r5
 80139b8:	f003 fe45 	bl	8017646 <memcpy>
 80139bc:	2300      	movs	r3, #0
 80139be:	55a3      	strb	r3, [r4, r6]
 80139c0:	4620      	mov	r0, r4
 80139c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80139c6:	b002      	add	sp, #8
 80139c8:	4770      	bx	lr
 80139ca:	4604      	mov	r4, r0
 80139cc:	e7f8      	b.n	80139c0 <rcutils_strndup+0x28>
 80139ce:	bf00      	nop

080139d0 <rcutils_get_zero_initialized_string_map>:
 80139d0:	4b01      	ldr	r3, [pc, #4]	; (80139d8 <rcutils_get_zero_initialized_string_map+0x8>)
 80139d2:	2000      	movs	r0, #0
 80139d4:	6018      	str	r0, [r3, #0]
 80139d6:	4770      	bx	lr
 80139d8:	20010c08 	.word	0x20010c08

080139dc <rcutils_string_map_reserve>:
 80139dc:	2800      	cmp	r0, #0
 80139de:	d05f      	beq.n	8013aa0 <rcutils_string_map_reserve+0xc4>
 80139e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139e4:	460c      	mov	r4, r1
 80139e6:	6801      	ldr	r1, [r0, #0]
 80139e8:	b082      	sub	sp, #8
 80139ea:	4605      	mov	r5, r0
 80139ec:	b129      	cbz	r1, 80139fa <rcutils_string_map_reserve+0x1e>
 80139ee:	68cb      	ldr	r3, [r1, #12]
 80139f0:	42a3      	cmp	r3, r4
 80139f2:	d906      	bls.n	8013a02 <rcutils_string_map_reserve+0x26>
 80139f4:	461c      	mov	r4, r3
 80139f6:	2900      	cmp	r1, #0
 80139f8:	d1f9      	bne.n	80139ee <rcutils_string_map_reserve+0x12>
 80139fa:	201f      	movs	r0, #31
 80139fc:	b002      	add	sp, #8
 80139fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a02:	688b      	ldr	r3, [r1, #8]
 8013a04:	42a3      	cmp	r3, r4
 8013a06:	d047      	beq.n	8013a98 <rcutils_string_map_reserve+0xbc>
 8013a08:	6a0e      	ldr	r6, [r1, #32]
 8013a0a:	2c00      	cmp	r4, #0
 8013a0c:	d034      	beq.n	8013a78 <rcutils_string_map_reserve+0x9c>
 8013a0e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8013a12:	d243      	bcs.n	8013a9c <rcutils_string_map_reserve+0xc0>
 8013a14:	00a7      	lsls	r7, r4, #2
 8013a16:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8013a1a:	6808      	ldr	r0, [r1, #0]
 8013a1c:	4632      	mov	r2, r6
 8013a1e:	4639      	mov	r1, r7
 8013a20:	47c0      	blx	r8
 8013a22:	2800      	cmp	r0, #0
 8013a24:	d03a      	beq.n	8013a9c <rcutils_string_map_reserve+0xc0>
 8013a26:	682b      	ldr	r3, [r5, #0]
 8013a28:	4632      	mov	r2, r6
 8013a2a:	6018      	str	r0, [r3, #0]
 8013a2c:	4639      	mov	r1, r7
 8013a2e:	6858      	ldr	r0, [r3, #4]
 8013a30:	47c0      	blx	r8
 8013a32:	2800      	cmp	r0, #0
 8013a34:	d032      	beq.n	8013a9c <rcutils_string_map_reserve+0xc0>
 8013a36:	682d      	ldr	r5, [r5, #0]
 8013a38:	68ab      	ldr	r3, [r5, #8]
 8013a3a:	6068      	str	r0, [r5, #4]
 8013a3c:	42a3      	cmp	r3, r4
 8013a3e:	d226      	bcs.n	8013a8e <rcutils_string_map_reserve+0xb2>
 8013a40:	682a      	ldr	r2, [r5, #0]
 8013a42:	eb00 0c07 	add.w	ip, r0, r7
 8013a46:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8013a4a:	45e6      	cmp	lr, ip
 8013a4c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8013a50:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8013a54:	d203      	bcs.n	8013a5e <rcutils_string_map_reserve+0x82>
 8013a56:	eb02 0c07 	add.w	ip, r2, r7
 8013a5a:	4566      	cmp	r6, ip
 8013a5c:	d322      	bcc.n	8013aa4 <rcutils_string_map_reserve+0xc8>
 8013a5e:	1ae3      	subs	r3, r4, r3
 8013a60:	009a      	lsls	r2, r3, #2
 8013a62:	4670      	mov	r0, lr
 8013a64:	2100      	movs	r1, #0
 8013a66:	9201      	str	r2, [sp, #4]
 8013a68:	f003 fcce 	bl	8017408 <memset>
 8013a6c:	9a01      	ldr	r2, [sp, #4]
 8013a6e:	2100      	movs	r1, #0
 8013a70:	4630      	mov	r0, r6
 8013a72:	f003 fcc9 	bl	8017408 <memset>
 8013a76:	e00a      	b.n	8013a8e <rcutils_string_map_reserve+0xb2>
 8013a78:	694f      	ldr	r7, [r1, #20]
 8013a7a:	6808      	ldr	r0, [r1, #0]
 8013a7c:	4631      	mov	r1, r6
 8013a7e:	47b8      	blx	r7
 8013a80:	682b      	ldr	r3, [r5, #0]
 8013a82:	4631      	mov	r1, r6
 8013a84:	6858      	ldr	r0, [r3, #4]
 8013a86:	601c      	str	r4, [r3, #0]
 8013a88:	47b8      	blx	r7
 8013a8a:	682d      	ldr	r5, [r5, #0]
 8013a8c:	606c      	str	r4, [r5, #4]
 8013a8e:	2000      	movs	r0, #0
 8013a90:	60ac      	str	r4, [r5, #8]
 8013a92:	b002      	add	sp, #8
 8013a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a98:	2000      	movs	r0, #0
 8013a9a:	e7af      	b.n	80139fc <rcutils_string_map_reserve+0x20>
 8013a9c:	200a      	movs	r0, #10
 8013a9e:	e7ad      	b.n	80139fc <rcutils_string_map_reserve+0x20>
 8013aa0:	200b      	movs	r0, #11
 8013aa2:	4770      	bx	lr
 8013aa4:	1f0b      	subs	r3, r1, #4
 8013aa6:	4418      	add	r0, r3
 8013aa8:	4413      	add	r3, r2
 8013aaa:	3a04      	subs	r2, #4
 8013aac:	4417      	add	r7, r2
 8013aae:	2200      	movs	r2, #0
 8013ab0:	f843 2f04 	str.w	r2, [r3, #4]!
 8013ab4:	42bb      	cmp	r3, r7
 8013ab6:	f840 2f04 	str.w	r2, [r0, #4]!
 8013aba:	d1f9      	bne.n	8013ab0 <rcutils_string_map_reserve+0xd4>
 8013abc:	e7e7      	b.n	8013a8e <rcutils_string_map_reserve+0xb2>
 8013abe:	bf00      	nop

08013ac0 <rcutils_string_map_init>:
 8013ac0:	b082      	sub	sp, #8
 8013ac2:	b570      	push	{r4, r5, r6, lr}
 8013ac4:	ac04      	add	r4, sp, #16
 8013ac6:	e884 000c 	stmia.w	r4, {r2, r3}
 8013aca:	b380      	cbz	r0, 8013b2e <rcutils_string_map_init+0x6e>
 8013acc:	6806      	ldr	r6, [r0, #0]
 8013ace:	4604      	mov	r4, r0
 8013ad0:	b12e      	cbz	r6, 8013ade <rcutils_string_map_init+0x1e>
 8013ad2:	251e      	movs	r5, #30
 8013ad4:	4628      	mov	r0, r5
 8013ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ada:	b002      	add	sp, #8
 8013adc:	4770      	bx	lr
 8013ade:	a804      	add	r0, sp, #16
 8013ae0:	460d      	mov	r5, r1
 8013ae2:	f7f7 fbed 	bl	800b2c0 <rcutils_allocator_is_valid>
 8013ae6:	b310      	cbz	r0, 8013b2e <rcutils_string_map_init+0x6e>
 8013ae8:	9b04      	ldr	r3, [sp, #16]
 8013aea:	9908      	ldr	r1, [sp, #32]
 8013aec:	2024      	movs	r0, #36	; 0x24
 8013aee:	4798      	blx	r3
 8013af0:	6020      	str	r0, [r4, #0]
 8013af2:	b310      	cbz	r0, 8013b3a <rcutils_string_map_init+0x7a>
 8013af4:	f10d 0e10 	add.w	lr, sp, #16
 8013af8:	e9c0 6600 	strd	r6, r6, [r0]
 8013afc:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8013b00:	f100 0c10 	add.w	ip, r0, #16
 8013b04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013b08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b0c:	f8de 3000 	ldr.w	r3, [lr]
 8013b10:	f8cc 3000 	str.w	r3, [ip]
 8013b14:	4629      	mov	r1, r5
 8013b16:	4620      	mov	r0, r4
 8013b18:	f7ff ff60 	bl	80139dc <rcutils_string_map_reserve>
 8013b1c:	4605      	mov	r5, r0
 8013b1e:	2800      	cmp	r0, #0
 8013b20:	d0d8      	beq.n	8013ad4 <rcutils_string_map_init+0x14>
 8013b22:	9b05      	ldr	r3, [sp, #20]
 8013b24:	9908      	ldr	r1, [sp, #32]
 8013b26:	6820      	ldr	r0, [r4, #0]
 8013b28:	4798      	blx	r3
 8013b2a:	6026      	str	r6, [r4, #0]
 8013b2c:	e7d2      	b.n	8013ad4 <rcutils_string_map_init+0x14>
 8013b2e:	250b      	movs	r5, #11
 8013b30:	4628      	mov	r0, r5
 8013b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b36:	b002      	add	sp, #8
 8013b38:	4770      	bx	lr
 8013b3a:	250a      	movs	r5, #10
 8013b3c:	e7ca      	b.n	8013ad4 <rcutils_string_map_init+0x14>
 8013b3e:	bf00      	nop

08013b40 <rcutils_string_map_fini>:
 8013b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b44:	b082      	sub	sp, #8
 8013b46:	2800      	cmp	r0, #0
 8013b48:	d03a      	beq.n	8013bc0 <rcutils_string_map_fini+0x80>
 8013b4a:	6804      	ldr	r4, [r0, #0]
 8013b4c:	4606      	mov	r6, r0
 8013b4e:	2c00      	cmp	r4, #0
 8013b50:	d032      	beq.n	8013bb8 <rcutils_string_map_fini+0x78>
 8013b52:	68a3      	ldr	r3, [r4, #8]
 8013b54:	b32b      	cbz	r3, 8013ba2 <rcutils_string_map_fini+0x62>
 8013b56:	2500      	movs	r5, #0
 8013b58:	6822      	ldr	r2, [r4, #0]
 8013b5a:	462f      	mov	r7, r5
 8013b5c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8013b60:	b1e0      	cbz	r0, 8013b9c <rcutils_string_map_fini+0x5c>
 8013b62:	6a21      	ldr	r1, [r4, #32]
 8013b64:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8013b68:	9101      	str	r1, [sp, #4]
 8013b6a:	47c0      	blx	r8
 8013b6c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013b70:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8013b74:	9901      	ldr	r1, [sp, #4]
 8013b76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013b7a:	47c0      	blx	r8
 8013b7c:	68e3      	ldr	r3, [r4, #12]
 8013b7e:	6862      	ldr	r2, [r4, #4]
 8013b80:	3b01      	subs	r3, #1
 8013b82:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8013b86:	60e3      	str	r3, [r4, #12]
 8013b88:	6834      	ldr	r4, [r6, #0]
 8013b8a:	68a3      	ldr	r3, [r4, #8]
 8013b8c:	3501      	adds	r5, #1
 8013b8e:	429d      	cmp	r5, r3
 8013b90:	d207      	bcs.n	8013ba2 <rcutils_string_map_fini+0x62>
 8013b92:	6822      	ldr	r2, [r4, #0]
 8013b94:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8013b98:	2800      	cmp	r0, #0
 8013b9a:	d1e2      	bne.n	8013b62 <rcutils_string_map_fini+0x22>
 8013b9c:	3501      	adds	r5, #1
 8013b9e:	429d      	cmp	r5, r3
 8013ba0:	d3dc      	bcc.n	8013b5c <rcutils_string_map_fini+0x1c>
 8013ba2:	2100      	movs	r1, #0
 8013ba4:	4630      	mov	r0, r6
 8013ba6:	f7ff ff19 	bl	80139dc <rcutils_string_map_reserve>
 8013baa:	4604      	mov	r4, r0
 8013bac:	b920      	cbnz	r0, 8013bb8 <rcutils_string_map_fini+0x78>
 8013bae:	6830      	ldr	r0, [r6, #0]
 8013bb0:	6943      	ldr	r3, [r0, #20]
 8013bb2:	6a01      	ldr	r1, [r0, #32]
 8013bb4:	4798      	blx	r3
 8013bb6:	6034      	str	r4, [r6, #0]
 8013bb8:	4620      	mov	r0, r4
 8013bba:	b002      	add	sp, #8
 8013bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bc0:	240b      	movs	r4, #11
 8013bc2:	4620      	mov	r0, r4
 8013bc4:	b002      	add	sp, #8
 8013bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bca:	bf00      	nop

08013bcc <rcutils_string_map_getn>:
 8013bcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bd0:	b300      	cbz	r0, 8013c14 <rcutils_string_map_getn+0x48>
 8013bd2:	6807      	ldr	r7, [r0, #0]
 8013bd4:	b1ff      	cbz	r7, 8013c16 <rcutils_string_map_getn+0x4a>
 8013bd6:	4688      	mov	r8, r1
 8013bd8:	b1e1      	cbz	r1, 8013c14 <rcutils_string_map_getn+0x48>
 8013bda:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8013bde:	683e      	ldr	r6, [r7, #0]
 8013be0:	f1ba 0f00 	cmp.w	sl, #0
 8013be4:	d016      	beq.n	8013c14 <rcutils_string_map_getn+0x48>
 8013be6:	4691      	mov	r9, r2
 8013be8:	3e04      	subs	r6, #4
 8013bea:	2400      	movs	r4, #0
 8013bec:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8013bf0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013bf4:	4628      	mov	r0, r5
 8013bf6:	3401      	adds	r4, #1
 8013bf8:	b155      	cbz	r5, 8013c10 <rcutils_string_map_getn+0x44>
 8013bfa:	f7ec fafb 	bl	80001f4 <strlen>
 8013bfe:	4548      	cmp	r0, r9
 8013c00:	4602      	mov	r2, r0
 8013c02:	4629      	mov	r1, r5
 8013c04:	bf38      	it	cc
 8013c06:	464a      	movcc	r2, r9
 8013c08:	4640      	mov	r0, r8
 8013c0a:	f003 fc12 	bl	8017432 <strncmp>
 8013c0e:	b128      	cbz	r0, 8013c1c <rcutils_string_map_getn+0x50>
 8013c10:	45a2      	cmp	sl, r4
 8013c12:	d1eb      	bne.n	8013bec <rcutils_string_map_getn+0x20>
 8013c14:	2700      	movs	r7, #0
 8013c16:	4638      	mov	r0, r7
 8013c18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	f853 700b 	ldr.w	r7, [r3, fp]
 8013c22:	4638      	mov	r0, r7
 8013c24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013c28 <rmw_get_zero_initialized_context>:
 8013c28:	b510      	push	{r4, lr}
 8013c2a:	4604      	mov	r4, r0
 8013c2c:	3010      	adds	r0, #16
 8013c2e:	f000 f80b 	bl	8013c48 <rmw_get_zero_initialized_init_options>
 8013c32:	2300      	movs	r3, #0
 8013c34:	2000      	movs	r0, #0
 8013c36:	2100      	movs	r1, #0
 8013c38:	e9c4 0100 	strd	r0, r1, [r4]
 8013c3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013c40:	60a3      	str	r3, [r4, #8]
 8013c42:	4620      	mov	r0, r4
 8013c44:	bd10      	pop	{r4, pc}
 8013c46:	bf00      	nop

08013c48 <rmw_get_zero_initialized_init_options>:
 8013c48:	b510      	push	{r4, lr}
 8013c4a:	2238      	movs	r2, #56	; 0x38
 8013c4c:	4604      	mov	r4, r0
 8013c4e:	2100      	movs	r1, #0
 8013c50:	f003 fbda 	bl	8017408 <memset>
 8013c54:	f104 0010 	add.w	r0, r4, #16
 8013c58:	f000 f806 	bl	8013c68 <rmw_get_default_security_options>
 8013c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c60:	60e3      	str	r3, [r4, #12]
 8013c62:	4620      	mov	r0, r4
 8013c64:	bd10      	pop	{r4, pc}
 8013c66:	bf00      	nop

08013c68 <rmw_get_default_security_options>:
 8013c68:	2200      	movs	r2, #0
 8013c6a:	7002      	strb	r2, [r0, #0]
 8013c6c:	6042      	str	r2, [r0, #4]
 8013c6e:	4770      	bx	lr

08013c70 <rmw_subscription_content_filter_options_fini>:
 8013c70:	b1b0      	cbz	r0, 8013ca0 <rmw_subscription_content_filter_options_fini+0x30>
 8013c72:	b538      	push	{r3, r4, r5, lr}
 8013c74:	4604      	mov	r4, r0
 8013c76:	4608      	mov	r0, r1
 8013c78:	460d      	mov	r5, r1
 8013c7a:	f7f7 fb21 	bl	800b2c0 <rcutils_allocator_is_valid>
 8013c7e:	b168      	cbz	r0, 8013c9c <rmw_subscription_content_filter_options_fini+0x2c>
 8013c80:	6820      	ldr	r0, [r4, #0]
 8013c82:	b120      	cbz	r0, 8013c8e <rmw_subscription_content_filter_options_fini+0x1e>
 8013c84:	686b      	ldr	r3, [r5, #4]
 8013c86:	6929      	ldr	r1, [r5, #16]
 8013c88:	4798      	blx	r3
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	6023      	str	r3, [r4, #0]
 8013c8e:	1d20      	adds	r0, r4, #4
 8013c90:	f002 fe92 	bl	80169b8 <rcutils_string_array_fini>
 8013c94:	3800      	subs	r0, #0
 8013c96:	bf18      	it	ne
 8013c98:	2001      	movne	r0, #1
 8013c9a:	bd38      	pop	{r3, r4, r5, pc}
 8013c9c:	200b      	movs	r0, #11
 8013c9e:	bd38      	pop	{r3, r4, r5, pc}
 8013ca0:	200b      	movs	r0, #11
 8013ca2:	4770      	bx	lr

08013ca4 <rmw_get_default_subscription_options>:
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	e9c0 2200 	strd	r2, r2, [r0]
 8013caa:	6082      	str	r2, [r0, #8]
 8013cac:	4770      	bx	lr
 8013cae:	bf00      	nop

08013cb0 <rmw_time_equal>:
 8013cb0:	b4f0      	push	{r4, r5, r6, r7}
 8013cb2:	b084      	sub	sp, #16
 8013cb4:	ac04      	add	r4, sp, #16
 8013cb6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8013cba:	4603      	mov	r3, r0
 8013cbc:	4924      	ldr	r1, [pc, #144]	; (8013d50 <rmw_time_equal+0xa0>)
 8013cbe:	9e03      	ldr	r6, [sp, #12]
 8013cc0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8013cc4:	2202      	movs	r2, #2
 8013cc6:	4299      	cmp	r1, r3
 8013cc8:	41aa      	sbcs	r2, r5
 8013cca:	d330      	bcc.n	8013d2e <rmw_time_equal+0x7e>
 8013ccc:	4c21      	ldr	r4, [pc, #132]	; (8013d54 <rmw_time_equal+0xa4>)
 8013cce:	fba3 3204 	umull	r3, r2, r3, r4
 8013cd2:	fb04 2205 	mla	r2, r4, r5, r2
 8013cd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013cda:	43dd      	mvns	r5, r3
 8013cdc:	1a8c      	subs	r4, r1, r2
 8013cde:	4285      	cmp	r5, r0
 8013ce0:	41b4      	sbcs	r4, r6
 8013ce2:	d332      	bcc.n	8013d4a <rmw_time_equal+0x9a>
 8013ce4:	eb10 0c03 	adds.w	ip, r0, r3
 8013ce8:	eb42 0106 	adc.w	r1, r2, r6
 8013cec:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8013cf0:	4817      	ldr	r0, [pc, #92]	; (8013d50 <rmw_time_equal+0xa0>)
 8013cf2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8013cf4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8013cf6:	2202      	movs	r2, #2
 8013cf8:	4298      	cmp	r0, r3
 8013cfa:	41b2      	sbcs	r2, r6
 8013cfc:	d31c      	bcc.n	8013d38 <rmw_time_equal+0x88>
 8013cfe:	4c15      	ldr	r4, [pc, #84]	; (8013d54 <rmw_time_equal+0xa4>)
 8013d00:	fba3 3204 	umull	r3, r2, r3, r4
 8013d04:	fb04 2206 	mla	r2, r4, r6, r2
 8013d08:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013d0c:	43de      	mvns	r6, r3
 8013d0e:	1a84      	subs	r4, r0, r2
 8013d10:	42ae      	cmp	r6, r5
 8013d12:	41bc      	sbcs	r4, r7
 8013d14:	d315      	bcc.n	8013d42 <rmw_time_equal+0x92>
 8013d16:	195b      	adds	r3, r3, r5
 8013d18:	eb42 0207 	adc.w	r2, r2, r7
 8013d1c:	428a      	cmp	r2, r1
 8013d1e:	bf08      	it	eq
 8013d20:	4563      	cmpeq	r3, ip
 8013d22:	bf0c      	ite	eq
 8013d24:	2001      	moveq	r0, #1
 8013d26:	2000      	movne	r0, #0
 8013d28:	b004      	add	sp, #16
 8013d2a:	bcf0      	pop	{r4, r5, r6, r7}
 8013d2c:	4770      	bx	lr
 8013d2e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8013d32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013d36:	e7d9      	b.n	8013cec <rmw_time_equal+0x3c>
 8013d38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d3c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8013d40:	e7ec      	b.n	8013d1c <rmw_time_equal+0x6c>
 8013d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d46:	4602      	mov	r2, r0
 8013d48:	e7e8      	b.n	8013d1c <rmw_time_equal+0x6c>
 8013d4a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8013d4e:	e7cd      	b.n	8013cec <rmw_time_equal+0x3c>
 8013d50:	25c17d04 	.word	0x25c17d04
 8013d54:	3b9aca00 	.word	0x3b9aca00

08013d58 <rmw_time_total_nsec>:
 8013d58:	b470      	push	{r4, r5, r6}
 8013d5a:	b085      	sub	sp, #20
 8013d5c:	ac04      	add	r4, sp, #16
 8013d5e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8013d62:	4603      	mov	r3, r0
 8013d64:	4912      	ldr	r1, [pc, #72]	; (8013db0 <rmw_time_total_nsec+0x58>)
 8013d66:	9e03      	ldr	r6, [sp, #12]
 8013d68:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8013d6c:	2202      	movs	r2, #2
 8013d6e:	4299      	cmp	r1, r3
 8013d70:	41aa      	sbcs	r2, r5
 8013d72:	d311      	bcc.n	8013d98 <rmw_time_total_nsec+0x40>
 8013d74:	4c0f      	ldr	r4, [pc, #60]	; (8013db4 <rmw_time_total_nsec+0x5c>)
 8013d76:	fba3 3204 	umull	r3, r2, r3, r4
 8013d7a:	fb04 2205 	mla	r2, r4, r5, r2
 8013d7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013d82:	43dd      	mvns	r5, r3
 8013d84:	1a8c      	subs	r4, r1, r2
 8013d86:	4285      	cmp	r5, r0
 8013d88:	41b4      	sbcs	r4, r6
 8013d8a:	d30c      	bcc.n	8013da6 <rmw_time_total_nsec+0x4e>
 8013d8c:	1818      	adds	r0, r3, r0
 8013d8e:	eb42 0106 	adc.w	r1, r2, r6
 8013d92:	b005      	add	sp, #20
 8013d94:	bc70      	pop	{r4, r5, r6}
 8013d96:	4770      	bx	lr
 8013d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013da0:	b005      	add	sp, #20
 8013da2:	bc70      	pop	{r4, r5, r6}
 8013da4:	4770      	bx	lr
 8013da6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013daa:	b005      	add	sp, #20
 8013dac:	bc70      	pop	{r4, r5, r6}
 8013dae:	4770      	bx	lr
 8013db0:	25c17d04 	.word	0x25c17d04
 8013db4:	3b9aca00 	.word	0x3b9aca00

08013db8 <rmw_get_zero_initialized_message_info>:
 8013db8:	b510      	push	{r4, lr}
 8013dba:	2240      	movs	r2, #64	; 0x40
 8013dbc:	4604      	mov	r4, r0
 8013dbe:	2100      	movs	r1, #0
 8013dc0:	f003 fb22 	bl	8017408 <memset>
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	bd10      	pop	{r4, pc}

08013dc8 <rmw_validate_full_topic_name>:
 8013dc8:	2800      	cmp	r0, #0
 8013dca:	d057      	beq.n	8013e7c <rmw_validate_full_topic_name+0xb4>
 8013dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dd0:	460d      	mov	r5, r1
 8013dd2:	2900      	cmp	r1, #0
 8013dd4:	d054      	beq.n	8013e80 <rmw_validate_full_topic_name+0xb8>
 8013dd6:	4616      	mov	r6, r2
 8013dd8:	4604      	mov	r4, r0
 8013dda:	f7ec fa0b 	bl	80001f4 <strlen>
 8013dde:	b148      	cbz	r0, 8013df4 <rmw_validate_full_topic_name+0x2c>
 8013de0:	7823      	ldrb	r3, [r4, #0]
 8013de2:	2b2f      	cmp	r3, #47	; 0x2f
 8013de4:	d00d      	beq.n	8013e02 <rmw_validate_full_topic_name+0x3a>
 8013de6:	2302      	movs	r3, #2
 8013de8:	602b      	str	r3, [r5, #0]
 8013dea:	b13e      	cbz	r6, 8013dfc <rmw_validate_full_topic_name+0x34>
 8013dec:	2000      	movs	r0, #0
 8013dee:	6030      	str	r0, [r6, #0]
 8013df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013df4:	2301      	movs	r3, #1
 8013df6:	602b      	str	r3, [r5, #0]
 8013df8:	2e00      	cmp	r6, #0
 8013dfa:	d1f7      	bne.n	8013dec <rmw_validate_full_topic_name+0x24>
 8013dfc:	2000      	movs	r0, #0
 8013dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e02:	1e43      	subs	r3, r0, #1
 8013e04:	5ce2      	ldrb	r2, [r4, r3]
 8013e06:	2a2f      	cmp	r2, #47	; 0x2f
 8013e08:	d03c      	beq.n	8013e84 <rmw_validate_full_topic_name+0xbc>
 8013e0a:	1e63      	subs	r3, r4, #1
 8013e0c:	eb03 0800 	add.w	r8, r3, r0
 8013e10:	f1c4 0e01 	rsb	lr, r4, #1
 8013e14:	eb0e 0703 	add.w	r7, lr, r3
 8013e18:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8013e1c:	f021 0220 	bic.w	r2, r1, #32
 8013e20:	3a41      	subs	r2, #65	; 0x41
 8013e22:	2a19      	cmp	r2, #25
 8013e24:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 8013e28:	d90b      	bls.n	8013e42 <rmw_validate_full_topic_name+0x7a>
 8013e2a:	295f      	cmp	r1, #95	; 0x5f
 8013e2c:	d009      	beq.n	8013e42 <rmw_validate_full_topic_name+0x7a>
 8013e2e:	f1bc 0f0a 	cmp.w	ip, #10
 8013e32:	d906      	bls.n	8013e42 <rmw_validate_full_topic_name+0x7a>
 8013e34:	2304      	movs	r3, #4
 8013e36:	602b      	str	r3, [r5, #0]
 8013e38:	2e00      	cmp	r6, #0
 8013e3a:	d0df      	beq.n	8013dfc <rmw_validate_full_topic_name+0x34>
 8013e3c:	6037      	str	r7, [r6, #0]
 8013e3e:	2000      	movs	r0, #0
 8013e40:	e7d6      	b.n	8013df0 <rmw_validate_full_topic_name+0x28>
 8013e42:	4543      	cmp	r3, r8
 8013e44:	d1e6      	bne.n	8013e14 <rmw_validate_full_topic_name+0x4c>
 8013e46:	4f1a      	ldr	r7, [pc, #104]	; (8013eb0 <rmw_validate_full_topic_name+0xe8>)
 8013e48:	2301      	movs	r3, #1
 8013e4a:	e004      	b.n	8013e56 <rmw_validate_full_topic_name+0x8e>
 8013e4c:	4298      	cmp	r0, r3
 8013e4e:	f104 0401 	add.w	r4, r4, #1
 8013e52:	d91c      	bls.n	8013e8e <rmw_validate_full_topic_name+0xc6>
 8013e54:	4613      	mov	r3, r2
 8013e56:	4298      	cmp	r0, r3
 8013e58:	f103 0201 	add.w	r2, r3, #1
 8013e5c:	d0f6      	beq.n	8013e4c <rmw_validate_full_topic_name+0x84>
 8013e5e:	7821      	ldrb	r1, [r4, #0]
 8013e60:	292f      	cmp	r1, #47	; 0x2f
 8013e62:	d1f3      	bne.n	8013e4c <rmw_validate_full_topic_name+0x84>
 8013e64:	7861      	ldrb	r1, [r4, #1]
 8013e66:	292f      	cmp	r1, #47	; 0x2f
 8013e68:	d01c      	beq.n	8013ea4 <rmw_validate_full_topic_name+0xdc>
 8013e6a:	5dc9      	ldrb	r1, [r1, r7]
 8013e6c:	0749      	lsls	r1, r1, #29
 8013e6e:	d5ed      	bpl.n	8013e4c <rmw_validate_full_topic_name+0x84>
 8013e70:	2206      	movs	r2, #6
 8013e72:	602a      	str	r2, [r5, #0]
 8013e74:	2e00      	cmp	r6, #0
 8013e76:	d0c1      	beq.n	8013dfc <rmw_validate_full_topic_name+0x34>
 8013e78:	6033      	str	r3, [r6, #0]
 8013e7a:	e7bf      	b.n	8013dfc <rmw_validate_full_topic_name+0x34>
 8013e7c:	200b      	movs	r0, #11
 8013e7e:	4770      	bx	lr
 8013e80:	200b      	movs	r0, #11
 8013e82:	e7b5      	b.n	8013df0 <rmw_validate_full_topic_name+0x28>
 8013e84:	2203      	movs	r2, #3
 8013e86:	602a      	str	r2, [r5, #0]
 8013e88:	2e00      	cmp	r6, #0
 8013e8a:	d1f5      	bne.n	8013e78 <rmw_validate_full_topic_name+0xb0>
 8013e8c:	e7b6      	b.n	8013dfc <rmw_validate_full_topic_name+0x34>
 8013e8e:	28f7      	cmp	r0, #247	; 0xf7
 8013e90:	d802      	bhi.n	8013e98 <rmw_validate_full_topic_name+0xd0>
 8013e92:	2000      	movs	r0, #0
 8013e94:	6028      	str	r0, [r5, #0]
 8013e96:	e7ab      	b.n	8013df0 <rmw_validate_full_topic_name+0x28>
 8013e98:	2307      	movs	r3, #7
 8013e9a:	602b      	str	r3, [r5, #0]
 8013e9c:	2e00      	cmp	r6, #0
 8013e9e:	d0ad      	beq.n	8013dfc <rmw_validate_full_topic_name+0x34>
 8013ea0:	23f6      	movs	r3, #246	; 0xf6
 8013ea2:	e7e9      	b.n	8013e78 <rmw_validate_full_topic_name+0xb0>
 8013ea4:	2205      	movs	r2, #5
 8013ea6:	602a      	str	r2, [r5, #0]
 8013ea8:	2e00      	cmp	r6, #0
 8013eaa:	d1e5      	bne.n	8013e78 <rmw_validate_full_topic_name+0xb0>
 8013eac:	e7a6      	b.n	8013dfc <rmw_validate_full_topic_name+0x34>
 8013eae:	bf00      	nop
 8013eb0:	080190e4 	.word	0x080190e4

08013eb4 <rmw_validate_namespace_with_size>:
 8013eb4:	b340      	cbz	r0, 8013f08 <rmw_validate_namespace_with_size+0x54>
 8013eb6:	b570      	push	{r4, r5, r6, lr}
 8013eb8:	4614      	mov	r4, r2
 8013eba:	b0c2      	sub	sp, #264	; 0x108
 8013ebc:	b332      	cbz	r2, 8013f0c <rmw_validate_namespace_with_size+0x58>
 8013ebe:	2901      	cmp	r1, #1
 8013ec0:	460d      	mov	r5, r1
 8013ec2:	461e      	mov	r6, r3
 8013ec4:	d102      	bne.n	8013ecc <rmw_validate_namespace_with_size+0x18>
 8013ec6:	7803      	ldrb	r3, [r0, #0]
 8013ec8:	2b2f      	cmp	r3, #47	; 0x2f
 8013eca:	d012      	beq.n	8013ef2 <rmw_validate_namespace_with_size+0x3e>
 8013ecc:	aa01      	add	r2, sp, #4
 8013ece:	4669      	mov	r1, sp
 8013ed0:	f7ff ff7a 	bl	8013dc8 <rmw_validate_full_topic_name>
 8013ed4:	b978      	cbnz	r0, 8013ef6 <rmw_validate_namespace_with_size+0x42>
 8013ed6:	9b00      	ldr	r3, [sp, #0]
 8013ed8:	b14b      	cbz	r3, 8013eee <rmw_validate_namespace_with_size+0x3a>
 8013eda:	2b07      	cmp	r3, #7
 8013edc:	d007      	beq.n	8013eee <rmw_validate_namespace_with_size+0x3a>
 8013ede:	1e5a      	subs	r2, r3, #1
 8013ee0:	2a05      	cmp	r2, #5
 8013ee2:	d82b      	bhi.n	8013f3c <rmw_validate_namespace_with_size+0x88>
 8013ee4:	e8df f002 	tbb	[pc, r2]
 8013ee8:	1e212427 	.word	0x1e212427
 8013eec:	141b      	.short	0x141b
 8013eee:	2df5      	cmp	r5, #245	; 0xf5
 8013ef0:	d803      	bhi.n	8013efa <rmw_validate_namespace_with_size+0x46>
 8013ef2:	2000      	movs	r0, #0
 8013ef4:	6020      	str	r0, [r4, #0]
 8013ef6:	b042      	add	sp, #264	; 0x108
 8013ef8:	bd70      	pop	{r4, r5, r6, pc}
 8013efa:	2307      	movs	r3, #7
 8013efc:	6023      	str	r3, [r4, #0]
 8013efe:	2e00      	cmp	r6, #0
 8013f00:	d0f9      	beq.n	8013ef6 <rmw_validate_namespace_with_size+0x42>
 8013f02:	23f4      	movs	r3, #244	; 0xf4
 8013f04:	6033      	str	r3, [r6, #0]
 8013f06:	e7f6      	b.n	8013ef6 <rmw_validate_namespace_with_size+0x42>
 8013f08:	200b      	movs	r0, #11
 8013f0a:	4770      	bx	lr
 8013f0c:	200b      	movs	r0, #11
 8013f0e:	e7f2      	b.n	8013ef6 <rmw_validate_namespace_with_size+0x42>
 8013f10:	2306      	movs	r3, #6
 8013f12:	6023      	str	r3, [r4, #0]
 8013f14:	2e00      	cmp	r6, #0
 8013f16:	d0ee      	beq.n	8013ef6 <rmw_validate_namespace_with_size+0x42>
 8013f18:	9b01      	ldr	r3, [sp, #4]
 8013f1a:	6033      	str	r3, [r6, #0]
 8013f1c:	e7eb      	b.n	8013ef6 <rmw_validate_namespace_with_size+0x42>
 8013f1e:	2305      	movs	r3, #5
 8013f20:	6023      	str	r3, [r4, #0]
 8013f22:	e7f7      	b.n	8013f14 <rmw_validate_namespace_with_size+0x60>
 8013f24:	2304      	movs	r3, #4
 8013f26:	6023      	str	r3, [r4, #0]
 8013f28:	e7f4      	b.n	8013f14 <rmw_validate_namespace_with_size+0x60>
 8013f2a:	2303      	movs	r3, #3
 8013f2c:	6023      	str	r3, [r4, #0]
 8013f2e:	e7f1      	b.n	8013f14 <rmw_validate_namespace_with_size+0x60>
 8013f30:	2302      	movs	r3, #2
 8013f32:	6023      	str	r3, [r4, #0]
 8013f34:	e7ee      	b.n	8013f14 <rmw_validate_namespace_with_size+0x60>
 8013f36:	2301      	movs	r3, #1
 8013f38:	6023      	str	r3, [r4, #0]
 8013f3a:	e7eb      	b.n	8013f14 <rmw_validate_namespace_with_size+0x60>
 8013f3c:	4a03      	ldr	r2, [pc, #12]	; (8013f4c <rmw_validate_namespace_with_size+0x98>)
 8013f3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013f42:	a802      	add	r0, sp, #8
 8013f44:	f7ff fcda 	bl	80138fc <rcutils_snprintf>
 8013f48:	2001      	movs	r0, #1
 8013f4a:	e7d4      	b.n	8013ef6 <rmw_validate_namespace_with_size+0x42>
 8013f4c:	08018cec 	.word	0x08018cec

08013f50 <rmw_validate_namespace>:
 8013f50:	b168      	cbz	r0, 8013f6e <rmw_validate_namespace+0x1e>
 8013f52:	b570      	push	{r4, r5, r6, lr}
 8013f54:	460d      	mov	r5, r1
 8013f56:	4616      	mov	r6, r2
 8013f58:	4604      	mov	r4, r0
 8013f5a:	f7ec f94b 	bl	80001f4 <strlen>
 8013f5e:	4633      	mov	r3, r6
 8013f60:	4601      	mov	r1, r0
 8013f62:	462a      	mov	r2, r5
 8013f64:	4620      	mov	r0, r4
 8013f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f6a:	f7ff bfa3 	b.w	8013eb4 <rmw_validate_namespace_with_size>
 8013f6e:	200b      	movs	r0, #11
 8013f70:	4770      	bx	lr
 8013f72:	bf00      	nop

08013f74 <rmw_namespace_validation_result_string>:
 8013f74:	2807      	cmp	r0, #7
 8013f76:	bf9a      	itte	ls
 8013f78:	4b02      	ldrls	r3, [pc, #8]	; (8013f84 <rmw_namespace_validation_result_string+0x10>)
 8013f7a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8013f7e:	4802      	ldrhi	r0, [pc, #8]	; (8013f88 <rmw_namespace_validation_result_string+0x14>)
 8013f80:	4770      	bx	lr
 8013f82:	bf00      	nop
 8013f84:	08018ee4 	.word	0x08018ee4
 8013f88:	08018d3c 	.word	0x08018d3c

08013f8c <rmw_validate_node_name>:
 8013f8c:	2800      	cmp	r0, #0
 8013f8e:	d03b      	beq.n	8014008 <rmw_validate_node_name+0x7c>
 8013f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f94:	460d      	mov	r5, r1
 8013f96:	2900      	cmp	r1, #0
 8013f98:	d038      	beq.n	801400c <rmw_validate_node_name+0x80>
 8013f9a:	4616      	mov	r6, r2
 8013f9c:	4604      	mov	r4, r0
 8013f9e:	f7ec f929 	bl	80001f4 <strlen>
 8013fa2:	b1e0      	cbz	r0, 8013fde <rmw_validate_node_name+0x52>
 8013fa4:	1e63      	subs	r3, r4, #1
 8013fa6:	eb03 0800 	add.w	r8, r3, r0
 8013faa:	f1c4 0101 	rsb	r1, r4, #1
 8013fae:	18cf      	adds	r7, r1, r3
 8013fb0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8013fb4:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8013fb8:	f02e 0c20 	bic.w	ip, lr, #32
 8013fbc:	2a09      	cmp	r2, #9
 8013fbe:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8013fc2:	d914      	bls.n	8013fee <rmw_validate_node_name+0x62>
 8013fc4:	f1bc 0f19 	cmp.w	ip, #25
 8013fc8:	d911      	bls.n	8013fee <rmw_validate_node_name+0x62>
 8013fca:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8013fce:	d00e      	beq.n	8013fee <rmw_validate_node_name+0x62>
 8013fd0:	2302      	movs	r3, #2
 8013fd2:	602b      	str	r3, [r5, #0]
 8013fd4:	b106      	cbz	r6, 8013fd8 <rmw_validate_node_name+0x4c>
 8013fd6:	6037      	str	r7, [r6, #0]
 8013fd8:	2000      	movs	r0, #0
 8013fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fde:	2301      	movs	r3, #1
 8013fe0:	602b      	str	r3, [r5, #0]
 8013fe2:	2e00      	cmp	r6, #0
 8013fe4:	d0f8      	beq.n	8013fd8 <rmw_validate_node_name+0x4c>
 8013fe6:	2000      	movs	r0, #0
 8013fe8:	6030      	str	r0, [r6, #0]
 8013fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fee:	4543      	cmp	r3, r8
 8013ff0:	d1dd      	bne.n	8013fae <rmw_validate_node_name+0x22>
 8013ff2:	7822      	ldrb	r2, [r4, #0]
 8013ff4:	4b0d      	ldr	r3, [pc, #52]	; (801402c <rmw_validate_node_name+0xa0>)
 8013ff6:	5cd3      	ldrb	r3, [r2, r3]
 8013ff8:	f013 0304 	ands.w	r3, r3, #4
 8013ffc:	d110      	bne.n	8014020 <rmw_validate_node_name+0x94>
 8013ffe:	28ff      	cmp	r0, #255	; 0xff
 8014000:	d806      	bhi.n	8014010 <rmw_validate_node_name+0x84>
 8014002:	602b      	str	r3, [r5, #0]
 8014004:	4618      	mov	r0, r3
 8014006:	e7e8      	b.n	8013fda <rmw_validate_node_name+0x4e>
 8014008:	200b      	movs	r0, #11
 801400a:	4770      	bx	lr
 801400c:	200b      	movs	r0, #11
 801400e:	e7e4      	b.n	8013fda <rmw_validate_node_name+0x4e>
 8014010:	2204      	movs	r2, #4
 8014012:	602a      	str	r2, [r5, #0]
 8014014:	2e00      	cmp	r6, #0
 8014016:	d0df      	beq.n	8013fd8 <rmw_validate_node_name+0x4c>
 8014018:	22fe      	movs	r2, #254	; 0xfe
 801401a:	6032      	str	r2, [r6, #0]
 801401c:	4618      	mov	r0, r3
 801401e:	e7dc      	b.n	8013fda <rmw_validate_node_name+0x4e>
 8014020:	2303      	movs	r3, #3
 8014022:	602b      	str	r3, [r5, #0]
 8014024:	2e00      	cmp	r6, #0
 8014026:	d1de      	bne.n	8013fe6 <rmw_validate_node_name+0x5a>
 8014028:	e7d6      	b.n	8013fd8 <rmw_validate_node_name+0x4c>
 801402a:	bf00      	nop
 801402c:	080190e4 	.word	0x080190e4

08014030 <rmw_node_name_validation_result_string>:
 8014030:	2804      	cmp	r0, #4
 8014032:	bf9a      	itte	ls
 8014034:	4b02      	ldrls	r3, [pc, #8]	; (8014040 <rmw_node_name_validation_result_string+0x10>)
 8014036:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801403a:	4802      	ldrhi	r0, [pc, #8]	; (8014044 <rmw_node_name_validation_result_string+0x14>)
 801403c:	4770      	bx	lr
 801403e:	bf00      	nop
 8014040:	08018ff0 	.word	0x08018ff0
 8014044:	08018f04 	.word	0x08018f04

08014048 <get_memory>:
 8014048:	4603      	mov	r3, r0
 801404a:	6840      	ldr	r0, [r0, #4]
 801404c:	b158      	cbz	r0, 8014066 <get_memory+0x1e>
 801404e:	6842      	ldr	r2, [r0, #4]
 8014050:	605a      	str	r2, [r3, #4]
 8014052:	b10a      	cbz	r2, 8014058 <get_memory+0x10>
 8014054:	2100      	movs	r1, #0
 8014056:	6011      	str	r1, [r2, #0]
 8014058:	681a      	ldr	r2, [r3, #0]
 801405a:	6042      	str	r2, [r0, #4]
 801405c:	b102      	cbz	r2, 8014060 <get_memory+0x18>
 801405e:	6010      	str	r0, [r2, #0]
 8014060:	2200      	movs	r2, #0
 8014062:	6002      	str	r2, [r0, #0]
 8014064:	6018      	str	r0, [r3, #0]
 8014066:	4770      	bx	lr

08014068 <put_memory>:
 8014068:	680b      	ldr	r3, [r1, #0]
 801406a:	b10b      	cbz	r3, 8014070 <put_memory+0x8>
 801406c:	684a      	ldr	r2, [r1, #4]
 801406e:	605a      	str	r2, [r3, #4]
 8014070:	684a      	ldr	r2, [r1, #4]
 8014072:	b102      	cbz	r2, 8014076 <put_memory+0xe>
 8014074:	6013      	str	r3, [r2, #0]
 8014076:	6803      	ldr	r3, [r0, #0]
 8014078:	428b      	cmp	r3, r1
 801407a:	6843      	ldr	r3, [r0, #4]
 801407c:	bf08      	it	eq
 801407e:	6002      	streq	r2, [r0, #0]
 8014080:	604b      	str	r3, [r1, #4]
 8014082:	b103      	cbz	r3, 8014086 <put_memory+0x1e>
 8014084:	6019      	str	r1, [r3, #0]
 8014086:	2300      	movs	r3, #0
 8014088:	600b      	str	r3, [r1, #0]
 801408a:	6041      	str	r1, [r0, #4]
 801408c:	4770      	bx	lr
 801408e:	bf00      	nop

08014090 <rmw_destroy_client>:
 8014090:	b570      	push	{r4, r5, r6, lr}
 8014092:	b128      	cbz	r0, 80140a0 <rmw_destroy_client+0x10>
 8014094:	4604      	mov	r4, r0
 8014096:	6800      	ldr	r0, [r0, #0]
 8014098:	460d      	mov	r5, r1
 801409a:	f7f7 ff17 	bl	800becc <is_uxrce_rmw_identifier_valid>
 801409e:	b910      	cbnz	r0, 80140a6 <rmw_destroy_client+0x16>
 80140a0:	2401      	movs	r4, #1
 80140a2:	4620      	mov	r0, r4
 80140a4:	bd70      	pop	{r4, r5, r6, pc}
 80140a6:	6863      	ldr	r3, [r4, #4]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d0f9      	beq.n	80140a0 <rmw_destroy_client+0x10>
 80140ac:	2d00      	cmp	r5, #0
 80140ae:	d0f7      	beq.n	80140a0 <rmw_destroy_client+0x10>
 80140b0:	6828      	ldr	r0, [r5, #0]
 80140b2:	f7f7 ff0b 	bl	800becc <is_uxrce_rmw_identifier_valid>
 80140b6:	2800      	cmp	r0, #0
 80140b8:	d0f2      	beq.n	80140a0 <rmw_destroy_client+0x10>
 80140ba:	686e      	ldr	r6, [r5, #4]
 80140bc:	2e00      	cmp	r6, #0
 80140be:	d0ef      	beq.n	80140a0 <rmw_destroy_client+0x10>
 80140c0:	6864      	ldr	r4, [r4, #4]
 80140c2:	6932      	ldr	r2, [r6, #16]
 80140c4:	6920      	ldr	r0, [r4, #16]
 80140c6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80140ca:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80140ce:	6819      	ldr	r1, [r3, #0]
 80140d0:	f002 f840 	bl	8016154 <uxr_buffer_cancel_data>
 80140d4:	4602      	mov	r2, r0
 80140d6:	6920      	ldr	r0, [r4, #16]
 80140d8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80140dc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80140e0:	f7f7 fe74 	bl	800bdcc <run_xrce_session>
 80140e4:	6920      	ldr	r0, [r4, #16]
 80140e6:	6932      	ldr	r2, [r6, #16]
 80140e8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80140ec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80140f0:	6819      	ldr	r1, [r3, #0]
 80140f2:	f7f8 ffa7 	bl	800d044 <uxr_buffer_delete_entity>
 80140f6:	4602      	mov	r2, r0
 80140f8:	6920      	ldr	r0, [r4, #16]
 80140fa:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80140fe:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014102:	f7f7 fe63 	bl	800bdcc <run_xrce_session>
 8014106:	2800      	cmp	r0, #0
 8014108:	4628      	mov	r0, r5
 801410a:	bf14      	ite	ne
 801410c:	2400      	movne	r4, #0
 801410e:	2402      	moveq	r4, #2
 8014110:	f7f7 fd46 	bl	800bba0 <rmw_uxrce_fini_client_memory>
 8014114:	e7c5      	b.n	80140a2 <rmw_destroy_client+0x12>
 8014116:	bf00      	nop

08014118 <rmw_get_implementation_identifier>:
 8014118:	4b01      	ldr	r3, [pc, #4]	; (8014120 <rmw_get_implementation_identifier+0x8>)
 801411a:	6818      	ldr	r0, [r3, #0]
 801411c:	4770      	bx	lr
 801411e:	bf00      	nop
 8014120:	0801901c 	.word	0x0801901c

08014124 <rmw_init_options_init>:
 8014124:	b084      	sub	sp, #16
 8014126:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014128:	b083      	sub	sp, #12
 801412a:	ad09      	add	r5, sp, #36	; 0x24
 801412c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8014130:	b130      	cbz	r0, 8014140 <rmw_init_options_init+0x1c>
 8014132:	4604      	mov	r4, r0
 8014134:	4628      	mov	r0, r5
 8014136:	f7f7 f8c3 	bl	800b2c0 <rcutils_allocator_is_valid>
 801413a:	b108      	cbz	r0, 8014140 <rmw_init_options_init+0x1c>
 801413c:	68a6      	ldr	r6, [r4, #8]
 801413e:	b12e      	cbz	r6, 801414c <rmw_init_options_init+0x28>
 8014140:	200b      	movs	r0, #11
 8014142:	b003      	add	sp, #12
 8014144:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014148:	b004      	add	sp, #16
 801414a:	4770      	bx	lr
 801414c:	2200      	movs	r2, #0
 801414e:	2300      	movs	r3, #0
 8014150:	e9c4 2300 	strd	r2, r3, [r4]
 8014154:	4b22      	ldr	r3, [pc, #136]	; (80141e0 <rmw_init_options_init+0xbc>)
 8014156:	f8df e098 	ldr.w	lr, [pc, #152]	; 80141f0 <rmw_init_options_init+0xcc>
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	60a3      	str	r3, [r4, #8]
 801415e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014160:	f104 0c20 	add.w	ip, r4, #32
 8014164:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014168:	466f      	mov	r7, sp
 801416a:	682b      	ldr	r3, [r5, #0]
 801416c:	f8cc 3000 	str.w	r3, [ip]
 8014170:	4638      	mov	r0, r7
 8014172:	f8c4 e01c 	str.w	lr, [r4, #28]
 8014176:	60e6      	str	r6, [r4, #12]
 8014178:	f7ff fd76 	bl	8013c68 <rmw_get_default_security_options>
 801417c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8014180:	f104 0310 	add.w	r3, r4, #16
 8014184:	e883 0003 	stmia.w	r3, {r0, r1}
 8014188:	2203      	movs	r2, #3
 801418a:	4816      	ldr	r0, [pc, #88]	; (80141e4 <rmw_init_options_init+0xc0>)
 801418c:	4916      	ldr	r1, [pc, #88]	; (80141e8 <rmw_init_options_init+0xc4>)
 801418e:	7626      	strb	r6, [r4, #24]
 8014190:	f7f7 fc46 	bl	800ba20 <rmw_uxrce_init_init_options_impl_memory>
 8014194:	4813      	ldr	r0, [pc, #76]	; (80141e4 <rmw_init_options_init+0xc0>)
 8014196:	f7ff ff57 	bl	8014048 <get_memory>
 801419a:	b1f0      	cbz	r0, 80141da <rmw_init_options_init+0xb6>
 801419c:	4a13      	ldr	r2, [pc, #76]	; (80141ec <rmw_init_options_init+0xc8>)
 801419e:	6883      	ldr	r3, [r0, #8]
 80141a0:	6851      	ldr	r1, [r2, #4]
 80141a2:	7810      	ldrb	r0, [r2, #0]
 80141a4:	6363      	str	r3, [r4, #52]	; 0x34
 80141a6:	7418      	strb	r0, [r3, #16]
 80141a8:	6159      	str	r1, [r3, #20]
 80141aa:	68d1      	ldr	r1, [r2, #12]
 80141ac:	61d9      	str	r1, [r3, #28]
 80141ae:	6911      	ldr	r1, [r2, #16]
 80141b0:	6219      	str	r1, [r3, #32]
 80141b2:	6951      	ldr	r1, [r2, #20]
 80141b4:	6892      	ldr	r2, [r2, #8]
 80141b6:	619a      	str	r2, [r3, #24]
 80141b8:	6259      	str	r1, [r3, #36]	; 0x24
 80141ba:	f7fb fa21 	bl	800f600 <uxr_nanos>
 80141be:	f002 fe55 	bl	8016e6c <srand>
 80141c2:	f002 fe81 	bl	8016ec8 <rand>
 80141c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80141c8:	6298      	str	r0, [r3, #40]	; 0x28
 80141ca:	2800      	cmp	r0, #0
 80141cc:	d0f9      	beq.n	80141c2 <rmw_init_options_init+0x9e>
 80141ce:	2000      	movs	r0, #0
 80141d0:	b003      	add	sp, #12
 80141d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80141d6:	b004      	add	sp, #16
 80141d8:	4770      	bx	lr
 80141da:	2001      	movs	r0, #1
 80141dc:	e7b1      	b.n	8014142 <rmw_init_options_init+0x1e>
 80141de:	bf00      	nop
 80141e0:	0801901c 	.word	0x0801901c
 80141e4:	20010ae4 	.word	0x20010ae4
 80141e8:	2000c380 	.word	0x2000c380
 80141ec:	2000c20c 	.word	0x2000c20c
 80141f0:	08018a84 	.word	0x08018a84

080141f4 <rmw_init_options_copy>:
 80141f4:	b570      	push	{r4, r5, r6, lr}
 80141f6:	b158      	cbz	r0, 8014210 <rmw_init_options_copy+0x1c>
 80141f8:	460d      	mov	r5, r1
 80141fa:	b149      	cbz	r1, 8014210 <rmw_init_options_copy+0x1c>
 80141fc:	4604      	mov	r4, r0
 80141fe:	6880      	ldr	r0, [r0, #8]
 8014200:	b120      	cbz	r0, 801420c <rmw_init_options_copy+0x18>
 8014202:	4b1e      	ldr	r3, [pc, #120]	; (801427c <rmw_init_options_copy+0x88>)
 8014204:	6819      	ldr	r1, [r3, #0]
 8014206:	f7eb ffeb 	bl	80001e0 <strcmp>
 801420a:	bb90      	cbnz	r0, 8014272 <rmw_init_options_copy+0x7e>
 801420c:	68ab      	ldr	r3, [r5, #8]
 801420e:	b113      	cbz	r3, 8014216 <rmw_init_options_copy+0x22>
 8014210:	250b      	movs	r5, #11
 8014212:	4628      	mov	r0, r5
 8014214:	bd70      	pop	{r4, r5, r6, pc}
 8014216:	4623      	mov	r3, r4
 8014218:	462a      	mov	r2, r5
 801421a:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801421e:	f8d3 c000 	ldr.w	ip, [r3]
 8014222:	6858      	ldr	r0, [r3, #4]
 8014224:	6899      	ldr	r1, [r3, #8]
 8014226:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801422a:	f8c2 e00c 	str.w	lr, [r2, #12]
 801422e:	3310      	adds	r3, #16
 8014230:	42b3      	cmp	r3, r6
 8014232:	f8c2 c000 	str.w	ip, [r2]
 8014236:	6050      	str	r0, [r2, #4]
 8014238:	6091      	str	r1, [r2, #8]
 801423a:	f102 0210 	add.w	r2, r2, #16
 801423e:	d1ee      	bne.n	801421e <rmw_init_options_copy+0x2a>
 8014240:	6819      	ldr	r1, [r3, #0]
 8014242:	685b      	ldr	r3, [r3, #4]
 8014244:	480e      	ldr	r0, [pc, #56]	; (8014280 <rmw_init_options_copy+0x8c>)
 8014246:	6053      	str	r3, [r2, #4]
 8014248:	6011      	str	r1, [r2, #0]
 801424a:	f7ff fefd 	bl	8014048 <get_memory>
 801424e:	b198      	cbz	r0, 8014278 <rmw_init_options_copy+0x84>
 8014250:	6883      	ldr	r3, [r0, #8]
 8014252:	636b      	str	r3, [r5, #52]	; 0x34
 8014254:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8014256:	f102 0c10 	add.w	ip, r2, #16
 801425a:	f103 0410 	add.w	r4, r3, #16
 801425e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014264:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8014268:	2500      	movs	r5, #0
 801426a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801426e:	4628      	mov	r0, r5
 8014270:	bd70      	pop	{r4, r5, r6, pc}
 8014272:	250c      	movs	r5, #12
 8014274:	4628      	mov	r0, r5
 8014276:	bd70      	pop	{r4, r5, r6, pc}
 8014278:	2501      	movs	r5, #1
 801427a:	e7ca      	b.n	8014212 <rmw_init_options_copy+0x1e>
 801427c:	0801901c 	.word	0x0801901c
 8014280:	20010ae4 	.word	0x20010ae4

08014284 <rmw_init_options_fini>:
 8014284:	2800      	cmp	r0, #0
 8014286:	d03d      	beq.n	8014304 <rmw_init_options_fini+0x80>
 8014288:	b510      	push	{r4, lr}
 801428a:	4604      	mov	r4, r0
 801428c:	b08e      	sub	sp, #56	; 0x38
 801428e:	3020      	adds	r0, #32
 8014290:	f7f7 f816 	bl	800b2c0 <rcutils_allocator_is_valid>
 8014294:	b360      	cbz	r0, 80142f0 <rmw_init_options_fini+0x6c>
 8014296:	68a0      	ldr	r0, [r4, #8]
 8014298:	b120      	cbz	r0, 80142a4 <rmw_init_options_fini+0x20>
 801429a:	4b1c      	ldr	r3, [pc, #112]	; (801430c <rmw_init_options_fini+0x88>)
 801429c:	6819      	ldr	r1, [r3, #0]
 801429e:	f7eb ff9f 	bl	80001e0 <strcmp>
 80142a2:	bb68      	cbnz	r0, 8014300 <rmw_init_options_fini+0x7c>
 80142a4:	4b1a      	ldr	r3, [pc, #104]	; (8014310 <rmw_init_options_fini+0x8c>)
 80142a6:	6819      	ldr	r1, [r3, #0]
 80142a8:	b331      	cbz	r1, 80142f8 <rmw_init_options_fini+0x74>
 80142aa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80142ac:	e001      	b.n	80142b2 <rmw_init_options_fini+0x2e>
 80142ae:	6849      	ldr	r1, [r1, #4]
 80142b0:	b311      	cbz	r1, 80142f8 <rmw_init_options_fini+0x74>
 80142b2:	688b      	ldr	r3, [r1, #8]
 80142b4:	429a      	cmp	r2, r3
 80142b6:	d1fa      	bne.n	80142ae <rmw_init_options_fini+0x2a>
 80142b8:	4815      	ldr	r0, [pc, #84]	; (8014310 <rmw_init_options_fini+0x8c>)
 80142ba:	f7ff fed5 	bl	8014068 <put_memory>
 80142be:	4668      	mov	r0, sp
 80142c0:	f7ff fcc2 	bl	8013c48 <rmw_get_zero_initialized_init_options>
 80142c4:	46ee      	mov	lr, sp
 80142c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80142ca:	46a4      	mov	ip, r4
 80142cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80142d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80142d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80142d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80142dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80142e0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80142e4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80142e8:	2300      	movs	r3, #0
 80142ea:	4618      	mov	r0, r3
 80142ec:	b00e      	add	sp, #56	; 0x38
 80142ee:	bd10      	pop	{r4, pc}
 80142f0:	230b      	movs	r3, #11
 80142f2:	4618      	mov	r0, r3
 80142f4:	b00e      	add	sp, #56	; 0x38
 80142f6:	bd10      	pop	{r4, pc}
 80142f8:	2301      	movs	r3, #1
 80142fa:	4618      	mov	r0, r3
 80142fc:	b00e      	add	sp, #56	; 0x38
 80142fe:	bd10      	pop	{r4, pc}
 8014300:	230c      	movs	r3, #12
 8014302:	e7f2      	b.n	80142ea <rmw_init_options_fini+0x66>
 8014304:	230b      	movs	r3, #11
 8014306:	4618      	mov	r0, r3
 8014308:	4770      	bx	lr
 801430a:	bf00      	nop
 801430c:	0801901c 	.word	0x0801901c
 8014310:	20010ae4 	.word	0x20010ae4

08014314 <rmw_init>:
 8014314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014318:	b083      	sub	sp, #12
 801431a:	2800      	cmp	r0, #0
 801431c:	f000 80d3 	beq.w	80144c6 <rmw_init+0x1b2>
 8014320:	460e      	mov	r6, r1
 8014322:	2900      	cmp	r1, #0
 8014324:	f000 80cf 	beq.w	80144c6 <rmw_init+0x1b2>
 8014328:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801432a:	4605      	mov	r5, r0
 801432c:	2b00      	cmp	r3, #0
 801432e:	f000 80ca 	beq.w	80144c6 <rmw_init+0x1b2>
 8014332:	4b78      	ldr	r3, [pc, #480]	; (8014514 <rmw_init+0x200>)
 8014334:	6880      	ldr	r0, [r0, #8]
 8014336:	681f      	ldr	r7, [r3, #0]
 8014338:	b128      	cbz	r0, 8014346 <rmw_init+0x32>
 801433a:	4639      	mov	r1, r7
 801433c:	f7eb ff50 	bl	80001e0 <strcmp>
 8014340:	2800      	cmp	r0, #0
 8014342:	f040 80ca 	bne.w	80144da <rmw_init+0x1c6>
 8014346:	e9d5 2300 	ldrd	r2, r3, [r5]
 801434a:	4c73      	ldr	r4, [pc, #460]	; (8014518 <rmw_init+0x204>)
 801434c:	4973      	ldr	r1, [pc, #460]	; (801451c <rmw_init+0x208>)
 801434e:	4874      	ldr	r0, [pc, #464]	; (8014520 <rmw_init+0x20c>)
 8014350:	60b7      	str	r7, [r6, #8]
 8014352:	e9c6 2300 	strd	r2, r3, [r6]
 8014356:	68eb      	ldr	r3, [r5, #12]
 8014358:	64b3      	str	r3, [r6, #72]	; 0x48
 801435a:	2201      	movs	r2, #1
 801435c:	f7f7 fb00 	bl	800b960 <rmw_uxrce_init_session_memory>
 8014360:	4620      	mov	r0, r4
 8014362:	4970      	ldr	r1, [pc, #448]	; (8014524 <rmw_init+0x210>)
 8014364:	2204      	movs	r2, #4
 8014366:	f7f7 fb3b 	bl	800b9e0 <rmw_uxrce_init_static_input_buffer_memory>
 801436a:	f04f 0800 	mov.w	r8, #0
 801436e:	486c      	ldr	r0, [pc, #432]	; (8014520 <rmw_init+0x20c>)
 8014370:	f884 800d 	strb.w	r8, [r4, #13]
 8014374:	f7ff fe68 	bl	8014048 <get_memory>
 8014378:	2800      	cmp	r0, #0
 801437a:	f000 80a9 	beq.w	80144d0 <rmw_init+0x1bc>
 801437e:	6884      	ldr	r4, [r0, #8]
 8014380:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8014382:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8014384:	f890 c010 	ldrb.w	ip, [r0, #16]
 8014388:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801438c:	9101      	str	r1, [sp, #4]
 801438e:	6a00      	ldr	r0, [r0, #32]
 8014390:	9000      	str	r0, [sp, #0]
 8014392:	f104 0910 	add.w	r9, r4, #16
 8014396:	4661      	mov	r1, ip
 8014398:	4648      	mov	r0, r9
 801439a:	f7f9 f8d1 	bl	800d540 <uxr_set_custom_transport_callbacks>
 801439e:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80143a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80143a6:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 80143aa:	f504 725e 	add.w	r2, r4, #888	; 0x378
 80143ae:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 80143b2:	495d      	ldr	r1, [pc, #372]	; (8014528 <rmw_init+0x214>)
 80143b4:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 80143b8:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 80143bc:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 80143c0:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 80143c4:	4859      	ldr	r0, [pc, #356]	; (801452c <rmw_init+0x218>)
 80143c6:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 80143ca:	2201      	movs	r2, #1
 80143cc:	64f4      	str	r4, [r6, #76]	; 0x4c
 80143ce:	f7f7 faa7 	bl	800b920 <rmw_uxrce_init_node_memory>
 80143d2:	4957      	ldr	r1, [pc, #348]	; (8014530 <rmw_init+0x21c>)
 80143d4:	4857      	ldr	r0, [pc, #348]	; (8014534 <rmw_init+0x220>)
 80143d6:	2205      	movs	r2, #5
 80143d8:	f7f7 fa82 	bl	800b8e0 <rmw_uxrce_init_subscription_memory>
 80143dc:	4956      	ldr	r1, [pc, #344]	; (8014538 <rmw_init+0x224>)
 80143de:	4857      	ldr	r0, [pc, #348]	; (801453c <rmw_init+0x228>)
 80143e0:	220a      	movs	r2, #10
 80143e2:	f7f7 fa5d 	bl	800b8a0 <rmw_uxrce_init_publisher_memory>
 80143e6:	4956      	ldr	r1, [pc, #344]	; (8014540 <rmw_init+0x22c>)
 80143e8:	4856      	ldr	r0, [pc, #344]	; (8014544 <rmw_init+0x230>)
 80143ea:	2201      	movs	r2, #1
 80143ec:	f7f7 fa18 	bl	800b820 <rmw_uxrce_init_service_memory>
 80143f0:	4955      	ldr	r1, [pc, #340]	; (8014548 <rmw_init+0x234>)
 80143f2:	4856      	ldr	r0, [pc, #344]	; (801454c <rmw_init+0x238>)
 80143f4:	2201      	movs	r2, #1
 80143f6:	f7f7 fa33 	bl	800b860 <rmw_uxrce_init_client_memory>
 80143fa:	4955      	ldr	r1, [pc, #340]	; (8014550 <rmw_init+0x23c>)
 80143fc:	4855      	ldr	r0, [pc, #340]	; (8014554 <rmw_init+0x240>)
 80143fe:	220f      	movs	r2, #15
 8014400:	f7f7 face 	bl	800b9a0 <rmw_uxrce_init_topic_memory>
 8014404:	4954      	ldr	r1, [pc, #336]	; (8014558 <rmw_init+0x244>)
 8014406:	4855      	ldr	r0, [pc, #340]	; (801455c <rmw_init+0x248>)
 8014408:	2203      	movs	r2, #3
 801440a:	f7f7 fb09 	bl	800ba20 <rmw_uxrce_init_init_options_impl_memory>
 801440e:	4954      	ldr	r1, [pc, #336]	; (8014560 <rmw_init+0x24c>)
 8014410:	4854      	ldr	r0, [pc, #336]	; (8014564 <rmw_init+0x250>)
 8014412:	2204      	movs	r2, #4
 8014414:	f7f7 fb24 	bl	800ba60 <rmw_uxrce_init_wait_set_memory>
 8014418:	4953      	ldr	r1, [pc, #332]	; (8014568 <rmw_init+0x254>)
 801441a:	4854      	ldr	r0, [pc, #336]	; (801456c <rmw_init+0x258>)
 801441c:	2204      	movs	r2, #4
 801441e:	f7f7 fb3f 	bl	800baa0 <rmw_uxrce_init_guard_condition_memory>
 8014422:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8014424:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8014426:	4642      	mov	r2, r8
 8014428:	f7f7 f9e2 	bl	800b7f0 <rmw_uxrce_transport_init>
 801442c:	4607      	mov	r7, r0
 801442e:	2800      	cmp	r0, #0
 8014430:	d158      	bne.n	80144e4 <rmw_init+0x1d0>
 8014432:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8014434:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8014438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801443a:	f504 7122 	add.w	r1, r4, #648	; 0x288
 801443e:	4628      	mov	r0, r5
 8014440:	f7f9 fa86 	bl	800d950 <uxr_init_session>
 8014444:	494a      	ldr	r1, [pc, #296]	; (8014570 <rmw_init+0x25c>)
 8014446:	4622      	mov	r2, r4
 8014448:	4628      	mov	r0, r5
 801444a:	f7f9 faa5 	bl	800d998 <uxr_set_topic_callback>
 801444e:	4949      	ldr	r1, [pc, #292]	; (8014574 <rmw_init+0x260>)
 8014450:	463a      	mov	r2, r7
 8014452:	4628      	mov	r0, r5
 8014454:	f7f9 fa9c 	bl	800d990 <uxr_set_status_callback>
 8014458:	4947      	ldr	r1, [pc, #284]	; (8014578 <rmw_init+0x264>)
 801445a:	463a      	mov	r2, r7
 801445c:	4628      	mov	r0, r5
 801445e:	f7f9 fa9f 	bl	800d9a0 <uxr_set_request_callback>
 8014462:	4946      	ldr	r1, [pc, #280]	; (801457c <rmw_init+0x268>)
 8014464:	463a      	mov	r2, r7
 8014466:	4628      	mov	r0, r5
 8014468:	f7f9 fa9e 	bl	800d9a8 <uxr_set_reply_callback>
 801446c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8014470:	2304      	movs	r3, #4
 8014472:	0092      	lsls	r2, r2, #2
 8014474:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8014478:	4628      	mov	r0, r5
 801447a:	f7f9 fad3 	bl	800da24 <uxr_create_input_reliable_stream>
 801447e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8014482:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8014486:	0092      	lsls	r2, r2, #2
 8014488:	2304      	movs	r3, #4
 801448a:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 801448e:	4628      	mov	r0, r5
 8014490:	f7f9 faa0 	bl	800d9d4 <uxr_create_output_reliable_stream>
 8014494:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8014498:	4628      	mov	r0, r5
 801449a:	f7f9 fabd 	bl	800da18 <uxr_create_input_best_effort_stream>
 801449e:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 80144a2:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 80144a6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80144aa:	3114      	adds	r1, #20
 80144ac:	4628      	mov	r0, r5
 80144ae:	f7f9 fa7f 	bl	800d9b0 <uxr_create_output_best_effort_stream>
 80144b2:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 80144b6:	4628      	mov	r0, r5
 80144b8:	f7fa f834 	bl	800e524 <uxr_create_session>
 80144bc:	b1f8      	cbz	r0, 80144fe <rmw_init+0x1ea>
 80144be:	4638      	mov	r0, r7
 80144c0:	b003      	add	sp, #12
 80144c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144c6:	270b      	movs	r7, #11
 80144c8:	4638      	mov	r0, r7
 80144ca:	b003      	add	sp, #12
 80144cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144d0:	2701      	movs	r7, #1
 80144d2:	4638      	mov	r0, r7
 80144d4:	b003      	add	sp, #12
 80144d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144da:	270c      	movs	r7, #12
 80144dc:	4638      	mov	r0, r7
 80144de:	b003      	add	sp, #12
 80144e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144e4:	4648      	mov	r0, r9
 80144e6:	f7f9 f86d 	bl	800d5c4 <uxr_close_custom_transport>
 80144ea:	480d      	ldr	r0, [pc, #52]	; (8014520 <rmw_init+0x20c>)
 80144ec:	4621      	mov	r1, r4
 80144ee:	f7ff fdbb 	bl	8014068 <put_memory>
 80144f2:	4638      	mov	r0, r7
 80144f4:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 80144f8:	b003      	add	sp, #12
 80144fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144fe:	4648      	mov	r0, r9
 8014500:	f7f9 f860 	bl	800d5c4 <uxr_close_custom_transport>
 8014504:	4806      	ldr	r0, [pc, #24]	; (8014520 <rmw_init+0x20c>)
 8014506:	4621      	mov	r1, r4
 8014508:	f7ff fdae 	bl	8014068 <put_memory>
 801450c:	64f7      	str	r7, [r6, #76]	; 0x4c
 801450e:	2701      	movs	r7, #1
 8014510:	e7d5      	b.n	80144be <rmw_init+0x1aa>
 8014512:	bf00      	nop
 8014514:	0801901c 	.word	0x0801901c
 8014518:	20010b34 	.word	0x20010b34
 801451c:	2000cde0 	.word	0x2000cde0
 8014520:	20010b24 	.word	0x20010b24
 8014524:	2000e388 	.word	0x2000e388
 8014528:	2000c404 	.word	0x2000c404
 801452c:	20010af4 	.word	0x20010af4
 8014530:	20010488 	.word	0x20010488
 8014534:	20010b44 	.word	0x20010b44
 8014538:	2000c4a8 	.word	0x2000c4a8
 801453c:	20010b04 	.word	0x20010b04
 8014540:	2000cd18 	.word	0x2000cd18
 8014544:	20010b14 	.word	0x20010b14
 8014548:	2000c238 	.word	0x2000c238
 801454c:	2000c228 	.word	0x2000c228
 8014550:	200108c0 	.word	0x200108c0
 8014554:	20010b54 	.word	0x20010b54
 8014558:	2000c380 	.word	0x2000c380
 801455c:	20010ae4 	.word	0x20010ae4
 8014560:	20010a64 	.word	0x20010a64
 8014564:	20010b64 	.word	0x20010b64
 8014568:	2000c300 	.word	0x2000c300
 801456c:	20010ad4 	.word	0x20010ad4
 8014570:	08016a11 	.word	0x08016a11
 8014574:	08016a09 	.word	0x08016a09
 8014578:	08016aa9 	.word	0x08016aa9
 801457c:	08016b45 	.word	0x08016b45

08014580 <rmw_context_fini>:
 8014580:	4b17      	ldr	r3, [pc, #92]	; (80145e0 <rmw_context_fini+0x60>)
 8014582:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8014584:	b570      	push	{r4, r5, r6, lr}
 8014586:	681c      	ldr	r4, [r3, #0]
 8014588:	4605      	mov	r5, r0
 801458a:	b334      	cbz	r4, 80145da <rmw_context_fini+0x5a>
 801458c:	2600      	movs	r6, #0
 801458e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8014592:	6902      	ldr	r2, [r0, #16]
 8014594:	428a      	cmp	r2, r1
 8014596:	d018      	beq.n	80145ca <rmw_context_fini+0x4a>
 8014598:	2c00      	cmp	r4, #0
 801459a:	d1f8      	bne.n	801458e <rmw_context_fini+0xe>
 801459c:	b189      	cbz	r1, 80145c2 <rmw_context_fini+0x42>
 801459e:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 80145a2:	789b      	ldrb	r3, [r3, #2]
 80145a4:	2b01      	cmp	r3, #1
 80145a6:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 80145aa:	bf14      	ite	ne
 80145ac:	210a      	movne	r1, #10
 80145ae:	2100      	moveq	r1, #0
 80145b0:	f7f9 ff90 	bl	800e4d4 <uxr_delete_session_retries>
 80145b4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80145b6:	f7f7 fa93 	bl	800bae0 <rmw_uxrce_fini_session_memory>
 80145ba:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80145bc:	3010      	adds	r0, #16
 80145be:	f7f9 f801 	bl	800d5c4 <uxr_close_custom_transport>
 80145c2:	2300      	movs	r3, #0
 80145c4:	64eb      	str	r3, [r5, #76]	; 0x4c
 80145c6:	4630      	mov	r0, r6
 80145c8:	bd70      	pop	{r4, r5, r6, pc}
 80145ca:	3018      	adds	r0, #24
 80145cc:	f000 f90e 	bl	80147ec <rmw_destroy_node>
 80145d0:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80145d2:	4606      	mov	r6, r0
 80145d4:	2c00      	cmp	r4, #0
 80145d6:	d1da      	bne.n	801458e <rmw_context_fini+0xe>
 80145d8:	e7e0      	b.n	801459c <rmw_context_fini+0x1c>
 80145da:	4626      	mov	r6, r4
 80145dc:	e7de      	b.n	801459c <rmw_context_fini+0x1c>
 80145de:	bf00      	nop
 80145e0:	20010af4 	.word	0x20010af4

080145e4 <create_topic>:
 80145e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145e8:	4605      	mov	r5, r0
 80145ea:	b084      	sub	sp, #16
 80145ec:	4822      	ldr	r0, [pc, #136]	; (8014678 <create_topic+0x94>)
 80145ee:	460f      	mov	r7, r1
 80145f0:	4616      	mov	r6, r2
 80145f2:	f7ff fd29 	bl	8014048 <get_memory>
 80145f6:	4604      	mov	r4, r0
 80145f8:	2800      	cmp	r0, #0
 80145fa:	d039      	beq.n	8014670 <create_topic+0x8c>
 80145fc:	692b      	ldr	r3, [r5, #16]
 80145fe:	6884      	ldr	r4, [r0, #8]
 8014600:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8014680 <create_topic+0x9c>
 8014604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014608:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801460c:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8014610:	1c42      	adds	r2, r0, #1
 8014612:	2102      	movs	r1, #2
 8014614:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8014618:	f7f8 ffd8 	bl	800d5cc <uxr_object_id>
 801461c:	223c      	movs	r2, #60	; 0x3c
 801461e:	6120      	str	r0, [r4, #16]
 8014620:	4641      	mov	r1, r8
 8014622:	4638      	mov	r0, r7
 8014624:	f7f7 fc38 	bl	800be98 <generate_topic_name>
 8014628:	b1f0      	cbz	r0, 8014668 <create_topic+0x84>
 801462a:	4f14      	ldr	r7, [pc, #80]	; (801467c <create_topic+0x98>)
 801462c:	4630      	mov	r0, r6
 801462e:	2264      	movs	r2, #100	; 0x64
 8014630:	4639      	mov	r1, r7
 8014632:	f7f7 fc01 	bl	800be38 <generate_type_name>
 8014636:	b1b8      	cbz	r0, 8014668 <create_topic+0x84>
 8014638:	6928      	ldr	r0, [r5, #16]
 801463a:	2306      	movs	r3, #6
 801463c:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8014640:	f8cd 8000 	str.w	r8, [sp]
 8014644:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8014648:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801464c:	6811      	ldr	r1, [r2, #0]
 801464e:	696b      	ldr	r3, [r5, #20]
 8014650:	6922      	ldr	r2, [r4, #16]
 8014652:	f7f8 fd75 	bl	800d140 <uxr_buffer_create_topic_bin>
 8014656:	4602      	mov	r2, r0
 8014658:	6928      	ldr	r0, [r5, #16]
 801465a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801465e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8014662:	f7f7 fbb3 	bl	800bdcc <run_xrce_session>
 8014666:	b918      	cbnz	r0, 8014670 <create_topic+0x8c>
 8014668:	4620      	mov	r0, r4
 801466a:	f7f7 faaf 	bl	800bbcc <rmw_uxrce_fini_topic_memory>
 801466e:	2400      	movs	r4, #0
 8014670:	4620      	mov	r0, r4
 8014672:	b004      	add	sp, #16
 8014674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014678:	20010b54 	.word	0x20010b54
 801467c:	20010c48 	.word	0x20010c48
 8014680:	20010c0c 	.word	0x20010c0c

08014684 <destroy_topic>:
 8014684:	b538      	push	{r3, r4, r5, lr}
 8014686:	6985      	ldr	r5, [r0, #24]
 8014688:	b1d5      	cbz	r5, 80146c0 <destroy_topic+0x3c>
 801468a:	4604      	mov	r4, r0
 801468c:	6928      	ldr	r0, [r5, #16]
 801468e:	6922      	ldr	r2, [r4, #16]
 8014690:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014694:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014698:	6819      	ldr	r1, [r3, #0]
 801469a:	f7f8 fcd3 	bl	800d044 <uxr_buffer_delete_entity>
 801469e:	4602      	mov	r2, r0
 80146a0:	6928      	ldr	r0, [r5, #16]
 80146a2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80146a6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80146aa:	f7f7 fb8f 	bl	800bdcc <run_xrce_session>
 80146ae:	2800      	cmp	r0, #0
 80146b0:	4620      	mov	r0, r4
 80146b2:	bf14      	ite	ne
 80146b4:	2400      	movne	r4, #0
 80146b6:	2402      	moveq	r4, #2
 80146b8:	f7f7 fa88 	bl	800bbcc <rmw_uxrce_fini_topic_memory>
 80146bc:	4620      	mov	r0, r4
 80146be:	bd38      	pop	{r3, r4, r5, pc}
 80146c0:	2401      	movs	r4, #1
 80146c2:	4620      	mov	r0, r4
 80146c4:	bd38      	pop	{r3, r4, r5, pc}
 80146c6:	bf00      	nop

080146c8 <create_node>:
 80146c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80146cc:	b083      	sub	sp, #12
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d05f      	beq.n	8014792 <create_node+0xca>
 80146d2:	4606      	mov	r6, r0
 80146d4:	4835      	ldr	r0, [pc, #212]	; (80147ac <create_node+0xe4>)
 80146d6:	460f      	mov	r7, r1
 80146d8:	4690      	mov	r8, r2
 80146da:	461d      	mov	r5, r3
 80146dc:	f7ff fcb4 	bl	8014048 <get_memory>
 80146e0:	2800      	cmp	r0, #0
 80146e2:	d056      	beq.n	8014792 <create_node+0xca>
 80146e4:	6884      	ldr	r4, [r0, #8]
 80146e6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80146e8:	6123      	str	r3, [r4, #16]
 80146ea:	f7ff fd15 	bl	8014118 <rmw_get_implementation_identifier>
 80146ee:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 80146f2:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80146f6:	f8c4 9020 	str.w	r9, [r4, #32]
 80146fa:	4630      	mov	r0, r6
 80146fc:	f7eb fd7a 	bl	80001f4 <strlen>
 8014700:	1c42      	adds	r2, r0, #1
 8014702:	2a3c      	cmp	r2, #60	; 0x3c
 8014704:	f104 0518 	add.w	r5, r4, #24
 8014708:	d840      	bhi.n	801478c <create_node+0xc4>
 801470a:	4648      	mov	r0, r9
 801470c:	4631      	mov	r1, r6
 801470e:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8014712:	f002 ff98 	bl	8017646 <memcpy>
 8014716:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 801471a:	4638      	mov	r0, r7
 801471c:	f7eb fd6a 	bl	80001f4 <strlen>
 8014720:	1c42      	adds	r2, r0, #1
 8014722:	2a3c      	cmp	r2, #60	; 0x3c
 8014724:	d832      	bhi.n	801478c <create_node+0xc4>
 8014726:	4639      	mov	r1, r7
 8014728:	4648      	mov	r0, r9
 801472a:	f002 ff8c 	bl	8017646 <memcpy>
 801472e:	6923      	ldr	r3, [r4, #16]
 8014730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014734:	2101      	movs	r1, #1
 8014736:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 801473a:	1842      	adds	r2, r0, r1
 801473c:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8014740:	f7f8 ff44 	bl	800d5cc <uxr_object_id>
 8014744:	6160      	str	r0, [r4, #20]
 8014746:	783b      	ldrb	r3, [r7, #0]
 8014748:	2b2f      	cmp	r3, #47	; 0x2f
 801474a:	d127      	bne.n	801479c <create_node+0xd4>
 801474c:	787b      	ldrb	r3, [r7, #1]
 801474e:	bb2b      	cbnz	r3, 801479c <create_node+0xd4>
 8014750:	4a17      	ldr	r2, [pc, #92]	; (80147b0 <create_node+0xe8>)
 8014752:	4818      	ldr	r0, [pc, #96]	; (80147b4 <create_node+0xec>)
 8014754:	4633      	mov	r3, r6
 8014756:	213c      	movs	r1, #60	; 0x3c
 8014758:	f002 fd7c 	bl	8017254 <sniprintf>
 801475c:	6920      	ldr	r0, [r4, #16]
 801475e:	4915      	ldr	r1, [pc, #84]	; (80147b4 <create_node+0xec>)
 8014760:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8014764:	9100      	str	r1, [sp, #0]
 8014766:	2106      	movs	r1, #6
 8014768:	9101      	str	r1, [sp, #4]
 801476a:	6811      	ldr	r1, [r2, #0]
 801476c:	6962      	ldr	r2, [r4, #20]
 801476e:	fa1f f388 	uxth.w	r3, r8
 8014772:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014776:	f7f8 fcb1 	bl	800d0dc <uxr_buffer_create_participant_bin>
 801477a:	4602      	mov	r2, r0
 801477c:	6920      	ldr	r0, [r4, #16]
 801477e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8014782:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8014786:	f7f7 fb21 	bl	800bdcc <run_xrce_session>
 801478a:	b918      	cbnz	r0, 8014794 <create_node+0xcc>
 801478c:	4628      	mov	r0, r5
 801478e:	f7f7 f9ad 	bl	800baec <rmw_uxrce_fini_node_memory>
 8014792:	2500      	movs	r5, #0
 8014794:	4628      	mov	r0, r5
 8014796:	b003      	add	sp, #12
 8014798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801479c:	4a06      	ldr	r2, [pc, #24]	; (80147b8 <create_node+0xf0>)
 801479e:	9600      	str	r6, [sp, #0]
 80147a0:	463b      	mov	r3, r7
 80147a2:	213c      	movs	r1, #60	; 0x3c
 80147a4:	4803      	ldr	r0, [pc, #12]	; (80147b4 <create_node+0xec>)
 80147a6:	f002 fd55 	bl	8017254 <sniprintf>
 80147aa:	e7d7      	b.n	801475c <create_node+0x94>
 80147ac:	20010af4 	.word	0x20010af4
 80147b0:	080186fc 	.word	0x080186fc
 80147b4:	20010cac 	.word	0x20010cac
 80147b8:	08018a8c 	.word	0x08018a8c

080147bc <rmw_create_node>:
 80147bc:	b199      	cbz	r1, 80147e6 <rmw_create_node+0x2a>
 80147be:	780b      	ldrb	r3, [r1, #0]
 80147c0:	468c      	mov	ip, r1
 80147c2:	b183      	cbz	r3, 80147e6 <rmw_create_node+0x2a>
 80147c4:	b410      	push	{r4}
 80147c6:	4614      	mov	r4, r2
 80147c8:	b14a      	cbz	r2, 80147de <rmw_create_node+0x22>
 80147ca:	7813      	ldrb	r3, [r2, #0]
 80147cc:	b13b      	cbz	r3, 80147de <rmw_create_node+0x22>
 80147ce:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80147d0:	4603      	mov	r3, r0
 80147d2:	4621      	mov	r1, r4
 80147d4:	4660      	mov	r0, ip
 80147d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147da:	f7ff bf75 	b.w	80146c8 <create_node>
 80147de:	2000      	movs	r0, #0
 80147e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147e4:	4770      	bx	lr
 80147e6:	2000      	movs	r0, #0
 80147e8:	4770      	bx	lr
 80147ea:	bf00      	nop

080147ec <rmw_destroy_node>:
 80147ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147ee:	b328      	cbz	r0, 801483c <rmw_destroy_node+0x50>
 80147f0:	4607      	mov	r7, r0
 80147f2:	6800      	ldr	r0, [r0, #0]
 80147f4:	b120      	cbz	r0, 8014800 <rmw_destroy_node+0x14>
 80147f6:	4b36      	ldr	r3, [pc, #216]	; (80148d0 <rmw_destroy_node+0xe4>)
 80147f8:	6819      	ldr	r1, [r3, #0]
 80147fa:	f7eb fcf1 	bl	80001e0 <strcmp>
 80147fe:	b9e8      	cbnz	r0, 801483c <rmw_destroy_node+0x50>
 8014800:	687d      	ldr	r5, [r7, #4]
 8014802:	b1dd      	cbz	r5, 801483c <rmw_destroy_node+0x50>
 8014804:	4b33      	ldr	r3, [pc, #204]	; (80148d4 <rmw_destroy_node+0xe8>)
 8014806:	681c      	ldr	r4, [r3, #0]
 8014808:	2c00      	cmp	r4, #0
 801480a:	d05f      	beq.n	80148cc <rmw_destroy_node+0xe0>
 801480c:	2600      	movs	r6, #0
 801480e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014812:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8014816:	429d      	cmp	r5, r3
 8014818:	d013      	beq.n	8014842 <rmw_destroy_node+0x56>
 801481a:	2c00      	cmp	r4, #0
 801481c:	d1f7      	bne.n	801480e <rmw_destroy_node+0x22>
 801481e:	4b2e      	ldr	r3, [pc, #184]	; (80148d8 <rmw_destroy_node+0xec>)
 8014820:	681c      	ldr	r4, [r3, #0]
 8014822:	b1c4      	cbz	r4, 8014856 <rmw_destroy_node+0x6a>
 8014824:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014828:	6a0b      	ldr	r3, [r1, #32]
 801482a:	429d      	cmp	r5, r3
 801482c:	d1f9      	bne.n	8014822 <rmw_destroy_node+0x36>
 801482e:	317c      	adds	r1, #124	; 0x7c
 8014830:	4638      	mov	r0, r7
 8014832:	f000 fae5 	bl	8014e00 <rmw_destroy_subscription>
 8014836:	2801      	cmp	r0, #1
 8014838:	4606      	mov	r6, r0
 801483a:	d1f2      	bne.n	8014822 <rmw_destroy_node+0x36>
 801483c:	2601      	movs	r6, #1
 801483e:	4630      	mov	r0, r6
 8014840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014842:	3184      	adds	r1, #132	; 0x84
 8014844:	4638      	mov	r0, r7
 8014846:	f7f6 ff81 	bl	800b74c <rmw_destroy_publisher>
 801484a:	2801      	cmp	r0, #1
 801484c:	4606      	mov	r6, r0
 801484e:	d0f5      	beq.n	801483c <rmw_destroy_node+0x50>
 8014850:	2c00      	cmp	r4, #0
 8014852:	d1dc      	bne.n	801480e <rmw_destroy_node+0x22>
 8014854:	e7e3      	b.n	801481e <rmw_destroy_node+0x32>
 8014856:	4b21      	ldr	r3, [pc, #132]	; (80148dc <rmw_destroy_node+0xf0>)
 8014858:	681c      	ldr	r4, [r3, #0]
 801485a:	b16c      	cbz	r4, 8014878 <rmw_destroy_node+0x8c>
 801485c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014860:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8014862:	429d      	cmp	r5, r3
 8014864:	d1f9      	bne.n	801485a <rmw_destroy_node+0x6e>
 8014866:	317c      	adds	r1, #124	; 0x7c
 8014868:	4638      	mov	r0, r7
 801486a:	f000 f993 	bl	8014b94 <rmw_destroy_service>
 801486e:	2801      	cmp	r0, #1
 8014870:	4606      	mov	r6, r0
 8014872:	d0e3      	beq.n	801483c <rmw_destroy_node+0x50>
 8014874:	2c00      	cmp	r4, #0
 8014876:	d1f1      	bne.n	801485c <rmw_destroy_node+0x70>
 8014878:	4b19      	ldr	r3, [pc, #100]	; (80148e0 <rmw_destroy_node+0xf4>)
 801487a:	681c      	ldr	r4, [r3, #0]
 801487c:	b16c      	cbz	r4, 801489a <rmw_destroy_node+0xae>
 801487e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014882:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8014884:	429d      	cmp	r5, r3
 8014886:	d1f9      	bne.n	801487c <rmw_destroy_node+0x90>
 8014888:	317c      	adds	r1, #124	; 0x7c
 801488a:	4638      	mov	r0, r7
 801488c:	f7ff fc00 	bl	8014090 <rmw_destroy_client>
 8014890:	2801      	cmp	r0, #1
 8014892:	4606      	mov	r6, r0
 8014894:	d0d2      	beq.n	801483c <rmw_destroy_node+0x50>
 8014896:	2c00      	cmp	r4, #0
 8014898:	d1f1      	bne.n	801487e <rmw_destroy_node+0x92>
 801489a:	6928      	ldr	r0, [r5, #16]
 801489c:	696a      	ldr	r2, [r5, #20]
 801489e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80148a2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80148a6:	6819      	ldr	r1, [r3, #0]
 80148a8:	f7f8 fbcc 	bl	800d044 <uxr_buffer_delete_entity>
 80148ac:	4602      	mov	r2, r0
 80148ae:	6928      	ldr	r0, [r5, #16]
 80148b0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80148b4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80148b8:	f7f7 fa88 	bl	800bdcc <run_xrce_session>
 80148bc:	2800      	cmp	r0, #0
 80148be:	bf08      	it	eq
 80148c0:	2602      	moveq	r6, #2
 80148c2:	4638      	mov	r0, r7
 80148c4:	f7f7 f912 	bl	800baec <rmw_uxrce_fini_node_memory>
 80148c8:	4630      	mov	r0, r6
 80148ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148cc:	4626      	mov	r6, r4
 80148ce:	e7a6      	b.n	801481e <rmw_destroy_node+0x32>
 80148d0:	0801901c 	.word	0x0801901c
 80148d4:	20010b04 	.word	0x20010b04
 80148d8:	20010b44 	.word	0x20010b44
 80148dc:	20010b14 	.word	0x20010b14
 80148e0:	2000c228 	.word	0x2000c228

080148e4 <rmw_node_get_graph_guard_condition>:
 80148e4:	6843      	ldr	r3, [r0, #4]
 80148e6:	6918      	ldr	r0, [r3, #16]
 80148e8:	f500 705a 	add.w	r0, r0, #872	; 0x368
 80148ec:	4770      	bx	lr
 80148ee:	bf00      	nop

080148f0 <rmw_send_request>:
 80148f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148f4:	4604      	mov	r4, r0
 80148f6:	6800      	ldr	r0, [r0, #0]
 80148f8:	b08b      	sub	sp, #44	; 0x2c
 80148fa:	460e      	mov	r6, r1
 80148fc:	4615      	mov	r5, r2
 80148fe:	b128      	cbz	r0, 801490c <rmw_send_request+0x1c>
 8014900:	4b21      	ldr	r3, [pc, #132]	; (8014988 <rmw_send_request+0x98>)
 8014902:	6819      	ldr	r1, [r3, #0]
 8014904:	f7eb fc6c 	bl	80001e0 <strcmp>
 8014908:	2800      	cmp	r0, #0
 801490a:	d139      	bne.n	8014980 <rmw_send_request+0x90>
 801490c:	6864      	ldr	r4, [r4, #4]
 801490e:	6963      	ldr	r3, [r4, #20]
 8014910:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8014914:	689b      	ldr	r3, [r3, #8]
 8014916:	4798      	blx	r3
 8014918:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801491c:	4630      	mov	r0, r6
 801491e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014922:	4798      	blx	r3
 8014924:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014928:	9000      	str	r0, [sp, #0]
 801492a:	6922      	ldr	r2, [r4, #16]
 801492c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 801492e:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8014932:	ab02      	add	r3, sp, #8
 8014934:	f7fa ff04 	bl	800f740 <uxr_prepare_output_stream>
 8014938:	2700      	movs	r7, #0
 801493a:	6028      	str	r0, [r5, #0]
 801493c:	606f      	str	r7, [r5, #4]
 801493e:	b198      	cbz	r0, 8014968 <rmw_send_request+0x78>
 8014940:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014944:	a902      	add	r1, sp, #8
 8014946:	4630      	mov	r0, r6
 8014948:	4798      	blx	r3
 801494a:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 801494e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8014952:	2b01      	cmp	r3, #1
 8014954:	d00c      	beq.n	8014970 <rmw_send_request+0x80>
 8014956:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8014958:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801495c:	f7f9 fc48 	bl	800e1f0 <uxr_run_session_until_confirm_delivery>
 8014960:	4638      	mov	r0, r7
 8014962:	b00b      	add	sp, #44	; 0x2c
 8014964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014968:	2001      	movs	r0, #1
 801496a:	b00b      	add	sp, #44	; 0x2c
 801496c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014970:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014974:	f7f9 f87c 	bl	800da70 <uxr_flash_output_streams>
 8014978:	4638      	mov	r0, r7
 801497a:	b00b      	add	sp, #44	; 0x2c
 801497c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014980:	200c      	movs	r0, #12
 8014982:	b00b      	add	sp, #44	; 0x2c
 8014984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014988:	0801901c 	.word	0x0801901c

0801498c <rmw_take_request>:
 801498c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014990:	4605      	mov	r5, r0
 8014992:	6800      	ldr	r0, [r0, #0]
 8014994:	b089      	sub	sp, #36	; 0x24
 8014996:	460c      	mov	r4, r1
 8014998:	4690      	mov	r8, r2
 801499a:	461e      	mov	r6, r3
 801499c:	b128      	cbz	r0, 80149aa <rmw_take_request+0x1e>
 801499e:	4b28      	ldr	r3, [pc, #160]	; (8014a40 <rmw_take_request+0xb4>)
 80149a0:	6819      	ldr	r1, [r3, #0]
 80149a2:	f7eb fc1d 	bl	80001e0 <strcmp>
 80149a6:	2800      	cmp	r0, #0
 80149a8:	d146      	bne.n	8014a38 <rmw_take_request+0xac>
 80149aa:	b10e      	cbz	r6, 80149b0 <rmw_take_request+0x24>
 80149ac:	2300      	movs	r3, #0
 80149ae:	7033      	strb	r3, [r6, #0]
 80149b0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80149b4:	f7f7 f98c 	bl	800bcd0 <rmw_uxrce_clean_expired_static_input_buffer>
 80149b8:	4648      	mov	r0, r9
 80149ba:	f7f7 f963 	bl	800bc84 <rmw_uxrce_find_static_input_buffer_by_owner>
 80149be:	4607      	mov	r7, r0
 80149c0:	b3b0      	cbz	r0, 8014a30 <rmw_take_request+0xa4>
 80149c2:	6885      	ldr	r5, [r0, #8]
 80149c4:	f8d5 3838 	ldr.w	r3, [r5, #2104]	; 0x838
 80149c8:	f8d5 283c 	ldr.w	r2, [r5, #2108]	; 0x83c
 80149cc:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80149d0:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 80149d4:	7423      	strb	r3, [r4, #16]
 80149d6:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 80149da:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 80149de:	74e2      	strb	r2, [r4, #19]
 80149e0:	f8a4 3011 	strh.w	r3, [r4, #17]
 80149e4:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 80149e8:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 80149ec:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 80149f0:	61e1      	str	r1, [r4, #28]
 80149f2:	6162      	str	r2, [r4, #20]
 80149f4:	61a3      	str	r3, [r4, #24]
 80149f6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80149fa:	689b      	ldr	r3, [r3, #8]
 80149fc:	4798      	blx	r3
 80149fe:	6844      	ldr	r4, [r0, #4]
 8014a00:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8014a04:	f105 0110 	add.w	r1, r5, #16
 8014a08:	4668      	mov	r0, sp
 8014a0a:	f7f8 faab 	bl	800cf64 <ucdr_init_buffer>
 8014a0e:	68e3      	ldr	r3, [r4, #12]
 8014a10:	4641      	mov	r1, r8
 8014a12:	4668      	mov	r0, sp
 8014a14:	4798      	blx	r3
 8014a16:	4639      	mov	r1, r7
 8014a18:	4604      	mov	r4, r0
 8014a1a:	480a      	ldr	r0, [pc, #40]	; (8014a44 <rmw_take_request+0xb8>)
 8014a1c:	f7ff fb24 	bl	8014068 <put_memory>
 8014a20:	b106      	cbz	r6, 8014a24 <rmw_take_request+0x98>
 8014a22:	7034      	strb	r4, [r6, #0]
 8014a24:	f084 0001 	eor.w	r0, r4, #1
 8014a28:	b2c0      	uxtb	r0, r0
 8014a2a:	b009      	add	sp, #36	; 0x24
 8014a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a30:	2001      	movs	r0, #1
 8014a32:	b009      	add	sp, #36	; 0x24
 8014a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a38:	200c      	movs	r0, #12
 8014a3a:	b009      	add	sp, #36	; 0x24
 8014a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a40:	0801901c 	.word	0x0801901c
 8014a44:	20010b34 	.word	0x20010b34

08014a48 <rmw_send_response>:
 8014a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a4a:	4605      	mov	r5, r0
 8014a4c:	6800      	ldr	r0, [r0, #0]
 8014a4e:	b091      	sub	sp, #68	; 0x44
 8014a50:	460c      	mov	r4, r1
 8014a52:	4616      	mov	r6, r2
 8014a54:	b128      	cbz	r0, 8014a62 <rmw_send_response+0x1a>
 8014a56:	4b29      	ldr	r3, [pc, #164]	; (8014afc <rmw_send_response+0xb4>)
 8014a58:	6819      	ldr	r1, [r3, #0]
 8014a5a:	f7eb fbc1 	bl	80001e0 <strcmp>
 8014a5e:	2800      	cmp	r0, #0
 8014a60:	d141      	bne.n	8014ae6 <rmw_send_response+0x9e>
 8014a62:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8014a66:	9306      	str	r3, [sp, #24]
 8014a68:	4623      	mov	r3, r4
 8014a6a:	9207      	str	r2, [sp, #28]
 8014a6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a70:	686d      	ldr	r5, [r5, #4]
 8014a72:	789b      	ldrb	r3, [r3, #2]
 8014a74:	68a1      	ldr	r1, [r4, #8]
 8014a76:	f88d 2017 	strb.w	r2, [sp, #23]
 8014a7a:	f88d 3016 	strb.w	r3, [sp, #22]
 8014a7e:	68e2      	ldr	r2, [r4, #12]
 8014a80:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8014a84:	6860      	ldr	r0, [r4, #4]
 8014a86:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014a8a:	ab02      	add	r3, sp, #8
 8014a8c:	c307      	stmia	r3!, {r0, r1, r2}
 8014a8e:	696b      	ldr	r3, [r5, #20]
 8014a90:	6faf      	ldr	r7, [r5, #120]	; 0x78
 8014a92:	68db      	ldr	r3, [r3, #12]
 8014a94:	4798      	blx	r3
 8014a96:	6844      	ldr	r4, [r0, #4]
 8014a98:	4630      	mov	r0, r6
 8014a9a:	6923      	ldr	r3, [r4, #16]
 8014a9c:	4798      	blx	r3
 8014a9e:	f100 0318 	add.w	r3, r0, #24
 8014aa2:	6938      	ldr	r0, [r7, #16]
 8014aa4:	9300      	str	r3, [sp, #0]
 8014aa6:	692a      	ldr	r2, [r5, #16]
 8014aa8:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8014aaa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014aae:	ab08      	add	r3, sp, #32
 8014ab0:	f7fa fe46 	bl	800f740 <uxr_prepare_output_stream>
 8014ab4:	b910      	cbnz	r0, 8014abc <rmw_send_response+0x74>
 8014ab6:	2001      	movs	r0, #1
 8014ab8:	b011      	add	sp, #68	; 0x44
 8014aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014abc:	a902      	add	r1, sp, #8
 8014abe:	a808      	add	r0, sp, #32
 8014ac0:	f7fb ff8a 	bl	80109d8 <uxr_serialize_SampleIdentity>
 8014ac4:	68a3      	ldr	r3, [r4, #8]
 8014ac6:	a908      	add	r1, sp, #32
 8014ac8:	4630      	mov	r0, r6
 8014aca:	4798      	blx	r3
 8014acc:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8014ad0:	6938      	ldr	r0, [r7, #16]
 8014ad2:	2b01      	cmp	r3, #1
 8014ad4:	d00a      	beq.n	8014aec <rmw_send_response+0xa4>
 8014ad6:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8014ad8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014adc:	f7f9 fb88 	bl	800e1f0 <uxr_run_session_until_confirm_delivery>
 8014ae0:	2000      	movs	r0, #0
 8014ae2:	b011      	add	sp, #68	; 0x44
 8014ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ae6:	200c      	movs	r0, #12
 8014ae8:	b011      	add	sp, #68	; 0x44
 8014aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014aec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014af0:	f7f8 ffbe 	bl	800da70 <uxr_flash_output_streams>
 8014af4:	2000      	movs	r0, #0
 8014af6:	b011      	add	sp, #68	; 0x44
 8014af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014afa:	bf00      	nop
 8014afc:	0801901c 	.word	0x0801901c

08014b00 <rmw_take_response>:
 8014b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b04:	4604      	mov	r4, r0
 8014b06:	6800      	ldr	r0, [r0, #0]
 8014b08:	b088      	sub	sp, #32
 8014b0a:	4688      	mov	r8, r1
 8014b0c:	4617      	mov	r7, r2
 8014b0e:	461d      	mov	r5, r3
 8014b10:	b120      	cbz	r0, 8014b1c <rmw_take_response+0x1c>
 8014b12:	4b1e      	ldr	r3, [pc, #120]	; (8014b8c <rmw_take_response+0x8c>)
 8014b14:	6819      	ldr	r1, [r3, #0]
 8014b16:	f7eb fb63 	bl	80001e0 <strcmp>
 8014b1a:	bb78      	cbnz	r0, 8014b7c <rmw_take_response+0x7c>
 8014b1c:	b10d      	cbz	r5, 8014b22 <rmw_take_response+0x22>
 8014b1e:	2300      	movs	r3, #0
 8014b20:	702b      	strb	r3, [r5, #0]
 8014b22:	6864      	ldr	r4, [r4, #4]
 8014b24:	f7f7 f8d4 	bl	800bcd0 <rmw_uxrce_clean_expired_static_input_buffer>
 8014b28:	4620      	mov	r0, r4
 8014b2a:	f7f7 f8ab 	bl	800bc84 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014b2e:	4606      	mov	r6, r0
 8014b30:	b340      	cbz	r0, 8014b84 <rmw_take_response+0x84>
 8014b32:	6963      	ldr	r3, [r4, #20]
 8014b34:	6884      	ldr	r4, [r0, #8]
 8014b36:	68db      	ldr	r3, [r3, #12]
 8014b38:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 8014b3c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8014b40:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8014b44:	4798      	blx	r3
 8014b46:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8014b4a:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8014b4e:	f104 0110 	add.w	r1, r4, #16
 8014b52:	4668      	mov	r0, sp
 8014b54:	f7f8 fa06 	bl	800cf64 <ucdr_init_buffer>
 8014b58:	4639      	mov	r1, r7
 8014b5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014b5e:	4668      	mov	r0, sp
 8014b60:	4798      	blx	r3
 8014b62:	4631      	mov	r1, r6
 8014b64:	4604      	mov	r4, r0
 8014b66:	480a      	ldr	r0, [pc, #40]	; (8014b90 <rmw_take_response+0x90>)
 8014b68:	f7ff fa7e 	bl	8014068 <put_memory>
 8014b6c:	b105      	cbz	r5, 8014b70 <rmw_take_response+0x70>
 8014b6e:	702c      	strb	r4, [r5, #0]
 8014b70:	f084 0001 	eor.w	r0, r4, #1
 8014b74:	b2c0      	uxtb	r0, r0
 8014b76:	b008      	add	sp, #32
 8014b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b7c:	200c      	movs	r0, #12
 8014b7e:	b008      	add	sp, #32
 8014b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b84:	2001      	movs	r0, #1
 8014b86:	b008      	add	sp, #32
 8014b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b8c:	0801901c 	.word	0x0801901c
 8014b90:	20010b34 	.word	0x20010b34

08014b94 <rmw_destroy_service>:
 8014b94:	b570      	push	{r4, r5, r6, lr}
 8014b96:	b128      	cbz	r0, 8014ba4 <rmw_destroy_service+0x10>
 8014b98:	4604      	mov	r4, r0
 8014b9a:	6800      	ldr	r0, [r0, #0]
 8014b9c:	460d      	mov	r5, r1
 8014b9e:	f7f7 f995 	bl	800becc <is_uxrce_rmw_identifier_valid>
 8014ba2:	b910      	cbnz	r0, 8014baa <rmw_destroy_service+0x16>
 8014ba4:	2401      	movs	r4, #1
 8014ba6:	4620      	mov	r0, r4
 8014ba8:	bd70      	pop	{r4, r5, r6, pc}
 8014baa:	6863      	ldr	r3, [r4, #4]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d0f9      	beq.n	8014ba4 <rmw_destroy_service+0x10>
 8014bb0:	2d00      	cmp	r5, #0
 8014bb2:	d0f7      	beq.n	8014ba4 <rmw_destroy_service+0x10>
 8014bb4:	6828      	ldr	r0, [r5, #0]
 8014bb6:	f7f7 f989 	bl	800becc <is_uxrce_rmw_identifier_valid>
 8014bba:	2800      	cmp	r0, #0
 8014bbc:	d0f2      	beq.n	8014ba4 <rmw_destroy_service+0x10>
 8014bbe:	686e      	ldr	r6, [r5, #4]
 8014bc0:	2e00      	cmp	r6, #0
 8014bc2:	d0ef      	beq.n	8014ba4 <rmw_destroy_service+0x10>
 8014bc4:	6864      	ldr	r4, [r4, #4]
 8014bc6:	6932      	ldr	r2, [r6, #16]
 8014bc8:	6920      	ldr	r0, [r4, #16]
 8014bca:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014bce:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014bd2:	6819      	ldr	r1, [r3, #0]
 8014bd4:	f001 fabe 	bl	8016154 <uxr_buffer_cancel_data>
 8014bd8:	4602      	mov	r2, r0
 8014bda:	6920      	ldr	r0, [r4, #16]
 8014bdc:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014be0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014be4:	f7f7 f8f2 	bl	800bdcc <run_xrce_session>
 8014be8:	6920      	ldr	r0, [r4, #16]
 8014bea:	6932      	ldr	r2, [r6, #16]
 8014bec:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014bf0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014bf4:	6819      	ldr	r1, [r3, #0]
 8014bf6:	f7f8 fa25 	bl	800d044 <uxr_buffer_delete_entity>
 8014bfa:	4602      	mov	r2, r0
 8014bfc:	6920      	ldr	r0, [r4, #16]
 8014bfe:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014c02:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014c06:	f7f7 f8e1 	bl	800bdcc <run_xrce_session>
 8014c0a:	2800      	cmp	r0, #0
 8014c0c:	4628      	mov	r0, r5
 8014c0e:	bf14      	ite	ne
 8014c10:	2400      	movne	r4, #0
 8014c12:	2402      	moveq	r4, #2
 8014c14:	f7f6 ffae 	bl	800bb74 <rmw_uxrce_fini_service_memory>
 8014c18:	e7c5      	b.n	8014ba6 <rmw_destroy_service+0x12>
 8014c1a:	bf00      	nop

08014c1c <rmw_create_subscription>:
 8014c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c20:	b08d      	sub	sp, #52	; 0x34
 8014c22:	2800      	cmp	r0, #0
 8014c24:	f000 80d1 	beq.w	8014dca <rmw_create_subscription+0x1ae>
 8014c28:	460e      	mov	r6, r1
 8014c2a:	2900      	cmp	r1, #0
 8014c2c:	f000 80cd 	beq.w	8014dca <rmw_create_subscription+0x1ae>
 8014c30:	4604      	mov	r4, r0
 8014c32:	6800      	ldr	r0, [r0, #0]
 8014c34:	4615      	mov	r5, r2
 8014c36:	4698      	mov	r8, r3
 8014c38:	f7f7 f948 	bl	800becc <is_uxrce_rmw_identifier_valid>
 8014c3c:	2800      	cmp	r0, #0
 8014c3e:	f000 80c4 	beq.w	8014dca <rmw_create_subscription+0x1ae>
 8014c42:	2d00      	cmp	r5, #0
 8014c44:	f000 80c1 	beq.w	8014dca <rmw_create_subscription+0x1ae>
 8014c48:	782b      	ldrb	r3, [r5, #0]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	f000 80bd 	beq.w	8014dca <rmw_create_subscription+0x1ae>
 8014c50:	f1b8 0f00 	cmp.w	r8, #0
 8014c54:	f000 80b9 	beq.w	8014dca <rmw_create_subscription+0x1ae>
 8014c58:	485e      	ldr	r0, [pc, #376]	; (8014dd4 <rmw_create_subscription+0x1b8>)
 8014c5a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014c5e:	f7ff f9f3 	bl	8014048 <get_memory>
 8014c62:	4604      	mov	r4, r0
 8014c64:	2800      	cmp	r0, #0
 8014c66:	f000 80b1 	beq.w	8014dcc <rmw_create_subscription+0x1b0>
 8014c6a:	6887      	ldr	r7, [r0, #8]
 8014c6c:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8014c70:	f7ff fa52 	bl	8014118 <rmw_get_implementation_identifier>
 8014c74:	f107 0a98 	add.w	sl, r7, #152	; 0x98
 8014c78:	67f8      	str	r0, [r7, #124]	; 0x7c
 8014c7a:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8014c7e:	4628      	mov	r0, r5
 8014c80:	f7eb fab8 	bl	80001f4 <strlen>
 8014c84:	3001      	adds	r0, #1
 8014c86:	283c      	cmp	r0, #60	; 0x3c
 8014c88:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8014c8c:	f200 8096 	bhi.w	8014dbc <rmw_create_subscription+0x1a0>
 8014c90:	4a51      	ldr	r2, [pc, #324]	; (8014dd8 <rmw_create_subscription+0x1bc>)
 8014c92:	462b      	mov	r3, r5
 8014c94:	213c      	movs	r1, #60	; 0x3c
 8014c96:	4650      	mov	r0, sl
 8014c98:	f002 fadc 	bl	8017254 <sniprintf>
 8014c9c:	4641      	mov	r1, r8
 8014c9e:	f8c7 9020 	str.w	r9, [r7, #32]
 8014ca2:	2250      	movs	r2, #80	; 0x50
 8014ca4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8014ca8:	f002 fccd 	bl	8017646 <memcpy>
 8014cac:	494b      	ldr	r1, [pc, #300]	; (8014ddc <rmw_create_subscription+0x1c0>)
 8014cae:	4630      	mov	r0, r6
 8014cb0:	f7f7 f91a 	bl	800bee8 <get_message_typesupport_handle>
 8014cb4:	2800      	cmp	r0, #0
 8014cb6:	f000 8081 	beq.w	8014dbc <rmw_create_subscription+0x1a0>
 8014cba:	6842      	ldr	r2, [r0, #4]
 8014cbc:	61ba      	str	r2, [r7, #24]
 8014cbe:	2a00      	cmp	r2, #0
 8014cc0:	d07c      	beq.n	8014dbc <rmw_create_subscription+0x1a0>
 8014cc2:	4629      	mov	r1, r5
 8014cc4:	4643      	mov	r3, r8
 8014cc6:	4648      	mov	r0, r9
 8014cc8:	f7ff fc8c 	bl	80145e4 <create_topic>
 8014ccc:	61f8      	str	r0, [r7, #28]
 8014cce:	2800      	cmp	r0, #0
 8014cd0:	d078      	beq.n	8014dc4 <rmw_create_subscription+0x1a8>
 8014cd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014cda:	2104      	movs	r1, #4
 8014cdc:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 8014ce0:	1c42      	adds	r2, r0, #1
 8014ce2:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 8014ce6:	f7f8 fc71 	bl	800d5cc <uxr_object_id>
 8014cea:	6138      	str	r0, [r7, #16]
 8014cec:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014cf0:	2506      	movs	r5, #6
 8014cf2:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 8014cf6:	9500      	str	r5, [sp, #0]
 8014cf8:	6819      	ldr	r1, [r3, #0]
 8014cfa:	693a      	ldr	r2, [r7, #16]
 8014cfc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014d00:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014d04:	f7f8 fa82 	bl	800d20c <uxr_buffer_create_subscriber_bin>
 8014d08:	4602      	mov	r2, r0
 8014d0a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014d0e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8014d12:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8014d16:	f7f7 f859 	bl	800bdcc <run_xrce_session>
 8014d1a:	2800      	cmp	r0, #0
 8014d1c:	d04e      	beq.n	8014dbc <rmw_create_subscription+0x1a0>
 8014d1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014d26:	4629      	mov	r1, r5
 8014d28:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 8014d2c:	1c42      	adds	r2, r0, #1
 8014d2e:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 8014d32:	f7f8 fc4b 	bl	800d5cc <uxr_object_id>
 8014d36:	ae08      	add	r6, sp, #32
 8014d38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014d3c:	69fb      	ldr	r3, [r7, #28]
 8014d3e:	6178      	str	r0, [r7, #20]
 8014d40:	4641      	mov	r1, r8
 8014d42:	4630      	mov	r0, r6
 8014d44:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 8014d48:	9305      	str	r3, [sp, #20]
 8014d4a:	f7f7 f85b 	bl	800be04 <convert_qos_profile>
 8014d4e:	9503      	str	r5, [sp, #12]
 8014d50:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014d54:	9b05      	ldr	r3, [sp, #20]
 8014d56:	9001      	str	r0, [sp, #4]
 8014d58:	f8ad 1008 	strh.w	r1, [sp, #8]
 8014d5c:	691b      	ldr	r3, [r3, #16]
 8014d5e:	9300      	str	r3, [sp, #0]
 8014d60:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8014d64:	f8db 1000 	ldr.w	r1, [fp]
 8014d68:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 8014d6c:	f7f8 faf4 	bl	800d358 <uxr_buffer_create_datareader_bin>
 8014d70:	4602      	mov	r2, r0
 8014d72:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014d76:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8014d7a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8014d7e:	f7f7 f825 	bl	800bdcc <run_xrce_session>
 8014d82:	b1d8      	cbz	r0, 8014dbc <rmw_create_subscription+0x1a0>
 8014d84:	f898 3008 	ldrb.w	r3, [r8, #8]
 8014d88:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014d8c:	2b02      	cmp	r3, #2
 8014d8e:	bf0c      	ite	eq
 8014d90:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 8014d94:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 8014d98:	9307      	str	r3, [sp, #28]
 8014d9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014d9e:	2200      	movs	r2, #0
 8014da0:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8014da4:	ab0a      	add	r3, sp, #40	; 0x28
 8014da6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8014daa:	9300      	str	r3, [sp, #0]
 8014dac:	697a      	ldr	r2, [r7, #20]
 8014dae:	9b07      	ldr	r3, [sp, #28]
 8014db0:	6809      	ldr	r1, [r1, #0]
 8014db2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014db6:	f001 f993 	bl	80160e0 <uxr_buffer_request_data>
 8014dba:	e007      	b.n	8014dcc <rmw_create_subscription+0x1b0>
 8014dbc:	69f8      	ldr	r0, [r7, #28]
 8014dbe:	b108      	cbz	r0, 8014dc4 <rmw_create_subscription+0x1a8>
 8014dc0:	f7f6 ff04 	bl	800bbcc <rmw_uxrce_fini_topic_memory>
 8014dc4:	4620      	mov	r0, r4
 8014dc6:	f7f6 febf 	bl	800bb48 <rmw_uxrce_fini_subscription_memory>
 8014dca:	2400      	movs	r4, #0
 8014dcc:	4620      	mov	r0, r4
 8014dce:	b00d      	add	sp, #52	; 0x34
 8014dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dd4:	20010b44 	.word	0x20010b44
 8014dd8:	080186fc 	.word	0x080186fc
 8014ddc:	080186c8 	.word	0x080186c8

08014de0 <rmw_subscription_get_actual_qos>:
 8014de0:	b150      	cbz	r0, 8014df8 <rmw_subscription_get_actual_qos+0x18>
 8014de2:	b508      	push	{r3, lr}
 8014de4:	460b      	mov	r3, r1
 8014de6:	b149      	cbz	r1, 8014dfc <rmw_subscription_get_actual_qos+0x1c>
 8014de8:	6841      	ldr	r1, [r0, #4]
 8014dea:	2250      	movs	r2, #80	; 0x50
 8014dec:	3128      	adds	r1, #40	; 0x28
 8014dee:	4618      	mov	r0, r3
 8014df0:	f002 fc29 	bl	8017646 <memcpy>
 8014df4:	2000      	movs	r0, #0
 8014df6:	bd08      	pop	{r3, pc}
 8014df8:	200b      	movs	r0, #11
 8014dfa:	4770      	bx	lr
 8014dfc:	200b      	movs	r0, #11
 8014dfe:	bd08      	pop	{r3, pc}

08014e00 <rmw_destroy_subscription>:
 8014e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e02:	b128      	cbz	r0, 8014e10 <rmw_destroy_subscription+0x10>
 8014e04:	4604      	mov	r4, r0
 8014e06:	6800      	ldr	r0, [r0, #0]
 8014e08:	460d      	mov	r5, r1
 8014e0a:	f7f7 f85f 	bl	800becc <is_uxrce_rmw_identifier_valid>
 8014e0e:	b910      	cbnz	r0, 8014e16 <rmw_destroy_subscription+0x16>
 8014e10:	2401      	movs	r4, #1
 8014e12:	4620      	mov	r0, r4
 8014e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e16:	6863      	ldr	r3, [r4, #4]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d0f9      	beq.n	8014e10 <rmw_destroy_subscription+0x10>
 8014e1c:	2d00      	cmp	r5, #0
 8014e1e:	d0f7      	beq.n	8014e10 <rmw_destroy_subscription+0x10>
 8014e20:	6828      	ldr	r0, [r5, #0]
 8014e22:	f7f7 f853 	bl	800becc <is_uxrce_rmw_identifier_valid>
 8014e26:	2800      	cmp	r0, #0
 8014e28:	d0f2      	beq.n	8014e10 <rmw_destroy_subscription+0x10>
 8014e2a:	686c      	ldr	r4, [r5, #4]
 8014e2c:	2c00      	cmp	r4, #0
 8014e2e:	d0ef      	beq.n	8014e10 <rmw_destroy_subscription+0x10>
 8014e30:	6a26      	ldr	r6, [r4, #32]
 8014e32:	6962      	ldr	r2, [r4, #20]
 8014e34:	6930      	ldr	r0, [r6, #16]
 8014e36:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014e3a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014e3e:	6819      	ldr	r1, [r3, #0]
 8014e40:	f001 f988 	bl	8016154 <uxr_buffer_cancel_data>
 8014e44:	4602      	mov	r2, r0
 8014e46:	6930      	ldr	r0, [r6, #16]
 8014e48:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014e4c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014e50:	f7f6 ffbc 	bl	800bdcc <run_xrce_session>
 8014e54:	69e0      	ldr	r0, [r4, #28]
 8014e56:	f7ff fc15 	bl	8014684 <destroy_topic>
 8014e5a:	6a23      	ldr	r3, [r4, #32]
 8014e5c:	6962      	ldr	r2, [r4, #20]
 8014e5e:	6918      	ldr	r0, [r3, #16]
 8014e60:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014e64:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014e68:	6819      	ldr	r1, [r3, #0]
 8014e6a:	f7f8 f8eb 	bl	800d044 <uxr_buffer_delete_entity>
 8014e6e:	6a23      	ldr	r3, [r4, #32]
 8014e70:	6922      	ldr	r2, [r4, #16]
 8014e72:	691b      	ldr	r3, [r3, #16]
 8014e74:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8014e78:	4604      	mov	r4, r0
 8014e7a:	6809      	ldr	r1, [r1, #0]
 8014e7c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8014e80:	f7f8 f8e0 	bl	800d044 <uxr_buffer_delete_entity>
 8014e84:	6937      	ldr	r7, [r6, #16]
 8014e86:	4622      	mov	r2, r4
 8014e88:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8014e8c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8014e90:	4604      	mov	r4, r0
 8014e92:	4638      	mov	r0, r7
 8014e94:	f7f6 ff9a 	bl	800bdcc <run_xrce_session>
 8014e98:	6936      	ldr	r6, [r6, #16]
 8014e9a:	4622      	mov	r2, r4
 8014e9c:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8014ea0:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8014ea4:	4604      	mov	r4, r0
 8014ea6:	4630      	mov	r0, r6
 8014ea8:	f7f6 ff90 	bl	800bdcc <run_xrce_session>
 8014eac:	b12c      	cbz	r4, 8014eba <rmw_destroy_subscription+0xba>
 8014eae:	b120      	cbz	r0, 8014eba <rmw_destroy_subscription+0xba>
 8014eb0:	2400      	movs	r4, #0
 8014eb2:	4628      	mov	r0, r5
 8014eb4:	f7f6 fe48 	bl	800bb48 <rmw_uxrce_fini_subscription_memory>
 8014eb8:	e7ab      	b.n	8014e12 <rmw_destroy_subscription+0x12>
 8014eba:	2402      	movs	r4, #2
 8014ebc:	e7f9      	b.n	8014eb2 <rmw_destroy_subscription+0xb2>
 8014ebe:	bf00      	nop

08014ec0 <rmw_take_with_info>:
 8014ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ec2:	4604      	mov	r4, r0
 8014ec4:	6800      	ldr	r0, [r0, #0]
 8014ec6:	b089      	sub	sp, #36	; 0x24
 8014ec8:	460f      	mov	r7, r1
 8014eca:	4615      	mov	r5, r2
 8014ecc:	b128      	cbz	r0, 8014eda <rmw_take_with_info+0x1a>
 8014ece:	4b24      	ldr	r3, [pc, #144]	; (8014f60 <rmw_take_with_info+0xa0>)
 8014ed0:	6819      	ldr	r1, [r3, #0]
 8014ed2:	f7eb f985 	bl	80001e0 <strcmp>
 8014ed6:	2800      	cmp	r0, #0
 8014ed8:	d13e      	bne.n	8014f58 <rmw_take_with_info+0x98>
 8014eda:	b305      	cbz	r5, 8014f1e <rmw_take_with_info+0x5e>
 8014edc:	6864      	ldr	r4, [r4, #4]
 8014ede:	2300      	movs	r3, #0
 8014ee0:	702b      	strb	r3, [r5, #0]
 8014ee2:	f7f6 fef5 	bl	800bcd0 <rmw_uxrce_clean_expired_static_input_buffer>
 8014ee6:	4620      	mov	r0, r4
 8014ee8:	f7f6 fecc 	bl	800bc84 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014eec:	4606      	mov	r6, r0
 8014eee:	b1f0      	cbz	r0, 8014f2e <rmw_take_with_info+0x6e>
 8014ef0:	6881      	ldr	r1, [r0, #8]
 8014ef2:	4668      	mov	r0, sp
 8014ef4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8014ef8:	3110      	adds	r1, #16
 8014efa:	f7f8 f833 	bl	800cf64 <ucdr_init_buffer>
 8014efe:	69a3      	ldr	r3, [r4, #24]
 8014f00:	4639      	mov	r1, r7
 8014f02:	68db      	ldr	r3, [r3, #12]
 8014f04:	4668      	mov	r0, sp
 8014f06:	4798      	blx	r3
 8014f08:	4631      	mov	r1, r6
 8014f0a:	4604      	mov	r4, r0
 8014f0c:	4815      	ldr	r0, [pc, #84]	; (8014f64 <rmw_take_with_info+0xa4>)
 8014f0e:	f7ff f8ab 	bl	8014068 <put_memory>
 8014f12:	702c      	strb	r4, [r5, #0]
 8014f14:	f084 0001 	eor.w	r0, r4, #1
 8014f18:	b2c0      	uxtb	r0, r0
 8014f1a:	b009      	add	sp, #36	; 0x24
 8014f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f1e:	6864      	ldr	r4, [r4, #4]
 8014f20:	f7f6 fed6 	bl	800bcd0 <rmw_uxrce_clean_expired_static_input_buffer>
 8014f24:	4620      	mov	r0, r4
 8014f26:	f7f6 fead 	bl	800bc84 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014f2a:	4605      	mov	r5, r0
 8014f2c:	b910      	cbnz	r0, 8014f34 <rmw_take_with_info+0x74>
 8014f2e:	2001      	movs	r0, #1
 8014f30:	b009      	add	sp, #36	; 0x24
 8014f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f34:	68a9      	ldr	r1, [r5, #8]
 8014f36:	4668      	mov	r0, sp
 8014f38:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8014f3c:	3110      	adds	r1, #16
 8014f3e:	f7f8 f811 	bl	800cf64 <ucdr_init_buffer>
 8014f42:	69a3      	ldr	r3, [r4, #24]
 8014f44:	4639      	mov	r1, r7
 8014f46:	68db      	ldr	r3, [r3, #12]
 8014f48:	4668      	mov	r0, sp
 8014f4a:	4798      	blx	r3
 8014f4c:	4629      	mov	r1, r5
 8014f4e:	4604      	mov	r4, r0
 8014f50:	4804      	ldr	r0, [pc, #16]	; (8014f64 <rmw_take_with_info+0xa4>)
 8014f52:	f7ff f889 	bl	8014068 <put_memory>
 8014f56:	e7dd      	b.n	8014f14 <rmw_take_with_info+0x54>
 8014f58:	200c      	movs	r0, #12
 8014f5a:	b009      	add	sp, #36	; 0x24
 8014f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f5e:	bf00      	nop
 8014f60:	0801901c 	.word	0x0801901c
 8014f64:	20010b34 	.word	0x20010b34

08014f68 <rmw_wait>:
 8014f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f6c:	b089      	sub	sp, #36	; 0x24
 8014f6e:	4605      	mov	r5, r0
 8014f70:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014f72:	460e      	mov	r6, r1
 8014f74:	4698      	mov	r8, r3
 8014f76:	4691      	mov	r9, r2
 8014f78:	2a00      	cmp	r2, #0
 8014f7a:	f000 810a 	beq.w	8015192 <rmw_wait+0x22a>
 8014f7e:	b16c      	cbz	r4, 8014f9c <rmw_wait+0x34>
 8014f80:	4bae      	ldr	r3, [pc, #696]	; (801523c <rmw_wait+0x2d4>)
 8014f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014f84:	af04      	add	r7, sp, #16
 8014f86:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8014f8a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014f8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014f92:	f7fe fe8d 	bl	8013cb0 <rmw_time_equal>
 8014f96:	2800      	cmp	r0, #0
 8014f98:	f000 8127 	beq.w	80151ea <rmw_wait+0x282>
 8014f9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014fa0:	f7f6 fe96 	bl	800bcd0 <rmw_uxrce_clean_expired_static_input_buffer>
 8014fa4:	4ba6      	ldr	r3, [pc, #664]	; (8015240 <rmw_wait+0x2d8>)
 8014fa6:	681c      	ldr	r4, [r3, #0]
 8014fa8:	b14c      	cbz	r4, 8014fbe <rmw_wait+0x56>
 8014faa:	4623      	mov	r3, r4
 8014fac:	2100      	movs	r1, #0
 8014fae:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8014fb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8014fb6:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d1f7      	bne.n	8014fae <rmw_wait+0x46>
 8014fbe:	f1b9 0f00 	cmp.w	r9, #0
 8014fc2:	d011      	beq.n	8014fe8 <rmw_wait+0x80>
 8014fc4:	f8d9 1000 	ldr.w	r1, [r9]
 8014fc8:	b171      	cbz	r1, 8014fe8 <rmw_wait+0x80>
 8014fca:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8014fce:	2300      	movs	r3, #0
 8014fd0:	2001      	movs	r0, #1
 8014fd2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014fd6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8014fd8:	6912      	ldr	r2, [r2, #16]
 8014fda:	3301      	adds	r3, #1
 8014fdc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8014fe0:	4299      	cmp	r1, r3
 8014fe2:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8014fe6:	d1f4      	bne.n	8014fd2 <rmw_wait+0x6a>
 8014fe8:	f1b8 0f00 	cmp.w	r8, #0
 8014fec:	d011      	beq.n	8015012 <rmw_wait+0xaa>
 8014fee:	f8d8 1000 	ldr.w	r1, [r8]
 8014ff2:	b171      	cbz	r1, 8015012 <rmw_wait+0xaa>
 8014ff4:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	2001      	movs	r0, #1
 8014ffc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015000:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8015002:	6912      	ldr	r2, [r2, #16]
 8015004:	3301      	adds	r3, #1
 8015006:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801500a:	4299      	cmp	r1, r3
 801500c:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8015010:	d1f4      	bne.n	8014ffc <rmw_wait+0x94>
 8015012:	b185      	cbz	r5, 8015036 <rmw_wait+0xce>
 8015014:	6829      	ldr	r1, [r5, #0]
 8015016:	b171      	cbz	r1, 8015036 <rmw_wait+0xce>
 8015018:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801501c:	2300      	movs	r3, #0
 801501e:	2001      	movs	r0, #1
 8015020:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015024:	6a12      	ldr	r2, [r2, #32]
 8015026:	6912      	ldr	r2, [r2, #16]
 8015028:	3301      	adds	r3, #1
 801502a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801502e:	4299      	cmp	r1, r3
 8015030:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8015034:	d1f4      	bne.n	8015020 <rmw_wait+0xb8>
 8015036:	b34c      	cbz	r4, 801508c <rmw_wait+0x124>
 8015038:	4622      	mov	r2, r4
 801503a:	2300      	movs	r3, #0
 801503c:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8015040:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8015044:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 8015048:	440b      	add	r3, r1
 801504a:	b2db      	uxtb	r3, r3
 801504c:	2a00      	cmp	r2, #0
 801504e:	d1f5      	bne.n	801503c <rmw_wait+0xd4>
 8015050:	2b00      	cmp	r3, #0
 8015052:	f000 8084 	beq.w	801515e <rmw_wait+0x1f6>
 8015056:	1c7a      	adds	r2, r7, #1
 8015058:	d00d      	beq.n	8015076 <rmw_wait+0x10e>
 801505a:	ee07 7a90 	vmov	s15, r7
 801505e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015062:	ee07 3a90 	vmov	s15, r3
 8015066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801506a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801506e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015072:	ee17 7a90 	vmov	r7, s15
 8015076:	68a0      	ldr	r0, [r4, #8]
 8015078:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801507c:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 8015080:	2b00      	cmp	r3, #0
 8015082:	f040 8090 	bne.w	80151a6 <rmw_wait+0x23e>
 8015086:	6864      	ldr	r4, [r4, #4]
 8015088:	2c00      	cmp	r4, #0
 801508a:	d1f4      	bne.n	8015076 <rmw_wait+0x10e>
 801508c:	f1b9 0f00 	cmp.w	r9, #0
 8015090:	f000 80bc 	beq.w	801520c <rmw_wait+0x2a4>
 8015094:	f8d9 7000 	ldr.w	r7, [r9]
 8015098:	2f00      	cmp	r7, #0
 801509a:	f000 808e 	beq.w	80151ba <rmw_wait+0x252>
 801509e:	2400      	movs	r4, #0
 80150a0:	4627      	mov	r7, r4
 80150a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80150a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80150aa:	f7f6 fdeb 	bl	800bc84 <rmw_uxrce_find_static_input_buffer_by_owner>
 80150ae:	2800      	cmp	r0, #0
 80150b0:	d05f      	beq.n	8015172 <rmw_wait+0x20a>
 80150b2:	f8d9 3000 	ldr.w	r3, [r9]
 80150b6:	3401      	adds	r4, #1
 80150b8:	42a3      	cmp	r3, r4
 80150ba:	f04f 0701 	mov.w	r7, #1
 80150be:	d8f0      	bhi.n	80150a2 <rmw_wait+0x13a>
 80150c0:	f1b8 0f00 	cmp.w	r8, #0
 80150c4:	d012      	beq.n	80150ec <rmw_wait+0x184>
 80150c6:	f8d8 3000 	ldr.w	r3, [r8]
 80150ca:	b17b      	cbz	r3, 80150ec <rmw_wait+0x184>
 80150cc:	2400      	movs	r4, #0
 80150ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80150d2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80150d6:	f7f6 fdd5 	bl	800bc84 <rmw_uxrce_find_static_input_buffer_by_owner>
 80150da:	2800      	cmp	r0, #0
 80150dc:	d051      	beq.n	8015182 <rmw_wait+0x21a>
 80150de:	f8d8 3000 	ldr.w	r3, [r8]
 80150e2:	3401      	adds	r4, #1
 80150e4:	42a3      	cmp	r3, r4
 80150e6:	f04f 0701 	mov.w	r7, #1
 80150ea:	d8f0      	bhi.n	80150ce <rmw_wait+0x166>
 80150ec:	b1dd      	cbz	r5, 8015126 <rmw_wait+0x1be>
 80150ee:	682b      	ldr	r3, [r5, #0]
 80150f0:	b1cb      	cbz	r3, 8015126 <rmw_wait+0x1be>
 80150f2:	2400      	movs	r4, #0
 80150f4:	686b      	ldr	r3, [r5, #4]
 80150f6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80150fa:	f7f6 fdc3 	bl	800bc84 <rmw_uxrce_find_static_input_buffer_by_owner>
 80150fe:	b158      	cbz	r0, 8015118 <rmw_wait+0x1b0>
 8015100:	682b      	ldr	r3, [r5, #0]
 8015102:	3401      	adds	r4, #1
 8015104:	42a3      	cmp	r3, r4
 8015106:	d969      	bls.n	80151dc <rmw_wait+0x274>
 8015108:	686b      	ldr	r3, [r5, #4]
 801510a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801510e:	2701      	movs	r7, #1
 8015110:	f7f6 fdb8 	bl	800bc84 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015114:	2800      	cmp	r0, #0
 8015116:	d1f3      	bne.n	8015100 <rmw_wait+0x198>
 8015118:	e9d5 3200 	ldrd	r3, r2, [r5]
 801511c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015120:	3401      	adds	r4, #1
 8015122:	42a3      	cmp	r3, r4
 8015124:	d8e6      	bhi.n	80150f4 <rmw_wait+0x18c>
 8015126:	b1a6      	cbz	r6, 8015152 <rmw_wait+0x1ea>
 8015128:	6834      	ldr	r4, [r6, #0]
 801512a:	b194      	cbz	r4, 8015152 <rmw_wait+0x1ea>
 801512c:	2300      	movs	r3, #0
 801512e:	461d      	mov	r5, r3
 8015130:	e004      	b.n	801513c <rmw_wait+0x1d4>
 8015132:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015136:	3301      	adds	r3, #1
 8015138:	42a3      	cmp	r3, r4
 801513a:	d00a      	beq.n	8015152 <rmw_wait+0x1ea>
 801513c:	6870      	ldr	r0, [r6, #4]
 801513e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8015142:	7c0a      	ldrb	r2, [r1, #16]
 8015144:	2a00      	cmp	r2, #0
 8015146:	d0f4      	beq.n	8015132 <rmw_wait+0x1ca>
 8015148:	3301      	adds	r3, #1
 801514a:	42a3      	cmp	r3, r4
 801514c:	740d      	strb	r5, [r1, #16]
 801514e:	4617      	mov	r7, r2
 8015150:	d1f4      	bne.n	801513c <rmw_wait+0x1d4>
 8015152:	2f00      	cmp	r7, #0
 8015154:	d03e      	beq.n	80151d4 <rmw_wait+0x26c>
 8015156:	2000      	movs	r0, #0
 8015158:	b009      	add	sp, #36	; 0x24
 801515a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801515e:	68a0      	ldr	r0, [r4, #8]
 8015160:	2100      	movs	r1, #0
 8015162:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015166:	f7f9 f809 	bl	800e17c <uxr_run_session_timeout>
 801516a:	6864      	ldr	r4, [r4, #4]
 801516c:	2c00      	cmp	r4, #0
 801516e:	d1f6      	bne.n	801515e <rmw_wait+0x1f6>
 8015170:	e78c      	b.n	801508c <rmw_wait+0x124>
 8015172:	e9d9 3200 	ldrd	r3, r2, [r9]
 8015176:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801517a:	3401      	adds	r4, #1
 801517c:	42a3      	cmp	r3, r4
 801517e:	d890      	bhi.n	80150a2 <rmw_wait+0x13a>
 8015180:	e79e      	b.n	80150c0 <rmw_wait+0x158>
 8015182:	e9d8 3200 	ldrd	r3, r2, [r8]
 8015186:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801518a:	3401      	adds	r4, #1
 801518c:	429c      	cmp	r4, r3
 801518e:	d39e      	bcc.n	80150ce <rmw_wait+0x166>
 8015190:	e7ac      	b.n	80150ec <rmw_wait+0x184>
 8015192:	2b00      	cmp	r3, #0
 8015194:	f47f aef3 	bne.w	8014f7e <rmw_wait+0x16>
 8015198:	2800      	cmp	r0, #0
 801519a:	f47f aef0 	bne.w	8014f7e <rmw_wait+0x16>
 801519e:	2900      	cmp	r1, #0
 80151a0:	f47f aeed 	bne.w	8014f7e <rmw_wait+0x16>
 80151a4:	e7d7      	b.n	8015156 <rmw_wait+0x1ee>
 80151a6:	4639      	mov	r1, r7
 80151a8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80151ac:	f7f9 f800 	bl	800e1b0 <uxr_run_session_until_data>
 80151b0:	6864      	ldr	r4, [r4, #4]
 80151b2:	2c00      	cmp	r4, #0
 80151b4:	f47f af5f 	bne.w	8015076 <rmw_wait+0x10e>
 80151b8:	e768      	b.n	801508c <rmw_wait+0x124>
 80151ba:	f1b8 0f00 	cmp.w	r8, #0
 80151be:	d032      	beq.n	8015226 <rmw_wait+0x2be>
 80151c0:	f8d8 3000 	ldr.w	r3, [r8]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d181      	bne.n	80150cc <rmw_wait+0x164>
 80151c8:	461f      	mov	r7, r3
 80151ca:	2d00      	cmp	r5, #0
 80151cc:	d18f      	bne.n	80150ee <rmw_wait+0x186>
 80151ce:	462f      	mov	r7, r5
 80151d0:	2e00      	cmp	r6, #0
 80151d2:	d1a9      	bne.n	8015128 <rmw_wait+0x1c0>
 80151d4:	2002      	movs	r0, #2
 80151d6:	b009      	add	sp, #36	; 0x24
 80151d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151dc:	2e00      	cmp	r6, #0
 80151de:	d0ba      	beq.n	8015156 <rmw_wait+0x1ee>
 80151e0:	6834      	ldr	r4, [r6, #0]
 80151e2:	2701      	movs	r7, #1
 80151e4:	2c00      	cmp	r4, #0
 80151e6:	d1a1      	bne.n	801512c <rmw_wait+0x1c4>
 80151e8:	e7b5      	b.n	8015156 <rmw_wait+0x1ee>
 80151ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80151ee:	f7fe fdb3 	bl	8013d58 <rmw_time_total_nsec>
 80151f2:	2300      	movs	r3, #0
 80151f4:	4a13      	ldr	r2, [pc, #76]	; (8015244 <rmw_wait+0x2dc>)
 80151f6:	f7eb fdff 	bl	8000df8 <__aeabi_uldivmod>
 80151fa:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80151fe:	f171 0300 	sbcs.w	r3, r1, #0
 8015202:	4607      	mov	r7, r0
 8015204:	bfa8      	it	ge
 8015206:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801520a:	e6c9      	b.n	8014fa0 <rmw_wait+0x38>
 801520c:	f1b8 0f00 	cmp.w	r8, #0
 8015210:	d009      	beq.n	8015226 <rmw_wait+0x2be>
 8015212:	f8d8 3000 	ldr.w	r3, [r8]
 8015216:	464f      	mov	r7, r9
 8015218:	2b00      	cmp	r3, #0
 801521a:	f47f af57 	bne.w	80150cc <rmw_wait+0x164>
 801521e:	2d00      	cmp	r5, #0
 8015220:	f47f af65 	bne.w	80150ee <rmw_wait+0x186>
 8015224:	e7d3      	b.n	80151ce <rmw_wait+0x266>
 8015226:	b17d      	cbz	r5, 8015248 <rmw_wait+0x2e0>
 8015228:	682b      	ldr	r3, [r5, #0]
 801522a:	4647      	mov	r7, r8
 801522c:	2b00      	cmp	r3, #0
 801522e:	f47f af60 	bne.w	80150f2 <rmw_wait+0x18a>
 8015232:	2e00      	cmp	r6, #0
 8015234:	f47f af78 	bne.w	8015128 <rmw_wait+0x1c0>
 8015238:	e7cc      	b.n	80151d4 <rmw_wait+0x26c>
 801523a:	bf00      	nop
 801523c:	080184e0 	.word	0x080184e0
 8015240:	20010b24 	.word	0x20010b24
 8015244:	000f4240 	.word	0x000f4240
 8015248:	2e00      	cmp	r6, #0
 801524a:	d0c3      	beq.n	80151d4 <rmw_wait+0x26c>
 801524c:	6834      	ldr	r4, [r6, #0]
 801524e:	462f      	mov	r7, r5
 8015250:	2c00      	cmp	r4, #0
 8015252:	f47f af6b 	bne.w	801512c <rmw_wait+0x1c4>
 8015256:	e7bd      	b.n	80151d4 <rmw_wait+0x26c>

08015258 <rmw_create_wait_set>:
 8015258:	b508      	push	{r3, lr}
 801525a:	4803      	ldr	r0, [pc, #12]	; (8015268 <rmw_create_wait_set+0x10>)
 801525c:	f7fe fef4 	bl	8014048 <get_memory>
 8015260:	b108      	cbz	r0, 8015266 <rmw_create_wait_set+0xe>
 8015262:	6880      	ldr	r0, [r0, #8]
 8015264:	3010      	adds	r0, #16
 8015266:	bd08      	pop	{r3, pc}
 8015268:	20010b64 	.word	0x20010b64

0801526c <rmw_destroy_wait_set>:
 801526c:	b508      	push	{r3, lr}
 801526e:	4b08      	ldr	r3, [pc, #32]	; (8015290 <rmw_destroy_wait_set+0x24>)
 8015270:	6819      	ldr	r1, [r3, #0]
 8015272:	b911      	cbnz	r1, 801527a <rmw_destroy_wait_set+0xe>
 8015274:	e00a      	b.n	801528c <rmw_destroy_wait_set+0x20>
 8015276:	6849      	ldr	r1, [r1, #4]
 8015278:	b141      	cbz	r1, 801528c <rmw_destroy_wait_set+0x20>
 801527a:	688b      	ldr	r3, [r1, #8]
 801527c:	3310      	adds	r3, #16
 801527e:	4298      	cmp	r0, r3
 8015280:	d1f9      	bne.n	8015276 <rmw_destroy_wait_set+0xa>
 8015282:	4803      	ldr	r0, [pc, #12]	; (8015290 <rmw_destroy_wait_set+0x24>)
 8015284:	f7fe fef0 	bl	8014068 <put_memory>
 8015288:	2000      	movs	r0, #0
 801528a:	bd08      	pop	{r3, pc}
 801528c:	2001      	movs	r0, #1
 801528e:	bd08      	pop	{r3, pc}
 8015290:	20010b64 	.word	0x20010b64

08015294 <rmw_uros_epoch_nanos>:
 8015294:	4b05      	ldr	r3, [pc, #20]	; (80152ac <rmw_uros_epoch_nanos+0x18>)
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	b123      	cbz	r3, 80152a4 <rmw_uros_epoch_nanos+0x10>
 801529a:	6898      	ldr	r0, [r3, #8]
 801529c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80152a0:	f7f8 bbdc 	b.w	800da5c <uxr_epoch_nanos>
 80152a4:	2000      	movs	r0, #0
 80152a6:	2100      	movs	r1, #0
 80152a8:	4770      	bx	lr
 80152aa:	bf00      	nop
 80152ac:	20010b24 	.word	0x20010b24

080152b0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80152b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152b4:	6805      	ldr	r5, [r0, #0]
 80152b6:	4604      	mov	r4, r0
 80152b8:	4628      	mov	r0, r5
 80152ba:	460e      	mov	r6, r1
 80152bc:	f7ea ff90 	bl	80001e0 <strcmp>
 80152c0:	b1c8      	cbz	r0, 80152f6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80152c2:	4b11      	ldr	r3, [pc, #68]	; (8015308 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	429d      	cmp	r5, r3
 80152c8:	d112      	bne.n	80152f0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80152ca:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80152ce:	f8d8 4000 	ldr.w	r4, [r8]
 80152d2:	b16c      	cbz	r4, 80152f0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80152d4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80152d8:	2700      	movs	r7, #0
 80152da:	3d04      	subs	r5, #4
 80152dc:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80152e0:	4631      	mov	r1, r6
 80152e2:	f7ea ff7d 	bl	80001e0 <strcmp>
 80152e6:	00bb      	lsls	r3, r7, #2
 80152e8:	b140      	cbz	r0, 80152fc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80152ea:	3701      	adds	r7, #1
 80152ec:	42bc      	cmp	r4, r7
 80152ee:	d1f5      	bne.n	80152dc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80152f0:	2000      	movs	r0, #0
 80152f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152f6:	4620      	mov	r0, r4
 80152f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015304:	58d3      	ldr	r3, [r2, r3]
 8015306:	4718      	bx	r3
 8015308:	200000b0 	.word	0x200000b0

0801530c <std_msgs__msg__Int32__init>:
 801530c:	3800      	subs	r0, #0
 801530e:	bf18      	it	ne
 8015310:	2001      	movne	r0, #1
 8015312:	4770      	bx	lr

08015314 <std_msgs__msg__Int32__fini>:
 8015314:	4770      	bx	lr
 8015316:	bf00      	nop

08015318 <ucdr_serialize_endian_array_char>:
 8015318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801531c:	4619      	mov	r1, r3
 801531e:	461f      	mov	r7, r3
 8015320:	4605      	mov	r5, r0
 8015322:	4690      	mov	r8, r2
 8015324:	f7f7 fdca 	bl	800cebc <ucdr_check_buffer_available_for>
 8015328:	b9e0      	cbnz	r0, 8015364 <ucdr_serialize_endian_array_char+0x4c>
 801532a:	463e      	mov	r6, r7
 801532c:	e009      	b.n	8015342 <ucdr_serialize_endian_array_char+0x2a>
 801532e:	68a8      	ldr	r0, [r5, #8]
 8015330:	f002 f989 	bl	8017646 <memcpy>
 8015334:	68ab      	ldr	r3, [r5, #8]
 8015336:	6928      	ldr	r0, [r5, #16]
 8015338:	4423      	add	r3, r4
 801533a:	4420      	add	r0, r4
 801533c:	1b36      	subs	r6, r6, r4
 801533e:	60ab      	str	r3, [r5, #8]
 8015340:	6128      	str	r0, [r5, #16]
 8015342:	4631      	mov	r1, r6
 8015344:	2201      	movs	r2, #1
 8015346:	4628      	mov	r0, r5
 8015348:	f7f7 fe40 	bl	800cfcc <ucdr_check_final_buffer_behavior_array>
 801534c:	1bb9      	subs	r1, r7, r6
 801534e:	4441      	add	r1, r8
 8015350:	4604      	mov	r4, r0
 8015352:	4602      	mov	r2, r0
 8015354:	2800      	cmp	r0, #0
 8015356:	d1ea      	bne.n	801532e <ucdr_serialize_endian_array_char+0x16>
 8015358:	2301      	movs	r3, #1
 801535a:	7da8      	ldrb	r0, [r5, #22]
 801535c:	756b      	strb	r3, [r5, #21]
 801535e:	4058      	eors	r0, r3
 8015360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015364:	463a      	mov	r2, r7
 8015366:	68a8      	ldr	r0, [r5, #8]
 8015368:	4641      	mov	r1, r8
 801536a:	f002 f96c 	bl	8017646 <memcpy>
 801536e:	68aa      	ldr	r2, [r5, #8]
 8015370:	692b      	ldr	r3, [r5, #16]
 8015372:	443a      	add	r2, r7
 8015374:	443b      	add	r3, r7
 8015376:	60aa      	str	r2, [r5, #8]
 8015378:	612b      	str	r3, [r5, #16]
 801537a:	e7ed      	b.n	8015358 <ucdr_serialize_endian_array_char+0x40>

0801537c <ucdr_deserialize_endian_array_char>:
 801537c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015380:	4619      	mov	r1, r3
 8015382:	461f      	mov	r7, r3
 8015384:	4605      	mov	r5, r0
 8015386:	4690      	mov	r8, r2
 8015388:	f7f7 fd98 	bl	800cebc <ucdr_check_buffer_available_for>
 801538c:	b9e0      	cbnz	r0, 80153c8 <ucdr_deserialize_endian_array_char+0x4c>
 801538e:	463e      	mov	r6, r7
 8015390:	e009      	b.n	80153a6 <ucdr_deserialize_endian_array_char+0x2a>
 8015392:	68a9      	ldr	r1, [r5, #8]
 8015394:	f002 f957 	bl	8017646 <memcpy>
 8015398:	68ab      	ldr	r3, [r5, #8]
 801539a:	6928      	ldr	r0, [r5, #16]
 801539c:	4423      	add	r3, r4
 801539e:	4420      	add	r0, r4
 80153a0:	1b36      	subs	r6, r6, r4
 80153a2:	60ab      	str	r3, [r5, #8]
 80153a4:	6128      	str	r0, [r5, #16]
 80153a6:	2201      	movs	r2, #1
 80153a8:	4631      	mov	r1, r6
 80153aa:	4628      	mov	r0, r5
 80153ac:	f7f7 fe0e 	bl	800cfcc <ucdr_check_final_buffer_behavior_array>
 80153b0:	4604      	mov	r4, r0
 80153b2:	1bb8      	subs	r0, r7, r6
 80153b4:	4440      	add	r0, r8
 80153b6:	4622      	mov	r2, r4
 80153b8:	2c00      	cmp	r4, #0
 80153ba:	d1ea      	bne.n	8015392 <ucdr_deserialize_endian_array_char+0x16>
 80153bc:	2301      	movs	r3, #1
 80153be:	7da8      	ldrb	r0, [r5, #22]
 80153c0:	756b      	strb	r3, [r5, #21]
 80153c2:	4058      	eors	r0, r3
 80153c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153c8:	463a      	mov	r2, r7
 80153ca:	68a9      	ldr	r1, [r5, #8]
 80153cc:	4640      	mov	r0, r8
 80153ce:	f002 f93a 	bl	8017646 <memcpy>
 80153d2:	68aa      	ldr	r2, [r5, #8]
 80153d4:	692b      	ldr	r3, [r5, #16]
 80153d6:	443a      	add	r2, r7
 80153d8:	443b      	add	r3, r7
 80153da:	60aa      	str	r2, [r5, #8]
 80153dc:	612b      	str	r3, [r5, #16]
 80153de:	e7ed      	b.n	80153bc <ucdr_deserialize_endian_array_char+0x40>

080153e0 <ucdr_serialize_array_uint8_t>:
 80153e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153e4:	4688      	mov	r8, r1
 80153e6:	4611      	mov	r1, r2
 80153e8:	4617      	mov	r7, r2
 80153ea:	4605      	mov	r5, r0
 80153ec:	f7f7 fd66 	bl	800cebc <ucdr_check_buffer_available_for>
 80153f0:	b9e0      	cbnz	r0, 801542c <ucdr_serialize_array_uint8_t+0x4c>
 80153f2:	463e      	mov	r6, r7
 80153f4:	e009      	b.n	801540a <ucdr_serialize_array_uint8_t+0x2a>
 80153f6:	68a8      	ldr	r0, [r5, #8]
 80153f8:	f002 f925 	bl	8017646 <memcpy>
 80153fc:	68aa      	ldr	r2, [r5, #8]
 80153fe:	692b      	ldr	r3, [r5, #16]
 8015400:	4422      	add	r2, r4
 8015402:	4423      	add	r3, r4
 8015404:	1b36      	subs	r6, r6, r4
 8015406:	60aa      	str	r2, [r5, #8]
 8015408:	612b      	str	r3, [r5, #16]
 801540a:	4631      	mov	r1, r6
 801540c:	2201      	movs	r2, #1
 801540e:	4628      	mov	r0, r5
 8015410:	f7f7 fddc 	bl	800cfcc <ucdr_check_final_buffer_behavior_array>
 8015414:	1bb9      	subs	r1, r7, r6
 8015416:	4441      	add	r1, r8
 8015418:	4604      	mov	r4, r0
 801541a:	4602      	mov	r2, r0
 801541c:	2800      	cmp	r0, #0
 801541e:	d1ea      	bne.n	80153f6 <ucdr_serialize_array_uint8_t+0x16>
 8015420:	2301      	movs	r3, #1
 8015422:	7da8      	ldrb	r0, [r5, #22]
 8015424:	756b      	strb	r3, [r5, #21]
 8015426:	4058      	eors	r0, r3
 8015428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801542c:	463a      	mov	r2, r7
 801542e:	68a8      	ldr	r0, [r5, #8]
 8015430:	4641      	mov	r1, r8
 8015432:	f002 f908 	bl	8017646 <memcpy>
 8015436:	68aa      	ldr	r2, [r5, #8]
 8015438:	692b      	ldr	r3, [r5, #16]
 801543a:	443a      	add	r2, r7
 801543c:	443b      	add	r3, r7
 801543e:	60aa      	str	r2, [r5, #8]
 8015440:	612b      	str	r3, [r5, #16]
 8015442:	e7ed      	b.n	8015420 <ucdr_serialize_array_uint8_t+0x40>

08015444 <ucdr_serialize_endian_array_uint8_t>:
 8015444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015448:	4619      	mov	r1, r3
 801544a:	461f      	mov	r7, r3
 801544c:	4605      	mov	r5, r0
 801544e:	4690      	mov	r8, r2
 8015450:	f7f7 fd34 	bl	800cebc <ucdr_check_buffer_available_for>
 8015454:	b9e0      	cbnz	r0, 8015490 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8015456:	463e      	mov	r6, r7
 8015458:	e009      	b.n	801546e <ucdr_serialize_endian_array_uint8_t+0x2a>
 801545a:	68a8      	ldr	r0, [r5, #8]
 801545c:	f002 f8f3 	bl	8017646 <memcpy>
 8015460:	68ab      	ldr	r3, [r5, #8]
 8015462:	6928      	ldr	r0, [r5, #16]
 8015464:	4423      	add	r3, r4
 8015466:	4420      	add	r0, r4
 8015468:	1b36      	subs	r6, r6, r4
 801546a:	60ab      	str	r3, [r5, #8]
 801546c:	6128      	str	r0, [r5, #16]
 801546e:	4631      	mov	r1, r6
 8015470:	2201      	movs	r2, #1
 8015472:	4628      	mov	r0, r5
 8015474:	f7f7 fdaa 	bl	800cfcc <ucdr_check_final_buffer_behavior_array>
 8015478:	1bb9      	subs	r1, r7, r6
 801547a:	4441      	add	r1, r8
 801547c:	4604      	mov	r4, r0
 801547e:	4602      	mov	r2, r0
 8015480:	2800      	cmp	r0, #0
 8015482:	d1ea      	bne.n	801545a <ucdr_serialize_endian_array_uint8_t+0x16>
 8015484:	2301      	movs	r3, #1
 8015486:	7da8      	ldrb	r0, [r5, #22]
 8015488:	756b      	strb	r3, [r5, #21]
 801548a:	4058      	eors	r0, r3
 801548c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015490:	463a      	mov	r2, r7
 8015492:	68a8      	ldr	r0, [r5, #8]
 8015494:	4641      	mov	r1, r8
 8015496:	f002 f8d6 	bl	8017646 <memcpy>
 801549a:	68aa      	ldr	r2, [r5, #8]
 801549c:	692b      	ldr	r3, [r5, #16]
 801549e:	443a      	add	r2, r7
 80154a0:	443b      	add	r3, r7
 80154a2:	60aa      	str	r2, [r5, #8]
 80154a4:	612b      	str	r3, [r5, #16]
 80154a6:	e7ed      	b.n	8015484 <ucdr_serialize_endian_array_uint8_t+0x40>

080154a8 <ucdr_deserialize_array_uint8_t>:
 80154a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154ac:	4688      	mov	r8, r1
 80154ae:	4611      	mov	r1, r2
 80154b0:	4617      	mov	r7, r2
 80154b2:	4605      	mov	r5, r0
 80154b4:	f7f7 fd02 	bl	800cebc <ucdr_check_buffer_available_for>
 80154b8:	b9e0      	cbnz	r0, 80154f4 <ucdr_deserialize_array_uint8_t+0x4c>
 80154ba:	463e      	mov	r6, r7
 80154bc:	e009      	b.n	80154d2 <ucdr_deserialize_array_uint8_t+0x2a>
 80154be:	68a9      	ldr	r1, [r5, #8]
 80154c0:	f002 f8c1 	bl	8017646 <memcpy>
 80154c4:	68aa      	ldr	r2, [r5, #8]
 80154c6:	692b      	ldr	r3, [r5, #16]
 80154c8:	4422      	add	r2, r4
 80154ca:	4423      	add	r3, r4
 80154cc:	1b36      	subs	r6, r6, r4
 80154ce:	60aa      	str	r2, [r5, #8]
 80154d0:	612b      	str	r3, [r5, #16]
 80154d2:	2201      	movs	r2, #1
 80154d4:	4631      	mov	r1, r6
 80154d6:	4628      	mov	r0, r5
 80154d8:	f7f7 fd78 	bl	800cfcc <ucdr_check_final_buffer_behavior_array>
 80154dc:	4604      	mov	r4, r0
 80154de:	1bb8      	subs	r0, r7, r6
 80154e0:	4440      	add	r0, r8
 80154e2:	4622      	mov	r2, r4
 80154e4:	2c00      	cmp	r4, #0
 80154e6:	d1ea      	bne.n	80154be <ucdr_deserialize_array_uint8_t+0x16>
 80154e8:	2301      	movs	r3, #1
 80154ea:	7da8      	ldrb	r0, [r5, #22]
 80154ec:	756b      	strb	r3, [r5, #21]
 80154ee:	4058      	eors	r0, r3
 80154f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154f4:	463a      	mov	r2, r7
 80154f6:	68a9      	ldr	r1, [r5, #8]
 80154f8:	4640      	mov	r0, r8
 80154fa:	f002 f8a4 	bl	8017646 <memcpy>
 80154fe:	68aa      	ldr	r2, [r5, #8]
 8015500:	692b      	ldr	r3, [r5, #16]
 8015502:	443a      	add	r2, r7
 8015504:	443b      	add	r3, r7
 8015506:	60aa      	str	r2, [r5, #8]
 8015508:	612b      	str	r3, [r5, #16]
 801550a:	e7ed      	b.n	80154e8 <ucdr_deserialize_array_uint8_t+0x40>

0801550c <ucdr_deserialize_endian_array_uint8_t>:
 801550c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015510:	4619      	mov	r1, r3
 8015512:	461f      	mov	r7, r3
 8015514:	4605      	mov	r5, r0
 8015516:	4690      	mov	r8, r2
 8015518:	f7f7 fcd0 	bl	800cebc <ucdr_check_buffer_available_for>
 801551c:	b9e0      	cbnz	r0, 8015558 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801551e:	463e      	mov	r6, r7
 8015520:	e009      	b.n	8015536 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8015522:	68a9      	ldr	r1, [r5, #8]
 8015524:	f002 f88f 	bl	8017646 <memcpy>
 8015528:	68ab      	ldr	r3, [r5, #8]
 801552a:	6928      	ldr	r0, [r5, #16]
 801552c:	4423      	add	r3, r4
 801552e:	4420      	add	r0, r4
 8015530:	1b36      	subs	r6, r6, r4
 8015532:	60ab      	str	r3, [r5, #8]
 8015534:	6128      	str	r0, [r5, #16]
 8015536:	2201      	movs	r2, #1
 8015538:	4631      	mov	r1, r6
 801553a:	4628      	mov	r0, r5
 801553c:	f7f7 fd46 	bl	800cfcc <ucdr_check_final_buffer_behavior_array>
 8015540:	4604      	mov	r4, r0
 8015542:	1bb8      	subs	r0, r7, r6
 8015544:	4440      	add	r0, r8
 8015546:	4622      	mov	r2, r4
 8015548:	2c00      	cmp	r4, #0
 801554a:	d1ea      	bne.n	8015522 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801554c:	2301      	movs	r3, #1
 801554e:	7da8      	ldrb	r0, [r5, #22]
 8015550:	756b      	strb	r3, [r5, #21]
 8015552:	4058      	eors	r0, r3
 8015554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015558:	463a      	mov	r2, r7
 801555a:	68a9      	ldr	r1, [r5, #8]
 801555c:	4640      	mov	r0, r8
 801555e:	f002 f872 	bl	8017646 <memcpy>
 8015562:	68aa      	ldr	r2, [r5, #8]
 8015564:	692b      	ldr	r3, [r5, #16]
 8015566:	443a      	add	r2, r7
 8015568:	443b      	add	r3, r7
 801556a:	60aa      	str	r2, [r5, #8]
 801556c:	612b      	str	r3, [r5, #16]
 801556e:	e7ed      	b.n	801554c <ucdr_deserialize_endian_array_uint8_t+0x40>

08015570 <ucdr_serialize_sequence_char>:
 8015570:	b570      	push	{r4, r5, r6, lr}
 8015572:	4615      	mov	r5, r2
 8015574:	460e      	mov	r6, r1
 8015576:	7d01      	ldrb	r1, [r0, #20]
 8015578:	4604      	mov	r4, r0
 801557a:	f7f6 fff5 	bl	800c568 <ucdr_serialize_endian_uint32_t>
 801557e:	b90d      	cbnz	r5, 8015584 <ucdr_serialize_sequence_char+0x14>
 8015580:	2001      	movs	r0, #1
 8015582:	bd70      	pop	{r4, r5, r6, pc}
 8015584:	7d21      	ldrb	r1, [r4, #20]
 8015586:	462b      	mov	r3, r5
 8015588:	4632      	mov	r2, r6
 801558a:	4620      	mov	r0, r4
 801558c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015590:	f7ff bec2 	b.w	8015318 <ucdr_serialize_endian_array_char>

08015594 <ucdr_deserialize_sequence_char>:
 8015594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015598:	461d      	mov	r5, r3
 801559a:	4616      	mov	r6, r2
 801559c:	460f      	mov	r7, r1
 801559e:	461a      	mov	r2, r3
 80155a0:	7d01      	ldrb	r1, [r0, #20]
 80155a2:	4604      	mov	r4, r0
 80155a4:	f7f7 f908 	bl	800c7b8 <ucdr_deserialize_endian_uint32_t>
 80155a8:	682b      	ldr	r3, [r5, #0]
 80155aa:	429e      	cmp	r6, r3
 80155ac:	bf3c      	itt	cc
 80155ae:	2201      	movcc	r2, #1
 80155b0:	75a2      	strbcc	r2, [r4, #22]
 80155b2:	b913      	cbnz	r3, 80155ba <ucdr_deserialize_sequence_char+0x26>
 80155b4:	2001      	movs	r0, #1
 80155b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155ba:	7d21      	ldrb	r1, [r4, #20]
 80155bc:	463a      	mov	r2, r7
 80155be:	4620      	mov	r0, r4
 80155c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80155c4:	f7ff beda 	b.w	801537c <ucdr_deserialize_endian_array_char>

080155c8 <ucdr_serialize_sequence_uint8_t>:
 80155c8:	b570      	push	{r4, r5, r6, lr}
 80155ca:	4615      	mov	r5, r2
 80155cc:	460e      	mov	r6, r1
 80155ce:	7d01      	ldrb	r1, [r0, #20]
 80155d0:	4604      	mov	r4, r0
 80155d2:	f7f6 ffc9 	bl	800c568 <ucdr_serialize_endian_uint32_t>
 80155d6:	b90d      	cbnz	r5, 80155dc <ucdr_serialize_sequence_uint8_t+0x14>
 80155d8:	2001      	movs	r0, #1
 80155da:	bd70      	pop	{r4, r5, r6, pc}
 80155dc:	7d21      	ldrb	r1, [r4, #20]
 80155de:	462b      	mov	r3, r5
 80155e0:	4632      	mov	r2, r6
 80155e2:	4620      	mov	r0, r4
 80155e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80155e8:	f7ff bf2c 	b.w	8015444 <ucdr_serialize_endian_array_uint8_t>

080155ec <ucdr_deserialize_sequence_uint8_t>:
 80155ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155f0:	461d      	mov	r5, r3
 80155f2:	4616      	mov	r6, r2
 80155f4:	460f      	mov	r7, r1
 80155f6:	461a      	mov	r2, r3
 80155f8:	7d01      	ldrb	r1, [r0, #20]
 80155fa:	4604      	mov	r4, r0
 80155fc:	f7f7 f8dc 	bl	800c7b8 <ucdr_deserialize_endian_uint32_t>
 8015600:	682b      	ldr	r3, [r5, #0]
 8015602:	429e      	cmp	r6, r3
 8015604:	bf3c      	itt	cc
 8015606:	2201      	movcc	r2, #1
 8015608:	75a2      	strbcc	r2, [r4, #22]
 801560a:	b913      	cbnz	r3, 8015612 <ucdr_deserialize_sequence_uint8_t+0x26>
 801560c:	2001      	movs	r0, #1
 801560e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015612:	7d21      	ldrb	r1, [r4, #20]
 8015614:	463a      	mov	r2, r7
 8015616:	4620      	mov	r0, r4
 8015618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801561c:	f7ff bf76 	b.w	801550c <ucdr_deserialize_endian_array_uint8_t>

08015620 <ucdr_serialize_string>:
 8015620:	b510      	push	{r4, lr}
 8015622:	b082      	sub	sp, #8
 8015624:	4604      	mov	r4, r0
 8015626:	4608      	mov	r0, r1
 8015628:	9101      	str	r1, [sp, #4]
 801562a:	f7ea fde3 	bl	80001f4 <strlen>
 801562e:	9901      	ldr	r1, [sp, #4]
 8015630:	1c42      	adds	r2, r0, #1
 8015632:	4620      	mov	r0, r4
 8015634:	b002      	add	sp, #8
 8015636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801563a:	f7ff bf99 	b.w	8015570 <ucdr_serialize_sequence_char>
 801563e:	bf00      	nop

08015640 <ucdr_deserialize_string>:
 8015640:	b500      	push	{lr}
 8015642:	b083      	sub	sp, #12
 8015644:	ab01      	add	r3, sp, #4
 8015646:	f7ff ffa5 	bl	8015594 <ucdr_deserialize_sequence_char>
 801564a:	b003      	add	sp, #12
 801564c:	f85d fb04 	ldr.w	pc, [sp], #4

08015650 <uxr_init_input_best_effort_stream>:
 8015650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015654:	8003      	strh	r3, [r0, #0]
 8015656:	4770      	bx	lr

08015658 <uxr_reset_input_best_effort_stream>:
 8015658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801565c:	8003      	strh	r3, [r0, #0]
 801565e:	4770      	bx	lr

08015660 <uxr_receive_best_effort_message>:
 8015660:	b538      	push	{r3, r4, r5, lr}
 8015662:	4604      	mov	r4, r0
 8015664:	8800      	ldrh	r0, [r0, #0]
 8015666:	460d      	mov	r5, r1
 8015668:	f000 fe72 	bl	8016350 <uxr_seq_num_cmp>
 801566c:	4603      	mov	r3, r0
 801566e:	2b00      	cmp	r3, #0
 8015670:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8015674:	bfb8      	it	lt
 8015676:	8025      	strhlt	r5, [r4, #0]
 8015678:	bd38      	pop	{r3, r4, r5, pc}
 801567a:	bf00      	nop

0801567c <on_full_input_buffer>:
 801567c:	b570      	push	{r4, r5, r6, lr}
 801567e:	4605      	mov	r5, r0
 8015680:	460c      	mov	r4, r1
 8015682:	682b      	ldr	r3, [r5, #0]
 8015684:	6809      	ldr	r1, [r1, #0]
 8015686:	8920      	ldrh	r0, [r4, #8]
 8015688:	6862      	ldr	r2, [r4, #4]
 801568a:	fbb2 f2f0 	udiv	r2, r2, r0
 801568e:	eba3 0c01 	sub.w	ip, r3, r1
 8015692:	fbbc fcf2 	udiv	ip, ip, r2
 8015696:	f10c 0c01 	add.w	ip, ip, #1
 801569a:	fa1f f38c 	uxth.w	r3, ip
 801569e:	fbb3 f6f0 	udiv	r6, r3, r0
 80156a2:	fb00 3316 	mls	r3, r0, r6, r3
 80156a6:	b29b      	uxth	r3, r3
 80156a8:	fb02 f303 	mul.w	r3, r2, r3
 80156ac:	1d18      	adds	r0, r3, #4
 80156ae:	4408      	add	r0, r1
 80156b0:	7d26      	ldrb	r6, [r4, #20]
 80156b2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80156b6:	b116      	cbz	r6, 80156be <on_full_input_buffer+0x42>
 80156b8:	2600      	movs	r6, #0
 80156ba:	f840 6c04 	str.w	r6, [r0, #-4]
 80156be:	2a03      	cmp	r2, #3
 80156c0:	d801      	bhi.n	80156c6 <on_full_input_buffer+0x4a>
 80156c2:	2001      	movs	r0, #1
 80156c4:	bd70      	pop	{r4, r5, r6, pc}
 80156c6:	3308      	adds	r3, #8
 80156c8:	4419      	add	r1, r3
 80156ca:	4628      	mov	r0, r5
 80156cc:	692b      	ldr	r3, [r5, #16]
 80156ce:	3a04      	subs	r2, #4
 80156d0:	f7f7 fc40 	bl	800cf54 <ucdr_init_buffer_origin>
 80156d4:	4628      	mov	r0, r5
 80156d6:	4903      	ldr	r1, [pc, #12]	; (80156e4 <on_full_input_buffer+0x68>)
 80156d8:	4622      	mov	r2, r4
 80156da:	f7f7 fc17 	bl	800cf0c <ucdr_set_on_full_buffer_callback>
 80156de:	2000      	movs	r0, #0
 80156e0:	bd70      	pop	{r4, r5, r6, pc}
 80156e2:	bf00      	nop
 80156e4:	0801567d 	.word	0x0801567d

080156e8 <uxr_init_input_reliable_stream>:
 80156e8:	b500      	push	{lr}
 80156ea:	e9c0 1200 	strd	r1, r2, [r0]
 80156ee:	f04f 0e00 	mov.w	lr, #0
 80156f2:	9a01      	ldr	r2, [sp, #4]
 80156f4:	8103      	strh	r3, [r0, #8]
 80156f6:	6102      	str	r2, [r0, #16]
 80156f8:	f880 e014 	strb.w	lr, [r0, #20]
 80156fc:	b1d3      	cbz	r3, 8015734 <uxr_init_input_reliable_stream+0x4c>
 80156fe:	f8c1 e000 	str.w	lr, [r1]
 8015702:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015706:	f1bc 0f01 	cmp.w	ip, #1
 801570a:	d913      	bls.n	8015734 <uxr_init_input_reliable_stream+0x4c>
 801570c:	2301      	movs	r3, #1
 801570e:	fbb3 f1fc 	udiv	r1, r3, ip
 8015712:	fb0c 3111 	mls	r1, ip, r1, r3
 8015716:	b289      	uxth	r1, r1
 8015718:	6842      	ldr	r2, [r0, #4]
 801571a:	fbb2 f2fc 	udiv	r2, r2, ip
 801571e:	fb01 f202 	mul.w	r2, r1, r2
 8015722:	6801      	ldr	r1, [r0, #0]
 8015724:	f841 e002 	str.w	lr, [r1, r2]
 8015728:	3301      	adds	r3, #1
 801572a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801572e:	b29b      	uxth	r3, r3
 8015730:	459c      	cmp	ip, r3
 8015732:	d8ec      	bhi.n	801570e <uxr_init_input_reliable_stream+0x26>
 8015734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015738:	60c3      	str	r3, [r0, #12]
 801573a:	f85d fb04 	ldr.w	pc, [sp], #4
 801573e:	bf00      	nop

08015740 <uxr_reset_input_reliable_stream>:
 8015740:	8901      	ldrh	r1, [r0, #8]
 8015742:	b1e9      	cbz	r1, 8015780 <uxr_reset_input_reliable_stream+0x40>
 8015744:	f04f 0c00 	mov.w	ip, #0
 8015748:	b500      	push	{lr}
 801574a:	4663      	mov	r3, ip
 801574c:	46e6      	mov	lr, ip
 801574e:	fbb3 f2f1 	udiv	r2, r3, r1
 8015752:	fb01 3312 	mls	r3, r1, r2, r3
 8015756:	b29b      	uxth	r3, r3
 8015758:	6842      	ldr	r2, [r0, #4]
 801575a:	fbb2 f2f1 	udiv	r2, r2, r1
 801575e:	fb02 f303 	mul.w	r3, r2, r3
 8015762:	6802      	ldr	r2, [r0, #0]
 8015764:	f842 e003 	str.w	lr, [r2, r3]
 8015768:	f10c 0c01 	add.w	ip, ip, #1
 801576c:	8901      	ldrh	r1, [r0, #8]
 801576e:	fa1f f38c 	uxth.w	r3, ip
 8015772:	4299      	cmp	r1, r3
 8015774:	d8eb      	bhi.n	801574e <uxr_reset_input_reliable_stream+0xe>
 8015776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801577a:	60c3      	str	r3, [r0, #12]
 801577c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015784:	60c3      	str	r3, [r0, #12]
 8015786:	4770      	bx	lr

08015788 <uxr_receive_reliable_message>:
 8015788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801578c:	4604      	mov	r4, r0
 801578e:	460d      	mov	r5, r1
 8015790:	8901      	ldrh	r1, [r0, #8]
 8015792:	8980      	ldrh	r0, [r0, #12]
 8015794:	4690      	mov	r8, r2
 8015796:	461f      	mov	r7, r3
 8015798:	f000 fdd2 	bl	8016340 <uxr_seq_num_add>
 801579c:	4629      	mov	r1, r5
 801579e:	4606      	mov	r6, r0
 80157a0:	89a0      	ldrh	r0, [r4, #12]
 80157a2:	f000 fdd5 	bl	8016350 <uxr_seq_num_cmp>
 80157a6:	2800      	cmp	r0, #0
 80157a8:	db0a      	blt.n	80157c0 <uxr_receive_reliable_message+0x38>
 80157aa:	2600      	movs	r6, #0
 80157ac:	89e0      	ldrh	r0, [r4, #14]
 80157ae:	4629      	mov	r1, r5
 80157b0:	f000 fdce 	bl	8016350 <uxr_seq_num_cmp>
 80157b4:	2800      	cmp	r0, #0
 80157b6:	da00      	bge.n	80157ba <uxr_receive_reliable_message+0x32>
 80157b8:	81e5      	strh	r5, [r4, #14]
 80157ba:	4630      	mov	r0, r6
 80157bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157c0:	4630      	mov	r0, r6
 80157c2:	4629      	mov	r1, r5
 80157c4:	f000 fdc4 	bl	8016350 <uxr_seq_num_cmp>
 80157c8:	2800      	cmp	r0, #0
 80157ca:	dbee      	blt.n	80157aa <uxr_receive_reliable_message+0x22>
 80157cc:	6923      	ldr	r3, [r4, #16]
 80157ce:	4640      	mov	r0, r8
 80157d0:	4798      	blx	r3
 80157d2:	2101      	movs	r1, #1
 80157d4:	4681      	mov	r9, r0
 80157d6:	89a0      	ldrh	r0, [r4, #12]
 80157d8:	f000 fdb2 	bl	8016340 <uxr_seq_num_add>
 80157dc:	f1b9 0f00 	cmp.w	r9, #0
 80157e0:	d101      	bne.n	80157e6 <uxr_receive_reliable_message+0x5e>
 80157e2:	4285      	cmp	r5, r0
 80157e4:	d047      	beq.n	8015876 <uxr_receive_reliable_message+0xee>
 80157e6:	8922      	ldrh	r2, [r4, #8]
 80157e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80157ec:	fb02 5010 	mls	r0, r2, r0, r5
 80157f0:	b280      	uxth	r0, r0
 80157f2:	6863      	ldr	r3, [r4, #4]
 80157f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80157f8:	fb00 f303 	mul.w	r3, r0, r3
 80157fc:	6820      	ldr	r0, [r4, #0]
 80157fe:	3304      	adds	r3, #4
 8015800:	4418      	add	r0, r3
 8015802:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d1cf      	bne.n	80157aa <uxr_receive_reliable_message+0x22>
 801580a:	4641      	mov	r1, r8
 801580c:	463a      	mov	r2, r7
 801580e:	f001 ff1a 	bl	8017646 <memcpy>
 8015812:	8921      	ldrh	r1, [r4, #8]
 8015814:	fbb5 f2f1 	udiv	r2, r5, r1
 8015818:	fb01 5212 	mls	r2, r1, r2, r5
 801581c:	b292      	uxth	r2, r2
 801581e:	6863      	ldr	r3, [r4, #4]
 8015820:	fbb3 f3f1 	udiv	r3, r3, r1
 8015824:	fb02 f303 	mul.w	r3, r2, r3
 8015828:	6822      	ldr	r2, [r4, #0]
 801582a:	50d7      	str	r7, [r2, r3]
 801582c:	9a08      	ldr	r2, [sp, #32]
 801582e:	2301      	movs	r3, #1
 8015830:	7013      	strb	r3, [r2, #0]
 8015832:	f1b9 0f00 	cmp.w	r9, #0
 8015836:	d0b8      	beq.n	80157aa <uxr_receive_reliable_message+0x22>
 8015838:	89a6      	ldrh	r6, [r4, #12]
 801583a:	4630      	mov	r0, r6
 801583c:	2101      	movs	r1, #1
 801583e:	f000 fd7f 	bl	8016340 <uxr_seq_num_add>
 8015842:	8922      	ldrh	r2, [r4, #8]
 8015844:	6863      	ldr	r3, [r4, #4]
 8015846:	fbb3 f3f2 	udiv	r3, r3, r2
 801584a:	4606      	mov	r6, r0
 801584c:	fbb0 f0f2 	udiv	r0, r0, r2
 8015850:	fb02 6010 	mls	r0, r2, r0, r6
 8015854:	b280      	uxth	r0, r0
 8015856:	fb00 f303 	mul.w	r3, r0, r3
 801585a:	6820      	ldr	r0, [r4, #0]
 801585c:	3304      	adds	r3, #4
 801585e:	4418      	add	r0, r3
 8015860:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d0a0      	beq.n	80157aa <uxr_receive_reliable_message+0x22>
 8015868:	6923      	ldr	r3, [r4, #16]
 801586a:	4798      	blx	r3
 801586c:	2802      	cmp	r0, #2
 801586e:	d008      	beq.n	8015882 <uxr_receive_reliable_message+0xfa>
 8015870:	2801      	cmp	r0, #1
 8015872:	d0e2      	beq.n	801583a <uxr_receive_reliable_message+0xb2>
 8015874:	e799      	b.n	80157aa <uxr_receive_reliable_message+0x22>
 8015876:	9b08      	ldr	r3, [sp, #32]
 8015878:	81a5      	strh	r5, [r4, #12]
 801587a:	2601      	movs	r6, #1
 801587c:	f883 9000 	strb.w	r9, [r3]
 8015880:	e794      	b.n	80157ac <uxr_receive_reliable_message+0x24>
 8015882:	2601      	movs	r6, #1
 8015884:	e792      	b.n	80157ac <uxr_receive_reliable_message+0x24>
 8015886:	bf00      	nop

08015888 <uxr_next_input_reliable_buffer_available>:
 8015888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801588c:	4604      	mov	r4, r0
 801588e:	460f      	mov	r7, r1
 8015890:	8980      	ldrh	r0, [r0, #12]
 8015892:	2101      	movs	r1, #1
 8015894:	4690      	mov	r8, r2
 8015896:	f000 fd53 	bl	8016340 <uxr_seq_num_add>
 801589a:	8922      	ldrh	r2, [r4, #8]
 801589c:	fbb0 f6f2 	udiv	r6, r0, r2
 80158a0:	fb02 0616 	mls	r6, r2, r6, r0
 80158a4:	b2b6      	uxth	r6, r6
 80158a6:	6863      	ldr	r3, [r4, #4]
 80158a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80158ac:	fb06 f303 	mul.w	r3, r6, r3
 80158b0:	6826      	ldr	r6, [r4, #0]
 80158b2:	3304      	adds	r3, #4
 80158b4:	441e      	add	r6, r3
 80158b6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80158ba:	f1b9 0f00 	cmp.w	r9, #0
 80158be:	d023      	beq.n	8015908 <uxr_next_input_reliable_buffer_available+0x80>
 80158c0:	6923      	ldr	r3, [r4, #16]
 80158c2:	4605      	mov	r5, r0
 80158c4:	4630      	mov	r0, r6
 80158c6:	4798      	blx	r3
 80158c8:	4682      	mov	sl, r0
 80158ca:	b300      	cbz	r0, 801590e <uxr_next_input_reliable_buffer_available+0x86>
 80158cc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80158d0:	2101      	movs	r1, #1
 80158d2:	4650      	mov	r0, sl
 80158d4:	f000 fd34 	bl	8016340 <uxr_seq_num_add>
 80158d8:	8921      	ldrh	r1, [r4, #8]
 80158da:	fbb0 f2f1 	udiv	r2, r0, r1
 80158de:	4682      	mov	sl, r0
 80158e0:	fb01 0212 	mls	r2, r1, r2, r0
 80158e4:	e9d4 0300 	ldrd	r0, r3, [r4]
 80158e8:	b292      	uxth	r2, r2
 80158ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80158ee:	fb02 f303 	mul.w	r3, r2, r3
 80158f2:	3304      	adds	r3, #4
 80158f4:	4418      	add	r0, r3
 80158f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80158fa:	b12b      	cbz	r3, 8015908 <uxr_next_input_reliable_buffer_available+0x80>
 80158fc:	6923      	ldr	r3, [r4, #16]
 80158fe:	4798      	blx	r3
 8015900:	2802      	cmp	r0, #2
 8015902:	d01b      	beq.n	801593c <uxr_next_input_reliable_buffer_available+0xb4>
 8015904:	2801      	cmp	r0, #1
 8015906:	d0e3      	beq.n	80158d0 <uxr_next_input_reliable_buffer_available+0x48>
 8015908:	2000      	movs	r0, #0
 801590a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801590e:	464a      	mov	r2, r9
 8015910:	4631      	mov	r1, r6
 8015912:	4638      	mov	r0, r7
 8015914:	f7f7 fb26 	bl	800cf64 <ucdr_init_buffer>
 8015918:	8921      	ldrh	r1, [r4, #8]
 801591a:	fbb5 f2f1 	udiv	r2, r5, r1
 801591e:	fb01 5212 	mls	r2, r1, r2, r5
 8015922:	b292      	uxth	r2, r2
 8015924:	6863      	ldr	r3, [r4, #4]
 8015926:	fbb3 f3f1 	udiv	r3, r3, r1
 801592a:	fb02 f303 	mul.w	r3, r2, r3
 801592e:	6822      	ldr	r2, [r4, #0]
 8015930:	f842 a003 	str.w	sl, [r2, r3]
 8015934:	2001      	movs	r0, #1
 8015936:	81a5      	strh	r5, [r4, #12]
 8015938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801593c:	8920      	ldrh	r0, [r4, #8]
 801593e:	fbb5 f3f0 	udiv	r3, r5, r0
 8015942:	fb00 5513 	mls	r5, r0, r3, r5
 8015946:	b2ad      	uxth	r5, r5
 8015948:	6863      	ldr	r3, [r4, #4]
 801594a:	fbb3 f3f0 	udiv	r3, r3, r0
 801594e:	fb03 f505 	mul.w	r5, r3, r5
 8015952:	6823      	ldr	r3, [r4, #0]
 8015954:	2000      	movs	r0, #0
 8015956:	5158      	str	r0, [r3, r5]
 8015958:	eb06 0108 	add.w	r1, r6, r8
 801595c:	eba9 0208 	sub.w	r2, r9, r8
 8015960:	4638      	mov	r0, r7
 8015962:	f7f7 faff 	bl	800cf64 <ucdr_init_buffer>
 8015966:	4638      	mov	r0, r7
 8015968:	4903      	ldr	r1, [pc, #12]	; (8015978 <uxr_next_input_reliable_buffer_available+0xf0>)
 801596a:	4622      	mov	r2, r4
 801596c:	f7f7 face 	bl	800cf0c <ucdr_set_on_full_buffer_callback>
 8015970:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8015974:	2001      	movs	r0, #1
 8015976:	e7c8      	b.n	801590a <uxr_next_input_reliable_buffer_available+0x82>
 8015978:	0801567d 	.word	0x0801567d

0801597c <uxr_process_heartbeat>:
 801597c:	b538      	push	{r3, r4, r5, lr}
 801597e:	4611      	mov	r1, r2
 8015980:	4604      	mov	r4, r0
 8015982:	89c0      	ldrh	r0, [r0, #14]
 8015984:	4615      	mov	r5, r2
 8015986:	f000 fce3 	bl	8016350 <uxr_seq_num_cmp>
 801598a:	2800      	cmp	r0, #0
 801598c:	bfb8      	it	lt
 801598e:	81e5      	strhlt	r5, [r4, #14]
 8015990:	bd38      	pop	{r3, r4, r5, pc}
 8015992:	bf00      	nop

08015994 <uxr_compute_acknack>:
 8015994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015998:	8903      	ldrh	r3, [r0, #8]
 801599a:	8985      	ldrh	r5, [r0, #12]
 801599c:	4604      	mov	r4, r0
 801599e:	460e      	mov	r6, r1
 80159a0:	b1d3      	cbz	r3, 80159d8 <uxr_compute_acknack+0x44>
 80159a2:	4628      	mov	r0, r5
 80159a4:	2701      	movs	r7, #1
 80159a6:	e003      	b.n	80159b0 <uxr_compute_acknack+0x1c>
 80159a8:	4567      	cmp	r7, ip
 80159aa:	d215      	bcs.n	80159d8 <uxr_compute_acknack+0x44>
 80159ac:	89a0      	ldrh	r0, [r4, #12]
 80159ae:	3701      	adds	r7, #1
 80159b0:	b2b9      	uxth	r1, r7
 80159b2:	f000 fcc5 	bl	8016340 <uxr_seq_num_add>
 80159b6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80159ba:	fbb0 f3fc 	udiv	r3, r0, ip
 80159be:	fb0c 0313 	mls	r3, ip, r3, r0
 80159c2:	b29a      	uxth	r2, r3
 80159c4:	e9d4 1300 	ldrd	r1, r3, [r4]
 80159c8:	fbb3 f3fc 	udiv	r3, r3, ip
 80159cc:	fb02 f303 	mul.w	r3, r2, r3
 80159d0:	58cb      	ldr	r3, [r1, r3]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d1e8      	bne.n	80159a8 <uxr_compute_acknack+0x14>
 80159d6:	4605      	mov	r5, r0
 80159d8:	8035      	strh	r5, [r6, #0]
 80159da:	2101      	movs	r1, #1
 80159dc:	4628      	mov	r0, r5
 80159de:	89e7      	ldrh	r7, [r4, #14]
 80159e0:	f000 fcb2 	bl	8016348 <uxr_seq_num_sub>
 80159e4:	4601      	mov	r1, r0
 80159e6:	4638      	mov	r0, r7
 80159e8:	f000 fcae 	bl	8016348 <uxr_seq_num_sub>
 80159ec:	4605      	mov	r5, r0
 80159ee:	b318      	cbz	r0, 8015a38 <uxr_compute_acknack+0xa4>
 80159f0:	f04f 0900 	mov.w	r9, #0
 80159f4:	464f      	mov	r7, r9
 80159f6:	f04f 0801 	mov.w	r8, #1
 80159fa:	fa1f f189 	uxth.w	r1, r9
 80159fe:	8830      	ldrh	r0, [r6, #0]
 8015a00:	f000 fc9e 	bl	8016340 <uxr_seq_num_add>
 8015a04:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015a08:	fbb0 f3fc 	udiv	r3, r0, ip
 8015a0c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8015a10:	fb03 001c 	mls	r0, r3, ip, r0
 8015a14:	b283      	uxth	r3, r0
 8015a16:	fbb2 f2fc 	udiv	r2, r2, ip
 8015a1a:	fb02 f303 	mul.w	r3, r2, r3
 8015a1e:	fa08 f209 	lsl.w	r2, r8, r9
 8015a22:	58cb      	ldr	r3, [r1, r3]
 8015a24:	f109 0901 	add.w	r9, r9, #1
 8015a28:	b90b      	cbnz	r3, 8015a2e <uxr_compute_acknack+0x9a>
 8015a2a:	4317      	orrs	r7, r2
 8015a2c:	b2bf      	uxth	r7, r7
 8015a2e:	454d      	cmp	r5, r9
 8015a30:	d1e3      	bne.n	80159fa <uxr_compute_acknack+0x66>
 8015a32:	4638      	mov	r0, r7
 8015a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a38:	4607      	mov	r7, r0
 8015a3a:	4638      	mov	r0, r7
 8015a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015a40 <uxr_init_output_best_effort_stream>:
 8015a40:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8015a44:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8015a48:	6001      	str	r1, [r0, #0]
 8015a4a:	7303      	strb	r3, [r0, #12]
 8015a4c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015a50:	4770      	bx	lr
 8015a52:	bf00      	nop

08015a54 <uxr_reset_output_best_effort_stream>:
 8015a54:	7b02      	ldrb	r2, [r0, #12]
 8015a56:	6042      	str	r2, [r0, #4]
 8015a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015a5c:	81c3      	strh	r3, [r0, #14]
 8015a5e:	4770      	bx	lr

08015a60 <uxr_prepare_best_effort_buffer_to_write>:
 8015a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a62:	4604      	mov	r4, r0
 8015a64:	b083      	sub	sp, #12
 8015a66:	6840      	ldr	r0, [r0, #4]
 8015a68:	460d      	mov	r5, r1
 8015a6a:	4616      	mov	r6, r2
 8015a6c:	f7f9 fda8 	bl	800f5c0 <uxr_submessage_padding>
 8015a70:	6863      	ldr	r3, [r4, #4]
 8015a72:	4418      	add	r0, r3
 8015a74:	68a3      	ldr	r3, [r4, #8]
 8015a76:	1942      	adds	r2, r0, r5
 8015a78:	4293      	cmp	r3, r2
 8015a7a:	bf2c      	ite	cs
 8015a7c:	2701      	movcs	r7, #1
 8015a7e:	2700      	movcc	r7, #0
 8015a80:	d202      	bcs.n	8015a88 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8015a82:	4638      	mov	r0, r7
 8015a84:	b003      	add	sp, #12
 8015a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a88:	9000      	str	r0, [sp, #0]
 8015a8a:	6821      	ldr	r1, [r4, #0]
 8015a8c:	4630      	mov	r0, r6
 8015a8e:	2300      	movs	r3, #0
 8015a90:	f7f7 fa56 	bl	800cf40 <ucdr_init_buffer_origin_offset>
 8015a94:	6861      	ldr	r1, [r4, #4]
 8015a96:	4638      	mov	r0, r7
 8015a98:	4429      	add	r1, r5
 8015a9a:	6061      	str	r1, [r4, #4]
 8015a9c:	b003      	add	sp, #12
 8015a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015aa0 <uxr_prepare_best_effort_buffer_to_send>:
 8015aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015aa4:	4604      	mov	r4, r0
 8015aa6:	461d      	mov	r5, r3
 8015aa8:	6840      	ldr	r0, [r0, #4]
 8015aaa:	7b23      	ldrb	r3, [r4, #12]
 8015aac:	4298      	cmp	r0, r3
 8015aae:	bf8c      	ite	hi
 8015ab0:	2601      	movhi	r6, #1
 8015ab2:	2600      	movls	r6, #0
 8015ab4:	d802      	bhi.n	8015abc <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8015ab6:	4630      	mov	r0, r6
 8015ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015abc:	4688      	mov	r8, r1
 8015abe:	89e0      	ldrh	r0, [r4, #14]
 8015ac0:	2101      	movs	r1, #1
 8015ac2:	4617      	mov	r7, r2
 8015ac4:	f000 fc3c 	bl	8016340 <uxr_seq_num_add>
 8015ac8:	6823      	ldr	r3, [r4, #0]
 8015aca:	81e0      	strh	r0, [r4, #14]
 8015acc:	8028      	strh	r0, [r5, #0]
 8015ace:	f8c8 3000 	str.w	r3, [r8]
 8015ad2:	6863      	ldr	r3, [r4, #4]
 8015ad4:	603b      	str	r3, [r7, #0]
 8015ad6:	7b23      	ldrb	r3, [r4, #12]
 8015ad8:	6063      	str	r3, [r4, #4]
 8015ada:	4630      	mov	r0, r6
 8015adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015ae0 <on_full_output_buffer>:
 8015ae0:	b538      	push	{r3, r4, r5, lr}
 8015ae2:	6802      	ldr	r2, [r0, #0]
 8015ae4:	460c      	mov	r4, r1
 8015ae6:	6809      	ldr	r1, [r1, #0]
 8015ae8:	8923      	ldrh	r3, [r4, #8]
 8015aea:	eba2 0c01 	sub.w	ip, r2, r1
 8015aee:	6862      	ldr	r2, [r4, #4]
 8015af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8015af4:	fbbc fcf2 	udiv	ip, ip, r2
 8015af8:	f10c 0c01 	add.w	ip, ip, #1
 8015afc:	fa1f fc8c 	uxth.w	ip, ip
 8015b00:	fbbc fef3 	udiv	lr, ip, r3
 8015b04:	fb03 c31e 	mls	r3, r3, lr, ip
 8015b08:	b29b      	uxth	r3, r3
 8015b0a:	fb02 f303 	mul.w	r3, r2, r3
 8015b0e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8015b12:	58ca      	ldr	r2, [r1, r3]
 8015b14:	4463      	add	r3, ip
 8015b16:	eba2 020c 	sub.w	r2, r2, ip
 8015b1a:	3308      	adds	r3, #8
 8015b1c:	4605      	mov	r5, r0
 8015b1e:	4419      	add	r1, r3
 8015b20:	3a04      	subs	r2, #4
 8015b22:	6903      	ldr	r3, [r0, #16]
 8015b24:	f7f7 fa16 	bl	800cf54 <ucdr_init_buffer_origin>
 8015b28:	4628      	mov	r0, r5
 8015b2a:	4903      	ldr	r1, [pc, #12]	; (8015b38 <on_full_output_buffer+0x58>)
 8015b2c:	4622      	mov	r2, r4
 8015b2e:	f7f7 f9ed 	bl	800cf0c <ucdr_set_on_full_buffer_callback>
 8015b32:	2000      	movs	r0, #0
 8015b34:	bd38      	pop	{r3, r4, r5, pc}
 8015b36:	bf00      	nop
 8015b38:	08015ae1 	.word	0x08015ae1

08015b3c <uxr_init_output_reliable_stream>:
 8015b3c:	b410      	push	{r4}
 8015b3e:	f89d c004 	ldrb.w	ip, [sp, #4]
 8015b42:	8103      	strh	r3, [r0, #8]
 8015b44:	e9c0 1200 	strd	r1, r2, [r0]
 8015b48:	f880 c00c 	strb.w	ip, [r0, #12]
 8015b4c:	b1d3      	cbz	r3, 8015b84 <uxr_init_output_reliable_stream+0x48>
 8015b4e:	f8c1 c000 	str.w	ip, [r1]
 8015b52:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015b56:	f1bc 0f01 	cmp.w	ip, #1
 8015b5a:	d913      	bls.n	8015b84 <uxr_init_output_reliable_stream+0x48>
 8015b5c:	2301      	movs	r3, #1
 8015b5e:	fbb3 f1fc 	udiv	r1, r3, ip
 8015b62:	fb0c 3111 	mls	r1, ip, r1, r3
 8015b66:	b289      	uxth	r1, r1
 8015b68:	6842      	ldr	r2, [r0, #4]
 8015b6a:	6804      	ldr	r4, [r0, #0]
 8015b6c:	fbb2 f2fc 	udiv	r2, r2, ip
 8015b70:	fb01 f202 	mul.w	r2, r1, r2
 8015b74:	7b01      	ldrb	r1, [r0, #12]
 8015b76:	50a1      	str	r1, [r4, r2]
 8015b78:	3301      	adds	r3, #1
 8015b7a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015b7e:	b29b      	uxth	r3, r3
 8015b80:	459c      	cmp	ip, r3
 8015b82:	d8ec      	bhi.n	8015b5e <uxr_init_output_reliable_stream+0x22>
 8015b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b88:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015b8c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8015b90:	4905      	ldr	r1, [pc, #20]	; (8015ba8 <uxr_init_output_reliable_stream+0x6c>)
 8015b92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b96:	f8c0 100e 	str.w	r1, [r0, #14]
 8015b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	8242      	strh	r2, [r0, #18]
 8015ba2:	8403      	strh	r3, [r0, #32]
 8015ba4:	4770      	bx	lr
 8015ba6:	bf00      	nop
 8015ba8:	ffff0000 	.word	0xffff0000

08015bac <uxr_reset_output_reliable_stream>:
 8015bac:	8901      	ldrh	r1, [r0, #8]
 8015bae:	b1b1      	cbz	r1, 8015bde <uxr_reset_output_reliable_stream+0x32>
 8015bb0:	f04f 0c00 	mov.w	ip, #0
 8015bb4:	4663      	mov	r3, ip
 8015bb6:	fbb3 f2f1 	udiv	r2, r3, r1
 8015bba:	fb01 3312 	mls	r3, r1, r2, r3
 8015bbe:	b29b      	uxth	r3, r3
 8015bc0:	6842      	ldr	r2, [r0, #4]
 8015bc2:	fbb2 f2f1 	udiv	r2, r2, r1
 8015bc6:	6801      	ldr	r1, [r0, #0]
 8015bc8:	fb02 f303 	mul.w	r3, r2, r3
 8015bcc:	7b02      	ldrb	r2, [r0, #12]
 8015bce:	50ca      	str	r2, [r1, r3]
 8015bd0:	f10c 0c01 	add.w	ip, ip, #1
 8015bd4:	8901      	ldrh	r1, [r0, #8]
 8015bd6:	fa1f f38c 	uxth.w	r3, ip
 8015bda:	4299      	cmp	r1, r3
 8015bdc:	d8eb      	bhi.n	8015bb6 <uxr_reset_output_reliable_stream+0xa>
 8015bde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015be2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015be6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8015bea:	4904      	ldr	r1, [pc, #16]	; (8015bfc <uxr_reset_output_reliable_stream+0x50>)
 8015bec:	f8c0 100e 	str.w	r1, [r0, #14]
 8015bf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	8242      	strh	r2, [r0, #18]
 8015bf8:	8403      	strh	r3, [r0, #32]
 8015bfa:	4770      	bx	lr
 8015bfc:	ffff0000 	.word	0xffff0000

08015c00 <uxr_prepare_reliable_buffer_to_write>:
 8015c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c04:	4604      	mov	r4, r0
 8015c06:	b091      	sub	sp, #68	; 0x44
 8015c08:	8900      	ldrh	r0, [r0, #8]
 8015c0a:	89e6      	ldrh	r6, [r4, #14]
 8015c0c:	6823      	ldr	r3, [r4, #0]
 8015c0e:	9204      	str	r2, [sp, #16]
 8015c10:	fbb6 f2f0 	udiv	r2, r6, r0
 8015c14:	fb00 6212 	mls	r2, r0, r2, r6
 8015c18:	b292      	uxth	r2, r2
 8015c1a:	6865      	ldr	r5, [r4, #4]
 8015c1c:	fbb5 f5f0 	udiv	r5, r5, r0
 8015c20:	fb05 3202 	mla	r2, r5, r2, r3
 8015c24:	3204      	adds	r2, #4
 8015c26:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8015c2a:	f894 900c 	ldrb.w	r9, [r4, #12]
 8015c2e:	9203      	str	r2, [sp, #12]
 8015c30:	468b      	mov	fp, r1
 8015c32:	1f2f      	subs	r7, r5, #4
 8015c34:	2800      	cmp	r0, #0
 8015c36:	f000 814c 	beq.w	8015ed2 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8015c3a:	f04f 0c00 	mov.w	ip, #0
 8015c3e:	46e2      	mov	sl, ip
 8015c40:	4661      	mov	r1, ip
 8015c42:	fbb1 f2f0 	udiv	r2, r1, r0
 8015c46:	fb00 1212 	mls	r2, r0, r2, r1
 8015c4a:	b292      	uxth	r2, r2
 8015c4c:	fb05 f202 	mul.w	r2, r5, r2
 8015c50:	f10c 0c01 	add.w	ip, ip, #1
 8015c54:	589a      	ldr	r2, [r3, r2]
 8015c56:	454a      	cmp	r2, r9
 8015c58:	bf08      	it	eq
 8015c5a:	f10a 0a01 	addeq.w	sl, sl, #1
 8015c5e:	fa1f f18c 	uxth.w	r1, ip
 8015c62:	bf08      	it	eq
 8015c64:	fa1f fa8a 	uxtheq.w	sl, sl
 8015c68:	4281      	cmp	r1, r0
 8015c6a:	d3ea      	bcc.n	8015c42 <uxr_prepare_reliable_buffer_to_write+0x42>
 8015c6c:	4640      	mov	r0, r8
 8015c6e:	2104      	movs	r1, #4
 8015c70:	f8cd a014 	str.w	sl, [sp, #20]
 8015c74:	f7f7 f97a 	bl	800cf6c <ucdr_alignment>
 8015c78:	4480      	add	r8, r0
 8015c7a:	eb08 020b 	add.w	r2, r8, fp
 8015c7e:	42ba      	cmp	r2, r7
 8015c80:	f240 80cd 	bls.w	8015e1e <uxr_prepare_reliable_buffer_to_write+0x21e>
 8015c84:	7b22      	ldrb	r2, [r4, #12]
 8015c86:	445a      	add	r2, fp
 8015c88:	42ba      	cmp	r2, r7
 8015c8a:	f240 80b5 	bls.w	8015df8 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8015c8e:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 8015c92:	33fc      	adds	r3, #252	; 0xfc
 8015c94:	b2ba      	uxth	r2, r7
 8015c96:	4413      	add	r3, r2
 8015c98:	b29b      	uxth	r3, r3
 8015c9a:	fb0a f903 	mul.w	r9, sl, r3
 8015c9e:	45d9      	cmp	r9, fp
 8015ca0:	9305      	str	r3, [sp, #20]
 8015ca2:	9306      	str	r3, [sp, #24]
 8015ca4:	f0c0 80b7 	bcc.w	8015e16 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015ca8:	f108 0304 	add.w	r3, r8, #4
 8015cac:	42bb      	cmp	r3, r7
 8015cae:	f080 80db 	bcs.w	8015e68 <uxr_prepare_reliable_buffer_to_write+0x268>
 8015cb2:	f1a2 0904 	sub.w	r9, r2, #4
 8015cb6:	eba9 0908 	sub.w	r9, r9, r8
 8015cba:	9b05      	ldr	r3, [sp, #20]
 8015cbc:	fa1f f989 	uxth.w	r9, r9
 8015cc0:	ebab 0b09 	sub.w	fp, fp, r9
 8015cc4:	fbbb f2f3 	udiv	r2, fp, r3
 8015cc8:	fb03 b312 	mls	r3, r3, r2, fp
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	f000 80c8 	beq.w	8015e62 <uxr_prepare_reliable_buffer_to_write+0x262>
 8015cd2:	3201      	adds	r2, #1
 8015cd4:	b292      	uxth	r2, r2
 8015cd6:	9306      	str	r3, [sp, #24]
 8015cd8:	4552      	cmp	r2, sl
 8015cda:	f200 809c 	bhi.w	8015e16 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015cde:	f10d 0b20 	add.w	fp, sp, #32
 8015ce2:	2a00      	cmp	r2, #0
 8015ce4:	d042      	beq.n	8015d6c <uxr_prepare_reliable_buffer_to_write+0x16c>
 8015ce6:	f8cd 801c 	str.w	r8, [sp, #28]
 8015cea:	f04f 0a00 	mov.w	sl, #0
 8015cee:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015cf2:	9505      	str	r5, [sp, #20]
 8015cf4:	f10d 0b20 	add.w	fp, sp, #32
 8015cf8:	4615      	mov	r5, r2
 8015cfa:	e000      	b.n	8015cfe <uxr_prepare_reliable_buffer_to_write+0xfe>
 8015cfc:	46c1      	mov	r9, r8
 8015cfe:	8920      	ldrh	r0, [r4, #8]
 8015d00:	fbb6 f2f0 	udiv	r2, r6, r0
 8015d04:	fb00 6112 	mls	r1, r0, r2, r6
 8015d08:	b28a      	uxth	r2, r1
 8015d0a:	6863      	ldr	r3, [r4, #4]
 8015d0c:	fbb3 f1f0 	udiv	r1, r3, r0
 8015d10:	6823      	ldr	r3, [r4, #0]
 8015d12:	fb02 f101 	mul.w	r1, r2, r1
 8015d16:	3104      	adds	r1, #4
 8015d18:	4419      	add	r1, r3
 8015d1a:	4658      	mov	r0, fp
 8015d1c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8015d20:	9200      	str	r2, [sp, #0]
 8015d22:	2300      	movs	r3, #0
 8015d24:	463a      	mov	r2, r7
 8015d26:	f7f7 f90b 	bl	800cf40 <ucdr_init_buffer_origin_offset>
 8015d2a:	464a      	mov	r2, r9
 8015d2c:	2300      	movs	r3, #0
 8015d2e:	210d      	movs	r1, #13
 8015d30:	4658      	mov	r0, fp
 8015d32:	f7f9 fc05 	bl	800f540 <uxr_buffer_submessage_header>
 8015d36:	8921      	ldrh	r1, [r4, #8]
 8015d38:	fbb6 f2f1 	udiv	r2, r6, r1
 8015d3c:	fb01 6212 	mls	r2, r1, r2, r6
 8015d40:	b292      	uxth	r2, r2
 8015d42:	6863      	ldr	r3, [r4, #4]
 8015d44:	fbb3 f3f1 	udiv	r3, r3, r1
 8015d48:	fb02 f303 	mul.w	r3, r2, r3
 8015d4c:	6822      	ldr	r2, [r4, #0]
 8015d4e:	4630      	mov	r0, r6
 8015d50:	50d7      	str	r7, [r2, r3]
 8015d52:	2101      	movs	r1, #1
 8015d54:	f000 faf4 	bl	8016340 <uxr_seq_num_add>
 8015d58:	f10a 0a01 	add.w	sl, sl, #1
 8015d5c:	fa1f f38a 	uxth.w	r3, sl
 8015d60:	429d      	cmp	r5, r3
 8015d62:	4606      	mov	r6, r0
 8015d64:	d8ca      	bhi.n	8015cfc <uxr_prepare_reliable_buffer_to_write+0xfc>
 8015d66:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015d6a:	9d05      	ldr	r5, [sp, #20]
 8015d6c:	8920      	ldrh	r0, [r4, #8]
 8015d6e:	fbb6 f3f0 	udiv	r3, r6, r0
 8015d72:	fb00 6313 	mls	r3, r0, r3, r6
 8015d76:	b299      	uxth	r1, r3
 8015d78:	6863      	ldr	r3, [r4, #4]
 8015d7a:	fbb3 f3f0 	udiv	r3, r3, r0
 8015d7e:	fb01 f303 	mul.w	r3, r1, r3
 8015d82:	6821      	ldr	r1, [r4, #0]
 8015d84:	3304      	adds	r3, #4
 8015d86:	4419      	add	r1, r3
 8015d88:	463a      	mov	r2, r7
 8015d8a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8015d8e:	9000      	str	r0, [sp, #0]
 8015d90:	2300      	movs	r3, #0
 8015d92:	4658      	mov	r0, fp
 8015d94:	f7f7 f8d4 	bl	800cf40 <ucdr_init_buffer_origin_offset>
 8015d98:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8015d9c:	4658      	mov	r0, fp
 8015d9e:	fa1f f289 	uxth.w	r2, r9
 8015da2:	2302      	movs	r3, #2
 8015da4:	210d      	movs	r1, #13
 8015da6:	f7f9 fbcb 	bl	800f540 <uxr_buffer_submessage_header>
 8015daa:	9b03      	ldr	r3, [sp, #12]
 8015dac:	8927      	ldrh	r7, [r4, #8]
 8015dae:	7b20      	ldrb	r0, [r4, #12]
 8015db0:	f108 0104 	add.w	r1, r8, #4
 8015db4:	440b      	add	r3, r1
 8015db6:	4619      	mov	r1, r3
 8015db8:	fbb6 f3f7 	udiv	r3, r6, r7
 8015dbc:	fb07 6313 	mls	r3, r7, r3, r6
 8015dc0:	f1a5 0208 	sub.w	r2, r5, #8
 8015dc4:	b29d      	uxth	r5, r3
 8015dc6:	3004      	adds	r0, #4
 8015dc8:	6863      	ldr	r3, [r4, #4]
 8015dca:	fbb3 f3f7 	udiv	r3, r3, r7
 8015dce:	fb05 f303 	mul.w	r3, r5, r3
 8015dd2:	6825      	ldr	r5, [r4, #0]
 8015dd4:	4448      	add	r0, r9
 8015dd6:	50e8      	str	r0, [r5, r3]
 8015dd8:	9d04      	ldr	r5, [sp, #16]
 8015dda:	eba2 0208 	sub.w	r2, r2, r8
 8015dde:	4628      	mov	r0, r5
 8015de0:	f7f7 f8c0 	bl	800cf64 <ucdr_init_buffer>
 8015de4:	4628      	mov	r0, r5
 8015de6:	493c      	ldr	r1, [pc, #240]	; (8015ed8 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8015de8:	4622      	mov	r2, r4
 8015dea:	f7f7 f88f 	bl	800cf0c <ucdr_set_on_full_buffer_callback>
 8015dee:	2001      	movs	r0, #1
 8015df0:	81e6      	strh	r6, [r4, #14]
 8015df2:	b011      	add	sp, #68	; 0x44
 8015df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015df8:	2101      	movs	r1, #1
 8015dfa:	89e0      	ldrh	r0, [r4, #14]
 8015dfc:	f000 faa0 	bl	8016340 <uxr_seq_num_add>
 8015e00:	8921      	ldrh	r1, [r4, #8]
 8015e02:	4605      	mov	r5, r0
 8015e04:	8a60      	ldrh	r0, [r4, #18]
 8015e06:	f000 fa9b 	bl	8016340 <uxr_seq_num_add>
 8015e0a:	4601      	mov	r1, r0
 8015e0c:	4628      	mov	r0, r5
 8015e0e:	f000 fa9f 	bl	8016350 <uxr_seq_num_cmp>
 8015e12:	2800      	cmp	r0, #0
 8015e14:	dd42      	ble.n	8015e9c <uxr_prepare_reliable_buffer_to_write+0x29c>
 8015e16:	2000      	movs	r0, #0
 8015e18:	b011      	add	sp, #68	; 0x44
 8015e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e1e:	8921      	ldrh	r1, [r4, #8]
 8015e20:	8a60      	ldrh	r0, [r4, #18]
 8015e22:	9205      	str	r2, [sp, #20]
 8015e24:	f000 fa8c 	bl	8016340 <uxr_seq_num_add>
 8015e28:	4601      	mov	r1, r0
 8015e2a:	4630      	mov	r0, r6
 8015e2c:	f000 fa90 	bl	8016350 <uxr_seq_num_cmp>
 8015e30:	2800      	cmp	r0, #0
 8015e32:	9a05      	ldr	r2, [sp, #20]
 8015e34:	dcef      	bgt.n	8015e16 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015e36:	8927      	ldrh	r7, [r4, #8]
 8015e38:	fbb6 f3f7 	udiv	r3, r6, r7
 8015e3c:	fb07 6313 	mls	r3, r7, r3, r6
 8015e40:	b29d      	uxth	r5, r3
 8015e42:	6863      	ldr	r3, [r4, #4]
 8015e44:	6824      	ldr	r4, [r4, #0]
 8015e46:	fbb3 f3f7 	udiv	r3, r3, r7
 8015e4a:	fb05 f303 	mul.w	r3, r5, r3
 8015e4e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8015e52:	50e2      	str	r2, [r4, r3]
 8015e54:	2300      	movs	r3, #0
 8015e56:	f8cd 8000 	str.w	r8, [sp]
 8015e5a:	f7f7 f871 	bl	800cf40 <ucdr_init_buffer_origin_offset>
 8015e5e:	2001      	movs	r0, #1
 8015e60:	e7da      	b.n	8015e18 <uxr_prepare_reliable_buffer_to_write+0x218>
 8015e62:	b293      	uxth	r3, r2
 8015e64:	461a      	mov	r2, r3
 8015e66:	e737      	b.n	8015cd8 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8015e68:	4630      	mov	r0, r6
 8015e6a:	2101      	movs	r1, #1
 8015e6c:	9207      	str	r2, [sp, #28]
 8015e6e:	f000 fa67 	bl	8016340 <uxr_seq_num_add>
 8015e72:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015e76:	fbb0 f1fc 	udiv	r1, r0, ip
 8015e7a:	fb0c 0111 	mls	r1, ip, r1, r0
 8015e7e:	4606      	mov	r6, r0
 8015e80:	b288      	uxth	r0, r1
 8015e82:	6863      	ldr	r3, [r4, #4]
 8015e84:	fbb3 f1fc 	udiv	r1, r3, ip
 8015e88:	6823      	ldr	r3, [r4, #0]
 8015e8a:	9a07      	ldr	r2, [sp, #28]
 8015e8c:	fb00 f101 	mul.w	r1, r0, r1
 8015e90:	3104      	adds	r1, #4
 8015e92:	440b      	add	r3, r1
 8015e94:	9303      	str	r3, [sp, #12]
 8015e96:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8015e9a:	e70a      	b.n	8015cb2 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8015e9c:	8921      	ldrh	r1, [r4, #8]
 8015e9e:	fbb5 f3f1 	udiv	r3, r5, r1
 8015ea2:	fb01 5313 	mls	r3, r1, r3, r5
 8015ea6:	b29a      	uxth	r2, r3
 8015ea8:	6863      	ldr	r3, [r4, #4]
 8015eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8015eae:	6821      	ldr	r1, [r4, #0]
 8015eb0:	9804      	ldr	r0, [sp, #16]
 8015eb2:	fb02 f303 	mul.w	r3, r2, r3
 8015eb6:	3304      	adds	r3, #4
 8015eb8:	7b22      	ldrb	r2, [r4, #12]
 8015eba:	4419      	add	r1, r3
 8015ebc:	445a      	add	r2, fp
 8015ebe:	f841 2c04 	str.w	r2, [r1, #-4]
 8015ec2:	7b23      	ldrb	r3, [r4, #12]
 8015ec4:	9300      	str	r3, [sp, #0]
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	f7f7 f83a 	bl	800cf40 <ucdr_init_buffer_origin_offset>
 8015ecc:	81e5      	strh	r5, [r4, #14]
 8015ece:	2001      	movs	r0, #1
 8015ed0:	e7a2      	b.n	8015e18 <uxr_prepare_reliable_buffer_to_write+0x218>
 8015ed2:	4682      	mov	sl, r0
 8015ed4:	e6ca      	b.n	8015c6c <uxr_prepare_reliable_buffer_to_write+0x6c>
 8015ed6:	bf00      	nop
 8015ed8:	08015ae1 	.word	0x08015ae1

08015edc <uxr_prepare_next_reliable_buffer_to_send>:
 8015edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ede:	4604      	mov	r4, r0
 8015ee0:	460f      	mov	r7, r1
 8015ee2:	8a00      	ldrh	r0, [r0, #16]
 8015ee4:	2101      	movs	r1, #1
 8015ee6:	4616      	mov	r6, r2
 8015ee8:	461d      	mov	r5, r3
 8015eea:	f000 fa29 	bl	8016340 <uxr_seq_num_add>
 8015eee:	8028      	strh	r0, [r5, #0]
 8015ef0:	8922      	ldrh	r2, [r4, #8]
 8015ef2:	fbb0 f3f2 	udiv	r3, r0, r2
 8015ef6:	fb02 0c13 	mls	ip, r2, r3, r0
 8015efa:	fa1f fc8c 	uxth.w	ip, ip
 8015efe:	6863      	ldr	r3, [r4, #4]
 8015f00:	fbb3 f3f2 	udiv	r3, r3, r2
 8015f04:	fb0c fc03 	mul.w	ip, ip, r3
 8015f08:	6823      	ldr	r3, [r4, #0]
 8015f0a:	89e1      	ldrh	r1, [r4, #14]
 8015f0c:	f10c 0c04 	add.w	ip, ip, #4
 8015f10:	4463      	add	r3, ip
 8015f12:	603b      	str	r3, [r7, #0]
 8015f14:	6823      	ldr	r3, [r4, #0]
 8015f16:	449c      	add	ip, r3
 8015f18:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8015f1c:	6033      	str	r3, [r6, #0]
 8015f1e:	f000 fa17 	bl	8016350 <uxr_seq_num_cmp>
 8015f22:	2800      	cmp	r0, #0
 8015f24:	dd01      	ble.n	8015f2a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8015f26:	2000      	movs	r0, #0
 8015f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f2a:	7b23      	ldrb	r3, [r4, #12]
 8015f2c:	6832      	ldr	r2, [r6, #0]
 8015f2e:	429a      	cmp	r2, r3
 8015f30:	d9f9      	bls.n	8015f26 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015f32:	8a61      	ldrh	r1, [r4, #18]
 8015f34:	8a20      	ldrh	r0, [r4, #16]
 8015f36:	f000 fa07 	bl	8016348 <uxr_seq_num_sub>
 8015f3a:	8923      	ldrh	r3, [r4, #8]
 8015f3c:	4283      	cmp	r3, r0
 8015f3e:	d0f2      	beq.n	8015f26 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015f40:	8828      	ldrh	r0, [r5, #0]
 8015f42:	89e3      	ldrh	r3, [r4, #14]
 8015f44:	8220      	strh	r0, [r4, #16]
 8015f46:	4298      	cmp	r0, r3
 8015f48:	d001      	beq.n	8015f4e <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8015f4a:	2001      	movs	r0, #1
 8015f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f4e:	2101      	movs	r1, #1
 8015f50:	f000 f9f6 	bl	8016340 <uxr_seq_num_add>
 8015f54:	81e0      	strh	r0, [r4, #14]
 8015f56:	2001      	movs	r0, #1
 8015f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f5a:	bf00      	nop

08015f5c <uxr_update_output_stream_heartbeat_timestamp>:
 8015f5c:	b570      	push	{r4, r5, r6, lr}
 8015f5e:	8a01      	ldrh	r1, [r0, #16]
 8015f60:	4604      	mov	r4, r0
 8015f62:	8a40      	ldrh	r0, [r0, #18]
 8015f64:	4615      	mov	r5, r2
 8015f66:	461e      	mov	r6, r3
 8015f68:	f000 f9f2 	bl	8016350 <uxr_seq_num_cmp>
 8015f6c:	2800      	cmp	r0, #0
 8015f6e:	db07      	blt.n	8015f80 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8015f70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015f74:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015f78:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8015f7c:	2000      	movs	r0, #0
 8015f7e:	bd70      	pop	{r4, r5, r6, pc}
 8015f80:	f894 0020 	ldrb.w	r0, [r4, #32]
 8015f84:	b940      	cbnz	r0, 8015f98 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8015f86:	2301      	movs	r3, #1
 8015f88:	f884 3020 	strb.w	r3, [r4, #32]
 8015f8c:	3564      	adds	r5, #100	; 0x64
 8015f8e:	f146 0600 	adc.w	r6, r6, #0
 8015f92:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8015f96:	bd70      	pop	{r4, r5, r6, pc}
 8015f98:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8015f9c:	4295      	cmp	r5, r2
 8015f9e:	eb76 0303 	sbcs.w	r3, r6, r3
 8015fa2:	bfa5      	ittet	ge
 8015fa4:	3001      	addge	r0, #1
 8015fa6:	f884 0020 	strbge.w	r0, [r4, #32]
 8015faa:	2000      	movlt	r0, #0
 8015fac:	2001      	movge	r0, #1
 8015fae:	e7ed      	b.n	8015f8c <uxr_update_output_stream_heartbeat_timestamp+0x30>

08015fb0 <uxr_begin_output_nack_buffer_it>:
 8015fb0:	8a40      	ldrh	r0, [r0, #18]
 8015fb2:	4770      	bx	lr

08015fb4 <uxr_next_reliable_nack_buffer_to_send>:
 8015fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fb8:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 8015fbc:	b082      	sub	sp, #8
 8015fbe:	f1b8 0f00 	cmp.w	r8, #0
 8015fc2:	d011      	beq.n	8015fe8 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8015fc4:	4604      	mov	r4, r0
 8015fc6:	8818      	ldrh	r0, [r3, #0]
 8015fc8:	460e      	mov	r6, r1
 8015fca:	4617      	mov	r7, r2
 8015fcc:	461d      	mov	r5, r3
 8015fce:	2101      	movs	r1, #1
 8015fd0:	f000 f9b6 	bl	8016340 <uxr_seq_num_add>
 8015fd4:	8028      	strh	r0, [r5, #0]
 8015fd6:	8a21      	ldrh	r1, [r4, #16]
 8015fd8:	f000 f9ba 	bl	8016350 <uxr_seq_num_cmp>
 8015fdc:	2800      	cmp	r0, #0
 8015fde:	dd07      	ble.n	8015ff0 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8015fe0:	f04f 0800 	mov.w	r8, #0
 8015fe4:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 8015fe8:	4640      	mov	r0, r8
 8015fea:	b002      	add	sp, #8
 8015fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ff0:	8921      	ldrh	r1, [r4, #8]
 8015ff2:	8828      	ldrh	r0, [r5, #0]
 8015ff4:	6823      	ldr	r3, [r4, #0]
 8015ff6:	fbb0 f2f1 	udiv	r2, r0, r1
 8015ffa:	fb01 0c12 	mls	ip, r1, r2, r0
 8015ffe:	fa1f f28c 	uxth.w	r2, ip
 8016002:	9301      	str	r3, [sp, #4]
 8016004:	6863      	ldr	r3, [r4, #4]
 8016006:	fbb3 fcf1 	udiv	ip, r3, r1
 801600a:	9b01      	ldr	r3, [sp, #4]
 801600c:	fb02 fc0c 	mul.w	ip, r2, ip
 8016010:	f10c 0c04 	add.w	ip, ip, #4
 8016014:	4463      	add	r3, ip
 8016016:	6033      	str	r3, [r6, #0]
 8016018:	6823      	ldr	r3, [r4, #0]
 801601a:	4463      	add	r3, ip
 801601c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016020:	603b      	str	r3, [r7, #0]
 8016022:	7b22      	ldrb	r2, [r4, #12]
 8016024:	429a      	cmp	r2, r3
 8016026:	d0d2      	beq.n	8015fce <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8016028:	4640      	mov	r0, r8
 801602a:	b002      	add	sp, #8
 801602c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016030 <uxr_process_acknack>:
 8016030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016032:	4604      	mov	r4, r0
 8016034:	460e      	mov	r6, r1
 8016036:	4610      	mov	r0, r2
 8016038:	2101      	movs	r1, #1
 801603a:	f000 f985 	bl	8016348 <uxr_seq_num_sub>
 801603e:	8a61      	ldrh	r1, [r4, #18]
 8016040:	f000 f982 	bl	8016348 <uxr_seq_num_sub>
 8016044:	b1c0      	cbz	r0, 8016078 <uxr_process_acknack+0x48>
 8016046:	4605      	mov	r5, r0
 8016048:	2700      	movs	r7, #0
 801604a:	2101      	movs	r1, #1
 801604c:	8a60      	ldrh	r0, [r4, #18]
 801604e:	f000 f977 	bl	8016340 <uxr_seq_num_add>
 8016052:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016056:	fbb0 f1fc 	udiv	r1, r0, ip
 801605a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801605e:	fb0c 0111 	mls	r1, ip, r1, r0
 8016062:	b289      	uxth	r1, r1
 8016064:	3701      	adds	r7, #1
 8016066:	fbb3 f3fc 	udiv	r3, r3, ip
 801606a:	fb01 f303 	mul.w	r3, r1, r3
 801606e:	42bd      	cmp	r5, r7
 8016070:	7b21      	ldrb	r1, [r4, #12]
 8016072:	8260      	strh	r0, [r4, #18]
 8016074:	50d1      	str	r1, [r2, r3]
 8016076:	d1e8      	bne.n	801604a <uxr_process_acknack+0x1a>
 8016078:	3e00      	subs	r6, #0
 801607a:	f04f 0300 	mov.w	r3, #0
 801607e:	bf18      	it	ne
 8016080:	2601      	movne	r6, #1
 8016082:	f884 3020 	strb.w	r3, [r4, #32]
 8016086:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801608a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801608c <uxr_is_output_up_to_date>:
 801608c:	8a01      	ldrh	r1, [r0, #16]
 801608e:	8a40      	ldrh	r0, [r0, #18]
 8016090:	b508      	push	{r3, lr}
 8016092:	f000 f95d 	bl	8016350 <uxr_seq_num_cmp>
 8016096:	fab0 f080 	clz	r0, r0
 801609a:	0940      	lsrs	r0, r0, #5
 801609c:	bd08      	pop	{r3, pc}
 801609e:	bf00      	nop

080160a0 <get_available_free_slots>:
 80160a0:	8902      	ldrh	r2, [r0, #8]
 80160a2:	b1da      	cbz	r2, 80160dc <get_available_free_slots+0x3c>
 80160a4:	b530      	push	{r4, r5, lr}
 80160a6:	2100      	movs	r1, #0
 80160a8:	6843      	ldr	r3, [r0, #4]
 80160aa:	6805      	ldr	r5, [r0, #0]
 80160ac:	7b04      	ldrb	r4, [r0, #12]
 80160ae:	fbb3 fef2 	udiv	lr, r3, r2
 80160b2:	4608      	mov	r0, r1
 80160b4:	460b      	mov	r3, r1
 80160b6:	fbb3 fcf2 	udiv	ip, r3, r2
 80160ba:	fb02 331c 	mls	r3, r2, ip, r3
 80160be:	b29b      	uxth	r3, r3
 80160c0:	fb0e f303 	mul.w	r3, lr, r3
 80160c4:	3101      	adds	r1, #1
 80160c6:	f855 c003 	ldr.w	ip, [r5, r3]
 80160ca:	4564      	cmp	r4, ip
 80160cc:	bf08      	it	eq
 80160ce:	3001      	addeq	r0, #1
 80160d0:	b28b      	uxth	r3, r1
 80160d2:	bf08      	it	eq
 80160d4:	b280      	uxtheq	r0, r0
 80160d6:	4293      	cmp	r3, r2
 80160d8:	d3ed      	bcc.n	80160b6 <get_available_free_slots+0x16>
 80160da:	bd30      	pop	{r4, r5, pc}
 80160dc:	4610      	mov	r0, r2
 80160de:	4770      	bx	lr

080160e0 <uxr_buffer_request_data>:
 80160e0:	b530      	push	{r4, r5, lr}
 80160e2:	b095      	sub	sp, #84	; 0x54
 80160e4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80160e8:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80160ea:	9303      	str	r3, [sp, #12]
 80160ec:	2200      	movs	r2, #0
 80160ee:	2d00      	cmp	r5, #0
 80160f0:	bf14      	ite	ne
 80160f2:	2101      	movne	r1, #1
 80160f4:	4611      	moveq	r1, r2
 80160f6:	4604      	mov	r4, r0
 80160f8:	f88d 301c 	strb.w	r3, [sp, #28]
 80160fc:	f88d 201d 	strb.w	r2, [sp, #29]
 8016100:	f88d 201e 	strb.w	r2, [sp, #30]
 8016104:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8016108:	d021      	beq.n	801614e <uxr_buffer_request_data+0x6e>
 801610a:	682a      	ldr	r2, [r5, #0]
 801610c:	686b      	ldr	r3, [r5, #4]
 801610e:	f8cd 2026 	str.w	r2, [sp, #38]	; 0x26
 8016112:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8016116:	2210      	movs	r2, #16
 8016118:	2308      	movs	r3, #8
 801611a:	2100      	movs	r1, #0
 801611c:	e9cd 3100 	strd	r3, r1, [sp]
 8016120:	4620      	mov	r0, r4
 8016122:	9905      	ldr	r1, [sp, #20]
 8016124:	ab0c      	add	r3, sp, #48	; 0x30
 8016126:	f7f8 fadb 	bl	800e6e0 <uxr_prepare_stream_to_write_submessage>
 801612a:	b918      	cbnz	r0, 8016134 <uxr_buffer_request_data+0x54>
 801612c:	4604      	mov	r4, r0
 801612e:	4620      	mov	r0, r4
 8016130:	b015      	add	sp, #84	; 0x54
 8016132:	bd30      	pop	{r4, r5, pc}
 8016134:	9904      	ldr	r1, [sp, #16]
 8016136:	aa06      	add	r2, sp, #24
 8016138:	4620      	mov	r0, r4
 801613a:	f7f8 fc07 	bl	800e94c <uxr_init_base_object_request>
 801613e:	a906      	add	r1, sp, #24
 8016140:	4604      	mov	r4, r0
 8016142:	a80c      	add	r0, sp, #48	; 0x30
 8016144:	f7fa fba8 	bl	8010898 <uxr_serialize_READ_DATA_Payload>
 8016148:	4620      	mov	r0, r4
 801614a:	b015      	add	sp, #84	; 0x54
 801614c:	bd30      	pop	{r4, r5, pc}
 801614e:	2208      	movs	r2, #8
 8016150:	e7e2      	b.n	8016118 <uxr_buffer_request_data+0x38>
 8016152:	bf00      	nop

08016154 <uxr_buffer_cancel_data>:
 8016154:	b510      	push	{r4, lr}
 8016156:	b094      	sub	sp, #80	; 0x50
 8016158:	2300      	movs	r3, #0
 801615a:	9202      	str	r2, [sp, #8]
 801615c:	9205      	str	r2, [sp, #20]
 801615e:	9301      	str	r3, [sp, #4]
 8016160:	2201      	movs	r2, #1
 8016162:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016166:	f88d 301e 	strb.w	r3, [sp, #30]
 801616a:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 801616e:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8016172:	2308      	movs	r3, #8
 8016174:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8016178:	9300      	str	r3, [sp, #0]
 801617a:	2210      	movs	r2, #16
 801617c:	ab0c      	add	r3, sp, #48	; 0x30
 801617e:	4604      	mov	r4, r0
 8016180:	9103      	str	r1, [sp, #12]
 8016182:	f7f8 faad 	bl	800e6e0 <uxr_prepare_stream_to_write_submessage>
 8016186:	b918      	cbnz	r0, 8016190 <uxr_buffer_cancel_data+0x3c>
 8016188:	4604      	mov	r4, r0
 801618a:	4620      	mov	r0, r4
 801618c:	b014      	add	sp, #80	; 0x50
 801618e:	bd10      	pop	{r4, pc}
 8016190:	9905      	ldr	r1, [sp, #20]
 8016192:	aa06      	add	r2, sp, #24
 8016194:	4620      	mov	r0, r4
 8016196:	f7f8 fbd9 	bl	800e94c <uxr_init_base_object_request>
 801619a:	a906      	add	r1, sp, #24
 801619c:	4604      	mov	r4, r0
 801619e:	a80c      	add	r0, sp, #48	; 0x30
 80161a0:	f7fa fb7a 	bl	8010898 <uxr_serialize_READ_DATA_Payload>
 80161a4:	4620      	mov	r0, r4
 80161a6:	b014      	add	sp, #80	; 0x50
 80161a8:	bd10      	pop	{r4, pc}
 80161aa:	bf00      	nop

080161ac <read_submessage_format>:
 80161ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80161b0:	b095      	sub	sp, #84	; 0x54
 80161b2:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 80161b6:	b113      	cbz	r3, 80161be <read_submessage_format+0x12>
 80161b8:	b015      	add	sp, #84	; 0x54
 80161ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161be:	460c      	mov	r4, r1
 80161c0:	4615      	mov	r5, r2
 80161c2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80161c6:	4607      	mov	r7, r0
 80161c8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80161ca:	9004      	str	r0, [sp, #16]
 80161cc:	981d      	ldr	r0, [sp, #116]	; 0x74
 80161ce:	9005      	str	r0, [sp, #20]
 80161d0:	1a52      	subs	r2, r2, r1
 80161d2:	a80c      	add	r0, sp, #48	; 0x30
 80161d4:	4699      	mov	r9, r3
 80161d6:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 80161da:	f7f6 fec3 	bl	800cf64 <ucdr_init_buffer>
 80161de:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80161e2:	a80c      	add	r0, sp, #48	; 0x30
 80161e4:	f7f6 fe92 	bl	800cf0c <ucdr_set_on_full_buffer_callback>
 80161e8:	69e2      	ldr	r2, [r4, #28]
 80161ea:	b19a      	cbz	r2, 8016214 <read_submessage_format+0x68>
 80161ec:	f1b8 0f07 	cmp.w	r8, #7
 80161f0:	f882 9014 	strb.w	r9, [r2, #20]
 80161f4:	d040      	beq.n	8016278 <read_submessage_format+0xcc>
 80161f6:	f1b8 0f08 	cmp.w	r8, #8
 80161fa:	d02e      	beq.n	801625a <read_submessage_format+0xae>
 80161fc:	f1b8 0f06 	cmp.w	r8, #6
 8016200:	d011      	beq.n	8016226 <read_submessage_format+0x7a>
 8016202:	2301      	movs	r3, #1
 8016204:	7513      	strb	r3, [r2, #20]
 8016206:	4629      	mov	r1, r5
 8016208:	4620      	mov	r0, r4
 801620a:	f7f6 fefb 	bl	800d004 <ucdr_advance_buffer>
 801620e:	b015      	add	sp, #84	; 0x54
 8016210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016214:	f1b8 0f07 	cmp.w	r8, #7
 8016218:	d02e      	beq.n	8016278 <read_submessage_format+0xcc>
 801621a:	f1b8 0f08 	cmp.w	r8, #8
 801621e:	d01c      	beq.n	801625a <read_submessage_format+0xae>
 8016220:	f1b8 0f06 	cmp.w	r8, #6
 8016224:	d1ef      	bne.n	8016206 <read_submessage_format+0x5a>
 8016226:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 801622a:	f1b8 0f00 	cmp.w	r8, #0
 801622e:	d011      	beq.n	8016254 <read_submessage_format+0xa8>
 8016230:	ab0c      	add	r3, sp, #48	; 0x30
 8016232:	e9cd 3500 	strd	r3, r5, [sp]
 8016236:	2306      	movs	r3, #6
 8016238:	f88d 3016 	strb.w	r3, [sp, #22]
 801623c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016240:	9302      	str	r3, [sp, #8]
 8016242:	4632      	mov	r2, r6
 8016244:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016248:	4638      	mov	r0, r7
 801624a:	47c0      	blx	r8
 801624c:	2301      	movs	r3, #1
 801624e:	69e2      	ldr	r2, [r4, #28]
 8016250:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8016254:	2a00      	cmp	r2, #0
 8016256:	d1d4      	bne.n	8016202 <read_submessage_format+0x56>
 8016258:	e7d5      	b.n	8016206 <read_submessage_format+0x5a>
 801625a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801625e:	2b00      	cmp	r3, #0
 8016260:	d0f8      	beq.n	8016254 <read_submessage_format+0xa8>
 8016262:	a906      	add	r1, sp, #24
 8016264:	a80c      	add	r0, sp, #48	; 0x30
 8016266:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801626a:	f7fa fbdb 	bl	8010a24 <uxr_deserialize_SampleIdentity>
 801626e:	b9a0      	cbnz	r0, 801629a <read_submessage_format+0xee>
 8016270:	69e2      	ldr	r2, [r4, #28]
 8016272:	2a00      	cmp	r2, #0
 8016274:	d1c5      	bne.n	8016202 <read_submessage_format+0x56>
 8016276:	e7c6      	b.n	8016206 <read_submessage_format+0x5a>
 8016278:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801627c:	b13b      	cbz	r3, 801628e <read_submessage_format+0xe2>
 801627e:	a906      	add	r1, sp, #24
 8016280:	a80c      	add	r0, sp, #48	; 0x30
 8016282:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8016286:	f7fa f88d 	bl	80103a4 <uxr_deserialize_BaseObjectRequest>
 801628a:	bb60      	cbnz	r0, 80162e6 <read_submessage_format+0x13a>
 801628c:	69e2      	ldr	r2, [r4, #28]
 801628e:	68a3      	ldr	r3, [r4, #8]
 8016290:	442b      	add	r3, r5
 8016292:	60a3      	str	r3, [r4, #8]
 8016294:	2a00      	cmp	r2, #0
 8016296:	d1b4      	bne.n	8016202 <read_submessage_format+0x56>
 8016298:	e7b5      	b.n	8016206 <read_submessage_format+0x5a>
 801629a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801629e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80162a0:	1a52      	subs	r2, r2, r1
 80162a2:	eba8 0803 	sub.w	r8, r8, r3
 80162a6:	a80c      	add	r0, sp, #48	; 0x30
 80162a8:	f7f6 fe5c 	bl	800cf64 <ucdr_init_buffer>
 80162ac:	44a8      	add	r8, r5
 80162ae:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80162b2:	a80c      	add	r0, sp, #48	; 0x30
 80162b4:	f7f6 fe2a 	bl	800cf0c <ucdr_set_on_full_buffer_callback>
 80162b8:	fa1f f888 	uxth.w	r8, r8
 80162bc:	ab0c      	add	r3, sp, #48	; 0x30
 80162be:	9300      	str	r3, [sp, #0]
 80162c0:	f8cd 8004 	str.w	r8, [sp, #4]
 80162c4:	2108      	movs	r1, #8
 80162c6:	f88d 1016 	strb.w	r1, [sp, #22]
 80162ca:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80162ce:	9102      	str	r1, [sp, #8]
 80162d0:	ab06      	add	r3, sp, #24
 80162d2:	4632      	mov	r2, r6
 80162d4:	9905      	ldr	r1, [sp, #20]
 80162d6:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 80162da:	4638      	mov	r0, r7
 80162dc:	47b0      	blx	r6
 80162de:	2301      	movs	r3, #1
 80162e0:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80162e4:	e7c4      	b.n	8016270 <read_submessage_format+0xc4>
 80162e6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80162ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80162ec:	1a52      	subs	r2, r2, r1
 80162ee:	a80c      	add	r0, sp, #48	; 0x30
 80162f0:	eba8 0803 	sub.w	r8, r8, r3
 80162f4:	f7f6 fe36 	bl	800cf64 <ucdr_init_buffer>
 80162f8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80162fc:	a80c      	add	r0, sp, #48	; 0x30
 80162fe:	f7f6 fe05 	bl	800cf0c <ucdr_set_on_full_buffer_callback>
 8016302:	ab0c      	add	r3, sp, #48	; 0x30
 8016304:	9300      	str	r3, [sp, #0]
 8016306:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801630a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801630e:	44a8      	add	r8, r5
 8016310:	fa1f f888 	uxth.w	r8, r8
 8016314:	f8cd 8004 	str.w	r8, [sp, #4]
 8016318:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801631c:	2107      	movs	r1, #7
 801631e:	f88d 1016 	strb.w	r1, [sp, #22]
 8016322:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8016326:	9102      	str	r1, [sp, #8]
 8016328:	4632      	mov	r2, r6
 801632a:	b29b      	uxth	r3, r3
 801632c:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 8016330:	9905      	ldr	r1, [sp, #20]
 8016332:	4638      	mov	r0, r7
 8016334:	47b0      	blx	r6
 8016336:	2301      	movs	r3, #1
 8016338:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 801633c:	e7a6      	b.n	801628c <read_submessage_format+0xe0>
 801633e:	bf00      	nop

08016340 <uxr_seq_num_add>:
 8016340:	4408      	add	r0, r1
 8016342:	b280      	uxth	r0, r0
 8016344:	4770      	bx	lr
 8016346:	bf00      	nop

08016348 <uxr_seq_num_sub>:
 8016348:	1a40      	subs	r0, r0, r1
 801634a:	b280      	uxth	r0, r0
 801634c:	4770      	bx	lr
 801634e:	bf00      	nop

08016350 <uxr_seq_num_cmp>:
 8016350:	4288      	cmp	r0, r1
 8016352:	d011      	beq.n	8016378 <uxr_seq_num_cmp+0x28>
 8016354:	d309      	bcc.n	801636a <uxr_seq_num_cmp+0x1a>
 8016356:	4288      	cmp	r0, r1
 8016358:	d910      	bls.n	801637c <uxr_seq_num_cmp+0x2c>
 801635a:	1a40      	subs	r0, r0, r1
 801635c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8016360:	bfd4      	ite	le
 8016362:	2001      	movle	r0, #1
 8016364:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8016368:	4770      	bx	lr
 801636a:	1a0b      	subs	r3, r1, r0
 801636c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016370:	daf1      	bge.n	8016356 <uxr_seq_num_cmp+0x6>
 8016372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016376:	4770      	bx	lr
 8016378:	2000      	movs	r0, #0
 801637a:	4770      	bx	lr
 801637c:	2001      	movs	r0, #1
 801637e:	4770      	bx	lr

08016380 <rcl_get_default_domain_id>:
 8016380:	b530      	push	{r4, r5, lr}
 8016382:	b083      	sub	sp, #12
 8016384:	2300      	movs	r3, #0
 8016386:	9300      	str	r3, [sp, #0]
 8016388:	b1d0      	cbz	r0, 80163c0 <rcl_get_default_domain_id+0x40>
 801638a:	4604      	mov	r4, r0
 801638c:	4669      	mov	r1, sp
 801638e:	4815      	ldr	r0, [pc, #84]	; (80163e4 <rcl_get_default_domain_id+0x64>)
 8016390:	f7fd f99e 	bl	80136d0 <rcutils_get_env>
 8016394:	4602      	mov	r2, r0
 8016396:	b110      	cbz	r0, 801639e <rcl_get_default_domain_id+0x1e>
 8016398:	2001      	movs	r0, #1
 801639a:	b003      	add	sp, #12
 801639c:	bd30      	pop	{r4, r5, pc}
 801639e:	9b00      	ldr	r3, [sp, #0]
 80163a0:	b18b      	cbz	r3, 80163c6 <rcl_get_default_domain_id+0x46>
 80163a2:	7818      	ldrb	r0, [r3, #0]
 80163a4:	2800      	cmp	r0, #0
 80163a6:	d0f8      	beq.n	801639a <rcl_get_default_domain_id+0x1a>
 80163a8:	a901      	add	r1, sp, #4
 80163aa:	4618      	mov	r0, r3
 80163ac:	9201      	str	r2, [sp, #4]
 80163ae:	f000 fe73 	bl	8017098 <strtoul>
 80163b2:	4605      	mov	r5, r0
 80163b4:	b150      	cbz	r0, 80163cc <rcl_get_default_domain_id+0x4c>
 80163b6:	1c43      	adds	r3, r0, #1
 80163b8:	d00d      	beq.n	80163d6 <rcl_get_default_domain_id+0x56>
 80163ba:	6025      	str	r5, [r4, #0]
 80163bc:	2000      	movs	r0, #0
 80163be:	e7ec      	b.n	801639a <rcl_get_default_domain_id+0x1a>
 80163c0:	200b      	movs	r0, #11
 80163c2:	b003      	add	sp, #12
 80163c4:	bd30      	pop	{r4, r5, pc}
 80163c6:	4618      	mov	r0, r3
 80163c8:	b003      	add	sp, #12
 80163ca:	bd30      	pop	{r4, r5, pc}
 80163cc:	9b01      	ldr	r3, [sp, #4]
 80163ce:	781b      	ldrb	r3, [r3, #0]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d0f2      	beq.n	80163ba <rcl_get_default_domain_id+0x3a>
 80163d4:	e7e0      	b.n	8016398 <rcl_get_default_domain_id+0x18>
 80163d6:	f001 f901 	bl	80175dc <__errno>
 80163da:	6803      	ldr	r3, [r0, #0]
 80163dc:	2b22      	cmp	r3, #34	; 0x22
 80163de:	d1ec      	bne.n	80163ba <rcl_get_default_domain_id+0x3a>
 80163e0:	e7da      	b.n	8016398 <rcl_get_default_domain_id+0x18>
 80163e2:	bf00      	nop
 80163e4:	08019038 	.word	0x08019038

080163e8 <rcl_expand_topic_name>:
 80163e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163ec:	b08b      	sub	sp, #44	; 0x2c
 80163ee:	9306      	str	r3, [sp, #24]
 80163f0:	2800      	cmp	r0, #0
 80163f2:	f000 80ad 	beq.w	8016550 <rcl_expand_topic_name+0x168>
 80163f6:	460e      	mov	r6, r1
 80163f8:	2900      	cmp	r1, #0
 80163fa:	f000 80a9 	beq.w	8016550 <rcl_expand_topic_name+0x168>
 80163fe:	4617      	mov	r7, r2
 8016400:	2a00      	cmp	r2, #0
 8016402:	f000 80a5 	beq.w	8016550 <rcl_expand_topic_name+0x168>
 8016406:	2b00      	cmp	r3, #0
 8016408:	f000 80a2 	beq.w	8016550 <rcl_expand_topic_name+0x168>
 801640c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801640e:	2b00      	cmp	r3, #0
 8016410:	f000 809e 	beq.w	8016550 <rcl_expand_topic_name+0x168>
 8016414:	2200      	movs	r2, #0
 8016416:	a909      	add	r1, sp, #36	; 0x24
 8016418:	4680      	mov	r8, r0
 801641a:	f000 f9fb 	bl	8016814 <rcl_validate_topic_name>
 801641e:	4604      	mov	r4, r0
 8016420:	2800      	cmp	r0, #0
 8016422:	f040 8096 	bne.w	8016552 <rcl_expand_topic_name+0x16a>
 8016426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016428:	2b00      	cmp	r3, #0
 801642a:	f040 809a 	bne.w	8016562 <rcl_expand_topic_name+0x17a>
 801642e:	4602      	mov	r2, r0
 8016430:	a909      	add	r1, sp, #36	; 0x24
 8016432:	4630      	mov	r0, r6
 8016434:	f7fd fdaa 	bl	8013f8c <rmw_validate_node_name>
 8016438:	2800      	cmp	r0, #0
 801643a:	f040 808e 	bne.w	801655a <rcl_expand_topic_name+0x172>
 801643e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016440:	2a00      	cmp	r2, #0
 8016442:	f040 8093 	bne.w	801656c <rcl_expand_topic_name+0x184>
 8016446:	a909      	add	r1, sp, #36	; 0x24
 8016448:	4638      	mov	r0, r7
 801644a:	f7fd fd81 	bl	8013f50 <rmw_validate_namespace>
 801644e:	2800      	cmp	r0, #0
 8016450:	f040 8083 	bne.w	801655a <rcl_expand_topic_name+0x172>
 8016454:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016456:	2c00      	cmp	r4, #0
 8016458:	f040 80ed 	bne.w	8016636 <rcl_expand_topic_name+0x24e>
 801645c:	217b      	movs	r1, #123	; 0x7b
 801645e:	4640      	mov	r0, r8
 8016460:	f000 ffda 	bl	8017418 <strchr>
 8016464:	f898 3000 	ldrb.w	r3, [r8]
 8016468:	2b2f      	cmp	r3, #47	; 0x2f
 801646a:	4605      	mov	r5, r0
 801646c:	f000 809e 	beq.w	80165ac <rcl_expand_topic_name+0x1c4>
 8016470:	2b7e      	cmp	r3, #126	; 0x7e
 8016472:	f040 80a2 	bne.w	80165ba <rcl_expand_topic_name+0x1d2>
 8016476:	4638      	mov	r0, r7
 8016478:	f7e9 febc 	bl	80001f4 <strlen>
 801647c:	4a82      	ldr	r2, [pc, #520]	; (8016688 <rcl_expand_topic_name+0x2a0>)
 801647e:	4b83      	ldr	r3, [pc, #524]	; (801668c <rcl_expand_topic_name+0x2a4>)
 8016480:	2801      	cmp	r0, #1
 8016482:	bf18      	it	ne
 8016484:	4613      	movne	r3, r2
 8016486:	9302      	str	r3, [sp, #8]
 8016488:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801648a:	9300      	str	r3, [sp, #0]
 801648c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016490:	f108 0301 	add.w	r3, r8, #1
 8016494:	9305      	str	r3, [sp, #20]
 8016496:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801649a:	9301      	str	r3, [sp, #4]
 801649c:	ab14      	add	r3, sp, #80	; 0x50
 801649e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80164a0:	f7fd f93e 	bl	8013720 <rcutils_format_string_limit>
 80164a4:	4682      	mov	sl, r0
 80164a6:	2800      	cmp	r0, #0
 80164a8:	f000 80c7 	beq.w	801663a <rcl_expand_topic_name+0x252>
 80164ac:	2d00      	cmp	r5, #0
 80164ae:	f000 80a2 	beq.w	80165f6 <rcl_expand_topic_name+0x20e>
 80164b2:	217b      	movs	r1, #123	; 0x7b
 80164b4:	f000 ffb0 	bl	8017418 <strchr>
 80164b8:	46d1      	mov	r9, sl
 80164ba:	4605      	mov	r5, r0
 80164bc:	9407      	str	r4, [sp, #28]
 80164be:	46d3      	mov	fp, sl
 80164c0:	464c      	mov	r4, r9
 80164c2:	2d00      	cmp	r5, #0
 80164c4:	f000 80be 	beq.w	8016644 <rcl_expand_topic_name+0x25c>
 80164c8:	217d      	movs	r1, #125	; 0x7d
 80164ca:	4620      	mov	r0, r4
 80164cc:	f000 ffa4 	bl	8017418 <strchr>
 80164d0:	eba0 0905 	sub.w	r9, r0, r5
 80164d4:	f109 0a01 	add.w	sl, r9, #1
 80164d8:	486d      	ldr	r0, [pc, #436]	; (8016690 <rcl_expand_topic_name+0x2a8>)
 80164da:	4652      	mov	r2, sl
 80164dc:	4629      	mov	r1, r5
 80164de:	f000 ffa8 	bl	8017432 <strncmp>
 80164e2:	2800      	cmp	r0, #0
 80164e4:	d067      	beq.n	80165b6 <rcl_expand_topic_name+0x1ce>
 80164e6:	486b      	ldr	r0, [pc, #428]	; (8016694 <rcl_expand_topic_name+0x2ac>)
 80164e8:	4652      	mov	r2, sl
 80164ea:	4629      	mov	r1, r5
 80164ec:	f000 ffa1 	bl	8017432 <strncmp>
 80164f0:	b130      	cbz	r0, 8016500 <rcl_expand_topic_name+0x118>
 80164f2:	4869      	ldr	r0, [pc, #420]	; (8016698 <rcl_expand_topic_name+0x2b0>)
 80164f4:	4652      	mov	r2, sl
 80164f6:	4629      	mov	r1, r5
 80164f8:	f000 ff9b 	bl	8017432 <strncmp>
 80164fc:	2800      	cmp	r0, #0
 80164fe:	d137      	bne.n	8016570 <rcl_expand_topic_name+0x188>
 8016500:	46b9      	mov	r9, r7
 8016502:	ab16      	add	r3, sp, #88	; 0x58
 8016504:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016508:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801650c:	ab14      	add	r3, sp, #80	; 0x50
 801650e:	4628      	mov	r0, r5
 8016510:	cb0c      	ldmia	r3, {r2, r3}
 8016512:	4651      	mov	r1, sl
 8016514:	f7fd fa40 	bl	8013998 <rcutils_strndup>
 8016518:	4605      	mov	r5, r0
 801651a:	2800      	cmp	r0, #0
 801651c:	f000 809c 	beq.w	8016658 <rcl_expand_topic_name+0x270>
 8016520:	464a      	mov	r2, r9
 8016522:	4620      	mov	r0, r4
 8016524:	ab14      	add	r3, sp, #80	; 0x50
 8016526:	4629      	mov	r1, r5
 8016528:	f7fd f934 	bl	8013794 <rcutils_repl_str>
 801652c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801652e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016530:	4604      	mov	r4, r0
 8016532:	4628      	mov	r0, r5
 8016534:	4798      	blx	r3
 8016536:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016538:	9918      	ldr	r1, [sp, #96]	; 0x60
 801653a:	4658      	mov	r0, fp
 801653c:	4798      	blx	r3
 801653e:	2c00      	cmp	r4, #0
 8016540:	d07b      	beq.n	801663a <rcl_expand_topic_name+0x252>
 8016542:	217b      	movs	r1, #123	; 0x7b
 8016544:	4620      	mov	r0, r4
 8016546:	f000 ff67 	bl	8017418 <strchr>
 801654a:	46a3      	mov	fp, r4
 801654c:	4605      	mov	r5, r0
 801654e:	e7b8      	b.n	80164c2 <rcl_expand_topic_name+0xda>
 8016550:	240b      	movs	r4, #11
 8016552:	4620      	mov	r0, r4
 8016554:	b00b      	add	sp, #44	; 0x2c
 8016556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801655a:	f7fa fb1b 	bl	8010b94 <rcl_convert_rmw_ret_to_rcl_ret>
 801655e:	4604      	mov	r4, r0
 8016560:	e7f7      	b.n	8016552 <rcl_expand_topic_name+0x16a>
 8016562:	2467      	movs	r4, #103	; 0x67
 8016564:	4620      	mov	r0, r4
 8016566:	b00b      	add	sp, #44	; 0x2c
 8016568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801656c:	24c9      	movs	r4, #201	; 0xc9
 801656e:	e7f0      	b.n	8016552 <rcl_expand_topic_name+0x16a>
 8016570:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8016574:	9806      	ldr	r0, [sp, #24]
 8016576:	1c69      	adds	r1, r5, #1
 8016578:	f7fd fb28 	bl	8013bcc <rcutils_string_map_getn>
 801657c:	4681      	mov	r9, r0
 801657e:	2800      	cmp	r0, #0
 8016580:	d1bf      	bne.n	8016502 <rcl_expand_topic_name+0x11a>
 8016582:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016584:	aa16      	add	r2, sp, #88	; 0x58
 8016586:	6018      	str	r0, [r3, #0]
 8016588:	ca07      	ldmia	r2, {r0, r1, r2}
 801658a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801658e:	ab14      	add	r3, sp, #80	; 0x50
 8016590:	cb0c      	ldmia	r3, {r2, r3}
 8016592:	4651      	mov	r1, sl
 8016594:	4628      	mov	r0, r5
 8016596:	f7fd f9ff 	bl	8013998 <rcutils_strndup>
 801659a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801659c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801659e:	4798      	blx	r3
 80165a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80165a4:	4658      	mov	r0, fp
 80165a6:	2469      	movs	r4, #105	; 0x69
 80165a8:	4798      	blx	r3
 80165aa:	e7d2      	b.n	8016552 <rcl_expand_topic_name+0x16a>
 80165ac:	2800      	cmp	r0, #0
 80165ae:	d05b      	beq.n	8016668 <rcl_expand_topic_name+0x280>
 80165b0:	46c1      	mov	r9, r8
 80165b2:	46a2      	mov	sl, r4
 80165b4:	e782      	b.n	80164bc <rcl_expand_topic_name+0xd4>
 80165b6:	46b1      	mov	r9, r6
 80165b8:	e7a3      	b.n	8016502 <rcl_expand_topic_name+0x11a>
 80165ba:	2800      	cmp	r0, #0
 80165bc:	d1f8      	bne.n	80165b0 <rcl_expand_topic_name+0x1c8>
 80165be:	4638      	mov	r0, r7
 80165c0:	f7e9 fe18 	bl	80001f4 <strlen>
 80165c4:	4a35      	ldr	r2, [pc, #212]	; (801669c <rcl_expand_topic_name+0x2b4>)
 80165c6:	4b36      	ldr	r3, [pc, #216]	; (80166a0 <rcl_expand_topic_name+0x2b8>)
 80165c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80165cc:	2801      	cmp	r0, #1
 80165ce:	bf18      	it	ne
 80165d0:	4613      	movne	r3, r2
 80165d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80165d6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80165da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80165dc:	9703      	str	r7, [sp, #12]
 80165de:	9200      	str	r2, [sp, #0]
 80165e0:	ab14      	add	r3, sp, #80	; 0x50
 80165e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80165e4:	f7fd f89c 	bl	8013720 <rcutils_format_string_limit>
 80165e8:	4682      	mov	sl, r0
 80165ea:	4653      	mov	r3, sl
 80165ec:	b32b      	cbz	r3, 801663a <rcl_expand_topic_name+0x252>
 80165ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80165f0:	f8c3 a000 	str.w	sl, [r3]
 80165f4:	e7ad      	b.n	8016552 <rcl_expand_topic_name+0x16a>
 80165f6:	f89a 3000 	ldrb.w	r3, [sl]
 80165fa:	2b2f      	cmp	r3, #47	; 0x2f
 80165fc:	d0f7      	beq.n	80165ee <rcl_expand_topic_name+0x206>
 80165fe:	4638      	mov	r0, r7
 8016600:	f7e9 fdf8 	bl	80001f4 <strlen>
 8016604:	4a25      	ldr	r2, [pc, #148]	; (801669c <rcl_expand_topic_name+0x2b4>)
 8016606:	4b26      	ldr	r3, [pc, #152]	; (80166a0 <rcl_expand_topic_name+0x2b8>)
 8016608:	f8cd a010 	str.w	sl, [sp, #16]
 801660c:	2801      	cmp	r0, #1
 801660e:	bf18      	it	ne
 8016610:	4613      	movne	r3, r2
 8016612:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8016616:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801661a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801661c:	9703      	str	r7, [sp, #12]
 801661e:	9200      	str	r2, [sp, #0]
 8016620:	ab14      	add	r3, sp, #80	; 0x50
 8016622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016624:	f7fd f87c 	bl	8013720 <rcutils_format_string_limit>
 8016628:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801662a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801662c:	4605      	mov	r5, r0
 801662e:	4650      	mov	r0, sl
 8016630:	4798      	blx	r3
 8016632:	46aa      	mov	sl, r5
 8016634:	e7d9      	b.n	80165ea <rcl_expand_topic_name+0x202>
 8016636:	24ca      	movs	r4, #202	; 0xca
 8016638:	e78b      	b.n	8016552 <rcl_expand_topic_name+0x16a>
 801663a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801663c:	2300      	movs	r3, #0
 801663e:	6013      	str	r3, [r2, #0]
 8016640:	240a      	movs	r4, #10
 8016642:	e786      	b.n	8016552 <rcl_expand_topic_name+0x16a>
 8016644:	465b      	mov	r3, fp
 8016646:	9c07      	ldr	r4, [sp, #28]
 8016648:	46da      	mov	sl, fp
 801664a:	2b00      	cmp	r3, #0
 801664c:	d1d3      	bne.n	80165f6 <rcl_expand_topic_name+0x20e>
 801664e:	f898 3000 	ldrb.w	r3, [r8]
 8016652:	2b2f      	cmp	r3, #47	; 0x2f
 8016654:	d0cb      	beq.n	80165ee <rcl_expand_topic_name+0x206>
 8016656:	e7b2      	b.n	80165be <rcl_expand_topic_name+0x1d6>
 8016658:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 801665c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801665e:	6015      	str	r5, [r2, #0]
 8016660:	4658      	mov	r0, fp
 8016662:	4798      	blx	r3
 8016664:	240a      	movs	r4, #10
 8016666:	e774      	b.n	8016552 <rcl_expand_topic_name+0x16a>
 8016668:	ab17      	add	r3, sp, #92	; 0x5c
 801666a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801666e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016672:	ab14      	add	r3, sp, #80	; 0x50
 8016674:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016676:	4640      	mov	r0, r8
 8016678:	f7fd f96c 	bl	8013954 <rcutils_strdup>
 801667c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801667e:	2800      	cmp	r0, #0
 8016680:	6018      	str	r0, [r3, #0]
 8016682:	bf08      	it	eq
 8016684:	240a      	moveq	r4, #10
 8016686:	e764      	b.n	8016552 <rcl_expand_topic_name+0x16a>
 8016688:	08019048 	.word	0x08019048
 801668c:	080186f8 	.word	0x080186f8
 8016690:	08019050 	.word	0x08019050
 8016694:	08019058 	.word	0x08019058
 8016698:	08019060 	.word	0x08019060
 801669c:	08018a8c 	.word	0x08018a8c
 80166a0:	08018708 	.word	0x08018708

080166a4 <rcl_get_default_topic_name_substitutions>:
 80166a4:	2800      	cmp	r0, #0
 80166a6:	bf0c      	ite	eq
 80166a8:	200b      	moveq	r0, #11
 80166aa:	2000      	movne	r0, #0
 80166ac:	4770      	bx	lr
 80166ae:	bf00      	nop

080166b0 <rcl_get_zero_initialized_guard_condition>:
 80166b0:	4a03      	ldr	r2, [pc, #12]	; (80166c0 <rcl_get_zero_initialized_guard_condition+0x10>)
 80166b2:	4603      	mov	r3, r0
 80166b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80166b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80166bc:	4618      	mov	r0, r3
 80166be:	4770      	bx	lr
 80166c0:	0801906c 	.word	0x0801906c

080166c4 <rcl_guard_condition_init_from_rmw>:
 80166c4:	b082      	sub	sp, #8
 80166c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166ca:	b086      	sub	sp, #24
 80166cc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80166d0:	4604      	mov	r4, r0
 80166d2:	f84c 3f04 	str.w	r3, [ip, #4]!
 80166d6:	460e      	mov	r6, r1
 80166d8:	4617      	mov	r7, r2
 80166da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80166de:	f10d 0e04 	add.w	lr, sp, #4
 80166e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80166e6:	f8dc 3000 	ldr.w	r3, [ip]
 80166ea:	f8ce 3000 	str.w	r3, [lr]
 80166ee:	a801      	add	r0, sp, #4
 80166f0:	f7f4 fde6 	bl	800b2c0 <rcutils_allocator_is_valid>
 80166f4:	b350      	cbz	r0, 801674c <rcl_guard_condition_init_from_rmw+0x88>
 80166f6:	b34c      	cbz	r4, 801674c <rcl_guard_condition_init_from_rmw+0x88>
 80166f8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80166fc:	f1b8 0f00 	cmp.w	r8, #0
 8016700:	d11e      	bne.n	8016740 <rcl_guard_condition_init_from_rmw+0x7c>
 8016702:	b31f      	cbz	r7, 801674c <rcl_guard_condition_init_from_rmw+0x88>
 8016704:	4638      	mov	r0, r7
 8016706:	f7fa fa63 	bl	8010bd0 <rcl_context_is_valid>
 801670a:	b328      	cbz	r0, 8016758 <rcl_guard_condition_init_from_rmw+0x94>
 801670c:	9b01      	ldr	r3, [sp, #4]
 801670e:	9905      	ldr	r1, [sp, #20]
 8016710:	201c      	movs	r0, #28
 8016712:	4798      	blx	r3
 8016714:	4605      	mov	r5, r0
 8016716:	6060      	str	r0, [r4, #4]
 8016718:	b358      	cbz	r0, 8016772 <rcl_guard_condition_init_from_rmw+0xae>
 801671a:	b1fe      	cbz	r6, 801675c <rcl_guard_condition_init_from_rmw+0x98>
 801671c:	6006      	str	r6, [r0, #0]
 801671e:	f880 8004 	strb.w	r8, [r0, #4]
 8016722:	ac01      	add	r4, sp, #4
 8016724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016726:	f105 0c08 	add.w	ip, r5, #8
 801672a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801672e:	6823      	ldr	r3, [r4, #0]
 8016730:	f8cc 3000 	str.w	r3, [ip]
 8016734:	2000      	movs	r0, #0
 8016736:	b006      	add	sp, #24
 8016738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801673c:	b002      	add	sp, #8
 801673e:	4770      	bx	lr
 8016740:	2064      	movs	r0, #100	; 0x64
 8016742:	b006      	add	sp, #24
 8016744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016748:	b002      	add	sp, #8
 801674a:	4770      	bx	lr
 801674c:	200b      	movs	r0, #11
 801674e:	b006      	add	sp, #24
 8016750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016754:	b002      	add	sp, #8
 8016756:	4770      	bx	lr
 8016758:	2065      	movs	r0, #101	; 0x65
 801675a:	e7f2      	b.n	8016742 <rcl_guard_condition_init_from_rmw+0x7e>
 801675c:	6838      	ldr	r0, [r7, #0]
 801675e:	3028      	adds	r0, #40	; 0x28
 8016760:	f000 fa3a 	bl	8016bd8 <rmw_create_guard_condition>
 8016764:	6028      	str	r0, [r5, #0]
 8016766:	6865      	ldr	r5, [r4, #4]
 8016768:	682e      	ldr	r6, [r5, #0]
 801676a:	b126      	cbz	r6, 8016776 <rcl_guard_condition_init_from_rmw+0xb2>
 801676c:	2301      	movs	r3, #1
 801676e:	712b      	strb	r3, [r5, #4]
 8016770:	e7d7      	b.n	8016722 <rcl_guard_condition_init_from_rmw+0x5e>
 8016772:	200a      	movs	r0, #10
 8016774:	e7e5      	b.n	8016742 <rcl_guard_condition_init_from_rmw+0x7e>
 8016776:	4628      	mov	r0, r5
 8016778:	9b02      	ldr	r3, [sp, #8]
 801677a:	9905      	ldr	r1, [sp, #20]
 801677c:	4798      	blx	r3
 801677e:	6066      	str	r6, [r4, #4]
 8016780:	2001      	movs	r0, #1
 8016782:	e7de      	b.n	8016742 <rcl_guard_condition_init_from_rmw+0x7e>

08016784 <rcl_guard_condition_fini>:
 8016784:	b570      	push	{r4, r5, r6, lr}
 8016786:	b082      	sub	sp, #8
 8016788:	b1f0      	cbz	r0, 80167c8 <rcl_guard_condition_fini+0x44>
 801678a:	6843      	ldr	r3, [r0, #4]
 801678c:	4604      	mov	r4, r0
 801678e:	b163      	cbz	r3, 80167aa <rcl_guard_condition_fini+0x26>
 8016790:	6818      	ldr	r0, [r3, #0]
 8016792:	68de      	ldr	r6, [r3, #12]
 8016794:	6999      	ldr	r1, [r3, #24]
 8016796:	b160      	cbz	r0, 80167b2 <rcl_guard_condition_fini+0x2e>
 8016798:	791d      	ldrb	r5, [r3, #4]
 801679a:	b965      	cbnz	r5, 80167b6 <rcl_guard_condition_fini+0x32>
 801679c:	4618      	mov	r0, r3
 801679e:	47b0      	blx	r6
 80167a0:	2300      	movs	r3, #0
 80167a2:	4628      	mov	r0, r5
 80167a4:	6063      	str	r3, [r4, #4]
 80167a6:	b002      	add	sp, #8
 80167a8:	bd70      	pop	{r4, r5, r6, pc}
 80167aa:	461d      	mov	r5, r3
 80167ac:	4628      	mov	r0, r5
 80167ae:	b002      	add	sp, #8
 80167b0:	bd70      	pop	{r4, r5, r6, pc}
 80167b2:	4605      	mov	r5, r0
 80167b4:	e7f2      	b.n	801679c <rcl_guard_condition_fini+0x18>
 80167b6:	9101      	str	r1, [sp, #4]
 80167b8:	f000 fa22 	bl	8016c00 <rmw_destroy_guard_condition>
 80167bc:	1e05      	subs	r5, r0, #0
 80167be:	6863      	ldr	r3, [r4, #4]
 80167c0:	9901      	ldr	r1, [sp, #4]
 80167c2:	bf18      	it	ne
 80167c4:	2501      	movne	r5, #1
 80167c6:	e7e9      	b.n	801679c <rcl_guard_condition_fini+0x18>
 80167c8:	250b      	movs	r5, #11
 80167ca:	4628      	mov	r0, r5
 80167cc:	b002      	add	sp, #8
 80167ce:	bd70      	pop	{r4, r5, r6, pc}

080167d0 <rcl_guard_condition_get_default_options>:
 80167d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167d2:	b087      	sub	sp, #28
 80167d4:	4606      	mov	r6, r0
 80167d6:	4668      	mov	r0, sp
 80167d8:	f7f4 fd64 	bl	800b2a4 <rcutils_get_default_allocator>
 80167dc:	4b09      	ldr	r3, [pc, #36]	; (8016804 <rcl_guard_condition_get_default_options+0x34>)
 80167de:	46ee      	mov	lr, sp
 80167e0:	469c      	mov	ip, r3
 80167e2:	461d      	mov	r5, r3
 80167e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80167e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80167ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80167ee:	4634      	mov	r4, r6
 80167f0:	f8de 7000 	ldr.w	r7, [lr]
 80167f4:	f8cc 7000 	str.w	r7, [ip]
 80167f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80167fa:	4630      	mov	r0, r6
 80167fc:	6027      	str	r7, [r4, #0]
 80167fe:	b007      	add	sp, #28
 8016800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016802:	bf00      	nop
 8016804:	20010ce8 	.word	0x20010ce8

08016808 <rcl_guard_condition_get_rmw_handle>:
 8016808:	b110      	cbz	r0, 8016810 <rcl_guard_condition_get_rmw_handle+0x8>
 801680a:	6840      	ldr	r0, [r0, #4]
 801680c:	b100      	cbz	r0, 8016810 <rcl_guard_condition_get_rmw_handle+0x8>
 801680e:	6800      	ldr	r0, [r0, #0]
 8016810:	4770      	bx	lr
 8016812:	bf00      	nop

08016814 <rcl_validate_topic_name>:
 8016814:	2800      	cmp	r0, #0
 8016816:	d07a      	beq.n	801690e <rcl_validate_topic_name+0xfa>
 8016818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801681c:	460e      	mov	r6, r1
 801681e:	2900      	cmp	r1, #0
 8016820:	d07c      	beq.n	801691c <rcl_validate_topic_name+0x108>
 8016822:	4617      	mov	r7, r2
 8016824:	4605      	mov	r5, r0
 8016826:	f7e9 fce5 	bl	80001f4 <strlen>
 801682a:	b1b0      	cbz	r0, 801685a <rcl_validate_topic_name+0x46>
 801682c:	f895 9000 	ldrb.w	r9, [r5]
 8016830:	f8df c180 	ldr.w	ip, [pc, #384]	; 80169b4 <rcl_validate_topic_name+0x1a0>
 8016834:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8016838:	f013 0304 	ands.w	r3, r3, #4
 801683c:	d169      	bne.n	8016912 <rcl_validate_topic_name+0xfe>
 801683e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8016842:	f815 2008 	ldrb.w	r2, [r5, r8]
 8016846:	2a2f      	cmp	r2, #47	; 0x2f
 8016848:	d10e      	bne.n	8016868 <rcl_validate_topic_name+0x54>
 801684a:	2202      	movs	r2, #2
 801684c:	6032      	str	r2, [r6, #0]
 801684e:	b36f      	cbz	r7, 80168ac <rcl_validate_topic_name+0x98>
 8016850:	f8c7 8000 	str.w	r8, [r7]
 8016854:	4618      	mov	r0, r3
 8016856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801685a:	2301      	movs	r3, #1
 801685c:	6033      	str	r3, [r6, #0]
 801685e:	b32f      	cbz	r7, 80168ac <rcl_validate_topic_name+0x98>
 8016860:	2000      	movs	r0, #0
 8016862:	6038      	str	r0, [r7, #0]
 8016864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016868:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 801686c:	461c      	mov	r4, r3
 801686e:	4619      	mov	r1, r3
 8016870:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016874:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8016878:	f1be 0f09 	cmp.w	lr, #9
 801687c:	d919      	bls.n	80168b2 <rcl_validate_topic_name+0x9e>
 801687e:	f022 0e20 	bic.w	lr, r2, #32
 8016882:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8016886:	f1be 0f19 	cmp.w	lr, #25
 801688a:	d912      	bls.n	80168b2 <rcl_validate_topic_name+0x9e>
 801688c:	2a5f      	cmp	r2, #95	; 0x5f
 801688e:	d019      	beq.n	80168c4 <rcl_validate_topic_name+0xb0>
 8016890:	2a2f      	cmp	r2, #47	; 0x2f
 8016892:	d051      	beq.n	8016938 <rcl_validate_topic_name+0x124>
 8016894:	2a7e      	cmp	r2, #126	; 0x7e
 8016896:	d048      	beq.n	801692a <rcl_validate_topic_name+0x116>
 8016898:	2a7b      	cmp	r2, #123	; 0x7b
 801689a:	d054      	beq.n	8016946 <rcl_validate_topic_name+0x132>
 801689c:	2a7d      	cmp	r2, #125	; 0x7d
 801689e:	d161      	bne.n	8016964 <rcl_validate_topic_name+0x150>
 80168a0:	2c00      	cmp	r4, #0
 80168a2:	d155      	bne.n	8016950 <rcl_validate_topic_name+0x13c>
 80168a4:	2305      	movs	r3, #5
 80168a6:	6033      	str	r3, [r6, #0]
 80168a8:	b107      	cbz	r7, 80168ac <rcl_validate_topic_name+0x98>
 80168aa:	6039      	str	r1, [r7, #0]
 80168ac:	2000      	movs	r0, #0
 80168ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168b2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80168b6:	0752      	lsls	r2, r2, #29
 80168b8:	d504      	bpl.n	80168c4 <rcl_validate_topic_name+0xb0>
 80168ba:	b11c      	cbz	r4, 80168c4 <rcl_validate_topic_name+0xb0>
 80168bc:	b111      	cbz	r1, 80168c4 <rcl_validate_topic_name+0xb0>
 80168be:	1e4a      	subs	r2, r1, #1
 80168c0:	429a      	cmp	r2, r3
 80168c2:	d02d      	beq.n	8016920 <rcl_validate_topic_name+0x10c>
 80168c4:	3101      	adds	r1, #1
 80168c6:	4288      	cmp	r0, r1
 80168c8:	d1d2      	bne.n	8016870 <rcl_validate_topic_name+0x5c>
 80168ca:	2c00      	cmp	r4, #0
 80168cc:	d145      	bne.n	801695a <rcl_validate_topic_name+0x146>
 80168ce:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 80168d2:	d04f      	beq.n	8016974 <rcl_validate_topic_name+0x160>
 80168d4:	4620      	mov	r0, r4
 80168d6:	2301      	movs	r3, #1
 80168d8:	e006      	b.n	80168e8 <rcl_validate_topic_name+0xd4>
 80168da:	428b      	cmp	r3, r1
 80168dc:	f105 0501 	add.w	r5, r5, #1
 80168e0:	f103 0201 	add.w	r2, r3, #1
 80168e4:	d236      	bcs.n	8016954 <rcl_validate_topic_name+0x140>
 80168e6:	4613      	mov	r3, r2
 80168e8:	4580      	cmp	r8, r0
 80168ea:	f100 0001 	add.w	r0, r0, #1
 80168ee:	d0f4      	beq.n	80168da <rcl_validate_topic_name+0xc6>
 80168f0:	782a      	ldrb	r2, [r5, #0]
 80168f2:	2a2f      	cmp	r2, #47	; 0x2f
 80168f4:	d1f1      	bne.n	80168da <rcl_validate_topic_name+0xc6>
 80168f6:	786a      	ldrb	r2, [r5, #1]
 80168f8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80168fc:	0754      	lsls	r4, r2, #29
 80168fe:	d5ec      	bpl.n	80168da <rcl_validate_topic_name+0xc6>
 8016900:	2204      	movs	r2, #4
 8016902:	6032      	str	r2, [r6, #0]
 8016904:	2f00      	cmp	r7, #0
 8016906:	d0d1      	beq.n	80168ac <rcl_validate_topic_name+0x98>
 8016908:	603b      	str	r3, [r7, #0]
 801690a:	2000      	movs	r0, #0
 801690c:	e7aa      	b.n	8016864 <rcl_validate_topic_name+0x50>
 801690e:	200b      	movs	r0, #11
 8016910:	4770      	bx	lr
 8016912:	2304      	movs	r3, #4
 8016914:	6033      	str	r3, [r6, #0]
 8016916:	2f00      	cmp	r7, #0
 8016918:	d1a2      	bne.n	8016860 <rcl_validate_topic_name+0x4c>
 801691a:	e7c7      	b.n	80168ac <rcl_validate_topic_name+0x98>
 801691c:	200b      	movs	r0, #11
 801691e:	e7a1      	b.n	8016864 <rcl_validate_topic_name+0x50>
 8016920:	2309      	movs	r3, #9
 8016922:	6033      	str	r3, [r6, #0]
 8016924:	2f00      	cmp	r7, #0
 8016926:	d1c0      	bne.n	80168aa <rcl_validate_topic_name+0x96>
 8016928:	e7c0      	b.n	80168ac <rcl_validate_topic_name+0x98>
 801692a:	2900      	cmp	r1, #0
 801692c:	d0ca      	beq.n	80168c4 <rcl_validate_topic_name+0xb0>
 801692e:	2306      	movs	r3, #6
 8016930:	6033      	str	r3, [r6, #0]
 8016932:	2f00      	cmp	r7, #0
 8016934:	d1b9      	bne.n	80168aa <rcl_validate_topic_name+0x96>
 8016936:	e7b9      	b.n	80168ac <rcl_validate_topic_name+0x98>
 8016938:	2c00      	cmp	r4, #0
 801693a:	d0c3      	beq.n	80168c4 <rcl_validate_topic_name+0xb0>
 801693c:	2308      	movs	r3, #8
 801693e:	6033      	str	r3, [r6, #0]
 8016940:	2f00      	cmp	r7, #0
 8016942:	d1b2      	bne.n	80168aa <rcl_validate_topic_name+0x96>
 8016944:	e7b2      	b.n	80168ac <rcl_validate_topic_name+0x98>
 8016946:	2c00      	cmp	r4, #0
 8016948:	d1f8      	bne.n	801693c <rcl_validate_topic_name+0x128>
 801694a:	460b      	mov	r3, r1
 801694c:	2401      	movs	r4, #1
 801694e:	e7b9      	b.n	80168c4 <rcl_validate_topic_name+0xb0>
 8016950:	2400      	movs	r4, #0
 8016952:	e7b7      	b.n	80168c4 <rcl_validate_topic_name+0xb0>
 8016954:	2000      	movs	r0, #0
 8016956:	6030      	str	r0, [r6, #0]
 8016958:	e784      	b.n	8016864 <rcl_validate_topic_name+0x50>
 801695a:	2205      	movs	r2, #5
 801695c:	6032      	str	r2, [r6, #0]
 801695e:	2f00      	cmp	r7, #0
 8016960:	d1d2      	bne.n	8016908 <rcl_validate_topic_name+0xf4>
 8016962:	e7a3      	b.n	80168ac <rcl_validate_topic_name+0x98>
 8016964:	2c00      	cmp	r4, #0
 8016966:	bf14      	ite	ne
 8016968:	2308      	movne	r3, #8
 801696a:	2303      	moveq	r3, #3
 801696c:	6033      	str	r3, [r6, #0]
 801696e:	2f00      	cmp	r7, #0
 8016970:	d19b      	bne.n	80168aa <rcl_validate_topic_name+0x96>
 8016972:	e79b      	b.n	80168ac <rcl_validate_topic_name+0x98>
 8016974:	2301      	movs	r3, #1
 8016976:	e00a      	b.n	801698e <rcl_validate_topic_name+0x17a>
 8016978:	2c01      	cmp	r4, #1
 801697a:	d013      	beq.n	80169a4 <rcl_validate_topic_name+0x190>
 801697c:	4299      	cmp	r1, r3
 801697e:	f104 0401 	add.w	r4, r4, #1
 8016982:	f105 0501 	add.w	r5, r5, #1
 8016986:	f103 0201 	add.w	r2, r3, #1
 801698a:	d9e3      	bls.n	8016954 <rcl_validate_topic_name+0x140>
 801698c:	4613      	mov	r3, r2
 801698e:	45a0      	cmp	r8, r4
 8016990:	d0f4      	beq.n	801697c <rcl_validate_topic_name+0x168>
 8016992:	782a      	ldrb	r2, [r5, #0]
 8016994:	2a2f      	cmp	r2, #47	; 0x2f
 8016996:	d1ef      	bne.n	8016978 <rcl_validate_topic_name+0x164>
 8016998:	786a      	ldrb	r2, [r5, #1]
 801699a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801699e:	0752      	lsls	r2, r2, #29
 80169a0:	d5ec      	bpl.n	801697c <rcl_validate_topic_name+0x168>
 80169a2:	e7ad      	b.n	8016900 <rcl_validate_topic_name+0xec>
 80169a4:	2307      	movs	r3, #7
 80169a6:	6033      	str	r3, [r6, #0]
 80169a8:	2f00      	cmp	r7, #0
 80169aa:	f43f af7f 	beq.w	80168ac <rcl_validate_topic_name+0x98>
 80169ae:	603c      	str	r4, [r7, #0]
 80169b0:	2000      	movs	r0, #0
 80169b2:	e757      	b.n	8016864 <rcl_validate_topic_name+0x50>
 80169b4:	080190e4 	.word	0x080190e4

080169b8 <rcutils_string_array_fini>:
 80169b8:	b320      	cbz	r0, 8016a04 <rcutils_string_array_fini+0x4c>
 80169ba:	b570      	push	{r4, r5, r6, lr}
 80169bc:	4604      	mov	r4, r0
 80169be:	6840      	ldr	r0, [r0, #4]
 80169c0:	b1d8      	cbz	r0, 80169fa <rcutils_string_array_fini+0x42>
 80169c2:	f104 0008 	add.w	r0, r4, #8
 80169c6:	f7f4 fc7b 	bl	800b2c0 <rcutils_allocator_is_valid>
 80169ca:	b1b8      	cbz	r0, 80169fc <rcutils_string_array_fini+0x44>
 80169cc:	6823      	ldr	r3, [r4, #0]
 80169ce:	b1bb      	cbz	r3, 8016a00 <rcutils_string_array_fini+0x48>
 80169d0:	2500      	movs	r5, #0
 80169d2:	6860      	ldr	r0, [r4, #4]
 80169d4:	462e      	mov	r6, r5
 80169d6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80169da:	68e3      	ldr	r3, [r4, #12]
 80169dc:	69a1      	ldr	r1, [r4, #24]
 80169de:	4798      	blx	r3
 80169e0:	e9d4 3000 	ldrd	r3, r0, [r4]
 80169e4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80169e8:	3501      	adds	r5, #1
 80169ea:	429d      	cmp	r5, r3
 80169ec:	d3f3      	bcc.n	80169d6 <rcutils_string_array_fini+0x1e>
 80169ee:	68e3      	ldr	r3, [r4, #12]
 80169f0:	69a1      	ldr	r1, [r4, #24]
 80169f2:	4798      	blx	r3
 80169f4:	2000      	movs	r0, #0
 80169f6:	e9c4 0000 	strd	r0, r0, [r4]
 80169fa:	bd70      	pop	{r4, r5, r6, pc}
 80169fc:	200b      	movs	r0, #11
 80169fe:	bd70      	pop	{r4, r5, r6, pc}
 8016a00:	6860      	ldr	r0, [r4, #4]
 8016a02:	e7f4      	b.n	80169ee <rcutils_string_array_fini+0x36>
 8016a04:	200b      	movs	r0, #11
 8016a06:	4770      	bx	lr

08016a08 <on_status>:
 8016a08:	b082      	sub	sp, #8
 8016a0a:	b002      	add	sp, #8
 8016a0c:	4770      	bx	lr
 8016a0e:	bf00      	nop

08016a10 <on_topic>:
 8016a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a14:	4a22      	ldr	r2, [pc, #136]	; (8016aa0 <on_topic+0x90>)
 8016a16:	b094      	sub	sp, #80	; 0x50
 8016a18:	6812      	ldr	r2, [r2, #0]
 8016a1a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8016a1c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8016a20:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 8016a24:	b3c2      	cbz	r2, 8016a98 <on_topic+0x88>
 8016a26:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8016a2a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8016a2e:	e001      	b.n	8016a34 <on_topic+0x24>
 8016a30:	6852      	ldr	r2, [r2, #4]
 8016a32:	b38a      	cbz	r2, 8016a98 <on_topic+0x88>
 8016a34:	6894      	ldr	r4, [r2, #8]
 8016a36:	8aa3      	ldrh	r3, [r4, #20]
 8016a38:	428b      	cmp	r3, r1
 8016a3a:	d1f9      	bne.n	8016a30 <on_topic+0x20>
 8016a3c:	7da3      	ldrb	r3, [r4, #22]
 8016a3e:	4283      	cmp	r3, r0
 8016a40:	d1f6      	bne.n	8016a30 <on_topic+0x20>
 8016a42:	2248      	movs	r2, #72	; 0x48
 8016a44:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8016a48:	4668      	mov	r0, sp
 8016a4a:	f000 fdfc 	bl	8017646 <memcpy>
 8016a4e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8016a52:	cb0c      	ldmia	r3, {r2, r3}
 8016a54:	4620      	mov	r0, r4
 8016a56:	f7f5 f8c5 	bl	800bbe4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016a5a:	4607      	mov	r7, r0
 8016a5c:	b1e0      	cbz	r0, 8016a98 <on_topic+0x88>
 8016a5e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016a62:	4632      	mov	r2, r6
 8016a64:	4628      	mov	r0, r5
 8016a66:	f108 0110 	add.w	r1, r8, #16
 8016a6a:	f7fe fd1d 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 8016a6e:	b930      	cbnz	r0, 8016a7e <on_topic+0x6e>
 8016a70:	480c      	ldr	r0, [pc, #48]	; (8016aa4 <on_topic+0x94>)
 8016a72:	4639      	mov	r1, r7
 8016a74:	b014      	add	sp, #80	; 0x50
 8016a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a7a:	f7fd baf5 	b.w	8014068 <put_memory>
 8016a7e:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8016a82:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 8016a86:	f7fe fc05 	bl	8015294 <rmw_uros_epoch_nanos>
 8016a8a:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8016a8e:	2305      	movs	r3, #5
 8016a90:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016a94:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8016a98:	b014      	add	sp, #80	; 0x50
 8016a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a9e:	bf00      	nop
 8016aa0:	20010b44 	.word	0x20010b44
 8016aa4:	20010b34 	.word	0x20010b34

08016aa8 <on_request>:
 8016aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016aac:	4823      	ldr	r0, [pc, #140]	; (8016b3c <on_request+0x94>)
 8016aae:	b094      	sub	sp, #80	; 0x50
 8016ab0:	6800      	ldr	r0, [r0, #0]
 8016ab2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8016ab4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8016ab8:	9113      	str	r1, [sp, #76]	; 0x4c
 8016aba:	2800      	cmp	r0, #0
 8016abc:	d03b      	beq.n	8016b36 <on_request+0x8e>
 8016abe:	461d      	mov	r5, r3
 8016ac0:	e001      	b.n	8016ac6 <on_request+0x1e>
 8016ac2:	6840      	ldr	r0, [r0, #4]
 8016ac4:	b3b8      	cbz	r0, 8016b36 <on_request+0x8e>
 8016ac6:	6884      	ldr	r4, [r0, #8]
 8016ac8:	8b21      	ldrh	r1, [r4, #24]
 8016aca:	4291      	cmp	r1, r2
 8016acc:	d1f9      	bne.n	8016ac2 <on_request+0x1a>
 8016ace:	2248      	movs	r2, #72	; 0x48
 8016ad0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8016ad4:	4668      	mov	r0, sp
 8016ad6:	f000 fdb6 	bl	8017646 <memcpy>
 8016ada:	f104 0320 	add.w	r3, r4, #32
 8016ade:	cb0c      	ldmia	r3, {r2, r3}
 8016ae0:	4620      	mov	r0, r4
 8016ae2:	f7f5 f87f 	bl	800bbe4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016ae6:	4680      	mov	r8, r0
 8016ae8:	b328      	cbz	r0, 8016b36 <on_request+0x8e>
 8016aea:	4638      	mov	r0, r7
 8016aec:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016af0:	4632      	mov	r2, r6
 8016af2:	f107 0110 	add.w	r1, r7, #16
 8016af6:	f7fe fcd7 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 8016afa:	b930      	cbnz	r0, 8016b0a <on_request+0x62>
 8016afc:	4810      	ldr	r0, [pc, #64]	; (8016b40 <on_request+0x98>)
 8016afe:	4641      	mov	r1, r8
 8016b00:	b014      	add	sp, #80	; 0x50
 8016b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b06:	f7fd baaf 	b.w	8014068 <put_memory>
 8016b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016b0c:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 8016b10:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8016b14:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8016b18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016b20:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016b24:	f7fe fbb6 	bl	8015294 <rmw_uros_epoch_nanos>
 8016b28:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8016b2c:	2303      	movs	r3, #3
 8016b2e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016b32:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8016b36:	b014      	add	sp, #80	; 0x50
 8016b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b3c:	20010b14 	.word	0x20010b14
 8016b40:	20010b34 	.word	0x20010b34

08016b44 <on_reply>:
 8016b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b48:	4821      	ldr	r0, [pc, #132]	; (8016bd0 <on_reply+0x8c>)
 8016b4a:	b094      	sub	sp, #80	; 0x50
 8016b4c:	6800      	ldr	r0, [r0, #0]
 8016b4e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8016b50:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8016b54:	9113      	str	r1, [sp, #76]	; 0x4c
 8016b56:	b3b8      	cbz	r0, 8016bc8 <on_reply+0x84>
 8016b58:	461d      	mov	r5, r3
 8016b5a:	e001      	b.n	8016b60 <on_reply+0x1c>
 8016b5c:	6840      	ldr	r0, [r0, #4]
 8016b5e:	b398      	cbz	r0, 8016bc8 <on_reply+0x84>
 8016b60:	6884      	ldr	r4, [r0, #8]
 8016b62:	8b21      	ldrh	r1, [r4, #24]
 8016b64:	4291      	cmp	r1, r2
 8016b66:	d1f9      	bne.n	8016b5c <on_reply+0x18>
 8016b68:	2248      	movs	r2, #72	; 0x48
 8016b6a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8016b6e:	4668      	mov	r0, sp
 8016b70:	f000 fd69 	bl	8017646 <memcpy>
 8016b74:	f104 0320 	add.w	r3, r4, #32
 8016b78:	cb0c      	ldmia	r3, {r2, r3}
 8016b7a:	4620      	mov	r0, r4
 8016b7c:	f7f5 f832 	bl	800bbe4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016b80:	4680      	mov	r8, r0
 8016b82:	b308      	cbz	r0, 8016bc8 <on_reply+0x84>
 8016b84:	4638      	mov	r0, r7
 8016b86:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016b8a:	4632      	mov	r2, r6
 8016b8c:	f107 0110 	add.w	r1, r7, #16
 8016b90:	f7fe fc8a 	bl	80154a8 <ucdr_deserialize_array_uint8_t>
 8016b94:	b930      	cbnz	r0, 8016ba4 <on_reply+0x60>
 8016b96:	480f      	ldr	r0, [pc, #60]	; (8016bd4 <on_reply+0x90>)
 8016b98:	4641      	mov	r1, r8
 8016b9a:	b014      	add	sp, #80	; 0x50
 8016b9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ba0:	f7fd ba62 	b.w	8014068 <put_memory>
 8016ba4:	2200      	movs	r2, #0
 8016ba6:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 8016baa:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8016bae:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8016bb2:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 8016bb6:	f7fe fb6d 	bl	8015294 <rmw_uros_epoch_nanos>
 8016bba:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8016bbe:	2304      	movs	r3, #4
 8016bc0:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016bc4:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8016bc8:	b014      	add	sp, #80	; 0x50
 8016bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bce:	bf00      	nop
 8016bd0:	2000c228 	.word	0x2000c228
 8016bd4:	20010b34 	.word	0x20010b34

08016bd8 <rmw_create_guard_condition>:
 8016bd8:	b538      	push	{r3, r4, r5, lr}
 8016bda:	4605      	mov	r5, r0
 8016bdc:	4807      	ldr	r0, [pc, #28]	; (8016bfc <rmw_create_guard_condition+0x24>)
 8016bde:	f7fd fa33 	bl	8014048 <get_memory>
 8016be2:	b148      	cbz	r0, 8016bf8 <rmw_create_guard_condition+0x20>
 8016be4:	6884      	ldr	r4, [r0, #8]
 8016be6:	2300      	movs	r3, #0
 8016be8:	7423      	strb	r3, [r4, #16]
 8016bea:	61e5      	str	r5, [r4, #28]
 8016bec:	f7fd fa94 	bl	8014118 <rmw_get_implementation_identifier>
 8016bf0:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016bf4:	f104 0014 	add.w	r0, r4, #20
 8016bf8:	bd38      	pop	{r3, r4, r5, pc}
 8016bfa:	bf00      	nop
 8016bfc:	20010ad4 	.word	0x20010ad4

08016c00 <rmw_destroy_guard_condition>:
 8016c00:	b508      	push	{r3, lr}
 8016c02:	4b08      	ldr	r3, [pc, #32]	; (8016c24 <rmw_destroy_guard_condition+0x24>)
 8016c04:	6819      	ldr	r1, [r3, #0]
 8016c06:	b911      	cbnz	r1, 8016c0e <rmw_destroy_guard_condition+0xe>
 8016c08:	e00a      	b.n	8016c20 <rmw_destroy_guard_condition+0x20>
 8016c0a:	6849      	ldr	r1, [r1, #4]
 8016c0c:	b141      	cbz	r1, 8016c20 <rmw_destroy_guard_condition+0x20>
 8016c0e:	688b      	ldr	r3, [r1, #8]
 8016c10:	3314      	adds	r3, #20
 8016c12:	4298      	cmp	r0, r3
 8016c14:	d1f9      	bne.n	8016c0a <rmw_destroy_guard_condition+0xa>
 8016c16:	4803      	ldr	r0, [pc, #12]	; (8016c24 <rmw_destroy_guard_condition+0x24>)
 8016c18:	f7fd fa26 	bl	8014068 <put_memory>
 8016c1c:	2000      	movs	r0, #0
 8016c1e:	bd08      	pop	{r3, pc}
 8016c20:	2001      	movs	r0, #1
 8016c22:	bd08      	pop	{r3, pc}
 8016c24:	20010ad4 	.word	0x20010ad4

08016c28 <calloc>:
 8016c28:	4b02      	ldr	r3, [pc, #8]	; (8016c34 <calloc+0xc>)
 8016c2a:	460a      	mov	r2, r1
 8016c2c:	4601      	mov	r1, r0
 8016c2e:	6818      	ldr	r0, [r3, #0]
 8016c30:	f000 b802 	b.w	8016c38 <_calloc_r>
 8016c34:	20000110 	.word	0x20000110

08016c38 <_calloc_r>:
 8016c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016c3a:	fba1 2402 	umull	r2, r4, r1, r2
 8016c3e:	b94c      	cbnz	r4, 8016c54 <_calloc_r+0x1c>
 8016c40:	4611      	mov	r1, r2
 8016c42:	9201      	str	r2, [sp, #4]
 8016c44:	f000 f886 	bl	8016d54 <_malloc_r>
 8016c48:	9a01      	ldr	r2, [sp, #4]
 8016c4a:	4605      	mov	r5, r0
 8016c4c:	b930      	cbnz	r0, 8016c5c <_calloc_r+0x24>
 8016c4e:	4628      	mov	r0, r5
 8016c50:	b003      	add	sp, #12
 8016c52:	bd30      	pop	{r4, r5, pc}
 8016c54:	220c      	movs	r2, #12
 8016c56:	6002      	str	r2, [r0, #0]
 8016c58:	2500      	movs	r5, #0
 8016c5a:	e7f8      	b.n	8016c4e <_calloc_r+0x16>
 8016c5c:	4621      	mov	r1, r4
 8016c5e:	f000 fbd3 	bl	8017408 <memset>
 8016c62:	e7f4      	b.n	8016c4e <_calloc_r+0x16>

08016c64 <getenv>:
 8016c64:	b507      	push	{r0, r1, r2, lr}
 8016c66:	4b04      	ldr	r3, [pc, #16]	; (8016c78 <getenv+0x14>)
 8016c68:	4601      	mov	r1, r0
 8016c6a:	aa01      	add	r2, sp, #4
 8016c6c:	6818      	ldr	r0, [r3, #0]
 8016c6e:	f000 f805 	bl	8016c7c <_findenv_r>
 8016c72:	b003      	add	sp, #12
 8016c74:	f85d fb04 	ldr.w	pc, [sp], #4
 8016c78:	20000110 	.word	0x20000110

08016c7c <_findenv_r>:
 8016c7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c80:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8016cf0 <_findenv_r+0x74>
 8016c84:	4607      	mov	r7, r0
 8016c86:	4689      	mov	r9, r1
 8016c88:	4616      	mov	r6, r2
 8016c8a:	f000 fd09 	bl	80176a0 <__env_lock>
 8016c8e:	f8da 4000 	ldr.w	r4, [sl]
 8016c92:	b134      	cbz	r4, 8016ca2 <_findenv_r+0x26>
 8016c94:	464b      	mov	r3, r9
 8016c96:	4698      	mov	r8, r3
 8016c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016c9c:	b13a      	cbz	r2, 8016cae <_findenv_r+0x32>
 8016c9e:	2a3d      	cmp	r2, #61	; 0x3d
 8016ca0:	d1f9      	bne.n	8016c96 <_findenv_r+0x1a>
 8016ca2:	4638      	mov	r0, r7
 8016ca4:	f000 fd02 	bl	80176ac <__env_unlock>
 8016ca8:	2000      	movs	r0, #0
 8016caa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cae:	eba8 0809 	sub.w	r8, r8, r9
 8016cb2:	46a3      	mov	fp, r4
 8016cb4:	f854 0b04 	ldr.w	r0, [r4], #4
 8016cb8:	2800      	cmp	r0, #0
 8016cba:	d0f2      	beq.n	8016ca2 <_findenv_r+0x26>
 8016cbc:	4642      	mov	r2, r8
 8016cbe:	4649      	mov	r1, r9
 8016cc0:	f000 fbb7 	bl	8017432 <strncmp>
 8016cc4:	2800      	cmp	r0, #0
 8016cc6:	d1f4      	bne.n	8016cb2 <_findenv_r+0x36>
 8016cc8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016ccc:	eb03 0508 	add.w	r5, r3, r8
 8016cd0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016cd4:	2b3d      	cmp	r3, #61	; 0x3d
 8016cd6:	d1ec      	bne.n	8016cb2 <_findenv_r+0x36>
 8016cd8:	f8da 3000 	ldr.w	r3, [sl]
 8016cdc:	ebab 0303 	sub.w	r3, fp, r3
 8016ce0:	109b      	asrs	r3, r3, #2
 8016ce2:	4638      	mov	r0, r7
 8016ce4:	6033      	str	r3, [r6, #0]
 8016ce6:	f000 fce1 	bl	80176ac <__env_unlock>
 8016cea:	1c68      	adds	r0, r5, #1
 8016cec:	e7dd      	b.n	8016caa <_findenv_r+0x2e>
 8016cee:	bf00      	nop
 8016cf0:	20000004 	.word	0x20000004

08016cf4 <malloc>:
 8016cf4:	4b02      	ldr	r3, [pc, #8]	; (8016d00 <malloc+0xc>)
 8016cf6:	4601      	mov	r1, r0
 8016cf8:	6818      	ldr	r0, [r3, #0]
 8016cfa:	f000 b82b 	b.w	8016d54 <_malloc_r>
 8016cfe:	bf00      	nop
 8016d00:	20000110 	.word	0x20000110

08016d04 <free>:
 8016d04:	4b02      	ldr	r3, [pc, #8]	; (8016d10 <free+0xc>)
 8016d06:	4601      	mov	r1, r0
 8016d08:	6818      	ldr	r0, [r3, #0]
 8016d0a:	f000 bcd5 	b.w	80176b8 <_free_r>
 8016d0e:	bf00      	nop
 8016d10:	20000110 	.word	0x20000110

08016d14 <sbrk_aligned>:
 8016d14:	b570      	push	{r4, r5, r6, lr}
 8016d16:	4e0e      	ldr	r6, [pc, #56]	; (8016d50 <sbrk_aligned+0x3c>)
 8016d18:	460c      	mov	r4, r1
 8016d1a:	6831      	ldr	r1, [r6, #0]
 8016d1c:	4605      	mov	r5, r0
 8016d1e:	b911      	cbnz	r1, 8016d26 <sbrk_aligned+0x12>
 8016d20:	f000 fc3a 	bl	8017598 <_sbrk_r>
 8016d24:	6030      	str	r0, [r6, #0]
 8016d26:	4621      	mov	r1, r4
 8016d28:	4628      	mov	r0, r5
 8016d2a:	f000 fc35 	bl	8017598 <_sbrk_r>
 8016d2e:	1c43      	adds	r3, r0, #1
 8016d30:	d00a      	beq.n	8016d48 <sbrk_aligned+0x34>
 8016d32:	1cc4      	adds	r4, r0, #3
 8016d34:	f024 0403 	bic.w	r4, r4, #3
 8016d38:	42a0      	cmp	r0, r4
 8016d3a:	d007      	beq.n	8016d4c <sbrk_aligned+0x38>
 8016d3c:	1a21      	subs	r1, r4, r0
 8016d3e:	4628      	mov	r0, r5
 8016d40:	f000 fc2a 	bl	8017598 <_sbrk_r>
 8016d44:	3001      	adds	r0, #1
 8016d46:	d101      	bne.n	8016d4c <sbrk_aligned+0x38>
 8016d48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016d4c:	4620      	mov	r0, r4
 8016d4e:	bd70      	pop	{r4, r5, r6, pc}
 8016d50:	20010d00 	.word	0x20010d00

08016d54 <_malloc_r>:
 8016d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d58:	1ccd      	adds	r5, r1, #3
 8016d5a:	f025 0503 	bic.w	r5, r5, #3
 8016d5e:	3508      	adds	r5, #8
 8016d60:	2d0c      	cmp	r5, #12
 8016d62:	bf38      	it	cc
 8016d64:	250c      	movcc	r5, #12
 8016d66:	2d00      	cmp	r5, #0
 8016d68:	4607      	mov	r7, r0
 8016d6a:	db01      	blt.n	8016d70 <_malloc_r+0x1c>
 8016d6c:	42a9      	cmp	r1, r5
 8016d6e:	d905      	bls.n	8016d7c <_malloc_r+0x28>
 8016d70:	230c      	movs	r3, #12
 8016d72:	603b      	str	r3, [r7, #0]
 8016d74:	2600      	movs	r6, #0
 8016d76:	4630      	mov	r0, r6
 8016d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8016e50 <_malloc_r+0xfc>
 8016d80:	f000 f868 	bl	8016e54 <__malloc_lock>
 8016d84:	f8d8 3000 	ldr.w	r3, [r8]
 8016d88:	461c      	mov	r4, r3
 8016d8a:	bb5c      	cbnz	r4, 8016de4 <_malloc_r+0x90>
 8016d8c:	4629      	mov	r1, r5
 8016d8e:	4638      	mov	r0, r7
 8016d90:	f7ff ffc0 	bl	8016d14 <sbrk_aligned>
 8016d94:	1c43      	adds	r3, r0, #1
 8016d96:	4604      	mov	r4, r0
 8016d98:	d155      	bne.n	8016e46 <_malloc_r+0xf2>
 8016d9a:	f8d8 4000 	ldr.w	r4, [r8]
 8016d9e:	4626      	mov	r6, r4
 8016da0:	2e00      	cmp	r6, #0
 8016da2:	d145      	bne.n	8016e30 <_malloc_r+0xdc>
 8016da4:	2c00      	cmp	r4, #0
 8016da6:	d048      	beq.n	8016e3a <_malloc_r+0xe6>
 8016da8:	6823      	ldr	r3, [r4, #0]
 8016daa:	4631      	mov	r1, r6
 8016dac:	4638      	mov	r0, r7
 8016dae:	eb04 0903 	add.w	r9, r4, r3
 8016db2:	f000 fbf1 	bl	8017598 <_sbrk_r>
 8016db6:	4581      	cmp	r9, r0
 8016db8:	d13f      	bne.n	8016e3a <_malloc_r+0xe6>
 8016dba:	6821      	ldr	r1, [r4, #0]
 8016dbc:	1a6d      	subs	r5, r5, r1
 8016dbe:	4629      	mov	r1, r5
 8016dc0:	4638      	mov	r0, r7
 8016dc2:	f7ff ffa7 	bl	8016d14 <sbrk_aligned>
 8016dc6:	3001      	adds	r0, #1
 8016dc8:	d037      	beq.n	8016e3a <_malloc_r+0xe6>
 8016dca:	6823      	ldr	r3, [r4, #0]
 8016dcc:	442b      	add	r3, r5
 8016dce:	6023      	str	r3, [r4, #0]
 8016dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d038      	beq.n	8016e4a <_malloc_r+0xf6>
 8016dd8:	685a      	ldr	r2, [r3, #4]
 8016dda:	42a2      	cmp	r2, r4
 8016ddc:	d12b      	bne.n	8016e36 <_malloc_r+0xe2>
 8016dde:	2200      	movs	r2, #0
 8016de0:	605a      	str	r2, [r3, #4]
 8016de2:	e00f      	b.n	8016e04 <_malloc_r+0xb0>
 8016de4:	6822      	ldr	r2, [r4, #0]
 8016de6:	1b52      	subs	r2, r2, r5
 8016de8:	d41f      	bmi.n	8016e2a <_malloc_r+0xd6>
 8016dea:	2a0b      	cmp	r2, #11
 8016dec:	d917      	bls.n	8016e1e <_malloc_r+0xca>
 8016dee:	1961      	adds	r1, r4, r5
 8016df0:	42a3      	cmp	r3, r4
 8016df2:	6025      	str	r5, [r4, #0]
 8016df4:	bf18      	it	ne
 8016df6:	6059      	strne	r1, [r3, #4]
 8016df8:	6863      	ldr	r3, [r4, #4]
 8016dfa:	bf08      	it	eq
 8016dfc:	f8c8 1000 	streq.w	r1, [r8]
 8016e00:	5162      	str	r2, [r4, r5]
 8016e02:	604b      	str	r3, [r1, #4]
 8016e04:	4638      	mov	r0, r7
 8016e06:	f104 060b 	add.w	r6, r4, #11
 8016e0a:	f000 f829 	bl	8016e60 <__malloc_unlock>
 8016e0e:	f026 0607 	bic.w	r6, r6, #7
 8016e12:	1d23      	adds	r3, r4, #4
 8016e14:	1af2      	subs	r2, r6, r3
 8016e16:	d0ae      	beq.n	8016d76 <_malloc_r+0x22>
 8016e18:	1b9b      	subs	r3, r3, r6
 8016e1a:	50a3      	str	r3, [r4, r2]
 8016e1c:	e7ab      	b.n	8016d76 <_malloc_r+0x22>
 8016e1e:	42a3      	cmp	r3, r4
 8016e20:	6862      	ldr	r2, [r4, #4]
 8016e22:	d1dd      	bne.n	8016de0 <_malloc_r+0x8c>
 8016e24:	f8c8 2000 	str.w	r2, [r8]
 8016e28:	e7ec      	b.n	8016e04 <_malloc_r+0xb0>
 8016e2a:	4623      	mov	r3, r4
 8016e2c:	6864      	ldr	r4, [r4, #4]
 8016e2e:	e7ac      	b.n	8016d8a <_malloc_r+0x36>
 8016e30:	4634      	mov	r4, r6
 8016e32:	6876      	ldr	r6, [r6, #4]
 8016e34:	e7b4      	b.n	8016da0 <_malloc_r+0x4c>
 8016e36:	4613      	mov	r3, r2
 8016e38:	e7cc      	b.n	8016dd4 <_malloc_r+0x80>
 8016e3a:	230c      	movs	r3, #12
 8016e3c:	603b      	str	r3, [r7, #0]
 8016e3e:	4638      	mov	r0, r7
 8016e40:	f000 f80e 	bl	8016e60 <__malloc_unlock>
 8016e44:	e797      	b.n	8016d76 <_malloc_r+0x22>
 8016e46:	6025      	str	r5, [r4, #0]
 8016e48:	e7dc      	b.n	8016e04 <_malloc_r+0xb0>
 8016e4a:	605b      	str	r3, [r3, #4]
 8016e4c:	deff      	udf	#255	; 0xff
 8016e4e:	bf00      	nop
 8016e50:	20010cfc 	.word	0x20010cfc

08016e54 <__malloc_lock>:
 8016e54:	4801      	ldr	r0, [pc, #4]	; (8016e5c <__malloc_lock+0x8>)
 8016e56:	f000 bbec 	b.w	8017632 <__retarget_lock_acquire_recursive>
 8016e5a:	bf00      	nop
 8016e5c:	20010e45 	.word	0x20010e45

08016e60 <__malloc_unlock>:
 8016e60:	4801      	ldr	r0, [pc, #4]	; (8016e68 <__malloc_unlock+0x8>)
 8016e62:	f000 bbe7 	b.w	8017634 <__retarget_lock_release_recursive>
 8016e66:	bf00      	nop
 8016e68:	20010e45 	.word	0x20010e45

08016e6c <srand>:
 8016e6c:	b538      	push	{r3, r4, r5, lr}
 8016e6e:	4b10      	ldr	r3, [pc, #64]	; (8016eb0 <srand+0x44>)
 8016e70:	681d      	ldr	r5, [r3, #0]
 8016e72:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016e74:	4604      	mov	r4, r0
 8016e76:	b9b3      	cbnz	r3, 8016ea6 <srand+0x3a>
 8016e78:	2018      	movs	r0, #24
 8016e7a:	f7ff ff3b 	bl	8016cf4 <malloc>
 8016e7e:	4602      	mov	r2, r0
 8016e80:	6328      	str	r0, [r5, #48]	; 0x30
 8016e82:	b920      	cbnz	r0, 8016e8e <srand+0x22>
 8016e84:	4b0b      	ldr	r3, [pc, #44]	; (8016eb4 <srand+0x48>)
 8016e86:	480c      	ldr	r0, [pc, #48]	; (8016eb8 <srand+0x4c>)
 8016e88:	2146      	movs	r1, #70	; 0x46
 8016e8a:	f000 fbeb 	bl	8017664 <__assert_func>
 8016e8e:	490b      	ldr	r1, [pc, #44]	; (8016ebc <srand+0x50>)
 8016e90:	4b0b      	ldr	r3, [pc, #44]	; (8016ec0 <srand+0x54>)
 8016e92:	e9c0 1300 	strd	r1, r3, [r0]
 8016e96:	4b0b      	ldr	r3, [pc, #44]	; (8016ec4 <srand+0x58>)
 8016e98:	6083      	str	r3, [r0, #8]
 8016e9a:	230b      	movs	r3, #11
 8016e9c:	8183      	strh	r3, [r0, #12]
 8016e9e:	2100      	movs	r1, #0
 8016ea0:	2001      	movs	r0, #1
 8016ea2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016ea6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016ea8:	2200      	movs	r2, #0
 8016eaa:	611c      	str	r4, [r3, #16]
 8016eac:	615a      	str	r2, [r3, #20]
 8016eae:	bd38      	pop	{r3, r4, r5, pc}
 8016eb0:	20000110 	.word	0x20000110
 8016eb4:	08019074 	.word	0x08019074
 8016eb8:	0801908b 	.word	0x0801908b
 8016ebc:	abcd330e 	.word	0xabcd330e
 8016ec0:	e66d1234 	.word	0xe66d1234
 8016ec4:	0005deec 	.word	0x0005deec

08016ec8 <rand>:
 8016ec8:	4b16      	ldr	r3, [pc, #88]	; (8016f24 <rand+0x5c>)
 8016eca:	b510      	push	{r4, lr}
 8016ecc:	681c      	ldr	r4, [r3, #0]
 8016ece:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016ed0:	b9b3      	cbnz	r3, 8016f00 <rand+0x38>
 8016ed2:	2018      	movs	r0, #24
 8016ed4:	f7ff ff0e 	bl	8016cf4 <malloc>
 8016ed8:	4602      	mov	r2, r0
 8016eda:	6320      	str	r0, [r4, #48]	; 0x30
 8016edc:	b920      	cbnz	r0, 8016ee8 <rand+0x20>
 8016ede:	4b12      	ldr	r3, [pc, #72]	; (8016f28 <rand+0x60>)
 8016ee0:	4812      	ldr	r0, [pc, #72]	; (8016f2c <rand+0x64>)
 8016ee2:	2152      	movs	r1, #82	; 0x52
 8016ee4:	f000 fbbe 	bl	8017664 <__assert_func>
 8016ee8:	4911      	ldr	r1, [pc, #68]	; (8016f30 <rand+0x68>)
 8016eea:	4b12      	ldr	r3, [pc, #72]	; (8016f34 <rand+0x6c>)
 8016eec:	e9c0 1300 	strd	r1, r3, [r0]
 8016ef0:	4b11      	ldr	r3, [pc, #68]	; (8016f38 <rand+0x70>)
 8016ef2:	6083      	str	r3, [r0, #8]
 8016ef4:	230b      	movs	r3, #11
 8016ef6:	8183      	strh	r3, [r0, #12]
 8016ef8:	2100      	movs	r1, #0
 8016efa:	2001      	movs	r0, #1
 8016efc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016f00:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016f02:	480e      	ldr	r0, [pc, #56]	; (8016f3c <rand+0x74>)
 8016f04:	690b      	ldr	r3, [r1, #16]
 8016f06:	694c      	ldr	r4, [r1, #20]
 8016f08:	4a0d      	ldr	r2, [pc, #52]	; (8016f40 <rand+0x78>)
 8016f0a:	4358      	muls	r0, r3
 8016f0c:	fb02 0004 	mla	r0, r2, r4, r0
 8016f10:	fba3 3202 	umull	r3, r2, r3, r2
 8016f14:	3301      	adds	r3, #1
 8016f16:	eb40 0002 	adc.w	r0, r0, r2
 8016f1a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016f1e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016f22:	bd10      	pop	{r4, pc}
 8016f24:	20000110 	.word	0x20000110
 8016f28:	08019074 	.word	0x08019074
 8016f2c:	0801908b 	.word	0x0801908b
 8016f30:	abcd330e 	.word	0xabcd330e
 8016f34:	e66d1234 	.word	0xe66d1234
 8016f38:	0005deec 	.word	0x0005deec
 8016f3c:	5851f42d 	.word	0x5851f42d
 8016f40:	4c957f2d 	.word	0x4c957f2d

08016f44 <realloc>:
 8016f44:	4b02      	ldr	r3, [pc, #8]	; (8016f50 <realloc+0xc>)
 8016f46:	460a      	mov	r2, r1
 8016f48:	4601      	mov	r1, r0
 8016f4a:	6818      	ldr	r0, [r3, #0]
 8016f4c:	f000 b802 	b.w	8016f54 <_realloc_r>
 8016f50:	20000110 	.word	0x20000110

08016f54 <_realloc_r>:
 8016f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f58:	4680      	mov	r8, r0
 8016f5a:	4614      	mov	r4, r2
 8016f5c:	460e      	mov	r6, r1
 8016f5e:	b921      	cbnz	r1, 8016f6a <_realloc_r+0x16>
 8016f60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f64:	4611      	mov	r1, r2
 8016f66:	f7ff bef5 	b.w	8016d54 <_malloc_r>
 8016f6a:	b92a      	cbnz	r2, 8016f78 <_realloc_r+0x24>
 8016f6c:	f000 fba4 	bl	80176b8 <_free_r>
 8016f70:	4625      	mov	r5, r4
 8016f72:	4628      	mov	r0, r5
 8016f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f78:	f000 fbea 	bl	8017750 <_malloc_usable_size_r>
 8016f7c:	4284      	cmp	r4, r0
 8016f7e:	4607      	mov	r7, r0
 8016f80:	d802      	bhi.n	8016f88 <_realloc_r+0x34>
 8016f82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016f86:	d812      	bhi.n	8016fae <_realloc_r+0x5a>
 8016f88:	4621      	mov	r1, r4
 8016f8a:	4640      	mov	r0, r8
 8016f8c:	f7ff fee2 	bl	8016d54 <_malloc_r>
 8016f90:	4605      	mov	r5, r0
 8016f92:	2800      	cmp	r0, #0
 8016f94:	d0ed      	beq.n	8016f72 <_realloc_r+0x1e>
 8016f96:	42bc      	cmp	r4, r7
 8016f98:	4622      	mov	r2, r4
 8016f9a:	4631      	mov	r1, r6
 8016f9c:	bf28      	it	cs
 8016f9e:	463a      	movcs	r2, r7
 8016fa0:	f000 fb51 	bl	8017646 <memcpy>
 8016fa4:	4631      	mov	r1, r6
 8016fa6:	4640      	mov	r0, r8
 8016fa8:	f000 fb86 	bl	80176b8 <_free_r>
 8016fac:	e7e1      	b.n	8016f72 <_realloc_r+0x1e>
 8016fae:	4635      	mov	r5, r6
 8016fb0:	e7df      	b.n	8016f72 <_realloc_r+0x1e>
	...

08016fb4 <_strtoul_l.constprop.0>:
 8016fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016fb8:	4f36      	ldr	r7, [pc, #216]	; (8017094 <_strtoul_l.constprop.0+0xe0>)
 8016fba:	4686      	mov	lr, r0
 8016fbc:	460d      	mov	r5, r1
 8016fbe:	4628      	mov	r0, r5
 8016fc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016fc4:	5d3e      	ldrb	r6, [r7, r4]
 8016fc6:	f016 0608 	ands.w	r6, r6, #8
 8016fca:	d1f8      	bne.n	8016fbe <_strtoul_l.constprop.0+0xa>
 8016fcc:	2c2d      	cmp	r4, #45	; 0x2d
 8016fce:	d130      	bne.n	8017032 <_strtoul_l.constprop.0+0x7e>
 8016fd0:	782c      	ldrb	r4, [r5, #0]
 8016fd2:	2601      	movs	r6, #1
 8016fd4:	1c85      	adds	r5, r0, #2
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d057      	beq.n	801708a <_strtoul_l.constprop.0+0xd6>
 8016fda:	2b10      	cmp	r3, #16
 8016fdc:	d109      	bne.n	8016ff2 <_strtoul_l.constprop.0+0x3e>
 8016fde:	2c30      	cmp	r4, #48	; 0x30
 8016fe0:	d107      	bne.n	8016ff2 <_strtoul_l.constprop.0+0x3e>
 8016fe2:	7828      	ldrb	r0, [r5, #0]
 8016fe4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8016fe8:	2858      	cmp	r0, #88	; 0x58
 8016fea:	d149      	bne.n	8017080 <_strtoul_l.constprop.0+0xcc>
 8016fec:	786c      	ldrb	r4, [r5, #1]
 8016fee:	2310      	movs	r3, #16
 8016ff0:	3502      	adds	r5, #2
 8016ff2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8016ff6:	2700      	movs	r7, #0
 8016ff8:	fbb8 f8f3 	udiv	r8, r8, r3
 8016ffc:	fb03 f908 	mul.w	r9, r3, r8
 8017000:	ea6f 0909 	mvn.w	r9, r9
 8017004:	4638      	mov	r0, r7
 8017006:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801700a:	f1bc 0f09 	cmp.w	ip, #9
 801700e:	d815      	bhi.n	801703c <_strtoul_l.constprop.0+0x88>
 8017010:	4664      	mov	r4, ip
 8017012:	42a3      	cmp	r3, r4
 8017014:	dd23      	ble.n	801705e <_strtoul_l.constprop.0+0xaa>
 8017016:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801701a:	d007      	beq.n	801702c <_strtoul_l.constprop.0+0x78>
 801701c:	4580      	cmp	r8, r0
 801701e:	d31b      	bcc.n	8017058 <_strtoul_l.constprop.0+0xa4>
 8017020:	d101      	bne.n	8017026 <_strtoul_l.constprop.0+0x72>
 8017022:	45a1      	cmp	r9, r4
 8017024:	db18      	blt.n	8017058 <_strtoul_l.constprop.0+0xa4>
 8017026:	fb00 4003 	mla	r0, r0, r3, r4
 801702a:	2701      	movs	r7, #1
 801702c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017030:	e7e9      	b.n	8017006 <_strtoul_l.constprop.0+0x52>
 8017032:	2c2b      	cmp	r4, #43	; 0x2b
 8017034:	bf04      	itt	eq
 8017036:	782c      	ldrbeq	r4, [r5, #0]
 8017038:	1c85      	addeq	r5, r0, #2
 801703a:	e7cc      	b.n	8016fd6 <_strtoul_l.constprop.0+0x22>
 801703c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017040:	f1bc 0f19 	cmp.w	ip, #25
 8017044:	d801      	bhi.n	801704a <_strtoul_l.constprop.0+0x96>
 8017046:	3c37      	subs	r4, #55	; 0x37
 8017048:	e7e3      	b.n	8017012 <_strtoul_l.constprop.0+0x5e>
 801704a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801704e:	f1bc 0f19 	cmp.w	ip, #25
 8017052:	d804      	bhi.n	801705e <_strtoul_l.constprop.0+0xaa>
 8017054:	3c57      	subs	r4, #87	; 0x57
 8017056:	e7dc      	b.n	8017012 <_strtoul_l.constprop.0+0x5e>
 8017058:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801705c:	e7e6      	b.n	801702c <_strtoul_l.constprop.0+0x78>
 801705e:	1c7b      	adds	r3, r7, #1
 8017060:	d106      	bne.n	8017070 <_strtoul_l.constprop.0+0xbc>
 8017062:	2322      	movs	r3, #34	; 0x22
 8017064:	f8ce 3000 	str.w	r3, [lr]
 8017068:	4638      	mov	r0, r7
 801706a:	b932      	cbnz	r2, 801707a <_strtoul_l.constprop.0+0xc6>
 801706c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017070:	b106      	cbz	r6, 8017074 <_strtoul_l.constprop.0+0xc0>
 8017072:	4240      	negs	r0, r0
 8017074:	2a00      	cmp	r2, #0
 8017076:	d0f9      	beq.n	801706c <_strtoul_l.constprop.0+0xb8>
 8017078:	b107      	cbz	r7, 801707c <_strtoul_l.constprop.0+0xc8>
 801707a:	1e69      	subs	r1, r5, #1
 801707c:	6011      	str	r1, [r2, #0]
 801707e:	e7f5      	b.n	801706c <_strtoul_l.constprop.0+0xb8>
 8017080:	2430      	movs	r4, #48	; 0x30
 8017082:	2b00      	cmp	r3, #0
 8017084:	d1b5      	bne.n	8016ff2 <_strtoul_l.constprop.0+0x3e>
 8017086:	2308      	movs	r3, #8
 8017088:	e7b3      	b.n	8016ff2 <_strtoul_l.constprop.0+0x3e>
 801708a:	2c30      	cmp	r4, #48	; 0x30
 801708c:	d0a9      	beq.n	8016fe2 <_strtoul_l.constprop.0+0x2e>
 801708e:	230a      	movs	r3, #10
 8017090:	e7af      	b.n	8016ff2 <_strtoul_l.constprop.0+0x3e>
 8017092:	bf00      	nop
 8017094:	080190e4 	.word	0x080190e4

08017098 <strtoul>:
 8017098:	4613      	mov	r3, r2
 801709a:	460a      	mov	r2, r1
 801709c:	4601      	mov	r1, r0
 801709e:	4802      	ldr	r0, [pc, #8]	; (80170a8 <strtoul+0x10>)
 80170a0:	6800      	ldr	r0, [r0, #0]
 80170a2:	f7ff bf87 	b.w	8016fb4 <_strtoul_l.constprop.0>
 80170a6:	bf00      	nop
 80170a8:	20000110 	.word	0x20000110

080170ac <std>:
 80170ac:	2300      	movs	r3, #0
 80170ae:	b510      	push	{r4, lr}
 80170b0:	4604      	mov	r4, r0
 80170b2:	e9c0 3300 	strd	r3, r3, [r0]
 80170b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80170ba:	6083      	str	r3, [r0, #8]
 80170bc:	8181      	strh	r1, [r0, #12]
 80170be:	6643      	str	r3, [r0, #100]	; 0x64
 80170c0:	81c2      	strh	r2, [r0, #14]
 80170c2:	6183      	str	r3, [r0, #24]
 80170c4:	4619      	mov	r1, r3
 80170c6:	2208      	movs	r2, #8
 80170c8:	305c      	adds	r0, #92	; 0x5c
 80170ca:	f000 f99d 	bl	8017408 <memset>
 80170ce:	4b0d      	ldr	r3, [pc, #52]	; (8017104 <std+0x58>)
 80170d0:	6263      	str	r3, [r4, #36]	; 0x24
 80170d2:	4b0d      	ldr	r3, [pc, #52]	; (8017108 <std+0x5c>)
 80170d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80170d6:	4b0d      	ldr	r3, [pc, #52]	; (801710c <std+0x60>)
 80170d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80170da:	4b0d      	ldr	r3, [pc, #52]	; (8017110 <std+0x64>)
 80170dc:	6323      	str	r3, [r4, #48]	; 0x30
 80170de:	4b0d      	ldr	r3, [pc, #52]	; (8017114 <std+0x68>)
 80170e0:	6224      	str	r4, [r4, #32]
 80170e2:	429c      	cmp	r4, r3
 80170e4:	d006      	beq.n	80170f4 <std+0x48>
 80170e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80170ea:	4294      	cmp	r4, r2
 80170ec:	d002      	beq.n	80170f4 <std+0x48>
 80170ee:	33d0      	adds	r3, #208	; 0xd0
 80170f0:	429c      	cmp	r4, r3
 80170f2:	d105      	bne.n	8017100 <std+0x54>
 80170f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80170f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170fc:	f000 ba98 	b.w	8017630 <__retarget_lock_init_recursive>
 8017100:	bd10      	pop	{r4, pc}
 8017102:	bf00      	nop
 8017104:	080172bd 	.word	0x080172bd
 8017108:	080172df 	.word	0x080172df
 801710c:	08017317 	.word	0x08017317
 8017110:	0801733b 	.word	0x0801733b
 8017114:	20010d04 	.word	0x20010d04

08017118 <stdio_exit_handler>:
 8017118:	4a02      	ldr	r2, [pc, #8]	; (8017124 <stdio_exit_handler+0xc>)
 801711a:	4903      	ldr	r1, [pc, #12]	; (8017128 <stdio_exit_handler+0x10>)
 801711c:	4803      	ldr	r0, [pc, #12]	; (801712c <stdio_exit_handler+0x14>)
 801711e:	f000 b869 	b.w	80171f4 <_fwalk_sglue>
 8017122:	bf00      	nop
 8017124:	200000b8 	.word	0x200000b8
 8017128:	080180c5 	.word	0x080180c5
 801712c:	200000c4 	.word	0x200000c4

08017130 <cleanup_stdio>:
 8017130:	6841      	ldr	r1, [r0, #4]
 8017132:	4b0c      	ldr	r3, [pc, #48]	; (8017164 <cleanup_stdio+0x34>)
 8017134:	4299      	cmp	r1, r3
 8017136:	b510      	push	{r4, lr}
 8017138:	4604      	mov	r4, r0
 801713a:	d001      	beq.n	8017140 <cleanup_stdio+0x10>
 801713c:	f000 ffc2 	bl	80180c4 <_fflush_r>
 8017140:	68a1      	ldr	r1, [r4, #8]
 8017142:	4b09      	ldr	r3, [pc, #36]	; (8017168 <cleanup_stdio+0x38>)
 8017144:	4299      	cmp	r1, r3
 8017146:	d002      	beq.n	801714e <cleanup_stdio+0x1e>
 8017148:	4620      	mov	r0, r4
 801714a:	f000 ffbb 	bl	80180c4 <_fflush_r>
 801714e:	68e1      	ldr	r1, [r4, #12]
 8017150:	4b06      	ldr	r3, [pc, #24]	; (801716c <cleanup_stdio+0x3c>)
 8017152:	4299      	cmp	r1, r3
 8017154:	d004      	beq.n	8017160 <cleanup_stdio+0x30>
 8017156:	4620      	mov	r0, r4
 8017158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801715c:	f000 bfb2 	b.w	80180c4 <_fflush_r>
 8017160:	bd10      	pop	{r4, pc}
 8017162:	bf00      	nop
 8017164:	20010d04 	.word	0x20010d04
 8017168:	20010d6c 	.word	0x20010d6c
 801716c:	20010dd4 	.word	0x20010dd4

08017170 <global_stdio_init.part.0>:
 8017170:	b510      	push	{r4, lr}
 8017172:	4b0b      	ldr	r3, [pc, #44]	; (80171a0 <global_stdio_init.part.0+0x30>)
 8017174:	4c0b      	ldr	r4, [pc, #44]	; (80171a4 <global_stdio_init.part.0+0x34>)
 8017176:	4a0c      	ldr	r2, [pc, #48]	; (80171a8 <global_stdio_init.part.0+0x38>)
 8017178:	601a      	str	r2, [r3, #0]
 801717a:	4620      	mov	r0, r4
 801717c:	2200      	movs	r2, #0
 801717e:	2104      	movs	r1, #4
 8017180:	f7ff ff94 	bl	80170ac <std>
 8017184:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017188:	2201      	movs	r2, #1
 801718a:	2109      	movs	r1, #9
 801718c:	f7ff ff8e 	bl	80170ac <std>
 8017190:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017194:	2202      	movs	r2, #2
 8017196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801719a:	2112      	movs	r1, #18
 801719c:	f7ff bf86 	b.w	80170ac <std>
 80171a0:	20010e3c 	.word	0x20010e3c
 80171a4:	20010d04 	.word	0x20010d04
 80171a8:	08017119 	.word	0x08017119

080171ac <__sfp_lock_acquire>:
 80171ac:	4801      	ldr	r0, [pc, #4]	; (80171b4 <__sfp_lock_acquire+0x8>)
 80171ae:	f000 ba40 	b.w	8017632 <__retarget_lock_acquire_recursive>
 80171b2:	bf00      	nop
 80171b4:	20010e46 	.word	0x20010e46

080171b8 <__sfp_lock_release>:
 80171b8:	4801      	ldr	r0, [pc, #4]	; (80171c0 <__sfp_lock_release+0x8>)
 80171ba:	f000 ba3b 	b.w	8017634 <__retarget_lock_release_recursive>
 80171be:	bf00      	nop
 80171c0:	20010e46 	.word	0x20010e46

080171c4 <__sinit>:
 80171c4:	b510      	push	{r4, lr}
 80171c6:	4604      	mov	r4, r0
 80171c8:	f7ff fff0 	bl	80171ac <__sfp_lock_acquire>
 80171cc:	6a23      	ldr	r3, [r4, #32]
 80171ce:	b11b      	cbz	r3, 80171d8 <__sinit+0x14>
 80171d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171d4:	f7ff bff0 	b.w	80171b8 <__sfp_lock_release>
 80171d8:	4b04      	ldr	r3, [pc, #16]	; (80171ec <__sinit+0x28>)
 80171da:	6223      	str	r3, [r4, #32]
 80171dc:	4b04      	ldr	r3, [pc, #16]	; (80171f0 <__sinit+0x2c>)
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d1f5      	bne.n	80171d0 <__sinit+0xc>
 80171e4:	f7ff ffc4 	bl	8017170 <global_stdio_init.part.0>
 80171e8:	e7f2      	b.n	80171d0 <__sinit+0xc>
 80171ea:	bf00      	nop
 80171ec:	08017131 	.word	0x08017131
 80171f0:	20010e3c 	.word	0x20010e3c

080171f4 <_fwalk_sglue>:
 80171f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171f8:	4607      	mov	r7, r0
 80171fa:	4688      	mov	r8, r1
 80171fc:	4614      	mov	r4, r2
 80171fe:	2600      	movs	r6, #0
 8017200:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017204:	f1b9 0901 	subs.w	r9, r9, #1
 8017208:	d505      	bpl.n	8017216 <_fwalk_sglue+0x22>
 801720a:	6824      	ldr	r4, [r4, #0]
 801720c:	2c00      	cmp	r4, #0
 801720e:	d1f7      	bne.n	8017200 <_fwalk_sglue+0xc>
 8017210:	4630      	mov	r0, r6
 8017212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017216:	89ab      	ldrh	r3, [r5, #12]
 8017218:	2b01      	cmp	r3, #1
 801721a:	d907      	bls.n	801722c <_fwalk_sglue+0x38>
 801721c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017220:	3301      	adds	r3, #1
 8017222:	d003      	beq.n	801722c <_fwalk_sglue+0x38>
 8017224:	4629      	mov	r1, r5
 8017226:	4638      	mov	r0, r7
 8017228:	47c0      	blx	r8
 801722a:	4306      	orrs	r6, r0
 801722c:	3568      	adds	r5, #104	; 0x68
 801722e:	e7e9      	b.n	8017204 <_fwalk_sglue+0x10>

08017230 <iprintf>:
 8017230:	b40f      	push	{r0, r1, r2, r3}
 8017232:	b507      	push	{r0, r1, r2, lr}
 8017234:	4906      	ldr	r1, [pc, #24]	; (8017250 <iprintf+0x20>)
 8017236:	ab04      	add	r3, sp, #16
 8017238:	6808      	ldr	r0, [r1, #0]
 801723a:	f853 2b04 	ldr.w	r2, [r3], #4
 801723e:	6881      	ldr	r1, [r0, #8]
 8017240:	9301      	str	r3, [sp, #4]
 8017242:	f000 fc0f 	bl	8017a64 <_vfiprintf_r>
 8017246:	b003      	add	sp, #12
 8017248:	f85d eb04 	ldr.w	lr, [sp], #4
 801724c:	b004      	add	sp, #16
 801724e:	4770      	bx	lr
 8017250:	20000110 	.word	0x20000110

08017254 <sniprintf>:
 8017254:	b40c      	push	{r2, r3}
 8017256:	b530      	push	{r4, r5, lr}
 8017258:	4b17      	ldr	r3, [pc, #92]	; (80172b8 <sniprintf+0x64>)
 801725a:	1e0c      	subs	r4, r1, #0
 801725c:	681d      	ldr	r5, [r3, #0]
 801725e:	b09d      	sub	sp, #116	; 0x74
 8017260:	da08      	bge.n	8017274 <sniprintf+0x20>
 8017262:	238b      	movs	r3, #139	; 0x8b
 8017264:	602b      	str	r3, [r5, #0]
 8017266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801726a:	b01d      	add	sp, #116	; 0x74
 801726c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017270:	b002      	add	sp, #8
 8017272:	4770      	bx	lr
 8017274:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017278:	f8ad 3014 	strh.w	r3, [sp, #20]
 801727c:	bf14      	ite	ne
 801727e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8017282:	4623      	moveq	r3, r4
 8017284:	9304      	str	r3, [sp, #16]
 8017286:	9307      	str	r3, [sp, #28]
 8017288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801728c:	9002      	str	r0, [sp, #8]
 801728e:	9006      	str	r0, [sp, #24]
 8017290:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017294:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017296:	ab21      	add	r3, sp, #132	; 0x84
 8017298:	a902      	add	r1, sp, #8
 801729a:	4628      	mov	r0, r5
 801729c:	9301      	str	r3, [sp, #4]
 801729e:	f000 fab9 	bl	8017814 <_svfiprintf_r>
 80172a2:	1c43      	adds	r3, r0, #1
 80172a4:	bfbc      	itt	lt
 80172a6:	238b      	movlt	r3, #139	; 0x8b
 80172a8:	602b      	strlt	r3, [r5, #0]
 80172aa:	2c00      	cmp	r4, #0
 80172ac:	d0dd      	beq.n	801726a <sniprintf+0x16>
 80172ae:	9b02      	ldr	r3, [sp, #8]
 80172b0:	2200      	movs	r2, #0
 80172b2:	701a      	strb	r2, [r3, #0]
 80172b4:	e7d9      	b.n	801726a <sniprintf+0x16>
 80172b6:	bf00      	nop
 80172b8:	20000110 	.word	0x20000110

080172bc <__sread>:
 80172bc:	b510      	push	{r4, lr}
 80172be:	460c      	mov	r4, r1
 80172c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172c4:	f000 f956 	bl	8017574 <_read_r>
 80172c8:	2800      	cmp	r0, #0
 80172ca:	bfab      	itete	ge
 80172cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80172ce:	89a3      	ldrhlt	r3, [r4, #12]
 80172d0:	181b      	addge	r3, r3, r0
 80172d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80172d6:	bfac      	ite	ge
 80172d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80172da:	81a3      	strhlt	r3, [r4, #12]
 80172dc:	bd10      	pop	{r4, pc}

080172de <__swrite>:
 80172de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172e2:	461f      	mov	r7, r3
 80172e4:	898b      	ldrh	r3, [r1, #12]
 80172e6:	05db      	lsls	r3, r3, #23
 80172e8:	4605      	mov	r5, r0
 80172ea:	460c      	mov	r4, r1
 80172ec:	4616      	mov	r6, r2
 80172ee:	d505      	bpl.n	80172fc <__swrite+0x1e>
 80172f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172f4:	2302      	movs	r3, #2
 80172f6:	2200      	movs	r2, #0
 80172f8:	f000 f92a 	bl	8017550 <_lseek_r>
 80172fc:	89a3      	ldrh	r3, [r4, #12]
 80172fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017306:	81a3      	strh	r3, [r4, #12]
 8017308:	4632      	mov	r2, r6
 801730a:	463b      	mov	r3, r7
 801730c:	4628      	mov	r0, r5
 801730e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017312:	f000 b951 	b.w	80175b8 <_write_r>

08017316 <__sseek>:
 8017316:	b510      	push	{r4, lr}
 8017318:	460c      	mov	r4, r1
 801731a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801731e:	f000 f917 	bl	8017550 <_lseek_r>
 8017322:	1c43      	adds	r3, r0, #1
 8017324:	89a3      	ldrh	r3, [r4, #12]
 8017326:	bf15      	itete	ne
 8017328:	6560      	strne	r0, [r4, #84]	; 0x54
 801732a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801732e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017332:	81a3      	strheq	r3, [r4, #12]
 8017334:	bf18      	it	ne
 8017336:	81a3      	strhne	r3, [r4, #12]
 8017338:	bd10      	pop	{r4, pc}

0801733a <__sclose>:
 801733a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801733e:	f000 b8a1 	b.w	8017484 <_close_r>

08017342 <_vsniprintf_r>:
 8017342:	b530      	push	{r4, r5, lr}
 8017344:	4614      	mov	r4, r2
 8017346:	2c00      	cmp	r4, #0
 8017348:	b09b      	sub	sp, #108	; 0x6c
 801734a:	4605      	mov	r5, r0
 801734c:	461a      	mov	r2, r3
 801734e:	da05      	bge.n	801735c <_vsniprintf_r+0x1a>
 8017350:	238b      	movs	r3, #139	; 0x8b
 8017352:	6003      	str	r3, [r0, #0]
 8017354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017358:	b01b      	add	sp, #108	; 0x6c
 801735a:	bd30      	pop	{r4, r5, pc}
 801735c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017360:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017364:	bf14      	ite	ne
 8017366:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801736a:	4623      	moveq	r3, r4
 801736c:	9302      	str	r3, [sp, #8]
 801736e:	9305      	str	r3, [sp, #20]
 8017370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017374:	9100      	str	r1, [sp, #0]
 8017376:	9104      	str	r1, [sp, #16]
 8017378:	f8ad 300e 	strh.w	r3, [sp, #14]
 801737c:	4669      	mov	r1, sp
 801737e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017380:	f000 fa48 	bl	8017814 <_svfiprintf_r>
 8017384:	1c43      	adds	r3, r0, #1
 8017386:	bfbc      	itt	lt
 8017388:	238b      	movlt	r3, #139	; 0x8b
 801738a:	602b      	strlt	r3, [r5, #0]
 801738c:	2c00      	cmp	r4, #0
 801738e:	d0e3      	beq.n	8017358 <_vsniprintf_r+0x16>
 8017390:	9b00      	ldr	r3, [sp, #0]
 8017392:	2200      	movs	r2, #0
 8017394:	701a      	strb	r2, [r3, #0]
 8017396:	e7df      	b.n	8017358 <_vsniprintf_r+0x16>

08017398 <vsniprintf>:
 8017398:	b507      	push	{r0, r1, r2, lr}
 801739a:	9300      	str	r3, [sp, #0]
 801739c:	4613      	mov	r3, r2
 801739e:	460a      	mov	r2, r1
 80173a0:	4601      	mov	r1, r0
 80173a2:	4803      	ldr	r0, [pc, #12]	; (80173b0 <vsniprintf+0x18>)
 80173a4:	6800      	ldr	r0, [r0, #0]
 80173a6:	f7ff ffcc 	bl	8017342 <_vsniprintf_r>
 80173aa:	b003      	add	sp, #12
 80173ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80173b0:	20000110 	.word	0x20000110

080173b4 <memcmp>:
 80173b4:	b510      	push	{r4, lr}
 80173b6:	3901      	subs	r1, #1
 80173b8:	4402      	add	r2, r0
 80173ba:	4290      	cmp	r0, r2
 80173bc:	d101      	bne.n	80173c2 <memcmp+0xe>
 80173be:	2000      	movs	r0, #0
 80173c0:	e005      	b.n	80173ce <memcmp+0x1a>
 80173c2:	7803      	ldrb	r3, [r0, #0]
 80173c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80173c8:	42a3      	cmp	r3, r4
 80173ca:	d001      	beq.n	80173d0 <memcmp+0x1c>
 80173cc:	1b18      	subs	r0, r3, r4
 80173ce:	bd10      	pop	{r4, pc}
 80173d0:	3001      	adds	r0, #1
 80173d2:	e7f2      	b.n	80173ba <memcmp+0x6>

080173d4 <memmove>:
 80173d4:	4288      	cmp	r0, r1
 80173d6:	b510      	push	{r4, lr}
 80173d8:	eb01 0402 	add.w	r4, r1, r2
 80173dc:	d902      	bls.n	80173e4 <memmove+0x10>
 80173de:	4284      	cmp	r4, r0
 80173e0:	4623      	mov	r3, r4
 80173e2:	d807      	bhi.n	80173f4 <memmove+0x20>
 80173e4:	1e43      	subs	r3, r0, #1
 80173e6:	42a1      	cmp	r1, r4
 80173e8:	d008      	beq.n	80173fc <memmove+0x28>
 80173ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80173ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80173f2:	e7f8      	b.n	80173e6 <memmove+0x12>
 80173f4:	4402      	add	r2, r0
 80173f6:	4601      	mov	r1, r0
 80173f8:	428a      	cmp	r2, r1
 80173fa:	d100      	bne.n	80173fe <memmove+0x2a>
 80173fc:	bd10      	pop	{r4, pc}
 80173fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017406:	e7f7      	b.n	80173f8 <memmove+0x24>

08017408 <memset>:
 8017408:	4402      	add	r2, r0
 801740a:	4603      	mov	r3, r0
 801740c:	4293      	cmp	r3, r2
 801740e:	d100      	bne.n	8017412 <memset+0xa>
 8017410:	4770      	bx	lr
 8017412:	f803 1b01 	strb.w	r1, [r3], #1
 8017416:	e7f9      	b.n	801740c <memset+0x4>

08017418 <strchr>:
 8017418:	b2c9      	uxtb	r1, r1
 801741a:	4603      	mov	r3, r0
 801741c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017420:	b11a      	cbz	r2, 801742a <strchr+0x12>
 8017422:	428a      	cmp	r2, r1
 8017424:	d1f9      	bne.n	801741a <strchr+0x2>
 8017426:	4618      	mov	r0, r3
 8017428:	4770      	bx	lr
 801742a:	2900      	cmp	r1, #0
 801742c:	bf18      	it	ne
 801742e:	2300      	movne	r3, #0
 8017430:	e7f9      	b.n	8017426 <strchr+0xe>

08017432 <strncmp>:
 8017432:	b510      	push	{r4, lr}
 8017434:	b16a      	cbz	r2, 8017452 <strncmp+0x20>
 8017436:	3901      	subs	r1, #1
 8017438:	1884      	adds	r4, r0, r2
 801743a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801743e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017442:	429a      	cmp	r2, r3
 8017444:	d103      	bne.n	801744e <strncmp+0x1c>
 8017446:	42a0      	cmp	r0, r4
 8017448:	d001      	beq.n	801744e <strncmp+0x1c>
 801744a:	2a00      	cmp	r2, #0
 801744c:	d1f5      	bne.n	801743a <strncmp+0x8>
 801744e:	1ad0      	subs	r0, r2, r3
 8017450:	bd10      	pop	{r4, pc}
 8017452:	4610      	mov	r0, r2
 8017454:	e7fc      	b.n	8017450 <strncmp+0x1e>

08017456 <strstr>:
 8017456:	780a      	ldrb	r2, [r1, #0]
 8017458:	b570      	push	{r4, r5, r6, lr}
 801745a:	b96a      	cbnz	r2, 8017478 <strstr+0x22>
 801745c:	bd70      	pop	{r4, r5, r6, pc}
 801745e:	429a      	cmp	r2, r3
 8017460:	d109      	bne.n	8017476 <strstr+0x20>
 8017462:	460c      	mov	r4, r1
 8017464:	4605      	mov	r5, r0
 8017466:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801746a:	2b00      	cmp	r3, #0
 801746c:	d0f6      	beq.n	801745c <strstr+0x6>
 801746e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017472:	429e      	cmp	r6, r3
 8017474:	d0f7      	beq.n	8017466 <strstr+0x10>
 8017476:	3001      	adds	r0, #1
 8017478:	7803      	ldrb	r3, [r0, #0]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d1ef      	bne.n	801745e <strstr+0x8>
 801747e:	4618      	mov	r0, r3
 8017480:	e7ec      	b.n	801745c <strstr+0x6>
	...

08017484 <_close_r>:
 8017484:	b538      	push	{r3, r4, r5, lr}
 8017486:	4d06      	ldr	r5, [pc, #24]	; (80174a0 <_close_r+0x1c>)
 8017488:	2300      	movs	r3, #0
 801748a:	4604      	mov	r4, r0
 801748c:	4608      	mov	r0, r1
 801748e:	602b      	str	r3, [r5, #0]
 8017490:	f7eb fc3f 	bl	8002d12 <_close>
 8017494:	1c43      	adds	r3, r0, #1
 8017496:	d102      	bne.n	801749e <_close_r+0x1a>
 8017498:	682b      	ldr	r3, [r5, #0]
 801749a:	b103      	cbz	r3, 801749e <_close_r+0x1a>
 801749c:	6023      	str	r3, [r4, #0]
 801749e:	bd38      	pop	{r3, r4, r5, pc}
 80174a0:	20010e40 	.word	0x20010e40

080174a4 <_reclaim_reent>:
 80174a4:	4b29      	ldr	r3, [pc, #164]	; (801754c <_reclaim_reent+0xa8>)
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	4283      	cmp	r3, r0
 80174aa:	b570      	push	{r4, r5, r6, lr}
 80174ac:	4604      	mov	r4, r0
 80174ae:	d04b      	beq.n	8017548 <_reclaim_reent+0xa4>
 80174b0:	69c3      	ldr	r3, [r0, #28]
 80174b2:	b143      	cbz	r3, 80174c6 <_reclaim_reent+0x22>
 80174b4:	68db      	ldr	r3, [r3, #12]
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d144      	bne.n	8017544 <_reclaim_reent+0xa0>
 80174ba:	69e3      	ldr	r3, [r4, #28]
 80174bc:	6819      	ldr	r1, [r3, #0]
 80174be:	b111      	cbz	r1, 80174c6 <_reclaim_reent+0x22>
 80174c0:	4620      	mov	r0, r4
 80174c2:	f000 f8f9 	bl	80176b8 <_free_r>
 80174c6:	6961      	ldr	r1, [r4, #20]
 80174c8:	b111      	cbz	r1, 80174d0 <_reclaim_reent+0x2c>
 80174ca:	4620      	mov	r0, r4
 80174cc:	f000 f8f4 	bl	80176b8 <_free_r>
 80174d0:	69e1      	ldr	r1, [r4, #28]
 80174d2:	b111      	cbz	r1, 80174da <_reclaim_reent+0x36>
 80174d4:	4620      	mov	r0, r4
 80174d6:	f000 f8ef 	bl	80176b8 <_free_r>
 80174da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80174dc:	b111      	cbz	r1, 80174e4 <_reclaim_reent+0x40>
 80174de:	4620      	mov	r0, r4
 80174e0:	f000 f8ea 	bl	80176b8 <_free_r>
 80174e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80174e6:	b111      	cbz	r1, 80174ee <_reclaim_reent+0x4a>
 80174e8:	4620      	mov	r0, r4
 80174ea:	f000 f8e5 	bl	80176b8 <_free_r>
 80174ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80174f0:	b111      	cbz	r1, 80174f8 <_reclaim_reent+0x54>
 80174f2:	4620      	mov	r0, r4
 80174f4:	f000 f8e0 	bl	80176b8 <_free_r>
 80174f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80174fa:	b111      	cbz	r1, 8017502 <_reclaim_reent+0x5e>
 80174fc:	4620      	mov	r0, r4
 80174fe:	f000 f8db 	bl	80176b8 <_free_r>
 8017502:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8017504:	b111      	cbz	r1, 801750c <_reclaim_reent+0x68>
 8017506:	4620      	mov	r0, r4
 8017508:	f000 f8d6 	bl	80176b8 <_free_r>
 801750c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801750e:	b111      	cbz	r1, 8017516 <_reclaim_reent+0x72>
 8017510:	4620      	mov	r0, r4
 8017512:	f000 f8d1 	bl	80176b8 <_free_r>
 8017516:	6a23      	ldr	r3, [r4, #32]
 8017518:	b1b3      	cbz	r3, 8017548 <_reclaim_reent+0xa4>
 801751a:	4620      	mov	r0, r4
 801751c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017520:	4718      	bx	r3
 8017522:	5949      	ldr	r1, [r1, r5]
 8017524:	b941      	cbnz	r1, 8017538 <_reclaim_reent+0x94>
 8017526:	3504      	adds	r5, #4
 8017528:	69e3      	ldr	r3, [r4, #28]
 801752a:	2d80      	cmp	r5, #128	; 0x80
 801752c:	68d9      	ldr	r1, [r3, #12]
 801752e:	d1f8      	bne.n	8017522 <_reclaim_reent+0x7e>
 8017530:	4620      	mov	r0, r4
 8017532:	f000 f8c1 	bl	80176b8 <_free_r>
 8017536:	e7c0      	b.n	80174ba <_reclaim_reent+0x16>
 8017538:	680e      	ldr	r6, [r1, #0]
 801753a:	4620      	mov	r0, r4
 801753c:	f000 f8bc 	bl	80176b8 <_free_r>
 8017540:	4631      	mov	r1, r6
 8017542:	e7ef      	b.n	8017524 <_reclaim_reent+0x80>
 8017544:	2500      	movs	r5, #0
 8017546:	e7ef      	b.n	8017528 <_reclaim_reent+0x84>
 8017548:	bd70      	pop	{r4, r5, r6, pc}
 801754a:	bf00      	nop
 801754c:	20000110 	.word	0x20000110

08017550 <_lseek_r>:
 8017550:	b538      	push	{r3, r4, r5, lr}
 8017552:	4d07      	ldr	r5, [pc, #28]	; (8017570 <_lseek_r+0x20>)
 8017554:	4604      	mov	r4, r0
 8017556:	4608      	mov	r0, r1
 8017558:	4611      	mov	r1, r2
 801755a:	2200      	movs	r2, #0
 801755c:	602a      	str	r2, [r5, #0]
 801755e:	461a      	mov	r2, r3
 8017560:	f7eb fbfe 	bl	8002d60 <_lseek>
 8017564:	1c43      	adds	r3, r0, #1
 8017566:	d102      	bne.n	801756e <_lseek_r+0x1e>
 8017568:	682b      	ldr	r3, [r5, #0]
 801756a:	b103      	cbz	r3, 801756e <_lseek_r+0x1e>
 801756c:	6023      	str	r3, [r4, #0]
 801756e:	bd38      	pop	{r3, r4, r5, pc}
 8017570:	20010e40 	.word	0x20010e40

08017574 <_read_r>:
 8017574:	b538      	push	{r3, r4, r5, lr}
 8017576:	4d07      	ldr	r5, [pc, #28]	; (8017594 <_read_r+0x20>)
 8017578:	4604      	mov	r4, r0
 801757a:	4608      	mov	r0, r1
 801757c:	4611      	mov	r1, r2
 801757e:	2200      	movs	r2, #0
 8017580:	602a      	str	r2, [r5, #0]
 8017582:	461a      	mov	r2, r3
 8017584:	f7eb fb8c 	bl	8002ca0 <_read>
 8017588:	1c43      	adds	r3, r0, #1
 801758a:	d102      	bne.n	8017592 <_read_r+0x1e>
 801758c:	682b      	ldr	r3, [r5, #0]
 801758e:	b103      	cbz	r3, 8017592 <_read_r+0x1e>
 8017590:	6023      	str	r3, [r4, #0]
 8017592:	bd38      	pop	{r3, r4, r5, pc}
 8017594:	20010e40 	.word	0x20010e40

08017598 <_sbrk_r>:
 8017598:	b538      	push	{r3, r4, r5, lr}
 801759a:	4d06      	ldr	r5, [pc, #24]	; (80175b4 <_sbrk_r+0x1c>)
 801759c:	2300      	movs	r3, #0
 801759e:	4604      	mov	r4, r0
 80175a0:	4608      	mov	r0, r1
 80175a2:	602b      	str	r3, [r5, #0]
 80175a4:	f7eb fbea 	bl	8002d7c <_sbrk>
 80175a8:	1c43      	adds	r3, r0, #1
 80175aa:	d102      	bne.n	80175b2 <_sbrk_r+0x1a>
 80175ac:	682b      	ldr	r3, [r5, #0]
 80175ae:	b103      	cbz	r3, 80175b2 <_sbrk_r+0x1a>
 80175b0:	6023      	str	r3, [r4, #0]
 80175b2:	bd38      	pop	{r3, r4, r5, pc}
 80175b4:	20010e40 	.word	0x20010e40

080175b8 <_write_r>:
 80175b8:	b538      	push	{r3, r4, r5, lr}
 80175ba:	4d07      	ldr	r5, [pc, #28]	; (80175d8 <_write_r+0x20>)
 80175bc:	4604      	mov	r4, r0
 80175be:	4608      	mov	r0, r1
 80175c0:	4611      	mov	r1, r2
 80175c2:	2200      	movs	r2, #0
 80175c4:	602a      	str	r2, [r5, #0]
 80175c6:	461a      	mov	r2, r3
 80175c8:	f7eb fb87 	bl	8002cda <_write>
 80175cc:	1c43      	adds	r3, r0, #1
 80175ce:	d102      	bne.n	80175d6 <_write_r+0x1e>
 80175d0:	682b      	ldr	r3, [r5, #0]
 80175d2:	b103      	cbz	r3, 80175d6 <_write_r+0x1e>
 80175d4:	6023      	str	r3, [r4, #0]
 80175d6:	bd38      	pop	{r3, r4, r5, pc}
 80175d8:	20010e40 	.word	0x20010e40

080175dc <__errno>:
 80175dc:	4b01      	ldr	r3, [pc, #4]	; (80175e4 <__errno+0x8>)
 80175de:	6818      	ldr	r0, [r3, #0]
 80175e0:	4770      	bx	lr
 80175e2:	bf00      	nop
 80175e4:	20000110 	.word	0x20000110

080175e8 <__libc_init_array>:
 80175e8:	b570      	push	{r4, r5, r6, lr}
 80175ea:	4d0d      	ldr	r5, [pc, #52]	; (8017620 <__libc_init_array+0x38>)
 80175ec:	4c0d      	ldr	r4, [pc, #52]	; (8017624 <__libc_init_array+0x3c>)
 80175ee:	1b64      	subs	r4, r4, r5
 80175f0:	10a4      	asrs	r4, r4, #2
 80175f2:	2600      	movs	r6, #0
 80175f4:	42a6      	cmp	r6, r4
 80175f6:	d109      	bne.n	801760c <__libc_init_array+0x24>
 80175f8:	4d0b      	ldr	r5, [pc, #44]	; (8017628 <__libc_init_array+0x40>)
 80175fa:	4c0c      	ldr	r4, [pc, #48]	; (801762c <__libc_init_array+0x44>)
 80175fc:	f000 ff02 	bl	8018404 <_init>
 8017600:	1b64      	subs	r4, r4, r5
 8017602:	10a4      	asrs	r4, r4, #2
 8017604:	2600      	movs	r6, #0
 8017606:	42a6      	cmp	r6, r4
 8017608:	d105      	bne.n	8017616 <__libc_init_array+0x2e>
 801760a:	bd70      	pop	{r4, r5, r6, pc}
 801760c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017610:	4798      	blx	r3
 8017612:	3601      	adds	r6, #1
 8017614:	e7ee      	b.n	80175f4 <__libc_init_array+0xc>
 8017616:	f855 3b04 	ldr.w	r3, [r5], #4
 801761a:	4798      	blx	r3
 801761c:	3601      	adds	r6, #1
 801761e:	e7f2      	b.n	8017606 <__libc_init_array+0x1e>
 8017620:	0801925c 	.word	0x0801925c
 8017624:	0801925c 	.word	0x0801925c
 8017628:	0801925c 	.word	0x0801925c
 801762c:	08019264 	.word	0x08019264

08017630 <__retarget_lock_init_recursive>:
 8017630:	4770      	bx	lr

08017632 <__retarget_lock_acquire_recursive>:
 8017632:	4770      	bx	lr

08017634 <__retarget_lock_release_recursive>:
 8017634:	4770      	bx	lr

08017636 <strcpy>:
 8017636:	4603      	mov	r3, r0
 8017638:	f811 2b01 	ldrb.w	r2, [r1], #1
 801763c:	f803 2b01 	strb.w	r2, [r3], #1
 8017640:	2a00      	cmp	r2, #0
 8017642:	d1f9      	bne.n	8017638 <strcpy+0x2>
 8017644:	4770      	bx	lr

08017646 <memcpy>:
 8017646:	440a      	add	r2, r1
 8017648:	4291      	cmp	r1, r2
 801764a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801764e:	d100      	bne.n	8017652 <memcpy+0xc>
 8017650:	4770      	bx	lr
 8017652:	b510      	push	{r4, lr}
 8017654:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017658:	f803 4f01 	strb.w	r4, [r3, #1]!
 801765c:	4291      	cmp	r1, r2
 801765e:	d1f9      	bne.n	8017654 <memcpy+0xe>
 8017660:	bd10      	pop	{r4, pc}
	...

08017664 <__assert_func>:
 8017664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017666:	4614      	mov	r4, r2
 8017668:	461a      	mov	r2, r3
 801766a:	4b09      	ldr	r3, [pc, #36]	; (8017690 <__assert_func+0x2c>)
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	4605      	mov	r5, r0
 8017670:	68d8      	ldr	r0, [r3, #12]
 8017672:	b14c      	cbz	r4, 8017688 <__assert_func+0x24>
 8017674:	4b07      	ldr	r3, [pc, #28]	; (8017694 <__assert_func+0x30>)
 8017676:	9100      	str	r1, [sp, #0]
 8017678:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801767c:	4906      	ldr	r1, [pc, #24]	; (8017698 <__assert_func+0x34>)
 801767e:	462b      	mov	r3, r5
 8017680:	f000 fd48 	bl	8018114 <fiprintf>
 8017684:	f000 fdee 	bl	8018264 <abort>
 8017688:	4b04      	ldr	r3, [pc, #16]	; (801769c <__assert_func+0x38>)
 801768a:	461c      	mov	r4, r3
 801768c:	e7f3      	b.n	8017676 <__assert_func+0x12>
 801768e:	bf00      	nop
 8017690:	20000110 	.word	0x20000110
 8017694:	080191e4 	.word	0x080191e4
 8017698:	080191f1 	.word	0x080191f1
 801769c:	0801921f 	.word	0x0801921f

080176a0 <__env_lock>:
 80176a0:	4801      	ldr	r0, [pc, #4]	; (80176a8 <__env_lock+0x8>)
 80176a2:	f7ff bfc6 	b.w	8017632 <__retarget_lock_acquire_recursive>
 80176a6:	bf00      	nop
 80176a8:	20010e44 	.word	0x20010e44

080176ac <__env_unlock>:
 80176ac:	4801      	ldr	r0, [pc, #4]	; (80176b4 <__env_unlock+0x8>)
 80176ae:	f7ff bfc1 	b.w	8017634 <__retarget_lock_release_recursive>
 80176b2:	bf00      	nop
 80176b4:	20010e44 	.word	0x20010e44

080176b8 <_free_r>:
 80176b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80176ba:	2900      	cmp	r1, #0
 80176bc:	d044      	beq.n	8017748 <_free_r+0x90>
 80176be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80176c2:	9001      	str	r0, [sp, #4]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	f1a1 0404 	sub.w	r4, r1, #4
 80176ca:	bfb8      	it	lt
 80176cc:	18e4      	addlt	r4, r4, r3
 80176ce:	f7ff fbc1 	bl	8016e54 <__malloc_lock>
 80176d2:	4a1e      	ldr	r2, [pc, #120]	; (801774c <_free_r+0x94>)
 80176d4:	9801      	ldr	r0, [sp, #4]
 80176d6:	6813      	ldr	r3, [r2, #0]
 80176d8:	b933      	cbnz	r3, 80176e8 <_free_r+0x30>
 80176da:	6063      	str	r3, [r4, #4]
 80176dc:	6014      	str	r4, [r2, #0]
 80176de:	b003      	add	sp, #12
 80176e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80176e4:	f7ff bbbc 	b.w	8016e60 <__malloc_unlock>
 80176e8:	42a3      	cmp	r3, r4
 80176ea:	d908      	bls.n	80176fe <_free_r+0x46>
 80176ec:	6825      	ldr	r5, [r4, #0]
 80176ee:	1961      	adds	r1, r4, r5
 80176f0:	428b      	cmp	r3, r1
 80176f2:	bf01      	itttt	eq
 80176f4:	6819      	ldreq	r1, [r3, #0]
 80176f6:	685b      	ldreq	r3, [r3, #4]
 80176f8:	1949      	addeq	r1, r1, r5
 80176fa:	6021      	streq	r1, [r4, #0]
 80176fc:	e7ed      	b.n	80176da <_free_r+0x22>
 80176fe:	461a      	mov	r2, r3
 8017700:	685b      	ldr	r3, [r3, #4]
 8017702:	b10b      	cbz	r3, 8017708 <_free_r+0x50>
 8017704:	42a3      	cmp	r3, r4
 8017706:	d9fa      	bls.n	80176fe <_free_r+0x46>
 8017708:	6811      	ldr	r1, [r2, #0]
 801770a:	1855      	adds	r5, r2, r1
 801770c:	42a5      	cmp	r5, r4
 801770e:	d10b      	bne.n	8017728 <_free_r+0x70>
 8017710:	6824      	ldr	r4, [r4, #0]
 8017712:	4421      	add	r1, r4
 8017714:	1854      	adds	r4, r2, r1
 8017716:	42a3      	cmp	r3, r4
 8017718:	6011      	str	r1, [r2, #0]
 801771a:	d1e0      	bne.n	80176de <_free_r+0x26>
 801771c:	681c      	ldr	r4, [r3, #0]
 801771e:	685b      	ldr	r3, [r3, #4]
 8017720:	6053      	str	r3, [r2, #4]
 8017722:	440c      	add	r4, r1
 8017724:	6014      	str	r4, [r2, #0]
 8017726:	e7da      	b.n	80176de <_free_r+0x26>
 8017728:	d902      	bls.n	8017730 <_free_r+0x78>
 801772a:	230c      	movs	r3, #12
 801772c:	6003      	str	r3, [r0, #0]
 801772e:	e7d6      	b.n	80176de <_free_r+0x26>
 8017730:	6825      	ldr	r5, [r4, #0]
 8017732:	1961      	adds	r1, r4, r5
 8017734:	428b      	cmp	r3, r1
 8017736:	bf04      	itt	eq
 8017738:	6819      	ldreq	r1, [r3, #0]
 801773a:	685b      	ldreq	r3, [r3, #4]
 801773c:	6063      	str	r3, [r4, #4]
 801773e:	bf04      	itt	eq
 8017740:	1949      	addeq	r1, r1, r5
 8017742:	6021      	streq	r1, [r4, #0]
 8017744:	6054      	str	r4, [r2, #4]
 8017746:	e7ca      	b.n	80176de <_free_r+0x26>
 8017748:	b003      	add	sp, #12
 801774a:	bd30      	pop	{r4, r5, pc}
 801774c:	20010cfc 	.word	0x20010cfc

08017750 <_malloc_usable_size_r>:
 8017750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017754:	1f18      	subs	r0, r3, #4
 8017756:	2b00      	cmp	r3, #0
 8017758:	bfbc      	itt	lt
 801775a:	580b      	ldrlt	r3, [r1, r0]
 801775c:	18c0      	addlt	r0, r0, r3
 801775e:	4770      	bx	lr

08017760 <__ssputs_r>:
 8017760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017764:	688e      	ldr	r6, [r1, #8]
 8017766:	461f      	mov	r7, r3
 8017768:	42be      	cmp	r6, r7
 801776a:	680b      	ldr	r3, [r1, #0]
 801776c:	4682      	mov	sl, r0
 801776e:	460c      	mov	r4, r1
 8017770:	4690      	mov	r8, r2
 8017772:	d82c      	bhi.n	80177ce <__ssputs_r+0x6e>
 8017774:	898a      	ldrh	r2, [r1, #12]
 8017776:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801777a:	d026      	beq.n	80177ca <__ssputs_r+0x6a>
 801777c:	6965      	ldr	r5, [r4, #20]
 801777e:	6909      	ldr	r1, [r1, #16]
 8017780:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017784:	eba3 0901 	sub.w	r9, r3, r1
 8017788:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801778c:	1c7b      	adds	r3, r7, #1
 801778e:	444b      	add	r3, r9
 8017790:	106d      	asrs	r5, r5, #1
 8017792:	429d      	cmp	r5, r3
 8017794:	bf38      	it	cc
 8017796:	461d      	movcc	r5, r3
 8017798:	0553      	lsls	r3, r2, #21
 801779a:	d527      	bpl.n	80177ec <__ssputs_r+0x8c>
 801779c:	4629      	mov	r1, r5
 801779e:	f7ff fad9 	bl	8016d54 <_malloc_r>
 80177a2:	4606      	mov	r6, r0
 80177a4:	b360      	cbz	r0, 8017800 <__ssputs_r+0xa0>
 80177a6:	6921      	ldr	r1, [r4, #16]
 80177a8:	464a      	mov	r2, r9
 80177aa:	f7ff ff4c 	bl	8017646 <memcpy>
 80177ae:	89a3      	ldrh	r3, [r4, #12]
 80177b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80177b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80177b8:	81a3      	strh	r3, [r4, #12]
 80177ba:	6126      	str	r6, [r4, #16]
 80177bc:	6165      	str	r5, [r4, #20]
 80177be:	444e      	add	r6, r9
 80177c0:	eba5 0509 	sub.w	r5, r5, r9
 80177c4:	6026      	str	r6, [r4, #0]
 80177c6:	60a5      	str	r5, [r4, #8]
 80177c8:	463e      	mov	r6, r7
 80177ca:	42be      	cmp	r6, r7
 80177cc:	d900      	bls.n	80177d0 <__ssputs_r+0x70>
 80177ce:	463e      	mov	r6, r7
 80177d0:	6820      	ldr	r0, [r4, #0]
 80177d2:	4632      	mov	r2, r6
 80177d4:	4641      	mov	r1, r8
 80177d6:	f7ff fdfd 	bl	80173d4 <memmove>
 80177da:	68a3      	ldr	r3, [r4, #8]
 80177dc:	1b9b      	subs	r3, r3, r6
 80177de:	60a3      	str	r3, [r4, #8]
 80177e0:	6823      	ldr	r3, [r4, #0]
 80177e2:	4433      	add	r3, r6
 80177e4:	6023      	str	r3, [r4, #0]
 80177e6:	2000      	movs	r0, #0
 80177e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177ec:	462a      	mov	r2, r5
 80177ee:	f7ff fbb1 	bl	8016f54 <_realloc_r>
 80177f2:	4606      	mov	r6, r0
 80177f4:	2800      	cmp	r0, #0
 80177f6:	d1e0      	bne.n	80177ba <__ssputs_r+0x5a>
 80177f8:	6921      	ldr	r1, [r4, #16]
 80177fa:	4650      	mov	r0, sl
 80177fc:	f7ff ff5c 	bl	80176b8 <_free_r>
 8017800:	230c      	movs	r3, #12
 8017802:	f8ca 3000 	str.w	r3, [sl]
 8017806:	89a3      	ldrh	r3, [r4, #12]
 8017808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801780c:	81a3      	strh	r3, [r4, #12]
 801780e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017812:	e7e9      	b.n	80177e8 <__ssputs_r+0x88>

08017814 <_svfiprintf_r>:
 8017814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017818:	4698      	mov	r8, r3
 801781a:	898b      	ldrh	r3, [r1, #12]
 801781c:	061b      	lsls	r3, r3, #24
 801781e:	b09d      	sub	sp, #116	; 0x74
 8017820:	4607      	mov	r7, r0
 8017822:	460d      	mov	r5, r1
 8017824:	4614      	mov	r4, r2
 8017826:	d50e      	bpl.n	8017846 <_svfiprintf_r+0x32>
 8017828:	690b      	ldr	r3, [r1, #16]
 801782a:	b963      	cbnz	r3, 8017846 <_svfiprintf_r+0x32>
 801782c:	2140      	movs	r1, #64	; 0x40
 801782e:	f7ff fa91 	bl	8016d54 <_malloc_r>
 8017832:	6028      	str	r0, [r5, #0]
 8017834:	6128      	str	r0, [r5, #16]
 8017836:	b920      	cbnz	r0, 8017842 <_svfiprintf_r+0x2e>
 8017838:	230c      	movs	r3, #12
 801783a:	603b      	str	r3, [r7, #0]
 801783c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017840:	e0d0      	b.n	80179e4 <_svfiprintf_r+0x1d0>
 8017842:	2340      	movs	r3, #64	; 0x40
 8017844:	616b      	str	r3, [r5, #20]
 8017846:	2300      	movs	r3, #0
 8017848:	9309      	str	r3, [sp, #36]	; 0x24
 801784a:	2320      	movs	r3, #32
 801784c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017850:	f8cd 800c 	str.w	r8, [sp, #12]
 8017854:	2330      	movs	r3, #48	; 0x30
 8017856:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80179fc <_svfiprintf_r+0x1e8>
 801785a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801785e:	f04f 0901 	mov.w	r9, #1
 8017862:	4623      	mov	r3, r4
 8017864:	469a      	mov	sl, r3
 8017866:	f813 2b01 	ldrb.w	r2, [r3], #1
 801786a:	b10a      	cbz	r2, 8017870 <_svfiprintf_r+0x5c>
 801786c:	2a25      	cmp	r2, #37	; 0x25
 801786e:	d1f9      	bne.n	8017864 <_svfiprintf_r+0x50>
 8017870:	ebba 0b04 	subs.w	fp, sl, r4
 8017874:	d00b      	beq.n	801788e <_svfiprintf_r+0x7a>
 8017876:	465b      	mov	r3, fp
 8017878:	4622      	mov	r2, r4
 801787a:	4629      	mov	r1, r5
 801787c:	4638      	mov	r0, r7
 801787e:	f7ff ff6f 	bl	8017760 <__ssputs_r>
 8017882:	3001      	adds	r0, #1
 8017884:	f000 80a9 	beq.w	80179da <_svfiprintf_r+0x1c6>
 8017888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801788a:	445a      	add	r2, fp
 801788c:	9209      	str	r2, [sp, #36]	; 0x24
 801788e:	f89a 3000 	ldrb.w	r3, [sl]
 8017892:	2b00      	cmp	r3, #0
 8017894:	f000 80a1 	beq.w	80179da <_svfiprintf_r+0x1c6>
 8017898:	2300      	movs	r3, #0
 801789a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801789e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80178a2:	f10a 0a01 	add.w	sl, sl, #1
 80178a6:	9304      	str	r3, [sp, #16]
 80178a8:	9307      	str	r3, [sp, #28]
 80178aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80178ae:	931a      	str	r3, [sp, #104]	; 0x68
 80178b0:	4654      	mov	r4, sl
 80178b2:	2205      	movs	r2, #5
 80178b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178b8:	4850      	ldr	r0, [pc, #320]	; (80179fc <_svfiprintf_r+0x1e8>)
 80178ba:	f7e8 fca9 	bl	8000210 <memchr>
 80178be:	9a04      	ldr	r2, [sp, #16]
 80178c0:	b9d8      	cbnz	r0, 80178fa <_svfiprintf_r+0xe6>
 80178c2:	06d0      	lsls	r0, r2, #27
 80178c4:	bf44      	itt	mi
 80178c6:	2320      	movmi	r3, #32
 80178c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80178cc:	0711      	lsls	r1, r2, #28
 80178ce:	bf44      	itt	mi
 80178d0:	232b      	movmi	r3, #43	; 0x2b
 80178d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80178d6:	f89a 3000 	ldrb.w	r3, [sl]
 80178da:	2b2a      	cmp	r3, #42	; 0x2a
 80178dc:	d015      	beq.n	801790a <_svfiprintf_r+0xf6>
 80178de:	9a07      	ldr	r2, [sp, #28]
 80178e0:	4654      	mov	r4, sl
 80178e2:	2000      	movs	r0, #0
 80178e4:	f04f 0c0a 	mov.w	ip, #10
 80178e8:	4621      	mov	r1, r4
 80178ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80178ee:	3b30      	subs	r3, #48	; 0x30
 80178f0:	2b09      	cmp	r3, #9
 80178f2:	d94d      	bls.n	8017990 <_svfiprintf_r+0x17c>
 80178f4:	b1b0      	cbz	r0, 8017924 <_svfiprintf_r+0x110>
 80178f6:	9207      	str	r2, [sp, #28]
 80178f8:	e014      	b.n	8017924 <_svfiprintf_r+0x110>
 80178fa:	eba0 0308 	sub.w	r3, r0, r8
 80178fe:	fa09 f303 	lsl.w	r3, r9, r3
 8017902:	4313      	orrs	r3, r2
 8017904:	9304      	str	r3, [sp, #16]
 8017906:	46a2      	mov	sl, r4
 8017908:	e7d2      	b.n	80178b0 <_svfiprintf_r+0x9c>
 801790a:	9b03      	ldr	r3, [sp, #12]
 801790c:	1d19      	adds	r1, r3, #4
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	9103      	str	r1, [sp, #12]
 8017912:	2b00      	cmp	r3, #0
 8017914:	bfbb      	ittet	lt
 8017916:	425b      	neglt	r3, r3
 8017918:	f042 0202 	orrlt.w	r2, r2, #2
 801791c:	9307      	strge	r3, [sp, #28]
 801791e:	9307      	strlt	r3, [sp, #28]
 8017920:	bfb8      	it	lt
 8017922:	9204      	strlt	r2, [sp, #16]
 8017924:	7823      	ldrb	r3, [r4, #0]
 8017926:	2b2e      	cmp	r3, #46	; 0x2e
 8017928:	d10c      	bne.n	8017944 <_svfiprintf_r+0x130>
 801792a:	7863      	ldrb	r3, [r4, #1]
 801792c:	2b2a      	cmp	r3, #42	; 0x2a
 801792e:	d134      	bne.n	801799a <_svfiprintf_r+0x186>
 8017930:	9b03      	ldr	r3, [sp, #12]
 8017932:	1d1a      	adds	r2, r3, #4
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	9203      	str	r2, [sp, #12]
 8017938:	2b00      	cmp	r3, #0
 801793a:	bfb8      	it	lt
 801793c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017940:	3402      	adds	r4, #2
 8017942:	9305      	str	r3, [sp, #20]
 8017944:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017a0c <_svfiprintf_r+0x1f8>
 8017948:	7821      	ldrb	r1, [r4, #0]
 801794a:	2203      	movs	r2, #3
 801794c:	4650      	mov	r0, sl
 801794e:	f7e8 fc5f 	bl	8000210 <memchr>
 8017952:	b138      	cbz	r0, 8017964 <_svfiprintf_r+0x150>
 8017954:	9b04      	ldr	r3, [sp, #16]
 8017956:	eba0 000a 	sub.w	r0, r0, sl
 801795a:	2240      	movs	r2, #64	; 0x40
 801795c:	4082      	lsls	r2, r0
 801795e:	4313      	orrs	r3, r2
 8017960:	3401      	adds	r4, #1
 8017962:	9304      	str	r3, [sp, #16]
 8017964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017968:	4825      	ldr	r0, [pc, #148]	; (8017a00 <_svfiprintf_r+0x1ec>)
 801796a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801796e:	2206      	movs	r2, #6
 8017970:	f7e8 fc4e 	bl	8000210 <memchr>
 8017974:	2800      	cmp	r0, #0
 8017976:	d038      	beq.n	80179ea <_svfiprintf_r+0x1d6>
 8017978:	4b22      	ldr	r3, [pc, #136]	; (8017a04 <_svfiprintf_r+0x1f0>)
 801797a:	bb1b      	cbnz	r3, 80179c4 <_svfiprintf_r+0x1b0>
 801797c:	9b03      	ldr	r3, [sp, #12]
 801797e:	3307      	adds	r3, #7
 8017980:	f023 0307 	bic.w	r3, r3, #7
 8017984:	3308      	adds	r3, #8
 8017986:	9303      	str	r3, [sp, #12]
 8017988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801798a:	4433      	add	r3, r6
 801798c:	9309      	str	r3, [sp, #36]	; 0x24
 801798e:	e768      	b.n	8017862 <_svfiprintf_r+0x4e>
 8017990:	fb0c 3202 	mla	r2, ip, r2, r3
 8017994:	460c      	mov	r4, r1
 8017996:	2001      	movs	r0, #1
 8017998:	e7a6      	b.n	80178e8 <_svfiprintf_r+0xd4>
 801799a:	2300      	movs	r3, #0
 801799c:	3401      	adds	r4, #1
 801799e:	9305      	str	r3, [sp, #20]
 80179a0:	4619      	mov	r1, r3
 80179a2:	f04f 0c0a 	mov.w	ip, #10
 80179a6:	4620      	mov	r0, r4
 80179a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80179ac:	3a30      	subs	r2, #48	; 0x30
 80179ae:	2a09      	cmp	r2, #9
 80179b0:	d903      	bls.n	80179ba <_svfiprintf_r+0x1a6>
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d0c6      	beq.n	8017944 <_svfiprintf_r+0x130>
 80179b6:	9105      	str	r1, [sp, #20]
 80179b8:	e7c4      	b.n	8017944 <_svfiprintf_r+0x130>
 80179ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80179be:	4604      	mov	r4, r0
 80179c0:	2301      	movs	r3, #1
 80179c2:	e7f0      	b.n	80179a6 <_svfiprintf_r+0x192>
 80179c4:	ab03      	add	r3, sp, #12
 80179c6:	9300      	str	r3, [sp, #0]
 80179c8:	462a      	mov	r2, r5
 80179ca:	4b0f      	ldr	r3, [pc, #60]	; (8017a08 <_svfiprintf_r+0x1f4>)
 80179cc:	a904      	add	r1, sp, #16
 80179ce:	4638      	mov	r0, r7
 80179d0:	f3af 8000 	nop.w
 80179d4:	1c42      	adds	r2, r0, #1
 80179d6:	4606      	mov	r6, r0
 80179d8:	d1d6      	bne.n	8017988 <_svfiprintf_r+0x174>
 80179da:	89ab      	ldrh	r3, [r5, #12]
 80179dc:	065b      	lsls	r3, r3, #25
 80179de:	f53f af2d 	bmi.w	801783c <_svfiprintf_r+0x28>
 80179e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80179e4:	b01d      	add	sp, #116	; 0x74
 80179e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179ea:	ab03      	add	r3, sp, #12
 80179ec:	9300      	str	r3, [sp, #0]
 80179ee:	462a      	mov	r2, r5
 80179f0:	4b05      	ldr	r3, [pc, #20]	; (8017a08 <_svfiprintf_r+0x1f4>)
 80179f2:	a904      	add	r1, sp, #16
 80179f4:	4638      	mov	r0, r7
 80179f6:	f000 f9bd 	bl	8017d74 <_printf_i>
 80179fa:	e7eb      	b.n	80179d4 <_svfiprintf_r+0x1c0>
 80179fc:	08019220 	.word	0x08019220
 8017a00:	0801922a 	.word	0x0801922a
 8017a04:	00000000 	.word	0x00000000
 8017a08:	08017761 	.word	0x08017761
 8017a0c:	08019226 	.word	0x08019226

08017a10 <__sfputc_r>:
 8017a10:	6893      	ldr	r3, [r2, #8]
 8017a12:	3b01      	subs	r3, #1
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	b410      	push	{r4}
 8017a18:	6093      	str	r3, [r2, #8]
 8017a1a:	da08      	bge.n	8017a2e <__sfputc_r+0x1e>
 8017a1c:	6994      	ldr	r4, [r2, #24]
 8017a1e:	42a3      	cmp	r3, r4
 8017a20:	db01      	blt.n	8017a26 <__sfputc_r+0x16>
 8017a22:	290a      	cmp	r1, #10
 8017a24:	d103      	bne.n	8017a2e <__sfputc_r+0x1e>
 8017a26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a2a:	f000 bb85 	b.w	8018138 <__swbuf_r>
 8017a2e:	6813      	ldr	r3, [r2, #0]
 8017a30:	1c58      	adds	r0, r3, #1
 8017a32:	6010      	str	r0, [r2, #0]
 8017a34:	7019      	strb	r1, [r3, #0]
 8017a36:	4608      	mov	r0, r1
 8017a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a3c:	4770      	bx	lr

08017a3e <__sfputs_r>:
 8017a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a40:	4606      	mov	r6, r0
 8017a42:	460f      	mov	r7, r1
 8017a44:	4614      	mov	r4, r2
 8017a46:	18d5      	adds	r5, r2, r3
 8017a48:	42ac      	cmp	r4, r5
 8017a4a:	d101      	bne.n	8017a50 <__sfputs_r+0x12>
 8017a4c:	2000      	movs	r0, #0
 8017a4e:	e007      	b.n	8017a60 <__sfputs_r+0x22>
 8017a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a54:	463a      	mov	r2, r7
 8017a56:	4630      	mov	r0, r6
 8017a58:	f7ff ffda 	bl	8017a10 <__sfputc_r>
 8017a5c:	1c43      	adds	r3, r0, #1
 8017a5e:	d1f3      	bne.n	8017a48 <__sfputs_r+0xa>
 8017a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017a64 <_vfiprintf_r>:
 8017a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a68:	460d      	mov	r5, r1
 8017a6a:	b09d      	sub	sp, #116	; 0x74
 8017a6c:	4614      	mov	r4, r2
 8017a6e:	4698      	mov	r8, r3
 8017a70:	4606      	mov	r6, r0
 8017a72:	b118      	cbz	r0, 8017a7c <_vfiprintf_r+0x18>
 8017a74:	6a03      	ldr	r3, [r0, #32]
 8017a76:	b90b      	cbnz	r3, 8017a7c <_vfiprintf_r+0x18>
 8017a78:	f7ff fba4 	bl	80171c4 <__sinit>
 8017a7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a7e:	07d9      	lsls	r1, r3, #31
 8017a80:	d405      	bmi.n	8017a8e <_vfiprintf_r+0x2a>
 8017a82:	89ab      	ldrh	r3, [r5, #12]
 8017a84:	059a      	lsls	r2, r3, #22
 8017a86:	d402      	bmi.n	8017a8e <_vfiprintf_r+0x2a>
 8017a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a8a:	f7ff fdd2 	bl	8017632 <__retarget_lock_acquire_recursive>
 8017a8e:	89ab      	ldrh	r3, [r5, #12]
 8017a90:	071b      	lsls	r3, r3, #28
 8017a92:	d501      	bpl.n	8017a98 <_vfiprintf_r+0x34>
 8017a94:	692b      	ldr	r3, [r5, #16]
 8017a96:	b99b      	cbnz	r3, 8017ac0 <_vfiprintf_r+0x5c>
 8017a98:	4629      	mov	r1, r5
 8017a9a:	4630      	mov	r0, r6
 8017a9c:	f000 fb8a 	bl	80181b4 <__swsetup_r>
 8017aa0:	b170      	cbz	r0, 8017ac0 <_vfiprintf_r+0x5c>
 8017aa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017aa4:	07dc      	lsls	r4, r3, #31
 8017aa6:	d504      	bpl.n	8017ab2 <_vfiprintf_r+0x4e>
 8017aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017aac:	b01d      	add	sp, #116	; 0x74
 8017aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ab2:	89ab      	ldrh	r3, [r5, #12]
 8017ab4:	0598      	lsls	r0, r3, #22
 8017ab6:	d4f7      	bmi.n	8017aa8 <_vfiprintf_r+0x44>
 8017ab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017aba:	f7ff fdbb 	bl	8017634 <__retarget_lock_release_recursive>
 8017abe:	e7f3      	b.n	8017aa8 <_vfiprintf_r+0x44>
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8017ac4:	2320      	movs	r3, #32
 8017ac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017aca:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ace:	2330      	movs	r3, #48	; 0x30
 8017ad0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017c84 <_vfiprintf_r+0x220>
 8017ad4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017ad8:	f04f 0901 	mov.w	r9, #1
 8017adc:	4623      	mov	r3, r4
 8017ade:	469a      	mov	sl, r3
 8017ae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ae4:	b10a      	cbz	r2, 8017aea <_vfiprintf_r+0x86>
 8017ae6:	2a25      	cmp	r2, #37	; 0x25
 8017ae8:	d1f9      	bne.n	8017ade <_vfiprintf_r+0x7a>
 8017aea:	ebba 0b04 	subs.w	fp, sl, r4
 8017aee:	d00b      	beq.n	8017b08 <_vfiprintf_r+0xa4>
 8017af0:	465b      	mov	r3, fp
 8017af2:	4622      	mov	r2, r4
 8017af4:	4629      	mov	r1, r5
 8017af6:	4630      	mov	r0, r6
 8017af8:	f7ff ffa1 	bl	8017a3e <__sfputs_r>
 8017afc:	3001      	adds	r0, #1
 8017afe:	f000 80a9 	beq.w	8017c54 <_vfiprintf_r+0x1f0>
 8017b02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b04:	445a      	add	r2, fp
 8017b06:	9209      	str	r2, [sp, #36]	; 0x24
 8017b08:	f89a 3000 	ldrb.w	r3, [sl]
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	f000 80a1 	beq.w	8017c54 <_vfiprintf_r+0x1f0>
 8017b12:	2300      	movs	r3, #0
 8017b14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017b18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017b1c:	f10a 0a01 	add.w	sl, sl, #1
 8017b20:	9304      	str	r3, [sp, #16]
 8017b22:	9307      	str	r3, [sp, #28]
 8017b24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017b28:	931a      	str	r3, [sp, #104]	; 0x68
 8017b2a:	4654      	mov	r4, sl
 8017b2c:	2205      	movs	r2, #5
 8017b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b32:	4854      	ldr	r0, [pc, #336]	; (8017c84 <_vfiprintf_r+0x220>)
 8017b34:	f7e8 fb6c 	bl	8000210 <memchr>
 8017b38:	9a04      	ldr	r2, [sp, #16]
 8017b3a:	b9d8      	cbnz	r0, 8017b74 <_vfiprintf_r+0x110>
 8017b3c:	06d1      	lsls	r1, r2, #27
 8017b3e:	bf44      	itt	mi
 8017b40:	2320      	movmi	r3, #32
 8017b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b46:	0713      	lsls	r3, r2, #28
 8017b48:	bf44      	itt	mi
 8017b4a:	232b      	movmi	r3, #43	; 0x2b
 8017b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b50:	f89a 3000 	ldrb.w	r3, [sl]
 8017b54:	2b2a      	cmp	r3, #42	; 0x2a
 8017b56:	d015      	beq.n	8017b84 <_vfiprintf_r+0x120>
 8017b58:	9a07      	ldr	r2, [sp, #28]
 8017b5a:	4654      	mov	r4, sl
 8017b5c:	2000      	movs	r0, #0
 8017b5e:	f04f 0c0a 	mov.w	ip, #10
 8017b62:	4621      	mov	r1, r4
 8017b64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b68:	3b30      	subs	r3, #48	; 0x30
 8017b6a:	2b09      	cmp	r3, #9
 8017b6c:	d94d      	bls.n	8017c0a <_vfiprintf_r+0x1a6>
 8017b6e:	b1b0      	cbz	r0, 8017b9e <_vfiprintf_r+0x13a>
 8017b70:	9207      	str	r2, [sp, #28]
 8017b72:	e014      	b.n	8017b9e <_vfiprintf_r+0x13a>
 8017b74:	eba0 0308 	sub.w	r3, r0, r8
 8017b78:	fa09 f303 	lsl.w	r3, r9, r3
 8017b7c:	4313      	orrs	r3, r2
 8017b7e:	9304      	str	r3, [sp, #16]
 8017b80:	46a2      	mov	sl, r4
 8017b82:	e7d2      	b.n	8017b2a <_vfiprintf_r+0xc6>
 8017b84:	9b03      	ldr	r3, [sp, #12]
 8017b86:	1d19      	adds	r1, r3, #4
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	9103      	str	r1, [sp, #12]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	bfbb      	ittet	lt
 8017b90:	425b      	neglt	r3, r3
 8017b92:	f042 0202 	orrlt.w	r2, r2, #2
 8017b96:	9307      	strge	r3, [sp, #28]
 8017b98:	9307      	strlt	r3, [sp, #28]
 8017b9a:	bfb8      	it	lt
 8017b9c:	9204      	strlt	r2, [sp, #16]
 8017b9e:	7823      	ldrb	r3, [r4, #0]
 8017ba0:	2b2e      	cmp	r3, #46	; 0x2e
 8017ba2:	d10c      	bne.n	8017bbe <_vfiprintf_r+0x15a>
 8017ba4:	7863      	ldrb	r3, [r4, #1]
 8017ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8017ba8:	d134      	bne.n	8017c14 <_vfiprintf_r+0x1b0>
 8017baa:	9b03      	ldr	r3, [sp, #12]
 8017bac:	1d1a      	adds	r2, r3, #4
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	9203      	str	r2, [sp, #12]
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	bfb8      	it	lt
 8017bb6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017bba:	3402      	adds	r4, #2
 8017bbc:	9305      	str	r3, [sp, #20]
 8017bbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017c94 <_vfiprintf_r+0x230>
 8017bc2:	7821      	ldrb	r1, [r4, #0]
 8017bc4:	2203      	movs	r2, #3
 8017bc6:	4650      	mov	r0, sl
 8017bc8:	f7e8 fb22 	bl	8000210 <memchr>
 8017bcc:	b138      	cbz	r0, 8017bde <_vfiprintf_r+0x17a>
 8017bce:	9b04      	ldr	r3, [sp, #16]
 8017bd0:	eba0 000a 	sub.w	r0, r0, sl
 8017bd4:	2240      	movs	r2, #64	; 0x40
 8017bd6:	4082      	lsls	r2, r0
 8017bd8:	4313      	orrs	r3, r2
 8017bda:	3401      	adds	r4, #1
 8017bdc:	9304      	str	r3, [sp, #16]
 8017bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017be2:	4829      	ldr	r0, [pc, #164]	; (8017c88 <_vfiprintf_r+0x224>)
 8017be4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017be8:	2206      	movs	r2, #6
 8017bea:	f7e8 fb11 	bl	8000210 <memchr>
 8017bee:	2800      	cmp	r0, #0
 8017bf0:	d03f      	beq.n	8017c72 <_vfiprintf_r+0x20e>
 8017bf2:	4b26      	ldr	r3, [pc, #152]	; (8017c8c <_vfiprintf_r+0x228>)
 8017bf4:	bb1b      	cbnz	r3, 8017c3e <_vfiprintf_r+0x1da>
 8017bf6:	9b03      	ldr	r3, [sp, #12]
 8017bf8:	3307      	adds	r3, #7
 8017bfa:	f023 0307 	bic.w	r3, r3, #7
 8017bfe:	3308      	adds	r3, #8
 8017c00:	9303      	str	r3, [sp, #12]
 8017c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c04:	443b      	add	r3, r7
 8017c06:	9309      	str	r3, [sp, #36]	; 0x24
 8017c08:	e768      	b.n	8017adc <_vfiprintf_r+0x78>
 8017c0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8017c0e:	460c      	mov	r4, r1
 8017c10:	2001      	movs	r0, #1
 8017c12:	e7a6      	b.n	8017b62 <_vfiprintf_r+0xfe>
 8017c14:	2300      	movs	r3, #0
 8017c16:	3401      	adds	r4, #1
 8017c18:	9305      	str	r3, [sp, #20]
 8017c1a:	4619      	mov	r1, r3
 8017c1c:	f04f 0c0a 	mov.w	ip, #10
 8017c20:	4620      	mov	r0, r4
 8017c22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c26:	3a30      	subs	r2, #48	; 0x30
 8017c28:	2a09      	cmp	r2, #9
 8017c2a:	d903      	bls.n	8017c34 <_vfiprintf_r+0x1d0>
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d0c6      	beq.n	8017bbe <_vfiprintf_r+0x15a>
 8017c30:	9105      	str	r1, [sp, #20]
 8017c32:	e7c4      	b.n	8017bbe <_vfiprintf_r+0x15a>
 8017c34:	fb0c 2101 	mla	r1, ip, r1, r2
 8017c38:	4604      	mov	r4, r0
 8017c3a:	2301      	movs	r3, #1
 8017c3c:	e7f0      	b.n	8017c20 <_vfiprintf_r+0x1bc>
 8017c3e:	ab03      	add	r3, sp, #12
 8017c40:	9300      	str	r3, [sp, #0]
 8017c42:	462a      	mov	r2, r5
 8017c44:	4b12      	ldr	r3, [pc, #72]	; (8017c90 <_vfiprintf_r+0x22c>)
 8017c46:	a904      	add	r1, sp, #16
 8017c48:	4630      	mov	r0, r6
 8017c4a:	f3af 8000 	nop.w
 8017c4e:	4607      	mov	r7, r0
 8017c50:	1c78      	adds	r0, r7, #1
 8017c52:	d1d6      	bne.n	8017c02 <_vfiprintf_r+0x19e>
 8017c54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c56:	07d9      	lsls	r1, r3, #31
 8017c58:	d405      	bmi.n	8017c66 <_vfiprintf_r+0x202>
 8017c5a:	89ab      	ldrh	r3, [r5, #12]
 8017c5c:	059a      	lsls	r2, r3, #22
 8017c5e:	d402      	bmi.n	8017c66 <_vfiprintf_r+0x202>
 8017c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c62:	f7ff fce7 	bl	8017634 <__retarget_lock_release_recursive>
 8017c66:	89ab      	ldrh	r3, [r5, #12]
 8017c68:	065b      	lsls	r3, r3, #25
 8017c6a:	f53f af1d 	bmi.w	8017aa8 <_vfiprintf_r+0x44>
 8017c6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017c70:	e71c      	b.n	8017aac <_vfiprintf_r+0x48>
 8017c72:	ab03      	add	r3, sp, #12
 8017c74:	9300      	str	r3, [sp, #0]
 8017c76:	462a      	mov	r2, r5
 8017c78:	4b05      	ldr	r3, [pc, #20]	; (8017c90 <_vfiprintf_r+0x22c>)
 8017c7a:	a904      	add	r1, sp, #16
 8017c7c:	4630      	mov	r0, r6
 8017c7e:	f000 f879 	bl	8017d74 <_printf_i>
 8017c82:	e7e4      	b.n	8017c4e <_vfiprintf_r+0x1ea>
 8017c84:	08019220 	.word	0x08019220
 8017c88:	0801922a 	.word	0x0801922a
 8017c8c:	00000000 	.word	0x00000000
 8017c90:	08017a3f 	.word	0x08017a3f
 8017c94:	08019226 	.word	0x08019226

08017c98 <_printf_common>:
 8017c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c9c:	4616      	mov	r6, r2
 8017c9e:	4699      	mov	r9, r3
 8017ca0:	688a      	ldr	r2, [r1, #8]
 8017ca2:	690b      	ldr	r3, [r1, #16]
 8017ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017ca8:	4293      	cmp	r3, r2
 8017caa:	bfb8      	it	lt
 8017cac:	4613      	movlt	r3, r2
 8017cae:	6033      	str	r3, [r6, #0]
 8017cb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017cb4:	4607      	mov	r7, r0
 8017cb6:	460c      	mov	r4, r1
 8017cb8:	b10a      	cbz	r2, 8017cbe <_printf_common+0x26>
 8017cba:	3301      	adds	r3, #1
 8017cbc:	6033      	str	r3, [r6, #0]
 8017cbe:	6823      	ldr	r3, [r4, #0]
 8017cc0:	0699      	lsls	r1, r3, #26
 8017cc2:	bf42      	ittt	mi
 8017cc4:	6833      	ldrmi	r3, [r6, #0]
 8017cc6:	3302      	addmi	r3, #2
 8017cc8:	6033      	strmi	r3, [r6, #0]
 8017cca:	6825      	ldr	r5, [r4, #0]
 8017ccc:	f015 0506 	ands.w	r5, r5, #6
 8017cd0:	d106      	bne.n	8017ce0 <_printf_common+0x48>
 8017cd2:	f104 0a19 	add.w	sl, r4, #25
 8017cd6:	68e3      	ldr	r3, [r4, #12]
 8017cd8:	6832      	ldr	r2, [r6, #0]
 8017cda:	1a9b      	subs	r3, r3, r2
 8017cdc:	42ab      	cmp	r3, r5
 8017cde:	dc26      	bgt.n	8017d2e <_printf_common+0x96>
 8017ce0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017ce4:	1e13      	subs	r3, r2, #0
 8017ce6:	6822      	ldr	r2, [r4, #0]
 8017ce8:	bf18      	it	ne
 8017cea:	2301      	movne	r3, #1
 8017cec:	0692      	lsls	r2, r2, #26
 8017cee:	d42b      	bmi.n	8017d48 <_printf_common+0xb0>
 8017cf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017cf4:	4649      	mov	r1, r9
 8017cf6:	4638      	mov	r0, r7
 8017cf8:	47c0      	blx	r8
 8017cfa:	3001      	adds	r0, #1
 8017cfc:	d01e      	beq.n	8017d3c <_printf_common+0xa4>
 8017cfe:	6823      	ldr	r3, [r4, #0]
 8017d00:	6922      	ldr	r2, [r4, #16]
 8017d02:	f003 0306 	and.w	r3, r3, #6
 8017d06:	2b04      	cmp	r3, #4
 8017d08:	bf02      	ittt	eq
 8017d0a:	68e5      	ldreq	r5, [r4, #12]
 8017d0c:	6833      	ldreq	r3, [r6, #0]
 8017d0e:	1aed      	subeq	r5, r5, r3
 8017d10:	68a3      	ldr	r3, [r4, #8]
 8017d12:	bf0c      	ite	eq
 8017d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017d18:	2500      	movne	r5, #0
 8017d1a:	4293      	cmp	r3, r2
 8017d1c:	bfc4      	itt	gt
 8017d1e:	1a9b      	subgt	r3, r3, r2
 8017d20:	18ed      	addgt	r5, r5, r3
 8017d22:	2600      	movs	r6, #0
 8017d24:	341a      	adds	r4, #26
 8017d26:	42b5      	cmp	r5, r6
 8017d28:	d11a      	bne.n	8017d60 <_printf_common+0xc8>
 8017d2a:	2000      	movs	r0, #0
 8017d2c:	e008      	b.n	8017d40 <_printf_common+0xa8>
 8017d2e:	2301      	movs	r3, #1
 8017d30:	4652      	mov	r2, sl
 8017d32:	4649      	mov	r1, r9
 8017d34:	4638      	mov	r0, r7
 8017d36:	47c0      	blx	r8
 8017d38:	3001      	adds	r0, #1
 8017d3a:	d103      	bne.n	8017d44 <_printf_common+0xac>
 8017d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d44:	3501      	adds	r5, #1
 8017d46:	e7c6      	b.n	8017cd6 <_printf_common+0x3e>
 8017d48:	18e1      	adds	r1, r4, r3
 8017d4a:	1c5a      	adds	r2, r3, #1
 8017d4c:	2030      	movs	r0, #48	; 0x30
 8017d4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017d52:	4422      	add	r2, r4
 8017d54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017d58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017d5c:	3302      	adds	r3, #2
 8017d5e:	e7c7      	b.n	8017cf0 <_printf_common+0x58>
 8017d60:	2301      	movs	r3, #1
 8017d62:	4622      	mov	r2, r4
 8017d64:	4649      	mov	r1, r9
 8017d66:	4638      	mov	r0, r7
 8017d68:	47c0      	blx	r8
 8017d6a:	3001      	adds	r0, #1
 8017d6c:	d0e6      	beq.n	8017d3c <_printf_common+0xa4>
 8017d6e:	3601      	adds	r6, #1
 8017d70:	e7d9      	b.n	8017d26 <_printf_common+0x8e>
	...

08017d74 <_printf_i>:
 8017d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017d78:	7e0f      	ldrb	r7, [r1, #24]
 8017d7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017d7c:	2f78      	cmp	r7, #120	; 0x78
 8017d7e:	4691      	mov	r9, r2
 8017d80:	4680      	mov	r8, r0
 8017d82:	460c      	mov	r4, r1
 8017d84:	469a      	mov	sl, r3
 8017d86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017d8a:	d807      	bhi.n	8017d9c <_printf_i+0x28>
 8017d8c:	2f62      	cmp	r7, #98	; 0x62
 8017d8e:	d80a      	bhi.n	8017da6 <_printf_i+0x32>
 8017d90:	2f00      	cmp	r7, #0
 8017d92:	f000 80d4 	beq.w	8017f3e <_printf_i+0x1ca>
 8017d96:	2f58      	cmp	r7, #88	; 0x58
 8017d98:	f000 80c0 	beq.w	8017f1c <_printf_i+0x1a8>
 8017d9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017da0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017da4:	e03a      	b.n	8017e1c <_printf_i+0xa8>
 8017da6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017daa:	2b15      	cmp	r3, #21
 8017dac:	d8f6      	bhi.n	8017d9c <_printf_i+0x28>
 8017dae:	a101      	add	r1, pc, #4	; (adr r1, 8017db4 <_printf_i+0x40>)
 8017db0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017db4:	08017e0d 	.word	0x08017e0d
 8017db8:	08017e21 	.word	0x08017e21
 8017dbc:	08017d9d 	.word	0x08017d9d
 8017dc0:	08017d9d 	.word	0x08017d9d
 8017dc4:	08017d9d 	.word	0x08017d9d
 8017dc8:	08017d9d 	.word	0x08017d9d
 8017dcc:	08017e21 	.word	0x08017e21
 8017dd0:	08017d9d 	.word	0x08017d9d
 8017dd4:	08017d9d 	.word	0x08017d9d
 8017dd8:	08017d9d 	.word	0x08017d9d
 8017ddc:	08017d9d 	.word	0x08017d9d
 8017de0:	08017f25 	.word	0x08017f25
 8017de4:	08017e4d 	.word	0x08017e4d
 8017de8:	08017edf 	.word	0x08017edf
 8017dec:	08017d9d 	.word	0x08017d9d
 8017df0:	08017d9d 	.word	0x08017d9d
 8017df4:	08017f47 	.word	0x08017f47
 8017df8:	08017d9d 	.word	0x08017d9d
 8017dfc:	08017e4d 	.word	0x08017e4d
 8017e00:	08017d9d 	.word	0x08017d9d
 8017e04:	08017d9d 	.word	0x08017d9d
 8017e08:	08017ee7 	.word	0x08017ee7
 8017e0c:	682b      	ldr	r3, [r5, #0]
 8017e0e:	1d1a      	adds	r2, r3, #4
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	602a      	str	r2, [r5, #0]
 8017e14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017e1c:	2301      	movs	r3, #1
 8017e1e:	e09f      	b.n	8017f60 <_printf_i+0x1ec>
 8017e20:	6820      	ldr	r0, [r4, #0]
 8017e22:	682b      	ldr	r3, [r5, #0]
 8017e24:	0607      	lsls	r7, r0, #24
 8017e26:	f103 0104 	add.w	r1, r3, #4
 8017e2a:	6029      	str	r1, [r5, #0]
 8017e2c:	d501      	bpl.n	8017e32 <_printf_i+0xbe>
 8017e2e:	681e      	ldr	r6, [r3, #0]
 8017e30:	e003      	b.n	8017e3a <_printf_i+0xc6>
 8017e32:	0646      	lsls	r6, r0, #25
 8017e34:	d5fb      	bpl.n	8017e2e <_printf_i+0xba>
 8017e36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017e3a:	2e00      	cmp	r6, #0
 8017e3c:	da03      	bge.n	8017e46 <_printf_i+0xd2>
 8017e3e:	232d      	movs	r3, #45	; 0x2d
 8017e40:	4276      	negs	r6, r6
 8017e42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017e46:	485a      	ldr	r0, [pc, #360]	; (8017fb0 <_printf_i+0x23c>)
 8017e48:	230a      	movs	r3, #10
 8017e4a:	e012      	b.n	8017e72 <_printf_i+0xfe>
 8017e4c:	682b      	ldr	r3, [r5, #0]
 8017e4e:	6820      	ldr	r0, [r4, #0]
 8017e50:	1d19      	adds	r1, r3, #4
 8017e52:	6029      	str	r1, [r5, #0]
 8017e54:	0605      	lsls	r5, r0, #24
 8017e56:	d501      	bpl.n	8017e5c <_printf_i+0xe8>
 8017e58:	681e      	ldr	r6, [r3, #0]
 8017e5a:	e002      	b.n	8017e62 <_printf_i+0xee>
 8017e5c:	0641      	lsls	r1, r0, #25
 8017e5e:	d5fb      	bpl.n	8017e58 <_printf_i+0xe4>
 8017e60:	881e      	ldrh	r6, [r3, #0]
 8017e62:	4853      	ldr	r0, [pc, #332]	; (8017fb0 <_printf_i+0x23c>)
 8017e64:	2f6f      	cmp	r7, #111	; 0x6f
 8017e66:	bf0c      	ite	eq
 8017e68:	2308      	moveq	r3, #8
 8017e6a:	230a      	movne	r3, #10
 8017e6c:	2100      	movs	r1, #0
 8017e6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017e72:	6865      	ldr	r5, [r4, #4]
 8017e74:	60a5      	str	r5, [r4, #8]
 8017e76:	2d00      	cmp	r5, #0
 8017e78:	bfa2      	ittt	ge
 8017e7a:	6821      	ldrge	r1, [r4, #0]
 8017e7c:	f021 0104 	bicge.w	r1, r1, #4
 8017e80:	6021      	strge	r1, [r4, #0]
 8017e82:	b90e      	cbnz	r6, 8017e88 <_printf_i+0x114>
 8017e84:	2d00      	cmp	r5, #0
 8017e86:	d04b      	beq.n	8017f20 <_printf_i+0x1ac>
 8017e88:	4615      	mov	r5, r2
 8017e8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8017e8e:	fb03 6711 	mls	r7, r3, r1, r6
 8017e92:	5dc7      	ldrb	r7, [r0, r7]
 8017e94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017e98:	4637      	mov	r7, r6
 8017e9a:	42bb      	cmp	r3, r7
 8017e9c:	460e      	mov	r6, r1
 8017e9e:	d9f4      	bls.n	8017e8a <_printf_i+0x116>
 8017ea0:	2b08      	cmp	r3, #8
 8017ea2:	d10b      	bne.n	8017ebc <_printf_i+0x148>
 8017ea4:	6823      	ldr	r3, [r4, #0]
 8017ea6:	07de      	lsls	r6, r3, #31
 8017ea8:	d508      	bpl.n	8017ebc <_printf_i+0x148>
 8017eaa:	6923      	ldr	r3, [r4, #16]
 8017eac:	6861      	ldr	r1, [r4, #4]
 8017eae:	4299      	cmp	r1, r3
 8017eb0:	bfde      	ittt	le
 8017eb2:	2330      	movle	r3, #48	; 0x30
 8017eb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017eb8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8017ebc:	1b52      	subs	r2, r2, r5
 8017ebe:	6122      	str	r2, [r4, #16]
 8017ec0:	f8cd a000 	str.w	sl, [sp]
 8017ec4:	464b      	mov	r3, r9
 8017ec6:	aa03      	add	r2, sp, #12
 8017ec8:	4621      	mov	r1, r4
 8017eca:	4640      	mov	r0, r8
 8017ecc:	f7ff fee4 	bl	8017c98 <_printf_common>
 8017ed0:	3001      	adds	r0, #1
 8017ed2:	d14a      	bne.n	8017f6a <_printf_i+0x1f6>
 8017ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017ed8:	b004      	add	sp, #16
 8017eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ede:	6823      	ldr	r3, [r4, #0]
 8017ee0:	f043 0320 	orr.w	r3, r3, #32
 8017ee4:	6023      	str	r3, [r4, #0]
 8017ee6:	4833      	ldr	r0, [pc, #204]	; (8017fb4 <_printf_i+0x240>)
 8017ee8:	2778      	movs	r7, #120	; 0x78
 8017eea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017eee:	6823      	ldr	r3, [r4, #0]
 8017ef0:	6829      	ldr	r1, [r5, #0]
 8017ef2:	061f      	lsls	r7, r3, #24
 8017ef4:	f851 6b04 	ldr.w	r6, [r1], #4
 8017ef8:	d402      	bmi.n	8017f00 <_printf_i+0x18c>
 8017efa:	065f      	lsls	r7, r3, #25
 8017efc:	bf48      	it	mi
 8017efe:	b2b6      	uxthmi	r6, r6
 8017f00:	07df      	lsls	r7, r3, #31
 8017f02:	bf48      	it	mi
 8017f04:	f043 0320 	orrmi.w	r3, r3, #32
 8017f08:	6029      	str	r1, [r5, #0]
 8017f0a:	bf48      	it	mi
 8017f0c:	6023      	strmi	r3, [r4, #0]
 8017f0e:	b91e      	cbnz	r6, 8017f18 <_printf_i+0x1a4>
 8017f10:	6823      	ldr	r3, [r4, #0]
 8017f12:	f023 0320 	bic.w	r3, r3, #32
 8017f16:	6023      	str	r3, [r4, #0]
 8017f18:	2310      	movs	r3, #16
 8017f1a:	e7a7      	b.n	8017e6c <_printf_i+0xf8>
 8017f1c:	4824      	ldr	r0, [pc, #144]	; (8017fb0 <_printf_i+0x23c>)
 8017f1e:	e7e4      	b.n	8017eea <_printf_i+0x176>
 8017f20:	4615      	mov	r5, r2
 8017f22:	e7bd      	b.n	8017ea0 <_printf_i+0x12c>
 8017f24:	682b      	ldr	r3, [r5, #0]
 8017f26:	6826      	ldr	r6, [r4, #0]
 8017f28:	6961      	ldr	r1, [r4, #20]
 8017f2a:	1d18      	adds	r0, r3, #4
 8017f2c:	6028      	str	r0, [r5, #0]
 8017f2e:	0635      	lsls	r5, r6, #24
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	d501      	bpl.n	8017f38 <_printf_i+0x1c4>
 8017f34:	6019      	str	r1, [r3, #0]
 8017f36:	e002      	b.n	8017f3e <_printf_i+0x1ca>
 8017f38:	0670      	lsls	r0, r6, #25
 8017f3a:	d5fb      	bpl.n	8017f34 <_printf_i+0x1c0>
 8017f3c:	8019      	strh	r1, [r3, #0]
 8017f3e:	2300      	movs	r3, #0
 8017f40:	6123      	str	r3, [r4, #16]
 8017f42:	4615      	mov	r5, r2
 8017f44:	e7bc      	b.n	8017ec0 <_printf_i+0x14c>
 8017f46:	682b      	ldr	r3, [r5, #0]
 8017f48:	1d1a      	adds	r2, r3, #4
 8017f4a:	602a      	str	r2, [r5, #0]
 8017f4c:	681d      	ldr	r5, [r3, #0]
 8017f4e:	6862      	ldr	r2, [r4, #4]
 8017f50:	2100      	movs	r1, #0
 8017f52:	4628      	mov	r0, r5
 8017f54:	f7e8 f95c 	bl	8000210 <memchr>
 8017f58:	b108      	cbz	r0, 8017f5e <_printf_i+0x1ea>
 8017f5a:	1b40      	subs	r0, r0, r5
 8017f5c:	6060      	str	r0, [r4, #4]
 8017f5e:	6863      	ldr	r3, [r4, #4]
 8017f60:	6123      	str	r3, [r4, #16]
 8017f62:	2300      	movs	r3, #0
 8017f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017f68:	e7aa      	b.n	8017ec0 <_printf_i+0x14c>
 8017f6a:	6923      	ldr	r3, [r4, #16]
 8017f6c:	462a      	mov	r2, r5
 8017f6e:	4649      	mov	r1, r9
 8017f70:	4640      	mov	r0, r8
 8017f72:	47d0      	blx	sl
 8017f74:	3001      	adds	r0, #1
 8017f76:	d0ad      	beq.n	8017ed4 <_printf_i+0x160>
 8017f78:	6823      	ldr	r3, [r4, #0]
 8017f7a:	079b      	lsls	r3, r3, #30
 8017f7c:	d413      	bmi.n	8017fa6 <_printf_i+0x232>
 8017f7e:	68e0      	ldr	r0, [r4, #12]
 8017f80:	9b03      	ldr	r3, [sp, #12]
 8017f82:	4298      	cmp	r0, r3
 8017f84:	bfb8      	it	lt
 8017f86:	4618      	movlt	r0, r3
 8017f88:	e7a6      	b.n	8017ed8 <_printf_i+0x164>
 8017f8a:	2301      	movs	r3, #1
 8017f8c:	4632      	mov	r2, r6
 8017f8e:	4649      	mov	r1, r9
 8017f90:	4640      	mov	r0, r8
 8017f92:	47d0      	blx	sl
 8017f94:	3001      	adds	r0, #1
 8017f96:	d09d      	beq.n	8017ed4 <_printf_i+0x160>
 8017f98:	3501      	adds	r5, #1
 8017f9a:	68e3      	ldr	r3, [r4, #12]
 8017f9c:	9903      	ldr	r1, [sp, #12]
 8017f9e:	1a5b      	subs	r3, r3, r1
 8017fa0:	42ab      	cmp	r3, r5
 8017fa2:	dcf2      	bgt.n	8017f8a <_printf_i+0x216>
 8017fa4:	e7eb      	b.n	8017f7e <_printf_i+0x20a>
 8017fa6:	2500      	movs	r5, #0
 8017fa8:	f104 0619 	add.w	r6, r4, #25
 8017fac:	e7f5      	b.n	8017f9a <_printf_i+0x226>
 8017fae:	bf00      	nop
 8017fb0:	08019231 	.word	0x08019231
 8017fb4:	08019242 	.word	0x08019242

08017fb8 <__sflush_r>:
 8017fb8:	898a      	ldrh	r2, [r1, #12]
 8017fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fbe:	4605      	mov	r5, r0
 8017fc0:	0710      	lsls	r0, r2, #28
 8017fc2:	460c      	mov	r4, r1
 8017fc4:	d458      	bmi.n	8018078 <__sflush_r+0xc0>
 8017fc6:	684b      	ldr	r3, [r1, #4]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	dc05      	bgt.n	8017fd8 <__sflush_r+0x20>
 8017fcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	dc02      	bgt.n	8017fd8 <__sflush_r+0x20>
 8017fd2:	2000      	movs	r0, #0
 8017fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017fda:	2e00      	cmp	r6, #0
 8017fdc:	d0f9      	beq.n	8017fd2 <__sflush_r+0x1a>
 8017fde:	2300      	movs	r3, #0
 8017fe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017fe4:	682f      	ldr	r7, [r5, #0]
 8017fe6:	6a21      	ldr	r1, [r4, #32]
 8017fe8:	602b      	str	r3, [r5, #0]
 8017fea:	d032      	beq.n	8018052 <__sflush_r+0x9a>
 8017fec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017fee:	89a3      	ldrh	r3, [r4, #12]
 8017ff0:	075a      	lsls	r2, r3, #29
 8017ff2:	d505      	bpl.n	8018000 <__sflush_r+0x48>
 8017ff4:	6863      	ldr	r3, [r4, #4]
 8017ff6:	1ac0      	subs	r0, r0, r3
 8017ff8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017ffa:	b10b      	cbz	r3, 8018000 <__sflush_r+0x48>
 8017ffc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017ffe:	1ac0      	subs	r0, r0, r3
 8018000:	2300      	movs	r3, #0
 8018002:	4602      	mov	r2, r0
 8018004:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018006:	6a21      	ldr	r1, [r4, #32]
 8018008:	4628      	mov	r0, r5
 801800a:	47b0      	blx	r6
 801800c:	1c43      	adds	r3, r0, #1
 801800e:	89a3      	ldrh	r3, [r4, #12]
 8018010:	d106      	bne.n	8018020 <__sflush_r+0x68>
 8018012:	6829      	ldr	r1, [r5, #0]
 8018014:	291d      	cmp	r1, #29
 8018016:	d82b      	bhi.n	8018070 <__sflush_r+0xb8>
 8018018:	4a29      	ldr	r2, [pc, #164]	; (80180c0 <__sflush_r+0x108>)
 801801a:	410a      	asrs	r2, r1
 801801c:	07d6      	lsls	r6, r2, #31
 801801e:	d427      	bmi.n	8018070 <__sflush_r+0xb8>
 8018020:	2200      	movs	r2, #0
 8018022:	6062      	str	r2, [r4, #4]
 8018024:	04d9      	lsls	r1, r3, #19
 8018026:	6922      	ldr	r2, [r4, #16]
 8018028:	6022      	str	r2, [r4, #0]
 801802a:	d504      	bpl.n	8018036 <__sflush_r+0x7e>
 801802c:	1c42      	adds	r2, r0, #1
 801802e:	d101      	bne.n	8018034 <__sflush_r+0x7c>
 8018030:	682b      	ldr	r3, [r5, #0]
 8018032:	b903      	cbnz	r3, 8018036 <__sflush_r+0x7e>
 8018034:	6560      	str	r0, [r4, #84]	; 0x54
 8018036:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018038:	602f      	str	r7, [r5, #0]
 801803a:	2900      	cmp	r1, #0
 801803c:	d0c9      	beq.n	8017fd2 <__sflush_r+0x1a>
 801803e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018042:	4299      	cmp	r1, r3
 8018044:	d002      	beq.n	801804c <__sflush_r+0x94>
 8018046:	4628      	mov	r0, r5
 8018048:	f7ff fb36 	bl	80176b8 <_free_r>
 801804c:	2000      	movs	r0, #0
 801804e:	6360      	str	r0, [r4, #52]	; 0x34
 8018050:	e7c0      	b.n	8017fd4 <__sflush_r+0x1c>
 8018052:	2301      	movs	r3, #1
 8018054:	4628      	mov	r0, r5
 8018056:	47b0      	blx	r6
 8018058:	1c41      	adds	r1, r0, #1
 801805a:	d1c8      	bne.n	8017fee <__sflush_r+0x36>
 801805c:	682b      	ldr	r3, [r5, #0]
 801805e:	2b00      	cmp	r3, #0
 8018060:	d0c5      	beq.n	8017fee <__sflush_r+0x36>
 8018062:	2b1d      	cmp	r3, #29
 8018064:	d001      	beq.n	801806a <__sflush_r+0xb2>
 8018066:	2b16      	cmp	r3, #22
 8018068:	d101      	bne.n	801806e <__sflush_r+0xb6>
 801806a:	602f      	str	r7, [r5, #0]
 801806c:	e7b1      	b.n	8017fd2 <__sflush_r+0x1a>
 801806e:	89a3      	ldrh	r3, [r4, #12]
 8018070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018074:	81a3      	strh	r3, [r4, #12]
 8018076:	e7ad      	b.n	8017fd4 <__sflush_r+0x1c>
 8018078:	690f      	ldr	r7, [r1, #16]
 801807a:	2f00      	cmp	r7, #0
 801807c:	d0a9      	beq.n	8017fd2 <__sflush_r+0x1a>
 801807e:	0793      	lsls	r3, r2, #30
 8018080:	680e      	ldr	r6, [r1, #0]
 8018082:	bf08      	it	eq
 8018084:	694b      	ldreq	r3, [r1, #20]
 8018086:	600f      	str	r7, [r1, #0]
 8018088:	bf18      	it	ne
 801808a:	2300      	movne	r3, #0
 801808c:	eba6 0807 	sub.w	r8, r6, r7
 8018090:	608b      	str	r3, [r1, #8]
 8018092:	f1b8 0f00 	cmp.w	r8, #0
 8018096:	dd9c      	ble.n	8017fd2 <__sflush_r+0x1a>
 8018098:	6a21      	ldr	r1, [r4, #32]
 801809a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801809c:	4643      	mov	r3, r8
 801809e:	463a      	mov	r2, r7
 80180a0:	4628      	mov	r0, r5
 80180a2:	47b0      	blx	r6
 80180a4:	2800      	cmp	r0, #0
 80180a6:	dc06      	bgt.n	80180b6 <__sflush_r+0xfe>
 80180a8:	89a3      	ldrh	r3, [r4, #12]
 80180aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80180ae:	81a3      	strh	r3, [r4, #12]
 80180b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80180b4:	e78e      	b.n	8017fd4 <__sflush_r+0x1c>
 80180b6:	4407      	add	r7, r0
 80180b8:	eba8 0800 	sub.w	r8, r8, r0
 80180bc:	e7e9      	b.n	8018092 <__sflush_r+0xda>
 80180be:	bf00      	nop
 80180c0:	dfbffffe 	.word	0xdfbffffe

080180c4 <_fflush_r>:
 80180c4:	b538      	push	{r3, r4, r5, lr}
 80180c6:	690b      	ldr	r3, [r1, #16]
 80180c8:	4605      	mov	r5, r0
 80180ca:	460c      	mov	r4, r1
 80180cc:	b913      	cbnz	r3, 80180d4 <_fflush_r+0x10>
 80180ce:	2500      	movs	r5, #0
 80180d0:	4628      	mov	r0, r5
 80180d2:	bd38      	pop	{r3, r4, r5, pc}
 80180d4:	b118      	cbz	r0, 80180de <_fflush_r+0x1a>
 80180d6:	6a03      	ldr	r3, [r0, #32]
 80180d8:	b90b      	cbnz	r3, 80180de <_fflush_r+0x1a>
 80180da:	f7ff f873 	bl	80171c4 <__sinit>
 80180de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d0f3      	beq.n	80180ce <_fflush_r+0xa>
 80180e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80180e8:	07d0      	lsls	r0, r2, #31
 80180ea:	d404      	bmi.n	80180f6 <_fflush_r+0x32>
 80180ec:	0599      	lsls	r1, r3, #22
 80180ee:	d402      	bmi.n	80180f6 <_fflush_r+0x32>
 80180f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80180f2:	f7ff fa9e 	bl	8017632 <__retarget_lock_acquire_recursive>
 80180f6:	4628      	mov	r0, r5
 80180f8:	4621      	mov	r1, r4
 80180fa:	f7ff ff5d 	bl	8017fb8 <__sflush_r>
 80180fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018100:	07da      	lsls	r2, r3, #31
 8018102:	4605      	mov	r5, r0
 8018104:	d4e4      	bmi.n	80180d0 <_fflush_r+0xc>
 8018106:	89a3      	ldrh	r3, [r4, #12]
 8018108:	059b      	lsls	r3, r3, #22
 801810a:	d4e1      	bmi.n	80180d0 <_fflush_r+0xc>
 801810c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801810e:	f7ff fa91 	bl	8017634 <__retarget_lock_release_recursive>
 8018112:	e7dd      	b.n	80180d0 <_fflush_r+0xc>

08018114 <fiprintf>:
 8018114:	b40e      	push	{r1, r2, r3}
 8018116:	b503      	push	{r0, r1, lr}
 8018118:	4601      	mov	r1, r0
 801811a:	ab03      	add	r3, sp, #12
 801811c:	4805      	ldr	r0, [pc, #20]	; (8018134 <fiprintf+0x20>)
 801811e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018122:	6800      	ldr	r0, [r0, #0]
 8018124:	9301      	str	r3, [sp, #4]
 8018126:	f7ff fc9d 	bl	8017a64 <_vfiprintf_r>
 801812a:	b002      	add	sp, #8
 801812c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018130:	b003      	add	sp, #12
 8018132:	4770      	bx	lr
 8018134:	20000110 	.word	0x20000110

08018138 <__swbuf_r>:
 8018138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801813a:	460e      	mov	r6, r1
 801813c:	4614      	mov	r4, r2
 801813e:	4605      	mov	r5, r0
 8018140:	b118      	cbz	r0, 801814a <__swbuf_r+0x12>
 8018142:	6a03      	ldr	r3, [r0, #32]
 8018144:	b90b      	cbnz	r3, 801814a <__swbuf_r+0x12>
 8018146:	f7ff f83d 	bl	80171c4 <__sinit>
 801814a:	69a3      	ldr	r3, [r4, #24]
 801814c:	60a3      	str	r3, [r4, #8]
 801814e:	89a3      	ldrh	r3, [r4, #12]
 8018150:	071a      	lsls	r2, r3, #28
 8018152:	d525      	bpl.n	80181a0 <__swbuf_r+0x68>
 8018154:	6923      	ldr	r3, [r4, #16]
 8018156:	b31b      	cbz	r3, 80181a0 <__swbuf_r+0x68>
 8018158:	6823      	ldr	r3, [r4, #0]
 801815a:	6922      	ldr	r2, [r4, #16]
 801815c:	1a98      	subs	r0, r3, r2
 801815e:	6963      	ldr	r3, [r4, #20]
 8018160:	b2f6      	uxtb	r6, r6
 8018162:	4283      	cmp	r3, r0
 8018164:	4637      	mov	r7, r6
 8018166:	dc04      	bgt.n	8018172 <__swbuf_r+0x3a>
 8018168:	4621      	mov	r1, r4
 801816a:	4628      	mov	r0, r5
 801816c:	f7ff ffaa 	bl	80180c4 <_fflush_r>
 8018170:	b9e0      	cbnz	r0, 80181ac <__swbuf_r+0x74>
 8018172:	68a3      	ldr	r3, [r4, #8]
 8018174:	3b01      	subs	r3, #1
 8018176:	60a3      	str	r3, [r4, #8]
 8018178:	6823      	ldr	r3, [r4, #0]
 801817a:	1c5a      	adds	r2, r3, #1
 801817c:	6022      	str	r2, [r4, #0]
 801817e:	701e      	strb	r6, [r3, #0]
 8018180:	6962      	ldr	r2, [r4, #20]
 8018182:	1c43      	adds	r3, r0, #1
 8018184:	429a      	cmp	r2, r3
 8018186:	d004      	beq.n	8018192 <__swbuf_r+0x5a>
 8018188:	89a3      	ldrh	r3, [r4, #12]
 801818a:	07db      	lsls	r3, r3, #31
 801818c:	d506      	bpl.n	801819c <__swbuf_r+0x64>
 801818e:	2e0a      	cmp	r6, #10
 8018190:	d104      	bne.n	801819c <__swbuf_r+0x64>
 8018192:	4621      	mov	r1, r4
 8018194:	4628      	mov	r0, r5
 8018196:	f7ff ff95 	bl	80180c4 <_fflush_r>
 801819a:	b938      	cbnz	r0, 80181ac <__swbuf_r+0x74>
 801819c:	4638      	mov	r0, r7
 801819e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181a0:	4621      	mov	r1, r4
 80181a2:	4628      	mov	r0, r5
 80181a4:	f000 f806 	bl	80181b4 <__swsetup_r>
 80181a8:	2800      	cmp	r0, #0
 80181aa:	d0d5      	beq.n	8018158 <__swbuf_r+0x20>
 80181ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80181b0:	e7f4      	b.n	801819c <__swbuf_r+0x64>
	...

080181b4 <__swsetup_r>:
 80181b4:	b538      	push	{r3, r4, r5, lr}
 80181b6:	4b2a      	ldr	r3, [pc, #168]	; (8018260 <__swsetup_r+0xac>)
 80181b8:	4605      	mov	r5, r0
 80181ba:	6818      	ldr	r0, [r3, #0]
 80181bc:	460c      	mov	r4, r1
 80181be:	b118      	cbz	r0, 80181c8 <__swsetup_r+0x14>
 80181c0:	6a03      	ldr	r3, [r0, #32]
 80181c2:	b90b      	cbnz	r3, 80181c8 <__swsetup_r+0x14>
 80181c4:	f7fe fffe 	bl	80171c4 <__sinit>
 80181c8:	89a3      	ldrh	r3, [r4, #12]
 80181ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80181ce:	0718      	lsls	r0, r3, #28
 80181d0:	d422      	bmi.n	8018218 <__swsetup_r+0x64>
 80181d2:	06d9      	lsls	r1, r3, #27
 80181d4:	d407      	bmi.n	80181e6 <__swsetup_r+0x32>
 80181d6:	2309      	movs	r3, #9
 80181d8:	602b      	str	r3, [r5, #0]
 80181da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80181de:	81a3      	strh	r3, [r4, #12]
 80181e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80181e4:	e034      	b.n	8018250 <__swsetup_r+0x9c>
 80181e6:	0758      	lsls	r0, r3, #29
 80181e8:	d512      	bpl.n	8018210 <__swsetup_r+0x5c>
 80181ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80181ec:	b141      	cbz	r1, 8018200 <__swsetup_r+0x4c>
 80181ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80181f2:	4299      	cmp	r1, r3
 80181f4:	d002      	beq.n	80181fc <__swsetup_r+0x48>
 80181f6:	4628      	mov	r0, r5
 80181f8:	f7ff fa5e 	bl	80176b8 <_free_r>
 80181fc:	2300      	movs	r3, #0
 80181fe:	6363      	str	r3, [r4, #52]	; 0x34
 8018200:	89a3      	ldrh	r3, [r4, #12]
 8018202:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018206:	81a3      	strh	r3, [r4, #12]
 8018208:	2300      	movs	r3, #0
 801820a:	6063      	str	r3, [r4, #4]
 801820c:	6923      	ldr	r3, [r4, #16]
 801820e:	6023      	str	r3, [r4, #0]
 8018210:	89a3      	ldrh	r3, [r4, #12]
 8018212:	f043 0308 	orr.w	r3, r3, #8
 8018216:	81a3      	strh	r3, [r4, #12]
 8018218:	6923      	ldr	r3, [r4, #16]
 801821a:	b94b      	cbnz	r3, 8018230 <__swsetup_r+0x7c>
 801821c:	89a3      	ldrh	r3, [r4, #12]
 801821e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018226:	d003      	beq.n	8018230 <__swsetup_r+0x7c>
 8018228:	4621      	mov	r1, r4
 801822a:	4628      	mov	r0, r5
 801822c:	f000 f847 	bl	80182be <__smakebuf_r>
 8018230:	89a0      	ldrh	r0, [r4, #12]
 8018232:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018236:	f010 0301 	ands.w	r3, r0, #1
 801823a:	d00a      	beq.n	8018252 <__swsetup_r+0x9e>
 801823c:	2300      	movs	r3, #0
 801823e:	60a3      	str	r3, [r4, #8]
 8018240:	6963      	ldr	r3, [r4, #20]
 8018242:	425b      	negs	r3, r3
 8018244:	61a3      	str	r3, [r4, #24]
 8018246:	6923      	ldr	r3, [r4, #16]
 8018248:	b943      	cbnz	r3, 801825c <__swsetup_r+0xa8>
 801824a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801824e:	d1c4      	bne.n	80181da <__swsetup_r+0x26>
 8018250:	bd38      	pop	{r3, r4, r5, pc}
 8018252:	0781      	lsls	r1, r0, #30
 8018254:	bf58      	it	pl
 8018256:	6963      	ldrpl	r3, [r4, #20]
 8018258:	60a3      	str	r3, [r4, #8]
 801825a:	e7f4      	b.n	8018246 <__swsetup_r+0x92>
 801825c:	2000      	movs	r0, #0
 801825e:	e7f7      	b.n	8018250 <__swsetup_r+0x9c>
 8018260:	20000110 	.word	0x20000110

08018264 <abort>:
 8018264:	b508      	push	{r3, lr}
 8018266:	2006      	movs	r0, #6
 8018268:	f000 f88e 	bl	8018388 <raise>
 801826c:	2001      	movs	r0, #1
 801826e:	f7ea fd0d 	bl	8002c8c <_exit>

08018272 <__swhatbuf_r>:
 8018272:	b570      	push	{r4, r5, r6, lr}
 8018274:	460c      	mov	r4, r1
 8018276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801827a:	2900      	cmp	r1, #0
 801827c:	b096      	sub	sp, #88	; 0x58
 801827e:	4615      	mov	r5, r2
 8018280:	461e      	mov	r6, r3
 8018282:	da0d      	bge.n	80182a0 <__swhatbuf_r+0x2e>
 8018284:	89a3      	ldrh	r3, [r4, #12]
 8018286:	f013 0f80 	tst.w	r3, #128	; 0x80
 801828a:	f04f 0100 	mov.w	r1, #0
 801828e:	bf0c      	ite	eq
 8018290:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018294:	2340      	movne	r3, #64	; 0x40
 8018296:	2000      	movs	r0, #0
 8018298:	6031      	str	r1, [r6, #0]
 801829a:	602b      	str	r3, [r5, #0]
 801829c:	b016      	add	sp, #88	; 0x58
 801829e:	bd70      	pop	{r4, r5, r6, pc}
 80182a0:	466a      	mov	r2, sp
 80182a2:	f000 f879 	bl	8018398 <_fstat_r>
 80182a6:	2800      	cmp	r0, #0
 80182a8:	dbec      	blt.n	8018284 <__swhatbuf_r+0x12>
 80182aa:	9901      	ldr	r1, [sp, #4]
 80182ac:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80182b0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80182b4:	4259      	negs	r1, r3
 80182b6:	4159      	adcs	r1, r3
 80182b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80182bc:	e7eb      	b.n	8018296 <__swhatbuf_r+0x24>

080182be <__smakebuf_r>:
 80182be:	898b      	ldrh	r3, [r1, #12]
 80182c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80182c2:	079d      	lsls	r5, r3, #30
 80182c4:	4606      	mov	r6, r0
 80182c6:	460c      	mov	r4, r1
 80182c8:	d507      	bpl.n	80182da <__smakebuf_r+0x1c>
 80182ca:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80182ce:	6023      	str	r3, [r4, #0]
 80182d0:	6123      	str	r3, [r4, #16]
 80182d2:	2301      	movs	r3, #1
 80182d4:	6163      	str	r3, [r4, #20]
 80182d6:	b002      	add	sp, #8
 80182d8:	bd70      	pop	{r4, r5, r6, pc}
 80182da:	ab01      	add	r3, sp, #4
 80182dc:	466a      	mov	r2, sp
 80182de:	f7ff ffc8 	bl	8018272 <__swhatbuf_r>
 80182e2:	9900      	ldr	r1, [sp, #0]
 80182e4:	4605      	mov	r5, r0
 80182e6:	4630      	mov	r0, r6
 80182e8:	f7fe fd34 	bl	8016d54 <_malloc_r>
 80182ec:	b948      	cbnz	r0, 8018302 <__smakebuf_r+0x44>
 80182ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182f2:	059a      	lsls	r2, r3, #22
 80182f4:	d4ef      	bmi.n	80182d6 <__smakebuf_r+0x18>
 80182f6:	f023 0303 	bic.w	r3, r3, #3
 80182fa:	f043 0302 	orr.w	r3, r3, #2
 80182fe:	81a3      	strh	r3, [r4, #12]
 8018300:	e7e3      	b.n	80182ca <__smakebuf_r+0xc>
 8018302:	89a3      	ldrh	r3, [r4, #12]
 8018304:	6020      	str	r0, [r4, #0]
 8018306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801830a:	81a3      	strh	r3, [r4, #12]
 801830c:	9b00      	ldr	r3, [sp, #0]
 801830e:	6163      	str	r3, [r4, #20]
 8018310:	9b01      	ldr	r3, [sp, #4]
 8018312:	6120      	str	r0, [r4, #16]
 8018314:	b15b      	cbz	r3, 801832e <__smakebuf_r+0x70>
 8018316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801831a:	4630      	mov	r0, r6
 801831c:	f000 f84e 	bl	80183bc <_isatty_r>
 8018320:	b128      	cbz	r0, 801832e <__smakebuf_r+0x70>
 8018322:	89a3      	ldrh	r3, [r4, #12]
 8018324:	f023 0303 	bic.w	r3, r3, #3
 8018328:	f043 0301 	orr.w	r3, r3, #1
 801832c:	81a3      	strh	r3, [r4, #12]
 801832e:	89a3      	ldrh	r3, [r4, #12]
 8018330:	431d      	orrs	r5, r3
 8018332:	81a5      	strh	r5, [r4, #12]
 8018334:	e7cf      	b.n	80182d6 <__smakebuf_r+0x18>

08018336 <_raise_r>:
 8018336:	291f      	cmp	r1, #31
 8018338:	b538      	push	{r3, r4, r5, lr}
 801833a:	4604      	mov	r4, r0
 801833c:	460d      	mov	r5, r1
 801833e:	d904      	bls.n	801834a <_raise_r+0x14>
 8018340:	2316      	movs	r3, #22
 8018342:	6003      	str	r3, [r0, #0]
 8018344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018348:	bd38      	pop	{r3, r4, r5, pc}
 801834a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801834c:	b112      	cbz	r2, 8018354 <_raise_r+0x1e>
 801834e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018352:	b94b      	cbnz	r3, 8018368 <_raise_r+0x32>
 8018354:	4620      	mov	r0, r4
 8018356:	f000 f853 	bl	8018400 <_getpid_r>
 801835a:	462a      	mov	r2, r5
 801835c:	4601      	mov	r1, r0
 801835e:	4620      	mov	r0, r4
 8018360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018364:	f000 b83a 	b.w	80183dc <_kill_r>
 8018368:	2b01      	cmp	r3, #1
 801836a:	d00a      	beq.n	8018382 <_raise_r+0x4c>
 801836c:	1c59      	adds	r1, r3, #1
 801836e:	d103      	bne.n	8018378 <_raise_r+0x42>
 8018370:	2316      	movs	r3, #22
 8018372:	6003      	str	r3, [r0, #0]
 8018374:	2001      	movs	r0, #1
 8018376:	e7e7      	b.n	8018348 <_raise_r+0x12>
 8018378:	2400      	movs	r4, #0
 801837a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801837e:	4628      	mov	r0, r5
 8018380:	4798      	blx	r3
 8018382:	2000      	movs	r0, #0
 8018384:	e7e0      	b.n	8018348 <_raise_r+0x12>
	...

08018388 <raise>:
 8018388:	4b02      	ldr	r3, [pc, #8]	; (8018394 <raise+0xc>)
 801838a:	4601      	mov	r1, r0
 801838c:	6818      	ldr	r0, [r3, #0]
 801838e:	f7ff bfd2 	b.w	8018336 <_raise_r>
 8018392:	bf00      	nop
 8018394:	20000110 	.word	0x20000110

08018398 <_fstat_r>:
 8018398:	b538      	push	{r3, r4, r5, lr}
 801839a:	4d07      	ldr	r5, [pc, #28]	; (80183b8 <_fstat_r+0x20>)
 801839c:	2300      	movs	r3, #0
 801839e:	4604      	mov	r4, r0
 80183a0:	4608      	mov	r0, r1
 80183a2:	4611      	mov	r1, r2
 80183a4:	602b      	str	r3, [r5, #0]
 80183a6:	f7ea fcc0 	bl	8002d2a <_fstat>
 80183aa:	1c43      	adds	r3, r0, #1
 80183ac:	d102      	bne.n	80183b4 <_fstat_r+0x1c>
 80183ae:	682b      	ldr	r3, [r5, #0]
 80183b0:	b103      	cbz	r3, 80183b4 <_fstat_r+0x1c>
 80183b2:	6023      	str	r3, [r4, #0]
 80183b4:	bd38      	pop	{r3, r4, r5, pc}
 80183b6:	bf00      	nop
 80183b8:	20010e40 	.word	0x20010e40

080183bc <_isatty_r>:
 80183bc:	b538      	push	{r3, r4, r5, lr}
 80183be:	4d06      	ldr	r5, [pc, #24]	; (80183d8 <_isatty_r+0x1c>)
 80183c0:	2300      	movs	r3, #0
 80183c2:	4604      	mov	r4, r0
 80183c4:	4608      	mov	r0, r1
 80183c6:	602b      	str	r3, [r5, #0]
 80183c8:	f7ea fcbf 	bl	8002d4a <_isatty>
 80183cc:	1c43      	adds	r3, r0, #1
 80183ce:	d102      	bne.n	80183d6 <_isatty_r+0x1a>
 80183d0:	682b      	ldr	r3, [r5, #0]
 80183d2:	b103      	cbz	r3, 80183d6 <_isatty_r+0x1a>
 80183d4:	6023      	str	r3, [r4, #0]
 80183d6:	bd38      	pop	{r3, r4, r5, pc}
 80183d8:	20010e40 	.word	0x20010e40

080183dc <_kill_r>:
 80183dc:	b538      	push	{r3, r4, r5, lr}
 80183de:	4d07      	ldr	r5, [pc, #28]	; (80183fc <_kill_r+0x20>)
 80183e0:	2300      	movs	r3, #0
 80183e2:	4604      	mov	r4, r0
 80183e4:	4608      	mov	r0, r1
 80183e6:	4611      	mov	r1, r2
 80183e8:	602b      	str	r3, [r5, #0]
 80183ea:	f7ea fc3f 	bl	8002c6c <_kill>
 80183ee:	1c43      	adds	r3, r0, #1
 80183f0:	d102      	bne.n	80183f8 <_kill_r+0x1c>
 80183f2:	682b      	ldr	r3, [r5, #0]
 80183f4:	b103      	cbz	r3, 80183f8 <_kill_r+0x1c>
 80183f6:	6023      	str	r3, [r4, #0]
 80183f8:	bd38      	pop	{r3, r4, r5, pc}
 80183fa:	bf00      	nop
 80183fc:	20010e40 	.word	0x20010e40

08018400 <_getpid_r>:
 8018400:	f7ea bc2c 	b.w	8002c5c <_getpid>

08018404 <_init>:
 8018404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018406:	bf00      	nop
 8018408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801840a:	bc08      	pop	{r3}
 801840c:	469e      	mov	lr, r3
 801840e:	4770      	bx	lr

08018410 <_fini>:
 8018410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018412:	bf00      	nop
 8018414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018416:	bc08      	pop	{r3}
 8018418:	469e      	mov	lr, r3
 801841a:	4770      	bx	lr
